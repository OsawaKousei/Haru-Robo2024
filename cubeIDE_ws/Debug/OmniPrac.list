
OmniPrac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023ed8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c9c  080240d8  080240d8  000340d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025d74  08025d74  000408e8  2**0
                  CONTENTS
  4 .ARM          00000008  08025d74  08025d74  00035d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025d7c  08025d7c  000408e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08025d7c  08025d7c  00035d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025d90  08025d90  00035d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008e8  20000000  08025d94  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016590  200008e8  0802667c  000408e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20016e78  0802667c  00046e78  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000408e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040916  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ebbf  00000000  00000000  0004098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c24  00000000  00000000  0006f54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002248  00000000  00000000  00076170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a44  00000000  00000000  000783b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032274  00000000  00000000  00079dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d698  00000000  00000000  000ac070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001198fa  00000000  00000000  000d9708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a470  00000000  00000000  001f3004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001fd474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200008e8 	.word	0x200008e8
 800021c:	00000000 	.word	0x00000000
 8000220:	080240c0 	.word	0x080240c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200008ec 	.word	0x200008ec
 800023c:	080240c0 	.word	0x080240c0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a6:	f000 b9f3 	b.w	8000a90 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3304      	adds	r3, #4
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <PushTx8Bytes+0x52>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	7808      	ldrb	r0, [r1, #0]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d8ea      	bhi.n	8000ac4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <PushTx8Bytes+0x70>
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <PushTx8Bytes+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b02:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b10:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d102      	bne.n	8000b24 <PushTx8Bytes+0x90>
		isfull = 1;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20002bdc 	.word	0x20002bdc
 8000b38:	20000bd8 	.word	0x20000bd8
 8000b3c:	20002be0 	.word	0x20002be0
 8000b40:	20002bd8 	.word	0x20002bd8

08000b44 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000b4e:	2304      	movs	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000b56:	e035      	b.n	8000bc4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <PopSendTx8Bytes+0x28>
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <PopSendTx8Bytes+0xa8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d034      	beq.n	8000bd6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3308      	adds	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b98:	441a      	add	r2, r3
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f003 fa95 	bl	80040cc <HAL_CAN_AddTxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PopSendTx8Bytes+0x6c>
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	e014      	b.n	8000bda <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fb4f 	bl	800426c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c1      	bne.n	8000b58 <PopSendTx8Bytes+0x14>
 8000bd4:	e000      	b.n	8000bd8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000bd6:	bf00      	nop
	}

	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002be0 	.word	0x20002be0
 8000be8:	20002bd8 	.word	0x20002bd8
 8000bec:	20002bdc 	.word	0x20002bdc
 8000bf0:	20000bd8 	.word	0x20000bd8
 8000bf4:	20000904 	.word	0x20000904

08000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000bfc:	f7ff ffa2 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000c08:	f7ff ff9c 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c14:	b08e      	sub	sp, #56	; 0x38
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 fb55 	bl	80042d6 <HAL_CAN_GetRxMessage>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000c32:	486e      	ldr	r0, [pc, #440]	; (8000dec <WhenCANRxFifo0MsgPending+0x1dc>)
 8000c34:	f01f fd9a 	bl	802076c <iprintf>
		Error_Handler();
 8000c38:	f002 fa63 	bl	8003102 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4698      	mov	r8, r3
 8000c42:	4691      	mov	r9, r2
 8000c44:	4640      	mov	r0, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	f000 feb6 	bl	80019b8 <Extract_CAN_Device>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	733a      	strb	r2, [r7, #12]
 8000c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c56:	737a      	strb	r2, [r7, #13]
 8000c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2200      	movs	r2, #0
 8000c62:	461c      	mov	r4, r3
 8000c64:	4615      	mov	r5, r2
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 fef1 	bl	8001a50 <Extract_CAN_CMD>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d139      	bne.n	8000cf0 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c82:	e013      	b.n	8000cac <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8c:	4958      	ldr	r1, [pc, #352]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f000 80a0 	beq.w	8000de2 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	461c      	mov	r4, r3
 8000cca:	7c38      	ldrb	r0, [r7, #16]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000cce:	460b      	mov	r3, r1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4423      	add	r3, r4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	7b3a      	ldrb	r2, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e04a      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d146      	bne.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	7bba      	ldrb	r2, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb03      	ldmia	r3!, {r0, r1}
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	6051      	str	r1, [r2, #4]
 8000d18:	e035      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10d      	bne.n	8000d3c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <WhenCANRxFifo0MsgPending+0x1ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	cb03      	ldmia	r3!, {r0, r1}
 8000d36:	6010      	str	r0, [r2, #0]
 8000d38:	6051      	str	r1, [r2, #4]
 8000d3a:	e024      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10d      	bne.n	8000d5e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	cb03      	ldmia	r3!, {r0, r1}
 8000d58:	6010      	str	r0, [r2, #0]
 8000d5a:	6051      	str	r1, [r2, #4]
 8000d5c:	e013      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d10d      	bne.n	8000d80 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	cb03      	ldmia	r3!, {r0, r1}
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	6051      	str	r1, [r2, #4]
 8000d7e:	e002      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000d82:	f01f fcf3 	bl	802076c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d128      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d122      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000da0:	78da      	ldrb	r2, [r3, #3]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d11c      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000db8:	795a      	ldrb	r2, [r3, #5]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d110      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dc4:	799a      	ldrb	r2, [r3, #6]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10a      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dd0:	7a1a      	ldrb	r2, [r3, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	080240d8 	.word	0x080240d8
 8000df0:	20000918 	.word	0x20000918
 8000df4:	2000090c 	.word	0x2000090c
 8000df8:	20000958 	.word	0x20000958
 8000dfc:	200009f8 	.word	0x200009f8
 8000e00:	20000a98 	.word	0x20000a98
 8000e04:	20000b38 	.word	0x20000b38
 8000e08:	080240f0 	.word	0x080240f0
 8000e0c:	20000908 	.word	0x20000908

08000e10 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e015      	b.n	8000e5e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe27 	bl	8000a94 <PushTx8Bytes>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <SendBytes+0x48>
			Error_Handler();
 8000e50:	f002 f957 	bl	8003102 <Error_Handler>
			return ret;
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	e027      	b.n	8000ea8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8e5      	bhi.n	8000e32 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fe0b 	bl	8000a94 <PushTx8Bytes>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <SendBytes+0x80>
			Error_Handler();
 8000e88:	f002 f93b 	bl	8003102 <Error_Handler>
			return ret;
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	e00b      	b.n	8000ea8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 8000e90:	f7ff fe58 	bl	8000b44 <PopSendTx8Bytes>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <SendBytes+0x96>
		Error_Handler();
 8000e9e:	f002 f930 	bl	8003102 <Error_Handler>
		return ret;
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	e000      	b.n	8000ea8 <SendBytes+0x98>
	}

	return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <CAN_SystemInit+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN_SystemInit+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000eca:	e029      	b.n	8000f20 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <CAN_SystemInit+0x38>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000edc:	e017      	b.n	8000f0e <CAN_SystemInit+0x5e>
 8000ede:	bf00      	nop
 8000ee0:	20000904 	.word	0x20000904
 8000ee4:	20000908 	.word	0x20000908
 8000ee8:	2000090c 	.word	0x2000090c
			node_id_list[type][i] = 0xff;
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ef4:	48d7      	ldr	r0, [pc, #860]	; (8001254 <CAN_SystemInit+0x3a4>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d9ea      	bls.n	8000eec <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d9d1      	bls.n	8000ecc <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fd09 	bl	800195e <Make_CAN_ID>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	0b42      	lsrs	r2, r0, #13
 8000f56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f5a:	0b4b      	lsrs	r3, r1, #13
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000f60:	231f      	movs	r3, #31
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fcf9 	bl	800195e <Make_CAN_ID>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0b42      	lsrs	r2, r0, #13
 8000f76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f7a:	0b4b      	lsrs	r3, r1, #13
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fce9 	bl	800195e <Make_CAN_ID>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4613      	mov	r3, r2
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fcd9 	bl	800195e <Make_CAN_ID>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <CAN_SystemInit+0x3a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 ff4e 	bl	8003e6c <HAL_CAN_ConfigFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000fd6:	f002 f894 	bl	8003102 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fcba 	bl	800195e <Make_CAN_ID>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	0b42      	lsrs	r2, r0, #13
 8000ff4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ff8:	0b4b      	lsrs	r3, r1, #13
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000ffe:	231f      	movs	r3, #31
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2002      	movs	r0, #2
 8001006:	f000 fcaa 	bl	800195e <Make_CAN_ID>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	0b42      	lsrs	r2, r0, #13
 8001014:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001018:	0b4b      	lsrs	r3, r1, #13
 800101a:	4613      	mov	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fc9a 	bl	800195e <Make_CAN_ID>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4613      	mov	r3, r2
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001036:	4013      	ands	r3, r2
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800103e:	231f      	movs	r3, #31
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2002      	movs	r0, #2
 8001046:	f000 fc8a 	bl	800195e <Make_CAN_ID>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4613      	mov	r3, r2
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001056:	4013      	ands	r3, r2
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <CAN_SystemInit+0x3a8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f002 feff 	bl	8003e6c <HAL_CAN_ConfigFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8001074:	f002 f845 	bl	8003102 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2003      	movs	r0, #3
 8001084:	f000 fc6b 	bl	800195e <Make_CAN_ID>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	0b42      	lsrs	r2, r0, #13
 8001092:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001096:	0b4b      	lsrs	r3, r1, #13
 8001098:	4613      	mov	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 800109c:	231f      	movs	r3, #31
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 fc5b 	bl	800195e <Make_CAN_ID>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	0b42      	lsrs	r2, r0, #13
 80010b2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010b6:	0b4b      	lsrs	r3, r1, #13
 80010b8:	4613      	mov	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 fc4b 	bl	800195e <Make_CAN_ID>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d4:	4013      	ands	r3, r2
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010dc:	231f      	movs	r3, #31
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fc3b 	bl	800195e <Make_CAN_ID>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010f4:	4013      	ands	r3, r2
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <CAN_SystemInit+0x3a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f002 feb0 	bl	8003e6c <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8001112:	f001 fff6 	bl	8003102 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fc1c 	bl	800195e <Make_CAN_ID>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0b42      	lsrs	r2, r0, #13
 8001130:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001134:	0b4b      	lsrs	r3, r1, #13
 8001136:	4613      	mov	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 800113a:	231f      	movs	r3, #31
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fc0c 	bl	800195e <Make_CAN_ID>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0b42      	lsrs	r2, r0, #13
 8001150:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001154:	0b4b      	lsrs	r3, r1, #13
 8001156:	4613      	mov	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 800115a:	2301      	movs	r3, #1
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fbfc 	bl	800195e <Make_CAN_ID>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4613      	mov	r3, r2
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001172:	4013      	ands	r3, r2
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800117a:	231f      	movs	r3, #31
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fbec 	bl	800195e <Make_CAN_ID>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4613      	mov	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001192:	4013      	ands	r3, r2
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <CAN_SystemInit+0x3a8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fe61 	bl	8003e6c <HAL_CAN_ConfigFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 80011b0:	f001 ffa7 	bl	8003102 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2004      	movs	r0, #4
 80011c0:	f000 fbcd 	bl	800195e <Make_CAN_ID>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	0b42      	lsrs	r2, r0, #13
 80011ce:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011d2:	0b4b      	lsrs	r3, r1, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 80011d8:	231f      	movs	r3, #31
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2004      	movs	r0, #4
 80011e0:	f000 fbbd 	bl	800195e <Make_CAN_ID>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0b42      	lsrs	r2, r0, #13
 80011ee:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011f2:	0b4b      	lsrs	r3, r1, #13
 80011f4:	4613      	mov	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2004      	movs	r0, #4
 8001200:	f000 fbad 	bl	800195e <Make_CAN_ID>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4613      	mov	r3, r2
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001218:	231f      	movs	r3, #31
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fb9d 	bl	800195e <Make_CAN_ID>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4613      	mov	r3, r2
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	4013      	ands	r3, r2
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <CAN_SystemInit+0x3a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f002 fe12 	bl	8003e6c <HAL_CAN_ConfigFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800124e:	f001 ff58 	bl	8003102 <Error_Handler>
 8001252:	e003      	b.n	800125c <CAN_SystemInit+0x3ac>
 8001254:	20000918 	.word	0x20000918
 8001258:	20000904 	.word	0x20000904
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fb79 	bl	800195e <Make_CAN_ID>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0b42      	lsrs	r2, r0, #13
 8001276:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800127a:	0b4b      	lsrs	r3, r1, #13
 800127c:	4613      	mov	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001280:	231f      	movs	r3, #31
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fb69 	bl	800195e <Make_CAN_ID>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0b42      	lsrs	r2, r0, #13
 8001296:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800129a:	0b4b      	lsrs	r3, r1, #13
 800129c:	4613      	mov	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fb59 	bl	800195e <Make_CAN_ID>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012b8:	4013      	ands	r3, r2
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80012c0:	231f      	movs	r3, #31
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fb49 	bl	800195e <Make_CAN_ID>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <CAN_SystemInit+0x544>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fdbe 	bl	8003e6c <HAL_CAN_ConfigFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80012f6:	f001 ff04 	bl	8003102 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 80012fa:	2306      	movs	r3, #6
 80012fc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2006      	movs	r0, #6
 8001306:	f000 fb2a 	bl	800195e <Make_CAN_ID>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0b42      	lsrs	r2, r0, #13
 8001314:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001318:	0b4b      	lsrs	r3, r1, #13
 800131a:	4613      	mov	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 800131e:	231f      	movs	r3, #31
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fb1a 	bl	800195e <Make_CAN_ID>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	0b42      	lsrs	r2, r0, #13
 8001334:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001338:	0b4b      	lsrs	r3, r1, #13
 800133a:	4613      	mov	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f000 fb0a 	bl	800195e <Make_CAN_ID>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4613      	mov	r3, r2
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001356:	4013      	ands	r3, r2
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800135e:	231f      	movs	r3, #31
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fafa 	bl	800195e <Make_CAN_ID>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001376:	4013      	ands	r3, r2
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <CAN_SystemInit+0x544>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fd6f 	bl	8003e6c <HAL_CAN_ConfigFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001394:	f001 feb5 	bl	8003102 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <CAN_SystemInit+0x544>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fe51 	bl	8004044 <HAL_CAN_Start>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <CAN_SystemInit+0x548>)
 80013aa:	f01f fa45 	bl	8020838 <puts>
		Error_Handler();
 80013ae:	f001 fea8 	bl	8003102 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <CAN_SystemInit+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 f89e 	bl	80044fa <HAL_CAN_ActivateNotification>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <CAN_SystemInit+0x54c>)
 80013c6:	f01f f9d1 	bl	802076c <iprintf>
		Error_Handler();
 80013ca:	f001 fe9a 	bl	8003102 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <CAN_SystemInit+0x544>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 f890 	bl	80044fa <HAL_CAN_ActivateNotification>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <CAN_SystemInit+0x54c>)
 80013e2:	f01f f9c3 	bl	802076c <iprintf>
		Error_Handler();
 80013e6:	f001 fe8c 	bl	8003102 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000904 	.word	0x20000904
 80013f8:	080240f8 	.word	0x080240f8
 80013fc:	08024108 	.word	0x08024108

08001400 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8001408:	e006      	b.n	8001418 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <CAN_WaitConnect+0x13c>)
 800140c:	f01f f9ae 	bl	802076c <iprintf>
		HAL_Delay(500);
 8001410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001414:	f002 fc0a 	bl	8003c2c <HAL_Delay>
	while (all_node_detected == 0){
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <CAN_WaitConnect+0x140>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00a      	b.n	800143e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <CAN_WaitConnect+0x144>)
 800142c:	4413      	add	r3, r2
 800142e:	79db      	ldrb	r3, [r3, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <CAN_WaitConnect+0x148>)
 8001434:	f01f f99a 	bl	802076c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ef      	bcc.n	8001428 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e00a      	b.n	8001464 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <CAN_WaitConnect+0x144>)
 8001452:	4413      	add	r3, r2
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <CAN_WaitConnect+0x14c>)
 800145a:	f01f f987 	bl	802076c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	7bba      	ldrb	r2, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ef      	bcc.n	800144e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	e00a      	b.n	800148a <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <CAN_WaitConnect+0x144>)
 8001478:	4413      	add	r3, r2
 800147a:	7d5b      	ldrb	r3, [r3, #21]
 800147c:	4619      	mov	r1, r3
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <CAN_WaitConnect+0x150>)
 8001480:	f01f f974 	bl	802076c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	3301      	adds	r3, #1
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	7b7a      	ldrb	r2, [r7, #13]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ef      	bcc.n	8001474 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e00b      	b.n	80014b2 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <CAN_WaitConnect+0x144>)
 800149e:	4413      	add	r3, r2
 80014a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014a4:	4619      	mov	r1, r3
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <CAN_WaitConnect+0x154>)
 80014a8:	f01f f960 	bl	802076c <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	7b3a      	ldrb	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ee      	bcc.n	800149a <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	e00a      	b.n	80014d8 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <CAN_WaitConnect+0x144>)
 80014c6:	4413      	add	r3, r2
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <CAN_WaitConnect+0x158>)
 80014ce:	f01f f94d 	bl	802076c <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3301      	adds	r3, #1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3ef      	bcc.n	80014c2 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	72bb      	strb	r3, [r7, #10]
 80014e6:	e00b      	b.n	8001500 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <CAN_WaitConnect+0x144>)
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <CAN_WaitConnect+0x15c>)
 80014f6:	f01f f939 	bl	802076c <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	3301      	adds	r3, #1
 80014fe:	72bb      	strb	r3, [r7, #10]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ee      	bcc.n	80014e8 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	e00b      	b.n	8001528 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <CAN_WaitConnect+0x144>)
 8001514:	4413      	add	r3, r2
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <CAN_WaitConnect+0x160>)
 800151e:	f01f f925 	bl	802076c <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	3301      	adds	r3, #1
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	7a7a      	ldrb	r2, [r7, #9]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ee      	bcc.n	8001510 <CAN_WaitConnect+0x110>
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0802412c 	.word	0x0802412c
 8001540:	20000908 	.word	0x20000908
 8001544:	20000918 	.word	0x20000918
 8001548:	0802414c 	.word	0x0802414c
 800154c:	0802415c 	.word	0x0802415c
 8001550:	0802416c 	.word	0x0802416c
 8001554:	0802417c 	.word	0x0802417c
 8001558:	0802418c 	.word	0x0802418c
 800155c:	0802419c 	.word	0x0802419c
 8001560:	080241a8 	.word	0x080241a8

08001564 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f9c5 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fc3e 	bl	8000e10 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2106      	movs	r1, #6
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f9b1 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fc2a 	bl	8000e10 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f99d 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fc16 	bl	8000e10 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f0:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001600:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800160e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2108      	movs	r1, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f979 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2206      	movs	r2, #6
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fbf2 	bl	8000e10 <SendBytes>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795b      	ldrb	r3, [r3, #5]
 8001646:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f957 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fbd0 	bl	8000e10 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f943 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fbbc 	bl	8000e10 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2104      	movs	r1, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f92f 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fba8 	bl	8000e10 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f002 fab3 	bl	8003c2c <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <MCMD_ChangeControl>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2109      	movs	r1, #9
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f913 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fb8c 	bl	8000e10 <SendBytes>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	210a      	movs	r1, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8fd 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fb76 	bl	8000e10 <SendBytes>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	210c      	movs	r1, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f8e5 	bl	800190c <Make_CAN_ID_from_CAN_Device>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fb5f 	bl	8000e10 <SendBytes>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <Get_MCMD_Feedback>:

MCMD_Feedback_Typedef Get_MCMD_Feedback(CAN_Device *can_device){
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
	MCMD_Feedback_Typedef ans;
	if (can_device->node_type == NODE_MCMD1){
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d12f      	bne.n	80017ce <Get_MCMD_Feedback+0x72>
		ans.fb_type = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	4619      	mov	r1, r3
 800177a:	4a5f      	ldr	r2, [pc, #380]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 800177c:	0043      	lsls	r3, r0, #1
 800177e:	440b      	add	r3, r1
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	4618      	mov	r0, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	4619      	mov	r1, r3
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 8001796:	0043      	lsls	r3, r0, #1
 8001798:	440b      	add	r3, r1
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd1[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	4618      	mov	r0, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <Get_MCMD_Feedback+0x19c>)
 80017b0:	0043      	lsls	r3, r0, #1
 80017b2:	440b      	add	r3, r1
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4413      	add	r3, r2
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60bb      	str	r3, [r7, #8]
		return ans;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80017cc:	e08f      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD2){
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d111      	bne.n	80017fa <Get_MCMD_Feedback+0x9e>
		return _feedback_table_mcmd2[(can_device->node_id)].feedback_motor[(can_device->device_num)];
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	461c      	mov	r4, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	4618      	mov	r0, r3
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <Get_MCMD_Feedback+0x1a0>)
 80017e6:	0063      	lsls	r3, r4, #1
 80017e8:	4403      	add	r3, r0
 80017ea:	460c      	mov	r4, r1
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80017f8:	e079      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD3){
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d12f      	bne.n	8001862 <Get_MCMD_Feedback+0x106>
		ans.fb_type = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	4618      	mov	r0, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	4619      	mov	r1, r3
 800180e:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 8001810:	0043      	lsls	r3, r0, #1
 8001812:	440b      	add	r3, r1
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	4618      	mov	r0, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	4619      	mov	r1, r3
 8001828:	4a35      	ldr	r2, [pc, #212]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 800182a:	0043      	lsls	r3, r0, #1
 800182c:	440b      	add	r3, r1
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd3[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	4618      	mov	r0, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	789b      	ldrb	r3, [r3, #2]
 8001840:	4619      	mov	r1, r3
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <Get_MCMD_Feedback+0x1a4>)
 8001844:	0043      	lsls	r3, r0, #1
 8001846:	440b      	add	r3, r1
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4413      	add	r3, r2
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60bb      	str	r3, [r7, #8]
		return ans;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	e893 0003 	ldmia.w	r3, {r0, r1}
 800185c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001860:	e045      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else if (can_device->node_type == NODE_MCMD4){
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d12f      	bne.n	80018ca <Get_MCMD_Feedback+0x16e>
		ans.fb_type = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].fb_type;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	4618      	mov	r0, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	789b      	ldrb	r3, [r3, #2]
 8001874:	4619      	mov	r1, r3
 8001876:	4a23      	ldr	r2, [pc, #140]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 8001878:	0043      	lsls	r3, r0, #1
 800187a:	440b      	add	r3, r1
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	733b      	strb	r3, [r7, #12]
		ans.status = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].status;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	4618      	mov	r0, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	4619      	mov	r1, r3
 8001890:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 8001892:	0043      	lsls	r3, r0, #1
 8001894:	440b      	add	r3, r1
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	737b      	strb	r3, [r7, #13]
		ans.value = _feedback_table_mcmd4[(can_device->node_id)].feedback_motor[(can_device->device_num)].value;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	4618      	mov	r0, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <Get_MCMD_Feedback+0x1a8>)
 80018ac:	0043      	lsls	r3, r0, #1
 80018ae:	440b      	add	r3, r1
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60bb      	str	r3, [r7, #8]
		return ans;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80018c8:	e011      	b.n	80018ee <Get_MCMD_Feedback+0x192>
	}else{
		ans.fb_type = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	733b      	strb	r3, [r7, #12]
		ans.status = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	737b      	strb	r3, [r7, #13]
		ans.value = 0.0f;
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
		printf("get feed back error\n\r");
 80018d8:	480b      	ldr	r0, [pc, #44]	; (8001908 <Get_MCMD_Feedback+0x1ac>)
 80018da:	f01e ff47 	bl	802076c <iprintf>
		return ans;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ea:	e882 0003 	stmia.w	r2, {r0, r1}
	}
}
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000958 	.word	0x20000958
 80018fc:	200009f8 	.word	0x200009f8
 8001900:	20000a98 	.word	0x20000a98
 8001904:	20000b38 	.word	0x20000b38
 8001908:	080241b8 	.word	0x080241b8

0800190c <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 800190c:	b4b0      	push	{r4, r5, r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	02db      	lsls	r3, r3, #11
 8001926:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	015b      	lsls	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	4313      	orrs	r3, r2
 8001948:	17da      	asrs	r2, r3, #31
 800194a:	461c      	mov	r4, r3
 800194c:	4615      	mov	r5, r2
 800194e:	4622      	mov	r2, r4
 8001950:	462b      	mov	r3, r5
}
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bcb0      	pop	{r4, r5, r7}
 800195c:	4770      	bx	lr

0800195e <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 800195e:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	4603      	mov	r3, r0
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	460b      	mov	r3, r1
 8001978:	717b      	strb	r3, [r7, #5]
 800197a:	4613      	mov	r3, r2
 800197c:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	02db      	lsls	r3, r3, #11
 8001982:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800198e:	431a      	orrs	r2, r3
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	015b      	lsls	r3, r3, #5
 8001994:	b2db      	uxtb	r3, r3
 8001996:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001998:	793b      	ldrb	r3, [r7, #4]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	4313      	orrs	r3, r2
 80019a0:	17da      	asrs	r2, r3, #31
 80019a2:	4698      	mov	r8, r3
 80019a4:	4691      	mov	r9, r2
 80019a6:	4642      	mov	r2, r8
 80019a8:	464b      	mov	r3, r9
}
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 80019b6:	4770      	bx	lr

080019b8 <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 80019c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	0942      	lsrs	r2, r0, #5
 80019d0:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 80019d4:	094b      	lsrs	r3, r1, #5
 80019d6:	b2d3      	uxtb	r3, r2
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80019e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	0a02      	lsrs	r2, r0, #8
 80019ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80019f2:	0a0b      	lsrs	r3, r1, #8
 80019f4:	b2d3      	uxtb	r3, r2
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80019fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	0ac2      	lsrs	r2, r0, #11
 8001a0c:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001a10:	0acb      	lsrs	r3, r1, #11
 8001a12:	b2d3      	uxtb	r3, r2
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	723b      	strb	r3, [r7, #8]
    return ans;
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	f107 0208 	add.w	r2, r7, #8
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	4611      	mov	r1, r2
 8001a28:	8019      	strh	r1, [r3, #0]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	0c12      	lsrs	r2, r2, #16
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	2300      	movs	r3, #0
 8001a32:	7b3a      	ldrb	r2, [r7, #12]
 8001a34:	f362 0307 	bfi	r3, r2, #0, #8
 8001a38:	7b7a      	ldrb	r2, [r7, #13]
 8001a3a:	f362 230f 	bfi	r3, r2, #8, #8
 8001a3e:	7bba      	ldrb	r2, [r7, #14]
 8001a40:	f362 4317 	bfi	r3, r2, #16, #8
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	e9c7 0100 	strd	r0, r1, [r7]
 8001a5a:	783b      	ldrb	r3, [r7, #0]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a76:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <MX_CAN1_Init+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a7c:	2206      	movs	r2, #6
 8001a7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a8e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001a92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_CAN1_Init+0x64>)
 8001ac0:	f002 f8d8 	bl	8003c74 <HAL_CAN_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001aca:	f001 fb1a 	bl	8003102 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20002be4 	.word	0x20002be4
 8001ad8:	40006400 	.word	0x40006400

08001adc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <HAL_CAN_MspInit+0xac>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d13f      	bne.n	8001b7e <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_CAN_MspInit+0xb0>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <HAL_CAN_MspInit+0xb0>)
 8001b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_CAN_MspInit+0xb0>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_CAN_MspInit+0xb0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_CAN_MspInit+0xb0>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_CAN_MspInit+0xb0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b3e:	2309      	movs	r3, #9
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <HAL_CAN_MspInit+0xb4>)
 8001b4a:	f003 fbe7 	bl	800531c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2105      	movs	r1, #5
 8001b52:	2013      	movs	r0, #19
 8001b54:	f002 ffa2 	bl	8004a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b58:	2013      	movs	r0, #19
 8001b5a:	f002 ffbb 	bl	8004ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2105      	movs	r1, #5
 8001b62:	2014      	movs	r0, #20
 8001b64:	f002 ff9a 	bl	8004a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b68:	2014      	movs	r0, #20
 8001b6a:	f002 ffb3 	bl	8004ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2105      	movs	r1, #5
 8001b72:	2015      	movs	r0, #21
 8001b74:	f002 ff92 	bl	8004a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b78:	2015      	movs	r0, #21
 8001b7a:	f002 ffab 	bl	8004ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40006400 	.word	0x40006400
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020c00 	.word	0x40020c00

08001b94 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001ba0:	f00d fb0a 	bl	800f1b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <pvPortMallocMicroROS+0x180>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001bac:	f000 f98a 	bl	8001ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <pvPortMallocMicroROS+0x184>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 8092 	bne.w	8001ce2 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01f      	beq.n	8001c04 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d016      	beq.n	8001c04 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f023 0307 	bic.w	r3, r3, #7
 8001bdc:	3308      	adds	r3, #8
 8001bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	b672      	cpsid	i
 8001bf0:	f383 8811 	msr	BASEPRI, r3
 8001bf4:	f3bf 8f6f 	isb	sy
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	b662      	cpsie	i
 8001bfe:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c00:	bf00      	nop
 8001c02:	e7fe      	b.n	8001c02 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d06b      	beq.n	8001ce2 <pvPortMallocMicroROS+0x14e>
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <pvPortMallocMicroROS+0x188>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d866      	bhi.n	8001ce2 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <pvPortMallocMicroROS+0x18c>)
 8001c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <pvPortMallocMicroROS+0x18c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c1e:	e004      	b.n	8001c2a <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d903      	bls.n	8001c3c <pvPortMallocMicroROS+0xa8>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f1      	bne.n	8001c20 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <pvPortMallocMicroROS+0x180>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d04d      	beq.n	8001ce2 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	4413      	add	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1ad2      	subs	r2, r2, r3
 8001c60:	2308      	movs	r3, #8
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d921      	bls.n	8001cac <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7e:	b672      	cpsid	i
 8001c80:	f383 8811 	msr	BASEPRI, r3
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	b662      	cpsie	i
 8001c8e:	613b      	str	r3, [r7, #16]
}
 8001c90:	bf00      	nop
 8001c92:	e7fe      	b.n	8001c92 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ca6:	69b8      	ldr	r0, [r7, #24]
 8001ca8:	f000 f96e 	bl	8001f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <pvPortMallocMicroROS+0x188>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <pvPortMallocMicroROS+0x188>)
 8001cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <pvPortMallocMicroROS+0x188>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <pvPortMallocMicroROS+0x190>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d203      	bcs.n	8001cce <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <pvPortMallocMicroROS+0x188>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <pvPortMallocMicroROS+0x190>)
 8001ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <pvPortMallocMicroROS+0x184>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001ce2:	f00d fa77 	bl	800f1d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf4:	b672      	cpsid	i
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	b662      	cpsie	i
 8001d04:	60fb      	str	r3, [r7, #12]
}
 8001d06:	bf00      	nop
 8001d08:	e7fe      	b.n	8001d08 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20006814 	.word	0x20006814
 8001d18:	20006820 	.word	0x20006820
 8001d1c:	20006818 	.word	0x20006818
 8001d20:	2000680c 	.word	0x2000680c
 8001d24:	2000681c 	.word	0x2000681c

08001d28 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d04c      	beq.n	8001dd4 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <vPortFreeMicroROS+0xb4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10c      	bne.n	8001d70 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5a:	b672      	cpsid	i
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	b662      	cpsie	i
 8001d6a:	60fb      	str	r3, [r7, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	e7fe      	b.n	8001d6e <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00c      	beq.n	8001d92 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7c:	b672      	cpsid	i
 8001d7e:	f383 8811 	msr	BASEPRI, r3
 8001d82:	f3bf 8f6f 	isb	sy
 8001d86:	f3bf 8f4f 	dsb	sy
 8001d8a:	b662      	cpsie	i
 8001d8c:	60bb      	str	r3, [r7, #8]
}
 8001d8e:	bf00      	nop
 8001d90:	e7fe      	b.n	8001d90 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <vPortFreeMicroROS+0xb4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d019      	beq.n	8001dd4 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d115      	bne.n	8001dd4 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <vPortFreeMicroROS+0xb4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	401a      	ands	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001db8:	f00d f9fe 	bl	800f1b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <vPortFreeMicroROS+0xb8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <vPortFreeMicroROS+0xb8>)
 8001dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001dca:	6938      	ldr	r0, [r7, #16]
 8001dcc:	f000 f8dc 	bl	8001f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001dd0:	f00d fa00 	bl	800f1d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20006820 	.word	0x20006820
 8001de0:	20006818 	.word	0x20006818

08001de4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001df0:	2308      	movs	r3, #8
 8001df2:	425b      	negs	r3, r3
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4413      	add	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <getBlockSize+0x38>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]

	return count;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20006820 	.word	0x20006820

08001e20 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001e2a:	f00d f9c5 	bl	800f1b8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff feb0 	bl	8001b94 <pvPortMallocMicroROS>
 8001e34:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d017      	beq.n	8001e6c <pvPortReallocMicroROS+0x4c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffce 	bl	8001de4 <getBlockSize>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d201      	bcs.n	8001e5c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	68b8      	ldr	r0, [r7, #8]
 8001e62:	f01e fffc 	bl	8020e5e <memcpy>

		vPortFreeMicroROS(pv);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff5e 	bl	8001d28 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001e6c:	f00d f9b2 	bl	800f1d4 <xTaskResumeAll>

	return newmem;
 8001e70:	68bb      	ldr	r3, [r7, #8]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001e84:	f00d f998 	bl	800f1b8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff fe7e 	bl	8001b94 <pvPortMallocMicroROS>
 8001e98:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001e9e:	e004      	b.n	8001eaa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	613a      	str	r2, [r7, #16]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	617a      	str	r2, [r7, #20]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f5      	bne.n	8001ea0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001eb4:	f00d f98e 	bl	800f1d4 <xTaskResumeAll>
  	return mem;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <prvHeapInit+0xac>)
 8001ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00c      	beq.n	8001ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3307      	adds	r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0307 	bic.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <prvHeapInit+0xac>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <prvHeapInit+0xb0>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <prvHeapInit+0xb0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001f10:	2208      	movs	r2, #8
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <prvHeapInit+0xb4>)
 8001f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <prvHeapInit+0xb4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <prvHeapInit+0xb4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	1ad2      	subs	r2, r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <prvHeapInit+0xb4>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <prvHeapInit+0xb8>)
 8001f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <prvHeapInit+0xbc>)
 8001f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <prvHeapInit+0xc0>)
 8001f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	20002c0c 	.word	0x20002c0c
 8001f74:	2000680c 	.word	0x2000680c
 8001f78:	20006814 	.word	0x20006814
 8001f7c:	2000681c 	.word	0x2000681c
 8001f80:	20006818 	.word	0x20006818
 8001f84:	20006820 	.word	0x20006820

08001f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <prvInsertBlockIntoFreeList+0xac>)
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e002      	b.n	8001f9c <prvInsertBlockIntoFreeList+0x14>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d8f7      	bhi.n	8001f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d108      	bne.n	8001fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	441a      	add	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d118      	bne.n	8002010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <prvInsertBlockIntoFreeList+0xb0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d00d      	beq.n	8002006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	441a      	add	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e008      	b.n	8002018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <prvInsertBlockIntoFreeList+0xb0>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e003      	b.n	8002018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d002      	beq.n	8002026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2000680c 	.word	0x2000680c
 8002038:	20006814 	.word	0x20006814

0800203c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_DMA_Init+0x48>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <MX_DMA_Init+0x48>)
 8002048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <MX_DMA_Init+0x48>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2105      	movs	r1, #5
 800205e:	200c      	movs	r0, #12
 8002060:	f002 fd1c 	bl	8004a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002064:	200c      	movs	r0, #12
 8002066:	f002 fd35 	bl	8004ad4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2105      	movs	r1, #5
 800206e:	200e      	movs	r0, #14
 8002070:	f002 fd14 	bl	8004a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002074:	200e      	movs	r0, #14
 8002076:	f002 fd2d 	bl	8004ad4 <HAL_NVIC_EnableIRQ>

}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800

08002088 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002096:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800209c:	4904      	ldr	r1, [pc, #16]	; (80020b0 <cubemx_transport_open+0x28>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f007 f83a 	bl	8009118 <HAL_UART_Receive_DMA>
    return true;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20006824 	.word	0x20006824

080020b4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020c2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f007 f86b 	bl	80091a0 <HAL_UART_DMAStop>
    return true;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020e8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d11a      	bne.n	8002128 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f006 ff90 	bl	8009020 <HAL_UART_Transmit_DMA>
 8002100:	4603      	mov	r3, r0
 8002102:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002104:	e002      	b.n	800210c <cubemx_transport_write+0x38>
            osDelay(1);
 8002106:	2001      	movs	r0, #1
 8002108:	f00b ffec 	bl	800e0e4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <cubemx_transport_write+0x46>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002116:	2b20      	cmp	r3, #32
 8002118:	d1f5      	bne.n	8002106 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800211a:	7cfb      	ldrb	r3, [r7, #19]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <cubemx_transport_write+0x50>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	e002      	b.n	800212a <cubemx_transport_write+0x56>
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <cubemx_transport_write+0x56>
    }else{
        return 0;
 8002128:	2300      	movs	r3, #0
    }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002148:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214e:	b672      	cpsid	i
}
 8002150:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800215e:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <cubemx_transport_read+0x9c>)
 8002160:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002162:	b662      	cpsie	i
}
 8002164:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800216c:	2001      	movs	r0, #1
 800216e:	f00b ffb9 	bl	800e0e4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <cubemx_transport_read+0xa0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <cubemx_transport_read+0x9c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d103      	bne.n	8002186 <cubemx_transport_read+0x52>
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	dbe3      	blt.n	800214e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800218a:	e011      	b.n	80021b0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <cubemx_transport_read+0xa0>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	440b      	add	r3, r1
 8002196:	4910      	ldr	r1, [pc, #64]	; (80021d8 <cubemx_transport_read+0xa4>)
 8002198:	5c8a      	ldrb	r2, [r1, r2]
 800219a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <cubemx_transport_read+0xa0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3301      	adds	r3, #1
 80021a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <cubemx_transport_read+0xa0>)
 80021a8:	6013      	str	r3, [r2, #0]
        wrote++;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <cubemx_transport_read+0xa0>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <cubemx_transport_read+0x9c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d003      	beq.n	80021c4 <cubemx_transport_read+0x90>
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3e3      	bcc.n	800218c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80021c4:	69bb      	ldr	r3, [r7, #24]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20007028 	.word	0x20007028
 80021d4:	20007024 	.word	0x20007024
 80021d8:	20006824 	.word	0x20006824

080021dc <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80021e4:	f7fe fd08 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80021f8:	f7fe fd04 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 800220c:	f7fe fcf4 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002220:	f7fe fcf0 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002234:	f7fe fce0 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002248:	f7fe fcdc 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fcd6 	bl	8000c10 <WhenCANRxFifo0MsgPending>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200070d8 	.word	0x200070d8

08002270 <canSetting>:
//can通信の設定
void canSetting(){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 8002274:	480f      	ldr	r0, [pc, #60]	; (80022b4 <canSetting+0x44>)
 8002276:	f01e fa79 	bl	802076c <iprintf>
	HAL_Delay(10);
 800227a:	200a      	movs	r0, #10
 800227c:	f001 fcd6 	bl	8003c2c <HAL_Delay>

	CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 8002280:	480d      	ldr	r0, [pc, #52]	; (80022b8 <canSetting+0x48>)
 8002282:	f7fe fe15 	bl	8000eb0 <CAN_SystemInit>

	// デバイス数の設定
	num_of_devices.mcmd3 = 3;
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <canSetting+0x4c>)
 8002288:	2203      	movs	r2, #3
 800228a:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <canSetting+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 0;
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <canSetting+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 0;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <canSetting+0x4c>)
 800229a:	2200      	movs	r2, #0
 800229c:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 800229e:	4808      	ldr	r0, [pc, #32]	; (80022c0 <canSetting+0x50>)
 80022a0:	f01e fa64 	bl	802076c <iprintf>
	HAL_Delay(10);
 80022a4:	200a      	movs	r0, #10
 80022a6:	f001 fcc1 	bl	8003c2c <HAL_Delay>
	CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
 80022aa:	4804      	ldr	r0, [pc, #16]	; (80022bc <canSetting+0x4c>)
 80022ac:	f7ff f8a8 	bl	8001400 <CAN_WaitConnect>
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	08024208 	.word	0x08024208
 80022b8:	20002be4 	.word	0x20002be4
 80022bc:	200070d8 	.word	0x200070d8
 80022c0:	08024230 	.word	0x08024230

080022c4 <mcmdMoter1Setting>:

//モータ1のmcmd設定
void mcmdMoter1Setting(){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	    // 接続先のMCMDの設定
	    mcmd4M1_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022ca:	2203      	movs	r2, #3
 80022cc:	701a      	strb	r2, [r3, #0]
	    mcmd4M1_struct.device.node_id = 0;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	705a      	strb	r2, [r3, #1]
	    mcmd4M1_struct.device.device_num = 0;  // モーターの番号(0→M1,1→M2)
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4M1_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;  //制御タイプを設定
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022dc:	2201      	movs	r2, #1
 80022de:	751a      	strb	r2, [r3, #20]
	    mcmd4M1_struct.ctrl_param.PID_param.kp = 0.075f;
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022e2:	4a25      	ldr	r2, [pc, #148]	; (8002378 <mcmdMoter1Setting+0xb4>)
 80022e4:	619a      	str	r2, [r3, #24]
	    mcmd4M1_struct.ctrl_param.PID_param.ki = 0.025f;
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022e8:	4a24      	ldr	r2, [pc, #144]	; (800237c <mcmdMoter1Setting+0xb8>)
 80022ea:	61da      	str	r2, [r3, #28]
	    mcmd4M1_struct.ctrl_param.PID_param.kd = 0.01f;
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022ee:	4a24      	ldr	r2, [pc, #144]	; (8002380 <mcmdMoter1Setting+0xbc>)
 80022f0:	621a      	str	r2, [r3, #32]
	    mcmd4M1_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M1_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <mcmdMoter1Setting+0xb0>)
 80022fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M1_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M1_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <mcmdMoter1Setting+0xb0>)
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M1_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002314:	2200      	movs	r2, #0
 8002316:	711a      	strb	r2, [r3, #4]
	    mcmd4M1_struct.rot_dir = MCMD_DIR_FW;  // モーターの回転方向設定
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <mcmdMoter1Setting+0xb0>)
 800231a:	2200      	movs	r2, #0
 800231c:	715a      	strb	r2, [r3, #5]
	    mcmd4M1_struct.quant_per_unit = 1.0/1024.0f; 	 // エンコーダーの分解能に対する制御値の変化量の割合
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002320:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002324:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4M1_struct.limit_sw_type = LIMIT_SW_NO;  // 原点サーチにNomaly Closedのスイッチを用いる
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002328:	2201      	movs	r2, #1
 800232a:	719a      	strb	r2, [r3, #6]
	    mcmd4M1_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行うかどうか。
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <mcmdMoter1Setting+0xb0>)
 800232e:	2201      	movs	r2, #1
 8002330:	71da      	strb	r2, [r3, #7]
	    mcmd4M1_struct.calib_duty = -0.2f;  // 原点サーチ時のduty
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002334:	4a13      	ldr	r2, [pc, #76]	; (8002384 <mcmdMoter1Setting+0xc0>)
 8002336:	609a      	str	r2, [r3, #8]
	    mcmd4M1_struct.offset = 0.0f;  // 原点のオフセット
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <mcmdMoter1Setting+0xb0>)
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
	    mcmd4M1_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002342:	2200      	movs	r2, #0
 8002344:	70da      	strb	r2, [r3, #3]

	    // パラメータなどの設定と動作命令をMCMDに送信する
		 MCMD_init(&mcmd4M1_struct);
 8002346:	480b      	ldr	r0, [pc, #44]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002348:	f7ff f974 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 800234c:	200a      	movs	r0, #10
 800234e:	f001 fc6d 	bl	8003c2c <HAL_Delay>
		 MCMD_Calib(&mcmd4M1_struct);  // キャリブレーションを行う
 8002352:	4808      	ldr	r0, [pc, #32]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002354:	f7ff f9be 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
 8002358:	2032      	movs	r0, #50	; 0x32
 800235a:	f001 fc67 	bl	8003c2c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M1_struct, 0.00f);  // 目標値を設定
 800235e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002388 <mcmdMoter1Setting+0xc4>
 8002362:	4804      	ldr	r0, [pc, #16]	; (8002374 <mcmdMoter1Setting+0xb0>)
 8002364:	f7ff f9e2 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M1_struct);  // 制御開始
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <mcmdMoter1Setting+0xb0>)
 800236a:	f7ff f9c9 	bl	8001700 <MCMD_Control_Enable>
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200070e0 	.word	0x200070e0
 8002378:	3d99999a 	.word	0x3d99999a
 800237c:	3ccccccd 	.word	0x3ccccccd
 8002380:	3c23d70a 	.word	0x3c23d70a
 8002384:	be4ccccd 	.word	0xbe4ccccd
 8002388:	00000000 	.word	0x00000000

0800238c <mcmdMoter2Setting>:

//モータ2のmcmd設定
void mcmdMoter2Setting(){
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	    // 接続先のMCMDの設定
	    mcmd4M2_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <mcmdMoter2Setting+0xb0>)
 8002392:	2203      	movs	r2, #3
 8002394:	701a      	strb	r2, [r3, #0]
	    mcmd4M2_struct.device.node_id = 0;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <mcmdMoter2Setting+0xb0>)
 8002398:	2200      	movs	r2, #0
 800239a:	705a      	strb	r2, [r3, #1]
	    mcmd4M2_struct.device.device_num = 1;  // モーターの番号(0→M1,1→M2)
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <mcmdMoter2Setting+0xb0>)
 800239e:	2201      	movs	r2, #1
 80023a0:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4M2_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;  //制御タイプを設定
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	751a      	strb	r2, [r3, #20]
	    mcmd4M2_struct.ctrl_param.PID_param.kp = 0.075f;
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023aa:	4a25      	ldr	r2, [pc, #148]	; (8002440 <mcmdMoter2Setting+0xb4>)
 80023ac:	619a      	str	r2, [r3, #24]
	    mcmd4M2_struct.ctrl_param.PID_param.ki = 0.025f;
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023b0:	4a24      	ldr	r2, [pc, #144]	; (8002444 <mcmdMoter2Setting+0xb8>)
 80023b2:	61da      	str	r2, [r3, #28]
	    mcmd4M2_struct.ctrl_param.PID_param.kd = 0.01f;
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <mcmdMoter2Setting+0xbc>)
 80023b8:	621a      	str	r2, [r3, #32]
	    mcmd4M2_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M2_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M2_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M2_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M2_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 80023da:	4b18      	ldr	r3, [pc, #96]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	711a      	strb	r2, [r3, #4]
	    mcmd4M2_struct.rot_dir = MCMD_DIR_FW;  // モーターの回転方向設定
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	715a      	strb	r2, [r3, #5]
	    mcmd4M2_struct.quant_per_unit = 1.0/1024.0f;  // エンコーダーの分解能に対する制御値の変化量の割合
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023e8:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 80023ec:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4M2_struct.limit_sw_type = LIMIT_SW_NO;  // 原点サーチにNomaly Closedのスイッチを用いる
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	719a      	strb	r2, [r3, #6]
	    mcmd4M2_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行うかどうか。
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	71da      	strb	r2, [r3, #7]
	    mcmd4M2_struct.calib_duty = -0.2f;  // 原点サーチ時のduty
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <mcmdMoter2Setting+0xb0>)
 80023fc:	4a13      	ldr	r2, [pc, #76]	; (800244c <mcmdMoter2Setting+0xc0>)
 80023fe:	609a      	str	r2, [r3, #8]
	    mcmd4M2_struct.offset = 0.0f;  // 原点のオフセット
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <mcmdMoter2Setting+0xb0>)
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
	    mcmd4M2_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <mcmdMoter2Setting+0xb0>)
 800240a:	2200      	movs	r2, #0
 800240c:	70da      	strb	r2, [r3, #3]

	    // パラメータなどの設定と動作命令をMCMDに送信する
		 MCMD_init(&mcmd4M2_struct);
 800240e:	480b      	ldr	r0, [pc, #44]	; (800243c <mcmdMoter2Setting+0xb0>)
 8002410:	f7ff f910 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 8002414:	200a      	movs	r0, #10
 8002416:	f001 fc09 	bl	8003c2c <HAL_Delay>
		 MCMD_Calib(&mcmd4M2_struct);  // キャリブレーションを行う
 800241a:	4808      	ldr	r0, [pc, #32]	; (800243c <mcmdMoter2Setting+0xb0>)
 800241c:	f7ff f95a 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
 8002420:	2032      	movs	r0, #50	; 0x32
 8002422:	f001 fc03 	bl	8003c2c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M2_struct, 0.00f);  // 目標値を設定
 8002426:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002450 <mcmdMoter2Setting+0xc4>
 800242a:	4804      	ldr	r0, [pc, #16]	; (800243c <mcmdMoter2Setting+0xb0>)
 800242c:	f7ff f97e 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M2_struct);  // 制御開始
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <mcmdMoter2Setting+0xb0>)
 8002432:	f7ff f965 	bl	8001700 <MCMD_Control_Enable>
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20007120 	.word	0x20007120
 8002440:	3d99999a 	.word	0x3d99999a
 8002444:	3ccccccd 	.word	0x3ccccccd
 8002448:	3c23d70a 	.word	0x3c23d70a
 800244c:	be4ccccd 	.word	0xbe4ccccd
 8002450:	00000000 	.word	0x00000000

08002454 <mcmdMoter3Setting>:

void mcmdMoter3Setting(){ //モーターの回転方向異常
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	    // 接続先のMCMDの設定
	    mcmd4M3_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ
 8002458:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <mcmdMoter3Setting+0xb0>)
 800245a:	2203      	movs	r2, #3
 800245c:	701a      	strb	r2, [r3, #0]
	    mcmd4M3_struct.device.node_id = 5;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <mcmdMoter3Setting+0xb0>)
 8002460:	2205      	movs	r2, #5
 8002462:	705a      	strb	r2, [r3, #1]
	    mcmd4M3_struct.device.device_num = 1;  // モーターの番号(0→M1,1→M2)
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <mcmdMoter3Setting+0xb0>)
 8002466:	2201      	movs	r2, #1
 8002468:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4M3_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;  //制御タイプを設定
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <mcmdMoter3Setting+0xb0>)
 800246c:	2201      	movs	r2, #1
 800246e:	751a      	strb	r2, [r3, #20]
	    mcmd4M3_struct.ctrl_param.PID_param.kp = 0.075f;
 8002470:	4b24      	ldr	r3, [pc, #144]	; (8002504 <mcmdMoter3Setting+0xb0>)
 8002472:	4a25      	ldr	r2, [pc, #148]	; (8002508 <mcmdMoter3Setting+0xb4>)
 8002474:	619a      	str	r2, [r3, #24]
	    mcmd4M3_struct.ctrl_param.PID_param.ki = 0.025f;
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <mcmdMoter3Setting+0xb0>)
 8002478:	4a24      	ldr	r2, [pc, #144]	; (800250c <mcmdMoter3Setting+0xb8>)
 800247a:	61da      	str	r2, [r3, #28]
	    mcmd4M3_struct.ctrl_param.PID_param.kd = 0.01f;
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <mcmdMoter3Setting+0xb0>)
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <mcmdMoter3Setting+0xbc>)
 8002480:	621a      	str	r2, [r3, #32]
	    mcmd4M3_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <mcmdMoter3Setting+0xb0>)
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M3_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <mcmdMoter3Setting+0xb0>)
 800248c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M3_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <mcmdMoter3Setting+0xb0>)
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M3_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <mcmdMoter3Setting+0xb0>)
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M3_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	711a      	strb	r2, [r3, #4]
	    mcmd4M3_struct.rot_dir = MCMD_DIR_BC;  // モーターの回転方向設定
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	715a      	strb	r2, [r3, #5]
	    mcmd4M3_struct.quant_per_unit = 1.0/1024.0f;   // エンコーダーの分解能に対する制御値の変化量の割合
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024b0:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 80024b4:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4M3_struct.limit_sw_type = LIMIT_SW_NO;  // 原点サーチにNomaly Closedのスイッチを用いる
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	719a      	strb	r2, [r3, #6]
	    mcmd4M3_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行うかどうか。
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024be:	2201      	movs	r2, #1
 80024c0:	71da      	strb	r2, [r3, #7]
	    mcmd4M3_struct.calib_duty = -0.2f;  // 原点サーチ時のduty
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024c4:	4a13      	ldr	r2, [pc, #76]	; (8002514 <mcmdMoter3Setting+0xc0>)
 80024c6:	609a      	str	r2, [r3, #8]
	    mcmd4M3_struct.offset = 0.0f;  // 原点のオフセット
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
	    mcmd4M3_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	70da      	strb	r2, [r3, #3]

	    // パラメータなどの設定と動作命令をMCMDに送信する
		 MCMD_init(&mcmd4M3_struct);
 80024d6:	480b      	ldr	r0, [pc, #44]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024d8:	f7ff f8ac 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 80024dc:	200a      	movs	r0, #10
 80024de:	f001 fba5 	bl	8003c2c <HAL_Delay>
		 MCMD_Calib(&mcmd4M3_struct);  // キャリブレーションを行う
 80024e2:	4808      	ldr	r0, [pc, #32]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024e4:	f7ff f8f6 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
 80024e8:	2032      	movs	r0, #50	; 0x32
 80024ea:	f001 fb9f 	bl	8003c2c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M3_struct, 0.00f);  // 目標値を設定
 80024ee:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002518 <mcmdMoter3Setting+0xc4>
 80024f2:	4804      	ldr	r0, [pc, #16]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024f4:	f7ff f91a 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M3_struct);  // 制御開始
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <mcmdMoter3Setting+0xb0>)
 80024fa:	f7ff f901 	bl	8001700 <MCMD_Control_Enable>
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20007160 	.word	0x20007160
 8002508:	3d99999a 	.word	0x3d99999a
 800250c:	3ccccccd 	.word	0x3ccccccd
 8002510:	3c23d70a 	.word	0x3c23d70a
 8002514:	be4ccccd 	.word	0xbe4ccccd
 8002518:	00000000 	.word	0x00000000

0800251c <mcmdMoter4Setting>:

void mcmdMoter4Setting(){
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	    // 接続先のMCMDの設定
	    mcmd4M4_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002522:	2203      	movs	r2, #3
 8002524:	701a      	strb	r2, [r3, #0]
	    mcmd4M4_struct.device.node_id =5;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002528:	2205      	movs	r2, #5
 800252a:	705a      	strb	r2, [r3, #1]
	    mcmd4M4_struct.device.device_num = 0;  // モーターの番号(0→M1,1→M2)
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <mcmdMoter4Setting+0xb0>)
 800252e:	2200      	movs	r2, #0
 8002530:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4M4_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;  //制御タイプを設定
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002534:	2201      	movs	r2, #1
 8002536:	751a      	strb	r2, [r3, #20]
	    mcmd4M4_struct.ctrl_param.PID_param.kp = 0.075f;
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <mcmdMoter4Setting+0xb0>)
 800253a:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <mcmdMoter4Setting+0xb4>)
 800253c:	619a      	str	r2, [r3, #24]
	    mcmd4M4_struct.ctrl_param.PID_param.ki = 0.025f;
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <mcmdMoter4Setting+0xb8>)
 8002542:	61da      	str	r2, [r3, #28]
	    mcmd4M4_struct.ctrl_param.PID_param.kd = 0.01f;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002546:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <mcmdMoter4Setting+0xbc>)
 8002548:	621a      	str	r2, [r3, #32]
	    mcmd4M4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <mcmdMoter4Setting+0xb0>)
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M4_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <mcmdMoter4Setting+0xb0>)
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M4_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <mcmdMoter4Setting+0xb0>)
 800256c:	2200      	movs	r2, #0
 800256e:	711a      	strb	r2, [r3, #4]
	    mcmd4M4_struct.rot_dir = MCMD_DIR_FW;  // モーターの回転方向設定
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002572:	2200      	movs	r2, #0
 8002574:	715a      	strb	r2, [r3, #5]
	    mcmd4M4_struct.quant_per_unit = 1.0/1024.0f;   // エンコーダーの分解能に対する制御値の変化量の割合
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002578:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800257c:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4M4_struct.limit_sw_type = LIMIT_SW_NO;  // 原点サーチにNomaly Closedのスイッチを用いる
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002580:	2201      	movs	r2, #1
 8002582:	719a      	strb	r2, [r3, #6]
	    mcmd4M4_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行うかどうか。
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002586:	2201      	movs	r2, #1
 8002588:	71da      	strb	r2, [r3, #7]
	    mcmd4M4_struct.calib_duty = -0.2f;  // 原点サーチ時のduty
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <mcmdMoter4Setting+0xb0>)
 800258c:	4a13      	ldr	r2, [pc, #76]	; (80025dc <mcmdMoter4Setting+0xc0>)
 800258e:	609a      	str	r2, [r3, #8]
	    mcmd4M4_struct.offset = 0.0f;  // 原点のオフセット
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <mcmdMoter4Setting+0xb0>)
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	60da      	str	r2, [r3, #12]
	    mcmd4M4_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <mcmdMoter4Setting+0xb0>)
 800259a:	2200      	movs	r2, #0
 800259c:	70da      	strb	r2, [r3, #3]

	    // パラメータなどの設定と動作命令をMCMDに送信する
		 MCMD_init(&mcmd4M4_struct);
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <mcmdMoter4Setting+0xb0>)
 80025a0:	f7ff f848 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 80025a4:	200a      	movs	r0, #10
 80025a6:	f001 fb41 	bl	8003c2c <HAL_Delay>
		 MCMD_Calib(&mcmd4M4_struct);  // キャリブレーションを行う
 80025aa:	4808      	ldr	r0, [pc, #32]	; (80025cc <mcmdMoter4Setting+0xb0>)
 80025ac:	f7ff f892 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
 80025b0:	2032      	movs	r0, #50	; 0x32
 80025b2:	f001 fb3b 	bl	8003c2c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M4_struct, 0.00f);  // 目標値を設定
 80025b6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80025e0 <mcmdMoter4Setting+0xc4>
 80025ba:	4804      	ldr	r0, [pc, #16]	; (80025cc <mcmdMoter4Setting+0xb0>)
 80025bc:	f7ff f8b6 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M4_struct);  // 制御開始
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <mcmdMoter4Setting+0xb0>)
 80025c2:	f7ff f89d 	bl	8001700 <MCMD_Control_Enable>
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200071a0 	.word	0x200071a0
 80025d0:	3d99999a 	.word	0x3d99999a
 80025d4:	3ccccccd 	.word	0x3ccccccd
 80025d8:	3c23d70a 	.word	0x3c23d70a
 80025dc:	be4ccccd 	.word	0xbe4ccccd
 80025e0:	00000000 	.word	0x00000000

080025e4 <mcmdMoter5Setting>:

void mcmdMoter5Setting(){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	    // 接続先のMCMDの設定
	    mcmd4M5_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <mcmdMoter5Setting+0xb0>)
 80025ea:	2203      	movs	r2, #3
 80025ec:	701a      	strb	r2, [r3, #0]
	    mcmd4M5_struct.device.node_id =1;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <mcmdMoter5Setting+0xb0>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	705a      	strb	r2, [r3, #1]
	    mcmd4M5_struct.device.device_num = 0;  // モーターの番号(0→M1,1→M2)
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <mcmdMoter5Setting+0xb0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4M5_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;  //制御タイプを設定
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <mcmdMoter5Setting+0xb0>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	751a      	strb	r2, [r3, #20]
	    mcmd4M5_struct.ctrl_param.PID_param.kp = 0.075f;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002602:	4a25      	ldr	r2, [pc, #148]	; (8002698 <mcmdMoter5Setting+0xb4>)
 8002604:	619a      	str	r2, [r3, #24]
	    mcmd4M5_struct.ctrl_param.PID_param.ki = 0.025f;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002608:	4a24      	ldr	r2, [pc, #144]	; (800269c <mcmdMoter5Setting+0xb8>)
 800260a:	61da      	str	r2, [r3, #28]
	    mcmd4M5_struct.ctrl_param.PID_param.kd = 0.01f;
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <mcmdMoter5Setting+0xb0>)
 800260e:	4a24      	ldr	r2, [pc, #144]	; (80026a0 <mcmdMoter5Setting+0xbc>)
 8002610:	621a      	str	r2, [r3, #32]
	    mcmd4M5_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M5_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <mcmdMoter5Setting+0xb0>)
 800261c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M5_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M5_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <mcmdMoter5Setting+0xb0>)
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M5_struct.enc_dir = MCMD_DIR_BC;  // Encoderの回転方向設定
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002634:	2201      	movs	r2, #1
 8002636:	711a      	strb	r2, [r3, #4]
	    mcmd4M5_struct.rot_dir = MCMD_DIR_BC;  // モーターの回転方向設定
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <mcmdMoter5Setting+0xb0>)
 800263a:	2201      	movs	r2, #1
 800263c:	715a      	strb	r2, [r3, #5]
	    mcmd4M5_struct.quant_per_unit = 1.0/1024.0f;  // エンコーダーの分解能に対する制御値の変化量の割合
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002640:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002644:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4M5_struct.limit_sw_type = LIMIT_SW_NO;  // 原点サーチにNomaly Closedのスイッチを用いる
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002648:	2201      	movs	r2, #1
 800264a:	719a      	strb	r2, [r3, #6]
	    mcmd4M5_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行うかどうか。
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <mcmdMoter5Setting+0xb0>)
 800264e:	2201      	movs	r2, #1
 8002650:	71da      	strb	r2, [r3, #7]
	    mcmd4M5_struct.calib_duty = -0.2f;  // 原点サーチ時のduty
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <mcmdMoter5Setting+0xc0>)
 8002656:	609a      	str	r2, [r3, #8]
	    mcmd4M5_struct.offset = 0.0f;  // 原点のオフセット
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <mcmdMoter5Setting+0xb0>)
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
	    mcmd4M5_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002662:	2200      	movs	r2, #0
 8002664:	70da      	strb	r2, [r3, #3]

	    // パラメータなどの設定と動作命令をMCMDに送信する
		 MCMD_init(&mcmd4M5_struct);
 8002666:	480b      	ldr	r0, [pc, #44]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002668:	f7fe ffe4 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 800266c:	200a      	movs	r0, #10
 800266e:	f001 fadd 	bl	8003c2c <HAL_Delay>
		 MCMD_Calib(&mcmd4M5_struct);  // キャリブレーションを行う
 8002672:	4808      	ldr	r0, [pc, #32]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002674:	f7ff f82e 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
 8002678:	2032      	movs	r0, #50	; 0x32
 800267a:	f001 fad7 	bl	8003c2c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M5_struct, 0.00f);  // 目標値を設定
 800267e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80026a8 <mcmdMoter5Setting+0xc4>
 8002682:	4804      	ldr	r0, [pc, #16]	; (8002694 <mcmdMoter5Setting+0xb0>)
 8002684:	f7ff f852 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M5_struct);  // 制御開始
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <mcmdMoter5Setting+0xb0>)
 800268a:	f7ff f839 	bl	8001700 <MCMD_Control_Enable>
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200071e0 	.word	0x200071e0
 8002698:	3d99999a 	.word	0x3d99999a
 800269c:	3ccccccd 	.word	0x3ccccccd
 80026a0:	3c23d70a 	.word	0x3c23d70a
 80026a4:	be4ccccd 	.word	0xbe4ccccd
 80026a8:	00000000 	.word	0x00000000

080026ac <mcmdMoter6Setting>:

void mcmdMoter6Setting(){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
	    // 接続先のMCMDの設定
	    mcmd4M6_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ
 80026b0:	4b2a      	ldr	r3, [pc, #168]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026b2:	2203      	movs	r2, #3
 80026b4:	701a      	strb	r2, [r3, #0]
	    mcmd4M6_struct.device.node_id =1;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 80026b6:	4b29      	ldr	r3, [pc, #164]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	705a      	strb	r2, [r3, #1]
	    mcmd4M6_struct.device.device_num = 1;  // モーターの番号(0→M1,1→M2)
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026be:	2201      	movs	r2, #1
 80026c0:	709a      	strb	r2, [r3, #2]

	    // 制御パラメータの設定
	    mcmd4M6_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;  //制御タイプを設定
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	751a      	strb	r2, [r3, #20]
	    mcmd4M6_struct.ctrl_param.PID_param.kp = 0.075f;
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026ca:	4a25      	ldr	r2, [pc, #148]	; (8002760 <mcmdMoter6Setting+0xb4>)
 80026cc:	619a      	str	r2, [r3, #24]
	    mcmd4M6_struct.ctrl_param.PID_param.ki = 0.025f;
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026d0:	4a24      	ldr	r2, [pc, #144]	; (8002764 <mcmdMoter6Setting+0xb8>)
 80026d2:	61da      	str	r2, [r3, #28]
	    mcmd4M6_struct.ctrl_param.PID_param.kd = 0.01f;
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <mcmdMoter6Setting+0xbc>)
 80026d8:	621a      	str	r2, [r3, #32]
	    mcmd4M6_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M6_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M6_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M6_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M6_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <mcmdMoter6Setting+0xb0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	711a      	strb	r2, [r3, #4]
	    mcmd4M6_struct.rot_dir = MCMD_DIR_BC;  // モーターの回転方向設定
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <mcmdMoter6Setting+0xb0>)
 8002702:	2201      	movs	r2, #1
 8002704:	715a      	strb	r2, [r3, #5]
	    mcmd4M6_struct.quant_per_unit = 1.0/1024.0f;  // エンコーダーの分解能に対する制御値の変化量の割合
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <mcmdMoter6Setting+0xb0>)
 8002708:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 800270c:	611a      	str	r2, [r3, #16]

	    // 原点サーチの設定
	    mcmd4M6_struct.limit_sw_type = LIMIT_SW_NO;  // 原点サーチにNomaly Closedのスイッチを用いる
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <mcmdMoter6Setting+0xb0>)
 8002710:	2201      	movs	r2, #1
 8002712:	719a      	strb	r2, [r3, #6]
	    mcmd4M6_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行うかどうか。
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <mcmdMoter6Setting+0xb0>)
 8002716:	2201      	movs	r2, #1
 8002718:	71da      	strb	r2, [r3, #7]
	    mcmd4M6_struct.calib_duty = -0.2f;  // 原点サーチ時のduty
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <mcmdMoter6Setting+0xb0>)
 800271c:	4a13      	ldr	r2, [pc, #76]	; (800276c <mcmdMoter6Setting+0xc0>)
 800271e:	609a      	str	r2, [r3, #8]
	    mcmd4M6_struct.offset = 0.0f;  // 原点のオフセット
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <mcmdMoter6Setting+0xb0>)
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
	    mcmd4M6_struct.fb_type = MCMD_FB_POS;  // 読み取った位置情報をF7にフィードバックする。
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <mcmdMoter6Setting+0xb0>)
 800272a:	2200      	movs	r2, #0
 800272c:	70da      	strb	r2, [r3, #3]

	    // パラメータなどの設定と動作命令をMCMDに送信する
		 MCMD_init(&mcmd4M6_struct);
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <mcmdMoter6Setting+0xb0>)
 8002730:	f7fe ff80 	bl	8001634 <MCMD_init>
		 HAL_Delay(10);
 8002734:	200a      	movs	r0, #10
 8002736:	f001 fa79 	bl	8003c2c <HAL_Delay>
		 MCMD_Calib(&mcmd4M6_struct);  // キャリブレーションを行う
 800273a:	4808      	ldr	r0, [pc, #32]	; (800275c <mcmdMoter6Setting+0xb0>)
 800273c:	f7fe ffca 	bl	80016d4 <MCMD_Calib>
		 HAL_Delay(50);  // キャリブレーションが終わるまで待つ
 8002740:	2032      	movs	r0, #50	; 0x32
 8002742:	f001 fa73 	bl	8003c2c <HAL_Delay>
		 MCMD_SetTarget(&mcmd4M6_struct, 0.00f);  // 目標値を設定
 8002746:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002770 <mcmdMoter6Setting+0xc4>
 800274a:	4804      	ldr	r0, [pc, #16]	; (800275c <mcmdMoter6Setting+0xb0>)
 800274c:	f7fe ffee 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M6_struct);  // 制御開始
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <mcmdMoter6Setting+0xb0>)
 8002752:	f7fe ffd5 	bl	8001700 <MCMD_Control_Enable>
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20007220 	.word	0x20007220
 8002760:	3d99999a 	.word	0x3d99999a
 8002764:	3ccccccd 	.word	0x3ccccccd
 8002768:	3c23d70a 	.word	0x3c23d70a
 800276c:	be4ccccd 	.word	0xbe4ccccd
 8002770:	00000000 	.word	0x00000000

08002774 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002778:	4a10      	ldr	r2, [pc, #64]	; (80027bc <MX_FREERTOS_Init+0x48>)
 800277a:	2100      	movs	r1, #0
 800277c:	4810      	ldr	r0, [pc, #64]	; (80027c0 <MX_FREERTOS_Init+0x4c>)
 800277e:	f00b fc0b 	bl	800df98 <osThreadNew>
 8002782:	4603      	mov	r3, r0
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <MX_FREERTOS_Init+0x50>)
 8002786:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 8002788:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <MX_FREERTOS_Init+0x54>)
 800278a:	2100      	movs	r1, #0
 800278c:	480f      	ldr	r0, [pc, #60]	; (80027cc <MX_FREERTOS_Init+0x58>)
 800278e:	f00b fc03 	bl	800df98 <osThreadNew>
 8002792:	4603      	mov	r3, r0
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <MX_FREERTOS_Init+0x5c>)
 8002796:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 8002798:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <MX_FREERTOS_Init+0x60>)
 800279a:	2100      	movs	r1, #0
 800279c:	480e      	ldr	r0, [pc, #56]	; (80027d8 <MX_FREERTOS_Init+0x64>)
 800279e:	f00b fbfb 	bl	800df98 <osThreadNew>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <MX_FREERTOS_Init+0x68>)
 80027a6:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 80027a8:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <MX_FREERTOS_Init+0x6c>)
 80027aa:	2100      	movs	r1, #0
 80027ac:	480d      	ldr	r0, [pc, #52]	; (80027e4 <MX_FREERTOS_Init+0x70>)
 80027ae:	f00b fbf3 	bl	800df98 <osThreadNew>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <MX_FREERTOS_Init+0x74>)
 80027b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	080244f0 	.word	0x080244f0
 80027c0:	08002899 	.word	0x08002899
 80027c4:	20007268 	.word	0x20007268
 80027c8:	08024514 	.word	0x08024514
 80027cc:	08002cb1 	.word	0x08002cb1
 80027d0:	2000a1a8 	.word	0x2000a1a8
 80027d4:	08024538 	.word	0x08024538
 80027d8:	08002df9 	.word	0x08002df9
 80027dc:	2000aa08 	.word	0x2000aa08
 80027e0:	0802455c 	.word	0x0802455c
 80027e4:	08002e0d 	.word	0x08002e0d
 80027e8:	2000b268 	.word	0x2000b268

080027ec <service_callback>:
  */
int count = 1;

// サービスのコールバック関数を定義
void service_callback(const void *request, void *response)
{
 80027ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
	// リクエストとレスポンスを適切な型にキャスト
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	60bb      	str	r3, [r7, #8]
	// 1秒スリープ（重い処理の代わり）
	osDelay(1000);
 8002800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002804:	f00b fc6e 	bl	800e0e4 <osDelay>
	// レスポンスに合計値をセット
	_res->sum = _req->a + _req->b + _req->c;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002814:	1884      	adds	r4, r0, r2
 8002816:	eb41 0503 	adc.w	r5, r1, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002820:	eb14 0802 	adds.w	r8, r4, r2
 8002824:	eb45 0903 	adc.w	r9, r5, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	e9c3 8900 	strd	r8, r9, [r3]
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002838 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	ed93 7b04 	vldr	d7, [r3, #16]
 800284a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <subscription_callback+0x58>)
 8002850:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	ed93 7b06 	vldr	d7, [r3, #24]
 800285a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <subscription_callback+0x58>)
 8002860:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	ed93 7b08 	vldr	d7, [r3, #32]
 800286a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <subscription_callback+0x58>)
 8002870:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800287a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <subscription_callback+0x58>)
 8002880:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	2000bacc 	.word	0x2000bacc
 8002894:	00000000 	.word	0x00000000

08002898 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b0ee      	sub	sp, #440	; 0x1b8
 800289c:	af02      	add	r7, sp, #8
 800289e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80028a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028a6:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80028a8:	f00e f900 	bl	8010aac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの初期化
  	printf("start default task");
 80028ac:	48d2      	ldr	r0, [pc, #840]	; (8002bf8 <StartDefaultTask+0x360>)
 80028ae:	f01d ff5d 	bl	802076c <iprintf>
  	rmw_uros_set_custom_transport(
 80028b2:	4bd2      	ldr	r3, [pc, #840]	; (8002bfc <StartDefaultTask+0x364>)
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	4bd2      	ldr	r3, [pc, #840]	; (8002c00 <StartDefaultTask+0x368>)
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4bd2      	ldr	r3, [pc, #840]	; (8002c04 <StartDefaultTask+0x36c>)
 80028bc:	4ad2      	ldr	r2, [pc, #840]	; (8002c08 <StartDefaultTask+0x370>)
 80028be:	49d3      	ldr	r1, [pc, #844]	; (8002c0c <StartDefaultTask+0x374>)
 80028c0:	2001      	movs	r0, #1
 80028c2:	f012 fe9f 	bl	8015604 <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80028c6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80028ca:	4618      	mov	r0, r3
 80028cc:	f012 fb30 	bl	8014f30 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 80028d0:	4bcf      	ldr	r3, [pc, #828]	; (8002c10 <StartDefaultTask+0x378>)
 80028d2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	freeRTOS_allocator.deallocate = microros_deallocate;
 80028d6:	4bcf      	ldr	r3, [pc, #828]	; (8002c14 <StartDefaultTask+0x37c>)
 80028d8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.reallocate = microros_reallocate;
 80028dc:	4bce      	ldr	r3, [pc, #824]	; (8002c18 <StartDefaultTask+0x380>)
 80028de:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80028e2:	4bce      	ldr	r3, [pc, #824]	; (8002c1c <StartDefaultTask+0x384>)
 80028e4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80028e8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80028ec:	4618      	mov	r0, r3
 80028ee:	f012 fb2d 	bl	8014f4c <rcutils_set_default_allocator>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f083 0301 	eor.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <StartDefaultTask+0x70>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 80028fe:	f240 2137 	movw	r1, #567	; 0x237
 8002902:	48c7      	ldr	r0, [pc, #796]	; (8002c20 <StartDefaultTask+0x388>)
 8002904:	f01d ff32 	bl	802076c <iprintf>
  	}

      // ここからサービスサーバの実装
  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8002908:	4bc6      	ldr	r3, [pc, #792]	; (8002c24 <StartDefaultTask+0x38c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6898      	ldr	r0, [r3, #8]
 800290e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002912:	2202      	movs	r2, #2
 8002914:	2100      	movs	r1, #0
 8002916:	f01d ff97 	bl	8020848 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 800291a:	f010 fd37 	bl	801338c <rcl_get_zero_initialized_init_options>
 800291e:	4603      	mov	r3, r0
 8002920:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8002924:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8002928:	4618      	mov	r0, r3
 800292a:	f012 fb2d 	bl	8014f88 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 800292e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002932:	4618      	mov	r0, r3
 8002934:	f010 fe32 	bl	801359c <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8002938:	f011 f8ee 	bl	8013b18 <rcl_get_zero_initialized_service>
 800293c:	4603      	mov	r3, r0
 800293e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	publisher = rcl_get_zero_initialized_publisher();
 8002942:	f010 ffd5 	bl	80138f0 <rcl_get_zero_initialized_publisher>
 8002946:	4603      	mov	r3, r0
 8002948:	4ab7      	ldr	r2, [pc, #732]	; (8002c28 <StartDefaultTask+0x390>)
 800294a:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 800294c:	f011 fa08 	bl	8013d60 <rcl_get_zero_initialized_subscription>
 8002950:	4603      	mov	r3, r0
 8002952:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002956:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800295a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800295e:	4618      	mov	r0, r3
 8002960:	f011 fe8e 	bl	8014680 <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002964:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002968:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800296c:	4618      	mov	r0, r3
 800296e:	f010 ff8f 	bl	8013890 <rcl_node_get_default_options>

  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002972:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 8002976:	466a      	mov	r2, sp
 8002978:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800297c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002980:	e882 0003 	stmia.w	r2, {r0, r1}
 8002984:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8002988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298a:	4620      	mov	r0, r4
 800298c:	f010 fd00 	bl	8013390 <rcl_init_options_init>
 8002990:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8002994:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <StartDefaultTask+0x112>
 800299c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80029a0:	f240 2146 	movw	r1, #582	; 0x246
 80029a4:	48a1      	ldr	r0, [pc, #644]	; (8002c2c <StartDefaultTask+0x394>)
 80029a6:	f01d fee1 	bl	802076c <iprintf>
      // ROS_DOMAIN_IDの設定。
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 80029aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f010 fdeb 	bl	801358c <rcl_init_options_set_domain_id>
 80029b6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 80029ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <StartDefaultTask+0x138>
 80029c2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80029c6:	f44f 7112 	mov.w	r1, #584	; 0x248
 80029ca:	4898      	ldr	r0, [pc, #608]	; (8002c2c <StartDefaultTask+0x394>)
 80029cc:	f01d fece 	bl	802076c <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80029d0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80029d4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80029d8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	2200      	movs	r2, #0
 80029e2:	2100      	movs	r1, #0
 80029e4:	f012 f97c 	bl	8014ce0 <rclc_support_init_with_options>
      // ノードの作成
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 80029e8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80029ec:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80029f0:	f107 0320 	add.w	r3, r7, #32
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	4a8d      	ldr	r2, [pc, #564]	; (8002c30 <StartDefaultTask+0x398>)
 80029fa:	498e      	ldr	r1, [pc, #568]	; (8002c34 <StartDefaultTask+0x39c>)
 80029fc:	f012 f9a6 	bl	8014d4c <rclc_node_init_with_options>
 8002a00:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002a04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d006      	beq.n	8002a1a <StartDefaultTask+0x182>
 8002a0c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a10:	f240 214b 	movw	r1, #587	; 0x24b
 8002a14:	4885      	ldr	r0, [pc, #532]	; (8002c2c <StartDefaultTask+0x394>)
 8002a16:	f01d fea9 	bl	802076c <iprintf>
      // サービスの作成
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8002a1a:	f00e fda7 	bl	801156c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002a24:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002a28:	4b83      	ldr	r3, [pc, #524]	; (8002c38 <StartDefaultTask+0x3a0>)
 8002a2a:	f012 fa05 	bl	8014e38 <rclc_service_init_default>
 8002a2e:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002a32:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <StartDefaultTask+0x1b0>
 8002a3a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002a3e:	f240 214d 	movw	r1, #589	; 0x24d
 8002a42:	487a      	ldr	r0, [pc, #488]	; (8002c2c <StartDefaultTask+0x394>)
 8002a44:	f01d fe92 	bl	802076c <iprintf>

  	 //publisherの作成
	RCCHECK(rclc_publisher_init_default(
 8002a48:	f014 fc96 	bl	8017378 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002a52:	4b7a      	ldr	r3, [pc, #488]	; (8002c3c <StartDefaultTask+0x3a4>)
 8002a54:	4874      	ldr	r0, [pc, #464]	; (8002c28 <StartDefaultTask+0x390>)
 8002a56:	f012 f9b5 	bl	8014dc4 <rclc_publisher_init_default>
 8002a5a:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8002a5e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <StartDefaultTask+0x1dc>
 8002a66:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002a6a:	f44f 7114 	mov.w	r1, #592	; 0x250
 8002a6e:	486f      	ldr	r0, [pc, #444]	; (8002c2c <StartDefaultTask+0x394>)
 8002a70:	f01d fe7c 	bl	802076c <iprintf>
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

	 //publisherの作成
		RCCHECK(rclc_publisher_init_default(
 8002a74:	f00e feaa 	bl	80117cc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002a7e:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <StartDefaultTask+0x3a8>)
 8002a80:	4870      	ldr	r0, [pc, #448]	; (8002c44 <StartDefaultTask+0x3ac>)
 8002a82:	f012 f99f 	bl	8014dc4 <rclc_publisher_init_default>
 8002a86:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8002a8a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <StartDefaultTask+0x208>
 8002a92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a96:	f240 2157 	movw	r1, #599	; 0x257
 8002a9a:	4864      	ldr	r0, [pc, #400]	; (8002c2c <StartDefaultTask+0x394>)
 8002a9c:	f01d fe66 	bl	802076c <iprintf>
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));


	 //subscriberの作成
		RCCHECK(rclc_subscription_init_default(
 8002aa0:	f00e fe7c 	bl	801179c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002aaa:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <StartDefaultTask+0x3b0>)
 8002ab0:	f012 f9fc 	bl	8014eac <rclc_subscription_init_default>
 8002ab4:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8002ab8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <StartDefaultTask+0x236>
 8002ac0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ac4:	f240 215f 	movw	r1, #607	; 0x25f
 8002ac8:	4858      	ldr	r0, [pc, #352]	; (8002c2c <StartDefaultTask+0x394>)
 8002aca:	f01d fe4f 	bl	802076c <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));
      // エグゼキューターの作成。三番目の引数はextecuterに登録するコールバック関数の数。
  	RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8002ace:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8002ad2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8002ad6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002ada:	2202      	movs	r2, #2
 8002adc:	f011 fddc 	bl	8014698 <rclc_executor_init>
 8002ae0:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8002ae4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <StartDefaultTask+0x262>
 8002aec:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002af0:	f240 2165 	movw	r1, #613	; 0x265
 8002af4:	484d      	ldr	r0, [pc, #308]	; (8002c2c <StartDefaultTask+0x394>)
 8002af6:	f01d fe39 	bl	802076c <iprintf>

      // エグゼキューターにサービスを追加
  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8002afa:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002afe:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002b02:	4b52      	ldr	r3, [pc, #328]	; (8002c4c <StartDefaultTask+0x3b4>)
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4b52      	ldr	r3, [pc, #328]	; (8002c50 <StartDefaultTask+0x3b8>)
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <StartDefaultTask+0x3bc>)
 8002b0a:	f011 fe7f 	bl	801480c <rclc_executor_add_service>
 8002b0e:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8002b12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <StartDefaultTask+0x290>
 8002b1a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002b1e:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002b22:	4842      	ldr	r0, [pc, #264]	; (8002c2c <StartDefaultTask+0x394>)
 8002b24:	f01d fe22 	bl	802076c <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8002b28:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002b2c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002b30:	2300      	movs	r3, #0
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <StartDefaultTask+0x3c0>)
 8002b36:	4a49      	ldr	r2, [pc, #292]	; (8002c5c <StartDefaultTask+0x3c4>)
 8002b38:	f011 fe2a 	bl	8014790 <rclc_executor_add_subscription>
 8002b3c:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8002b40:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <StartDefaultTask+0x2be>
 8002b48:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002b4c:	f240 2169 	movw	r1, #617	; 0x269
 8002b50:	4836      	ldr	r0, [pc, #216]	; (8002c2c <StartDefaultTask+0x394>)
 8002b52:	f01d fe0b 	bl	802076c <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8002b56:	4842      	ldr	r0, [pc, #264]	; (8002c60 <StartDefaultTask+0x3c8>)
 8002b58:	f014 fb20 	bl	801719c <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 8002b5c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002b60:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002b64:	4a3f      	ldr	r2, [pc, #252]	; (8002c64 <StartDefaultTask+0x3cc>)
 8002b66:	461c      	mov	r4, r3
 8002b68:	4615      	mov	r5, r2
 8002b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b6e:	682b      	ldr	r3, [r5, #0]
 8002b70:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	2214      	movs	r2, #20
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4839      	ldr	r0, [pc, #228]	; (8002c60 <StartDefaultTask+0x3c8>)
 8002b7c:	f014 fb6c 	bl	8017258 <rosidl_runtime_c__String__assignn>

    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002b80:	2200      	movs	r2, #0
 8002b82:	4937      	ldr	r1, [pc, #220]	; (8002c60 <StartDefaultTask+0x3c8>)
 8002b84:	4828      	ldr	r0, [pc, #160]	; (8002c28 <StartDefaultTask+0x390>)
 8002b86:	f010 ff81 	bl	8013a8c <rcl_publish>
 8002b8a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002b8e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <StartDefaultTask+0x30c>
 8002b96:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8002b9a:	f240 2172 	movw	r1, #626	; 0x272
 8002b9e:	4832      	ldr	r0, [pc, #200]	; (8002c68 <StartDefaultTask+0x3d0>)
 8002ba0:	f01d fde4 	bl	802076c <iprintf>

    //初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	4830      	ldr	r0, [pc, #192]	; (8002c6c <StartDefaultTask+0x3d4>)
 8002baa:	f002 fd63 	bl	8005674 <HAL_GPIO_WritePin>

	//記事ではmcmdなどの初期化コードを描くことになっている場所
	canSetting();
 8002bae:	f7ff fb5f 	bl	8002270 <canSetting>
	//servoSetting();
	mcmdMoter1Setting();
 8002bb2:	f7ff fb87 	bl	80022c4 <mcmdMoter1Setting>
	mcmdMoter2Setting();
 8002bb6:	f7ff fbe9 	bl	800238c <mcmdMoter2Setting>
	mcmdMoter3Setting();
 8002bba:	f7ff fc4b 	bl	8002454 <mcmdMoter3Setting>
	mcmdMoter4Setting();
 8002bbe:	f7ff fcad 	bl	800251c <mcmdMoter4Setting>
	mcmdMoter5Setting();
 8002bc2:	f7ff fd0f 	bl	80025e4 <mcmdMoter5Setting>
	mcmdMoter6Setting();
 8002bc6:	f7ff fd71 	bl	80026ac <mcmdMoter6Setting>
	//airSetting();
	printf("calibrationFinished\r\n");
 8002bca:	4829      	ldr	r0, [pc, #164]	; (8002c70 <StartDefaultTask+0x3d8>)
 8002bcc:	f01d fe34 	bl	8020838 <puts>

	finishCANsetting = true;
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <StartDefaultTask+0x3dc>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8002bd6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002bda:	a305      	add	r3, pc, #20	; (adr r3, 8002bf0 <StartDefaultTask+0x358>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	4608      	mov	r0, r1
 8002be2:	f012 f843 	bl	8014c6c <rclc_executor_spin_some>
	  RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));
 8002be6:	2200      	movs	r2, #0
 8002be8:	e046      	b.n	8002c78 <StartDefaultTask+0x3e0>
 8002bea:	bf00      	nop
 8002bec:	f3af 8000 	nop.w
 8002bf0:	05f5e100 	.word	0x05f5e100
 8002bf4:	00000000 	.word	0x00000000
 8002bf8:	08024254 	.word	0x08024254
 8002bfc:	08002135 	.word	0x08002135
 8002c00:	080020d5 	.word	0x080020d5
 8002c04:	080020b5 	.word	0x080020b5
 8002c08:	08002089 	.word	0x08002089
 8002c0c:	2000bb88 	.word	0x2000bb88
 8002c10:	0800310d 	.word	0x0800310d
 8002c14:	08003151 	.word	0x08003151
 8002c18:	08003189 	.word	0x08003189
 8002c1c:	080031f5 	.word	0x080031f5
 8002c20:	08024268 	.word	0x08024268
 8002c24:	20000778 	.word	0x20000778
 8002c28:	20007260 	.word	0x20007260
 8002c2c:	08024290 	.word	0x08024290
 8002c30:	080242bc 	.word	0x080242bc
 8002c34:	080242c0 	.word	0x080242c0
 8002c38:	080242c8 	.word	0x080242c8
 8002c3c:	080242d8 	.word	0x080242d8
 8002c40:	080242e8 	.word	0x080242e8
 8002c44:	20007264 	.word	0x20007264
 8002c48:	080242f4 	.word	0x080242f4
 8002c4c:	080027ed 	.word	0x080027ed
 8002c50:	20007048 	.word	0x20007048
 8002c54:	20007030 	.word	0x20007030
 8002c58:	08002839 	.word	0x08002839
 8002c5c:	20007050 	.word	0x20007050
 8002c60:	20007080 	.word	0x20007080
 8002c64:	08024348 	.word	0x08024348
 8002c68:	08024304 	.word	0x08024304
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	08024330 	.word	0x08024330
 8002c74:	2000bac8 	.word	0x2000bac8
 8002c78:	490a      	ldr	r1, [pc, #40]	; (8002ca4 <StartDefaultTask+0x40c>)
 8002c7a:	480b      	ldr	r0, [pc, #44]	; (8002ca8 <StartDefaultTask+0x410>)
 8002c7c:	f010 ff06 	bl	8013a8c <rcl_publish>
 8002c80:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8002c84:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <StartDefaultTask+0x402>
 8002c8c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002c90:	f240 218a 	movw	r1, #650	; 0x28a
 8002c94:	4805      	ldr	r0, [pc, #20]	; (8002cac <StartDefaultTask+0x414>)
 8002c96:	f01d fd69 	bl	802076c <iprintf>

	  osDelay(10);
 8002c9a:	200a      	movs	r0, #10
 8002c9c:	f00b fa22 	bl	800e0e4 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8002ca0:	e799      	b.n	8002bd6 <StartDefaultTask+0x33e>
 8002ca2:	bf00      	nop
 8002ca4:	20007090 	.word	0x20007090
 8002ca8:	20007264 	.word	0x20007264
 8002cac:	08024304 	.word	0x08024304

08002cb0 <StartSysCheckTask>:
	  AirCylinder_SendOutput(&air_device, AIR_OFF); // 0番ポートの電磁弁がoffになる
	  osDelay(1000);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <StartSysCheckTask+0x30>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d009      	beq.n	8002cd4 <StartSysCheckTask+0x24>
		  if(!finishCheck){
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <StartSysCheckTask+0x34>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <StartSysCheckTask+0x24>
		  	    //mcmdMoter4Checker();
			    //mcmdMoter5Checker();
		  		//servoChecker();
		  		//airChecker();
		  		//osDelay(8000);
		  		finishCheck = true;
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <StartSysCheckTask+0x34>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
	  //freeRTOSChecker();
	  //mcmdEncorder1Checker();
	  //mcmdEncorder2Checker();
	  //mcmdEncorder3Checker();
	  //mcmdEncorder4Checker();
	  osDelay(1000);
 8002cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cd8:	f00b fa04 	bl	800e0e4 <osDelay>
	  if(finishCANsetting){
 8002cdc:	e7ec      	b.n	8002cb8 <StartSysCheckTask+0x8>
 8002cde:	bf00      	nop
 8002ce0:	2000bac8 	.word	0x2000bac8
 8002ce4:	2000badc 	.word	0x2000badc

08002ce8 <velLimmiter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorRunTask */
float velLimmit = 3.0f;
float velLimmiter(float input){
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	ed87 0a01 	vstr	s0, [r7, #4]
	if(input >= velLimmit){
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <velLimmiter+0x38>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d04:	db02      	blt.n	8002d0c <velLimmiter+0x24>
		input = velLimmit;
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <velLimmiter+0x38>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	607b      	str	r3, [r7, #4]
	}
	return input;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	ee07 3a90 	vmov	s15, r3
}
 8002d12:	eeb0 0a67 	vmov.f32	s0, s15
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	20000000 	.word	0x20000000

08002d24 <motorRun>:
void motorRun(){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	//初期化
	MCMD_SetTarget(&mcmd4M1_struct, 0.0f);
 8002d28:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8002dd8 <motorRun+0xb4>
 8002d2c:	482b      	ldr	r0, [pc, #172]	; (8002ddc <motorRun+0xb8>)
 8002d2e:	f7fe fcfd 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M2_struct, 0.0f);
 8002d32:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002dd8 <motorRun+0xb4>
 8002d36:	482a      	ldr	r0, [pc, #168]	; (8002de0 <motorRun+0xbc>)
 8002d38:	f7fe fcf8 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M3_struct, 0.0f);
 8002d3c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002dd8 <motorRun+0xb4>
 8002d40:	4828      	ldr	r0, [pc, #160]	; (8002de4 <motorRun+0xc0>)
 8002d42:	f7fe fcf3 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M4_struct, 0.0f);
 8002d46:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002dd8 <motorRun+0xb4>
 8002d4a:	4827      	ldr	r0, [pc, #156]	; (8002de8 <motorRun+0xc4>)
 8002d4c:	f7fe fcee 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M5_struct, 0.0f);
 8002d50:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8002dd8 <motorRun+0xb4>
 8002d54:	4825      	ldr	r0, [pc, #148]	; (8002dec <motorRun+0xc8>)
 8002d56:	f7fe fce9 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M6_struct, 0.0f);
 8002d5a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002dd8 <motorRun+0xb4>
 8002d5e:	4824      	ldr	r0, [pc, #144]	; (8002df0 <motorRun+0xcc>)
 8002d60:	f7fe fce4 	bl	800172c <MCMD_SetTarget>

	MCMD_SetTarget(&mcmd4M1_struct, velLimmiter(cmd_motor[0]));
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <motorRun+0xd0>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6e:	f7ff ffbb 	bl	8002ce8 <velLimmiter>
 8002d72:	eef0 7a40 	vmov.f32	s15, s0
 8002d76:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7a:	4818      	ldr	r0, [pc, #96]	; (8002ddc <motorRun+0xb8>)
 8002d7c:	f7fe fcd6 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M2_struct, velLimmiter(cmd_motor[1]));
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <motorRun+0xd0>)
 8002d82:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d86:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8a:	f7ff ffad 	bl	8002ce8 <velLimmiter>
 8002d8e:	eef0 7a40 	vmov.f32	s15, s0
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	4812      	ldr	r0, [pc, #72]	; (8002de0 <motorRun+0xbc>)
 8002d98:	f7fe fcc8 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M3_struct, velLimmiter(cmd_motor[2]));
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <motorRun+0xd0>)
 8002d9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002da2:	eeb0 0a67 	vmov.f32	s0, s15
 8002da6:	f7ff ff9f 	bl	8002ce8 <velLimmiter>
 8002daa:	eef0 7a40 	vmov.f32	s15, s0
 8002dae:	eeb0 0a67 	vmov.f32	s0, s15
 8002db2:	480c      	ldr	r0, [pc, #48]	; (8002de4 <motorRun+0xc0>)
 8002db4:	f7fe fcba 	bl	800172c <MCMD_SetTarget>
	MCMD_SetTarget(&mcmd4M4_struct, velLimmiter(cmd_motor[3]));
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <motorRun+0xd0>)
 8002dba:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	f7ff ff91 	bl	8002ce8 <velLimmiter>
 8002dc6:	eef0 7a40 	vmov.f32	s15, s0
 8002dca:	eeb0 0a67 	vmov.f32	s0, s15
 8002dce:	4806      	ldr	r0, [pc, #24]	; (8002de8 <motorRun+0xc4>)
 8002dd0:	f7fe fcac 	bl	800172c <MCMD_SetTarget>
	//MCMD_SetTarget(&mcmd4M5_struct, velLimmiter(cmd_motor[3]));
	//MCMD_SetTarget(&mcmd4M4_struct, velLimmiter(cmd_motor[3]));
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	200070e0 	.word	0x200070e0
 8002de0:	20007120 	.word	0x20007120
 8002de4:	20007160 	.word	0x20007160
 8002de8:	200071a0 	.word	0x200071a0
 8002dec:	200071e0 	.word	0x200071e0
 8002df0:	20007220 	.word	0x20007220
 8002df4:	2000bacc 	.word	0x2000bacc

08002df8 <StartMotorRunTask>:
void StartMotorRunTask(void *argument)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorRunTask */
  /* Infinite loop */
  for(;;)
  {
	  motorRun();
 8002e00:	f7ff ff90 	bl	8002d24 <motorRun>

    osDelay(10);
 8002e04:	200a      	movs	r0, #10
 8002e06:	f00b f96d 	bl	800e0e4 <osDelay>
	  motorRun();
 8002e0a:	e7f9      	b.n	8002e00 <StartMotorRunTask+0x8>

08002e0c <StartEncorderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08e      	sub	sp, #56	; 0x38
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncorderTask */
  /* Infinite loop */
  for(;;)
  {
	  enc.encfontright = Get_MCMD_Feedback(&(mcmd4M1_struct.device)).value;
 8002e14:	f107 0308 	add.w	r3, r7, #8
 8002e18:	492b      	ldr	r1, [pc, #172]	; (8002ec8 <StartEncorderTask+0xbc>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fc9e 	bl	800175c <Get_MCMD_Feedback>
 8002e20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <StartEncorderTask+0xc0>)
 8002e2a:	ed83 7b04 	vstr	d7, [r3, #16]
	  enc.encfrontleft = Get_MCMD_Feedback(&(mcmd4M2_struct.device)).value;
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	4927      	ldr	r1, [pc, #156]	; (8002ed0 <StartEncorderTask+0xc4>)
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fc91 	bl	800175c <Get_MCMD_Feedback>
 8002e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <StartEncorderTask+0xc0>)
 8002e44:	ed83 7b06 	vstr	d7, [r3, #24]
	  enc.encbackright = Get_MCMD_Feedback(&(mcmd4M3_struct.device)).value;
 8002e48:	f107 0318 	add.w	r3, r7, #24
 8002e4c:	4921      	ldr	r1, [pc, #132]	; (8002ed4 <StartEncorderTask+0xc8>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fc84 	bl	800175c <Get_MCMD_Feedback>
 8002e54:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <StartEncorderTask+0xc0>)
 8002e5e:	ed83 7b08 	vstr	d7, [r3, #32]
	  enc.encbackleft = Get_MCMD_Feedback(&(mcmd4M4_struct.device)).value;
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	491c      	ldr	r1, [pc, #112]	; (8002ed8 <StartEncorderTask+0xcc>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe fc77 	bl	800175c <Get_MCMD_Feedback>
 8002e6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <StartEncorderTask+0xc0>)
 8002e78:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  enc.enclx = Get_MCMD_Feedback(&(mcmd4M5_struct.device)).value;
 8002e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e80:	4916      	ldr	r1, [pc, #88]	; (8002edc <StartEncorderTask+0xd0>)
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fc6a 	bl	800175c <Get_MCMD_Feedback>
 8002e88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <StartEncorderTask+0xc0>)
 8002e92:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	  enc.encly = 0.0f;
 8002e96:	490d      	ldr	r1, [pc, #52]	; (8002ecc <StartEncorderTask+0xc0>)
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	  enc.encadditional = Get_MCMD_Feedback(&(mcmd4M6_struct.device)).value;
 8002ea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ea8:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <StartEncorderTask+0xd4>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fc56 	bl	800175c <Get_MCMD_Feedback>
 8002eb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002eb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <StartEncorderTask+0xc0>)
 8002eba:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

    osDelay(10);
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	f00b f910 	bl	800e0e4 <osDelay>
	  enc.encfontright = Get_MCMD_Feedback(&(mcmd4M1_struct.device)).value;
 8002ec4:	e7a6      	b.n	8002e14 <StartEncorderTask+0x8>
 8002ec6:	bf00      	nop
 8002ec8:	200070e0 	.word	0x200070e0
 8002ecc:	20007090 	.word	0x20007090
 8002ed0:	20007120 	.word	0x20007120
 8002ed4:	20007160 	.word	0x20007160
 8002ed8:	200071a0 	.word	0x200071a0
 8002edc:	200071e0 	.word	0x200071e0
 8002ee0:	20007220 	.word	0x20007220

08002ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f18:	f043 0310 	orr.w	r3, r3, #16
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f48:	f043 0308 	orr.w	r3, r3, #8
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <MX_GPIO_Init+0xc0>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8002f72:	2200      	movs	r2, #0
 8002f74:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <MX_GPIO_Init+0xc4>)
 8002f7a:	f002 fb7b 	bl	8005674 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8002f7e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8002f82:	617b      	str	r3, [r7, #20]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f84:	2301      	movs	r3, #1
 8002f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4619      	mov	r1, r3
 8002f96:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <MX_GPIO_Init+0xc4>)
 8002f98:	f002 f9c0 	bl	800531c <HAL_GPIO_Init>

}
 8002f9c:	bf00      	nop
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020400 	.word	0x40020400

08002fac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8002fb6:	1df9      	adds	r1, r7, #7
 8002fb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <__io_putchar+0x24>)
 8002fc0:	f005 ffaa 	bl	8008f18 <HAL_UART_Transmit>
    return ch;
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000bb88 	.word	0x2000bb88

08002fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd8:	f000 fdfb 	bl	8003bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fdc:	f000 f812 	bl	8003004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe0:	f7ff ff80 	bl	8002ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fe4:	f7ff f82a 	bl	800203c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002fe8:	f000 fcca 	bl	8003980 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002fec:	f000 fbd4 	bl	8003798 <MX_TIM1_Init>
  MX_CAN1_Init();
 8002ff0:	f7fe fd3e 	bl	8001a70 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002ff4:	f00a ff66 	bl	800dec4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002ff8:	f7ff fbbc 	bl	8002774 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002ffc:	f00a ff96 	bl	800df2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003000:	e7fe      	b.n	8003000 <main+0x2c>
	...

08003004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b094      	sub	sp, #80	; 0x50
 8003008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800300a:	f107 031c 	add.w	r3, r7, #28
 800300e:	2234      	movs	r2, #52	; 0x34
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f01d fe56 	bl	8020cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <SystemClock_Config+0xd8>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <SystemClock_Config+0xd8>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <SystemClock_Config+0xd8>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <SystemClock_Config+0xdc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003048:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <SystemClock_Config+0xdc>)
 800304a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <SystemClock_Config+0xdc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800305c:	2301      	movs	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003064:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003066:	2302      	movs	r3, #2
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800306a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003070:	2304      	movs	r3, #4
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003074:	2360      	movs	r3, #96	; 0x60
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003078:	2302      	movs	r3, #2
 800307a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800307c:	2304      	movs	r3, #4
 800307e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003080:	2302      	movs	r3, #2
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fe15 	bl	8006cb8 <HAL_RCC_OscConfig>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003094:	f000 f835 	bl	8003102 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003098:	f003 fdbe 	bl	8006c18 <HAL_PWREx_EnableOverDrive>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80030a2:	f000 f82e 	bl	8003102 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a6:	230f      	movs	r3, #15
 80030a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030aa:	2302      	movs	r3, #2
 80030ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	2103      	movs	r1, #3
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 f8a5 	bl	8007214 <HAL_RCC_ClockConfig>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80030d0:	f000 f817 	bl	8003102 <Error_Handler>
  }
}
 80030d4:	bf00      	nop
 80030d6:	3750      	adds	r7, #80	; 0x50
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000

080030e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030f6:	f000 fd79 	bl	8003bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003106:	b672      	cpsid	i
}
 8003108:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800310a:	e7fe      	b.n	800310a <Error_Handler+0x8>

0800310c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <microros_allocate+0x3c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <microros_allocate+0x3c>)
 8003124:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <microros_allocate+0x40>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <microros_allocate+0x40>)
 8003134:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe fd2c 	bl	8001b94 <pvPortMallocMicroROS>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000bae0 	.word	0x2000bae0
 800314c:	2000bae4 	.word	0x2000bae4

08003150 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fe fe3f 	bl	8001de4 <getBlockSize>
 8003166:	4603      	mov	r3, r0
 8003168:	4a06      	ldr	r2, [pc, #24]	; (8003184 <microros_deallocate+0x34>)
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	461a      	mov	r2, r3
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <microros_deallocate+0x34>)
 8003172:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fe fdd7 	bl	8001d28 <vPortFreeMicroROS>
  }
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000bae4 	.word	0x2000bae4

08003188 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <microros_reallocate+0x64>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4413      	add	r3, r2
 800319e:	461a      	mov	r2, r3
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <microros_reallocate+0x64>)
 80031a2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <microros_reallocate+0x68>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4413      	add	r3, r2
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <microros_reallocate+0x68>)
 80031b2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80031ba:	68b8      	ldr	r0, [r7, #8]
 80031bc:	f7fe fcea 	bl	8001b94 <pvPortMallocMicroROS>
 80031c0:	4603      	mov	r3, r0
 80031c2:	e00e      	b.n	80031e2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7fe fe0d 	bl	8001de4 <getBlockSize>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <microros_reallocate+0x68>)
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <microros_reallocate+0x68>)
 80031d6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7fe fe20 	bl	8001e20 <pvPortReallocMicroROS>
 80031e0:	4603      	mov	r3, r0
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000bae0 	.word	0x2000bae0
 80031f0:	2000bae4 	.word	0x2000bae4

080031f4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <microros_zero_allocate+0x48>)
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4413      	add	r3, r2
 800320e:	461a      	mov	r2, r3
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <microros_zero_allocate+0x48>)
 8003212:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	4a08      	ldr	r2, [pc, #32]	; (8003240 <microros_zero_allocate+0x4c>)
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4413      	add	r3, r2
 8003222:	461a      	mov	r2, r3
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <microros_zero_allocate+0x4c>)
 8003226:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7fe fe25 	bl	8001e7a <pvPortCallocMicroROS>
 8003230:	4603      	mov	r3, r0
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	2000bae0 	.word	0x2000bae0
 8003240:	2000bae4 	.word	0x2000bae4
 8003244:	00000000 	.word	0x00000000

08003248 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800325a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800325e:	a320      	add	r3, pc, #128	; (adr r3, 80032e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd fa10 	bl	8000688 <__aeabi_ldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003276:	a31a      	add	r3, pc, #104	; (adr r3, 80032e0 <UTILS_NanosecondsToTimespec+0x98>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd fa04 	bl	8000688 <__aeabi_ldivmod>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da20      	bge.n	80032ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <UTILS_NanosecondsToTimespec+0x90>)
 8003292:	fb82 1203 	smull	r1, r2, r2, r3
 8003296:	1712      	asrs	r2, r2, #28
 8003298:	17db      	asrs	r3, r3, #31
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	17c8      	asrs	r0, r1, #31
 80032aa:	460c      	mov	r4, r1
 80032ac:	4605      	mov	r5, r0
 80032ae:	ebb2 0804 	subs.w	r8, r2, r4
 80032b2:	eb63 0905 	sbc.w	r9, r3, r5
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4906      	ldr	r1, [pc, #24]	; (80032dc <UTILS_NanosecondsToTimespec+0x94>)
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	609a      	str	r2, [r3, #8]
    }
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032d8:	44b82fa1 	.word	0x44b82fa1
 80032dc:	3b9aca00 	.word	0x3b9aca00
 80032e0:	3b9aca00 	.word	0x3b9aca00
 80032e4:	00000000 	.word	0x00000000

080032e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b08e      	sub	sp, #56	; 0x38
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6278      	str	r0, [r7, #36]	; 0x24
 80032f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80032f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032f8:	2300      	movs	r3, #0
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800330a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800330e:	4618      	mov	r0, r3
 8003310:	f00c f9e6 	bl	800f6e0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	17da      	asrs	r2, r3, #31
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	69b9      	ldr	r1, [r7, #24]
 8003326:	000b      	movs	r3, r1
 8003328:	2200      	movs	r2, #0
 800332a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	2200      	movs	r2, #0
 8003332:	461c      	mov	r4, r3
 8003334:	4615      	mov	r5, r2
 8003336:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800333a:	1911      	adds	r1, r2, r4
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	416b      	adcs	r3, r5
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003346:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800334a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	f04f 0500 	mov.w	r5, #0
 800335a:	015d      	lsls	r5, r3, #5
 800335c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003360:	0154      	lsls	r4, r2, #5
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	ebb2 0800 	subs.w	r8, r2, r0
 800336a:	eb63 0901 	sbc.w	r9, r3, r1
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800337a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800337e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003382:	4690      	mov	r8, r2
 8003384:	4699      	mov	r9, r3
 8003386:	eb18 0a00 	adds.w	sl, r8, r0
 800338a:	eb49 0b01 	adc.w	fp, r9, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800339a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800339e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033a2:	ebb2 040a 	subs.w	r4, r2, sl
 80033a6:	603c      	str	r4, [r7, #0]
 80033a8:	eb63 030b 	sbc.w	r3, r3, fp
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033b2:	4623      	mov	r3, r4
 80033b4:	181b      	adds	r3, r3, r0
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	462b      	mov	r3, r5
 80033ba:	eb41 0303 	adc.w	r3, r1, r3
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c6:	f7ff ff3f 	bl	8003248 <UTILS_NanosecondsToTimespec>

    return 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	3738      	adds	r7, #56	; 0x38
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080033d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_MspInit+0x4c>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a10      	ldr	r2, [pc, #64]	; (8003424 <HAL_MspInit+0x4c>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_MspInit+0x4c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_MspInit+0x4c>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_MspInit+0x4c>)
 80033fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003400:	6453      	str	r3, [r2, #68]	; 0x44
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_MspInit+0x4c>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	210f      	movs	r1, #15
 8003412:	f06f 0001 	mvn.w	r0, #1
 8003416:	f001 fb41 	bl	8004a9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003438:	4b34      	ldr	r3, [pc, #208]	; (800350c <HAL_InitTick+0xe4>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	4a33      	ldr	r2, [pc, #204]	; (800350c <HAL_InitTick+0xe4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6413      	str	r3, [r2, #64]	; 0x40
 8003444:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_InitTick+0xe4>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003450:	f107 0210 	add.w	r2, r7, #16
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f004 f900 	bl	8007660 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800346a:	f004 f8d1 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 800346e:	6378      	str	r0, [r7, #52]	; 0x34
 8003470:	e004      	b.n	800347c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003472:	f004 f8cd 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 8003476:	4603      	mov	r3, r0
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	4a24      	ldr	r2, [pc, #144]	; (8003510 <HAL_InitTick+0xe8>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0c9b      	lsrs	r3, r3, #18
 8003486:	3b01      	subs	r3, #1
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <HAL_InitTick+0xec>)
 800348c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_InitTick+0xec>)
 8003494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003498:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_InitTick+0xec>)
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_InitTick+0xec>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_InitTick+0xec>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_InitTick+0xec>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80034b2:	4818      	ldr	r0, [pc, #96]	; (8003514 <HAL_InitTick+0xec>)
 80034b4:	f004 fd2e 	bl	8007f14 <HAL_TIM_Base_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80034be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11b      	bne.n	80034fe <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80034c6:	4813      	ldr	r0, [pc, #76]	; (8003514 <HAL_InitTick+0xec>)
 80034c8:	f004 fd86 	bl	8007fd8 <HAL_TIM_Base_Start_IT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80034d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d111      	bne.n	80034fe <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034da:	201c      	movs	r0, #28
 80034dc:	f001 fafa 	bl	8004ad4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	d808      	bhi.n	80034f8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80034e6:	2200      	movs	r2, #0
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	201c      	movs	r0, #28
 80034ec:	f001 fad6 	bl	8004a9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034f0:	4a09      	ldr	r2, [pc, #36]	; (8003518 <HAL_InitTick+0xf0>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e002      	b.n	80034fe <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80034fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003502:	4618      	mov	r0, r3
 8003504:	3738      	adds	r7, #56	; 0x38
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	431bde83 	.word	0x431bde83
 8003514:	2000bae8 	.word	0x2000bae8
 8003518:	2000000c 	.word	0x2000000c

0800351c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003520:	e7fe      	b.n	8003520 <NMI_Handler+0x4>

08003522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003526:	e7fe      	b.n	8003526 <HardFault_Handler+0x4>

08003528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800352c:	e7fe      	b.n	800352c <MemManage_Handler+0x4>

0800352e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003532:	e7fe      	b.n	8003532 <BusFault_Handler+0x4>

08003534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <UsageFault_Handler+0x4>

0800353a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <DMA1_Stream1_IRQHandler+0x10>)
 800354e:	f001 fc6f 	bl	8004e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	2000bc10 	.word	0x2000bc10

0800355c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <DMA1_Stream3_IRQHandler+0x10>)
 8003562:	f001 fc65 	bl	8004e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	2000bc70 	.word	0x2000bc70

08003570 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <CAN1_TX_IRQHandler+0x10>)
 8003576:	f000 ffe6 	bl	8004546 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20002be4 	.word	0x20002be4

08003584 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <CAN1_RX0_IRQHandler+0x10>)
 800358a:	f000 ffdc 	bl	8004546 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20002be4 	.word	0x20002be4

08003598 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <CAN1_RX1_IRQHandler+0x10>)
 800359e:	f000 ffd2 	bl	8004546 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20002be4 	.word	0x20002be4

080035ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035b0:	4802      	ldr	r0, [pc, #8]	; (80035bc <TIM2_IRQHandler+0x10>)
 80035b2:	f004 fde0 	bl	8008176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	2000bae8 	.word	0x2000bae8

080035c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035c4:	4802      	ldr	r0, [pc, #8]	; (80035d0 <USART3_IRQHandler+0x10>)
 80035c6:	f005 fe7d 	bl	80092c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	2000bb88 	.word	0x2000bb88

080035d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80035d8:	4802      	ldr	r0, [pc, #8]	; (80035e4 <OTG_FS_IRQHandler+0x10>)
 80035da:	f002 f9aa 	bl	8005932 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20011afc 	.word	0x20011afc

080035e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return 1;
 80035ec:	2301      	movs	r3, #1
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <_kill>:

int _kill(int pid, int sig)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003602:	f01d fbf7 	bl	8020df4 <__errno>
 8003606:	4603      	mov	r3, r0
 8003608:	2216      	movs	r2, #22
 800360a:	601a      	str	r2, [r3, #0]
  return -1;
 800360c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <_exit>:

void _exit (int status)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ffe7 	bl	80035f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800362a:	e7fe      	b.n	800362a <_exit+0x12>

0800362c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e00a      	b.n	8003654 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800363e:	f3af 8000 	nop.w
 8003642:	4601      	mov	r1, r0
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	60ba      	str	r2, [r7, #8]
 800364a:	b2ca      	uxtb	r2, r1
 800364c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	3301      	adds	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	dbf0      	blt.n	800363e <_read+0x12>
  }

  return len;
 800365c:	687b      	ldr	r3, [r7, #4]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e009      	b.n	800368c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	60ba      	str	r2, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fc93 	bl	8002fac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	3301      	adds	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	dbf1      	blt.n	8003678 <_write+0x12>
  }
  return len;
 8003694:	687b      	ldr	r3, [r7, #4]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_close>:

int _close(int file)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036c6:	605a      	str	r2, [r3, #4]
  return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <_isatty>:

int _isatty(int file)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036de:	2301      	movs	r3, #1
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <_sbrk+0x5c>)
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <_sbrk+0x60>)
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <_sbrk+0x64>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <_sbrk+0x64>)
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <_sbrk+0x68>)
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <_sbrk+0x64>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	429a      	cmp	r2, r3
 8003736:	d207      	bcs.n	8003748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003738:	f01d fb5c 	bl	8020df4 <__errno>
 800373c:	4603      	mov	r3, r0
 800373e:	220c      	movs	r2, #12
 8003740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003746:	e009      	b.n	800375c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <_sbrk+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <_sbrk+0x64>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <_sbrk+0x64>)
 8003758:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20080000 	.word	0x20080000
 8003768:	00000400 	.word	0x00000400
 800376c:	2000bb38 	.word	0x2000bb38
 8003770:	20016e78 	.word	0x20016e78

08003774 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <SystemInit+0x20>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	4a05      	ldr	r2, [pc, #20]	; (8003794 <SystemInit+0x20>)
 8003780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b096      	sub	sp, #88	; 0x58
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	60da      	str	r2, [r3, #12]
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	615a      	str	r2, [r3, #20]
 80037bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	222c      	movs	r2, #44	; 0x2c
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f01d fa7d 	bl	8020cc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037cc:	4a3f      	ldr	r2, [pc, #252]	; (80038cc <MX_TIM1_Init+0x134>)
 80037ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d6:	4b3c      	ldr	r3, [pc, #240]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80037dc:	4b3a      	ldr	r3, [pc, #232]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80037e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037ea:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037f6:	4834      	ldr	r0, [pc, #208]	; (80038c8 <MX_TIM1_Init+0x130>)
 80037f8:	f004 fc66 	bl	80080c8 <HAL_TIM_PWM_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003802:	f7ff fc7e 	bl	8003102 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003812:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003816:	4619      	mov	r1, r3
 8003818:	482b      	ldr	r0, [pc, #172]	; (80038c8 <MX_TIM1_Init+0x130>)
 800381a:	f005 fa05 	bl	8008c28 <HAL_TIMEx_MasterConfigSynchronization>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003824:	f7ff fc6d 	bl	8003102 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003828:	2360      	movs	r3, #96	; 0x60
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003830:	2300      	movs	r3, #0
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003834:	2300      	movs	r3, #0
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003838:	2300      	movs	r3, #0
 800383a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800383c:	2300      	movs	r3, #0
 800383e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003848:	2200      	movs	r2, #0
 800384a:	4619      	mov	r1, r3
 800384c:	481e      	ldr	r0, [pc, #120]	; (80038c8 <MX_TIM1_Init+0x130>)
 800384e:	f004 fdb1 	bl	80083b4 <HAL_TIM_PWM_ConfigChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003858:	f7ff fc53 	bl	8003102 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800385c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003860:	2204      	movs	r2, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4818      	ldr	r0, [pc, #96]	; (80038c8 <MX_TIM1_Init+0x130>)
 8003866:	f004 fda5 	bl	80083b4 <HAL_TIM_PWM_ConfigChannel>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003870:	f7ff fc47 	bl	8003102 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003874:	2300      	movs	r3, #0
 8003876:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800388c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4807      	ldr	r0, [pc, #28]	; (80038c8 <MX_TIM1_Init+0x130>)
 80038aa:	f005 fa4b 	bl	8008d44 <HAL_TIMEx_ConfigBreakDeadTime>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80038b4:	f7ff fc25 	bl	8003102 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <MX_TIM1_Init+0x130>)
 80038ba:	f000 f829 	bl	8003910 <HAL_TIM_MspPostInit>

}
 80038be:	bf00      	nop
 80038c0:	3758      	adds	r7, #88	; 0x58
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	2000bb3c 	.word	0x2000bb3c
 80038cc:	40010000 	.word	0x40010000

080038d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <HAL_TIM_PWM_MspInit+0x38>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10b      	bne.n	80038fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_TIM_PWM_MspInit+0x3c>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_TIM_PWM_MspInit+0x3c>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6453      	str	r3, [r2, #68]	; 0x44
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <HAL_TIM_PWM_MspInit+0x3c>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40023800 	.word	0x40023800

08003910 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a11      	ldr	r2, [pc, #68]	; (8003974 <HAL_TIM_MspPostInit+0x64>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d11c      	bne.n	800396c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_TIM_MspPostInit+0x68>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <HAL_TIM_MspPostInit+0x68>)
 8003938:	f043 0310 	orr.w	r3, r3, #16
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <HAL_TIM_MspPostInit+0x68>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800394a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800394e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800395c:	2301      	movs	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	4619      	mov	r1, r3
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <HAL_TIM_MspPostInit+0x6c>)
 8003968:	f001 fcd8 	bl	800531c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800396c:	bf00      	nop
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40010000 	.word	0x40010000
 8003978:	40023800 	.word	0x40023800
 800397c:	40021000 	.word	0x40021000

08003980 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <MX_USART3_UART_Init+0x5c>)
 8003988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 800398c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 80039a6:	220c      	movs	r2, #12
 80039a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039c2:	4805      	ldr	r0, [pc, #20]	; (80039d8 <MX_USART3_UART_Init+0x58>)
 80039c4:	f005 fa5a 	bl	8008e7c <HAL_UART_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80039ce:	f7ff fb98 	bl	8003102 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000bb88 	.word	0x2000bb88
 80039dc:	40004800 	.word	0x40004800

080039e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b0ae      	sub	sp, #184	; 0xb8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	2290      	movs	r2, #144	; 0x90
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f01d f95f 	bl	8020cc4 <memset>
  if(uartHandle->Instance==USART3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_UART_MspInit+0x184>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	f040 80a4 	bne.w	8003b5a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4618      	mov	r0, r3
 8003a22:	f003 fe4f 	bl	80076c4 <HAL_RCCEx_PeriphCLKConfig>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003a2c:	f7ff fb69 	bl	8003102 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a30:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <HAL_UART_MspInit+0x188>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	4a4c      	ldr	r2, [pc, #304]	; (8003b68 <HAL_UART_MspInit+0x188>)
 8003a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3c:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_UART_MspInit+0x188>)
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a48:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_UART_MspInit+0x188>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <HAL_UART_MspInit+0x188>)
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	6313      	str	r3, [r2, #48]	; 0x30
 8003a54:	4b44      	ldr	r3, [pc, #272]	; (8003b68 <HAL_UART_MspInit+0x188>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a7a:	2307      	movs	r3, #7
 8003a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4839      	ldr	r0, [pc, #228]	; (8003b6c <HAL_UART_MspInit+0x18c>)
 8003a88:	f001 fc48 	bl	800531c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003a8e:	4a39      	ldr	r2, [pc, #228]	; (8003b74 <HAL_UART_MspInit+0x194>)
 8003a90:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003a94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a98:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a9a:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa0:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aa6:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aac:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aae:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003aba:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ac2:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003ac4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003ac8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aca:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ad0:	4827      	ldr	r0, [pc, #156]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003ad2:	f001 f80d 	bl	8004af0 <HAL_DMA_Init>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8003adc:	f7ff fb11 	bl	8003102 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003ae4:	675a      	str	r2, [r3, #116]	; 0x74
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_UART_MspInit+0x190>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003aec:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003aee:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <HAL_UART_MspInit+0x19c>)
 8003af0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003af2:	4b21      	ldr	r3, [pc, #132]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003af4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003af8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003afc:	2240      	movs	r2, #64	; 0x40
 8003afe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b0c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b20:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b26:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003b2e:	4812      	ldr	r0, [pc, #72]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b30:	f000 ffde 	bl	8004af0 <HAL_DMA_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003b3a:	f7ff fae2 	bl	8003102 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b42:	671a      	str	r2, [r3, #112]	; 0x70
 8003b44:	4a0c      	ldr	r2, [pc, #48]	; (8003b78 <HAL_UART_MspInit+0x198>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2105      	movs	r1, #5
 8003b4e:	2027      	movs	r0, #39	; 0x27
 8003b50:	f000 ffa4 	bl	8004a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b54:	2027      	movs	r0, #39	; 0x27
 8003b56:	f000 ffbd 	bl	8004ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	37b8      	adds	r7, #184	; 0xb8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40004800 	.word	0x40004800
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	2000bc10 	.word	0x2000bc10
 8003b74:	40026028 	.word	0x40026028
 8003b78:	2000bc70 	.word	0x2000bc70
 8003b7c:	40026058 	.word	0x40026058

08003b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b84:	480d      	ldr	r0, [pc, #52]	; (8003bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b86:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b88:	4a0e      	ldr	r2, [pc, #56]	; (8003bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b8c:	e002      	b.n	8003b94 <LoopCopyDataInit>

08003b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b92:	3304      	adds	r3, #4

08003b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b98:	d3f9      	bcc.n	8003b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9a:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b9c:	4c0b      	ldr	r4, [pc, #44]	; (8003bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba0:	e001      	b.n	8003ba6 <LoopFillZerobss>

08003ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba4:	3204      	adds	r2, #4

08003ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba8:	d3fb      	bcc.n	8003ba2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003baa:	f7ff fde3 	bl	8003774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bae:	f01d f927 	bl	8020e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bb2:	f7ff fa0f 	bl	8002fd4 <main>
  bx  lr    
 8003bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bb8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc0:	200008e8 	.word	0x200008e8
  ldr r2, =_sidata
 8003bc4:	08025d94 	.word	0x08025d94
  ldr r2, =_sbss
 8003bc8:	200008e8 	.word	0x200008e8
  ldr r4, =_ebss
 8003bcc:	20016e78 	.word	0x20016e78

08003bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <ADC_IRQHandler>

08003bd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd6:	2003      	movs	r0, #3
 8003bd8:	f000 ff55 	bl	8004a86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bdc:	200f      	movs	r0, #15
 8003bde:	f7ff fc23 	bl	8003428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be2:	f7ff fbf9 	bl	80033d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_IncTick+0x20>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_IncTick+0x24>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <HAL_IncTick+0x24>)
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000010 	.word	0x20000010
 8003c10:	2000bcd0 	.word	0x2000bcd0

08003c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return uwTick;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_GetTick+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	2000bcd0 	.word	0x2000bcd0

08003c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7ff ffee 	bl	8003c14 <HAL_GetTick>
 8003c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c44:	d005      	beq.n	8003c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <HAL_Delay+0x44>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c52:	bf00      	nop
 8003c54:	f7ff ffde 	bl	8003c14 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d8f7      	bhi.n	8003c54 <HAL_Delay+0x28>
  {
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000010 	.word	0x20000010

08003c74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0ed      	b.n	8003e62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd ff22 	bl	8001adc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca8:	f7ff ffb4 	bl	8003c14 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cae:	e012      	b.n	8003cd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cb0:	f7ff ffb0 	bl	8003c14 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b0a      	cmp	r3, #10
 8003cbc:	d90b      	bls.n	8003cd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2205      	movs	r2, #5
 8003cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0c5      	b.n	8003e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0e5      	beq.n	8003cb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0202 	bic.w	r2, r2, #2
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cf4:	f7ff ff8e 	bl	8003c14 <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cfa:	e012      	b.n	8003d22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003cfc:	f7ff ff8a 	bl	8003c14 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b0a      	cmp	r3, #10
 8003d08:	d90b      	bls.n	8003d22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2205      	movs	r2, #5
 8003d1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e09f      	b.n	8003e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e5      	bne.n	8003cfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7e1b      	ldrb	r3, [r3, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d108      	bne.n	8003d4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e007      	b.n	8003d5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7e5b      	ldrb	r3, [r3, #25]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d108      	bne.n	8003d74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e007      	b.n	8003d84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7e9b      	ldrb	r3, [r3, #26]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d108      	bne.n	8003d9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0220 	orr.w	r2, r2, #32
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e007      	b.n	8003dae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0220 	bic.w	r2, r2, #32
 8003dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	7edb      	ldrb	r3, [r3, #27]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0210 	bic.w	r2, r2, #16
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e007      	b.n	8003dd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0210 	orr.w	r2, r2, #16
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7f1b      	ldrb	r3, [r3, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d108      	bne.n	8003df2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e007      	b.n	8003e02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0208 	bic.w	r2, r2, #8
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7f5b      	ldrb	r3, [r3, #29]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d108      	bne.n	8003e1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0204 	orr.w	r2, r2, #4
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e007      	b.n	8003e2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0204 	bic.w	r2, r2, #4
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	ea42 0103 	orr.w	r1, r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	1e5a      	subs	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e82:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d003      	beq.n	8003e92 <HAL_CAN_ConfigFilter+0x26>
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f040 80c7 	bne.w	8004020 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a69      	ldr	r2, [pc, #420]	; (800403c <HAL_CAN_ConfigFilter+0x1d0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d001      	beq.n	8003ea0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003e9c:	4b68      	ldr	r3, [pc, #416]	; (8004040 <HAL_CAN_ConfigFilter+0x1d4>)
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	4a63      	ldr	r2, [pc, #396]	; (8004040 <HAL_CAN_ConfigFilter+0x1d4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d111      	bne.n	8003edc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ebe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d123      	bne.n	8003f4e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	401a      	ands	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	3248      	adds	r2, #72	; 0x48
 8003f2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	3348      	adds	r3, #72	; 0x48
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d122      	bne.n	8003f9c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	3248      	adds	r2, #72	; 0x48
 8003f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f92:	6979      	ldr	r1, [r7, #20]
 8003f94:	3348      	adds	r3, #72	; 0x48
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	440b      	add	r3, r1
 8003f9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	401a      	ands	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003fb6:	e007      	b.n	8003fc8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003fe2:	e007      	b.n	8003ff4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	431a      	orrs	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e006      	b.n	800402e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40003400 	.word	0x40003400
 8004040:	40006400 	.word	0x40006400

08004044 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d12e      	bne.n	80040b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004070:	f7ff fdd0 	bl	8003c14 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004076:	e012      	b.n	800409e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004078:	f7ff fdcc 	bl	8003c14 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b0a      	cmp	r3, #10
 8004084:	d90b      	bls.n	800409e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2205      	movs	r2, #5
 8004096:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e012      	b.n	80040c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e006      	b.n	80040c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
  }
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80040ea:	7ffb      	ldrb	r3, [r7, #31]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d003      	beq.n	80040f8 <HAL_CAN_AddTxMessage+0x2c>
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	f040 80ad 	bne.w	8004252 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 8095 	beq.w	8004242 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	0e1b      	lsrs	r3, r3, #24
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004122:	2201      	movs	r2, #1
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	409a      	lsls	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6809      	ldr	r1, [r1, #0]
 8004142:	431a      	orrs	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	3318      	adds	r3, #24
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	440b      	add	r3, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e00f      	b.n	8004170 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800415a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004160:	68f9      	ldr	r1, [r7, #12]
 8004162:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004164:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3318      	adds	r3, #24
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	440b      	add	r3, r1
 800416e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	3318      	adds	r3, #24
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	440b      	add	r3, r1
 8004180:	3304      	adds	r3, #4
 8004182:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	7d1b      	ldrb	r3, [r3, #20]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d111      	bne.n	80041b0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3318      	adds	r3, #24
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	6811      	ldr	r1, [r2, #0]
 80041a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3318      	adds	r3, #24
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	440b      	add	r3, r1
 80041ac:	3304      	adds	r3, #4
 80041ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3307      	adds	r3, #7
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	061a      	lsls	r2, r3, #24
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3306      	adds	r3, #6
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3305      	adds	r3, #5
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	4313      	orrs	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	3204      	adds	r2, #4
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	4610      	mov	r0, r2
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	6811      	ldr	r1, [r2, #0]
 80041d8:	ea43 0200 	orr.w	r2, r3, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80041e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3303      	adds	r3, #3
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	061a      	lsls	r2, r3, #24
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3302      	adds	r3, #2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3301      	adds	r3, #1
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	4313      	orrs	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	4610      	mov	r0, r2
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6811      	ldr	r1, [r2, #0]
 800420e:	ea43 0200 	orr.w	r2, r3, r0
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	440b      	add	r3, r1
 8004218:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800421c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3318      	adds	r3, #24
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	6811      	ldr	r1, [r2, #0]
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3318      	adds	r3, #24
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	440b      	add	r3, r1
 800423c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e00e      	b.n	8004260 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e006      	b.n	8004260 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3724      	adds	r7, #36	; 0x24
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d002      	beq.n	800428c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004286:	7afb      	ldrb	r3, [r7, #11]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d11d      	bne.n	80042c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3301      	adds	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80042c8:	68fb      	ldr	r3, [r7, #12]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d003      	beq.n	80042fa <HAL_CAN_GetRxMessage+0x24>
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	f040 80f3 	bne.w	80044e0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10e      	bne.n	800431e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d116      	bne.n	800433c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0e7      	b.n	80044ee <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d107      	bne.n	800433c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0d8      	b.n	80044ee <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	331b      	adds	r3, #27
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	4413      	add	r3, r2
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0204 	and.w	r2, r3, #4
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	331b      	adds	r3, #27
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	4413      	add	r3, r2
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0d5b      	lsrs	r3, r3, #21
 800436a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e00b      	b.n	800438c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	331b      	adds	r3, #27
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	4413      	add	r3, r2
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	08db      	lsrs	r3, r3, #3
 8004384:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	331b      	adds	r3, #27
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	4413      	add	r3, r2
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0202 	and.w	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	331b      	adds	r3, #27
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	3304      	adds	r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 020f 	and.w	r2, r3, #15
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	331b      	adds	r3, #27
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	331b      	adds	r3, #27
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	4413      	add	r3, r2
 80043de:	3304      	adds	r3, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0c1b      	lsrs	r3, r3, #16
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	4413      	add	r3, r2
 800440a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0a1a      	lsrs	r2, r3, #8
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	3301      	adds	r3, #1
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	4413      	add	r3, r2
 8004424:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0c1a      	lsrs	r2, r3, #16
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	3302      	adds	r3, #2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	4413      	add	r3, r2
 800443e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0e1a      	lsrs	r2, r3, #24
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	3303      	adds	r3, #3
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	4413      	add	r3, r2
 8004458:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	4413      	add	r3, r2
 8004470:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	0a1a      	lsrs	r2, r3, #8
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	3305      	adds	r3, #5
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	4413      	add	r3, r2
 800448a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0c1a      	lsrs	r2, r3, #16
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	3306      	adds	r3, #6
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	0e1a      	lsrs	r2, r3, #24
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	3307      	adds	r3, #7
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0220 	orr.w	r2, r2, #32
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	e007      	b.n	80044dc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0220 	orr.w	r2, r2, #32
 80044da:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e006      	b.n	80044ee <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800450a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d002      	beq.n	8004518 <HAL_CAN_ActivateNotification+0x1e>
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d109      	bne.n	800452c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6959      	ldr	r1, [r3, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e006      	b.n	800453a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
  }
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08a      	sub	sp, #40	; 0x28
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800454e:	2300      	movs	r3, #0
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d07c      	beq.n	8004686 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d023      	beq.n	80045de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fd fe17 	bl	80021dc <HAL_CAN_TxMailbox0CompleteCallback>
 80045ae:	e016      	b.n	80045de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	e00c      	b.n	80045de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	e002      	b.n	80045de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fd fe09 	bl	80021f0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d024      	beq.n	8004632 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fd fe01 	bl	8002204 <HAL_CAN_TxMailbox1CompleteCallback>
 8004602:	e016      	b.n	8004632 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	e00c      	b.n	8004632 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461e:	2b00      	cmp	r3, #0
 8004620:	d004      	beq.n	800462c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	e002      	b.n	8004632 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fd fdf3 	bl	8002218 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d024      	beq.n	8004686 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004644:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fd fdeb 	bl	800222c <HAL_CAN_TxMailbox2CompleteCallback>
 8004656:	e016      	b.n	8004686 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
 800466a:	e00c      	b.n	8004686 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
 800467e:	e002      	b.n	8004686 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fd fddd 	bl	8002240 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2210      	movs	r2, #16
 80046a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d006      	beq.n	80046cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2208      	movs	r2, #8
 80046c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8f4 	bl	80048b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fd fdb5 	bl	8002254 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00c      	beq.n	800470e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004704:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2210      	movs	r2, #16
 800470c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d006      	beq.n	8004730 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2208      	movs	r2, #8
 8004728:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8d6 	bl	80048dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f8bd 	bl	80048c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d006      	beq.n	8004770 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2210      	movs	r2, #16
 8004768:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8c0 	bl	80048f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d006      	beq.n	8004792 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2208      	movs	r2, #8
 800478a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f8b9 	bl	8004904 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d07b      	beq.n	8004894 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d072      	beq.n	800488c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004800:	2b00      	cmp	r3, #0
 8004802:	d043      	beq.n	800488c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03e      	beq.n	800488c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004814:	2b60      	cmp	r3, #96	; 0x60
 8004816:	d02b      	beq.n	8004870 <HAL_CAN_IRQHandler+0x32a>
 8004818:	2b60      	cmp	r3, #96	; 0x60
 800481a:	d82e      	bhi.n	800487a <HAL_CAN_IRQHandler+0x334>
 800481c:	2b50      	cmp	r3, #80	; 0x50
 800481e:	d022      	beq.n	8004866 <HAL_CAN_IRQHandler+0x320>
 8004820:	2b50      	cmp	r3, #80	; 0x50
 8004822:	d82a      	bhi.n	800487a <HAL_CAN_IRQHandler+0x334>
 8004824:	2b40      	cmp	r3, #64	; 0x40
 8004826:	d019      	beq.n	800485c <HAL_CAN_IRQHandler+0x316>
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d826      	bhi.n	800487a <HAL_CAN_IRQHandler+0x334>
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d010      	beq.n	8004852 <HAL_CAN_IRQHandler+0x30c>
 8004830:	2b30      	cmp	r3, #48	; 0x30
 8004832:	d822      	bhi.n	800487a <HAL_CAN_IRQHandler+0x334>
 8004834:	2b10      	cmp	r3, #16
 8004836:	d002      	beq.n	800483e <HAL_CAN_IRQHandler+0x2f8>
 8004838:	2b20      	cmp	r3, #32
 800483a:	d005      	beq.n	8004848 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800483c:	e01d      	b.n	800487a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	f043 0308 	orr.w	r3, r3, #8
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004846:	e019      	b.n	800487c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	f043 0310 	orr.w	r3, r3, #16
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004850:	e014      	b.n	800487c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f043 0320 	orr.w	r3, r3, #32
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800485a:	e00f      	b.n	800487c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004864:	e00a      	b.n	800487c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800486e:	e005      	b.n	800487c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004878:	e000      	b.n	800487c <HAL_CAN_IRQHandler+0x336>
            break;
 800487a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800488a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2204      	movs	r2, #4
 8004892:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f836 	bl	8004918 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80048ac:	bf00      	nop
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <__NVIC_SetPriorityGrouping+0x40>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004948:	4013      	ands	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <__NVIC_SetPriorityGrouping+0x44>)
 8004956:	4313      	orrs	r3, r2
 8004958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495a:	4a04      	ldr	r2, [pc, #16]	; (800496c <__NVIC_SetPriorityGrouping+0x40>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00
 8004970:	05fa0000 	.word	0x05fa0000

08004974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <__NVIC_GetPriorityGrouping+0x18>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	f003 0307 	and.w	r3, r3, #7
}
 8004982:	4618      	mov	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	db0b      	blt.n	80049ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	4907      	ldr	r1, [pc, #28]	; (80049c8 <__NVIC_EnableIRQ+0x38>)
 80049aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2001      	movs	r0, #1
 80049b2:	fa00 f202 	lsl.w	r2, r0, r2
 80049b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	e000e100 	.word	0xe000e100

080049cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	6039      	str	r1, [r7, #0]
 80049d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	db0a      	blt.n	80049f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	490c      	ldr	r1, [pc, #48]	; (8004a18 <__NVIC_SetPriority+0x4c>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	0112      	lsls	r2, r2, #4
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	440b      	add	r3, r1
 80049f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f4:	e00a      	b.n	8004a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4908      	ldr	r1, [pc, #32]	; (8004a1c <__NVIC_SetPriority+0x50>)
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	3b04      	subs	r3, #4
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	440b      	add	r3, r1
 8004a0a:	761a      	strb	r2, [r3, #24]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000e100 	.word	0xe000e100
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	; 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f1c3 0307 	rsb	r3, r3, #7
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	bf28      	it	cs
 8004a3e:	2304      	movcs	r3, #4
 8004a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3304      	adds	r3, #4
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d902      	bls.n	8004a50 <NVIC_EncodePriority+0x30>
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3b03      	subs	r3, #3
 8004a4e:	e000      	b.n	8004a52 <NVIC_EncodePriority+0x32>
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	401a      	ands	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	43d9      	mvns	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a78:	4313      	orrs	r3, r2
         );
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3724      	adds	r7, #36	; 0x24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ff4c 	bl	800492c <__NVIC_SetPriorityGrouping>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aae:	f7ff ff61 	bl	8004974 <__NVIC_GetPriorityGrouping>
 8004ab2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	6978      	ldr	r0, [r7, #20]
 8004aba:	f7ff ffb1 	bl	8004a20 <NVIC_EncodePriority>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff80 	bl	80049cc <__NVIC_SetPriority>
}
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff ff54 	bl	8004990 <__NVIC_EnableIRQ>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004afc:	f7ff f88a 	bl	8003c14 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e099      	b.n	8004c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b2c:	e00f      	b.n	8004b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b2e:	f7ff f871 	bl	8003c14 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d908      	bls.n	8004b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2203      	movs	r2, #3
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e078      	b.n	8004c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e8      	bne.n	8004b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <HAL_DMA_Init+0x158>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d107      	bne.n	8004bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0307 	bic.w	r3, r3, #7
 8004bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d117      	bne.n	8004c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fb15 	bl	8005224 <DMA_CheckFifoParam>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e016      	b.n	8004c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 facc 	bl	80051b8 <DMA_CalcBaseAndBitshift>
 8004c20:	4603      	mov	r3, r0
 8004c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	223f      	movs	r2, #63	; 0x3f
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	e010803f 	.word	0xe010803f

08004c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_DMA_Start_IT+0x26>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e048      	b.n	8004d04 <HAL_DMA_Start_IT+0xb8>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d137      	bne.n	8004cf6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 fa5e 	bl	800515c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	223f      	movs	r2, #63	; 0x3f
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0216 	orr.w	r2, r2, #22
 8004cba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0208 	orr.w	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e005      	b.n	8004d02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d1a:	f7fe ff7b 	bl	8003c14 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d008      	beq.n	8004d3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e052      	b.n	8004de4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0216 	bic.w	r2, r2, #22
 8004d4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_DMA_Abort+0x62>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0208 	bic.w	r2, r2, #8
 8004d7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8e:	e013      	b.n	8004db8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d90:	f7fe ff40 	bl	8003c14 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d90c      	bls.n	8004db8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2203      	movs	r2, #3
 8004da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e015      	b.n	8004de4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e4      	bne.n	8004d90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dca:	223f      	movs	r2, #63	; 0x3f
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d004      	beq.n	8004e0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00c      	b.n	8004e24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2205      	movs	r2, #5
 8004e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0201 	bic.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004e3c:	4b8e      	ldr	r3, [pc, #568]	; (8005078 <HAL_DMA_IRQHandler+0x248>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a8e      	ldr	r2, [pc, #568]	; (800507c <HAL_DMA_IRQHandler+0x24c>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0a9b      	lsrs	r3, r3, #10
 8004e48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01a      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d013      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0204 	bic.w	r2, r2, #4
 8004e82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	2208      	movs	r2, #8
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0201 	orr.w	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0202 	orr.w	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	409a      	lsls	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d012      	beq.n	8004f08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f043 0204 	orr.w	r2, r3, #4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d043      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d03c      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	2210      	movs	r2, #16
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d018      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d108      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d024      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	e01f      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01b      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
 8004f70:	e016      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0208 	bic.w	r2, r2, #8
 8004f8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 808f 	beq.w	80050d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 8087 	beq.w	80050d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b05      	cmp	r3, #5
 8004fd8:	d136      	bne.n	8005048 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0216 	bic.w	r2, r2, #22
 8004fe8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ff8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <HAL_DMA_IRQHandler+0x1da>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0208 	bic.w	r2, r2, #8
 8005018:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	223f      	movs	r2, #63	; 0x3f
 8005020:	409a      	lsls	r2, r3
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	2b00      	cmp	r3, #0
 800503c:	d07e      	beq.n	800513c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
        }
        return;
 8005046:	e079      	b.n	800513c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01d      	beq.n	8005092 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10d      	bne.n	8005080 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	2b00      	cmp	r3, #0
 800506a:	d031      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
 8005074:	e02c      	b.n	80050d0 <HAL_DMA_IRQHandler+0x2a0>
 8005076:	bf00      	nop
 8005078:	20000008 	.word	0x20000008
 800507c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d023      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
 8005090:	e01e      	b.n	80050d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10f      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0210 	bic.w	r2, r2, #16
 80050ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d032      	beq.n	800513e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d022      	beq.n	800512a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2205      	movs	r2, #5
 80050e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	3301      	adds	r3, #1
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	429a      	cmp	r2, r3
 8005106:	d307      	bcc.n	8005118 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f2      	bne.n	80050fc <HAL_DMA_IRQHandler+0x2cc>
 8005116:	e000      	b.n	800511a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005118:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	4798      	blx	r3
 800513a:	e000      	b.n	800513e <HAL_DMA_IRQHandler+0x30e>
        return;
 800513c:	bf00      	nop
    }
  }
}
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005178:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d108      	bne.n	800519c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800519a:	e007      	b.n	80051ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	60da      	str	r2, [r3, #12]
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	3b10      	subs	r3, #16
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <DMA_CalcBaseAndBitshift+0x60>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051d2:	4a12      	ldr	r2, [pc, #72]	; (800521c <DMA_CalcBaseAndBitshift+0x64>)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d908      	bls.n	80051f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <DMA_CalcBaseAndBitshift+0x68>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	1d1a      	adds	r2, r3, #4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	659a      	str	r2, [r3, #88]	; 0x58
 80051f6:	e006      	b.n	8005206 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <DMA_CalcBaseAndBitshift+0x68>)
 8005200:	4013      	ands	r3, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	aaaaaaab 	.word	0xaaaaaaab
 800521c:	08024598 	.word	0x08024598
 8005220:	fffffc00 	.word	0xfffffc00

08005224 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11f      	bne.n	800527e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d856      	bhi.n	80052f2 <DMA_CheckFifoParam+0xce>
 8005244:	a201      	add	r2, pc, #4	; (adr r2, 800524c <DMA_CheckFifoParam+0x28>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	0800525d 	.word	0x0800525d
 8005250:	0800526f 	.word	0x0800526f
 8005254:	0800525d 	.word	0x0800525d
 8005258:	080052f3 	.word	0x080052f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d046      	beq.n	80052f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800526c:	e043      	b.n	80052f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005276:	d140      	bne.n	80052fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527c:	e03d      	b.n	80052fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005286:	d121      	bne.n	80052cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d837      	bhi.n	80052fe <DMA_CheckFifoParam+0xda>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <DMA_CheckFifoParam+0x70>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052ab 	.word	0x080052ab
 800529c:	080052a5 	.word	0x080052a5
 80052a0:	080052bd 	.word	0x080052bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
      break;
 80052a8:	e030      	b.n	800530c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d025      	beq.n	8005302 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ba:	e022      	b.n	8005302 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052c4:	d11f      	bne.n	8005306 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052ca:	e01c      	b.n	8005306 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d903      	bls.n	80052da <DMA_CheckFifoParam+0xb6>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d003      	beq.n	80052e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052d8:	e018      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
      break;
 80052de:	e015      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
      break;
 80052f0:	e00b      	b.n	800530a <DMA_CheckFifoParam+0xe6>
      break;
 80052f2:	bf00      	nop
 80052f4:	e00a      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      break;
 80052f6:	bf00      	nop
 80052f8:	e008      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      break;
 80052fa:	bf00      	nop
 80052fc:	e006      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      break;
 80052fe:	bf00      	nop
 8005300:	e004      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      break;
 8005302:	bf00      	nop
 8005304:	e002      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      break;   
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <DMA_CheckFifoParam+0xe8>
      break;
 800530a:	bf00      	nop
    }
  } 
  
  return status; 
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop

0800531c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800531c:	b480      	push	{r7}
 800531e:	b089      	sub	sp, #36	; 0x24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005332:	2300      	movs	r3, #0
 8005334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e175      	b.n	8005628 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800533c:	2201      	movs	r2, #1
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	429a      	cmp	r2, r3
 8005356:	f040 8164 	bne.w	8005622 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d005      	beq.n	8005372 <HAL_GPIO_Init+0x56>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d130      	bne.n	80053d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	2203      	movs	r2, #3
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43db      	mvns	r3, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053a8:	2201      	movs	r2, #1
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 0201 	and.w	r2, r3, #1
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d017      	beq.n	8005410 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	2203      	movs	r2, #3
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4313      	orrs	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d123      	bne.n	8005464 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	08da      	lsrs	r2, r3, #3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3208      	adds	r2, #8
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	220f      	movs	r2, #15
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	08da      	lsrs	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3208      	adds	r2, #8
 800545e:	69b9      	ldr	r1, [r7, #24]
 8005460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	2203      	movs	r2, #3
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4013      	ands	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 0203 	and.w	r2, r3, #3
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4313      	orrs	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80be 	beq.w	8005622 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a6:	4b66      	ldr	r3, [pc, #408]	; (8005640 <HAL_GPIO_Init+0x324>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054aa:	4a65      	ldr	r2, [pc, #404]	; (8005640 <HAL_GPIO_Init+0x324>)
 80054ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b0:	6453      	str	r3, [r2, #68]	; 0x44
 80054b2:	4b63      	ldr	r3, [pc, #396]	; (8005640 <HAL_GPIO_Init+0x324>)
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80054be:	4a61      	ldr	r2, [pc, #388]	; (8005644 <HAL_GPIO_Init+0x328>)
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	3302      	adds	r3, #2
 80054c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	220f      	movs	r2, #15
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4013      	ands	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a58      	ldr	r2, [pc, #352]	; (8005648 <HAL_GPIO_Init+0x32c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d037      	beq.n	800555a <HAL_GPIO_Init+0x23e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a57      	ldr	r2, [pc, #348]	; (800564c <HAL_GPIO_Init+0x330>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d031      	beq.n	8005556 <HAL_GPIO_Init+0x23a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a56      	ldr	r2, [pc, #344]	; (8005650 <HAL_GPIO_Init+0x334>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02b      	beq.n	8005552 <HAL_GPIO_Init+0x236>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a55      	ldr	r2, [pc, #340]	; (8005654 <HAL_GPIO_Init+0x338>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d025      	beq.n	800554e <HAL_GPIO_Init+0x232>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a54      	ldr	r2, [pc, #336]	; (8005658 <HAL_GPIO_Init+0x33c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d01f      	beq.n	800554a <HAL_GPIO_Init+0x22e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a53      	ldr	r2, [pc, #332]	; (800565c <HAL_GPIO_Init+0x340>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d019      	beq.n	8005546 <HAL_GPIO_Init+0x22a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a52      	ldr	r2, [pc, #328]	; (8005660 <HAL_GPIO_Init+0x344>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_GPIO_Init+0x226>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a51      	ldr	r2, [pc, #324]	; (8005664 <HAL_GPIO_Init+0x348>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00d      	beq.n	800553e <HAL_GPIO_Init+0x222>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a50      	ldr	r2, [pc, #320]	; (8005668 <HAL_GPIO_Init+0x34c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d007      	beq.n	800553a <HAL_GPIO_Init+0x21e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a4f      	ldr	r2, [pc, #316]	; (800566c <HAL_GPIO_Init+0x350>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d101      	bne.n	8005536 <HAL_GPIO_Init+0x21a>
 8005532:	2309      	movs	r3, #9
 8005534:	e012      	b.n	800555c <HAL_GPIO_Init+0x240>
 8005536:	230a      	movs	r3, #10
 8005538:	e010      	b.n	800555c <HAL_GPIO_Init+0x240>
 800553a:	2308      	movs	r3, #8
 800553c:	e00e      	b.n	800555c <HAL_GPIO_Init+0x240>
 800553e:	2307      	movs	r3, #7
 8005540:	e00c      	b.n	800555c <HAL_GPIO_Init+0x240>
 8005542:	2306      	movs	r3, #6
 8005544:	e00a      	b.n	800555c <HAL_GPIO_Init+0x240>
 8005546:	2305      	movs	r3, #5
 8005548:	e008      	b.n	800555c <HAL_GPIO_Init+0x240>
 800554a:	2304      	movs	r3, #4
 800554c:	e006      	b.n	800555c <HAL_GPIO_Init+0x240>
 800554e:	2303      	movs	r3, #3
 8005550:	e004      	b.n	800555c <HAL_GPIO_Init+0x240>
 8005552:	2302      	movs	r3, #2
 8005554:	e002      	b.n	800555c <HAL_GPIO_Init+0x240>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_GPIO_Init+0x240>
 800555a:	2300      	movs	r3, #0
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	f002 0203 	and.w	r2, r2, #3
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	4093      	lsls	r3, r2
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800556c:	4935      	ldr	r1, [pc, #212]	; (8005644 <HAL_GPIO_Init+0x328>)
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	089b      	lsrs	r3, r3, #2
 8005572:	3302      	adds	r3, #2
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800557a:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <HAL_GPIO_Init+0x354>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800559e:	4a34      	ldr	r2, [pc, #208]	; (8005670 <HAL_GPIO_Init+0x354>)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055a4:	4b32      	ldr	r3, [pc, #200]	; (8005670 <HAL_GPIO_Init+0x354>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4013      	ands	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055c8:	4a29      	ldr	r2, [pc, #164]	; (8005670 <HAL_GPIO_Init+0x354>)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055ce:	4b28      	ldr	r3, [pc, #160]	; (8005670 <HAL_GPIO_Init+0x354>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055f2:	4a1f      	ldr	r2, [pc, #124]	; (8005670 <HAL_GPIO_Init+0x354>)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055f8:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <HAL_GPIO_Init+0x354>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <HAL_GPIO_Init+0x354>)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	3301      	adds	r3, #1
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b0f      	cmp	r3, #15
 800562c:	f67f ae86 	bls.w	800533c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	3724      	adds	r7, #36	; 0x24
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800
 8005644:	40013800 	.word	0x40013800
 8005648:	40020000 	.word	0x40020000
 800564c:	40020400 	.word	0x40020400
 8005650:	40020800 	.word	0x40020800
 8005654:	40020c00 	.word	0x40020c00
 8005658:	40021000 	.word	0x40021000
 800565c:	40021400 	.word	0x40021400
 8005660:	40021800 	.word	0x40021800
 8005664:	40021c00 	.word	0x40021c00
 8005668:	40022000 	.word	0x40022000
 800566c:	40022400 	.word	0x40022400
 8005670:	40013c00 	.word	0x40013c00

08005674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
 8005680:	4613      	mov	r3, r2
 8005682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005684:	787b      	ldrb	r3, [r7, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800568a:	887a      	ldrh	r2, [r7, #2]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005690:	e003      	b.n	800569a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	041a      	lsls	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	619a      	str	r2, [r3, #24]
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a8:	b08f      	sub	sp, #60	; 0x3c
 80056aa:	af0a      	add	r7, sp, #40	; 0x28
 80056ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e116      	b.n	80058e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f00b fbdc 	bl	8010e90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2203      	movs	r2, #3
 80056dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f005 f8ef 	bl	800a8da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	687e      	ldr	r6, [r7, #4]
 8005704:	466d      	mov	r5, sp
 8005706:	f106 0410 	add.w	r4, r6, #16
 800570a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800570c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800570e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005712:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005716:	e885 0003 	stmia.w	r5, {r0, r1}
 800571a:	1d33      	adds	r3, r6, #4
 800571c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800571e:	6838      	ldr	r0, [r7, #0]
 8005720:	f004 ffd0 	bl	800a6c4 <USB_CoreInit>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e0d7      	b.n	80058e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2100      	movs	r1, #0
 800573c:	4618      	mov	r0, r3
 800573e:	f005 f8dd 	bl	800a8fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e04a      	b.n	80057de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005748:	7bfa      	ldrb	r2, [r7, #15]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	333d      	adds	r3, #61	; 0x3d
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800575c:	7bfa      	ldrb	r2, [r7, #15]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	333c      	adds	r3, #60	; 0x3c
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005770:	7bfa      	ldrb	r2, [r7, #15]
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	b298      	uxth	r0, r3
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	3344      	adds	r3, #68	; 0x44
 8005784:	4602      	mov	r2, r0
 8005786:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	3340      	adds	r3, #64	; 0x40
 8005798:	2200      	movs	r2, #0
 800579a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3348      	adds	r3, #72	; 0x48
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	334c      	adds	r3, #76	; 0x4c
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057c4:	7bfa      	ldrb	r2, [r7, #15]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	3354      	adds	r3, #84	; 0x54
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	3301      	adds	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	7bfa      	ldrb	r2, [r7, #15]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d3af      	bcc.n	8005748 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e044      	b.n	8005878 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057ee:	7bfa      	ldrb	r2, [r7, #15]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800581a:	7bfa      	ldrb	r2, [r7, #15]
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005846:	7bfa      	ldrb	r2, [r7, #15]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	3301      	adds	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	7bfa      	ldrb	r2, [r7, #15]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d3b5      	bcc.n	80057ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	687e      	ldr	r6, [r7, #4]
 800588a:	466d      	mov	r5, sp
 800588c:	f106 0410 	add.w	r4, r6, #16
 8005890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005898:	e894 0003 	ldmia.w	r4, {r0, r1}
 800589c:	e885 0003 	stmia.w	r5, {r0, r1}
 80058a0:	1d33      	adds	r3, r6, #4
 80058a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058a4:	6838      	ldr	r0, [r7, #0]
 80058a6:	f005 f875 	bl	800a994 <USB_DevInit>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e014      	b.n	80058e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 f97b 	bl	8006bd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f006 f9c3 	bl	800bc6a <USB_DevDisconnect>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_PCD_Start+0x16>
 8005900:	2302      	movs	r3, #2
 8005902:	e012      	b.n	800592a <HAL_PCD_Start+0x3c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f004 ffd1 	bl	800a8b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f006 f984 	bl	800bc28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005932:	b590      	push	{r4, r7, lr}
 8005934:	b08d      	sub	sp, #52	; 0x34
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f006 fa42 	bl	800bdd2 <USB_GetMode>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 84b7 	bne.w	80062c4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f006 f9a6 	bl	800bcac <USB_ReadInterrupts>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 84ad 	beq.w	80062c2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	0a1b      	lsrs	r3, r3, #8
 8005972:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f006 f993 	bl	800bcac <USB_ReadInterrupts>
 8005986:	4603      	mov	r3, r0
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d107      	bne.n	80059a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f002 0202 	and.w	r2, r2, #2
 800599e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f006 f981 	bl	800bcac <USB_ReadInterrupts>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d161      	bne.n	8005a78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0210 	bic.w	r2, r2, #16
 80059c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f003 020f 	and.w	r2, r3, #15
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4413      	add	r3, r2
 80059e0:	3304      	adds	r3, #4
 80059e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	0c5b      	lsrs	r3, r3, #17
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d124      	bne.n	8005a3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d035      	beq.n	8005a68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6a38      	ldr	r0, [r7, #32]
 8005a10:	f005 ffb8 	bl	800b984 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a20:	441a      	add	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6a1a      	ldr	r2, [r3, #32]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a32:	441a      	add	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
 8005a38:	e016      	b.n	8005a68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	0c5b      	lsrs	r3, r3, #17
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	2b06      	cmp	r3, #6
 8005a44:	d110      	bne.n	8005a68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6a38      	ldr	r0, [r7, #32]
 8005a52:	f005 ff97 	bl	800b984 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	6a1a      	ldr	r2, [r3, #32]
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a62:	441a      	add	r2, r3
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0210 	orr.w	r2, r2, #16
 8005a76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f006 f915 	bl	800bcac <USB_ReadInterrupts>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a8c:	f040 80a7 	bne.w	8005bde <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f006 f91a 	bl	800bcd2 <USB_ReadDevAllOutEpInterrupt>
 8005a9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005aa0:	e099      	b.n	8005bd6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 808e 	beq.w	8005bca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f006 f93e 	bl	800bd3a <USB_ReadDevOutEPInterrupt>
 8005abe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2301      	movs	r3, #1
 8005ada:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fef0 	bl	80068c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	461a      	mov	r2, r3
 8005afc:	2308      	movs	r3, #8
 8005afe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 ffc6 	bl	8006a94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d008      	beq.n	8005b24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2310      	movs	r3, #16
 8005b22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d030      	beq.n	8005b90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d109      	bne.n	8005b4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b50:	4613      	mov	r3, r2
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4413      	add	r3, r2
 8005b60:	3304      	adds	r3, #4
 8005b62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	78db      	ldrb	r3, [r3, #3]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d108      	bne.n	8005b7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f00b faad 	bl	80110d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2320      	movs	r3, #32
 8005baa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	3301      	adds	r3, #1
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f47f af62 	bne.w	8005aa2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f006 f862 	bl	800bcac <USB_ReadInterrupts>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf2:	f040 80db 	bne.w	8005dac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f006 f883 	bl	800bd06 <USB_ReadDevAllInEpInterrupt>
 8005c00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005c06:	e0cd      	b.n	8005da4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 80c2 	beq.w	8005d98 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f006 f8a9 	bl	800bd76 <USB_ReadDevInEPInterrupt>
 8005c24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d057      	beq.n	8005ce0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	2201      	movs	r2, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c50:	4013      	ands	r3, r2
 8005c52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	2301      	movs	r3, #1
 8005c64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d132      	bne.n	8005cd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	4613      	mov	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	334c      	adds	r3, #76	; 0x4c
 8005c7e:	6819      	ldr	r1, [r3, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4403      	add	r3, r0
 8005c8e:	3348      	adds	r3, #72	; 0x48
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4419      	add	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4403      	add	r3, r0
 8005ca2:	334c      	adds	r3, #76	; 0x4c
 8005ca4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d113      	bne.n	8005cd4 <HAL_PCD_IRQHandler+0x3a2>
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	3354      	adds	r3, #84	; 0x54
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d108      	bne.n	8005cd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2101      	movs	r1, #1
 8005cd0:	f006 f8b2 	bl	800be38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f00b f977 	bl	8010fce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	461a      	mov	r2, r3
 8005d14:	2310      	movs	r3, #16
 8005d16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d023      	beq.n	8005d86 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d40:	6a38      	ldr	r0, [r7, #32]
 8005d42:	f004 ff85 	bl	800ac50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d48:	4613      	mov	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	3338      	adds	r3, #56	; 0x38
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	4413      	add	r3, r2
 8005d56:	3304      	adds	r3, #4
 8005d58:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d108      	bne.n	8005d74 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2200      	movs	r2, #0
 8005d66:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f00b f9c4 	bl	80110fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	461a      	mov	r2, r3
 8005d82:	2302      	movs	r3, #2
 8005d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fd08 	bl	80067a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f47f af2e 	bne.w	8005c08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f005 ff7b 	bl	800bcac <USB_ReadInterrupts>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dc0:	d122      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d108      	bne.n	8005df2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005de8:	2100      	movs	r1, #0
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f00b fb3e 	bl	801146c <HAL_PCDEx_LPM_Callback>
 8005df0:	e002      	b.n	8005df8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f00b f962 	bl	80110bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f005 ff4d 	bl	800bcac <USB_ReadInterrupts>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1c:	d112      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d102      	bne.n	8005e34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f00b f91e 	bl	8011070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695a      	ldr	r2, [r3, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f005 ff2f 	bl	800bcac <USB_ReadInterrupts>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e58:	d121      	bne.n	8005e9e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005e68:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d111      	bne.n	8005e98 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e8e:	2101      	movs	r1, #1
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f00b faeb 	bl	801146c <HAL_PCDEx_LPM_Callback>
 8005e96:	e002      	b.n	8005e9e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f00b f8e9 	bl	8011070 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f005 ff02 	bl	800bcac <USB_ReadInterrupts>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	f040 80b7 	bne.w	8006024 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2110      	movs	r1, #16
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f004 febd 	bl	800ac50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eda:	e046      	b.n	8005f6a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f22:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f62:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	3301      	adds	r3, #1
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d3b3      	bcc.n	8005edc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f82:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f86:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d016      	beq.n	8005fbe <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa0:	f043 030b 	orr.w	r3, r3, #11
 8005fa4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb6:	f043 030b 	orr.w	r3, r3, #11
 8005fba:	6453      	str	r3, [r2, #68]	; 0x44
 8005fbc:	e015      	b.n	8005fea <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f242 032b 	movw	r3, #8235	; 0x202b
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe4:	f043 030b 	orr.w	r3, r3, #11
 8005fe8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ffc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800600e:	461a      	mov	r2, r3
 8006010:	f005 ff12 	bl	800be38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006022:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f005 fe3f 	bl	800bcac <USB_ReadInterrupts>
 800602e:	4603      	mov	r3, r0
 8006030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006038:	d124      	bne.n	8006084 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f005 fed6 	bl	800bdf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f004 fe7e 	bl	800ad4a <USB_GetDevSpeed>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681c      	ldr	r4, [r3, #0]
 800605a:	f001 facd 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 800605e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006064:	b2db      	uxtb	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	4620      	mov	r0, r4
 800606a:	f004 fb83 	bl	800a774 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f00a ffd5 	bl	801101e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695a      	ldr	r2, [r3, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006082:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f005 fe0f 	bl	800bcac <USB_ReadInterrupts>
 800608e:	4603      	mov	r3, r0
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b08      	cmp	r3, #8
 8006096:	d10a      	bne.n	80060ae <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f00a ffb2 	bl	8011002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f002 0208 	and.w	r2, r2, #8
 80060ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f005 fdfa 	bl	800bcac <USB_ReadInterrupts>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d122      	bne.n	8006108 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ce:	2301      	movs	r3, #1
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	e014      	b.n	80060fe <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d8:	4613      	mov	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d105      	bne.n	80060f8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fb27 	bl	8006746 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	3301      	adds	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006104:	429a      	cmp	r2, r3
 8006106:	d3e5      	bcc.n	80060d4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f005 fdcd 	bl	800bcac <USB_ReadInterrupts>
 8006112:	4603      	mov	r3, r0
 8006114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611c:	d13b      	bne.n	8006196 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800611e:	2301      	movs	r3, #1
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
 8006122:	e02b      	b.n	800617c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	4613      	mov	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	3340      	adds	r3, #64	; 0x40
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d115      	bne.n	8006176 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800614a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800614c:	2b00      	cmp	r3, #0
 800614e:	da12      	bge.n	8006176 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	333f      	adds	r3, #63	; 0x3f
 8006160:	2201      	movs	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800616c:	b2db      	uxtb	r3, r3
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fae8 	bl	8006746 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	3301      	adds	r3, #1
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006182:	429a      	cmp	r2, r3
 8006184:	d3ce      	bcc.n	8006124 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f005 fd86 	bl	800bcac <USB_ReadInterrupts>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061aa:	d155      	bne.n	8006258 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ac:	2301      	movs	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
 80061b0:	e045      	b.n	800623e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d12e      	bne.n	8006238 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da2b      	bge.n	8006238 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80061ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d121      	bne.n	8006238 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006206:	2201      	movs	r2, #1
 8006208:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006234:	6053      	str	r3, [r2, #4]
            break;
 8006236:	e007      	b.n	8006248 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	3301      	adds	r3, #1
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006244:	429a      	cmp	r2, r3
 8006246:	d3b4      	bcc.n	80061b2 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f005 fd25 	bl	800bcac <USB_ReadInterrupts>
 8006262:	4603      	mov	r3, r0
 8006264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d10a      	bne.n	8006284 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f00a ff56 	bl	8011120 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f005 fd0f 	bl	800bcac <USB_ReadInterrupts>
 800628e:	4603      	mov	r3, r0
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b04      	cmp	r3, #4
 8006296:	d115      	bne.n	80062c4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f00a ff46 	bl	801113c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6859      	ldr	r1, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
 80062c0:	e000      	b.n	80062c4 <HAL_PCD_IRQHandler+0x992>
      return;
 80062c2:	bf00      	nop
    }
  }
}
 80062c4:	3734      	adds	r7, #52	; 0x34
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd90      	pop	{r4, r7, pc}

080062ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_PCD_SetAddress+0x1a>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e013      	b.n	800630c <HAL_PCD_SetAddress+0x42>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	78fa      	ldrb	r2, [r7, #3]
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f005 fc6d 	bl	800bbdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	4608      	mov	r0, r1
 800631e:	4611      	mov	r1, r2
 8006320:	461a      	mov	r2, r3
 8006322:	4603      	mov	r3, r0
 8006324:	70fb      	strb	r3, [r7, #3]
 8006326:	460b      	mov	r3, r1
 8006328:	803b      	strh	r3, [r7, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006336:	2b00      	cmp	r3, #0
 8006338:	da0f      	bge.n	800635a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	f003 020f 	and.w	r2, r3, #15
 8006340:	4613      	mov	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	3338      	adds	r3, #56	; 0x38
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	3304      	adds	r3, #4
 8006350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	705a      	strb	r2, [r3, #1]
 8006358:	e00f      	b.n	800637a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	f003 020f 	and.w	r2, r3, #15
 8006360:	4613      	mov	r3, r2
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	4413      	add	r3, r2
 8006370:	3304      	adds	r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006386:	883a      	ldrh	r2, [r7, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	78ba      	ldrb	r2, [r7, #2]
 8006390:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063a4:	78bb      	ldrb	r3, [r7, #2]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d102      	bne.n	80063b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_PCD_EP_Open+0xaa>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e00e      	b.n	80063dc <HAL_PCD_EP_Open+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f004 fce1 	bl	800ad94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80063da:	7afb      	ldrb	r3, [r7, #11]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da0f      	bge.n	8006418 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3338      	adds	r3, #56	; 0x38
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	3304      	adds	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	705a      	strb	r2, [r3, #1]
 8006416:	e00f      	b.n	8006438 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	f003 020f 	and.w	r2, r3, #15
 800641e:	4613      	mov	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	3304      	adds	r3, #4
 8006430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	b2da      	uxtb	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_PCD_EP_Close+0x6e>
 800644e:	2302      	movs	r3, #2
 8006450:	e00e      	b.n	8006470 <HAL_PCD_EP_Close+0x8c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68f9      	ldr	r1, [r7, #12]
 8006460:	4618      	mov	r0, r3
 8006462:	f004 fd1f 	bl	800aea4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	460b      	mov	r3, r1
 8006486:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	f003 020f 	and.w	r2, r3, #15
 800648e:	4613      	mov	r3, r2
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	3304      	adds	r3, #4
 80064a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2200      	movs	r2, #0
 80064b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d102      	bne.n	80064d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	f005 f806 	bl	800b4fc <USB_EP0StartXfer>
 80064f0:	e008      	b.n	8006504 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	f004 fdac 	bl	800b05c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	f003 020f 	and.w	r2, r3, #15
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006530:	681b      	ldr	r3, [r3, #0]
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	460b      	mov	r3, r1
 800654c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	f003 020f 	and.w	r2, r3, #15
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	3338      	adds	r3, #56	; 0x38
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	3304      	adds	r3, #4
 8006564:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2201      	movs	r2, #1
 800657c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	b2da      	uxtb	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d102      	bne.n	8006598 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	6979      	ldr	r1, [r7, #20]
 80065b0:	f004 ffa4 	bl	800b4fc <USB_EP0StartXfer>
 80065b4:	e008      	b.n	80065c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	6979      	ldr	r1, [r7, #20]
 80065c4:	f004 fd4a 	bl	800b05c <USB_EPStartXfer>
  }

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d901      	bls.n	80065f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e050      	b.n	8006692 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da0f      	bge.n	8006618 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f003 020f 	and.w	r2, r3, #15
 80065fe:	4613      	mov	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	3338      	adds	r3, #56	; 0x38
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4413      	add	r3, r2
 800660c:	3304      	adds	r3, #4
 800660e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	705a      	strb	r2, [r3, #1]
 8006616:	e00d      	b.n	8006634 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006618:	78fa      	ldrb	r2, [r7, #3]
 800661a:	4613      	mov	r3, r2
 800661c:	00db      	lsls	r3, r3, #3
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	3304      	adds	r3, #4
 800662c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	b2da      	uxtb	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_PCD_EP_SetStall+0x82>
 8006650:	2302      	movs	r3, #2
 8006652:	e01e      	b.n	8006692 <HAL_PCD_EP_SetStall+0xc0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	4618      	mov	r0, r3
 8006664:	f005 f9e6 	bl	800ba34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10a      	bne.n	8006688 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	b2d9      	uxtb	r1, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006682:	461a      	mov	r2, r3
 8006684:	f005 fbd8 	bl	800be38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d901      	bls.n	80066b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e042      	b.n	800673e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	da0f      	bge.n	80066e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	f003 020f 	and.w	r2, r3, #15
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	3338      	adds	r3, #56	; 0x38
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	4413      	add	r3, r2
 80066d4:	3304      	adds	r3, #4
 80066d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	705a      	strb	r2, [r3, #1]
 80066de:	e00f      	b.n	8006700 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	f003 020f 	and.w	r2, r3, #15
 80066e6:	4613      	mov	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	3304      	adds	r3, #4
 80066f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_PCD_EP_ClrStall+0x86>
 800671c:	2302      	movs	r3, #2
 800671e:	e00e      	b.n	800673e <HAL_PCD_EP_ClrStall+0xa4>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68f9      	ldr	r1, [r7, #12]
 800672e:	4618      	mov	r0, r3
 8006730:	f005 f9ee 	bl	800bb10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006756:	2b00      	cmp	r3, #0
 8006758:	da0c      	bge.n	8006774 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	f003 020f 	and.w	r2, r3, #15
 8006760:	4613      	mov	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	3338      	adds	r3, #56	; 0x38
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	e00c      	b.n	800678e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	f003 020f 	and.w	r2, r3, #15
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	3304      	adds	r3, #4
 800678c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	4618      	mov	r0, r3
 8006796:	f005 f80d 	bl	800b7b4 <USB_EPStopXfer>
 800679a:	4603      	mov	r3, r0
 800679c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800679e:	7afb      	ldrb	r3, [r7, #11]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	4613      	mov	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	3338      	adds	r3, #56	; 0x38
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	3304      	adds	r3, #4
 80067ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1a      	ldr	r2, [r3, #32]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d901      	bls.n	80067e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e06c      	b.n	80068ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	699a      	ldr	r2, [r3, #24]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d902      	bls.n	80067fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3303      	adds	r3, #3
 8006800:	089b      	lsrs	r3, r3, #2
 8006802:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006804:	e02b      	b.n	800685e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	429a      	cmp	r2, r3
 800681a:	d902      	bls.n	8006822 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	3303      	adds	r3, #3
 8006826:	089b      	lsrs	r3, r3, #2
 8006828:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6919      	ldr	r1, [r3, #16]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800683a:	b2db      	uxtb	r3, r3
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4603      	mov	r3, r0
 8006840:	6978      	ldr	r0, [r7, #20]
 8006842:	f005 f861 	bl	800b908 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	441a      	add	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	441a      	add	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	429a      	cmp	r2, r3
 8006872:	d809      	bhi.n	8006888 <PCD_WriteEmptyTxFifo+0xe0>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800687c:	429a      	cmp	r2, r3
 800687e:	d203      	bcs.n	8006888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1be      	bne.n	8006806 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	429a      	cmp	r2, r3
 8006892:	d811      	bhi.n	80068b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	2201      	movs	r2, #1
 800689c:	fa02 f303 	lsl.w	r3, r2, r3
 80068a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	6939      	ldr	r1, [r7, #16]
 80068b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b4:	4013      	ands	r3, r2
 80068b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	333c      	adds	r3, #60	; 0x3c
 80068dc:	3304      	adds	r3, #4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d17b      	bne.n	80069f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d015      	beq.n	8006930 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4a61      	ldr	r2, [pc, #388]	; (8006a8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	f240 80b9 	bls.w	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80b3 	beq.w	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	461a      	mov	r2, r3
 8006928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692c:	6093      	str	r3, [r2, #8]
 800692e:	e0a7      	b.n	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	461a      	mov	r2, r3
 8006948:	2320      	movs	r3, #32
 800694a:	6093      	str	r3, [r2, #8]
 800694c:	e098      	b.n	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 8093 	bne.w	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4a4b      	ldr	r2, [pc, #300]	; (8006a8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d90f      	bls.n	8006982 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	461a      	mov	r2, r3
 800697a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697e:	6093      	str	r3, [r2, #8]
 8006980:	e07e      	b.n	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	4613      	mov	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	4413      	add	r3, r2
 8006994:	3304      	adds	r3, #4
 8006996:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	0159      	lsls	r1, r3, #5
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	440b      	add	r3, r1
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d114      	bne.n	80069e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069cc:	461a      	mov	r2, r3
 80069ce:	2101      	movs	r1, #1
 80069d0:	f005 fa32 	bl	800be38 <USB_EP0_OutStart>
 80069d4:	e006      	b.n	80069e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f00a fad4 	bl	8010f98 <HAL_PCD_DataOutStageCallback>
 80069f0:	e046      	b.n	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4a26      	ldr	r2, [pc, #152]	; (8006a90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d124      	bne.n	8006a44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	461a      	mov	r2, r3
 8006a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a16:	6093      	str	r3, [r2, #8]
 8006a18:	e032      	b.n	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	461a      	mov	r2, r3
 8006a32:	2320      	movs	r3, #32
 8006a34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f00a faab 	bl	8010f98 <HAL_PCD_DataOutStageCallback>
 8006a42:	e01d      	b.n	8006a80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d114      	bne.n	8006a74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d108      	bne.n	8006a74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	2100      	movs	r1, #0
 8006a70:	f005 f9e2 	bl	800be38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f00a fa8c 	bl	8010f98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	4f54300a 	.word	0x4f54300a
 8006a90:	4f54310a 	.word	0x4f54310a

08006a94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	333c      	adds	r3, #60	; 0x3c
 8006aac:	3304      	adds	r3, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d90e      	bls.n	8006ae8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ae6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f00a fa43 	bl	8010f74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d90c      	bls.n	8006b10 <PCD_EP_OutSetupPacket_int+0x7c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d108      	bne.n	8006b10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b08:	461a      	mov	r2, r3
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	f005 f994 	bl	800be38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	4f54300a 	.word	0x4f54300a

08006b20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d107      	bne.n	8006b4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006b3e:	883b      	ldrh	r3, [r7, #0]
 8006b40:	0419      	lsls	r1, r3, #16
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b4c:	e028      	b.n	8006ba0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4413      	add	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	73fb      	strb	r3, [r7, #15]
 8006b60:	e00d      	b.n	8006b7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	3340      	adds	r3, #64	; 0x40
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	0c1b      	lsrs	r3, r3, #16
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	4413      	add	r3, r2
 8006b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	73fb      	strb	r3, [r7, #15]
 8006b7e:	7bfa      	ldrb	r2, [r7, #15]
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d3ec      	bcc.n	8006b62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b88:	883b      	ldrh	r3, [r7, #0]
 8006b8a:	0418      	lsls	r0, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	4302      	orrs	r2, r0
 8006b98:	3340      	adds	r3, #64	; 0x40
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	887a      	ldrh	r2, [r7, #2]
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <HAL_PCDEx_ActivateLPM+0x44>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	10000003 	.word	0x10000003

08006c18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006c22:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	4a22      	ldr	r2, [pc, #136]	; (8006cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2e:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006c3a:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c46:	f7fc ffe5 	bl	8003c14 <HAL_GetTick>
 8006c4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c4c:	e009      	b.n	8006c62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c4e:	f7fc ffe1 	bl	8003c14 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c5c:	d901      	bls.n	8006c62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e022      	b.n	8006ca8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c62:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6e:	d1ee      	bne.n	8006c4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006c70:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a0f      	ldr	r2, [pc, #60]	; (8006cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c7c:	f7fc ffca 	bl	8003c14 <HAL_GetTick>
 8006c80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c82:	e009      	b.n	8006c98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c84:	f7fc ffc6 	bl	8003c14 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c92:	d901      	bls.n	8006c98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e007      	b.n	8006ca8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca4:	d1ee      	bne.n	8006c84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40007000 	.word	0x40007000

08006cb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e29b      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8087 	beq.w	8006dea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cdc:	4b96      	ldr	r3, [pc, #600]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d00c      	beq.n	8006d02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ce8:	4b93      	ldr	r3, [pc, #588]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 030c 	and.w	r3, r3, #12
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d112      	bne.n	8006d1a <HAL_RCC_OscConfig+0x62>
 8006cf4:	4b90      	ldr	r3, [pc, #576]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d00:	d10b      	bne.n	8006d1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d02:	4b8d      	ldr	r3, [pc, #564]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d06c      	beq.n	8006de8 <HAL_RCC_OscConfig+0x130>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d168      	bne.n	8006de8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e275      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d22:	d106      	bne.n	8006d32 <HAL_RCC_OscConfig+0x7a>
 8006d24:	4b84      	ldr	r3, [pc, #528]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a83      	ldr	r2, [pc, #524]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	e02e      	b.n	8006d90 <HAL_RCC_OscConfig+0xd8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10c      	bne.n	8006d54 <HAL_RCC_OscConfig+0x9c>
 8006d3a:	4b7f      	ldr	r3, [pc, #508]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7e      	ldr	r2, [pc, #504]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	4b7c      	ldr	r3, [pc, #496]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a7b      	ldr	r2, [pc, #492]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e01d      	b.n	8006d90 <HAL_RCC_OscConfig+0xd8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d5c:	d10c      	bne.n	8006d78 <HAL_RCC_OscConfig+0xc0>
 8006d5e:	4b76      	ldr	r3, [pc, #472]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a75      	ldr	r2, [pc, #468]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	4b73      	ldr	r3, [pc, #460]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a72      	ldr	r2, [pc, #456]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e00b      	b.n	8006d90 <HAL_RCC_OscConfig+0xd8>
 8006d78:	4b6f      	ldr	r3, [pc, #444]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a6e      	ldr	r2, [pc, #440]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	4b6c      	ldr	r3, [pc, #432]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a6b      	ldr	r2, [pc, #428]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d013      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fc ff3c 	bl	8003c14 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da0:	f7fc ff38 	bl	8003c14 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b64      	cmp	r3, #100	; 0x64
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e229      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db2:	4b61      	ldr	r3, [pc, #388]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0xe8>
 8006dbe:	e014      	b.n	8006dea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fc ff28 	bl	8003c14 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc8:	f7fc ff24 	bl	8003c14 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b64      	cmp	r3, #100	; 0x64
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e215      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dda:	4b57      	ldr	r3, [pc, #348]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x110>
 8006de6:	e000      	b.n	8006dea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d069      	beq.n	8006eca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006df6:	4b50      	ldr	r3, [pc, #320]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e02:	4b4d      	ldr	r3, [pc, #308]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d11c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x190>
 8006e0e:	4b4a      	ldr	r3, [pc, #296]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d116      	bne.n	8006e48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1a:	4b47      	ldr	r3, [pc, #284]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_RCC_OscConfig+0x17a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d001      	beq.n	8006e32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e1e9      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e32:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	493d      	ldr	r1, [pc, #244]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e46:	e040      	b.n	8006eca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d023      	beq.n	8006e98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a38      	ldr	r2, [pc, #224]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fc feda 	bl	8003c14 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e64:	f7fc fed6 	bl	8003c14 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e1c7      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e76:	4b30      	ldr	r3, [pc, #192]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e82:	4b2d      	ldr	r3, [pc, #180]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4929      	ldr	r1, [pc, #164]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	600b      	str	r3, [r1, #0]
 8006e96:	e018      	b.n	8006eca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e98:	4b27      	ldr	r3, [pc, #156]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a26      	ldr	r2, [pc, #152]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea4:	f7fc feb6 	bl	8003c14 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eac:	f7fc feb2 	bl	8003c14 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e1a3      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ebe:	4b1e      	ldr	r3, [pc, #120]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d038      	beq.n	8006f48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d019      	beq.n	8006f12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ede:	4b16      	ldr	r3, [pc, #88]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee2:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006ee4:	f043 0301 	orr.w	r3, r3, #1
 8006ee8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eea:	f7fc fe93 	bl	8003c14 <HAL_GetTick>
 8006eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef2:	f7fc fe8f 	bl	8003c14 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e180      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f04:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x23a>
 8006f10:	e01a      	b.n	8006f48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f16:	4a08      	ldr	r2, [pc, #32]	; (8006f38 <HAL_RCC_OscConfig+0x280>)
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1e:	f7fc fe79 	bl	8003c14 <HAL_GetTick>
 8006f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f24:	e00a      	b.n	8006f3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f26:	f7fc fe75 	bl	8003c14 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d903      	bls.n	8006f3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e166      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
 8006f38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f3c:	4b92      	ldr	r3, [pc, #584]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1ee      	bne.n	8006f26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 80a4 	beq.w	800709e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f56:	4b8c      	ldr	r3, [pc, #560]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f62:	4b89      	ldr	r3, [pc, #548]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	4a88      	ldr	r2, [pc, #544]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f6e:	4b86      	ldr	r3, [pc, #536]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f7e:	4b83      	ldr	r3, [pc, #524]	; (800718c <HAL_RCC_OscConfig+0x4d4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d118      	bne.n	8006fbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006f8a:	4b80      	ldr	r3, [pc, #512]	; (800718c <HAL_RCC_OscConfig+0x4d4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a7f      	ldr	r2, [pc, #508]	; (800718c <HAL_RCC_OscConfig+0x4d4>)
 8006f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f96:	f7fc fe3d 	bl	8003c14 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9e:	f7fc fe39 	bl	8003c14 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b64      	cmp	r3, #100	; 0x64
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e12a      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fb0:	4b76      	ldr	r3, [pc, #472]	; (800718c <HAL_RCC_OscConfig+0x4d4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0f0      	beq.n	8006f9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d106      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x31a>
 8006fc4:	4b70      	ldr	r3, [pc, #448]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc8:	4a6f      	ldr	r2, [pc, #444]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd0:	e02d      	b.n	800702e <HAL_RCC_OscConfig+0x376>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10c      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x33c>
 8006fda:	4b6b      	ldr	r3, [pc, #428]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	4a6a      	ldr	r2, [pc, #424]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe6:	4b68      	ldr	r3, [pc, #416]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	4a67      	ldr	r2, [pc, #412]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff2:	e01c      	b.n	800702e <HAL_RCC_OscConfig+0x376>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b05      	cmp	r3, #5
 8006ffa:	d10c      	bne.n	8007016 <HAL_RCC_OscConfig+0x35e>
 8006ffc:	4b62      	ldr	r3, [pc, #392]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	4a61      	ldr	r2, [pc, #388]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007002:	f043 0304 	orr.w	r3, r3, #4
 8007006:	6713      	str	r3, [r2, #112]	; 0x70
 8007008:	4b5f      	ldr	r3, [pc, #380]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	4a5e      	ldr	r2, [pc, #376]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	6713      	str	r3, [r2, #112]	; 0x70
 8007014:	e00b      	b.n	800702e <HAL_RCC_OscConfig+0x376>
 8007016:	4b5c      	ldr	r3, [pc, #368]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	4a5b      	ldr	r2, [pc, #364]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	6713      	str	r3, [r2, #112]	; 0x70
 8007022:	4b59      	ldr	r3, [pc, #356]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007026:	4a58      	ldr	r2, [pc, #352]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007028:	f023 0304 	bic.w	r3, r3, #4
 800702c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d015      	beq.n	8007062 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007036:	f7fc fded 	bl	8003c14 <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800703c:	e00a      	b.n	8007054 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800703e:	f7fc fde9 	bl	8003c14 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f241 3288 	movw	r2, #5000	; 0x1388
 800704c:	4293      	cmp	r3, r2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e0d8      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007054:	4b4c      	ldr	r3, [pc, #304]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0ee      	beq.n	800703e <HAL_RCC_OscConfig+0x386>
 8007060:	e014      	b.n	800708c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007062:	f7fc fdd7 	bl	8003c14 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007068:	e00a      	b.n	8007080 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706a:	f7fc fdd3 	bl	8003c14 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f241 3288 	movw	r2, #5000	; 0x1388
 8007078:	4293      	cmp	r3, r2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e0c2      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007080:	4b41      	ldr	r3, [pc, #260]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1ee      	bne.n	800706a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d105      	bne.n	800709e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007092:	4b3d      	ldr	r3, [pc, #244]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	4a3c      	ldr	r2, [pc, #240]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800709c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80ae 	beq.w	8007204 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070a8:	4b37      	ldr	r3, [pc, #220]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 030c 	and.w	r3, r3, #12
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d06d      	beq.n	8007190 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d14b      	bne.n	8007154 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070bc:	4b32      	ldr	r3, [pc, #200]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a31      	ldr	r2, [pc, #196]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 80070c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fc fda4 	bl	8003c14 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070d0:	f7fc fda0 	bl	8003c14 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e091      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e2:	4b29      	ldr	r3, [pc, #164]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69da      	ldr	r2, [r3, #28]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	019b      	lsls	r3, r3, #6
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	085b      	lsrs	r3, r3, #1
 8007106:	3b01      	subs	r3, #1
 8007108:	041b      	lsls	r3, r3, #16
 800710a:	431a      	orrs	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	061b      	lsls	r3, r3, #24
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	071b      	lsls	r3, r3, #28
 800711a:	491b      	ldr	r1, [pc, #108]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 800711c:	4313      	orrs	r3, r2
 800711e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007120:	4b19      	ldr	r3, [pc, #100]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a18      	ldr	r2, [pc, #96]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800712a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fc fd72 	bl	8003c14 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007134:	f7fc fd6e 	bl	8003c14 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e05f      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007146:	4b10      	ldr	r3, [pc, #64]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCC_OscConfig+0x47c>
 8007152:	e057      	b.n	8007204 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a0b      	ldr	r2, [pc, #44]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 800715a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800715e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fc fd58 	bl	8003c14 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007168:	f7fc fd54 	bl	8003c14 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e045      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <HAL_RCC_OscConfig+0x4d0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x4b0>
 8007186:	e03d      	b.n	8007204 <HAL_RCC_OscConfig+0x54c>
 8007188:	40023800 	.word	0x40023800
 800718c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007190:	4b1f      	ldr	r3, [pc, #124]	; (8007210 <HAL_RCC_OscConfig+0x558>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d030      	beq.n	8007200 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d129      	bne.n	8007200 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d122      	bne.n	8007200 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071c0:	4013      	ands	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d119      	bne.n	8007200 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	3b01      	subs	r3, #1
 80071da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071dc:	429a      	cmp	r2, r3
 80071de:	d10f      	bne.n	8007200 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d107      	bne.n	8007200 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d001      	beq.n	8007204 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40023800 	.word	0x40023800

08007214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0d0      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800722c:	4b6a      	ldr	r3, [pc, #424]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d910      	bls.n	800725c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723a:	4b67      	ldr	r3, [pc, #412]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 020f 	bic.w	r2, r3, #15
 8007242:	4965      	ldr	r1, [pc, #404]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800724a:	4b63      	ldr	r3, [pc, #396]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d001      	beq.n	800725c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0b8      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d020      	beq.n	80072aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d005      	beq.n	8007280 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007274:	4b59      	ldr	r3, [pc, #356]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	4a58      	ldr	r2, [pc, #352]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 800727a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800727e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800728c:	4b53      	ldr	r3, [pc, #332]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	4a52      	ldr	r2, [pc, #328]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007296:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007298:	4b50      	ldr	r3, [pc, #320]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	494d      	ldr	r1, [pc, #308]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d040      	beq.n	8007338 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d107      	bne.n	80072ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072be:	4b47      	ldr	r3, [pc, #284]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d115      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e07f      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d107      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	4b41      	ldr	r3, [pc, #260]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e073      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e6:	4b3d      	ldr	r3, [pc, #244]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e06b      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072f6:	4b39      	ldr	r3, [pc, #228]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f023 0203 	bic.w	r2, r3, #3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4936      	ldr	r1, [pc, #216]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007304:	4313      	orrs	r3, r2
 8007306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007308:	f7fc fc84 	bl	8003c14 <HAL_GetTick>
 800730c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730e:	e00a      	b.n	8007326 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007310:	f7fc fc80 	bl	8003c14 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e053      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007326:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 020c 	and.w	r2, r3, #12
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	429a      	cmp	r2, r3
 8007336:	d1eb      	bne.n	8007310 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007338:	4b27      	ldr	r3, [pc, #156]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d210      	bcs.n	8007368 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007346:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f023 020f 	bic.w	r2, r3, #15
 800734e:	4922      	ldr	r1, [pc, #136]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	4313      	orrs	r3, r2
 8007354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d001      	beq.n	8007368 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e032      	b.n	80073ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007374:	4b19      	ldr	r3, [pc, #100]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	4916      	ldr	r1, [pc, #88]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007382:	4313      	orrs	r3, r2
 8007384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007392:	4b12      	ldr	r3, [pc, #72]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	490e      	ldr	r1, [pc, #56]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073a6:	f000 f821 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 80073aa:	4602      	mov	r2, r0
 80073ac:	4b0b      	ldr	r3, [pc, #44]	; (80073dc <HAL_RCC_ClockConfig+0x1c8>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	490a      	ldr	r1, [pc, #40]	; (80073e0 <HAL_RCC_ClockConfig+0x1cc>)
 80073b8:	5ccb      	ldrb	r3, [r1, r3]
 80073ba:	fa22 f303 	lsr.w	r3, r2, r3
 80073be:	4a09      	ldr	r2, [pc, #36]	; (80073e4 <HAL_RCC_ClockConfig+0x1d0>)
 80073c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <HAL_RCC_ClockConfig+0x1d4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fc f82e 	bl	8003428 <HAL_InitTick>

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	40023c00 	.word	0x40023c00
 80073dc:	40023800 	.word	0x40023800
 80073e0:	08024580 	.word	0x08024580
 80073e4:	20000008 	.word	0x20000008
 80073e8:	2000000c 	.word	0x2000000c

080073ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f0:	b094      	sub	sp, #80	; 0x50
 80073f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	647b      	str	r3, [r7, #68]	; 0x44
 80073f8:	2300      	movs	r3, #0
 80073fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073fc:	2300      	movs	r3, #0
 80073fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007400:	2300      	movs	r3, #0
 8007402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007404:	4b79      	ldr	r3, [pc, #484]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 030c 	and.w	r3, r3, #12
 800740c:	2b08      	cmp	r3, #8
 800740e:	d00d      	beq.n	800742c <HAL_RCC_GetSysClockFreq+0x40>
 8007410:	2b08      	cmp	r3, #8
 8007412:	f200 80e1 	bhi.w	80075d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_RCC_GetSysClockFreq+0x34>
 800741a:	2b04      	cmp	r3, #4
 800741c:	d003      	beq.n	8007426 <HAL_RCC_GetSysClockFreq+0x3a>
 800741e:	e0db      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007420:	4b73      	ldr	r3, [pc, #460]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007422:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007424:	e0db      	b.n	80075de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007426:	4b73      	ldr	r3, [pc, #460]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800742a:	e0d8      	b.n	80075de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800742c:	4b6f      	ldr	r3, [pc, #444]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007434:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007436:	4b6d      	ldr	r3, [pc, #436]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d063      	beq.n	800750a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007442:	4b6a      	ldr	r3, [pc, #424]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	099b      	lsrs	r3, r3, #6
 8007448:	2200      	movs	r2, #0
 800744a:	63bb      	str	r3, [r7, #56]	; 0x38
 800744c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007454:	633b      	str	r3, [r7, #48]	; 0x30
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
 800745a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f04f 0100 	mov.w	r1, #0
 800746a:	0159      	lsls	r1, r3, #5
 800746c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007470:	0150      	lsls	r0, r2, #5
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4621      	mov	r1, r4
 8007478:	1a51      	subs	r1, r2, r1
 800747a:	6139      	str	r1, [r7, #16]
 800747c:	4629      	mov	r1, r5
 800747e:	eb63 0301 	sbc.w	r3, r3, r1
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007490:	4659      	mov	r1, fp
 8007492:	018b      	lsls	r3, r1, #6
 8007494:	4651      	mov	r1, sl
 8007496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800749a:	4651      	mov	r1, sl
 800749c:	018a      	lsls	r2, r1, #6
 800749e:	4651      	mov	r1, sl
 80074a0:	ebb2 0801 	subs.w	r8, r2, r1
 80074a4:	4659      	mov	r1, fp
 80074a6:	eb63 0901 	sbc.w	r9, r3, r1
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074be:	4690      	mov	r8, r2
 80074c0:	4699      	mov	r9, r3
 80074c2:	4623      	mov	r3, r4
 80074c4:	eb18 0303 	adds.w	r3, r8, r3
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	462b      	mov	r3, r5
 80074cc:	eb49 0303 	adc.w	r3, r9, r3
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074de:	4629      	mov	r1, r5
 80074e0:	024b      	lsls	r3, r1, #9
 80074e2:	4621      	mov	r1, r4
 80074e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074e8:	4621      	mov	r1, r4
 80074ea:	024a      	lsls	r2, r1, #9
 80074ec:	4610      	mov	r0, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f2:	2200      	movs	r2, #0
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074fc:	f7f9 f914 	bl	8000728 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4613      	mov	r3, r2
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007508:	e058      	b.n	80075bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800750a:	4b38      	ldr	r3, [pc, #224]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	099b      	lsrs	r3, r3, #6
 8007510:	2200      	movs	r2, #0
 8007512:	4618      	mov	r0, r3
 8007514:	4611      	mov	r1, r2
 8007516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800751a:	623b      	str	r3, [r7, #32]
 800751c:	2300      	movs	r3, #0
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
 8007520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	f04f 0000 	mov.w	r0, #0
 800752c:	f04f 0100 	mov.w	r1, #0
 8007530:	0159      	lsls	r1, r3, #5
 8007532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007536:	0150      	lsls	r0, r2, #5
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4641      	mov	r1, r8
 800753e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007542:	4649      	mov	r1, r9
 8007544:	eb63 0b01 	sbc.w	fp, r3, r1
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800755c:	ebb2 040a 	subs.w	r4, r2, sl
 8007560:	eb63 050b 	sbc.w	r5, r3, fp
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	00eb      	lsls	r3, r5, #3
 800756e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007572:	00e2      	lsls	r2, r4, #3
 8007574:	4614      	mov	r4, r2
 8007576:	461d      	mov	r5, r3
 8007578:	4643      	mov	r3, r8
 800757a:	18e3      	adds	r3, r4, r3
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	464b      	mov	r3, r9
 8007580:	eb45 0303 	adc.w	r3, r5, r3
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007592:	4629      	mov	r1, r5
 8007594:	028b      	lsls	r3, r1, #10
 8007596:	4621      	mov	r1, r4
 8007598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800759c:	4621      	mov	r1, r4
 800759e:	028a      	lsls	r2, r1, #10
 80075a0:	4610      	mov	r0, r2
 80075a2:	4619      	mov	r1, r3
 80075a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a6:	2200      	movs	r2, #0
 80075a8:	61bb      	str	r3, [r7, #24]
 80075aa:	61fa      	str	r2, [r7, #28]
 80075ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075b0:	f7f9 f8ba 	bl	8000728 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4613      	mov	r3, r2
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80075bc:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <HAL_RCC_GetSysClockFreq+0x200>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	0c1b      	lsrs	r3, r3, #16
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	3301      	adds	r3, #1
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80075cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075d6:	e002      	b.n	80075de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80075da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80075dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3750      	adds	r7, #80	; 0x50
 80075e4:	46bd      	mov	sp, r7
 80075e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800
 80075f0:	00f42400 	.word	0x00f42400
 80075f4:	007a1200 	.word	0x007a1200

080075f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075fc:	4b03      	ldr	r3, [pc, #12]	; (800760c <HAL_RCC_GetHCLKFreq+0x14>)
 80075fe:	681b      	ldr	r3, [r3, #0]
}
 8007600:	4618      	mov	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20000008 	.word	0x20000008

08007610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007614:	f7ff fff0 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8007618:	4602      	mov	r2, r0
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	0a9b      	lsrs	r3, r3, #10
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	4903      	ldr	r1, [pc, #12]	; (8007634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007626:	5ccb      	ldrb	r3, [r1, r3]
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800762c:	4618      	mov	r0, r3
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40023800 	.word	0x40023800
 8007634:	08024590 	.word	0x08024590

08007638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800763c:	f7ff ffdc 	bl	80075f8 <HAL_RCC_GetHCLKFreq>
 8007640:	4602      	mov	r2, r0
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	0b5b      	lsrs	r3, r3, #13
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	4903      	ldr	r1, [pc, #12]	; (800765c <HAL_RCC_GetPCLK2Freq+0x24>)
 800764e:	5ccb      	ldrb	r3, [r1, r3]
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40023800 	.word	0x40023800
 800765c:	08024590 	.word	0x08024590

08007660 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	220f      	movs	r2, #15
 800766e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007670:	4b12      	ldr	r3, [pc, #72]	; (80076bc <HAL_RCC_GetClockConfig+0x5c>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0203 	and.w	r2, r3, #3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800767c:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <HAL_RCC_GetClockConfig+0x5c>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007694:	4b09      	ldr	r3, [pc, #36]	; (80076bc <HAL_RCC_GetClockConfig+0x5c>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	08db      	lsrs	r3, r3, #3
 800769a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076a2:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <HAL_RCC_GetClockConfig+0x60>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 020f 	and.w	r2, r3, #15
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	601a      	str	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40023800 	.word	0x40023800
 80076c0:	40023c00 	.word	0x40023c00

080076c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d012      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076ec:	4b69      	ldr	r3, [pc, #420]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	4a68      	ldr	r2, [pc, #416]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076f6:	6093      	str	r3, [r2, #8]
 80076f8:	4b66      	ldr	r3, [pc, #408]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007700:	4964      	ldr	r1, [pc, #400]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007702:	4313      	orrs	r3, r2
 8007704:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800770e:	2301      	movs	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d017      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800771e:	4b5d      	ldr	r3, [pc, #372]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	4959      	ldr	r1, [pc, #356]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800773c:	d101      	bne.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800773e:	2301      	movs	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800774a:	2301      	movs	r3, #1
 800774c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d017      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800775a:	4b4e      	ldr	r3, [pc, #312]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800775c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007760:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	494a      	ldr	r1, [pc, #296]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007778:	d101      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800777a:	2301      	movs	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007786:	2301      	movs	r3, #1
 8007788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007796:	2301      	movs	r3, #1
 8007798:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 808b 	beq.w	80078be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077a8:	4b3a      	ldr	r3, [pc, #232]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	4a39      	ldr	r2, [pc, #228]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b2:	6413      	str	r3, [r2, #64]	; 0x40
 80077b4:	4b37      	ldr	r3, [pc, #220]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077c0:	4b35      	ldr	r3, [pc, #212]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a34      	ldr	r2, [pc, #208]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077cc:	f7fc fa22 	bl	8003c14 <HAL_GetTick>
 80077d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077d2:	e008      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d4:	f7fc fa1e 	bl	8003c14 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b64      	cmp	r3, #100	; 0x64
 80077e0:	d901      	bls.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e38f      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077e6:	4b2c      	ldr	r3, [pc, #176]	; (8007898 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f0      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077f2:	4b28      	ldr	r3, [pc, #160]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d035      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	d02e      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007810:	4b20      	ldr	r3, [pc, #128]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007818:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800781a:	4b1e      	ldr	r3, [pc, #120]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007824:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007826:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782a:	4a1a      	ldr	r2, [pc, #104]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800782c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007830:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007832:	4a18      	ldr	r2, [pc, #96]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007838:	4b16      	ldr	r3, [pc, #88]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d114      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007844:	f7fc f9e6 	bl	8003c14 <HAL_GetTick>
 8007848:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800784a:	e00a      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800784c:	f7fc f9e2 	bl	8003c14 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	f241 3288 	movw	r2, #5000	; 0x1388
 800785a:	4293      	cmp	r3, r2
 800785c:	d901      	bls.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e351      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0ee      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800787a:	d111      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800788a:	400b      	ands	r3, r1
 800788c:	4901      	ldr	r1, [pc, #4]	; (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800788e:	4313      	orrs	r3, r2
 8007890:	608b      	str	r3, [r1, #8]
 8007892:	e00b      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007894:	40023800 	.word	0x40023800
 8007898:	40007000 	.word	0x40007000
 800789c:	0ffffcff 	.word	0x0ffffcff
 80078a0:	4bac      	ldr	r3, [pc, #688]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4aab      	ldr	r2, [pc, #684]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078aa:	6093      	str	r3, [r2, #8]
 80078ac:	4ba9      	ldr	r3, [pc, #676]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078b8:	49a6      	ldr	r1, [pc, #664]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d010      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078ca:	4ba2      	ldr	r3, [pc, #648]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d0:	4aa0      	ldr	r2, [pc, #640]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80078da:	4b9e      	ldr	r3, [pc, #632]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	499b      	ldr	r1, [pc, #620]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078f8:	4b96      	ldr	r3, [pc, #600]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007906:	4993      	ldr	r1, [pc, #588]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007908:	4313      	orrs	r3, r2
 800790a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800791a:	4b8e      	ldr	r3, [pc, #568]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007928:	498a      	ldr	r1, [pc, #552]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800793c:	4b85      	ldr	r3, [pc, #532]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800793e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007942:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800794a:	4982      	ldr	r1, [pc, #520]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800795e:	4b7d      	ldr	r3, [pc, #500]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4979      	ldr	r1, [pc, #484]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007980:	4b74      	ldr	r3, [pc, #464]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007986:	f023 0203 	bic.w	r2, r3, #3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	4971      	ldr	r1, [pc, #452]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007990:	4313      	orrs	r3, r2
 8007992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079a2:	4b6c      	ldr	r3, [pc, #432]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a8:	f023 020c 	bic.w	r2, r3, #12
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b0:	4968      	ldr	r1, [pc, #416]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079c4:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d2:	4960      	ldr	r1, [pc, #384]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079e6:	4b5b      	ldr	r3, [pc, #364]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f4:	4957      	ldr	r1, [pc, #348]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a08:	4b52      	ldr	r3, [pc, #328]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a16:	494f      	ldr	r1, [pc, #316]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a2a:	4b4a      	ldr	r3, [pc, #296]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a38:	4946      	ldr	r1, [pc, #280]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007a4c:	4b41      	ldr	r3, [pc, #260]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5a:	493e      	ldr	r1, [pc, #248]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007a6e:	4b39      	ldr	r3, [pc, #228]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a7c:	4935      	ldr	r1, [pc, #212]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a90:	4b30      	ldr	r3, [pc, #192]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a9e:	492d      	ldr	r1, [pc, #180]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d011      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ab2:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac0:	4924      	ldr	r1, [pc, #144]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ad0:	d101      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007af2:	4b18      	ldr	r3, [pc, #96]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b00:	4914      	ldr	r1, [pc, #80]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00b      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b14:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b24:	490b      	ldr	r1, [pc, #44]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00f      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b48:	4902      	ldr	r1, [pc, #8]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b50:	e002      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007b52:	bf00      	nop
 8007b54:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b64:	4b8a      	ldr	r3, [pc, #552]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	4986      	ldr	r1, [pc, #536]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007b88:	4b81      	ldr	r3, [pc, #516]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b98:	497d      	ldr	r1, [pc, #500]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d006      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80d6 	beq.w	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007bb4:	4b76      	ldr	r3, [pc, #472]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a75      	ldr	r2, [pc, #468]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc0:	f7fc f828 	bl	8003c14 <HAL_GetTick>
 8007bc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bc6:	e008      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bc8:	f7fc f824 	bl	8003c14 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b64      	cmp	r3, #100	; 0x64
 8007bd4:	d901      	bls.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e195      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bda:	4b6d      	ldr	r3, [pc, #436]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f0      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d021      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d11d      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007bfa:	4b65      	ldr	r3, [pc, #404]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c00:	0c1b      	lsrs	r3, r3, #16
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c08:	4b61      	ldr	r3, [pc, #388]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c0e:	0e1b      	lsrs	r3, r3, #24
 8007c10:	f003 030f 	and.w	r3, r3, #15
 8007c14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	019a      	lsls	r2, r3, #6
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	431a      	orrs	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	061b      	lsls	r3, r3, #24
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	071b      	lsls	r3, r3, #28
 8007c2e:	4958      	ldr	r1, [pc, #352]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c4a:	d00a      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d02e      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c60:	d129      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c62:	4b4b      	ldr	r3, [pc, #300]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c70:	4b47      	ldr	r3, [pc, #284]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c76:	0f1b      	lsrs	r3, r3, #28
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	019a      	lsls	r2, r3, #6
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	041b      	lsls	r3, r3, #16
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	061b      	lsls	r3, r3, #24
 8007c90:	431a      	orrs	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	071b      	lsls	r3, r3, #28
 8007c96:	493e      	ldr	r1, [pc, #248]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c9e:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca4:	f023 021f 	bic.w	r2, r3, #31
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	3b01      	subs	r3, #1
 8007cae:	4938      	ldr	r1, [pc, #224]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01d      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cc2:	4b33      	ldr	r3, [pc, #204]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cc8:	0e1b      	lsrs	r3, r3, #24
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007cd0:	4b2f      	ldr	r3, [pc, #188]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cd6:	0f1b      	lsrs	r3, r3, #28
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	019a      	lsls	r2, r3, #6
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	041b      	lsls	r3, r3, #16
 8007cea:	431a      	orrs	r2, r3
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	061b      	lsls	r3, r3, #24
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	071b      	lsls	r3, r3, #28
 8007cf6:	4926      	ldr	r1, [pc, #152]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d011      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	019a      	lsls	r2, r3, #6
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	041b      	lsls	r3, r3, #16
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	071b      	lsls	r3, r3, #28
 8007d26:	491a      	ldr	r1, [pc, #104]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d2e:	4b18      	ldr	r3, [pc, #96]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a17      	ldr	r2, [pc, #92]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3a:	f7fb ff6b 	bl	8003c14 <HAL_GetTick>
 8007d3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d40:	e008      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d42:	f7fb ff67 	bl	8003c14 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b64      	cmp	r3, #100	; 0x64
 8007d4e:	d901      	bls.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e0d8      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d54:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0f0      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	f040 80ce 	bne.w	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a08      	ldr	r2, [pc, #32]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d74:	f7fb ff4e 	bl	8003c14 <HAL_GetTick>
 8007d78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d7a:	e00b      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d7c:	f7fb ff4a 	bl	8003c14 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b64      	cmp	r3, #100	; 0x64
 8007d88:	d904      	bls.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e0bb      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007d8e:	bf00      	nop
 8007d90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d94:	4b5e      	ldr	r3, [pc, #376]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da0:	d0ec      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d02e      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d12a      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007dca:	4b51      	ldr	r3, [pc, #324]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd0:	0c1b      	lsrs	r3, r3, #16
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007dd8:	4b4d      	ldr	r3, [pc, #308]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dde:	0f1b      	lsrs	r3, r3, #28
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	019a      	lsls	r2, r3, #6
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	041b      	lsls	r3, r3, #16
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	071b      	lsls	r3, r3, #28
 8007dfe:	4944      	ldr	r1, [pc, #272]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e06:	4b42      	ldr	r3, [pc, #264]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	3b01      	subs	r3, #1
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	493d      	ldr	r1, [pc, #244]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d022      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e34:	d11d      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e36:	4b36      	ldr	r3, [pc, #216]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	0e1b      	lsrs	r3, r3, #24
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e44:	4b32      	ldr	r3, [pc, #200]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4a:	0f1b      	lsrs	r3, r3, #28
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	019a      	lsls	r2, r3, #6
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	041b      	lsls	r3, r3, #16
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	061b      	lsls	r3, r3, #24
 8007e64:	431a      	orrs	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	071b      	lsls	r3, r3, #28
 8007e6a:	4929      	ldr	r1, [pc, #164]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d028      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e7e:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e84:	0e1b      	lsrs	r3, r3, #24
 8007e86:	f003 030f 	and.w	r3, r3, #15
 8007e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e8c:	4b20      	ldr	r3, [pc, #128]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e92:	0c1b      	lsrs	r3, r3, #16
 8007e94:	f003 0303 	and.w	r3, r3, #3
 8007e98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	019a      	lsls	r2, r3, #6
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	061b      	lsls	r3, r3, #24
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	071b      	lsls	r3, r3, #28
 8007eb2:	4917      	ldr	r1, [pc, #92]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007eba:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	4911      	ldr	r1, [pc, #68]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a0e      	ldr	r2, [pc, #56]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007edc:	f7fb fe9a 	bl	8003c14 <HAL_GetTick>
 8007ee0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ee4:	f7fb fe96 	bl	8003c14 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b64      	cmp	r3, #100	; 0x64
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e007      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ef6:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f02:	d1ef      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	40023800 	.word	0x40023800

08007f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e049      	b.n	8007fba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f841 	bl	8007fc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	f000 fb6a 	bl	800862c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d001      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e054      	b.n	800809a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0201 	orr.w	r2, r2, #1
 8008006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a26      	ldr	r2, [pc, #152]	; (80080a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d022      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x80>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801a:	d01d      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x80>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a22      	ldr	r2, [pc, #136]	; (80080ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d018      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x80>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a21      	ldr	r2, [pc, #132]	; (80080b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d013      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x80>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1f      	ldr	r2, [pc, #124]	; (80080b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00e      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x80>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a1e      	ldr	r2, [pc, #120]	; (80080b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d009      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x80>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <HAL_TIM_Base_Start_IT+0xe4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d004      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0x80>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d115      	bne.n	8008084 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <HAL_TIM_Base_Start_IT+0xec>)
 8008060:	4013      	ands	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b06      	cmp	r3, #6
 8008068:	d015      	beq.n	8008096 <HAL_TIM_Base_Start_IT+0xbe>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008070:	d011      	beq.n	8008096 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008082:	e008      	b.n	8008096 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0201 	orr.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e000      	b.n	8008098 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008096:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40000400 	.word	0x40000400
 80080b0:	40000800 	.word	0x40000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	40010400 	.word	0x40010400
 80080bc:	40014000 	.word	0x40014000
 80080c0:	40001800 	.word	0x40001800
 80080c4:	00010007 	.word	0x00010007

080080c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e049      	b.n	800816e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fb fbee 	bl	80038d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f000 fa90 	bl	800862c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b02      	cmp	r3, #2
 800818a:	d122      	bne.n	80081d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b02      	cmp	r3, #2
 8008198:	d11b      	bne.n	80081d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f06f 0202 	mvn.w	r2, #2
 80081a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0303 	and.w	r3, r3, #3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fa19 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 80081be:	e005      	b.n	80081cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fa0b 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa1c 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d122      	bne.n	8008226 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d11b      	bne.n	8008226 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f06f 0204 	mvn.w	r2, #4
 80081f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f9ef 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 8008212:	e005      	b.n	8008220 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f9e1 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f9f2 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b08      	cmp	r3, #8
 8008232:	d122      	bne.n	800827a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b08      	cmp	r3, #8
 8008240:	d11b      	bne.n	800827a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f06f 0208 	mvn.w	r2, #8
 800824a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2204      	movs	r2, #4
 8008250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f9c5 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 8008266:	e005      	b.n	8008274 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9b7 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f9c8 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	f003 0310 	and.w	r3, r3, #16
 8008284:	2b10      	cmp	r3, #16
 8008286:	d122      	bne.n	80082ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b10      	cmp	r3, #16
 8008294:	d11b      	bne.n	80082ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f06f 0210 	mvn.w	r2, #16
 800829e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2208      	movs	r2, #8
 80082a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f99b 	bl	80085f0 <HAL_TIM_IC_CaptureCallback>
 80082ba:	e005      	b.n	80082c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f98d 	bl	80085dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f99e 	bl	8008604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d10e      	bne.n	80082fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d107      	bne.n	80082fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f06f 0201 	mvn.w	r2, #1
 80082f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7fa fef5 	bl	80030e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008304:	2b80      	cmp	r3, #128	; 0x80
 8008306:	d10e      	bne.n	8008326 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d107      	bne.n	8008326 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fd97 	bl	8008e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008334:	d10e      	bne.n	8008354 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008340:	2b80      	cmp	r3, #128	; 0x80
 8008342:	d107      	bne.n	8008354 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800834c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fd8a 	bl	8008e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d10e      	bne.n	8008380 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	d107      	bne.n	8008380 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f94c 	bl	8008618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b20      	cmp	r3, #32
 800838c:	d10e      	bne.n	80083ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b20      	cmp	r3, #32
 800839a:	d107      	bne.n	80083ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0220 	mvn.w	r2, #32
 80083a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fd4a 	bl	8008e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e0ff      	b.n	80085d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b14      	cmp	r3, #20
 80083de:	f200 80f0 	bhi.w	80085c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083e2:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	0800843d 	.word	0x0800843d
 80083ec:	080085c3 	.word	0x080085c3
 80083f0:	080085c3 	.word	0x080085c3
 80083f4:	080085c3 	.word	0x080085c3
 80083f8:	0800847d 	.word	0x0800847d
 80083fc:	080085c3 	.word	0x080085c3
 8008400:	080085c3 	.word	0x080085c3
 8008404:	080085c3 	.word	0x080085c3
 8008408:	080084bf 	.word	0x080084bf
 800840c:	080085c3 	.word	0x080085c3
 8008410:	080085c3 	.word	0x080085c3
 8008414:	080085c3 	.word	0x080085c3
 8008418:	080084ff 	.word	0x080084ff
 800841c:	080085c3 	.word	0x080085c3
 8008420:	080085c3 	.word	0x080085c3
 8008424:	080085c3 	.word	0x080085c3
 8008428:	08008541 	.word	0x08008541
 800842c:	080085c3 	.word	0x080085c3
 8008430:	080085c3 	.word	0x080085c3
 8008434:	080085c3 	.word	0x080085c3
 8008438:	08008581 	.word	0x08008581
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f992 	bl	800876c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0208 	orr.w	r2, r2, #8
 8008456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699a      	ldr	r2, [r3, #24]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0204 	bic.w	r2, r2, #4
 8008466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6999      	ldr	r1, [r3, #24]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	691a      	ldr	r2, [r3, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	619a      	str	r2, [r3, #24]
      break;
 800847a:	e0a5      	b.n	80085c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f9e4 	bl	8008850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6999      	ldr	r1, [r3, #24]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	021a      	lsls	r2, r3, #8
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	619a      	str	r2, [r3, #24]
      break;
 80084bc:	e084      	b.n	80085c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fa3b 	bl	8008940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f042 0208 	orr.w	r2, r2, #8
 80084d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69da      	ldr	r2, [r3, #28]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0204 	bic.w	r2, r2, #4
 80084e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69d9      	ldr	r1, [r3, #28]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691a      	ldr	r2, [r3, #16]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	61da      	str	r2, [r3, #28]
      break;
 80084fc:	e064      	b.n	80085c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68b9      	ldr	r1, [r7, #8]
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fa91 	bl	8008a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69da      	ldr	r2, [r3, #28]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69da      	ldr	r2, [r3, #28]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69d9      	ldr	r1, [r3, #28]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	021a      	lsls	r2, r3, #8
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	61da      	str	r2, [r3, #28]
      break;
 800853e:	e043      	b.n	80085c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fac8 	bl	8008adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0208 	orr.w	r2, r2, #8
 800855a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0204 	bic.w	r2, r2, #4
 800856a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	691a      	ldr	r2, [r3, #16]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	430a      	orrs	r2, r1
 800857c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800857e:	e023      	b.n	80085c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68b9      	ldr	r1, [r7, #8]
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fafa 	bl	8008b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800859a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	021a      	lsls	r2, r3, #8
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	430a      	orrs	r2, r1
 80085be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085c0:	e002      	b.n	80085c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	75fb      	strb	r3, [r7, #23]
      break;
 80085c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop

080085dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a40      	ldr	r2, [pc, #256]	; (8008740 <TIM_Base_SetConfig+0x114>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d013      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864a:	d00f      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a3d      	ldr	r2, [pc, #244]	; (8008744 <TIM_Base_SetConfig+0x118>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00b      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a3c      	ldr	r2, [pc, #240]	; (8008748 <TIM_Base_SetConfig+0x11c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d007      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a3b      	ldr	r2, [pc, #236]	; (800874c <TIM_Base_SetConfig+0x120>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <TIM_Base_SetConfig+0x40>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a3a      	ldr	r2, [pc, #232]	; (8008750 <TIM_Base_SetConfig+0x124>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d108      	bne.n	800867e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a2f      	ldr	r2, [pc, #188]	; (8008740 <TIM_Base_SetConfig+0x114>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d02b      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868c:	d027      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a2c      	ldr	r2, [pc, #176]	; (8008744 <TIM_Base_SetConfig+0x118>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d023      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a2b      	ldr	r2, [pc, #172]	; (8008748 <TIM_Base_SetConfig+0x11c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d01f      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a2a      	ldr	r2, [pc, #168]	; (800874c <TIM_Base_SetConfig+0x120>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01b      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a29      	ldr	r2, [pc, #164]	; (8008750 <TIM_Base_SetConfig+0x124>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d017      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a28      	ldr	r2, [pc, #160]	; (8008754 <TIM_Base_SetConfig+0x128>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d013      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a27      	ldr	r2, [pc, #156]	; (8008758 <TIM_Base_SetConfig+0x12c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00f      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a26      	ldr	r2, [pc, #152]	; (800875c <TIM_Base_SetConfig+0x130>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00b      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a25      	ldr	r2, [pc, #148]	; (8008760 <TIM_Base_SetConfig+0x134>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d007      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a24      	ldr	r2, [pc, #144]	; (8008764 <TIM_Base_SetConfig+0x138>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d003      	beq.n	80086de <TIM_Base_SetConfig+0xb2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a23      	ldr	r2, [pc, #140]	; (8008768 <TIM_Base_SetConfig+0x13c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d108      	bne.n	80086f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a0a      	ldr	r2, [pc, #40]	; (8008740 <TIM_Base_SetConfig+0x114>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d003      	beq.n	8008724 <TIM_Base_SetConfig+0xf8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a0c      	ldr	r2, [pc, #48]	; (8008750 <TIM_Base_SetConfig+0x124>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d103      	bne.n	800872c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	615a      	str	r2, [r3, #20]
}
 8008732:	bf00      	nop
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40010000 	.word	0x40010000
 8008744:	40000400 	.word	0x40000400
 8008748:	40000800 	.word	0x40000800
 800874c:	40000c00 	.word	0x40000c00
 8008750:	40010400 	.word	0x40010400
 8008754:	40014000 	.word	0x40014000
 8008758:	40014400 	.word	0x40014400
 800875c:	40014800 	.word	0x40014800
 8008760:	40001800 	.word	0x40001800
 8008764:	40001c00 	.word	0x40001c00
 8008768:	40002000 	.word	0x40002000

0800876c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f023 0201 	bic.w	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	4b2b      	ldr	r3, [pc, #172]	; (8008844 <TIM_OC1_SetConfig+0xd8>)
 8008798:	4013      	ands	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0303 	bic.w	r3, r3, #3
 80087a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f023 0302 	bic.w	r3, r3, #2
 80087b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4313      	orrs	r3, r2
 80087be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a21      	ldr	r2, [pc, #132]	; (8008848 <TIM_OC1_SetConfig+0xdc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_OC1_SetConfig+0x64>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a20      	ldr	r2, [pc, #128]	; (800884c <TIM_OC1_SetConfig+0xe0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d10c      	bne.n	80087ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f023 0308 	bic.w	r3, r3, #8
 80087d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f023 0304 	bic.w	r3, r3, #4
 80087e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a16      	ldr	r2, [pc, #88]	; (8008848 <TIM_OC1_SetConfig+0xdc>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d003      	beq.n	80087fa <TIM_OC1_SetConfig+0x8e>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a15      	ldr	r2, [pc, #84]	; (800884c <TIM_OC1_SetConfig+0xe0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d111      	bne.n	800881e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	621a      	str	r2, [r3, #32]
}
 8008838:	bf00      	nop
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	fffeff8f 	.word	0xfffeff8f
 8008848:	40010000 	.word	0x40010000
 800884c:	40010400 	.word	0x40010400

08008850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	f023 0210 	bic.w	r2, r3, #16
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4b2e      	ldr	r3, [pc, #184]	; (8008934 <TIM_OC2_SetConfig+0xe4>)
 800887c:	4013      	ands	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f023 0320 	bic.w	r3, r3, #32
 800889a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a23      	ldr	r2, [pc, #140]	; (8008938 <TIM_OC2_SetConfig+0xe8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d003      	beq.n	80088b8 <TIM_OC2_SetConfig+0x68>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a22      	ldr	r2, [pc, #136]	; (800893c <TIM_OC2_SetConfig+0xec>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d10d      	bne.n	80088d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a18      	ldr	r2, [pc, #96]	; (8008938 <TIM_OC2_SetConfig+0xe8>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_OC2_SetConfig+0x94>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a17      	ldr	r2, [pc, #92]	; (800893c <TIM_OC2_SetConfig+0xec>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d113      	bne.n	800890c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	621a      	str	r2, [r3, #32]
}
 8008926:	bf00      	nop
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	feff8fff 	.word	0xfeff8fff
 8008938:	40010000 	.word	0x40010000
 800893c:	40010400 	.word	0x40010400

08008940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <TIM_OC3_SetConfig+0xe0>)
 800896c:	4013      	ands	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	021b      	lsls	r3, r3, #8
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	4313      	orrs	r3, r2
 8008994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a22      	ldr	r2, [pc, #136]	; (8008a24 <TIM_OC3_SetConfig+0xe4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_OC3_SetConfig+0x66>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a21      	ldr	r2, [pc, #132]	; (8008a28 <TIM_OC3_SetConfig+0xe8>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d10d      	bne.n	80089c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a17      	ldr	r2, [pc, #92]	; (8008a24 <TIM_OC3_SetConfig+0xe4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d003      	beq.n	80089d2 <TIM_OC3_SetConfig+0x92>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a16      	ldr	r2, [pc, #88]	; (8008a28 <TIM_OC3_SetConfig+0xe8>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d113      	bne.n	80089fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	621a      	str	r2, [r3, #32]
}
 8008a14:	bf00      	nop
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	fffeff8f 	.word	0xfffeff8f
 8008a24:	40010000 	.word	0x40010000
 8008a28:	40010400 	.word	0x40010400

08008a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4b1e      	ldr	r3, [pc, #120]	; (8008ad0 <TIM_OC4_SetConfig+0xa4>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	031b      	lsls	r3, r3, #12
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a13      	ldr	r2, [pc, #76]	; (8008ad4 <TIM_OC4_SetConfig+0xa8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d003      	beq.n	8008a94 <TIM_OC4_SetConfig+0x68>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a12      	ldr	r2, [pc, #72]	; (8008ad8 <TIM_OC4_SetConfig+0xac>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d109      	bne.n	8008aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	019b      	lsls	r3, r3, #6
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	621a      	str	r2, [r3, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	feff8fff 	.word	0xfeff8fff
 8008ad4:	40010000 	.word	0x40010000
 8008ad8:	40010400 	.word	0x40010400

08008adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <TIM_OC5_SetConfig+0x98>)
 8008b08:	4013      	ands	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	041b      	lsls	r3, r3, #16
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a12      	ldr	r2, [pc, #72]	; (8008b78 <TIM_OC5_SetConfig+0x9c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d003      	beq.n	8008b3a <TIM_OC5_SetConfig+0x5e>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a11      	ldr	r2, [pc, #68]	; (8008b7c <TIM_OC5_SetConfig+0xa0>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d109      	bne.n	8008b4e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	021b      	lsls	r3, r3, #8
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	621a      	str	r2, [r3, #32]
}
 8008b68:	bf00      	nop
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	fffeff8f 	.word	0xfffeff8f
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40010400 	.word	0x40010400

08008b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <TIM_OC6_SetConfig+0x9c>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	021b      	lsls	r3, r3, #8
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	051b      	lsls	r3, r3, #20
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <TIM_OC6_SetConfig+0xa0>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_OC6_SetConfig+0x60>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a12      	ldr	r2, [pc, #72]	; (8008c24 <TIM_OC6_SetConfig+0xa4>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d109      	bne.n	8008bf4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	029b      	lsls	r3, r3, #10
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	371c      	adds	r7, #28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	feff8fff 	.word	0xfeff8fff
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40010400 	.word	0x40010400

08008c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e06d      	b.n	8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a30      	ldr	r2, [pc, #192]	; (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d004      	beq.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a2f      	ldr	r2, [pc, #188]	; (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d108      	bne.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a20      	ldr	r2, [pc, #128]	; (8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d022      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb2:	d01d      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1d      	ldr	r2, [pc, #116]	; (8008d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d018      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1c      	ldr	r2, [pc, #112]	; (8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d013      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a1a      	ldr	r2, [pc, #104]	; (8008d38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d00e      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a15      	ldr	r2, [pc, #84]	; (8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d009      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a16      	ldr	r2, [pc, #88]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d004      	beq.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a15      	ldr	r2, [pc, #84]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10c      	bne.n	8008d0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40010400 	.word	0x40010400
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000800 	.word	0x40000800
 8008d38:	40000c00 	.word	0x40000c00
 8008d3c:	40014000 	.word	0x40014000
 8008d40:	40001800 	.word	0x40001800

08008d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e065      	b.n	8008e2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	041b      	lsls	r3, r3, #16
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a16      	ldr	r2, [pc, #88]	; (8008e38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d004      	beq.n	8008dee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a14      	ldr	r2, [pc, #80]	; (8008e3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d115      	bne.n	8008e1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	051b      	lsls	r3, r3, #20
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	40010000 	.word	0x40010000
 8008e3c:	40010400 	.word	0x40010400

08008e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e040      	b.n	8008f10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d106      	bne.n	8008ea4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7fa fd9e 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2224      	movs	r2, #36	; 0x24
 8008ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fd32 	bl	8009924 <UART_SetConfig>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d101      	bne.n	8008eca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e022      	b.n	8008f10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d002      	beq.n	8008ed8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 ff8a 	bl	8009dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ee6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689a      	ldr	r2, [r3, #8]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ef6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0201 	orr.w	r2, r2, #1
 8008f06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 f811 	bl	8009f30 <UART_CheckIdleState>
 8008f0e:	4603      	mov	r3, r0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08a      	sub	sp, #40	; 0x28
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d171      	bne.n	8009014 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <HAL_UART_Transmit+0x24>
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e06a      	b.n	8009016 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2221      	movs	r2, #33	; 0x21
 8008f4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f4e:	f7fa fe61 	bl	8003c14 <HAL_GetTick>
 8008f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6c:	d108      	bne.n	8008f80 <HAL_UART_Transmit+0x68>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	e003      	b.n	8008f88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f88:	e02c      	b.n	8008fe4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2200      	movs	r2, #0
 8008f92:	2180      	movs	r1, #128	; 0x80
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f001 f818 	bl	8009fca <UART_WaitOnFlagUntilTimeout>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e038      	b.n	8009016 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10b      	bne.n	8008fc2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	61bb      	str	r3, [r7, #24]
 8008fc0:	e007      	b.n	8008fd2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	781a      	ldrb	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1cc      	bne.n	8008f8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2140      	movs	r1, #64	; 0x40
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 ffe5 	bl	8009fca <UART_WaitOnFlagUntilTimeout>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e005      	b.n	8009016 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2220      	movs	r2, #32
 800900e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	e000      	b.n	8009016 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
  }
}
 8009016:	4618      	mov	r0, r3
 8009018:	3720      	adds	r7, #32
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08a      	sub	sp, #40	; 0x28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4613      	mov	r3, r2
 800902c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009032:	2b20      	cmp	r3, #32
 8009034:	d165      	bne.n	8009102 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <HAL_UART_Transmit_DMA+0x22>
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e05e      	b.n	8009104 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	88fa      	ldrh	r2, [r7, #6]
 8009058:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2221      	movs	r2, #33	; 0x21
 8009068:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906e:	2b00      	cmp	r3, #0
 8009070:	d027      	beq.n	80090c2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009076:	4a25      	ldr	r2, [pc, #148]	; (800910c <HAL_UART_Transmit_DMA+0xec>)
 8009078:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907e:	4a24      	ldr	r2, [pc, #144]	; (8009110 <HAL_UART_Transmit_DMA+0xf0>)
 8009080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009086:	4a23      	ldr	r2, [pc, #140]	; (8009114 <HAL_UART_Transmit_DMA+0xf4>)
 8009088:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908e:	2200      	movs	r2, #0
 8009090:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909a:	4619      	mov	r1, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3328      	adds	r3, #40	; 0x28
 80090a2:	461a      	mov	r2, r3
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	f7fb fdd1 	bl	8004c4c <HAL_DMA_Start_IT>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2210      	movs	r2, #16
 80090b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2220      	movs	r2, #32
 80090bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e020      	b.n	8009104 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2240      	movs	r2, #64	; 0x40
 80090c8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3308      	adds	r3, #8
 80090d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	613b      	str	r3, [r7, #16]
   return(result);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ea:	623a      	str	r2, [r7, #32]
 80090ec:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	69f9      	ldr	r1, [r7, #28]
 80090f0:	6a3a      	ldr	r2, [r7, #32]
 80090f2:	e841 2300 	strex	r3, r2, [r1]
 80090f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1e5      	bne.n	80090ca <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	e000      	b.n	8009104 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009102:	2302      	movs	r3, #2
  }
}
 8009104:	4618      	mov	r0, r3
 8009106:	3728      	adds	r7, #40	; 0x28
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	0800a3ad 	.word	0x0800a3ad
 8009110:	0800a443 	.word	0x0800a443
 8009114:	0800a5c5 	.word	0x0800a5c5

08009118 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08a      	sub	sp, #40	; 0x28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800912c:	2b20      	cmp	r3, #32
 800912e:	d132      	bne.n	8009196 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <HAL_UART_Receive_DMA+0x24>
 8009136:	88fb      	ldrh	r3, [r7, #6]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e02b      	b.n	8009198 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d018      	beq.n	8009186 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	613b      	str	r3, [r7, #16]
   return(result);
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	461a      	mov	r2, r3
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	623b      	str	r3, [r7, #32]
 8009174:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	69f9      	ldr	r1, [r7, #28]
 8009178:	6a3a      	ldr	r2, [r7, #32]
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e6      	bne.n	8009154 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009186:	88fb      	ldrh	r3, [r7, #6]
 8009188:	461a      	mov	r2, r3
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 ffe3 	bl	800a158 <UART_Start_Receive_DMA>
 8009192:	4603      	mov	r3, r0
 8009194:	e000      	b.n	8009198 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009196:	2302      	movs	r3, #2
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3728      	adds	r7, #40	; 0x28
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b090      	sub	sp, #64	; 0x40
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091b4:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b80      	cmp	r3, #128	; 0x80
 80091c2:	d139      	bne.n	8009238 <HAL_UART_DMAStop+0x98>
 80091c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c6:	2b21      	cmp	r3, #33	; 0x21
 80091c8:	d136      	bne.n	8009238 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091e0:	637b      	str	r3, [r7, #52]	; 0x34
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3308      	adds	r3, #8
 80091e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e5      	bne.n	80091ca <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009202:	2b00      	cmp	r3, #0
 8009204:	d015      	beq.n	8009232 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920a:	4618      	mov	r0, r3
 800920c:	f7fb fd7e 	bl	8004d0c <HAL_DMA_Abort>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00d      	beq.n	8009232 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	4618      	mov	r0, r3
 800921c:	f7fb ff92 	bl	8005144 <HAL_DMA_GetError>
 8009220:	4603      	mov	r3, r0
 8009222:	2b20      	cmp	r3, #32
 8009224:	d105      	bne.n	8009232 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2210      	movs	r2, #16
 800922a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e044      	b.n	80092bc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f001 f830 	bl	800a298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009242:	2b40      	cmp	r3, #64	; 0x40
 8009244:	d139      	bne.n	80092ba <HAL_UART_DMAStop+0x11a>
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	2b22      	cmp	r3, #34	; 0x22
 800924a:	d136      	bne.n	80092ba <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3308      	adds	r3, #8
 8009252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	60bb      	str	r3, [r7, #8]
   return(result);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009262:	633b      	str	r3, [r7, #48]	; 0x30
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926c:	61ba      	str	r2, [r7, #24]
 800926e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	613b      	str	r3, [r7, #16]
   return(result);
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e5      	bne.n	800924c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009284:	2b00      	cmp	r3, #0
 8009286:	d015      	beq.n	80092b4 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928c:	4618      	mov	r0, r3
 800928e:	f7fb fd3d 	bl	8004d0c <HAL_DMA_Abort>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00d      	beq.n	80092b4 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800929c:	4618      	mov	r0, r3
 800929e:	f7fb ff51 	bl	8005144 <HAL_DMA_GetError>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d105      	bne.n	80092b4 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2210      	movs	r2, #16
 80092ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e003      	b.n	80092bc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f815 	bl	800a2e4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3740      	adds	r7, #64	; 0x40
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b0ba      	sub	sp, #232	; 0xe8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80092ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80092f2:	4013      	ands	r3, r2
 80092f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80092f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d115      	bne.n	800932c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00f      	beq.n	800932c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d009      	beq.n	800932c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 82ac 	beq.w	800987a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	4798      	blx	r3
      }
      return;
 800932a:	e2a6      	b.n	800987a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800932c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8117 	beq.w	8009564 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	d106      	bne.n	8009350 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009346:	4b85      	ldr	r3, [pc, #532]	; (800955c <HAL_UART_IRQHandler+0x298>)
 8009348:	4013      	ands	r3, r2
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 810a 	beq.w	8009564 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	2b00      	cmp	r3, #0
 800935a:	d011      	beq.n	8009380 <HAL_UART_IRQHandler+0xbc>
 800935c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00b      	beq.n	8009380 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2201      	movs	r2, #1
 800936e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009376:	f043 0201 	orr.w	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d011      	beq.n	80093b0 <HAL_UART_IRQHandler+0xec>
 800938c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2202      	movs	r2, #2
 800939e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093a6:	f043 0204 	orr.w	r2, r3, #4
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d011      	beq.n	80093e0 <HAL_UART_IRQHandler+0x11c>
 80093bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00b      	beq.n	80093e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2204      	movs	r2, #4
 80093ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d6:	f043 0202 	orr.w	r2, r3, #2
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d017      	beq.n	800941c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80093ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d105      	bne.n	8009404 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80093f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2208      	movs	r2, #8
 800940a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009412:	f043 0208 	orr.w	r2, r3, #8
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800941c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009424:	2b00      	cmp	r3, #0
 8009426:	d012      	beq.n	800944e <HAL_UART_IRQHandler+0x18a>
 8009428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800942c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00c      	beq.n	800944e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800943c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009444:	f043 0220 	orr.w	r2, r3, #32
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 8212 	beq.w	800987e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800945a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b40      	cmp	r3, #64	; 0x40
 8009498:	d005      	beq.n	80094a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800949a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800949e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d04f      	beq.n	8009546 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 ff1c 	bl	800a2e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d141      	bne.n	800953e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1d9      	bne.n	80094ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800950a:	2b00      	cmp	r3, #0
 800950c:	d013      	beq.n	8009536 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009512:	4a13      	ldr	r2, [pc, #76]	; (8009560 <HAL_UART_IRQHandler+0x29c>)
 8009514:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800951a:	4618      	mov	r0, r3
 800951c:	f7fb fc66 	bl	8004dec <HAL_DMA_Abort_IT>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d017      	beq.n	8009556 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800952a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009534:	e00f      	b.n	8009556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f9d4 	bl	80098e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800953c:	e00b      	b.n	8009556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f9d0 	bl	80098e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009544:	e007      	b.n	8009556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f9cc 	bl	80098e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009554:	e193      	b.n	800987e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009556:	bf00      	nop
    return;
 8009558:	e191      	b.n	800987e <HAL_UART_IRQHandler+0x5ba>
 800955a:	bf00      	nop
 800955c:	04000120 	.word	0x04000120
 8009560:	0800a643 	.word	0x0800a643

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009568:	2b01      	cmp	r3, #1
 800956a:	f040 814c 	bne.w	8009806 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800956e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 8145 	beq.w	8009806 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800957c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 813e 	beq.w	8009806 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2210      	movs	r2, #16
 8009590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	f040 80b6 	bne.w	800970e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 8165 	beq.w	8009882 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095c2:	429a      	cmp	r2, r3
 80095c4:	f080 815d 	bcs.w	8009882 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095dc:	f000 8086 	beq.w	80096ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095ec:	e853 3f00 	ldrex	r3, [r3]
 80095f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80095f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	461a      	mov	r2, r3
 8009606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800960a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800960e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1da      	bne.n	80095e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3308      	adds	r3, #8
 8009630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800963a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800963c:	f023 0301 	bic.w	r3, r3, #1
 8009640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3308      	adds	r3, #8
 800964a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800964e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e1      	bne.n	800962a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3308      	adds	r3, #8
 8009686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800968a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800968c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e3      	bne.n	8009666 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096bc:	f023 0310 	bic.w	r3, r3, #16
 80096c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80096d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e4      	bne.n	80096ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fb fb10 	bl	8004d0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096fe:	b29b      	uxth	r3, r3
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	b29b      	uxth	r3, r3
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f8f6 	bl	80098f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800970c:	e0b9      	b.n	8009882 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800971a:	b29b      	uxth	r3, r3
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009728:	b29b      	uxth	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 80ab 	beq.w	8009886 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8009730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 80a6 	beq.w	8009886 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800974e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800975c:	647b      	str	r3, [r7, #68]	; 0x44
 800975e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800976a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e4      	bne.n	800973a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	623b      	str	r3, [r7, #32]
   return(result);
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009794:	633a      	str	r2, [r7, #48]	; 0x30
 8009796:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800979a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e3      	bne.n	8009770 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f023 0310 	bic.w	r3, r3, #16
 80097d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097de:	61fb      	str	r3, [r7, #28]
 80097e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e2:	69b9      	ldr	r1, [r7, #24]
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	617b      	str	r3, [r7, #20]
   return(result);
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e4      	bne.n	80097bc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2202      	movs	r2, #2
 80097f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f87a 	bl	80098f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009804:	e03f      	b.n	8009886 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00e      	beq.n	8009830 <HAL_UART_IRQHandler+0x56c>
 8009812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d008      	beq.n	8009830 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009826:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f871 	bl	8009910 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800982e:	e02d      	b.n	800988c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00e      	beq.n	800985a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800983c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01c      	beq.n	800988a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
    }
    return;
 8009858:	e017      	b.n	800988a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800985a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800985e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009862:	2b00      	cmp	r3, #0
 8009864:	d012      	beq.n	800988c <HAL_UART_IRQHandler+0x5c8>
 8009866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800986a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00c      	beq.n	800988c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fefb 	bl	800a66e <UART_EndTransmit_IT>
    return;
 8009878:	e008      	b.n	800988c <HAL_UART_IRQHandler+0x5c8>
      return;
 800987a:	bf00      	nop
 800987c:	e006      	b.n	800988c <HAL_UART_IRQHandler+0x5c8>
    return;
 800987e:	bf00      	nop
 8009880:	e004      	b.n	800988c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009882:	bf00      	nop
 8009884:	e002      	b.n	800988c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009886:	bf00      	nop
 8009888:	e000      	b.n	800988c <HAL_UART_IRQHandler+0x5c8>
    return;
 800988a:	bf00      	nop
  }

}
 800988c:	37e8      	adds	r7, #232	; 0xe8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop

08009894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	431a      	orrs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	431a      	orrs	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4ba6      	ldr	r3, [pc, #664]	; (8009be8 <UART_SetConfig+0x2c4>)
 8009950:	4013      	ands	r3, r2
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	6812      	ldr	r2, [r2, #0]
 8009956:	6979      	ldr	r1, [r7, #20]
 8009958:	430b      	orrs	r3, r1
 800995a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	697a      	ldr	r2, [r7, #20]
 800997e:	4313      	orrs	r3, r2
 8009980:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	430a      	orrs	r2, r1
 8009994:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a94      	ldr	r2, [pc, #592]	; (8009bec <UART_SetConfig+0x2c8>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d120      	bne.n	80099e2 <UART_SetConfig+0xbe>
 80099a0:	4b93      	ldr	r3, [pc, #588]	; (8009bf0 <UART_SetConfig+0x2cc>)
 80099a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d816      	bhi.n	80099dc <UART_SetConfig+0xb8>
 80099ae:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <UART_SetConfig+0x90>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	080099c5 	.word	0x080099c5
 80099b8:	080099d1 	.word	0x080099d1
 80099bc:	080099cb 	.word	0x080099cb
 80099c0:	080099d7 	.word	0x080099d7
 80099c4:	2301      	movs	r3, #1
 80099c6:	77fb      	strb	r3, [r7, #31]
 80099c8:	e150      	b.n	8009c6c <UART_SetConfig+0x348>
 80099ca:	2302      	movs	r3, #2
 80099cc:	77fb      	strb	r3, [r7, #31]
 80099ce:	e14d      	b.n	8009c6c <UART_SetConfig+0x348>
 80099d0:	2304      	movs	r3, #4
 80099d2:	77fb      	strb	r3, [r7, #31]
 80099d4:	e14a      	b.n	8009c6c <UART_SetConfig+0x348>
 80099d6:	2308      	movs	r3, #8
 80099d8:	77fb      	strb	r3, [r7, #31]
 80099da:	e147      	b.n	8009c6c <UART_SetConfig+0x348>
 80099dc:	2310      	movs	r3, #16
 80099de:	77fb      	strb	r3, [r7, #31]
 80099e0:	e144      	b.n	8009c6c <UART_SetConfig+0x348>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a83      	ldr	r2, [pc, #524]	; (8009bf4 <UART_SetConfig+0x2d0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d132      	bne.n	8009a52 <UART_SetConfig+0x12e>
 80099ec:	4b80      	ldr	r3, [pc, #512]	; (8009bf0 <UART_SetConfig+0x2cc>)
 80099ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099f2:	f003 030c 	and.w	r3, r3, #12
 80099f6:	2b0c      	cmp	r3, #12
 80099f8:	d828      	bhi.n	8009a4c <UART_SetConfig+0x128>
 80099fa:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <UART_SetConfig+0xdc>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a35 	.word	0x08009a35
 8009a04:	08009a4d 	.word	0x08009a4d
 8009a08:	08009a4d 	.word	0x08009a4d
 8009a0c:	08009a4d 	.word	0x08009a4d
 8009a10:	08009a41 	.word	0x08009a41
 8009a14:	08009a4d 	.word	0x08009a4d
 8009a18:	08009a4d 	.word	0x08009a4d
 8009a1c:	08009a4d 	.word	0x08009a4d
 8009a20:	08009a3b 	.word	0x08009a3b
 8009a24:	08009a4d 	.word	0x08009a4d
 8009a28:	08009a4d 	.word	0x08009a4d
 8009a2c:	08009a4d 	.word	0x08009a4d
 8009a30:	08009a47 	.word	0x08009a47
 8009a34:	2300      	movs	r3, #0
 8009a36:	77fb      	strb	r3, [r7, #31]
 8009a38:	e118      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	77fb      	strb	r3, [r7, #31]
 8009a3e:	e115      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a40:	2304      	movs	r3, #4
 8009a42:	77fb      	strb	r3, [r7, #31]
 8009a44:	e112      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a46:	2308      	movs	r3, #8
 8009a48:	77fb      	strb	r3, [r7, #31]
 8009a4a:	e10f      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a4c:	2310      	movs	r3, #16
 8009a4e:	77fb      	strb	r3, [r7, #31]
 8009a50:	e10c      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a68      	ldr	r2, [pc, #416]	; (8009bf8 <UART_SetConfig+0x2d4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d120      	bne.n	8009a9e <UART_SetConfig+0x17a>
 8009a5c:	4b64      	ldr	r3, [pc, #400]	; (8009bf0 <UART_SetConfig+0x2cc>)
 8009a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a66:	2b30      	cmp	r3, #48	; 0x30
 8009a68:	d013      	beq.n	8009a92 <UART_SetConfig+0x16e>
 8009a6a:	2b30      	cmp	r3, #48	; 0x30
 8009a6c:	d814      	bhi.n	8009a98 <UART_SetConfig+0x174>
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	d009      	beq.n	8009a86 <UART_SetConfig+0x162>
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d810      	bhi.n	8009a98 <UART_SetConfig+0x174>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <UART_SetConfig+0x15c>
 8009a7a:	2b10      	cmp	r3, #16
 8009a7c:	d006      	beq.n	8009a8c <UART_SetConfig+0x168>
 8009a7e:	e00b      	b.n	8009a98 <UART_SetConfig+0x174>
 8009a80:	2300      	movs	r3, #0
 8009a82:	77fb      	strb	r3, [r7, #31]
 8009a84:	e0f2      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a86:	2302      	movs	r3, #2
 8009a88:	77fb      	strb	r3, [r7, #31]
 8009a8a:	e0ef      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	77fb      	strb	r3, [r7, #31]
 8009a90:	e0ec      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a92:	2308      	movs	r3, #8
 8009a94:	77fb      	strb	r3, [r7, #31]
 8009a96:	e0e9      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a98:	2310      	movs	r3, #16
 8009a9a:	77fb      	strb	r3, [r7, #31]
 8009a9c:	e0e6      	b.n	8009c6c <UART_SetConfig+0x348>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a56      	ldr	r2, [pc, #344]	; (8009bfc <UART_SetConfig+0x2d8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d120      	bne.n	8009aea <UART_SetConfig+0x1c6>
 8009aa8:	4b51      	ldr	r3, [pc, #324]	; (8009bf0 <UART_SetConfig+0x2cc>)
 8009aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8009ab4:	d013      	beq.n	8009ade <UART_SetConfig+0x1ba>
 8009ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8009ab8:	d814      	bhi.n	8009ae4 <UART_SetConfig+0x1c0>
 8009aba:	2b80      	cmp	r3, #128	; 0x80
 8009abc:	d009      	beq.n	8009ad2 <UART_SetConfig+0x1ae>
 8009abe:	2b80      	cmp	r3, #128	; 0x80
 8009ac0:	d810      	bhi.n	8009ae4 <UART_SetConfig+0x1c0>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <UART_SetConfig+0x1a8>
 8009ac6:	2b40      	cmp	r3, #64	; 0x40
 8009ac8:	d006      	beq.n	8009ad8 <UART_SetConfig+0x1b4>
 8009aca:	e00b      	b.n	8009ae4 <UART_SetConfig+0x1c0>
 8009acc:	2300      	movs	r3, #0
 8009ace:	77fb      	strb	r3, [r7, #31]
 8009ad0:	e0cc      	b.n	8009c6c <UART_SetConfig+0x348>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	77fb      	strb	r3, [r7, #31]
 8009ad6:	e0c9      	b.n	8009c6c <UART_SetConfig+0x348>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	77fb      	strb	r3, [r7, #31]
 8009adc:	e0c6      	b.n	8009c6c <UART_SetConfig+0x348>
 8009ade:	2308      	movs	r3, #8
 8009ae0:	77fb      	strb	r3, [r7, #31]
 8009ae2:	e0c3      	b.n	8009c6c <UART_SetConfig+0x348>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	77fb      	strb	r3, [r7, #31]
 8009ae8:	e0c0      	b.n	8009c6c <UART_SetConfig+0x348>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a44      	ldr	r2, [pc, #272]	; (8009c00 <UART_SetConfig+0x2dc>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d125      	bne.n	8009b40 <UART_SetConfig+0x21c>
 8009af4:	4b3e      	ldr	r3, [pc, #248]	; (8009bf0 <UART_SetConfig+0x2cc>)
 8009af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b02:	d017      	beq.n	8009b34 <UART_SetConfig+0x210>
 8009b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b08:	d817      	bhi.n	8009b3a <UART_SetConfig+0x216>
 8009b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b0e:	d00b      	beq.n	8009b28 <UART_SetConfig+0x204>
 8009b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b14:	d811      	bhi.n	8009b3a <UART_SetConfig+0x216>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <UART_SetConfig+0x1fe>
 8009b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b1e:	d006      	beq.n	8009b2e <UART_SetConfig+0x20a>
 8009b20:	e00b      	b.n	8009b3a <UART_SetConfig+0x216>
 8009b22:	2300      	movs	r3, #0
 8009b24:	77fb      	strb	r3, [r7, #31]
 8009b26:	e0a1      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b28:	2302      	movs	r3, #2
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	e09e      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b2e:	2304      	movs	r3, #4
 8009b30:	77fb      	strb	r3, [r7, #31]
 8009b32:	e09b      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b34:	2308      	movs	r3, #8
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e098      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b3a:	2310      	movs	r3, #16
 8009b3c:	77fb      	strb	r3, [r7, #31]
 8009b3e:	e095      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a2f      	ldr	r2, [pc, #188]	; (8009c04 <UART_SetConfig+0x2e0>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d125      	bne.n	8009b96 <UART_SetConfig+0x272>
 8009b4a:	4b29      	ldr	r3, [pc, #164]	; (8009bf0 <UART_SetConfig+0x2cc>)
 8009b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b58:	d017      	beq.n	8009b8a <UART_SetConfig+0x266>
 8009b5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b5e:	d817      	bhi.n	8009b90 <UART_SetConfig+0x26c>
 8009b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b64:	d00b      	beq.n	8009b7e <UART_SetConfig+0x25a>
 8009b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b6a:	d811      	bhi.n	8009b90 <UART_SetConfig+0x26c>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <UART_SetConfig+0x254>
 8009b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b74:	d006      	beq.n	8009b84 <UART_SetConfig+0x260>
 8009b76:	e00b      	b.n	8009b90 <UART_SetConfig+0x26c>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e076      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	77fb      	strb	r3, [r7, #31]
 8009b82:	e073      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b84:	2304      	movs	r3, #4
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e070      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b8a:	2308      	movs	r3, #8
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e06d      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b90:	2310      	movs	r3, #16
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e06a      	b.n	8009c6c <UART_SetConfig+0x348>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a1b      	ldr	r2, [pc, #108]	; (8009c08 <UART_SetConfig+0x2e4>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d138      	bne.n	8009c12 <UART_SetConfig+0x2ee>
 8009ba0:	4b13      	ldr	r3, [pc, #76]	; (8009bf0 <UART_SetConfig+0x2cc>)
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bae:	d017      	beq.n	8009be0 <UART_SetConfig+0x2bc>
 8009bb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bb4:	d82a      	bhi.n	8009c0c <UART_SetConfig+0x2e8>
 8009bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bba:	d00b      	beq.n	8009bd4 <UART_SetConfig+0x2b0>
 8009bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc0:	d824      	bhi.n	8009c0c <UART_SetConfig+0x2e8>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <UART_SetConfig+0x2aa>
 8009bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bca:	d006      	beq.n	8009bda <UART_SetConfig+0x2b6>
 8009bcc:	e01e      	b.n	8009c0c <UART_SetConfig+0x2e8>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	77fb      	strb	r3, [r7, #31]
 8009bd2:	e04b      	b.n	8009c6c <UART_SetConfig+0x348>
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	77fb      	strb	r3, [r7, #31]
 8009bd8:	e048      	b.n	8009c6c <UART_SetConfig+0x348>
 8009bda:	2304      	movs	r3, #4
 8009bdc:	77fb      	strb	r3, [r7, #31]
 8009bde:	e045      	b.n	8009c6c <UART_SetConfig+0x348>
 8009be0:	2308      	movs	r3, #8
 8009be2:	77fb      	strb	r3, [r7, #31]
 8009be4:	e042      	b.n	8009c6c <UART_SetConfig+0x348>
 8009be6:	bf00      	nop
 8009be8:	efff69f3 	.word	0xefff69f3
 8009bec:	40011000 	.word	0x40011000
 8009bf0:	40023800 	.word	0x40023800
 8009bf4:	40004400 	.word	0x40004400
 8009bf8:	40004800 	.word	0x40004800
 8009bfc:	40004c00 	.word	0x40004c00
 8009c00:	40005000 	.word	0x40005000
 8009c04:	40011400 	.word	0x40011400
 8009c08:	40007800 	.word	0x40007800
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	77fb      	strb	r3, [r7, #31]
 8009c10:	e02c      	b.n	8009c6c <UART_SetConfig+0x348>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a72      	ldr	r2, [pc, #456]	; (8009de0 <UART_SetConfig+0x4bc>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d125      	bne.n	8009c68 <UART_SetConfig+0x344>
 8009c1c:	4b71      	ldr	r3, [pc, #452]	; (8009de4 <UART_SetConfig+0x4c0>)
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c2a:	d017      	beq.n	8009c5c <UART_SetConfig+0x338>
 8009c2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c30:	d817      	bhi.n	8009c62 <UART_SetConfig+0x33e>
 8009c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c36:	d00b      	beq.n	8009c50 <UART_SetConfig+0x32c>
 8009c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c3c:	d811      	bhi.n	8009c62 <UART_SetConfig+0x33e>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <UART_SetConfig+0x326>
 8009c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c46:	d006      	beq.n	8009c56 <UART_SetConfig+0x332>
 8009c48:	e00b      	b.n	8009c62 <UART_SetConfig+0x33e>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	77fb      	strb	r3, [r7, #31]
 8009c4e:	e00d      	b.n	8009c6c <UART_SetConfig+0x348>
 8009c50:	2302      	movs	r3, #2
 8009c52:	77fb      	strb	r3, [r7, #31]
 8009c54:	e00a      	b.n	8009c6c <UART_SetConfig+0x348>
 8009c56:	2304      	movs	r3, #4
 8009c58:	77fb      	strb	r3, [r7, #31]
 8009c5a:	e007      	b.n	8009c6c <UART_SetConfig+0x348>
 8009c5c:	2308      	movs	r3, #8
 8009c5e:	77fb      	strb	r3, [r7, #31]
 8009c60:	e004      	b.n	8009c6c <UART_SetConfig+0x348>
 8009c62:	2310      	movs	r3, #16
 8009c64:	77fb      	strb	r3, [r7, #31]
 8009c66:	e001      	b.n	8009c6c <UART_SetConfig+0x348>
 8009c68:	2310      	movs	r3, #16
 8009c6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c74:	d15b      	bne.n	8009d2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009c76:	7ffb      	ldrb	r3, [r7, #31]
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d828      	bhi.n	8009cce <UART_SetConfig+0x3aa>
 8009c7c:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <UART_SetConfig+0x360>)
 8009c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c82:	bf00      	nop
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	08009ccf 	.word	0x08009ccf
 8009c94:	08009cbf 	.word	0x08009cbf
 8009c98:	08009ccf 	.word	0x08009ccf
 8009c9c:	08009ccf 	.word	0x08009ccf
 8009ca0:	08009ccf 	.word	0x08009ccf
 8009ca4:	08009cc7 	.word	0x08009cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ca8:	f7fd fcb2 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 8009cac:	61b8      	str	r0, [r7, #24]
        break;
 8009cae:	e013      	b.n	8009cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cb0:	f7fd fcc2 	bl	8007638 <HAL_RCC_GetPCLK2Freq>
 8009cb4:	61b8      	str	r0, [r7, #24]
        break;
 8009cb6:	e00f      	b.n	8009cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cb8:	4b4b      	ldr	r3, [pc, #300]	; (8009de8 <UART_SetConfig+0x4c4>)
 8009cba:	61bb      	str	r3, [r7, #24]
        break;
 8009cbc:	e00c      	b.n	8009cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cbe:	f7fd fb95 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 8009cc2:	61b8      	str	r0, [r7, #24]
        break;
 8009cc4:	e008      	b.n	8009cd8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cca:	61bb      	str	r3, [r7, #24]
        break;
 8009ccc:	e004      	b.n	8009cd8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	77bb      	strb	r3, [r7, #30]
        break;
 8009cd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d074      	beq.n	8009dc8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	005a      	lsls	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	441a      	add	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2b0f      	cmp	r3, #15
 8009cf8:	d916      	bls.n	8009d28 <UART_SetConfig+0x404>
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d00:	d212      	bcs.n	8009d28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f023 030f 	bic.w	r3, r3, #15
 8009d0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	085b      	lsrs	r3, r3, #1
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	89fb      	ldrh	r3, [r7, #14]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	89fa      	ldrh	r2, [r7, #14]
 8009d24:	60da      	str	r2, [r3, #12]
 8009d26:	e04f      	b.n	8009dc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	77bb      	strb	r3, [r7, #30]
 8009d2c:	e04c      	b.n	8009dc8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d2e:	7ffb      	ldrb	r3, [r7, #31]
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d828      	bhi.n	8009d86 <UART_SetConfig+0x462>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <UART_SetConfig+0x418>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d69 	.word	0x08009d69
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	08009d87 	.word	0x08009d87
 8009d4c:	08009d77 	.word	0x08009d77
 8009d50:	08009d87 	.word	0x08009d87
 8009d54:	08009d87 	.word	0x08009d87
 8009d58:	08009d87 	.word	0x08009d87
 8009d5c:	08009d7f 	.word	0x08009d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d60:	f7fd fc56 	bl	8007610 <HAL_RCC_GetPCLK1Freq>
 8009d64:	61b8      	str	r0, [r7, #24]
        break;
 8009d66:	e013      	b.n	8009d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d68:	f7fd fc66 	bl	8007638 <HAL_RCC_GetPCLK2Freq>
 8009d6c:	61b8      	str	r0, [r7, #24]
        break;
 8009d6e:	e00f      	b.n	8009d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d70:	4b1d      	ldr	r3, [pc, #116]	; (8009de8 <UART_SetConfig+0x4c4>)
 8009d72:	61bb      	str	r3, [r7, #24]
        break;
 8009d74:	e00c      	b.n	8009d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d76:	f7fd fb39 	bl	80073ec <HAL_RCC_GetSysClockFreq>
 8009d7a:	61b8      	str	r0, [r7, #24]
        break;
 8009d7c:	e008      	b.n	8009d90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d82:	61bb      	str	r3, [r7, #24]
        break;
 8009d84:	e004      	b.n	8009d90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	77bb      	strb	r3, [r7, #30]
        break;
 8009d8e:	bf00      	nop
    }

    if (pclk != 0U)
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d018      	beq.n	8009dc8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	085a      	lsrs	r2, r3, #1
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	441a      	add	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b0f      	cmp	r3, #15
 8009dae:	d909      	bls.n	8009dc4 <UART_SetConfig+0x4a0>
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db6:	d205      	bcs.n	8009dc4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60da      	str	r2, [r3, #12]
 8009dc2:	e001      	b.n	8009dc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009dd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3720      	adds	r7, #32
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	40007c00 	.word	0x40007c00
 8009de4:	40023800 	.word	0x40023800
 8009de8:	00f42400 	.word	0x00f42400

08009dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00a      	beq.n	8009e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	f003 0308 	and.w	r3, r3, #8
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	f003 0310 	and.w	r3, r3, #16
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00a      	beq.n	8009e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00a      	beq.n	8009ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01a      	beq.n	8009f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eea:	d10a      	bne.n	8009f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	605a      	str	r2, [r3, #4]
  }
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af02      	add	r7, sp, #8
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f40:	f7f9 fe68 	bl	8003c14 <HAL_GetTick>
 8009f44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b08      	cmp	r3, #8
 8009f52:	d10e      	bne.n	8009f72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f831 	bl	8009fca <UART_WaitOnFlagUntilTimeout>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e027      	b.n	8009fc2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b04      	cmp	r3, #4
 8009f7e:	d10e      	bne.n	8009f9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f81b 	bl	8009fca <UART_WaitOnFlagUntilTimeout>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e011      	b.n	8009fc2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b09c      	sub	sp, #112	; 0x70
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	603b      	str	r3, [r7, #0]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fda:	e0a7      	b.n	800a12c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fe2:	f000 80a3 	beq.w	800a12c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe6:	f7f9 fe15 	bl	8003c14 <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d302      	bcc.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x32>
 8009ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d13f      	bne.n	800a07c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a00c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a010:	667b      	str	r3, [r7, #100]	; 0x64
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a01a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a01c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a020:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e6      	bne.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a038:	e853 3f00 	ldrex	r3, [r3]
 800a03c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	f023 0301 	bic.w	r3, r3, #1
 800a044:	663b      	str	r3, [r7, #96]	; 0x60
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a04e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a050:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e5      	bne.n	800a02e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2220      	movs	r2, #32
 800a066:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e068      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0304 	and.w	r3, r3, #4
 800a086:	2b00      	cmp	r3, #0
 800a088:	d050      	beq.n	800a12c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a098:	d148      	bne.n	800a12c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	e853 3f00 	ldrex	r3, [r3]
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0c4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1e6      	bne.n	800a0a4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3308      	adds	r3, #8
 800a0dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	e853 3f00 	ldrex	r3, [r3]
 800a0e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f023 0301 	bic.w	r3, r3, #1
 800a0ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0f6:	623a      	str	r2, [r7, #32]
 800a0f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fa:	69f9      	ldr	r1, [r7, #28]
 800a0fc:	6a3a      	ldr	r2, [r7, #32]
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	61bb      	str	r3, [r7, #24]
   return(result);
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e5      	bne.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a128:	2303      	movs	r3, #3
 800a12a:	e010      	b.n	800a14e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69da      	ldr	r2, [r3, #28]
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4013      	ands	r3, r2
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	429a      	cmp	r2, r3
 800a13a:	bf0c      	ite	eq
 800a13c:	2301      	moveq	r3, #1
 800a13e:	2300      	movne	r3, #0
 800a140:	b2db      	uxtb	r3, r3
 800a142:	461a      	mov	r2, r3
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	429a      	cmp	r2, r3
 800a148:	f43f af48 	beq.w	8009fdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3770      	adds	r7, #112	; 0x70
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b096      	sub	sp, #88	; 0x58
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	4613      	mov	r3, r2
 800a164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	88fa      	ldrh	r2, [r7, #6]
 800a170:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2222      	movs	r2, #34	; 0x22
 800a180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d028      	beq.n	800a1de <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a190:	4a3e      	ldr	r2, [pc, #248]	; (800a28c <UART_Start_Receive_DMA+0x134>)
 800a192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a198:	4a3d      	ldr	r2, [pc, #244]	; (800a290 <UART_Start_Receive_DMA+0x138>)
 800a19a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a0:	4a3c      	ldr	r2, [pc, #240]	; (800a294 <UART_Start_Receive_DMA+0x13c>)
 800a1a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3324      	adds	r3, #36	; 0x24
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1bc:	461a      	mov	r2, r3
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	f7fa fd44 	bl	8004c4c <HAL_DMA_Start_IT>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d009      	beq.n	800a1de <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2210      	movs	r2, #16
 800a1ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e051      	b.n	800a282 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d018      	beq.n	800a218 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ee:	e853 3f00 	ldrex	r3, [r3]
 800a1f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	461a      	mov	r2, r3
 800a202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a204:	64bb      	str	r3, [r7, #72]	; 0x48
 800a206:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a20a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e6      	bne.n	800a1e6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3308      	adds	r3, #8
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	e853 3f00 	ldrex	r3, [r3]
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	f043 0301 	orr.w	r3, r3, #1
 800a22e:	653b      	str	r3, [r7, #80]	; 0x50
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3308      	adds	r3, #8
 800a236:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a238:	637a      	str	r2, [r7, #52]	; 0x34
 800a23a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a23e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e5      	bne.n	800a218 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3308      	adds	r3, #8
 800a252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	e853 3f00 	ldrex	r3, [r3]
 800a25a:	613b      	str	r3, [r7, #16]
   return(result);
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a262:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3308      	adds	r3, #8
 800a26a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a26c:	623a      	str	r2, [r7, #32]
 800a26e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a270:	69f9      	ldr	r1, [r7, #28]
 800a272:	6a3a      	ldr	r2, [r7, #32]
 800a274:	e841 2300 	strex	r3, r2, [r1]
 800a278:	61bb      	str	r3, [r7, #24]
   return(result);
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1e5      	bne.n	800a24c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3758      	adds	r7, #88	; 0x58
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	0800a45f 	.word	0x0800a45f
 800a290:	0800a587 	.word	0x0800a587
 800a294:	0800a5c5 	.word	0x0800a5c5

0800a298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a298:	b480      	push	{r7}
 800a29a:	b089      	sub	sp, #36	; 0x24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a2b4:	61fb      	str	r3, [r7, #28]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	61bb      	str	r3, [r7, #24]
 800a2c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	6979      	ldr	r1, [r7, #20]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e6      	bne.n	800a2a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a2d8:	bf00      	nop
 800a2da:	3724      	adds	r7, #36	; 0x24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b095      	sub	sp, #84	; 0x54
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a300:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a30a:	643b      	str	r3, [r7, #64]	; 0x40
 800a30c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e6      	bne.n	800a2ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	3308      	adds	r3, #8
 800a324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	e853 3f00 	ldrex	r3, [r3]
 800a32c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	f023 0301 	bic.w	r3, r3, #1
 800a334:	64bb      	str	r3, [r7, #72]	; 0x48
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3308      	adds	r3, #8
 800a33c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a33e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1e5      	bne.n	800a31e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a356:	2b01      	cmp	r3, #1
 800a358:	d118      	bne.n	800a38c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	60bb      	str	r3, [r7, #8]
   return(result);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f023 0310 	bic.w	r3, r3, #16
 800a36e:	647b      	str	r3, [r7, #68]	; 0x44
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a378:	61bb      	str	r3, [r7, #24]
 800a37a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	6979      	ldr	r1, [r7, #20]
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	613b      	str	r3, [r7, #16]
   return(result);
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e6      	bne.n	800a35a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2220      	movs	r2, #32
 800a390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a3a0:	bf00      	nop
 800a3a2:	3754      	adds	r7, #84	; 0x54
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b090      	sub	sp, #64	; 0x40
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c2:	d037      	beq.n	800a434 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	e853 3f00 	ldrex	r3, [r3]
 800a3da:	623b      	str	r3, [r7, #32]
   return(result);
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ec:	633a      	str	r2, [r7, #48]	; 0x30
 800a3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f4:	e841 2300 	strex	r3, r2, [r1]
 800a3f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1e5      	bne.n	800a3cc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
 800a416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	461a      	mov	r2, r3
 800a41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41e:	61fb      	str	r3, [r7, #28]
 800a420:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	69b9      	ldr	r1, [r7, #24]
 800a424:	69fa      	ldr	r2, [r7, #28]
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	617b      	str	r3, [r7, #20]
   return(result);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e6      	bne.n	800a400 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a432:	e002      	b.n	800a43a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a434:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a436:	f7ff fa2d 	bl	8009894 <HAL_UART_TxCpltCallback>
}
 800a43a:	bf00      	nop
 800a43c:	3740      	adds	r7, #64	; 0x40
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b084      	sub	sp, #16
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff fa29 	bl	80098a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b09c      	sub	sp, #112	; 0x70
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a474:	d071      	beq.n	800a55a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a478:	2200      	movs	r2, #0
 800a47a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a47e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a492:	66bb      	str	r3, [r7, #104]	; 0x68
 800a494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a49c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a49e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e6      	bne.n	800a47e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	e853 3f00 	ldrex	r3, [r3]
 800a4be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c2:	f023 0301 	bic.w	r3, r3, #1
 800a4c6:	667b      	str	r3, [r7, #100]	; 0x64
 800a4c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4d0:	647a      	str	r2, [r7, #68]	; 0x44
 800a4d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4d8:	e841 2300 	strex	r3, r2, [r1]
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e5      	bne.n	800a4b0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	e853 3f00 	ldrex	r3, [r3]
 800a4f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4fa:	663b      	str	r3, [r7, #96]	; 0x60
 800a4fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3308      	adds	r3, #8
 800a502:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a504:	633a      	str	r2, [r7, #48]	; 0x30
 800a506:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a50a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50c:	e841 2300 	strex	r3, r2, [r1]
 800a510:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e5      	bne.n	800a4e4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a51a:	2220      	movs	r2, #32
 800a51c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a524:	2b01      	cmp	r3, #1
 800a526:	d118      	bne.n	800a55a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	60fb      	str	r3, [r7, #12]
   return(result);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f023 0310 	bic.w	r3, r3, #16
 800a53c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	69b9      	ldr	r1, [r7, #24]
 800a54c:	69fa      	ldr	r2, [r7, #28]
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	617b      	str	r3, [r7, #20]
   return(result);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e6      	bne.n	800a528 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55c:	2200      	movs	r2, #0
 800a55e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a564:	2b01      	cmp	r3, #1
 800a566:	d107      	bne.n	800a578 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a56e:	4619      	mov	r1, r3
 800a570:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a572:	f7ff f9c1 	bl	80098f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a576:	e002      	b.n	800a57e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a578:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a57a:	f7ff f99f 	bl	80098bc <HAL_UART_RxCpltCallback>
}
 800a57e:	bf00      	nop
 800a580:	3770      	adds	r7, #112	; 0x70
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a592:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2201      	movs	r2, #1
 800a598:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d109      	bne.n	800a5b6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a5a8:	085b      	lsrs	r3, r3, #1
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f7ff f9a2 	bl	80098f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5b4:	e002      	b.n	800a5bc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7ff f98a 	bl	80098d0 <HAL_UART_RxHalfCpltCallback>
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ea:	2b80      	cmp	r3, #128	; 0x80
 800a5ec:	d109      	bne.n	800a602 <UART_DMAError+0x3e>
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b21      	cmp	r3, #33	; 0x21
 800a5f2:	d106      	bne.n	800a602 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a5fc:	6978      	ldr	r0, [r7, #20]
 800a5fe:	f7ff fe4b 	bl	800a298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60c:	2b40      	cmp	r3, #64	; 0x40
 800a60e:	d109      	bne.n	800a624 <UART_DMAError+0x60>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b22      	cmp	r3, #34	; 0x22
 800a614:	d106      	bne.n	800a624 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a61e:	6978      	ldr	r0, [r7, #20]
 800a620:	f7ff fe60 	bl	800a2e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a62a:	f043 0210 	orr.w	r2, r3, #16
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a634:	6978      	ldr	r0, [r7, #20]
 800a636:	f7ff f955 	bl	80098e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a63a:	bf00      	nop
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff f93f 	bl	80098e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a666:	bf00      	nop
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b088      	sub	sp, #32
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	e853 3f00 	ldrex	r3, [r3]
 800a682:	60bb      	str	r3, [r7, #8]
   return(result);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a68a:	61fb      	str	r3, [r7, #28]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	61bb      	str	r3, [r7, #24]
 800a696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a698:	6979      	ldr	r1, [r7, #20]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	e841 2300 	strex	r3, r2, [r1]
 800a6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e6      	bne.n	800a676 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff f8ed 	bl	8009894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6ba:	bf00      	nop
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
	...

0800a6c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	f107 001c 	add.w	r0, r7, #28
 800a6d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d120      	bne.n	800a71e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68da      	ldr	r2, [r3, #12]
 800a6ec:	4b20      	ldr	r3, [pc, #128]	; (800a770 <USB_CoreInit+0xac>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a702:	2b01      	cmp	r3, #1
 800a704:	d105      	bne.n	800a712 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 fbee 	bl	800bef4 <USB_CoreReset>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]
 800a71c:	e010      	b.n	800a740 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f001 fbe2 	bl	800bef4 <USB_CoreReset>
 800a730:	4603      	mov	r3, r0
 800a732:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	2b01      	cmp	r3, #1
 800a744:	d10b      	bne.n	800a75e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f043 0206 	orr.w	r2, r3, #6
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f043 0220 	orr.w	r2, r3, #32
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a76a:	b004      	add	sp, #16
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	ffbdffbf 	.word	0xffbdffbf

0800a774 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	4613      	mov	r3, r2
 800a780:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a782:	79fb      	ldrb	r3, [r7, #7]
 800a784:	2b02      	cmp	r3, #2
 800a786:	d165      	bne.n	800a854 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4a41      	ldr	r2, [pc, #260]	; (800a890 <USB_SetTurnaroundTime+0x11c>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d906      	bls.n	800a79e <USB_SetTurnaroundTime+0x2a>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	4a40      	ldr	r2, [pc, #256]	; (800a894 <USB_SetTurnaroundTime+0x120>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d202      	bcs.n	800a79e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a798:	230f      	movs	r3, #15
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	e062      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	4a3c      	ldr	r2, [pc, #240]	; (800a894 <USB_SetTurnaroundTime+0x120>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d306      	bcc.n	800a7b4 <USB_SetTurnaroundTime+0x40>
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4a3b      	ldr	r2, [pc, #236]	; (800a898 <USB_SetTurnaroundTime+0x124>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d202      	bcs.n	800a7b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a7ae:	230e      	movs	r3, #14
 800a7b0:	617b      	str	r3, [r7, #20]
 800a7b2:	e057      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4a38      	ldr	r2, [pc, #224]	; (800a898 <USB_SetTurnaroundTime+0x124>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d306      	bcc.n	800a7ca <USB_SetTurnaroundTime+0x56>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4a37      	ldr	r2, [pc, #220]	; (800a89c <USB_SetTurnaroundTime+0x128>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d202      	bcs.n	800a7ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a7c4:	230d      	movs	r3, #13
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	e04c      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	4a33      	ldr	r2, [pc, #204]	; (800a89c <USB_SetTurnaroundTime+0x128>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d306      	bcc.n	800a7e0 <USB_SetTurnaroundTime+0x6c>
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	4a32      	ldr	r2, [pc, #200]	; (800a8a0 <USB_SetTurnaroundTime+0x12c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d802      	bhi.n	800a7e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a7da:	230c      	movs	r3, #12
 800a7dc:	617b      	str	r3, [r7, #20]
 800a7de:	e041      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	4a2f      	ldr	r2, [pc, #188]	; (800a8a0 <USB_SetTurnaroundTime+0x12c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d906      	bls.n	800a7f6 <USB_SetTurnaroundTime+0x82>
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	4a2e      	ldr	r2, [pc, #184]	; (800a8a4 <USB_SetTurnaroundTime+0x130>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d802      	bhi.n	800a7f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a7f0:	230b      	movs	r3, #11
 800a7f2:	617b      	str	r3, [r7, #20]
 800a7f4:	e036      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	4a2a      	ldr	r2, [pc, #168]	; (800a8a4 <USB_SetTurnaroundTime+0x130>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d906      	bls.n	800a80c <USB_SetTurnaroundTime+0x98>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	4a29      	ldr	r2, [pc, #164]	; (800a8a8 <USB_SetTurnaroundTime+0x134>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d802      	bhi.n	800a80c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a806:	230a      	movs	r3, #10
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e02b      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	4a26      	ldr	r2, [pc, #152]	; (800a8a8 <USB_SetTurnaroundTime+0x134>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d906      	bls.n	800a822 <USB_SetTurnaroundTime+0xae>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4a25      	ldr	r2, [pc, #148]	; (800a8ac <USB_SetTurnaroundTime+0x138>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d202      	bcs.n	800a822 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a81c:	2309      	movs	r3, #9
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	e020      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	4a21      	ldr	r2, [pc, #132]	; (800a8ac <USB_SetTurnaroundTime+0x138>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d306      	bcc.n	800a838 <USB_SetTurnaroundTime+0xc4>
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	4a20      	ldr	r2, [pc, #128]	; (800a8b0 <USB_SetTurnaroundTime+0x13c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d802      	bhi.n	800a838 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a832:	2308      	movs	r3, #8
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	e015      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4a1d      	ldr	r2, [pc, #116]	; (800a8b0 <USB_SetTurnaroundTime+0x13c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d906      	bls.n	800a84e <USB_SetTurnaroundTime+0xda>
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4a1c      	ldr	r2, [pc, #112]	; (800a8b4 <USB_SetTurnaroundTime+0x140>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d202      	bcs.n	800a84e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a848:	2307      	movs	r3, #7
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e00a      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a84e:	2306      	movs	r3, #6
 800a850:	617b      	str	r3, [r7, #20]
 800a852:	e007      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a85a:	2309      	movs	r3, #9
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	e001      	b.n	800a864 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a860:	2309      	movs	r3, #9
 800a862:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	68da      	ldr	r2, [r3, #12]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	029b      	lsls	r3, r3, #10
 800a878:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a87c:	431a      	orrs	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	371c      	adds	r7, #28
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	00d8acbf 	.word	0x00d8acbf
 800a894:	00e4e1c0 	.word	0x00e4e1c0
 800a898:	00f42400 	.word	0x00f42400
 800a89c:	01067380 	.word	0x01067380
 800a8a0:	011a499f 	.word	0x011a499f
 800a8a4:	01312cff 	.word	0x01312cff
 800a8a8:	014ca43f 	.word	0x014ca43f
 800a8ac:	016e3600 	.word	0x016e3600
 800a8b0:	01a6ab1f 	.word	0x01a6ab1f
 800a8b4:	01e84800 	.word	0x01e84800

0800a8b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f043 0201 	orr.w	r2, r3, #1
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f023 0201 	bic.w	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a918:	78fb      	ldrb	r3, [r7, #3]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d115      	bne.n	800a94a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a92a:	2001      	movs	r0, #1
 800a92c:	f7f9 f97e 	bl	8003c2c <HAL_Delay>
      ms++;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f001 fa4b 	bl	800bdd2 <USB_GetMode>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d01e      	beq.n	800a980 <USB_SetCurrentMode+0x84>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b31      	cmp	r3, #49	; 0x31
 800a946:	d9f0      	bls.n	800a92a <USB_SetCurrentMode+0x2e>
 800a948:	e01a      	b.n	800a980 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d115      	bne.n	800a97c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a95c:	2001      	movs	r0, #1
 800a95e:	f7f9 f965 	bl	8003c2c <HAL_Delay>
      ms++;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f001 fa32 	bl	800bdd2 <USB_GetMode>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <USB_SetCurrentMode+0x84>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b31      	cmp	r3, #49	; 0x31
 800a978:	d9f0      	bls.n	800a95c <USB_SetCurrentMode+0x60>
 800a97a:	e001      	b.n	800a980 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e005      	b.n	800a98c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b32      	cmp	r3, #50	; 0x32
 800a984:	d101      	bne.n	800a98a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a994:	b084      	sub	sp, #16
 800a996:	b580      	push	{r7, lr}
 800a998:	b086      	sub	sp, #24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	613b      	str	r3, [r7, #16]
 800a9b2:	e009      	b.n	800a9c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	3340      	adds	r3, #64	; 0x40
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	613b      	str	r3, [r7, #16]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b0e      	cmp	r3, #14
 800a9cc:	d9f2      	bls.n	800a9b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d11c      	bne.n	800aa0e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	e005      	b.n	800aa1a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa20:	461a      	mov	r2, r3
 800aa22:	2300      	movs	r3, #0
 800aa24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa34:	461a      	mov	r2, r3
 800aa36:	680b      	ldr	r3, [r1, #0]
 800aa38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d10c      	bne.n	800aa5a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d104      	bne.n	800aa50 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aa46:	2100      	movs	r1, #0
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f965 	bl	800ad18 <USB_SetDevSpeed>
 800aa4e:	e008      	b.n	800aa62 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aa50:	2101      	movs	r1, #1
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f960 	bl	800ad18 <USB_SetDevSpeed>
 800aa58:	e003      	b.n	800aa62 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa5a:	2103      	movs	r1, #3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f95b 	bl	800ad18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa62:	2110      	movs	r1, #16
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f8f3 	bl	800ac50 <USB_FlushTxFifo>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f91f 	bl	800acb8 <USB_FlushRxFifo>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa96:	461a      	mov	r2, r3
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	613b      	str	r3, [r7, #16]
 800aaac:	e043      	b.n	800ab36 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aac4:	d118      	bne.n	800aaf8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10a      	bne.n	800aae2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	015a      	lsls	r2, r3, #5
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4413      	add	r3, r2
 800aad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad8:	461a      	mov	r2, r3
 800aada:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	e013      	b.n	800ab0a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	e008      	b.n	800ab0a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	015a      	lsls	r2, r3, #5
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab04:	461a      	mov	r2, r3
 800ab06:	2300      	movs	r3, #0
 800ab08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab16:	461a      	mov	r2, r3
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	3301      	adds	r3, #1
 800ab34:	613b      	str	r3, [r7, #16]
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d3b7      	bcc.n	800aaae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab3e:	2300      	movs	r3, #0
 800ab40:	613b      	str	r3, [r7, #16]
 800ab42:	e043      	b.n	800abcc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab5a:	d118      	bne.n	800ab8e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	015a      	lsls	r2, r3, #5
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	e013      	b.n	800aba0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab84:	461a      	mov	r2, r3
 800ab86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	e008      	b.n	800aba0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	015a      	lsls	r2, r3, #5
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abac:	461a      	mov	r2, r3
 800abae:	2300      	movs	r3, #0
 800abb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abbe:	461a      	mov	r2, r3
 800abc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	3301      	adds	r3, #1
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d3b7      	bcc.n	800ab44 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abe6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800abf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d105      	bne.n	800ac08 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	f043 0210 	orr.w	r2, r3, #16
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	699a      	ldr	r2, [r3, #24]
 800ac0c:	4b0e      	ldr	r3, [pc, #56]	; (800ac48 <USB_DevInit+0x2b4>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d005      	beq.n	800ac26 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	f043 0208 	orr.w	r2, r3, #8
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d105      	bne.n	800ac38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	699a      	ldr	r2, [r3, #24]
 800ac30:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <USB_DevInit+0x2b8>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac44:	b004      	add	sp, #16
 800ac46:	4770      	bx	lr
 800ac48:	803c3800 	.word	0x803c3800
 800ac4c:	40000004 	.word	0x40000004

0800ac50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4a13      	ldr	r2, [pc, #76]	; (800acb4 <USB_FlushTxFifo+0x64>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d901      	bls.n	800ac70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e01b      	b.n	800aca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	daf2      	bge.n	800ac5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	019b      	lsls	r3, r3, #6
 800ac80:	f043 0220 	orr.w	r2, r3, #32
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4a08      	ldr	r2, [pc, #32]	; (800acb4 <USB_FlushTxFifo+0x64>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d901      	bls.n	800ac9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac96:	2303      	movs	r3, #3
 800ac98:	e006      	b.n	800aca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f003 0320 	and.w	r3, r3, #32
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	d0f0      	beq.n	800ac88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	00030d40 	.word	0x00030d40

0800acb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4a11      	ldr	r2, [pc, #68]	; (800ad14 <USB_FlushRxFifo+0x5c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d901      	bls.n	800acd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e018      	b.n	800ad08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	daf2      	bge.n	800acc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2210      	movs	r2, #16
 800ace6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3301      	adds	r3, #1
 800acec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	4a08      	ldr	r2, [pc, #32]	; (800ad14 <USB_FlushRxFifo+0x5c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d901      	bls.n	800acfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e006      	b.n	800ad08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	f003 0310 	and.w	r3, r3, #16
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d0f0      	beq.n	800ace8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	00030d40 	.word	0x00030d40

0800ad18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b087      	sub	sp, #28
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f003 0306 	and.w	r3, r3, #6
 800ad62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	75fb      	strb	r3, [r7, #23]
 800ad6e:	e00a      	b.n	800ad86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d002      	beq.n	800ad7c <USB_GetDevSpeed+0x32>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b06      	cmp	r3, #6
 800ad7a:	d102      	bne.n	800ad82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	75fb      	strb	r3, [r7, #23]
 800ad80:	e001      	b.n	800ad86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ad82:	230f      	movs	r3, #15
 800ad84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	371c      	adds	r7, #28
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d139      	bne.n	800ae24 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb6:	69da      	ldr	r2, [r3, #28]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 030f 	and.w	r3, r3, #15
 800adc0:	2101      	movs	r1, #1
 800adc2:	fa01 f303 	lsl.w	r3, r1, r3
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	68f9      	ldr	r1, [r7, #12]
 800adca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adce:	4313      	orrs	r3, r2
 800add0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d153      	bne.n	800ae90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	791b      	ldrb	r3, [r3, #4]
 800ae02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	059b      	lsls	r3, r3, #22
 800ae0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae0c:	431a      	orrs	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	0159      	lsls	r1, r3, #5
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	440b      	add	r3, r1
 800ae16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4b20      	ldr	r3, [pc, #128]	; (800aea0 <USB_ActivateEndpoint+0x10c>)
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	600b      	str	r3, [r1, #0]
 800ae22:	e035      	b.n	800ae90 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2a:	69da      	ldr	r2, [r3, #28]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	f003 030f 	and.w	r3, r3, #15
 800ae34:	2101      	movs	r1, #1
 800ae36:	fa01 f303 	lsl.w	r3, r1, r3
 800ae3a:	041b      	lsls	r3, r3, #16
 800ae3c:	68f9      	ldr	r1, [r7, #12]
 800ae3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae42:	4313      	orrs	r3, r2
 800ae44:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d119      	bne.n	800ae90 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	791b      	ldrb	r3, [r3, #4]
 800ae76:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	0159      	lsls	r1, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	440b      	add	r3, r1
 800ae84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <USB_ActivateEndpoint+0x10c>)
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	10008000 	.word	0x10008000

0800aea4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	785b      	ldrb	r3, [r3, #1]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d161      	bne.n	800af84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aed6:	d11f      	bne.n	800af18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	0151      	lsls	r1, r2, #5
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	440a      	add	r2, r1
 800aeee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aef6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	0151      	lsls	r1, r2, #5
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	440a      	add	r2, r1
 800af0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	f003 030f 	and.w	r3, r3, #15
 800af28:	2101      	movs	r1, #1
 800af2a:	fa01 f303 	lsl.w	r3, r1, r3
 800af2e:	b29b      	uxth	r3, r3
 800af30:	43db      	mvns	r3, r3
 800af32:	68f9      	ldr	r1, [r7, #12]
 800af34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af38:	4013      	ands	r3, r2
 800af3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af42:	69da      	ldr	r2, [r3, #28]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	f003 030f 	and.w	r3, r3, #15
 800af4c:	2101      	movs	r1, #1
 800af4e:	fa01 f303 	lsl.w	r3, r1, r3
 800af52:	b29b      	uxth	r3, r3
 800af54:	43db      	mvns	r3, r3
 800af56:	68f9      	ldr	r1, [r7, #12]
 800af58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af5c:	4013      	ands	r3, r2
 800af5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	0159      	lsls	r1, r3, #5
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	440b      	add	r3, r1
 800af76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7a:	4619      	mov	r1, r3
 800af7c:	4b35      	ldr	r3, [pc, #212]	; (800b054 <USB_DeactivateEndpoint+0x1b0>)
 800af7e:	4013      	ands	r3, r2
 800af80:	600b      	str	r3, [r1, #0]
 800af82:	e060      	b.n	800b046 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af9a:	d11f      	bne.n	800afdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	015a      	lsls	r2, r3, #5
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	0151      	lsls	r1, r2, #5
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	440a      	add	r2, r1
 800afb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	0151      	lsls	r1, r2, #5
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	440a      	add	r2, r1
 800afd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	f003 030f 	and.w	r3, r3, #15
 800afec:	2101      	movs	r1, #1
 800afee:	fa01 f303 	lsl.w	r3, r1, r3
 800aff2:	041b      	lsls	r3, r3, #16
 800aff4:	43db      	mvns	r3, r3
 800aff6:	68f9      	ldr	r1, [r7, #12]
 800aff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800affc:	4013      	ands	r3, r2
 800affe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	f003 030f 	and.w	r3, r3, #15
 800b010:	2101      	movs	r1, #1
 800b012:	fa01 f303 	lsl.w	r3, r1, r3
 800b016:	041b      	lsls	r3, r3, #16
 800b018:	43db      	mvns	r3, r3
 800b01a:	68f9      	ldr	r1, [r7, #12]
 800b01c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b020:	4013      	ands	r3, r2
 800b022:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	0159      	lsls	r1, r3, #5
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	440b      	add	r3, r1
 800b03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03e:	4619      	mov	r1, r3
 800b040:	4b05      	ldr	r3, [pc, #20]	; (800b058 <USB_DeactivateEndpoint+0x1b4>)
 800b042:	4013      	ands	r3, r2
 800b044:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3714      	adds	r7, #20
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	ec337800 	.word	0xec337800
 800b058:	eff37800 	.word	0xeff37800

0800b05c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b08a      	sub	sp, #40	; 0x28
 800b060:	af02      	add	r7, sp, #8
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4613      	mov	r3, r2
 800b068:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	785b      	ldrb	r3, [r3, #1]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	f040 8163 	bne.w	800b344 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d132      	bne.n	800b0ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	0159      	lsls	r1, r3, #5
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	440b      	add	r3, r1
 800b09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	4ba5      	ldr	r3, [pc, #660]	; (800b338 <USB_EPStartXfer+0x2dc>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	0151      	lsls	r1, r2, #5
 800b0ba:	69fa      	ldr	r2, [r7, #28]
 800b0bc:	440a      	add	r2, r1
 800b0be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	015a      	lsls	r2, r3, #5
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	0159      	lsls	r1, r3, #5
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	440b      	add	r3, r1
 800b0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4b95      	ldr	r3, [pc, #596]	; (800b33c <USB_EPStartXfer+0x2e0>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	610b      	str	r3, [r1, #16]
 800b0ea:	e074      	b.n	800b1d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f8:	691a      	ldr	r2, [r3, #16]
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	0159      	lsls	r1, r3, #5
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	440b      	add	r3, r1
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	4619      	mov	r1, r3
 800b108:	4b8c      	ldr	r3, [pc, #560]	; (800b33c <USB_EPStartXfer+0x2e0>)
 800b10a:	4013      	ands	r3, r2
 800b10c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	4413      	add	r3, r2
 800b116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11a:	691a      	ldr	r2, [r3, #16]
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	0159      	lsls	r1, r3, #5
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	440b      	add	r3, r1
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	4619      	mov	r1, r3
 800b12a:	4b83      	ldr	r3, [pc, #524]	; (800b338 <USB_EPStartXfer+0x2dc>)
 800b12c:	4013      	ands	r3, r2
 800b12e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	6999      	ldr	r1, [r3, #24]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	440b      	add	r3, r1
 800b148:	1e59      	subs	r1, r3, #1
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b152:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b154:	4b7a      	ldr	r3, [pc, #488]	; (800b340 <USB_EPStartXfer+0x2e4>)
 800b156:	400b      	ands	r3, r1
 800b158:	69b9      	ldr	r1, [r7, #24]
 800b15a:	0148      	lsls	r0, r1, #5
 800b15c:	69f9      	ldr	r1, [r7, #28]
 800b15e:	4401      	add	r1, r0
 800b160:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b164:	4313      	orrs	r3, r2
 800b166:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b174:	691a      	ldr	r2, [r3, #16]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b17e:	69b9      	ldr	r1, [r7, #24]
 800b180:	0148      	lsls	r0, r1, #5
 800b182:	69f9      	ldr	r1, [r7, #28]
 800b184:	4401      	add	r1, r0
 800b186:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b18a:	4313      	orrs	r3, r2
 800b18c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	791b      	ldrb	r3, [r3, #4]
 800b192:	2b01      	cmp	r3, #1
 800b194:	d11f      	bne.n	800b1d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	69ba      	ldr	r2, [r7, #24]
 800b1a6:	0151      	lsls	r1, r2, #5
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	440a      	add	r2, r1
 800b1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b1b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	015a      	lsls	r2, r3, #5
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	0151      	lsls	r1, r2, #5
 800b1c8:	69fa      	ldr	r2, [r7, #28]
 800b1ca:	440a      	add	r2, r1
 800b1cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d14b      	bne.n	800b274 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d009      	beq.n	800b1f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	791b      	ldrb	r3, [r3, #4]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d128      	bne.n	800b252 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d110      	bne.n	800b232 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	0151      	lsls	r1, r2, #5
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	440a      	add	r2, r1
 800b226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b22a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b22e:	6013      	str	r3, [r2, #0]
 800b230:	e00f      	b.n	800b252 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	0151      	lsls	r1, r2, #5
 800b244:	69fa      	ldr	r2, [r7, #28]
 800b246:	440a      	add	r2, r1
 800b248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b24c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b250:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	015a      	lsls	r2, r3, #5
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	0151      	lsls	r1, r2, #5
 800b264:	69fa      	ldr	r2, [r7, #28]
 800b266:	440a      	add	r2, r1
 800b268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b26c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	e137      	b.n	800b4e4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	0151      	lsls	r1, r2, #5
 800b286:	69fa      	ldr	r2, [r7, #28]
 800b288:	440a      	add	r2, r1
 800b28a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b28e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b292:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	791b      	ldrb	r3, [r3, #4]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d015      	beq.n	800b2c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 811f 	beq.w	800b4e4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	f003 030f 	and.w	r3, r3, #15
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b2bc:	69f9      	ldr	r1, [r7, #28]
 800b2be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	634b      	str	r3, [r1, #52]	; 0x34
 800b2c6:	e10d      	b.n	800b4e4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d110      	bne.n	800b2fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	0151      	lsls	r1, r2, #5
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	440a      	add	r2, r1
 800b2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	e00f      	b.n	800b31a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	4413      	add	r3, r2
 800b302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	0151      	lsls	r1, r2, #5
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	440a      	add	r2, r1
 800b310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b318:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	6919      	ldr	r1, [r3, #16]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	781a      	ldrb	r2, [r3, #0]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	b298      	uxth	r0, r3
 800b328:	79fb      	ldrb	r3, [r7, #7]
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	4603      	mov	r3, r0
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f000 faea 	bl	800b908 <USB_WritePacket>
 800b334:	e0d6      	b.n	800b4e4 <USB_EPStartXfer+0x488>
 800b336:	bf00      	nop
 800b338:	e007ffff 	.word	0xe007ffff
 800b33c:	fff80000 	.word	0xfff80000
 800b340:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b350:	691a      	ldr	r2, [r3, #16]
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	0159      	lsls	r1, r3, #5
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	440b      	add	r3, r1
 800b35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b35e:	4619      	mov	r1, r3
 800b360:	4b63      	ldr	r3, [pc, #396]	; (800b4f0 <USB_EPStartXfer+0x494>)
 800b362:	4013      	ands	r3, r2
 800b364:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b372:	691a      	ldr	r2, [r3, #16]
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	0159      	lsls	r1, r3, #5
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	440b      	add	r3, r1
 800b37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b380:	4619      	mov	r1, r3
 800b382:	4b5c      	ldr	r3, [pc, #368]	; (800b4f4 <USB_EPStartXfer+0x498>)
 800b384:	4013      	ands	r3, r2
 800b386:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d123      	bne.n	800b3d8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39c:	691a      	ldr	r2, [r3, #16]
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a6:	69b9      	ldr	r1, [r7, #24]
 800b3a8:	0148      	lsls	r0, r1, #5
 800b3aa:	69f9      	ldr	r1, [r7, #28]
 800b3ac:	4401      	add	r1, r0
 800b3ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	0151      	lsls	r1, r2, #5
 800b3c8:	69fa      	ldr	r2, [r7, #28]
 800b3ca:	440a      	add	r2, r1
 800b3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3d4:	6113      	str	r3, [r2, #16]
 800b3d6:	e037      	b.n	800b448 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	699a      	ldr	r2, [r3, #24]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	1e5a      	subs	r2, r3, #1
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	8afa      	ldrh	r2, [r7, #22]
 800b3f4:	fb03 f202 	mul.w	r2, r3, r2
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b408:	691a      	ldr	r2, [r3, #16]
 800b40a:	8afb      	ldrh	r3, [r7, #22]
 800b40c:	04d9      	lsls	r1, r3, #19
 800b40e:	4b3a      	ldr	r3, [pc, #232]	; (800b4f8 <USB_EPStartXfer+0x49c>)
 800b410:	400b      	ands	r3, r1
 800b412:	69b9      	ldr	r1, [r7, #24]
 800b414:	0148      	lsls	r0, r1, #5
 800b416:	69f9      	ldr	r1, [r7, #28]
 800b418:	4401      	add	r1, r0
 800b41a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b41e:	4313      	orrs	r3, r2
 800b420:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42e:	691a      	ldr	r2, [r3, #16]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	69db      	ldr	r3, [r3, #28]
 800b434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b438:	69b9      	ldr	r1, [r7, #24]
 800b43a:	0148      	lsls	r0, r1, #5
 800b43c:	69f9      	ldr	r1, [r7, #28]
 800b43e:	4401      	add	r1, r0
 800b440:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b444:	4313      	orrs	r3, r2
 800b446:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d10d      	bne.n	800b46a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d009      	beq.n	800b46a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6919      	ldr	r1, [r3, #16]
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	015a      	lsls	r2, r3, #5
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	4413      	add	r3, r2
 800b462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b466:	460a      	mov	r2, r1
 800b468:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	791b      	ldrb	r3, [r3, #4]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d128      	bne.n	800b4c4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d110      	bne.n	800b4a4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	69ba      	ldr	r2, [r7, #24]
 800b492:	0151      	lsls	r1, r2, #5
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	440a      	add	r2, r1
 800b498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b49c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4a0:	6013      	str	r3, [r2, #0]
 800b4a2:	e00f      	b.n	800b4c4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	015a      	lsls	r2, r3, #5
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	0151      	lsls	r1, r2, #5
 800b4d6:	69fa      	ldr	r2, [r7, #28]
 800b4d8:	440a      	add	r2, r1
 800b4da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3720      	adds	r7, #32
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	fff80000 	.word	0xfff80000
 800b4f4:	e007ffff 	.word	0xe007ffff
 800b4f8:	1ff80000 	.word	0x1ff80000

0800b4fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	4613      	mov	r3, r2
 800b508:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	785b      	ldrb	r3, [r3, #1]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	f040 80ce 	bne.w	800b6ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d132      	bne.n	800b58c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b532:	691a      	ldr	r2, [r3, #16]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	0159      	lsls	r1, r3, #5
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	440b      	add	r3, r1
 800b53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b540:	4619      	mov	r1, r3
 800b542:	4b9a      	ldr	r3, [pc, #616]	; (800b7ac <USB_EP0StartXfer+0x2b0>)
 800b544:	4013      	ands	r3, r2
 800b546:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	0151      	lsls	r1, r2, #5
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	440a      	add	r2, r1
 800b55e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b574:	691a      	ldr	r2, [r3, #16]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	0159      	lsls	r1, r3, #5
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	440b      	add	r3, r1
 800b57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b582:	4619      	mov	r1, r3
 800b584:	4b8a      	ldr	r3, [pc, #552]	; (800b7b0 <USB_EP0StartXfer+0x2b4>)
 800b586:	4013      	ands	r3, r2
 800b588:	610b      	str	r3, [r1, #16]
 800b58a:	e04e      	b.n	800b62a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b598:	691a      	ldr	r2, [r3, #16]
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	0159      	lsls	r1, r3, #5
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	440b      	add	r3, r1
 800b5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4b81      	ldr	r3, [pc, #516]	; (800b7b0 <USB_EP0StartXfer+0x2b4>)
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	015a      	lsls	r2, r3, #5
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ba:	691a      	ldr	r2, [r3, #16]
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	0159      	lsls	r1, r3, #5
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	440b      	add	r3, r1
 800b5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4b78      	ldr	r3, [pc, #480]	; (800b7ac <USB_EP0StartXfer+0x2b0>)
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d903      	bls.n	800b5e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	0151      	lsls	r1, r2, #5
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	440a      	add	r2, r1
 800b5fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b602:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	015a      	lsls	r2, r3, #5
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b610:	691a      	ldr	r2, [r3, #16]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b61a:	6939      	ldr	r1, [r7, #16]
 800b61c:	0148      	lsls	r0, r1, #5
 800b61e:	6979      	ldr	r1, [r7, #20]
 800b620:	4401      	add	r1, r0
 800b622:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b626:	4313      	orrs	r3, r2
 800b628:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b62a:	79fb      	ldrb	r3, [r7, #7]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d11e      	bne.n	800b66e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d009      	beq.n	800b64c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b644:	461a      	mov	r2, r3
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	695b      	ldr	r3, [r3, #20]
 800b64a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	015a      	lsls	r2, r3, #5
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	4413      	add	r3, r2
 800b654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	0151      	lsls	r1, r2, #5
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	440a      	add	r2, r1
 800b662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b666:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	e097      	b.n	800b79e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b68c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	f000 8083 	beq.w	800b79e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f003 030f 	and.w	r3, r3, #15
 800b6a8:	2101      	movs	r1, #1
 800b6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ae:	6979      	ldr	r1, [r7, #20]
 800b6b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	634b      	str	r3, [r1, #52]	; 0x34
 800b6b8:	e071      	b.n	800b79e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c6:	691a      	ldr	r2, [r3, #16]
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	0159      	lsls	r1, r3, #5
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	440b      	add	r3, r1
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4b36      	ldr	r3, [pc, #216]	; (800b7b0 <USB_EP0StartXfer+0x2b4>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e8:	691a      	ldr	r2, [r3, #16]
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	0159      	lsls	r1, r3, #5
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	440b      	add	r3, r1
 800b6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	4b2c      	ldr	r3, [pc, #176]	; (800b7ac <USB_EP0StartXfer+0x2b0>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	68da      	ldr	r2, [r3, #12]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	015a      	lsls	r2, r3, #5
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	4413      	add	r3, r2
 800b71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	0151      	lsls	r1, r2, #5
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	440a      	add	r2, r1
 800b72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b742:	691a      	ldr	r2, [r3, #16]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b74c:	6939      	ldr	r1, [r7, #16]
 800b74e:	0148      	lsls	r0, r1, #5
 800b750:	6979      	ldr	r1, [r7, #20]
 800b752:	4401      	add	r1, r0
 800b754:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b758:	4313      	orrs	r3, r2
 800b75a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d10d      	bne.n	800b77e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d009      	beq.n	800b77e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	6919      	ldr	r1, [r3, #16]
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	015a      	lsls	r2, r3, #5
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	4413      	add	r3, r2
 800b776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77a:	460a      	mov	r2, r1
 800b77c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	0151      	lsls	r1, r2, #5
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	440a      	add	r2, r1
 800b794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b79c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	371c      	adds	r7, #28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	e007ffff 	.word	0xe007ffff
 800b7b0:	fff80000 	.word	0xfff80000

0800b7b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	785b      	ldrb	r3, [r3, #1]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d14a      	bne.n	800b868 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7ea:	f040 8086 	bne.w	800b8fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	7812      	ldrb	r2, [r2, #0]
 800b802:	0151      	lsls	r1, r2, #5
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	440a      	add	r2, r1
 800b808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b80c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b810:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	7812      	ldrb	r2, [r2, #0]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b834:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3301      	adds	r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b842:	4293      	cmp	r3, r2
 800b844:	d902      	bls.n	800b84c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	75fb      	strb	r3, [r7, #23]
          break;
 800b84a:	e056      	b.n	800b8fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	015a      	lsls	r2, r3, #5
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	4413      	add	r3, r2
 800b856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b864:	d0e7      	beq.n	800b836 <USB_EPStopXfer+0x82>
 800b866:	e048      	b.n	800b8fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	4413      	add	r3, r2
 800b872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b880:	d13b      	bne.n	800b8fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	7812      	ldrb	r2, [r2, #0]
 800b896:	0151      	lsls	r1, r2, #5
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	440a      	add	r2, r1
 800b89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b8a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	7812      	ldrb	r2, [r2, #0]
 800b8ba:	0151      	lsls	r1, r2, #5
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	440a      	add	r2, r1
 800b8c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d902      	bls.n	800b8e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b8de:	e00c      	b.n	800b8fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8f8:	d0e7      	beq.n	800b8ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	371c      	adds	r7, #28
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b908:	b480      	push	{r7}
 800b90a:	b089      	sub	sp, #36	; 0x24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	4611      	mov	r1, r2
 800b914:	461a      	mov	r2, r3
 800b916:	460b      	mov	r3, r1
 800b918:	71fb      	strb	r3, [r7, #7]
 800b91a:	4613      	mov	r3, r2
 800b91c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d123      	bne.n	800b976 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b92e:	88bb      	ldrh	r3, [r7, #4]
 800b930:	3303      	adds	r3, #3
 800b932:	089b      	lsrs	r3, r3, #2
 800b934:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b936:	2300      	movs	r3, #0
 800b938:	61bb      	str	r3, [r7, #24]
 800b93a:	e018      	b.n	800b96e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b93c:	79fb      	ldrb	r3, [r7, #7]
 800b93e:	031a      	lsls	r2, r3, #12
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	4413      	add	r3, r2
 800b944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b948:	461a      	mov	r2, r3
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	3301      	adds	r3, #1
 800b954:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	3301      	adds	r3, #1
 800b95a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	3301      	adds	r3, #1
 800b960:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	3301      	adds	r3, #1
 800b966:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	3301      	adds	r3, #1
 800b96c:	61bb      	str	r3, [r7, #24]
 800b96e:	69ba      	ldr	r2, [r7, #24]
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	429a      	cmp	r2, r3
 800b974:	d3e2      	bcc.n	800b93c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3724      	adds	r7, #36	; 0x24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b984:	b480      	push	{r7}
 800b986:	b08b      	sub	sp, #44	; 0x2c
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b99a:	88fb      	ldrh	r3, [r7, #6]
 800b99c:	089b      	lsrs	r3, r3, #2
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b9a2:	88fb      	ldrh	r3, [r7, #6]
 800b9a4:	f003 0303 	and.w	r3, r3, #3
 800b9a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	623b      	str	r3, [r7, #32]
 800b9ae:	e014      	b.n	800b9da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	3301      	adds	r3, #1
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	623b      	str	r3, [r7, #32]
 800b9da:	6a3a      	ldr	r2, [r7, #32]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d3e6      	bcc.n	800b9b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b9e2:	8bfb      	ldrh	r3, [r7, #30]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01e      	beq.n	800ba26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	f107 0310 	add.w	r3, r7, #16
 800b9f8:	6812      	ldr	r2, [r2, #0]
 800b9fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	fa22 f303 	lsr.w	r3, r2, r3
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	701a      	strb	r2, [r3, #0]
      i++;
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
 800ba10:	3301      	adds	r3, #1
 800ba12:	623b      	str	r3, [r7, #32]
      pDest++;
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	3301      	adds	r3, #1
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ba1a:	8bfb      	ldrh	r3, [r7, #30]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba20:	8bfb      	ldrh	r3, [r7, #30]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1ea      	bne.n	800b9fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	372c      	adds	r7, #44	; 0x2c
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d12c      	bne.n	800baaa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	db12      	blt.n	800ba88 <USB_EPSetStall+0x54>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00f      	beq.n	800ba88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	0151      	lsls	r1, r2, #5
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	440a      	add	r2, r1
 800ba7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800baa6:	6013      	str	r3, [r2, #0]
 800baa8:	e02b      	b.n	800bb02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	015a      	lsls	r2, r3, #5
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	4413      	add	r3, r2
 800bab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	db12      	blt.n	800bae2 <USB_EPSetStall+0xae>
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00f      	beq.n	800bae2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	0151      	lsls	r1, r2, #5
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	440a      	add	r2, r1
 800bad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800badc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bae0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	0151      	lsls	r1, r2, #5
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	440a      	add	r2, r1
 800baf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bafc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d128      	bne.n	800bb7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	0151      	lsls	r1, r2, #5
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	440a      	add	r2, r1
 800bb42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	791b      	ldrb	r3, [r3, #4]
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d003      	beq.n	800bb5c <USB_EPClearStall+0x4c>
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	791b      	ldrb	r3, [r3, #4]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d138      	bne.n	800bbce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	0151      	lsls	r1, r2, #5
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	440a      	add	r2, r1
 800bb72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	e027      	b.n	800bbce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	015a      	lsls	r2, r3, #5
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	4413      	add	r3, r2
 800bb86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	0151      	lsls	r1, r2, #5
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	440a      	add	r2, r1
 800bb94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	791b      	ldrb	r3, [r3, #4]
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d003      	beq.n	800bbae <USB_EPClearStall+0x9e>
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	791b      	ldrb	r3, [r3, #4]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d10f      	bne.n	800bbce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	0151      	lsls	r1, r2, #5
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	440a      	add	r2, r1
 800bbc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbcc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	78fb      	ldrb	r3, [r7, #3]
 800bc0a:	011b      	lsls	r3, r3, #4
 800bc0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bc10:	68f9      	ldr	r1, [r7, #12]
 800bc12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc16:	4313      	orrs	r3, r2
 800bc18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc42:	f023 0303 	bic.w	r3, r3, #3
 800bc46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc56:	f023 0302 	bic.w	r3, r3, #2
 800bc5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3714      	adds	r7, #20
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b085      	sub	sp, #20
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc84:	f023 0303 	bic.w	r3, r3, #3
 800bc88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc98:	f043 0302 	orr.w	r3, r3, #2
 800bc9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3714      	adds	r7, #20
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b085      	sub	sp, #20
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	0c1b      	lsrs	r3, r3, #16
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b085      	sub	sp, #20
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd18:	699b      	ldr	r3, [r3, #24]
 800bd1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	4013      	ands	r3, r2
 800bd28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	b29b      	uxth	r3, r3
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
 800bd42:	460b      	mov	r3, r1
 800bd44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	015a      	lsls	r2, r3, #5
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	4413      	add	r3, r2
 800bd52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	4013      	ands	r3, r2
 800bd66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd68:	68bb      	ldr	r3, [r7, #8]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b087      	sub	sp, #28
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	460b      	mov	r3, r1
 800bd80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bd9a:	78fb      	ldrb	r3, [r7, #3]
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	fa22 f303 	lsr.w	r3, r2, r3
 800bda6:	01db      	lsls	r3, r3, #7
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	371c      	adds	r7, #28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b083      	sub	sp, #12
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	f003 0301 	and.w	r3, r3, #1
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
	...

0800bdf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0a:	4619      	mov	r1, r3
 800be0c:	4b09      	ldr	r3, [pc, #36]	; (800be34 <USB_ActivateSetup+0x44>)
 800be0e:	4013      	ands	r3, r2
 800be10:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be26:	2300      	movs	r3, #0
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	fffff800 	.word	0xfffff800

0800be38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800be38:	b480      	push	{r7}
 800be3a:	b087      	sub	sp, #28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	460b      	mov	r3, r1
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	333c      	adds	r3, #60	; 0x3c
 800be4e:	3304      	adds	r3, #4
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	4a26      	ldr	r2, [pc, #152]	; (800bef0 <USB_EP0_OutStart+0xb8>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d90a      	bls.n	800be72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be6c:	d101      	bne.n	800be72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	e037      	b.n	800bee2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be78:	461a      	mov	r2, r3
 800be7a:	2300      	movs	r3, #0
 800be7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	697a      	ldr	r2, [r7, #20]
 800be9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bea0:	f043 0318 	orr.w	r3, r3, #24
 800bea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800beb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d10f      	bne.n	800bee0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec6:	461a      	mov	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	4f54300a 	.word	0x4f54300a

0800bef4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800befc:	2300      	movs	r3, #0
 800befe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	3301      	adds	r3, #1
 800bf04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	4a13      	ldr	r2, [pc, #76]	; (800bf58 <USB_CoreReset+0x64>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d901      	bls.n	800bf12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e01b      	b.n	800bf4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	daf2      	bge.n	800bf00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	f043 0201 	orr.w	r2, r3, #1
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4a09      	ldr	r2, [pc, #36]	; (800bf58 <USB_CoreReset+0x64>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d901      	bls.n	800bf3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e006      	b.n	800bf4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d0f0      	beq.n	800bf2a <USB_CoreReset+0x36>

  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	00030d40 	.word	0x00030d40

0800bf5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf6c:	f013 fac6 	bl	801f4fc <malloc>
 800bf70:	4603      	mov	r3, r0
 800bf72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d109      	bne.n	800bf8e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	32b0      	adds	r2, #176	; 0xb0
 800bf84:	2100      	movs	r1, #0
 800bf86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	e0d4      	b.n	800c138 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bf8e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bf92:	2100      	movs	r1, #0
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f014 fe95 	bl	8020cc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	32b0      	adds	r2, #176	; 0xb0
 800bfa4:	68f9      	ldr	r1, [r7, #12]
 800bfa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	32b0      	adds	r2, #176	; 0xb0
 800bfb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	7c1b      	ldrb	r3, [r3, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d138      	bne.n	800c038 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfc6:	4b5e      	ldr	r3, [pc, #376]	; (800c140 <USBD_CDC_Init+0x1e4>)
 800bfc8:	7819      	ldrb	r1, [r3, #0]
 800bfca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfce:	2202      	movs	r2, #2
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f005 f928 	bl	8011226 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bfd6:	4b5a      	ldr	r3, [pc, #360]	; (800c140 <USBD_CDC_Init+0x1e4>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	f003 020f 	and.w	r2, r3, #15
 800bfde:	6879      	ldr	r1, [r7, #4]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	3324      	adds	r3, #36	; 0x24
 800bfec:	2201      	movs	r2, #1
 800bfee:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bff0:	4b54      	ldr	r3, [pc, #336]	; (800c144 <USBD_CDC_Init+0x1e8>)
 800bff2:	7819      	ldrb	r1, [r3, #0]
 800bff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bff8:	2202      	movs	r2, #2
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f005 f913 	bl	8011226 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c000:	4b50      	ldr	r3, [pc, #320]	; (800c144 <USBD_CDC_Init+0x1e8>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	f003 020f 	and.w	r2, r3, #15
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4613      	mov	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	440b      	add	r3, r1
 800c014:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c018:	2201      	movs	r2, #1
 800c01a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c01c:	4b4a      	ldr	r3, [pc, #296]	; (800c148 <USBD_CDC_Init+0x1ec>)
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	f003 020f 	and.w	r2, r3, #15
 800c024:	6879      	ldr	r1, [r7, #4]
 800c026:	4613      	mov	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	440b      	add	r3, r1
 800c030:	3326      	adds	r3, #38	; 0x26
 800c032:	2210      	movs	r2, #16
 800c034:	801a      	strh	r2, [r3, #0]
 800c036:	e035      	b.n	800c0a4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c038:	4b41      	ldr	r3, [pc, #260]	; (800c140 <USBD_CDC_Init+0x1e4>)
 800c03a:	7819      	ldrb	r1, [r3, #0]
 800c03c:	2340      	movs	r3, #64	; 0x40
 800c03e:	2202      	movs	r2, #2
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f005 f8f0 	bl	8011226 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c046:	4b3e      	ldr	r3, [pc, #248]	; (800c140 <USBD_CDC_Init+0x1e4>)
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	f003 020f 	and.w	r2, r3, #15
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	3324      	adds	r3, #36	; 0x24
 800c05c:	2201      	movs	r2, #1
 800c05e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c060:	4b38      	ldr	r3, [pc, #224]	; (800c144 <USBD_CDC_Init+0x1e8>)
 800c062:	7819      	ldrb	r1, [r3, #0]
 800c064:	2340      	movs	r3, #64	; 0x40
 800c066:	2202      	movs	r2, #2
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f005 f8dc 	bl	8011226 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c06e:	4b35      	ldr	r3, [pc, #212]	; (800c144 <USBD_CDC_Init+0x1e8>)
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	f003 020f 	and.w	r2, r3, #15
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c086:	2201      	movs	r2, #1
 800c088:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c08a:	4b2f      	ldr	r3, [pc, #188]	; (800c148 <USBD_CDC_Init+0x1ec>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	f003 020f 	and.w	r2, r3, #15
 800c092:	6879      	ldr	r1, [r7, #4]
 800c094:	4613      	mov	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	440b      	add	r3, r1
 800c09e:	3326      	adds	r3, #38	; 0x26
 800c0a0:	2210      	movs	r2, #16
 800c0a2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0a4:	4b28      	ldr	r3, [pc, #160]	; (800c148 <USBD_CDC_Init+0x1ec>)
 800c0a6:	7819      	ldrb	r1, [r3, #0]
 800c0a8:	2308      	movs	r3, #8
 800c0aa:	2203      	movs	r2, #3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f005 f8ba 	bl	8011226 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c0b2:	4b25      	ldr	r3, [pc, #148]	; (800c148 <USBD_CDC_Init+0x1ec>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	f003 020f 	and.w	r2, r3, #15
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	440b      	add	r3, r1
 800c0c6:	3324      	adds	r3, #36	; 0x24
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	33b0      	adds	r3, #176	; 0xb0
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c102:	2302      	movs	r3, #2
 800c104:	e018      	b.n	800c138 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	7c1b      	ldrb	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10a      	bne.n	800c124 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c10e:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <USBD_CDC_Init+0x1e8>)
 800c110:	7819      	ldrb	r1, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f005 f971 	bl	8011404 <USBD_LL_PrepareReceive>
 800c122:	e008      	b.n	800c136 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <USBD_CDC_Init+0x1e8>)
 800c126:	7819      	ldrb	r1, [r3, #0]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c12e:	2340      	movs	r3, #64	; 0x40
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f005 f967 	bl	8011404 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	2000009b 	.word	0x2000009b
 800c144:	2000009c 	.word	0x2000009c
 800c148:	2000009d 	.word	0x2000009d

0800c14c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c158:	4b3a      	ldr	r3, [pc, #232]	; (800c244 <USBD_CDC_DeInit+0xf8>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	4619      	mov	r1, r3
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f005 f887 	bl	8011272 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c164:	4b37      	ldr	r3, [pc, #220]	; (800c244 <USBD_CDC_DeInit+0xf8>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	f003 020f 	and.w	r2, r3, #15
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	440b      	add	r3, r1
 800c178:	3324      	adds	r3, #36	; 0x24
 800c17a:	2200      	movs	r2, #0
 800c17c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c17e:	4b32      	ldr	r3, [pc, #200]	; (800c248 <USBD_CDC_DeInit+0xfc>)
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f005 f874 	bl	8011272 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c18a:	4b2f      	ldr	r3, [pc, #188]	; (800c248 <USBD_CDC_DeInit+0xfc>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	f003 020f 	and.w	r2, r3, #15
 800c192:	6879      	ldr	r1, [r7, #4]
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	440b      	add	r3, r1
 800c19e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c1a6:	4b29      	ldr	r3, [pc, #164]	; (800c24c <USBD_CDC_DeInit+0x100>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f005 f860 	bl	8011272 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c1b2:	4b26      	ldr	r3, [pc, #152]	; (800c24c <USBD_CDC_DeInit+0x100>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f003 020f 	and.w	r2, r3, #15
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	440b      	add	r3, r1
 800c1c6:	3324      	adds	r3, #36	; 0x24
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c1cc:	4b1f      	ldr	r3, [pc, #124]	; (800c24c <USBD_CDC_DeInit+0x100>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	f003 020f 	and.w	r2, r3, #15
 800c1d4:	6879      	ldr	r1, [r7, #4]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	3326      	adds	r3, #38	; 0x26
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	32b0      	adds	r2, #176	; 0xb0
 800c1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d01f      	beq.n	800c238 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	33b0      	adds	r3, #176	; 0xb0
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	32b0      	adds	r2, #176	; 0xb0
 800c216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f013 f976 	bl	801f50c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	32b0      	adds	r2, #176	; 0xb0
 800c22a:	2100      	movs	r1, #0
 800c22c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	2000009b 	.word	0x2000009b
 800c248:	2000009c 	.word	0x2000009c
 800c24c:	2000009d 	.word	0x2000009d

0800c250 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	32b0      	adds	r2, #176	; 0xb0
 800c264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c268:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c26a:	2300      	movs	r3, #0
 800c26c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c26e:	2300      	movs	r3, #0
 800c270:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e0bf      	b.n	800c400 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d050      	beq.n	800c32e <USBD_CDC_Setup+0xde>
 800c28c:	2b20      	cmp	r3, #32
 800c28e:	f040 80af 	bne.w	800c3f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	88db      	ldrh	r3, [r3, #6]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d03a      	beq.n	800c310 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b25b      	sxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	da1b      	bge.n	800c2dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	33b0      	adds	r3, #176	; 0xb0
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c2ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	88d2      	ldrh	r2, [r2, #6]
 800c2c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	88db      	ldrh	r3, [r3, #6]
 800c2c6:	2b07      	cmp	r3, #7
 800c2c8:	bf28      	it	cs
 800c2ca:	2307      	movcs	r3, #7
 800c2cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	89fa      	ldrh	r2, [r7, #14]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f001 fd6d 	bl	800ddb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c2da:	e090      	b.n	800c3fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	785a      	ldrb	r2, [r3, #1]
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	88db      	ldrh	r3, [r3, #6]
 800c2ea:	2b3f      	cmp	r3, #63	; 0x3f
 800c2ec:	d803      	bhi.n	800c2f6 <USBD_CDC_Setup+0xa6>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	88db      	ldrh	r3, [r3, #6]
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	e000      	b.n	800c2f8 <USBD_CDC_Setup+0xa8>
 800c2f6:	2240      	movs	r2, #64	; 0x40
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c2fe:	6939      	ldr	r1, [r7, #16]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c306:	461a      	mov	r2, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 fd7f 	bl	800de0c <USBD_CtlPrepareRx>
      break;
 800c30e:	e076      	b.n	800c3fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	33b0      	adds	r3, #176	; 0xb0
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	4413      	add	r3, r2
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	7850      	ldrb	r0, [r2, #1]
 800c326:	2200      	movs	r2, #0
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	4798      	blx	r3
      break;
 800c32c:	e067      	b.n	800c3fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	785b      	ldrb	r3, [r3, #1]
 800c332:	2b0b      	cmp	r3, #11
 800c334:	d851      	bhi.n	800c3da <USBD_CDC_Setup+0x18a>
 800c336:	a201      	add	r2, pc, #4	; (adr r2, 800c33c <USBD_CDC_Setup+0xec>)
 800c338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33c:	0800c36d 	.word	0x0800c36d
 800c340:	0800c3e9 	.word	0x0800c3e9
 800c344:	0800c3db 	.word	0x0800c3db
 800c348:	0800c3db 	.word	0x0800c3db
 800c34c:	0800c3db 	.word	0x0800c3db
 800c350:	0800c3db 	.word	0x0800c3db
 800c354:	0800c3db 	.word	0x0800c3db
 800c358:	0800c3db 	.word	0x0800c3db
 800c35c:	0800c3db 	.word	0x0800c3db
 800c360:	0800c3db 	.word	0x0800c3db
 800c364:	0800c397 	.word	0x0800c397
 800c368:	0800c3c1 	.word	0x0800c3c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b03      	cmp	r3, #3
 800c376:	d107      	bne.n	800c388 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c378:	f107 030a 	add.w	r3, r7, #10
 800c37c:	2202      	movs	r2, #2
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f001 fd17 	bl	800ddb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c386:	e032      	b.n	800c3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 fca1 	bl	800dcd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c390:	2303      	movs	r3, #3
 800c392:	75fb      	strb	r3, [r7, #23]
          break;
 800c394:	e02b      	b.n	800c3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d107      	bne.n	800c3b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c3a2:	f107 030d 	add.w	r3, r7, #13
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f001 fd02 	bl	800ddb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3b0:	e01d      	b.n	800c3ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f001 fc8c 	bl	800dcd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c3be:	e016      	b.n	800c3ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b03      	cmp	r3, #3
 800c3ca:	d00f      	beq.n	800c3ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f001 fc7f 	bl	800dcd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c3d8:	e008      	b.n	800c3ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f001 fc78 	bl	800dcd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	75fb      	strb	r3, [r7, #23]
          break;
 800c3e6:	e002      	b.n	800c3ee <USBD_CDC_Setup+0x19e>
          break;
 800c3e8:	bf00      	nop
 800c3ea:	e008      	b.n	800c3fe <USBD_CDC_Setup+0x1ae>
          break;
 800c3ec:	bf00      	nop
      }
      break;
 800c3ee:	e006      	b.n	800c3fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f001 fc6d 	bl	800dcd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c3fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800c3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c41a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	32b0      	adds	r2, #176	; 0xb0
 800c426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c42e:	2303      	movs	r3, #3
 800c430:	e065      	b.n	800c4fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	32b0      	adds	r2, #176	; 0xb0
 800c43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c440:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c442:	78fb      	ldrb	r3, [r7, #3]
 800c444:	f003 020f 	and.w	r2, r3, #15
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	4613      	mov	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	3318      	adds	r3, #24
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d02f      	beq.n	800c4bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c45c:	78fb      	ldrb	r3, [r7, #3]
 800c45e:	f003 020f 	and.w	r2, r3, #15
 800c462:	6879      	ldr	r1, [r7, #4]
 800c464:	4613      	mov	r3, r2
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	4413      	add	r3, r2
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	440b      	add	r3, r1
 800c46e:	3318      	adds	r3, #24
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	78fb      	ldrb	r3, [r7, #3]
 800c474:	f003 010f 	and.w	r1, r3, #15
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	460b      	mov	r3, r1
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	440b      	add	r3, r1
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4403      	add	r3, r0
 800c484:	3348      	adds	r3, #72	; 0x48
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	fbb2 f1f3 	udiv	r1, r2, r3
 800c48c:	fb01 f303 	mul.w	r3, r1, r3
 800c490:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c492:	2b00      	cmp	r3, #0
 800c494:	d112      	bne.n	800c4bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c496:	78fb      	ldrb	r3, [r7, #3]
 800c498:	f003 020f 	and.w	r2, r3, #15
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3318      	adds	r3, #24
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c4ae:	78f9      	ldrb	r1, [r7, #3]
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f004 ff84 	bl	80113c2 <USBD_LL_Transmit>
 800c4ba:	e01f      	b.n	800c4fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	33b0      	adds	r3, #176	; 0xb0
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	4413      	add	r3, r2
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d010      	beq.n	800c4fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	33b0      	adds	r3, #176	; 0xb0
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c4f8:	78fa      	ldrb	r2, [r7, #3]
 800c4fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	460b      	mov	r3, r1
 800c510:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	32b0      	adds	r2, #176	; 0xb0
 800c51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c520:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	32b0      	adds	r2, #176	; 0xb0
 800c52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c534:	2303      	movs	r3, #3
 800c536:	e01a      	b.n	800c56e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c538:	78fb      	ldrb	r3, [r7, #3]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f004 ff82 	bl	8011446 <USBD_LL_GetRxDataSize>
 800c542:	4602      	mov	r2, r0
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	33b0      	adds	r3, #176	; 0xb0
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	4413      	add	r3, r2
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c568:	4611      	mov	r1, r2
 800c56a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b084      	sub	sp, #16
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	32b0      	adds	r2, #176	; 0xb0
 800c588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c594:	2303      	movs	r3, #3
 800c596:	e025      	b.n	800c5e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	33b0      	adds	r3, #176	; 0xb0
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d01a      	beq.n	800c5e2 <USBD_CDC_EP0_RxReady+0x6c>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c5b2:	2bff      	cmp	r3, #255	; 0xff
 800c5b4:	d015      	beq.n	800c5e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	33b0      	adds	r3, #176	; 0xb0
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c5ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5d6:	b292      	uxth	r2, r2
 800c5d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	22ff      	movs	r2, #255	; 0xff
 800c5de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5f4:	2182      	movs	r1, #130	; 0x82
 800c5f6:	4818      	ldr	r0, [pc, #96]	; (800c658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c5f8:	f000 fd09 	bl	800d00e <USBD_GetEpDesc>
 800c5fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5fe:	2101      	movs	r1, #1
 800c600:	4815      	ldr	r0, [pc, #84]	; (800c658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c602:	f000 fd04 	bl	800d00e <USBD_GetEpDesc>
 800c606:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c608:	2181      	movs	r1, #129	; 0x81
 800c60a:	4813      	ldr	r0, [pc, #76]	; (800c658 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c60c:	f000 fcff 	bl	800d00e <USBD_GetEpDesc>
 800c610:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2210      	movs	r2, #16
 800c61c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d006      	beq.n	800c632 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	2200      	movs	r2, #0
 800c628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c62c:	711a      	strb	r2, [r3, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d006      	beq.n	800c646 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c640:	711a      	strb	r2, [r3, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2243      	movs	r2, #67	; 0x43
 800c64a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c64c:	4b02      	ldr	r3, [pc, #8]	; (800c658 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	20000058 	.word	0x20000058

0800c65c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c664:	2182      	movs	r1, #130	; 0x82
 800c666:	4818      	ldr	r0, [pc, #96]	; (800c6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c668:	f000 fcd1 	bl	800d00e <USBD_GetEpDesc>
 800c66c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c66e:	2101      	movs	r1, #1
 800c670:	4815      	ldr	r0, [pc, #84]	; (800c6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c672:	f000 fccc 	bl	800d00e <USBD_GetEpDesc>
 800c676:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c678:	2181      	movs	r1, #129	; 0x81
 800c67a:	4813      	ldr	r0, [pc, #76]	; (800c6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c67c:	f000 fcc7 	bl	800d00e <USBD_GetEpDesc>
 800c680:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	2210      	movs	r2, #16
 800c68c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d006      	beq.n	800c6a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	2200      	movs	r2, #0
 800c698:	711a      	strb	r2, [r3, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f042 0202 	orr.w	r2, r2, #2
 800c6a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d006      	beq.n	800c6b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	711a      	strb	r2, [r3, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f042 0202 	orr.w	r2, r2, #2
 800c6b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2243      	movs	r2, #67	; 0x43
 800c6ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6bc:	4b02      	ldr	r3, [pc, #8]	; (800c6c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20000058 	.word	0x20000058

0800c6cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6d4:	2182      	movs	r1, #130	; 0x82
 800c6d6:	4818      	ldr	r0, [pc, #96]	; (800c738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6d8:	f000 fc99 	bl	800d00e <USBD_GetEpDesc>
 800c6dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6de:	2101      	movs	r1, #1
 800c6e0:	4815      	ldr	r0, [pc, #84]	; (800c738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6e2:	f000 fc94 	bl	800d00e <USBD_GetEpDesc>
 800c6e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6e8:	2181      	movs	r1, #129	; 0x81
 800c6ea:	4813      	ldr	r0, [pc, #76]	; (800c738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6ec:	f000 fc8f 	bl	800d00e <USBD_GetEpDesc>
 800c6f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2210      	movs	r2, #16
 800c6fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d006      	beq.n	800c712 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2200      	movs	r2, #0
 800c708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c70c:	711a      	strb	r2, [r3, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d006      	beq.n	800c726 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c720:	711a      	strb	r2, [r3, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2243      	movs	r2, #67	; 0x43
 800c72a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c72c:	4b02      	ldr	r3, [pc, #8]	; (800c738 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3718      	adds	r7, #24
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000058 	.word	0x20000058

0800c73c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	220a      	movs	r2, #10
 800c748:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c74a:	4b03      	ldr	r3, [pc, #12]	; (800c758 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	20000014 	.word	0x20000014

0800c75c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e009      	b.n	800c784 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	33b0      	adds	r3, #176	; 0xb0
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c790:	b480      	push	{r7}
 800c792:	b087      	sub	sp, #28
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	32b0      	adds	r2, #176	; 0xb0
 800c7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e008      	b.n	800c7c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	371c      	adds	r7, #28
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	32b0      	adds	r2, #176	; 0xb0
 800c7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e004      	b.n	800c802 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
	...

0800c810 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	32b0      	adds	r2, #176	; 0xb0
 800c822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c826:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	32b0      	adds	r2, #176	; 0xb0
 800c832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d101      	bne.n	800c83e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c83a:	2303      	movs	r3, #3
 800c83c:	e018      	b.n	800c870 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	7c1b      	ldrb	r3, [r3, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10a      	bne.n	800c85c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c846:	4b0c      	ldr	r3, [pc, #48]	; (800c878 <USBD_CDC_ReceivePacket+0x68>)
 800c848:	7819      	ldrb	r1, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c850:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f004 fdd5 	bl	8011404 <USBD_LL_PrepareReceive>
 800c85a:	e008      	b.n	800c86e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c85c:	4b06      	ldr	r3, [pc, #24]	; (800c878 <USBD_CDC_ReceivePacket+0x68>)
 800c85e:	7819      	ldrb	r1, [r3, #0]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c866:	2340      	movs	r3, #64	; 0x40
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f004 fdcb 	bl	8011404 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	2000009c 	.word	0x2000009c

0800c87c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	4613      	mov	r3, r2
 800c888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c890:	2303      	movs	r3, #3
 800c892:	e01f      	b.n	800c8d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d003      	beq.n	800c8ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	79fa      	ldrb	r2, [r7, #7]
 800c8c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f004 fc45 	bl	8011158 <USBD_LL_Init>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e025      	b.n	800c940 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	32ae      	adds	r2, #174	; 0xae
 800c906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00f      	beq.n	800c930 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	32ae      	adds	r2, #174	; 0xae
 800c91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c920:	f107 020e 	add.w	r2, r7, #14
 800c924:	4610      	mov	r0, r2
 800c926:	4798      	blx	r3
 800c928:	4602      	mov	r2, r0
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c936:	1c5a      	adds	r2, r3, #1
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c93e:	2300      	movs	r3, #0
}
 800c940:	4618      	mov	r0, r3
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f004 fc4d 	bl	80111f0 <USBD_LL_Start>
 800c956:	4603      	mov	r3, r0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c968:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d009      	beq.n	800c9a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	78fa      	ldrb	r2, [r7, #3]
 800c99a:	4611      	mov	r1, r2
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	4798      	blx	r3
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3710      	adds	r7, #16
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}

0800c9ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b084      	sub	sp, #16
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	78fa      	ldrb	r2, [r7, #3]
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	4798      	blx	r3
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f001 f932 	bl	800dc5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ca08:	461a      	mov	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca16:	f003 031f 	and.w	r3, r3, #31
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d01a      	beq.n	800ca54 <USBD_LL_SetupStage+0x72>
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d822      	bhi.n	800ca68 <USBD_LL_SetupStage+0x86>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d002      	beq.n	800ca2c <USBD_LL_SetupStage+0x4a>
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d00a      	beq.n	800ca40 <USBD_LL_SetupStage+0x5e>
 800ca2a:	e01d      	b.n	800ca68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fb5f 	bl	800d0f8 <USBD_StdDevReq>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca3e:	e020      	b.n	800ca82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fbc7 	bl	800d1dc <USBD_StdItfReq>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	73fb      	strb	r3, [r7, #15]
      break;
 800ca52:	e016      	b.n	800ca82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 fc29 	bl	800d2b4 <USBD_StdEPReq>
 800ca62:	4603      	mov	r3, r0
 800ca64:	73fb      	strb	r3, [r7, #15]
      break;
 800ca66:	e00c      	b.n	800ca82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f004 fc1a 	bl	80112b0 <USBD_LL_StallEP>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca80:	bf00      	nop
  }

  return ret;
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	460b      	mov	r3, r1
 800ca96:	607a      	str	r2, [r7, #4]
 800ca98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ca9e:	7afb      	ldrb	r3, [r7, #11]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d16e      	bne.n	800cb82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800caaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cab2:	2b03      	cmp	r3, #3
 800cab4:	f040 8098 	bne.w	800cbe8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	689a      	ldr	r2, [r3, #8]
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d913      	bls.n	800caec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	689a      	ldr	r2, [r3, #8]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	1ad2      	subs	r2, r2, r3
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	68da      	ldr	r2, [r3, #12]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	4293      	cmp	r3, r2
 800cadc:	bf28      	it	cs
 800cade:	4613      	movcs	r3, r2
 800cae0:	461a      	mov	r2, r3
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f001 f9ae 	bl	800de46 <USBD_CtlContinueRx>
 800caea:	e07d      	b.n	800cbe8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800caf2:	f003 031f 	and.w	r3, r3, #31
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d014      	beq.n	800cb24 <USBD_LL_DataOutStage+0x98>
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d81d      	bhi.n	800cb3a <USBD_LL_DataOutStage+0xae>
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d002      	beq.n	800cb08 <USBD_LL_DataOutStage+0x7c>
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d003      	beq.n	800cb0e <USBD_LL_DataOutStage+0x82>
 800cb06:	e018      	b.n	800cb3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	75bb      	strb	r3, [r7, #22]
            break;
 800cb0c:	e018      	b.n	800cb40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	4619      	mov	r1, r3
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f000 fa5e 	bl	800cfda <USBD_CoreFindIF>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	75bb      	strb	r3, [r7, #22]
            break;
 800cb22:	e00d      	b.n	800cb40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f000 fa60 	bl	800cff4 <USBD_CoreFindEP>
 800cb34:	4603      	mov	r3, r0
 800cb36:	75bb      	strb	r3, [r7, #22]
            break;
 800cb38:	e002      	b.n	800cb40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	75bb      	strb	r3, [r7, #22]
            break;
 800cb3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cb40:	7dbb      	ldrb	r3, [r7, #22]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d119      	bne.n	800cb7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b03      	cmp	r3, #3
 800cb50:	d113      	bne.n	800cb7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cb52:	7dba      	ldrb	r2, [r7, #22]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	32ae      	adds	r2, #174	; 0xae
 800cb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00b      	beq.n	800cb7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cb62:	7dba      	ldrb	r2, [r7, #22]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cb6a:	7dba      	ldrb	r2, [r7, #22]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	32ae      	adds	r2, #174	; 0xae
 800cb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f001 f974 	bl	800de68 <USBD_CtlSendStatus>
 800cb80:	e032      	b.n	800cbe8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb82:	7afb      	ldrb	r3, [r7, #11]
 800cb84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 fa31 	bl	800cff4 <USBD_CoreFindEP>
 800cb92:	4603      	mov	r3, r0
 800cb94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb96:	7dbb      	ldrb	r3, [r7, #22]
 800cb98:	2bff      	cmp	r3, #255	; 0xff
 800cb9a:	d025      	beq.n	800cbe8 <USBD_LL_DataOutStage+0x15c>
 800cb9c:	7dbb      	ldrb	r3, [r7, #22]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d122      	bne.n	800cbe8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b03      	cmp	r3, #3
 800cbac:	d117      	bne.n	800cbde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cbae:	7dba      	ldrb	r2, [r7, #22]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	32ae      	adds	r2, #174	; 0xae
 800cbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00f      	beq.n	800cbde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cbbe:	7dba      	ldrb	r2, [r7, #22]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cbc6:	7dba      	ldrb	r2, [r7, #22]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	32ae      	adds	r2, #174	; 0xae
 800cbcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd0:	699b      	ldr	r3, [r3, #24]
 800cbd2:	7afa      	ldrb	r2, [r7, #11]
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	4798      	blx	r3
 800cbda:	4603      	mov	r3, r0
 800cbdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
 800cbe6:	e000      	b.n	800cbea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3718      	adds	r7, #24
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b086      	sub	sp, #24
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	60f8      	str	r0, [r7, #12]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	607a      	str	r2, [r7, #4]
 800cbfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cc00:	7afb      	ldrb	r3, [r7, #11]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d16f      	bne.n	800cce6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	3314      	adds	r3, #20
 800cc0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d15a      	bne.n	800cccc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	689a      	ldr	r2, [r3, #8]
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d914      	bls.n	800cc4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	689a      	ldr	r2, [r3, #8]
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	1ad2      	subs	r2, r2, r3
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	461a      	mov	r2, r3
 800cc36:	6879      	ldr	r1, [r7, #4]
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f001 f8d6 	bl	800ddea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc3e:	2300      	movs	r3, #0
 800cc40:	2200      	movs	r2, #0
 800cc42:	2100      	movs	r1, #0
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f004 fbdd 	bl	8011404 <USBD_LL_PrepareReceive>
 800cc4a:	e03f      	b.n	800cccc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	68da      	ldr	r2, [r3, #12]
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d11c      	bne.n	800cc92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d316      	bcc.n	800cc92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d20f      	bcs.n	800cc92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc72:	2200      	movs	r2, #0
 800cc74:	2100      	movs	r1, #0
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f001 f8b7 	bl	800ddea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc84:	2300      	movs	r3, #0
 800cc86:	2200      	movs	r2, #0
 800cc88:	2100      	movs	r1, #0
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f004 fbba 	bl	8011404 <USBD_LL_PrepareReceive>
 800cc90:	e01c      	b.n	800cccc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d10f      	bne.n	800ccbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d009      	beq.n	800ccbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccbe:	2180      	movs	r1, #128	; 0x80
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f004 faf5 	bl	80112b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	f001 f8e1 	bl	800de8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d03a      	beq.n	800cd4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f7ff fe42 	bl	800c960 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cce4:	e032      	b.n	800cd4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cce6:	7afb      	ldrb	r3, [r7, #11]
 800cce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	4619      	mov	r1, r3
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f000 f97f 	bl	800cff4 <USBD_CoreFindEP>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	2bff      	cmp	r3, #255	; 0xff
 800ccfe:	d025      	beq.n	800cd4c <USBD_LL_DataInStage+0x15a>
 800cd00:	7dfb      	ldrb	r3, [r7, #23]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d122      	bne.n	800cd4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	d11c      	bne.n	800cd4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cd12:	7dfa      	ldrb	r2, [r7, #23]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	32ae      	adds	r2, #174	; 0xae
 800cd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d014      	beq.n	800cd4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cd22:	7dfa      	ldrb	r2, [r7, #23]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cd2a:	7dfa      	ldrb	r2, [r7, #23]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	32ae      	adds	r2, #174	; 0xae
 800cd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd34:	695b      	ldr	r3, [r3, #20]
 800cd36:	7afa      	ldrb	r2, [r7, #11]
 800cd38:	4611      	mov	r1, r2
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	4798      	blx	r3
 800cd3e:	4603      	mov	r3, r0
 800cd40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cd42:	7dbb      	ldrb	r3, [r7, #22]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cd48:	7dbb      	ldrb	r3, [r7, #22]
 800cd4a:	e000      	b.n	800cd4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b084      	sub	sp, #16
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d014      	beq.n	800cdbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00e      	beq.n	800cdbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	6852      	ldr	r2, [r2, #4]
 800cdaa:	b2d2      	uxtb	r2, r2
 800cdac:	4611      	mov	r1, r2
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	4798      	blx	r3
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdbc:	2340      	movs	r3, #64	; 0x40
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f004 fa2f 	bl	8011226 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2240      	movs	r2, #64	; 0x40
 800cdd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdd8:	2340      	movs	r3, #64	; 0x40
 800cdda:	2200      	movs	r2, #0
 800cddc:	2180      	movs	r1, #128	; 0x80
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f004 fa21 	bl	8011226 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2240      	movs	r2, #64	; 0x40
 800cdee:	621a      	str	r2, [r3, #32]

  return ret;
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	460b      	mov	r3, r1
 800ce04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	78fa      	ldrb	r2, [r7, #3]
 800ce0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b083      	sub	sp, #12
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2204      	movs	r2, #4
 800ce34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b04      	cmp	r3, #4
 800ce58:	d106      	bne.n	800ce68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d110      	bne.n	800ceac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00b      	beq.n	800ceac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce9a:	69db      	ldr	r3, [r3, #28]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d005      	beq.n	800ceac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b082      	sub	sp, #8
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	460b      	mov	r3, r1
 800cec0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	32ae      	adds	r2, #174	; 0xae
 800cecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ced4:	2303      	movs	r3, #3
 800ced6:	e01c      	b.n	800cf12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d115      	bne.n	800cf10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	32ae      	adds	r2, #174	; 0xae
 800ceee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef2:	6a1b      	ldr	r3, [r3, #32]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00b      	beq.n	800cf10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	32ae      	adds	r2, #174	; 0xae
 800cf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf06:	6a1b      	ldr	r3, [r3, #32]
 800cf08:	78fa      	ldrb	r2, [r7, #3]
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf10:	2300      	movs	r3, #0
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b082      	sub	sp, #8
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	460b      	mov	r3, r1
 800cf24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	32ae      	adds	r2, #174	; 0xae
 800cf30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d101      	bne.n	800cf3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	e01c      	b.n	800cf76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	d115      	bne.n	800cf74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	32ae      	adds	r2, #174	; 0xae
 800cf52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00b      	beq.n	800cf74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	32ae      	adds	r2, #174	; 0xae
 800cf66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	78fa      	ldrb	r2, [r7, #3]
 800cf6e:	4611      	mov	r1, r2
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cf7e:	b480      	push	{r7}
 800cf80:	b083      	sub	sp, #12
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00e      	beq.n	800cfd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	6852      	ldr	r2, [r2, #4]
 800cfbe:	b2d2      	uxtb	r2, r2
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	4798      	blx	r3
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cfda:	b480      	push	{r7}
 800cfdc:	b083      	sub	sp, #12
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cfe6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	460b      	mov	r3, r1
 800cffe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d000:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d002:	4618      	mov	r0, r3
 800d004:	370c      	adds	r7, #12
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b086      	sub	sp, #24
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	460b      	mov	r3, r1
 800d018:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d022:	2300      	movs	r3, #0
 800d024:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	885b      	ldrh	r3, [r3, #2]
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	b29b      	uxth	r3, r3
 800d032:	429a      	cmp	r2, r3
 800d034:	d920      	bls.n	800d078 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d03e:	e013      	b.n	800d068 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d040:	f107 030a 	add.w	r3, r7, #10
 800d044:	4619      	mov	r1, r3
 800d046:	6978      	ldr	r0, [r7, #20]
 800d048:	f000 f81b 	bl	800d082 <USBD_GetNextDesc>
 800d04c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	785b      	ldrb	r3, [r3, #1]
 800d052:	2b05      	cmp	r3, #5
 800d054:	d108      	bne.n	800d068 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	789b      	ldrb	r3, [r3, #2]
 800d05e:	78fa      	ldrb	r2, [r7, #3]
 800d060:	429a      	cmp	r2, r3
 800d062:	d008      	beq.n	800d076 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d064:	2300      	movs	r3, #0
 800d066:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	885b      	ldrh	r3, [r3, #2]
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	897b      	ldrh	r3, [r7, #10]
 800d070:	429a      	cmp	r2, r3
 800d072:	d8e5      	bhi.n	800d040 <USBD_GetEpDesc+0x32>
 800d074:	e000      	b.n	800d078 <USBD_GetEpDesc+0x6a>
          break;
 800d076:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d078:	693b      	ldr	r3, [r7, #16]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	881a      	ldrh	r2, [r3, #0]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	4413      	add	r3, r2
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b087      	sub	sp, #28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d0da:	8a3b      	ldrh	r3, [r7, #16]
 800d0dc:	021b      	lsls	r3, r3, #8
 800d0de:	b21a      	sxth	r2, r3
 800d0e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	b21b      	sxth	r3, r3
 800d0e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d0ea:	89fb      	ldrh	r3, [r7, #14]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	371c      	adds	r7, #28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d102:	2300      	movs	r3, #0
 800d104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d10e:	2b40      	cmp	r3, #64	; 0x40
 800d110:	d005      	beq.n	800d11e <USBD_StdDevReq+0x26>
 800d112:	2b40      	cmp	r3, #64	; 0x40
 800d114:	d857      	bhi.n	800d1c6 <USBD_StdDevReq+0xce>
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00f      	beq.n	800d13a <USBD_StdDevReq+0x42>
 800d11a:	2b20      	cmp	r3, #32
 800d11c:	d153      	bne.n	800d1c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	32ae      	adds	r2, #174	; 0xae
 800d128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	4798      	blx	r3
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]
      break;
 800d138:	e04a      	b.n	800d1d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	785b      	ldrb	r3, [r3, #1]
 800d13e:	2b09      	cmp	r3, #9
 800d140:	d83b      	bhi.n	800d1ba <USBD_StdDevReq+0xc2>
 800d142:	a201      	add	r2, pc, #4	; (adr r2, 800d148 <USBD_StdDevReq+0x50>)
 800d144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d148:	0800d19d 	.word	0x0800d19d
 800d14c:	0800d1b1 	.word	0x0800d1b1
 800d150:	0800d1bb 	.word	0x0800d1bb
 800d154:	0800d1a7 	.word	0x0800d1a7
 800d158:	0800d1bb 	.word	0x0800d1bb
 800d15c:	0800d17b 	.word	0x0800d17b
 800d160:	0800d171 	.word	0x0800d171
 800d164:	0800d1bb 	.word	0x0800d1bb
 800d168:	0800d193 	.word	0x0800d193
 800d16c:	0800d185 	.word	0x0800d185
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fa3c 	bl	800d5f0 <USBD_GetDescriptor>
          break;
 800d178:	e024      	b.n	800d1c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fbcb 	bl	800d918 <USBD_SetAddress>
          break;
 800d182:	e01f      	b.n	800d1c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 fc0a 	bl	800d9a0 <USBD_SetConfig>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73fb      	strb	r3, [r7, #15]
          break;
 800d190:	e018      	b.n	800d1c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d192:	6839      	ldr	r1, [r7, #0]
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 fcad 	bl	800daf4 <USBD_GetConfig>
          break;
 800d19a:	e013      	b.n	800d1c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d19c:	6839      	ldr	r1, [r7, #0]
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fcde 	bl	800db60 <USBD_GetStatus>
          break;
 800d1a4:	e00e      	b.n	800d1c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fd0d 	bl	800dbc8 <USBD_SetFeature>
          break;
 800d1ae:	e009      	b.n	800d1c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fd31 	bl	800dc1a <USBD_ClrFeature>
          break;
 800d1b8:	e004      	b.n	800d1c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fd88 	bl	800dcd2 <USBD_CtlError>
          break;
 800d1c2:	bf00      	nop
      }
      break;
 800d1c4:	e004      	b.n	800d1d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fd82 	bl	800dcd2 <USBD_CtlError>
      break;
 800d1ce:	bf00      	nop
  }

  return ret;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop

0800d1dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1f2:	2b40      	cmp	r3, #64	; 0x40
 800d1f4:	d005      	beq.n	800d202 <USBD_StdItfReq+0x26>
 800d1f6:	2b40      	cmp	r3, #64	; 0x40
 800d1f8:	d852      	bhi.n	800d2a0 <USBD_StdItfReq+0xc4>
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <USBD_StdItfReq+0x26>
 800d1fe:	2b20      	cmp	r3, #32
 800d200:	d14e      	bne.n	800d2a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	3b01      	subs	r3, #1
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d840      	bhi.n	800d292 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	889b      	ldrh	r3, [r3, #4]
 800d214:	b2db      	uxtb	r3, r3
 800d216:	2b01      	cmp	r3, #1
 800d218:	d836      	bhi.n	800d288 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	889b      	ldrh	r3, [r3, #4]
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	4619      	mov	r1, r3
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff fed9 	bl	800cfda <USBD_CoreFindIF>
 800d228:	4603      	mov	r3, r0
 800d22a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d22c:	7bbb      	ldrb	r3, [r7, #14]
 800d22e:	2bff      	cmp	r3, #255	; 0xff
 800d230:	d01d      	beq.n	800d26e <USBD_StdItfReq+0x92>
 800d232:	7bbb      	ldrb	r3, [r7, #14]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d11a      	bne.n	800d26e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d238:	7bba      	ldrb	r2, [r7, #14]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	32ae      	adds	r2, #174	; 0xae
 800d23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00f      	beq.n	800d268 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d248:	7bba      	ldrb	r2, [r7, #14]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d250:	7bba      	ldrb	r2, [r7, #14]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	32ae      	adds	r2, #174	; 0xae
 800d256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	4798      	blx	r3
 800d262:	4603      	mov	r3, r0
 800d264:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d266:	e004      	b.n	800d272 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d268:	2303      	movs	r3, #3
 800d26a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d26c:	e001      	b.n	800d272 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d26e:	2303      	movs	r3, #3
 800d270:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	88db      	ldrh	r3, [r3, #6]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d110      	bne.n	800d29c <USBD_StdItfReq+0xc0>
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10d      	bne.n	800d29c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fdf1 	bl	800de68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d286:	e009      	b.n	800d29c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fd21 	bl	800dcd2 <USBD_CtlError>
          break;
 800d290:	e004      	b.n	800d29c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fd1c 	bl	800dcd2 <USBD_CtlError>
          break;
 800d29a:	e000      	b.n	800d29e <USBD_StdItfReq+0xc2>
          break;
 800d29c:	bf00      	nop
      }
      break;
 800d29e:	e004      	b.n	800d2aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fd15 	bl	800dcd2 <USBD_CtlError>
      break;
 800d2a8:	bf00      	nop
  }

  return ret;
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	889b      	ldrh	r3, [r3, #4]
 800d2c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2d0:	2b40      	cmp	r3, #64	; 0x40
 800d2d2:	d007      	beq.n	800d2e4 <USBD_StdEPReq+0x30>
 800d2d4:	2b40      	cmp	r3, #64	; 0x40
 800d2d6:	f200 817f 	bhi.w	800d5d8 <USBD_StdEPReq+0x324>
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d02a      	beq.n	800d334 <USBD_StdEPReq+0x80>
 800d2de:	2b20      	cmp	r3, #32
 800d2e0:	f040 817a 	bne.w	800d5d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2e4:	7bbb      	ldrb	r3, [r7, #14]
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f7ff fe83 	bl	800cff4 <USBD_CoreFindEP>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2f2:	7b7b      	ldrb	r3, [r7, #13]
 800d2f4:	2bff      	cmp	r3, #255	; 0xff
 800d2f6:	f000 8174 	beq.w	800d5e2 <USBD_StdEPReq+0x32e>
 800d2fa:	7b7b      	ldrb	r3, [r7, #13]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f040 8170 	bne.w	800d5e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d302:	7b7a      	ldrb	r2, [r7, #13]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d30a:	7b7a      	ldrb	r2, [r7, #13]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	32ae      	adds	r2, #174	; 0xae
 800d310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	f000 8163 	beq.w	800d5e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d31c:	7b7a      	ldrb	r2, [r7, #13]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	32ae      	adds	r2, #174	; 0xae
 800d322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	4798      	blx	r3
 800d32e:	4603      	mov	r3, r0
 800d330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d332:	e156      	b.n	800d5e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	785b      	ldrb	r3, [r3, #1]
 800d338:	2b03      	cmp	r3, #3
 800d33a:	d008      	beq.n	800d34e <USBD_StdEPReq+0x9a>
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	f300 8145 	bgt.w	800d5cc <USBD_StdEPReq+0x318>
 800d342:	2b00      	cmp	r3, #0
 800d344:	f000 809b 	beq.w	800d47e <USBD_StdEPReq+0x1ca>
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d03c      	beq.n	800d3c6 <USBD_StdEPReq+0x112>
 800d34c:	e13e      	b.n	800d5cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b02      	cmp	r3, #2
 800d358:	d002      	beq.n	800d360 <USBD_StdEPReq+0xac>
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	d016      	beq.n	800d38c <USBD_StdEPReq+0xd8>
 800d35e:	e02c      	b.n	800d3ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d360:	7bbb      	ldrb	r3, [r7, #14]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00d      	beq.n	800d382 <USBD_StdEPReq+0xce>
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	2b80      	cmp	r3, #128	; 0x80
 800d36a:	d00a      	beq.n	800d382 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
 800d36e:	4619      	mov	r1, r3
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f003 ff9d 	bl	80112b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d376:	2180      	movs	r1, #128	; 0x80
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f003 ff99 	bl	80112b0 <USBD_LL_StallEP>
 800d37e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d380:	e020      	b.n	800d3c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fca4 	bl	800dcd2 <USBD_CtlError>
              break;
 800d38a:	e01b      	b.n	800d3c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	885b      	ldrh	r3, [r3, #2]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10e      	bne.n	800d3b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d394:	7bbb      	ldrb	r3, [r7, #14]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00b      	beq.n	800d3b2 <USBD_StdEPReq+0xfe>
 800d39a:	7bbb      	ldrb	r3, [r7, #14]
 800d39c:	2b80      	cmp	r3, #128	; 0x80
 800d39e:	d008      	beq.n	800d3b2 <USBD_StdEPReq+0xfe>
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	88db      	ldrh	r3, [r3, #6]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d104      	bne.n	800d3b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3a8:	7bbb      	ldrb	r3, [r7, #14]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f003 ff7f 	bl	80112b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 fd58 	bl	800de68 <USBD_CtlSendStatus>

              break;
 800d3b8:	e004      	b.n	800d3c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fc88 	bl	800dcd2 <USBD_CtlError>
              break;
 800d3c2:	bf00      	nop
          }
          break;
 800d3c4:	e107      	b.n	800d5d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d002      	beq.n	800d3d8 <USBD_StdEPReq+0x124>
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	d016      	beq.n	800d404 <USBD_StdEPReq+0x150>
 800d3d6:	e04b      	b.n	800d470 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3d8:	7bbb      	ldrb	r3, [r7, #14]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00d      	beq.n	800d3fa <USBD_StdEPReq+0x146>
 800d3de:	7bbb      	ldrb	r3, [r7, #14]
 800d3e0:	2b80      	cmp	r3, #128	; 0x80
 800d3e2:	d00a      	beq.n	800d3fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f003 ff61 	bl	80112b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ee:	2180      	movs	r1, #128	; 0x80
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f003 ff5d 	bl	80112b0 <USBD_LL_StallEP>
 800d3f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3f8:	e040      	b.n	800d47c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fc68 	bl	800dcd2 <USBD_CtlError>
              break;
 800d402:	e03b      	b.n	800d47c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	885b      	ldrh	r3, [r3, #2]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d136      	bne.n	800d47a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
 800d40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d412:	2b00      	cmp	r3, #0
 800d414:	d004      	beq.n	800d420 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d416:	7bbb      	ldrb	r3, [r7, #14]
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f003 ff67 	bl	80112ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 fd21 	bl	800de68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d426:	7bbb      	ldrb	r3, [r7, #14]
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f7ff fde2 	bl	800cff4 <USBD_CoreFindEP>
 800d430:	4603      	mov	r3, r0
 800d432:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d434:	7b7b      	ldrb	r3, [r7, #13]
 800d436:	2bff      	cmp	r3, #255	; 0xff
 800d438:	d01f      	beq.n	800d47a <USBD_StdEPReq+0x1c6>
 800d43a:	7b7b      	ldrb	r3, [r7, #13]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d11c      	bne.n	800d47a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d440:	7b7a      	ldrb	r2, [r7, #13]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d448:	7b7a      	ldrb	r2, [r7, #13]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	32ae      	adds	r2, #174	; 0xae
 800d44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d010      	beq.n	800d47a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d458:	7b7a      	ldrb	r2, [r7, #13]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	32ae      	adds	r2, #174	; 0xae
 800d45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	6839      	ldr	r1, [r7, #0]
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	4798      	blx	r3
 800d46a:	4603      	mov	r3, r0
 800d46c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d46e:	e004      	b.n	800d47a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fc2d 	bl	800dcd2 <USBD_CtlError>
              break;
 800d478:	e000      	b.n	800d47c <USBD_StdEPReq+0x1c8>
              break;
 800d47a:	bf00      	nop
          }
          break;
 800d47c:	e0ab      	b.n	800d5d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b02      	cmp	r3, #2
 800d488:	d002      	beq.n	800d490 <USBD_StdEPReq+0x1dc>
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	d032      	beq.n	800d4f4 <USBD_StdEPReq+0x240>
 800d48e:	e097      	b.n	800d5c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d490:	7bbb      	ldrb	r3, [r7, #14]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d007      	beq.n	800d4a6 <USBD_StdEPReq+0x1f2>
 800d496:	7bbb      	ldrb	r3, [r7, #14]
 800d498:	2b80      	cmp	r3, #128	; 0x80
 800d49a:	d004      	beq.n	800d4a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fc17 	bl	800dcd2 <USBD_CtlError>
                break;
 800d4a4:	e091      	b.n	800d5ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	da0b      	bge.n	800d4c6 <USBD_StdEPReq+0x212>
 800d4ae:	7bbb      	ldrb	r3, [r7, #14]
 800d4b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	4413      	add	r3, r2
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	3310      	adds	r3, #16
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	e00b      	b.n	800d4de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4c6:	7bbb      	ldrb	r3, [r7, #14]
 800d4c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	4413      	add	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	4413      	add	r3, r2
 800d4dc:	3304      	adds	r3, #4
 800d4de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fc61 	bl	800ddb4 <USBD_CtlSendData>
              break;
 800d4f2:	e06a      	b.n	800d5ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d4f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	da11      	bge.n	800d520 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4fc:	7bbb      	ldrb	r3, [r7, #14]
 800d4fe:	f003 020f 	and.w	r2, r3, #15
 800d502:	6879      	ldr	r1, [r7, #4]
 800d504:	4613      	mov	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4413      	add	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	440b      	add	r3, r1
 800d50e:	3324      	adds	r3, #36	; 0x24
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d117      	bne.n	800d546 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d516:	6839      	ldr	r1, [r7, #0]
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 fbda 	bl	800dcd2 <USBD_CtlError>
                  break;
 800d51e:	e054      	b.n	800d5ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d520:	7bbb      	ldrb	r3, [r7, #14]
 800d522:	f003 020f 	and.w	r2, r3, #15
 800d526:	6879      	ldr	r1, [r7, #4]
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	440b      	add	r3, r1
 800d532:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d536:	881b      	ldrh	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d104      	bne.n	800d546 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 fbc7 	bl	800dcd2 <USBD_CtlError>
                  break;
 800d544:	e041      	b.n	800d5ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	da0b      	bge.n	800d566 <USBD_StdEPReq+0x2b2>
 800d54e:	7bbb      	ldrb	r3, [r7, #14]
 800d550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d554:	4613      	mov	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	3310      	adds	r3, #16
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	4413      	add	r3, r2
 800d562:	3304      	adds	r3, #4
 800d564:	e00b      	b.n	800d57e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d566:	7bbb      	ldrb	r3, [r7, #14]
 800d568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d56c:	4613      	mov	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	4413      	add	r3, r2
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	4413      	add	r3, r2
 800d57c:	3304      	adds	r3, #4
 800d57e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d580:	7bbb      	ldrb	r3, [r7, #14]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <USBD_StdEPReq+0x2d8>
 800d586:	7bbb      	ldrb	r3, [r7, #14]
 800d588:	2b80      	cmp	r3, #128	; 0x80
 800d58a:	d103      	bne.n	800d594 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]
 800d592:	e00e      	b.n	800d5b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d594:	7bbb      	ldrb	r3, [r7, #14]
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f003 fec7 	bl	801132c <USBD_LL_IsStallEP>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d003      	beq.n	800d5ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	601a      	str	r2, [r3, #0]
 800d5aa:	e002      	b.n	800d5b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fbfb 	bl	800ddb4 <USBD_CtlSendData>
              break;
 800d5be:	e004      	b.n	800d5ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d5c0:	6839      	ldr	r1, [r7, #0]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fb85 	bl	800dcd2 <USBD_CtlError>
              break;
 800d5c8:	bf00      	nop
          }
          break;
 800d5ca:	e004      	b.n	800d5d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fb7f 	bl	800dcd2 <USBD_CtlError>
          break;
 800d5d4:	bf00      	nop
      }
      break;
 800d5d6:	e005      	b.n	800d5e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fb79 	bl	800dcd2 <USBD_CtlError>
      break;
 800d5e0:	e000      	b.n	800d5e4 <USBD_StdEPReq+0x330>
      break;
 800d5e2:	bf00      	nop
  }

  return ret;
 800d5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d602:	2300      	movs	r3, #0
 800d604:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	885b      	ldrh	r3, [r3, #2]
 800d60a:	0a1b      	lsrs	r3, r3, #8
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	3b01      	subs	r3, #1
 800d610:	2b0e      	cmp	r3, #14
 800d612:	f200 8152 	bhi.w	800d8ba <USBD_GetDescriptor+0x2ca>
 800d616:	a201      	add	r2, pc, #4	; (adr r2, 800d61c <USBD_GetDescriptor+0x2c>)
 800d618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61c:	0800d68d 	.word	0x0800d68d
 800d620:	0800d6a5 	.word	0x0800d6a5
 800d624:	0800d6e5 	.word	0x0800d6e5
 800d628:	0800d8bb 	.word	0x0800d8bb
 800d62c:	0800d8bb 	.word	0x0800d8bb
 800d630:	0800d85b 	.word	0x0800d85b
 800d634:	0800d887 	.word	0x0800d887
 800d638:	0800d8bb 	.word	0x0800d8bb
 800d63c:	0800d8bb 	.word	0x0800d8bb
 800d640:	0800d8bb 	.word	0x0800d8bb
 800d644:	0800d8bb 	.word	0x0800d8bb
 800d648:	0800d8bb 	.word	0x0800d8bb
 800d64c:	0800d8bb 	.word	0x0800d8bb
 800d650:	0800d8bb 	.word	0x0800d8bb
 800d654:	0800d659 	.word	0x0800d659
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00b      	beq.n	800d67c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d66a:	69db      	ldr	r3, [r3, #28]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	7c12      	ldrb	r2, [r2, #16]
 800d670:	f107 0108 	add.w	r1, r7, #8
 800d674:	4610      	mov	r0, r2
 800d676:	4798      	blx	r3
 800d678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d67a:	e126      	b.n	800d8ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fb27 	bl	800dcd2 <USBD_CtlError>
        err++;
 800d684:	7afb      	ldrb	r3, [r7, #11]
 800d686:	3301      	adds	r3, #1
 800d688:	72fb      	strb	r3, [r7, #11]
      break;
 800d68a:	e11e      	b.n	800d8ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	7c12      	ldrb	r2, [r2, #16]
 800d698:	f107 0108 	add.w	r1, r7, #8
 800d69c:	4610      	mov	r0, r2
 800d69e:	4798      	blx	r3
 800d6a0:	60f8      	str	r0, [r7, #12]
      break;
 800d6a2:	e112      	b.n	800d8ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	7c1b      	ldrb	r3, [r3, #16]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10d      	bne.n	800d6c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b4:	f107 0208 	add.w	r2, r7, #8
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4798      	blx	r3
 800d6bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d6c6:	e100      	b.n	800d8ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d0:	f107 0208 	add.w	r2, r7, #8
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	4798      	blx	r3
 800d6d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	2202      	movs	r2, #2
 800d6e0:	701a      	strb	r2, [r3, #0]
      break;
 800d6e2:	e0f2      	b.n	800d8ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	885b      	ldrh	r3, [r3, #2]
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b05      	cmp	r3, #5
 800d6ec:	f200 80ac 	bhi.w	800d848 <USBD_GetDescriptor+0x258>
 800d6f0:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <USBD_GetDescriptor+0x108>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d711 	.word	0x0800d711
 800d6fc:	0800d745 	.word	0x0800d745
 800d700:	0800d779 	.word	0x0800d779
 800d704:	0800d7ad 	.word	0x0800d7ad
 800d708:	0800d7e1 	.word	0x0800d7e1
 800d70c:	0800d815 	.word	0x0800d815
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00b      	beq.n	800d734 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	7c12      	ldrb	r2, [r2, #16]
 800d728:	f107 0108 	add.w	r1, r7, #8
 800d72c:	4610      	mov	r0, r2
 800d72e:	4798      	blx	r3
 800d730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d732:	e091      	b.n	800d858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d734:	6839      	ldr	r1, [r7, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 facb 	bl	800dcd2 <USBD_CtlError>
            err++;
 800d73c:	7afb      	ldrb	r3, [r7, #11]
 800d73e:	3301      	adds	r3, #1
 800d740:	72fb      	strb	r3, [r7, #11]
          break;
 800d742:	e089      	b.n	800d858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00b      	beq.n	800d768 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	7c12      	ldrb	r2, [r2, #16]
 800d75c:	f107 0108 	add.w	r1, r7, #8
 800d760:	4610      	mov	r0, r2
 800d762:	4798      	blx	r3
 800d764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d766:	e077      	b.n	800d858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fab1 	bl	800dcd2 <USBD_CtlError>
            err++;
 800d770:	7afb      	ldrb	r3, [r7, #11]
 800d772:	3301      	adds	r3, #1
 800d774:	72fb      	strb	r3, [r7, #11]
          break;
 800d776:	e06f      	b.n	800d858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00b      	beq.n	800d79c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	7c12      	ldrb	r2, [r2, #16]
 800d790:	f107 0108 	add.w	r1, r7, #8
 800d794:	4610      	mov	r0, r2
 800d796:	4798      	blx	r3
 800d798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d79a:	e05d      	b.n	800d858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d79c:	6839      	ldr	r1, [r7, #0]
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 fa97 	bl	800dcd2 <USBD_CtlError>
            err++;
 800d7a4:	7afb      	ldrb	r3, [r7, #11]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7aa:	e055      	b.n	800d858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00b      	beq.n	800d7d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	7c12      	ldrb	r2, [r2, #16]
 800d7c4:	f107 0108 	add.w	r1, r7, #8
 800d7c8:	4610      	mov	r0, r2
 800d7ca:	4798      	blx	r3
 800d7cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7ce:	e043      	b.n	800d858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fa7d 	bl	800dcd2 <USBD_CtlError>
            err++;
 800d7d8:	7afb      	ldrb	r3, [r7, #11]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	72fb      	strb	r3, [r7, #11]
          break;
 800d7de:	e03b      	b.n	800d858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7e6:	695b      	ldr	r3, [r3, #20]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00b      	beq.n	800d804 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7f2:	695b      	ldr	r3, [r3, #20]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	7c12      	ldrb	r2, [r2, #16]
 800d7f8:	f107 0108 	add.w	r1, r7, #8
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4798      	blx	r3
 800d800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d802:	e029      	b.n	800d858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 fa63 	bl	800dcd2 <USBD_CtlError>
            err++;
 800d80c:	7afb      	ldrb	r3, [r7, #11]
 800d80e:	3301      	adds	r3, #1
 800d810:	72fb      	strb	r3, [r7, #11]
          break;
 800d812:	e021      	b.n	800d858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d81a:	699b      	ldr	r3, [r3, #24]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00b      	beq.n	800d838 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	7c12      	ldrb	r2, [r2, #16]
 800d82c:	f107 0108 	add.w	r1, r7, #8
 800d830:	4610      	mov	r0, r2
 800d832:	4798      	blx	r3
 800d834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d836:	e00f      	b.n	800d858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fa49 	bl	800dcd2 <USBD_CtlError>
            err++;
 800d840:	7afb      	ldrb	r3, [r7, #11]
 800d842:	3301      	adds	r3, #1
 800d844:	72fb      	strb	r3, [r7, #11]
          break;
 800d846:	e007      	b.n	800d858 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fa41 	bl	800dcd2 <USBD_CtlError>
          err++;
 800d850:	7afb      	ldrb	r3, [r7, #11]
 800d852:	3301      	adds	r3, #1
 800d854:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d856:	bf00      	nop
      }
      break;
 800d858:	e037      	b.n	800d8ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	7c1b      	ldrb	r3, [r3, #16]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d109      	bne.n	800d876 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d86a:	f107 0208 	add.w	r2, r7, #8
 800d86e:	4610      	mov	r0, r2
 800d870:	4798      	blx	r3
 800d872:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d874:	e029      	b.n	800d8ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 fa2a 	bl	800dcd2 <USBD_CtlError>
        err++;
 800d87e:	7afb      	ldrb	r3, [r7, #11]
 800d880:	3301      	adds	r3, #1
 800d882:	72fb      	strb	r3, [r7, #11]
      break;
 800d884:	e021      	b.n	800d8ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7c1b      	ldrb	r3, [r3, #16]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10d      	bne.n	800d8aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d896:	f107 0208 	add.w	r2, r7, #8
 800d89a:	4610      	mov	r0, r2
 800d89c:	4798      	blx	r3
 800d89e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	2207      	movs	r2, #7
 800d8a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8a8:	e00f      	b.n	800d8ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d8aa:	6839      	ldr	r1, [r7, #0]
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fa10 	bl	800dcd2 <USBD_CtlError>
        err++;
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d8b8:	e007      	b.n	800d8ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 fa08 	bl	800dcd2 <USBD_CtlError>
      err++;
 800d8c2:	7afb      	ldrb	r3, [r7, #11]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	72fb      	strb	r3, [r7, #11]
      break;
 800d8c8:	bf00      	nop
  }

  if (err != 0U)
 800d8ca:	7afb      	ldrb	r3, [r7, #11]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d11e      	bne.n	800d90e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	88db      	ldrh	r3, [r3, #6]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d016      	beq.n	800d906 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d8d8:	893b      	ldrh	r3, [r7, #8]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00e      	beq.n	800d8fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	88da      	ldrh	r2, [r3, #6]
 800d8e2:	893b      	ldrh	r3, [r7, #8]
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	bf28      	it	cs
 800d8e8:	4613      	movcs	r3, r2
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d8ee:	893b      	ldrh	r3, [r7, #8]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	68f9      	ldr	r1, [r7, #12]
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fa5d 	bl	800ddb4 <USBD_CtlSendData>
 800d8fa:	e009      	b.n	800d910 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d8fc:	6839      	ldr	r1, [r7, #0]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f9e7 	bl	800dcd2 <USBD_CtlError>
 800d904:	e004      	b.n	800d910 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 faae 	bl	800de68 <USBD_CtlSendStatus>
 800d90c:	e000      	b.n	800d910 <USBD_GetDescriptor+0x320>
    return;
 800d90e:	bf00      	nop
  }
}
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop

0800d918 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	889b      	ldrh	r3, [r3, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d131      	bne.n	800d98e <USBD_SetAddress+0x76>
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	88db      	ldrh	r3, [r3, #6]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d12d      	bne.n	800d98e <USBD_SetAddress+0x76>
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	885b      	ldrh	r3, [r3, #2]
 800d936:	2b7f      	cmp	r3, #127	; 0x7f
 800d938:	d829      	bhi.n	800d98e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	885b      	ldrh	r3, [r3, #2]
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d944:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	2b03      	cmp	r3, #3
 800d950:	d104      	bne.n	800d95c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f9bc 	bl	800dcd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d95a:	e01d      	b.n	800d998 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	7bfa      	ldrb	r2, [r7, #15]
 800d960:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f003 fd0b 	bl	8011384 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fa7a 	bl	800de68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d974:	7bfb      	ldrb	r3, [r7, #15]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d004      	beq.n	800d984 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2202      	movs	r2, #2
 800d97e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d982:	e009      	b.n	800d998 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d98c:	e004      	b.n	800d998 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f99e 	bl	800dcd2 <USBD_CtlError>
  }
}
 800d996:	bf00      	nop
 800d998:	bf00      	nop
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	885b      	ldrh	r3, [r3, #2]
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	4b4e      	ldr	r3, [pc, #312]	; (800daf0 <USBD_SetConfig+0x150>)
 800d9b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d9b8:	4b4d      	ldr	r3, [pc, #308]	; (800daf0 <USBD_SetConfig+0x150>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d905      	bls.n	800d9cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f985 	bl	800dcd2 <USBD_CtlError>
    return USBD_FAIL;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e08c      	b.n	800dae6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d002      	beq.n	800d9de <USBD_SetConfig+0x3e>
 800d9d8:	2b03      	cmp	r3, #3
 800d9da:	d029      	beq.n	800da30 <USBD_SetConfig+0x90>
 800d9dc:	e075      	b.n	800daca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d9de:	4b44      	ldr	r3, [pc, #272]	; (800daf0 <USBD_SetConfig+0x150>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d020      	beq.n	800da28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d9e6:	4b42      	ldr	r3, [pc, #264]	; (800daf0 <USBD_SetConfig+0x150>)
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d9f0:	4b3f      	ldr	r3, [pc, #252]	; (800daf0 <USBD_SetConfig+0x150>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7fe ffbd 	bl	800c976 <USBD_SetClassConfig>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f962 	bl	800dcd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2202      	movs	r2, #2
 800da12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da16:	e065      	b.n	800dae4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 fa25 	bl	800de68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2203      	movs	r2, #3
 800da22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da26:	e05d      	b.n	800dae4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 fa1d 	bl	800de68 <USBD_CtlSendStatus>
      break;
 800da2e:	e059      	b.n	800dae4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da30:	4b2f      	ldr	r3, [pc, #188]	; (800daf0 <USBD_SetConfig+0x150>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d112      	bne.n	800da5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800da40:	4b2b      	ldr	r3, [pc, #172]	; (800daf0 <USBD_SetConfig+0x150>)
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	461a      	mov	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da4a:	4b29      	ldr	r3, [pc, #164]	; (800daf0 <USBD_SetConfig+0x150>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	4619      	mov	r1, r3
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7fe ffac 	bl	800c9ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 fa06 	bl	800de68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da5c:	e042      	b.n	800dae4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800da5e:	4b24      	ldr	r3, [pc, #144]	; (800daf0 <USBD_SetConfig+0x150>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d02a      	beq.n	800dac2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	b2db      	uxtb	r3, r3
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7fe ff9a 	bl	800c9ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800da7a:	4b1d      	ldr	r3, [pc, #116]	; (800daf0 <USBD_SetConfig+0x150>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	461a      	mov	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da84:	4b1a      	ldr	r3, [pc, #104]	; (800daf0 <USBD_SetConfig+0x150>)
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	4619      	mov	r1, r3
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7fe ff73 	bl	800c976 <USBD_SetClassConfig>
 800da90:	4603      	mov	r3, r0
 800da92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800da94:	7bfb      	ldrb	r3, [r7, #15]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00f      	beq.n	800daba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800da9a:	6839      	ldr	r1, [r7, #0]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f918 	bl	800dcd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7fe ff7f 	bl	800c9ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2202      	movs	r2, #2
 800dab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dab8:	e014      	b.n	800dae4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f9d4 	bl	800de68 <USBD_CtlSendStatus>
      break;
 800dac0:	e010      	b.n	800dae4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f9d0 	bl	800de68 <USBD_CtlSendStatus>
      break;
 800dac8:	e00c      	b.n	800dae4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 f900 	bl	800dcd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dad2:	4b07      	ldr	r3, [pc, #28]	; (800daf0 <USBD_SetConfig+0x150>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	4619      	mov	r1, r3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7fe ff68 	bl	800c9ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dade:	2303      	movs	r3, #3
 800dae0:	73fb      	strb	r3, [r7, #15]
      break;
 800dae2:	bf00      	nop
  }

  return ret;
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	2000bcd4 	.word	0x2000bcd4

0800daf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	88db      	ldrh	r3, [r3, #6]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d004      	beq.n	800db10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db06:	6839      	ldr	r1, [r7, #0]
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 f8e2 	bl	800dcd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db0e:	e023      	b.n	800db58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db16:	b2db      	uxtb	r3, r3
 800db18:	2b02      	cmp	r3, #2
 800db1a:	dc02      	bgt.n	800db22 <USBD_GetConfig+0x2e>
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	dc03      	bgt.n	800db28 <USBD_GetConfig+0x34>
 800db20:	e015      	b.n	800db4e <USBD_GetConfig+0x5a>
 800db22:	2b03      	cmp	r3, #3
 800db24:	d00b      	beq.n	800db3e <USBD_GetConfig+0x4a>
 800db26:	e012      	b.n	800db4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	3308      	adds	r3, #8
 800db32:	2201      	movs	r2, #1
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 f93c 	bl	800ddb4 <USBD_CtlSendData>
        break;
 800db3c:	e00c      	b.n	800db58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	3304      	adds	r3, #4
 800db42:	2201      	movs	r2, #1
 800db44:	4619      	mov	r1, r3
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 f934 	bl	800ddb4 <USBD_CtlSendData>
        break;
 800db4c:	e004      	b.n	800db58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 f8be 	bl	800dcd2 <USBD_CtlError>
        break;
 800db56:	bf00      	nop
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db70:	b2db      	uxtb	r3, r3
 800db72:	3b01      	subs	r3, #1
 800db74:	2b02      	cmp	r3, #2
 800db76:	d81e      	bhi.n	800dbb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	88db      	ldrh	r3, [r3, #6]
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	d004      	beq.n	800db8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f000 f8a5 	bl	800dcd2 <USBD_CtlError>
        break;
 800db88:	e01a      	b.n	800dbc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2201      	movs	r2, #1
 800db8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800db96:	2b00      	cmp	r3, #0
 800db98:	d005      	beq.n	800dba6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	f043 0202 	orr.w	r2, r3, #2
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	330c      	adds	r3, #12
 800dbaa:	2202      	movs	r2, #2
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f900 	bl	800ddb4 <USBD_CtlSendData>
      break;
 800dbb4:	e004      	b.n	800dbc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dbb6:	6839      	ldr	r1, [r7, #0]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 f88a 	bl	800dcd2 <USBD_CtlError>
      break;
 800dbbe:	bf00      	nop
  }
}
 800dbc0:	bf00      	nop
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	885b      	ldrh	r3, [r3, #2]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d107      	bne.n	800dbea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2201      	movs	r2, #1
 800dbde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f940 	bl	800de68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dbe8:	e013      	b.n	800dc12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	885b      	ldrh	r3, [r3, #2]
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	d10b      	bne.n	800dc0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	889b      	ldrh	r3, [r3, #4]
 800dbf6:	0a1b      	lsrs	r3, r3, #8
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	b2da      	uxtb	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f930 	bl	800de68 <USBD_CtlSendStatus>
}
 800dc08:	e003      	b.n	800dc12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc0a:	6839      	ldr	r1, [r7, #0]
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f860 	bl	800dcd2 <USBD_CtlError>
}
 800dc12:	bf00      	nop
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d80b      	bhi.n	800dc4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	885b      	ldrh	r3, [r3, #2]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d10c      	bne.n	800dc54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f910 	bl	800de68 <USBD_CtlSendStatus>
      }
      break;
 800dc48:	e004      	b.n	800dc54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f840 	bl	800dcd2 <USBD_CtlError>
      break;
 800dc52:	e000      	b.n	800dc56 <USBD_ClrFeature+0x3c>
      break;
 800dc54:	bf00      	nop
  }
}
 800dc56:	bf00      	nop
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	781a      	ldrb	r2, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3301      	adds	r3, #1
 800dc78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	3301      	adds	r3, #1
 800dc86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f7ff fa17 	bl	800d0bc <SWAPBYTE>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	461a      	mov	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f7ff fa0a 	bl	800d0bc <SWAPBYTE>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	461a      	mov	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7ff f9fd 	bl	800d0bc <SWAPBYTE>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	80da      	strh	r2, [r3, #6]
}
 800dcca:	bf00      	nop
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcdc:	2180      	movs	r1, #128	; 0x80
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f003 fae6 	bl	80112b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dce4:	2100      	movs	r1, #0
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f003 fae2 	bl	80112b0 <USBD_LL_StallEP>
}
 800dcec:	bf00      	nop
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd00:	2300      	movs	r3, #0
 800dd02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d036      	beq.n	800dd78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dd0e:	6938      	ldr	r0, [r7, #16]
 800dd10:	f000 f836 	bl	800dd80 <USBD_GetLen>
 800dd14:	4603      	mov	r3, r0
 800dd16:	3301      	adds	r3, #1
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	005b      	lsls	r3, r3, #1
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dd22:	7dfb      	ldrb	r3, [r7, #23]
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	4413      	add	r3, r2
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	7812      	ldrb	r2, [r2, #0]
 800dd2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
 800dd30:	3301      	adds	r3, #1
 800dd32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dd34:	7dfb      	ldrb	r3, [r7, #23]
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	4413      	add	r3, r2
 800dd3a:	2203      	movs	r2, #3
 800dd3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
 800dd40:	3301      	adds	r3, #1
 800dd42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dd44:	e013      	b.n	800dd6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dd46:	7dfb      	ldrb	r3, [r7, #23]
 800dd48:	68ba      	ldr	r2, [r7, #8]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	693a      	ldr	r2, [r7, #16]
 800dd4e:	7812      	ldrb	r2, [r2, #0]
 800dd50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	3301      	adds	r3, #1
 800dd56:	613b      	str	r3, [r7, #16]
    idx++;
 800dd58:	7dfb      	ldrb	r3, [r7, #23]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	4413      	add	r3, r2
 800dd64:	2200      	movs	r2, #0
 800dd66:	701a      	strb	r2, [r3, #0]
    idx++;
 800dd68:	7dfb      	ldrb	r3, [r7, #23]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1e7      	bne.n	800dd46 <USBD_GetString+0x52>
 800dd76:	e000      	b.n	800dd7a <USBD_GetString+0x86>
    return;
 800dd78:	bf00      	nop
  }
}
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dd90:	e005      	b.n	800dd9e <USBD_GetLen+0x1e>
  {
    len++;
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	3301      	adds	r3, #1
 800dd96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1f5      	bne.n	800dd92 <USBD_GetLen+0x12>
  }

  return len;
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3714      	adds	r7, #20
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2202      	movs	r2, #2
 800ddc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	2100      	movs	r1, #0
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f003 faf1 	bl	80113c2 <USBD_LL_Transmit>

  return USBD_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b084      	sub	sp, #16
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	60b9      	str	r1, [r7, #8]
 800ddf4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f003 fae0 	bl	80113c2 <USBD_LL_Transmit>

  return USBD_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2203      	movs	r2, #3
 800de1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	2100      	movs	r1, #0
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f003 fae4 	bl	8011404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de3c:	2300      	movs	r3, #0
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b084      	sub	sp, #16
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	68ba      	ldr	r2, [r7, #8]
 800de56:	2100      	movs	r1, #0
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f003 fad3 	bl	8011404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2204      	movs	r2, #4
 800de74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800de78:	2300      	movs	r3, #0
 800de7a:	2200      	movs	r2, #0
 800de7c:	2100      	movs	r1, #0
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f003 fa9f 	bl	80113c2 <USBD_LL_Transmit>

  return USBD_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b082      	sub	sp, #8
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2205      	movs	r2, #5
 800de9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de9e:	2300      	movs	r3, #0
 800dea0:	2200      	movs	r2, #0
 800dea2:	2100      	movs	r1, #0
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f003 faad 	bl	8011404 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800deb4:	b480      	push	{r7}
 800deb6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800deb8:	bf00      	nop
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
	...

0800dec4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800deca:	f3ef 8305 	mrs	r3, IPSR
 800dece:	60bb      	str	r3, [r7, #8]
  return(result);
 800ded0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10f      	bne.n	800def6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ded6:	f3ef 8310 	mrs	r3, PRIMASK
 800deda:	607b      	str	r3, [r7, #4]
  return(result);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d105      	bne.n	800deee <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dee2:	f3ef 8311 	mrs	r3, BASEPRI
 800dee6:	603b      	str	r3, [r7, #0]
  return(result);
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d007      	beq.n	800defe <osKernelInitialize+0x3a>
 800deee:	4b0e      	ldr	r3, [pc, #56]	; (800df28 <osKernelInitialize+0x64>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b02      	cmp	r3, #2
 800def4:	d103      	bne.n	800defe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800def6:	f06f 0305 	mvn.w	r3, #5
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	e00c      	b.n	800df18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800defe:	4b0a      	ldr	r3, [pc, #40]	; (800df28 <osKernelInitialize+0x64>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d105      	bne.n	800df12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800df06:	4b08      	ldr	r3, [pc, #32]	; (800df28 <osKernelInitialize+0x64>)
 800df08:	2201      	movs	r2, #1
 800df0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	60fb      	str	r3, [r7, #12]
 800df10:	e002      	b.n	800df18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800df12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800df18:	68fb      	ldr	r3, [r7, #12]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3714      	adds	r7, #20
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	2000bcd8 	.word	0x2000bcd8

0800df2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df32:	f3ef 8305 	mrs	r3, IPSR
 800df36:	60bb      	str	r3, [r7, #8]
  return(result);
 800df38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10f      	bne.n	800df5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df3e:	f3ef 8310 	mrs	r3, PRIMASK
 800df42:	607b      	str	r3, [r7, #4]
  return(result);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d105      	bne.n	800df56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df4a:	f3ef 8311 	mrs	r3, BASEPRI
 800df4e:	603b      	str	r3, [r7, #0]
  return(result);
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d007      	beq.n	800df66 <osKernelStart+0x3a>
 800df56:	4b0f      	ldr	r3, [pc, #60]	; (800df94 <osKernelStart+0x68>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d103      	bne.n	800df66 <osKernelStart+0x3a>
    stat = osErrorISR;
 800df5e:	f06f 0305 	mvn.w	r3, #5
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	e010      	b.n	800df88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800df66:	4b0b      	ldr	r3, [pc, #44]	; (800df94 <osKernelStart+0x68>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d109      	bne.n	800df82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800df6e:	f7ff ffa1 	bl	800deb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800df72:	4b08      	ldr	r3, [pc, #32]	; (800df94 <osKernelStart+0x68>)
 800df74:	2202      	movs	r2, #2
 800df76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800df78:	f001 f8b4 	bl	800f0e4 <vTaskStartScheduler>
      stat = osOK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	e002      	b.n	800df88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800df82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800df88:	68fb      	ldr	r3, [r7, #12]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	2000bcd8 	.word	0x2000bcd8

0800df98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800df98:	b580      	push	{r7, lr}
 800df9a:	b090      	sub	sp, #64	; 0x40
 800df9c:	af04      	add	r7, sp, #16
 800df9e:	60f8      	str	r0, [r7, #12]
 800dfa0:	60b9      	str	r1, [r7, #8]
 800dfa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfa8:	f3ef 8305 	mrs	r3, IPSR
 800dfac:	61fb      	str	r3, [r7, #28]
  return(result);
 800dfae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f040 808f 	bne.w	800e0d4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfb6:	f3ef 8310 	mrs	r3, PRIMASK
 800dfba:	61bb      	str	r3, [r7, #24]
  return(result);
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d105      	bne.n	800dfce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfc2:	f3ef 8311 	mrs	r3, BASEPRI
 800dfc6:	617b      	str	r3, [r7, #20]
  return(result);
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <osThreadNew+0x3e>
 800dfce:	4b44      	ldr	r3, [pc, #272]	; (800e0e0 <osThreadNew+0x148>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2b02      	cmp	r3, #2
 800dfd4:	d07e      	beq.n	800e0d4 <osThreadNew+0x13c>
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d07b      	beq.n	800e0d4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800dfdc:	2380      	movs	r3, #128	; 0x80
 800dfde:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800dfe0:	2318      	movs	r3, #24
 800dfe2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800dfe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d045      	beq.n	800e080 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <osThreadNew+0x6a>
        name = attr->name;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	2b00      	cmp	r3, #0
 800e014:	d008      	beq.n	800e028 <osThreadNew+0x90>
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	2b38      	cmp	r3, #56	; 0x38
 800e01a:	d805      	bhi.n	800e028 <osThreadNew+0x90>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	f003 0301 	and.w	r3, r3, #1
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <osThreadNew+0x94>
        return (NULL);
 800e028:	2300      	movs	r3, #0
 800e02a:	e054      	b.n	800e0d6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	695b      	ldr	r3, [r3, #20]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d003      	beq.n	800e03c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	695b      	ldr	r3, [r3, #20]
 800e038:	089b      	lsrs	r3, r3, #2
 800e03a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00e      	beq.n	800e062 <osThreadNew+0xca>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	2b5b      	cmp	r3, #91	; 0x5b
 800e04a:	d90a      	bls.n	800e062 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e050:	2b00      	cmp	r3, #0
 800e052:	d006      	beq.n	800e062 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	695b      	ldr	r3, [r3, #20]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d002      	beq.n	800e062 <osThreadNew+0xca>
        mem = 1;
 800e05c:	2301      	movs	r3, #1
 800e05e:	623b      	str	r3, [r7, #32]
 800e060:	e010      	b.n	800e084 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d10c      	bne.n	800e084 <osThreadNew+0xec>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d108      	bne.n	800e084 <osThreadNew+0xec>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d104      	bne.n	800e084 <osThreadNew+0xec>
          mem = 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	623b      	str	r3, [r7, #32]
 800e07e:	e001      	b.n	800e084 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e080:	2300      	movs	r3, #0
 800e082:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d110      	bne.n	800e0ac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e092:	9202      	str	r2, [sp, #8]
 800e094:	9301      	str	r3, [sp, #4]
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e09e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f000 fe3f 	bl	800ed24 <xTaskCreateStatic>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	613b      	str	r3, [r7, #16]
 800e0aa:	e013      	b.n	800e0d4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e0ac:	6a3b      	ldr	r3, [r7, #32]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d110      	bne.n	800e0d4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	f107 0310 	add.w	r3, r7, #16
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f000 fe90 	bl	800edea <xTaskCreate>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d001      	beq.n	800e0d4 <osThreadNew+0x13c>
          hTask = NULL;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e0d4:	693b      	ldr	r3, [r7, #16]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3730      	adds	r7, #48	; 0x30
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	2000bcd8 	.word	0x2000bcd8

0800e0e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0ec:	f3ef 8305 	mrs	r3, IPSR
 800e0f0:	613b      	str	r3, [r7, #16]
  return(result);
 800e0f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10f      	bne.n	800e118 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800e0fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d105      	bne.n	800e110 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e104:	f3ef 8311 	mrs	r3, BASEPRI
 800e108:	60bb      	str	r3, [r7, #8]
  return(result);
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d007      	beq.n	800e120 <osDelay+0x3c>
 800e110:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <osDelay+0x58>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b02      	cmp	r3, #2
 800e116:	d103      	bne.n	800e120 <osDelay+0x3c>
    stat = osErrorISR;
 800e118:	f06f 0305 	mvn.w	r3, #5
 800e11c:	617b      	str	r3, [r7, #20]
 800e11e:	e007      	b.n	800e130 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e120:	2300      	movs	r3, #0
 800e122:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 ffa4 	bl	800f078 <vTaskDelay>
    }
  }

  return (stat);
 800e130:	697b      	ldr	r3, [r7, #20]
}
 800e132:	4618      	mov	r0, r3
 800e134:	3718      	adds	r7, #24
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	2000bcd8 	.word	0x2000bcd8

0800e140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e140:	b480      	push	{r7}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4a07      	ldr	r2, [pc, #28]	; (800e16c <vApplicationGetIdleTaskMemory+0x2c>)
 800e150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	4a06      	ldr	r2, [pc, #24]	; (800e170 <vApplicationGetIdleTaskMemory+0x30>)
 800e156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2280      	movs	r2, #128	; 0x80
 800e15c:	601a      	str	r2, [r3, #0]
}
 800e15e:	bf00      	nop
 800e160:	3714      	adds	r7, #20
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	2000bcdc 	.word	0x2000bcdc
 800e170:	2000bd38 	.word	0x2000bd38

0800e174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4a07      	ldr	r2, [pc, #28]	; (800e1a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800e184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	4a06      	ldr	r2, [pc, #24]	; (800e1a4 <vApplicationGetTimerTaskMemory+0x30>)
 800e18a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e192:	601a      	str	r2, [r3, #0]
}
 800e194:	bf00      	nop
 800e196:	3714      	adds	r7, #20
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	2000bf38 	.word	0x2000bf38
 800e1a4:	2000bf94 	.word	0x2000bf94

0800e1a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f103 0208 	add.w	r2, r3, #8
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f103 0208 	add.w	r2, r3, #8
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f103 0208 	add.w	r2, r3, #8
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e1f6:	bf00      	nop
 800e1f8:	370c      	adds	r7, #12
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr

0800e202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e202:	b480      	push	{r7}
 800e204:	b085      	sub	sp, #20
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	689a      	ldr	r2, [r3, #8]
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	683a      	ldr	r2, [r7, #0]
 800e22c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	601a      	str	r2, [r3, #0]
}
 800e23e:	bf00      	nop
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e24a:	b480      	push	{r7}
 800e24c:	b085      	sub	sp, #20
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e260:	d103      	bne.n	800e26a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	e00c      	b.n	800e284 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3308      	adds	r3, #8
 800e26e:	60fb      	str	r3, [r7, #12]
 800e270:	e002      	b.n	800e278 <vListInsert+0x2e>
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	429a      	cmp	r2, r3
 800e282:	d2f6      	bcs.n	800e272 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	683a      	ldr	r2, [r7, #0]
 800e29e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	1c5a      	adds	r2, r3, #1
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	601a      	str	r2, [r3, #0]
}
 800e2b0:	bf00      	nop
 800e2b2:	3714      	adds	r7, #20
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	6892      	ldr	r2, [r2, #8]
 800e2d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	6852      	ldr	r2, [r2, #4]
 800e2dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d103      	bne.n	800e2f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	689a      	ldr	r2, [r3, #8]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	1e5a      	subs	r2, r3, #1
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d10c      	bne.n	800e33e <xQueueGenericReset+0x2e>
	__asm volatile
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	b672      	cpsid	i
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	b662      	cpsie	i
 800e338:	60bb      	str	r3, [r7, #8]
}
 800e33a:	bf00      	nop
 800e33c:	e7fe      	b.n	800e33c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e33e:	f002 f8a5 	bl	801048c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e34a:	68f9      	ldr	r1, [r7, #12]
 800e34c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e34e:	fb01 f303 	mul.w	r3, r1, r3
 800e352:	441a      	add	r2, r3
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2200      	movs	r2, #0
 800e35c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e36e:	3b01      	subs	r3, #1
 800e370:	68f9      	ldr	r1, [r7, #12]
 800e372:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e374:	fb01 f303 	mul.w	r3, r1, r3
 800e378:	441a      	add	r2, r3
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	22ff      	movs	r2, #255	; 0xff
 800e382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	22ff      	movs	r2, #255	; 0xff
 800e38a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d114      	bne.n	800e3be <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	691b      	ldr	r3, [r3, #16]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d01a      	beq.n	800e3d2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3310      	adds	r3, #16
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f001 f937 	bl	800f614 <xTaskRemoveFromEventList>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d012      	beq.n	800e3d2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e3ac:	4b0c      	ldr	r3, [pc, #48]	; (800e3e0 <xQueueGenericReset+0xd0>)
 800e3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b2:	601a      	str	r2, [r3, #0]
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	e009      	b.n	800e3d2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	3310      	adds	r3, #16
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff fef0 	bl	800e1a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	3324      	adds	r3, #36	; 0x24
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7ff feeb 	bl	800e1a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e3d2:	f002 f88f 	bl	80104f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e3d6:	2301      	movs	r3, #1
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08e      	sub	sp, #56	; 0x38
 800e3e8:	af02      	add	r7, sp, #8
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
 800e3f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10c      	bne.n	800e412 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	b672      	cpsid	i
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	b662      	cpsie	i
 800e40c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e40e:	bf00      	nop
 800e410:	e7fe      	b.n	800e410 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10c      	bne.n	800e432 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	b672      	cpsid	i
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	b662      	cpsie	i
 800e42c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e42e:	bf00      	nop
 800e430:	e7fe      	b.n	800e430 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <xQueueGenericCreateStatic+0x5a>
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <xQueueGenericCreateStatic+0x5e>
 800e43e:	2301      	movs	r3, #1
 800e440:	e000      	b.n	800e444 <xQueueGenericCreateStatic+0x60>
 800e442:	2300      	movs	r3, #0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10c      	bne.n	800e462 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	b672      	cpsid	i
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	b662      	cpsie	i
 800e45c:	623b      	str	r3, [r7, #32]
}
 800e45e:	bf00      	nop
 800e460:	e7fe      	b.n	800e460 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <xQueueGenericCreateStatic+0x8a>
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d101      	bne.n	800e472 <xQueueGenericCreateStatic+0x8e>
 800e46e:	2301      	movs	r3, #1
 800e470:	e000      	b.n	800e474 <xQueueGenericCreateStatic+0x90>
 800e472:	2300      	movs	r3, #0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10c      	bne.n	800e492 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	b672      	cpsid	i
 800e47e:	f383 8811 	msr	BASEPRI, r3
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	b662      	cpsie	i
 800e48c:	61fb      	str	r3, [r7, #28]
}
 800e48e:	bf00      	nop
 800e490:	e7fe      	b.n	800e490 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e492:	2350      	movs	r3, #80	; 0x50
 800e494:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	2b50      	cmp	r3, #80	; 0x50
 800e49a:	d00c      	beq.n	800e4b6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	b672      	cpsid	i
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	b662      	cpsie	i
 800e4b0:	61bb      	str	r3, [r7, #24]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e4b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00d      	beq.n	800e4de <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e4ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	68b9      	ldr	r1, [r7, #8]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f000 f805 	bl	800e4e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3730      	adds	r7, #48	; 0x30
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d103      	bne.n	800e504 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	601a      	str	r2, [r3, #0]
 800e502:	e002      	b.n	800e50a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e516:	2101      	movs	r1, #1
 800e518:	69b8      	ldr	r0, [r7, #24]
 800e51a:	f7ff fef9 	bl	800e310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	78fa      	ldrb	r2, [r7, #3]
 800e522:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e526:	bf00      	nop
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08e      	sub	sp, #56	; 0x38
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	607a      	str	r2, [r7, #4]
 800e53c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e53e:	2300      	movs	r3, #0
 800e540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d10c      	bne.n	800e566 <xQueueGenericSend+0x36>
	__asm volatile
 800e54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e550:	b672      	cpsid	i
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	b662      	cpsie	i
 800e560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e562:	bf00      	nop
 800e564:	e7fe      	b.n	800e564 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d103      	bne.n	800e574 <xQueueGenericSend+0x44>
 800e56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e570:	2b00      	cmp	r3, #0
 800e572:	d101      	bne.n	800e578 <xQueueGenericSend+0x48>
 800e574:	2301      	movs	r3, #1
 800e576:	e000      	b.n	800e57a <xQueueGenericSend+0x4a>
 800e578:	2300      	movs	r3, #0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10c      	bne.n	800e598 <xQueueGenericSend+0x68>
	__asm volatile
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	b672      	cpsid	i
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	b662      	cpsie	i
 800e592:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e594:	bf00      	nop
 800e596:	e7fe      	b.n	800e596 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d103      	bne.n	800e5a6 <xQueueGenericSend+0x76>
 800e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d101      	bne.n	800e5aa <xQueueGenericSend+0x7a>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e000      	b.n	800e5ac <xQueueGenericSend+0x7c>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d10c      	bne.n	800e5ca <xQueueGenericSend+0x9a>
	__asm volatile
 800e5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b4:	b672      	cpsid	i
 800e5b6:	f383 8811 	msr	BASEPRI, r3
 800e5ba:	f3bf 8f6f 	isb	sy
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	b662      	cpsie	i
 800e5c4:	623b      	str	r3, [r7, #32]
}
 800e5c6:	bf00      	nop
 800e5c8:	e7fe      	b.n	800e5c8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5ca:	f001 fa11 	bl	800f9f0 <xTaskGetSchedulerState>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <xQueueGenericSend+0xaa>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <xQueueGenericSend+0xae>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <xQueueGenericSend+0xb0>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d10c      	bne.n	800e5fe <xQueueGenericSend+0xce>
	__asm volatile
 800e5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e8:	b672      	cpsid	i
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	b662      	cpsie	i
 800e5f8:	61fb      	str	r3, [r7, #28]
}
 800e5fa:	bf00      	nop
 800e5fc:	e7fe      	b.n	800e5fc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5fe:	f001 ff45 	bl	801048c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d302      	bcc.n	800e614 <xQueueGenericSend+0xe4>
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	2b02      	cmp	r3, #2
 800e612:	d129      	bne.n	800e668 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e614:	683a      	ldr	r2, [r7, #0]
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e61a:	f000 fa15 	bl	800ea48 <prvCopyDataToQueue>
 800e61e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e624:	2b00      	cmp	r3, #0
 800e626:	d010      	beq.n	800e64a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	3324      	adds	r3, #36	; 0x24
 800e62c:	4618      	mov	r0, r3
 800e62e:	f000 fff1 	bl	800f614 <xTaskRemoveFromEventList>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d013      	beq.n	800e660 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e638:	4b3f      	ldr	r3, [pc, #252]	; (800e738 <xQueueGenericSend+0x208>)
 800e63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e63e:	601a      	str	r2, [r3, #0]
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	e00a      	b.n	800e660 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d007      	beq.n	800e660 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e650:	4b39      	ldr	r3, [pc, #228]	; (800e738 <xQueueGenericSend+0x208>)
 800e652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e656:	601a      	str	r2, [r3, #0]
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e660:	f001 ff48 	bl	80104f4 <vPortExitCritical>
				return pdPASS;
 800e664:	2301      	movs	r3, #1
 800e666:	e063      	b.n	800e730 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d103      	bne.n	800e676 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e66e:	f001 ff41 	bl	80104f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e672:	2300      	movs	r3, #0
 800e674:	e05c      	b.n	800e730 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d106      	bne.n	800e68a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e67c:	f107 0314 	add.w	r3, r7, #20
 800e680:	4618      	mov	r0, r3
 800e682:	f001 f855 	bl	800f730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e686:	2301      	movs	r3, #1
 800e688:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e68a:	f001 ff33 	bl	80104f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e68e:	f000 fd93 	bl	800f1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e692:	f001 fefb 	bl	801048c <vPortEnterCritical>
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e69c:	b25b      	sxtb	r3, r3
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6a2:	d103      	bne.n	800e6ac <xQueueGenericSend+0x17c>
 800e6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6b2:	b25b      	sxtb	r3, r3
 800e6b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6b8:	d103      	bne.n	800e6c2 <xQueueGenericSend+0x192>
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6c2:	f001 ff17 	bl	80104f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6c6:	1d3a      	adds	r2, r7, #4
 800e6c8:	f107 0314 	add.w	r3, r7, #20
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f001 f844 	bl	800f75c <xTaskCheckForTimeOut>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d124      	bne.n	800e724 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6dc:	f000 faac 	bl	800ec38 <prvIsQueueFull>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d018      	beq.n	800e718 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	3310      	adds	r3, #16
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f000 ff3c 	bl	800f56c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6f6:	f000 fa37 	bl	800eb68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e6fa:	f000 fd6b 	bl	800f1d4 <xTaskResumeAll>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	f47f af7c 	bne.w	800e5fe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e706:	4b0c      	ldr	r3, [pc, #48]	; (800e738 <xQueueGenericSend+0x208>)
 800e708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	f3bf 8f6f 	isb	sy
 800e716:	e772      	b.n	800e5fe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e71a:	f000 fa25 	bl	800eb68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e71e:	f000 fd59 	bl	800f1d4 <xTaskResumeAll>
 800e722:	e76c      	b.n	800e5fe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e726:	f000 fa1f 	bl	800eb68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e72a:	f000 fd53 	bl	800f1d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e72e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e730:	4618      	mov	r0, r3
 800e732:	3738      	adds	r7, #56	; 0x38
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed04 	.word	0xe000ed04

0800e73c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08e      	sub	sp, #56	; 0x38
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
 800e748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10c      	bne.n	800e76e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	b672      	cpsid	i
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	b662      	cpsie	i
 800e768:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e76a:	bf00      	nop
 800e76c:	e7fe      	b.n	800e76c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d103      	bne.n	800e77c <xQueueGenericSendFromISR+0x40>
 800e774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d101      	bne.n	800e780 <xQueueGenericSendFromISR+0x44>
 800e77c:	2301      	movs	r3, #1
 800e77e:	e000      	b.n	800e782 <xQueueGenericSendFromISR+0x46>
 800e780:	2300      	movs	r3, #0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10c      	bne.n	800e7a0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78a:	b672      	cpsid	i
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	b662      	cpsie	i
 800e79a:	623b      	str	r3, [r7, #32]
}
 800e79c:	bf00      	nop
 800e79e:	e7fe      	b.n	800e79e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d103      	bne.n	800e7ae <xQueueGenericSendFromISR+0x72>
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d101      	bne.n	800e7b2 <xQueueGenericSendFromISR+0x76>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e000      	b.n	800e7b4 <xQueueGenericSendFromISR+0x78>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d10c      	bne.n	800e7d2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	b672      	cpsid	i
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	b662      	cpsie	i
 800e7cc:	61fb      	str	r3, [r7, #28]
}
 800e7ce:	bf00      	nop
 800e7d0:	e7fe      	b.n	800e7d0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7d2:	f001 ff43 	bl	801065c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7d6:	f3ef 8211 	mrs	r2, BASEPRI
 800e7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7de:	b672      	cpsid	i
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	b662      	cpsie	i
 800e7ee:	61ba      	str	r2, [r7, #24]
 800e7f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e7f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d302      	bcc.n	800e808 <xQueueGenericSendFromISR+0xcc>
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	2b02      	cmp	r3, #2
 800e806:	d12c      	bne.n	800e862 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e812:	683a      	ldr	r2, [r7, #0]
 800e814:	68b9      	ldr	r1, [r7, #8]
 800e816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e818:	f000 f916 	bl	800ea48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e81c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e824:	d112      	bne.n	800e84c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d016      	beq.n	800e85c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	3324      	adds	r3, #36	; 0x24
 800e832:	4618      	mov	r0, r3
 800e834:	f000 feee 	bl	800f614 <xTaskRemoveFromEventList>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00e      	beq.n	800e85c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00b      	beq.n	800e85c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	e007      	b.n	800e85c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e84c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e850:	3301      	adds	r3, #1
 800e852:	b2db      	uxtb	r3, r3
 800e854:	b25a      	sxtb	r2, r3
 800e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e85c:	2301      	movs	r3, #1
 800e85e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e860:	e001      	b.n	800e866 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e862:	2300      	movs	r3, #0
 800e864:	637b      	str	r3, [r7, #52]	; 0x34
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e870:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e874:	4618      	mov	r0, r3
 800e876:	3738      	adds	r7, #56	; 0x38
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08c      	sub	sp, #48	; 0x30
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e888:	2300      	movs	r3, #0
 800e88a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10c      	bne.n	800e8b0 <xQueueReceive+0x34>
	__asm volatile
 800e896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89a:	b672      	cpsid	i
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	b662      	cpsie	i
 800e8aa:	623b      	str	r3, [r7, #32]
}
 800e8ac:	bf00      	nop
 800e8ae:	e7fe      	b.n	800e8ae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d103      	bne.n	800e8be <xQueueReceive+0x42>
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d101      	bne.n	800e8c2 <xQueueReceive+0x46>
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e000      	b.n	800e8c4 <xQueueReceive+0x48>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10c      	bne.n	800e8e2 <xQueueReceive+0x66>
	__asm volatile
 800e8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8cc:	b672      	cpsid	i
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	b662      	cpsie	i
 800e8dc:	61fb      	str	r3, [r7, #28]
}
 800e8de:	bf00      	nop
 800e8e0:	e7fe      	b.n	800e8e0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8e2:	f001 f885 	bl	800f9f0 <xTaskGetSchedulerState>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d102      	bne.n	800e8f2 <xQueueReceive+0x76>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <xQueueReceive+0x7a>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e000      	b.n	800e8f8 <xQueueReceive+0x7c>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d10c      	bne.n	800e916 <xQueueReceive+0x9a>
	__asm volatile
 800e8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e900:	b672      	cpsid	i
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	b662      	cpsie	i
 800e910:	61bb      	str	r3, [r7, #24]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e916:	f001 fdb9 	bl	801048c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	2b00      	cmp	r3, #0
 800e924:	d01f      	beq.n	800e966 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e926:	68b9      	ldr	r1, [r7, #8]
 800e928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e92a:	f000 f8f7 	bl	800eb1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e930:	1e5a      	subs	r2, r3, #1
 800e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e934:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	691b      	ldr	r3, [r3, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00f      	beq.n	800e95e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e940:	3310      	adds	r3, #16
 800e942:	4618      	mov	r0, r3
 800e944:	f000 fe66 	bl	800f614 <xTaskRemoveFromEventList>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d007      	beq.n	800e95e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e94e:	4b3d      	ldr	r3, [pc, #244]	; (800ea44 <xQueueReceive+0x1c8>)
 800e950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e95e:	f001 fdc9 	bl	80104f4 <vPortExitCritical>
				return pdPASS;
 800e962:	2301      	movs	r3, #1
 800e964:	e069      	b.n	800ea3a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d103      	bne.n	800e974 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e96c:	f001 fdc2 	bl	80104f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e970:	2300      	movs	r3, #0
 800e972:	e062      	b.n	800ea3a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d106      	bne.n	800e988 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e97a:	f107 0310 	add.w	r3, r7, #16
 800e97e:	4618      	mov	r0, r3
 800e980:	f000 fed6 	bl	800f730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e984:	2301      	movs	r3, #1
 800e986:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e988:	f001 fdb4 	bl	80104f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e98c:	f000 fc14 	bl	800f1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e990:	f001 fd7c 	bl	801048c <vPortEnterCritical>
 800e994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e99a:	b25b      	sxtb	r3, r3
 800e99c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9a0:	d103      	bne.n	800e9aa <xQueueReceive+0x12e>
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9b0:	b25b      	sxtb	r3, r3
 800e9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9b6:	d103      	bne.n	800e9c0 <xQueueReceive+0x144>
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9c0:	f001 fd98 	bl	80104f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9c4:	1d3a      	adds	r2, r7, #4
 800e9c6:	f107 0310 	add.w	r3, r7, #16
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f000 fec5 	bl	800f75c <xTaskCheckForTimeOut>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d123      	bne.n	800ea20 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9da:	f000 f917 	bl	800ec0c <prvIsQueueEmpty>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d017      	beq.n	800ea14 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e6:	3324      	adds	r3, #36	; 0x24
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 fdbd 	bl	800f56c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9f4:	f000 f8b8 	bl	800eb68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9f8:	f000 fbec 	bl	800f1d4 <xTaskResumeAll>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d189      	bne.n	800e916 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ea02:	4b10      	ldr	r3, [pc, #64]	; (800ea44 <xQueueReceive+0x1c8>)
 800ea04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea08:	601a      	str	r2, [r3, #0]
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	e780      	b.n	800e916 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea16:	f000 f8a7 	bl	800eb68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea1a:	f000 fbdb 	bl	800f1d4 <xTaskResumeAll>
 800ea1e:	e77a      	b.n	800e916 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea22:	f000 f8a1 	bl	800eb68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea26:	f000 fbd5 	bl	800f1d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea2c:	f000 f8ee 	bl	800ec0c <prvIsQueueEmpty>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f43f af6f 	beq.w	800e916 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3730      	adds	r7, #48	; 0x30
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	e000ed04 	.word	0xe000ed04

0800ea48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ea54:	2300      	movs	r3, #0
 800ea56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d10d      	bne.n	800ea82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d14d      	bne.n	800eb0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f000 ffda 	bl	800fa2c <xTaskPriorityDisinherit>
 800ea78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	609a      	str	r2, [r3, #8]
 800ea80:	e043      	b.n	800eb0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d119      	bne.n	800eabc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6858      	ldr	r0, [r3, #4]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea90:	461a      	mov	r2, r3
 800ea92:	68b9      	ldr	r1, [r7, #8]
 800ea94:	f012 f9e3 	bl	8020e5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaa0:	441a      	add	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	685a      	ldr	r2, [r3, #4]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d32b      	bcc.n	800eb0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	605a      	str	r2, [r3, #4]
 800eaba:	e026      	b.n	800eb0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	68d8      	ldr	r0, [r3, #12]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac4:	461a      	mov	r2, r3
 800eac6:	68b9      	ldr	r1, [r7, #8]
 800eac8:	f012 f9c9 	bl	8020e5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	68da      	ldr	r2, [r3, #12]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ead4:	425b      	negs	r3, r3
 800ead6:	441a      	add	r2, r3
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	68da      	ldr	r2, [r3, #12]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d207      	bcs.n	800eaf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	689a      	ldr	r2, [r3, #8]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf0:	425b      	negs	r3, r3
 800eaf2:	441a      	add	r2, r3
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b02      	cmp	r3, #2
 800eafc:	d105      	bne.n	800eb0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	3b01      	subs	r3, #1
 800eb08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	1c5a      	adds	r2, r3, #1
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eb12:	697b      	ldr	r3, [r7, #20]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3718      	adds	r7, #24
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d018      	beq.n	800eb60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68da      	ldr	r2, [r3, #12]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb36:	441a      	add	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68da      	ldr	r2, [r3, #12]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d303      	bcc.n	800eb50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	68d9      	ldr	r1, [r3, #12]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb58:	461a      	mov	r2, r3
 800eb5a:	6838      	ldr	r0, [r7, #0]
 800eb5c:	f012 f97f 	bl	8020e5e <memcpy>
	}
}
 800eb60:	bf00      	nop
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eb70:	f001 fc8c 	bl	801048c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb7c:	e011      	b.n	800eba2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d012      	beq.n	800ebac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	3324      	adds	r3, #36	; 0x24
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 fd42 	bl	800f614 <xTaskRemoveFromEventList>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb96:	f000 fe47 	bl	800f828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb9a:	7bfb      	ldrb	r3, [r7, #15]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dce9      	bgt.n	800eb7e <prvUnlockQueue+0x16>
 800ebaa:	e000      	b.n	800ebae <prvUnlockQueue+0x46>
					break;
 800ebac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	22ff      	movs	r2, #255	; 0xff
 800ebb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ebb6:	f001 fc9d 	bl	80104f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ebba:	f001 fc67 	bl	801048c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebc6:	e011      	b.n	800ebec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d012      	beq.n	800ebf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	3310      	adds	r3, #16
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 fd1d 	bl	800f614 <xTaskRemoveFromEventList>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ebe0:	f000 fe22 	bl	800f828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ebe4:	7bbb      	ldrb	r3, [r7, #14]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	dce9      	bgt.n	800ebc8 <prvUnlockQueue+0x60>
 800ebf4:	e000      	b.n	800ebf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ebf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	22ff      	movs	r2, #255	; 0xff
 800ebfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec00:	f001 fc78 	bl	80104f4 <vPortExitCritical>
}
 800ec04:	bf00      	nop
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec14:	f001 fc3a 	bl	801048c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d102      	bne.n	800ec26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec20:	2301      	movs	r3, #1
 800ec22:	60fb      	str	r3, [r7, #12]
 800ec24:	e001      	b.n	800ec2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec26:	2300      	movs	r3, #0
 800ec28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec2a:	f001 fc63 	bl	80104f4 <vPortExitCritical>

	return xReturn;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec40:	f001 fc24 	bl	801048c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d102      	bne.n	800ec56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec50:	2301      	movs	r3, #1
 800ec52:	60fb      	str	r3, [r7, #12]
 800ec54:	e001      	b.n	800ec5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec56:	2300      	movs	r3, #0
 800ec58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec5a:	f001 fc4b 	bl	80104f4 <vPortExitCritical>

	return xReturn;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec72:	2300      	movs	r3, #0
 800ec74:	60fb      	str	r3, [r7, #12]
 800ec76:	e014      	b.n	800eca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec78:	4a0f      	ldr	r2, [pc, #60]	; (800ecb8 <vQueueAddToRegistry+0x50>)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d10b      	bne.n	800ec9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec84:	490c      	ldr	r1, [pc, #48]	; (800ecb8 <vQueueAddToRegistry+0x50>)
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec8e:	4a0a      	ldr	r2, [pc, #40]	; (800ecb8 <vQueueAddToRegistry+0x50>)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	4413      	add	r3, r2
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec9a:	e006      	b.n	800ecaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	3301      	adds	r3, #1
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2b07      	cmp	r3, #7
 800eca6:	d9e7      	bls.n	800ec78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eca8:	bf00      	nop
 800ecaa:	bf00      	nop
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	2000c394 	.word	0x2000c394

0800ecbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b086      	sub	sp, #24
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eccc:	f001 fbde 	bl	801048c <vPortEnterCritical>
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecd6:	b25b      	sxtb	r3, r3
 800ecd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecdc:	d103      	bne.n	800ece6 <vQueueWaitForMessageRestricted+0x2a>
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecec:	b25b      	sxtb	r3, r3
 800ecee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecf2:	d103      	bne.n	800ecfc <vQueueWaitForMessageRestricted+0x40>
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecfc:	f001 fbfa 	bl	80104f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d106      	bne.n	800ed16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	3324      	adds	r3, #36	; 0x24
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	68b9      	ldr	r1, [r7, #8]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f000 fc51 	bl	800f5b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed16:	6978      	ldr	r0, [r7, #20]
 800ed18:	f7ff ff26 	bl	800eb68 <prvUnlockQueue>
	}
 800ed1c:	bf00      	nop
 800ed1e:	3718      	adds	r7, #24
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08e      	sub	sp, #56	; 0x38
 800ed28:	af04      	add	r7, sp, #16
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10c      	bne.n	800ed52 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ed38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3c:	b672      	cpsid	i
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	b662      	cpsie	i
 800ed4c:	623b      	str	r3, [r7, #32]
}
 800ed4e:	bf00      	nop
 800ed50:	e7fe      	b.n	800ed50 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d10c      	bne.n	800ed72 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ed58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5c:	b672      	cpsid	i
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	b662      	cpsie	i
 800ed6c:	61fb      	str	r3, [r7, #28]
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed72:	235c      	movs	r3, #92	; 0x5c
 800ed74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	2b5c      	cmp	r3, #92	; 0x5c
 800ed7a:	d00c      	beq.n	800ed96 <xTaskCreateStatic+0x72>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	b672      	cpsid	i
 800ed82:	f383 8811 	msr	BASEPRI, r3
 800ed86:	f3bf 8f6f 	isb	sy
 800ed8a:	f3bf 8f4f 	dsb	sy
 800ed8e:	b662      	cpsie	i
 800ed90:	61bb      	str	r3, [r7, #24]
}
 800ed92:	bf00      	nop
 800ed94:	e7fe      	b.n	800ed94 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d01e      	beq.n	800eddc <xTaskCreateStatic+0xb8>
 800ed9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d01b      	beq.n	800eddc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb0:	2202      	movs	r2, #2
 800edb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800edb6:	2300      	movs	r3, #0
 800edb8:	9303      	str	r3, [sp, #12]
 800edba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbc:	9302      	str	r3, [sp, #8]
 800edbe:	f107 0314 	add.w	r3, r7, #20
 800edc2:	9301      	str	r3, [sp, #4]
 800edc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	68b9      	ldr	r1, [r7, #8]
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f000 f850 	bl	800ee74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800edd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edd6:	f000 f8df 	bl	800ef98 <prvAddNewTaskToReadyList>
 800edda:	e001      	b.n	800ede0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800eddc:	2300      	movs	r3, #0
 800edde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ede0:	697b      	ldr	r3, [r7, #20]
	}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3728      	adds	r7, #40	; 0x28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800edea:	b580      	push	{r7, lr}
 800edec:	b08c      	sub	sp, #48	; 0x30
 800edee:	af04      	add	r7, sp, #16
 800edf0:	60f8      	str	r0, [r7, #12]
 800edf2:	60b9      	str	r1, [r7, #8]
 800edf4:	603b      	str	r3, [r7, #0]
 800edf6:	4613      	mov	r3, r2
 800edf8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800edfa:	88fb      	ldrh	r3, [r7, #6]
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4618      	mov	r0, r3
 800ee00:	f001 fc70 	bl	80106e4 <pvPortMalloc>
 800ee04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00e      	beq.n	800ee2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ee0c:	205c      	movs	r0, #92	; 0x5c
 800ee0e:	f001 fc69 	bl	80106e4 <pvPortMalloc>
 800ee12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d003      	beq.n	800ee22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	697a      	ldr	r2, [r7, #20]
 800ee1e:	631a      	str	r2, [r3, #48]	; 0x30
 800ee20:	e005      	b.n	800ee2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ee22:	6978      	ldr	r0, [r7, #20]
 800ee24:	f001 fd28 	bl	8010878 <vPortFree>
 800ee28:	e001      	b.n	800ee2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d017      	beq.n	800ee64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee3c:	88fa      	ldrh	r2, [r7, #6]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	9303      	str	r3, [sp, #12]
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	9302      	str	r3, [sp, #8]
 800ee46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	68b9      	ldr	r1, [r7, #8]
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f000 f80e 	bl	800ee74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee58:	69f8      	ldr	r0, [r7, #28]
 800ee5a:	f000 f89d 	bl	800ef98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	61bb      	str	r3, [r7, #24]
 800ee62:	e002      	b.n	800ee6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee6a:	69bb      	ldr	r3, [r7, #24]
	}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3720      	adds	r7, #32
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b088      	sub	sp, #32
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
 800ee80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	21a5      	movs	r1, #165	; 0xa5
 800ee8e:	f011 ff19 	bl	8020cc4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee96:	6879      	ldr	r1, [r7, #4]
 800ee98:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ee9c:	440b      	add	r3, r1
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	4413      	add	r3, r2
 800eea2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	f023 0307 	bic.w	r3, r3, #7
 800eeaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eeac:	69bb      	ldr	r3, [r7, #24]
 800eeae:	f003 0307 	and.w	r3, r3, #7
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00c      	beq.n	800eed0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	b672      	cpsid	i
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	b662      	cpsie	i
 800eeca:	617b      	str	r3, [r7, #20]
}
 800eecc:	bf00      	nop
 800eece:	e7fe      	b.n	800eece <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d01f      	beq.n	800ef16 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eed6:	2300      	movs	r3, #0
 800eed8:	61fb      	str	r3, [r7, #28]
 800eeda:	e012      	b.n	800ef02 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eedc:	68ba      	ldr	r2, [r7, #8]
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	4413      	add	r3, r2
 800eee2:	7819      	ldrb	r1, [r3, #0]
 800eee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	4413      	add	r3, r2
 800eeea:	3334      	adds	r3, #52	; 0x34
 800eeec:	460a      	mov	r2, r1
 800eeee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	4413      	add	r3, r2
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d006      	beq.n	800ef0a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	3301      	adds	r3, #1
 800ef00:	61fb      	str	r3, [r7, #28]
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	2b0f      	cmp	r3, #15
 800ef06:	d9e9      	bls.n	800eedc <prvInitialiseNewTask+0x68>
 800ef08:	e000      	b.n	800ef0c <prvInitialiseNewTask+0x98>
			{
				break;
 800ef0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef14:	e003      	b.n	800ef1e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef20:	2b37      	cmp	r3, #55	; 0x37
 800ef22:	d901      	bls.n	800ef28 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef24:	2337      	movs	r3, #55	; 0x37
 800ef26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ef28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	2200      	movs	r2, #0
 800ef38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7ff f952 	bl	800e1e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef46:	3318      	adds	r3, #24
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7ff f94d 	bl	800e1e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef66:	2200      	movs	r2, #0
 800ef68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	68f9      	ldr	r1, [r7, #12]
 800ef76:	69b8      	ldr	r0, [r7, #24]
 800ef78:	f001 f97a 	bl	8010270 <pxPortInitialiseStack>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d002      	beq.n	800ef8e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef8e:	bf00      	nop
 800ef90:	3720      	adds	r7, #32
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
	...

0800ef98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800efa0:	f001 fa74 	bl	801048c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800efa4:	4b2d      	ldr	r3, [pc, #180]	; (800f05c <prvAddNewTaskToReadyList+0xc4>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	3301      	adds	r3, #1
 800efaa:	4a2c      	ldr	r2, [pc, #176]	; (800f05c <prvAddNewTaskToReadyList+0xc4>)
 800efac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800efae:	4b2c      	ldr	r3, [pc, #176]	; (800f060 <prvAddNewTaskToReadyList+0xc8>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d109      	bne.n	800efca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800efb6:	4a2a      	ldr	r2, [pc, #168]	; (800f060 <prvAddNewTaskToReadyList+0xc8>)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800efbc:	4b27      	ldr	r3, [pc, #156]	; (800f05c <prvAddNewTaskToReadyList+0xc4>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d110      	bne.n	800efe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800efc4:	f000 fc54 	bl	800f870 <prvInitialiseTaskLists>
 800efc8:	e00d      	b.n	800efe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800efca:	4b26      	ldr	r3, [pc, #152]	; (800f064 <prvAddNewTaskToReadyList+0xcc>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d109      	bne.n	800efe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800efd2:	4b23      	ldr	r3, [pc, #140]	; (800f060 <prvAddNewTaskToReadyList+0xc8>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efdc:	429a      	cmp	r2, r3
 800efde:	d802      	bhi.n	800efe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800efe0:	4a1f      	ldr	r2, [pc, #124]	; (800f060 <prvAddNewTaskToReadyList+0xc8>)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800efe6:	4b20      	ldr	r3, [pc, #128]	; (800f068 <prvAddNewTaskToReadyList+0xd0>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3301      	adds	r3, #1
 800efec:	4a1e      	ldr	r2, [pc, #120]	; (800f068 <prvAddNewTaskToReadyList+0xd0>)
 800efee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eff0:	4b1d      	ldr	r3, [pc, #116]	; (800f068 <prvAddNewTaskToReadyList+0xd0>)
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800effc:	4b1b      	ldr	r3, [pc, #108]	; (800f06c <prvAddNewTaskToReadyList+0xd4>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	429a      	cmp	r2, r3
 800f002:	d903      	bls.n	800f00c <prvAddNewTaskToReadyList+0x74>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f008:	4a18      	ldr	r2, [pc, #96]	; (800f06c <prvAddNewTaskToReadyList+0xd4>)
 800f00a:	6013      	str	r3, [r2, #0]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f010:	4613      	mov	r3, r2
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	4413      	add	r3, r2
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	4a15      	ldr	r2, [pc, #84]	; (800f070 <prvAddNewTaskToReadyList+0xd8>)
 800f01a:	441a      	add	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	3304      	adds	r3, #4
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	f7ff f8ed 	bl	800e202 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f028:	f001 fa64 	bl	80104f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f02c:	4b0d      	ldr	r3, [pc, #52]	; (800f064 <prvAddNewTaskToReadyList+0xcc>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00e      	beq.n	800f052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f034:	4b0a      	ldr	r3, [pc, #40]	; (800f060 <prvAddNewTaskToReadyList+0xc8>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03e:	429a      	cmp	r2, r3
 800f040:	d207      	bcs.n	800f052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f042:	4b0c      	ldr	r3, [pc, #48]	; (800f074 <prvAddNewTaskToReadyList+0xdc>)
 800f044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f052:	bf00      	nop
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	2000c8a8 	.word	0x2000c8a8
 800f060:	2000c3d4 	.word	0x2000c3d4
 800f064:	2000c8b4 	.word	0x2000c8b4
 800f068:	2000c8c4 	.word	0x2000c8c4
 800f06c:	2000c8b0 	.word	0x2000c8b0
 800f070:	2000c3d8 	.word	0x2000c3d8
 800f074:	e000ed04 	.word	0xe000ed04

0800f078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f080:	2300      	movs	r3, #0
 800f082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d019      	beq.n	800f0be <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f08a:	4b14      	ldr	r3, [pc, #80]	; (800f0dc <vTaskDelay+0x64>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00c      	beq.n	800f0ac <vTaskDelay+0x34>
	__asm volatile
 800f092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f096:	b672      	cpsid	i
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	b662      	cpsie	i
 800f0a6:	60bb      	str	r3, [r7, #8]
}
 800f0a8:	bf00      	nop
 800f0aa:	e7fe      	b.n	800f0aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f0ac:	f000 f884 	bl	800f1b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 fd2c 	bl	800fb10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0b8:	f000 f88c 	bl	800f1d4 <xTaskResumeAll>
 800f0bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d107      	bne.n	800f0d4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f0c4:	4b06      	ldr	r3, [pc, #24]	; (800f0e0 <vTaskDelay+0x68>)
 800f0c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0ca:	601a      	str	r2, [r3, #0]
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f0d4:	bf00      	nop
 800f0d6:	3710      	adds	r7, #16
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	2000c8d0 	.word	0x2000c8d0
 800f0e0:	e000ed04 	.word	0xe000ed04

0800f0e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b08a      	sub	sp, #40	; 0x28
 800f0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0f2:	463a      	mov	r2, r7
 800f0f4:	1d39      	adds	r1, r7, #4
 800f0f6:	f107 0308 	add.w	r3, r7, #8
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff f820 	bl	800e140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	9202      	str	r2, [sp, #8]
 800f108:	9301      	str	r3, [sp, #4]
 800f10a:	2300      	movs	r3, #0
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	2300      	movs	r3, #0
 800f110:	460a      	mov	r2, r1
 800f112:	4923      	ldr	r1, [pc, #140]	; (800f1a0 <vTaskStartScheduler+0xbc>)
 800f114:	4823      	ldr	r0, [pc, #140]	; (800f1a4 <vTaskStartScheduler+0xc0>)
 800f116:	f7ff fe05 	bl	800ed24 <xTaskCreateStatic>
 800f11a:	4603      	mov	r3, r0
 800f11c:	4a22      	ldr	r2, [pc, #136]	; (800f1a8 <vTaskStartScheduler+0xc4>)
 800f11e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f120:	4b21      	ldr	r3, [pc, #132]	; (800f1a8 <vTaskStartScheduler+0xc4>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f128:	2301      	movs	r3, #1
 800f12a:	617b      	str	r3, [r7, #20]
 800f12c:	e001      	b.n	800f132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f12e:	2300      	movs	r3, #0
 800f130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d102      	bne.n	800f13e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f138:	f000 fd3e 	bl	800fbb8 <xTimerCreateTimerTask>
 800f13c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b01      	cmp	r3, #1
 800f142:	d118      	bne.n	800f176 <vTaskStartScheduler+0x92>
	__asm volatile
 800f144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f148:	b672      	cpsid	i
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	b662      	cpsie	i
 800f158:	613b      	str	r3, [r7, #16]
}
 800f15a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f15c:	4b13      	ldr	r3, [pc, #76]	; (800f1ac <vTaskStartScheduler+0xc8>)
 800f15e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f164:	4b12      	ldr	r3, [pc, #72]	; (800f1b0 <vTaskStartScheduler+0xcc>)
 800f166:	2201      	movs	r2, #1
 800f168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f16a:	4b12      	ldr	r3, [pc, #72]	; (800f1b4 <vTaskStartScheduler+0xd0>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f170:	f001 f90e 	bl	8010390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f174:	e010      	b.n	800f198 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f17c:	d10c      	bne.n	800f198 <vTaskStartScheduler+0xb4>
	__asm volatile
 800f17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f182:	b672      	cpsid	i
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	b662      	cpsie	i
 800f192:	60fb      	str	r3, [r7, #12]
}
 800f194:	bf00      	nop
 800f196:	e7fe      	b.n	800f196 <vTaskStartScheduler+0xb2>
}
 800f198:	bf00      	nop
 800f19a:	3718      	adds	r7, #24
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	08024474 	.word	0x08024474
 800f1a4:	0800f841 	.word	0x0800f841
 800f1a8:	2000c8cc 	.word	0x2000c8cc
 800f1ac:	2000c8c8 	.word	0x2000c8c8
 800f1b0:	2000c8b4 	.word	0x2000c8b4
 800f1b4:	2000c8ac 	.word	0x2000c8ac

0800f1b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f1bc:	4b04      	ldr	r3, [pc, #16]	; (800f1d0 <vTaskSuspendAll+0x18>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	4a03      	ldr	r2, [pc, #12]	; (800f1d0 <vTaskSuspendAll+0x18>)
 800f1c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f1c6:	bf00      	nop
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	2000c8d0 	.word	0x2000c8d0

0800f1d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1e2:	4b43      	ldr	r3, [pc, #268]	; (800f2f0 <xTaskResumeAll+0x11c>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10c      	bne.n	800f204 <xTaskResumeAll+0x30>
	__asm volatile
 800f1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ee:	b672      	cpsid	i
 800f1f0:	f383 8811 	msr	BASEPRI, r3
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	b662      	cpsie	i
 800f1fe:	603b      	str	r3, [r7, #0]
}
 800f200:	bf00      	nop
 800f202:	e7fe      	b.n	800f202 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f204:	f001 f942 	bl	801048c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f208:	4b39      	ldr	r3, [pc, #228]	; (800f2f0 <xTaskResumeAll+0x11c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	3b01      	subs	r3, #1
 800f20e:	4a38      	ldr	r2, [pc, #224]	; (800f2f0 <xTaskResumeAll+0x11c>)
 800f210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f212:	4b37      	ldr	r3, [pc, #220]	; (800f2f0 <xTaskResumeAll+0x11c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d162      	bne.n	800f2e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f21a:	4b36      	ldr	r3, [pc, #216]	; (800f2f4 <xTaskResumeAll+0x120>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d05e      	beq.n	800f2e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f222:	e02f      	b.n	800f284 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f224:	4b34      	ldr	r3, [pc, #208]	; (800f2f8 <xTaskResumeAll+0x124>)
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3318      	adds	r3, #24
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff f843 	bl	800e2bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	3304      	adds	r3, #4
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7ff f83e 	bl	800e2bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f244:	4b2d      	ldr	r3, [pc, #180]	; (800f2fc <xTaskResumeAll+0x128>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d903      	bls.n	800f254 <xTaskResumeAll+0x80>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f250:	4a2a      	ldr	r2, [pc, #168]	; (800f2fc <xTaskResumeAll+0x128>)
 800f252:	6013      	str	r3, [r2, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f258:	4613      	mov	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4a27      	ldr	r2, [pc, #156]	; (800f300 <xTaskResumeAll+0x12c>)
 800f262:	441a      	add	r2, r3
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	3304      	adds	r3, #4
 800f268:	4619      	mov	r1, r3
 800f26a:	4610      	mov	r0, r2
 800f26c:	f7fe ffc9 	bl	800e202 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f274:	4b23      	ldr	r3, [pc, #140]	; (800f304 <xTaskResumeAll+0x130>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d302      	bcc.n	800f284 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f27e:	4b22      	ldr	r3, [pc, #136]	; (800f308 <xTaskResumeAll+0x134>)
 800f280:	2201      	movs	r2, #1
 800f282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f284:	4b1c      	ldr	r3, [pc, #112]	; (800f2f8 <xTaskResumeAll+0x124>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1cb      	bne.n	800f224 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d001      	beq.n	800f296 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f292:	f000 fb8d 	bl	800f9b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f296:	4b1d      	ldr	r3, [pc, #116]	; (800f30c <xTaskResumeAll+0x138>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d010      	beq.n	800f2c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f2a2:	f000 f847 	bl	800f334 <xTaskIncrementTick>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f2ac:	4b16      	ldr	r3, [pc, #88]	; (800f308 <xTaskResumeAll+0x134>)
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d1f1      	bne.n	800f2a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f2be:	4b13      	ldr	r3, [pc, #76]	; (800f30c <xTaskResumeAll+0x138>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2c4:	4b10      	ldr	r3, [pc, #64]	; (800f308 <xTaskResumeAll+0x134>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d009      	beq.n	800f2e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2d0:	4b0f      	ldr	r3, [pc, #60]	; (800f310 <xTaskResumeAll+0x13c>)
 800f2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2d6:	601a      	str	r2, [r3, #0]
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2e0:	f001 f908 	bl	80104f4 <vPortExitCritical>

	return xAlreadyYielded;
 800f2e4:	68bb      	ldr	r3, [r7, #8]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	2000c8d0 	.word	0x2000c8d0
 800f2f4:	2000c8a8 	.word	0x2000c8a8
 800f2f8:	2000c868 	.word	0x2000c868
 800f2fc:	2000c8b0 	.word	0x2000c8b0
 800f300:	2000c3d8 	.word	0x2000c3d8
 800f304:	2000c3d4 	.word	0x2000c3d4
 800f308:	2000c8bc 	.word	0x2000c8bc
 800f30c:	2000c8b8 	.word	0x2000c8b8
 800f310:	e000ed04 	.word	0xe000ed04

0800f314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f31a:	4b05      	ldr	r3, [pc, #20]	; (800f330 <xTaskGetTickCount+0x1c>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f320:	687b      	ldr	r3, [r7, #4]
}
 800f322:	4618      	mov	r0, r3
 800f324:	370c      	adds	r7, #12
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr
 800f32e:	bf00      	nop
 800f330:	2000c8ac 	.word	0x2000c8ac

0800f334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f33a:	2300      	movs	r3, #0
 800f33c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f33e:	4b50      	ldr	r3, [pc, #320]	; (800f480 <xTaskIncrementTick+0x14c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	f040 808b 	bne.w	800f45e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f348:	4b4e      	ldr	r3, [pc, #312]	; (800f484 <xTaskIncrementTick+0x150>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	3301      	adds	r3, #1
 800f34e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f350:	4a4c      	ldr	r2, [pc, #304]	; (800f484 <xTaskIncrementTick+0x150>)
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f356:	693b      	ldr	r3, [r7, #16]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d122      	bne.n	800f3a2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f35c:	4b4a      	ldr	r3, [pc, #296]	; (800f488 <xTaskIncrementTick+0x154>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00c      	beq.n	800f380 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36a:	b672      	cpsid	i
 800f36c:	f383 8811 	msr	BASEPRI, r3
 800f370:	f3bf 8f6f 	isb	sy
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	b662      	cpsie	i
 800f37a:	603b      	str	r3, [r7, #0]
}
 800f37c:	bf00      	nop
 800f37e:	e7fe      	b.n	800f37e <xTaskIncrementTick+0x4a>
 800f380:	4b41      	ldr	r3, [pc, #260]	; (800f488 <xTaskIncrementTick+0x154>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	4b41      	ldr	r3, [pc, #260]	; (800f48c <xTaskIncrementTick+0x158>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4a3f      	ldr	r2, [pc, #252]	; (800f488 <xTaskIncrementTick+0x154>)
 800f38c:	6013      	str	r3, [r2, #0]
 800f38e:	4a3f      	ldr	r2, [pc, #252]	; (800f48c <xTaskIncrementTick+0x158>)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6013      	str	r3, [r2, #0]
 800f394:	4b3e      	ldr	r3, [pc, #248]	; (800f490 <xTaskIncrementTick+0x15c>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	4a3d      	ldr	r2, [pc, #244]	; (800f490 <xTaskIncrementTick+0x15c>)
 800f39c:	6013      	str	r3, [r2, #0]
 800f39e:	f000 fb07 	bl	800f9b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3a2:	4b3c      	ldr	r3, [pc, #240]	; (800f494 <xTaskIncrementTick+0x160>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d349      	bcc.n	800f440 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3ac:	4b36      	ldr	r3, [pc, #216]	; (800f488 <xTaskIncrementTick+0x154>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d104      	bne.n	800f3c0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3b6:	4b37      	ldr	r3, [pc, #220]	; (800f494 <xTaskIncrementTick+0x160>)
 800f3b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3bc:	601a      	str	r2, [r3, #0]
					break;
 800f3be:	e03f      	b.n	800f440 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3c0:	4b31      	ldr	r3, [pc, #196]	; (800f488 <xTaskIncrementTick+0x154>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3d0:	693a      	ldr	r2, [r7, #16]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d203      	bcs.n	800f3e0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3d8:	4a2e      	ldr	r2, [pc, #184]	; (800f494 <xTaskIncrementTick+0x160>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3de:	e02f      	b.n	800f440 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe ff69 	bl	800e2bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d004      	beq.n	800f3fc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	3318      	adds	r3, #24
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fe ff60 	bl	800e2bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f400:	4b25      	ldr	r3, [pc, #148]	; (800f498 <xTaskIncrementTick+0x164>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	429a      	cmp	r2, r3
 800f406:	d903      	bls.n	800f410 <xTaskIncrementTick+0xdc>
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f40c:	4a22      	ldr	r2, [pc, #136]	; (800f498 <xTaskIncrementTick+0x164>)
 800f40e:	6013      	str	r3, [r2, #0]
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f414:	4613      	mov	r3, r2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4413      	add	r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	4a1f      	ldr	r2, [pc, #124]	; (800f49c <xTaskIncrementTick+0x168>)
 800f41e:	441a      	add	r2, r3
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	3304      	adds	r3, #4
 800f424:	4619      	mov	r1, r3
 800f426:	4610      	mov	r0, r2
 800f428:	f7fe feeb 	bl	800e202 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f430:	4b1b      	ldr	r3, [pc, #108]	; (800f4a0 <xTaskIncrementTick+0x16c>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f436:	429a      	cmp	r2, r3
 800f438:	d3b8      	bcc.n	800f3ac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f43a:	2301      	movs	r3, #1
 800f43c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f43e:	e7b5      	b.n	800f3ac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f440:	4b17      	ldr	r3, [pc, #92]	; (800f4a0 <xTaskIncrementTick+0x16c>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f446:	4915      	ldr	r1, [pc, #84]	; (800f49c <xTaskIncrementTick+0x168>)
 800f448:	4613      	mov	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	009b      	lsls	r3, r3, #2
 800f450:	440b      	add	r3, r1
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b01      	cmp	r3, #1
 800f456:	d907      	bls.n	800f468 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f458:	2301      	movs	r3, #1
 800f45a:	617b      	str	r3, [r7, #20]
 800f45c:	e004      	b.n	800f468 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f45e:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <xTaskIncrementTick+0x170>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3301      	adds	r3, #1
 800f464:	4a0f      	ldr	r2, [pc, #60]	; (800f4a4 <xTaskIncrementTick+0x170>)
 800f466:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f468:	4b0f      	ldr	r3, [pc, #60]	; (800f4a8 <xTaskIncrementTick+0x174>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d001      	beq.n	800f474 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f470:	2301      	movs	r3, #1
 800f472:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f474:	697b      	ldr	r3, [r7, #20]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	2000c8d0 	.word	0x2000c8d0
 800f484:	2000c8ac 	.word	0x2000c8ac
 800f488:	2000c860 	.word	0x2000c860
 800f48c:	2000c864 	.word	0x2000c864
 800f490:	2000c8c0 	.word	0x2000c8c0
 800f494:	2000c8c8 	.word	0x2000c8c8
 800f498:	2000c8b0 	.word	0x2000c8b0
 800f49c:	2000c3d8 	.word	0x2000c3d8
 800f4a0:	2000c3d4 	.word	0x2000c3d4
 800f4a4:	2000c8b8 	.word	0x2000c8b8
 800f4a8:	2000c8bc 	.word	0x2000c8bc

0800f4ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4b2:	4b29      	ldr	r3, [pc, #164]	; (800f558 <vTaskSwitchContext+0xac>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d003      	beq.n	800f4c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4ba:	4b28      	ldr	r3, [pc, #160]	; (800f55c <vTaskSwitchContext+0xb0>)
 800f4bc:	2201      	movs	r2, #1
 800f4be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4c0:	e043      	b.n	800f54a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800f4c2:	4b26      	ldr	r3, [pc, #152]	; (800f55c <vTaskSwitchContext+0xb0>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4c8:	4b25      	ldr	r3, [pc, #148]	; (800f560 <vTaskSwitchContext+0xb4>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	60fb      	str	r3, [r7, #12]
 800f4ce:	e012      	b.n	800f4f6 <vTaskSwitchContext+0x4a>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10c      	bne.n	800f4f0 <vTaskSwitchContext+0x44>
	__asm volatile
 800f4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4da:	b672      	cpsid	i
 800f4dc:	f383 8811 	msr	BASEPRI, r3
 800f4e0:	f3bf 8f6f 	isb	sy
 800f4e4:	f3bf 8f4f 	dsb	sy
 800f4e8:	b662      	cpsie	i
 800f4ea:	607b      	str	r3, [r7, #4]
}
 800f4ec:	bf00      	nop
 800f4ee:	e7fe      	b.n	800f4ee <vTaskSwitchContext+0x42>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	60fb      	str	r3, [r7, #12]
 800f4f6:	491b      	ldr	r1, [pc, #108]	; (800f564 <vTaskSwitchContext+0xb8>)
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	4413      	add	r3, r2
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	440b      	add	r3, r1
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d0e2      	beq.n	800f4d0 <vTaskSwitchContext+0x24>
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	4613      	mov	r3, r2
 800f50e:	009b      	lsls	r3, r3, #2
 800f510:	4413      	add	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4a13      	ldr	r2, [pc, #76]	; (800f564 <vTaskSwitchContext+0xb8>)
 800f516:	4413      	add	r3, r2
 800f518:	60bb      	str	r3, [r7, #8]
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	685a      	ldr	r2, [r3, #4]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	605a      	str	r2, [r3, #4]
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	685a      	ldr	r2, [r3, #4]
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	3308      	adds	r3, #8
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d104      	bne.n	800f53a <vTaskSwitchContext+0x8e>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	685a      	ldr	r2, [r3, #4]
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	605a      	str	r2, [r3, #4]
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	4a09      	ldr	r2, [pc, #36]	; (800f568 <vTaskSwitchContext+0xbc>)
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	4a06      	ldr	r2, [pc, #24]	; (800f560 <vTaskSwitchContext+0xb4>)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6013      	str	r3, [r2, #0]
}
 800f54a:	bf00      	nop
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	2000c8d0 	.word	0x2000c8d0
 800f55c:	2000c8bc 	.word	0x2000c8bc
 800f560:	2000c8b0 	.word	0x2000c8b0
 800f564:	2000c3d8 	.word	0x2000c3d8
 800f568:	2000c3d4 	.word	0x2000c3d4

0800f56c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10c      	bne.n	800f596 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f580:	b672      	cpsid	i
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	b662      	cpsie	i
 800f590:	60fb      	str	r3, [r7, #12]
}
 800f592:	bf00      	nop
 800f594:	e7fe      	b.n	800f594 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f596:	4b07      	ldr	r3, [pc, #28]	; (800f5b4 <vTaskPlaceOnEventList+0x48>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3318      	adds	r3, #24
 800f59c:	4619      	mov	r1, r3
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7fe fe53 	bl	800e24a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f5a4:	2101      	movs	r1, #1
 800f5a6:	6838      	ldr	r0, [r7, #0]
 800f5a8:	f000 fab2 	bl	800fb10 <prvAddCurrentTaskToDelayedList>
}
 800f5ac:	bf00      	nop
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	2000c3d4 	.word	0x2000c3d4

0800f5b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d10c      	bne.n	800f5e4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	b672      	cpsid	i
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	b662      	cpsie	i
 800f5de:	617b      	str	r3, [r7, #20]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5e4:	4b0a      	ldr	r3, [pc, #40]	; (800f610 <vTaskPlaceOnEventListRestricted+0x58>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3318      	adds	r3, #24
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f7fe fe08 	bl	800e202 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f5f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f5fe:	6879      	ldr	r1, [r7, #4]
 800f600:	68b8      	ldr	r0, [r7, #8]
 800f602:	f000 fa85 	bl	800fb10 <prvAddCurrentTaskToDelayedList>
	}
 800f606:	bf00      	nop
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	2000c3d4 	.word	0x2000c3d4

0800f614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10c      	bne.n	800f644 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62e:	b672      	cpsid	i
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	b662      	cpsie	i
 800f63e:	60fb      	str	r3, [r7, #12]
}
 800f640:	bf00      	nop
 800f642:	e7fe      	b.n	800f642 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	3318      	adds	r3, #24
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fe fe37 	bl	800e2bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f64e:	4b1e      	ldr	r3, [pc, #120]	; (800f6c8 <xTaskRemoveFromEventList+0xb4>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d11d      	bne.n	800f692 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	3304      	adds	r3, #4
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fe fe2e 	bl	800e2bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f664:	4b19      	ldr	r3, [pc, #100]	; (800f6cc <xTaskRemoveFromEventList+0xb8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d903      	bls.n	800f674 <xTaskRemoveFromEventList+0x60>
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f670:	4a16      	ldr	r2, [pc, #88]	; (800f6cc <xTaskRemoveFromEventList+0xb8>)
 800f672:	6013      	str	r3, [r2, #0]
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f678:	4613      	mov	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	4413      	add	r3, r2
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	4a13      	ldr	r2, [pc, #76]	; (800f6d0 <xTaskRemoveFromEventList+0xbc>)
 800f682:	441a      	add	r2, r3
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	3304      	adds	r3, #4
 800f688:	4619      	mov	r1, r3
 800f68a:	4610      	mov	r0, r2
 800f68c:	f7fe fdb9 	bl	800e202 <vListInsertEnd>
 800f690:	e005      	b.n	800f69e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	3318      	adds	r3, #24
 800f696:	4619      	mov	r1, r3
 800f698:	480e      	ldr	r0, [pc, #56]	; (800f6d4 <xTaskRemoveFromEventList+0xc0>)
 800f69a:	f7fe fdb2 	bl	800e202 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6a2:	4b0d      	ldr	r3, [pc, #52]	; (800f6d8 <xTaskRemoveFromEventList+0xc4>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d905      	bls.n	800f6b8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f6b0:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <xTaskRemoveFromEventList+0xc8>)
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	601a      	str	r2, [r3, #0]
 800f6b6:	e001      	b.n	800f6bc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f6bc:	697b      	ldr	r3, [r7, #20]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3718      	adds	r7, #24
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	2000c8d0 	.word	0x2000c8d0
 800f6cc:	2000c8b0 	.word	0x2000c8b0
 800f6d0:	2000c3d8 	.word	0x2000c3d8
 800f6d4:	2000c868 	.word	0x2000c868
 800f6d8:	2000c3d4 	.word	0x2000c3d4
 800f6dc:	2000c8bc 	.word	0x2000c8bc

0800f6e0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10c      	bne.n	800f708 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	b672      	cpsid	i
 800f6f4:	f383 8811 	msr	BASEPRI, r3
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	b662      	cpsie	i
 800f702:	60fb      	str	r3, [r7, #12]
}
 800f704:	bf00      	nop
 800f706:	e7fe      	b.n	800f706 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800f708:	f000 fec0 	bl	801048c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f70c:	4b06      	ldr	r3, [pc, #24]	; (800f728 <vTaskSetTimeOutState+0x48>)
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f714:	4b05      	ldr	r3, [pc, #20]	; (800f72c <vTaskSetTimeOutState+0x4c>)
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f71c:	f000 feea 	bl	80104f4 <vPortExitCritical>
}
 800f720:	bf00      	nop
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	2000c8c0 	.word	0x2000c8c0
 800f72c:	2000c8ac 	.word	0x2000c8ac

0800f730 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f738:	4b06      	ldr	r3, [pc, #24]	; (800f754 <vTaskInternalSetTimeOutState+0x24>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f740:	4b05      	ldr	r3, [pc, #20]	; (800f758 <vTaskInternalSetTimeOutState+0x28>)
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	605a      	str	r2, [r3, #4]
}
 800f748:	bf00      	nop
 800f74a:	370c      	adds	r7, #12
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr
 800f754:	2000c8c0 	.word	0x2000c8c0
 800f758:	2000c8ac 	.word	0x2000c8ac

0800f75c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b088      	sub	sp, #32
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d10c      	bne.n	800f786 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f770:	b672      	cpsid	i
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	b662      	cpsie	i
 800f780:	613b      	str	r3, [r7, #16]
}
 800f782:	bf00      	nop
 800f784:	e7fe      	b.n	800f784 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10c      	bne.n	800f7a6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f790:	b672      	cpsid	i
 800f792:	f383 8811 	msr	BASEPRI, r3
 800f796:	f3bf 8f6f 	isb	sy
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	b662      	cpsie	i
 800f7a0:	60fb      	str	r3, [r7, #12]
}
 800f7a2:	bf00      	nop
 800f7a4:	e7fe      	b.n	800f7a4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f7a6:	f000 fe71 	bl	801048c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f7aa:	4b1d      	ldr	r3, [pc, #116]	; (800f820 <xTaskCheckForTimeOut+0xc4>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	69ba      	ldr	r2, [r7, #24]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7c2:	d102      	bne.n	800f7ca <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	61fb      	str	r3, [r7, #28]
 800f7c8:	e023      	b.n	800f812 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	4b15      	ldr	r3, [pc, #84]	; (800f824 <xTaskCheckForTimeOut+0xc8>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d007      	beq.n	800f7e6 <xTaskCheckForTimeOut+0x8a>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d302      	bcc.n	800f7e6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	61fb      	str	r3, [r7, #28]
 800f7e4:	e015      	b.n	800f812 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d20b      	bcs.n	800f808 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	1ad2      	subs	r2, r2, r3
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff ff97 	bl	800f730 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f802:	2300      	movs	r3, #0
 800f804:	61fb      	str	r3, [r7, #28]
 800f806:	e004      	b.n	800f812 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	2200      	movs	r2, #0
 800f80c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f80e:	2301      	movs	r3, #1
 800f810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f812:	f000 fe6f 	bl	80104f4 <vPortExitCritical>

	return xReturn;
 800f816:	69fb      	ldr	r3, [r7, #28]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3720      	adds	r7, #32
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	2000c8ac 	.word	0x2000c8ac
 800f824:	2000c8c0 	.word	0x2000c8c0

0800f828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f828:	b480      	push	{r7}
 800f82a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f82c:	4b03      	ldr	r3, [pc, #12]	; (800f83c <vTaskMissedYield+0x14>)
 800f82e:	2201      	movs	r2, #1
 800f830:	601a      	str	r2, [r3, #0]
}
 800f832:	bf00      	nop
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr
 800f83c:	2000c8bc 	.word	0x2000c8bc

0800f840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f848:	f000 f852 	bl	800f8f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f84c:	4b06      	ldr	r3, [pc, #24]	; (800f868 <prvIdleTask+0x28>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d9f9      	bls.n	800f848 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f854:	4b05      	ldr	r3, [pc, #20]	; (800f86c <prvIdleTask+0x2c>)
 800f856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f85a:	601a      	str	r2, [r3, #0]
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f864:	e7f0      	b.n	800f848 <prvIdleTask+0x8>
 800f866:	bf00      	nop
 800f868:	2000c3d8 	.word	0x2000c3d8
 800f86c:	e000ed04 	.word	0xe000ed04

0800f870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f876:	2300      	movs	r3, #0
 800f878:	607b      	str	r3, [r7, #4]
 800f87a:	e00c      	b.n	800f896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	4613      	mov	r3, r2
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	4413      	add	r3, r2
 800f884:	009b      	lsls	r3, r3, #2
 800f886:	4a12      	ldr	r2, [pc, #72]	; (800f8d0 <prvInitialiseTaskLists+0x60>)
 800f888:	4413      	add	r3, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fc8c 	bl	800e1a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3301      	adds	r3, #1
 800f894:	607b      	str	r3, [r7, #4]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b37      	cmp	r3, #55	; 0x37
 800f89a:	d9ef      	bls.n	800f87c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f89c:	480d      	ldr	r0, [pc, #52]	; (800f8d4 <prvInitialiseTaskLists+0x64>)
 800f89e:	f7fe fc83 	bl	800e1a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8a2:	480d      	ldr	r0, [pc, #52]	; (800f8d8 <prvInitialiseTaskLists+0x68>)
 800f8a4:	f7fe fc80 	bl	800e1a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8a8:	480c      	ldr	r0, [pc, #48]	; (800f8dc <prvInitialiseTaskLists+0x6c>)
 800f8aa:	f7fe fc7d 	bl	800e1a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f8ae:	480c      	ldr	r0, [pc, #48]	; (800f8e0 <prvInitialiseTaskLists+0x70>)
 800f8b0:	f7fe fc7a 	bl	800e1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8b4:	480b      	ldr	r0, [pc, #44]	; (800f8e4 <prvInitialiseTaskLists+0x74>)
 800f8b6:	f7fe fc77 	bl	800e1a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8ba:	4b0b      	ldr	r3, [pc, #44]	; (800f8e8 <prvInitialiseTaskLists+0x78>)
 800f8bc:	4a05      	ldr	r2, [pc, #20]	; (800f8d4 <prvInitialiseTaskLists+0x64>)
 800f8be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8c0:	4b0a      	ldr	r3, [pc, #40]	; (800f8ec <prvInitialiseTaskLists+0x7c>)
 800f8c2:	4a05      	ldr	r2, [pc, #20]	; (800f8d8 <prvInitialiseTaskLists+0x68>)
 800f8c4:	601a      	str	r2, [r3, #0]
}
 800f8c6:	bf00      	nop
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	2000c3d8 	.word	0x2000c3d8
 800f8d4:	2000c838 	.word	0x2000c838
 800f8d8:	2000c84c 	.word	0x2000c84c
 800f8dc:	2000c868 	.word	0x2000c868
 800f8e0:	2000c87c 	.word	0x2000c87c
 800f8e4:	2000c894 	.word	0x2000c894
 800f8e8:	2000c860 	.word	0x2000c860
 800f8ec:	2000c864 	.word	0x2000c864

0800f8f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8f6:	e019      	b.n	800f92c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f8f8:	f000 fdc8 	bl	801048c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8fc:	4b10      	ldr	r3, [pc, #64]	; (800f940 <prvCheckTasksWaitingTermination+0x50>)
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3304      	adds	r3, #4
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fe fcd7 	bl	800e2bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f90e:	4b0d      	ldr	r3, [pc, #52]	; (800f944 <prvCheckTasksWaitingTermination+0x54>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3b01      	subs	r3, #1
 800f914:	4a0b      	ldr	r2, [pc, #44]	; (800f944 <prvCheckTasksWaitingTermination+0x54>)
 800f916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f918:	4b0b      	ldr	r3, [pc, #44]	; (800f948 <prvCheckTasksWaitingTermination+0x58>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	4a0a      	ldr	r2, [pc, #40]	; (800f948 <prvCheckTasksWaitingTermination+0x58>)
 800f920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f922:	f000 fde7 	bl	80104f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 f810 	bl	800f94c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f92c:	4b06      	ldr	r3, [pc, #24]	; (800f948 <prvCheckTasksWaitingTermination+0x58>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1e1      	bne.n	800f8f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f934:	bf00      	nop
 800f936:	bf00      	nop
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	2000c87c 	.word	0x2000c87c
 800f944:	2000c8a8 	.word	0x2000c8a8
 800f948:	2000c890 	.word	0x2000c890

0800f94c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d108      	bne.n	800f970 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f962:	4618      	mov	r0, r3
 800f964:	f000 ff88 	bl	8010878 <vPortFree>
				vPortFree( pxTCB );
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 ff85 	bl	8010878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f96e:	e01a      	b.n	800f9a6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f976:	2b01      	cmp	r3, #1
 800f978:	d103      	bne.n	800f982 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 ff7c 	bl	8010878 <vPortFree>
	}
 800f980:	e011      	b.n	800f9a6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f988:	2b02      	cmp	r3, #2
 800f98a:	d00c      	beq.n	800f9a6 <prvDeleteTCB+0x5a>
	__asm volatile
 800f98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f990:	b672      	cpsid	i
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	b662      	cpsie	i
 800f9a0:	60fb      	str	r3, [r7, #12]
}
 800f9a2:	bf00      	nop
 800f9a4:	e7fe      	b.n	800f9a4 <prvDeleteTCB+0x58>
	}
 800f9a6:	bf00      	nop
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9b6:	4b0c      	ldr	r3, [pc, #48]	; (800f9e8 <prvResetNextTaskUnblockTime+0x38>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d104      	bne.n	800f9ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9c0:	4b0a      	ldr	r3, [pc, #40]	; (800f9ec <prvResetNextTaskUnblockTime+0x3c>)
 800f9c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9c8:	e008      	b.n	800f9dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ca:	4b07      	ldr	r3, [pc, #28]	; (800f9e8 <prvResetNextTaskUnblockTime+0x38>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <prvResetNextTaskUnblockTime+0x3c>)
 800f9da:	6013      	str	r3, [r2, #0]
}
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr
 800f9e8:	2000c860 	.word	0x2000c860
 800f9ec:	2000c8c8 	.word	0x2000c8c8

0800f9f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f9f6:	4b0b      	ldr	r3, [pc, #44]	; (800fa24 <xTaskGetSchedulerState+0x34>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d102      	bne.n	800fa04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	607b      	str	r3, [r7, #4]
 800fa02:	e008      	b.n	800fa16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa04:	4b08      	ldr	r3, [pc, #32]	; (800fa28 <xTaskGetSchedulerState+0x38>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d102      	bne.n	800fa12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa0c:	2302      	movs	r3, #2
 800fa0e:	607b      	str	r3, [r7, #4]
 800fa10:	e001      	b.n	800fa16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa12:	2300      	movs	r3, #0
 800fa14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa16:	687b      	ldr	r3, [r7, #4]
	}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	2000c8b4 	.word	0x2000c8b4
 800fa28:	2000c8d0 	.word	0x2000c8d0

0800fa2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b086      	sub	sp, #24
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d05a      	beq.n	800faf8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fa42:	4b30      	ldr	r3, [pc, #192]	; (800fb04 <xTaskPriorityDisinherit+0xd8>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	693a      	ldr	r2, [r7, #16]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d00c      	beq.n	800fa66 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	b672      	cpsid	i
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	b662      	cpsie	i
 800fa60:	60fb      	str	r3, [r7, #12]
}
 800fa62:	bf00      	nop
 800fa64:	e7fe      	b.n	800fa64 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10c      	bne.n	800fa88 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800fa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa72:	b672      	cpsid	i
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	b662      	cpsie	i
 800fa82:	60bb      	str	r3, [r7, #8]
}
 800fa84:	bf00      	nop
 800fa86:	e7fe      	b.n	800fa86 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa8c:	1e5a      	subs	r2, r3, #1
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa96:	693b      	ldr	r3, [r7, #16]
 800fa98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d02c      	beq.n	800faf8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d128      	bne.n	800faf8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	3304      	adds	r3, #4
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fe fc06 	bl	800e2bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fabc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac8:	4b0f      	ldr	r3, [pc, #60]	; (800fb08 <xTaskPriorityDisinherit+0xdc>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	429a      	cmp	r2, r3
 800face:	d903      	bls.n	800fad8 <xTaskPriorityDisinherit+0xac>
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fad4:	4a0c      	ldr	r2, [pc, #48]	; (800fb08 <xTaskPriorityDisinherit+0xdc>)
 800fad6:	6013      	str	r3, [r2, #0]
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fadc:	4613      	mov	r3, r2
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	4413      	add	r3, r2
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	4a09      	ldr	r2, [pc, #36]	; (800fb0c <xTaskPriorityDisinherit+0xe0>)
 800fae6:	441a      	add	r2, r3
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	3304      	adds	r3, #4
 800faec:	4619      	mov	r1, r3
 800faee:	4610      	mov	r0, r2
 800faf0:	f7fe fb87 	bl	800e202 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800faf4:	2301      	movs	r3, #1
 800faf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800faf8:	697b      	ldr	r3, [r7, #20]
	}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3718      	adds	r7, #24
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	2000c3d4 	.word	0x2000c3d4
 800fb08:	2000c8b0 	.word	0x2000c8b0
 800fb0c:	2000c3d8 	.word	0x2000c3d8

0800fb10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb1a:	4b21      	ldr	r3, [pc, #132]	; (800fba0 <prvAddCurrentTaskToDelayedList+0x90>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb20:	4b20      	ldr	r3, [pc, #128]	; (800fba4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	3304      	adds	r3, #4
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe fbc8 	bl	800e2bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb32:	d10a      	bne.n	800fb4a <prvAddCurrentTaskToDelayedList+0x3a>
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d007      	beq.n	800fb4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb3a:	4b1a      	ldr	r3, [pc, #104]	; (800fba4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	3304      	adds	r3, #4
 800fb40:	4619      	mov	r1, r3
 800fb42:	4819      	ldr	r0, [pc, #100]	; (800fba8 <prvAddCurrentTaskToDelayedList+0x98>)
 800fb44:	f7fe fb5d 	bl	800e202 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb48:	e026      	b.n	800fb98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb4a:	68fa      	ldr	r2, [r7, #12]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4413      	add	r3, r2
 800fb50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb52:	4b14      	ldr	r3, [pc, #80]	; (800fba4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	68ba      	ldr	r2, [r7, #8]
 800fb58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d209      	bcs.n	800fb76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb62:	4b12      	ldr	r3, [pc, #72]	; (800fbac <prvAddCurrentTaskToDelayedList+0x9c>)
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4610      	mov	r0, r2
 800fb70:	f7fe fb6b 	bl	800e24a <vListInsert>
}
 800fb74:	e010      	b.n	800fb98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb76:	4b0e      	ldr	r3, [pc, #56]	; (800fbb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	4b0a      	ldr	r3, [pc, #40]	; (800fba4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	3304      	adds	r3, #4
 800fb80:	4619      	mov	r1, r3
 800fb82:	4610      	mov	r0, r2
 800fb84:	f7fe fb61 	bl	800e24a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb88:	4b0a      	ldr	r3, [pc, #40]	; (800fbb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d202      	bcs.n	800fb98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fb92:	4a08      	ldr	r2, [pc, #32]	; (800fbb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	6013      	str	r3, [r2, #0]
}
 800fb98:	bf00      	nop
 800fb9a:	3710      	adds	r7, #16
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	2000c8ac 	.word	0x2000c8ac
 800fba4:	2000c3d4 	.word	0x2000c3d4
 800fba8:	2000c894 	.word	0x2000c894
 800fbac:	2000c864 	.word	0x2000c864
 800fbb0:	2000c860 	.word	0x2000c860
 800fbb4:	2000c8c8 	.word	0x2000c8c8

0800fbb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b08a      	sub	sp, #40	; 0x28
 800fbbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fbc2:	f000 fb15 	bl	80101f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fbc6:	4b1d      	ldr	r3, [pc, #116]	; (800fc3c <xTimerCreateTimerTask+0x84>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d021      	beq.n	800fc12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fbd6:	1d3a      	adds	r2, r7, #4
 800fbd8:	f107 0108 	add.w	r1, r7, #8
 800fbdc:	f107 030c 	add.w	r3, r7, #12
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7fe fac7 	bl	800e174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fbe6:	6879      	ldr	r1, [r7, #4]
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	68fa      	ldr	r2, [r7, #12]
 800fbec:	9202      	str	r2, [sp, #8]
 800fbee:	9301      	str	r3, [sp, #4]
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	460a      	mov	r2, r1
 800fbf8:	4911      	ldr	r1, [pc, #68]	; (800fc40 <xTimerCreateTimerTask+0x88>)
 800fbfa:	4812      	ldr	r0, [pc, #72]	; (800fc44 <xTimerCreateTimerTask+0x8c>)
 800fbfc:	f7ff f892 	bl	800ed24 <xTaskCreateStatic>
 800fc00:	4603      	mov	r3, r0
 800fc02:	4a11      	ldr	r2, [pc, #68]	; (800fc48 <xTimerCreateTimerTask+0x90>)
 800fc04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fc06:	4b10      	ldr	r3, [pc, #64]	; (800fc48 <xTimerCreateTimerTask+0x90>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d001      	beq.n	800fc12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10c      	bne.n	800fc32 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800fc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1c:	b672      	cpsid	i
 800fc1e:	f383 8811 	msr	BASEPRI, r3
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	b662      	cpsie	i
 800fc2c:	613b      	str	r3, [r7, #16]
}
 800fc2e:	bf00      	nop
 800fc30:	e7fe      	b.n	800fc30 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fc32:	697b      	ldr	r3, [r7, #20]
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3718      	adds	r7, #24
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	2000c904 	.word	0x2000c904
 800fc40:	0802447c 	.word	0x0802447c
 800fc44:	0800fd89 	.word	0x0800fd89
 800fc48:	2000c908 	.word	0x2000c908

0800fc4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b08a      	sub	sp, #40	; 0x28
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d10c      	bne.n	800fc7e <xTimerGenericCommand+0x32>
	__asm volatile
 800fc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc68:	b672      	cpsid	i
 800fc6a:	f383 8811 	msr	BASEPRI, r3
 800fc6e:	f3bf 8f6f 	isb	sy
 800fc72:	f3bf 8f4f 	dsb	sy
 800fc76:	b662      	cpsie	i
 800fc78:	623b      	str	r3, [r7, #32]
}
 800fc7a:	bf00      	nop
 800fc7c:	e7fe      	b.n	800fc7c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fc7e:	4b1a      	ldr	r3, [pc, #104]	; (800fce8 <xTimerGenericCommand+0x9c>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d02a      	beq.n	800fcdc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	2b05      	cmp	r3, #5
 800fc96:	dc18      	bgt.n	800fcca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fc98:	f7ff feaa 	bl	800f9f0 <xTaskGetSchedulerState>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b02      	cmp	r3, #2
 800fca0:	d109      	bne.n	800fcb6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fca2:	4b11      	ldr	r3, [pc, #68]	; (800fce8 <xTimerGenericCommand+0x9c>)
 800fca4:	6818      	ldr	r0, [r3, #0]
 800fca6:	f107 0110 	add.w	r1, r7, #16
 800fcaa:	2300      	movs	r3, #0
 800fcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcae:	f7fe fc3f 	bl	800e530 <xQueueGenericSend>
 800fcb2:	6278      	str	r0, [r7, #36]	; 0x24
 800fcb4:	e012      	b.n	800fcdc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fcb6:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <xTimerGenericCommand+0x9c>)
 800fcb8:	6818      	ldr	r0, [r3, #0]
 800fcba:	f107 0110 	add.w	r1, r7, #16
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	f7fe fc35 	bl	800e530 <xQueueGenericSend>
 800fcc6:	6278      	str	r0, [r7, #36]	; 0x24
 800fcc8:	e008      	b.n	800fcdc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fcca:	4b07      	ldr	r3, [pc, #28]	; (800fce8 <xTimerGenericCommand+0x9c>)
 800fccc:	6818      	ldr	r0, [r3, #0]
 800fcce:	f107 0110 	add.w	r1, r7, #16
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	683a      	ldr	r2, [r7, #0]
 800fcd6:	f7fe fd31 	bl	800e73c <xQueueGenericSendFromISR>
 800fcda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3728      	adds	r7, #40	; 0x28
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	2000c904 	.word	0x2000c904

0800fcec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b088      	sub	sp, #32
 800fcf0:	af02      	add	r7, sp, #8
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcf6:	4b23      	ldr	r3, [pc, #140]	; (800fd84 <prvProcessExpiredTimer+0x98>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	3304      	adds	r3, #4
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7fe fad9 	bl	800e2bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd10:	f003 0304 	and.w	r3, r3, #4
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d024      	beq.n	800fd62 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	699a      	ldr	r2, [r3, #24]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	18d1      	adds	r1, r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	683a      	ldr	r2, [r7, #0]
 800fd24:	6978      	ldr	r0, [r7, #20]
 800fd26:	f000 f8d3 	bl	800fed0 <prvInsertTimerInActiveList>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d021      	beq.n	800fd74 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fd30:	2300      	movs	r3, #0
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	2300      	movs	r3, #0
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	2100      	movs	r1, #0
 800fd3a:	6978      	ldr	r0, [r7, #20]
 800fd3c:	f7ff ff86 	bl	800fc4c <xTimerGenericCommand>
 800fd40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d115      	bne.n	800fd74 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800fd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4c:	b672      	cpsid	i
 800fd4e:	f383 8811 	msr	BASEPRI, r3
 800fd52:	f3bf 8f6f 	isb	sy
 800fd56:	f3bf 8f4f 	dsb	sy
 800fd5a:	b662      	cpsie	i
 800fd5c:	60fb      	str	r3, [r7, #12]
}
 800fd5e:	bf00      	nop
 800fd60:	e7fe      	b.n	800fd60 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd68:	f023 0301 	bic.w	r3, r3, #1
 800fd6c:	b2da      	uxtb	r2, r3
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	6a1b      	ldr	r3, [r3, #32]
 800fd78:	6978      	ldr	r0, [r7, #20]
 800fd7a:	4798      	blx	r3
}
 800fd7c:	bf00      	nop
 800fd7e:	3718      	adds	r7, #24
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	2000c8fc 	.word	0x2000c8fc

0800fd88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fd90:	f107 0308 	add.w	r3, r7, #8
 800fd94:	4618      	mov	r0, r3
 800fd96:	f000 f857 	bl	800fe48 <prvGetNextExpireTime>
 800fd9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	4619      	mov	r1, r3
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f000 f803 	bl	800fdac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fda6:	f000 f8d5 	bl	800ff54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fdaa:	e7f1      	b.n	800fd90 <prvTimerTask+0x8>

0800fdac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fdb6:	f7ff f9ff 	bl	800f1b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fdba:	f107 0308 	add.w	r3, r7, #8
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 f866 	bl	800fe90 <prvSampleTimeNow>
 800fdc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d130      	bne.n	800fe2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10a      	bne.n	800fde8 <prvProcessTimerOrBlockTask+0x3c>
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d806      	bhi.n	800fde8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fdda:	f7ff f9fb 	bl	800f1d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fdde:	68f9      	ldr	r1, [r7, #12]
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7ff ff83 	bl	800fcec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fde6:	e024      	b.n	800fe32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d008      	beq.n	800fe00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fdee:	4b13      	ldr	r3, [pc, #76]	; (800fe3c <prvProcessTimerOrBlockTask+0x90>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d101      	bne.n	800fdfc <prvProcessTimerOrBlockTask+0x50>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e000      	b.n	800fdfe <prvProcessTimerOrBlockTask+0x52>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fe00:	4b0f      	ldr	r3, [pc, #60]	; (800fe40 <prvProcessTimerOrBlockTask+0x94>)
 800fe02:	6818      	ldr	r0, [r3, #0]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	683a      	ldr	r2, [r7, #0]
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	f7fe ff55 	bl	800ecbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fe12:	f7ff f9df 	bl	800f1d4 <xTaskResumeAll>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10a      	bne.n	800fe32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fe1c:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <prvProcessTimerOrBlockTask+0x98>)
 800fe1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	f3bf 8f6f 	isb	sy
}
 800fe2c:	e001      	b.n	800fe32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fe2e:	f7ff f9d1 	bl	800f1d4 <xTaskResumeAll>
}
 800fe32:	bf00      	nop
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	2000c900 	.word	0x2000c900
 800fe40:	2000c904 	.word	0x2000c904
 800fe44:	e000ed04 	.word	0xe000ed04

0800fe48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe50:	4b0e      	ldr	r3, [pc, #56]	; (800fe8c <prvGetNextExpireTime+0x44>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d101      	bne.n	800fe5e <prvGetNextExpireTime+0x16>
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	e000      	b.n	800fe60 <prvGetNextExpireTime+0x18>
 800fe5e:	2200      	movs	r2, #0
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d105      	bne.n	800fe78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe6c:	4b07      	ldr	r3, [pc, #28]	; (800fe8c <prvGetNextExpireTime+0x44>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	60fb      	str	r3, [r7, #12]
 800fe76:	e001      	b.n	800fe7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3714      	adds	r7, #20
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	2000c8fc 	.word	0x2000c8fc

0800fe90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fe98:	f7ff fa3c 	bl	800f314 <xTaskGetTickCount>
 800fe9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fe9e:	4b0b      	ldr	r3, [pc, #44]	; (800fecc <prvSampleTimeNow+0x3c>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d205      	bcs.n	800feb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fea8:	f000 f93c 	bl	8010124 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	601a      	str	r2, [r3, #0]
 800feb2:	e002      	b.n	800feba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800feba:	4a04      	ldr	r2, [pc, #16]	; (800fecc <prvSampleTimeNow+0x3c>)
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fec0:	68fb      	ldr	r3, [r7, #12]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	2000c90c 	.word	0x2000c90c

0800fed0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
 800fedc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fede:	2300      	movs	r3, #0
 800fee0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	68fa      	ldr	r2, [r7, #12]
 800feec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d812      	bhi.n	800ff1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	1ad2      	subs	r2, r2, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d302      	bcc.n	800ff0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ff04:	2301      	movs	r3, #1
 800ff06:	617b      	str	r3, [r7, #20]
 800ff08:	e01b      	b.n	800ff42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ff0a:	4b10      	ldr	r3, [pc, #64]	; (800ff4c <prvInsertTimerInActiveList+0x7c>)
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	3304      	adds	r3, #4
 800ff12:	4619      	mov	r1, r3
 800ff14:	4610      	mov	r0, r2
 800ff16:	f7fe f998 	bl	800e24a <vListInsert>
 800ff1a:	e012      	b.n	800ff42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d206      	bcs.n	800ff32 <prvInsertTimerInActiveList+0x62>
 800ff24:	68ba      	ldr	r2, [r7, #8]
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d302      	bcc.n	800ff32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	617b      	str	r3, [r7, #20]
 800ff30:	e007      	b.n	800ff42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff32:	4b07      	ldr	r3, [pc, #28]	; (800ff50 <prvInsertTimerInActiveList+0x80>)
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	3304      	adds	r3, #4
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	4610      	mov	r0, r2
 800ff3e:	f7fe f984 	bl	800e24a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ff42:	697b      	ldr	r3, [r7, #20]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3718      	adds	r7, #24
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	2000c900 	.word	0x2000c900
 800ff50:	2000c8fc 	.word	0x2000c8fc

0800ff54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b08e      	sub	sp, #56	; 0x38
 800ff58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff5a:	e0d0      	b.n	80100fe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	da1a      	bge.n	800ff98 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ff62:	1d3b      	adds	r3, r7, #4
 800ff64:	3304      	adds	r3, #4
 800ff66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ff68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10c      	bne.n	800ff88 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff72:	b672      	cpsid	i
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	b662      	cpsie	i
 800ff82:	61fb      	str	r3, [r7, #28]
}
 800ff84:	bf00      	nop
 800ff86:	e7fe      	b.n	800ff86 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff8e:	6850      	ldr	r0, [r2, #4]
 800ff90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff92:	6892      	ldr	r2, [r2, #8]
 800ff94:	4611      	mov	r1, r2
 800ff96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	f2c0 80af 	blt.w	80100fe <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ffa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa6:	695b      	ldr	r3, [r3, #20]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d004      	beq.n	800ffb6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	3304      	adds	r3, #4
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7fe f983 	bl	800e2bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ffb6:	463b      	mov	r3, r7
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7ff ff69 	bl	800fe90 <prvSampleTimeNow>
 800ffbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b09      	cmp	r3, #9
 800ffc4:	f200 809a 	bhi.w	80100fc <prvProcessReceivedCommands+0x1a8>
 800ffc8:	a201      	add	r2, pc, #4	; (adr r2, 800ffd0 <prvProcessReceivedCommands+0x7c>)
 800ffca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffce:	bf00      	nop
 800ffd0:	0800fff9 	.word	0x0800fff9
 800ffd4:	0800fff9 	.word	0x0800fff9
 800ffd8:	0800fff9 	.word	0x0800fff9
 800ffdc:	08010071 	.word	0x08010071
 800ffe0:	08010085 	.word	0x08010085
 800ffe4:	080100d3 	.word	0x080100d3
 800ffe8:	0800fff9 	.word	0x0800fff9
 800ffec:	0800fff9 	.word	0x0800fff9
 800fff0:	08010071 	.word	0x08010071
 800fff4:	08010085 	.word	0x08010085
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fffe:	f043 0301 	orr.w	r3, r3, #1
 8010002:	b2da      	uxtb	r2, r3
 8010004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801000a:	68ba      	ldr	r2, [r7, #8]
 801000c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000e:	699b      	ldr	r3, [r3, #24]
 8010010:	18d1      	adds	r1, r2, r3
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010018:	f7ff ff5a 	bl	800fed0 <prvInsertTimerInActiveList>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d06d      	beq.n	80100fe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010024:	6a1b      	ldr	r3, [r3, #32]
 8010026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010028:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801002a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010030:	f003 0304 	and.w	r3, r3, #4
 8010034:	2b00      	cmp	r3, #0
 8010036:	d062      	beq.n	80100fe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010038:	68ba      	ldr	r2, [r7, #8]
 801003a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003c:	699b      	ldr	r3, [r3, #24]
 801003e:	441a      	add	r2, r3
 8010040:	2300      	movs	r3, #0
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	2300      	movs	r3, #0
 8010046:	2100      	movs	r1, #0
 8010048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801004a:	f7ff fdff 	bl	800fc4c <xTimerGenericCommand>
 801004e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010050:	6a3b      	ldr	r3, [r7, #32]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d153      	bne.n	80100fe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8010056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005a:	b672      	cpsid	i
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	b662      	cpsie	i
 801006a:	61bb      	str	r3, [r7, #24]
}
 801006c:	bf00      	nop
 801006e:	e7fe      	b.n	801006e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010076:	f023 0301 	bic.w	r3, r3, #1
 801007a:	b2da      	uxtb	r2, r3
 801007c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010082:	e03c      	b.n	80100fe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801008a:	f043 0301 	orr.w	r3, r3, #1
 801008e:	b2da      	uxtb	r2, r3
 8010090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801009c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009e:	699b      	ldr	r3, [r3, #24]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10c      	bne.n	80100be <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	b672      	cpsid	i
 80100aa:	f383 8811 	msr	BASEPRI, r3
 80100ae:	f3bf 8f6f 	isb	sy
 80100b2:	f3bf 8f4f 	dsb	sy
 80100b6:	b662      	cpsie	i
 80100b8:	617b      	str	r3, [r7, #20]
}
 80100ba:	bf00      	nop
 80100bc:	e7fe      	b.n	80100bc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80100be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c0:	699a      	ldr	r2, [r3, #24]
 80100c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c4:	18d1      	adds	r1, r2, r3
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100cc:	f7ff ff00 	bl	800fed0 <prvInsertTimerInActiveList>
					break;
 80100d0:	e015      	b.n	80100fe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80100d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100d8:	f003 0302 	and.w	r3, r3, #2
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d103      	bne.n	80100e8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80100e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100e2:	f000 fbc9 	bl	8010878 <vPortFree>
 80100e6:	e00a      	b.n	80100fe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80100e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100ee:	f023 0301 	bic.w	r3, r3, #1
 80100f2:	b2da      	uxtb	r2, r3
 80100f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80100fa:	e000      	b.n	80100fe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80100fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100fe:	4b08      	ldr	r3, [pc, #32]	; (8010120 <prvProcessReceivedCommands+0x1cc>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	1d39      	adds	r1, r7, #4
 8010104:	2200      	movs	r2, #0
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe fbb8 	bl	800e87c <xQueueReceive>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	f47f af24 	bne.w	800ff5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010114:	bf00      	nop
 8010116:	bf00      	nop
 8010118:	3730      	adds	r7, #48	; 0x30
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	2000c904 	.word	0x2000c904

08010124 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b088      	sub	sp, #32
 8010128:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801012a:	e04a      	b.n	80101c2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801012c:	4b2e      	ldr	r3, [pc, #184]	; (80101e8 <prvSwitchTimerLists+0xc4>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010136:	4b2c      	ldr	r3, [pc, #176]	; (80101e8 <prvSwitchTimerLists+0xc4>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	3304      	adds	r3, #4
 8010144:	4618      	mov	r0, r3
 8010146:	f7fe f8b9 	bl	800e2bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010158:	f003 0304 	and.w	r3, r3, #4
 801015c:	2b00      	cmp	r3, #0
 801015e:	d030      	beq.n	80101c2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	699b      	ldr	r3, [r3, #24]
 8010164:	693a      	ldr	r2, [r7, #16]
 8010166:	4413      	add	r3, r2
 8010168:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801016a:	68ba      	ldr	r2, [r7, #8]
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	429a      	cmp	r2, r3
 8010170:	d90e      	bls.n	8010190 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801017e:	4b1a      	ldr	r3, [pc, #104]	; (80101e8 <prvSwitchTimerLists+0xc4>)
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3304      	adds	r3, #4
 8010186:	4619      	mov	r1, r3
 8010188:	4610      	mov	r0, r2
 801018a:	f7fe f85e 	bl	800e24a <vListInsert>
 801018e:	e018      	b.n	80101c2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010190:	2300      	movs	r3, #0
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	2300      	movs	r3, #0
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	2100      	movs	r1, #0
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff fd56 	bl	800fc4c <xTimerGenericCommand>
 80101a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d10c      	bne.n	80101c2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80101a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ac:	b672      	cpsid	i
 80101ae:	f383 8811 	msr	BASEPRI, r3
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	b662      	cpsie	i
 80101bc:	603b      	str	r3, [r7, #0]
}
 80101be:	bf00      	nop
 80101c0:	e7fe      	b.n	80101c0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101c2:	4b09      	ldr	r3, [pc, #36]	; (80101e8 <prvSwitchTimerLists+0xc4>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d1af      	bne.n	801012c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80101cc:	4b06      	ldr	r3, [pc, #24]	; (80101e8 <prvSwitchTimerLists+0xc4>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80101d2:	4b06      	ldr	r3, [pc, #24]	; (80101ec <prvSwitchTimerLists+0xc8>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4a04      	ldr	r2, [pc, #16]	; (80101e8 <prvSwitchTimerLists+0xc4>)
 80101d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80101da:	4a04      	ldr	r2, [pc, #16]	; (80101ec <prvSwitchTimerLists+0xc8>)
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	6013      	str	r3, [r2, #0]
}
 80101e0:	bf00      	nop
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	2000c8fc 	.word	0x2000c8fc
 80101ec:	2000c900 	.word	0x2000c900

080101f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80101f6:	f000 f949 	bl	801048c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80101fa:	4b15      	ldr	r3, [pc, #84]	; (8010250 <prvCheckForValidListAndQueue+0x60>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d120      	bne.n	8010244 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010202:	4814      	ldr	r0, [pc, #80]	; (8010254 <prvCheckForValidListAndQueue+0x64>)
 8010204:	f7fd ffd0 	bl	800e1a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010208:	4813      	ldr	r0, [pc, #76]	; (8010258 <prvCheckForValidListAndQueue+0x68>)
 801020a:	f7fd ffcd 	bl	800e1a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801020e:	4b13      	ldr	r3, [pc, #76]	; (801025c <prvCheckForValidListAndQueue+0x6c>)
 8010210:	4a10      	ldr	r2, [pc, #64]	; (8010254 <prvCheckForValidListAndQueue+0x64>)
 8010212:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010214:	4b12      	ldr	r3, [pc, #72]	; (8010260 <prvCheckForValidListAndQueue+0x70>)
 8010216:	4a10      	ldr	r2, [pc, #64]	; (8010258 <prvCheckForValidListAndQueue+0x68>)
 8010218:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801021a:	2300      	movs	r3, #0
 801021c:	9300      	str	r3, [sp, #0]
 801021e:	4b11      	ldr	r3, [pc, #68]	; (8010264 <prvCheckForValidListAndQueue+0x74>)
 8010220:	4a11      	ldr	r2, [pc, #68]	; (8010268 <prvCheckForValidListAndQueue+0x78>)
 8010222:	2110      	movs	r1, #16
 8010224:	200a      	movs	r0, #10
 8010226:	f7fe f8dd 	bl	800e3e4 <xQueueGenericCreateStatic>
 801022a:	4603      	mov	r3, r0
 801022c:	4a08      	ldr	r2, [pc, #32]	; (8010250 <prvCheckForValidListAndQueue+0x60>)
 801022e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010230:	4b07      	ldr	r3, [pc, #28]	; (8010250 <prvCheckForValidListAndQueue+0x60>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d005      	beq.n	8010244 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010238:	4b05      	ldr	r3, [pc, #20]	; (8010250 <prvCheckForValidListAndQueue+0x60>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	490b      	ldr	r1, [pc, #44]	; (801026c <prvCheckForValidListAndQueue+0x7c>)
 801023e:	4618      	mov	r0, r3
 8010240:	f7fe fd12 	bl	800ec68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010244:	f000 f956 	bl	80104f4 <vPortExitCritical>
}
 8010248:	bf00      	nop
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	2000c904 	.word	0x2000c904
 8010254:	2000c8d4 	.word	0x2000c8d4
 8010258:	2000c8e8 	.word	0x2000c8e8
 801025c:	2000c8fc 	.word	0x2000c8fc
 8010260:	2000c900 	.word	0x2000c900
 8010264:	2000c9b0 	.word	0x2000c9b0
 8010268:	2000c910 	.word	0x2000c910
 801026c:	08024484 	.word	0x08024484

08010270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	3b04      	subs	r3, #4
 8010280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	3b04      	subs	r3, #4
 801028e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	f023 0201 	bic.w	r2, r3, #1
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	3b04      	subs	r3, #4
 801029e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80102a0:	4a0c      	ldr	r2, [pc, #48]	; (80102d4 <pxPortInitialiseStack+0x64>)
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	3b14      	subs	r3, #20
 80102aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	3b04      	subs	r3, #4
 80102b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f06f 0202 	mvn.w	r2, #2
 80102be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	3b20      	subs	r3, #32
 80102c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80102c6:	68fb      	ldr	r3, [r7, #12]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3714      	adds	r7, #20
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr
 80102d4:	080102d9 	.word	0x080102d9

080102d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80102de:	2300      	movs	r3, #0
 80102e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80102e2:	4b14      	ldr	r3, [pc, #80]	; (8010334 <prvTaskExitError+0x5c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102ea:	d00c      	beq.n	8010306 <prvTaskExitError+0x2e>
	__asm volatile
 80102ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f0:	b672      	cpsid	i
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	b662      	cpsie	i
 8010300:	60fb      	str	r3, [r7, #12]
}
 8010302:	bf00      	nop
 8010304:	e7fe      	b.n	8010304 <prvTaskExitError+0x2c>
	__asm volatile
 8010306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030a:	b672      	cpsid	i
 801030c:	f383 8811 	msr	BASEPRI, r3
 8010310:	f3bf 8f6f 	isb	sy
 8010314:	f3bf 8f4f 	dsb	sy
 8010318:	b662      	cpsie	i
 801031a:	60bb      	str	r3, [r7, #8]
}
 801031c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801031e:	bf00      	nop
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d0fc      	beq.n	8010320 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010326:	bf00      	nop
 8010328:	bf00      	nop
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr
 8010334:	200000a0 	.word	0x200000a0
	...

08010340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010340:	4b07      	ldr	r3, [pc, #28]	; (8010360 <pxCurrentTCBConst2>)
 8010342:	6819      	ldr	r1, [r3, #0]
 8010344:	6808      	ldr	r0, [r1, #0]
 8010346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034a:	f380 8809 	msr	PSP, r0
 801034e:	f3bf 8f6f 	isb	sy
 8010352:	f04f 0000 	mov.w	r0, #0
 8010356:	f380 8811 	msr	BASEPRI, r0
 801035a:	4770      	bx	lr
 801035c:	f3af 8000 	nop.w

08010360 <pxCurrentTCBConst2>:
 8010360:	2000c3d4 	.word	0x2000c3d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010364:	bf00      	nop
 8010366:	bf00      	nop

08010368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010368:	4808      	ldr	r0, [pc, #32]	; (801038c <prvPortStartFirstTask+0x24>)
 801036a:	6800      	ldr	r0, [r0, #0]
 801036c:	6800      	ldr	r0, [r0, #0]
 801036e:	f380 8808 	msr	MSP, r0
 8010372:	f04f 0000 	mov.w	r0, #0
 8010376:	f380 8814 	msr	CONTROL, r0
 801037a:	b662      	cpsie	i
 801037c:	b661      	cpsie	f
 801037e:	f3bf 8f4f 	dsb	sy
 8010382:	f3bf 8f6f 	isb	sy
 8010386:	df00      	svc	0
 8010388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801038a:	bf00      	nop
 801038c:	e000ed08 	.word	0xe000ed08

08010390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010396:	4b37      	ldr	r3, [pc, #220]	; (8010474 <xPortStartScheduler+0xe4>)
 8010398:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	22ff      	movs	r2, #255	; 0xff
 80103a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80103b0:	78fb      	ldrb	r3, [r7, #3]
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80103b8:	b2da      	uxtb	r2, r3
 80103ba:	4b2f      	ldr	r3, [pc, #188]	; (8010478 <xPortStartScheduler+0xe8>)
 80103bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80103be:	4b2f      	ldr	r3, [pc, #188]	; (801047c <xPortStartScheduler+0xec>)
 80103c0:	2207      	movs	r2, #7
 80103c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80103c4:	e009      	b.n	80103da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80103c6:	4b2d      	ldr	r3, [pc, #180]	; (801047c <xPortStartScheduler+0xec>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3b01      	subs	r3, #1
 80103cc:	4a2b      	ldr	r2, [pc, #172]	; (801047c <xPortStartScheduler+0xec>)
 80103ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80103d0:	78fb      	ldrb	r3, [r7, #3]
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	005b      	lsls	r3, r3, #1
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80103da:	78fb      	ldrb	r3, [r7, #3]
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103e2:	2b80      	cmp	r3, #128	; 0x80
 80103e4:	d0ef      	beq.n	80103c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80103e6:	4b25      	ldr	r3, [pc, #148]	; (801047c <xPortStartScheduler+0xec>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f1c3 0307 	rsb	r3, r3, #7
 80103ee:	2b04      	cmp	r3, #4
 80103f0:	d00c      	beq.n	801040c <xPortStartScheduler+0x7c>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	b672      	cpsid	i
 80103f8:	f383 8811 	msr	BASEPRI, r3
 80103fc:	f3bf 8f6f 	isb	sy
 8010400:	f3bf 8f4f 	dsb	sy
 8010404:	b662      	cpsie	i
 8010406:	60bb      	str	r3, [r7, #8]
}
 8010408:	bf00      	nop
 801040a:	e7fe      	b.n	801040a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801040c:	4b1b      	ldr	r3, [pc, #108]	; (801047c <xPortStartScheduler+0xec>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	021b      	lsls	r3, r3, #8
 8010412:	4a1a      	ldr	r2, [pc, #104]	; (801047c <xPortStartScheduler+0xec>)
 8010414:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010416:	4b19      	ldr	r3, [pc, #100]	; (801047c <xPortStartScheduler+0xec>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801041e:	4a17      	ldr	r2, [pc, #92]	; (801047c <xPortStartScheduler+0xec>)
 8010420:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	b2da      	uxtb	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801042a:	4b15      	ldr	r3, [pc, #84]	; (8010480 <xPortStartScheduler+0xf0>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4a14      	ldr	r2, [pc, #80]	; (8010480 <xPortStartScheduler+0xf0>)
 8010430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010434:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010436:	4b12      	ldr	r3, [pc, #72]	; (8010480 <xPortStartScheduler+0xf0>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4a11      	ldr	r2, [pc, #68]	; (8010480 <xPortStartScheduler+0xf0>)
 801043c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010440:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010442:	f000 f8dd 	bl	8010600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010446:	4b0f      	ldr	r3, [pc, #60]	; (8010484 <xPortStartScheduler+0xf4>)
 8010448:	2200      	movs	r2, #0
 801044a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801044c:	f000 f8fc 	bl	8010648 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010450:	4b0d      	ldr	r3, [pc, #52]	; (8010488 <xPortStartScheduler+0xf8>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a0c      	ldr	r2, [pc, #48]	; (8010488 <xPortStartScheduler+0xf8>)
 8010456:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801045a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801045c:	f7ff ff84 	bl	8010368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010460:	f7ff f824 	bl	800f4ac <vTaskSwitchContext>
	prvTaskExitError();
 8010464:	f7ff ff38 	bl	80102d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	e000e400 	.word	0xe000e400
 8010478:	2000ca00 	.word	0x2000ca00
 801047c:	2000ca04 	.word	0x2000ca04
 8010480:	e000ed20 	.word	0xe000ed20
 8010484:	200000a0 	.word	0x200000a0
 8010488:	e000ef34 	.word	0xe000ef34

0801048c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
	__asm volatile
 8010492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010496:	b672      	cpsid	i
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	b662      	cpsie	i
 80104a6:	607b      	str	r3, [r7, #4]
}
 80104a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80104aa:	4b10      	ldr	r3, [pc, #64]	; (80104ec <vPortEnterCritical+0x60>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3301      	adds	r3, #1
 80104b0:	4a0e      	ldr	r2, [pc, #56]	; (80104ec <vPortEnterCritical+0x60>)
 80104b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80104b4:	4b0d      	ldr	r3, [pc, #52]	; (80104ec <vPortEnterCritical+0x60>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d111      	bne.n	80104e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80104bc:	4b0c      	ldr	r3, [pc, #48]	; (80104f0 <vPortEnterCritical+0x64>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00c      	beq.n	80104e0 <vPortEnterCritical+0x54>
	__asm volatile
 80104c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ca:	b672      	cpsid	i
 80104cc:	f383 8811 	msr	BASEPRI, r3
 80104d0:	f3bf 8f6f 	isb	sy
 80104d4:	f3bf 8f4f 	dsb	sy
 80104d8:	b662      	cpsie	i
 80104da:	603b      	str	r3, [r7, #0]
}
 80104dc:	bf00      	nop
 80104de:	e7fe      	b.n	80104de <vPortEnterCritical+0x52>
	}
}
 80104e0:	bf00      	nop
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	200000a0 	.word	0x200000a0
 80104f0:	e000ed04 	.word	0xe000ed04

080104f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80104fa:	4b13      	ldr	r3, [pc, #76]	; (8010548 <vPortExitCritical+0x54>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d10c      	bne.n	801051c <vPortExitCritical+0x28>
	__asm volatile
 8010502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010506:	b672      	cpsid	i
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	b662      	cpsie	i
 8010516:	607b      	str	r3, [r7, #4]
}
 8010518:	bf00      	nop
 801051a:	e7fe      	b.n	801051a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801051c:	4b0a      	ldr	r3, [pc, #40]	; (8010548 <vPortExitCritical+0x54>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	3b01      	subs	r3, #1
 8010522:	4a09      	ldr	r2, [pc, #36]	; (8010548 <vPortExitCritical+0x54>)
 8010524:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010526:	4b08      	ldr	r3, [pc, #32]	; (8010548 <vPortExitCritical+0x54>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d105      	bne.n	801053a <vPortExitCritical+0x46>
 801052e:	2300      	movs	r3, #0
 8010530:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	f383 8811 	msr	BASEPRI, r3
}
 8010538:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801053a:	bf00      	nop
 801053c:	370c      	adds	r7, #12
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	200000a0 	.word	0x200000a0
 801054c:	00000000 	.word	0x00000000

08010550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010550:	f3ef 8009 	mrs	r0, PSP
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	4b15      	ldr	r3, [pc, #84]	; (80105b0 <pxCurrentTCBConst>)
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	f01e 0f10 	tst.w	lr, #16
 8010560:	bf08      	it	eq
 8010562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056a:	6010      	str	r0, [r2, #0]
 801056c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010574:	b672      	cpsid	i
 8010576:	f380 8811 	msr	BASEPRI, r0
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	b662      	cpsie	i
 8010584:	f7fe ff92 	bl	800f4ac <vTaskSwitchContext>
 8010588:	f04f 0000 	mov.w	r0, #0
 801058c:	f380 8811 	msr	BASEPRI, r0
 8010590:	bc09      	pop	{r0, r3}
 8010592:	6819      	ldr	r1, [r3, #0]
 8010594:	6808      	ldr	r0, [r1, #0]
 8010596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059a:	f01e 0f10 	tst.w	lr, #16
 801059e:	bf08      	it	eq
 80105a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80105a4:	f380 8809 	msr	PSP, r0
 80105a8:	f3bf 8f6f 	isb	sy
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop

080105b0 <pxCurrentTCBConst>:
 80105b0:	2000c3d4 	.word	0x2000c3d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80105b4:	bf00      	nop
 80105b6:	bf00      	nop

080105b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
	__asm volatile
 80105be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c2:	b672      	cpsid	i
 80105c4:	f383 8811 	msr	BASEPRI, r3
 80105c8:	f3bf 8f6f 	isb	sy
 80105cc:	f3bf 8f4f 	dsb	sy
 80105d0:	b662      	cpsie	i
 80105d2:	607b      	str	r3, [r7, #4]
}
 80105d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80105d6:	f7fe fead 	bl	800f334 <xTaskIncrementTick>
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d003      	beq.n	80105e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80105e0:	4b06      	ldr	r3, [pc, #24]	; (80105fc <SysTick_Handler+0x44>)
 80105e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105e6:	601a      	str	r2, [r3, #0]
 80105e8:	2300      	movs	r3, #0
 80105ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	f383 8811 	msr	BASEPRI, r3
}
 80105f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80105f4:	bf00      	nop
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	e000ed04 	.word	0xe000ed04

08010600 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010600:	b480      	push	{r7}
 8010602:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010604:	4b0b      	ldr	r3, [pc, #44]	; (8010634 <vPortSetupTimerInterrupt+0x34>)
 8010606:	2200      	movs	r2, #0
 8010608:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801060a:	4b0b      	ldr	r3, [pc, #44]	; (8010638 <vPortSetupTimerInterrupt+0x38>)
 801060c:	2200      	movs	r2, #0
 801060e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010610:	4b0a      	ldr	r3, [pc, #40]	; (801063c <vPortSetupTimerInterrupt+0x3c>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	4a0a      	ldr	r2, [pc, #40]	; (8010640 <vPortSetupTimerInterrupt+0x40>)
 8010616:	fba2 2303 	umull	r2, r3, r2, r3
 801061a:	099b      	lsrs	r3, r3, #6
 801061c:	4a09      	ldr	r2, [pc, #36]	; (8010644 <vPortSetupTimerInterrupt+0x44>)
 801061e:	3b01      	subs	r3, #1
 8010620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010622:	4b04      	ldr	r3, [pc, #16]	; (8010634 <vPortSetupTimerInterrupt+0x34>)
 8010624:	2207      	movs	r2, #7
 8010626:	601a      	str	r2, [r3, #0]
}
 8010628:	bf00      	nop
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop
 8010634:	e000e010 	.word	0xe000e010
 8010638:	e000e018 	.word	0xe000e018
 801063c:	20000008 	.word	0x20000008
 8010640:	10624dd3 	.word	0x10624dd3
 8010644:	e000e014 	.word	0xe000e014

08010648 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010648:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010658 <vPortEnableVFP+0x10>
 801064c:	6801      	ldr	r1, [r0, #0]
 801064e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010652:	6001      	str	r1, [r0, #0]
 8010654:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010656:	bf00      	nop
 8010658:	e000ed88 	.word	0xe000ed88

0801065c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010662:	f3ef 8305 	mrs	r3, IPSR
 8010666:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2b0f      	cmp	r3, #15
 801066c:	d916      	bls.n	801069c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801066e:	4a19      	ldr	r2, [pc, #100]	; (80106d4 <vPortValidateInterruptPriority+0x78>)
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	4413      	add	r3, r2
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010678:	4b17      	ldr	r3, [pc, #92]	; (80106d8 <vPortValidateInterruptPriority+0x7c>)
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	7afa      	ldrb	r2, [r7, #11]
 801067e:	429a      	cmp	r2, r3
 8010680:	d20c      	bcs.n	801069c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010686:	b672      	cpsid	i
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	b662      	cpsie	i
 8010696:	607b      	str	r3, [r7, #4]
}
 8010698:	bf00      	nop
 801069a:	e7fe      	b.n	801069a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801069c:	4b0f      	ldr	r3, [pc, #60]	; (80106dc <vPortValidateInterruptPriority+0x80>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80106a4:	4b0e      	ldr	r3, [pc, #56]	; (80106e0 <vPortValidateInterruptPriority+0x84>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d90c      	bls.n	80106c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80106ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b0:	b672      	cpsid	i
 80106b2:	f383 8811 	msr	BASEPRI, r3
 80106b6:	f3bf 8f6f 	isb	sy
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	b662      	cpsie	i
 80106c0:	603b      	str	r3, [r7, #0]
}
 80106c2:	bf00      	nop
 80106c4:	e7fe      	b.n	80106c4 <vPortValidateInterruptPriority+0x68>
	}
 80106c6:	bf00      	nop
 80106c8:	3714      	adds	r7, #20
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	e000e3f0 	.word	0xe000e3f0
 80106d8:	2000ca00 	.word	0x2000ca00
 80106dc:	e000ed0c 	.word	0xe000ed0c
 80106e0:	2000ca04 	.word	0x2000ca04

080106e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08a      	sub	sp, #40	; 0x28
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80106ec:	2300      	movs	r3, #0
 80106ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80106f0:	f7fe fd62 	bl	800f1b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80106f4:	4b5b      	ldr	r3, [pc, #364]	; (8010864 <pvPortMalloc+0x180>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80106fc:	f000 f91a 	bl	8010934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010700:	4b59      	ldr	r3, [pc, #356]	; (8010868 <pvPortMalloc+0x184>)
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	4013      	ands	r3, r2
 8010708:	2b00      	cmp	r3, #0
 801070a:	f040 8092 	bne.w	8010832 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d01f      	beq.n	8010754 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010714:	2208      	movs	r2, #8
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4413      	add	r3, r2
 801071a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f003 0307 	and.w	r3, r3, #7
 8010722:	2b00      	cmp	r3, #0
 8010724:	d016      	beq.n	8010754 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f023 0307 	bic.w	r3, r3, #7
 801072c:	3308      	adds	r3, #8
 801072e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f003 0307 	and.w	r3, r3, #7
 8010736:	2b00      	cmp	r3, #0
 8010738:	d00c      	beq.n	8010754 <pvPortMalloc+0x70>
	__asm volatile
 801073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073e:	b672      	cpsid	i
 8010740:	f383 8811 	msr	BASEPRI, r3
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	b662      	cpsie	i
 801074e:	617b      	str	r3, [r7, #20]
}
 8010750:	bf00      	nop
 8010752:	e7fe      	b.n	8010752 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d06b      	beq.n	8010832 <pvPortMalloc+0x14e>
 801075a:	4b44      	ldr	r3, [pc, #272]	; (801086c <pvPortMalloc+0x188>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	429a      	cmp	r2, r3
 8010762:	d866      	bhi.n	8010832 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010764:	4b42      	ldr	r3, [pc, #264]	; (8010870 <pvPortMalloc+0x18c>)
 8010766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010768:	4b41      	ldr	r3, [pc, #260]	; (8010870 <pvPortMalloc+0x18c>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801076e:	e004      	b.n	801077a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	429a      	cmp	r2, r3
 8010782:	d903      	bls.n	801078c <pvPortMalloc+0xa8>
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d1f1      	bne.n	8010770 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801078c:	4b35      	ldr	r3, [pc, #212]	; (8010864 <pvPortMalloc+0x180>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010792:	429a      	cmp	r2, r3
 8010794:	d04d      	beq.n	8010832 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2208      	movs	r2, #8
 801079c:	4413      	add	r3, r2
 801079e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	1ad2      	subs	r2, r2, r3
 80107b0:	2308      	movs	r3, #8
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d921      	bls.n	80107fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80107b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4413      	add	r3, r2
 80107be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80107c0:	69bb      	ldr	r3, [r7, #24]
 80107c2:	f003 0307 	and.w	r3, r3, #7
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00c      	beq.n	80107e4 <pvPortMalloc+0x100>
	__asm volatile
 80107ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ce:	b672      	cpsid	i
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	b662      	cpsie	i
 80107de:	613b      	str	r3, [r7, #16]
}
 80107e0:	bf00      	nop
 80107e2:	e7fe      	b.n	80107e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80107e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	1ad2      	subs	r2, r2, r3
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80107f6:	69b8      	ldr	r0, [r7, #24]
 80107f8:	f000 f8fe 	bl	80109f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80107fc:	4b1b      	ldr	r3, [pc, #108]	; (801086c <pvPortMalloc+0x188>)
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	4a19      	ldr	r2, [pc, #100]	; (801086c <pvPortMalloc+0x188>)
 8010808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801080a:	4b18      	ldr	r3, [pc, #96]	; (801086c <pvPortMalloc+0x188>)
 801080c:	681a      	ldr	r2, [r3, #0]
 801080e:	4b19      	ldr	r3, [pc, #100]	; (8010874 <pvPortMalloc+0x190>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	429a      	cmp	r2, r3
 8010814:	d203      	bcs.n	801081e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010816:	4b15      	ldr	r3, [pc, #84]	; (801086c <pvPortMalloc+0x188>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4a16      	ldr	r2, [pc, #88]	; (8010874 <pvPortMalloc+0x190>)
 801081c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	685a      	ldr	r2, [r3, #4]
 8010822:	4b11      	ldr	r3, [pc, #68]	; (8010868 <pvPortMalloc+0x184>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	431a      	orrs	r2, r3
 8010828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082e:	2200      	movs	r2, #0
 8010830:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010832:	f7fe fccf 	bl	800f1d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	f003 0307 	and.w	r3, r3, #7
 801083c:	2b00      	cmp	r3, #0
 801083e:	d00c      	beq.n	801085a <pvPortMalloc+0x176>
	__asm volatile
 8010840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010844:	b672      	cpsid	i
 8010846:	f383 8811 	msr	BASEPRI, r3
 801084a:	f3bf 8f6f 	isb	sy
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	b662      	cpsie	i
 8010854:	60fb      	str	r3, [r7, #12]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <pvPortMalloc+0x174>
	return pvReturn;
 801085a:	69fb      	ldr	r3, [r7, #28]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3728      	adds	r7, #40	; 0x28
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	20010610 	.word	0x20010610
 8010868:	2001061c 	.word	0x2001061c
 801086c:	20010614 	.word	0x20010614
 8010870:	20010608 	.word	0x20010608
 8010874:	20010618 	.word	0x20010618

08010878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b086      	sub	sp, #24
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d04c      	beq.n	8010924 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801088a:	2308      	movs	r3, #8
 801088c:	425b      	negs	r3, r3
 801088e:	697a      	ldr	r2, [r7, #20]
 8010890:	4413      	add	r3, r2
 8010892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	685a      	ldr	r2, [r3, #4]
 801089c:	4b23      	ldr	r3, [pc, #140]	; (801092c <vPortFree+0xb4>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4013      	ands	r3, r2
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10c      	bne.n	80108c0 <vPortFree+0x48>
	__asm volatile
 80108a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108aa:	b672      	cpsid	i
 80108ac:	f383 8811 	msr	BASEPRI, r3
 80108b0:	f3bf 8f6f 	isb	sy
 80108b4:	f3bf 8f4f 	dsb	sy
 80108b8:	b662      	cpsie	i
 80108ba:	60fb      	str	r3, [r7, #12]
}
 80108bc:	bf00      	nop
 80108be:	e7fe      	b.n	80108be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80108c0:	693b      	ldr	r3, [r7, #16]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00c      	beq.n	80108e2 <vPortFree+0x6a>
	__asm volatile
 80108c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108cc:	b672      	cpsid	i
 80108ce:	f383 8811 	msr	BASEPRI, r3
 80108d2:	f3bf 8f6f 	isb	sy
 80108d6:	f3bf 8f4f 	dsb	sy
 80108da:	b662      	cpsie	i
 80108dc:	60bb      	str	r3, [r7, #8]
}
 80108de:	bf00      	nop
 80108e0:	e7fe      	b.n	80108e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	685a      	ldr	r2, [r3, #4]
 80108e6:	4b11      	ldr	r3, [pc, #68]	; (801092c <vPortFree+0xb4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4013      	ands	r3, r2
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d019      	beq.n	8010924 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d115      	bne.n	8010924 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	4b0b      	ldr	r3, [pc, #44]	; (801092c <vPortFree+0xb4>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	43db      	mvns	r3, r3
 8010902:	401a      	ands	r2, r3
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010908:	f7fe fc56 	bl	800f1b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	685a      	ldr	r2, [r3, #4]
 8010910:	4b07      	ldr	r3, [pc, #28]	; (8010930 <vPortFree+0xb8>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4413      	add	r3, r2
 8010916:	4a06      	ldr	r2, [pc, #24]	; (8010930 <vPortFree+0xb8>)
 8010918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801091a:	6938      	ldr	r0, [r7, #16]
 801091c:	f000 f86c 	bl	80109f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010920:	f7fe fc58 	bl	800f1d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010924:	bf00      	nop
 8010926:	3718      	adds	r7, #24
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	2001061c 	.word	0x2001061c
 8010930:	20010614 	.word	0x20010614

08010934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010934:	b480      	push	{r7}
 8010936:	b085      	sub	sp, #20
 8010938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801093a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801093e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010940:	4b27      	ldr	r3, [pc, #156]	; (80109e0 <prvHeapInit+0xac>)
 8010942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f003 0307 	and.w	r3, r3, #7
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00c      	beq.n	8010968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	3307      	adds	r3, #7
 8010952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f023 0307 	bic.w	r3, r3, #7
 801095a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801095c:	68ba      	ldr	r2, [r7, #8]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	4a1f      	ldr	r2, [pc, #124]	; (80109e0 <prvHeapInit+0xac>)
 8010964:	4413      	add	r3, r2
 8010966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801096c:	4a1d      	ldr	r2, [pc, #116]	; (80109e4 <prvHeapInit+0xb0>)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010972:	4b1c      	ldr	r3, [pc, #112]	; (80109e4 <prvHeapInit+0xb0>)
 8010974:	2200      	movs	r2, #0
 8010976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	4413      	add	r3, r2
 801097e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010980:	2208      	movs	r2, #8
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	1a9b      	subs	r3, r3, r2
 8010986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f023 0307 	bic.w	r3, r3, #7
 801098e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	4a15      	ldr	r2, [pc, #84]	; (80109e8 <prvHeapInit+0xb4>)
 8010994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010996:	4b14      	ldr	r3, [pc, #80]	; (80109e8 <prvHeapInit+0xb4>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2200      	movs	r2, #0
 801099c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801099e:	4b12      	ldr	r3, [pc, #72]	; (80109e8 <prvHeapInit+0xb4>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2200      	movs	r2, #0
 80109a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	68fa      	ldr	r2, [r7, #12]
 80109ae:	1ad2      	subs	r2, r2, r3
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80109b4:	4b0c      	ldr	r3, [pc, #48]	; (80109e8 <prvHeapInit+0xb4>)
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	4a0a      	ldr	r2, [pc, #40]	; (80109ec <prvHeapInit+0xb8>)
 80109c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	4a09      	ldr	r2, [pc, #36]	; (80109f0 <prvHeapInit+0xbc>)
 80109ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80109cc:	4b09      	ldr	r3, [pc, #36]	; (80109f4 <prvHeapInit+0xc0>)
 80109ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80109d2:	601a      	str	r2, [r3, #0]
}
 80109d4:	bf00      	nop
 80109d6:	3714      	adds	r7, #20
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr
 80109e0:	2000ca08 	.word	0x2000ca08
 80109e4:	20010608 	.word	0x20010608
 80109e8:	20010610 	.word	0x20010610
 80109ec:	20010618 	.word	0x20010618
 80109f0:	20010614 	.word	0x20010614
 80109f4:	2001061c 	.word	0x2001061c

080109f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010a00:	4b28      	ldr	r3, [pc, #160]	; (8010aa4 <prvInsertBlockIntoFreeList+0xac>)
 8010a02:	60fb      	str	r3, [r7, #12]
 8010a04:	e002      	b.n	8010a0c <prvInsertBlockIntoFreeList+0x14>
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	60fb      	str	r3, [r7, #12]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d8f7      	bhi.n	8010a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	685b      	ldr	r3, [r3, #4]
 8010a1e:	68ba      	ldr	r2, [r7, #8]
 8010a20:	4413      	add	r3, r2
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d108      	bne.n	8010a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	685a      	ldr	r2, [r3, #4]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	441a      	add	r2, r3
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	68ba      	ldr	r2, [r7, #8]
 8010a44:	441a      	add	r2, r3
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d118      	bne.n	8010a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681a      	ldr	r2, [r3, #0]
 8010a52:	4b15      	ldr	r3, [pc, #84]	; (8010aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d00d      	beq.n	8010a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	685a      	ldr	r2, [r3, #4]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	441a      	add	r2, r3
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	e008      	b.n	8010a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a76:	4b0c      	ldr	r3, [pc, #48]	; (8010aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	e003      	b.n	8010a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d002      	beq.n	8010a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a96:	bf00      	nop
 8010a98:	3714      	adds	r7, #20
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop
 8010aa4:	20010608 	.word	0x20010608
 8010aa8:	20010610 	.word	0x20010610

08010aac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	4912      	ldr	r1, [pc, #72]	; (8010afc <MX_USB_DEVICE_Init+0x50>)
 8010ab4:	4812      	ldr	r0, [pc, #72]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010ab6:	f7fb fee1 	bl	800c87c <USBD_Init>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d001      	beq.n	8010ac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010ac0:	f7f2 fb1f 	bl	8003102 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010ac4:	490f      	ldr	r1, [pc, #60]	; (8010b04 <MX_USB_DEVICE_Init+0x58>)
 8010ac6:	480e      	ldr	r0, [pc, #56]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010ac8:	f7fb ff08 	bl	800c8dc <USBD_RegisterClass>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010ad2:	f7f2 fb16 	bl	8003102 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010ad6:	490c      	ldr	r1, [pc, #48]	; (8010b08 <MX_USB_DEVICE_Init+0x5c>)
 8010ad8:	4809      	ldr	r0, [pc, #36]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010ada:	f7fb fe3f 	bl	800c75c <USBD_CDC_RegisterInterface>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d001      	beq.n	8010ae8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010ae4:	f7f2 fb0d 	bl	8003102 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010ae8:	4805      	ldr	r0, [pc, #20]	; (8010b00 <MX_USB_DEVICE_Init+0x54>)
 8010aea:	f7fb ff2d 	bl	800c948 <USBD_Start>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010af4:	f7f2 fb05 	bl	8003102 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010af8:	bf00      	nop
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	200000b8 	.word	0x200000b8
 8010b00:	20010620 	.word	0x20010620
 8010b04:	20000020 	.word	0x20000020
 8010b08:	200000a4 	.word	0x200000a4

08010b0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010b10:	2200      	movs	r2, #0
 8010b12:	4905      	ldr	r1, [pc, #20]	; (8010b28 <CDC_Init_FS+0x1c>)
 8010b14:	4805      	ldr	r0, [pc, #20]	; (8010b2c <CDC_Init_FS+0x20>)
 8010b16:	f7fb fe3b 	bl	800c790 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010b1a:	4905      	ldr	r1, [pc, #20]	; (8010b30 <CDC_Init_FS+0x24>)
 8010b1c:	4803      	ldr	r0, [pc, #12]	; (8010b2c <CDC_Init_FS+0x20>)
 8010b1e:	f7fb fe59 	bl	800c7d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010b22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	200110fc 	.word	0x200110fc
 8010b2c:	20010620 	.word	0x20010620
 8010b30:	200108fc 	.word	0x200108fc

08010b34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010b34:	b480      	push	{r7}
 8010b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010b38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	6039      	str	r1, [r7, #0]
 8010b4e:	71fb      	strb	r3, [r7, #7]
 8010b50:	4613      	mov	r3, r2
 8010b52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010b54:	79fb      	ldrb	r3, [r7, #7]
 8010b56:	2b23      	cmp	r3, #35	; 0x23
 8010b58:	d84a      	bhi.n	8010bf0 <CDC_Control_FS+0xac>
 8010b5a:	a201      	add	r2, pc, #4	; (adr r2, 8010b60 <CDC_Control_FS+0x1c>)
 8010b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b60:	08010bf1 	.word	0x08010bf1
 8010b64:	08010bf1 	.word	0x08010bf1
 8010b68:	08010bf1 	.word	0x08010bf1
 8010b6c:	08010bf1 	.word	0x08010bf1
 8010b70:	08010bf1 	.word	0x08010bf1
 8010b74:	08010bf1 	.word	0x08010bf1
 8010b78:	08010bf1 	.word	0x08010bf1
 8010b7c:	08010bf1 	.word	0x08010bf1
 8010b80:	08010bf1 	.word	0x08010bf1
 8010b84:	08010bf1 	.word	0x08010bf1
 8010b88:	08010bf1 	.word	0x08010bf1
 8010b8c:	08010bf1 	.word	0x08010bf1
 8010b90:	08010bf1 	.word	0x08010bf1
 8010b94:	08010bf1 	.word	0x08010bf1
 8010b98:	08010bf1 	.word	0x08010bf1
 8010b9c:	08010bf1 	.word	0x08010bf1
 8010ba0:	08010bf1 	.word	0x08010bf1
 8010ba4:	08010bf1 	.word	0x08010bf1
 8010ba8:	08010bf1 	.word	0x08010bf1
 8010bac:	08010bf1 	.word	0x08010bf1
 8010bb0:	08010bf1 	.word	0x08010bf1
 8010bb4:	08010bf1 	.word	0x08010bf1
 8010bb8:	08010bf1 	.word	0x08010bf1
 8010bbc:	08010bf1 	.word	0x08010bf1
 8010bc0:	08010bf1 	.word	0x08010bf1
 8010bc4:	08010bf1 	.word	0x08010bf1
 8010bc8:	08010bf1 	.word	0x08010bf1
 8010bcc:	08010bf1 	.word	0x08010bf1
 8010bd0:	08010bf1 	.word	0x08010bf1
 8010bd4:	08010bf1 	.word	0x08010bf1
 8010bd8:	08010bf1 	.word	0x08010bf1
 8010bdc:	08010bf1 	.word	0x08010bf1
 8010be0:	08010bf1 	.word	0x08010bf1
 8010be4:	08010bf1 	.word	0x08010bf1
 8010be8:	08010bf1 	.word	0x08010bf1
 8010bec:	08010bf1 	.word	0x08010bf1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010bf0:	bf00      	nop
  }

  return (USBD_OK);
 8010bf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	4805      	ldr	r0, [pc, #20]	; (8010c24 <CDC_Receive_FS+0x24>)
 8010c0e:	f7fb fde1 	bl	800c7d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010c12:	4804      	ldr	r0, [pc, #16]	; (8010c24 <CDC_Receive_FS+0x24>)
 8010c14:	f7fb fdfc 	bl	800c810 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010c18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	20010620 	.word	0x20010620

08010c28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	4613      	mov	r3, r2
 8010c34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010c36:	2300      	movs	r3, #0
 8010c38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	371c      	adds	r7, #28
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr
	...

08010c4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	4603      	mov	r3, r0
 8010c54:	6039      	str	r1, [r7, #0]
 8010c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	2212      	movs	r2, #18
 8010c5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010c5e:	4b03      	ldr	r3, [pc, #12]	; (8010c6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	200000d8 	.word	0x200000d8

08010c70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	6039      	str	r1, [r7, #0]
 8010c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	2204      	movs	r2, #4
 8010c80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010c82:	4b03      	ldr	r3, [pc, #12]	; (8010c90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr
 8010c90:	200000f8 	.word	0x200000f8

08010c94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	6039      	str	r1, [r7, #0]
 8010c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ca0:	79fb      	ldrb	r3, [r7, #7]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d105      	bne.n	8010cb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	4907      	ldr	r1, [pc, #28]	; (8010cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010caa:	4808      	ldr	r0, [pc, #32]	; (8010ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8010cac:	f7fd f822 	bl	800dcf4 <USBD_GetString>
 8010cb0:	e004      	b.n	8010cbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	4904      	ldr	r1, [pc, #16]	; (8010cc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010cb6:	4805      	ldr	r0, [pc, #20]	; (8010ccc <USBD_FS_ProductStrDescriptor+0x38>)
 8010cb8:	f7fd f81c 	bl	800dcf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cbc:	4b02      	ldr	r3, [pc, #8]	; (8010cc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	200118fc 	.word	0x200118fc
 8010ccc:	0802448c 	.word	0x0802448c

08010cd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	6039      	str	r1, [r7, #0]
 8010cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010cdc:	683a      	ldr	r2, [r7, #0]
 8010cde:	4904      	ldr	r1, [pc, #16]	; (8010cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ce0:	4804      	ldr	r0, [pc, #16]	; (8010cf4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010ce2:	f7fd f807 	bl	800dcf4 <USBD_GetString>
  return USBD_StrDesc;
 8010ce6:	4b02      	ldr	r3, [pc, #8]	; (8010cf0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	200118fc 	.word	0x200118fc
 8010cf4:	080244a4 	.word	0x080244a4

08010cf8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	6039      	str	r1, [r7, #0]
 8010d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	221a      	movs	r2, #26
 8010d08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010d0a:	f000 f855 	bl	8010db8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010d0e:	4b02      	ldr	r3, [pc, #8]	; (8010d18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	200000fc 	.word	0x200000fc

08010d1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	4603      	mov	r3, r0
 8010d24:	6039      	str	r1, [r7, #0]
 8010d26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d105      	bne.n	8010d3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	4907      	ldr	r1, [pc, #28]	; (8010d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d32:	4808      	ldr	r0, [pc, #32]	; (8010d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d34:	f7fc ffde 	bl	800dcf4 <USBD_GetString>
 8010d38:	e004      	b.n	8010d44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d3a:	683a      	ldr	r2, [r7, #0]
 8010d3c:	4904      	ldr	r1, [pc, #16]	; (8010d50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d3e:	4805      	ldr	r0, [pc, #20]	; (8010d54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d40:	f7fc ffd8 	bl	800dcf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d44:	4b02      	ldr	r3, [pc, #8]	; (8010d50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3708      	adds	r7, #8
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	200118fc 	.word	0x200118fc
 8010d54:	080244b8 	.word	0x080244b8

08010d58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	4603      	mov	r3, r0
 8010d60:	6039      	str	r1, [r7, #0]
 8010d62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d64:	79fb      	ldrb	r3, [r7, #7]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d105      	bne.n	8010d76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d6a:	683a      	ldr	r2, [r7, #0]
 8010d6c:	4907      	ldr	r1, [pc, #28]	; (8010d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d6e:	4808      	ldr	r0, [pc, #32]	; (8010d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d70:	f7fc ffc0 	bl	800dcf4 <USBD_GetString>
 8010d74:	e004      	b.n	8010d80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d76:	683a      	ldr	r2, [r7, #0]
 8010d78:	4904      	ldr	r1, [pc, #16]	; (8010d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d7a:	4805      	ldr	r0, [pc, #20]	; (8010d90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d7c:	f7fc ffba 	bl	800dcf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d80:	4b02      	ldr	r3, [pc, #8]	; (8010d8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	200118fc 	.word	0x200118fc
 8010d90:	080244c4 	.word	0x080244c4

08010d94 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	6039      	str	r1, [r7, #0]
 8010d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	220c      	movs	r2, #12
 8010da4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010da6:	4b03      	ldr	r3, [pc, #12]	; (8010db4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	370c      	adds	r7, #12
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr
 8010db4:	200000ec 	.word	0x200000ec

08010db8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b084      	sub	sp, #16
 8010dbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010dbe:	4b0f      	ldr	r3, [pc, #60]	; (8010dfc <Get_SerialNum+0x44>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <Get_SerialNum+0x48>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010dca:	4b0e      	ldr	r3, [pc, #56]	; (8010e04 <Get_SerialNum+0x4c>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010dd0:	68fa      	ldr	r2, [r7, #12]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d009      	beq.n	8010df2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010dde:	2208      	movs	r2, #8
 8010de0:	4909      	ldr	r1, [pc, #36]	; (8010e08 <Get_SerialNum+0x50>)
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f000 f814 	bl	8010e10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010de8:	2204      	movs	r2, #4
 8010dea:	4908      	ldr	r1, [pc, #32]	; (8010e0c <Get_SerialNum+0x54>)
 8010dec:	68b8      	ldr	r0, [r7, #8]
 8010dee:	f000 f80f 	bl	8010e10 <IntToUnicode>
  }
}
 8010df2:	bf00      	nop
 8010df4:	3710      	adds	r7, #16
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	1ff0f420 	.word	0x1ff0f420
 8010e00:	1ff0f424 	.word	0x1ff0f424
 8010e04:	1ff0f428 	.word	0x1ff0f428
 8010e08:	200000fe 	.word	0x200000fe
 8010e0c:	2000010e 	.word	0x2000010e

08010e10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e10:	b480      	push	{r7}
 8010e12:	b087      	sub	sp, #28
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	60f8      	str	r0, [r7, #12]
 8010e18:	60b9      	str	r1, [r7, #8]
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e22:	2300      	movs	r3, #0
 8010e24:	75fb      	strb	r3, [r7, #23]
 8010e26:	e027      	b.n	8010e78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	0f1b      	lsrs	r3, r3, #28
 8010e2c:	2b09      	cmp	r3, #9
 8010e2e:	d80b      	bhi.n	8010e48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	0f1b      	lsrs	r3, r3, #28
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	7dfb      	ldrb	r3, [r7, #23]
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	440b      	add	r3, r1
 8010e40:	3230      	adds	r2, #48	; 0x30
 8010e42:	b2d2      	uxtb	r2, r2
 8010e44:	701a      	strb	r2, [r3, #0]
 8010e46:	e00a      	b.n	8010e5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	0f1b      	lsrs	r3, r3, #28
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	7dfb      	ldrb	r3, [r7, #23]
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	4619      	mov	r1, r3
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	440b      	add	r3, r1
 8010e58:	3237      	adds	r2, #55	; 0x37
 8010e5a:	b2d2      	uxtb	r2, r2
 8010e5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	011b      	lsls	r3, r3, #4
 8010e62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010e64:	7dfb      	ldrb	r3, [r7, #23]
 8010e66:	005b      	lsls	r3, r3, #1
 8010e68:	3301      	adds	r3, #1
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	2200      	movs	r2, #0
 8010e70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010e72:	7dfb      	ldrb	r3, [r7, #23]
 8010e74:	3301      	adds	r3, #1
 8010e76:	75fb      	strb	r3, [r7, #23]
 8010e78:	7dfa      	ldrb	r2, [r7, #23]
 8010e7a:	79fb      	ldrb	r3, [r7, #7]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d3d3      	bcc.n	8010e28 <IntToUnicode+0x18>
  }
}
 8010e80:	bf00      	nop
 8010e82:	bf00      	nop
 8010e84:	371c      	adds	r7, #28
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
	...

08010e90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b0ae      	sub	sp, #184	; 0xb8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	601a      	str	r2, [r3, #0]
 8010ea0:	605a      	str	r2, [r3, #4]
 8010ea2:	609a      	str	r2, [r3, #8]
 8010ea4:	60da      	str	r2, [r3, #12]
 8010ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010ea8:	f107 0314 	add.w	r3, r7, #20
 8010eac:	2290      	movs	r2, #144	; 0x90
 8010eae:	2100      	movs	r1, #0
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f00f ff07 	bl	8020cc4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ebe:	d151      	bne.n	8010f64 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010ec4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010ecc:	f107 0314 	add.w	r3, r7, #20
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7f6 fbf7 	bl	80076c4 <HAL_RCCEx_PeriphCLKConfig>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d001      	beq.n	8010ee0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010edc:	f7f2 f911 	bl	8003102 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ee0:	4b22      	ldr	r3, [pc, #136]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ee4:	4a21      	ldr	r2, [pc, #132]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010ee6:	f043 0301 	orr.w	r3, r3, #1
 8010eea:	6313      	str	r3, [r2, #48]	; 0x30
 8010eec:	4b1f      	ldr	r3, [pc, #124]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ef0:	f003 0301 	and.w	r3, r3, #1
 8010ef4:	613b      	str	r3, [r7, #16]
 8010ef6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010ef8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f00:	2302      	movs	r3, #2
 8010f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f06:	2300      	movs	r3, #0
 8010f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f0c:	2303      	movs	r3, #3
 8010f0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010f12:	230a      	movs	r3, #10
 8010f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4814      	ldr	r0, [pc, #80]	; (8010f70 <HAL_PCD_MspInit+0xe0>)
 8010f20:	f7f4 f9fc 	bl	800531c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010f24:	4b11      	ldr	r3, [pc, #68]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f28:	4a10      	ldr	r2, [pc, #64]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f2e:	6353      	str	r3, [r2, #52]	; 0x34
 8010f30:	4b0e      	ldr	r3, [pc, #56]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f38:	60fb      	str	r3, [r7, #12]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	4b0b      	ldr	r3, [pc, #44]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f40:	4a0a      	ldr	r2, [pc, #40]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f46:	6453      	str	r3, [r2, #68]	; 0x44
 8010f48:	4b08      	ldr	r3, [pc, #32]	; (8010f6c <HAL_PCD_MspInit+0xdc>)
 8010f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f50:	60bb      	str	r3, [r7, #8]
 8010f52:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010f54:	2200      	movs	r2, #0
 8010f56:	2105      	movs	r1, #5
 8010f58:	2043      	movs	r0, #67	; 0x43
 8010f5a:	f7f3 fd9f 	bl	8004a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010f5e:	2043      	movs	r0, #67	; 0x43
 8010f60:	f7f3 fdb8 	bl	8004ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f64:	bf00      	nop
 8010f66:	37b8      	adds	r7, #184	; 0xb8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	40023800 	.word	0x40023800
 8010f70:	40020000 	.word	0x40020000

08010f74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010f88:	4619      	mov	r1, r3
 8010f8a:	4610      	mov	r0, r2
 8010f8c:	f7fb fd29 	bl	800c9e2 <USBD_LL_SetupStage>
}
 8010f90:	bf00      	nop
 8010f92:	3708      	adds	r7, #8
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010faa:	78fa      	ldrb	r2, [r7, #3]
 8010fac:	6879      	ldr	r1, [r7, #4]
 8010fae:	4613      	mov	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	4413      	add	r3, r2
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	440b      	add	r3, r1
 8010fb8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	78fb      	ldrb	r3, [r7, #3]
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	f7fb fd63 	bl	800ca8c <USBD_LL_DataOutStage>
}
 8010fc6:	bf00      	nop
 8010fc8:	3708      	adds	r7, #8
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}

08010fce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fce:	b580      	push	{r7, lr}
 8010fd0:	b082      	sub	sp, #8
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010fe0:	78fa      	ldrb	r2, [r7, #3]
 8010fe2:	6879      	ldr	r1, [r7, #4]
 8010fe4:	4613      	mov	r3, r2
 8010fe6:	00db      	lsls	r3, r3, #3
 8010fe8:	4413      	add	r3, r2
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	440b      	add	r3, r1
 8010fee:	334c      	adds	r3, #76	; 0x4c
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	78fb      	ldrb	r3, [r7, #3]
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	f7fb fdfc 	bl	800cbf2 <USBD_LL_DataInStage>
}
 8010ffa:	bf00      	nop
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b082      	sub	sp, #8
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011010:	4618      	mov	r0, r3
 8011012:	f7fb ff30 	bl	800ce76 <USBD_LL_SOF>
}
 8011016:	bf00      	nop
 8011018:	3708      	adds	r7, #8
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801101e:	b580      	push	{r7, lr}
 8011020:	b084      	sub	sp, #16
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011026:	2301      	movs	r3, #1
 8011028:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d102      	bne.n	8011038 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011032:	2300      	movs	r3, #0
 8011034:	73fb      	strb	r3, [r7, #15]
 8011036:	e008      	b.n	801104a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	2b02      	cmp	r3, #2
 801103e:	d102      	bne.n	8011046 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011040:	2301      	movs	r3, #1
 8011042:	73fb      	strb	r3, [r7, #15]
 8011044:	e001      	b.n	801104a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011046:	f7f2 f85c 	bl	8003102 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011050:	7bfa      	ldrb	r2, [r7, #15]
 8011052:	4611      	mov	r1, r2
 8011054:	4618      	mov	r0, r3
 8011056:	f7fb fed0 	bl	800cdfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011060:	4618      	mov	r0, r3
 8011062:	f7fb fe78 	bl	800cd56 <USBD_LL_Reset>
}
 8011066:	bf00      	nop
 8011068:	3710      	adds	r7, #16
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
	...

08011070 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801107e:	4618      	mov	r0, r3
 8011080:	f7fb fecb 	bl	800ce1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	6812      	ldr	r2, [r2, #0]
 8011092:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011096:	f043 0301 	orr.w	r3, r3, #1
 801109a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6a1b      	ldr	r3, [r3, #32]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d005      	beq.n	80110b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80110a4:	4b04      	ldr	r3, [pc, #16]	; (80110b8 <HAL_PCD_SuspendCallback+0x48>)
 80110a6:	691b      	ldr	r3, [r3, #16]
 80110a8:	4a03      	ldr	r2, [pc, #12]	; (80110b8 <HAL_PCD_SuspendCallback+0x48>)
 80110aa:	f043 0306 	orr.w	r3, r3, #6
 80110ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80110b0:	bf00      	nop
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	e000ed00 	.word	0xe000ed00

080110bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fb febb 	bl	800ce46 <USBD_LL_Resume>
}
 80110d0:	bf00      	nop
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	460b      	mov	r3, r1
 80110e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80110ea:	78fa      	ldrb	r2, [r7, #3]
 80110ec:	4611      	mov	r1, r2
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fb ff13 	bl	800cf1a <USBD_LL_IsoOUTIncomplete>
}
 80110f4:	bf00      	nop
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	460b      	mov	r3, r1
 8011106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801110e:	78fa      	ldrb	r2, [r7, #3]
 8011110:	4611      	mov	r1, r2
 8011112:	4618      	mov	r0, r3
 8011114:	f7fb fecf 	bl	800ceb6 <USBD_LL_IsoINIncomplete>
}
 8011118:	bf00      	nop
 801111a:	3708      	adds	r7, #8
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}

08011120 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801112e:	4618      	mov	r0, r3
 8011130:	f7fb ff25 	bl	800cf7e <USBD_LL_DevConnected>
}
 8011134:	bf00      	nop
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801114a:	4618      	mov	r0, r3
 801114c:	f7fb ff22 	bl	800cf94 <USBD_LL_DevDisconnected>
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d13c      	bne.n	80111e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011168:	4a20      	ldr	r2, [pc, #128]	; (80111ec <USBD_LL_Init+0x94>)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4a1e      	ldr	r2, [pc, #120]	; (80111ec <USBD_LL_Init+0x94>)
 8011174:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011178:	4b1c      	ldr	r3, [pc, #112]	; (80111ec <USBD_LL_Init+0x94>)
 801117a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801117e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011180:	4b1a      	ldr	r3, [pc, #104]	; (80111ec <USBD_LL_Init+0x94>)
 8011182:	2206      	movs	r2, #6
 8011184:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011186:	4b19      	ldr	r3, [pc, #100]	; (80111ec <USBD_LL_Init+0x94>)
 8011188:	2202      	movs	r2, #2
 801118a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801118c:	4b17      	ldr	r3, [pc, #92]	; (80111ec <USBD_LL_Init+0x94>)
 801118e:	2200      	movs	r2, #0
 8011190:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011192:	4b16      	ldr	r3, [pc, #88]	; (80111ec <USBD_LL_Init+0x94>)
 8011194:	2202      	movs	r2, #2
 8011196:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011198:	4b14      	ldr	r3, [pc, #80]	; (80111ec <USBD_LL_Init+0x94>)
 801119a:	2200      	movs	r2, #0
 801119c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801119e:	4b13      	ldr	r3, [pc, #76]	; (80111ec <USBD_LL_Init+0x94>)
 80111a0:	2200      	movs	r2, #0
 80111a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80111a4:	4b11      	ldr	r3, [pc, #68]	; (80111ec <USBD_LL_Init+0x94>)
 80111a6:	2200      	movs	r2, #0
 80111a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80111aa:	4b10      	ldr	r3, [pc, #64]	; (80111ec <USBD_LL_Init+0x94>)
 80111ac:	2200      	movs	r2, #0
 80111ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80111b0:	4b0e      	ldr	r3, [pc, #56]	; (80111ec <USBD_LL_Init+0x94>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80111b6:	480d      	ldr	r0, [pc, #52]	; (80111ec <USBD_LL_Init+0x94>)
 80111b8:	f7f4 fa75 	bl	80056a6 <HAL_PCD_Init>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d001      	beq.n	80111c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80111c2:	f7f1 ff9e 	bl	8003102 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80111c6:	2180      	movs	r1, #128	; 0x80
 80111c8:	4808      	ldr	r0, [pc, #32]	; (80111ec <USBD_LL_Init+0x94>)
 80111ca:	f7f5 fcf0 	bl	8006bae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80111ce:	2240      	movs	r2, #64	; 0x40
 80111d0:	2100      	movs	r1, #0
 80111d2:	4806      	ldr	r0, [pc, #24]	; (80111ec <USBD_LL_Init+0x94>)
 80111d4:	f7f5 fca4 	bl	8006b20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80111d8:	2280      	movs	r2, #128	; 0x80
 80111da:	2101      	movs	r1, #1
 80111dc:	4803      	ldr	r0, [pc, #12]	; (80111ec <USBD_LL_Init+0x94>)
 80111de:	f7f5 fc9f 	bl	8006b20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80111e2:	2300      	movs	r3, #0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	20011afc 	.word	0x20011afc

080111f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111f8:	2300      	movs	r3, #0
 80111fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111fc:	2300      	movs	r3, #0
 80111fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011206:	4618      	mov	r0, r3
 8011208:	f7f4 fb71 	bl	80058ee <HAL_PCD_Start>
 801120c:	4603      	mov	r3, r0
 801120e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011210:	7bfb      	ldrb	r3, [r7, #15]
 8011212:	4618      	mov	r0, r3
 8011214:	f000 f97e 	bl	8011514 <USBD_Get_USB_Status>
 8011218:	4603      	mov	r3, r0
 801121a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801121c:	7bbb      	ldrb	r3, [r7, #14]
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b084      	sub	sp, #16
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
 801122e:	4608      	mov	r0, r1
 8011230:	4611      	mov	r1, r2
 8011232:	461a      	mov	r2, r3
 8011234:	4603      	mov	r3, r0
 8011236:	70fb      	strb	r3, [r7, #3]
 8011238:	460b      	mov	r3, r1
 801123a:	70bb      	strb	r3, [r7, #2]
 801123c:	4613      	mov	r3, r2
 801123e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011240:	2300      	movs	r3, #0
 8011242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011244:	2300      	movs	r3, #0
 8011246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801124e:	78bb      	ldrb	r3, [r7, #2]
 8011250:	883a      	ldrh	r2, [r7, #0]
 8011252:	78f9      	ldrb	r1, [r7, #3]
 8011254:	f7f5 f85e 	bl	8006314 <HAL_PCD_EP_Open>
 8011258:	4603      	mov	r3, r0
 801125a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801125c:	7bfb      	ldrb	r3, [r7, #15]
 801125e:	4618      	mov	r0, r3
 8011260:	f000 f958 	bl	8011514 <USBD_Get_USB_Status>
 8011264:	4603      	mov	r3, r0
 8011266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011268:	7bbb      	ldrb	r3, [r7, #14]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b084      	sub	sp, #16
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	460b      	mov	r3, r1
 801127c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801127e:	2300      	movs	r3, #0
 8011280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011282:	2300      	movs	r3, #0
 8011284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801128c:	78fa      	ldrb	r2, [r7, #3]
 801128e:	4611      	mov	r1, r2
 8011290:	4618      	mov	r0, r3
 8011292:	f7f5 f8a7 	bl	80063e4 <HAL_PCD_EP_Close>
 8011296:	4603      	mov	r3, r0
 8011298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801129a:	7bfb      	ldrb	r3, [r7, #15]
 801129c:	4618      	mov	r0, r3
 801129e:	f000 f939 	bl	8011514 <USBD_Get_USB_Status>
 80112a2:	4603      	mov	r3, r0
 80112a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3710      	adds	r7, #16
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	460b      	mov	r3, r1
 80112ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112ca:	78fa      	ldrb	r2, [r7, #3]
 80112cc:	4611      	mov	r1, r2
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7f5 f97f 	bl	80065d2 <HAL_PCD_EP_SetStall>
 80112d4:	4603      	mov	r3, r0
 80112d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112d8:	7bfb      	ldrb	r3, [r7, #15]
 80112da:	4618      	mov	r0, r3
 80112dc:	f000 f91a 	bl	8011514 <USBD_Get_USB_Status>
 80112e0:	4603      	mov	r3, r0
 80112e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b084      	sub	sp, #16
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
 80112f6:	460b      	mov	r3, r1
 80112f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112fa:	2300      	movs	r3, #0
 80112fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112fe:	2300      	movs	r3, #0
 8011300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011308:	78fa      	ldrb	r2, [r7, #3]
 801130a:	4611      	mov	r1, r2
 801130c:	4618      	mov	r0, r3
 801130e:	f7f5 f9c4 	bl	800669a <HAL_PCD_EP_ClrStall>
 8011312:	4603      	mov	r3, r0
 8011314:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011316:	7bfb      	ldrb	r3, [r7, #15]
 8011318:	4618      	mov	r0, r3
 801131a:	f000 f8fb 	bl	8011514 <USBD_Get_USB_Status>
 801131e:	4603      	mov	r3, r0
 8011320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011322:	7bbb      	ldrb	r3, [r7, #14]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801133e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011344:	2b00      	cmp	r3, #0
 8011346:	da0b      	bge.n	8011360 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011348:	78fb      	ldrb	r3, [r7, #3]
 801134a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801134e:	68f9      	ldr	r1, [r7, #12]
 8011350:	4613      	mov	r3, r2
 8011352:	00db      	lsls	r3, r3, #3
 8011354:	4413      	add	r3, r2
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	440b      	add	r3, r1
 801135a:	333e      	adds	r3, #62	; 0x3e
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	e00b      	b.n	8011378 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011360:	78fb      	ldrb	r3, [r7, #3]
 8011362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011366:	68f9      	ldr	r1, [r7, #12]
 8011368:	4613      	mov	r3, r2
 801136a:	00db      	lsls	r3, r3, #3
 801136c:	4413      	add	r3, r2
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	440b      	add	r3, r1
 8011372:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011376:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011378:	4618      	mov	r0, r3
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	460b      	mov	r3, r1
 801138e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011390:	2300      	movs	r3, #0
 8011392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801139e:	78fa      	ldrb	r2, [r7, #3]
 80113a0:	4611      	mov	r1, r2
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f4 ff91 	bl	80062ca <HAL_PCD_SetAddress>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f000 f8b0 	bl	8011514 <USBD_Get_USB_Status>
 80113b4:	4603      	mov	r3, r0
 80113b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}

080113c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80113c2:	b580      	push	{r7, lr}
 80113c4:	b086      	sub	sp, #24
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	60f8      	str	r0, [r7, #12]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
 80113ce:	460b      	mov	r3, r1
 80113d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113d2:	2300      	movs	r3, #0
 80113d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113d6:	2300      	movs	r3, #0
 80113d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80113e0:	7af9      	ldrb	r1, [r7, #11]
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	f7f5 f8aa 	bl	800653e <HAL_PCD_EP_Transmit>
 80113ea:	4603      	mov	r3, r0
 80113ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ee:	7dfb      	ldrb	r3, [r7, #23]
 80113f0:	4618      	mov	r0, r3
 80113f2:	f000 f88f 	bl	8011514 <USBD_Get_USB_Status>
 80113f6:	4603      	mov	r3, r0
 80113f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80113fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3718      	adds	r7, #24
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b086      	sub	sp, #24
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	607a      	str	r2, [r7, #4]
 801140e:	603b      	str	r3, [r7, #0]
 8011410:	460b      	mov	r3, r1
 8011412:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011418:	2300      	movs	r3, #0
 801141a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011422:	7af9      	ldrb	r1, [r7, #11]
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	f7f5 f826 	bl	8006478 <HAL_PCD_EP_Receive>
 801142c:	4603      	mov	r3, r0
 801142e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011430:	7dfb      	ldrb	r3, [r7, #23]
 8011432:	4618      	mov	r0, r3
 8011434:	f000 f86e 	bl	8011514 <USBD_Get_USB_Status>
 8011438:	4603      	mov	r3, r0
 801143a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801143c:	7dbb      	ldrb	r3, [r7, #22]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3718      	adds	r7, #24
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b082      	sub	sp, #8
 801144a:	af00      	add	r7, sp, #0
 801144c:	6078      	str	r0, [r7, #4]
 801144e:	460b      	mov	r3, r1
 8011450:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011458:	78fa      	ldrb	r2, [r7, #3]
 801145a:	4611      	mov	r1, r2
 801145c:	4618      	mov	r0, r3
 801145e:	f7f5 f856 	bl	800650e <HAL_PCD_EP_GetRxCount>
 8011462:	4603      	mov	r3, r0
}
 8011464:	4618      	mov	r0, r3
 8011466:	3708      	adds	r7, #8
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	460b      	mov	r3, r1
 8011476:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011478:	78fb      	ldrb	r3, [r7, #3]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d002      	beq.n	8011484 <HAL_PCDEx_LPM_Callback+0x18>
 801147e:	2b01      	cmp	r3, #1
 8011480:	d01f      	beq.n	80114c2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011482:	e03b      	b.n	80114fc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6a1b      	ldr	r3, [r3, #32]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d007      	beq.n	801149c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801148c:	f000 f83c 	bl	8011508 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011490:	4b1c      	ldr	r3, [pc, #112]	; (8011504 <HAL_PCDEx_LPM_Callback+0x98>)
 8011492:	691b      	ldr	r3, [r3, #16]
 8011494:	4a1b      	ldr	r2, [pc, #108]	; (8011504 <HAL_PCDEx_LPM_Callback+0x98>)
 8011496:	f023 0306 	bic.w	r3, r3, #6
 801149a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	6812      	ldr	r2, [r2, #0]
 80114aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80114ae:	f023 0301 	bic.w	r3, r3, #1
 80114b2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fb fcc3 	bl	800ce46 <USBD_LL_Resume>
    break;
 80114c0:	e01c      	b.n	80114fc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	6812      	ldr	r2, [r2, #0]
 80114d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80114d4:	f043 0301 	orr.w	r3, r3, #1
 80114d8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7fb fc9a 	bl	800ce1a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6a1b      	ldr	r3, [r3, #32]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d005      	beq.n	80114fa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80114ee:	4b05      	ldr	r3, [pc, #20]	; (8011504 <HAL_PCDEx_LPM_Callback+0x98>)
 80114f0:	691b      	ldr	r3, [r3, #16]
 80114f2:	4a04      	ldr	r2, [pc, #16]	; (8011504 <HAL_PCDEx_LPM_Callback+0x98>)
 80114f4:	f043 0306 	orr.w	r3, r3, #6
 80114f8:	6113      	str	r3, [r2, #16]
    break;
 80114fa:	bf00      	nop
}
 80114fc:	bf00      	nop
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	e000ed00 	.word	0xe000ed00

08011508 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801150c:	f7f1 fd7a 	bl	8003004 <SystemClock_Config>
}
 8011510:	bf00      	nop
 8011512:	bd80      	pop	{r7, pc}

08011514 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011514:	b480      	push	{r7}
 8011516:	b085      	sub	sp, #20
 8011518:	af00      	add	r7, sp, #0
 801151a:	4603      	mov	r3, r0
 801151c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801151e:	2300      	movs	r3, #0
 8011520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011522:	79fb      	ldrb	r3, [r7, #7]
 8011524:	2b03      	cmp	r3, #3
 8011526:	d817      	bhi.n	8011558 <USBD_Get_USB_Status+0x44>
 8011528:	a201      	add	r2, pc, #4	; (adr r2, 8011530 <USBD_Get_USB_Status+0x1c>)
 801152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801152e:	bf00      	nop
 8011530:	08011541 	.word	0x08011541
 8011534:	08011547 	.word	0x08011547
 8011538:	0801154d 	.word	0x0801154d
 801153c:	08011553 	.word	0x08011553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011540:	2300      	movs	r3, #0
 8011542:	73fb      	strb	r3, [r7, #15]
    break;
 8011544:	e00b      	b.n	801155e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011546:	2303      	movs	r3, #3
 8011548:	73fb      	strb	r3, [r7, #15]
    break;
 801154a:	e008      	b.n	801155e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801154c:	2301      	movs	r3, #1
 801154e:	73fb      	strb	r3, [r7, #15]
    break;
 8011550:	e005      	b.n	801155e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011552:	2303      	movs	r3, #3
 8011554:	73fb      	strb	r3, [r7, #15]
    break;
 8011556:	e002      	b.n	801155e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011558:	2303      	movs	r3, #3
 801155a:	73fb      	strb	r3, [r7, #15]
    break;
 801155c:	bf00      	nop
  }
  return usb_status;
 801155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011560:	4618      	mov	r0, r3
 8011562:	3714      	adds	r7, #20
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 801156c:	4b04      	ldr	r3, [pc, #16]	; (8011580 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	b10a      	cbz	r2, 8011576 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 8011572:	4803      	ldr	r0, [pc, #12]	; (8011580 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8011574:	4770      	bx	lr
 8011576:	4a03      	ldr	r2, [pc, #12]	; (8011584 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 8011578:	4801      	ldr	r0, [pc, #4]	; (8011580 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801157a:	6812      	ldr	r2, [r2, #0]
 801157c:	601a      	str	r2, [r3, #0]
 801157e:	4770      	bx	lr
 8011580:	20000120 	.word	0x20000120
 8011584:	20000694 	.word	0x20000694

08011588 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011588:	4b04      	ldr	r3, [pc, #16]	; (801159c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801158a:	4805      	ldr	r0, [pc, #20]	; (80115a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	4905      	ldr	r1, [pc, #20]	; (80115a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 8011590:	4a05      	ldr	r2, [pc, #20]	; (80115a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 8011592:	6003      	str	r3, [r0, #0]
 8011594:	600b      	str	r3, [r1, #0]
 8011596:	6013      	str	r3, [r2, #0]
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop
 801159c:	20000694 	.word	0x20000694
 80115a0:	2000013c 	.word	0x2000013c
 80115a4:	20000148 	.word	0x20000148
 80115a8:	20000120 	.word	0x20000120

080115ac <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 80115ac:	f005 bf74 	b.w	8017498 <custom_test_msgs__srv__AddThreeInts_Request__init>

080115b0 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 80115b0:	f005 bf76 	b.w	80174a0 <custom_test_msgs__srv__AddThreeInts_Request__fini>

080115b4 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 80115b4:	f005 bf76 	b.w	80174a4 <custom_test_msgs__srv__AddThreeInts_Response__init>

080115b8 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 80115b8:	f005 bf78 	b.w	80174ac <custom_test_msgs__srv__AddThreeInts_Response__fini>

080115bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80115bc:	4b04      	ldr	r3, [pc, #16]	; (80115d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	b10a      	cbz	r2, 80115c6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 80115c2:	4803      	ldr	r0, [pc, #12]	; (80115d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80115c4:	4770      	bx	lr
 80115c6:	4a03      	ldr	r2, [pc, #12]	; (80115d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 80115c8:	4801      	ldr	r0, [pc, #4]	; (80115d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80115ca:	6812      	ldr	r2, [r2, #0]
 80115cc:	601a      	str	r2, [r3, #0]
 80115ce:	4770      	bx	lr
 80115d0:	20000208 	.word	0x20000208
 80115d4:	20000698 	.word	0x20000698

080115d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 80115d8:	4b04      	ldr	r3, [pc, #16]	; (80115ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	b10a      	cbz	r2, 80115e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 80115de:	4803      	ldr	r0, [pc, #12]	; (80115ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80115e0:	4770      	bx	lr
 80115e2:	4a03      	ldr	r2, [pc, #12]	; (80115f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 80115e4:	4801      	ldr	r0, [pc, #4]	; (80115ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80115e6:	6812      	ldr	r2, [r2, #0]
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	4770      	bx	lr
 80115ec:	20000250 	.word	0x20000250
 80115f0:	20000698 	.word	0x20000698

080115f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80115f4:	4b13      	ldr	r3, [pc, #76]	; (8011644 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	b132      	cbz	r2, 8011608 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	689a      	ldr	r2, [r3, #8]
 80115fe:	b152      	cbz	r2, 8011616 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8011600:	68da      	ldr	r2, [r3, #12]
 8011602:	b182      	cbz	r2, 8011626 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8011604:	480f      	ldr	r0, [pc, #60]	; (8011644 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011606:	4770      	bx	lr
 8011608:	4a0f      	ldr	r2, [pc, #60]	; (8011648 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801160a:	6812      	ldr	r2, [r2, #0]
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	689a      	ldr	r2, [r3, #8]
 8011612:	2a00      	cmp	r2, #0
 8011614:	d1f4      	bne.n	8011600 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8011616:	4a0d      	ldr	r2, [pc, #52]	; (801164c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8011618:	6811      	ldr	r1, [r2, #0]
 801161a:	b179      	cbz	r1, 801163c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 801161c:	6852      	ldr	r2, [r2, #4]
 801161e:	609a      	str	r2, [r3, #8]
 8011620:	68da      	ldr	r2, [r3, #12]
 8011622:	2a00      	cmp	r2, #0
 8011624:	d1ee      	bne.n	8011604 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 8011626:	4a0a      	ldr	r2, [pc, #40]	; (8011650 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 8011628:	6811      	ldr	r1, [r2, #0]
 801162a:	b119      	cbz	r1, 8011634 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 801162c:	6852      	ldr	r2, [r2, #4]
 801162e:	4805      	ldr	r0, [pc, #20]	; (8011644 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011630:	60da      	str	r2, [r3, #12]
 8011632:	4770      	bx	lr
 8011634:	4904      	ldr	r1, [pc, #16]	; (8011648 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8011636:	6809      	ldr	r1, [r1, #0]
 8011638:	6011      	str	r1, [r2, #0]
 801163a:	e7f7      	b.n	801162c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 801163c:	4902      	ldr	r1, [pc, #8]	; (8011648 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801163e:	6809      	ldr	r1, [r1, #0]
 8011640:	6011      	str	r1, [r2, #0]
 8011642:	e7eb      	b.n	801161c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8011644:	2000026c 	.word	0x2000026c
 8011648:	20000698 	.word	0x20000698
 801164c:	20000208 	.word	0x20000208
 8011650:	20000250 	.word	0x20000250

08011654 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011654:	4800      	ldr	r0, [pc, #0]	; (8011658 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8011656:	4770      	bx	lr
 8011658:	20000294 	.word	0x20000294

0801165c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 801165c:	4800      	ldr	r0, [pc, #0]	; (8011660 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 801165e:	4770      	bx	lr
 8011660:	200002a0 	.word	0x200002a0

08011664 <_AddThreeInts_Response__max_serialized_size>:
 8011664:	2108      	movs	r1, #8
 8011666:	2000      	movs	r0, #0
 8011668:	b508      	push	{r3, lr}
 801166a:	f001 fdc7 	bl	80131fc <ucdr_alignment>
 801166e:	3008      	adds	r0, #8
 8011670:	bd08      	pop	{r3, pc}
 8011672:	bf00      	nop

08011674 <_AddThreeInts_Response__cdr_deserialize>:
 8011674:	b109      	cbz	r1, 801167a <_AddThreeInts_Response__cdr_deserialize+0x6>
 8011676:	f001 bb0d 	b.w	8012c94 <ucdr_deserialize_int64_t>
 801167a:	4608      	mov	r0, r1
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop

08011680 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8011680:	b1b8      	cbz	r0, 80116b2 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8011682:	b538      	push	{r3, r4, r5, lr}
 8011684:	460d      	mov	r5, r1
 8011686:	2108      	movs	r1, #8
 8011688:	4628      	mov	r0, r5
 801168a:	f001 fdb7 	bl	80131fc <ucdr_alignment>
 801168e:	f105 0308 	add.w	r3, r5, #8
 8011692:	2108      	movs	r1, #8
 8011694:	f1c5 0508 	rsb	r5, r5, #8
 8011698:	181c      	adds	r4, r3, r0
 801169a:	4620      	mov	r0, r4
 801169c:	f001 fdae 	bl	80131fc <ucdr_alignment>
 80116a0:	2108      	movs	r1, #8
 80116a2:	4408      	add	r0, r1
 80116a4:	4404      	add	r4, r0
 80116a6:	4620      	mov	r0, r4
 80116a8:	f001 fda8 	bl	80131fc <ucdr_alignment>
 80116ac:	4428      	add	r0, r5
 80116ae:	4420      	add	r0, r4
 80116b0:	bd38      	pop	{r3, r4, r5, pc}
 80116b2:	4770      	bx	lr

080116b4 <_AddThreeInts_Response__get_serialized_size>:
 80116b4:	b130      	cbz	r0, 80116c4 <_AddThreeInts_Response__get_serialized_size+0x10>
 80116b6:	2108      	movs	r1, #8
 80116b8:	2000      	movs	r0, #0
 80116ba:	b508      	push	{r3, lr}
 80116bc:	f001 fd9e 	bl	80131fc <ucdr_alignment>
 80116c0:	3008      	adds	r0, #8
 80116c2:	bd08      	pop	{r3, pc}
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <_AddThreeInts_Request__cdr_deserialize>:
 80116c8:	b538      	push	{r3, r4, r5, lr}
 80116ca:	460c      	mov	r4, r1
 80116cc:	b171      	cbz	r1, 80116ec <_AddThreeInts_Request__cdr_deserialize+0x24>
 80116ce:	4605      	mov	r5, r0
 80116d0:	f001 fae0 	bl	8012c94 <ucdr_deserialize_int64_t>
 80116d4:	f104 0108 	add.w	r1, r4, #8
 80116d8:	4628      	mov	r0, r5
 80116da:	f001 fadb 	bl	8012c94 <ucdr_deserialize_int64_t>
 80116de:	f104 0110 	add.w	r1, r4, #16
 80116e2:	4628      	mov	r0, r5
 80116e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116e8:	f001 bad4 	b.w	8012c94 <ucdr_deserialize_int64_t>
 80116ec:	4608      	mov	r0, r1
 80116ee:	bd38      	pop	{r3, r4, r5, pc}

080116f0 <_AddThreeInts_Request__cdr_serialize>:
 80116f0:	b198      	cbz	r0, 801171a <_AddThreeInts_Request__cdr_serialize+0x2a>
 80116f2:	b570      	push	{r4, r5, r6, lr}
 80116f4:	460d      	mov	r5, r1
 80116f6:	4604      	mov	r4, r0
 80116f8:	e9d0 2300 	ldrd	r2, r3, [r0]
 80116fc:	4608      	mov	r0, r1
 80116fe:	f001 f9f9 	bl	8012af4 <ucdr_serialize_int64_t>
 8011702:	4628      	mov	r0, r5
 8011704:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011708:	f001 f9f4 	bl	8012af4 <ucdr_serialize_int64_t>
 801170c:	4628      	mov	r0, r5
 801170e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011716:	f001 b9ed 	b.w	8012af4 <ucdr_serialize_int64_t>
 801171a:	4770      	bx	lr

0801171c <_AddThreeInts_Response__cdr_serialize>:
 801171c:	b120      	cbz	r0, 8011728 <_AddThreeInts_Response__cdr_serialize+0xc>
 801171e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011722:	4608      	mov	r0, r1
 8011724:	f001 b9e6 	b.w	8012af4 <ucdr_serialize_int64_t>
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop

0801172c <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 801172c:	b138      	cbz	r0, 801173e <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 801172e:	b508      	push	{r3, lr}
 8011730:	460b      	mov	r3, r1
 8011732:	2108      	movs	r1, #8
 8011734:	4618      	mov	r0, r3
 8011736:	f001 fd61 	bl	80131fc <ucdr_alignment>
 801173a:	3008      	adds	r0, #8
 801173c:	bd08      	pop	{r3, pc}
 801173e:	4770      	bx	lr

08011740 <_AddThreeInts_Request__get_serialized_size>:
 8011740:	b190      	cbz	r0, 8011768 <_AddThreeInts_Request__get_serialized_size+0x28>
 8011742:	2108      	movs	r1, #8
 8011744:	2000      	movs	r0, #0
 8011746:	b510      	push	{r4, lr}
 8011748:	f001 fd58 	bl	80131fc <ucdr_alignment>
 801174c:	2108      	movs	r1, #8
 801174e:	1844      	adds	r4, r0, r1
 8011750:	4620      	mov	r0, r4
 8011752:	f001 fd53 	bl	80131fc <ucdr_alignment>
 8011756:	2108      	movs	r1, #8
 8011758:	4408      	add	r0, r1
 801175a:	4404      	add	r4, r0
 801175c:	4620      	mov	r0, r4
 801175e:	f001 fd4d 	bl	80131fc <ucdr_alignment>
 8011762:	3008      	adds	r0, #8
 8011764:	4420      	add	r0, r4
 8011766:	bd10      	pop	{r4, pc}
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop

0801176c <_AddThreeInts_Request__max_serialized_size>:
 801176c:	b538      	push	{r3, r4, r5, lr}
 801176e:	2108      	movs	r1, #8
 8011770:	2000      	movs	r0, #0
 8011772:	f001 fd43 	bl	80131fc <ucdr_alignment>
 8011776:	2108      	movs	r1, #8
 8011778:	1845      	adds	r5, r0, r1
 801177a:	4628      	mov	r0, r5
 801177c:	f001 fd3e 	bl	80131fc <ucdr_alignment>
 8011780:	2108      	movs	r1, #8
 8011782:	1844      	adds	r4, r0, r1
 8011784:	442c      	add	r4, r5
 8011786:	4620      	mov	r0, r4
 8011788:	f001 fd38 	bl	80131fc <ucdr_alignment>
 801178c:	3008      	adds	r0, #8
 801178e:	4420      	add	r0, r4
 8011790:	bd38      	pop	{r3, r4, r5, pc}
 8011792:	bf00      	nop

08011794 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011794:	4800      	ldr	r0, [pc, #0]	; (8011798 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 8011796:	4770      	bx	lr
 8011798:	20000288 	.word	0x20000288

0801179c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 801179c:	4b04      	ldr	r3, [pc, #16]	; (80117b0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	b10a      	cbz	r2, 80117a6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 80117a2:	4803      	ldr	r0, [pc, #12]	; (80117b0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80117a4:	4770      	bx	lr
 80117a6:	4a03      	ldr	r2, [pc, #12]	; (80117b4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 80117a8:	4801      	ldr	r0, [pc, #4]	; (80117b0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80117aa:	6812      	ldr	r2, [r2, #0]
 80117ac:	601a      	str	r2, [r3, #0]
 80117ae:	4770      	bx	lr
 80117b0:	200002ec 	.word	0x200002ec
 80117b4:	20000694 	.word	0x20000694

080117b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80117b8:	4a02      	ldr	r2, [pc, #8]	; (80117c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 80117ba:	4b03      	ldr	r3, [pc, #12]	; (80117c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 80117bc:	6812      	ldr	r2, [r2, #0]
 80117be:	601a      	str	r2, [r3, #0]
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	20000694 	.word	0x20000694
 80117c8:	200002ec 	.word	0x200002ec

080117cc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80117cc:	4b04      	ldr	r3, [pc, #16]	; (80117e0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	b10a      	cbz	r2, 80117d6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 80117d2:	4803      	ldr	r0, [pc, #12]	; (80117e0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80117d4:	4770      	bx	lr
 80117d6:	4a03      	ldr	r2, [pc, #12]	; (80117e4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 80117d8:	4801      	ldr	r0, [pc, #4]	; (80117e0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80117da:	6812      	ldr	r2, [r2, #0]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	4770      	bx	lr
 80117e0:	20000300 	.word	0x20000300
 80117e4:	20000694 	.word	0x20000694

080117e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80117e8:	4a02      	ldr	r2, [pc, #8]	; (80117f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 80117ea:	4b03      	ldr	r3, [pc, #12]	; (80117f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 80117ec:	6812      	ldr	r2, [r2, #0]
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	20000694 	.word	0x20000694
 80117f8:	20000300 	.word	0x20000300

080117fc <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 80117fc:	f005 be58 	b.w	80174b0 <drive_msgs__msg__Omni__init>

08011800 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 8011800:	f005 be68 	b.w	80174d4 <drive_msgs__msg__Omni__fini>

08011804 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011804:	4b04      	ldr	r3, [pc, #16]	; (8011818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	b10a      	cbz	r2, 801180e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 801180a:	4803      	ldr	r0, [pc, #12]	; (8011818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801180c:	4770      	bx	lr
 801180e:	4a03      	ldr	r2, [pc, #12]	; (801181c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011810:	4801      	ldr	r0, [pc, #4]	; (8011818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011812:	6812      	ldr	r2, [r2, #0]
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	4770      	bx	lr
 8011818:	20000438 	.word	0x20000438
 801181c:	20000698 	.word	0x20000698

08011820 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 8011820:	f005 be5c 	b.w	80174dc <drive_msgs__msg__OmniEnc__init>

08011824 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 8011824:	f005 be6c 	b.w	8017500 <drive_msgs__msg__OmniEnc__fini>

08011828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011828:	4b04      	ldr	r3, [pc, #16]	; (801183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	b10a      	cbz	r2, 8011832 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 801182e:	4803      	ldr	r0, [pc, #12]	; (801183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011830:	4770      	bx	lr
 8011832:	4a03      	ldr	r2, [pc, #12]	; (8011840 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011834:	4801      	ldr	r0, [pc, #4]	; (801183c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011836:	6812      	ldr	r2, [r2, #0]
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	4770      	bx	lr
 801183c:	20000624 	.word	0x20000624
 8011840:	20000698 	.word	0x20000698

08011844 <_Omni__cdr_serialize>:
 8011844:	b330      	cbz	r0, 8011894 <_Omni__cdr_serialize+0x50>
 8011846:	b570      	push	{r4, r5, r6, lr}
 8011848:	6806      	ldr	r6, [r0, #0]
 801184a:	4604      	mov	r4, r0
 801184c:	460d      	mov	r5, r1
 801184e:	b1f6      	cbz	r6, 801188e <_Omni__cdr_serialize+0x4a>
 8011850:	4630      	mov	r0, r6
 8011852:	f7ee fd55 	bl	8000300 <strlen>
 8011856:	1c42      	adds	r2, r0, #1
 8011858:	4631      	mov	r1, r6
 801185a:	6060      	str	r0, [r4, #4]
 801185c:	4628      	mov	r0, r5
 801185e:	f001 fd3d 	bl	80132dc <ucdr_serialize_sequence_char>
 8011862:	4628      	mov	r0, r5
 8011864:	ed94 0b04 	vldr	d0, [r4, #16]
 8011868:	f001 fada 	bl	8012e20 <ucdr_serialize_double>
 801186c:	4628      	mov	r0, r5
 801186e:	ed94 0b06 	vldr	d0, [r4, #24]
 8011872:	f001 fad5 	bl	8012e20 <ucdr_serialize_double>
 8011876:	4628      	mov	r0, r5
 8011878:	ed94 0b08 	vldr	d0, [r4, #32]
 801187c:	f001 fad0 	bl	8012e20 <ucdr_serialize_double>
 8011880:	4628      	mov	r0, r5
 8011882:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801188a:	f001 bac9 	b.w	8012e20 <ucdr_serialize_double>
 801188e:	4632      	mov	r2, r6
 8011890:	4630      	mov	r0, r6
 8011892:	e7e1      	b.n	8011858 <_Omni__cdr_serialize+0x14>
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop

08011898 <get_serialized_size_drive_msgs__msg__Omni>:
 8011898:	b570      	push	{r4, r5, r6, lr}
 801189a:	4604      	mov	r4, r0
 801189c:	b310      	cbz	r0, 80118e4 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 801189e:	460d      	mov	r5, r1
 80118a0:	2104      	movs	r1, #4
 80118a2:	4628      	mov	r0, r5
 80118a4:	f001 fcaa 	bl	80131fc <ucdr_alignment>
 80118a8:	6866      	ldr	r6, [r4, #4]
 80118aa:	1d6b      	adds	r3, r5, #5
 80118ac:	2108      	movs	r1, #8
 80118ae:	f1c5 0508 	rsb	r5, r5, #8
 80118b2:	4433      	add	r3, r6
 80118b4:	181e      	adds	r6, r3, r0
 80118b6:	4630      	mov	r0, r6
 80118b8:	f001 fca0 	bl	80131fc <ucdr_alignment>
 80118bc:	2108      	movs	r1, #8
 80118be:	1844      	adds	r4, r0, r1
 80118c0:	4426      	add	r6, r4
 80118c2:	4630      	mov	r0, r6
 80118c4:	f001 fc9a 	bl	80131fc <ucdr_alignment>
 80118c8:	2108      	movs	r1, #8
 80118ca:	1844      	adds	r4, r0, r1
 80118cc:	4434      	add	r4, r6
 80118ce:	4620      	mov	r0, r4
 80118d0:	f001 fc94 	bl	80131fc <ucdr_alignment>
 80118d4:	2108      	movs	r1, #8
 80118d6:	4408      	add	r0, r1
 80118d8:	4404      	add	r4, r0
 80118da:	4620      	mov	r0, r4
 80118dc:	f001 fc8e 	bl	80131fc <ucdr_alignment>
 80118e0:	4428      	add	r0, r5
 80118e2:	4420      	add	r0, r4
 80118e4:	bd70      	pop	{r4, r5, r6, pc}
 80118e6:	bf00      	nop

080118e8 <_Omni__cdr_deserialize>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	460c      	mov	r4, r1
 80118ec:	b082      	sub	sp, #8
 80118ee:	b329      	cbz	r1, 801193c <_Omni__cdr_deserialize+0x54>
 80118f0:	688e      	ldr	r6, [r1, #8]
 80118f2:	ab01      	add	r3, sp, #4
 80118f4:	6809      	ldr	r1, [r1, #0]
 80118f6:	4605      	mov	r5, r0
 80118f8:	4632      	mov	r2, r6
 80118fa:	f001 fd01 	bl	8013300 <ucdr_deserialize_sequence_char>
 80118fe:	9b01      	ldr	r3, [sp, #4]
 8011900:	b9c0      	cbnz	r0, 8011934 <_Omni__cdr_deserialize+0x4c>
 8011902:	429e      	cmp	r6, r3
 8011904:	d31d      	bcc.n	8011942 <_Omni__cdr_deserialize+0x5a>
 8011906:	f104 0110 	add.w	r1, r4, #16
 801190a:	4628      	mov	r0, r5
 801190c:	f001 fb58 	bl	8012fc0 <ucdr_deserialize_double>
 8011910:	f104 0118 	add.w	r1, r4, #24
 8011914:	4628      	mov	r0, r5
 8011916:	f001 fb53 	bl	8012fc0 <ucdr_deserialize_double>
 801191a:	f104 0120 	add.w	r1, r4, #32
 801191e:	4628      	mov	r0, r5
 8011920:	f001 fb4e 	bl	8012fc0 <ucdr_deserialize_double>
 8011924:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011928:	4628      	mov	r0, r5
 801192a:	b002      	add	sp, #8
 801192c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011930:	f001 bb46 	b.w	8012fc0 <ucdr_deserialize_double>
 8011934:	b103      	cbz	r3, 8011938 <_Omni__cdr_deserialize+0x50>
 8011936:	3b01      	subs	r3, #1
 8011938:	6063      	str	r3, [r4, #4]
 801193a:	e7e4      	b.n	8011906 <_Omni__cdr_deserialize+0x1e>
 801193c:	4608      	mov	r0, r1
 801193e:	b002      	add	sp, #8
 8011940:	bd70      	pop	{r4, r5, r6, pc}
 8011942:	2101      	movs	r1, #1
 8011944:	75a8      	strb	r0, [r5, #22]
 8011946:	7569      	strb	r1, [r5, #21]
 8011948:	6060      	str	r0, [r4, #4]
 801194a:	4628      	mov	r0, r5
 801194c:	f001 fc6e 	bl	801322c <ucdr_align_to>
 8011950:	9901      	ldr	r1, [sp, #4]
 8011952:	4628      	mov	r0, r5
 8011954:	f001 fca2 	bl	801329c <ucdr_advance_buffer>
 8011958:	e7d5      	b.n	8011906 <_Omni__cdr_deserialize+0x1e>
 801195a:	bf00      	nop

0801195c <_Omni__max_serialized_size>:
 801195c:	b538      	push	{r3, r4, r5, lr}
 801195e:	2108      	movs	r1, #8
 8011960:	2000      	movs	r0, #0
 8011962:	f001 fc4b 	bl	80131fc <ucdr_alignment>
 8011966:	2108      	movs	r1, #8
 8011968:	1845      	adds	r5, r0, r1
 801196a:	4628      	mov	r0, r5
 801196c:	f001 fc46 	bl	80131fc <ucdr_alignment>
 8011970:	2108      	movs	r1, #8
 8011972:	1844      	adds	r4, r0, r1
 8011974:	442c      	add	r4, r5
 8011976:	4620      	mov	r0, r4
 8011978:	f001 fc40 	bl	80131fc <ucdr_alignment>
 801197c:	2108      	movs	r1, #8
 801197e:	4408      	add	r0, r1
 8011980:	4404      	add	r4, r0
 8011982:	4620      	mov	r0, r4
 8011984:	f001 fc3a 	bl	80131fc <ucdr_alignment>
 8011988:	3008      	adds	r0, #8
 801198a:	4420      	add	r0, r4
 801198c:	bd38      	pop	{r3, r4, r5, pc}
 801198e:	bf00      	nop

08011990 <_Omni__get_serialized_size>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	4604      	mov	r4, r0
 8011994:	b1f0      	cbz	r0, 80119d4 <_Omni__get_serialized_size+0x44>
 8011996:	2104      	movs	r1, #4
 8011998:	2000      	movs	r0, #0
 801199a:	f001 fc2f 	bl	80131fc <ucdr_alignment>
 801199e:	6863      	ldr	r3, [r4, #4]
 80119a0:	2108      	movs	r1, #8
 80119a2:	3305      	adds	r3, #5
 80119a4:	181d      	adds	r5, r3, r0
 80119a6:	4628      	mov	r0, r5
 80119a8:	f001 fc28 	bl	80131fc <ucdr_alignment>
 80119ac:	2108      	movs	r1, #8
 80119ae:	1844      	adds	r4, r0, r1
 80119b0:	4425      	add	r5, r4
 80119b2:	4628      	mov	r0, r5
 80119b4:	f001 fc22 	bl	80131fc <ucdr_alignment>
 80119b8:	2108      	movs	r1, #8
 80119ba:	1844      	adds	r4, r0, r1
 80119bc:	442c      	add	r4, r5
 80119be:	4620      	mov	r0, r4
 80119c0:	f001 fc1c 	bl	80131fc <ucdr_alignment>
 80119c4:	2108      	movs	r1, #8
 80119c6:	4408      	add	r0, r1
 80119c8:	4404      	add	r4, r0
 80119ca:	4620      	mov	r0, r4
 80119cc:	f001 fc16 	bl	80131fc <ucdr_alignment>
 80119d0:	3008      	adds	r0, #8
 80119d2:	4420      	add	r0, r4
 80119d4:	bd38      	pop	{r3, r4, r5, pc}
 80119d6:	bf00      	nop

080119d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80119d8:	4800      	ldr	r0, [pc, #0]	; (80119dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 80119da:	4770      	bx	lr
 80119dc:	20000630 	.word	0x20000630

080119e0 <_OmniEnc__cdr_serialize>:
 80119e0:	b3a8      	cbz	r0, 8011a4e <_OmniEnc__cdr_serialize+0x6e>
 80119e2:	b570      	push	{r4, r5, r6, lr}
 80119e4:	6806      	ldr	r6, [r0, #0]
 80119e6:	4604      	mov	r4, r0
 80119e8:	460d      	mov	r5, r1
 80119ea:	b36e      	cbz	r6, 8011a48 <_OmniEnc__cdr_serialize+0x68>
 80119ec:	4630      	mov	r0, r6
 80119ee:	f7ee fc87 	bl	8000300 <strlen>
 80119f2:	1c42      	adds	r2, r0, #1
 80119f4:	4631      	mov	r1, r6
 80119f6:	6060      	str	r0, [r4, #4]
 80119f8:	4628      	mov	r0, r5
 80119fa:	f001 fc6f 	bl	80132dc <ucdr_serialize_sequence_char>
 80119fe:	4628      	mov	r0, r5
 8011a00:	ed94 0b04 	vldr	d0, [r4, #16]
 8011a04:	f001 fa0c 	bl	8012e20 <ucdr_serialize_double>
 8011a08:	4628      	mov	r0, r5
 8011a0a:	ed94 0b06 	vldr	d0, [r4, #24]
 8011a0e:	f001 fa07 	bl	8012e20 <ucdr_serialize_double>
 8011a12:	4628      	mov	r0, r5
 8011a14:	ed94 0b08 	vldr	d0, [r4, #32]
 8011a18:	f001 fa02 	bl	8012e20 <ucdr_serialize_double>
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011a22:	f001 f9fd 	bl	8012e20 <ucdr_serialize_double>
 8011a26:	4628      	mov	r0, r5
 8011a28:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 8011a2c:	f001 f9f8 	bl	8012e20 <ucdr_serialize_double>
 8011a30:	4628      	mov	r0, r5
 8011a32:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 8011a36:	f001 f9f3 	bl	8012e20 <ucdr_serialize_double>
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8011a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a44:	f001 b9ec 	b.w	8012e20 <ucdr_serialize_double>
 8011a48:	4632      	mov	r2, r6
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	e7d2      	b.n	80119f4 <_OmniEnc__cdr_serialize+0x14>
 8011a4e:	4770      	bx	lr

08011a50 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 8011a50:	b570      	push	{r4, r5, r6, lr}
 8011a52:	460c      	mov	r4, r1
 8011a54:	4605      	mov	r5, r0
 8011a56:	2104      	movs	r1, #4
 8011a58:	4620      	mov	r0, r4
 8011a5a:	f001 fbcf 	bl	80131fc <ucdr_alignment>
 8011a5e:	686b      	ldr	r3, [r5, #4]
 8011a60:	2108      	movs	r1, #8
 8011a62:	4423      	add	r3, r4
 8011a64:	f1c4 0408 	rsb	r4, r4, #8
 8011a68:	3305      	adds	r3, #5
 8011a6a:	18c6      	adds	r6, r0, r3
 8011a6c:	4630      	mov	r0, r6
 8011a6e:	f001 fbc5 	bl	80131fc <ucdr_alignment>
 8011a72:	2108      	movs	r1, #8
 8011a74:	1845      	adds	r5, r0, r1
 8011a76:	442e      	add	r6, r5
 8011a78:	4630      	mov	r0, r6
 8011a7a:	f001 fbbf 	bl	80131fc <ucdr_alignment>
 8011a7e:	2108      	movs	r1, #8
 8011a80:	1845      	adds	r5, r0, r1
 8011a82:	4435      	add	r5, r6
 8011a84:	4628      	mov	r0, r5
 8011a86:	f001 fbb9 	bl	80131fc <ucdr_alignment>
 8011a8a:	2108      	movs	r1, #8
 8011a8c:	4408      	add	r0, r1
 8011a8e:	4405      	add	r5, r0
 8011a90:	4628      	mov	r0, r5
 8011a92:	f001 fbb3 	bl	80131fc <ucdr_alignment>
 8011a96:	2108      	movs	r1, #8
 8011a98:	4408      	add	r0, r1
 8011a9a:	1946      	adds	r6, r0, r5
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f001 fbad 	bl	80131fc <ucdr_alignment>
 8011aa2:	2108      	movs	r1, #8
 8011aa4:	1845      	adds	r5, r0, r1
 8011aa6:	4435      	add	r5, r6
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f001 fba7 	bl	80131fc <ucdr_alignment>
 8011aae:	2108      	movs	r1, #8
 8011ab0:	4408      	add	r0, r1
 8011ab2:	4405      	add	r5, r0
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f001 fba1 	bl	80131fc <ucdr_alignment>
 8011aba:	4420      	add	r0, r4
 8011abc:	4428      	add	r0, r5
 8011abe:	bd70      	pop	{r4, r5, r6, pc}

08011ac0 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 8011ac0:	b108      	cbz	r0, 8011ac6 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 8011ac2:	f7ff bfc5 	b.w	8011a50 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011ac6:	4770      	bx	lr

08011ac8 <_OmniEnc__get_serialized_size>:
 8011ac8:	b110      	cbz	r0, 8011ad0 <_OmniEnc__get_serialized_size+0x8>
 8011aca:	2100      	movs	r1, #0
 8011acc:	f7ff bfc0 	b.w	8011a50 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop

08011ad4 <_OmniEnc__cdr_deserialize>:
 8011ad4:	b570      	push	{r4, r5, r6, lr}
 8011ad6:	460c      	mov	r4, r1
 8011ad8:	b082      	sub	sp, #8
 8011ada:	b3a1      	cbz	r1, 8011b46 <_OmniEnc__cdr_deserialize+0x72>
 8011adc:	688e      	ldr	r6, [r1, #8]
 8011ade:	ab01      	add	r3, sp, #4
 8011ae0:	6809      	ldr	r1, [r1, #0]
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	4632      	mov	r2, r6
 8011ae6:	f001 fc0b 	bl	8013300 <ucdr_deserialize_sequence_char>
 8011aea:	9b01      	ldr	r3, [sp, #4]
 8011aec:	bb38      	cbnz	r0, 8011b3e <_OmniEnc__cdr_deserialize+0x6a>
 8011aee:	429e      	cmp	r6, r3
 8011af0:	d32c      	bcc.n	8011b4c <_OmniEnc__cdr_deserialize+0x78>
 8011af2:	f104 0110 	add.w	r1, r4, #16
 8011af6:	4628      	mov	r0, r5
 8011af8:	f001 fa62 	bl	8012fc0 <ucdr_deserialize_double>
 8011afc:	f104 0118 	add.w	r1, r4, #24
 8011b00:	4628      	mov	r0, r5
 8011b02:	f001 fa5d 	bl	8012fc0 <ucdr_deserialize_double>
 8011b06:	f104 0120 	add.w	r1, r4, #32
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f001 fa58 	bl	8012fc0 <ucdr_deserialize_double>
 8011b10:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011b14:	4628      	mov	r0, r5
 8011b16:	f001 fa53 	bl	8012fc0 <ucdr_deserialize_double>
 8011b1a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011b1e:	4628      	mov	r0, r5
 8011b20:	f001 fa4e 	bl	8012fc0 <ucdr_deserialize_double>
 8011b24:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011b28:	4628      	mov	r0, r5
 8011b2a:	f001 fa49 	bl	8012fc0 <ucdr_deserialize_double>
 8011b2e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011b32:	4628      	mov	r0, r5
 8011b34:	b002      	add	sp, #8
 8011b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b3a:	f001 ba41 	b.w	8012fc0 <ucdr_deserialize_double>
 8011b3e:	b103      	cbz	r3, 8011b42 <_OmniEnc__cdr_deserialize+0x6e>
 8011b40:	3b01      	subs	r3, #1
 8011b42:	6063      	str	r3, [r4, #4]
 8011b44:	e7d5      	b.n	8011af2 <_OmniEnc__cdr_deserialize+0x1e>
 8011b46:	4608      	mov	r0, r1
 8011b48:	b002      	add	sp, #8
 8011b4a:	bd70      	pop	{r4, r5, r6, pc}
 8011b4c:	2101      	movs	r1, #1
 8011b4e:	75a8      	strb	r0, [r5, #22]
 8011b50:	7569      	strb	r1, [r5, #21]
 8011b52:	6060      	str	r0, [r4, #4]
 8011b54:	4628      	mov	r0, r5
 8011b56:	f001 fb69 	bl	801322c <ucdr_align_to>
 8011b5a:	9901      	ldr	r1, [sp, #4]
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	f001 fb9d 	bl	801329c <ucdr_advance_buffer>
 8011b62:	e7c6      	b.n	8011af2 <_OmniEnc__cdr_deserialize+0x1e>

08011b64 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 8011b64:	b570      	push	{r4, r5, r6, lr}
 8011b66:	460c      	mov	r4, r1
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	2108      	movs	r1, #8
 8011b6e:	f104 0508 	add.w	r5, r4, #8
 8011b72:	4620      	mov	r0, r4
 8011b74:	701a      	strb	r2, [r3, #0]
 8011b76:	f1c4 0408 	rsb	r4, r4, #8
 8011b7a:	f001 fb3f 	bl	80131fc <ucdr_alignment>
 8011b7e:	4405      	add	r5, r0
 8011b80:	2108      	movs	r1, #8
 8011b82:	4628      	mov	r0, r5
 8011b84:	f001 fb3a 	bl	80131fc <ucdr_alignment>
 8011b88:	2108      	movs	r1, #8
 8011b8a:	1846      	adds	r6, r0, r1
 8011b8c:	442e      	add	r6, r5
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f001 fb34 	bl	80131fc <ucdr_alignment>
 8011b94:	2108      	movs	r1, #8
 8011b96:	1845      	adds	r5, r0, r1
 8011b98:	442e      	add	r6, r5
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	f001 fb2e 	bl	80131fc <ucdr_alignment>
 8011ba0:	2108      	movs	r1, #8
 8011ba2:	4408      	add	r0, r1
 8011ba4:	4406      	add	r6, r0
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	f001 fb28 	bl	80131fc <ucdr_alignment>
 8011bac:	2108      	movs	r1, #8
 8011bae:	1845      	adds	r5, r0, r1
 8011bb0:	4435      	add	r5, r6
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	f001 fb22 	bl	80131fc <ucdr_alignment>
 8011bb8:	2108      	movs	r1, #8
 8011bba:	4408      	add	r0, r1
 8011bbc:	4405      	add	r5, r0
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f001 fb1c 	bl	80131fc <ucdr_alignment>
 8011bc4:	4420      	add	r0, r4
 8011bc6:	4428      	add	r0, r5
 8011bc8:	bd70      	pop	{r4, r5, r6, pc}
 8011bca:	bf00      	nop

08011bcc <_OmniEnc__max_serialized_size>:
 8011bcc:	b500      	push	{lr}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	2100      	movs	r1, #0
 8011bd2:	f10d 0007 	add.w	r0, sp, #7
 8011bd6:	f7ff ffc5 	bl	8011b64 <max_serialized_size_drive_msgs__msg__OmniEnc>
 8011bda:	b003      	add	sp, #12
 8011bdc:	f85d fb04 	ldr.w	pc, [sp], #4

08011be0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011be0:	4800      	ldr	r0, [pc, #0]	; (8011be4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 8011be2:	4770      	bx	lr
 8011be4:	20000658 	.word	0x20000658

08011be8 <ucdr_serialize_bool>:
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	460d      	mov	r5, r1
 8011bec:	2101      	movs	r1, #1
 8011bee:	4604      	mov	r4, r0
 8011bf0:	f001 fab8 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011bf4:	b148      	cbz	r0, 8011c0a <ucdr_serialize_bool+0x22>
 8011bf6:	68a3      	ldr	r3, [r4, #8]
 8011bf8:	2101      	movs	r1, #1
 8011bfa:	701d      	strb	r5, [r3, #0]
 8011bfc:	68a2      	ldr	r2, [r4, #8]
 8011bfe:	6923      	ldr	r3, [r4, #16]
 8011c00:	440a      	add	r2, r1
 8011c02:	7561      	strb	r1, [r4, #21]
 8011c04:	440b      	add	r3, r1
 8011c06:	60a2      	str	r2, [r4, #8]
 8011c08:	6123      	str	r3, [r4, #16]
 8011c0a:	7da0      	ldrb	r0, [r4, #22]
 8011c0c:	f080 0001 	eor.w	r0, r0, #1
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	bf00      	nop

08011c14 <ucdr_deserialize_bool>:
 8011c14:	b538      	push	{r3, r4, r5, lr}
 8011c16:	460d      	mov	r5, r1
 8011c18:	2101      	movs	r1, #1
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	f001 faa2 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011c20:	b160      	cbz	r0, 8011c3c <ucdr_deserialize_bool+0x28>
 8011c22:	68a2      	ldr	r2, [r4, #8]
 8011c24:	2101      	movs	r1, #1
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011c2c:	440b      	add	r3, r1
 8011c2e:	3800      	subs	r0, #0
 8011c30:	bf18      	it	ne
 8011c32:	2001      	movne	r0, #1
 8011c34:	7028      	strb	r0, [r5, #0]
 8011c36:	60a2      	str	r2, [r4, #8]
 8011c38:	6123      	str	r3, [r4, #16]
 8011c3a:	7561      	strb	r1, [r4, #21]
 8011c3c:	7da0      	ldrb	r0, [r4, #22]
 8011c3e:	f080 0001 	eor.w	r0, r0, #1
 8011c42:	bd38      	pop	{r3, r4, r5, pc}

08011c44 <ucdr_serialize_uint8_t>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	460d      	mov	r5, r1
 8011c48:	2101      	movs	r1, #1
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	f001 fa8a 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011c50:	b148      	cbz	r0, 8011c66 <ucdr_serialize_uint8_t+0x22>
 8011c52:	68a3      	ldr	r3, [r4, #8]
 8011c54:	2101      	movs	r1, #1
 8011c56:	701d      	strb	r5, [r3, #0]
 8011c58:	68a2      	ldr	r2, [r4, #8]
 8011c5a:	6923      	ldr	r3, [r4, #16]
 8011c5c:	440a      	add	r2, r1
 8011c5e:	7561      	strb	r1, [r4, #21]
 8011c60:	440b      	add	r3, r1
 8011c62:	60a2      	str	r2, [r4, #8]
 8011c64:	6123      	str	r3, [r4, #16]
 8011c66:	7da0      	ldrb	r0, [r4, #22]
 8011c68:	f080 0001 	eor.w	r0, r0, #1
 8011c6c:	bd38      	pop	{r3, r4, r5, pc}
 8011c6e:	bf00      	nop

08011c70 <ucdr_deserialize_uint8_t>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	460d      	mov	r5, r1
 8011c74:	2101      	movs	r1, #1
 8011c76:	4604      	mov	r4, r0
 8011c78:	f001 fa74 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011c7c:	b150      	cbz	r0, 8011c94 <ucdr_deserialize_uint8_t+0x24>
 8011c7e:	68a3      	ldr	r3, [r4, #8]
 8011c80:	2101      	movs	r1, #1
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	702b      	strb	r3, [r5, #0]
 8011c86:	68a2      	ldr	r2, [r4, #8]
 8011c88:	6923      	ldr	r3, [r4, #16]
 8011c8a:	440a      	add	r2, r1
 8011c8c:	7561      	strb	r1, [r4, #21]
 8011c8e:	440b      	add	r3, r1
 8011c90:	60a2      	str	r2, [r4, #8]
 8011c92:	6123      	str	r3, [r4, #16]
 8011c94:	7da0      	ldrb	r0, [r4, #22]
 8011c96:	f080 0001 	eor.w	r0, r0, #1
 8011c9a:	bd38      	pop	{r3, r4, r5, pc}

08011c9c <ucdr_serialize_uint16_t>:
 8011c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	2102      	movs	r1, #2
 8011ca8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011cac:	f001 faae 	bl	801320c <ucdr_buffer_alignment>
 8011cb0:	4601      	mov	r1, r0
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	7d67      	ldrb	r7, [r4, #21]
 8011cb6:	f001 faf1 	bl	801329c <ucdr_advance_buffer>
 8011cba:	2102      	movs	r1, #2
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	f001 fa45 	bl	801314c <ucdr_check_buffer_available_for>
 8011cc2:	bb78      	cbnz	r0, 8011d24 <ucdr_serialize_uint16_t+0x88>
 8011cc4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011cc8:	42ab      	cmp	r3, r5
 8011cca:	d926      	bls.n	8011d1a <ucdr_serialize_uint16_t+0x7e>
 8011ccc:	1b5e      	subs	r6, r3, r5
 8011cce:	60a3      	str	r3, [r4, #8]
 8011cd0:	6923      	ldr	r3, [r4, #16]
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f1c6 0802 	rsb	r8, r6, #2
 8011cd8:	4433      	add	r3, r6
 8011cda:	4641      	mov	r1, r8
 8011cdc:	6123      	str	r3, [r4, #16]
 8011cde:	f001 fa41 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	d03b      	beq.n	8011d5e <ucdr_serialize_uint16_t+0xc2>
 8011ce6:	7d23      	ldrb	r3, [r4, #20]
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d04a      	beq.n	8011d82 <ucdr_serialize_uint16_t+0xe6>
 8011cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011cf0:	702b      	strb	r3, [r5, #0]
 8011cf2:	2e00      	cmp	r6, #0
 8011cf4:	d040      	beq.n	8011d78 <ucdr_serialize_uint16_t+0xdc>
 8011cf6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011cfa:	706b      	strb	r3, [r5, #1]
 8011cfc:	6923      	ldr	r3, [r4, #16]
 8011cfe:	2102      	movs	r1, #2
 8011d00:	68a2      	ldr	r2, [r4, #8]
 8011d02:	3302      	adds	r3, #2
 8011d04:	7da0      	ldrb	r0, [r4, #22]
 8011d06:	4442      	add	r2, r8
 8011d08:	7561      	strb	r1, [r4, #21]
 8011d0a:	1b9e      	subs	r6, r3, r6
 8011d0c:	f080 0001 	eor.w	r0, r0, #1
 8011d10:	60a2      	str	r2, [r4, #8]
 8011d12:	6126      	str	r6, [r4, #16]
 8011d14:	b002      	add	sp, #8
 8011d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d1a:	2102      	movs	r1, #2
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f001 fa21 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011d22:	b190      	cbz	r0, 8011d4a <ucdr_serialize_uint16_t+0xae>
 8011d24:	7d23      	ldrb	r3, [r4, #20]
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	68a3      	ldr	r3, [r4, #8]
 8011d2a:	d014      	beq.n	8011d56 <ucdr_serialize_uint16_t+0xba>
 8011d2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011d30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d34:	7019      	strb	r1, [r3, #0]
 8011d36:	68a3      	ldr	r3, [r4, #8]
 8011d38:	705a      	strb	r2, [r3, #1]
 8011d3a:	2102      	movs	r1, #2
 8011d3c:	68a2      	ldr	r2, [r4, #8]
 8011d3e:	6923      	ldr	r3, [r4, #16]
 8011d40:	440a      	add	r2, r1
 8011d42:	7561      	strb	r1, [r4, #21]
 8011d44:	440b      	add	r3, r1
 8011d46:	60a2      	str	r2, [r4, #8]
 8011d48:	6123      	str	r3, [r4, #16]
 8011d4a:	7da0      	ldrb	r0, [r4, #22]
 8011d4c:	f080 0001 	eor.w	r0, r0, #1
 8011d50:	b002      	add	sp, #8
 8011d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011d5a:	801a      	strh	r2, [r3, #0]
 8011d5c:	e7ed      	b.n	8011d3a <ucdr_serialize_uint16_t+0x9e>
 8011d5e:	68a2      	ldr	r2, [r4, #8]
 8011d60:	6923      	ldr	r3, [r4, #16]
 8011d62:	7da0      	ldrb	r0, [r4, #22]
 8011d64:	1b92      	subs	r2, r2, r6
 8011d66:	1b9b      	subs	r3, r3, r6
 8011d68:	7567      	strb	r7, [r4, #21]
 8011d6a:	f080 0001 	eor.w	r0, r0, #1
 8011d6e:	60a2      	str	r2, [r4, #8]
 8011d70:	6123      	str	r3, [r4, #16]
 8011d72:	b002      	add	sp, #8
 8011d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d78:	68a3      	ldr	r3, [r4, #8]
 8011d7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d7e:	701a      	strb	r2, [r3, #0]
 8011d80:	e7bc      	b.n	8011cfc <ucdr_serialize_uint16_t+0x60>
 8011d82:	4628      	mov	r0, r5
 8011d84:	f10d 0506 	add.w	r5, sp, #6
 8011d88:	4632      	mov	r2, r6
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	f00f f867 	bl	8020e5e <memcpy>
 8011d90:	4642      	mov	r2, r8
 8011d92:	19a9      	adds	r1, r5, r6
 8011d94:	68a0      	ldr	r0, [r4, #8]
 8011d96:	f00f f862 	bl	8020e5e <memcpy>
 8011d9a:	e7af      	b.n	8011cfc <ucdr_serialize_uint16_t+0x60>

08011d9c <ucdr_serialize_endian_uint16_t>:
 8011d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011da0:	4604      	mov	r4, r0
 8011da2:	b083      	sub	sp, #12
 8011da4:	460d      	mov	r5, r1
 8011da6:	2102      	movs	r1, #2
 8011da8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011dac:	f001 fa2e 	bl	801320c <ucdr_buffer_alignment>
 8011db0:	4601      	mov	r1, r0
 8011db2:	4620      	mov	r0, r4
 8011db4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011db8:	f001 fa70 	bl	801329c <ucdr_advance_buffer>
 8011dbc:	2102      	movs	r1, #2
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	f001 f9c4 	bl	801314c <ucdr_check_buffer_available_for>
 8011dc4:	bb70      	cbnz	r0, 8011e24 <ucdr_serialize_endian_uint16_t+0x88>
 8011dc6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011dca:	42be      	cmp	r6, r7
 8011dcc:	d925      	bls.n	8011e1a <ucdr_serialize_endian_uint16_t+0x7e>
 8011dce:	6923      	ldr	r3, [r4, #16]
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	60a6      	str	r6, [r4, #8]
 8011dd4:	1bf6      	subs	r6, r6, r7
 8011dd6:	4433      	add	r3, r6
 8011dd8:	f1c6 0902 	rsb	r9, r6, #2
 8011ddc:	6123      	str	r3, [r4, #16]
 8011dde:	4649      	mov	r1, r9
 8011de0:	f001 f9c0 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d039      	beq.n	8011e5c <ucdr_serialize_endian_uint16_t+0xc0>
 8011de8:	2d01      	cmp	r5, #1
 8011dea:	d04a      	beq.n	8011e82 <ucdr_serialize_endian_uint16_t+0xe6>
 8011dec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011df0:	703b      	strb	r3, [r7, #0]
 8011df2:	2e00      	cmp	r6, #0
 8011df4:	d040      	beq.n	8011e78 <ucdr_serialize_endian_uint16_t+0xdc>
 8011df6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011dfa:	707b      	strb	r3, [r7, #1]
 8011dfc:	6923      	ldr	r3, [r4, #16]
 8011dfe:	2102      	movs	r1, #2
 8011e00:	68a2      	ldr	r2, [r4, #8]
 8011e02:	7da0      	ldrb	r0, [r4, #22]
 8011e04:	3302      	adds	r3, #2
 8011e06:	444a      	add	r2, r9
 8011e08:	7561      	strb	r1, [r4, #21]
 8011e0a:	1b9b      	subs	r3, r3, r6
 8011e0c:	f080 0001 	eor.w	r0, r0, #1
 8011e10:	60a2      	str	r2, [r4, #8]
 8011e12:	6123      	str	r3, [r4, #16]
 8011e14:	b003      	add	sp, #12
 8011e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e1a:	2102      	movs	r1, #2
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f001 f9a1 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011e22:	b188      	cbz	r0, 8011e48 <ucdr_serialize_endian_uint16_t+0xac>
 8011e24:	2d01      	cmp	r5, #1
 8011e26:	68a3      	ldr	r3, [r4, #8]
 8011e28:	d014      	beq.n	8011e54 <ucdr_serialize_endian_uint16_t+0xb8>
 8011e2a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011e2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e32:	7019      	strb	r1, [r3, #0]
 8011e34:	68a3      	ldr	r3, [r4, #8]
 8011e36:	705a      	strb	r2, [r3, #1]
 8011e38:	2102      	movs	r1, #2
 8011e3a:	68a2      	ldr	r2, [r4, #8]
 8011e3c:	6923      	ldr	r3, [r4, #16]
 8011e3e:	440a      	add	r2, r1
 8011e40:	7561      	strb	r1, [r4, #21]
 8011e42:	440b      	add	r3, r1
 8011e44:	60a2      	str	r2, [r4, #8]
 8011e46:	6123      	str	r3, [r4, #16]
 8011e48:	7da0      	ldrb	r0, [r4, #22]
 8011e4a:	f080 0001 	eor.w	r0, r0, #1
 8011e4e:	b003      	add	sp, #12
 8011e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011e58:	801a      	strh	r2, [r3, #0]
 8011e5a:	e7ed      	b.n	8011e38 <ucdr_serialize_endian_uint16_t+0x9c>
 8011e5c:	68a2      	ldr	r2, [r4, #8]
 8011e5e:	6923      	ldr	r3, [r4, #16]
 8011e60:	7da0      	ldrb	r0, [r4, #22]
 8011e62:	1b92      	subs	r2, r2, r6
 8011e64:	1b9b      	subs	r3, r3, r6
 8011e66:	f884 8015 	strb.w	r8, [r4, #21]
 8011e6a:	f080 0001 	eor.w	r0, r0, #1
 8011e6e:	60a2      	str	r2, [r4, #8]
 8011e70:	6123      	str	r3, [r4, #16]
 8011e72:	b003      	add	sp, #12
 8011e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e78:	68a3      	ldr	r3, [r4, #8]
 8011e7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e7e:	701a      	strb	r2, [r3, #0]
 8011e80:	e7bc      	b.n	8011dfc <ucdr_serialize_endian_uint16_t+0x60>
 8011e82:	f10d 0506 	add.w	r5, sp, #6
 8011e86:	4632      	mov	r2, r6
 8011e88:	4638      	mov	r0, r7
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	f00e ffe7 	bl	8020e5e <memcpy>
 8011e90:	464a      	mov	r2, r9
 8011e92:	19a9      	adds	r1, r5, r6
 8011e94:	68a0      	ldr	r0, [r4, #8]
 8011e96:	f00e ffe2 	bl	8020e5e <memcpy>
 8011e9a:	e7af      	b.n	8011dfc <ucdr_serialize_endian_uint16_t+0x60>

08011e9c <ucdr_deserialize_uint16_t>:
 8011e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	460d      	mov	r5, r1
 8011ea4:	2102      	movs	r1, #2
 8011ea6:	f001 f9b1 	bl	801320c <ucdr_buffer_alignment>
 8011eaa:	4601      	mov	r1, r0
 8011eac:	4620      	mov	r0, r4
 8011eae:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011eb2:	f001 f9f3 	bl	801329c <ucdr_advance_buffer>
 8011eb6:	2102      	movs	r1, #2
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f001 f947 	bl	801314c <ucdr_check_buffer_available_for>
 8011ebe:	bb60      	cbnz	r0, 8011f1a <ucdr_deserialize_uint16_t+0x7e>
 8011ec0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011ec4:	42be      	cmp	r6, r7
 8011ec6:	d923      	bls.n	8011f10 <ucdr_deserialize_uint16_t+0x74>
 8011ec8:	6923      	ldr	r3, [r4, #16]
 8011eca:	4620      	mov	r0, r4
 8011ecc:	60a6      	str	r6, [r4, #8]
 8011ece:	1bf6      	subs	r6, r6, r7
 8011ed0:	4433      	add	r3, r6
 8011ed2:	f1c6 0902 	rsb	r9, r6, #2
 8011ed6:	6123      	str	r3, [r4, #16]
 8011ed8:	4649      	mov	r1, r9
 8011eda:	f001 f943 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	d034      	beq.n	8011f4c <ucdr_deserialize_uint16_t+0xb0>
 8011ee2:	7d23      	ldrb	r3, [r4, #20]
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d042      	beq.n	8011f6e <ucdr_deserialize_uint16_t+0xd2>
 8011ee8:	787b      	ldrb	r3, [r7, #1]
 8011eea:	702b      	strb	r3, [r5, #0]
 8011eec:	2e00      	cmp	r6, #0
 8011eee:	d03a      	beq.n	8011f66 <ucdr_deserialize_uint16_t+0xca>
 8011ef0:	783b      	ldrb	r3, [r7, #0]
 8011ef2:	706b      	strb	r3, [r5, #1]
 8011ef4:	6923      	ldr	r3, [r4, #16]
 8011ef6:	2102      	movs	r1, #2
 8011ef8:	68a2      	ldr	r2, [r4, #8]
 8011efa:	3302      	adds	r3, #2
 8011efc:	7da0      	ldrb	r0, [r4, #22]
 8011efe:	444a      	add	r2, r9
 8011f00:	7561      	strb	r1, [r4, #21]
 8011f02:	1b9b      	subs	r3, r3, r6
 8011f04:	f080 0001 	eor.w	r0, r0, #1
 8011f08:	60a2      	str	r2, [r4, #8]
 8011f0a:	6123      	str	r3, [r4, #16]
 8011f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f10:	2102      	movs	r1, #2
 8011f12:	4620      	mov	r0, r4
 8011f14:	f001 f926 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011f18:	b180      	cbz	r0, 8011f3c <ucdr_deserialize_uint16_t+0xa0>
 8011f1a:	7d23      	ldrb	r3, [r4, #20]
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	68a3      	ldr	r3, [r4, #8]
 8011f20:	d011      	beq.n	8011f46 <ucdr_deserialize_uint16_t+0xaa>
 8011f22:	785b      	ldrb	r3, [r3, #1]
 8011f24:	702b      	strb	r3, [r5, #0]
 8011f26:	68a3      	ldr	r3, [r4, #8]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	706b      	strb	r3, [r5, #1]
 8011f2c:	2102      	movs	r1, #2
 8011f2e:	68a2      	ldr	r2, [r4, #8]
 8011f30:	6923      	ldr	r3, [r4, #16]
 8011f32:	440a      	add	r2, r1
 8011f34:	7561      	strb	r1, [r4, #21]
 8011f36:	440b      	add	r3, r1
 8011f38:	60a2      	str	r2, [r4, #8]
 8011f3a:	6123      	str	r3, [r4, #16]
 8011f3c:	7da0      	ldrb	r0, [r4, #22]
 8011f3e:	f080 0001 	eor.w	r0, r0, #1
 8011f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f46:	881b      	ldrh	r3, [r3, #0]
 8011f48:	802b      	strh	r3, [r5, #0]
 8011f4a:	e7ef      	b.n	8011f2c <ucdr_deserialize_uint16_t+0x90>
 8011f4c:	68a2      	ldr	r2, [r4, #8]
 8011f4e:	6923      	ldr	r3, [r4, #16]
 8011f50:	1b92      	subs	r2, r2, r6
 8011f52:	7da0      	ldrb	r0, [r4, #22]
 8011f54:	1b9b      	subs	r3, r3, r6
 8011f56:	f884 8015 	strb.w	r8, [r4, #21]
 8011f5a:	f080 0001 	eor.w	r0, r0, #1
 8011f5e:	60a2      	str	r2, [r4, #8]
 8011f60:	6123      	str	r3, [r4, #16]
 8011f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f66:	68a3      	ldr	r3, [r4, #8]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	706b      	strb	r3, [r5, #1]
 8011f6c:	e7c2      	b.n	8011ef4 <ucdr_deserialize_uint16_t+0x58>
 8011f6e:	4639      	mov	r1, r7
 8011f70:	4632      	mov	r2, r6
 8011f72:	4628      	mov	r0, r5
 8011f74:	f00e ff73 	bl	8020e5e <memcpy>
 8011f78:	464a      	mov	r2, r9
 8011f7a:	19a8      	adds	r0, r5, r6
 8011f7c:	68a1      	ldr	r1, [r4, #8]
 8011f7e:	f00e ff6e 	bl	8020e5e <memcpy>
 8011f82:	e7b7      	b.n	8011ef4 <ucdr_deserialize_uint16_t+0x58>

08011f84 <ucdr_deserialize_endian_uint16_t>:
 8011f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f88:	4604      	mov	r4, r0
 8011f8a:	460e      	mov	r6, r1
 8011f8c:	2102      	movs	r1, #2
 8011f8e:	4615      	mov	r5, r2
 8011f90:	f001 f93c 	bl	801320c <ucdr_buffer_alignment>
 8011f94:	4601      	mov	r1, r0
 8011f96:	4620      	mov	r0, r4
 8011f98:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011f9c:	f001 f97e 	bl	801329c <ucdr_advance_buffer>
 8011fa0:	2102      	movs	r1, #2
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f001 f8d2 	bl	801314c <ucdr_check_buffer_available_for>
 8011fa8:	bb70      	cbnz	r0, 8012008 <ucdr_deserialize_endian_uint16_t+0x84>
 8011faa:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8011fae:	454f      	cmp	r7, r9
 8011fb0:	d925      	bls.n	8011ffe <ucdr_deserialize_endian_uint16_t+0x7a>
 8011fb2:	6923      	ldr	r3, [r4, #16]
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	60a7      	str	r7, [r4, #8]
 8011fb8:	eba7 0709 	sub.w	r7, r7, r9
 8011fbc:	443b      	add	r3, r7
 8011fbe:	f1c7 0a02 	rsb	sl, r7, #2
 8011fc2:	6123      	str	r3, [r4, #16]
 8011fc4:	4651      	mov	r1, sl
 8011fc6:	f001 f8cd 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d034      	beq.n	8012038 <ucdr_deserialize_endian_uint16_t+0xb4>
 8011fce:	2e01      	cmp	r6, #1
 8011fd0:	d043      	beq.n	801205a <ucdr_deserialize_endian_uint16_t+0xd6>
 8011fd2:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011fd6:	702b      	strb	r3, [r5, #0]
 8011fd8:	2f00      	cmp	r7, #0
 8011fda:	d03a      	beq.n	8012052 <ucdr_deserialize_endian_uint16_t+0xce>
 8011fdc:	f899 3000 	ldrb.w	r3, [r9]
 8011fe0:	706b      	strb	r3, [r5, #1]
 8011fe2:	6923      	ldr	r3, [r4, #16]
 8011fe4:	2102      	movs	r1, #2
 8011fe6:	68a2      	ldr	r2, [r4, #8]
 8011fe8:	3302      	adds	r3, #2
 8011fea:	7da0      	ldrb	r0, [r4, #22]
 8011fec:	4452      	add	r2, sl
 8011fee:	7561      	strb	r1, [r4, #21]
 8011ff0:	1bdb      	subs	r3, r3, r7
 8011ff2:	f080 0001 	eor.w	r0, r0, #1
 8011ff6:	60a2      	str	r2, [r4, #8]
 8011ff8:	6123      	str	r3, [r4, #16]
 8011ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ffe:	2102      	movs	r1, #2
 8012000:	4620      	mov	r0, r4
 8012002:	f001 f8af 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012006:	b178      	cbz	r0, 8012028 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012008:	2e01      	cmp	r6, #1
 801200a:	68a3      	ldr	r3, [r4, #8]
 801200c:	d011      	beq.n	8012032 <ucdr_deserialize_endian_uint16_t+0xae>
 801200e:	785b      	ldrb	r3, [r3, #1]
 8012010:	702b      	strb	r3, [r5, #0]
 8012012:	68a3      	ldr	r3, [r4, #8]
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	706b      	strb	r3, [r5, #1]
 8012018:	2102      	movs	r1, #2
 801201a:	68a2      	ldr	r2, [r4, #8]
 801201c:	6923      	ldr	r3, [r4, #16]
 801201e:	440a      	add	r2, r1
 8012020:	7561      	strb	r1, [r4, #21]
 8012022:	440b      	add	r3, r1
 8012024:	60a2      	str	r2, [r4, #8]
 8012026:	6123      	str	r3, [r4, #16]
 8012028:	7da0      	ldrb	r0, [r4, #22]
 801202a:	f080 0001 	eor.w	r0, r0, #1
 801202e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012032:	881b      	ldrh	r3, [r3, #0]
 8012034:	802b      	strh	r3, [r5, #0]
 8012036:	e7ef      	b.n	8012018 <ucdr_deserialize_endian_uint16_t+0x94>
 8012038:	68a2      	ldr	r2, [r4, #8]
 801203a:	6923      	ldr	r3, [r4, #16]
 801203c:	1bd2      	subs	r2, r2, r7
 801203e:	7da0      	ldrb	r0, [r4, #22]
 8012040:	1bdb      	subs	r3, r3, r7
 8012042:	f884 8015 	strb.w	r8, [r4, #21]
 8012046:	f080 0001 	eor.w	r0, r0, #1
 801204a:	60a2      	str	r2, [r4, #8]
 801204c:	6123      	str	r3, [r4, #16]
 801204e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012052:	68a3      	ldr	r3, [r4, #8]
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	706b      	strb	r3, [r5, #1]
 8012058:	e7c3      	b.n	8011fe2 <ucdr_deserialize_endian_uint16_t+0x5e>
 801205a:	4649      	mov	r1, r9
 801205c:	463a      	mov	r2, r7
 801205e:	4628      	mov	r0, r5
 8012060:	f00e fefd 	bl	8020e5e <memcpy>
 8012064:	4652      	mov	r2, sl
 8012066:	19e8      	adds	r0, r5, r7
 8012068:	68a1      	ldr	r1, [r4, #8]
 801206a:	f00e fef8 	bl	8020e5e <memcpy>
 801206e:	e7b8      	b.n	8011fe2 <ucdr_deserialize_endian_uint16_t+0x5e>

08012070 <ucdr_serialize_uint32_t>:
 8012070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012074:	b082      	sub	sp, #8
 8012076:	4604      	mov	r4, r0
 8012078:	9101      	str	r1, [sp, #4]
 801207a:	2104      	movs	r1, #4
 801207c:	f001 f8c6 	bl	801320c <ucdr_buffer_alignment>
 8012080:	4601      	mov	r1, r0
 8012082:	4620      	mov	r0, r4
 8012084:	7d67      	ldrb	r7, [r4, #21]
 8012086:	f001 f909 	bl	801329c <ucdr_advance_buffer>
 801208a:	2104      	movs	r1, #4
 801208c:	4620      	mov	r0, r4
 801208e:	f001 f85d 	bl	801314c <ucdr_check_buffer_available_for>
 8012092:	2800      	cmp	r0, #0
 8012094:	d139      	bne.n	801210a <ucdr_serialize_uint32_t+0x9a>
 8012096:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801209a:	42ab      	cmp	r3, r5
 801209c:	d930      	bls.n	8012100 <ucdr_serialize_uint32_t+0x90>
 801209e:	1b5e      	subs	r6, r3, r5
 80120a0:	60a3      	str	r3, [r4, #8]
 80120a2:	6923      	ldr	r3, [r4, #16]
 80120a4:	4620      	mov	r0, r4
 80120a6:	f1c6 0804 	rsb	r8, r6, #4
 80120aa:	4433      	add	r3, r6
 80120ac:	4641      	mov	r1, r8
 80120ae:	6123      	str	r3, [r4, #16]
 80120b0:	f001 f858 	bl	8013164 <ucdr_check_final_buffer_behavior>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d04c      	beq.n	8012152 <ucdr_serialize_uint32_t+0xe2>
 80120b8:	7d23      	ldrb	r3, [r4, #20]
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d063      	beq.n	8012186 <ucdr_serialize_uint32_t+0x116>
 80120be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80120c2:	702b      	strb	r3, [r5, #0]
 80120c4:	2e00      	cmp	r6, #0
 80120c6:	d051      	beq.n	801216c <ucdr_serialize_uint32_t+0xfc>
 80120c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80120cc:	2e01      	cmp	r6, #1
 80120ce:	706b      	strb	r3, [r5, #1]
 80120d0:	d050      	beq.n	8012174 <ucdr_serialize_uint32_t+0x104>
 80120d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80120d6:	2e02      	cmp	r6, #2
 80120d8:	70ab      	strb	r3, [r5, #2]
 80120da:	d04f      	beq.n	801217c <ucdr_serialize_uint32_t+0x10c>
 80120dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80120e0:	70eb      	strb	r3, [r5, #3]
 80120e2:	6923      	ldr	r3, [r4, #16]
 80120e4:	2104      	movs	r1, #4
 80120e6:	68a2      	ldr	r2, [r4, #8]
 80120e8:	3304      	adds	r3, #4
 80120ea:	7da0      	ldrb	r0, [r4, #22]
 80120ec:	4442      	add	r2, r8
 80120ee:	7561      	strb	r1, [r4, #21]
 80120f0:	1b9e      	subs	r6, r3, r6
 80120f2:	f080 0001 	eor.w	r0, r0, #1
 80120f6:	60a2      	str	r2, [r4, #8]
 80120f8:	6126      	str	r6, [r4, #16]
 80120fa:	b002      	add	sp, #8
 80120fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012100:	2104      	movs	r1, #4
 8012102:	4620      	mov	r0, r4
 8012104:	f001 f82e 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012108:	b1d0      	cbz	r0, 8012140 <ucdr_serialize_uint32_t+0xd0>
 801210a:	7d23      	ldrb	r3, [r4, #20]
 801210c:	2b01      	cmp	r3, #1
 801210e:	68a3      	ldr	r3, [r4, #8]
 8012110:	d01c      	beq.n	801214c <ucdr_serialize_uint32_t+0xdc>
 8012112:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012116:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801211a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801211e:	7018      	strb	r0, [r3, #0]
 8012120:	68a3      	ldr	r3, [r4, #8]
 8012122:	705a      	strb	r2, [r3, #1]
 8012124:	68a3      	ldr	r3, [r4, #8]
 8012126:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801212a:	7099      	strb	r1, [r3, #2]
 801212c:	68a3      	ldr	r3, [r4, #8]
 801212e:	70da      	strb	r2, [r3, #3]
 8012130:	2104      	movs	r1, #4
 8012132:	68a2      	ldr	r2, [r4, #8]
 8012134:	6923      	ldr	r3, [r4, #16]
 8012136:	440a      	add	r2, r1
 8012138:	7561      	strb	r1, [r4, #21]
 801213a:	440b      	add	r3, r1
 801213c:	60a2      	str	r2, [r4, #8]
 801213e:	6123      	str	r3, [r4, #16]
 8012140:	7da0      	ldrb	r0, [r4, #22]
 8012142:	f080 0001 	eor.w	r0, r0, #1
 8012146:	b002      	add	sp, #8
 8012148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801214c:	9a01      	ldr	r2, [sp, #4]
 801214e:	601a      	str	r2, [r3, #0]
 8012150:	e7ee      	b.n	8012130 <ucdr_serialize_uint32_t+0xc0>
 8012152:	68a2      	ldr	r2, [r4, #8]
 8012154:	6923      	ldr	r3, [r4, #16]
 8012156:	7da0      	ldrb	r0, [r4, #22]
 8012158:	1b92      	subs	r2, r2, r6
 801215a:	1b9b      	subs	r3, r3, r6
 801215c:	7567      	strb	r7, [r4, #21]
 801215e:	f080 0001 	eor.w	r0, r0, #1
 8012162:	60a2      	str	r2, [r4, #8]
 8012164:	6123      	str	r3, [r4, #16]
 8012166:	b002      	add	sp, #8
 8012168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216c:	68a3      	ldr	r3, [r4, #8]
 801216e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012172:	701a      	strb	r2, [r3, #0]
 8012174:	68a3      	ldr	r3, [r4, #8]
 8012176:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801217a:	701a      	strb	r2, [r3, #0]
 801217c:	68a3      	ldr	r3, [r4, #8]
 801217e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012182:	701a      	strb	r2, [r3, #0]
 8012184:	e7ad      	b.n	80120e2 <ucdr_serialize_uint32_t+0x72>
 8012186:	4628      	mov	r0, r5
 8012188:	ad01      	add	r5, sp, #4
 801218a:	4632      	mov	r2, r6
 801218c:	4629      	mov	r1, r5
 801218e:	f00e fe66 	bl	8020e5e <memcpy>
 8012192:	4642      	mov	r2, r8
 8012194:	19a9      	adds	r1, r5, r6
 8012196:	68a0      	ldr	r0, [r4, #8]
 8012198:	f00e fe61 	bl	8020e5e <memcpy>
 801219c:	e7a1      	b.n	80120e2 <ucdr_serialize_uint32_t+0x72>
 801219e:	bf00      	nop

080121a0 <ucdr_serialize_endian_uint32_t>:
 80121a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121a4:	4604      	mov	r4, r0
 80121a6:	b083      	sub	sp, #12
 80121a8:	460d      	mov	r5, r1
 80121aa:	2104      	movs	r1, #4
 80121ac:	9201      	str	r2, [sp, #4]
 80121ae:	f001 f82d 	bl	801320c <ucdr_buffer_alignment>
 80121b2:	4601      	mov	r1, r0
 80121b4:	4620      	mov	r0, r4
 80121b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80121ba:	f001 f86f 	bl	801329c <ucdr_advance_buffer>
 80121be:	2104      	movs	r1, #4
 80121c0:	4620      	mov	r0, r4
 80121c2:	f000 ffc3 	bl	801314c <ucdr_check_buffer_available_for>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d138      	bne.n	801223c <ucdr_serialize_endian_uint32_t+0x9c>
 80121ca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80121ce:	42b7      	cmp	r7, r6
 80121d0:	d92f      	bls.n	8012232 <ucdr_serialize_endian_uint32_t+0x92>
 80121d2:	6923      	ldr	r3, [r4, #16]
 80121d4:	4620      	mov	r0, r4
 80121d6:	60a7      	str	r7, [r4, #8]
 80121d8:	1bbf      	subs	r7, r7, r6
 80121da:	443b      	add	r3, r7
 80121dc:	f1c7 0904 	rsb	r9, r7, #4
 80121e0:	6123      	str	r3, [r4, #16]
 80121e2:	4649      	mov	r1, r9
 80121e4:	f000 ffbe 	bl	8013164 <ucdr_check_final_buffer_behavior>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d04a      	beq.n	8012282 <ucdr_serialize_endian_uint32_t+0xe2>
 80121ec:	2d01      	cmp	r5, #1
 80121ee:	d063      	beq.n	80122b8 <ucdr_serialize_endian_uint32_t+0x118>
 80121f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80121f4:	7033      	strb	r3, [r6, #0]
 80121f6:	2f00      	cmp	r7, #0
 80121f8:	d051      	beq.n	801229e <ucdr_serialize_endian_uint32_t+0xfe>
 80121fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80121fe:	2f01      	cmp	r7, #1
 8012200:	7073      	strb	r3, [r6, #1]
 8012202:	d050      	beq.n	80122a6 <ucdr_serialize_endian_uint32_t+0x106>
 8012204:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012208:	2f02      	cmp	r7, #2
 801220a:	70b3      	strb	r3, [r6, #2]
 801220c:	d04f      	beq.n	80122ae <ucdr_serialize_endian_uint32_t+0x10e>
 801220e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012212:	70f3      	strb	r3, [r6, #3]
 8012214:	6923      	ldr	r3, [r4, #16]
 8012216:	2104      	movs	r1, #4
 8012218:	68a2      	ldr	r2, [r4, #8]
 801221a:	7da0      	ldrb	r0, [r4, #22]
 801221c:	3304      	adds	r3, #4
 801221e:	444a      	add	r2, r9
 8012220:	7561      	strb	r1, [r4, #21]
 8012222:	1bdb      	subs	r3, r3, r7
 8012224:	f080 0001 	eor.w	r0, r0, #1
 8012228:	60a2      	str	r2, [r4, #8]
 801222a:	6123      	str	r3, [r4, #16]
 801222c:	b003      	add	sp, #12
 801222e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012232:	2104      	movs	r1, #4
 8012234:	4620      	mov	r0, r4
 8012236:	f000 ff95 	bl	8013164 <ucdr_check_final_buffer_behavior>
 801223a:	b1c8      	cbz	r0, 8012270 <ucdr_serialize_endian_uint32_t+0xd0>
 801223c:	2d01      	cmp	r5, #1
 801223e:	68a3      	ldr	r3, [r4, #8]
 8012240:	d01c      	beq.n	801227c <ucdr_serialize_endian_uint32_t+0xdc>
 8012242:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012246:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801224a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801224e:	7018      	strb	r0, [r3, #0]
 8012250:	68a3      	ldr	r3, [r4, #8]
 8012252:	705a      	strb	r2, [r3, #1]
 8012254:	68a3      	ldr	r3, [r4, #8]
 8012256:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801225a:	7099      	strb	r1, [r3, #2]
 801225c:	68a3      	ldr	r3, [r4, #8]
 801225e:	70da      	strb	r2, [r3, #3]
 8012260:	2104      	movs	r1, #4
 8012262:	68a2      	ldr	r2, [r4, #8]
 8012264:	6923      	ldr	r3, [r4, #16]
 8012266:	440a      	add	r2, r1
 8012268:	7561      	strb	r1, [r4, #21]
 801226a:	440b      	add	r3, r1
 801226c:	60a2      	str	r2, [r4, #8]
 801226e:	6123      	str	r3, [r4, #16]
 8012270:	7da0      	ldrb	r0, [r4, #22]
 8012272:	f080 0001 	eor.w	r0, r0, #1
 8012276:	b003      	add	sp, #12
 8012278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801227c:	9a01      	ldr	r2, [sp, #4]
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	e7ee      	b.n	8012260 <ucdr_serialize_endian_uint32_t+0xc0>
 8012282:	68a2      	ldr	r2, [r4, #8]
 8012284:	6923      	ldr	r3, [r4, #16]
 8012286:	7da0      	ldrb	r0, [r4, #22]
 8012288:	1bd2      	subs	r2, r2, r7
 801228a:	1bdb      	subs	r3, r3, r7
 801228c:	f884 8015 	strb.w	r8, [r4, #21]
 8012290:	f080 0001 	eor.w	r0, r0, #1
 8012294:	60a2      	str	r2, [r4, #8]
 8012296:	6123      	str	r3, [r4, #16]
 8012298:	b003      	add	sp, #12
 801229a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801229e:	68a3      	ldr	r3, [r4, #8]
 80122a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80122a4:	701a      	strb	r2, [r3, #0]
 80122a6:	68a3      	ldr	r3, [r4, #8]
 80122a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80122ac:	701a      	strb	r2, [r3, #0]
 80122ae:	68a3      	ldr	r3, [r4, #8]
 80122b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80122b4:	701a      	strb	r2, [r3, #0]
 80122b6:	e7ad      	b.n	8012214 <ucdr_serialize_endian_uint32_t+0x74>
 80122b8:	ad01      	add	r5, sp, #4
 80122ba:	463a      	mov	r2, r7
 80122bc:	4630      	mov	r0, r6
 80122be:	4629      	mov	r1, r5
 80122c0:	f00e fdcd 	bl	8020e5e <memcpy>
 80122c4:	464a      	mov	r2, r9
 80122c6:	19e9      	adds	r1, r5, r7
 80122c8:	68a0      	ldr	r0, [r4, #8]
 80122ca:	f00e fdc8 	bl	8020e5e <memcpy>
 80122ce:	e7a1      	b.n	8012214 <ucdr_serialize_endian_uint32_t+0x74>

080122d0 <ucdr_deserialize_uint32_t>:
 80122d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122d4:	4604      	mov	r4, r0
 80122d6:	460d      	mov	r5, r1
 80122d8:	2104      	movs	r1, #4
 80122da:	f000 ff97 	bl	801320c <ucdr_buffer_alignment>
 80122de:	4601      	mov	r1, r0
 80122e0:	4620      	mov	r0, r4
 80122e2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80122e6:	f000 ffd9 	bl	801329c <ucdr_advance_buffer>
 80122ea:	2104      	movs	r1, #4
 80122ec:	4620      	mov	r0, r4
 80122ee:	f000 ff2d 	bl	801314c <ucdr_check_buffer_available_for>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	d138      	bne.n	8012368 <ucdr_deserialize_uint32_t+0x98>
 80122f6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80122fa:	42b7      	cmp	r7, r6
 80122fc:	d92f      	bls.n	801235e <ucdr_deserialize_uint32_t+0x8e>
 80122fe:	6923      	ldr	r3, [r4, #16]
 8012300:	4620      	mov	r0, r4
 8012302:	60a7      	str	r7, [r4, #8]
 8012304:	1bbf      	subs	r7, r7, r6
 8012306:	443b      	add	r3, r7
 8012308:	f1c7 0904 	rsb	r9, r7, #4
 801230c:	6123      	str	r3, [r4, #16]
 801230e:	4649      	mov	r1, r9
 8012310:	f000 ff28 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012314:	2800      	cmp	r0, #0
 8012316:	d046      	beq.n	80123a6 <ucdr_deserialize_uint32_t+0xd6>
 8012318:	7d23      	ldrb	r3, [r4, #20]
 801231a:	2b01      	cmp	r3, #1
 801231c:	d05c      	beq.n	80123d8 <ucdr_deserialize_uint32_t+0x108>
 801231e:	78f3      	ldrb	r3, [r6, #3]
 8012320:	702b      	strb	r3, [r5, #0]
 8012322:	2f00      	cmp	r7, #0
 8012324:	d04c      	beq.n	80123c0 <ucdr_deserialize_uint32_t+0xf0>
 8012326:	78b3      	ldrb	r3, [r6, #2]
 8012328:	2f01      	cmp	r7, #1
 801232a:	706b      	strb	r3, [r5, #1]
 801232c:	f105 0302 	add.w	r3, r5, #2
 8012330:	d04a      	beq.n	80123c8 <ucdr_deserialize_uint32_t+0xf8>
 8012332:	7873      	ldrb	r3, [r6, #1]
 8012334:	2f02      	cmp	r7, #2
 8012336:	70ab      	strb	r3, [r5, #2]
 8012338:	f105 0303 	add.w	r3, r5, #3
 801233c:	d048      	beq.n	80123d0 <ucdr_deserialize_uint32_t+0x100>
 801233e:	7833      	ldrb	r3, [r6, #0]
 8012340:	70eb      	strb	r3, [r5, #3]
 8012342:	6923      	ldr	r3, [r4, #16]
 8012344:	2104      	movs	r1, #4
 8012346:	68a2      	ldr	r2, [r4, #8]
 8012348:	3304      	adds	r3, #4
 801234a:	7da0      	ldrb	r0, [r4, #22]
 801234c:	444a      	add	r2, r9
 801234e:	7561      	strb	r1, [r4, #21]
 8012350:	1bdb      	subs	r3, r3, r7
 8012352:	f080 0001 	eor.w	r0, r0, #1
 8012356:	60a2      	str	r2, [r4, #8]
 8012358:	6123      	str	r3, [r4, #16]
 801235a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801235e:	2104      	movs	r1, #4
 8012360:	4620      	mov	r0, r4
 8012362:	f000 feff 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012366:	b1b0      	cbz	r0, 8012396 <ucdr_deserialize_uint32_t+0xc6>
 8012368:	7d23      	ldrb	r3, [r4, #20]
 801236a:	2b01      	cmp	r3, #1
 801236c:	68a3      	ldr	r3, [r4, #8]
 801236e:	d017      	beq.n	80123a0 <ucdr_deserialize_uint32_t+0xd0>
 8012370:	78db      	ldrb	r3, [r3, #3]
 8012372:	702b      	strb	r3, [r5, #0]
 8012374:	68a3      	ldr	r3, [r4, #8]
 8012376:	789b      	ldrb	r3, [r3, #2]
 8012378:	706b      	strb	r3, [r5, #1]
 801237a:	68a3      	ldr	r3, [r4, #8]
 801237c:	785b      	ldrb	r3, [r3, #1]
 801237e:	70ab      	strb	r3, [r5, #2]
 8012380:	68a3      	ldr	r3, [r4, #8]
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	70eb      	strb	r3, [r5, #3]
 8012386:	2104      	movs	r1, #4
 8012388:	68a2      	ldr	r2, [r4, #8]
 801238a:	6923      	ldr	r3, [r4, #16]
 801238c:	440a      	add	r2, r1
 801238e:	7561      	strb	r1, [r4, #21]
 8012390:	440b      	add	r3, r1
 8012392:	60a2      	str	r2, [r4, #8]
 8012394:	6123      	str	r3, [r4, #16]
 8012396:	7da0      	ldrb	r0, [r4, #22]
 8012398:	f080 0001 	eor.w	r0, r0, #1
 801239c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	602b      	str	r3, [r5, #0]
 80123a4:	e7ef      	b.n	8012386 <ucdr_deserialize_uint32_t+0xb6>
 80123a6:	68a2      	ldr	r2, [r4, #8]
 80123a8:	6923      	ldr	r3, [r4, #16]
 80123aa:	1bd2      	subs	r2, r2, r7
 80123ac:	7da0      	ldrb	r0, [r4, #22]
 80123ae:	1bdb      	subs	r3, r3, r7
 80123b0:	f884 8015 	strb.w	r8, [r4, #21]
 80123b4:	f080 0001 	eor.w	r0, r0, #1
 80123b8:	60a2      	str	r2, [r4, #8]
 80123ba:	6123      	str	r3, [r4, #16]
 80123bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123c0:	68a3      	ldr	r3, [r4, #8]
 80123c2:	789b      	ldrb	r3, [r3, #2]
 80123c4:	706b      	strb	r3, [r5, #1]
 80123c6:	1cab      	adds	r3, r5, #2
 80123c8:	68a2      	ldr	r2, [r4, #8]
 80123ca:	7852      	ldrb	r2, [r2, #1]
 80123cc:	f803 2b01 	strb.w	r2, [r3], #1
 80123d0:	68a2      	ldr	r2, [r4, #8]
 80123d2:	7812      	ldrb	r2, [r2, #0]
 80123d4:	701a      	strb	r2, [r3, #0]
 80123d6:	e7b4      	b.n	8012342 <ucdr_deserialize_uint32_t+0x72>
 80123d8:	4631      	mov	r1, r6
 80123da:	463a      	mov	r2, r7
 80123dc:	4628      	mov	r0, r5
 80123de:	f00e fd3e 	bl	8020e5e <memcpy>
 80123e2:	464a      	mov	r2, r9
 80123e4:	19e8      	adds	r0, r5, r7
 80123e6:	68a1      	ldr	r1, [r4, #8]
 80123e8:	f00e fd39 	bl	8020e5e <memcpy>
 80123ec:	e7a9      	b.n	8012342 <ucdr_deserialize_uint32_t+0x72>
 80123ee:	bf00      	nop

080123f0 <ucdr_deserialize_endian_uint32_t>:
 80123f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123f4:	4604      	mov	r4, r0
 80123f6:	460e      	mov	r6, r1
 80123f8:	2104      	movs	r1, #4
 80123fa:	4615      	mov	r5, r2
 80123fc:	f000 ff06 	bl	801320c <ucdr_buffer_alignment>
 8012400:	4601      	mov	r1, r0
 8012402:	4620      	mov	r0, r4
 8012404:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012408:	f000 ff48 	bl	801329c <ucdr_advance_buffer>
 801240c:	2104      	movs	r1, #4
 801240e:	4620      	mov	r0, r4
 8012410:	f000 fe9c 	bl	801314c <ucdr_check_buffer_available_for>
 8012414:	2800      	cmp	r0, #0
 8012416:	d13c      	bne.n	8012492 <ucdr_deserialize_endian_uint32_t+0xa2>
 8012418:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801241c:	42bb      	cmp	r3, r7
 801241e:	d933      	bls.n	8012488 <ucdr_deserialize_endian_uint32_t+0x98>
 8012420:	eba3 0907 	sub.w	r9, r3, r7
 8012424:	60a3      	str	r3, [r4, #8]
 8012426:	6923      	ldr	r3, [r4, #16]
 8012428:	4620      	mov	r0, r4
 801242a:	f1c9 0a04 	rsb	sl, r9, #4
 801242e:	444b      	add	r3, r9
 8012430:	4651      	mov	r1, sl
 8012432:	6123      	str	r3, [r4, #16]
 8012434:	f000 fe96 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012438:	2800      	cmp	r0, #0
 801243a:	d048      	beq.n	80124ce <ucdr_deserialize_endian_uint32_t+0xde>
 801243c:	2e01      	cmp	r6, #1
 801243e:	d061      	beq.n	8012504 <ucdr_deserialize_endian_uint32_t+0x114>
 8012440:	78fb      	ldrb	r3, [r7, #3]
 8012442:	702b      	strb	r3, [r5, #0]
 8012444:	f1b9 0f00 	cmp.w	r9, #0
 8012448:	d050      	beq.n	80124ec <ucdr_deserialize_endian_uint32_t+0xfc>
 801244a:	78bb      	ldrb	r3, [r7, #2]
 801244c:	f1b9 0f01 	cmp.w	r9, #1
 8012450:	706b      	strb	r3, [r5, #1]
 8012452:	f105 0302 	add.w	r3, r5, #2
 8012456:	d04d      	beq.n	80124f4 <ucdr_deserialize_endian_uint32_t+0x104>
 8012458:	787b      	ldrb	r3, [r7, #1]
 801245a:	f1b9 0f02 	cmp.w	r9, #2
 801245e:	70ab      	strb	r3, [r5, #2]
 8012460:	f105 0303 	add.w	r3, r5, #3
 8012464:	d04a      	beq.n	80124fc <ucdr_deserialize_endian_uint32_t+0x10c>
 8012466:	783b      	ldrb	r3, [r7, #0]
 8012468:	70eb      	strb	r3, [r5, #3]
 801246a:	6923      	ldr	r3, [r4, #16]
 801246c:	2104      	movs	r1, #4
 801246e:	68a2      	ldr	r2, [r4, #8]
 8012470:	3304      	adds	r3, #4
 8012472:	7da0      	ldrb	r0, [r4, #22]
 8012474:	4452      	add	r2, sl
 8012476:	7561      	strb	r1, [r4, #21]
 8012478:	eba3 0309 	sub.w	r3, r3, r9
 801247c:	f080 0001 	eor.w	r0, r0, #1
 8012480:	60a2      	str	r2, [r4, #8]
 8012482:	6123      	str	r3, [r4, #16]
 8012484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012488:	2104      	movs	r1, #4
 801248a:	4620      	mov	r0, r4
 801248c:	f000 fe6a 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012490:	b1a8      	cbz	r0, 80124be <ucdr_deserialize_endian_uint32_t+0xce>
 8012492:	2e01      	cmp	r6, #1
 8012494:	68a3      	ldr	r3, [r4, #8]
 8012496:	d017      	beq.n	80124c8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012498:	78db      	ldrb	r3, [r3, #3]
 801249a:	702b      	strb	r3, [r5, #0]
 801249c:	68a3      	ldr	r3, [r4, #8]
 801249e:	789b      	ldrb	r3, [r3, #2]
 80124a0:	706b      	strb	r3, [r5, #1]
 80124a2:	68a3      	ldr	r3, [r4, #8]
 80124a4:	785b      	ldrb	r3, [r3, #1]
 80124a6:	70ab      	strb	r3, [r5, #2]
 80124a8:	68a3      	ldr	r3, [r4, #8]
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	70eb      	strb	r3, [r5, #3]
 80124ae:	2104      	movs	r1, #4
 80124b0:	68a2      	ldr	r2, [r4, #8]
 80124b2:	6923      	ldr	r3, [r4, #16]
 80124b4:	440a      	add	r2, r1
 80124b6:	7561      	strb	r1, [r4, #21]
 80124b8:	440b      	add	r3, r1
 80124ba:	60a2      	str	r2, [r4, #8]
 80124bc:	6123      	str	r3, [r4, #16]
 80124be:	7da0      	ldrb	r0, [r4, #22]
 80124c0:	f080 0001 	eor.w	r0, r0, #1
 80124c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	602b      	str	r3, [r5, #0]
 80124cc:	e7ef      	b.n	80124ae <ucdr_deserialize_endian_uint32_t+0xbe>
 80124ce:	68a2      	ldr	r2, [r4, #8]
 80124d0:	6923      	ldr	r3, [r4, #16]
 80124d2:	eba2 0209 	sub.w	r2, r2, r9
 80124d6:	7da0      	ldrb	r0, [r4, #22]
 80124d8:	eba3 0309 	sub.w	r3, r3, r9
 80124dc:	f884 8015 	strb.w	r8, [r4, #21]
 80124e0:	f080 0001 	eor.w	r0, r0, #1
 80124e4:	60a2      	str	r2, [r4, #8]
 80124e6:	6123      	str	r3, [r4, #16]
 80124e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ec:	68a3      	ldr	r3, [r4, #8]
 80124ee:	789b      	ldrb	r3, [r3, #2]
 80124f0:	706b      	strb	r3, [r5, #1]
 80124f2:	1cab      	adds	r3, r5, #2
 80124f4:	68a2      	ldr	r2, [r4, #8]
 80124f6:	7852      	ldrb	r2, [r2, #1]
 80124f8:	f803 2b01 	strb.w	r2, [r3], #1
 80124fc:	68a2      	ldr	r2, [r4, #8]
 80124fe:	7812      	ldrb	r2, [r2, #0]
 8012500:	701a      	strb	r2, [r3, #0]
 8012502:	e7b2      	b.n	801246a <ucdr_deserialize_endian_uint32_t+0x7a>
 8012504:	4639      	mov	r1, r7
 8012506:	464a      	mov	r2, r9
 8012508:	4628      	mov	r0, r5
 801250a:	f00e fca8 	bl	8020e5e <memcpy>
 801250e:	4652      	mov	r2, sl
 8012510:	eb05 0009 	add.w	r0, r5, r9
 8012514:	68a1      	ldr	r1, [r4, #8]
 8012516:	f00e fca2 	bl	8020e5e <memcpy>
 801251a:	e7a6      	b.n	801246a <ucdr_deserialize_endian_uint32_t+0x7a>

0801251c <ucdr_serialize_uint64_t>:
 801251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012520:	4604      	mov	r4, r0
 8012522:	b082      	sub	sp, #8
 8012524:	2108      	movs	r1, #8
 8012526:	e9cd 2300 	strd	r2, r3, [sp]
 801252a:	f000 fe6f 	bl	801320c <ucdr_buffer_alignment>
 801252e:	4601      	mov	r1, r0
 8012530:	4620      	mov	r0, r4
 8012532:	7d67      	ldrb	r7, [r4, #21]
 8012534:	f000 feb2 	bl	801329c <ucdr_advance_buffer>
 8012538:	2108      	movs	r1, #8
 801253a:	4620      	mov	r0, r4
 801253c:	f000 fe06 	bl	801314c <ucdr_check_buffer_available_for>
 8012540:	2800      	cmp	r0, #0
 8012542:	d14e      	bne.n	80125e2 <ucdr_serialize_uint64_t+0xc6>
 8012544:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012548:	42ab      	cmp	r3, r5
 801254a:	d945      	bls.n	80125d8 <ucdr_serialize_uint64_t+0xbc>
 801254c:	1b5e      	subs	r6, r3, r5
 801254e:	60a3      	str	r3, [r4, #8]
 8012550:	6923      	ldr	r3, [r4, #16]
 8012552:	4620      	mov	r0, r4
 8012554:	f1c6 0808 	rsb	r8, r6, #8
 8012558:	4433      	add	r3, r6
 801255a:	4641      	mov	r1, r8
 801255c:	6123      	str	r3, [r4, #16]
 801255e:	f000 fe01 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012562:	2800      	cmp	r0, #0
 8012564:	d074      	beq.n	8012650 <ucdr_serialize_uint64_t+0x134>
 8012566:	7d23      	ldrb	r3, [r4, #20]
 8012568:	2b01      	cmp	r3, #1
 801256a:	f000 809b 	beq.w	80126a4 <ucdr_serialize_uint64_t+0x188>
 801256e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012572:	702b      	strb	r3, [r5, #0]
 8012574:	2e00      	cmp	r6, #0
 8012576:	d078      	beq.n	801266a <ucdr_serialize_uint64_t+0x14e>
 8012578:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801257c:	2e01      	cmp	r6, #1
 801257e:	706b      	strb	r3, [r5, #1]
 8012580:	d077      	beq.n	8012672 <ucdr_serialize_uint64_t+0x156>
 8012582:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012586:	2e02      	cmp	r6, #2
 8012588:	70ab      	strb	r3, [r5, #2]
 801258a:	d076      	beq.n	801267a <ucdr_serialize_uint64_t+0x15e>
 801258c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012590:	2e03      	cmp	r6, #3
 8012592:	70eb      	strb	r3, [r5, #3]
 8012594:	d075      	beq.n	8012682 <ucdr_serialize_uint64_t+0x166>
 8012596:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801259a:	2e04      	cmp	r6, #4
 801259c:	712b      	strb	r3, [r5, #4]
 801259e:	d074      	beq.n	801268a <ucdr_serialize_uint64_t+0x16e>
 80125a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80125a4:	2e05      	cmp	r6, #5
 80125a6:	716b      	strb	r3, [r5, #5]
 80125a8:	d073      	beq.n	8012692 <ucdr_serialize_uint64_t+0x176>
 80125aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80125ae:	2e06      	cmp	r6, #6
 80125b0:	71ab      	strb	r3, [r5, #6]
 80125b2:	d072      	beq.n	801269a <ucdr_serialize_uint64_t+0x17e>
 80125b4:	f89d 3000 	ldrb.w	r3, [sp]
 80125b8:	71eb      	strb	r3, [r5, #7]
 80125ba:	6923      	ldr	r3, [r4, #16]
 80125bc:	2108      	movs	r1, #8
 80125be:	68a2      	ldr	r2, [r4, #8]
 80125c0:	3308      	adds	r3, #8
 80125c2:	7da0      	ldrb	r0, [r4, #22]
 80125c4:	4442      	add	r2, r8
 80125c6:	7561      	strb	r1, [r4, #21]
 80125c8:	1b9e      	subs	r6, r3, r6
 80125ca:	f080 0001 	eor.w	r0, r0, #1
 80125ce:	60a2      	str	r2, [r4, #8]
 80125d0:	6126      	str	r6, [r4, #16]
 80125d2:	b002      	add	sp, #8
 80125d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d8:	2108      	movs	r1, #8
 80125da:	4620      	mov	r0, r4
 80125dc:	f000 fdc2 	bl	8013164 <ucdr_check_final_buffer_behavior>
 80125e0:	b350      	cbz	r0, 8012638 <ucdr_serialize_uint64_t+0x11c>
 80125e2:	7d23      	ldrb	r3, [r4, #20]
 80125e4:	2b01      	cmp	r3, #1
 80125e6:	d02d      	beq.n	8012644 <ucdr_serialize_uint64_t+0x128>
 80125e8:	68a3      	ldr	r3, [r4, #8]
 80125ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80125ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80125f6:	7018      	strb	r0, [r3, #0]
 80125f8:	68a3      	ldr	r3, [r4, #8]
 80125fa:	705a      	strb	r2, [r3, #1]
 80125fc:	68a3      	ldr	r3, [r4, #8]
 80125fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012602:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012606:	7099      	strb	r1, [r3, #2]
 8012608:	68a3      	ldr	r3, [r4, #8]
 801260a:	70da      	strb	r2, [r3, #3]
 801260c:	68a3      	ldr	r3, [r4, #8]
 801260e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012612:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012616:	7118      	strb	r0, [r3, #4]
 8012618:	68a3      	ldr	r3, [r4, #8]
 801261a:	715a      	strb	r2, [r3, #5]
 801261c:	68a3      	ldr	r3, [r4, #8]
 801261e:	f89d 2000 	ldrb.w	r2, [sp]
 8012622:	7199      	strb	r1, [r3, #6]
 8012624:	68a3      	ldr	r3, [r4, #8]
 8012626:	71da      	strb	r2, [r3, #7]
 8012628:	2108      	movs	r1, #8
 801262a:	68a2      	ldr	r2, [r4, #8]
 801262c:	6923      	ldr	r3, [r4, #16]
 801262e:	440a      	add	r2, r1
 8012630:	7561      	strb	r1, [r4, #21]
 8012632:	440b      	add	r3, r1
 8012634:	60a2      	str	r2, [r4, #8]
 8012636:	6123      	str	r3, [r4, #16]
 8012638:	7da0      	ldrb	r0, [r4, #22]
 801263a:	f080 0001 	eor.w	r0, r0, #1
 801263e:	b002      	add	sp, #8
 8012640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012644:	466b      	mov	r3, sp
 8012646:	68a2      	ldr	r2, [r4, #8]
 8012648:	cb03      	ldmia	r3!, {r0, r1}
 801264a:	6010      	str	r0, [r2, #0]
 801264c:	6051      	str	r1, [r2, #4]
 801264e:	e7eb      	b.n	8012628 <ucdr_serialize_uint64_t+0x10c>
 8012650:	68a2      	ldr	r2, [r4, #8]
 8012652:	6923      	ldr	r3, [r4, #16]
 8012654:	7da0      	ldrb	r0, [r4, #22]
 8012656:	1b92      	subs	r2, r2, r6
 8012658:	1b9b      	subs	r3, r3, r6
 801265a:	7567      	strb	r7, [r4, #21]
 801265c:	f080 0001 	eor.w	r0, r0, #1
 8012660:	60a2      	str	r2, [r4, #8]
 8012662:	6123      	str	r3, [r4, #16]
 8012664:	b002      	add	sp, #8
 8012666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801266a:	68a3      	ldr	r3, [r4, #8]
 801266c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012670:	701a      	strb	r2, [r3, #0]
 8012672:	68a3      	ldr	r3, [r4, #8]
 8012674:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012678:	701a      	strb	r2, [r3, #0]
 801267a:	68a3      	ldr	r3, [r4, #8]
 801267c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012680:	701a      	strb	r2, [r3, #0]
 8012682:	68a3      	ldr	r3, [r4, #8]
 8012684:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012688:	701a      	strb	r2, [r3, #0]
 801268a:	68a3      	ldr	r3, [r4, #8]
 801268c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012690:	701a      	strb	r2, [r3, #0]
 8012692:	68a3      	ldr	r3, [r4, #8]
 8012694:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012698:	701a      	strb	r2, [r3, #0]
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	f89d 2000 	ldrb.w	r2, [sp]
 80126a0:	701a      	strb	r2, [r3, #0]
 80126a2:	e78a      	b.n	80125ba <ucdr_serialize_uint64_t+0x9e>
 80126a4:	4628      	mov	r0, r5
 80126a6:	466d      	mov	r5, sp
 80126a8:	4632      	mov	r2, r6
 80126aa:	4629      	mov	r1, r5
 80126ac:	f00e fbd7 	bl	8020e5e <memcpy>
 80126b0:	4642      	mov	r2, r8
 80126b2:	19a9      	adds	r1, r5, r6
 80126b4:	68a0      	ldr	r0, [r4, #8]
 80126b6:	f00e fbd2 	bl	8020e5e <memcpy>
 80126ba:	e77e      	b.n	80125ba <ucdr_serialize_uint64_t+0x9e>

080126bc <ucdr_serialize_int16_t>:
 80126bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	460b      	mov	r3, r1
 80126c2:	b082      	sub	sp, #8
 80126c4:	4604      	mov	r4, r0
 80126c6:	2102      	movs	r1, #2
 80126c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80126cc:	f000 fd9e 	bl	801320c <ucdr_buffer_alignment>
 80126d0:	4601      	mov	r1, r0
 80126d2:	4620      	mov	r0, r4
 80126d4:	7d67      	ldrb	r7, [r4, #21]
 80126d6:	f000 fde1 	bl	801329c <ucdr_advance_buffer>
 80126da:	2102      	movs	r1, #2
 80126dc:	4620      	mov	r0, r4
 80126de:	f000 fd35 	bl	801314c <ucdr_check_buffer_available_for>
 80126e2:	bb78      	cbnz	r0, 8012744 <ucdr_serialize_int16_t+0x88>
 80126e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80126e8:	42ab      	cmp	r3, r5
 80126ea:	d926      	bls.n	801273a <ucdr_serialize_int16_t+0x7e>
 80126ec:	1b5e      	subs	r6, r3, r5
 80126ee:	60a3      	str	r3, [r4, #8]
 80126f0:	6923      	ldr	r3, [r4, #16]
 80126f2:	4620      	mov	r0, r4
 80126f4:	f1c6 0802 	rsb	r8, r6, #2
 80126f8:	4433      	add	r3, r6
 80126fa:	4641      	mov	r1, r8
 80126fc:	6123      	str	r3, [r4, #16]
 80126fe:	f000 fd31 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012702:	2800      	cmp	r0, #0
 8012704:	d03b      	beq.n	801277e <ucdr_serialize_int16_t+0xc2>
 8012706:	7d23      	ldrb	r3, [r4, #20]
 8012708:	2b01      	cmp	r3, #1
 801270a:	d04a      	beq.n	80127a2 <ucdr_serialize_int16_t+0xe6>
 801270c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012710:	702b      	strb	r3, [r5, #0]
 8012712:	2e00      	cmp	r6, #0
 8012714:	d040      	beq.n	8012798 <ucdr_serialize_int16_t+0xdc>
 8012716:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801271a:	706b      	strb	r3, [r5, #1]
 801271c:	6923      	ldr	r3, [r4, #16]
 801271e:	2102      	movs	r1, #2
 8012720:	68a2      	ldr	r2, [r4, #8]
 8012722:	3302      	adds	r3, #2
 8012724:	7da0      	ldrb	r0, [r4, #22]
 8012726:	4442      	add	r2, r8
 8012728:	7561      	strb	r1, [r4, #21]
 801272a:	1b9e      	subs	r6, r3, r6
 801272c:	f080 0001 	eor.w	r0, r0, #1
 8012730:	60a2      	str	r2, [r4, #8]
 8012732:	6126      	str	r6, [r4, #16]
 8012734:	b002      	add	sp, #8
 8012736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801273a:	2102      	movs	r1, #2
 801273c:	4620      	mov	r0, r4
 801273e:	f000 fd11 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012742:	b190      	cbz	r0, 801276a <ucdr_serialize_int16_t+0xae>
 8012744:	7d23      	ldrb	r3, [r4, #20]
 8012746:	2b01      	cmp	r3, #1
 8012748:	68a3      	ldr	r3, [r4, #8]
 801274a:	d014      	beq.n	8012776 <ucdr_serialize_int16_t+0xba>
 801274c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012750:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012754:	7019      	strb	r1, [r3, #0]
 8012756:	68a3      	ldr	r3, [r4, #8]
 8012758:	705a      	strb	r2, [r3, #1]
 801275a:	2102      	movs	r1, #2
 801275c:	68a2      	ldr	r2, [r4, #8]
 801275e:	6923      	ldr	r3, [r4, #16]
 8012760:	440a      	add	r2, r1
 8012762:	7561      	strb	r1, [r4, #21]
 8012764:	440b      	add	r3, r1
 8012766:	60a2      	str	r2, [r4, #8]
 8012768:	6123      	str	r3, [r4, #16]
 801276a:	7da0      	ldrb	r0, [r4, #22]
 801276c:	f080 0001 	eor.w	r0, r0, #1
 8012770:	b002      	add	sp, #8
 8012772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012776:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801277a:	801a      	strh	r2, [r3, #0]
 801277c:	e7ed      	b.n	801275a <ucdr_serialize_int16_t+0x9e>
 801277e:	68a2      	ldr	r2, [r4, #8]
 8012780:	6923      	ldr	r3, [r4, #16]
 8012782:	7da0      	ldrb	r0, [r4, #22]
 8012784:	1b92      	subs	r2, r2, r6
 8012786:	1b9b      	subs	r3, r3, r6
 8012788:	7567      	strb	r7, [r4, #21]
 801278a:	f080 0001 	eor.w	r0, r0, #1
 801278e:	60a2      	str	r2, [r4, #8]
 8012790:	6123      	str	r3, [r4, #16]
 8012792:	b002      	add	sp, #8
 8012794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012798:	68a3      	ldr	r3, [r4, #8]
 801279a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801279e:	701a      	strb	r2, [r3, #0]
 80127a0:	e7bc      	b.n	801271c <ucdr_serialize_int16_t+0x60>
 80127a2:	4628      	mov	r0, r5
 80127a4:	f10d 0506 	add.w	r5, sp, #6
 80127a8:	4632      	mov	r2, r6
 80127aa:	4629      	mov	r1, r5
 80127ac:	f00e fb57 	bl	8020e5e <memcpy>
 80127b0:	4642      	mov	r2, r8
 80127b2:	19a9      	adds	r1, r5, r6
 80127b4:	68a0      	ldr	r0, [r4, #8]
 80127b6:	f00e fb52 	bl	8020e5e <memcpy>
 80127ba:	e7af      	b.n	801271c <ucdr_serialize_int16_t+0x60>

080127bc <ucdr_deserialize_int16_t>:
 80127bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127c0:	4604      	mov	r4, r0
 80127c2:	460d      	mov	r5, r1
 80127c4:	2102      	movs	r1, #2
 80127c6:	f000 fd21 	bl	801320c <ucdr_buffer_alignment>
 80127ca:	4601      	mov	r1, r0
 80127cc:	4620      	mov	r0, r4
 80127ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80127d2:	f000 fd63 	bl	801329c <ucdr_advance_buffer>
 80127d6:	2102      	movs	r1, #2
 80127d8:	4620      	mov	r0, r4
 80127da:	f000 fcb7 	bl	801314c <ucdr_check_buffer_available_for>
 80127de:	bb60      	cbnz	r0, 801283a <ucdr_deserialize_int16_t+0x7e>
 80127e0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80127e4:	42be      	cmp	r6, r7
 80127e6:	d923      	bls.n	8012830 <ucdr_deserialize_int16_t+0x74>
 80127e8:	6923      	ldr	r3, [r4, #16]
 80127ea:	4620      	mov	r0, r4
 80127ec:	60a6      	str	r6, [r4, #8]
 80127ee:	1bf6      	subs	r6, r6, r7
 80127f0:	4433      	add	r3, r6
 80127f2:	f1c6 0902 	rsb	r9, r6, #2
 80127f6:	6123      	str	r3, [r4, #16]
 80127f8:	4649      	mov	r1, r9
 80127fa:	f000 fcb3 	bl	8013164 <ucdr_check_final_buffer_behavior>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d034      	beq.n	801286c <ucdr_deserialize_int16_t+0xb0>
 8012802:	7d23      	ldrb	r3, [r4, #20]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d042      	beq.n	801288e <ucdr_deserialize_int16_t+0xd2>
 8012808:	787b      	ldrb	r3, [r7, #1]
 801280a:	702b      	strb	r3, [r5, #0]
 801280c:	2e00      	cmp	r6, #0
 801280e:	d03a      	beq.n	8012886 <ucdr_deserialize_int16_t+0xca>
 8012810:	783b      	ldrb	r3, [r7, #0]
 8012812:	706b      	strb	r3, [r5, #1]
 8012814:	6923      	ldr	r3, [r4, #16]
 8012816:	2102      	movs	r1, #2
 8012818:	68a2      	ldr	r2, [r4, #8]
 801281a:	3302      	adds	r3, #2
 801281c:	7da0      	ldrb	r0, [r4, #22]
 801281e:	444a      	add	r2, r9
 8012820:	7561      	strb	r1, [r4, #21]
 8012822:	1b9b      	subs	r3, r3, r6
 8012824:	f080 0001 	eor.w	r0, r0, #1
 8012828:	60a2      	str	r2, [r4, #8]
 801282a:	6123      	str	r3, [r4, #16]
 801282c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012830:	2102      	movs	r1, #2
 8012832:	4620      	mov	r0, r4
 8012834:	f000 fc96 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012838:	b180      	cbz	r0, 801285c <ucdr_deserialize_int16_t+0xa0>
 801283a:	7d23      	ldrb	r3, [r4, #20]
 801283c:	2b01      	cmp	r3, #1
 801283e:	68a3      	ldr	r3, [r4, #8]
 8012840:	d011      	beq.n	8012866 <ucdr_deserialize_int16_t+0xaa>
 8012842:	785b      	ldrb	r3, [r3, #1]
 8012844:	702b      	strb	r3, [r5, #0]
 8012846:	68a3      	ldr	r3, [r4, #8]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	706b      	strb	r3, [r5, #1]
 801284c:	2102      	movs	r1, #2
 801284e:	68a2      	ldr	r2, [r4, #8]
 8012850:	6923      	ldr	r3, [r4, #16]
 8012852:	440a      	add	r2, r1
 8012854:	7561      	strb	r1, [r4, #21]
 8012856:	440b      	add	r3, r1
 8012858:	60a2      	str	r2, [r4, #8]
 801285a:	6123      	str	r3, [r4, #16]
 801285c:	7da0      	ldrb	r0, [r4, #22]
 801285e:	f080 0001 	eor.w	r0, r0, #1
 8012862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012866:	881b      	ldrh	r3, [r3, #0]
 8012868:	802b      	strh	r3, [r5, #0]
 801286a:	e7ef      	b.n	801284c <ucdr_deserialize_int16_t+0x90>
 801286c:	68a2      	ldr	r2, [r4, #8]
 801286e:	6923      	ldr	r3, [r4, #16]
 8012870:	1b92      	subs	r2, r2, r6
 8012872:	7da0      	ldrb	r0, [r4, #22]
 8012874:	1b9b      	subs	r3, r3, r6
 8012876:	f884 8015 	strb.w	r8, [r4, #21]
 801287a:	f080 0001 	eor.w	r0, r0, #1
 801287e:	60a2      	str	r2, [r4, #8]
 8012880:	6123      	str	r3, [r4, #16]
 8012882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012886:	68a3      	ldr	r3, [r4, #8]
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	706b      	strb	r3, [r5, #1]
 801288c:	e7c2      	b.n	8012814 <ucdr_deserialize_int16_t+0x58>
 801288e:	4639      	mov	r1, r7
 8012890:	4632      	mov	r2, r6
 8012892:	4628      	mov	r0, r5
 8012894:	f00e fae3 	bl	8020e5e <memcpy>
 8012898:	464a      	mov	r2, r9
 801289a:	19a8      	adds	r0, r5, r6
 801289c:	68a1      	ldr	r1, [r4, #8]
 801289e:	f00e fade 	bl	8020e5e <memcpy>
 80128a2:	e7b7      	b.n	8012814 <ucdr_deserialize_int16_t+0x58>

080128a4 <ucdr_serialize_int32_t>:
 80128a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a8:	b082      	sub	sp, #8
 80128aa:	4604      	mov	r4, r0
 80128ac:	9101      	str	r1, [sp, #4]
 80128ae:	2104      	movs	r1, #4
 80128b0:	f000 fcac 	bl	801320c <ucdr_buffer_alignment>
 80128b4:	4601      	mov	r1, r0
 80128b6:	4620      	mov	r0, r4
 80128b8:	7d67      	ldrb	r7, [r4, #21]
 80128ba:	f000 fcef 	bl	801329c <ucdr_advance_buffer>
 80128be:	2104      	movs	r1, #4
 80128c0:	4620      	mov	r0, r4
 80128c2:	f000 fc43 	bl	801314c <ucdr_check_buffer_available_for>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	d139      	bne.n	801293e <ucdr_serialize_int32_t+0x9a>
 80128ca:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80128ce:	42ab      	cmp	r3, r5
 80128d0:	d930      	bls.n	8012934 <ucdr_serialize_int32_t+0x90>
 80128d2:	1b5e      	subs	r6, r3, r5
 80128d4:	60a3      	str	r3, [r4, #8]
 80128d6:	6923      	ldr	r3, [r4, #16]
 80128d8:	4620      	mov	r0, r4
 80128da:	f1c6 0804 	rsb	r8, r6, #4
 80128de:	4433      	add	r3, r6
 80128e0:	4641      	mov	r1, r8
 80128e2:	6123      	str	r3, [r4, #16]
 80128e4:	f000 fc3e 	bl	8013164 <ucdr_check_final_buffer_behavior>
 80128e8:	2800      	cmp	r0, #0
 80128ea:	d04c      	beq.n	8012986 <ucdr_serialize_int32_t+0xe2>
 80128ec:	7d23      	ldrb	r3, [r4, #20]
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d063      	beq.n	80129ba <ucdr_serialize_int32_t+0x116>
 80128f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80128f6:	702b      	strb	r3, [r5, #0]
 80128f8:	2e00      	cmp	r6, #0
 80128fa:	d051      	beq.n	80129a0 <ucdr_serialize_int32_t+0xfc>
 80128fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012900:	2e01      	cmp	r6, #1
 8012902:	706b      	strb	r3, [r5, #1]
 8012904:	d050      	beq.n	80129a8 <ucdr_serialize_int32_t+0x104>
 8012906:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801290a:	2e02      	cmp	r6, #2
 801290c:	70ab      	strb	r3, [r5, #2]
 801290e:	d04f      	beq.n	80129b0 <ucdr_serialize_int32_t+0x10c>
 8012910:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012914:	70eb      	strb	r3, [r5, #3]
 8012916:	6923      	ldr	r3, [r4, #16]
 8012918:	2104      	movs	r1, #4
 801291a:	68a2      	ldr	r2, [r4, #8]
 801291c:	3304      	adds	r3, #4
 801291e:	7da0      	ldrb	r0, [r4, #22]
 8012920:	4442      	add	r2, r8
 8012922:	7561      	strb	r1, [r4, #21]
 8012924:	1b9e      	subs	r6, r3, r6
 8012926:	f080 0001 	eor.w	r0, r0, #1
 801292a:	60a2      	str	r2, [r4, #8]
 801292c:	6126      	str	r6, [r4, #16]
 801292e:	b002      	add	sp, #8
 8012930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012934:	2104      	movs	r1, #4
 8012936:	4620      	mov	r0, r4
 8012938:	f000 fc14 	bl	8013164 <ucdr_check_final_buffer_behavior>
 801293c:	b1d0      	cbz	r0, 8012974 <ucdr_serialize_int32_t+0xd0>
 801293e:	7d23      	ldrb	r3, [r4, #20]
 8012940:	2b01      	cmp	r3, #1
 8012942:	68a3      	ldr	r3, [r4, #8]
 8012944:	d01c      	beq.n	8012980 <ucdr_serialize_int32_t+0xdc>
 8012946:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801294a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801294e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012952:	7018      	strb	r0, [r3, #0]
 8012954:	68a3      	ldr	r3, [r4, #8]
 8012956:	705a      	strb	r2, [r3, #1]
 8012958:	68a3      	ldr	r3, [r4, #8]
 801295a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801295e:	7099      	strb	r1, [r3, #2]
 8012960:	68a3      	ldr	r3, [r4, #8]
 8012962:	70da      	strb	r2, [r3, #3]
 8012964:	2104      	movs	r1, #4
 8012966:	68a2      	ldr	r2, [r4, #8]
 8012968:	6923      	ldr	r3, [r4, #16]
 801296a:	440a      	add	r2, r1
 801296c:	7561      	strb	r1, [r4, #21]
 801296e:	440b      	add	r3, r1
 8012970:	60a2      	str	r2, [r4, #8]
 8012972:	6123      	str	r3, [r4, #16]
 8012974:	7da0      	ldrb	r0, [r4, #22]
 8012976:	f080 0001 	eor.w	r0, r0, #1
 801297a:	b002      	add	sp, #8
 801297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012980:	9a01      	ldr	r2, [sp, #4]
 8012982:	601a      	str	r2, [r3, #0]
 8012984:	e7ee      	b.n	8012964 <ucdr_serialize_int32_t+0xc0>
 8012986:	68a2      	ldr	r2, [r4, #8]
 8012988:	6923      	ldr	r3, [r4, #16]
 801298a:	7da0      	ldrb	r0, [r4, #22]
 801298c:	1b92      	subs	r2, r2, r6
 801298e:	1b9b      	subs	r3, r3, r6
 8012990:	7567      	strb	r7, [r4, #21]
 8012992:	f080 0001 	eor.w	r0, r0, #1
 8012996:	60a2      	str	r2, [r4, #8]
 8012998:	6123      	str	r3, [r4, #16]
 801299a:	b002      	add	sp, #8
 801299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a0:	68a3      	ldr	r3, [r4, #8]
 80129a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80129a6:	701a      	strb	r2, [r3, #0]
 80129a8:	68a3      	ldr	r3, [r4, #8]
 80129aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80129ae:	701a      	strb	r2, [r3, #0]
 80129b0:	68a3      	ldr	r3, [r4, #8]
 80129b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80129b6:	701a      	strb	r2, [r3, #0]
 80129b8:	e7ad      	b.n	8012916 <ucdr_serialize_int32_t+0x72>
 80129ba:	4628      	mov	r0, r5
 80129bc:	ad01      	add	r5, sp, #4
 80129be:	4632      	mov	r2, r6
 80129c0:	4629      	mov	r1, r5
 80129c2:	f00e fa4c 	bl	8020e5e <memcpy>
 80129c6:	4642      	mov	r2, r8
 80129c8:	19a9      	adds	r1, r5, r6
 80129ca:	68a0      	ldr	r0, [r4, #8]
 80129cc:	f00e fa47 	bl	8020e5e <memcpy>
 80129d0:	e7a1      	b.n	8012916 <ucdr_serialize_int32_t+0x72>
 80129d2:	bf00      	nop

080129d4 <ucdr_deserialize_int32_t>:
 80129d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129d8:	4604      	mov	r4, r0
 80129da:	460d      	mov	r5, r1
 80129dc:	2104      	movs	r1, #4
 80129de:	f000 fc15 	bl	801320c <ucdr_buffer_alignment>
 80129e2:	4601      	mov	r1, r0
 80129e4:	4620      	mov	r0, r4
 80129e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80129ea:	f000 fc57 	bl	801329c <ucdr_advance_buffer>
 80129ee:	2104      	movs	r1, #4
 80129f0:	4620      	mov	r0, r4
 80129f2:	f000 fbab 	bl	801314c <ucdr_check_buffer_available_for>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d138      	bne.n	8012a6c <ucdr_deserialize_int32_t+0x98>
 80129fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80129fe:	42b7      	cmp	r7, r6
 8012a00:	d92f      	bls.n	8012a62 <ucdr_deserialize_int32_t+0x8e>
 8012a02:	6923      	ldr	r3, [r4, #16]
 8012a04:	4620      	mov	r0, r4
 8012a06:	60a7      	str	r7, [r4, #8]
 8012a08:	1bbf      	subs	r7, r7, r6
 8012a0a:	443b      	add	r3, r7
 8012a0c:	f1c7 0904 	rsb	r9, r7, #4
 8012a10:	6123      	str	r3, [r4, #16]
 8012a12:	4649      	mov	r1, r9
 8012a14:	f000 fba6 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	d046      	beq.n	8012aaa <ucdr_deserialize_int32_t+0xd6>
 8012a1c:	7d23      	ldrb	r3, [r4, #20]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d05c      	beq.n	8012adc <ucdr_deserialize_int32_t+0x108>
 8012a22:	78f3      	ldrb	r3, [r6, #3]
 8012a24:	702b      	strb	r3, [r5, #0]
 8012a26:	2f00      	cmp	r7, #0
 8012a28:	d04c      	beq.n	8012ac4 <ucdr_deserialize_int32_t+0xf0>
 8012a2a:	78b3      	ldrb	r3, [r6, #2]
 8012a2c:	2f01      	cmp	r7, #1
 8012a2e:	706b      	strb	r3, [r5, #1]
 8012a30:	f105 0302 	add.w	r3, r5, #2
 8012a34:	d04a      	beq.n	8012acc <ucdr_deserialize_int32_t+0xf8>
 8012a36:	7873      	ldrb	r3, [r6, #1]
 8012a38:	2f02      	cmp	r7, #2
 8012a3a:	70ab      	strb	r3, [r5, #2]
 8012a3c:	f105 0303 	add.w	r3, r5, #3
 8012a40:	d048      	beq.n	8012ad4 <ucdr_deserialize_int32_t+0x100>
 8012a42:	7833      	ldrb	r3, [r6, #0]
 8012a44:	70eb      	strb	r3, [r5, #3]
 8012a46:	6923      	ldr	r3, [r4, #16]
 8012a48:	2104      	movs	r1, #4
 8012a4a:	68a2      	ldr	r2, [r4, #8]
 8012a4c:	3304      	adds	r3, #4
 8012a4e:	7da0      	ldrb	r0, [r4, #22]
 8012a50:	444a      	add	r2, r9
 8012a52:	7561      	strb	r1, [r4, #21]
 8012a54:	1bdb      	subs	r3, r3, r7
 8012a56:	f080 0001 	eor.w	r0, r0, #1
 8012a5a:	60a2      	str	r2, [r4, #8]
 8012a5c:	6123      	str	r3, [r4, #16]
 8012a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a62:	2104      	movs	r1, #4
 8012a64:	4620      	mov	r0, r4
 8012a66:	f000 fb7d 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012a6a:	b1b0      	cbz	r0, 8012a9a <ucdr_deserialize_int32_t+0xc6>
 8012a6c:	7d23      	ldrb	r3, [r4, #20]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	68a3      	ldr	r3, [r4, #8]
 8012a72:	d017      	beq.n	8012aa4 <ucdr_deserialize_int32_t+0xd0>
 8012a74:	78db      	ldrb	r3, [r3, #3]
 8012a76:	702b      	strb	r3, [r5, #0]
 8012a78:	68a3      	ldr	r3, [r4, #8]
 8012a7a:	789b      	ldrb	r3, [r3, #2]
 8012a7c:	706b      	strb	r3, [r5, #1]
 8012a7e:	68a3      	ldr	r3, [r4, #8]
 8012a80:	785b      	ldrb	r3, [r3, #1]
 8012a82:	70ab      	strb	r3, [r5, #2]
 8012a84:	68a3      	ldr	r3, [r4, #8]
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	70eb      	strb	r3, [r5, #3]
 8012a8a:	2104      	movs	r1, #4
 8012a8c:	68a2      	ldr	r2, [r4, #8]
 8012a8e:	6923      	ldr	r3, [r4, #16]
 8012a90:	440a      	add	r2, r1
 8012a92:	7561      	strb	r1, [r4, #21]
 8012a94:	440b      	add	r3, r1
 8012a96:	60a2      	str	r2, [r4, #8]
 8012a98:	6123      	str	r3, [r4, #16]
 8012a9a:	7da0      	ldrb	r0, [r4, #22]
 8012a9c:	f080 0001 	eor.w	r0, r0, #1
 8012aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	602b      	str	r3, [r5, #0]
 8012aa8:	e7ef      	b.n	8012a8a <ucdr_deserialize_int32_t+0xb6>
 8012aaa:	68a2      	ldr	r2, [r4, #8]
 8012aac:	6923      	ldr	r3, [r4, #16]
 8012aae:	1bd2      	subs	r2, r2, r7
 8012ab0:	7da0      	ldrb	r0, [r4, #22]
 8012ab2:	1bdb      	subs	r3, r3, r7
 8012ab4:	f884 8015 	strb.w	r8, [r4, #21]
 8012ab8:	f080 0001 	eor.w	r0, r0, #1
 8012abc:	60a2      	str	r2, [r4, #8]
 8012abe:	6123      	str	r3, [r4, #16]
 8012ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ac4:	68a3      	ldr	r3, [r4, #8]
 8012ac6:	789b      	ldrb	r3, [r3, #2]
 8012ac8:	706b      	strb	r3, [r5, #1]
 8012aca:	1cab      	adds	r3, r5, #2
 8012acc:	68a2      	ldr	r2, [r4, #8]
 8012ace:	7852      	ldrb	r2, [r2, #1]
 8012ad0:	f803 2b01 	strb.w	r2, [r3], #1
 8012ad4:	68a2      	ldr	r2, [r4, #8]
 8012ad6:	7812      	ldrb	r2, [r2, #0]
 8012ad8:	701a      	strb	r2, [r3, #0]
 8012ada:	e7b4      	b.n	8012a46 <ucdr_deserialize_int32_t+0x72>
 8012adc:	4631      	mov	r1, r6
 8012ade:	463a      	mov	r2, r7
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	f00e f9bc 	bl	8020e5e <memcpy>
 8012ae6:	464a      	mov	r2, r9
 8012ae8:	19e8      	adds	r0, r5, r7
 8012aea:	68a1      	ldr	r1, [r4, #8]
 8012aec:	f00e f9b7 	bl	8020e5e <memcpy>
 8012af0:	e7a9      	b.n	8012a46 <ucdr_deserialize_int32_t+0x72>
 8012af2:	bf00      	nop

08012af4 <ucdr_serialize_int64_t>:
 8012af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af8:	4604      	mov	r4, r0
 8012afa:	b082      	sub	sp, #8
 8012afc:	2108      	movs	r1, #8
 8012afe:	e9cd 2300 	strd	r2, r3, [sp]
 8012b02:	f000 fb83 	bl	801320c <ucdr_buffer_alignment>
 8012b06:	4601      	mov	r1, r0
 8012b08:	4620      	mov	r0, r4
 8012b0a:	7d67      	ldrb	r7, [r4, #21]
 8012b0c:	f000 fbc6 	bl	801329c <ucdr_advance_buffer>
 8012b10:	2108      	movs	r1, #8
 8012b12:	4620      	mov	r0, r4
 8012b14:	f000 fb1a 	bl	801314c <ucdr_check_buffer_available_for>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d14e      	bne.n	8012bba <ucdr_serialize_int64_t+0xc6>
 8012b1c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012b20:	42ab      	cmp	r3, r5
 8012b22:	d945      	bls.n	8012bb0 <ucdr_serialize_int64_t+0xbc>
 8012b24:	1b5e      	subs	r6, r3, r5
 8012b26:	60a3      	str	r3, [r4, #8]
 8012b28:	6923      	ldr	r3, [r4, #16]
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f1c6 0808 	rsb	r8, r6, #8
 8012b30:	4433      	add	r3, r6
 8012b32:	4641      	mov	r1, r8
 8012b34:	6123      	str	r3, [r4, #16]
 8012b36:	f000 fb15 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	d074      	beq.n	8012c28 <ucdr_serialize_int64_t+0x134>
 8012b3e:	7d23      	ldrb	r3, [r4, #20]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	f000 809b 	beq.w	8012c7c <ucdr_serialize_int64_t+0x188>
 8012b46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012b4a:	702b      	strb	r3, [r5, #0]
 8012b4c:	2e00      	cmp	r6, #0
 8012b4e:	d078      	beq.n	8012c42 <ucdr_serialize_int64_t+0x14e>
 8012b50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012b54:	2e01      	cmp	r6, #1
 8012b56:	706b      	strb	r3, [r5, #1]
 8012b58:	d077      	beq.n	8012c4a <ucdr_serialize_int64_t+0x156>
 8012b5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012b5e:	2e02      	cmp	r6, #2
 8012b60:	70ab      	strb	r3, [r5, #2]
 8012b62:	d076      	beq.n	8012c52 <ucdr_serialize_int64_t+0x15e>
 8012b64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012b68:	2e03      	cmp	r6, #3
 8012b6a:	70eb      	strb	r3, [r5, #3]
 8012b6c:	d075      	beq.n	8012c5a <ucdr_serialize_int64_t+0x166>
 8012b6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012b72:	2e04      	cmp	r6, #4
 8012b74:	712b      	strb	r3, [r5, #4]
 8012b76:	d074      	beq.n	8012c62 <ucdr_serialize_int64_t+0x16e>
 8012b78:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012b7c:	2e05      	cmp	r6, #5
 8012b7e:	716b      	strb	r3, [r5, #5]
 8012b80:	d073      	beq.n	8012c6a <ucdr_serialize_int64_t+0x176>
 8012b82:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012b86:	2e06      	cmp	r6, #6
 8012b88:	71ab      	strb	r3, [r5, #6]
 8012b8a:	d072      	beq.n	8012c72 <ucdr_serialize_int64_t+0x17e>
 8012b8c:	f89d 3000 	ldrb.w	r3, [sp]
 8012b90:	71eb      	strb	r3, [r5, #7]
 8012b92:	6923      	ldr	r3, [r4, #16]
 8012b94:	2108      	movs	r1, #8
 8012b96:	68a2      	ldr	r2, [r4, #8]
 8012b98:	3308      	adds	r3, #8
 8012b9a:	7da0      	ldrb	r0, [r4, #22]
 8012b9c:	4442      	add	r2, r8
 8012b9e:	7561      	strb	r1, [r4, #21]
 8012ba0:	1b9e      	subs	r6, r3, r6
 8012ba2:	f080 0001 	eor.w	r0, r0, #1
 8012ba6:	60a2      	str	r2, [r4, #8]
 8012ba8:	6126      	str	r6, [r4, #16]
 8012baa:	b002      	add	sp, #8
 8012bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb0:	2108      	movs	r1, #8
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f000 fad6 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012bb8:	b350      	cbz	r0, 8012c10 <ucdr_serialize_int64_t+0x11c>
 8012bba:	7d23      	ldrb	r3, [r4, #20]
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d02d      	beq.n	8012c1c <ucdr_serialize_int64_t+0x128>
 8012bc0:	68a3      	ldr	r3, [r4, #8]
 8012bc2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012bc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012bca:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012bce:	7018      	strb	r0, [r3, #0]
 8012bd0:	68a3      	ldr	r3, [r4, #8]
 8012bd2:	705a      	strb	r2, [r3, #1]
 8012bd4:	68a3      	ldr	r3, [r4, #8]
 8012bd6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012bda:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012bde:	7099      	strb	r1, [r3, #2]
 8012be0:	68a3      	ldr	r3, [r4, #8]
 8012be2:	70da      	strb	r2, [r3, #3]
 8012be4:	68a3      	ldr	r3, [r4, #8]
 8012be6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012bea:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012bee:	7118      	strb	r0, [r3, #4]
 8012bf0:	68a3      	ldr	r3, [r4, #8]
 8012bf2:	715a      	strb	r2, [r3, #5]
 8012bf4:	68a3      	ldr	r3, [r4, #8]
 8012bf6:	f89d 2000 	ldrb.w	r2, [sp]
 8012bfa:	7199      	strb	r1, [r3, #6]
 8012bfc:	68a3      	ldr	r3, [r4, #8]
 8012bfe:	71da      	strb	r2, [r3, #7]
 8012c00:	2108      	movs	r1, #8
 8012c02:	68a2      	ldr	r2, [r4, #8]
 8012c04:	6923      	ldr	r3, [r4, #16]
 8012c06:	440a      	add	r2, r1
 8012c08:	7561      	strb	r1, [r4, #21]
 8012c0a:	440b      	add	r3, r1
 8012c0c:	60a2      	str	r2, [r4, #8]
 8012c0e:	6123      	str	r3, [r4, #16]
 8012c10:	7da0      	ldrb	r0, [r4, #22]
 8012c12:	f080 0001 	eor.w	r0, r0, #1
 8012c16:	b002      	add	sp, #8
 8012c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c1c:	466b      	mov	r3, sp
 8012c1e:	68a2      	ldr	r2, [r4, #8]
 8012c20:	cb03      	ldmia	r3!, {r0, r1}
 8012c22:	6010      	str	r0, [r2, #0]
 8012c24:	6051      	str	r1, [r2, #4]
 8012c26:	e7eb      	b.n	8012c00 <ucdr_serialize_int64_t+0x10c>
 8012c28:	68a2      	ldr	r2, [r4, #8]
 8012c2a:	6923      	ldr	r3, [r4, #16]
 8012c2c:	7da0      	ldrb	r0, [r4, #22]
 8012c2e:	1b92      	subs	r2, r2, r6
 8012c30:	1b9b      	subs	r3, r3, r6
 8012c32:	7567      	strb	r7, [r4, #21]
 8012c34:	f080 0001 	eor.w	r0, r0, #1
 8012c38:	60a2      	str	r2, [r4, #8]
 8012c3a:	6123      	str	r3, [r4, #16]
 8012c3c:	b002      	add	sp, #8
 8012c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c42:	68a3      	ldr	r3, [r4, #8]
 8012c44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c48:	701a      	strb	r2, [r3, #0]
 8012c4a:	68a3      	ldr	r3, [r4, #8]
 8012c4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012c50:	701a      	strb	r2, [r3, #0]
 8012c52:	68a3      	ldr	r3, [r4, #8]
 8012c54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012c58:	701a      	strb	r2, [r3, #0]
 8012c5a:	68a3      	ldr	r3, [r4, #8]
 8012c5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012c60:	701a      	strb	r2, [r3, #0]
 8012c62:	68a3      	ldr	r3, [r4, #8]
 8012c64:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012c68:	701a      	strb	r2, [r3, #0]
 8012c6a:	68a3      	ldr	r3, [r4, #8]
 8012c6c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012c70:	701a      	strb	r2, [r3, #0]
 8012c72:	68a3      	ldr	r3, [r4, #8]
 8012c74:	f89d 2000 	ldrb.w	r2, [sp]
 8012c78:	701a      	strb	r2, [r3, #0]
 8012c7a:	e78a      	b.n	8012b92 <ucdr_serialize_int64_t+0x9e>
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	466d      	mov	r5, sp
 8012c80:	4632      	mov	r2, r6
 8012c82:	4629      	mov	r1, r5
 8012c84:	f00e f8eb 	bl	8020e5e <memcpy>
 8012c88:	4642      	mov	r2, r8
 8012c8a:	19a9      	adds	r1, r5, r6
 8012c8c:	68a0      	ldr	r0, [r4, #8]
 8012c8e:	f00e f8e6 	bl	8020e5e <memcpy>
 8012c92:	e77e      	b.n	8012b92 <ucdr_serialize_int64_t+0x9e>

08012c94 <ucdr_deserialize_int64_t>:
 8012c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c98:	4604      	mov	r4, r0
 8012c9a:	460d      	mov	r5, r1
 8012c9c:	2108      	movs	r1, #8
 8012c9e:	f000 fab5 	bl	801320c <ucdr_buffer_alignment>
 8012ca2:	4601      	mov	r1, r0
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012caa:	f000 faf7 	bl	801329c <ucdr_advance_buffer>
 8012cae:	2108      	movs	r1, #8
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f000 fa4b 	bl	801314c <ucdr_check_buffer_available_for>
 8012cb6:	2800      	cmp	r0, #0
 8012cb8:	d151      	bne.n	8012d5e <ucdr_deserialize_int64_t+0xca>
 8012cba:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012cbe:	42be      	cmp	r6, r7
 8012cc0:	d948      	bls.n	8012d54 <ucdr_deserialize_int64_t+0xc0>
 8012cc2:	6923      	ldr	r3, [r4, #16]
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	60a6      	str	r6, [r4, #8]
 8012cc8:	1bf6      	subs	r6, r6, r7
 8012cca:	4433      	add	r3, r6
 8012ccc:	f1c6 0908 	rsb	r9, r6, #8
 8012cd0:	6123      	str	r3, [r4, #16]
 8012cd2:	4649      	mov	r1, r9
 8012cd4:	f000 fa46 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012cd8:	2800      	cmp	r0, #0
 8012cda:	d06d      	beq.n	8012db8 <ucdr_deserialize_int64_t+0x124>
 8012cdc:	7d23      	ldrb	r3, [r4, #20]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	f000 8093 	beq.w	8012e0a <ucdr_deserialize_int64_t+0x176>
 8012ce4:	79fb      	ldrb	r3, [r7, #7]
 8012ce6:	702b      	strb	r3, [r5, #0]
 8012ce8:	2e00      	cmp	r6, #0
 8012cea:	d072      	beq.n	8012dd2 <ucdr_deserialize_int64_t+0x13e>
 8012cec:	79bb      	ldrb	r3, [r7, #6]
 8012cee:	2e01      	cmp	r6, #1
 8012cf0:	706b      	strb	r3, [r5, #1]
 8012cf2:	f105 0302 	add.w	r3, r5, #2
 8012cf6:	d070      	beq.n	8012dda <ucdr_deserialize_int64_t+0x146>
 8012cf8:	797b      	ldrb	r3, [r7, #5]
 8012cfa:	2e02      	cmp	r6, #2
 8012cfc:	70ab      	strb	r3, [r5, #2]
 8012cfe:	f105 0303 	add.w	r3, r5, #3
 8012d02:	d06e      	beq.n	8012de2 <ucdr_deserialize_int64_t+0x14e>
 8012d04:	793b      	ldrb	r3, [r7, #4]
 8012d06:	2e03      	cmp	r6, #3
 8012d08:	70eb      	strb	r3, [r5, #3]
 8012d0a:	f105 0304 	add.w	r3, r5, #4
 8012d0e:	d06c      	beq.n	8012dea <ucdr_deserialize_int64_t+0x156>
 8012d10:	78fb      	ldrb	r3, [r7, #3]
 8012d12:	2e04      	cmp	r6, #4
 8012d14:	712b      	strb	r3, [r5, #4]
 8012d16:	f105 0305 	add.w	r3, r5, #5
 8012d1a:	d06a      	beq.n	8012df2 <ucdr_deserialize_int64_t+0x15e>
 8012d1c:	78bb      	ldrb	r3, [r7, #2]
 8012d1e:	2e05      	cmp	r6, #5
 8012d20:	716b      	strb	r3, [r5, #5]
 8012d22:	f105 0306 	add.w	r3, r5, #6
 8012d26:	d068      	beq.n	8012dfa <ucdr_deserialize_int64_t+0x166>
 8012d28:	787b      	ldrb	r3, [r7, #1]
 8012d2a:	2e06      	cmp	r6, #6
 8012d2c:	71ab      	strb	r3, [r5, #6]
 8012d2e:	f105 0307 	add.w	r3, r5, #7
 8012d32:	d066      	beq.n	8012e02 <ucdr_deserialize_int64_t+0x16e>
 8012d34:	783b      	ldrb	r3, [r7, #0]
 8012d36:	71eb      	strb	r3, [r5, #7]
 8012d38:	6923      	ldr	r3, [r4, #16]
 8012d3a:	2108      	movs	r1, #8
 8012d3c:	68a2      	ldr	r2, [r4, #8]
 8012d3e:	3308      	adds	r3, #8
 8012d40:	7da0      	ldrb	r0, [r4, #22]
 8012d42:	444a      	add	r2, r9
 8012d44:	7561      	strb	r1, [r4, #21]
 8012d46:	1b9e      	subs	r6, r3, r6
 8012d48:	f080 0001 	eor.w	r0, r0, #1
 8012d4c:	60a2      	str	r2, [r4, #8]
 8012d4e:	6126      	str	r6, [r4, #16]
 8012d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d54:	2108      	movs	r1, #8
 8012d56:	4620      	mov	r0, r4
 8012d58:	f000 fa04 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012d5c:	b310      	cbz	r0, 8012da4 <ucdr_deserialize_int64_t+0x110>
 8012d5e:	7d23      	ldrb	r3, [r4, #20]
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	68a3      	ldr	r3, [r4, #8]
 8012d64:	d023      	beq.n	8012dae <ucdr_deserialize_int64_t+0x11a>
 8012d66:	79db      	ldrb	r3, [r3, #7]
 8012d68:	702b      	strb	r3, [r5, #0]
 8012d6a:	68a3      	ldr	r3, [r4, #8]
 8012d6c:	799b      	ldrb	r3, [r3, #6]
 8012d6e:	706b      	strb	r3, [r5, #1]
 8012d70:	68a3      	ldr	r3, [r4, #8]
 8012d72:	795b      	ldrb	r3, [r3, #5]
 8012d74:	70ab      	strb	r3, [r5, #2]
 8012d76:	68a3      	ldr	r3, [r4, #8]
 8012d78:	791b      	ldrb	r3, [r3, #4]
 8012d7a:	70eb      	strb	r3, [r5, #3]
 8012d7c:	68a3      	ldr	r3, [r4, #8]
 8012d7e:	78db      	ldrb	r3, [r3, #3]
 8012d80:	712b      	strb	r3, [r5, #4]
 8012d82:	68a3      	ldr	r3, [r4, #8]
 8012d84:	789b      	ldrb	r3, [r3, #2]
 8012d86:	716b      	strb	r3, [r5, #5]
 8012d88:	68a3      	ldr	r3, [r4, #8]
 8012d8a:	785b      	ldrb	r3, [r3, #1]
 8012d8c:	71ab      	strb	r3, [r5, #6]
 8012d8e:	68a3      	ldr	r3, [r4, #8]
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	71eb      	strb	r3, [r5, #7]
 8012d94:	2108      	movs	r1, #8
 8012d96:	68a2      	ldr	r2, [r4, #8]
 8012d98:	6923      	ldr	r3, [r4, #16]
 8012d9a:	440a      	add	r2, r1
 8012d9c:	7561      	strb	r1, [r4, #21]
 8012d9e:	440b      	add	r3, r1
 8012da0:	60a2      	str	r2, [r4, #8]
 8012da2:	6123      	str	r3, [r4, #16]
 8012da4:	7da0      	ldrb	r0, [r4, #22]
 8012da6:	f080 0001 	eor.w	r0, r0, #1
 8012daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	602a      	str	r2, [r5, #0]
 8012db4:	606b      	str	r3, [r5, #4]
 8012db6:	e7ed      	b.n	8012d94 <ucdr_deserialize_int64_t+0x100>
 8012db8:	68a2      	ldr	r2, [r4, #8]
 8012dba:	6923      	ldr	r3, [r4, #16]
 8012dbc:	1b92      	subs	r2, r2, r6
 8012dbe:	7da0      	ldrb	r0, [r4, #22]
 8012dc0:	1b9b      	subs	r3, r3, r6
 8012dc2:	f884 8015 	strb.w	r8, [r4, #21]
 8012dc6:	f080 0001 	eor.w	r0, r0, #1
 8012dca:	60a2      	str	r2, [r4, #8]
 8012dcc:	6123      	str	r3, [r4, #16]
 8012dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dd2:	68a3      	ldr	r3, [r4, #8]
 8012dd4:	799b      	ldrb	r3, [r3, #6]
 8012dd6:	706b      	strb	r3, [r5, #1]
 8012dd8:	1cab      	adds	r3, r5, #2
 8012dda:	68a2      	ldr	r2, [r4, #8]
 8012ddc:	7952      	ldrb	r2, [r2, #5]
 8012dde:	f803 2b01 	strb.w	r2, [r3], #1
 8012de2:	68a2      	ldr	r2, [r4, #8]
 8012de4:	7912      	ldrb	r2, [r2, #4]
 8012de6:	f803 2b01 	strb.w	r2, [r3], #1
 8012dea:	68a2      	ldr	r2, [r4, #8]
 8012dec:	78d2      	ldrb	r2, [r2, #3]
 8012dee:	f803 2b01 	strb.w	r2, [r3], #1
 8012df2:	68a2      	ldr	r2, [r4, #8]
 8012df4:	7892      	ldrb	r2, [r2, #2]
 8012df6:	f803 2b01 	strb.w	r2, [r3], #1
 8012dfa:	68a2      	ldr	r2, [r4, #8]
 8012dfc:	7852      	ldrb	r2, [r2, #1]
 8012dfe:	f803 2b01 	strb.w	r2, [r3], #1
 8012e02:	68a2      	ldr	r2, [r4, #8]
 8012e04:	7812      	ldrb	r2, [r2, #0]
 8012e06:	701a      	strb	r2, [r3, #0]
 8012e08:	e796      	b.n	8012d38 <ucdr_deserialize_int64_t+0xa4>
 8012e0a:	4639      	mov	r1, r7
 8012e0c:	4632      	mov	r2, r6
 8012e0e:	4628      	mov	r0, r5
 8012e10:	f00e f825 	bl	8020e5e <memcpy>
 8012e14:	464a      	mov	r2, r9
 8012e16:	19a8      	adds	r0, r5, r6
 8012e18:	68a1      	ldr	r1, [r4, #8]
 8012e1a:	f00e f820 	bl	8020e5e <memcpy>
 8012e1e:	e78b      	b.n	8012d38 <ucdr_deserialize_int64_t+0xa4>

08012e20 <ucdr_serialize_double>:
 8012e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e24:	4604      	mov	r4, r0
 8012e26:	b082      	sub	sp, #8
 8012e28:	2108      	movs	r1, #8
 8012e2a:	ed8d 0b00 	vstr	d0, [sp]
 8012e2e:	f000 f9ed 	bl	801320c <ucdr_buffer_alignment>
 8012e32:	4601      	mov	r1, r0
 8012e34:	4620      	mov	r0, r4
 8012e36:	7d67      	ldrb	r7, [r4, #21]
 8012e38:	f000 fa30 	bl	801329c <ucdr_advance_buffer>
 8012e3c:	2108      	movs	r1, #8
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f000 f984 	bl	801314c <ucdr_check_buffer_available_for>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d14e      	bne.n	8012ee6 <ucdr_serialize_double+0xc6>
 8012e48:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012e4c:	42ab      	cmp	r3, r5
 8012e4e:	d945      	bls.n	8012edc <ucdr_serialize_double+0xbc>
 8012e50:	1b5e      	subs	r6, r3, r5
 8012e52:	60a3      	str	r3, [r4, #8]
 8012e54:	6923      	ldr	r3, [r4, #16]
 8012e56:	4620      	mov	r0, r4
 8012e58:	f1c6 0808 	rsb	r8, r6, #8
 8012e5c:	4433      	add	r3, r6
 8012e5e:	4641      	mov	r1, r8
 8012e60:	6123      	str	r3, [r4, #16]
 8012e62:	f000 f97f 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012e66:	2800      	cmp	r0, #0
 8012e68:	d074      	beq.n	8012f54 <ucdr_serialize_double+0x134>
 8012e6a:	7d23      	ldrb	r3, [r4, #20]
 8012e6c:	2b01      	cmp	r3, #1
 8012e6e:	f000 809b 	beq.w	8012fa8 <ucdr_serialize_double+0x188>
 8012e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012e76:	702b      	strb	r3, [r5, #0]
 8012e78:	2e00      	cmp	r6, #0
 8012e7a:	d078      	beq.n	8012f6e <ucdr_serialize_double+0x14e>
 8012e7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012e80:	2e01      	cmp	r6, #1
 8012e82:	706b      	strb	r3, [r5, #1]
 8012e84:	d077      	beq.n	8012f76 <ucdr_serialize_double+0x156>
 8012e86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012e8a:	2e02      	cmp	r6, #2
 8012e8c:	70ab      	strb	r3, [r5, #2]
 8012e8e:	d076      	beq.n	8012f7e <ucdr_serialize_double+0x15e>
 8012e90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012e94:	2e03      	cmp	r6, #3
 8012e96:	70eb      	strb	r3, [r5, #3]
 8012e98:	d075      	beq.n	8012f86 <ucdr_serialize_double+0x166>
 8012e9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012e9e:	2e04      	cmp	r6, #4
 8012ea0:	712b      	strb	r3, [r5, #4]
 8012ea2:	d074      	beq.n	8012f8e <ucdr_serialize_double+0x16e>
 8012ea4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012ea8:	2e05      	cmp	r6, #5
 8012eaa:	716b      	strb	r3, [r5, #5]
 8012eac:	d073      	beq.n	8012f96 <ucdr_serialize_double+0x176>
 8012eae:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012eb2:	2e06      	cmp	r6, #6
 8012eb4:	71ab      	strb	r3, [r5, #6]
 8012eb6:	d072      	beq.n	8012f9e <ucdr_serialize_double+0x17e>
 8012eb8:	f89d 3000 	ldrb.w	r3, [sp]
 8012ebc:	71eb      	strb	r3, [r5, #7]
 8012ebe:	6923      	ldr	r3, [r4, #16]
 8012ec0:	2108      	movs	r1, #8
 8012ec2:	68a2      	ldr	r2, [r4, #8]
 8012ec4:	3308      	adds	r3, #8
 8012ec6:	7da0      	ldrb	r0, [r4, #22]
 8012ec8:	4442      	add	r2, r8
 8012eca:	7561      	strb	r1, [r4, #21]
 8012ecc:	1b9e      	subs	r6, r3, r6
 8012ece:	f080 0001 	eor.w	r0, r0, #1
 8012ed2:	60a2      	str	r2, [r4, #8]
 8012ed4:	6126      	str	r6, [r4, #16]
 8012ed6:	b002      	add	sp, #8
 8012ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012edc:	2108      	movs	r1, #8
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f000 f940 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8012ee4:	b350      	cbz	r0, 8012f3c <ucdr_serialize_double+0x11c>
 8012ee6:	7d23      	ldrb	r3, [r4, #20]
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d02d      	beq.n	8012f48 <ucdr_serialize_double+0x128>
 8012eec:	68a3      	ldr	r3, [r4, #8]
 8012eee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012ef2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ef6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012efa:	7018      	strb	r0, [r3, #0]
 8012efc:	68a3      	ldr	r3, [r4, #8]
 8012efe:	705a      	strb	r2, [r3, #1]
 8012f00:	68a3      	ldr	r3, [r4, #8]
 8012f02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f06:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012f0a:	7099      	strb	r1, [r3, #2]
 8012f0c:	68a3      	ldr	r3, [r4, #8]
 8012f0e:	70da      	strb	r2, [r3, #3]
 8012f10:	68a3      	ldr	r3, [r4, #8]
 8012f12:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012f16:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012f1a:	7118      	strb	r0, [r3, #4]
 8012f1c:	68a3      	ldr	r3, [r4, #8]
 8012f1e:	715a      	strb	r2, [r3, #5]
 8012f20:	68a3      	ldr	r3, [r4, #8]
 8012f22:	f89d 2000 	ldrb.w	r2, [sp]
 8012f26:	7199      	strb	r1, [r3, #6]
 8012f28:	68a3      	ldr	r3, [r4, #8]
 8012f2a:	71da      	strb	r2, [r3, #7]
 8012f2c:	2108      	movs	r1, #8
 8012f2e:	68a2      	ldr	r2, [r4, #8]
 8012f30:	6923      	ldr	r3, [r4, #16]
 8012f32:	440a      	add	r2, r1
 8012f34:	7561      	strb	r1, [r4, #21]
 8012f36:	440b      	add	r3, r1
 8012f38:	60a2      	str	r2, [r4, #8]
 8012f3a:	6123      	str	r3, [r4, #16]
 8012f3c:	7da0      	ldrb	r0, [r4, #22]
 8012f3e:	f080 0001 	eor.w	r0, r0, #1
 8012f42:	b002      	add	sp, #8
 8012f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f48:	466b      	mov	r3, sp
 8012f4a:	68a2      	ldr	r2, [r4, #8]
 8012f4c:	cb03      	ldmia	r3!, {r0, r1}
 8012f4e:	6010      	str	r0, [r2, #0]
 8012f50:	6051      	str	r1, [r2, #4]
 8012f52:	e7eb      	b.n	8012f2c <ucdr_serialize_double+0x10c>
 8012f54:	68a2      	ldr	r2, [r4, #8]
 8012f56:	6923      	ldr	r3, [r4, #16]
 8012f58:	7da0      	ldrb	r0, [r4, #22]
 8012f5a:	1b92      	subs	r2, r2, r6
 8012f5c:	1b9b      	subs	r3, r3, r6
 8012f5e:	7567      	strb	r7, [r4, #21]
 8012f60:	f080 0001 	eor.w	r0, r0, #1
 8012f64:	60a2      	str	r2, [r4, #8]
 8012f66:	6123      	str	r3, [r4, #16]
 8012f68:	b002      	add	sp, #8
 8012f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f6e:	68a3      	ldr	r3, [r4, #8]
 8012f70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f74:	701a      	strb	r2, [r3, #0]
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012f7c:	701a      	strb	r2, [r3, #0]
 8012f7e:	68a3      	ldr	r3, [r4, #8]
 8012f80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f84:	701a      	strb	r2, [r3, #0]
 8012f86:	68a3      	ldr	r3, [r4, #8]
 8012f88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012f8c:	701a      	strb	r2, [r3, #0]
 8012f8e:	68a3      	ldr	r3, [r4, #8]
 8012f90:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012f94:	701a      	strb	r2, [r3, #0]
 8012f96:	68a3      	ldr	r3, [r4, #8]
 8012f98:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012f9c:	701a      	strb	r2, [r3, #0]
 8012f9e:	68a3      	ldr	r3, [r4, #8]
 8012fa0:	f89d 2000 	ldrb.w	r2, [sp]
 8012fa4:	701a      	strb	r2, [r3, #0]
 8012fa6:	e78a      	b.n	8012ebe <ucdr_serialize_double+0x9e>
 8012fa8:	4628      	mov	r0, r5
 8012faa:	466d      	mov	r5, sp
 8012fac:	4632      	mov	r2, r6
 8012fae:	4629      	mov	r1, r5
 8012fb0:	f00d ff55 	bl	8020e5e <memcpy>
 8012fb4:	4642      	mov	r2, r8
 8012fb6:	19a9      	adds	r1, r5, r6
 8012fb8:	68a0      	ldr	r0, [r4, #8]
 8012fba:	f00d ff50 	bl	8020e5e <memcpy>
 8012fbe:	e77e      	b.n	8012ebe <ucdr_serialize_double+0x9e>

08012fc0 <ucdr_deserialize_double>:
 8012fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	460d      	mov	r5, r1
 8012fc8:	2108      	movs	r1, #8
 8012fca:	f000 f91f 	bl	801320c <ucdr_buffer_alignment>
 8012fce:	4601      	mov	r1, r0
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012fd6:	f000 f961 	bl	801329c <ucdr_advance_buffer>
 8012fda:	2108      	movs	r1, #8
 8012fdc:	4620      	mov	r0, r4
 8012fde:	f000 f8b5 	bl	801314c <ucdr_check_buffer_available_for>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d151      	bne.n	801308a <ucdr_deserialize_double+0xca>
 8012fe6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012fea:	42be      	cmp	r6, r7
 8012fec:	d948      	bls.n	8013080 <ucdr_deserialize_double+0xc0>
 8012fee:	6923      	ldr	r3, [r4, #16]
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	60a6      	str	r6, [r4, #8]
 8012ff4:	1bf6      	subs	r6, r6, r7
 8012ff6:	4433      	add	r3, r6
 8012ff8:	f1c6 0908 	rsb	r9, r6, #8
 8012ffc:	6123      	str	r3, [r4, #16]
 8012ffe:	4649      	mov	r1, r9
 8013000:	f000 f8b0 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8013004:	2800      	cmp	r0, #0
 8013006:	d06d      	beq.n	80130e4 <ucdr_deserialize_double+0x124>
 8013008:	7d23      	ldrb	r3, [r4, #20]
 801300a:	2b01      	cmp	r3, #1
 801300c:	f000 8093 	beq.w	8013136 <ucdr_deserialize_double+0x176>
 8013010:	79fb      	ldrb	r3, [r7, #7]
 8013012:	702b      	strb	r3, [r5, #0]
 8013014:	2e00      	cmp	r6, #0
 8013016:	d072      	beq.n	80130fe <ucdr_deserialize_double+0x13e>
 8013018:	79bb      	ldrb	r3, [r7, #6]
 801301a:	2e01      	cmp	r6, #1
 801301c:	706b      	strb	r3, [r5, #1]
 801301e:	f105 0302 	add.w	r3, r5, #2
 8013022:	d070      	beq.n	8013106 <ucdr_deserialize_double+0x146>
 8013024:	797b      	ldrb	r3, [r7, #5]
 8013026:	2e02      	cmp	r6, #2
 8013028:	70ab      	strb	r3, [r5, #2]
 801302a:	f105 0303 	add.w	r3, r5, #3
 801302e:	d06e      	beq.n	801310e <ucdr_deserialize_double+0x14e>
 8013030:	793b      	ldrb	r3, [r7, #4]
 8013032:	2e03      	cmp	r6, #3
 8013034:	70eb      	strb	r3, [r5, #3]
 8013036:	f105 0304 	add.w	r3, r5, #4
 801303a:	d06c      	beq.n	8013116 <ucdr_deserialize_double+0x156>
 801303c:	78fb      	ldrb	r3, [r7, #3]
 801303e:	2e04      	cmp	r6, #4
 8013040:	712b      	strb	r3, [r5, #4]
 8013042:	f105 0305 	add.w	r3, r5, #5
 8013046:	d06a      	beq.n	801311e <ucdr_deserialize_double+0x15e>
 8013048:	78bb      	ldrb	r3, [r7, #2]
 801304a:	2e05      	cmp	r6, #5
 801304c:	716b      	strb	r3, [r5, #5]
 801304e:	f105 0306 	add.w	r3, r5, #6
 8013052:	d068      	beq.n	8013126 <ucdr_deserialize_double+0x166>
 8013054:	787b      	ldrb	r3, [r7, #1]
 8013056:	2e06      	cmp	r6, #6
 8013058:	71ab      	strb	r3, [r5, #6]
 801305a:	f105 0307 	add.w	r3, r5, #7
 801305e:	d066      	beq.n	801312e <ucdr_deserialize_double+0x16e>
 8013060:	783b      	ldrb	r3, [r7, #0]
 8013062:	71eb      	strb	r3, [r5, #7]
 8013064:	6923      	ldr	r3, [r4, #16]
 8013066:	2108      	movs	r1, #8
 8013068:	68a2      	ldr	r2, [r4, #8]
 801306a:	3308      	adds	r3, #8
 801306c:	7da0      	ldrb	r0, [r4, #22]
 801306e:	444a      	add	r2, r9
 8013070:	7561      	strb	r1, [r4, #21]
 8013072:	1b9e      	subs	r6, r3, r6
 8013074:	f080 0001 	eor.w	r0, r0, #1
 8013078:	60a2      	str	r2, [r4, #8]
 801307a:	6126      	str	r6, [r4, #16]
 801307c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013080:	2108      	movs	r1, #8
 8013082:	4620      	mov	r0, r4
 8013084:	f000 f86e 	bl	8013164 <ucdr_check_final_buffer_behavior>
 8013088:	b310      	cbz	r0, 80130d0 <ucdr_deserialize_double+0x110>
 801308a:	7d23      	ldrb	r3, [r4, #20]
 801308c:	2b01      	cmp	r3, #1
 801308e:	68a3      	ldr	r3, [r4, #8]
 8013090:	d023      	beq.n	80130da <ucdr_deserialize_double+0x11a>
 8013092:	79db      	ldrb	r3, [r3, #7]
 8013094:	702b      	strb	r3, [r5, #0]
 8013096:	68a3      	ldr	r3, [r4, #8]
 8013098:	799b      	ldrb	r3, [r3, #6]
 801309a:	706b      	strb	r3, [r5, #1]
 801309c:	68a3      	ldr	r3, [r4, #8]
 801309e:	795b      	ldrb	r3, [r3, #5]
 80130a0:	70ab      	strb	r3, [r5, #2]
 80130a2:	68a3      	ldr	r3, [r4, #8]
 80130a4:	791b      	ldrb	r3, [r3, #4]
 80130a6:	70eb      	strb	r3, [r5, #3]
 80130a8:	68a3      	ldr	r3, [r4, #8]
 80130aa:	78db      	ldrb	r3, [r3, #3]
 80130ac:	712b      	strb	r3, [r5, #4]
 80130ae:	68a3      	ldr	r3, [r4, #8]
 80130b0:	789b      	ldrb	r3, [r3, #2]
 80130b2:	716b      	strb	r3, [r5, #5]
 80130b4:	68a3      	ldr	r3, [r4, #8]
 80130b6:	785b      	ldrb	r3, [r3, #1]
 80130b8:	71ab      	strb	r3, [r5, #6]
 80130ba:	68a3      	ldr	r3, [r4, #8]
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	71eb      	strb	r3, [r5, #7]
 80130c0:	2108      	movs	r1, #8
 80130c2:	68a2      	ldr	r2, [r4, #8]
 80130c4:	6923      	ldr	r3, [r4, #16]
 80130c6:	440a      	add	r2, r1
 80130c8:	7561      	strb	r1, [r4, #21]
 80130ca:	440b      	add	r3, r1
 80130cc:	60a2      	str	r2, [r4, #8]
 80130ce:	6123      	str	r3, [r4, #16]
 80130d0:	7da0      	ldrb	r0, [r4, #22]
 80130d2:	f080 0001 	eor.w	r0, r0, #1
 80130d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130da:	681a      	ldr	r2, [r3, #0]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	602a      	str	r2, [r5, #0]
 80130e0:	606b      	str	r3, [r5, #4]
 80130e2:	e7ed      	b.n	80130c0 <ucdr_deserialize_double+0x100>
 80130e4:	68a2      	ldr	r2, [r4, #8]
 80130e6:	6923      	ldr	r3, [r4, #16]
 80130e8:	1b92      	subs	r2, r2, r6
 80130ea:	7da0      	ldrb	r0, [r4, #22]
 80130ec:	1b9b      	subs	r3, r3, r6
 80130ee:	f884 8015 	strb.w	r8, [r4, #21]
 80130f2:	f080 0001 	eor.w	r0, r0, #1
 80130f6:	60a2      	str	r2, [r4, #8]
 80130f8:	6123      	str	r3, [r4, #16]
 80130fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130fe:	68a3      	ldr	r3, [r4, #8]
 8013100:	799b      	ldrb	r3, [r3, #6]
 8013102:	706b      	strb	r3, [r5, #1]
 8013104:	1cab      	adds	r3, r5, #2
 8013106:	68a2      	ldr	r2, [r4, #8]
 8013108:	7952      	ldrb	r2, [r2, #5]
 801310a:	f803 2b01 	strb.w	r2, [r3], #1
 801310e:	68a2      	ldr	r2, [r4, #8]
 8013110:	7912      	ldrb	r2, [r2, #4]
 8013112:	f803 2b01 	strb.w	r2, [r3], #1
 8013116:	68a2      	ldr	r2, [r4, #8]
 8013118:	78d2      	ldrb	r2, [r2, #3]
 801311a:	f803 2b01 	strb.w	r2, [r3], #1
 801311e:	68a2      	ldr	r2, [r4, #8]
 8013120:	7892      	ldrb	r2, [r2, #2]
 8013122:	f803 2b01 	strb.w	r2, [r3], #1
 8013126:	68a2      	ldr	r2, [r4, #8]
 8013128:	7852      	ldrb	r2, [r2, #1]
 801312a:	f803 2b01 	strb.w	r2, [r3], #1
 801312e:	68a2      	ldr	r2, [r4, #8]
 8013130:	7812      	ldrb	r2, [r2, #0]
 8013132:	701a      	strb	r2, [r3, #0]
 8013134:	e796      	b.n	8013064 <ucdr_deserialize_double+0xa4>
 8013136:	4639      	mov	r1, r7
 8013138:	4632      	mov	r2, r6
 801313a:	4628      	mov	r0, r5
 801313c:	f00d fe8f 	bl	8020e5e <memcpy>
 8013140:	464a      	mov	r2, r9
 8013142:	19a8      	adds	r0, r5, r6
 8013144:	68a1      	ldr	r1, [r4, #8]
 8013146:	f00d fe8a 	bl	8020e5e <memcpy>
 801314a:	e78b      	b.n	8013064 <ucdr_deserialize_double+0xa4>

0801314c <ucdr_check_buffer_available_for>:
 801314c:	7d83      	ldrb	r3, [r0, #22]
 801314e:	b93b      	cbnz	r3, 8013160 <ucdr_check_buffer_available_for+0x14>
 8013150:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013154:	4419      	add	r1, r3
 8013156:	4288      	cmp	r0, r1
 8013158:	bf34      	ite	cc
 801315a:	2000      	movcc	r0, #0
 801315c:	2001      	movcs	r0, #1
 801315e:	4770      	bx	lr
 8013160:	2000      	movs	r0, #0
 8013162:	4770      	bx	lr

08013164 <ucdr_check_final_buffer_behavior>:
 8013164:	7d83      	ldrb	r3, [r0, #22]
 8013166:	b943      	cbnz	r3, 801317a <ucdr_check_final_buffer_behavior+0x16>
 8013168:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801316c:	b510      	push	{r4, lr}
 801316e:	4291      	cmp	r1, r2
 8013170:	4604      	mov	r4, r0
 8013172:	d205      	bcs.n	8013180 <ucdr_check_final_buffer_behavior+0x1c>
 8013174:	2301      	movs	r3, #1
 8013176:	4618      	mov	r0, r3
 8013178:	bd10      	pop	{r4, pc}
 801317a:	2300      	movs	r3, #0
 801317c:	4618      	mov	r0, r3
 801317e:	4770      	bx	lr
 8013180:	6982      	ldr	r2, [r0, #24]
 8013182:	b13a      	cbz	r2, 8013194 <ucdr_check_final_buffer_behavior+0x30>
 8013184:	69c1      	ldr	r1, [r0, #28]
 8013186:	4790      	blx	r2
 8013188:	f080 0301 	eor.w	r3, r0, #1
 801318c:	75a0      	strb	r0, [r4, #22]
 801318e:	b2db      	uxtb	r3, r3
 8013190:	4618      	mov	r0, r3
 8013192:	bd10      	pop	{r4, pc}
 8013194:	2001      	movs	r0, #1
 8013196:	75a0      	strb	r0, [r4, #22]
 8013198:	e7fa      	b.n	8013190 <ucdr_check_final_buffer_behavior+0x2c>
 801319a:	bf00      	nop

0801319c <ucdr_set_on_full_buffer_callback>:
 801319c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80131a0:	4770      	bx	lr
 80131a2:	bf00      	nop

080131a4 <ucdr_init_buffer_origin_offset_endian>:
 80131a4:	b410      	push	{r4}
 80131a6:	9c01      	ldr	r4, [sp, #4]
 80131a8:	440a      	add	r2, r1
 80131aa:	6001      	str	r1, [r0, #0]
 80131ac:	6042      	str	r2, [r0, #4]
 80131ae:	190a      	adds	r2, r1, r4
 80131b0:	441c      	add	r4, r3
 80131b2:	6082      	str	r2, [r0, #8]
 80131b4:	2200      	movs	r2, #0
 80131b6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80131ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80131be:	7542      	strb	r2, [r0, #21]
 80131c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131c4:	7582      	strb	r2, [r0, #22]
 80131c6:	7503      	strb	r3, [r0, #20]
 80131c8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop

080131d0 <ucdr_init_buffer_origin_offset>:
 80131d0:	b510      	push	{r4, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	9c04      	ldr	r4, [sp, #16]
 80131d6:	9400      	str	r4, [sp, #0]
 80131d8:	2401      	movs	r4, #1
 80131da:	9401      	str	r4, [sp, #4]
 80131dc:	f7ff ffe2 	bl	80131a4 <ucdr_init_buffer_origin_offset_endian>
 80131e0:	b002      	add	sp, #8
 80131e2:	bd10      	pop	{r4, pc}

080131e4 <ucdr_init_buffer_origin>:
 80131e4:	b510      	push	{r4, lr}
 80131e6:	2400      	movs	r4, #0
 80131e8:	b082      	sub	sp, #8
 80131ea:	9400      	str	r4, [sp, #0]
 80131ec:	f7ff fff0 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 80131f0:	b002      	add	sp, #8
 80131f2:	bd10      	pop	{r4, pc}

080131f4 <ucdr_init_buffer>:
 80131f4:	2300      	movs	r3, #0
 80131f6:	f7ff bff5 	b.w	80131e4 <ucdr_init_buffer_origin>
 80131fa:	bf00      	nop

080131fc <ucdr_alignment>:
 80131fc:	fbb0 f2f1 	udiv	r2, r0, r1
 8013200:	fb02 0011 	mls	r0, r2, r1, r0
 8013204:	1e4b      	subs	r3, r1, #1
 8013206:	1a08      	subs	r0, r1, r0
 8013208:	4018      	ands	r0, r3
 801320a:	4770      	bx	lr

0801320c <ucdr_buffer_alignment>:
 801320c:	7d43      	ldrb	r3, [r0, #21]
 801320e:	428b      	cmp	r3, r1
 8013210:	d209      	bcs.n	8013226 <ucdr_buffer_alignment+0x1a>
 8013212:	6903      	ldr	r3, [r0, #16]
 8013214:	1e4a      	subs	r2, r1, #1
 8013216:	fbb3 f0f1 	udiv	r0, r3, r1
 801321a:	fb01 3010 	mls	r0, r1, r0, r3
 801321e:	1a09      	subs	r1, r1, r0
 8013220:	ea01 0002 	and.w	r0, r1, r2
 8013224:	4770      	bx	lr
 8013226:	2000      	movs	r0, #0
 8013228:	4770      	bx	lr
 801322a:	bf00      	nop

0801322c <ucdr_align_to>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	4604      	mov	r4, r0
 8013230:	460d      	mov	r5, r1
 8013232:	f7ff ffeb 	bl	801320c <ucdr_buffer_alignment>
 8013236:	68a3      	ldr	r3, [r4, #8]
 8013238:	7565      	strb	r5, [r4, #21]
 801323a:	181a      	adds	r2, r3, r0
 801323c:	6923      	ldr	r3, [r4, #16]
 801323e:	4418      	add	r0, r3
 8013240:	6863      	ldr	r3, [r4, #4]
 8013242:	4293      	cmp	r3, r2
 8013244:	6120      	str	r0, [r4, #16]
 8013246:	bf28      	it	cs
 8013248:	4613      	movcs	r3, r2
 801324a:	60a3      	str	r3, [r4, #8]
 801324c:	bd38      	pop	{r3, r4, r5, pc}
 801324e:	bf00      	nop

08013250 <ucdr_buffer_length>:
 8013250:	6882      	ldr	r2, [r0, #8]
 8013252:	6800      	ldr	r0, [r0, #0]
 8013254:	1a10      	subs	r0, r2, r0
 8013256:	4770      	bx	lr

08013258 <ucdr_buffer_remaining>:
 8013258:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801325c:	1a10      	subs	r0, r2, r0
 801325e:	4770      	bx	lr

08013260 <ucdr_check_final_buffer_behavior_array>:
 8013260:	b538      	push	{r3, r4, r5, lr}
 8013262:	7d83      	ldrb	r3, [r0, #22]
 8013264:	b9a3      	cbnz	r3, 8013290 <ucdr_check_final_buffer_behavior_array+0x30>
 8013266:	4604      	mov	r4, r0
 8013268:	460d      	mov	r5, r1
 801326a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801326e:	429a      	cmp	r2, r3
 8013270:	d300      	bcc.n	8013274 <ucdr_check_final_buffer_behavior_array+0x14>
 8013272:	b931      	cbnz	r1, 8013282 <ucdr_check_final_buffer_behavior_array+0x22>
 8013274:	4620      	mov	r0, r4
 8013276:	f7ff ffef 	bl	8013258 <ucdr_buffer_remaining>
 801327a:	42a8      	cmp	r0, r5
 801327c:	bf28      	it	cs
 801327e:	4628      	movcs	r0, r5
 8013280:	bd38      	pop	{r3, r4, r5, pc}
 8013282:	6983      	ldr	r3, [r0, #24]
 8013284:	b133      	cbz	r3, 8013294 <ucdr_check_final_buffer_behavior_array+0x34>
 8013286:	69c1      	ldr	r1, [r0, #28]
 8013288:	4798      	blx	r3
 801328a:	75a0      	strb	r0, [r4, #22]
 801328c:	2800      	cmp	r0, #0
 801328e:	d0f1      	beq.n	8013274 <ucdr_check_final_buffer_behavior_array+0x14>
 8013290:	2000      	movs	r0, #0
 8013292:	bd38      	pop	{r3, r4, r5, pc}
 8013294:	2301      	movs	r3, #1
 8013296:	7583      	strb	r3, [r0, #22]
 8013298:	e7fa      	b.n	8013290 <ucdr_check_final_buffer_behavior_array+0x30>
 801329a:	bf00      	nop

0801329c <ucdr_advance_buffer>:
 801329c:	b538      	push	{r3, r4, r5, lr}
 801329e:	4604      	mov	r4, r0
 80132a0:	460d      	mov	r5, r1
 80132a2:	f7ff ff53 	bl	801314c <ucdr_check_buffer_available_for>
 80132a6:	b178      	cbz	r0, 80132c8 <ucdr_advance_buffer+0x2c>
 80132a8:	6923      	ldr	r3, [r4, #16]
 80132aa:	68a2      	ldr	r2, [r4, #8]
 80132ac:	442b      	add	r3, r5
 80132ae:	442a      	add	r2, r5
 80132b0:	6123      	str	r3, [r4, #16]
 80132b2:	2301      	movs	r3, #1
 80132b4:	60a2      	str	r2, [r4, #8]
 80132b6:	7563      	strb	r3, [r4, #21]
 80132b8:	bd38      	pop	{r3, r4, r5, pc}
 80132ba:	68a2      	ldr	r2, [r4, #8]
 80132bc:	1a2d      	subs	r5, r5, r0
 80132be:	6923      	ldr	r3, [r4, #16]
 80132c0:	4402      	add	r2, r0
 80132c2:	4418      	add	r0, r3
 80132c4:	60a2      	str	r2, [r4, #8]
 80132c6:	6120      	str	r0, [r4, #16]
 80132c8:	4629      	mov	r1, r5
 80132ca:	2201      	movs	r2, #1
 80132cc:	4620      	mov	r0, r4
 80132ce:	f7ff ffc7 	bl	8013260 <ucdr_check_final_buffer_behavior_array>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	d1f1      	bne.n	80132ba <ucdr_advance_buffer+0x1e>
 80132d6:	2301      	movs	r3, #1
 80132d8:	7563      	strb	r3, [r4, #21]
 80132da:	bd38      	pop	{r3, r4, r5, pc}

080132dc <ucdr_serialize_sequence_char>:
 80132dc:	b570      	push	{r4, r5, r6, lr}
 80132de:	4615      	mov	r5, r2
 80132e0:	460e      	mov	r6, r1
 80132e2:	7d01      	ldrb	r1, [r0, #20]
 80132e4:	4604      	mov	r4, r0
 80132e6:	f7fe ff5b 	bl	80121a0 <ucdr_serialize_endian_uint32_t>
 80132ea:	b90d      	cbnz	r5, 80132f0 <ucdr_serialize_sequence_char+0x14>
 80132ec:	2001      	movs	r0, #1
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	462b      	mov	r3, r5
 80132f2:	4632      	mov	r2, r6
 80132f4:	7d21      	ldrb	r1, [r4, #20]
 80132f6:	4620      	mov	r0, r4
 80132f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132fc:	f004 b904 	b.w	8017508 <ucdr_serialize_endian_array_char>

08013300 <ucdr_deserialize_sequence_char>:
 8013300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013304:	461d      	mov	r5, r3
 8013306:	4616      	mov	r6, r2
 8013308:	460f      	mov	r7, r1
 801330a:	461a      	mov	r2, r3
 801330c:	7d01      	ldrb	r1, [r0, #20]
 801330e:	4604      	mov	r4, r0
 8013310:	f7ff f86e 	bl	80123f0 <ucdr_deserialize_endian_uint32_t>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	429e      	cmp	r6, r3
 8013318:	d201      	bcs.n	801331e <ucdr_deserialize_sequence_char+0x1e>
 801331a:	2201      	movs	r2, #1
 801331c:	75a2      	strb	r2, [r4, #22]
 801331e:	b913      	cbnz	r3, 8013326 <ucdr_deserialize_sequence_char+0x26>
 8013320:	2001      	movs	r0, #1
 8013322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013326:	463a      	mov	r2, r7
 8013328:	7d21      	ldrb	r1, [r4, #20]
 801332a:	4620      	mov	r0, r4
 801332c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013330:	f004 b91c 	b.w	801756c <ucdr_deserialize_endian_array_char>

08013334 <ucdr_serialize_sequence_uint8_t>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	4615      	mov	r5, r2
 8013338:	460e      	mov	r6, r1
 801333a:	7d01      	ldrb	r1, [r0, #20]
 801333c:	4604      	mov	r4, r0
 801333e:	f7fe ff2f 	bl	80121a0 <ucdr_serialize_endian_uint32_t>
 8013342:	b90d      	cbnz	r5, 8013348 <ucdr_serialize_sequence_uint8_t+0x14>
 8013344:	2001      	movs	r0, #1
 8013346:	bd70      	pop	{r4, r5, r6, pc}
 8013348:	462b      	mov	r3, r5
 801334a:	4632      	mov	r2, r6
 801334c:	7d21      	ldrb	r1, [r4, #20]
 801334e:	4620      	mov	r0, r4
 8013350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013354:	f004 b970 	b.w	8017638 <ucdr_serialize_endian_array_uint8_t>

08013358 <ucdr_deserialize_sequence_uint8_t>:
 8013358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801335c:	461d      	mov	r5, r3
 801335e:	4616      	mov	r6, r2
 8013360:	460f      	mov	r7, r1
 8013362:	461a      	mov	r2, r3
 8013364:	7d01      	ldrb	r1, [r0, #20]
 8013366:	4604      	mov	r4, r0
 8013368:	f7ff f842 	bl	80123f0 <ucdr_deserialize_endian_uint32_t>
 801336c:	682b      	ldr	r3, [r5, #0]
 801336e:	429e      	cmp	r6, r3
 8013370:	d201      	bcs.n	8013376 <ucdr_deserialize_sequence_uint8_t+0x1e>
 8013372:	2201      	movs	r2, #1
 8013374:	75a2      	strb	r2, [r4, #22]
 8013376:	b913      	cbnz	r3, 801337e <ucdr_deserialize_sequence_uint8_t+0x26>
 8013378:	2001      	movs	r0, #1
 801337a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801337e:	463a      	mov	r2, r7
 8013380:	7d21      	ldrb	r1, [r4, #20]
 8013382:	4620      	mov	r0, r4
 8013384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013388:	f004 b9bc 	b.w	8017704 <ucdr_deserialize_endian_array_uint8_t>

0801338c <rcl_get_zero_initialized_init_options>:
 801338c:	2000      	movs	r0, #0
 801338e:	4770      	bx	lr

08013390 <rcl_init_options_init>:
 8013390:	b084      	sub	sp, #16
 8013392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013394:	b097      	sub	sp, #92	; 0x5c
 8013396:	ae1d      	add	r6, sp, #116	; 0x74
 8013398:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801339c:	2800      	cmp	r0, #0
 801339e:	d058      	beq.n	8013452 <rcl_init_options_init+0xc2>
 80133a0:	6803      	ldr	r3, [r0, #0]
 80133a2:	4605      	mov	r5, r0
 80133a4:	b133      	cbz	r3, 80133b4 <rcl_init_options_init+0x24>
 80133a6:	2464      	movs	r4, #100	; 0x64
 80133a8:	4620      	mov	r0, r4
 80133aa:	b017      	add	sp, #92	; 0x5c
 80133ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80133b0:	b004      	add	sp, #16
 80133b2:	4770      	bx	lr
 80133b4:	4630      	mov	r0, r6
 80133b6:	f001 fdf5 	bl	8014fa4 <rcutils_allocator_is_valid>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d049      	beq.n	8013452 <rcl_init_options_init+0xc2>
 80133be:	46b4      	mov	ip, r6
 80133c0:	ac11      	add	r4, sp, #68	; 0x44
 80133c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133c8:	f8dc 3000 	ldr.w	r3, [ip]
 80133cc:	2050      	movs	r0, #80	; 0x50
 80133ce:	9921      	ldr	r1, [sp, #132]	; 0x84
 80133d0:	6023      	str	r3, [r4, #0]
 80133d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80133d4:	4798      	blx	r3
 80133d6:	4604      	mov	r4, r0
 80133d8:	6028      	str	r0, [r5, #0]
 80133da:	2800      	cmp	r0, #0
 80133dc:	d03b      	beq.n	8013456 <rcl_init_options_init+0xc6>
 80133de:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80133e2:	4686      	mov	lr, r0
 80133e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80133ec:	f8dc 3000 	ldr.w	r3, [ip]
 80133f0:	a802      	add	r0, sp, #8
 80133f2:	f8ce 3000 	str.w	r3, [lr]
 80133f6:	f001 fff3 	bl	80153e0 <rmw_get_zero_initialized_init_options>
 80133fa:	f10d 0e08 	add.w	lr, sp, #8
 80133fe:	f104 0c18 	add.w	ip, r4, #24
 8013402:	682f      	ldr	r7, [r5, #0]
 8013404:	ac20      	add	r4, sp, #128	; 0x80
 8013406:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801340a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801340e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013412:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013416:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801341a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801341e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013422:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013426:	e894 0003 	ldmia.w	r4, {r0, r1}
 801342a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801342e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013432:	f107 0018 	add.w	r0, r7, #24
 8013436:	f002 f8fb 	bl	8015630 <rmw_init_options_init>
 801343a:	4604      	mov	r4, r0
 801343c:	2800      	cmp	r0, #0
 801343e:	d0b3      	beq.n	80133a8 <rcl_init_options_init+0x18>
 8013440:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013442:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013444:	6828      	ldr	r0, [r5, #0]
 8013446:	4798      	blx	r3
 8013448:	4620      	mov	r0, r4
 801344a:	f007 ff8b 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 801344e:	4604      	mov	r4, r0
 8013450:	e7aa      	b.n	80133a8 <rcl_init_options_init+0x18>
 8013452:	240b      	movs	r4, #11
 8013454:	e7a8      	b.n	80133a8 <rcl_init_options_init+0x18>
 8013456:	240a      	movs	r4, #10
 8013458:	e7a6      	b.n	80133a8 <rcl_init_options_init+0x18>
 801345a:	bf00      	nop

0801345c <rcl_init_options_fini>:
 801345c:	b530      	push	{r4, r5, lr}
 801345e:	b087      	sub	sp, #28
 8013460:	b1f0      	cbz	r0, 80134a0 <rcl_init_options_fini+0x44>
 8013462:	6803      	ldr	r3, [r0, #0]
 8013464:	4604      	mov	r4, r0
 8013466:	b1db      	cbz	r3, 80134a0 <rcl_init_options_fini+0x44>
 8013468:	469c      	mov	ip, r3
 801346a:	f10d 0e04 	add.w	lr, sp, #4
 801346e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013472:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013476:	f8dc 3000 	ldr.w	r3, [ip]
 801347a:	a801      	add	r0, sp, #4
 801347c:	f8ce 3000 	str.w	r3, [lr]
 8013480:	f001 fd90 	bl	8014fa4 <rcutils_allocator_is_valid>
 8013484:	b160      	cbz	r0, 80134a0 <rcl_init_options_fini+0x44>
 8013486:	6820      	ldr	r0, [r4, #0]
 8013488:	3018      	adds	r0, #24
 801348a:	f002 f98b 	bl	80157a4 <rmw_init_options_fini>
 801348e:	4605      	mov	r5, r0
 8013490:	b950      	cbnz	r0, 80134a8 <rcl_init_options_fini+0x4c>
 8013492:	6820      	ldr	r0, [r4, #0]
 8013494:	9b02      	ldr	r3, [sp, #8]
 8013496:	9905      	ldr	r1, [sp, #20]
 8013498:	4798      	blx	r3
 801349a:	4628      	mov	r0, r5
 801349c:	b007      	add	sp, #28
 801349e:	bd30      	pop	{r4, r5, pc}
 80134a0:	250b      	movs	r5, #11
 80134a2:	4628      	mov	r0, r5
 80134a4:	b007      	add	sp, #28
 80134a6:	bd30      	pop	{r4, r5, pc}
 80134a8:	f007 ff5c 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 80134ac:	4605      	mov	r5, r0
 80134ae:	e7f8      	b.n	80134a2 <rcl_init_options_fini+0x46>

080134b0 <rcl_init_options_copy>:
 80134b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b4:	b094      	sub	sp, #80	; 0x50
 80134b6:	2800      	cmp	r0, #0
 80134b8:	d05b      	beq.n	8013572 <rcl_init_options_copy+0xc2>
 80134ba:	4604      	mov	r4, r0
 80134bc:	6800      	ldr	r0, [r0, #0]
 80134be:	2800      	cmp	r0, #0
 80134c0:	d057      	beq.n	8013572 <rcl_init_options_copy+0xc2>
 80134c2:	460e      	mov	r6, r1
 80134c4:	f001 fd6e 	bl	8014fa4 <rcutils_allocator_is_valid>
 80134c8:	2e00      	cmp	r6, #0
 80134ca:	d052      	beq.n	8013572 <rcl_init_options_copy+0xc2>
 80134cc:	f080 0001 	eor.w	r0, r0, #1
 80134d0:	b2c0      	uxtb	r0, r0
 80134d2:	2800      	cmp	r0, #0
 80134d4:	d14d      	bne.n	8013572 <rcl_init_options_copy+0xc2>
 80134d6:	6833      	ldr	r3, [r6, #0]
 80134d8:	b123      	cbz	r3, 80134e4 <rcl_init_options_copy+0x34>
 80134da:	2464      	movs	r4, #100	; 0x64
 80134dc:	4620      	mov	r0, r4
 80134de:	b014      	add	sp, #80	; 0x50
 80134e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e4:	6827      	ldr	r7, [r4, #0]
 80134e6:	ad0f      	add	r5, sp, #60	; 0x3c
 80134e8:	46bc      	mov	ip, r7
 80134ea:	f8d7 8000 	ldr.w	r8, [r7]
 80134ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80134f4:	f8dc 3000 	ldr.w	r3, [ip]
 80134f8:	2050      	movs	r0, #80	; 0x50
 80134fa:	4619      	mov	r1, r3
 80134fc:	602b      	str	r3, [r5, #0]
 80134fe:	47c0      	blx	r8
 8013500:	4605      	mov	r5, r0
 8013502:	6030      	str	r0, [r6, #0]
 8013504:	b3d0      	cbz	r0, 801357c <rcl_init_options_copy+0xcc>
 8013506:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 801350a:	4686      	mov	lr, r0
 801350c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013510:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013514:	f8dc 3000 	ldr.w	r3, [ip]
 8013518:	4668      	mov	r0, sp
 801351a:	f8ce 3000 	str.w	r3, [lr]
 801351e:	f001 ff5f 	bl	80153e0 <rmw_get_zero_initialized_init_options>
 8013522:	46ee      	mov	lr, sp
 8013524:	f105 0c18 	add.w	ip, r5, #24
 8013528:	6824      	ldr	r4, [r4, #0]
 801352a:	6835      	ldr	r5, [r6, #0]
 801352c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013530:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013534:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801353c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013544:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013548:	e88c 0003 	stmia.w	ip, {r0, r1}
 801354c:	f104 0018 	add.w	r0, r4, #24
 8013550:	f105 0118 	add.w	r1, r5, #24
 8013554:	f002 f8d4 	bl	8015700 <rmw_init_options_copy>
 8013558:	4604      	mov	r4, r0
 801355a:	2800      	cmp	r0, #0
 801355c:	d0be      	beq.n	80134dc <rcl_init_options_copy+0x2c>
 801355e:	f001 fd47 	bl	8014ff0 <rcutils_get_error_string>
 8013562:	f001 fd5d 	bl	8015020 <rcutils_reset_error>
 8013566:	4630      	mov	r0, r6
 8013568:	f7ff ff78 	bl	801345c <rcl_init_options_fini>
 801356c:	b140      	cbz	r0, 8013580 <rcl_init_options_copy+0xd0>
 801356e:	4604      	mov	r4, r0
 8013570:	e7b4      	b.n	80134dc <rcl_init_options_copy+0x2c>
 8013572:	240b      	movs	r4, #11
 8013574:	4620      	mov	r0, r4
 8013576:	b014      	add	sp, #80	; 0x50
 8013578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801357c:	240a      	movs	r4, #10
 801357e:	e7ad      	b.n	80134dc <rcl_init_options_copy+0x2c>
 8013580:	4620      	mov	r0, r4
 8013582:	b014      	add	sp, #80	; 0x50
 8013584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013588:	f007 beec 	b.w	801b364 <rcl_convert_rmw_ret_to_rcl_ret>

0801358c <rcl_init_options_set_domain_id>:
 801358c:	b120      	cbz	r0, 8013598 <rcl_init_options_set_domain_id+0xc>
 801358e:	6803      	ldr	r3, [r0, #0]
 8013590:	b113      	cbz	r3, 8013598 <rcl_init_options_set_domain_id+0xc>
 8013592:	2000      	movs	r0, #0
 8013594:	6259      	str	r1, [r3, #36]	; 0x24
 8013596:	4770      	bx	lr
 8013598:	200b      	movs	r0, #11
 801359a:	4770      	bx	lr

0801359c <rcl_get_zero_initialized_node>:
 801359c:	4a03      	ldr	r2, [pc, #12]	; (80135ac <rcl_get_zero_initialized_node+0x10>)
 801359e:	4603      	mov	r3, r0
 80135a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80135a8:	4618      	mov	r0, r3
 80135aa:	4770      	bx	lr
 80135ac:	08024c60 	.word	0x08024c60

080135b0 <rcl_node_init>:
 80135b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b4:	b0a9      	sub	sp, #164	; 0xa4
 80135b6:	4604      	mov	r4, r0
 80135b8:	460e      	mov	r6, r1
 80135ba:	4615      	mov	r5, r2
 80135bc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 80135c0:	a823      	add	r0, sp, #140	; 0x8c
 80135c2:	461f      	mov	r7, r3
 80135c4:	f007 ffde 	bl	801b584 <rcl_guard_condition_get_default_options>
 80135c8:	f1b8 0f00 	cmp.w	r8, #0
 80135cc:	f000 80f3 	beq.w	80137b6 <rcl_node_init+0x206>
 80135d0:	4640      	mov	r0, r8
 80135d2:	f001 fce7 	bl	8014fa4 <rcutils_allocator_is_valid>
 80135d6:	2d00      	cmp	r5, #0
 80135d8:	bf18      	it	ne
 80135da:	2c00      	cmpne	r4, #0
 80135dc:	f080 0001 	eor.w	r0, r0, #1
 80135e0:	bf0c      	ite	eq
 80135e2:	f04f 0c01 	moveq.w	ip, #1
 80135e6:	f04f 0c00 	movne.w	ip, #0
 80135ea:	2e00      	cmp	r6, #0
 80135ec:	bf08      	it	eq
 80135ee:	f04c 0c01 	orreq.w	ip, ip, #1
 80135f2:	ea4c 0c00 	orr.w	ip, ip, r0
 80135f6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80135fa:	f040 80dc 	bne.w	80137b6 <rcl_node_init+0x206>
 80135fe:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013602:	f1ba 0f00 	cmp.w	sl, #0
 8013606:	f040 80fc 	bne.w	8013802 <rcl_node_init+0x252>
 801360a:	2f00      	cmp	r7, #0
 801360c:	f000 80d3 	beq.w	80137b6 <rcl_node_init+0x206>
 8013610:	4638      	mov	r0, r7
 8013612:	f007 fec5 	bl	801b3a0 <rcl_context_is_valid>
 8013616:	4683      	mov	fp, r0
 8013618:	2800      	cmp	r0, #0
 801361a:	f000 80d2 	beq.w	80137c2 <rcl_node_init+0x212>
 801361e:	4652      	mov	r2, sl
 8013620:	4630      	mov	r0, r6
 8013622:	a922      	add	r1, sp, #136	; 0x88
 8013624:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8013628:	f001 ff8c 	bl	8015544 <rmw_validate_node_name>
 801362c:	4682      	mov	sl, r0
 801362e:	2800      	cmp	r0, #0
 8013630:	f040 80c3 	bne.w	80137ba <rcl_node_init+0x20a>
 8013634:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013636:	2800      	cmp	r0, #0
 8013638:	f040 80f1 	bne.w	801381e <rcl_node_init+0x26e>
 801363c:	4628      	mov	r0, r5
 801363e:	f7ec fe5f 	bl	8000300 <strlen>
 8013642:	2800      	cmp	r0, #0
 8013644:	f040 80c0 	bne.w	80137c8 <rcl_node_init+0x218>
 8013648:	4d79      	ldr	r5, [pc, #484]	; (8013830 <rcl_node_init+0x280>)
 801364a:	a922      	add	r1, sp, #136	; 0x88
 801364c:	2200      	movs	r2, #0
 801364e:	4628      	mov	r0, r5
 8013650:	f001 ff5a 	bl	8015508 <rmw_validate_namespace>
 8013654:	4682      	mov	sl, r0
 8013656:	2800      	cmp	r0, #0
 8013658:	f040 80af 	bne.w	80137ba <rcl_node_init+0x20a>
 801365c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801365e:	2800      	cmp	r0, #0
 8013660:	f040 80d5 	bne.w	801380e <rcl_node_init+0x25e>
 8013664:	f8d8 3000 	ldr.w	r3, [r8]
 8013668:	2078      	movs	r0, #120	; 0x78
 801366a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801366e:	4798      	blx	r3
 8013670:	4682      	mov	sl, r0
 8013672:	6060      	str	r0, [r4, #4]
 8013674:	2800      	cmp	r0, #0
 8013676:	f000 80cf 	beq.w	8013818 <rcl_node_init+0x268>
 801367a:	2200      	movs	r2, #0
 801367c:	2300      	movs	r3, #0
 801367e:	a808      	add	r0, sp, #32
 8013680:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8013684:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8013688:	f000 f902 	bl	8013890 <rcl_node_get_default_options>
 801368c:	a908      	add	r1, sp, #32
 801368e:	4650      	mov	r0, sl
 8013690:	2268      	movs	r2, #104	; 0x68
 8013692:	f00d fbe4 	bl	8020e5e <memcpy>
 8013696:	6861      	ldr	r1, [r4, #4]
 8013698:	4640      	mov	r0, r8
 801369a:	6027      	str	r7, [r4, #0]
 801369c:	f000 f906 	bl	80138ac <rcl_node_options_copy>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d158      	bne.n	8013756 <rcl_node_init+0x1a6>
 80136a4:	4628      	mov	r0, r5
 80136a6:	f7ec fe2b 	bl	8000300 <strlen>
 80136aa:	4428      	add	r0, r5
 80136ac:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80136b0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80136b4:	2b2f      	cmp	r3, #47	; 0x2f
 80136b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80136ba:	9300      	str	r3, [sp, #0]
 80136bc:	bf0c      	ite	eq
 80136be:	4b5d      	ldreq	r3, [pc, #372]	; (8013834 <rcl_node_init+0x284>)
 80136c0:	4b5d      	ldrne	r3, [pc, #372]	; (8013838 <rcl_node_init+0x288>)
 80136c2:	9302      	str	r3, [sp, #8]
 80136c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136c8:	9301      	str	r3, [sp, #4]
 80136ca:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80136ce:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80136d2:	f001 fcc1 	bl	8015058 <rcutils_format_string_limit>
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 80136dc:	4631      	mov	r1, r6
 80136de:	6818      	ldr	r0, [r3, #0]
 80136e0:	462a      	mov	r2, r5
 80136e2:	6866      	ldr	r6, [r4, #4]
 80136e4:	3028      	adds	r0, #40	; 0x28
 80136e6:	f002 fa89 	bl	8015bfc <rmw_create_node>
 80136ea:	6863      	ldr	r3, [r4, #4]
 80136ec:	66b0      	str	r0, [r6, #104]	; 0x68
 80136ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80136f0:	2800      	cmp	r0, #0
 80136f2:	d032      	beq.n	801375a <rcl_node_init+0x1aa>
 80136f4:	f002 fb12 	bl	8015d1c <rmw_node_get_graph_guard_condition>
 80136f8:	4682      	mov	sl, r0
 80136fa:	b360      	cbz	r0, 8013756 <rcl_node_init+0x1a6>
 80136fc:	f8d8 3000 	ldr.w	r3, [r8]
 8013700:	2008      	movs	r0, #8
 8013702:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013706:	6866      	ldr	r6, [r4, #4]
 8013708:	4798      	blx	r3
 801370a:	6863      	ldr	r3, [r4, #4]
 801370c:	66f0      	str	r0, [r6, #108]	; 0x6c
 801370e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8013712:	f1bb 0f00 	cmp.w	fp, #0
 8013716:	d020      	beq.n	801375a <rcl_node_init+0x1aa>
 8013718:	a806      	add	r0, sp, #24
 801371a:	ae23      	add	r6, sp, #140	; 0x8c
 801371c:	f007 fea6 	bl	801b46c <rcl_get_zero_initialized_guard_condition>
 8013720:	a806      	add	r0, sp, #24
 8013722:	6863      	ldr	r3, [r4, #4]
 8013724:	46c4      	mov	ip, r8
 8013726:	c803      	ldmia	r0, {r0, r1}
 8013728:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 801372c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013730:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013734:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013736:	f8dc 3000 	ldr.w	r3, [ip]
 801373a:	6033      	str	r3, [r6, #0]
 801373c:	ab28      	add	r3, sp, #160	; 0xa0
 801373e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013742:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013746:	4651      	mov	r1, sl
 8013748:	463a      	mov	r2, r7
 801374a:	4670      	mov	r0, lr
 801374c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801374e:	f007 fe97 	bl	801b480 <rcl_guard_condition_init_from_rmw>
 8013752:	4682      	mov	sl, r0
 8013754:	b328      	cbz	r0, 80137a2 <rcl_node_init+0x1f2>
 8013756:	6863      	ldr	r3, [r4, #4]
 8013758:	b1f3      	cbz	r3, 8013798 <rcl_node_init+0x1e8>
 801375a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801375c:	b128      	cbz	r0, 801376a <rcl_node_init+0x1ba>
 801375e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013762:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013766:	4798      	blx	r3
 8013768:	6863      	ldr	r3, [r4, #4]
 801376a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801376c:	b110      	cbz	r0, 8013774 <rcl_node_init+0x1c4>
 801376e:	f002 fa57 	bl	8015c20 <rmw_destroy_node>
 8013772:	6863      	ldr	r3, [r4, #4]
 8013774:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013776:	b148      	cbz	r0, 801378c <rcl_node_init+0x1dc>
 8013778:	f007 fede 	bl	801b538 <rcl_guard_condition_fini>
 801377c:	6863      	ldr	r3, [r4, #4]
 801377e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013782:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013784:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013788:	4798      	blx	r3
 801378a:	6863      	ldr	r3, [r4, #4]
 801378c:	4618      	mov	r0, r3
 801378e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013792:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013796:	4798      	blx	r3
 8013798:	2300      	movs	r3, #0
 801379a:	f04f 0a01 	mov.w	sl, #1
 801379e:	e9c4 3300 	strd	r3, r3, [r4]
 80137a2:	f1b9 0f00 	cmp.w	r9, #0
 80137a6:	d008      	beq.n	80137ba <rcl_node_init+0x20a>
 80137a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80137ac:	4628      	mov	r0, r5
 80137ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137b2:	4798      	blx	r3
 80137b4:	e001      	b.n	80137ba <rcl_node_init+0x20a>
 80137b6:	f04f 0a0b 	mov.w	sl, #11
 80137ba:	4650      	mov	r0, sl
 80137bc:	b029      	add	sp, #164	; 0xa4
 80137be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c2:	f04f 0a65 	mov.w	sl, #101	; 0x65
 80137c6:	e7f8      	b.n	80137ba <rcl_node_init+0x20a>
 80137c8:	782b      	ldrb	r3, [r5, #0]
 80137ca:	2b2f      	cmp	r3, #47	; 0x2f
 80137cc:	f43f af3d 	beq.w	801364a <rcl_node_init+0x9a>
 80137d0:	9503      	str	r5, [sp, #12]
 80137d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	4b18      	ldr	r3, [pc, #96]	; (801383c <rcl_node_init+0x28c>)
 80137da:	9302      	str	r3, [sp, #8]
 80137dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80137e0:	9301      	str	r3, [sp, #4]
 80137e2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80137e6:	f001 fc37 	bl	8015058 <rcutils_format_string_limit>
 80137ea:	4605      	mov	r5, r0
 80137ec:	b1e0      	cbz	r0, 8013828 <rcl_node_init+0x278>
 80137ee:	2200      	movs	r2, #0
 80137f0:	a922      	add	r1, sp, #136	; 0x88
 80137f2:	9222      	str	r2, [sp, #136]	; 0x88
 80137f4:	f001 fe88 	bl	8015508 <rmw_validate_namespace>
 80137f8:	4682      	mov	sl, r0
 80137fa:	2800      	cmp	r0, #0
 80137fc:	d1d4      	bne.n	80137a8 <rcl_node_init+0x1f8>
 80137fe:	46d9      	mov	r9, fp
 8013800:	e72c      	b.n	801365c <rcl_node_init+0xac>
 8013802:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8013806:	4650      	mov	r0, sl
 8013808:	b029      	add	sp, #164	; 0xa4
 801380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380e:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8013812:	f001 fe8b 	bl	801552c <rmw_namespace_validation_result_string>
 8013816:	e7c4      	b.n	80137a2 <rcl_node_init+0x1f2>
 8013818:	f04f 0a0a 	mov.w	sl, #10
 801381c:	e7c1      	b.n	80137a2 <rcl_node_init+0x1f2>
 801381e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8013822:	f001 fee3 	bl	80155ec <rmw_node_name_validation_result_string>
 8013826:	e7c8      	b.n	80137ba <rcl_node_init+0x20a>
 8013828:	f04f 0a0a 	mov.w	sl, #10
 801382c:	e7c5      	b.n	80137ba <rcl_node_init+0x20a>
 801382e:	bf00      	nop
 8013830:	08024c48 	.word	0x08024c48
 8013834:	08024c50 	.word	0x08024c50
 8013838:	08024c58 	.word	0x08024c58
 801383c:	08024c4c 	.word	0x08024c4c

08013840 <rcl_node_is_valid>:
 8013840:	b130      	cbz	r0, 8013850 <rcl_node_is_valid+0x10>
 8013842:	6843      	ldr	r3, [r0, #4]
 8013844:	b123      	cbz	r3, 8013850 <rcl_node_is_valid+0x10>
 8013846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013848:	b113      	cbz	r3, 8013850 <rcl_node_is_valid+0x10>
 801384a:	6800      	ldr	r0, [r0, #0]
 801384c:	f007 bda8 	b.w	801b3a0 <rcl_context_is_valid>
 8013850:	2000      	movs	r0, #0
 8013852:	4770      	bx	lr

08013854 <rcl_node_get_name>:
 8013854:	b120      	cbz	r0, 8013860 <rcl_node_get_name+0xc>
 8013856:	6840      	ldr	r0, [r0, #4]
 8013858:	b110      	cbz	r0, 8013860 <rcl_node_get_name+0xc>
 801385a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801385c:	b100      	cbz	r0, 8013860 <rcl_node_get_name+0xc>
 801385e:	6880      	ldr	r0, [r0, #8]
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop

08013864 <rcl_node_get_namespace>:
 8013864:	b120      	cbz	r0, 8013870 <rcl_node_get_namespace+0xc>
 8013866:	6840      	ldr	r0, [r0, #4]
 8013868:	b110      	cbz	r0, 8013870 <rcl_node_get_namespace+0xc>
 801386a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801386c:	b100      	cbz	r0, 8013870 <rcl_node_get_namespace+0xc>
 801386e:	68c0      	ldr	r0, [r0, #12]
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop

08013874 <rcl_node_get_options>:
 8013874:	b128      	cbz	r0, 8013882 <rcl_node_get_options+0xe>
 8013876:	6840      	ldr	r0, [r0, #4]
 8013878:	b118      	cbz	r0, 8013882 <rcl_node_get_options+0xe>
 801387a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801387c:	2b00      	cmp	r3, #0
 801387e:	bf08      	it	eq
 8013880:	2000      	moveq	r0, #0
 8013882:	4770      	bx	lr

08013884 <rcl_node_get_rmw_handle>:
 8013884:	b110      	cbz	r0, 801388c <rcl_node_get_rmw_handle+0x8>
 8013886:	6840      	ldr	r0, [r0, #4]
 8013888:	b100      	cbz	r0, 801388c <rcl_node_get_rmw_handle+0x8>
 801388a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801388c:	4770      	bx	lr
 801388e:	bf00      	nop

08013890 <rcl_node_get_default_options>:
 8013890:	b510      	push	{r4, lr}
 8013892:	4604      	mov	r4, r0
 8013894:	2268      	movs	r2, #104	; 0x68
 8013896:	2100      	movs	r1, #0
 8013898:	f00d fa14 	bl	8020cc4 <memset>
 801389c:	4620      	mov	r0, r4
 801389e:	f001 fb73 	bl	8014f88 <rcutils_get_default_allocator>
 80138a2:	2301      	movs	r3, #1
 80138a4:	4620      	mov	r0, r4
 80138a6:	7523      	strb	r3, [r4, #20]
 80138a8:	bd10      	pop	{r4, pc}
 80138aa:	bf00      	nop

080138ac <rcl_node_options_copy>:
 80138ac:	2800      	cmp	r0, #0
 80138ae:	bf18      	it	ne
 80138b0:	4288      	cmpne	r0, r1
 80138b2:	d01b      	beq.n	80138ec <rcl_node_options_copy+0x40>
 80138b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b6:	fab1 f681 	clz	r6, r1
 80138ba:	460c      	mov	r4, r1
 80138bc:	0976      	lsrs	r6, r6, #5
 80138be:	b199      	cbz	r1, 80138e8 <rcl_node_options_copy+0x3c>
 80138c0:	4605      	mov	r5, r0
 80138c2:	8a87      	ldrh	r7, [r0, #20]
 80138c4:	4684      	mov	ip, r0
 80138c6:	468e      	mov	lr, r1
 80138c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138ce:	682b      	ldr	r3, [r5, #0]
 80138d0:	2250      	movs	r2, #80	; 0x50
 80138d2:	f10c 0118 	add.w	r1, ip, #24
 80138d6:	f104 0018 	add.w	r0, r4, #24
 80138da:	f8ce 3000 	str.w	r3, [lr]
 80138de:	82a7      	strh	r7, [r4, #20]
 80138e0:	f00d fabd 	bl	8020e5e <memcpy>
 80138e4:	4630      	mov	r0, r6
 80138e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138e8:	200b      	movs	r0, #11
 80138ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ec:	200b      	movs	r0, #11
 80138ee:	4770      	bx	lr

080138f0 <rcl_get_zero_initialized_publisher>:
 80138f0:	4b01      	ldr	r3, [pc, #4]	; (80138f8 <rcl_get_zero_initialized_publisher+0x8>)
 80138f2:	6818      	ldr	r0, [r3, #0]
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	08024c68 	.word	0x08024c68

080138fc <rcl_publisher_init>:
 80138fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013900:	b088      	sub	sp, #32
 8013902:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013904:	2e00      	cmp	r6, #0
 8013906:	d06b      	beq.n	80139e0 <rcl_publisher_init+0xe4>
 8013908:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 801390c:	4605      	mov	r5, r0
 801390e:	460f      	mov	r7, r1
 8013910:	4690      	mov	r8, r2
 8013912:	4650      	mov	r0, sl
 8013914:	4699      	mov	r9, r3
 8013916:	f001 fb45 	bl	8014fa4 <rcutils_allocator_is_valid>
 801391a:	f080 0401 	eor.w	r4, r0, #1
 801391e:	b2e4      	uxtb	r4, r4
 8013920:	2c00      	cmp	r4, #0
 8013922:	d15d      	bne.n	80139e0 <rcl_publisher_init+0xe4>
 8013924:	2d00      	cmp	r5, #0
 8013926:	d05b      	beq.n	80139e0 <rcl_publisher_init+0xe4>
 8013928:	682b      	ldr	r3, [r5, #0]
 801392a:	b123      	cbz	r3, 8013936 <rcl_publisher_init+0x3a>
 801392c:	2464      	movs	r4, #100	; 0x64
 801392e:	4620      	mov	r0, r4
 8013930:	b008      	add	sp, #32
 8013932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013936:	4638      	mov	r0, r7
 8013938:	f7ff ff82 	bl	8013840 <rcl_node_is_valid>
 801393c:	2800      	cmp	r0, #0
 801393e:	d054      	beq.n	80139ea <rcl_publisher_init+0xee>
 8013940:	f1b8 0f00 	cmp.w	r8, #0
 8013944:	d04c      	beq.n	80139e0 <rcl_publisher_init+0xe4>
 8013946:	fab9 f389 	clz	r3, r9
 801394a:	095b      	lsrs	r3, r3, #5
 801394c:	f1b9 0f00 	cmp.w	r9, #0
 8013950:	d046      	beq.n	80139e0 <rcl_publisher_init+0xe4>
 8013952:	aa07      	add	r2, sp, #28
 8013954:	9307      	str	r3, [sp, #28]
 8013956:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801395a:	f106 0358 	add.w	r3, r6, #88	; 0x58
 801395e:	9205      	str	r2, [sp, #20]
 8013960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013964:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013968:	4649      	mov	r1, r9
 801396a:	4638      	mov	r0, r7
 801396c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013970:	f007 ff52 	bl	801b818 <rcl_node_resolve_name>
 8013974:	2800      	cmp	r0, #0
 8013976:	d14f      	bne.n	8013a18 <rcl_publisher_init+0x11c>
 8013978:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801397a:	20c8      	movs	r0, #200	; 0xc8
 801397c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801397e:	4798      	blx	r3
 8013980:	6028      	str	r0, [r5, #0]
 8013982:	2800      	cmp	r0, #0
 8013984:	d050      	beq.n	8013a28 <rcl_publisher_init+0x12c>
 8013986:	4638      	mov	r0, r7
 8013988:	f7ff ff7c 	bl	8013884 <rcl_node_get_rmw_handle>
 801398c:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8013990:	4641      	mov	r1, r8
 8013992:	9a07      	ldr	r2, [sp, #28]
 8013994:	9300      	str	r3, [sp, #0]
 8013996:	4633      	mov	r3, r6
 8013998:	682c      	ldr	r4, [r5, #0]
 801399a:	f002 fa29 	bl	8015df0 <rmw_create_publisher>
 801399e:	682b      	ldr	r3, [r5, #0]
 80139a0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80139a4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80139a8:	b370      	cbz	r0, 8013a08 <rcl_publisher_init+0x10c>
 80139aa:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80139ae:	f002 fb03 	bl	8015fb8 <rmw_publisher_get_actual_qos>
 80139b2:	682b      	ldr	r3, [r5, #0]
 80139b4:	4604      	mov	r4, r0
 80139b6:	b9d0      	cbnz	r0, 80139ee <rcl_publisher_init+0xf2>
 80139b8:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 80139bc:	4631      	mov	r1, r6
 80139be:	4618      	mov	r0, r3
 80139c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80139c4:	2270      	movs	r2, #112	; 0x70
 80139c6:	f00d fa4a 	bl	8020e5e <memcpy>
 80139ca:	683a      	ldr	r2, [r7, #0]
 80139cc:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 80139d0:	9807      	ldr	r0, [sp, #28]
 80139d2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80139d4:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80139d6:	4798      	blx	r3
 80139d8:	4620      	mov	r0, r4
 80139da:	b008      	add	sp, #32
 80139dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139e0:	240b      	movs	r4, #11
 80139e2:	4620      	mov	r0, r4
 80139e4:	b008      	add	sp, #32
 80139e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ea:	24c8      	movs	r4, #200	; 0xc8
 80139ec:	e79f      	b.n	801392e <rcl_publisher_init+0x32>
 80139ee:	b1cb      	cbz	r3, 8013a24 <rcl_publisher_init+0x128>
 80139f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80139f4:	b142      	cbz	r2, 8013a08 <rcl_publisher_init+0x10c>
 80139f6:	4638      	mov	r0, r7
 80139f8:	f7ff ff44 	bl	8013884 <rcl_node_get_rmw_handle>
 80139fc:	682b      	ldr	r3, [r5, #0]
 80139fe:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8013a02:	f002 faed 	bl	8015fe0 <rmw_destroy_publisher>
 8013a06:	682b      	ldr	r3, [r5, #0]
 8013a08:	4618      	mov	r0, r3
 8013a0a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8013a0c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013a0e:	2401      	movs	r4, #1
 8013a10:	4790      	blx	r2
 8013a12:	2300      	movs	r3, #0
 8013a14:	602b      	str	r3, [r5, #0]
 8013a16:	e7db      	b.n	80139d0 <rcl_publisher_init+0xd4>
 8013a18:	2867      	cmp	r0, #103	; 0x67
 8013a1a:	d007      	beq.n	8013a2c <rcl_publisher_init+0x130>
 8013a1c:	2869      	cmp	r0, #105	; 0x69
 8013a1e:	d005      	beq.n	8013a2c <rcl_publisher_init+0x130>
 8013a20:	280a      	cmp	r0, #10
 8013a22:	d001      	beq.n	8013a28 <rcl_publisher_init+0x12c>
 8013a24:	2401      	movs	r4, #1
 8013a26:	e7d3      	b.n	80139d0 <rcl_publisher_init+0xd4>
 8013a28:	240a      	movs	r4, #10
 8013a2a:	e7d1      	b.n	80139d0 <rcl_publisher_init+0xd4>
 8013a2c:	2467      	movs	r4, #103	; 0x67
 8013a2e:	e7cf      	b.n	80139d0 <rcl_publisher_init+0xd4>

08013a30 <rcl_publisher_get_default_options>:
 8013a30:	b570      	push	{r4, r5, r6, lr}
 8013a32:	4d14      	ldr	r5, [pc, #80]	; (8013a84 <rcl_publisher_get_default_options+0x54>)
 8013a34:	b088      	sub	sp, #32
 8013a36:	4604      	mov	r4, r0
 8013a38:	2250      	movs	r2, #80	; 0x50
 8013a3a:	4913      	ldr	r1, [pc, #76]	; (8013a88 <rcl_publisher_get_default_options+0x58>)
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	f00d fa0e 	bl	8020e5e <memcpy>
 8013a42:	a802      	add	r0, sp, #8
 8013a44:	f001 faa0 	bl	8014f88 <rcutils_get_default_allocator>
 8013a48:	f10d 0c08 	add.w	ip, sp, #8
 8013a4c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013a50:	466e      	mov	r6, sp
 8013a52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8013a5e:	4630      	mov	r0, r6
 8013a60:	f8ce 3000 	str.w	r3, [lr]
 8013a64:	f001 fccc 	bl	8015400 <rmw_get_default_publisher_options>
 8013a68:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013a6c:	2270      	movs	r2, #112	; 0x70
 8013a6e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013a72:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a76:	4629      	mov	r1, r5
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f00d f9f0 	bl	8020e5e <memcpy>
 8013a7e:	4620      	mov	r0, r4
 8013a80:	b008      	add	sp, #32
 8013a82:	bd70      	pop	{r4, r5, r6, pc}
 8013a84:	20012008 	.word	0x20012008
 8013a88:	08024c70 	.word	0x08024c70

08013a8c <rcl_publish>:
 8013a8c:	b1f8      	cbz	r0, 8013ace <rcl_publish+0x42>
 8013a8e:	6803      	ldr	r3, [r0, #0]
 8013a90:	b570      	push	{r4, r5, r6, lr}
 8013a92:	4604      	mov	r4, r0
 8013a94:	b1b3      	cbz	r3, 8013ac4 <rcl_publish+0x38>
 8013a96:	4616      	mov	r6, r2
 8013a98:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013a9c:	b192      	cbz	r2, 8013ac4 <rcl_publish+0x38>
 8013a9e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013aa2:	460d      	mov	r5, r1
 8013aa4:	f007 fc7c 	bl	801b3a0 <rcl_context_is_valid>
 8013aa8:	b160      	cbz	r0, 8013ac4 <rcl_publish+0x38>
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013ab0:	b140      	cbz	r0, 8013ac4 <rcl_publish+0x38>
 8013ab2:	b155      	cbz	r5, 8013aca <rcl_publish+0x3e>
 8013ab4:	4632      	mov	r2, r6
 8013ab6:	4629      	mov	r1, r5
 8013ab8:	f002 f93a 	bl	8015d30 <rmw_publish>
 8013abc:	3800      	subs	r0, #0
 8013abe:	bf18      	it	ne
 8013ac0:	2001      	movne	r0, #1
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}
 8013ac4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013ac8:	bd70      	pop	{r4, r5, r6, pc}
 8013aca:	200b      	movs	r0, #11
 8013acc:	bd70      	pop	{r4, r5, r6, pc}
 8013ace:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013ad2:	4770      	bx	lr

08013ad4 <rcl_publisher_is_valid>:
 8013ad4:	b1a0      	cbz	r0, 8013b00 <rcl_publisher_is_valid+0x2c>
 8013ad6:	6803      	ldr	r3, [r0, #0]
 8013ad8:	b510      	push	{r4, lr}
 8013ada:	4604      	mov	r4, r0
 8013adc:	b173      	cbz	r3, 8013afc <rcl_publisher_is_valid+0x28>
 8013ade:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013ae2:	b15a      	cbz	r2, 8013afc <rcl_publisher_is_valid+0x28>
 8013ae4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013ae8:	f007 fc5a 	bl	801b3a0 <rcl_context_is_valid>
 8013aec:	b130      	cbz	r0, 8013afc <rcl_publisher_is_valid+0x28>
 8013aee:	6823      	ldr	r3, [r4, #0]
 8013af0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013af4:	3800      	subs	r0, #0
 8013af6:	bf18      	it	ne
 8013af8:	2001      	movne	r0, #1
 8013afa:	bd10      	pop	{r4, pc}
 8013afc:	2000      	movs	r0, #0
 8013afe:	bd10      	pop	{r4, pc}
 8013b00:	2000      	movs	r0, #0
 8013b02:	4770      	bx	lr

08013b04 <rcl_publisher_is_valid_except_context>:
 8013b04:	b130      	cbz	r0, 8013b14 <rcl_publisher_is_valid_except_context+0x10>
 8013b06:	6800      	ldr	r0, [r0, #0]
 8013b08:	b120      	cbz	r0, 8013b14 <rcl_publisher_is_valid_except_context+0x10>
 8013b0a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013b0e:	3800      	subs	r0, #0
 8013b10:	bf18      	it	ne
 8013b12:	2001      	movne	r0, #1
 8013b14:	4770      	bx	lr
 8013b16:	bf00      	nop

08013b18 <rcl_get_zero_initialized_service>:
 8013b18:	4b01      	ldr	r3, [pc, #4]	; (8013b20 <rcl_get_zero_initialized_service+0x8>)
 8013b1a:	6818      	ldr	r0, [r3, #0]
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop
 8013b20:	08024cc0 	.word	0x08024cc0

08013b24 <rcl_service_init>:
 8013b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b28:	b088      	sub	sp, #32
 8013b2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013b2c:	b1ff      	cbz	r7, 8013b6e <rcl_service_init+0x4a>
 8013b2e:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013b32:	4605      	mov	r5, r0
 8013b34:	460e      	mov	r6, r1
 8013b36:	4691      	mov	r9, r2
 8013b38:	4650      	mov	r0, sl
 8013b3a:	4698      	mov	r8, r3
 8013b3c:	f001 fa32 	bl	8014fa4 <rcutils_allocator_is_valid>
 8013b40:	f080 0401 	eor.w	r4, r0, #1
 8013b44:	b2e4      	uxtb	r4, r4
 8013b46:	b994      	cbnz	r4, 8013b6e <rcl_service_init+0x4a>
 8013b48:	b18d      	cbz	r5, 8013b6e <rcl_service_init+0x4a>
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	f7ff fe78 	bl	8013840 <rcl_node_is_valid>
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d05d      	beq.n	8013c10 <rcl_service_init+0xec>
 8013b54:	f1b8 0f00 	cmp.w	r8, #0
 8013b58:	d009      	beq.n	8013b6e <rcl_service_init+0x4a>
 8013b5a:	f1b9 0f00 	cmp.w	r9, #0
 8013b5e:	d006      	beq.n	8013b6e <rcl_service_init+0x4a>
 8013b60:	682b      	ldr	r3, [r5, #0]
 8013b62:	b14b      	cbz	r3, 8013b78 <rcl_service_init+0x54>
 8013b64:	2464      	movs	r4, #100	; 0x64
 8013b66:	4620      	mov	r0, r4
 8013b68:	b008      	add	sp, #32
 8013b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b6e:	240b      	movs	r4, #11
 8013b70:	4620      	mov	r0, r4
 8013b72:	b008      	add	sp, #32
 8013b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b78:	aa07      	add	r2, sp, #28
 8013b7a:	9304      	str	r3, [sp, #16]
 8013b7c:	9307      	str	r3, [sp, #28]
 8013b7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b82:	9205      	str	r2, [sp, #20]
 8013b84:	2201      	movs	r2, #1
 8013b86:	9203      	str	r2, [sp, #12]
 8013b88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013b8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013b90:	4641      	mov	r1, r8
 8013b92:	4630      	mov	r0, r6
 8013b94:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013b98:	f007 fe3e 	bl	801b818 <rcl_node_resolve_name>
 8013b9c:	2800      	cmp	r0, #0
 8013b9e:	d146      	bne.n	8013c2e <rcl_service_init+0x10a>
 8013ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba2:	f44f 7088 	mov.w	r0, #272	; 0x110
 8013ba6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013ba8:	4798      	blx	r3
 8013baa:	6028      	str	r0, [r5, #0]
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d046      	beq.n	8013c3e <rcl_service_init+0x11a>
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	f7ff fe67 	bl	8013884 <rcl_node_get_rmw_handle>
 8013bb6:	463b      	mov	r3, r7
 8013bb8:	4649      	mov	r1, r9
 8013bba:	9a07      	ldr	r2, [sp, #28]
 8013bbc:	682c      	ldr	r4, [r5, #0]
 8013bbe:	f002 fbb3 	bl	8016328 <rmw_create_service>
 8013bc2:	682b      	ldr	r3, [r5, #0]
 8013bc4:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8013bc8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013bcc:	b338      	cbz	r0, 8013c1e <rcl_service_init+0xfa>
 8013bce:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8013bd2:	f002 fcdb 	bl	801658c <rmw_service_request_subscription_get_actual_qos>
 8013bd6:	bb00      	cbnz	r0, 8013c1a <rcl_service_init+0xf6>
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8013bde:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013be2:	f002 fcbf 	bl	8016564 <rmw_service_response_publisher_get_actual_qos>
 8013be6:	4604      	mov	r4, r0
 8013be8:	b9b8      	cbnz	r0, 8013c1a <rcl_service_init+0xf6>
 8013bea:	6828      	ldr	r0, [r5, #0]
 8013bec:	2268      	movs	r2, #104	; 0x68
 8013bee:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013bf2:	4639      	mov	r1, r7
 8013bf4:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013bf8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8013bfc:	f00d f92f 	bl	8020e5e <memcpy>
 8013c00:	9807      	ldr	r0, [sp, #28]
 8013c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013c06:	4798      	blx	r3
 8013c08:	4620      	mov	r0, r4
 8013c0a:	b008      	add	sp, #32
 8013c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c10:	24c8      	movs	r4, #200	; 0xc8
 8013c12:	4620      	mov	r0, r4
 8013c14:	b008      	add	sp, #32
 8013c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c1a:	682b      	ldr	r3, [r5, #0]
 8013c1c:	b16b      	cbz	r3, 8013c3a <rcl_service_init+0x116>
 8013c1e:	4618      	mov	r0, r3
 8013c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013c22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013c24:	2401      	movs	r4, #1
 8013c26:	4790      	blx	r2
 8013c28:	2300      	movs	r3, #0
 8013c2a:	602b      	str	r3, [r5, #0]
 8013c2c:	e7e8      	b.n	8013c00 <rcl_service_init+0xdc>
 8013c2e:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d905      	bls.n	8013c42 <rcl_service_init+0x11e>
 8013c36:	280a      	cmp	r0, #10
 8013c38:	d001      	beq.n	8013c3e <rcl_service_init+0x11a>
 8013c3a:	2401      	movs	r4, #1
 8013c3c:	e7e0      	b.n	8013c00 <rcl_service_init+0xdc>
 8013c3e:	240a      	movs	r4, #10
 8013c40:	e7de      	b.n	8013c00 <rcl_service_init+0xdc>
 8013c42:	2468      	movs	r4, #104	; 0x68
 8013c44:	e7dc      	b.n	8013c00 <rcl_service_init+0xdc>
 8013c46:	bf00      	nop

08013c48 <rcl_service_get_default_options>:
 8013c48:	b530      	push	{r4, r5, lr}
 8013c4a:	4d0f      	ldr	r5, [pc, #60]	; (8013c88 <rcl_service_get_default_options+0x40>)
 8013c4c:	b087      	sub	sp, #28
 8013c4e:	4604      	mov	r4, r0
 8013c50:	2250      	movs	r2, #80	; 0x50
 8013c52:	490e      	ldr	r1, [pc, #56]	; (8013c8c <rcl_service_get_default_options+0x44>)
 8013c54:	4628      	mov	r0, r5
 8013c56:	f00d f902 	bl	8020e5e <memcpy>
 8013c5a:	4668      	mov	r0, sp
 8013c5c:	f001 f994 	bl	8014f88 <rcutils_get_default_allocator>
 8013c60:	46ec      	mov	ip, sp
 8013c62:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013c66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013c6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8013c72:	2268      	movs	r2, #104	; 0x68
 8013c74:	4629      	mov	r1, r5
 8013c76:	4620      	mov	r0, r4
 8013c78:	f8ce 3000 	str.w	r3, [lr]
 8013c7c:	f00d f8ef 	bl	8020e5e <memcpy>
 8013c80:	4620      	mov	r0, r4
 8013c82:	b007      	add	sp, #28
 8013c84:	bd30      	pop	{r4, r5, pc}
 8013c86:	bf00      	nop
 8013c88:	20012078 	.word	0x20012078
 8013c8c:	08024cc8 	.word	0x08024cc8

08013c90 <rcl_service_get_rmw_handle>:
 8013c90:	b118      	cbz	r0, 8013c9a <rcl_service_get_rmw_handle+0xa>
 8013c92:	6800      	ldr	r0, [r0, #0]
 8013c94:	b108      	cbz	r0, 8013c9a <rcl_service_get_rmw_handle+0xa>
 8013c96:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013c9a:	4770      	bx	lr

08013c9c <rcl_take_request>:
 8013c9c:	b570      	push	{r4, r5, r6, lr}
 8013c9e:	468e      	mov	lr, r1
 8013ca0:	b08c      	sub	sp, #48	; 0x30
 8013ca2:	460c      	mov	r4, r1
 8013ca4:	4616      	mov	r6, r2
 8013ca6:	f10d 0c18 	add.w	ip, sp, #24
 8013caa:	4605      	mov	r5, r0
 8013cac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013cb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013cb4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013cb8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013cbc:	b30d      	cbz	r5, 8013d02 <rcl_take_request+0x66>
 8013cbe:	682b      	ldr	r3, [r5, #0]
 8013cc0:	b1fb      	cbz	r3, 8013d02 <rcl_take_request+0x66>
 8013cc2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013cc6:	b1e0      	cbz	r0, 8013d02 <rcl_take_request+0x66>
 8013cc8:	b336      	cbz	r6, 8013d18 <rcl_take_request+0x7c>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	4632      	mov	r2, r6
 8013cce:	a902      	add	r1, sp, #8
 8013cd0:	f88d 3007 	strb.w	r3, [sp, #7]
 8013cd4:	f10d 0307 	add.w	r3, sp, #7
 8013cd8:	f002 fa24 	bl	8016124 <rmw_take_request>
 8013cdc:	4605      	mov	r5, r0
 8013cde:	b198      	cbz	r0, 8013d08 <rcl_take_request+0x6c>
 8013ce0:	280a      	cmp	r0, #10
 8013ce2:	bf18      	it	ne
 8013ce4:	2501      	movne	r5, #1
 8013ce6:	f10d 0e18 	add.w	lr, sp, #24
 8013cea:	46a4      	mov	ip, r4
 8013cec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013cf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013cf4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013cf8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	b00c      	add	sp, #48	; 0x30
 8013d00:	bd70      	pop	{r4, r5, r6, pc}
 8013d02:	f44f 7516 	mov.w	r5, #600	; 0x258
 8013d06:	e7ee      	b.n	8013ce6 <rcl_take_request+0x4a>
 8013d08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013d0c:	f240 2359 	movw	r3, #601	; 0x259
 8013d10:	2a00      	cmp	r2, #0
 8013d12:	bf08      	it	eq
 8013d14:	461d      	moveq	r5, r3
 8013d16:	e7e6      	b.n	8013ce6 <rcl_take_request+0x4a>
 8013d18:	250b      	movs	r5, #11
 8013d1a:	e7e4      	b.n	8013ce6 <rcl_take_request+0x4a>

08013d1c <rcl_send_response>:
 8013d1c:	b170      	cbz	r0, 8013d3c <rcl_send_response+0x20>
 8013d1e:	6800      	ldr	r0, [r0, #0]
 8013d20:	b160      	cbz	r0, 8013d3c <rcl_send_response+0x20>
 8013d22:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013d26:	b148      	cbz	r0, 8013d3c <rcl_send_response+0x20>
 8013d28:	b169      	cbz	r1, 8013d46 <rcl_send_response+0x2a>
 8013d2a:	b510      	push	{r4, lr}
 8013d2c:	b14a      	cbz	r2, 8013d42 <rcl_send_response+0x26>
 8013d2e:	f002 fa57 	bl	80161e0 <rmw_send_response>
 8013d32:	b110      	cbz	r0, 8013d3a <rcl_send_response+0x1e>
 8013d34:	2802      	cmp	r0, #2
 8013d36:	bf18      	it	ne
 8013d38:	2001      	movne	r0, #1
 8013d3a:	bd10      	pop	{r4, pc}
 8013d3c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8013d40:	4770      	bx	lr
 8013d42:	200b      	movs	r0, #11
 8013d44:	bd10      	pop	{r4, pc}
 8013d46:	200b      	movs	r0, #11
 8013d48:	4770      	bx	lr
 8013d4a:	bf00      	nop

08013d4c <rcl_service_is_valid>:
 8013d4c:	b130      	cbz	r0, 8013d5c <rcl_service_is_valid+0x10>
 8013d4e:	6800      	ldr	r0, [r0, #0]
 8013d50:	b120      	cbz	r0, 8013d5c <rcl_service_is_valid+0x10>
 8013d52:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013d56:	3800      	subs	r0, #0
 8013d58:	bf18      	it	ne
 8013d5a:	2001      	movne	r0, #1
 8013d5c:	4770      	bx	lr
 8013d5e:	bf00      	nop

08013d60 <rcl_get_zero_initialized_subscription>:
 8013d60:	4b01      	ldr	r3, [pc, #4]	; (8013d68 <rcl_get_zero_initialized_subscription+0x8>)
 8013d62:	6818      	ldr	r0, [r3, #0]
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop
 8013d68:	08024d18 	.word	0x08024d18

08013d6c <rcl_subscription_init>:
 8013d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d70:	b088      	sub	sp, #32
 8013d72:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013d74:	b1ff      	cbz	r7, 8013db6 <rcl_subscription_init+0x4a>
 8013d76:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013d7a:	4605      	mov	r5, r0
 8013d7c:	460e      	mov	r6, r1
 8013d7e:	4691      	mov	r9, r2
 8013d80:	4650      	mov	r0, sl
 8013d82:	4698      	mov	r8, r3
 8013d84:	f001 f90e 	bl	8014fa4 <rcutils_allocator_is_valid>
 8013d88:	f080 0401 	eor.w	r4, r0, #1
 8013d8c:	b2e4      	uxtb	r4, r4
 8013d8e:	b994      	cbnz	r4, 8013db6 <rcl_subscription_init+0x4a>
 8013d90:	b18d      	cbz	r5, 8013db6 <rcl_subscription_init+0x4a>
 8013d92:	4630      	mov	r0, r6
 8013d94:	f7ff fd54 	bl	8013840 <rcl_node_is_valid>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	d055      	beq.n	8013e48 <rcl_subscription_init+0xdc>
 8013d9c:	f1b9 0f00 	cmp.w	r9, #0
 8013da0:	d009      	beq.n	8013db6 <rcl_subscription_init+0x4a>
 8013da2:	f1b8 0f00 	cmp.w	r8, #0
 8013da6:	d006      	beq.n	8013db6 <rcl_subscription_init+0x4a>
 8013da8:	682b      	ldr	r3, [r5, #0]
 8013daa:	b14b      	cbz	r3, 8013dc0 <rcl_subscription_init+0x54>
 8013dac:	2464      	movs	r4, #100	; 0x64
 8013dae:	4620      	mov	r0, r4
 8013db0:	b008      	add	sp, #32
 8013db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db6:	240b      	movs	r4, #11
 8013db8:	4620      	mov	r0, r4
 8013dba:	b008      	add	sp, #32
 8013dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013dc4:	aa07      	add	r2, sp, #28
 8013dc6:	9307      	str	r3, [sp, #28]
 8013dc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013dcc:	9205      	str	r2, [sp, #20]
 8013dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013dd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013dd6:	4641      	mov	r1, r8
 8013dd8:	4630      	mov	r0, r6
 8013dda:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013dde:	f007 fd1b 	bl	801b818 <rcl_node_resolve_name>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	d15f      	bne.n	8013ea6 <rcl_subscription_init+0x13a>
 8013de6:	21c8      	movs	r1, #200	; 0xc8
 8013de8:	2001      	movs	r0, #1
 8013dea:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8013dee:	4798      	blx	r3
 8013df0:	6028      	str	r0, [r5, #0]
 8013df2:	2800      	cmp	r0, #0
 8013df4:	d05f      	beq.n	8013eb6 <rcl_subscription_init+0x14a>
 8013df6:	4630      	mov	r0, r6
 8013df8:	f7ff fd44 	bl	8013884 <rcl_node_get_rmw_handle>
 8013dfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013e00:	4649      	mov	r1, r9
 8013e02:	9a07      	ldr	r2, [sp, #28]
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	463b      	mov	r3, r7
 8013e08:	682c      	ldr	r4, [r5, #0]
 8013e0a:	f002 fbd3 	bl	80165b4 <rmw_create_subscription>
 8013e0e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8013e12:	682c      	ldr	r4, [r5, #0]
 8013e14:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8013e18:	b348      	cbz	r0, 8013e6e <rcl_subscription_init+0x102>
 8013e1a:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8013e1e:	f002 fcbf 	bl	80167a0 <rmw_subscription_get_actual_qos>
 8013e22:	4604      	mov	r4, r0
 8013e24:	b9a8      	cbnz	r0, 8013e52 <rcl_subscription_init+0xe6>
 8013e26:	6828      	ldr	r0, [r5, #0]
 8013e28:	2270      	movs	r2, #112	; 0x70
 8013e2a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013e2e:	4639      	mov	r1, r7
 8013e30:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8013e34:	f00d f813 	bl	8020e5e <memcpy>
 8013e38:	9807      	ldr	r0, [sp, #28]
 8013e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013e3e:	4798      	blx	r3
 8013e40:	4620      	mov	r0, r4
 8013e42:	b008      	add	sp, #32
 8013e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e48:	24c8      	movs	r4, #200	; 0xc8
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	b008      	add	sp, #32
 8013e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e52:	682c      	ldr	r4, [r5, #0]
 8013e54:	b36c      	cbz	r4, 8013eb2 <rcl_subscription_init+0x146>
 8013e56:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8013e5a:	b14b      	cbz	r3, 8013e70 <rcl_subscription_init+0x104>
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	f7ff fd11 	bl	8013884 <rcl_node_get_rmw_handle>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8013e68:	f002 fcae 	bl	80167c8 <rmw_destroy_subscription>
 8013e6c:	682c      	ldr	r4, [r5, #0]
 8013e6e:	b194      	cbz	r4, 8013e96 <rcl_subscription_init+0x12a>
 8013e70:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8013e74:	4630      	mov	r0, r6
 8013e76:	f001 f895 	bl	8014fa4 <rcutils_allocator_is_valid>
 8013e7a:	b158      	cbz	r0, 8013e94 <rcl_subscription_init+0x128>
 8013e7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013e7e:	b148      	cbz	r0, 8013e94 <rcl_subscription_init+0x128>
 8013e80:	4631      	mov	r1, r6
 8013e82:	f001 fac5 	bl	8015410 <rmw_subscription_content_filter_options_fini>
 8013e86:	4606      	mov	r6, r0
 8013e88:	b9c8      	cbnz	r0, 8013ebe <rcl_subscription_init+0x152>
 8013e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013e8c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8013e8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013e90:	4798      	blx	r3
 8013e92:	66e6      	str	r6, [r4, #108]	; 0x6c
 8013e94:	682c      	ldr	r4, [r5, #0]
 8013e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e98:	4620      	mov	r0, r4
 8013e9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013e9c:	2401      	movs	r4, #1
 8013e9e:	4798      	blx	r3
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	602b      	str	r3, [r5, #0]
 8013ea4:	e7c8      	b.n	8013e38 <rcl_subscription_init+0xcc>
 8013ea6:	2867      	cmp	r0, #103	; 0x67
 8013ea8:	d007      	beq.n	8013eba <rcl_subscription_init+0x14e>
 8013eaa:	2869      	cmp	r0, #105	; 0x69
 8013eac:	d005      	beq.n	8013eba <rcl_subscription_init+0x14e>
 8013eae:	280a      	cmp	r0, #10
 8013eb0:	d001      	beq.n	8013eb6 <rcl_subscription_init+0x14a>
 8013eb2:	2401      	movs	r4, #1
 8013eb4:	e7c0      	b.n	8013e38 <rcl_subscription_init+0xcc>
 8013eb6:	240a      	movs	r4, #10
 8013eb8:	e7be      	b.n	8013e38 <rcl_subscription_init+0xcc>
 8013eba:	2467      	movs	r4, #103	; 0x67
 8013ebc:	e7bc      	b.n	8013e38 <rcl_subscription_init+0xcc>
 8013ebe:	f007 fa51 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 8013ec2:	682c      	ldr	r4, [r5, #0]
 8013ec4:	e7e7      	b.n	8013e96 <rcl_subscription_init+0x12a>
 8013ec6:	bf00      	nop

08013ec8 <rcl_subscription_get_default_options>:
 8013ec8:	b570      	push	{r4, r5, r6, lr}
 8013eca:	4d14      	ldr	r5, [pc, #80]	; (8013f1c <rcl_subscription_get_default_options+0x54>)
 8013ecc:	b08a      	sub	sp, #40	; 0x28
 8013ece:	4604      	mov	r4, r0
 8013ed0:	2250      	movs	r2, #80	; 0x50
 8013ed2:	4913      	ldr	r1, [pc, #76]	; (8013f20 <rcl_subscription_get_default_options+0x58>)
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	f00c ffc2 	bl	8020e5e <memcpy>
 8013eda:	a804      	add	r0, sp, #16
 8013edc:	f001 f854 	bl	8014f88 <rcutils_get_default_allocator>
 8013ee0:	f10d 0c10 	add.w	ip, sp, #16
 8013ee4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013ee8:	466e      	mov	r6, sp
 8013eea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013eee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013ef2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	f8ce 3000 	str.w	r3, [lr]
 8013efc:	f001 faa2 	bl	8015444 <rmw_get_default_subscription_options>
 8013f00:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013f04:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013f08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013f0c:	2270      	movs	r2, #112	; 0x70
 8013f0e:	4629      	mov	r1, r5
 8013f10:	4620      	mov	r0, r4
 8013f12:	f00c ffa4 	bl	8020e5e <memcpy>
 8013f16:	4620      	mov	r0, r4
 8013f18:	b00a      	add	sp, #40	; 0x28
 8013f1a:	bd70      	pop	{r4, r5, r6, pc}
 8013f1c:	200120e0 	.word	0x200120e0
 8013f20:	08024d20 	.word	0x08024d20

08013f24 <rcl_take>:
 8013f24:	2800      	cmp	r0, #0
 8013f26:	d049      	beq.n	8013fbc <rcl_take+0x98>
 8013f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f2c:	4615      	mov	r5, r2
 8013f2e:	6802      	ldr	r2, [r0, #0]
 8013f30:	b0a4      	sub	sp, #144	; 0x90
 8013f32:	4604      	mov	r4, r0
 8013f34:	2a00      	cmp	r2, #0
 8013f36:	d039      	beq.n	8013fac <rcl_take+0x88>
 8013f38:	461f      	mov	r7, r3
 8013f3a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8013f3e:	b3ab      	cbz	r3, 8013fac <rcl_take+0x88>
 8013f40:	460e      	mov	r6, r1
 8013f42:	2900      	cmp	r1, #0
 8013f44:	d038      	beq.n	8013fb8 <rcl_take+0x94>
 8013f46:	2d00      	cmp	r5, #0
 8013f48:	d03c      	beq.n	8013fc4 <rcl_take+0xa0>
 8013f4a:	a802      	add	r0, sp, #8
 8013f4c:	f04f 0800 	mov.w	r8, #0
 8013f50:	f001 fa7e 	bl	8015450 <rmw_get_zero_initialized_message_info>
 8013f54:	f10d 0c08 	add.w	ip, sp, #8
 8013f58:	46ae      	mov	lr, r5
 8013f5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f72:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013f76:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013f7a:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8013f7e:	462b      	mov	r3, r5
 8013f80:	6820      	ldr	r0, [r4, #0]
 8013f82:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8013f86:	4631      	mov	r1, r6
 8013f88:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013f8c:	9700      	str	r7, [sp, #0]
 8013f8e:	f002 fc7d 	bl	801688c <rmw_take_with_info>
 8013f92:	4603      	mov	r3, r0
 8013f94:	b9c0      	cbnz	r0, 8013fc8 <rcl_take+0xa4>
 8013f96:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8013f9a:	f240 1291 	movw	r2, #401	; 0x191
 8013f9e:	2900      	cmp	r1, #0
 8013fa0:	bf08      	it	eq
 8013fa2:	4613      	moveq	r3, r2
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	b024      	add	sp, #144	; 0x90
 8013fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	b024      	add	sp, #144	; 0x90
 8013fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fb8:	230b      	movs	r3, #11
 8013fba:	e7f3      	b.n	8013fa4 <rcl_take+0x80>
 8013fbc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	4770      	bx	lr
 8013fc4:	ad14      	add	r5, sp, #80	; 0x50
 8013fc6:	e7c0      	b.n	8013f4a <rcl_take+0x26>
 8013fc8:	f007 f9cc 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	e7e9      	b.n	8013fa4 <rcl_take+0x80>

08013fd0 <rcl_subscription_get_rmw_handle>:
 8013fd0:	b118      	cbz	r0, 8013fda <rcl_subscription_get_rmw_handle+0xa>
 8013fd2:	6800      	ldr	r0, [r0, #0]
 8013fd4:	b108      	cbz	r0, 8013fda <rcl_subscription_get_rmw_handle+0xa>
 8013fd6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013fda:	4770      	bx	lr

08013fdc <rcl_subscription_is_valid>:
 8013fdc:	b130      	cbz	r0, 8013fec <rcl_subscription_is_valid+0x10>
 8013fde:	6800      	ldr	r0, [r0, #0]
 8013fe0:	b120      	cbz	r0, 8013fec <rcl_subscription_is_valid+0x10>
 8013fe2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013fe6:	3800      	subs	r0, #0
 8013fe8:	bf18      	it	ne
 8013fea:	2001      	movne	r0, #1
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop

08013ff0 <_rclc_check_for_new_data>:
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	d046      	beq.n	8014082 <_rclc_check_for_new_data+0x92>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	b530      	push	{r4, r5, lr}
 8013ff8:	7802      	ldrb	r2, [r0, #0]
 8013ffa:	b085      	sub	sp, #20
 8013ffc:	2a0a      	cmp	r2, #10
 8013ffe:	d842      	bhi.n	8014086 <_rclc_check_for_new_data+0x96>
 8014000:	e8df f002 	tbb	[pc, r2]
 8014004:	14181212 	.word	0x14181212
 8014008:	06060614 	.word	0x06060614
 801400c:	2e1a      	.short	0x2e1a
 801400e:	16          	.byte	0x16
 801400f:	00          	.byte	0x00
 8014010:	6a0a      	ldr	r2, [r1, #32]
 8014012:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014014:	2000      	movs	r0, #0
 8014016:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801401a:	1a12      	subs	r2, r2, r0
 801401c:	bf18      	it	ne
 801401e:	2201      	movne	r2, #1
 8014020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014024:	b005      	add	sp, #20
 8014026:	bd30      	pop	{r4, r5, pc}
 8014028:	680a      	ldr	r2, [r1, #0]
 801402a:	e7f2      	b.n	8014012 <_rclc_check_for_new_data+0x22>
 801402c:	698a      	ldr	r2, [r1, #24]
 801402e:	e7f0      	b.n	8014012 <_rclc_check_for_new_data+0x22>
 8014030:	688a      	ldr	r2, [r1, #8]
 8014032:	e7ee      	b.n	8014012 <_rclc_check_for_new_data+0x22>
 8014034:	690a      	ldr	r2, [r1, #16]
 8014036:	e7ec      	b.n	8014012 <_rclc_check_for_new_data+0x22>
 8014038:	685c      	ldr	r4, [r3, #4]
 801403a:	4608      	mov	r0, r1
 801403c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014048:	f104 0110 	add.w	r1, r4, #16
 801404c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014050:	9500      	str	r5, [sp, #0]
 8014052:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8014056:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801405a:	f008 ff49 	bl	801cef0 <rcl_action_client_wait_set_get_entities_ready>
 801405e:	e7e1      	b.n	8014024 <_rclc_check_for_new_data+0x34>
 8014060:	685c      	ldr	r4, [r3, #4]
 8014062:	4608      	mov	r0, r1
 8014064:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8014068:	f104 0123 	add.w	r1, r4, #35	; 0x23
 801406c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8014070:	e9cd 2100 	strd	r2, r1, [sp]
 8014074:	f104 0220 	add.w	r2, r4, #32
 8014078:	f104 0110 	add.w	r1, r4, #16
 801407c:	f009 f950 	bl	801d320 <rcl_action_server_wait_set_get_entities_ready>
 8014080:	e7d0      	b.n	8014024 <_rclc_check_for_new_data+0x34>
 8014082:	200b      	movs	r0, #11
 8014084:	4770      	bx	lr
 8014086:	2001      	movs	r0, #1
 8014088:	e7cc      	b.n	8014024 <_rclc_check_for_new_data+0x34>
 801408a:	bf00      	nop

0801408c <_rclc_take_new_data>:
 801408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801408e:	b09b      	sub	sp, #108	; 0x6c
 8014090:	2800      	cmp	r0, #0
 8014092:	f000 8088 	beq.w	80141a6 <_rclc_take_new_data+0x11a>
 8014096:	7803      	ldrb	r3, [r0, #0]
 8014098:	4604      	mov	r4, r0
 801409a:	2b0a      	cmp	r3, #10
 801409c:	f200 8167 	bhi.w	801436e <_rclc_take_new_data+0x2e2>
 80140a0:	e8df f003 	tbb	[pc, r3]
 80140a4:	44152d2d 	.word	0x44152d2d
 80140a8:	19191944 	.word	0x19191944
 80140ac:	065a      	.short	0x065a
 80140ae:	15          	.byte	0x15
 80140af:	00          	.byte	0x00
 80140b0:	6840      	ldr	r0, [r0, #4]
 80140b2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	f040 80b2 	bne.w	8014220 <_rclc_take_new_data+0x194>
 80140bc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f040 80e4 	bne.w	801428e <_rclc_take_new_data+0x202>
 80140c6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d16f      	bne.n	80141ae <_rclc_take_new_data+0x122>
 80140ce:	2500      	movs	r5, #0
 80140d0:	4628      	mov	r0, r5
 80140d2:	b01b      	add	sp, #108	; 0x6c
 80140d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80140d8:	6a0b      	ldr	r3, [r1, #32]
 80140da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d0f5      	beq.n	80140ce <_rclc_take_new_data+0x42>
 80140e2:	6882      	ldr	r2, [r0, #8]
 80140e4:	f100 0110 	add.w	r1, r0, #16
 80140e8:	6840      	ldr	r0, [r0, #4]
 80140ea:	f7ff fdd7 	bl	8013c9c <rcl_take_request>
 80140ee:	4605      	mov	r5, r0
 80140f0:	2800      	cmp	r0, #0
 80140f2:	d0ec      	beq.n	80140ce <_rclc_take_new_data+0x42>
 80140f4:	f240 2359 	movw	r3, #601	; 0x259
 80140f8:	4298      	cmp	r0, r3
 80140fa:	d013      	beq.n	8014124 <_rclc_take_new_data+0x98>
 80140fc:	e029      	b.n	8014152 <_rclc_take_new_data+0xc6>
 80140fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014100:	680b      	ldr	r3, [r1, #0]
 8014102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d0e1      	beq.n	80140ce <_rclc_take_new_data+0x42>
 801410a:	2300      	movs	r3, #0
 801410c:	aa0a      	add	r2, sp, #40	; 0x28
 801410e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8014112:	f7ff ff07 	bl	8013f24 <rcl_take>
 8014116:	4605      	mov	r5, r0
 8014118:	2800      	cmp	r0, #0
 801411a:	d0d9      	beq.n	80140d0 <_rclc_take_new_data+0x44>
 801411c:	f240 1391 	movw	r3, #401	; 0x191
 8014120:	4298      	cmp	r0, r3
 8014122:	d116      	bne.n	8014152 <_rclc_take_new_data+0xc6>
 8014124:	2300      	movs	r3, #0
 8014126:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801412a:	e7d1      	b.n	80140d0 <_rclc_take_new_data+0x44>
 801412c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801412e:	698b      	ldr	r3, [r1, #24]
 8014130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d0ca      	beq.n	80140ce <_rclc_take_new_data+0x42>
 8014138:	6882      	ldr	r2, [r0, #8]
 801413a:	f100 0110 	add.w	r1, r0, #16
 801413e:	6840      	ldr	r0, [r0, #4]
 8014140:	f007 f8be 	bl	801b2c0 <rcl_take_response>
 8014144:	4605      	mov	r5, r0
 8014146:	2800      	cmp	r0, #0
 8014148:	d0c1      	beq.n	80140ce <_rclc_take_new_data+0x42>
 801414a:	f240 13f5 	movw	r3, #501	; 0x1f5
 801414e:	4298      	cmp	r0, r3
 8014150:	d0be      	beq.n	80140d0 <_rclc_take_new_data+0x44>
 8014152:	f000 ff65 	bl	8015020 <rcutils_reset_error>
 8014156:	e7bb      	b.n	80140d0 <_rclc_take_new_data+0x44>
 8014158:	6840      	ldr	r0, [r0, #4]
 801415a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801415e:	2b00      	cmp	r3, #0
 8014160:	d17d      	bne.n	801425e <_rclc_take_new_data+0x1d2>
 8014162:	69c3      	ldr	r3, [r0, #28]
 8014164:	b11b      	cbz	r3, 801416e <_rclc_take_new_data+0xe2>
 8014166:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801416a:	2b00      	cmp	r3, #0
 801416c:	d144      	bne.n	80141f8 <_rclc_take_new_data+0x16c>
 801416e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014172:	2b00      	cmp	r3, #0
 8014174:	f040 80ac 	bne.w	80142d0 <_rclc_take_new_data+0x244>
 8014178:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 801417c:	2b00      	cmp	r3, #0
 801417e:	d0a6      	beq.n	80140ce <_rclc_take_new_data+0x42>
 8014180:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014182:	a90a      	add	r1, sp, #40	; 0x28
 8014184:	3010      	adds	r0, #16
 8014186:	f008 fd8b 	bl	801cca0 <rcl_action_take_result_response>
 801418a:	4605      	mov	r5, r0
 801418c:	2800      	cmp	r0, #0
 801418e:	d1e0      	bne.n	8014152 <_rclc_take_new_data+0xc6>
 8014190:	6860      	ldr	r0, [r4, #4]
 8014192:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014196:	f009 f9f3 	bl	801d580 <rclc_action_find_handle_by_result_request_sequence_number>
 801419a:	2800      	cmp	r0, #0
 801419c:	d098      	beq.n	80140d0 <_rclc_take_new_data+0x44>
 801419e:	2301      	movs	r3, #1
 80141a0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80141a4:	e794      	b.n	80140d0 <_rclc_take_new_data+0x44>
 80141a6:	250b      	movs	r5, #11
 80141a8:	4628      	mov	r0, r5
 80141aa:	b01b      	add	sp, #108	; 0x6c
 80141ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141ae:	ae04      	add	r6, sp, #16
 80141b0:	3010      	adds	r0, #16
 80141b2:	aa0a      	add	r2, sp, #40	; 0x28
 80141b4:	4631      	mov	r1, r6
 80141b6:	f008 ffe7 	bl	801d188 <rcl_action_take_cancel_request>
 80141ba:	4605      	mov	r5, r0
 80141bc:	2800      	cmp	r0, #0
 80141be:	d1c8      	bne.n	8014152 <_rclc_take_new_data+0xc6>
 80141c0:	a90a      	add	r1, sp, #40	; 0x28
 80141c2:	6860      	ldr	r0, [r4, #4]
 80141c4:	f009 f99c 	bl	801d500 <rclc_action_find_goal_handle_by_uuid>
 80141c8:	4607      	mov	r7, r0
 80141ca:	2800      	cmp	r0, #0
 80141cc:	f000 80bb 	beq.w	8014346 <_rclc_take_new_data+0x2ba>
 80141d0:	2101      	movs	r1, #1
 80141d2:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80141d6:	f009 f91d 	bl	801d414 <rcl_action_transition_goal_state>
 80141da:	2803      	cmp	r0, #3
 80141dc:	4684      	mov	ip, r0
 80141de:	f040 80a7 	bne.w	8014330 <_rclc_take_new_data+0x2a4>
 80141e2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80141e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80141e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80141ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80141f2:	f887 c008 	strb.w	ip, [r7, #8]
 80141f6:	e76b      	b.n	80140d0 <_rclc_take_new_data+0x44>
 80141f8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80141fa:	3010      	adds	r0, #16
 80141fc:	f008 fdd0 	bl	801cda0 <rcl_action_take_feedback>
 8014200:	4605      	mov	r5, r0
 8014202:	2800      	cmp	r0, #0
 8014204:	d1a5      	bne.n	8014152 <_rclc_take_new_data+0xc6>
 8014206:	6860      	ldr	r0, [r4, #4]
 8014208:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801420a:	f009 f979 	bl	801d500 <rclc_action_find_goal_handle_by_uuid>
 801420e:	4603      	mov	r3, r0
 8014210:	2800      	cmp	r0, #0
 8014212:	f000 80a3 	beq.w	801435c <_rclc_take_new_data+0x2d0>
 8014216:	2201      	movs	r2, #1
 8014218:	6860      	ldr	r0, [r4, #4]
 801421a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 801421e:	e7a6      	b.n	801416e <_rclc_take_new_data+0xe2>
 8014220:	f009 f948 	bl	801d4b4 <rclc_action_take_goal_handle>
 8014224:	4606      	mov	r6, r0
 8014226:	6860      	ldr	r0, [r4, #4]
 8014228:	2e00      	cmp	r6, #0
 801422a:	f43f af47 	beq.w	80140bc <_rclc_take_new_data+0x30>
 801422e:	6070      	str	r0, [r6, #4]
 8014230:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8014234:	69f2      	ldr	r2, [r6, #28]
 8014236:	3010      	adds	r0, #16
 8014238:	f008 fef0 	bl	801d01c <rcl_action_take_goal_request>
 801423c:	4605      	mov	r5, r0
 801423e:	2800      	cmp	r0, #0
 8014240:	f040 808e 	bne.w	8014360 <_rclc_take_new_data+0x2d4>
 8014244:	69f7      	ldr	r7, [r6, #28]
 8014246:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014248:	7235      	strb	r5, [r6, #8]
 801424a:	f8c6 0009 	str.w	r0, [r6, #9]
 801424e:	f8c6 100d 	str.w	r1, [r6, #13]
 8014252:	6860      	ldr	r0, [r4, #4]
 8014254:	f8c6 2011 	str.w	r2, [r6, #17]
 8014258:	f8c6 3015 	str.w	r3, [r6, #21]
 801425c:	e72e      	b.n	80140bc <_rclc_take_new_data+0x30>
 801425e:	aa04      	add	r2, sp, #16
 8014260:	a90a      	add	r1, sp, #40	; 0x28
 8014262:	3010      	adds	r0, #16
 8014264:	f008 fca4 	bl	801cbb0 <rcl_action_take_goal_response>
 8014268:	4605      	mov	r5, r0
 801426a:	2800      	cmp	r0, #0
 801426c:	f47f af71 	bne.w	8014152 <_rclc_take_new_data+0xc6>
 8014270:	6860      	ldr	r0, [r4, #4]
 8014272:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014276:	f009 f971 	bl	801d55c <rclc_action_find_handle_by_goal_request_sequence_number>
 801427a:	b130      	cbz	r0, 801428a <_rclc_take_new_data+0x1fe>
 801427c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014280:	2201      	movs	r2, #1
 8014282:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8014286:	f880 2020 	strb.w	r2, [r0, #32]
 801428a:	6860      	ldr	r0, [r4, #4]
 801428c:	e769      	b.n	8014162 <_rclc_take_new_data+0xd6>
 801428e:	3010      	adds	r0, #16
 8014290:	aa04      	add	r2, sp, #16
 8014292:	a90a      	add	r1, sp, #40	; 0x28
 8014294:	f008 ff38 	bl	801d108 <rcl_action_take_result_request>
 8014298:	4605      	mov	r5, r0
 801429a:	2800      	cmp	r0, #0
 801429c:	f47f af59 	bne.w	8014152 <_rclc_take_new_data+0xc6>
 80142a0:	a904      	add	r1, sp, #16
 80142a2:	6860      	ldr	r0, [r4, #4]
 80142a4:	f009 f92c 	bl	801d500 <rclc_action_find_goal_handle_by_uuid>
 80142a8:	4607      	mov	r7, r0
 80142aa:	b160      	cbz	r0, 80142c6 <_rclc_take_new_data+0x23a>
 80142ac:	ad0a      	add	r5, sp, #40	; 0x28
 80142ae:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80142b2:	f04f 0c02 	mov.w	ip, #2
 80142b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80142ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80142be:	e886 0003 	stmia.w	r6, {r0, r1}
 80142c2:	f887 c008 	strb.w	ip, [r7, #8]
 80142c6:	6860      	ldr	r0, [r4, #4]
 80142c8:	2300      	movs	r3, #0
 80142ca:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80142ce:	e6fa      	b.n	80140c6 <_rclc_take_new_data+0x3a>
 80142d0:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80142d4:	a90a      	add	r1, sp, #40	; 0x28
 80142d6:	3010      	adds	r0, #16
 80142d8:	f008 fd22 	bl	801cd20 <rcl_action_take_cancel_response>
 80142dc:	4605      	mov	r5, r0
 80142de:	2800      	cmp	r0, #0
 80142e0:	f47f af37 	bne.w	8014152 <_rclc_take_new_data+0xc6>
 80142e4:	6860      	ldr	r0, [r4, #4]
 80142e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80142ea:	f009 f95b 	bl	801d5a4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80142ee:	4606      	mov	r6, r0
 80142f0:	6860      	ldr	r0, [r4, #4]
 80142f2:	2e00      	cmp	r6, #0
 80142f4:	f43f af40 	beq.w	8014178 <_rclc_take_new_data+0xec>
 80142f8:	2701      	movs	r7, #1
 80142fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80142fc:	84b7      	strh	r7, [r6, #36]	; 0x24
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f43f af3a 	beq.w	8014178 <_rclc_take_new_data+0xec>
 8014304:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014306:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801430a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801430e:	f009 f8f7 	bl	801d500 <rclc_action_find_goal_handle_by_uuid>
 8014312:	b138      	cbz	r0, 8014324 <_rclc_take_new_data+0x298>
 8014314:	6860      	ldr	r0, [r4, #4]
 8014316:	3501      	adds	r5, #1
 8014318:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 801431c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801431e:	42ab      	cmp	r3, r5
 8014320:	d8f0      	bhi.n	8014304 <_rclc_take_new_data+0x278>
 8014322:	e729      	b.n	8014178 <_rclc_take_new_data+0xec>
 8014324:	6860      	ldr	r0, [r4, #4]
 8014326:	3501      	adds	r5, #1
 8014328:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801432a:	42ab      	cmp	r3, r5
 801432c:	d8ea      	bhi.n	8014304 <_rclc_take_new_data+0x278>
 801432e:	e723      	b.n	8014178 <_rclc_take_new_data+0xec>
 8014330:	ab06      	add	r3, sp, #24
 8014332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014334:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014338:	2103      	movs	r1, #3
 801433a:	6860      	ldr	r0, [r4, #4]
 801433c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014340:	f009 f9a6 	bl	801d690 <rclc_action_server_goal_cancel_reject>
 8014344:	e6c4      	b.n	80140d0 <_rclc_take_new_data+0x44>
 8014346:	ab06      	add	r3, sp, #24
 8014348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801434a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801434e:	2102      	movs	r1, #2
 8014350:	6860      	ldr	r0, [r4, #4]
 8014352:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014356:	f009 f99b 	bl	801d690 <rclc_action_server_goal_cancel_reject>
 801435a:	e6b9      	b.n	80140d0 <_rclc_take_new_data+0x44>
 801435c:	6860      	ldr	r0, [r4, #4]
 801435e:	e706      	b.n	801416e <_rclc_take_new_data+0xe2>
 8014360:	4631      	mov	r1, r6
 8014362:	6860      	ldr	r0, [r4, #4]
 8014364:	f009 f8b6 	bl	801d4d4 <rclc_action_remove_used_goal_handle>
 8014368:	f000 fe5a 	bl	8015020 <rcutils_reset_error>
 801436c:	e6b0      	b.n	80140d0 <_rclc_take_new_data+0x44>
 801436e:	2501      	movs	r5, #1
 8014370:	e6ae      	b.n	80140d0 <_rclc_take_new_data+0x44>
 8014372:	bf00      	nop

08014374 <_rclc_execute.part.0>:
 8014374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014376:	7803      	ldrb	r3, [r0, #0]
 8014378:	b085      	sub	sp, #20
 801437a:	4604      	mov	r4, r0
 801437c:	2b0a      	cmp	r3, #10
 801437e:	f200 8139 	bhi.w	80145f4 <_rclc_execute.part.0+0x280>
 8014382:	e8df f003 	tbb	[pc, r3]
 8014386:	4268      	.short	0x4268
 8014388:	06a75b4d 	.word	0x06a75b4d
 801438c:	721d0606 	.word	0x721d0606
 8014390:	62          	.byte	0x62
 8014391:	00          	.byte	0x00
 8014392:	2b06      	cmp	r3, #6
 8014394:	f000 8126 	beq.w	80145e4 <_rclc_execute.part.0+0x270>
 8014398:	2b07      	cmp	r3, #7
 801439a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801439c:	f040 811c 	bne.w	80145d8 <_rclc_execute.part.0+0x264>
 80143a0:	f104 0510 	add.w	r5, r4, #16
 80143a4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 80143a8:	6880      	ldr	r0, [r0, #8]
 80143aa:	4798      	blx	r3
 80143ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80143ae:	4629      	mov	r1, r5
 80143b0:	6860      	ldr	r0, [r4, #4]
 80143b2:	f7ff fcb3 	bl	8013d1c <rcl_send_response>
 80143b6:	4604      	mov	r4, r0
 80143b8:	b378      	cbz	r0, 801441a <_rclc_execute.part.0+0xa6>
 80143ba:	f000 fe31 	bl	8015020 <rcutils_reset_error>
 80143be:	e02c      	b.n	801441a <_rclc_execute.part.0+0xa6>
 80143c0:	6840      	ldr	r0, [r0, #4]
 80143c2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	f000 808e 	beq.w	80144e8 <_rclc_execute.part.0+0x174>
 80143cc:	2600      	movs	r6, #0
 80143ce:	2701      	movs	r7, #1
 80143d0:	e004      	b.n	80143dc <_rclc_execute.part.0+0x68>
 80143d2:	f009 f849 	bl	801d468 <rclc_action_send_result_request>
 80143d6:	b998      	cbnz	r0, 8014400 <_rclc_execute.part.0+0x8c>
 80143d8:	722f      	strb	r7, [r5, #8]
 80143da:	6860      	ldr	r0, [r4, #4]
 80143dc:	f009 f8f4 	bl	801d5c8 <rclc_action_find_first_handle_with_goal_response>
 80143e0:	4605      	mov	r5, r0
 80143e2:	2800      	cmp	r0, #0
 80143e4:	d07f      	beq.n	80144e6 <_rclc_execute.part.0+0x172>
 80143e6:	6863      	ldr	r3, [r4, #4]
 80143e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80143ea:	699b      	ldr	r3, [r3, #24]
 80143ec:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 80143f0:	f885 6020 	strb.w	r6, [r5, #32]
 80143f4:	4798      	blx	r3
 80143f6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80143fa:	4628      	mov	r0, r5
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d1e8      	bne.n	80143d2 <_rclc_execute.part.0+0x5e>
 8014400:	6860      	ldr	r0, [r4, #4]
 8014402:	4629      	mov	r1, r5
 8014404:	f009 f866 	bl	801d4d4 <rclc_action_remove_used_goal_handle>
 8014408:	e7e7      	b.n	80143da <_rclc_execute.part.0+0x66>
 801440a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801440e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8014412:	b100      	cbz	r0, 8014416 <_rclc_execute.part.0+0xa2>
 8014414:	68a0      	ldr	r0, [r4, #8]
 8014416:	2400      	movs	r4, #0
 8014418:	4798      	blx	r3
 801441a:	4620      	mov	r0, r4
 801441c:	b005      	add	sp, #20
 801441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014420:	6840      	ldr	r0, [r0, #4]
 8014422:	f007 fc7b 	bl	801bd1c <rcl_timer_call>
 8014426:	f240 3321 	movw	r3, #801	; 0x321
 801442a:	4604      	mov	r4, r0
 801442c:	4298      	cmp	r0, r3
 801442e:	d001      	beq.n	8014434 <_rclc_execute.part.0+0xc0>
 8014430:	2800      	cmp	r0, #0
 8014432:	d1c2      	bne.n	80143ba <_rclc_execute.part.0+0x46>
 8014434:	2400      	movs	r4, #0
 8014436:	4620      	mov	r0, r4
 8014438:	b005      	add	sp, #20
 801443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801443c:	2400      	movs	r4, #0
 801443e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014440:	6880      	ldr	r0, [r0, #8]
 8014442:	4798      	blx	r3
 8014444:	4620      	mov	r0, r4
 8014446:	b005      	add	sp, #20
 8014448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801444a:	2400      	movs	r4, #0
 801444c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801444e:	4798      	blx	r3
 8014450:	4620      	mov	r0, r4
 8014452:	b005      	add	sp, #20
 8014454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014456:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801445a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801445c:	b100      	cbz	r0, 8014460 <_rclc_execute.part.0+0xec>
 801445e:	68a0      	ldr	r0, [r4, #8]
 8014460:	2400      	movs	r4, #0
 8014462:	4798      	blx	r3
 8014464:	4620      	mov	r0, r4
 8014466:	b005      	add	sp, #20
 8014468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801446a:	6840      	ldr	r0, [r0, #4]
 801446c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014470:	bb3b      	cbnz	r3, 80144c2 <_rclc_execute.part.0+0x14e>
 8014472:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d07d      	beq.n	8014576 <_rclc_execute.part.0+0x202>
 801447a:	f640 0634 	movw	r6, #2100	; 0x834
 801447e:	2701      	movs	r7, #1
 8014480:	e007      	b.n	8014492 <_rclc_execute.part.0+0x11e>
 8014482:	4628      	mov	r0, r5
 8014484:	f009 f8b8 	bl	801d5f8 <rclc_action_server_response_goal_request>
 8014488:	4629      	mov	r1, r5
 801448a:	6860      	ldr	r0, [r4, #4]
 801448c:	f009 f822 	bl	801d4d4 <rclc_action_remove_used_goal_handle>
 8014490:	6860      	ldr	r0, [r4, #4]
 8014492:	2100      	movs	r1, #0
 8014494:	f009 f84a 	bl	801d52c <rclc_action_find_first_handle_by_status>
 8014498:	4605      	mov	r5, r0
 801449a:	2800      	cmp	r0, #0
 801449c:	d068      	beq.n	8014570 <_rclc_execute.part.0+0x1fc>
 801449e:	6863      	ldr	r3, [r4, #4]
 80144a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80144a2:	699b      	ldr	r3, [r3, #24]
 80144a4:	4798      	blx	r3
 80144a6:	42b0      	cmp	r0, r6
 80144a8:	f04f 0100 	mov.w	r1, #0
 80144ac:	d1e9      	bne.n	8014482 <_rclc_execute.part.0+0x10e>
 80144ae:	2101      	movs	r1, #1
 80144b0:	4628      	mov	r0, r5
 80144b2:	f009 f8a1 	bl	801d5f8 <rclc_action_server_response_goal_request>
 80144b6:	722f      	strb	r7, [r5, #8]
 80144b8:	e7ea      	b.n	8014490 <_rclc_execute.part.0+0x11c>
 80144ba:	6848      	ldr	r0, [r1, #4]
 80144bc:	f009 f80a 	bl	801d4d4 <rclc_action_remove_used_goal_handle>
 80144c0:	6860      	ldr	r0, [r4, #4]
 80144c2:	f009 f83f 	bl	801d544 <rclc_action_find_first_terminated_handle>
 80144c6:	4601      	mov	r1, r0
 80144c8:	2800      	cmp	r0, #0
 80144ca:	d1f6      	bne.n	80144ba <_rclc_execute.part.0+0x146>
 80144cc:	6860      	ldr	r0, [r4, #4]
 80144ce:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80144d2:	e7ce      	b.n	8014472 <_rclc_execute.part.0+0xfe>
 80144d4:	2400      	movs	r4, #0
 80144d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80144d8:	f100 0110 	add.w	r1, r0, #16
 80144dc:	6880      	ldr	r0, [r0, #8]
 80144de:	4798      	blx	r3
 80144e0:	4620      	mov	r0, r4
 80144e2:	b005      	add	sp, #20
 80144e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144e6:	6860      	ldr	r0, [r4, #4]
 80144e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80144ec:	b18b      	cbz	r3, 8014512 <_rclc_execute.part.0+0x19e>
 80144ee:	68c5      	ldr	r5, [r0, #12]
 80144f0:	b32d      	cbz	r5, 801453e <_rclc_execute.part.0+0x1ca>
 80144f2:	2600      	movs	r6, #0
 80144f4:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80144f8:	b143      	cbz	r3, 801450c <_rclc_execute.part.0+0x198>
 80144fa:	69c3      	ldr	r3, [r0, #28]
 80144fc:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8014500:	b123      	cbz	r3, 801450c <_rclc_execute.part.0+0x198>
 8014502:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014504:	4628      	mov	r0, r5
 8014506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014508:	4798      	blx	r3
 801450a:	6860      	ldr	r0, [r4, #4]
 801450c:	682d      	ldr	r5, [r5, #0]
 801450e:	2d00      	cmp	r5, #0
 8014510:	d1f0      	bne.n	80144f4 <_rclc_execute.part.0+0x180>
 8014512:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014516:	b193      	cbz	r3, 801453e <_rclc_execute.part.0+0x1ca>
 8014518:	68c5      	ldr	r5, [r0, #12]
 801451a:	b185      	cbz	r5, 801453e <_rclc_execute.part.0+0x1ca>
 801451c:	2600      	movs	r6, #0
 801451e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8014522:	b14b      	cbz	r3, 8014538 <_rclc_execute.part.0+0x1c4>
 8014524:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014526:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 801452a:	b12b      	cbz	r3, 8014538 <_rclc_execute.part.0+0x1c4>
 801452c:	4628      	mov	r0, r5
 801452e:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8014532:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014534:	4798      	blx	r3
 8014536:	6860      	ldr	r0, [r4, #4]
 8014538:	682d      	ldr	r5, [r5, #0]
 801453a:	2d00      	cmp	r5, #0
 801453c:	d1ef      	bne.n	801451e <_rclc_execute.part.0+0x1aa>
 801453e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8014542:	2b00      	cmp	r3, #0
 8014544:	f43f af76 	beq.w	8014434 <_rclc_execute.part.0+0xc0>
 8014548:	2700      	movs	r7, #0
 801454a:	e00b      	b.n	8014564 <_rclc_execute.part.0+0x1f0>
 801454c:	6863      	ldr	r3, [r4, #4]
 801454e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014550:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014552:	6a1e      	ldr	r6, [r3, #32]
 8014554:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8014558:	47b0      	blx	r6
 801455a:	6860      	ldr	r0, [r4, #4]
 801455c:	4629      	mov	r1, r5
 801455e:	f008 ffb9 	bl	801d4d4 <rclc_action_remove_used_goal_handle>
 8014562:	6860      	ldr	r0, [r4, #4]
 8014564:	f009 f83c 	bl	801d5e0 <rclc_action_find_first_handle_with_result_response>
 8014568:	4605      	mov	r5, r0
 801456a:	2800      	cmp	r0, #0
 801456c:	d1ee      	bne.n	801454c <_rclc_execute.part.0+0x1d8>
 801456e:	e761      	b.n	8014434 <_rclc_execute.part.0+0xc0>
 8014570:	6860      	ldr	r0, [r4, #4]
 8014572:	f880 5020 	strb.w	r5, [r0, #32]
 8014576:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801457a:	2b00      	cmp	r3, #0
 801457c:	f43f af5a 	beq.w	8014434 <_rclc_execute.part.0+0xc0>
 8014580:	68c5      	ldr	r5, [r0, #12]
 8014582:	b1b5      	cbz	r5, 80145b2 <_rclc_execute.part.0+0x23e>
 8014584:	2602      	movs	r6, #2
 8014586:	e001      	b.n	801458c <_rclc_execute.part.0+0x218>
 8014588:	682d      	ldr	r5, [r5, #0]
 801458a:	b195      	cbz	r5, 80145b2 <_rclc_execute.part.0+0x23e>
 801458c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8014590:	2b03      	cmp	r3, #3
 8014592:	d1f9      	bne.n	8014588 <_rclc_execute.part.0+0x214>
 8014594:	69c3      	ldr	r3, [r0, #28]
 8014596:	4628      	mov	r0, r5
 8014598:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801459a:	4798      	blx	r3
 801459c:	4603      	mov	r3, r0
 801459e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80145a2:	4628      	mov	r0, r5
 80145a4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80145a8:	b143      	cbz	r3, 80145bc <_rclc_execute.part.0+0x248>
 80145aa:	f009 f845 	bl	801d638 <rclc_action_server_goal_cancel_accept>
 80145ae:	6860      	ldr	r0, [r4, #4]
 80145b0:	e7ea      	b.n	8014588 <_rclc_execute.part.0+0x214>
 80145b2:	2300      	movs	r3, #0
 80145b4:	461c      	mov	r4, r3
 80145b6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80145ba:	e72e      	b.n	801441a <_rclc_execute.part.0+0xa6>
 80145bc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80145be:	f105 0758 	add.w	r7, r5, #88	; 0x58
 80145c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80145c6:	2101      	movs	r1, #1
 80145c8:	6860      	ldr	r0, [r4, #4]
 80145ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145ce:	f009 f85f 	bl	801d690 <rclc_action_server_goal_cancel_reject>
 80145d2:	722e      	strb	r6, [r5, #8]
 80145d4:	6860      	ldr	r0, [r4, #4]
 80145d6:	e7d7      	b.n	8014588 <_rclc_execute.part.0+0x214>
 80145d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80145da:	f104 0510 	add.w	r5, r4, #16
 80145de:	6880      	ldr	r0, [r0, #8]
 80145e0:	4798      	blx	r3
 80145e2:	e6e3      	b.n	80143ac <_rclc_execute.part.0+0x38>
 80145e4:	f100 0510 	add.w	r5, r0, #16
 80145e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80145ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80145ec:	4629      	mov	r1, r5
 80145ee:	6880      	ldr	r0, [r0, #8]
 80145f0:	4798      	blx	r3
 80145f2:	e6db      	b.n	80143ac <_rclc_execute.part.0+0x38>
 80145f4:	2401      	movs	r4, #1
 80145f6:	e710      	b.n	801441a <_rclc_execute.part.0+0xa6>

080145f8 <rclc_executor_trigger_any>:
 80145f8:	2800      	cmp	r0, #0
 80145fa:	d03d      	beq.n	8014678 <rclc_executor_trigger_any+0x80>
 80145fc:	2900      	cmp	r1, #0
 80145fe:	d03c      	beq.n	801467a <rclc_executor_trigger_any+0x82>
 8014600:	4603      	mov	r3, r0
 8014602:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8014606:	2200      	movs	r2, #0
 8014608:	2800      	cmp	r0, #0
 801460a:	d035      	beq.n	8014678 <rclc_executor_trigger_any+0x80>
 801460c:	b430      	push	{r4, r5}
 801460e:	f893 c000 	ldrb.w	ip, [r3]
 8014612:	f1bc 0f08 	cmp.w	ip, #8
 8014616:	d11d      	bne.n	8014654 <rclc_executor_trigger_any+0x5c>
 8014618:	685c      	ldr	r4, [r3, #4]
 801461a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 801461c:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8014620:	d105      	bne.n	801462e <rclc_executor_trigger_any+0x36>
 8014622:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8014626:	b910      	cbnz	r0, 801462e <rclc_executor_trigger_any+0x36>
 8014628:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801462c:	b128      	cbz	r0, 801463a <rclc_executor_trigger_any+0x42>
 801462e:	bc30      	pop	{r4, r5}
 8014630:	4770      	bx	lr
 8014632:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8014636:	2800      	cmp	r0, #0
 8014638:	d1f9      	bne.n	801462e <rclc_executor_trigger_any+0x36>
 801463a:	3201      	adds	r2, #1
 801463c:	3340      	adds	r3, #64	; 0x40
 801463e:	4291      	cmp	r1, r2
 8014640:	d017      	beq.n	8014672 <rclc_executor_trigger_any+0x7a>
 8014642:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8014646:	2800      	cmp	r0, #0
 8014648:	d0f1      	beq.n	801462e <rclc_executor_trigger_any+0x36>
 801464a:	f893 c000 	ldrb.w	ip, [r3]
 801464e:	f1bc 0f08 	cmp.w	ip, #8
 8014652:	d0e1      	beq.n	8014618 <rclc_executor_trigger_any+0x20>
 8014654:	f1bc 0f09 	cmp.w	ip, #9
 8014658:	d1eb      	bne.n	8014632 <rclc_executor_trigger_any+0x3a>
 801465a:	685c      	ldr	r4, [r3, #4]
 801465c:	6a25      	ldr	r5, [r4, #32]
 801465e:	2d00      	cmp	r5, #0
 8014660:	d1e5      	bne.n	801462e <rclc_executor_trigger_any+0x36>
 8014662:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8014666:	2800      	cmp	r0, #0
 8014668:	d1e1      	bne.n	801462e <rclc_executor_trigger_any+0x36>
 801466a:	3201      	adds	r2, #1
 801466c:	3340      	adds	r3, #64	; 0x40
 801466e:	4291      	cmp	r1, r2
 8014670:	d1e7      	bne.n	8014642 <rclc_executor_trigger_any+0x4a>
 8014672:	2000      	movs	r0, #0
 8014674:	bc30      	pop	{r4, r5}
 8014676:	4770      	bx	lr
 8014678:	4770      	bx	lr
 801467a:	4608      	mov	r0, r1
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <rclc_executor_get_zero_initialized_executor>:
 8014680:	b510      	push	{r4, lr}
 8014682:	4604      	mov	r4, r0
 8014684:	2288      	movs	r2, #136	; 0x88
 8014686:	4902      	ldr	r1, [pc, #8]	; (8014690 <rclc_executor_get_zero_initialized_executor+0x10>)
 8014688:	f00c fbe9 	bl	8020e5e <memcpy>
 801468c:	4620      	mov	r0, r4
 801468e:	bd10      	pop	{r4, pc}
 8014690:	08024d70 	.word	0x08024d70
 8014694:	00000000 	.word	0x00000000

08014698 <rclc_executor_init>:
 8014698:	2900      	cmp	r1, #0
 801469a:	d06a      	beq.n	8014772 <rclc_executor_init+0xda>
 801469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a0:	4605      	mov	r5, r0
 80146a2:	b0b0      	sub	sp, #192	; 0xc0
 80146a4:	2800      	cmp	r0, #0
 80146a6:	d05c      	beq.n	8014762 <rclc_executor_init+0xca>
 80146a8:	4616      	mov	r6, r2
 80146aa:	4618      	mov	r0, r3
 80146ac:	4688      	mov	r8, r1
 80146ae:	461f      	mov	r7, r3
 80146b0:	f000 fc78 	bl	8014fa4 <rcutils_allocator_is_valid>
 80146b4:	2e00      	cmp	r6, #0
 80146b6:	d054      	beq.n	8014762 <rclc_executor_init+0xca>
 80146b8:	f080 0401 	eor.w	r4, r0, #1
 80146bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80146c0:	d14f      	bne.n	8014762 <rclc_executor_init+0xca>
 80146c2:	2288      	movs	r2, #136	; 0x88
 80146c4:	4930      	ldr	r1, [pc, #192]	; (8014788 <rclc_executor_init+0xf0>)
 80146c6:	a80e      	add	r0, sp, #56	; 0x38
 80146c8:	f00c fbc9 	bl	8020e5e <memcpy>
 80146cc:	a90e      	add	r1, sp, #56	; 0x38
 80146ce:	2288      	movs	r2, #136	; 0x88
 80146d0:	4628      	mov	r0, r5
 80146d2:	f00c fbc4 	bl	8020e5e <memcpy>
 80146d6:	4668      	mov	r0, sp
 80146d8:	f8c5 8000 	str.w	r8, [r5]
 80146dc:	60ae      	str	r6, [r5, #8]
 80146de:	f007 fc93 	bl	801c008 <rcl_get_zero_initialized_wait_set>
 80146e2:	46ec      	mov	ip, sp
 80146e4:	f105 0e14 	add.w	lr, r5, #20
 80146e8:	f8d7 8000 	ldr.w	r8, [r7]
 80146ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80146f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80146f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80146f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80146fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014700:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014780 <rclc_executor_init+0xe8>
 8014704:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014708:	f8dc 3000 	ldr.w	r3, [ip]
 801470c:	01b0      	lsls	r0, r6, #6
 801470e:	6939      	ldr	r1, [r7, #16]
 8014710:	f8ce 3000 	str.w	r3, [lr]
 8014714:	612f      	str	r7, [r5, #16]
 8014716:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 801471a:	47c0      	blx	r8
 801471c:	6068      	str	r0, [r5, #4]
 801471e:	b908      	cbnz	r0, 8014724 <rclc_executor_init+0x8c>
 8014720:	e029      	b.n	8014776 <rclc_executor_init+0xde>
 8014722:	6868      	ldr	r0, [r5, #4]
 8014724:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014728:	3401      	adds	r4, #1
 801472a:	4631      	mov	r1, r6
 801472c:	f000 fac0 	bl	8014cb0 <rclc_executor_handle_init>
 8014730:	42a6      	cmp	r6, r4
 8014732:	d8f6      	bhi.n	8014722 <rclc_executor_init+0x8a>
 8014734:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014738:	f000 faae 	bl	8014c98 <rclc_executor_handle_counters_zero_init>
 801473c:	4a13      	ldr	r2, [pc, #76]	; (801478c <rclc_executor_init+0xf4>)
 801473e:	2300      	movs	r3, #0
 8014740:	6868      	ldr	r0, [r5, #4]
 8014742:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8014746:	b168      	cbz	r0, 8014764 <rclc_executor_init+0xcc>
 8014748:	68ab      	ldr	r3, [r5, #8]
 801474a:	b173      	cbz	r3, 801476a <rclc_executor_init+0xd2>
 801474c:	692a      	ldr	r2, [r5, #16]
 801474e:	fab2 f382 	clz	r3, r2
 8014752:	095b      	lsrs	r3, r3, #5
 8014754:	b14a      	cbz	r2, 801476a <rclc_executor_init+0xd2>
 8014756:	4618      	mov	r0, r3
 8014758:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 801475c:	b030      	add	sp, #192	; 0xc0
 801475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014762:	200b      	movs	r0, #11
 8014764:	b030      	add	sp, #192	; 0xc0
 8014766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801476a:	2000      	movs	r0, #0
 801476c:	b030      	add	sp, #192	; 0xc0
 801476e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014772:	200b      	movs	r0, #11
 8014774:	4770      	bx	lr
 8014776:	200a      	movs	r0, #10
 8014778:	e7f4      	b.n	8014764 <rclc_executor_init+0xcc>
 801477a:	bf00      	nop
 801477c:	f3af 8000 	nop.w
 8014780:	3b9aca00 	.word	0x3b9aca00
 8014784:	00000000 	.word	0x00000000
 8014788:	08024d70 	.word	0x08024d70
 801478c:	080145f9 	.word	0x080145f9

08014790 <rclc_executor_add_subscription>:
 8014790:	2b00      	cmp	r3, #0
 8014792:	bf18      	it	ne
 8014794:	2a00      	cmpne	r2, #0
 8014796:	b570      	push	{r4, r5, r6, lr}
 8014798:	4604      	mov	r4, r0
 801479a:	bf0c      	ite	eq
 801479c:	2001      	moveq	r0, #1
 801479e:	2000      	movne	r0, #0
 80147a0:	f89d c010 	ldrb.w	ip, [sp, #16]
 80147a4:	2900      	cmp	r1, #0
 80147a6:	bf08      	it	eq
 80147a8:	f040 0001 	orreq.w	r0, r0, #1
 80147ac:	bb28      	cbnz	r0, 80147fa <rclc_executor_add_subscription+0x6a>
 80147ae:	fab4 f584 	clz	r5, r4
 80147b2:	096d      	lsrs	r5, r5, #5
 80147b4:	b30c      	cbz	r4, 80147fa <rclc_executor_add_subscription+0x6a>
 80147b6:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 80147ba:	4286      	cmp	r6, r0
 80147bc:	d301      	bcc.n	80147c2 <rclc_executor_add_subscription+0x32>
 80147be:	2001      	movs	r0, #1
 80147c0:	bd70      	pop	{r4, r5, r6, pc}
 80147c2:	6860      	ldr	r0, [r4, #4]
 80147c4:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 80147c8:	f800 500e 	strb.w	r5, [r0, lr]
 80147cc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80147d0:	3601      	adds	r6, #1
 80147d2:	6303      	str	r3, [r0, #48]	; 0x30
 80147d4:	2301      	movs	r3, #1
 80147d6:	62c5      	str	r5, [r0, #44]	; 0x2c
 80147d8:	f104 0514 	add.w	r5, r4, #20
 80147dc:	f880 c001 	strb.w	ip, [r0, #1]
 80147e0:	8703      	strh	r3, [r0, #56]	; 0x38
 80147e2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80147e6:	4628      	mov	r0, r5
 80147e8:	60e6      	str	r6, [r4, #12]
 80147ea:	f007 fc21 	bl	801c030 <rcl_wait_set_is_valid>
 80147ee:	b930      	cbnz	r0, 80147fe <rclc_executor_add_subscription+0x6e>
 80147f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80147f2:	2000      	movs	r0, #0
 80147f4:	3301      	adds	r3, #1
 80147f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80147f8:	bd70      	pop	{r4, r5, r6, pc}
 80147fa:	200b      	movs	r0, #11
 80147fc:	bd70      	pop	{r4, r5, r6, pc}
 80147fe:	4628      	mov	r0, r5
 8014800:	f007 fc1c 	bl	801c03c <rcl_wait_set_fini>
 8014804:	2800      	cmp	r0, #0
 8014806:	d0f3      	beq.n	80147f0 <rclc_executor_add_subscription+0x60>
 8014808:	bd70      	pop	{r4, r5, r6, pc}
 801480a:	bf00      	nop

0801480c <rclc_executor_add_service>:
 801480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480e:	9d06      	ldr	r5, [sp, #24]
 8014810:	4604      	mov	r4, r0
 8014812:	2b00      	cmp	r3, #0
 8014814:	bf18      	it	ne
 8014816:	2d00      	cmpne	r5, #0
 8014818:	bf0c      	ite	eq
 801481a:	2001      	moveq	r0, #1
 801481c:	2000      	movne	r0, #0
 801481e:	2a00      	cmp	r2, #0
 8014820:	bf08      	it	eq
 8014822:	f040 0001 	orreq.w	r0, r0, #1
 8014826:	2900      	cmp	r1, #0
 8014828:	bf08      	it	eq
 801482a:	f040 0001 	orreq.w	r0, r0, #1
 801482e:	bb40      	cbnz	r0, 8014882 <rclc_executor_add_service+0x76>
 8014830:	fab4 f684 	clz	r6, r4
 8014834:	0976      	lsrs	r6, r6, #5
 8014836:	b324      	cbz	r4, 8014882 <rclc_executor_add_service+0x76>
 8014838:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 801483c:	42b8      	cmp	r0, r7
 801483e:	d301      	bcc.n	8014844 <rclc_executor_add_service+0x38>
 8014840:	2001      	movs	r0, #1
 8014842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014844:	6867      	ldr	r7, [r4, #4]
 8014846:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 801484a:	f100 0c01 	add.w	ip, r0, #1
 801484e:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014852:	6283      	str	r3, [r0, #40]	; 0x28
 8014854:	2305      	movs	r3, #5
 8014856:	6305      	str	r5, [r0, #48]	; 0x30
 8014858:	f104 0514 	add.w	r5, r4, #20
 801485c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014860:	f827 300e 	strh.w	r3, [r7, lr]
 8014864:	2301      	movs	r3, #1
 8014866:	62c6      	str	r6, [r0, #44]	; 0x2c
 8014868:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801486c:	4628      	mov	r0, r5
 801486e:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014872:	f007 fbdd 	bl	801c030 <rcl_wait_set_is_valid>
 8014876:	b930      	cbnz	r0, 8014886 <rclc_executor_add_service+0x7a>
 8014878:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801487a:	2000      	movs	r0, #0
 801487c:	3301      	adds	r3, #1
 801487e:	6563      	str	r3, [r4, #84]	; 0x54
 8014880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014882:	200b      	movs	r0, #11
 8014884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014886:	4628      	mov	r0, r5
 8014888:	f007 fbd8 	bl	801c03c <rcl_wait_set_fini>
 801488c:	2800      	cmp	r0, #0
 801488e:	d0f3      	beq.n	8014878 <rclc_executor_add_service+0x6c>
 8014890:	e7d7      	b.n	8014842 <rclc_executor_add_service+0x36>
 8014892:	bf00      	nop

08014894 <rclc_executor_prepare>:
 8014894:	2800      	cmp	r0, #0
 8014896:	d044      	beq.n	8014922 <rclc_executor_prepare+0x8e>
 8014898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801489a:	f100 0514 	add.w	r5, r0, #20
 801489e:	b09b      	sub	sp, #108	; 0x6c
 80148a0:	4604      	mov	r4, r0
 80148a2:	4628      	mov	r0, r5
 80148a4:	f007 fbc4 	bl	801c030 <rcl_wait_set_is_valid>
 80148a8:	b110      	cbz	r0, 80148b0 <rclc_executor_prepare+0x1c>
 80148aa:	2000      	movs	r0, #0
 80148ac:	b01b      	add	sp, #108	; 0x6c
 80148ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148b0:	4628      	mov	r0, r5
 80148b2:	f007 fbc3 	bl	801c03c <rcl_wait_set_fini>
 80148b6:	2800      	cmp	r0, #0
 80148b8:	d130      	bne.n	801491c <rclc_executor_prepare+0x88>
 80148ba:	a80c      	add	r0, sp, #48	; 0x30
 80148bc:	ae04      	add	r6, sp, #16
 80148be:	f007 fba3 	bl	801c008 <rcl_get_zero_initialized_wait_set>
 80148c2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80148c6:	46ae      	mov	lr, r5
 80148c8:	6927      	ldr	r7, [r4, #16]
 80148ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148e2:	f8dc 3000 	ldr.w	r3, [ip]
 80148e6:	f8ce 3000 	str.w	r3, [lr]
 80148ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80148ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	4628      	mov	r0, r5
 80148f2:	6822      	ldr	r2, [r4, #0]
 80148f4:	6033      	str	r3, [r6, #0]
 80148f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80148f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80148fa:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80148fe:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8014902:	e9cd 2100 	strd	r2, r1, [sp]
 8014906:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8014908:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801490a:	f007 fe97 	bl	801c63c <rcl_wait_set_init>
 801490e:	2800      	cmp	r0, #0
 8014910:	d0cc      	beq.n	80148ac <rclc_executor_prepare+0x18>
 8014912:	900b      	str	r0, [sp, #44]	; 0x2c
 8014914:	f000 fb84 	bl	8015020 <rcutils_reset_error>
 8014918:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801491a:	e7c7      	b.n	80148ac <rclc_executor_prepare+0x18>
 801491c:	f000 fb80 	bl	8015020 <rcutils_reset_error>
 8014920:	e7cb      	b.n	80148ba <rclc_executor_prepare+0x26>
 8014922:	200b      	movs	r0, #11
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop

08014928 <rclc_executor_spin_some.part.0>:
 8014928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801492c:	4605      	mov	r5, r0
 801492e:	4691      	mov	r9, r2
 8014930:	4698      	mov	r8, r3
 8014932:	f7ff ffaf 	bl	8014894 <rclc_executor_prepare>
 8014936:	f105 0614 	add.w	r6, r5, #20
 801493a:	4630      	mov	r0, r6
 801493c:	f007 fc4a 	bl	801c1d4 <rcl_wait_set_clear>
 8014940:	4607      	mov	r7, r0
 8014942:	2800      	cmp	r0, #0
 8014944:	f040 80a8 	bne.w	8014a98 <rclc_executor_spin_some.part.0+0x170>
 8014948:	68ab      	ldr	r3, [r5, #8]
 801494a:	b30b      	cbz	r3, 8014990 <rclc_executor_spin_some.part.0+0x68>
 801494c:	4604      	mov	r4, r0
 801494e:	6869      	ldr	r1, [r5, #4]
 8014950:	01a2      	lsls	r2, r4, #6
 8014952:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014956:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801495a:	b1cb      	cbz	r3, 8014990 <rclc_executor_spin_some.part.0+0x68>
 801495c:	5c8b      	ldrb	r3, [r1, r2]
 801495e:	2b0a      	cmp	r3, #10
 8014960:	f200 80de 	bhi.w	8014b20 <rclc_executor_spin_some.part.0+0x1f8>
 8014964:	e8df f003 	tbb	[pc, r3]
 8014968:	8da99d9d 	.word	0x8da99d9d
 801496c:	0606068d 	.word	0x0606068d
 8014970:	c1ce      	.short	0xc1ce
 8014972:	b5          	.byte	0xb5
 8014973:	00          	.byte	0x00
 8014974:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014978:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801497c:	4630      	mov	r0, r6
 801497e:	f007 ff79 	bl	801c874 <rcl_wait_set_add_service>
 8014982:	2800      	cmp	r0, #0
 8014984:	f040 8087 	bne.w	8014a96 <rclc_executor_spin_some.part.0+0x16e>
 8014988:	3401      	adds	r4, #1
 801498a:	68ab      	ldr	r3, [r5, #8]
 801498c:	429c      	cmp	r4, r3
 801498e:	d3de      	bcc.n	801494e <rclc_executor_spin_some.part.0+0x26>
 8014990:	4643      	mov	r3, r8
 8014992:	464a      	mov	r2, r9
 8014994:	4630      	mov	r0, r6
 8014996:	f007 ff9b 	bl	801c8d0 <rcl_wait>
 801499a:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f000 80c6 	beq.w	8014b30 <rclc_executor_spin_some.part.0+0x208>
 80149a4:	2b01      	cmp	r3, #1
 80149a6:	f040 80bb 	bne.w	8014b20 <rclc_executor_spin_some.part.0+0x1f8>
 80149aa:	68ab      	ldr	r3, [r5, #8]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	f000 8159 	beq.w	8014c64 <rclc_executor_spin_some.part.0+0x33c>
 80149b2:	2400      	movs	r4, #0
 80149b4:	f240 1991 	movw	r9, #401	; 0x191
 80149b8:	46a0      	mov	r8, r4
 80149ba:	e00a      	b.n	80149d2 <rclc_executor_spin_some.part.0+0xaa>
 80149bc:	f7ff fb18 	bl	8013ff0 <_rclc_check_for_new_data>
 80149c0:	4604      	mov	r4, r0
 80149c2:	b110      	cbz	r0, 80149ca <rclc_executor_spin_some.part.0+0xa2>
 80149c4:	4548      	cmp	r0, r9
 80149c6:	f040 80b1 	bne.w	8014b2c <rclc_executor_spin_some.part.0+0x204>
 80149ca:	68ab      	ldr	r3, [r5, #8]
 80149cc:	4598      	cmp	r8, r3
 80149ce:	f080 8126 	bcs.w	8014c1e <rclc_executor_spin_some.part.0+0x2f6>
 80149d2:	686a      	ldr	r2, [r5, #4]
 80149d4:	4631      	mov	r1, r6
 80149d6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80149da:	f108 0801 	add.w	r8, r8, #1
 80149de:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 80149e2:	f1bc 0f00 	cmp.w	ip, #0
 80149e6:	d1e9      	bne.n	80149bc <rclc_executor_spin_some.part.0+0x94>
 80149e8:	4619      	mov	r1, r3
 80149ea:	4610      	mov	r0, r2
 80149ec:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 80149f0:	4798      	blx	r3
 80149f2:	2800      	cmp	r0, #0
 80149f4:	f000 809a 	beq.w	8014b2c <rclc_executor_spin_some.part.0+0x204>
 80149f8:	68ab      	ldr	r3, [r5, #8]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	f000 8096 	beq.w	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014a00:	f04f 0800 	mov.w	r8, #0
 8014a04:	f240 1991 	movw	r9, #401	; 0x191
 8014a08:	e009      	b.n	8014a1e <rclc_executor_spin_some.part.0+0xf6>
 8014a0a:	f7ff fb3f 	bl	801408c <_rclc_take_new_data>
 8014a0e:	4604      	mov	r4, r0
 8014a10:	b110      	cbz	r0, 8014a18 <rclc_executor_spin_some.part.0+0xf0>
 8014a12:	4548      	cmp	r0, r9
 8014a14:	f040 808a 	bne.w	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014a18:	68ab      	ldr	r3, [r5, #8]
 8014a1a:	4598      	cmp	r8, r3
 8014a1c:	d209      	bcs.n	8014a32 <rclc_executor_spin_some.part.0+0x10a>
 8014a1e:	6868      	ldr	r0, [r5, #4]
 8014a20:	4631      	mov	r1, r6
 8014a22:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014a26:	f108 0801 	add.w	r8, r8, #1
 8014a2a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8014a2e:	2a00      	cmp	r2, #0
 8014a30:	d1eb      	bne.n	8014a0a <rclc_executor_spin_some.part.0+0xe2>
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d07a      	beq.n	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014a36:	2600      	movs	r6, #0
 8014a38:	e00e      	b.n	8014a58 <rclc_executor_spin_some.part.0+0x130>
 8014a3a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014a3e:	2a08      	cmp	r2, #8
 8014a40:	f000 80fc 	beq.w	8014c3c <rclc_executor_spin_some.part.0+0x314>
 8014a44:	2a09      	cmp	r2, #9
 8014a46:	f000 80ee 	beq.w	8014c26 <rclc_executor_spin_some.part.0+0x2fe>
 8014a4a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8014a4e:	b98a      	cbnz	r2, 8014a74 <rclc_executor_spin_some.part.0+0x14c>
 8014a50:	3601      	adds	r6, #1
 8014a52:	429e      	cmp	r6, r3
 8014a54:	d267      	bcs.n	8014b26 <rclc_executor_spin_some.part.0+0x1fe>
 8014a56:	2400      	movs	r4, #0
 8014a58:	686a      	ldr	r2, [r5, #4]
 8014a5a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014a5e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014a62:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8014a66:	2900      	cmp	r1, #0
 8014a68:	d060      	beq.n	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014a6a:	7841      	ldrb	r1, [r0, #1]
 8014a6c:	2900      	cmp	r1, #0
 8014a6e:	d0e4      	beq.n	8014a3a <rclc_executor_spin_some.part.0+0x112>
 8014a70:	2901      	cmp	r1, #1
 8014a72:	d1ed      	bne.n	8014a50 <rclc_executor_spin_some.part.0+0x128>
 8014a74:	f7ff fc7e 	bl	8014374 <_rclc_execute.part.0>
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	f040 80b5 	bne.w	8014be8 <rclc_executor_spin_some.part.0+0x2c0>
 8014a7e:	68ab      	ldr	r3, [r5, #8]
 8014a80:	e7e6      	b.n	8014a50 <rclc_executor_spin_some.part.0+0x128>
 8014a82:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014a86:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	f007 fec6 	bl	801c81c <rcl_wait_set_add_client>
 8014a90:	2800      	cmp	r0, #0
 8014a92:	f43f af79 	beq.w	8014988 <rclc_executor_spin_some.part.0+0x60>
 8014a96:	4607      	mov	r7, r0
 8014a98:	f000 fac2 	bl	8015020 <rcutils_reset_error>
 8014a9c:	4638      	mov	r0, r7
 8014a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014aa6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014aaa:	4630      	mov	r0, r6
 8014aac:	f007 fb66 	bl	801c17c <rcl_wait_set_add_subscription>
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	f43f af69 	beq.w	8014988 <rclc_executor_spin_some.part.0+0x60>
 8014ab6:	4607      	mov	r7, r0
 8014ab8:	e7ee      	b.n	8014a98 <rclc_executor_spin_some.part.0+0x170>
 8014aba:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014abe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	f007 fe7a 	bl	801c7bc <rcl_wait_set_add_timer>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	f43f af5d 	beq.w	8014988 <rclc_executor_spin_some.part.0+0x60>
 8014ace:	4607      	mov	r7, r0
 8014ad0:	e7e2      	b.n	8014a98 <rclc_executor_spin_some.part.0+0x170>
 8014ad2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014ad6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014ada:	4630      	mov	r0, r6
 8014adc:	f007 fe42 	bl	801c764 <rcl_wait_set_add_guard_condition>
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f43f af51 	beq.w	8014988 <rclc_executor_spin_some.part.0+0x60>
 8014ae6:	4607      	mov	r7, r0
 8014ae8:	e7d6      	b.n	8014a98 <rclc_executor_spin_some.part.0+0x170>
 8014aea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014aee:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014af2:	4630      	mov	r0, r6
 8014af4:	3110      	adds	r1, #16
 8014af6:	f008 fbbf 	bl	801d278 <rcl_action_wait_set_add_action_server>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	f43f af44 	beq.w	8014988 <rclc_executor_spin_some.part.0+0x60>
 8014b00:	4607      	mov	r7, r0
 8014b02:	e7c9      	b.n	8014a98 <rclc_executor_spin_some.part.0+0x170>
 8014b04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014b08:	2300      	movs	r3, #0
 8014b0a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014b0e:	4630      	mov	r0, r6
 8014b10:	3110      	adds	r1, #16
 8014b12:	f008 f989 	bl	801ce28 <rcl_action_wait_set_add_action_client>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	f43f af36 	beq.w	8014988 <rclc_executor_spin_some.part.0+0x60>
 8014b1c:	4607      	mov	r7, r0
 8014b1e:	e7bb      	b.n	8014a98 <rclc_executor_spin_some.part.0+0x170>
 8014b20:	2701      	movs	r7, #1
 8014b22:	f000 fa7d 	bl	8015020 <rcutils_reset_error>
 8014b26:	4638      	mov	r0, r7
 8014b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b2c:	4627      	mov	r7, r4
 8014b2e:	e7fa      	b.n	8014b26 <rclc_executor_spin_some.part.0+0x1fe>
 8014b30:	68ab      	ldr	r3, [r5, #8]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	f000 8093 	beq.w	8014c5e <rclc_executor_spin_some.part.0+0x336>
 8014b38:	2400      	movs	r4, #0
 8014b3a:	f240 1991 	movw	r9, #401	; 0x191
 8014b3e:	46a0      	mov	r8, r4
 8014b40:	e008      	b.n	8014b54 <rclc_executor_spin_some.part.0+0x22c>
 8014b42:	f7ff fa55 	bl	8013ff0 <_rclc_check_for_new_data>
 8014b46:	4604      	mov	r4, r0
 8014b48:	b108      	cbz	r0, 8014b4e <rclc_executor_spin_some.part.0+0x226>
 8014b4a:	4548      	cmp	r0, r9
 8014b4c:	d1ee      	bne.n	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014b4e:	68ab      	ldr	r3, [r5, #8]
 8014b50:	4598      	cmp	r8, r3
 8014b52:	d266      	bcs.n	8014c22 <rclc_executor_spin_some.part.0+0x2fa>
 8014b54:	686a      	ldr	r2, [r5, #4]
 8014b56:	4631      	mov	r1, r6
 8014b58:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014b5c:	f108 0801 	add.w	r8, r8, #1
 8014b60:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014b64:	f1bc 0f00 	cmp.w	ip, #0
 8014b68:	d1eb      	bne.n	8014b42 <rclc_executor_spin_some.part.0+0x21a>
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014b72:	4798      	blx	r3
 8014b74:	2800      	cmp	r0, #0
 8014b76:	d0d9      	beq.n	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014b78:	68ab      	ldr	r3, [r5, #8]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d0d6      	beq.n	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014b7e:	f04f 0a00 	mov.w	sl, #0
 8014b82:	f240 1891 	movw	r8, #401	; 0x191
 8014b86:	f240 2959 	movw	r9, #601	; 0x259
 8014b8a:	e00e      	b.n	8014baa <rclc_executor_spin_some.part.0+0x282>
 8014b8c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014b90:	2b08      	cmp	r3, #8
 8014b92:	d034      	beq.n	8014bfe <rclc_executor_spin_some.part.0+0x2d6>
 8014b94:	2b09      	cmp	r3, #9
 8014b96:	d029      	beq.n	8014bec <rclc_executor_spin_some.part.0+0x2c4>
 8014b98:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014b9c:	bb03      	cbnz	r3, 8014be0 <rclc_executor_spin_some.part.0+0x2b8>
 8014b9e:	f10a 0a01 	add.w	sl, sl, #1
 8014ba2:	68ab      	ldr	r3, [r5, #8]
 8014ba4:	459a      	cmp	sl, r3
 8014ba6:	d2be      	bcs.n	8014b26 <rclc_executor_spin_some.part.0+0x1fe>
 8014ba8:	2400      	movs	r4, #0
 8014baa:	6868      	ldr	r0, [r5, #4]
 8014bac:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014bb0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8014bb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d0b7      	beq.n	8014b2c <rclc_executor_spin_some.part.0+0x204>
 8014bbc:	4631      	mov	r1, r6
 8014bbe:	f7ff fa65 	bl	801408c <_rclc_take_new_data>
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	bf18      	it	ne
 8014bc6:	4540      	cmpne	r0, r8
 8014bc8:	d001      	beq.n	8014bce <rclc_executor_spin_some.part.0+0x2a6>
 8014bca:	4548      	cmp	r0, r9
 8014bcc:	d10c      	bne.n	8014be8 <rclc_executor_spin_some.part.0+0x2c0>
 8014bce:	686b      	ldr	r3, [r5, #4]
 8014bd0:	eb13 000b 	adds.w	r0, r3, fp
 8014bd4:	d021      	beq.n	8014c1a <rclc_executor_spin_some.part.0+0x2f2>
 8014bd6:	7842      	ldrb	r2, [r0, #1]
 8014bd8:	2a00      	cmp	r2, #0
 8014bda:	d0d7      	beq.n	8014b8c <rclc_executor_spin_some.part.0+0x264>
 8014bdc:	2a01      	cmp	r2, #1
 8014bde:	d1de      	bne.n	8014b9e <rclc_executor_spin_some.part.0+0x276>
 8014be0:	f7ff fbc8 	bl	8014374 <_rclc_execute.part.0>
 8014be4:	2800      	cmp	r0, #0
 8014be6:	d0da      	beq.n	8014b9e <rclc_executor_spin_some.part.0+0x276>
 8014be8:	4607      	mov	r7, r0
 8014bea:	e79c      	b.n	8014b26 <rclc_executor_spin_some.part.0+0x1fe>
 8014bec:	6843      	ldr	r3, [r0, #4]
 8014bee:	6a1a      	ldr	r2, [r3, #32]
 8014bf0:	2a00      	cmp	r2, #0
 8014bf2:	d1f5      	bne.n	8014be0 <rclc_executor_spin_some.part.0+0x2b8>
 8014bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d0d0      	beq.n	8014b9e <rclc_executor_spin_some.part.0+0x276>
 8014bfc:	e7f0      	b.n	8014be0 <rclc_executor_spin_some.part.0+0x2b8>
 8014bfe:	6843      	ldr	r3, [r0, #4]
 8014c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014c02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8014c06:	d1eb      	bne.n	8014be0 <rclc_executor_spin_some.part.0+0x2b8>
 8014c08:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014c0c:	2a00      	cmp	r2, #0
 8014c0e:	d1e7      	bne.n	8014be0 <rclc_executor_spin_some.part.0+0x2b8>
 8014c10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d0c2      	beq.n	8014b9e <rclc_executor_spin_some.part.0+0x276>
 8014c18:	e7e2      	b.n	8014be0 <rclc_executor_spin_some.part.0+0x2b8>
 8014c1a:	270b      	movs	r7, #11
 8014c1c:	e783      	b.n	8014b26 <rclc_executor_spin_some.part.0+0x1fe>
 8014c1e:	686a      	ldr	r2, [r5, #4]
 8014c20:	e6e2      	b.n	80149e8 <rclc_executor_spin_some.part.0+0xc0>
 8014c22:	686a      	ldr	r2, [r5, #4]
 8014c24:	e7a1      	b.n	8014b6a <rclc_executor_spin_some.part.0+0x242>
 8014c26:	6842      	ldr	r2, [r0, #4]
 8014c28:	6a11      	ldr	r1, [r2, #32]
 8014c2a:	2900      	cmp	r1, #0
 8014c2c:	f47f af22 	bne.w	8014a74 <rclc_executor_spin_some.part.0+0x14c>
 8014c30:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8014c34:	2a00      	cmp	r2, #0
 8014c36:	f43f af0b 	beq.w	8014a50 <rclc_executor_spin_some.part.0+0x128>
 8014c3a:	e71b      	b.n	8014a74 <rclc_executor_spin_some.part.0+0x14c>
 8014c3c:	6842      	ldr	r2, [r0, #4]
 8014c3e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014c40:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8014c44:	f47f af16 	bne.w	8014a74 <rclc_executor_spin_some.part.0+0x14c>
 8014c48:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8014c4c:	2900      	cmp	r1, #0
 8014c4e:	f47f af11 	bne.w	8014a74 <rclc_executor_spin_some.part.0+0x14c>
 8014c52:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8014c56:	2a00      	cmp	r2, #0
 8014c58:	f43f aefa 	beq.w	8014a50 <rclc_executor_spin_some.part.0+0x128>
 8014c5c:	e70a      	b.n	8014a74 <rclc_executor_spin_some.part.0+0x14c>
 8014c5e:	686a      	ldr	r2, [r5, #4]
 8014c60:	461c      	mov	r4, r3
 8014c62:	e782      	b.n	8014b6a <rclc_executor_spin_some.part.0+0x242>
 8014c64:	686a      	ldr	r2, [r5, #4]
 8014c66:	461c      	mov	r4, r3
 8014c68:	e6be      	b.n	80149e8 <rclc_executor_spin_some.part.0+0xc0>
 8014c6a:	bf00      	nop

08014c6c <rclc_executor_spin_some>:
 8014c6c:	b190      	cbz	r0, 8014c94 <rclc_executor_spin_some+0x28>
 8014c6e:	b570      	push	{r4, r5, r6, lr}
 8014c70:	4604      	mov	r4, r0
 8014c72:	6800      	ldr	r0, [r0, #0]
 8014c74:	4616      	mov	r6, r2
 8014c76:	461d      	mov	r5, r3
 8014c78:	f006 fb92 	bl	801b3a0 <rcl_context_is_valid>
 8014c7c:	b130      	cbz	r0, 8014c8c <rclc_executor_spin_some+0x20>
 8014c7e:	4632      	mov	r2, r6
 8014c80:	462b      	mov	r3, r5
 8014c82:	4620      	mov	r0, r4
 8014c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c88:	f7ff be4e 	b.w	8014928 <rclc_executor_spin_some.part.0>
 8014c8c:	f000 f9c8 	bl	8015020 <rcutils_reset_error>
 8014c90:	2001      	movs	r0, #1
 8014c92:	bd70      	pop	{r4, r5, r6, pc}
 8014c94:	200b      	movs	r0, #11
 8014c96:	4770      	bx	lr

08014c98 <rclc_executor_handle_counters_zero_init>:
 8014c98:	b130      	cbz	r0, 8014ca8 <rclc_executor_handle_counters_zero_init+0x10>
 8014c9a:	2220      	movs	r2, #32
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	b508      	push	{r3, lr}
 8014ca0:	f00c f810 	bl	8020cc4 <memset>
 8014ca4:	2000      	movs	r0, #0
 8014ca6:	bd08      	pop	{r3, pc}
 8014ca8:	200b      	movs	r0, #11
 8014caa:	4770      	bx	lr
 8014cac:	0000      	movs	r0, r0
	...

08014cb0 <rclc_executor_handle_init>:
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	b178      	cbz	r0, 8014cd4 <rclc_executor_handle_init+0x24>
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f04f 0c0b 	mov.w	ip, #11
 8014cba:	6341      	str	r1, [r0, #52]	; 0x34
 8014cbc:	4610      	mov	r0, r2
 8014cbe:	f8a3 c000 	strh.w	ip, [r3]
 8014cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8014cc4:	871a      	strh	r2, [r3, #56]	; 0x38
 8014cc6:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8014cd8 <rclc_executor_handle_init+0x28>
 8014cca:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014cce:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8014cd2:	4770      	bx	lr
 8014cd4:	200b      	movs	r0, #11
 8014cd6:	4770      	bx	lr
	...

08014ce0 <rclc_support_init_with_options>:
 8014ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ce4:	b083      	sub	sp, #12
 8014ce6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	bf18      	it	ne
 8014cec:	2f00      	cmpne	r7, #0
 8014cee:	d027      	beq.n	8014d40 <rclc_support_init_with_options+0x60>
 8014cf0:	4604      	mov	r4, r0
 8014cf2:	b328      	cbz	r0, 8014d40 <rclc_support_init_with_options+0x60>
 8014cf4:	46e9      	mov	r9, sp
 8014cf6:	461d      	mov	r5, r3
 8014cf8:	460e      	mov	r6, r1
 8014cfa:	4690      	mov	r8, r2
 8014cfc:	4648      	mov	r0, r9
 8014cfe:	f006 fb45 	bl	801b38c <rcl_get_zero_initialized_context>
 8014d02:	462a      	mov	r2, r5
 8014d04:	4623      	mov	r3, r4
 8014d06:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014d0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8014d0e:	4641      	mov	r1, r8
 8014d10:	4630      	mov	r0, r6
 8014d12:	f006 fc59 	bl	801b5c8 <rcl_init>
 8014d16:	4605      	mov	r5, r0
 8014d18:	b960      	cbnz	r0, 8014d34 <rclc_support_init_with_options+0x54>
 8014d1a:	463a      	mov	r2, r7
 8014d1c:	f104 010c 	add.w	r1, r4, #12
 8014d20:	2003      	movs	r0, #3
 8014d22:	60a7      	str	r7, [r4, #8]
 8014d24:	f006 ff66 	bl	801bbf4 <rcl_clock_init>
 8014d28:	4605      	mov	r5, r0
 8014d2a:	b918      	cbnz	r0, 8014d34 <rclc_support_init_with_options+0x54>
 8014d2c:	4628      	mov	r0, r5
 8014d2e:	b003      	add	sp, #12
 8014d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d34:	f000 f974 	bl	8015020 <rcutils_reset_error>
 8014d38:	4628      	mov	r0, r5
 8014d3a:	b003      	add	sp, #12
 8014d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d40:	250b      	movs	r5, #11
 8014d42:	4628      	mov	r0, r5
 8014d44:	b003      	add	sp, #12
 8014d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d4a:	bf00      	nop

08014d4c <rclc_node_init_with_options>:
 8014d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d50:	b087      	sub	sp, #28
 8014d52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014d54:	2e00      	cmp	r6, #0
 8014d56:	bf18      	it	ne
 8014d58:	2b00      	cmpne	r3, #0
 8014d5a:	bf0c      	ite	eq
 8014d5c:	f04f 0c01 	moveq.w	ip, #1
 8014d60:	f04f 0c00 	movne.w	ip, #0
 8014d64:	2a00      	cmp	r2, #0
 8014d66:	bf08      	it	eq
 8014d68:	f04c 0c01 	orreq.w	ip, ip, #1
 8014d6c:	2900      	cmp	r1, #0
 8014d6e:	bf08      	it	eq
 8014d70:	f04c 0c01 	orreq.w	ip, ip, #1
 8014d74:	f1bc 0f00 	cmp.w	ip, #0
 8014d78:	d118      	bne.n	8014dac <rclc_node_init_with_options+0x60>
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	b1b0      	cbz	r0, 8014dac <rclc_node_init_with_options+0x60>
 8014d7e:	f10d 0910 	add.w	r9, sp, #16
 8014d82:	460d      	mov	r5, r1
 8014d84:	4698      	mov	r8, r3
 8014d86:	4617      	mov	r7, r2
 8014d88:	4648      	mov	r0, r9
 8014d8a:	f7fe fc07 	bl	801359c <rcl_get_zero_initialized_node>
 8014d8e:	9600      	str	r6, [sp, #0]
 8014d90:	4643      	mov	r3, r8
 8014d92:	463a      	mov	r2, r7
 8014d94:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014d98:	e884 0003 	stmia.w	r4, {r0, r1}
 8014d9c:	4629      	mov	r1, r5
 8014d9e:	4620      	mov	r0, r4
 8014da0:	f7fe fc06 	bl	80135b0 <rcl_node_init>
 8014da4:	b930      	cbnz	r0, 8014db4 <rclc_node_init_with_options+0x68>
 8014da6:	b007      	add	sp, #28
 8014da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dac:	200b      	movs	r0, #11
 8014dae:	b007      	add	sp, #28
 8014db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014db4:	9003      	str	r0, [sp, #12]
 8014db6:	f000 f933 	bl	8015020 <rcutils_reset_error>
 8014dba:	9803      	ldr	r0, [sp, #12]
 8014dbc:	b007      	add	sp, #28
 8014dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dc2:	bf00      	nop

08014dc4 <rclc_publisher_init_default>:
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	bf18      	it	ne
 8014dc8:	2a00      	cmpne	r2, #0
 8014dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dce:	4616      	mov	r6, r2
 8014dd0:	bf0c      	ite	eq
 8014dd2:	2201      	moveq	r2, #1
 8014dd4:	2200      	movne	r2, #0
 8014dd6:	b0a0      	sub	sp, #128	; 0x80
 8014dd8:	2900      	cmp	r1, #0
 8014dda:	bf08      	it	eq
 8014ddc:	f042 0201 	orreq.w	r2, r2, #1
 8014de0:	bb1a      	cbnz	r2, 8014e2a <rclc_publisher_init_default+0x66>
 8014de2:	4604      	mov	r4, r0
 8014de4:	b308      	cbz	r0, 8014e2a <rclc_publisher_init_default+0x66>
 8014de6:	f10d 0810 	add.w	r8, sp, #16
 8014dea:	461f      	mov	r7, r3
 8014dec:	460d      	mov	r5, r1
 8014dee:	f7fe fd7f 	bl	80138f0 <rcl_get_zero_initialized_publisher>
 8014df2:	6020      	str	r0, [r4, #0]
 8014df4:	4640      	mov	r0, r8
 8014df6:	f7fe fe1b 	bl	8013a30 <rcl_publisher_get_default_options>
 8014dfa:	2250      	movs	r2, #80	; 0x50
 8014dfc:	490d      	ldr	r1, [pc, #52]	; (8014e34 <rclc_publisher_init_default+0x70>)
 8014dfe:	4640      	mov	r0, r8
 8014e00:	f00c f82d 	bl	8020e5e <memcpy>
 8014e04:	463b      	mov	r3, r7
 8014e06:	4632      	mov	r2, r6
 8014e08:	4629      	mov	r1, r5
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f8cd 8000 	str.w	r8, [sp]
 8014e10:	f7fe fd74 	bl	80138fc <rcl_publisher_init>
 8014e14:	b910      	cbnz	r0, 8014e1c <rclc_publisher_init_default+0x58>
 8014e16:	b020      	add	sp, #128	; 0x80
 8014e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e1c:	9003      	str	r0, [sp, #12]
 8014e1e:	f000 f8ff 	bl	8015020 <rcutils_reset_error>
 8014e22:	9803      	ldr	r0, [sp, #12]
 8014e24:	b020      	add	sp, #128	; 0x80
 8014e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e2a:	200b      	movs	r0, #11
 8014e2c:	b020      	add	sp, #128	; 0x80
 8014e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e32:	bf00      	nop
 8014e34:	08024df8 	.word	0x08024df8

08014e38 <rclc_service_init_default>:
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	bf18      	it	ne
 8014e3c:	2a00      	cmpne	r2, #0
 8014e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e42:	4616      	mov	r6, r2
 8014e44:	bf0c      	ite	eq
 8014e46:	2201      	moveq	r2, #1
 8014e48:	2200      	movne	r2, #0
 8014e4a:	b09e      	sub	sp, #120	; 0x78
 8014e4c:	2900      	cmp	r1, #0
 8014e4e:	bf08      	it	eq
 8014e50:	f042 0201 	orreq.w	r2, r2, #1
 8014e54:	bb1a      	cbnz	r2, 8014e9e <rclc_service_init_default+0x66>
 8014e56:	4604      	mov	r4, r0
 8014e58:	b308      	cbz	r0, 8014e9e <rclc_service_init_default+0x66>
 8014e5a:	f10d 0810 	add.w	r8, sp, #16
 8014e5e:	461f      	mov	r7, r3
 8014e60:	460d      	mov	r5, r1
 8014e62:	f7fe fe59 	bl	8013b18 <rcl_get_zero_initialized_service>
 8014e66:	6020      	str	r0, [r4, #0]
 8014e68:	4640      	mov	r0, r8
 8014e6a:	f7fe feed 	bl	8013c48 <rcl_service_get_default_options>
 8014e6e:	2250      	movs	r2, #80	; 0x50
 8014e70:	490d      	ldr	r1, [pc, #52]	; (8014ea8 <rclc_service_init_default+0x70>)
 8014e72:	4640      	mov	r0, r8
 8014e74:	f00b fff3 	bl	8020e5e <memcpy>
 8014e78:	463b      	mov	r3, r7
 8014e7a:	4632      	mov	r2, r6
 8014e7c:	4629      	mov	r1, r5
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f8cd 8000 	str.w	r8, [sp]
 8014e84:	f7fe fe4e 	bl	8013b24 <rcl_service_init>
 8014e88:	b910      	cbnz	r0, 8014e90 <rclc_service_init_default+0x58>
 8014e8a:	b01e      	add	sp, #120	; 0x78
 8014e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e90:	9003      	str	r0, [sp, #12]
 8014e92:	f000 f8c5 	bl	8015020 <rcutils_reset_error>
 8014e96:	9803      	ldr	r0, [sp, #12]
 8014e98:	b01e      	add	sp, #120	; 0x78
 8014e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e9e:	200b      	movs	r0, #11
 8014ea0:	b01e      	add	sp, #120	; 0x78
 8014ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ea6:	bf00      	nop
 8014ea8:	08024e48 	.word	0x08024e48

08014eac <rclc_subscription_init_default>:
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	bf18      	it	ne
 8014eb0:	2a00      	cmpne	r2, #0
 8014eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb6:	4616      	mov	r6, r2
 8014eb8:	bf0c      	ite	eq
 8014eba:	2201      	moveq	r2, #1
 8014ebc:	2200      	movne	r2, #0
 8014ebe:	b0a0      	sub	sp, #128	; 0x80
 8014ec0:	2900      	cmp	r1, #0
 8014ec2:	bf08      	it	eq
 8014ec4:	f042 0201 	orreq.w	r2, r2, #1
 8014ec8:	bb1a      	cbnz	r2, 8014f12 <rclc_subscription_init_default+0x66>
 8014eca:	4604      	mov	r4, r0
 8014ecc:	b308      	cbz	r0, 8014f12 <rclc_subscription_init_default+0x66>
 8014ece:	f10d 0810 	add.w	r8, sp, #16
 8014ed2:	461f      	mov	r7, r3
 8014ed4:	460d      	mov	r5, r1
 8014ed6:	f7fe ff43 	bl	8013d60 <rcl_get_zero_initialized_subscription>
 8014eda:	6020      	str	r0, [r4, #0]
 8014edc:	4640      	mov	r0, r8
 8014ede:	f7fe fff3 	bl	8013ec8 <rcl_subscription_get_default_options>
 8014ee2:	2250      	movs	r2, #80	; 0x50
 8014ee4:	490d      	ldr	r1, [pc, #52]	; (8014f1c <rclc_subscription_init_default+0x70>)
 8014ee6:	4640      	mov	r0, r8
 8014ee8:	f00b ffb9 	bl	8020e5e <memcpy>
 8014eec:	463b      	mov	r3, r7
 8014eee:	4632      	mov	r2, r6
 8014ef0:	4629      	mov	r1, r5
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f8cd 8000 	str.w	r8, [sp]
 8014ef8:	f7fe ff38 	bl	8013d6c <rcl_subscription_init>
 8014efc:	b910      	cbnz	r0, 8014f04 <rclc_subscription_init_default+0x58>
 8014efe:	b020      	add	sp, #128	; 0x80
 8014f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f04:	9003      	str	r0, [sp, #12]
 8014f06:	f000 f88b 	bl	8015020 <rcutils_reset_error>
 8014f0a:	9803      	ldr	r0, [sp, #12]
 8014f0c:	b020      	add	sp, #128	; 0x80
 8014f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f12:	200b      	movs	r0, #11
 8014f14:	b020      	add	sp, #128	; 0x80
 8014f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f1a:	bf00      	nop
 8014f1c:	08024e98 	.word	0x08024e98

08014f20 <__default_zero_allocate>:
 8014f20:	f00a ba74 	b.w	801f40c <calloc>

08014f24 <__default_reallocate>:
 8014f24:	f00a bc12 	b.w	801f74c <realloc>

08014f28 <__default_deallocate>:
 8014f28:	f00a baf0 	b.w	801f50c <free>

08014f2c <__default_allocate>:
 8014f2c:	f00a bae6 	b.w	801f4fc <malloc>

08014f30 <rcutils_get_zero_initialized_allocator>:
 8014f30:	b510      	push	{r4, lr}
 8014f32:	4c05      	ldr	r4, [pc, #20]	; (8014f48 <rcutils_get_zero_initialized_allocator+0x18>)
 8014f34:	4686      	mov	lr, r0
 8014f36:	4684      	mov	ip, r0
 8014f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f3e:	6823      	ldr	r3, [r4, #0]
 8014f40:	4670      	mov	r0, lr
 8014f42:	f8cc 3000 	str.w	r3, [ip]
 8014f46:	bd10      	pop	{r4, pc}
 8014f48:	08024ee8 	.word	0x08024ee8

08014f4c <rcutils_set_default_allocator>:
 8014f4c:	b1a8      	cbz	r0, 8014f7a <rcutils_set_default_allocator+0x2e>
 8014f4e:	6802      	ldr	r2, [r0, #0]
 8014f50:	b1a2      	cbz	r2, 8014f7c <rcutils_set_default_allocator+0x30>
 8014f52:	6841      	ldr	r1, [r0, #4]
 8014f54:	b1a1      	cbz	r1, 8014f80 <rcutils_set_default_allocator+0x34>
 8014f56:	b410      	push	{r4}
 8014f58:	68c4      	ldr	r4, [r0, #12]
 8014f5a:	b164      	cbz	r4, 8014f76 <rcutils_set_default_allocator+0x2a>
 8014f5c:	6880      	ldr	r0, [r0, #8]
 8014f5e:	b138      	cbz	r0, 8014f70 <rcutils_set_default_allocator+0x24>
 8014f60:	4b08      	ldr	r3, [pc, #32]	; (8014f84 <rcutils_set_default_allocator+0x38>)
 8014f62:	601a      	str	r2, [r3, #0]
 8014f64:	2200      	movs	r2, #0
 8014f66:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8014f6a:	2001      	movs	r0, #1
 8014f6c:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8014f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f74:	4770      	bx	lr
 8014f76:	4620      	mov	r0, r4
 8014f78:	e7fa      	b.n	8014f70 <rcutils_set_default_allocator+0x24>
 8014f7a:	4770      	bx	lr
 8014f7c:	4610      	mov	r0, r2
 8014f7e:	4770      	bx	lr
 8014f80:	4608      	mov	r0, r1
 8014f82:	4770      	bx	lr
 8014f84:	20000680 	.word	0x20000680

08014f88 <rcutils_get_default_allocator>:
 8014f88:	b510      	push	{r4, lr}
 8014f8a:	4c05      	ldr	r4, [pc, #20]	; (8014fa0 <rcutils_get_default_allocator+0x18>)
 8014f8c:	4686      	mov	lr, r0
 8014f8e:	4684      	mov	ip, r0
 8014f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f96:	6823      	ldr	r3, [r4, #0]
 8014f98:	4670      	mov	r0, lr
 8014f9a:	f8cc 3000 	str.w	r3, [ip]
 8014f9e:	bd10      	pop	{r4, pc}
 8014fa0:	20000680 	.word	0x20000680

08014fa4 <rcutils_allocator_is_valid>:
 8014fa4:	b158      	cbz	r0, 8014fbe <rcutils_allocator_is_valid+0x1a>
 8014fa6:	6803      	ldr	r3, [r0, #0]
 8014fa8:	b143      	cbz	r3, 8014fbc <rcutils_allocator_is_valid+0x18>
 8014faa:	6843      	ldr	r3, [r0, #4]
 8014fac:	b133      	cbz	r3, 8014fbc <rcutils_allocator_is_valid+0x18>
 8014fae:	68c3      	ldr	r3, [r0, #12]
 8014fb0:	b123      	cbz	r3, 8014fbc <rcutils_allocator_is_valid+0x18>
 8014fb2:	6880      	ldr	r0, [r0, #8]
 8014fb4:	3800      	subs	r0, #0
 8014fb6:	bf18      	it	ne
 8014fb8:	2001      	movne	r0, #1
 8014fba:	4770      	bx	lr
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	4770      	bx	lr

08014fc0 <rcutils_get_env>:
 8014fc0:	b168      	cbz	r0, 8014fde <rcutils_get_env+0x1e>
 8014fc2:	b510      	push	{r4, lr}
 8014fc4:	460c      	mov	r4, r1
 8014fc6:	b129      	cbz	r1, 8014fd4 <rcutils_get_env+0x14>
 8014fc8:	f00a fa50 	bl	801f46c <getenv>
 8014fcc:	b120      	cbz	r0, 8014fd8 <rcutils_get_env+0x18>
 8014fce:	6020      	str	r0, [r4, #0]
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	bd10      	pop	{r4, pc}
 8014fd4:	4803      	ldr	r0, [pc, #12]	; (8014fe4 <rcutils_get_env+0x24>)
 8014fd6:	bd10      	pop	{r4, pc}
 8014fd8:	4b03      	ldr	r3, [pc, #12]	; (8014fe8 <rcutils_get_env+0x28>)
 8014fda:	6023      	str	r3, [r4, #0]
 8014fdc:	bd10      	pop	{r4, pc}
 8014fde:	4803      	ldr	r0, [pc, #12]	; (8014fec <rcutils_get_env+0x2c>)
 8014fe0:	4770      	bx	lr
 8014fe2:	bf00      	nop
 8014fe4:	08024f18 	.word	0x08024f18
 8014fe8:	080252d0 	.word	0x080252d0
 8014fec:	08024efc 	.word	0x08024efc

08014ff0 <rcutils_get_error_string>:
 8014ff0:	4b06      	ldr	r3, [pc, #24]	; (801500c <rcutils_get_error_string+0x1c>)
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	b13b      	cbz	r3, 8015006 <rcutils_get_error_string+0x16>
 8014ff6:	4b06      	ldr	r3, [pc, #24]	; (8015010 <rcutils_get_error_string+0x20>)
 8014ff8:	781a      	ldrb	r2, [r3, #0]
 8014ffa:	b90a      	cbnz	r2, 8015000 <rcutils_get_error_string+0x10>
 8014ffc:	2201      	movs	r2, #1
 8014ffe:	701a      	strb	r2, [r3, #0]
 8015000:	4b04      	ldr	r3, [pc, #16]	; (8015014 <rcutils_get_error_string+0x24>)
 8015002:	7818      	ldrb	r0, [r3, #0]
 8015004:	4770      	bx	lr
 8015006:	4b04      	ldr	r3, [pc, #16]	; (8015018 <rcutils_get_error_string+0x28>)
 8015008:	7818      	ldrb	r0, [r3, #0]
 801500a:	4770      	bx	lr
 801500c:	20012150 	.word	0x20012150
 8015010:	20012169 	.word	0x20012169
 8015014:	20012168 	.word	0x20012168
 8015018:	08024740 	.word	0x08024740
 801501c:	00000000 	.word	0x00000000

08015020 <rcutils_reset_error>:
 8015020:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8015040 <rcutils_reset_error+0x20>
 8015024:	2300      	movs	r3, #0
 8015026:	4a08      	ldr	r2, [pc, #32]	; (8015048 <rcutils_reset_error+0x28>)
 8015028:	4808      	ldr	r0, [pc, #32]	; (801504c <rcutils_reset_error+0x2c>)
 801502a:	8013      	strh	r3, [r2, #0]
 801502c:	4908      	ldr	r1, [pc, #32]	; (8015050 <rcutils_reset_error+0x30>)
 801502e:	7003      	strb	r3, [r0, #0]
 8015030:	700b      	strb	r3, [r1, #0]
 8015032:	ed82 7b02 	vstr	d7, [r2, #8]
 8015036:	4a07      	ldr	r2, [pc, #28]	; (8015054 <rcutils_reset_error+0x34>)
 8015038:	7013      	strb	r3, [r2, #0]
 801503a:	4770      	bx	lr
 801503c:	f3af 8000 	nop.w
	...
 8015048:	20012158 	.word	0x20012158
 801504c:	20012169 	.word	0x20012169
 8015050:	20012168 	.word	0x20012168
 8015054:	20012150 	.word	0x20012150

08015058 <rcutils_format_string_limit>:
 8015058:	b40f      	push	{r0, r1, r2, r3}
 801505a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801505c:	b083      	sub	sp, #12
 801505e:	ac08      	add	r4, sp, #32
 8015060:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015066:	b326      	cbz	r6, 80150b2 <rcutils_format_string_limit+0x5a>
 8015068:	a808      	add	r0, sp, #32
 801506a:	f7ff ff9b 	bl	8014fa4 <rcutils_allocator_is_valid>
 801506e:	b300      	cbz	r0, 80150b2 <rcutils_format_string_limit+0x5a>
 8015070:	2100      	movs	r1, #0
 8015072:	ab0f      	add	r3, sp, #60	; 0x3c
 8015074:	4632      	mov	r2, r6
 8015076:	4608      	mov	r0, r1
 8015078:	e9cd 3300 	strd	r3, r3, [sp]
 801507c:	f000 f906 	bl	801528c <rcutils_vsnprintf>
 8015080:	1c43      	adds	r3, r0, #1
 8015082:	4605      	mov	r5, r0
 8015084:	d015      	beq.n	80150b2 <rcutils_format_string_limit+0x5a>
 8015086:	1c47      	adds	r7, r0, #1
 8015088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801508a:	429f      	cmp	r7, r3
 801508c:	d901      	bls.n	8015092 <rcutils_format_string_limit+0x3a>
 801508e:	1e5d      	subs	r5, r3, #1
 8015090:	461f      	mov	r7, r3
 8015092:	9b08      	ldr	r3, [sp, #32]
 8015094:	4638      	mov	r0, r7
 8015096:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015098:	4798      	blx	r3
 801509a:	4604      	mov	r4, r0
 801509c:	b148      	cbz	r0, 80150b2 <rcutils_format_string_limit+0x5a>
 801509e:	4632      	mov	r2, r6
 80150a0:	4639      	mov	r1, r7
 80150a2:	9b01      	ldr	r3, [sp, #4]
 80150a4:	f000 f8f2 	bl	801528c <rcutils_vsnprintf>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	db09      	blt.n	80150c0 <rcutils_format_string_limit+0x68>
 80150ac:	2300      	movs	r3, #0
 80150ae:	5563      	strb	r3, [r4, r5]
 80150b0:	e000      	b.n	80150b4 <rcutils_format_string_limit+0x5c>
 80150b2:	2400      	movs	r4, #0
 80150b4:	4620      	mov	r0, r4
 80150b6:	b003      	add	sp, #12
 80150b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80150bc:	b004      	add	sp, #16
 80150be:	4770      	bx	lr
 80150c0:	4620      	mov	r0, r4
 80150c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80150c6:	2400      	movs	r4, #0
 80150c8:	4798      	blx	r3
 80150ca:	e7f3      	b.n	80150b4 <rcutils_format_string_limit+0x5c>

080150cc <rcutils_repl_str>:
 80150cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d0:	ed2d 8b02 	vpush	{d8}
 80150d4:	b087      	sub	sp, #28
 80150d6:	2600      	movs	r6, #0
 80150d8:	4680      	mov	r8, r0
 80150da:	468a      	mov	sl, r1
 80150dc:	9000      	str	r0, [sp, #0]
 80150de:	4608      	mov	r0, r1
 80150e0:	ee08 2a10 	vmov	s16, r2
 80150e4:	4699      	mov	r9, r3
 80150e6:	2510      	movs	r5, #16
 80150e8:	f7eb f90a 	bl	8000300 <strlen>
 80150ec:	4637      	mov	r7, r6
 80150ee:	46b3      	mov	fp, r6
 80150f0:	9001      	str	r0, [sp, #4]
 80150f2:	e01e      	b.n	8015132 <rcutils_repl_str+0x66>
 80150f4:	f10b 0b01 	add.w	fp, fp, #1
 80150f8:	9b01      	ldr	r3, [sp, #4]
 80150fa:	455e      	cmp	r6, fp
 80150fc:	eb04 0803 	add.w	r8, r4, r3
 8015100:	d211      	bcs.n	8015126 <rcutils_repl_str+0x5a>
 8015102:	442e      	add	r6, r5
 8015104:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015108:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801510c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015110:	00b1      	lsls	r1, r6, #2
 8015112:	4798      	blx	r3
 8015114:	2800      	cmp	r0, #0
 8015116:	f000 8088 	beq.w	801522a <rcutils_repl_str+0x15e>
 801511a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801511e:	4607      	mov	r7, r0
 8015120:	bf28      	it	cs
 8015122:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8015126:	9a00      	ldr	r2, [sp, #0]
 8015128:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801512c:	1aa4      	subs	r4, r4, r2
 801512e:	f843 4c04 	str.w	r4, [r3, #-4]
 8015132:	4651      	mov	r1, sl
 8015134:	4640      	mov	r0, r8
 8015136:	f00b fdec 	bl	8020d12 <strstr>
 801513a:	4604      	mov	r4, r0
 801513c:	4638      	mov	r0, r7
 801513e:	2c00      	cmp	r4, #0
 8015140:	d1d8      	bne.n	80150f4 <rcutils_repl_str+0x28>
 8015142:	4640      	mov	r0, r8
 8015144:	f7eb f8dc 	bl	8000300 <strlen>
 8015148:	9b00      	ldr	r3, [sp, #0]
 801514a:	eba8 0803 	sub.w	r8, r8, r3
 801514e:	eb08 0400 	add.w	r4, r8, r0
 8015152:	9402      	str	r4, [sp, #8]
 8015154:	f1bb 0f00 	cmp.w	fp, #0
 8015158:	d045      	beq.n	80151e6 <rcutils_repl_str+0x11a>
 801515a:	ee18 0a10 	vmov	r0, s16
 801515e:	f7eb f8cf 	bl	8000300 <strlen>
 8015162:	9a01      	ldr	r2, [sp, #4]
 8015164:	4606      	mov	r6, r0
 8015166:	f8d9 3000 	ldr.w	r3, [r9]
 801516a:	1a82      	subs	r2, r0, r2
 801516c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015170:	fb0b 4202 	mla	r2, fp, r2, r4
 8015174:	1c50      	adds	r0, r2, #1
 8015176:	9205      	str	r2, [sp, #20]
 8015178:	4798      	blx	r3
 801517a:	4682      	mov	sl, r0
 801517c:	2800      	cmp	r0, #0
 801517e:	d054      	beq.n	801522a <rcutils_repl_str+0x15e>
 8015180:	683a      	ldr	r2, [r7, #0]
 8015182:	463d      	mov	r5, r7
 8015184:	9900      	ldr	r1, [sp, #0]
 8015186:	2401      	movs	r4, #1
 8015188:	f00b fe69 	bl	8020e5e <memcpy>
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8015192:	eb0a 0803 	add.w	r8, sl, r3
 8015196:	ee18 7a10 	vmov	r7, s16
 801519a:	f8dd a000 	ldr.w	sl, [sp]
 801519e:	f8cd 9000 	str.w	r9, [sp]
 80151a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80151a6:	4632      	mov	r2, r6
 80151a8:	4639      	mov	r1, r7
 80151aa:	4640      	mov	r0, r8
 80151ac:	44b0      	add	r8, r6
 80151ae:	f00b fe56 	bl	8020e5e <memcpy>
 80151b2:	f855 2b04 	ldr.w	r2, [r5], #4
 80151b6:	45a3      	cmp	fp, r4
 80151b8:	444a      	add	r2, r9
 80151ba:	eb0a 0102 	add.w	r1, sl, r2
 80151be:	d02a      	beq.n	8015216 <rcutils_repl_str+0x14a>
 80151c0:	6828      	ldr	r0, [r5, #0]
 80151c2:	1a82      	subs	r2, r0, r2
 80151c4:	4640      	mov	r0, r8
 80151c6:	4490      	add	r8, r2
 80151c8:	f00b fe49 	bl	8020e5e <memcpy>
 80151cc:	1c62      	adds	r2, r4, #1
 80151ce:	45a3      	cmp	fp, r4
 80151d0:	4614      	mov	r4, r2
 80151d2:	d8e8      	bhi.n	80151a6 <rcutils_repl_str+0xda>
 80151d4:	f8dd 9000 	ldr.w	r9, [sp]
 80151d8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80151dc:	2300      	movs	r3, #0
 80151de:	9a05      	ldr	r2, [sp, #20]
 80151e0:	f80a 3002 	strb.w	r3, [sl, r2]
 80151e4:	e00b      	b.n	80151fe <rcutils_repl_str+0x132>
 80151e6:	4620      	mov	r0, r4
 80151e8:	f8d9 3000 	ldr.w	r3, [r9]
 80151ec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80151f0:	3001      	adds	r0, #1
 80151f2:	4798      	blx	r3
 80151f4:	4682      	mov	sl, r0
 80151f6:	b110      	cbz	r0, 80151fe <rcutils_repl_str+0x132>
 80151f8:	9900      	ldr	r1, [sp, #0]
 80151fa:	f00b fe28 	bl	8020e4e <strcpy>
 80151fe:	4638      	mov	r0, r7
 8015200:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015204:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015208:	4798      	blx	r3
 801520a:	4650      	mov	r0, sl
 801520c:	b007      	add	sp, #28
 801520e:	ecbd 8b02 	vpop	{d8}
 8015212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015216:	9b02      	ldr	r3, [sp, #8]
 8015218:	4640      	mov	r0, r8
 801521a:	f8dd 9000 	ldr.w	r9, [sp]
 801521e:	1a9a      	subs	r2, r3, r2
 8015220:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015224:	f00b fe1b 	bl	8020e5e <memcpy>
 8015228:	e7d8      	b.n	80151dc <rcutils_repl_str+0x110>
 801522a:	f04f 0a00 	mov.w	sl, #0
 801522e:	e7e6      	b.n	80151fe <rcutils_repl_str+0x132>

08015230 <rcutils_snprintf>:
 8015230:	b40c      	push	{r2, r3}
 8015232:	b530      	push	{r4, r5, lr}
 8015234:	b083      	sub	sp, #12
 8015236:	ab06      	add	r3, sp, #24
 8015238:	f853 2b04 	ldr.w	r2, [r3], #4
 801523c:	9301      	str	r3, [sp, #4]
 801523e:	b1e2      	cbz	r2, 801527a <rcutils_snprintf+0x4a>
 8015240:	fab0 f480 	clz	r4, r0
 8015244:	fab1 f581 	clz	r5, r1
 8015248:	ea50 0c01 	orrs.w	ip, r0, r1
 801524c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8015250:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8015254:	d008      	beq.n	8015268 <rcutils_snprintf+0x38>
 8015256:	b984      	cbnz	r4, 801527a <rcutils_snprintf+0x4a>
 8015258:	b97d      	cbnz	r5, 801527a <rcutils_snprintf+0x4a>
 801525a:	f00b fc65 	bl	8020b28 <vsniprintf>
 801525e:	b003      	add	sp, #12
 8015260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015264:	b002      	add	sp, #8
 8015266:	4770      	bx	lr
 8015268:	4661      	mov	r1, ip
 801526a:	4660      	mov	r0, ip
 801526c:	f00b fc5c 	bl	8020b28 <vsniprintf>
 8015270:	b003      	add	sp, #12
 8015272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015276:	b002      	add	sp, #8
 8015278:	4770      	bx	lr
 801527a:	f00b fdbb 	bl	8020df4 <__errno>
 801527e:	2216      	movs	r2, #22
 8015280:	4603      	mov	r3, r0
 8015282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015286:	601a      	str	r2, [r3, #0]
 8015288:	e7e9      	b.n	801525e <rcutils_snprintf+0x2e>
 801528a:	bf00      	nop

0801528c <rcutils_vsnprintf>:
 801528c:	b570      	push	{r4, r5, r6, lr}
 801528e:	b1b2      	cbz	r2, 80152be <rcutils_vsnprintf+0x32>
 8015290:	fab0 f480 	clz	r4, r0
 8015294:	fab1 f581 	clz	r5, r1
 8015298:	ea50 0c01 	orrs.w	ip, r0, r1
 801529c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80152a0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80152a4:	d005      	beq.n	80152b2 <rcutils_vsnprintf+0x26>
 80152a6:	b954      	cbnz	r4, 80152be <rcutils_vsnprintf+0x32>
 80152a8:	b94d      	cbnz	r5, 80152be <rcutils_vsnprintf+0x32>
 80152aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152ae:	f00b bc3b 	b.w	8020b28 <vsniprintf>
 80152b2:	4661      	mov	r1, ip
 80152b4:	4660      	mov	r0, ip
 80152b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152ba:	f00b bc35 	b.w	8020b28 <vsniprintf>
 80152be:	f00b fd99 	bl	8020df4 <__errno>
 80152c2:	2316      	movs	r3, #22
 80152c4:	6003      	str	r3, [r0, #0]
 80152c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152ca:	bd70      	pop	{r4, r5, r6, pc}

080152cc <rcutils_strdup>:
 80152cc:	b084      	sub	sp, #16
 80152ce:	b570      	push	{r4, r5, r6, lr}
 80152d0:	b082      	sub	sp, #8
 80152d2:	4605      	mov	r5, r0
 80152d4:	ac07      	add	r4, sp, #28
 80152d6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80152da:	b1b0      	cbz	r0, 801530a <rcutils_strdup+0x3e>
 80152dc:	f7eb f810 	bl	8000300 <strlen>
 80152e0:	1c42      	adds	r2, r0, #1
 80152e2:	9b07      	ldr	r3, [sp, #28]
 80152e4:	4606      	mov	r6, r0
 80152e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152e8:	4610      	mov	r0, r2
 80152ea:	9201      	str	r2, [sp, #4]
 80152ec:	4798      	blx	r3
 80152ee:	4604      	mov	r4, r0
 80152f0:	b128      	cbz	r0, 80152fe <rcutils_strdup+0x32>
 80152f2:	9a01      	ldr	r2, [sp, #4]
 80152f4:	4629      	mov	r1, r5
 80152f6:	f00b fdb2 	bl	8020e5e <memcpy>
 80152fa:	2300      	movs	r3, #0
 80152fc:	55a3      	strb	r3, [r4, r6]
 80152fe:	4620      	mov	r0, r4
 8015300:	b002      	add	sp, #8
 8015302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015306:	b004      	add	sp, #16
 8015308:	4770      	bx	lr
 801530a:	4604      	mov	r4, r0
 801530c:	e7f7      	b.n	80152fe <rcutils_strdup+0x32>
 801530e:	bf00      	nop

08015310 <rcutils_strndup>:
 8015310:	b082      	sub	sp, #8
 8015312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015314:	ac06      	add	r4, sp, #24
 8015316:	4605      	mov	r5, r0
 8015318:	e884 000c 	stmia.w	r4, {r2, r3}
 801531c:	b188      	cbz	r0, 8015342 <rcutils_strndup+0x32>
 801531e:	1c4f      	adds	r7, r1, #1
 8015320:	460e      	mov	r6, r1
 8015322:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015324:	4638      	mov	r0, r7
 8015326:	4790      	blx	r2
 8015328:	4604      	mov	r4, r0
 801532a:	b128      	cbz	r0, 8015338 <rcutils_strndup+0x28>
 801532c:	463a      	mov	r2, r7
 801532e:	4629      	mov	r1, r5
 8015330:	f00b fd95 	bl	8020e5e <memcpy>
 8015334:	2300      	movs	r3, #0
 8015336:	55a3      	strb	r3, [r4, r6]
 8015338:	4620      	mov	r0, r4
 801533a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801533e:	b002      	add	sp, #8
 8015340:	4770      	bx	lr
 8015342:	4604      	mov	r4, r0
 8015344:	e7f8      	b.n	8015338 <rcutils_strndup+0x28>
 8015346:	bf00      	nop

08015348 <rcutils_system_time_now>:
 8015348:	b300      	cbz	r0, 801538c <rcutils_system_time_now+0x44>
 801534a:	b570      	push	{r4, r5, r6, lr}
 801534c:	b084      	sub	sp, #16
 801534e:	4604      	mov	r4, r0
 8015350:	2001      	movs	r0, #1
 8015352:	4669      	mov	r1, sp
 8015354:	f7ed ffc8 	bl	80032e8 <clock_gettime>
 8015358:	e9dd 3100 	ldrd	r3, r1, [sp]
 801535c:	2900      	cmp	r1, #0
 801535e:	db12      	blt.n	8015386 <rcutils_system_time_now+0x3e>
 8015360:	ea53 0201 	orrs.w	r2, r3, r1
 8015364:	9d02      	ldr	r5, [sp, #8]
 8015366:	d101      	bne.n	801536c <rcutils_system_time_now+0x24>
 8015368:	2d00      	cmp	r5, #0
 801536a:	db0c      	blt.n	8015386 <rcutils_system_time_now+0x3e>
 801536c:	4e08      	ldr	r6, [pc, #32]	; (8015390 <rcutils_system_time_now+0x48>)
 801536e:	2000      	movs	r0, #0
 8015370:	fba3 3206 	umull	r3, r2, r3, r6
 8015374:	195b      	adds	r3, r3, r5
 8015376:	fb06 2201 	mla	r2, r6, r1, r2
 801537a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801537e:	e9c4 3200 	strd	r3, r2, [r4]
 8015382:	b004      	add	sp, #16
 8015384:	bd70      	pop	{r4, r5, r6, pc}
 8015386:	2002      	movs	r0, #2
 8015388:	b004      	add	sp, #16
 801538a:	bd70      	pop	{r4, r5, r6, pc}
 801538c:	200b      	movs	r0, #11
 801538e:	4770      	bx	lr
 8015390:	3b9aca00 	.word	0x3b9aca00

08015394 <rcutils_steady_time_now>:
 8015394:	b300      	cbz	r0, 80153d8 <rcutils_steady_time_now+0x44>
 8015396:	b570      	push	{r4, r5, r6, lr}
 8015398:	b084      	sub	sp, #16
 801539a:	4604      	mov	r4, r0
 801539c:	2000      	movs	r0, #0
 801539e:	4669      	mov	r1, sp
 80153a0:	f7ed ffa2 	bl	80032e8 <clock_gettime>
 80153a4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80153a8:	2900      	cmp	r1, #0
 80153aa:	db12      	blt.n	80153d2 <rcutils_steady_time_now+0x3e>
 80153ac:	ea53 0201 	orrs.w	r2, r3, r1
 80153b0:	9d02      	ldr	r5, [sp, #8]
 80153b2:	d101      	bne.n	80153b8 <rcutils_steady_time_now+0x24>
 80153b4:	2d00      	cmp	r5, #0
 80153b6:	db0c      	blt.n	80153d2 <rcutils_steady_time_now+0x3e>
 80153b8:	4e08      	ldr	r6, [pc, #32]	; (80153dc <rcutils_steady_time_now+0x48>)
 80153ba:	2000      	movs	r0, #0
 80153bc:	fba3 3206 	umull	r3, r2, r3, r6
 80153c0:	195b      	adds	r3, r3, r5
 80153c2:	fb06 2201 	mla	r2, r6, r1, r2
 80153c6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80153ca:	e9c4 3200 	strd	r3, r2, [r4]
 80153ce:	b004      	add	sp, #16
 80153d0:	bd70      	pop	{r4, r5, r6, pc}
 80153d2:	2002      	movs	r0, #2
 80153d4:	b004      	add	sp, #16
 80153d6:	bd70      	pop	{r4, r5, r6, pc}
 80153d8:	200b      	movs	r0, #11
 80153da:	4770      	bx	lr
 80153dc:	3b9aca00 	.word	0x3b9aca00

080153e0 <rmw_get_zero_initialized_init_options>:
 80153e0:	b510      	push	{r4, lr}
 80153e2:	4604      	mov	r4, r0
 80153e4:	2238      	movs	r2, #56	; 0x38
 80153e6:	2100      	movs	r1, #0
 80153e8:	f00b fc6c 	bl	8020cc4 <memset>
 80153ec:	f104 0010 	add.w	r0, r4, #16
 80153f0:	f000 f80a 	bl	8015408 <rmw_get_default_security_options>
 80153f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153f8:	4620      	mov	r0, r4
 80153fa:	60e3      	str	r3, [r4, #12]
 80153fc:	bd10      	pop	{r4, pc}
 80153fe:	bf00      	nop

08015400 <rmw_get_default_publisher_options>:
 8015400:	2200      	movs	r2, #0
 8015402:	6002      	str	r2, [r0, #0]
 8015404:	7102      	strb	r2, [r0, #4]
 8015406:	4770      	bx	lr

08015408 <rmw_get_default_security_options>:
 8015408:	2200      	movs	r2, #0
 801540a:	7002      	strb	r2, [r0, #0]
 801540c:	6042      	str	r2, [r0, #4]
 801540e:	4770      	bx	lr

08015410 <rmw_subscription_content_filter_options_fini>:
 8015410:	b1b0      	cbz	r0, 8015440 <rmw_subscription_content_filter_options_fini+0x30>
 8015412:	b538      	push	{r3, r4, r5, lr}
 8015414:	4604      	mov	r4, r0
 8015416:	4608      	mov	r0, r1
 8015418:	460d      	mov	r5, r1
 801541a:	f7ff fdc3 	bl	8014fa4 <rcutils_allocator_is_valid>
 801541e:	b168      	cbz	r0, 801543c <rmw_subscription_content_filter_options_fini+0x2c>
 8015420:	6820      	ldr	r0, [r4, #0]
 8015422:	b120      	cbz	r0, 801542e <rmw_subscription_content_filter_options_fini+0x1e>
 8015424:	686b      	ldr	r3, [r5, #4]
 8015426:	6929      	ldr	r1, [r5, #16]
 8015428:	4798      	blx	r3
 801542a:	2300      	movs	r3, #0
 801542c:	6023      	str	r3, [r4, #0]
 801542e:	1d20      	adds	r0, r4, #4
 8015430:	f008 fa02 	bl	801d838 <rcutils_string_array_fini>
 8015434:	3800      	subs	r0, #0
 8015436:	bf18      	it	ne
 8015438:	2001      	movne	r0, #1
 801543a:	bd38      	pop	{r3, r4, r5, pc}
 801543c:	200b      	movs	r0, #11
 801543e:	bd38      	pop	{r3, r4, r5, pc}
 8015440:	200b      	movs	r0, #11
 8015442:	4770      	bx	lr

08015444 <rmw_get_default_subscription_options>:
 8015444:	2200      	movs	r2, #0
 8015446:	e9c0 2200 	strd	r2, r2, [r0]
 801544a:	6082      	str	r2, [r0, #8]
 801544c:	4770      	bx	lr
 801544e:	bf00      	nop

08015450 <rmw_get_zero_initialized_message_info>:
 8015450:	b510      	push	{r4, lr}
 8015452:	4604      	mov	r4, r0
 8015454:	2240      	movs	r2, #64	; 0x40
 8015456:	2100      	movs	r1, #0
 8015458:	f00b fc34 	bl	8020cc4 <memset>
 801545c:	4620      	mov	r0, r4
 801545e:	bd10      	pop	{r4, pc}

08015460 <rmw_validate_namespace_with_size>:
 8015460:	2800      	cmp	r0, #0
 8015462:	d043      	beq.n	80154ec <rmw_validate_namespace_with_size+0x8c>
 8015464:	b570      	push	{r4, r5, r6, lr}
 8015466:	4614      	mov	r4, r2
 8015468:	b0c2      	sub	sp, #264	; 0x108
 801546a:	b32a      	cbz	r2, 80154b8 <rmw_validate_namespace_with_size+0x58>
 801546c:	2901      	cmp	r1, #1
 801546e:	460d      	mov	r5, r1
 8015470:	461e      	mov	r6, r3
 8015472:	d102      	bne.n	801547a <rmw_validate_namespace_with_size+0x1a>
 8015474:	7803      	ldrb	r3, [r0, #0]
 8015476:	2b2f      	cmp	r3, #47	; 0x2f
 8015478:	d012      	beq.n	80154a0 <rmw_validate_namespace_with_size+0x40>
 801547a:	aa01      	add	r2, sp, #4
 801547c:	4669      	mov	r1, sp
 801547e:	f008 fbcf 	bl	801dc20 <rmw_validate_full_topic_name>
 8015482:	b980      	cbnz	r0, 80154a6 <rmw_validate_namespace_with_size+0x46>
 8015484:	9a00      	ldr	r2, [sp, #0]
 8015486:	b14a      	cbz	r2, 801549c <rmw_validate_namespace_with_size+0x3c>
 8015488:	2a07      	cmp	r2, #7
 801548a:	d007      	beq.n	801549c <rmw_validate_namespace_with_size+0x3c>
 801548c:	1e53      	subs	r3, r2, #1
 801548e:	2b05      	cmp	r3, #5
 8015490:	d82e      	bhi.n	80154f0 <rmw_validate_namespace_with_size+0x90>
 8015492:	e8df f003 	tbb	[pc, r3]
 8015496:	1f1c      	.short	0x1f1c
 8015498:	14282522 	.word	0x14282522
 801549c:	2df5      	cmp	r5, #245	; 0xf5
 801549e:	d804      	bhi.n	80154aa <rmw_validate_namespace_with_size+0x4a>
 80154a0:	2300      	movs	r3, #0
 80154a2:	4618      	mov	r0, r3
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	b042      	add	sp, #264	; 0x108
 80154a8:	bd70      	pop	{r4, r5, r6, pc}
 80154aa:	2307      	movs	r3, #7
 80154ac:	6023      	str	r3, [r4, #0]
 80154ae:	2e00      	cmp	r6, #0
 80154b0:	d0f9      	beq.n	80154a6 <rmw_validate_namespace_with_size+0x46>
 80154b2:	23f4      	movs	r3, #244	; 0xf4
 80154b4:	6033      	str	r3, [r6, #0]
 80154b6:	e7f6      	b.n	80154a6 <rmw_validate_namespace_with_size+0x46>
 80154b8:	200b      	movs	r0, #11
 80154ba:	b042      	add	sp, #264	; 0x108
 80154bc:	bd70      	pop	{r4, r5, r6, pc}
 80154be:	2306      	movs	r3, #6
 80154c0:	6023      	str	r3, [r4, #0]
 80154c2:	2e00      	cmp	r6, #0
 80154c4:	d0ef      	beq.n	80154a6 <rmw_validate_namespace_with_size+0x46>
 80154c6:	9b01      	ldr	r3, [sp, #4]
 80154c8:	6033      	str	r3, [r6, #0]
 80154ca:	b042      	add	sp, #264	; 0x108
 80154cc:	bd70      	pop	{r4, r5, r6, pc}
 80154ce:	2301      	movs	r3, #1
 80154d0:	6023      	str	r3, [r4, #0]
 80154d2:	e7f6      	b.n	80154c2 <rmw_validate_namespace_with_size+0x62>
 80154d4:	2302      	movs	r3, #2
 80154d6:	6023      	str	r3, [r4, #0]
 80154d8:	e7f3      	b.n	80154c2 <rmw_validate_namespace_with_size+0x62>
 80154da:	2303      	movs	r3, #3
 80154dc:	6023      	str	r3, [r4, #0]
 80154de:	e7f0      	b.n	80154c2 <rmw_validate_namespace_with_size+0x62>
 80154e0:	2304      	movs	r3, #4
 80154e2:	6023      	str	r3, [r4, #0]
 80154e4:	e7ed      	b.n	80154c2 <rmw_validate_namespace_with_size+0x62>
 80154e6:	2305      	movs	r3, #5
 80154e8:	6023      	str	r3, [r4, #0]
 80154ea:	e7ea      	b.n	80154c2 <rmw_validate_namespace_with_size+0x62>
 80154ec:	200b      	movs	r0, #11
 80154ee:	4770      	bx	lr
 80154f0:	4613      	mov	r3, r2
 80154f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80154f6:	4a03      	ldr	r2, [pc, #12]	; (8015504 <rmw_validate_namespace_with_size+0xa4>)
 80154f8:	a802      	add	r0, sp, #8
 80154fa:	f7ff fe99 	bl	8015230 <rcutils_snprintf>
 80154fe:	2001      	movs	r0, #1
 8015500:	e7d1      	b.n	80154a6 <rmw_validate_namespace_with_size+0x46>
 8015502:	bf00      	nop
 8015504:	08024f34 	.word	0x08024f34

08015508 <rmw_validate_namespace>:
 8015508:	b168      	cbz	r0, 8015526 <rmw_validate_namespace+0x1e>
 801550a:	b570      	push	{r4, r5, r6, lr}
 801550c:	460d      	mov	r5, r1
 801550e:	4616      	mov	r6, r2
 8015510:	4604      	mov	r4, r0
 8015512:	f7ea fef5 	bl	8000300 <strlen>
 8015516:	4633      	mov	r3, r6
 8015518:	4601      	mov	r1, r0
 801551a:	462a      	mov	r2, r5
 801551c:	4620      	mov	r0, r4
 801551e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015522:	f7ff bf9d 	b.w	8015460 <rmw_validate_namespace_with_size>
 8015526:	200b      	movs	r0, #11
 8015528:	4770      	bx	lr
 801552a:	bf00      	nop

0801552c <rmw_namespace_validation_result_string>:
 801552c:	2807      	cmp	r0, #7
 801552e:	d803      	bhi.n	8015538 <rmw_namespace_validation_result_string+0xc>
 8015530:	4b02      	ldr	r3, [pc, #8]	; (801553c <rmw_namespace_validation_result_string+0x10>)
 8015532:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015536:	4770      	bx	lr
 8015538:	4801      	ldr	r0, [pc, #4]	; (8015540 <rmw_namespace_validation_result_string+0x14>)
 801553a:	4770      	bx	lr
 801553c:	0802512c 	.word	0x0802512c
 8015540:	08024f84 	.word	0x08024f84

08015544 <rmw_validate_node_name>:
 8015544:	2800      	cmp	r0, #0
 8015546:	d042      	beq.n	80155ce <rmw_validate_node_name+0x8a>
 8015548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801554c:	460d      	mov	r5, r1
 801554e:	2900      	cmp	r1, #0
 8015550:	d03f      	beq.n	80155d2 <rmw_validate_node_name+0x8e>
 8015552:	4604      	mov	r4, r0
 8015554:	4616      	mov	r6, r2
 8015556:	f7ea fed3 	bl	8000300 <strlen>
 801555a:	b310      	cbz	r0, 80155a2 <rmw_validate_node_name+0x5e>
 801555c:	1e63      	subs	r3, r4, #1
 801555e:	f1c4 0101 	rsb	r1, r4, #1
 8015562:	eb03 0800 	add.w	r8, r3, r0
 8015566:	18cf      	adds	r7, r1, r3
 8015568:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801556c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8015570:	f02e 0c20 	bic.w	ip, lr, #32
 8015574:	2a09      	cmp	r2, #9
 8015576:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801557a:	d905      	bls.n	8015588 <rmw_validate_node_name+0x44>
 801557c:	f1bc 0f19 	cmp.w	ip, #25
 8015580:	d902      	bls.n	8015588 <rmw_validate_node_name+0x44>
 8015582:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8015586:	d114      	bne.n	80155b2 <rmw_validate_node_name+0x6e>
 8015588:	4598      	cmp	r8, r3
 801558a:	d1ec      	bne.n	8015566 <rmw_validate_node_name+0x22>
 801558c:	7822      	ldrb	r2, [r4, #0]
 801558e:	4b16      	ldr	r3, [pc, #88]	; (80155e8 <rmw_validate_node_name+0xa4>)
 8015590:	5cd3      	ldrb	r3, [r2, r3]
 8015592:	f013 0304 	ands.w	r3, r3, #4
 8015596:	d113      	bne.n	80155c0 <rmw_validate_node_name+0x7c>
 8015598:	28ff      	cmp	r0, #255	; 0xff
 801559a:	d81c      	bhi.n	80155d6 <rmw_validate_node_name+0x92>
 801559c:	4618      	mov	r0, r3
 801559e:	602b      	str	r3, [r5, #0]
 80155a0:	e00c      	b.n	80155bc <rmw_validate_node_name+0x78>
 80155a2:	2301      	movs	r3, #1
 80155a4:	602b      	str	r3, [r5, #0]
 80155a6:	b17e      	cbz	r6, 80155c8 <rmw_validate_node_name+0x84>
 80155a8:	2300      	movs	r3, #0
 80155aa:	4618      	mov	r0, r3
 80155ac:	6033      	str	r3, [r6, #0]
 80155ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155b2:	2302      	movs	r3, #2
 80155b4:	602b      	str	r3, [r5, #0]
 80155b6:	b13e      	cbz	r6, 80155c8 <rmw_validate_node_name+0x84>
 80155b8:	2000      	movs	r0, #0
 80155ba:	6037      	str	r7, [r6, #0]
 80155bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c0:	2303      	movs	r3, #3
 80155c2:	602b      	str	r3, [r5, #0]
 80155c4:	2e00      	cmp	r6, #0
 80155c6:	d1ef      	bne.n	80155a8 <rmw_validate_node_name+0x64>
 80155c8:	2000      	movs	r0, #0
 80155ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ce:	200b      	movs	r0, #11
 80155d0:	4770      	bx	lr
 80155d2:	200b      	movs	r0, #11
 80155d4:	e7f2      	b.n	80155bc <rmw_validate_node_name+0x78>
 80155d6:	2204      	movs	r2, #4
 80155d8:	602a      	str	r2, [r5, #0]
 80155da:	2e00      	cmp	r6, #0
 80155dc:	d0f4      	beq.n	80155c8 <rmw_validate_node_name+0x84>
 80155de:	22fe      	movs	r2, #254	; 0xfe
 80155e0:	4618      	mov	r0, r3
 80155e2:	6032      	str	r2, [r6, #0]
 80155e4:	e7ea      	b.n	80155bc <rmw_validate_node_name+0x78>
 80155e6:	bf00      	nop
 80155e8:	08025964 	.word	0x08025964

080155ec <rmw_node_name_validation_result_string>:
 80155ec:	2804      	cmp	r0, #4
 80155ee:	d803      	bhi.n	80155f8 <rmw_node_name_validation_result_string+0xc>
 80155f0:	4b02      	ldr	r3, [pc, #8]	; (80155fc <rmw_node_name_validation_result_string+0x10>)
 80155f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80155f6:	4770      	bx	lr
 80155f8:	4801      	ldr	r0, [pc, #4]	; (8015600 <rmw_node_name_validation_result_string+0x14>)
 80155fa:	4770      	bx	lr
 80155fc:	08025238 	.word	0x08025238
 8015600:	0802514c 	.word	0x0802514c

08015604 <rmw_uros_set_custom_transport>:
 8015604:	b470      	push	{r4, r5, r6}
 8015606:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801560a:	b162      	cbz	r2, 8015626 <rmw_uros_set_custom_transport+0x22>
 801560c:	b15b      	cbz	r3, 8015626 <rmw_uros_set_custom_transport+0x22>
 801560e:	b155      	cbz	r5, 8015626 <rmw_uros_set_custom_transport+0x22>
 8015610:	b14e      	cbz	r6, 8015626 <rmw_uros_set_custom_transport+0x22>
 8015612:	4c06      	ldr	r4, [pc, #24]	; (801562c <rmw_uros_set_custom_transport+0x28>)
 8015614:	7020      	strb	r0, [r4, #0]
 8015616:	2000      	movs	r0, #0
 8015618:	6166      	str	r6, [r4, #20]
 801561a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801561e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015622:	bc70      	pop	{r4, r5, r6}
 8015624:	4770      	bx	lr
 8015626:	200b      	movs	r0, #11
 8015628:	bc70      	pop	{r4, r5, r6}
 801562a:	4770      	bx	lr
 801562c:	2001216c 	.word	0x2001216c

08015630 <rmw_init_options_init>:
 8015630:	b084      	sub	sp, #16
 8015632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015634:	b083      	sub	sp, #12
 8015636:	ad09      	add	r5, sp, #36	; 0x24
 8015638:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801563c:	b130      	cbz	r0, 801564c <rmw_init_options_init+0x1c>
 801563e:	4604      	mov	r4, r0
 8015640:	4628      	mov	r0, r5
 8015642:	f7ff fcaf 	bl	8014fa4 <rcutils_allocator_is_valid>
 8015646:	b108      	cbz	r0, 801564c <rmw_init_options_init+0x1c>
 8015648:	68a6      	ldr	r6, [r4, #8]
 801564a:	b12e      	cbz	r6, 8015658 <rmw_init_options_init+0x28>
 801564c:	200b      	movs	r0, #11
 801564e:	b003      	add	sp, #12
 8015650:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015654:	b004      	add	sp, #16
 8015656:	4770      	bx	lr
 8015658:	2200      	movs	r2, #0
 801565a:	2300      	movs	r3, #0
 801565c:	f104 0c20 	add.w	ip, r4, #32
 8015660:	f8df e098 	ldr.w	lr, [pc, #152]	; 80156fc <rmw_init_options_init+0xcc>
 8015664:	466f      	mov	r7, sp
 8015666:	e9c4 2300 	strd	r2, r3, [r4]
 801566a:	4b20      	ldr	r3, [pc, #128]	; (80156ec <rmw_init_options_init+0xbc>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	60a3      	str	r3, [r4, #8]
 8015670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015672:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015676:	682b      	ldr	r3, [r5, #0]
 8015678:	4638      	mov	r0, r7
 801567a:	f8cc 3000 	str.w	r3, [ip]
 801567e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8015682:	60e6      	str	r6, [r4, #12]
 8015684:	f7ff fec0 	bl	8015408 <rmw_get_default_security_options>
 8015688:	f104 0310 	add.w	r3, r4, #16
 801568c:	2203      	movs	r2, #3
 801568e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015692:	e883 0003 	stmia.w	r3, {r0, r1}
 8015696:	4816      	ldr	r0, [pc, #88]	; (80156f0 <rmw_init_options_init+0xc0>)
 8015698:	4916      	ldr	r1, [pc, #88]	; (80156f4 <rmw_init_options_init+0xc4>)
 801569a:	7626      	strb	r6, [r4, #24]
 801569c:	f001 fa62 	bl	8016b64 <rmw_uxrce_init_init_options_impl_memory>
 80156a0:	4813      	ldr	r0, [pc, #76]	; (80156f0 <rmw_init_options_init+0xc0>)
 80156a2:	f008 fc21 	bl	801dee8 <get_memory>
 80156a6:	b1f0      	cbz	r0, 80156e6 <rmw_init_options_init+0xb6>
 80156a8:	4a13      	ldr	r2, [pc, #76]	; (80156f8 <rmw_init_options_init+0xc8>)
 80156aa:	6883      	ldr	r3, [r0, #8]
 80156ac:	6851      	ldr	r1, [r2, #4]
 80156ae:	6363      	str	r3, [r4, #52]	; 0x34
 80156b0:	7810      	ldrb	r0, [r2, #0]
 80156b2:	6159      	str	r1, [r3, #20]
 80156b4:	68d1      	ldr	r1, [r2, #12]
 80156b6:	7418      	strb	r0, [r3, #16]
 80156b8:	61d9      	str	r1, [r3, #28]
 80156ba:	6911      	ldr	r1, [r2, #16]
 80156bc:	6219      	str	r1, [r3, #32]
 80156be:	6951      	ldr	r1, [r2, #20]
 80156c0:	6892      	ldr	r2, [r2, #8]
 80156c2:	6259      	str	r1, [r3, #36]	; 0x24
 80156c4:	619a      	str	r2, [r3, #24]
 80156c6:	f004 fb61 	bl	8019d8c <uxr_nanos>
 80156ca:	f009 ffd3 	bl	801f674 <srand>
 80156ce:	f009 ffff 	bl	801f6d0 <rand>
 80156d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156d4:	6298      	str	r0, [r3, #40]	; 0x28
 80156d6:	2800      	cmp	r0, #0
 80156d8:	d0f9      	beq.n	80156ce <rmw_init_options_init+0x9e>
 80156da:	2000      	movs	r0, #0
 80156dc:	b003      	add	sp, #12
 80156de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80156e2:	b004      	add	sp, #16
 80156e4:	4770      	bx	lr
 80156e6:	2001      	movs	r0, #1
 80156e8:	e7b1      	b.n	801564e <rmw_init_options_init+0x1e>
 80156ea:	bf00      	nop
 80156ec:	080258bc 	.word	0x080258bc
 80156f0:	20016bc4 	.word	0x20016bc4
 80156f4:	20012460 	.word	0x20012460
 80156f8:	2001216c 	.word	0x2001216c
 80156fc:	08024c48 	.word	0x08024c48

08015700 <rmw_init_options_copy>:
 8015700:	2800      	cmp	r0, #0
 8015702:	d047      	beq.n	8015794 <rmw_init_options_copy+0x94>
 8015704:	b570      	push	{r4, r5, r6, lr}
 8015706:	460d      	mov	r5, r1
 8015708:	b149      	cbz	r1, 801571e <rmw_init_options_copy+0x1e>
 801570a:	4604      	mov	r4, r0
 801570c:	6880      	ldr	r0, [r0, #8]
 801570e:	b120      	cbz	r0, 801571a <rmw_init_options_copy+0x1a>
 8015710:	4b22      	ldr	r3, [pc, #136]	; (801579c <rmw_init_options_copy+0x9c>)
 8015712:	6819      	ldr	r1, [r3, #0]
 8015714:	f7ea fd94 	bl	8000240 <strcmp>
 8015718:	bba8      	cbnz	r0, 8015786 <rmw_init_options_copy+0x86>
 801571a:	68ab      	ldr	r3, [r5, #8]
 801571c:	b11b      	cbz	r3, 8015726 <rmw_init_options_copy+0x26>
 801571e:	f04f 0c0b 	mov.w	ip, #11
 8015722:	4660      	mov	r0, ip
 8015724:	bd70      	pop	{r4, r5, r6, pc}
 8015726:	4623      	mov	r3, r4
 8015728:	462a      	mov	r2, r5
 801572a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801572e:	f8d3 e000 	ldr.w	lr, [r3]
 8015732:	3310      	adds	r3, #16
 8015734:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8015738:	3210      	adds	r2, #16
 801573a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801573e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015742:	42b3      	cmp	r3, r6
 8015744:	f842 ec10 	str.w	lr, [r2, #-16]
 8015748:	f842 cc0c 	str.w	ip, [r2, #-12]
 801574c:	f842 0c08 	str.w	r0, [r2, #-8]
 8015750:	f842 1c04 	str.w	r1, [r2, #-4]
 8015754:	d1eb      	bne.n	801572e <rmw_init_options_copy+0x2e>
 8015756:	6819      	ldr	r1, [r3, #0]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	4811      	ldr	r0, [pc, #68]	; (80157a0 <rmw_init_options_copy+0xa0>)
 801575c:	6011      	str	r1, [r2, #0]
 801575e:	6053      	str	r3, [r2, #4]
 8015760:	f008 fbc2 	bl	801dee8 <get_memory>
 8015764:	b198      	cbz	r0, 801578e <rmw_init_options_copy+0x8e>
 8015766:	6883      	ldr	r3, [r0, #8]
 8015768:	f04f 0c00 	mov.w	ip, #0
 801576c:	636b      	str	r3, [r5, #52]	; 0x34
 801576e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8015770:	f103 0410 	add.w	r4, r3, #16
 8015774:	3510      	adds	r5, #16
 8015776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801577a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801577e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015782:	4660      	mov	r0, ip
 8015784:	bd70      	pop	{r4, r5, r6, pc}
 8015786:	f04f 0c0c 	mov.w	ip, #12
 801578a:	4660      	mov	r0, ip
 801578c:	bd70      	pop	{r4, r5, r6, pc}
 801578e:	f04f 0c01 	mov.w	ip, #1
 8015792:	e7c6      	b.n	8015722 <rmw_init_options_copy+0x22>
 8015794:	f04f 0c0b 	mov.w	ip, #11
 8015798:	4660      	mov	r0, ip
 801579a:	4770      	bx	lr
 801579c:	080258bc 	.word	0x080258bc
 80157a0:	20016bc4 	.word	0x20016bc4

080157a4 <rmw_init_options_fini>:
 80157a4:	b510      	push	{r4, lr}
 80157a6:	b08e      	sub	sp, #56	; 0x38
 80157a8:	b388      	cbz	r0, 801580e <rmw_init_options_fini+0x6a>
 80157aa:	4604      	mov	r4, r0
 80157ac:	3020      	adds	r0, #32
 80157ae:	f7ff fbf9 	bl	8014fa4 <rcutils_allocator_is_valid>
 80157b2:	b360      	cbz	r0, 801580e <rmw_init_options_fini+0x6a>
 80157b4:	68a0      	ldr	r0, [r4, #8]
 80157b6:	b120      	cbz	r0, 80157c2 <rmw_init_options_fini+0x1e>
 80157b8:	4b1a      	ldr	r3, [pc, #104]	; (8015824 <rmw_init_options_fini+0x80>)
 80157ba:	6819      	ldr	r1, [r3, #0]
 80157bc:	f7ea fd40 	bl	8000240 <strcmp>
 80157c0:	bb68      	cbnz	r0, 801581e <rmw_init_options_fini+0x7a>
 80157c2:	4b19      	ldr	r3, [pc, #100]	; (8015828 <rmw_init_options_fini+0x84>)
 80157c4:	6819      	ldr	r1, [r3, #0]
 80157c6:	b331      	cbz	r1, 8015816 <rmw_init_options_fini+0x72>
 80157c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80157ca:	e001      	b.n	80157d0 <rmw_init_options_fini+0x2c>
 80157cc:	6849      	ldr	r1, [r1, #4]
 80157ce:	b311      	cbz	r1, 8015816 <rmw_init_options_fini+0x72>
 80157d0:	688b      	ldr	r3, [r1, #8]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d1fa      	bne.n	80157cc <rmw_init_options_fini+0x28>
 80157d6:	4814      	ldr	r0, [pc, #80]	; (8015828 <rmw_init_options_fini+0x84>)
 80157d8:	f008 fb96 	bl	801df08 <put_memory>
 80157dc:	4668      	mov	r0, sp
 80157de:	f7ff fdff 	bl	80153e0 <rmw_get_zero_initialized_init_options>
 80157e2:	46ee      	mov	lr, sp
 80157e4:	46a4      	mov	ip, r4
 80157e6:	2400      	movs	r4, #0
 80157e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015800:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015804:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015808:	4620      	mov	r0, r4
 801580a:	b00e      	add	sp, #56	; 0x38
 801580c:	bd10      	pop	{r4, pc}
 801580e:	240b      	movs	r4, #11
 8015810:	4620      	mov	r0, r4
 8015812:	b00e      	add	sp, #56	; 0x38
 8015814:	bd10      	pop	{r4, pc}
 8015816:	2401      	movs	r4, #1
 8015818:	4620      	mov	r0, r4
 801581a:	b00e      	add	sp, #56	; 0x38
 801581c:	bd10      	pop	{r4, pc}
 801581e:	240c      	movs	r4, #12
 8015820:	e7f2      	b.n	8015808 <rmw_init_options_fini+0x64>
 8015822:	bf00      	nop
 8015824:	080258bc 	.word	0x080258bc
 8015828:	20016bc4 	.word	0x20016bc4

0801582c <rmw_init>:
 801582c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015830:	b083      	sub	sp, #12
 8015832:	2800      	cmp	r0, #0
 8015834:	f000 80d3 	beq.w	80159de <rmw_init+0x1b2>
 8015838:	460e      	mov	r6, r1
 801583a:	2900      	cmp	r1, #0
 801583c:	f000 80cf 	beq.w	80159de <rmw_init+0x1b2>
 8015840:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015842:	4605      	mov	r5, r0
 8015844:	2b00      	cmp	r3, #0
 8015846:	f000 80ca 	beq.w	80159de <rmw_init+0x1b2>
 801584a:	4b78      	ldr	r3, [pc, #480]	; (8015a2c <rmw_init+0x200>)
 801584c:	6880      	ldr	r0, [r0, #8]
 801584e:	681f      	ldr	r7, [r3, #0]
 8015850:	b128      	cbz	r0, 801585e <rmw_init+0x32>
 8015852:	4639      	mov	r1, r7
 8015854:	f7ea fcf4 	bl	8000240 <strcmp>
 8015858:	2800      	cmp	r0, #0
 801585a:	f040 80ca 	bne.w	80159f2 <rmw_init+0x1c6>
 801585e:	4c74      	ldr	r4, [pc, #464]	; (8015a30 <rmw_init+0x204>)
 8015860:	f04f 0800 	mov.w	r8, #0
 8015864:	4973      	ldr	r1, [pc, #460]	; (8015a34 <rmw_init+0x208>)
 8015866:	4874      	ldr	r0, [pc, #464]	; (8015a38 <rmw_init+0x20c>)
 8015868:	e9d5 2300 	ldrd	r2, r3, [r5]
 801586c:	60b7      	str	r7, [r6, #8]
 801586e:	e9c6 2300 	strd	r2, r3, [r6]
 8015872:	68eb      	ldr	r3, [r5, #12]
 8015874:	2201      	movs	r2, #1
 8015876:	64b3      	str	r3, [r6, #72]	; 0x48
 8015878:	f001 f914 	bl	8016aa4 <rmw_uxrce_init_session_memory>
 801587c:	4620      	mov	r0, r4
 801587e:	2204      	movs	r2, #4
 8015880:	496e      	ldr	r1, [pc, #440]	; (8015a3c <rmw_init+0x210>)
 8015882:	f001 f94f 	bl	8016b24 <rmw_uxrce_init_static_input_buffer_memory>
 8015886:	486c      	ldr	r0, [pc, #432]	; (8015a38 <rmw_init+0x20c>)
 8015888:	f884 800d 	strb.w	r8, [r4, #13]
 801588c:	f008 fb2c 	bl	801dee8 <get_memory>
 8015890:	2800      	cmp	r0, #0
 8015892:	f000 80a9 	beq.w	80159e8 <rmw_init+0x1bc>
 8015896:	6884      	ldr	r4, [r0, #8]
 8015898:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801589a:	f104 0910 	add.w	r9, r4, #16
 801589e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80158a0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80158a4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80158a8:	9101      	str	r1, [sp, #4]
 80158aa:	4661      	mov	r1, ip
 80158ac:	6a00      	ldr	r0, [r0, #32]
 80158ae:	9000      	str	r0, [sp, #0]
 80158b0:	4648      	mov	r0, r9
 80158b2:	f002 fa13 	bl	8017cdc <uxr_set_custom_transport_callbacks>
 80158b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80158ba:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80158be:	4960      	ldr	r1, [pc, #384]	; (8015a40 <rmw_init+0x214>)
 80158c0:	4860      	ldr	r0, [pc, #384]	; (8015a44 <rmw_init+0x218>)
 80158c2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80158c6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80158ca:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80158ce:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80158d2:	2201      	movs	r2, #1
 80158d4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80158d8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80158dc:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80158e0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80158e4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80158e6:	f001 f8bd 	bl	8016a64 <rmw_uxrce_init_node_memory>
 80158ea:	2205      	movs	r2, #5
 80158ec:	4956      	ldr	r1, [pc, #344]	; (8015a48 <rmw_init+0x21c>)
 80158ee:	4857      	ldr	r0, [pc, #348]	; (8015a4c <rmw_init+0x220>)
 80158f0:	f001 f898 	bl	8016a24 <rmw_uxrce_init_subscription_memory>
 80158f4:	220a      	movs	r2, #10
 80158f6:	4956      	ldr	r1, [pc, #344]	; (8015a50 <rmw_init+0x224>)
 80158f8:	4856      	ldr	r0, [pc, #344]	; (8015a54 <rmw_init+0x228>)
 80158fa:	f001 f873 	bl	80169e4 <rmw_uxrce_init_publisher_memory>
 80158fe:	2201      	movs	r2, #1
 8015900:	4955      	ldr	r1, [pc, #340]	; (8015a58 <rmw_init+0x22c>)
 8015902:	4856      	ldr	r0, [pc, #344]	; (8015a5c <rmw_init+0x230>)
 8015904:	f001 f82e 	bl	8016964 <rmw_uxrce_init_service_memory>
 8015908:	2201      	movs	r2, #1
 801590a:	4955      	ldr	r1, [pc, #340]	; (8015a60 <rmw_init+0x234>)
 801590c:	4855      	ldr	r0, [pc, #340]	; (8015a64 <rmw_init+0x238>)
 801590e:	f001 f849 	bl	80169a4 <rmw_uxrce_init_client_memory>
 8015912:	220f      	movs	r2, #15
 8015914:	4954      	ldr	r1, [pc, #336]	; (8015a68 <rmw_init+0x23c>)
 8015916:	4855      	ldr	r0, [pc, #340]	; (8015a6c <rmw_init+0x240>)
 8015918:	f001 f8e4 	bl	8016ae4 <rmw_uxrce_init_topic_memory>
 801591c:	2203      	movs	r2, #3
 801591e:	4954      	ldr	r1, [pc, #336]	; (8015a70 <rmw_init+0x244>)
 8015920:	4854      	ldr	r0, [pc, #336]	; (8015a74 <rmw_init+0x248>)
 8015922:	f001 f91f 	bl	8016b64 <rmw_uxrce_init_init_options_impl_memory>
 8015926:	2204      	movs	r2, #4
 8015928:	4953      	ldr	r1, [pc, #332]	; (8015a78 <rmw_init+0x24c>)
 801592a:	4854      	ldr	r0, [pc, #336]	; (8015a7c <rmw_init+0x250>)
 801592c:	f001 f93a 	bl	8016ba4 <rmw_uxrce_init_wait_set_memory>
 8015930:	4953      	ldr	r1, [pc, #332]	; (8015a80 <rmw_init+0x254>)
 8015932:	4854      	ldr	r0, [pc, #336]	; (8015a84 <rmw_init+0x258>)
 8015934:	2204      	movs	r2, #4
 8015936:	f001 f955 	bl	8016be4 <rmw_uxrce_init_guard_condition_memory>
 801593a:	4642      	mov	r2, r8
 801593c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801593e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015940:	f000 fff8 	bl	8016934 <rmw_uxrce_transport_init>
 8015944:	4607      	mov	r7, r0
 8015946:	2800      	cmp	r0, #0
 8015948:	d158      	bne.n	80159fc <rmw_init+0x1d0>
 801594a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801594c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015950:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015956:	4628      	mov	r0, r5
 8015958:	f002 fbf2 	bl	8018140 <uxr_init_session>
 801595c:	4622      	mov	r2, r4
 801595e:	494a      	ldr	r1, [pc, #296]	; (8015a88 <rmw_init+0x25c>)
 8015960:	4628      	mov	r0, r5
 8015962:	f002 fc11 	bl	8018188 <uxr_set_topic_callback>
 8015966:	463a      	mov	r2, r7
 8015968:	4948      	ldr	r1, [pc, #288]	; (8015a8c <rmw_init+0x260>)
 801596a:	4628      	mov	r0, r5
 801596c:	f002 fc08 	bl	8018180 <uxr_set_status_callback>
 8015970:	463a      	mov	r2, r7
 8015972:	4947      	ldr	r1, [pc, #284]	; (8015a90 <rmw_init+0x264>)
 8015974:	4628      	mov	r0, r5
 8015976:	f002 fc0b 	bl	8018190 <uxr_set_request_callback>
 801597a:	463a      	mov	r2, r7
 801597c:	4945      	ldr	r1, [pc, #276]	; (8015a94 <rmw_init+0x268>)
 801597e:	4628      	mov	r0, r5
 8015980:	f002 fc0a 	bl	8018198 <uxr_set_reply_callback>
 8015984:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015988:	2304      	movs	r3, #4
 801598a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801598e:	0092      	lsls	r2, r2, #2
 8015990:	4628      	mov	r0, r5
 8015992:	f002 fc41 	bl	8018218 <uxr_create_input_reliable_stream>
 8015996:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801599a:	2304      	movs	r3, #4
 801599c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80159a0:	0092      	lsls	r2, r2, #2
 80159a2:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80159a6:	4628      	mov	r0, r5
 80159a8:	f002 fc0c 	bl	80181c4 <uxr_create_output_reliable_stream>
 80159ac:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 80159b0:	4628      	mov	r0, r5
 80159b2:	f002 fc2b 	bl	801820c <uxr_create_input_best_effort_stream>
 80159b6:	f241 3194 	movw	r1, #5012	; 0x1394
 80159ba:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80159be:	4628      	mov	r0, r5
 80159c0:	4421      	add	r1, r4
 80159c2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80159c6:	f002 fbeb 	bl	80181a0 <uxr_create_output_best_effort_stream>
 80159ca:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80159ce:	4628      	mov	r0, r5
 80159d0:	f003 f974 	bl	8018cbc <uxr_create_session>
 80159d4:	b1f8      	cbz	r0, 8015a16 <rmw_init+0x1ea>
 80159d6:	4638      	mov	r0, r7
 80159d8:	b003      	add	sp, #12
 80159da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159de:	270b      	movs	r7, #11
 80159e0:	4638      	mov	r0, r7
 80159e2:	b003      	add	sp, #12
 80159e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159e8:	2701      	movs	r7, #1
 80159ea:	4638      	mov	r0, r7
 80159ec:	b003      	add	sp, #12
 80159ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159f2:	270c      	movs	r7, #12
 80159f4:	4638      	mov	r0, r7
 80159f6:	b003      	add	sp, #12
 80159f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159fc:	4648      	mov	r0, r9
 80159fe:	f002 f9ab 	bl	8017d58 <uxr_close_custom_transport>
 8015a02:	4621      	mov	r1, r4
 8015a04:	480c      	ldr	r0, [pc, #48]	; (8015a38 <rmw_init+0x20c>)
 8015a06:	f008 fa7f 	bl	801df08 <put_memory>
 8015a0a:	4638      	mov	r0, r7
 8015a0c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015a10:	b003      	add	sp, #12
 8015a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a16:	4648      	mov	r0, r9
 8015a18:	f002 f99e 	bl	8017d58 <uxr_close_custom_transport>
 8015a1c:	4621      	mov	r1, r4
 8015a1e:	4806      	ldr	r0, [pc, #24]	; (8015a38 <rmw_init+0x20c>)
 8015a20:	f008 fa72 	bl	801df08 <put_memory>
 8015a24:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015a26:	2701      	movs	r7, #1
 8015a28:	e7d5      	b.n	80159d6 <rmw_init+0x1aa>
 8015a2a:	bf00      	nop
 8015a2c:	080258bc 	.word	0x080258bc
 8015a30:	20016c14 	.word	0x20016c14
 8015a34:	20012ec0 	.word	0x20012ec0
 8015a38:	20016c04 	.word	0x20016c04
 8015a3c:	20014468 	.word	0x20014468
 8015a40:	200124e4 	.word	0x200124e4
 8015a44:	20016bd4 	.word	0x20016bd4
 8015a48:	20016568 	.word	0x20016568
 8015a4c:	20016c24 	.word	0x20016c24
 8015a50:	20012588 	.word	0x20012588
 8015a54:	20016be4 	.word	0x20016be4
 8015a58:	20012df8 	.word	0x20012df8
 8015a5c:	20016bf4 	.word	0x20016bf4
 8015a60:	20012318 	.word	0x20012318
 8015a64:	20012304 	.word	0x20012304
 8015a68:	200169a0 	.word	0x200169a0
 8015a6c:	20016c34 	.word	0x20016c34
 8015a70:	20012460 	.word	0x20012460
 8015a74:	20016bc4 	.word	0x20016bc4
 8015a78:	20016b44 	.word	0x20016b44
 8015a7c:	20016c44 	.word	0x20016c44
 8015a80:	200123e0 	.word	0x200123e0
 8015a84:	20016bb4 	.word	0x20016bb4
 8015a88:	0801dd21 	.word	0x0801dd21
 8015a8c:	0801dd19 	.word	0x0801dd19
 8015a90:	0801ddb9 	.word	0x0801ddb9
 8015a94:	0801de55 	.word	0x0801de55

08015a98 <rmw_context_fini>:
 8015a98:	4b17      	ldr	r3, [pc, #92]	; (8015af8 <rmw_context_fini+0x60>)
 8015a9a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015a9c:	b570      	push	{r4, r5, r6, lr}
 8015a9e:	681c      	ldr	r4, [r3, #0]
 8015aa0:	4605      	mov	r5, r0
 8015aa2:	b334      	cbz	r4, 8015af2 <rmw_context_fini+0x5a>
 8015aa4:	2600      	movs	r6, #0
 8015aa6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015aaa:	6902      	ldr	r2, [r0, #16]
 8015aac:	428a      	cmp	r2, r1
 8015aae:	d018      	beq.n	8015ae2 <rmw_context_fini+0x4a>
 8015ab0:	2c00      	cmp	r4, #0
 8015ab2:	d1f8      	bne.n	8015aa6 <rmw_context_fini+0xe>
 8015ab4:	b189      	cbz	r1, 8015ada <rmw_context_fini+0x42>
 8015ab6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015aba:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015abe:	789b      	ldrb	r3, [r3, #2]
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	bf14      	ite	ne
 8015ac4:	210a      	movne	r1, #10
 8015ac6:	2100      	moveq	r1, #0
 8015ac8:	f003 f8d0 	bl	8018c6c <uxr_delete_session_retries>
 8015acc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015ace:	f001 f8a9 	bl	8016c24 <rmw_uxrce_fini_session_memory>
 8015ad2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015ad4:	3010      	adds	r0, #16
 8015ad6:	f002 f93f 	bl	8017d58 <uxr_close_custom_transport>
 8015ada:	2300      	movs	r3, #0
 8015adc:	4630      	mov	r0, r6
 8015ade:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015ae0:	bd70      	pop	{r4, r5, r6, pc}
 8015ae2:	3018      	adds	r0, #24
 8015ae4:	f000 f89c 	bl	8015c20 <rmw_destroy_node>
 8015ae8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015aea:	4606      	mov	r6, r0
 8015aec:	2c00      	cmp	r4, #0
 8015aee:	d1da      	bne.n	8015aa6 <rmw_context_fini+0xe>
 8015af0:	e7e0      	b.n	8015ab4 <rmw_context_fini+0x1c>
 8015af2:	4626      	mov	r6, r4
 8015af4:	e7de      	b.n	8015ab4 <rmw_context_fini+0x1c>
 8015af6:	bf00      	nop
 8015af8:	20016bd4 	.word	0x20016bd4

08015afc <create_node>:
 8015afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b00:	b083      	sub	sp, #12
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d064      	beq.n	8015bd0 <create_node+0xd4>
 8015b06:	4606      	mov	r6, r0
 8015b08:	4838      	ldr	r0, [pc, #224]	; (8015bec <create_node+0xf0>)
 8015b0a:	460f      	mov	r7, r1
 8015b0c:	4690      	mov	r8, r2
 8015b0e:	461d      	mov	r5, r3
 8015b10:	f008 f9ea 	bl	801dee8 <get_memory>
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d05b      	beq.n	8015bd0 <create_node+0xd4>
 8015b18:	6884      	ldr	r4, [r0, #8]
 8015b1a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015b1c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015b20:	f104 0518 	add.w	r5, r4, #24
 8015b24:	6123      	str	r3, [r4, #16]
 8015b26:	f008 fa47 	bl	801dfb8 <rmw_get_implementation_identifier>
 8015b2a:	f8c4 9020 	str.w	r9, [r4, #32]
 8015b2e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015b32:	4630      	mov	r0, r6
 8015b34:	f7ea fbe4 	bl	8000300 <strlen>
 8015b38:	1c42      	adds	r2, r0, #1
 8015b3a:	2a3c      	cmp	r2, #60	; 0x3c
 8015b3c:	d840      	bhi.n	8015bc0 <create_node+0xc4>
 8015b3e:	4648      	mov	r0, r9
 8015b40:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015b44:	4631      	mov	r1, r6
 8015b46:	f00b f98a 	bl	8020e5e <memcpy>
 8015b4a:	4638      	mov	r0, r7
 8015b4c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015b50:	f7ea fbd6 	bl	8000300 <strlen>
 8015b54:	1c42      	adds	r2, r0, #1
 8015b56:	2a3c      	cmp	r2, #60	; 0x3c
 8015b58:	d832      	bhi.n	8015bc0 <create_node+0xc4>
 8015b5a:	4639      	mov	r1, r7
 8015b5c:	4648      	mov	r0, r9
 8015b5e:	f00b f97e 	bl	8020e5e <memcpy>
 8015b62:	6923      	ldr	r3, [r4, #16]
 8015b64:	2101      	movs	r1, #1
 8015b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b6a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015b6e:	1842      	adds	r2, r0, r1
 8015b70:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015b74:	f002 f8f4 	bl	8017d60 <uxr_object_id>
 8015b78:	6160      	str	r0, [r4, #20]
 8015b7a:	783b      	ldrb	r3, [r7, #0]
 8015b7c:	2b2f      	cmp	r3, #47	; 0x2f
 8015b7e:	d12c      	bne.n	8015bda <create_node+0xde>
 8015b80:	787b      	ldrb	r3, [r7, #1]
 8015b82:	bb53      	cbnz	r3, 8015bda <create_node+0xde>
 8015b84:	4633      	mov	r3, r6
 8015b86:	4a1a      	ldr	r2, [pc, #104]	; (8015bf0 <create_node+0xf4>)
 8015b88:	213c      	movs	r1, #60	; 0x3c
 8015b8a:	481a      	ldr	r0, [pc, #104]	; (8015bf4 <create_node+0xf8>)
 8015b8c:	f00a ff0a 	bl	80209a4 <sniprintf>
 8015b90:	6920      	ldr	r0, [r4, #16]
 8015b92:	2106      	movs	r1, #6
 8015b94:	fa1f f388 	uxth.w	r3, r8
 8015b98:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015b9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ba0:	9101      	str	r1, [sp, #4]
 8015ba2:	4914      	ldr	r1, [pc, #80]	; (8015bf4 <create_node+0xf8>)
 8015ba4:	9100      	str	r1, [sp, #0]
 8015ba6:	6811      	ldr	r1, [r2, #0]
 8015ba8:	6962      	ldr	r2, [r4, #20]
 8015baa:	f001 fe2b 	bl	8017804 <uxr_buffer_create_participant_bin>
 8015bae:	4602      	mov	r2, r0
 8015bb0:	6920      	ldr	r0, [r4, #16]
 8015bb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015bb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015bba:	f001 f9b7 	bl	8016f2c <run_xrce_session>
 8015bbe:	b918      	cbnz	r0, 8015bc8 <create_node+0xcc>
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	2500      	movs	r5, #0
 8015bc4:	f001 f834 	bl	8016c30 <rmw_uxrce_fini_node_memory>
 8015bc8:	4628      	mov	r0, r5
 8015bca:	b003      	add	sp, #12
 8015bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bd0:	2500      	movs	r5, #0
 8015bd2:	4628      	mov	r0, r5
 8015bd4:	b003      	add	sp, #12
 8015bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bda:	463b      	mov	r3, r7
 8015bdc:	4a06      	ldr	r2, [pc, #24]	; (8015bf8 <create_node+0xfc>)
 8015bde:	213c      	movs	r1, #60	; 0x3c
 8015be0:	9600      	str	r6, [sp, #0]
 8015be2:	4804      	ldr	r0, [pc, #16]	; (8015bf4 <create_node+0xf8>)
 8015be4:	f00a fede 	bl	80209a4 <sniprintf>
 8015be8:	e7d2      	b.n	8015b90 <create_node+0x94>
 8015bea:	bf00      	nop
 8015bec:	20016bd4 	.word	0x20016bd4
 8015bf0:	0802525c 	.word	0x0802525c
 8015bf4:	20012188 	.word	0x20012188
 8015bf8:	08024c58 	.word	0x08024c58

08015bfc <rmw_create_node>:
 8015bfc:	468c      	mov	ip, r1
 8015bfe:	4611      	mov	r1, r2
 8015c00:	f1bc 0f00 	cmp.w	ip, #0
 8015c04:	d00a      	beq.n	8015c1c <rmw_create_node+0x20>
 8015c06:	f89c 3000 	ldrb.w	r3, [ip]
 8015c0a:	b13b      	cbz	r3, 8015c1c <rmw_create_node+0x20>
 8015c0c:	b132      	cbz	r2, 8015c1c <rmw_create_node+0x20>
 8015c0e:	7813      	ldrb	r3, [r2, #0]
 8015c10:	b123      	cbz	r3, 8015c1c <rmw_create_node+0x20>
 8015c12:	4603      	mov	r3, r0
 8015c14:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015c16:	4660      	mov	r0, ip
 8015c18:	f7ff bf70 	b.w	8015afc <create_node>
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	4770      	bx	lr

08015c20 <rmw_destroy_node>:
 8015c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c22:	b328      	cbz	r0, 8015c70 <rmw_destroy_node+0x50>
 8015c24:	4607      	mov	r7, r0
 8015c26:	6800      	ldr	r0, [r0, #0]
 8015c28:	b120      	cbz	r0, 8015c34 <rmw_destroy_node+0x14>
 8015c2a:	4b37      	ldr	r3, [pc, #220]	; (8015d08 <rmw_destroy_node+0xe8>)
 8015c2c:	6819      	ldr	r1, [r3, #0]
 8015c2e:	f7ea fb07 	bl	8000240 <strcmp>
 8015c32:	b9e8      	cbnz	r0, 8015c70 <rmw_destroy_node+0x50>
 8015c34:	687d      	ldr	r5, [r7, #4]
 8015c36:	b1dd      	cbz	r5, 8015c70 <rmw_destroy_node+0x50>
 8015c38:	4b34      	ldr	r3, [pc, #208]	; (8015d0c <rmw_destroy_node+0xec>)
 8015c3a:	681c      	ldr	r4, [r3, #0]
 8015c3c:	2c00      	cmp	r4, #0
 8015c3e:	d060      	beq.n	8015d02 <rmw_destroy_node+0xe2>
 8015c40:	2600      	movs	r6, #0
 8015c42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015c46:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015c4a:	429d      	cmp	r5, r3
 8015c4c:	d013      	beq.n	8015c76 <rmw_destroy_node+0x56>
 8015c4e:	2c00      	cmp	r4, #0
 8015c50:	d1f7      	bne.n	8015c42 <rmw_destroy_node+0x22>
 8015c52:	4b2f      	ldr	r3, [pc, #188]	; (8015d10 <rmw_destroy_node+0xf0>)
 8015c54:	681c      	ldr	r4, [r3, #0]
 8015c56:	b1c4      	cbz	r4, 8015c8a <rmw_destroy_node+0x6a>
 8015c58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015c5c:	6a0b      	ldr	r3, [r1, #32]
 8015c5e:	429d      	cmp	r5, r3
 8015c60:	d1f9      	bne.n	8015c56 <rmw_destroy_node+0x36>
 8015c62:	317c      	adds	r1, #124	; 0x7c
 8015c64:	4638      	mov	r0, r7
 8015c66:	f000 fdaf 	bl	80167c8 <rmw_destroy_subscription>
 8015c6a:	2801      	cmp	r0, #1
 8015c6c:	4606      	mov	r6, r0
 8015c6e:	d1f2      	bne.n	8015c56 <rmw_destroy_node+0x36>
 8015c70:	2601      	movs	r6, #1
 8015c72:	4630      	mov	r0, r6
 8015c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c76:	3184      	adds	r1, #132	; 0x84
 8015c78:	4638      	mov	r0, r7
 8015c7a:	f000 f9b1 	bl	8015fe0 <rmw_destroy_publisher>
 8015c7e:	2801      	cmp	r0, #1
 8015c80:	4606      	mov	r6, r0
 8015c82:	d0f5      	beq.n	8015c70 <rmw_destroy_node+0x50>
 8015c84:	2c00      	cmp	r4, #0
 8015c86:	d1dc      	bne.n	8015c42 <rmw_destroy_node+0x22>
 8015c88:	e7e3      	b.n	8015c52 <rmw_destroy_node+0x32>
 8015c8a:	4b22      	ldr	r3, [pc, #136]	; (8015d14 <rmw_destroy_node+0xf4>)
 8015c8c:	681c      	ldr	r4, [r3, #0]
 8015c8e:	b16c      	cbz	r4, 8015cac <rmw_destroy_node+0x8c>
 8015c90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015c94:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015c96:	429d      	cmp	r5, r3
 8015c98:	d1f9      	bne.n	8015c8e <rmw_destroy_node+0x6e>
 8015c9a:	317c      	adds	r1, #124	; 0x7c
 8015c9c:	4638      	mov	r0, r7
 8015c9e:	f000 fc1d 	bl	80164dc <rmw_destroy_service>
 8015ca2:	2801      	cmp	r0, #1
 8015ca4:	4606      	mov	r6, r0
 8015ca6:	d0e3      	beq.n	8015c70 <rmw_destroy_node+0x50>
 8015ca8:	2c00      	cmp	r4, #0
 8015caa:	d1f1      	bne.n	8015c90 <rmw_destroy_node+0x70>
 8015cac:	4b1a      	ldr	r3, [pc, #104]	; (8015d18 <rmw_destroy_node+0xf8>)
 8015cae:	681c      	ldr	r4, [r3, #0]
 8015cb0:	b16c      	cbz	r4, 8015cce <rmw_destroy_node+0xae>
 8015cb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015cb6:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015cb8:	429d      	cmp	r5, r3
 8015cba:	d1f9      	bne.n	8015cb0 <rmw_destroy_node+0x90>
 8015cbc:	317c      	adds	r1, #124	; 0x7c
 8015cbe:	4638      	mov	r0, r7
 8015cc0:	f008 f936 	bl	801df30 <rmw_destroy_client>
 8015cc4:	2801      	cmp	r0, #1
 8015cc6:	4606      	mov	r6, r0
 8015cc8:	d0d2      	beq.n	8015c70 <rmw_destroy_node+0x50>
 8015cca:	2c00      	cmp	r4, #0
 8015ccc:	d1f1      	bne.n	8015cb2 <rmw_destroy_node+0x92>
 8015cce:	6928      	ldr	r0, [r5, #16]
 8015cd0:	696a      	ldr	r2, [r5, #20]
 8015cd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015cd6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015cda:	6819      	ldr	r1, [r3, #0]
 8015cdc:	f001 fd46 	bl	801776c <uxr_buffer_delete_entity>
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	6928      	ldr	r0, [r5, #16]
 8015ce4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015ce8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015cec:	f001 f91e 	bl	8016f2c <run_xrce_session>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	4638      	mov	r0, r7
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	bf08      	it	eq
 8015cf8:	2602      	moveq	r6, #2
 8015cfa:	f000 ff99 	bl	8016c30 <rmw_uxrce_fini_node_memory>
 8015cfe:	4630      	mov	r0, r6
 8015d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d02:	4626      	mov	r6, r4
 8015d04:	e7a5      	b.n	8015c52 <rmw_destroy_node+0x32>
 8015d06:	bf00      	nop
 8015d08:	080258bc 	.word	0x080258bc
 8015d0c:	20016be4 	.word	0x20016be4
 8015d10:	20016c24 	.word	0x20016c24
 8015d14:	20016bf4 	.word	0x20016bf4
 8015d18:	20012304 	.word	0x20012304

08015d1c <rmw_node_get_graph_guard_condition>:
 8015d1c:	6843      	ldr	r3, [r0, #4]
 8015d1e:	6918      	ldr	r0, [r3, #16]
 8015d20:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015d24:	4770      	bx	lr
 8015d26:	bf00      	nop

08015d28 <flush_session>:
 8015d28:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8015d2a:	f002 be55 	b.w	80189d8 <uxr_run_session_until_confirm_delivery>
 8015d2e:	bf00      	nop

08015d30 <rmw_publish>:
 8015d30:	2800      	cmp	r0, #0
 8015d32:	d053      	beq.n	8015ddc <rmw_publish+0xac>
 8015d34:	b570      	push	{r4, r5, r6, lr}
 8015d36:	460d      	mov	r5, r1
 8015d38:	b08e      	sub	sp, #56	; 0x38
 8015d3a:	2900      	cmp	r1, #0
 8015d3c:	d04b      	beq.n	8015dd6 <rmw_publish+0xa6>
 8015d3e:	4604      	mov	r4, r0
 8015d40:	6800      	ldr	r0, [r0, #0]
 8015d42:	f001 fa05 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d045      	beq.n	8015dd6 <rmw_publish+0xa6>
 8015d4a:	6866      	ldr	r6, [r4, #4]
 8015d4c:	2e00      	cmp	r6, #0
 8015d4e:	d042      	beq.n	8015dd6 <rmw_publish+0xa6>
 8015d50:	69b4      	ldr	r4, [r6, #24]
 8015d52:	4628      	mov	r0, r5
 8015d54:	6923      	ldr	r3, [r4, #16]
 8015d56:	4798      	blx	r3
 8015d58:	69f3      	ldr	r3, [r6, #28]
 8015d5a:	9005      	str	r0, [sp, #20]
 8015d5c:	b113      	cbz	r3, 8015d64 <rmw_publish+0x34>
 8015d5e:	a805      	add	r0, sp, #20
 8015d60:	4798      	blx	r3
 8015d62:	9805      	ldr	r0, [sp, #20]
 8015d64:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015d68:	691b      	ldr	r3, [r3, #16]
 8015d6a:	9000      	str	r0, [sp, #0]
 8015d6c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015d70:	6972      	ldr	r2, [r6, #20]
 8015d72:	ab06      	add	r3, sp, #24
 8015d74:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015d76:	f004 f8a9 	bl	8019ecc <uxr_prepare_output_stream>
 8015d7a:	b1d8      	cbz	r0, 8015db4 <rmw_publish+0x84>
 8015d7c:	68a3      	ldr	r3, [r4, #8]
 8015d7e:	a906      	add	r1, sp, #24
 8015d80:	4628      	mov	r0, r5
 8015d82:	4798      	blx	r3
 8015d84:	6a33      	ldr	r3, [r6, #32]
 8015d86:	4604      	mov	r4, r0
 8015d88:	b10b      	cbz	r3, 8015d8e <rmw_publish+0x5e>
 8015d8a:	a806      	add	r0, sp, #24
 8015d8c:	4798      	blx	r3
 8015d8e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8015d92:	2b01      	cmp	r3, #1
 8015d94:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015d98:	d022      	beq.n	8015de0 <rmw_publish+0xb0>
 8015d9a:	6918      	ldr	r0, [r3, #16]
 8015d9c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8015d9e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015da2:	f002 fe19 	bl	80189d8 <uxr_run_session_until_confirm_delivery>
 8015da6:	4020      	ands	r0, r4
 8015da8:	b2c4      	uxtb	r4, r0
 8015daa:	f084 0001 	eor.w	r0, r4, #1
 8015dae:	b2c0      	uxtb	r0, r0
 8015db0:	b00e      	add	sp, #56	; 0x38
 8015db2:	bd70      	pop	{r4, r5, r6, pc}
 8015db4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015db8:	6918      	ldr	r0, [r3, #16]
 8015dba:	9b05      	ldr	r3, [sp, #20]
 8015dbc:	9602      	str	r6, [sp, #8]
 8015dbe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015dc2:	9300      	str	r3, [sp, #0]
 8015dc4:	4b09      	ldr	r3, [pc, #36]	; (8015dec <rmw_publish+0xbc>)
 8015dc6:	9301      	str	r3, [sp, #4]
 8015dc8:	ab06      	add	r3, sp, #24
 8015dca:	6972      	ldr	r2, [r6, #20]
 8015dcc:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015dce:	f004 f8ad 	bl	8019f2c <uxr_prepare_output_stream_fragmented>
 8015dd2:	2800      	cmp	r0, #0
 8015dd4:	d1d2      	bne.n	8015d7c <rmw_publish+0x4c>
 8015dd6:	2001      	movs	r0, #1
 8015dd8:	b00e      	add	sp, #56	; 0x38
 8015dda:	bd70      	pop	{r4, r5, r6, pc}
 8015ddc:	2001      	movs	r0, #1
 8015dde:	4770      	bx	lr
 8015de0:	6918      	ldr	r0, [r3, #16]
 8015de2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015de6:	f002 fa3d 	bl	8018264 <uxr_flash_output_streams>
 8015dea:	e7de      	b.n	8015daa <rmw_publish+0x7a>
 8015dec:	08015d29 	.word	0x08015d29

08015df0 <rmw_create_publisher>:
 8015df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df4:	b087      	sub	sp, #28
 8015df6:	2800      	cmp	r0, #0
 8015df8:	f000 80d2 	beq.w	8015fa0 <rmw_create_publisher+0x1b0>
 8015dfc:	460e      	mov	r6, r1
 8015dfe:	2900      	cmp	r1, #0
 8015e00:	f000 80ce 	beq.w	8015fa0 <rmw_create_publisher+0x1b0>
 8015e04:	4604      	mov	r4, r0
 8015e06:	6800      	ldr	r0, [r0, #0]
 8015e08:	4615      	mov	r5, r2
 8015e0a:	461f      	mov	r7, r3
 8015e0c:	f001 f9a0 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 8015e10:	f080 0001 	eor.w	r0, r0, #1
 8015e14:	b2c0      	uxtb	r0, r0
 8015e16:	2800      	cmp	r0, #0
 8015e18:	f040 80c2 	bne.w	8015fa0 <rmw_create_publisher+0x1b0>
 8015e1c:	2d00      	cmp	r5, #0
 8015e1e:	f000 80bf 	beq.w	8015fa0 <rmw_create_publisher+0x1b0>
 8015e22:	782b      	ldrb	r3, [r5, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	f000 80bb 	beq.w	8015fa0 <rmw_create_publisher+0x1b0>
 8015e2a:	2f00      	cmp	r7, #0
 8015e2c:	f000 80b8 	beq.w	8015fa0 <rmw_create_publisher+0x1b0>
 8015e30:	485e      	ldr	r0, [pc, #376]	; (8015fac <rmw_create_publisher+0x1bc>)
 8015e32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015e36:	f008 f857 	bl	801dee8 <get_memory>
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	f000 80b0 	beq.w	8015fa0 <rmw_create_publisher+0x1b0>
 8015e40:	6884      	ldr	r4, [r0, #8]
 8015e42:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8015e46:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8015e4a:	f008 f8b5 	bl	801dfb8 <rmw_get_implementation_identifier>
 8015e4e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8015e52:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8015e56:	4628      	mov	r0, r5
 8015e58:	f7ea fa52 	bl	8000300 <strlen>
 8015e5c:	3001      	adds	r0, #1
 8015e5e:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8015e62:	283c      	cmp	r0, #60	; 0x3c
 8015e64:	f200 808f 	bhi.w	8015f86 <rmw_create_publisher+0x196>
 8015e68:	462b      	mov	r3, r5
 8015e6a:	4a51      	ldr	r2, [pc, #324]	; (8015fb0 <rmw_create_publisher+0x1c0>)
 8015e6c:	213c      	movs	r1, #60	; 0x3c
 8015e6e:	4650      	mov	r0, sl
 8015e70:	f00a fd98 	bl	80209a4 <sniprintf>
 8015e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015e78:	4639      	mov	r1, r7
 8015e7a:	2250      	movs	r2, #80	; 0x50
 8015e7c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8015e7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015e82:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8015e86:	f00a ffea 	bl	8020e5e <memcpy>
 8015e8a:	7a3b      	ldrb	r3, [r7, #8]
 8015e8c:	4630      	mov	r0, r6
 8015e8e:	4949      	ldr	r1, [pc, #292]	; (8015fb4 <rmw_create_publisher+0x1c4>)
 8015e90:	2b02      	cmp	r3, #2
 8015e92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e96:	bf0c      	ite	eq
 8015e98:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8015e9c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8015ea0:	67a3      	str	r3, [r4, #120]	; 0x78
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015ea8:	f001 f960 	bl	801716c <get_message_typesupport_handle>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d06a      	beq.n	8015f86 <rmw_create_publisher+0x196>
 8015eb0:	6842      	ldr	r2, [r0, #4]
 8015eb2:	61a2      	str	r2, [r4, #24]
 8015eb4:	2a00      	cmp	r2, #0
 8015eb6:	d066      	beq.n	8015f86 <rmw_create_publisher+0x196>
 8015eb8:	4629      	mov	r1, r5
 8015eba:	463b      	mov	r3, r7
 8015ebc:	4648      	mov	r0, r9
 8015ebe:	f008 f8ab 	bl	801e018 <create_topic>
 8015ec2:	6260      	str	r0, [r4, #36]	; 0x24
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d062      	beq.n	8015f8e <rmw_create_publisher+0x19e>
 8015ec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ecc:	2103      	movs	r1, #3
 8015ece:	2506      	movs	r5, #6
 8015ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015ed4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8015ed8:	1c42      	adds	r2, r0, #1
 8015eda:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8015ede:	f001 ff3f 	bl	8017d60 <uxr_object_id>
 8015ee2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015ee6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015eea:	6120      	str	r0, [r4, #16]
 8015eec:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8015ef0:	6910      	ldr	r0, [r2, #16]
 8015ef2:	9500      	str	r5, [sp, #0]
 8015ef4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ef8:	6819      	ldr	r1, [r3, #0]
 8015efa:	6922      	ldr	r2, [r4, #16]
 8015efc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015f00:	f001 fce8 	bl	80178d4 <uxr_buffer_create_publisher_bin>
 8015f04:	4602      	mov	r2, r0
 8015f06:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015f0a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015f0e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015f12:	f001 f80b 	bl	8016f2c <run_xrce_session>
 8015f16:	b3b0      	cbz	r0, 8015f86 <rmw_create_publisher+0x196>
 8015f18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f1c:	2105      	movs	r1, #5
 8015f1e:	f10d 0a10 	add.w	sl, sp, #16
 8015f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015f26:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8015f2a:	1c42      	adds	r2, r0, #1
 8015f2c:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8015f30:	f001 ff16 	bl	8017d60 <uxr_object_id>
 8015f34:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015f38:	4639      	mov	r1, r7
 8015f3a:	6160      	str	r0, [r4, #20]
 8015f3c:	691e      	ldr	r6, [r3, #16]
 8015f3e:	4650      	mov	r0, sl
 8015f40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f44:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8015f48:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8015f4c:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8015f50:	f001 f808 	bl	8016f64 <convert_qos_profile>
 8015f54:	9503      	str	r5, [sp, #12]
 8015f56:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015f5a:	9001      	str	r0, [sp, #4]
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015f62:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015f66:	9300      	str	r3, [sp, #0]
 8015f68:	6839      	ldr	r1, [r7, #0]
 8015f6a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015f6e:	f001 fd11 	bl	8017994 <uxr_buffer_create_datawriter_bin>
 8015f72:	4602      	mov	r2, r0
 8015f74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015f78:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015f7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015f80:	f000 ffd4 	bl	8016f2c <run_xrce_session>
 8015f84:	b970      	cbnz	r0, 8015fa4 <rmw_create_publisher+0x1b4>
 8015f86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015f88:	b108      	cbz	r0, 8015f8e <rmw_create_publisher+0x19e>
 8015f8a:	f000 fec1 	bl	8016d10 <rmw_uxrce_fini_topic_memory>
 8015f8e:	4640      	mov	r0, r8
 8015f90:	f04f 0800 	mov.w	r8, #0
 8015f94:	f000 fe64 	bl	8016c60 <rmw_uxrce_fini_publisher_memory>
 8015f98:	4640      	mov	r0, r8
 8015f9a:	b007      	add	sp, #28
 8015f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa0:	f04f 0800 	mov.w	r8, #0
 8015fa4:	4640      	mov	r0, r8
 8015fa6:	b007      	add	sp, #28
 8015fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fac:	20016be4 	.word	0x20016be4
 8015fb0:	0802525c 	.word	0x0802525c
 8015fb4:	080246ac 	.word	0x080246ac

08015fb8 <rmw_publisher_get_actual_qos>:
 8015fb8:	b178      	cbz	r0, 8015fda <rmw_publisher_get_actual_qos+0x22>
 8015fba:	b510      	push	{r4, lr}
 8015fbc:	fab1 f481 	clz	r4, r1
 8015fc0:	0964      	lsrs	r4, r4, #5
 8015fc2:	b141      	cbz	r1, 8015fd6 <rmw_publisher_get_actual_qos+0x1e>
 8015fc4:	6843      	ldr	r3, [r0, #4]
 8015fc6:	2250      	movs	r2, #80	; 0x50
 8015fc8:	4608      	mov	r0, r1
 8015fca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8015fce:	f00a ff46 	bl	8020e5e <memcpy>
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	bd10      	pop	{r4, pc}
 8015fd6:	200b      	movs	r0, #11
 8015fd8:	bd10      	pop	{r4, pc}
 8015fda:	200b      	movs	r0, #11
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop

08015fe0 <rmw_destroy_publisher>:
 8015fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fe4:	b128      	cbz	r0, 8015ff2 <rmw_destroy_publisher+0x12>
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	6800      	ldr	r0, [r0, #0]
 8015fea:	460d      	mov	r5, r1
 8015fec:	f001 f8b0 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 8015ff0:	b918      	cbnz	r0, 8015ffa <rmw_destroy_publisher+0x1a>
 8015ff2:	2401      	movs	r4, #1
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ffa:	6863      	ldr	r3, [r4, #4]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d0f8      	beq.n	8015ff2 <rmw_destroy_publisher+0x12>
 8016000:	fab5 f485 	clz	r4, r5
 8016004:	0964      	lsrs	r4, r4, #5
 8016006:	2d00      	cmp	r5, #0
 8016008:	d0f3      	beq.n	8015ff2 <rmw_destroy_publisher+0x12>
 801600a:	6828      	ldr	r0, [r5, #0]
 801600c:	f001 f8a0 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 8016010:	2800      	cmp	r0, #0
 8016012:	d0ee      	beq.n	8015ff2 <rmw_destroy_publisher+0x12>
 8016014:	686e      	ldr	r6, [r5, #4]
 8016016:	2e00      	cmp	r6, #0
 8016018:	d0eb      	beq.n	8015ff2 <rmw_destroy_publisher+0x12>
 801601a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801601c:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8016020:	f008 f84a 	bl	801e0b8 <destroy_topic>
 8016024:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016028:	6972      	ldr	r2, [r6, #20]
 801602a:	6918      	ldr	r0, [r3, #16]
 801602c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016030:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016034:	6819      	ldr	r1, [r3, #0]
 8016036:	f001 fb99 	bl	801776c <uxr_buffer_delete_entity>
 801603a:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801603e:	4680      	mov	r8, r0
 8016040:	6932      	ldr	r2, [r6, #16]
 8016042:	6918      	ldr	r0, [r3, #16]
 8016044:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016048:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801604c:	6819      	ldr	r1, [r3, #0]
 801604e:	f001 fb8d 	bl	801776c <uxr_buffer_delete_entity>
 8016052:	4606      	mov	r6, r0
 8016054:	6938      	ldr	r0, [r7, #16]
 8016056:	4642      	mov	r2, r8
 8016058:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801605c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016060:	f000 ff64 	bl	8016f2c <run_xrce_session>
 8016064:	693f      	ldr	r7, [r7, #16]
 8016066:	4632      	mov	r2, r6
 8016068:	4606      	mov	r6, r0
 801606a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801606e:	4638      	mov	r0, r7
 8016070:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016074:	f000 ff5a 	bl	8016f2c <run_xrce_session>
 8016078:	b126      	cbz	r6, 8016084 <rmw_destroy_publisher+0xa4>
 801607a:	b118      	cbz	r0, 8016084 <rmw_destroy_publisher+0xa4>
 801607c:	4628      	mov	r0, r5
 801607e:	f000 fdef 	bl	8016c60 <rmw_uxrce_fini_publisher_memory>
 8016082:	e7b7      	b.n	8015ff4 <rmw_destroy_publisher+0x14>
 8016084:	2402      	movs	r4, #2
 8016086:	e7f9      	b.n	801607c <rmw_destroy_publisher+0x9c>

08016088 <rmw_send_request>:
 8016088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801608c:	4604      	mov	r4, r0
 801608e:	6800      	ldr	r0, [r0, #0]
 8016090:	b08b      	sub	sp, #44	; 0x2c
 8016092:	460e      	mov	r6, r1
 8016094:	4615      	mov	r5, r2
 8016096:	b128      	cbz	r0, 80160a4 <rmw_send_request+0x1c>
 8016098:	4b21      	ldr	r3, [pc, #132]	; (8016120 <rmw_send_request+0x98>)
 801609a:	6819      	ldr	r1, [r3, #0]
 801609c:	f7ea f8d0 	bl	8000240 <strcmp>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	d139      	bne.n	8016118 <rmw_send_request+0x90>
 80160a4:	6864      	ldr	r4, [r4, #4]
 80160a6:	2700      	movs	r7, #0
 80160a8:	6963      	ldr	r3, [r4, #20]
 80160aa:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 80160ae:	689b      	ldr	r3, [r3, #8]
 80160b0:	4798      	blx	r3
 80160b2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80160b6:	4630      	mov	r0, r6
 80160b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80160bc:	4798      	blx	r3
 80160be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80160c2:	9000      	str	r0, [sp, #0]
 80160c4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80160c8:	6922      	ldr	r2, [r4, #16]
 80160ca:	ab02      	add	r3, sp, #8
 80160cc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80160ce:	f003 fefd 	bl	8019ecc <uxr_prepare_output_stream>
 80160d2:	e9c5 0700 	strd	r0, r7, [r5]
 80160d6:	b198      	cbz	r0, 8016100 <rmw_send_request+0x78>
 80160d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80160dc:	a902      	add	r1, sp, #8
 80160de:	4630      	mov	r0, r6
 80160e0:	4798      	blx	r3
 80160e2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80160e6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80160ea:	2b01      	cmp	r3, #1
 80160ec:	d00c      	beq.n	8016108 <rmw_send_request+0x80>
 80160ee:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80160f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160f4:	f002 fc70 	bl	80189d8 <uxr_run_session_until_confirm_delivery>
 80160f8:	4638      	mov	r0, r7
 80160fa:	b00b      	add	sp, #44	; 0x2c
 80160fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016100:	2001      	movs	r0, #1
 8016102:	b00b      	add	sp, #44	; 0x2c
 8016104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016108:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801610c:	f002 f8aa 	bl	8018264 <uxr_flash_output_streams>
 8016110:	4638      	mov	r0, r7
 8016112:	b00b      	add	sp, #44	; 0x2c
 8016114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016118:	200c      	movs	r0, #12
 801611a:	b00b      	add	sp, #44	; 0x2c
 801611c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016120:	080258bc 	.word	0x080258bc

08016124 <rmw_take_request>:
 8016124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016128:	4605      	mov	r5, r0
 801612a:	6800      	ldr	r0, [r0, #0]
 801612c:	b089      	sub	sp, #36	; 0x24
 801612e:	460c      	mov	r4, r1
 8016130:	4690      	mov	r8, r2
 8016132:	461e      	mov	r6, r3
 8016134:	b128      	cbz	r0, 8016142 <rmw_take_request+0x1e>
 8016136:	4b28      	ldr	r3, [pc, #160]	; (80161d8 <rmw_take_request+0xb4>)
 8016138:	6819      	ldr	r1, [r3, #0]
 801613a:	f7ea f881 	bl	8000240 <strcmp>
 801613e:	2800      	cmp	r0, #0
 8016140:	d146      	bne.n	80161d0 <rmw_take_request+0xac>
 8016142:	b10e      	cbz	r6, 8016148 <rmw_take_request+0x24>
 8016144:	2300      	movs	r3, #0
 8016146:	7033      	strb	r3, [r6, #0]
 8016148:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801614c:	f000 fe70 	bl	8016e30 <rmw_uxrce_clean_expired_static_input_buffer>
 8016150:	4648      	mov	r0, r9
 8016152:	f000 fe43 	bl	8016ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 8016156:	4607      	mov	r7, r0
 8016158:	b3b0      	cbz	r0, 80161c8 <rmw_take_request+0xa4>
 801615a:	6885      	ldr	r5, [r0, #8]
 801615c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8016160:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8016164:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8016168:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801616c:	7423      	strb	r3, [r4, #16]
 801616e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8016172:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8016176:	f8a4 2011 	strh.w	r2, [r4, #17]
 801617a:	74e3      	strb	r3, [r4, #19]
 801617c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8016180:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8016184:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8016188:	6161      	str	r1, [r4, #20]
 801618a:	61a2      	str	r2, [r4, #24]
 801618c:	61e3      	str	r3, [r4, #28]
 801618e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016192:	689b      	ldr	r3, [r3, #8]
 8016194:	4798      	blx	r3
 8016196:	6844      	ldr	r4, [r0, #4]
 8016198:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801619c:	f105 0110 	add.w	r1, r5, #16
 80161a0:	4668      	mov	r0, sp
 80161a2:	f7fd f827 	bl	80131f4 <ucdr_init_buffer>
 80161a6:	4641      	mov	r1, r8
 80161a8:	68e3      	ldr	r3, [r4, #12]
 80161aa:	4668      	mov	r0, sp
 80161ac:	4798      	blx	r3
 80161ae:	4639      	mov	r1, r7
 80161b0:	4604      	mov	r4, r0
 80161b2:	480a      	ldr	r0, [pc, #40]	; (80161dc <rmw_take_request+0xb8>)
 80161b4:	f007 fea8 	bl	801df08 <put_memory>
 80161b8:	b106      	cbz	r6, 80161bc <rmw_take_request+0x98>
 80161ba:	7034      	strb	r4, [r6, #0]
 80161bc:	f084 0001 	eor.w	r0, r4, #1
 80161c0:	b2c0      	uxtb	r0, r0
 80161c2:	b009      	add	sp, #36	; 0x24
 80161c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161c8:	2001      	movs	r0, #1
 80161ca:	b009      	add	sp, #36	; 0x24
 80161cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161d0:	200c      	movs	r0, #12
 80161d2:	b009      	add	sp, #36	; 0x24
 80161d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161d8:	080258bc 	.word	0x080258bc
 80161dc:	20016c14 	.word	0x20016c14

080161e0 <rmw_send_response>:
 80161e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161e2:	4605      	mov	r5, r0
 80161e4:	6800      	ldr	r0, [r0, #0]
 80161e6:	b091      	sub	sp, #68	; 0x44
 80161e8:	460c      	mov	r4, r1
 80161ea:	4616      	mov	r6, r2
 80161ec:	b128      	cbz	r0, 80161fa <rmw_send_response+0x1a>
 80161ee:	4b29      	ldr	r3, [pc, #164]	; (8016294 <rmw_send_response+0xb4>)
 80161f0:	6819      	ldr	r1, [r3, #0]
 80161f2:	f7ea f825 	bl	8000240 <strcmp>
 80161f6:	2800      	cmp	r0, #0
 80161f8:	d141      	bne.n	801627e <rmw_send_response+0x9e>
 80161fa:	686d      	ldr	r5, [r5, #4]
 80161fc:	68a1      	ldr	r1, [r4, #8]
 80161fe:	6860      	ldr	r0, [r4, #4]
 8016200:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8016202:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8016206:	9307      	str	r3, [sp, #28]
 8016208:	4623      	mov	r3, r4
 801620a:	9206      	str	r2, [sp, #24]
 801620c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016210:	789b      	ldrb	r3, [r3, #2]
 8016212:	f88d 2017 	strb.w	r2, [sp, #23]
 8016216:	f88d 3016 	strb.w	r3, [sp, #22]
 801621a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801621e:	68e2      	ldr	r2, [r4, #12]
 8016220:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016224:	ab02      	add	r3, sp, #8
 8016226:	696c      	ldr	r4, [r5, #20]
 8016228:	c307      	stmia	r3!, {r0, r1, r2}
 801622a:	68e3      	ldr	r3, [r4, #12]
 801622c:	4798      	blx	r3
 801622e:	6844      	ldr	r4, [r0, #4]
 8016230:	4630      	mov	r0, r6
 8016232:	6923      	ldr	r3, [r4, #16]
 8016234:	4798      	blx	r3
 8016236:	f100 0318 	add.w	r3, r0, #24
 801623a:	6938      	ldr	r0, [r7, #16]
 801623c:	9300      	str	r3, [sp, #0]
 801623e:	ab08      	add	r3, sp, #32
 8016240:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016244:	692a      	ldr	r2, [r5, #16]
 8016246:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8016248:	f003 fe40 	bl	8019ecc <uxr_prepare_output_stream>
 801624c:	b910      	cbnz	r0, 8016254 <rmw_send_response+0x74>
 801624e:	2001      	movs	r0, #1
 8016250:	b011      	add	sp, #68	; 0x44
 8016252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016254:	a902      	add	r1, sp, #8
 8016256:	a808      	add	r0, sp, #32
 8016258:	f004 ffa4 	bl	801b1a4 <uxr_serialize_SampleIdentity>
 801625c:	68a3      	ldr	r3, [r4, #8]
 801625e:	a908      	add	r1, sp, #32
 8016260:	4630      	mov	r0, r6
 8016262:	4798      	blx	r3
 8016264:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8016268:	6938      	ldr	r0, [r7, #16]
 801626a:	2b01      	cmp	r3, #1
 801626c:	d00a      	beq.n	8016284 <rmw_send_response+0xa4>
 801626e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8016270:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016274:	f002 fbb0 	bl	80189d8 <uxr_run_session_until_confirm_delivery>
 8016278:	2000      	movs	r0, #0
 801627a:	b011      	add	sp, #68	; 0x44
 801627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801627e:	200c      	movs	r0, #12
 8016280:	b011      	add	sp, #68	; 0x44
 8016282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016284:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016288:	f001 ffec 	bl	8018264 <uxr_flash_output_streams>
 801628c:	2000      	movs	r0, #0
 801628e:	b011      	add	sp, #68	; 0x44
 8016290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016292:	bf00      	nop
 8016294:	080258bc 	.word	0x080258bc

08016298 <rmw_take_response>:
 8016298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801629c:	4604      	mov	r4, r0
 801629e:	6800      	ldr	r0, [r0, #0]
 80162a0:	b088      	sub	sp, #32
 80162a2:	460f      	mov	r7, r1
 80162a4:	4690      	mov	r8, r2
 80162a6:	461d      	mov	r5, r3
 80162a8:	b120      	cbz	r0, 80162b4 <rmw_take_response+0x1c>
 80162aa:	4b1d      	ldr	r3, [pc, #116]	; (8016320 <rmw_take_response+0x88>)
 80162ac:	6819      	ldr	r1, [r3, #0]
 80162ae:	f7e9 ffc7 	bl	8000240 <strcmp>
 80162b2:	bb68      	cbnz	r0, 8016310 <rmw_take_response+0x78>
 80162b4:	b10d      	cbz	r5, 80162ba <rmw_take_response+0x22>
 80162b6:	2300      	movs	r3, #0
 80162b8:	702b      	strb	r3, [r5, #0]
 80162ba:	6864      	ldr	r4, [r4, #4]
 80162bc:	f000 fdb8 	bl	8016e30 <rmw_uxrce_clean_expired_static_input_buffer>
 80162c0:	4620      	mov	r0, r4
 80162c2:	f000 fd8b 	bl	8016ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 80162c6:	4606      	mov	r6, r0
 80162c8:	b330      	cbz	r0, 8016318 <rmw_take_response+0x80>
 80162ca:	6963      	ldr	r3, [r4, #20]
 80162cc:	6884      	ldr	r4, [r0, #8]
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80162d4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80162d8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80162dc:	4798      	blx	r3
 80162de:	6847      	ldr	r7, [r0, #4]
 80162e0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80162e4:	f104 0110 	add.w	r1, r4, #16
 80162e8:	4668      	mov	r0, sp
 80162ea:	f7fc ff83 	bl	80131f4 <ucdr_init_buffer>
 80162ee:	4641      	mov	r1, r8
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	4668      	mov	r0, sp
 80162f4:	4798      	blx	r3
 80162f6:	4631      	mov	r1, r6
 80162f8:	4604      	mov	r4, r0
 80162fa:	480a      	ldr	r0, [pc, #40]	; (8016324 <rmw_take_response+0x8c>)
 80162fc:	f007 fe04 	bl	801df08 <put_memory>
 8016300:	b105      	cbz	r5, 8016304 <rmw_take_response+0x6c>
 8016302:	702c      	strb	r4, [r5, #0]
 8016304:	f084 0001 	eor.w	r0, r4, #1
 8016308:	b2c0      	uxtb	r0, r0
 801630a:	b008      	add	sp, #32
 801630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016310:	200c      	movs	r0, #12
 8016312:	b008      	add	sp, #32
 8016314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016318:	2001      	movs	r0, #1
 801631a:	b008      	add	sp, #32
 801631c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016320:	080258bc 	.word	0x080258bc
 8016324:	20016c14 	.word	0x20016c14

08016328 <rmw_create_service>:
 8016328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801632c:	b091      	sub	sp, #68	; 0x44
 801632e:	2900      	cmp	r1, #0
 8016330:	f000 80bb 	beq.w	80164aa <rmw_create_service+0x182>
 8016334:	4606      	mov	r6, r0
 8016336:	2800      	cmp	r0, #0
 8016338:	f000 80b7 	beq.w	80164aa <rmw_create_service+0x182>
 801633c:	4614      	mov	r4, r2
 801633e:	6800      	ldr	r0, [r0, #0]
 8016340:	4689      	mov	r9, r1
 8016342:	461d      	mov	r5, r3
 8016344:	f000 ff04 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 8016348:	2c00      	cmp	r4, #0
 801634a:	f000 80ae 	beq.w	80164aa <rmw_create_service+0x182>
 801634e:	f080 0001 	eor.w	r0, r0, #1
 8016352:	b2c0      	uxtb	r0, r0
 8016354:	2800      	cmp	r0, #0
 8016356:	f040 80a8 	bne.w	80164aa <rmw_create_service+0x182>
 801635a:	7823      	ldrb	r3, [r4, #0]
 801635c:	2b00      	cmp	r3, #0
 801635e:	f000 80a4 	beq.w	80164aa <rmw_create_service+0x182>
 8016362:	2d00      	cmp	r5, #0
 8016364:	f000 80a1 	beq.w	80164aa <rmw_create_service+0x182>
 8016368:	4856      	ldr	r0, [pc, #344]	; (80164c4 <rmw_create_service+0x19c>)
 801636a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801636e:	f007 fdbb 	bl	801dee8 <get_memory>
 8016372:	4606      	mov	r6, r0
 8016374:	2800      	cmp	r0, #0
 8016376:	f000 8099 	beq.w	80164ac <rmw_create_service+0x184>
 801637a:	6887      	ldr	r7, [r0, #8]
 801637c:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8016380:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8016384:	f007 fe18 	bl	801dfb8 <rmw_get_implementation_identifier>
 8016388:	67f8      	str	r0, [r7, #124]	; 0x7c
 801638a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801638e:	4620      	mov	r0, r4
 8016390:	f7e9 ffb6 	bl	8000300 <strlen>
 8016394:	1c42      	adds	r2, r0, #1
 8016396:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801639a:	2a3c      	cmp	r2, #60	; 0x3c
 801639c:	f200 808a 	bhi.w	80164b4 <rmw_create_service+0x18c>
 80163a0:	4621      	mov	r1, r4
 80163a2:	4650      	mov	r0, sl
 80163a4:	f00a fd5b 	bl	8020e5e <memcpy>
 80163a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80163ac:	4629      	mov	r1, r5
 80163ae:	2250      	movs	r2, #80	; 0x50
 80163b0:	f107 0020 	add.w	r0, r7, #32
 80163b4:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 80163b8:	677b      	str	r3, [r7, #116]	; 0x74
 80163ba:	f00a fd50 	bl	8020e5e <memcpy>
 80163be:	4648      	mov	r0, r9
 80163c0:	4941      	ldr	r1, [pc, #260]	; (80164c8 <rmw_create_service+0x1a0>)
 80163c2:	f000 fedf 	bl	8017184 <get_service_typesupport_handle>
 80163c6:	2800      	cmp	r0, #0
 80163c8:	d074      	beq.n	80164b4 <rmw_create_service+0x18c>
 80163ca:	6843      	ldr	r3, [r0, #4]
 80163cc:	617b      	str	r3, [r7, #20]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d070      	beq.n	80164b4 <rmw_create_service+0x18c>
 80163d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80163d6:	2108      	movs	r1, #8
 80163d8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80164d0 <rmw_create_service+0x1a8>
 80163dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163e0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80164d4 <rmw_create_service+0x1ac>
 80163e4:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 80163e8:	1c42      	adds	r2, r0, #1
 80163ea:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 80163ee:	f001 fcb7 	bl	8017d60 <uxr_object_id>
 80163f2:	2364      	movs	r3, #100	; 0x64
 80163f4:	6138      	str	r0, [r7, #16]
 80163f6:	4652      	mov	r2, sl
 80163f8:	4649      	mov	r1, r9
 80163fa:	6978      	ldr	r0, [r7, #20]
 80163fc:	f000 fdfc 	bl	8016ff8 <generate_service_types>
 8016400:	2800      	cmp	r0, #0
 8016402:	d057      	beq.n	80164b4 <rmw_create_service+0x18c>
 8016404:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80164d8 <rmw_create_service+0x1b0>
 8016408:	233c      	movs	r3, #60	; 0x3c
 801640a:	4a30      	ldr	r2, [pc, #192]	; (80164cc <rmw_create_service+0x1a4>)
 801640c:	4620      	mov	r0, r4
 801640e:	4659      	mov	r1, fp
 8016410:	f000 fdc0 	bl	8016f94 <generate_service_topics>
 8016414:	2800      	cmp	r0, #0
 8016416:	d04d      	beq.n	80164b4 <rmw_create_service+0x18c>
 8016418:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801641c:	a80c      	add	r0, sp, #48	; 0x30
 801641e:	4629      	mov	r1, r5
 8016420:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8016424:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016428:	f000 fd9c 	bl	8016f64 <convert_qos_profile>
 801642c:	4a27      	ldr	r2, [pc, #156]	; (80164cc <rmw_create_service+0x1a4>)
 801642e:	a80c      	add	r0, sp, #48	; 0x30
 8016430:	9400      	str	r4, [sp, #0]
 8016432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016434:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016438:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801643c:	c803      	ldmia	r0, {r0, r1}
 801643e:	9a08      	ldr	r2, [sp, #32]
 8016440:	9005      	str	r0, [sp, #20]
 8016442:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016446:	2306      	movs	r3, #6
 8016448:	f8ad 1018 	strh.w	r1, [sp, #24]
 801644c:	9307      	str	r3, [sp, #28]
 801644e:	6811      	ldr	r1, [r2, #0]
 8016450:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016454:	693a      	ldr	r2, [r7, #16]
 8016456:	f001 fb8b 	bl	8017b70 <uxr_buffer_create_replier_bin>
 801645a:	4602      	mov	r2, r0
 801645c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016460:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016464:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016468:	f000 fd60 	bl	8016f2c <run_xrce_session>
 801646c:	b310      	cbz	r0, 80164b4 <rmw_create_service+0x18c>
 801646e:	7a2b      	ldrb	r3, [r5, #8]
 8016470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016474:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016478:	2b02      	cmp	r3, #2
 801647a:	920e      	str	r2, [sp, #56]	; 0x38
 801647c:	f04f 0200 	mov.w	r2, #0
 8016480:	920f      	str	r2, [sp, #60]	; 0x3c
 8016482:	bf0c      	ite	eq
 8016484:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8016488:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801648c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016490:	930b      	str	r3, [sp, #44]	; 0x2c
 8016492:	ab0e      	add	r3, sp, #56	; 0x38
 8016494:	673a      	str	r2, [r7, #112]	; 0x70
 8016496:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801649e:	6811      	ldr	r1, [r2, #0]
 80164a0:	693a      	ldr	r2, [r7, #16]
 80164a2:	f001 fc8d 	bl	8017dc0 <uxr_buffer_request_data>
 80164a6:	8338      	strh	r0, [r7, #24]
 80164a8:	e000      	b.n	80164ac <rmw_create_service+0x184>
 80164aa:	2600      	movs	r6, #0
 80164ac:	4630      	mov	r0, r6
 80164ae:	b011      	add	sp, #68	; 0x44
 80164b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b4:	4630      	mov	r0, r6
 80164b6:	2600      	movs	r6, #0
 80164b8:	f000 fbfe 	bl	8016cb8 <rmw_uxrce_fini_service_memory>
 80164bc:	4630      	mov	r0, r6
 80164be:	b011      	add	sp, #68	; 0x44
 80164c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c4:	20016bf4 	.word	0x20016bf4
 80164c8:	080246ac 	.word	0x080246ac
 80164cc:	20012264 	.word	0x20012264
 80164d0:	200122a0 	.word	0x200122a0
 80164d4:	20012200 	.word	0x20012200
 80164d8:	200121c4 	.word	0x200121c4

080164dc <rmw_destroy_service>:
 80164dc:	b570      	push	{r4, r5, r6, lr}
 80164de:	b128      	cbz	r0, 80164ec <rmw_destroy_service+0x10>
 80164e0:	4604      	mov	r4, r0
 80164e2:	6800      	ldr	r0, [r0, #0]
 80164e4:	460d      	mov	r5, r1
 80164e6:	f000 fe33 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 80164ea:	b910      	cbnz	r0, 80164f2 <rmw_destroy_service+0x16>
 80164ec:	2401      	movs	r4, #1
 80164ee:	4620      	mov	r0, r4
 80164f0:	bd70      	pop	{r4, r5, r6, pc}
 80164f2:	6863      	ldr	r3, [r4, #4]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d0f9      	beq.n	80164ec <rmw_destroy_service+0x10>
 80164f8:	2d00      	cmp	r5, #0
 80164fa:	d0f7      	beq.n	80164ec <rmw_destroy_service+0x10>
 80164fc:	6828      	ldr	r0, [r5, #0]
 80164fe:	f000 fe27 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 8016502:	2800      	cmp	r0, #0
 8016504:	d0f2      	beq.n	80164ec <rmw_destroy_service+0x10>
 8016506:	686e      	ldr	r6, [r5, #4]
 8016508:	2e00      	cmp	r6, #0
 801650a:	d0ef      	beq.n	80164ec <rmw_destroy_service+0x10>
 801650c:	6864      	ldr	r4, [r4, #4]
 801650e:	6932      	ldr	r2, [r6, #16]
 8016510:	6920      	ldr	r0, [r4, #16]
 8016512:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016516:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801651a:	6819      	ldr	r1, [r3, #0]
 801651c:	f001 fc8a 	bl	8017e34 <uxr_buffer_cancel_data>
 8016520:	4602      	mov	r2, r0
 8016522:	6920      	ldr	r0, [r4, #16]
 8016524:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016528:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801652c:	f000 fcfe 	bl	8016f2c <run_xrce_session>
 8016530:	6920      	ldr	r0, [r4, #16]
 8016532:	6932      	ldr	r2, [r6, #16]
 8016534:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016538:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801653c:	6819      	ldr	r1, [r3, #0]
 801653e:	f001 f915 	bl	801776c <uxr_buffer_delete_entity>
 8016542:	4602      	mov	r2, r0
 8016544:	6920      	ldr	r0, [r4, #16]
 8016546:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801654a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801654e:	f000 fced 	bl	8016f2c <run_xrce_session>
 8016552:	4603      	mov	r3, r0
 8016554:	4628      	mov	r0, r5
 8016556:	2b00      	cmp	r3, #0
 8016558:	bf14      	ite	ne
 801655a:	2400      	movne	r4, #0
 801655c:	2402      	moveq	r4, #2
 801655e:	f000 fbab 	bl	8016cb8 <rmw_uxrce_fini_service_memory>
 8016562:	e7c4      	b.n	80164ee <rmw_destroy_service+0x12>

08016564 <rmw_service_response_publisher_get_actual_qos>:
 8016564:	b181      	cbz	r1, 8016588 <rmw_service_response_publisher_get_actual_qos+0x24>
 8016566:	4603      	mov	r3, r0
 8016568:	b510      	push	{r4, lr}
 801656a:	fab0 f480 	clz	r4, r0
 801656e:	0964      	lsrs	r4, r4, #5
 8016570:	b140      	cbz	r0, 8016584 <rmw_service_response_publisher_get_actual_qos+0x20>
 8016572:	685b      	ldr	r3, [r3, #4]
 8016574:	4608      	mov	r0, r1
 8016576:	2250      	movs	r2, #80	; 0x50
 8016578:	f103 0120 	add.w	r1, r3, #32
 801657c:	f00a fc6f 	bl	8020e5e <memcpy>
 8016580:	4620      	mov	r0, r4
 8016582:	bd10      	pop	{r4, pc}
 8016584:	200b      	movs	r0, #11
 8016586:	bd10      	pop	{r4, pc}
 8016588:	200b      	movs	r0, #11
 801658a:	4770      	bx	lr

0801658c <rmw_service_request_subscription_get_actual_qos>:
 801658c:	b178      	cbz	r0, 80165ae <rmw_service_request_subscription_get_actual_qos+0x22>
 801658e:	b510      	push	{r4, lr}
 8016590:	fab1 f481 	clz	r4, r1
 8016594:	0964      	lsrs	r4, r4, #5
 8016596:	b141      	cbz	r1, 80165aa <rmw_service_request_subscription_get_actual_qos+0x1e>
 8016598:	6843      	ldr	r3, [r0, #4]
 801659a:	2250      	movs	r2, #80	; 0x50
 801659c:	4608      	mov	r0, r1
 801659e:	f103 0120 	add.w	r1, r3, #32
 80165a2:	f00a fc5c 	bl	8020e5e <memcpy>
 80165a6:	4620      	mov	r0, r4
 80165a8:	bd10      	pop	{r4, pc}
 80165aa:	200b      	movs	r0, #11
 80165ac:	bd10      	pop	{r4, pc}
 80165ae:	200b      	movs	r0, #11
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop

080165b4 <rmw_create_subscription>:
 80165b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b8:	b08d      	sub	sp, #52	; 0x34
 80165ba:	2900      	cmp	r1, #0
 80165bc:	f000 80d8 	beq.w	8016770 <rmw_create_subscription+0x1bc>
 80165c0:	4604      	mov	r4, r0
 80165c2:	2800      	cmp	r0, #0
 80165c4:	f000 80d4 	beq.w	8016770 <rmw_create_subscription+0x1bc>
 80165c8:	6800      	ldr	r0, [r0, #0]
 80165ca:	460e      	mov	r6, r1
 80165cc:	4615      	mov	r5, r2
 80165ce:	461f      	mov	r7, r3
 80165d0:	f000 fdbe 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 80165d4:	f080 0001 	eor.w	r0, r0, #1
 80165d8:	b2c0      	uxtb	r0, r0
 80165da:	2800      	cmp	r0, #0
 80165dc:	f040 80c8 	bne.w	8016770 <rmw_create_subscription+0x1bc>
 80165e0:	2d00      	cmp	r5, #0
 80165e2:	f000 80c5 	beq.w	8016770 <rmw_create_subscription+0x1bc>
 80165e6:	782b      	ldrb	r3, [r5, #0]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	f000 80c1 	beq.w	8016770 <rmw_create_subscription+0x1bc>
 80165ee:	2f00      	cmp	r7, #0
 80165f0:	f000 80be 	beq.w	8016770 <rmw_create_subscription+0x1bc>
 80165f4:	4867      	ldr	r0, [pc, #412]	; (8016794 <rmw_create_subscription+0x1e0>)
 80165f6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80165fa:	f007 fc75 	bl	801dee8 <get_memory>
 80165fe:	4604      	mov	r4, r0
 8016600:	2800      	cmp	r0, #0
 8016602:	f000 80b6 	beq.w	8016772 <rmw_create_subscription+0x1be>
 8016606:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801660a:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 801660e:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8016612:	f007 fcd1 	bl	801dfb8 <rmw_get_implementation_identifier>
 8016616:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801661a:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 801661e:	4628      	mov	r0, r5
 8016620:	f7e9 fe6e 	bl	8000300 <strlen>
 8016624:	3001      	adds	r0, #1
 8016626:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801662a:	283c      	cmp	r0, #60	; 0x3c
 801662c:	f200 80a5 	bhi.w	801677a <rmw_create_subscription+0x1c6>
 8016630:	462b      	mov	r3, r5
 8016632:	4a59      	ldr	r2, [pc, #356]	; (8016798 <rmw_create_subscription+0x1e4>)
 8016634:	213c      	movs	r1, #60	; 0x3c
 8016636:	4650      	mov	r0, sl
 8016638:	f00a f9b4 	bl	80209a4 <sniprintf>
 801663c:	4639      	mov	r1, r7
 801663e:	2250      	movs	r2, #80	; 0x50
 8016640:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8016644:	f8c8 9020 	str.w	r9, [r8, #32]
 8016648:	f00a fc09 	bl	8020e5e <memcpy>
 801664c:	4630      	mov	r0, r6
 801664e:	4953      	ldr	r1, [pc, #332]	; (801679c <rmw_create_subscription+0x1e8>)
 8016650:	f000 fd8c 	bl	801716c <get_message_typesupport_handle>
 8016654:	2800      	cmp	r0, #0
 8016656:	f000 8090 	beq.w	801677a <rmw_create_subscription+0x1c6>
 801665a:	6842      	ldr	r2, [r0, #4]
 801665c:	f8c8 2018 	str.w	r2, [r8, #24]
 8016660:	2a00      	cmp	r2, #0
 8016662:	f000 808a 	beq.w	801677a <rmw_create_subscription+0x1c6>
 8016666:	4629      	mov	r1, r5
 8016668:	463b      	mov	r3, r7
 801666a:	4648      	mov	r0, r9
 801666c:	f007 fcd4 	bl	801e018 <create_topic>
 8016670:	f8c8 001c 	str.w	r0, [r8, #28]
 8016674:	2800      	cmp	r0, #0
 8016676:	f000 8085 	beq.w	8016784 <rmw_create_subscription+0x1d0>
 801667a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801667e:	2104      	movs	r1, #4
 8016680:	2506      	movs	r5, #6
 8016682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016686:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801668a:	1c42      	adds	r2, r0, #1
 801668c:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8016690:	f001 fb66 	bl	8017d60 <uxr_object_id>
 8016694:	f8c8 0010 	str.w	r0, [r8, #16]
 8016698:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801669c:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80166a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80166a4:	9500      	str	r5, [sp, #0]
 80166a6:	6819      	ldr	r1, [r3, #0]
 80166a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80166ac:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80166b0:	f001 f940 	bl	8017934 <uxr_buffer_create_subscriber_bin>
 80166b4:	4602      	mov	r2, r0
 80166b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80166ba:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80166be:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80166c2:	f000 fc33 	bl	8016f2c <run_xrce_session>
 80166c6:	2800      	cmp	r0, #0
 80166c8:	d057      	beq.n	801677a <rmw_create_subscription+0x1c6>
 80166ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80166ce:	4629      	mov	r1, r5
 80166d0:	ae08      	add	r6, sp, #32
 80166d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166d6:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 80166da:	1c42      	adds	r2, r0, #1
 80166dc:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 80166e0:	f001 fb3e 	bl	8017d60 <uxr_object_id>
 80166e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80166e8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80166ec:	4639      	mov	r1, r7
 80166ee:	f8c8 0014 	str.w	r0, [r8, #20]
 80166f2:	4630      	mov	r0, r6
 80166f4:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80166f8:	9305      	str	r3, [sp, #20]
 80166fa:	f000 fc33 	bl	8016f64 <convert_qos_profile>
 80166fe:	9503      	str	r5, [sp, #12]
 8016700:	9b05      	ldr	r3, [sp, #20]
 8016702:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016706:	9001      	str	r0, [sp, #4]
 8016708:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801670c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016710:	691b      	ldr	r3, [r3, #16]
 8016712:	9300      	str	r3, [sp, #0]
 8016714:	f8db 1000 	ldr.w	r1, [fp]
 8016718:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801671c:	f001 f9b0 	bl	8017a80 <uxr_buffer_create_datareader_bin>
 8016720:	4602      	mov	r2, r0
 8016722:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016726:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801672a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801672e:	f000 fbfd 	bl	8016f2c <run_xrce_session>
 8016732:	b310      	cbz	r0, 801677a <rmw_create_subscription+0x1c6>
 8016734:	7a3b      	ldrb	r3, [r7, #8]
 8016736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801673a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801673e:	2b02      	cmp	r3, #2
 8016740:	920a      	str	r2, [sp, #40]	; 0x28
 8016742:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016746:	f04f 0200 	mov.w	r2, #0
 801674a:	bf08      	it	eq
 801674c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8016750:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016754:	bf18      	it	ne
 8016756:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801675a:	920b      	str	r2, [sp, #44]	; 0x2c
 801675c:	9307      	str	r3, [sp, #28]
 801675e:	ab0a      	add	r3, sp, #40	; 0x28
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	9b07      	ldr	r3, [sp, #28]
 8016764:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016768:	6809      	ldr	r1, [r1, #0]
 801676a:	f001 fb29 	bl	8017dc0 <uxr_buffer_request_data>
 801676e:	e000      	b.n	8016772 <rmw_create_subscription+0x1be>
 8016770:	2400      	movs	r4, #0
 8016772:	4620      	mov	r0, r4
 8016774:	b00d      	add	sp, #52	; 0x34
 8016776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801677a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801677e:	b108      	cbz	r0, 8016784 <rmw_create_subscription+0x1d0>
 8016780:	f000 fac6 	bl	8016d10 <rmw_uxrce_fini_topic_memory>
 8016784:	4620      	mov	r0, r4
 8016786:	2400      	movs	r4, #0
 8016788:	f000 fa80 	bl	8016c8c <rmw_uxrce_fini_subscription_memory>
 801678c:	4620      	mov	r0, r4
 801678e:	b00d      	add	sp, #52	; 0x34
 8016790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016794:	20016c24 	.word	0x20016c24
 8016798:	0802525c 	.word	0x0802525c
 801679c:	080246ac 	.word	0x080246ac

080167a0 <rmw_subscription_get_actual_qos>:
 80167a0:	b178      	cbz	r0, 80167c2 <rmw_subscription_get_actual_qos+0x22>
 80167a2:	b510      	push	{r4, lr}
 80167a4:	fab1 f481 	clz	r4, r1
 80167a8:	0964      	lsrs	r4, r4, #5
 80167aa:	b141      	cbz	r1, 80167be <rmw_subscription_get_actual_qos+0x1e>
 80167ac:	6843      	ldr	r3, [r0, #4]
 80167ae:	2250      	movs	r2, #80	; 0x50
 80167b0:	4608      	mov	r0, r1
 80167b2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80167b6:	f00a fb52 	bl	8020e5e <memcpy>
 80167ba:	4620      	mov	r0, r4
 80167bc:	bd10      	pop	{r4, pc}
 80167be:	200b      	movs	r0, #11
 80167c0:	bd10      	pop	{r4, pc}
 80167c2:	200b      	movs	r0, #11
 80167c4:	4770      	bx	lr
 80167c6:	bf00      	nop

080167c8 <rmw_destroy_subscription>:
 80167c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167cc:	b128      	cbz	r0, 80167da <rmw_destroy_subscription+0x12>
 80167ce:	4604      	mov	r4, r0
 80167d0:	6800      	ldr	r0, [r0, #0]
 80167d2:	460d      	mov	r5, r1
 80167d4:	f000 fcbc 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 80167d8:	b918      	cbnz	r0, 80167e2 <rmw_destroy_subscription+0x1a>
 80167da:	2401      	movs	r4, #1
 80167dc:	4620      	mov	r0, r4
 80167de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e2:	6863      	ldr	r3, [r4, #4]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d0f8      	beq.n	80167da <rmw_destroy_subscription+0x12>
 80167e8:	fab5 f485 	clz	r4, r5
 80167ec:	0964      	lsrs	r4, r4, #5
 80167ee:	2d00      	cmp	r5, #0
 80167f0:	d0f3      	beq.n	80167da <rmw_destroy_subscription+0x12>
 80167f2:	6828      	ldr	r0, [r5, #0]
 80167f4:	f000 fcac 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 80167f8:	2800      	cmp	r0, #0
 80167fa:	d0ee      	beq.n	80167da <rmw_destroy_subscription+0x12>
 80167fc:	686e      	ldr	r6, [r5, #4]
 80167fe:	2e00      	cmp	r6, #0
 8016800:	d0eb      	beq.n	80167da <rmw_destroy_subscription+0x12>
 8016802:	6a37      	ldr	r7, [r6, #32]
 8016804:	6972      	ldr	r2, [r6, #20]
 8016806:	6938      	ldr	r0, [r7, #16]
 8016808:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801680c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016810:	6819      	ldr	r1, [r3, #0]
 8016812:	f001 fb0f 	bl	8017e34 <uxr_buffer_cancel_data>
 8016816:	4602      	mov	r2, r0
 8016818:	6938      	ldr	r0, [r7, #16]
 801681a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801681e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016822:	f000 fb83 	bl	8016f2c <run_xrce_session>
 8016826:	69f0      	ldr	r0, [r6, #28]
 8016828:	f007 fc46 	bl	801e0b8 <destroy_topic>
 801682c:	6a33      	ldr	r3, [r6, #32]
 801682e:	6972      	ldr	r2, [r6, #20]
 8016830:	6918      	ldr	r0, [r3, #16]
 8016832:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016836:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801683a:	6819      	ldr	r1, [r3, #0]
 801683c:	f000 ff96 	bl	801776c <uxr_buffer_delete_entity>
 8016840:	6a33      	ldr	r3, [r6, #32]
 8016842:	4680      	mov	r8, r0
 8016844:	6932      	ldr	r2, [r6, #16]
 8016846:	6918      	ldr	r0, [r3, #16]
 8016848:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801684c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016850:	6819      	ldr	r1, [r3, #0]
 8016852:	f000 ff8b 	bl	801776c <uxr_buffer_delete_entity>
 8016856:	4606      	mov	r6, r0
 8016858:	6938      	ldr	r0, [r7, #16]
 801685a:	4642      	mov	r2, r8
 801685c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016860:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016864:	f000 fb62 	bl	8016f2c <run_xrce_session>
 8016868:	693f      	ldr	r7, [r7, #16]
 801686a:	4632      	mov	r2, r6
 801686c:	4606      	mov	r6, r0
 801686e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016872:	4638      	mov	r0, r7
 8016874:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016878:	f000 fb58 	bl	8016f2c <run_xrce_session>
 801687c:	b126      	cbz	r6, 8016888 <rmw_destroy_subscription+0xc0>
 801687e:	b118      	cbz	r0, 8016888 <rmw_destroy_subscription+0xc0>
 8016880:	4628      	mov	r0, r5
 8016882:	f000 fa03 	bl	8016c8c <rmw_uxrce_fini_subscription_memory>
 8016886:	e7a9      	b.n	80167dc <rmw_destroy_subscription+0x14>
 8016888:	2402      	movs	r4, #2
 801688a:	e7f9      	b.n	8016880 <rmw_destroy_subscription+0xb8>

0801688c <rmw_take_with_info>:
 801688c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801688e:	4604      	mov	r4, r0
 8016890:	6800      	ldr	r0, [r0, #0]
 8016892:	b089      	sub	sp, #36	; 0x24
 8016894:	460f      	mov	r7, r1
 8016896:	4615      	mov	r5, r2
 8016898:	b128      	cbz	r0, 80168a6 <rmw_take_with_info+0x1a>
 801689a:	4b24      	ldr	r3, [pc, #144]	; (801692c <rmw_take_with_info+0xa0>)
 801689c:	6819      	ldr	r1, [r3, #0]
 801689e:	f7e9 fccf 	bl	8000240 <strcmp>
 80168a2:	2800      	cmp	r0, #0
 80168a4:	d13e      	bne.n	8016924 <rmw_take_with_info+0x98>
 80168a6:	b305      	cbz	r5, 80168ea <rmw_take_with_info+0x5e>
 80168a8:	2300      	movs	r3, #0
 80168aa:	6864      	ldr	r4, [r4, #4]
 80168ac:	702b      	strb	r3, [r5, #0]
 80168ae:	f000 fabf 	bl	8016e30 <rmw_uxrce_clean_expired_static_input_buffer>
 80168b2:	4620      	mov	r0, r4
 80168b4:	f000 fa92 	bl	8016ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 80168b8:	4606      	mov	r6, r0
 80168ba:	b1f0      	cbz	r0, 80168fa <rmw_take_with_info+0x6e>
 80168bc:	6881      	ldr	r1, [r0, #8]
 80168be:	4668      	mov	r0, sp
 80168c0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80168c4:	3110      	adds	r1, #16
 80168c6:	f7fc fc95 	bl	80131f4 <ucdr_init_buffer>
 80168ca:	69a3      	ldr	r3, [r4, #24]
 80168cc:	4639      	mov	r1, r7
 80168ce:	4668      	mov	r0, sp
 80168d0:	68db      	ldr	r3, [r3, #12]
 80168d2:	4798      	blx	r3
 80168d4:	4604      	mov	r4, r0
 80168d6:	4631      	mov	r1, r6
 80168d8:	4815      	ldr	r0, [pc, #84]	; (8016930 <rmw_take_with_info+0xa4>)
 80168da:	f007 fb15 	bl	801df08 <put_memory>
 80168de:	702c      	strb	r4, [r5, #0]
 80168e0:	f084 0001 	eor.w	r0, r4, #1
 80168e4:	b2c0      	uxtb	r0, r0
 80168e6:	b009      	add	sp, #36	; 0x24
 80168e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168ea:	6864      	ldr	r4, [r4, #4]
 80168ec:	f000 faa0 	bl	8016e30 <rmw_uxrce_clean_expired_static_input_buffer>
 80168f0:	4620      	mov	r0, r4
 80168f2:	f000 fa73 	bl	8016ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 80168f6:	4605      	mov	r5, r0
 80168f8:	b910      	cbnz	r0, 8016900 <rmw_take_with_info+0x74>
 80168fa:	2001      	movs	r0, #1
 80168fc:	b009      	add	sp, #36	; 0x24
 80168fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016900:	68a9      	ldr	r1, [r5, #8]
 8016902:	4668      	mov	r0, sp
 8016904:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016908:	3110      	adds	r1, #16
 801690a:	f7fc fc73 	bl	80131f4 <ucdr_init_buffer>
 801690e:	69a3      	ldr	r3, [r4, #24]
 8016910:	4639      	mov	r1, r7
 8016912:	4668      	mov	r0, sp
 8016914:	68db      	ldr	r3, [r3, #12]
 8016916:	4798      	blx	r3
 8016918:	4629      	mov	r1, r5
 801691a:	4604      	mov	r4, r0
 801691c:	4804      	ldr	r0, [pc, #16]	; (8016930 <rmw_take_with_info+0xa4>)
 801691e:	f007 faf3 	bl	801df08 <put_memory>
 8016922:	e7dd      	b.n	80168e0 <rmw_take_with_info+0x54>
 8016924:	200c      	movs	r0, #12
 8016926:	b009      	add	sp, #36	; 0x24
 8016928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801692a:	bf00      	nop
 801692c:	080258bc 	.word	0x080258bc
 8016930:	20016c14 	.word	0x20016c14

08016934 <rmw_uxrce_transport_init>:
 8016934:	b508      	push	{r3, lr}
 8016936:	b108      	cbz	r0, 801693c <rmw_uxrce_transport_init+0x8>
 8016938:	f100 0210 	add.w	r2, r0, #16
 801693c:	b139      	cbz	r1, 801694e <rmw_uxrce_transport_init+0x1a>
 801693e:	6949      	ldr	r1, [r1, #20]
 8016940:	4610      	mov	r0, r2
 8016942:	f001 f9d5 	bl	8017cf0 <uxr_init_custom_transport>
 8016946:	f080 0001 	eor.w	r0, r0, #1
 801694a:	b2c0      	uxtb	r0, r0
 801694c:	bd08      	pop	{r3, pc}
 801694e:	4b04      	ldr	r3, [pc, #16]	; (8016960 <rmw_uxrce_transport_init+0x2c>)
 8016950:	4610      	mov	r0, r2
 8016952:	6859      	ldr	r1, [r3, #4]
 8016954:	f001 f9cc 	bl	8017cf0 <uxr_init_custom_transport>
 8016958:	f080 0001 	eor.w	r0, r0, #1
 801695c:	b2c0      	uxtb	r0, r0
 801695e:	bd08      	pop	{r3, pc}
 8016960:	2001216c 	.word	0x2001216c

08016964 <rmw_uxrce_init_service_memory>:
 8016964:	b1e2      	cbz	r2, 80169a0 <rmw_uxrce_init_service_memory+0x3c>
 8016966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801696a:	7b05      	ldrb	r5, [r0, #12]
 801696c:	4606      	mov	r6, r0
 801696e:	b9ad      	cbnz	r5, 801699c <rmw_uxrce_init_service_memory+0x38>
 8016970:	23c8      	movs	r3, #200	; 0xc8
 8016972:	4617      	mov	r7, r2
 8016974:	460c      	mov	r4, r1
 8016976:	46a8      	mov	r8, r5
 8016978:	6083      	str	r3, [r0, #8]
 801697a:	f240 1301 	movw	r3, #257	; 0x101
 801697e:	e9c0 5500 	strd	r5, r5, [r0]
 8016982:	8183      	strh	r3, [r0, #12]
 8016984:	3501      	adds	r5, #1
 8016986:	4621      	mov	r1, r4
 8016988:	4630      	mov	r0, r6
 801698a:	f007 fabd 	bl	801df08 <put_memory>
 801698e:	42af      	cmp	r7, r5
 8016990:	60a4      	str	r4, [r4, #8]
 8016992:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016996:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801699a:	d1f3      	bne.n	8016984 <rmw_uxrce_init_service_memory+0x20>
 801699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169a0:	4770      	bx	lr
 80169a2:	bf00      	nop

080169a4 <rmw_uxrce_init_client_memory>:
 80169a4:	b1e2      	cbz	r2, 80169e0 <rmw_uxrce_init_client_memory+0x3c>
 80169a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169aa:	7b05      	ldrb	r5, [r0, #12]
 80169ac:	4606      	mov	r6, r0
 80169ae:	b9ad      	cbnz	r5, 80169dc <rmw_uxrce_init_client_memory+0x38>
 80169b0:	23c8      	movs	r3, #200	; 0xc8
 80169b2:	4617      	mov	r7, r2
 80169b4:	460c      	mov	r4, r1
 80169b6:	46a8      	mov	r8, r5
 80169b8:	6083      	str	r3, [r0, #8]
 80169ba:	f240 1301 	movw	r3, #257	; 0x101
 80169be:	e9c0 5500 	strd	r5, r5, [r0]
 80169c2:	8183      	strh	r3, [r0, #12]
 80169c4:	3501      	adds	r5, #1
 80169c6:	4621      	mov	r1, r4
 80169c8:	4630      	mov	r0, r6
 80169ca:	f007 fa9d 	bl	801df08 <put_memory>
 80169ce:	42af      	cmp	r7, r5
 80169d0:	60a4      	str	r4, [r4, #8]
 80169d2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80169d6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80169da:	d1f3      	bne.n	80169c4 <rmw_uxrce_init_client_memory+0x20>
 80169dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169e0:	4770      	bx	lr
 80169e2:	bf00      	nop

080169e4 <rmw_uxrce_init_publisher_memory>:
 80169e4:	b1e2      	cbz	r2, 8016a20 <rmw_uxrce_init_publisher_memory+0x3c>
 80169e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ea:	7b05      	ldrb	r5, [r0, #12]
 80169ec:	4606      	mov	r6, r0
 80169ee:	b9ad      	cbnz	r5, 8016a1c <rmw_uxrce_init_publisher_memory+0x38>
 80169f0:	23d8      	movs	r3, #216	; 0xd8
 80169f2:	4617      	mov	r7, r2
 80169f4:	460c      	mov	r4, r1
 80169f6:	46a8      	mov	r8, r5
 80169f8:	6083      	str	r3, [r0, #8]
 80169fa:	f240 1301 	movw	r3, #257	; 0x101
 80169fe:	e9c0 5500 	strd	r5, r5, [r0]
 8016a02:	8183      	strh	r3, [r0, #12]
 8016a04:	3501      	adds	r5, #1
 8016a06:	4621      	mov	r1, r4
 8016a08:	4630      	mov	r0, r6
 8016a0a:	f007 fa7d 	bl	801df08 <put_memory>
 8016a0e:	42af      	cmp	r7, r5
 8016a10:	60a4      	str	r4, [r4, #8]
 8016a12:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016a16:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016a1a:	d1f3      	bne.n	8016a04 <rmw_uxrce_init_publisher_memory+0x20>
 8016a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a20:	4770      	bx	lr
 8016a22:	bf00      	nop

08016a24 <rmw_uxrce_init_subscription_memory>:
 8016a24:	b1e2      	cbz	r2, 8016a60 <rmw_uxrce_init_subscription_memory+0x3c>
 8016a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a2a:	7b05      	ldrb	r5, [r0, #12]
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	b9ad      	cbnz	r5, 8016a5c <rmw_uxrce_init_subscription_memory+0x38>
 8016a30:	23d8      	movs	r3, #216	; 0xd8
 8016a32:	4617      	mov	r7, r2
 8016a34:	460c      	mov	r4, r1
 8016a36:	46a8      	mov	r8, r5
 8016a38:	6083      	str	r3, [r0, #8]
 8016a3a:	f240 1301 	movw	r3, #257	; 0x101
 8016a3e:	e9c0 5500 	strd	r5, r5, [r0]
 8016a42:	8183      	strh	r3, [r0, #12]
 8016a44:	3501      	adds	r5, #1
 8016a46:	4621      	mov	r1, r4
 8016a48:	4630      	mov	r0, r6
 8016a4a:	f007 fa5d 	bl	801df08 <put_memory>
 8016a4e:	42af      	cmp	r7, r5
 8016a50:	60a4      	str	r4, [r4, #8]
 8016a52:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016a56:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016a5a:	d1f3      	bne.n	8016a44 <rmw_uxrce_init_subscription_memory+0x20>
 8016a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a60:	4770      	bx	lr
 8016a62:	bf00      	nop

08016a64 <rmw_uxrce_init_node_memory>:
 8016a64:	b1e2      	cbz	r2, 8016aa0 <rmw_uxrce_init_node_memory+0x3c>
 8016a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a6a:	7b05      	ldrb	r5, [r0, #12]
 8016a6c:	4606      	mov	r6, r0
 8016a6e:	b9ad      	cbnz	r5, 8016a9c <rmw_uxrce_init_node_memory+0x38>
 8016a70:	23a4      	movs	r3, #164	; 0xa4
 8016a72:	4617      	mov	r7, r2
 8016a74:	460c      	mov	r4, r1
 8016a76:	46a8      	mov	r8, r5
 8016a78:	6083      	str	r3, [r0, #8]
 8016a7a:	f240 1301 	movw	r3, #257	; 0x101
 8016a7e:	e9c0 5500 	strd	r5, r5, [r0]
 8016a82:	8183      	strh	r3, [r0, #12]
 8016a84:	3501      	adds	r5, #1
 8016a86:	4621      	mov	r1, r4
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f007 fa3d 	bl	801df08 <put_memory>
 8016a8e:	42af      	cmp	r7, r5
 8016a90:	60a4      	str	r4, [r4, #8]
 8016a92:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8016a96:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016a9a:	d1f3      	bne.n	8016a84 <rmw_uxrce_init_node_memory+0x20>
 8016a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aa0:	4770      	bx	lr
 8016aa2:	bf00      	nop

08016aa4 <rmw_uxrce_init_session_memory>:
 8016aa4:	b1ea      	cbz	r2, 8016ae2 <rmw_uxrce_init_session_memory+0x3e>
 8016aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016aaa:	7b05      	ldrb	r5, [r0, #12]
 8016aac:	4606      	mov	r6, r0
 8016aae:	b9b5      	cbnz	r5, 8016ade <rmw_uxrce_init_session_memory+0x3a>
 8016ab0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8016ab4:	f240 1301 	movw	r3, #257	; 0x101
 8016ab8:	4617      	mov	r7, r2
 8016aba:	460c      	mov	r4, r1
 8016abc:	46a9      	mov	r9, r5
 8016abe:	f8c0 8008 	str.w	r8, [r0, #8]
 8016ac2:	8183      	strh	r3, [r0, #12]
 8016ac4:	e9c0 5500 	strd	r5, r5, [r0]
 8016ac8:	3501      	adds	r5, #1
 8016aca:	4621      	mov	r1, r4
 8016acc:	4630      	mov	r0, r6
 8016ace:	f007 fa1b 	bl	801df08 <put_memory>
 8016ad2:	42af      	cmp	r7, r5
 8016ad4:	60a4      	str	r4, [r4, #8]
 8016ad6:	f884 900c 	strb.w	r9, [r4, #12]
 8016ada:	4444      	add	r4, r8
 8016adc:	d1f4      	bne.n	8016ac8 <rmw_uxrce_init_session_memory+0x24>
 8016ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ae2:	4770      	bx	lr

08016ae4 <rmw_uxrce_init_topic_memory>:
 8016ae4:	b1e2      	cbz	r2, 8016b20 <rmw_uxrce_init_topic_memory+0x3c>
 8016ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aea:	7b05      	ldrb	r5, [r0, #12]
 8016aec:	4606      	mov	r6, r0
 8016aee:	b9ad      	cbnz	r5, 8016b1c <rmw_uxrce_init_topic_memory+0x38>
 8016af0:	231c      	movs	r3, #28
 8016af2:	4617      	mov	r7, r2
 8016af4:	460c      	mov	r4, r1
 8016af6:	46a8      	mov	r8, r5
 8016af8:	6083      	str	r3, [r0, #8]
 8016afa:	f240 1301 	movw	r3, #257	; 0x101
 8016afe:	e9c0 5500 	strd	r5, r5, [r0]
 8016b02:	8183      	strh	r3, [r0, #12]
 8016b04:	3501      	adds	r5, #1
 8016b06:	4621      	mov	r1, r4
 8016b08:	4630      	mov	r0, r6
 8016b0a:	f007 f9fd 	bl	801df08 <put_memory>
 8016b0e:	42af      	cmp	r7, r5
 8016b10:	60a4      	str	r4, [r4, #8]
 8016b12:	f104 041c 	add.w	r4, r4, #28
 8016b16:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016b1a:	d1f3      	bne.n	8016b04 <rmw_uxrce_init_topic_memory+0x20>
 8016b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b20:	4770      	bx	lr
 8016b22:	bf00      	nop

08016b24 <rmw_uxrce_init_static_input_buffer_memory>:
 8016b24:	b1ea      	cbz	r2, 8016b62 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b2a:	7b05      	ldrb	r5, [r0, #12]
 8016b2c:	4606      	mov	r6, r0
 8016b2e:	b9b5      	cbnz	r5, 8016b5e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016b30:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8016b34:	4617      	mov	r7, r2
 8016b36:	460c      	mov	r4, r1
 8016b38:	46a8      	mov	r8, r5
 8016b3a:	6083      	str	r3, [r0, #8]
 8016b3c:	f240 1301 	movw	r3, #257	; 0x101
 8016b40:	e9c0 5500 	strd	r5, r5, [r0]
 8016b44:	8183      	strh	r3, [r0, #12]
 8016b46:	3501      	adds	r5, #1
 8016b48:	4621      	mov	r1, r4
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	f007 f9dc 	bl	801df08 <put_memory>
 8016b50:	42af      	cmp	r7, r5
 8016b52:	60a4      	str	r4, [r4, #8]
 8016b54:	f884 800c 	strb.w	r8, [r4, #12]
 8016b58:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8016b5c:	d1f3      	bne.n	8016b46 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b62:	4770      	bx	lr

08016b64 <rmw_uxrce_init_init_options_impl_memory>:
 8016b64:	b1e2      	cbz	r2, 8016ba0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b6a:	7b05      	ldrb	r5, [r0, #12]
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	b9ad      	cbnz	r5, 8016b9c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016b70:	232c      	movs	r3, #44	; 0x2c
 8016b72:	4617      	mov	r7, r2
 8016b74:	460c      	mov	r4, r1
 8016b76:	46a8      	mov	r8, r5
 8016b78:	6083      	str	r3, [r0, #8]
 8016b7a:	f240 1301 	movw	r3, #257	; 0x101
 8016b7e:	e9c0 5500 	strd	r5, r5, [r0]
 8016b82:	8183      	strh	r3, [r0, #12]
 8016b84:	3501      	adds	r5, #1
 8016b86:	4621      	mov	r1, r4
 8016b88:	4630      	mov	r0, r6
 8016b8a:	f007 f9bd 	bl	801df08 <put_memory>
 8016b8e:	42af      	cmp	r7, r5
 8016b90:	60a4      	str	r4, [r4, #8]
 8016b92:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8016b96:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016b9a:	d1f3      	bne.n	8016b84 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop

08016ba4 <rmw_uxrce_init_wait_set_memory>:
 8016ba4:	b1e2      	cbz	r2, 8016be0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016baa:	7b05      	ldrb	r5, [r0, #12]
 8016bac:	4606      	mov	r6, r0
 8016bae:	b9ad      	cbnz	r5, 8016bdc <rmw_uxrce_init_wait_set_memory+0x38>
 8016bb0:	231c      	movs	r3, #28
 8016bb2:	4617      	mov	r7, r2
 8016bb4:	460c      	mov	r4, r1
 8016bb6:	46a8      	mov	r8, r5
 8016bb8:	6083      	str	r3, [r0, #8]
 8016bba:	f240 1301 	movw	r3, #257	; 0x101
 8016bbe:	e9c0 5500 	strd	r5, r5, [r0]
 8016bc2:	8183      	strh	r3, [r0, #12]
 8016bc4:	3501      	adds	r5, #1
 8016bc6:	4621      	mov	r1, r4
 8016bc8:	4630      	mov	r0, r6
 8016bca:	f007 f99d 	bl	801df08 <put_memory>
 8016bce:	42af      	cmp	r7, r5
 8016bd0:	60a4      	str	r4, [r4, #8]
 8016bd2:	f104 041c 	add.w	r4, r4, #28
 8016bd6:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016bda:	d1f3      	bne.n	8016bc4 <rmw_uxrce_init_wait_set_memory+0x20>
 8016bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be0:	4770      	bx	lr
 8016be2:	bf00      	nop

08016be4 <rmw_uxrce_init_guard_condition_memory>:
 8016be4:	b1e2      	cbz	r2, 8016c20 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bea:	7b05      	ldrb	r5, [r0, #12]
 8016bec:	4606      	mov	r6, r0
 8016bee:	b9ad      	cbnz	r5, 8016c1c <rmw_uxrce_init_guard_condition_memory+0x38>
 8016bf0:	2320      	movs	r3, #32
 8016bf2:	4617      	mov	r7, r2
 8016bf4:	460c      	mov	r4, r1
 8016bf6:	46a8      	mov	r8, r5
 8016bf8:	6083      	str	r3, [r0, #8]
 8016bfa:	f240 1301 	movw	r3, #257	; 0x101
 8016bfe:	e9c0 5500 	strd	r5, r5, [r0]
 8016c02:	8183      	strh	r3, [r0, #12]
 8016c04:	3501      	adds	r5, #1
 8016c06:	4621      	mov	r1, r4
 8016c08:	4630      	mov	r0, r6
 8016c0a:	f007 f97d 	bl	801df08 <put_memory>
 8016c0e:	42af      	cmp	r7, r5
 8016c10:	60a4      	str	r4, [r4, #8]
 8016c12:	f104 0420 	add.w	r4, r4, #32
 8016c16:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016c1a:	d1f3      	bne.n	8016c04 <rmw_uxrce_init_guard_condition_memory+0x20>
 8016c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c20:	4770      	bx	lr
 8016c22:	bf00      	nop

08016c24 <rmw_uxrce_fini_session_memory>:
 8016c24:	4601      	mov	r1, r0
 8016c26:	4801      	ldr	r0, [pc, #4]	; (8016c2c <rmw_uxrce_fini_session_memory+0x8>)
 8016c28:	f007 b96e 	b.w	801df08 <put_memory>
 8016c2c:	20016c04 	.word	0x20016c04

08016c30 <rmw_uxrce_fini_node_memory>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4604      	mov	r4, r0
 8016c34:	6800      	ldr	r0, [r0, #0]
 8016c36:	b128      	cbz	r0, 8016c44 <rmw_uxrce_fini_node_memory+0x14>
 8016c38:	4b07      	ldr	r3, [pc, #28]	; (8016c58 <rmw_uxrce_fini_node_memory+0x28>)
 8016c3a:	6819      	ldr	r1, [r3, #0]
 8016c3c:	f7e9 fb00 	bl	8000240 <strcmp>
 8016c40:	b940      	cbnz	r0, 8016c54 <rmw_uxrce_fini_node_memory+0x24>
 8016c42:	6020      	str	r0, [r4, #0]
 8016c44:	6861      	ldr	r1, [r4, #4]
 8016c46:	b129      	cbz	r1, 8016c54 <rmw_uxrce_fini_node_memory+0x24>
 8016c48:	2500      	movs	r5, #0
 8016c4a:	4804      	ldr	r0, [pc, #16]	; (8016c5c <rmw_uxrce_fini_node_memory+0x2c>)
 8016c4c:	610d      	str	r5, [r1, #16]
 8016c4e:	f007 f95b 	bl	801df08 <put_memory>
 8016c52:	6065      	str	r5, [r4, #4]
 8016c54:	bd38      	pop	{r3, r4, r5, pc}
 8016c56:	bf00      	nop
 8016c58:	080258bc 	.word	0x080258bc
 8016c5c:	20016bd4 	.word	0x20016bd4

08016c60 <rmw_uxrce_fini_publisher_memory>:
 8016c60:	b510      	push	{r4, lr}
 8016c62:	4604      	mov	r4, r0
 8016c64:	6800      	ldr	r0, [r0, #0]
 8016c66:	b128      	cbz	r0, 8016c74 <rmw_uxrce_fini_publisher_memory+0x14>
 8016c68:	4b06      	ldr	r3, [pc, #24]	; (8016c84 <rmw_uxrce_fini_publisher_memory+0x24>)
 8016c6a:	6819      	ldr	r1, [r3, #0]
 8016c6c:	f7e9 fae8 	bl	8000240 <strcmp>
 8016c70:	b938      	cbnz	r0, 8016c82 <rmw_uxrce_fini_publisher_memory+0x22>
 8016c72:	6020      	str	r0, [r4, #0]
 8016c74:	6861      	ldr	r1, [r4, #4]
 8016c76:	b121      	cbz	r1, 8016c82 <rmw_uxrce_fini_publisher_memory+0x22>
 8016c78:	4803      	ldr	r0, [pc, #12]	; (8016c88 <rmw_uxrce_fini_publisher_memory+0x28>)
 8016c7a:	f007 f945 	bl	801df08 <put_memory>
 8016c7e:	2300      	movs	r3, #0
 8016c80:	6063      	str	r3, [r4, #4]
 8016c82:	bd10      	pop	{r4, pc}
 8016c84:	080258bc 	.word	0x080258bc
 8016c88:	20016be4 	.word	0x20016be4

08016c8c <rmw_uxrce_fini_subscription_memory>:
 8016c8c:	b510      	push	{r4, lr}
 8016c8e:	4604      	mov	r4, r0
 8016c90:	6800      	ldr	r0, [r0, #0]
 8016c92:	b128      	cbz	r0, 8016ca0 <rmw_uxrce_fini_subscription_memory+0x14>
 8016c94:	4b06      	ldr	r3, [pc, #24]	; (8016cb0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016c96:	6819      	ldr	r1, [r3, #0]
 8016c98:	f7e9 fad2 	bl	8000240 <strcmp>
 8016c9c:	b938      	cbnz	r0, 8016cae <rmw_uxrce_fini_subscription_memory+0x22>
 8016c9e:	6020      	str	r0, [r4, #0]
 8016ca0:	6861      	ldr	r1, [r4, #4]
 8016ca2:	b121      	cbz	r1, 8016cae <rmw_uxrce_fini_subscription_memory+0x22>
 8016ca4:	4803      	ldr	r0, [pc, #12]	; (8016cb4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8016ca6:	f007 f92f 	bl	801df08 <put_memory>
 8016caa:	2300      	movs	r3, #0
 8016cac:	6063      	str	r3, [r4, #4]
 8016cae:	bd10      	pop	{r4, pc}
 8016cb0:	080258bc 	.word	0x080258bc
 8016cb4:	20016c24 	.word	0x20016c24

08016cb8 <rmw_uxrce_fini_service_memory>:
 8016cb8:	b510      	push	{r4, lr}
 8016cba:	4604      	mov	r4, r0
 8016cbc:	6800      	ldr	r0, [r0, #0]
 8016cbe:	b128      	cbz	r0, 8016ccc <rmw_uxrce_fini_service_memory+0x14>
 8016cc0:	4b06      	ldr	r3, [pc, #24]	; (8016cdc <rmw_uxrce_fini_service_memory+0x24>)
 8016cc2:	6819      	ldr	r1, [r3, #0]
 8016cc4:	f7e9 fabc 	bl	8000240 <strcmp>
 8016cc8:	b938      	cbnz	r0, 8016cda <rmw_uxrce_fini_service_memory+0x22>
 8016cca:	6020      	str	r0, [r4, #0]
 8016ccc:	6861      	ldr	r1, [r4, #4]
 8016cce:	b121      	cbz	r1, 8016cda <rmw_uxrce_fini_service_memory+0x22>
 8016cd0:	4803      	ldr	r0, [pc, #12]	; (8016ce0 <rmw_uxrce_fini_service_memory+0x28>)
 8016cd2:	f007 f919 	bl	801df08 <put_memory>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	6063      	str	r3, [r4, #4]
 8016cda:	bd10      	pop	{r4, pc}
 8016cdc:	080258bc 	.word	0x080258bc
 8016ce0:	20016bf4 	.word	0x20016bf4

08016ce4 <rmw_uxrce_fini_client_memory>:
 8016ce4:	b510      	push	{r4, lr}
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	6800      	ldr	r0, [r0, #0]
 8016cea:	b128      	cbz	r0, 8016cf8 <rmw_uxrce_fini_client_memory+0x14>
 8016cec:	4b06      	ldr	r3, [pc, #24]	; (8016d08 <rmw_uxrce_fini_client_memory+0x24>)
 8016cee:	6819      	ldr	r1, [r3, #0]
 8016cf0:	f7e9 faa6 	bl	8000240 <strcmp>
 8016cf4:	b938      	cbnz	r0, 8016d06 <rmw_uxrce_fini_client_memory+0x22>
 8016cf6:	6020      	str	r0, [r4, #0]
 8016cf8:	6861      	ldr	r1, [r4, #4]
 8016cfa:	b121      	cbz	r1, 8016d06 <rmw_uxrce_fini_client_memory+0x22>
 8016cfc:	4803      	ldr	r0, [pc, #12]	; (8016d0c <rmw_uxrce_fini_client_memory+0x28>)
 8016cfe:	f007 f903 	bl	801df08 <put_memory>
 8016d02:	2300      	movs	r3, #0
 8016d04:	6063      	str	r3, [r4, #4]
 8016d06:	bd10      	pop	{r4, pc}
 8016d08:	080258bc 	.word	0x080258bc
 8016d0c:	20012304 	.word	0x20012304

08016d10 <rmw_uxrce_fini_topic_memory>:
 8016d10:	b510      	push	{r4, lr}
 8016d12:	4604      	mov	r4, r0
 8016d14:	4803      	ldr	r0, [pc, #12]	; (8016d24 <rmw_uxrce_fini_topic_memory+0x14>)
 8016d16:	4621      	mov	r1, r4
 8016d18:	f007 f8f6 	bl	801df08 <put_memory>
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	61a3      	str	r3, [r4, #24]
 8016d20:	bd10      	pop	{r4, pc}
 8016d22:	bf00      	nop
 8016d24:	20016c34 	.word	0x20016c34

08016d28 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016d28:	b082      	sub	sp, #8
 8016d2a:	492b      	ldr	r1, [pc, #172]	; (8016dd8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016d2c:	b530      	push	{r4, r5, lr}
 8016d2e:	680d      	ldr	r5, [r1, #0]
 8016d30:	ac03      	add	r4, sp, #12
 8016d32:	e884 000c 	stmia.w	r4, {r2, r3}
 8016d36:	461c      	mov	r4, r3
 8016d38:	2d00      	cmp	r5, #0
 8016d3a:	d04b      	beq.n	8016dd4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8016d3c:	462b      	mov	r3, r5
 8016d3e:	2100      	movs	r1, #0
 8016d40:	689a      	ldr	r2, [r3, #8]
 8016d42:	685b      	ldr	r3, [r3, #4]
 8016d44:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8016d48:	4290      	cmp	r0, r2
 8016d4a:	bf08      	it	eq
 8016d4c:	3101      	addeq	r1, #1
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d1f6      	bne.n	8016d40 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8016d52:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016d56:	2b02      	cmp	r3, #2
 8016d58:	d029      	beq.n	8016dae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8016d5a:	d820      	bhi.n	8016d9e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8016d5c:	428c      	cmp	r4, r1
 8016d5e:	d828      	bhi.n	8016db2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016d60:	fab4 f284 	clz	r2, r4
 8016d64:	0952      	lsrs	r2, r2, #5
 8016d66:	b324      	cbz	r4, 8016db2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016d68:	b1dd      	cbz	r5, 8016da2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8016d6a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8016d6e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016d72:	e001      	b.n	8016d78 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8016d74:	686d      	ldr	r5, [r5, #4]
 8016d76:	b1ad      	cbz	r5, 8016da4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016d78:	68ab      	ldr	r3, [r5, #8]
 8016d7a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8016d7e:	4288      	cmp	r0, r1
 8016d80:	d1f8      	bne.n	8016d74 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016d82:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8016d86:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8016d8a:	4561      	cmp	r1, ip
 8016d8c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016d90:	eb73 0e04 	sbcs.w	lr, r3, r4
 8016d94:	daee      	bge.n	8016d74 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016d96:	468c      	mov	ip, r1
 8016d98:	461c      	mov	r4, r3
 8016d9a:	462a      	mov	r2, r5
 8016d9c:	e7ea      	b.n	8016d74 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016d9e:	2b03      	cmp	r3, #3
 8016da0:	d0dc      	beq.n	8016d5c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8016da2:	2200      	movs	r2, #0
 8016da4:	4610      	mov	r0, r2
 8016da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016daa:	b002      	add	sp, #8
 8016dac:	4770      	bx	lr
 8016dae:	428c      	cmp	r4, r1
 8016db0:	d905      	bls.n	8016dbe <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8016db2:	4809      	ldr	r0, [pc, #36]	; (8016dd8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016db8:	b002      	add	sp, #8
 8016dba:	f007 b895 	b.w	801dee8 <get_memory>
 8016dbe:	fab4 f284 	clz	r2, r4
 8016dc2:	0952      	lsrs	r2, r2, #5
 8016dc4:	2c00      	cmp	r4, #0
 8016dc6:	d1ed      	bne.n	8016da4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016dc8:	4803      	ldr	r0, [pc, #12]	; (8016dd8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016dce:	b002      	add	sp, #8
 8016dd0:	f007 b88a 	b.w	801dee8 <get_memory>
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	e7bc      	b.n	8016d52 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8016dd8:	20016c14 	.word	0x20016c14

08016ddc <rmw_uxrce_find_static_input_buffer_by_owner>:
 8016ddc:	4b12      	ldr	r3, [pc, #72]	; (8016e28 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	b530      	push	{r4, r5, lr}
 8016de2:	b1f3      	cbz	r3, 8016e22 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8016de4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8016de8:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8016dec:	2400      	movs	r4, #0
 8016dee:	e001      	b.n	8016df4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016df0:	685b      	ldr	r3, [r3, #4]
 8016df2:	b1a3      	cbz	r3, 8016e1e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8016df4:	689a      	ldr	r2, [r3, #8]
 8016df6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8016dfa:	4288      	cmp	r0, r1
 8016dfc:	d1f8      	bne.n	8016df0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016dfe:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8016e02:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8016e06:	4571      	cmp	r1, lr
 8016e08:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8016e0c:	eb72 050c 	sbcs.w	r5, r2, ip
 8016e10:	daee      	bge.n	8016df0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016e12:	461c      	mov	r4, r3
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	468e      	mov	lr, r1
 8016e18:	4694      	mov	ip, r2
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d1ea      	bne.n	8016df4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016e1e:	4620      	mov	r0, r4
 8016e20:	bd30      	pop	{r4, r5, pc}
 8016e22:	461c      	mov	r4, r3
 8016e24:	4620      	mov	r0, r4
 8016e26:	bd30      	pop	{r4, r5, pc}
 8016e28:	20016c14 	.word	0x20016c14
 8016e2c:	00000000 	.word	0x00000000

08016e30 <rmw_uxrce_clean_expired_static_input_buffer>:
 8016e30:	4b3d      	ldr	r3, [pc, #244]	; (8016f28 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016e32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e36:	681f      	ldr	r7, [r3, #0]
 8016e38:	ed2d 8b06 	vpush	{d8-d10}
 8016e3c:	b08d      	sub	sp, #52	; 0x34
 8016e3e:	f007 fadf 	bl	801e400 <rmw_uros_epoch_nanos>
 8016e42:	2f00      	cmp	r7, #0
 8016e44:	d05d      	beq.n	8016f02 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016e46:	46b8      	mov	r8, r7
 8016e48:	4681      	mov	r9, r0
 8016e4a:	468a      	mov	sl, r1
 8016e4c:	ac04      	add	r4, sp, #16
 8016e4e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016e52:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016e56:	2b04      	cmp	r3, #4
 8016e58:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8016f10 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8016e5c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8016f18 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016e60:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8016f20 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016e64:	d03f      	beq.n	8016ee6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016e66:	2b05      	cmp	r3, #5
 8016e68:	d044      	beq.n	8016ef4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8016e6a:	2b03      	cmp	r3, #3
 8016e6c:	d03b      	beq.n	8016ee6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016e6e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016e72:	ed8d ab06 	vstr	d10, [sp, #24]
 8016e76:	ab08      	add	r3, sp, #32
 8016e78:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016e7c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8016e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016e86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016e8a:	f006 fe41 	bl	801db10 <rmw_time_equal>
 8016e8e:	b118      	cbz	r0, 8016e98 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016e90:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016e94:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016e98:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8016e9c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8016ea0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016ea4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016ea8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016eac:	f006 fe86 	bl	801dbbc <rmw_time_total_nsec>
 8016eb0:	1830      	adds	r0, r6, r0
 8016eb2:	eb47 0101 	adc.w	r1, r7, r1
 8016eb6:	4548      	cmp	r0, r9
 8016eb8:	eb71 030a 	sbcs.w	r3, r1, sl
 8016ebc:	db05      	blt.n	8016eca <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8016ebe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016ec2:	4591      	cmp	r9, r2
 8016ec4:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016ec8:	da03      	bge.n	8016ed2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016eca:	4641      	mov	r1, r8
 8016ecc:	4816      	ldr	r0, [pc, #88]	; (8016f28 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016ece:	f007 f81b 	bl	801df08 <put_memory>
 8016ed2:	f1bb 0f00 	cmp.w	fp, #0
 8016ed6:	d014      	beq.n	8016f02 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016ed8:	46d8      	mov	r8, fp
 8016eda:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016ede:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016ee2:	2b04      	cmp	r3, #4
 8016ee4:	d1bf      	bne.n	8016e66 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8016ee6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016eea:	3340      	adds	r3, #64	; 0x40
 8016eec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016ef2:	e7c0      	b.n	8016e76 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016ef4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016ef8:	3348      	adds	r3, #72	; 0x48
 8016efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016f00:	e7b9      	b.n	8016e76 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016f02:	b00d      	add	sp, #52	; 0x34
 8016f04:	ecbd 8b06 	vpop	{d8-d10}
 8016f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f0c:	f3af 8000 	nop.w
	...
 8016f18:	00000001 	.word	0x00000001
 8016f1c:	00000000 	.word	0x00000000
 8016f20:	0000001e 	.word	0x0000001e
 8016f24:	00000000 	.word	0x00000000
 8016f28:	20016c14 	.word	0x20016c14

08016f2c <run_xrce_session>:
 8016f2c:	b510      	push	{r4, lr}
 8016f2e:	788c      	ldrb	r4, [r1, #2]
 8016f30:	b086      	sub	sp, #24
 8016f32:	2c01      	cmp	r4, #1
 8016f34:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016f38:	d00c      	beq.n	8016f54 <run_xrce_session+0x28>
 8016f3a:	2401      	movs	r4, #1
 8016f3c:	4619      	mov	r1, r3
 8016f3e:	f10d 020e 	add.w	r2, sp, #14
 8016f42:	f10d 0317 	add.w	r3, sp, #23
 8016f46:	9400      	str	r4, [sp, #0]
 8016f48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016f4c:	f001 fd68 	bl	8018a20 <uxr_run_session_until_all_status>
 8016f50:	b006      	add	sp, #24
 8016f52:	bd10      	pop	{r4, pc}
 8016f54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016f58:	f001 f984 	bl	8018264 <uxr_flash_output_streams>
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	b006      	add	sp, #24
 8016f60:	bd10      	pop	{r4, pc}
 8016f62:	bf00      	nop

08016f64 <convert_qos_profile>:
 8016f64:	7a4a      	ldrb	r2, [r1, #9]
 8016f66:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016f6a:	2a02      	cmp	r2, #2
 8016f6c:	bf18      	it	ne
 8016f6e:	2200      	movne	r2, #0
 8016f70:	7002      	strb	r2, [r0, #0]
 8016f72:	f1ac 0202 	sub.w	r2, ip, #2
 8016f76:	fab2 f282 	clz	r2, r2
 8016f7a:	0952      	lsrs	r2, r2, #5
 8016f7c:	7042      	strb	r2, [r0, #1]
 8016f7e:	780a      	ldrb	r2, [r1, #0]
 8016f80:	8889      	ldrh	r1, [r1, #4]
 8016f82:	f1a2 0202 	sub.w	r2, r2, #2
 8016f86:	8081      	strh	r1, [r0, #4]
 8016f88:	fab2 f282 	clz	r2, r2
 8016f8c:	0952      	lsrs	r2, r2, #5
 8016f8e:	7082      	strb	r2, [r0, #2]
 8016f90:	4770      	bx	lr
 8016f92:	bf00      	nop

08016f94 <generate_service_topics>:
 8016f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f96:	461d      	mov	r5, r3
 8016f98:	b083      	sub	sp, #12
 8016f9a:	4606      	mov	r6, r0
 8016f9c:	4c11      	ldr	r4, [pc, #68]	; (8016fe4 <generate_service_topics+0x50>)
 8016f9e:	4608      	mov	r0, r1
 8016fa0:	4b11      	ldr	r3, [pc, #68]	; (8016fe8 <generate_service_topics+0x54>)
 8016fa2:	4617      	mov	r7, r2
 8016fa4:	4629      	mov	r1, r5
 8016fa6:	4a11      	ldr	r2, [pc, #68]	; (8016fec <generate_service_topics+0x58>)
 8016fa8:	9401      	str	r4, [sp, #4]
 8016faa:	9600      	str	r6, [sp, #0]
 8016fac:	f009 fcfa 	bl	80209a4 <sniprintf>
 8016fb0:	4a0f      	ldr	r2, [pc, #60]	; (8016ff0 <generate_service_topics+0x5c>)
 8016fb2:	4604      	mov	r4, r0
 8016fb4:	4b0f      	ldr	r3, [pc, #60]	; (8016ff4 <generate_service_topics+0x60>)
 8016fb6:	9201      	str	r2, [sp, #4]
 8016fb8:	4638      	mov	r0, r7
 8016fba:	4a0c      	ldr	r2, [pc, #48]	; (8016fec <generate_service_topics+0x58>)
 8016fbc:	4629      	mov	r1, r5
 8016fbe:	9600      	str	r6, [sp, #0]
 8016fc0:	f009 fcf0 	bl	80209a4 <sniprintf>
 8016fc4:	2c00      	cmp	r4, #0
 8016fc6:	bfa8      	it	ge
 8016fc8:	42a5      	cmpge	r5, r4
 8016fca:	bfcc      	ite	gt
 8016fcc:	2401      	movgt	r4, #1
 8016fce:	2400      	movle	r4, #0
 8016fd0:	dd05      	ble.n	8016fde <generate_service_topics+0x4a>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	bfa8      	it	ge
 8016fd6:	4285      	cmpge	r5, r0
 8016fd8:	bfcc      	ite	gt
 8016fda:	2401      	movgt	r4, #1
 8016fdc:	2400      	movle	r4, #0
 8016fde:	4620      	mov	r0, r4
 8016fe0:	b003      	add	sp, #12
 8016fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fe4:	08025278 	.word	0x08025278
 8016fe8:	08025274 	.word	0x08025274
 8016fec:	08025258 	.word	0x08025258
 8016ff0:	0802526c 	.word	0x0802526c
 8016ff4:	08025268 	.word	0x08025268

08016ff8 <generate_service_types>:
 8016ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	4606      	mov	r6, r0
 8016ffe:	b087      	sub	sp, #28
 8017000:	461c      	mov	r4, r3
 8017002:	6883      	ldr	r3, [r0, #8]
 8017004:	460d      	mov	r5, r1
 8017006:	4617      	mov	r7, r2
 8017008:	4798      	blx	r3
 801700a:	68f3      	ldr	r3, [r6, #12]
 801700c:	4606      	mov	r6, r0
 801700e:	4798      	blx	r3
 8017010:	2300      	movs	r3, #0
 8017012:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8017016:	6872      	ldr	r2, [r6, #4]
 8017018:	702b      	strb	r3, [r5, #0]
 801701a:	6813      	ldr	r3, [r2, #0]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d03f      	beq.n	80170a0 <generate_service_types+0xa8>
 8017020:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80170b4 <generate_service_types+0xbc>
 8017024:	4649      	mov	r1, r9
 8017026:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80170bc <generate_service_types+0xc4>
 801702a:	4628      	mov	r0, r5
 801702c:	f8df a090 	ldr.w	sl, [pc, #144]	; 80170c0 <generate_service_types+0xc8>
 8017030:	f8cd 8014 	str.w	r8, [sp, #20]
 8017034:	6852      	ldr	r2, [r2, #4]
 8017036:	9100      	str	r1, [sp, #0]
 8017038:	4621      	mov	r1, r4
 801703a:	f8cd 8008 	str.w	r8, [sp, #8]
 801703e:	f8cd a004 	str.w	sl, [sp, #4]
 8017042:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8017046:	4a1a      	ldr	r2, [pc, #104]	; (80170b0 <generate_service_types+0xb8>)
 8017048:	f009 fcac 	bl	80209a4 <sniprintf>
 801704c:	2300      	movs	r3, #0
 801704e:	42a0      	cmp	r0, r4
 8017050:	ea6f 0600 	mvn.w	r6, r0
 8017054:	703b      	strb	r3, [r7, #0]
 8017056:	f8db 3000 	ldr.w	r3, [fp]
 801705a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801705e:	bfac      	ite	ge
 8017060:	2500      	movge	r5, #0
 8017062:	2501      	movlt	r5, #1
 8017064:	b30b      	cbz	r3, 80170aa <generate_service_types+0xb2>
 8017066:	4a13      	ldr	r2, [pc, #76]	; (80170b4 <generate_service_types+0xbc>)
 8017068:	f8cd 8014 	str.w	r8, [sp, #20]
 801706c:	402e      	ands	r6, r5
 801706e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8017072:	4638      	mov	r0, r7
 8017074:	9104      	str	r1, [sp, #16]
 8017076:	4621      	mov	r1, r4
 8017078:	e9cd 2a00 	strd	r2, sl, [sp]
 801707c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017080:	4a0b      	ldr	r2, [pc, #44]	; (80170b0 <generate_service_types+0xb8>)
 8017082:	f009 fc8f 	bl	80209a4 <sniprintf>
 8017086:	2800      	cmp	r0, #0
 8017088:	bfb4      	ite	lt
 801708a:	2600      	movlt	r6, #0
 801708c:	f006 0601 	andge.w	r6, r6, #1
 8017090:	42a0      	cmp	r0, r4
 8017092:	bfac      	ite	ge
 8017094:	2000      	movge	r0, #0
 8017096:	f006 0001 	andlt.w	r0, r6, #1
 801709a:	b007      	add	sp, #28
 801709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a0:	4b05      	ldr	r3, [pc, #20]	; (80170b8 <generate_service_types+0xc0>)
 80170a2:	f8df 9010 	ldr.w	r9, [pc, #16]	; 80170b4 <generate_service_types+0xbc>
 80170a6:	4619      	mov	r1, r3
 80170a8:	e7bd      	b.n	8017026 <generate_service_types+0x2e>
 80170aa:	4b03      	ldr	r3, [pc, #12]	; (80170b8 <generate_service_types+0xc0>)
 80170ac:	461a      	mov	r2, r3
 80170ae:	e7db      	b.n	8017068 <generate_service_types+0x70>
 80170b0:	08025250 	.word	0x08025250
 80170b4:	0802524c 	.word	0x0802524c
 80170b8:	080252d0 	.word	0x080252d0
 80170bc:	08025260 	.word	0x08025260
 80170c0:	08025264 	.word	0x08025264

080170c4 <generate_type_name>:
 80170c4:	2300      	movs	r3, #0
 80170c6:	b530      	push	{r4, r5, lr}
 80170c8:	700b      	strb	r3, [r1, #0]
 80170ca:	b087      	sub	sp, #28
 80170cc:	6803      	ldr	r3, [r0, #0]
 80170ce:	4614      	mov	r4, r2
 80170d0:	b1bb      	cbz	r3, 8017102 <generate_type_name+0x3e>
 80170d2:	4a0e      	ldr	r2, [pc, #56]	; (801710c <generate_type_name+0x48>)
 80170d4:	4615      	mov	r5, r2
 80170d6:	9500      	str	r5, [sp, #0]
 80170d8:	9203      	str	r2, [sp, #12]
 80170da:	4d0d      	ldr	r5, [pc, #52]	; (8017110 <generate_type_name+0x4c>)
 80170dc:	6842      	ldr	r2, [r0, #4]
 80170de:	4608      	mov	r0, r1
 80170e0:	490c      	ldr	r1, [pc, #48]	; (8017114 <generate_type_name+0x50>)
 80170e2:	9204      	str	r2, [sp, #16]
 80170e4:	9105      	str	r1, [sp, #20]
 80170e6:	9102      	str	r1, [sp, #8]
 80170e8:	4621      	mov	r1, r4
 80170ea:	4a0b      	ldr	r2, [pc, #44]	; (8017118 <generate_type_name+0x54>)
 80170ec:	9501      	str	r5, [sp, #4]
 80170ee:	f009 fc59 	bl	80209a4 <sniprintf>
 80170f2:	2800      	cmp	r0, #0
 80170f4:	bfa8      	it	ge
 80170f6:	4284      	cmpge	r4, r0
 80170f8:	bfcc      	ite	gt
 80170fa:	2001      	movgt	r0, #1
 80170fc:	2000      	movle	r0, #0
 80170fe:	b007      	add	sp, #28
 8017100:	bd30      	pop	{r4, r5, pc}
 8017102:	4b06      	ldr	r3, [pc, #24]	; (801711c <generate_type_name+0x58>)
 8017104:	4a01      	ldr	r2, [pc, #4]	; (801710c <generate_type_name+0x48>)
 8017106:	461d      	mov	r5, r3
 8017108:	e7e5      	b.n	80170d6 <generate_type_name+0x12>
 801710a:	bf00      	nop
 801710c:	0802524c 	.word	0x0802524c
 8017110:	08025264 	.word	0x08025264
 8017114:	08025260 	.word	0x08025260
 8017118:	08025250 	.word	0x08025250
 801711c:	080252d0 	.word	0x080252d0

08017120 <generate_topic_name>:
 8017120:	b530      	push	{r4, r5, lr}
 8017122:	4614      	mov	r4, r2
 8017124:	b083      	sub	sp, #12
 8017126:	4605      	mov	r5, r0
 8017128:	4b07      	ldr	r3, [pc, #28]	; (8017148 <generate_topic_name+0x28>)
 801712a:	4a08      	ldr	r2, [pc, #32]	; (801714c <generate_topic_name+0x2c>)
 801712c:	4608      	mov	r0, r1
 801712e:	9500      	str	r5, [sp, #0]
 8017130:	4621      	mov	r1, r4
 8017132:	f009 fc37 	bl	80209a4 <sniprintf>
 8017136:	2800      	cmp	r0, #0
 8017138:	bfa8      	it	ge
 801713a:	4284      	cmpge	r4, r0
 801713c:	bfcc      	ite	gt
 801713e:	2001      	movgt	r0, #1
 8017140:	2000      	movle	r0, #0
 8017142:	b003      	add	sp, #12
 8017144:	bd30      	pop	{r4, r5, pc}
 8017146:	bf00      	nop
 8017148:	08025280 	.word	0x08025280
 801714c:	08024c50 	.word	0x08024c50

08017150 <is_uxrce_rmw_identifier_valid>:
 8017150:	b510      	push	{r4, lr}
 8017152:	4604      	mov	r4, r0
 8017154:	b140      	cbz	r0, 8017168 <is_uxrce_rmw_identifier_valid+0x18>
 8017156:	f006 ff2f 	bl	801dfb8 <rmw_get_implementation_identifier>
 801715a:	4601      	mov	r1, r0
 801715c:	4620      	mov	r0, r4
 801715e:	f7e9 f86f 	bl	8000240 <strcmp>
 8017162:	fab0 f080 	clz	r0, r0
 8017166:	0940      	lsrs	r0, r0, #5
 8017168:	bd10      	pop	{r4, pc}
 801716a:	bf00      	nop

0801716c <get_message_typesupport_handle>:
 801716c:	6883      	ldr	r3, [r0, #8]
 801716e:	4718      	bx	r3

08017170 <get_message_typesupport_handle_function>:
 8017170:	b510      	push	{r4, lr}
 8017172:	4604      	mov	r4, r0
 8017174:	6800      	ldr	r0, [r0, #0]
 8017176:	f7e9 f863 	bl	8000240 <strcmp>
 801717a:	2800      	cmp	r0, #0
 801717c:	bf0c      	ite	eq
 801717e:	4620      	moveq	r0, r4
 8017180:	2000      	movne	r0, #0
 8017182:	bd10      	pop	{r4, pc}

08017184 <get_service_typesupport_handle>:
 8017184:	6883      	ldr	r3, [r0, #8]
 8017186:	4718      	bx	r3

08017188 <get_service_typesupport_handle_function>:
 8017188:	b510      	push	{r4, lr}
 801718a:	4604      	mov	r4, r0
 801718c:	6800      	ldr	r0, [r0, #0]
 801718e:	f7e9 f857 	bl	8000240 <strcmp>
 8017192:	2800      	cmp	r0, #0
 8017194:	bf0c      	ite	eq
 8017196:	4620      	moveq	r0, r4
 8017198:	2000      	movne	r0, #0
 801719a:	bd10      	pop	{r4, pc}

0801719c <rosidl_runtime_c__String__init>:
 801719c:	b510      	push	{r4, lr}
 801719e:	4604      	mov	r4, r0
 80171a0:	b086      	sub	sp, #24
 80171a2:	b170      	cbz	r0, 80171c2 <rosidl_runtime_c__String__init+0x26>
 80171a4:	a801      	add	r0, sp, #4
 80171a6:	f7fd feef 	bl	8014f88 <rcutils_get_default_allocator>
 80171aa:	9b01      	ldr	r3, [sp, #4]
 80171ac:	9905      	ldr	r1, [sp, #20]
 80171ae:	2001      	movs	r0, #1
 80171b0:	4798      	blx	r3
 80171b2:	6020      	str	r0, [r4, #0]
 80171b4:	b128      	cbz	r0, 80171c2 <rosidl_runtime_c__String__init+0x26>
 80171b6:	2100      	movs	r1, #0
 80171b8:	2201      	movs	r2, #1
 80171ba:	7001      	strb	r1, [r0, #0]
 80171bc:	4610      	mov	r0, r2
 80171be:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80171c2:	b006      	add	sp, #24
 80171c4:	bd10      	pop	{r4, pc}
 80171c6:	bf00      	nop

080171c8 <rosidl_runtime_c__String__fini>:
 80171c8:	b320      	cbz	r0, 8017214 <rosidl_runtime_c__String__fini+0x4c>
 80171ca:	6803      	ldr	r3, [r0, #0]
 80171cc:	b510      	push	{r4, lr}
 80171ce:	4604      	mov	r4, r0
 80171d0:	b086      	sub	sp, #24
 80171d2:	b173      	cbz	r3, 80171f2 <rosidl_runtime_c__String__fini+0x2a>
 80171d4:	6883      	ldr	r3, [r0, #8]
 80171d6:	b1f3      	cbz	r3, 8017216 <rosidl_runtime_c__String__fini+0x4e>
 80171d8:	a801      	add	r0, sp, #4
 80171da:	f7fd fed5 	bl	8014f88 <rcutils_get_default_allocator>
 80171de:	9b02      	ldr	r3, [sp, #8]
 80171e0:	9905      	ldr	r1, [sp, #20]
 80171e2:	6820      	ldr	r0, [r4, #0]
 80171e4:	4798      	blx	r3
 80171e6:	2300      	movs	r3, #0
 80171e8:	e9c4 3300 	strd	r3, r3, [r4]
 80171ec:	60a3      	str	r3, [r4, #8]
 80171ee:	b006      	add	sp, #24
 80171f0:	bd10      	pop	{r4, pc}
 80171f2:	6843      	ldr	r3, [r0, #4]
 80171f4:	b9db      	cbnz	r3, 801722e <rosidl_runtime_c__String__fini+0x66>
 80171f6:	6883      	ldr	r3, [r0, #8]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d0f8      	beq.n	80171ee <rosidl_runtime_c__String__fini+0x26>
 80171fc:	4b12      	ldr	r3, [pc, #72]	; (8017248 <rosidl_runtime_c__String__fini+0x80>)
 80171fe:	2251      	movs	r2, #81	; 0x51
 8017200:	2101      	movs	r1, #1
 8017202:	4812      	ldr	r0, [pc, #72]	; (801724c <rosidl_runtime_c__String__fini+0x84>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	68db      	ldr	r3, [r3, #12]
 8017208:	f009 faa2 	bl	8020750 <fwrite>
 801720c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017210:	f008 f91a 	bl	801f448 <exit>
 8017214:	4770      	bx	lr
 8017216:	4b0c      	ldr	r3, [pc, #48]	; (8017248 <rosidl_runtime_c__String__fini+0x80>)
 8017218:	224c      	movs	r2, #76	; 0x4c
 801721a:	2101      	movs	r1, #1
 801721c:	480c      	ldr	r0, [pc, #48]	; (8017250 <rosidl_runtime_c__String__fini+0x88>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	68db      	ldr	r3, [r3, #12]
 8017222:	f009 fa95 	bl	8020750 <fwrite>
 8017226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801722a:	f008 f90d 	bl	801f448 <exit>
 801722e:	4b06      	ldr	r3, [pc, #24]	; (8017248 <rosidl_runtime_c__String__fini+0x80>)
 8017230:	224e      	movs	r2, #78	; 0x4e
 8017232:	2101      	movs	r1, #1
 8017234:	4807      	ldr	r0, [pc, #28]	; (8017254 <rosidl_runtime_c__String__fini+0x8c>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	68db      	ldr	r3, [r3, #12]
 801723a:	f009 fa89 	bl	8020750 <fwrite>
 801723e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017242:	f008 f901 	bl	801f448 <exit>
 8017246:	bf00      	nop
 8017248:	20000778 	.word	0x20000778
 801724c:	08025324 	.word	0x08025324
 8017250:	08025284 	.word	0x08025284
 8017254:	080252d4 	.word	0x080252d4

08017258 <rosidl_runtime_c__String__assignn>:
 8017258:	2900      	cmp	r1, #0
 801725a:	bf18      	it	ne
 801725c:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 8017260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017264:	bf0c      	ite	eq
 8017266:	2401      	moveq	r4, #1
 8017268:	2400      	movne	r4, #0
 801726a:	b087      	sub	sp, #28
 801726c:	2800      	cmp	r0, #0
 801726e:	bf08      	it	eq
 8017270:	f044 0401 	orreq.w	r4, r4, #1
 8017274:	b124      	cbz	r4, 8017280 <rosidl_runtime_c__String__assignn+0x28>
 8017276:	2400      	movs	r4, #0
 8017278:	4620      	mov	r0, r4
 801727a:	b007      	add	sp, #28
 801727c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017280:	4616      	mov	r6, r2
 8017282:	4605      	mov	r5, r0
 8017284:	a801      	add	r0, sp, #4
 8017286:	460f      	mov	r7, r1
 8017288:	f106 0901 	add.w	r9, r6, #1
 801728c:	f7fd fe7c 	bl	8014f88 <rcutils_get_default_allocator>
 8017290:	9b03      	ldr	r3, [sp, #12]
 8017292:	9a05      	ldr	r2, [sp, #20]
 8017294:	4649      	mov	r1, r9
 8017296:	6828      	ldr	r0, [r5, #0]
 8017298:	4798      	blx	r3
 801729a:	4680      	mov	r8, r0
 801729c:	2800      	cmp	r0, #0
 801729e:	d0eb      	beq.n	8017278 <rosidl_runtime_c__String__assignn+0x20>
 80172a0:	4639      	mov	r1, r7
 80172a2:	4632      	mov	r2, r6
 80172a4:	f009 fddb 	bl	8020e5e <memcpy>
 80172a8:	f808 4006 	strb.w	r4, [r8, r6]
 80172ac:	2401      	movs	r4, #1
 80172ae:	f8c5 9008 	str.w	r9, [r5, #8]
 80172b2:	4620      	mov	r0, r4
 80172b4:	e9c5 8600 	strd	r8, r6, [r5]
 80172b8:	b007      	add	sp, #28
 80172ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172be:	bf00      	nop

080172c0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80172c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c4:	6805      	ldr	r5, [r0, #0]
 80172c6:	4604      	mov	r4, r0
 80172c8:	460e      	mov	r6, r1
 80172ca:	4628      	mov	r0, r5
 80172cc:	f7e8 ffb8 	bl	8000240 <strcmp>
 80172d0:	b1c8      	cbz	r0, 8017306 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80172d2:	4b11      	ldr	r3, [pc, #68]	; (8017318 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	429d      	cmp	r5, r3
 80172d8:	d112      	bne.n	8017300 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80172da:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80172de:	f8d8 4000 	ldr.w	r4, [r8]
 80172e2:	b16c      	cbz	r4, 8017300 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80172e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80172e8:	2700      	movs	r7, #0
 80172ea:	3d04      	subs	r5, #4
 80172ec:	4631      	mov	r1, r6
 80172ee:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80172f2:	f7e8 ffa5 	bl	8000240 <strcmp>
 80172f6:	00bb      	lsls	r3, r7, #2
 80172f8:	b140      	cbz	r0, 801730c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80172fa:	3701      	adds	r7, #1
 80172fc:	42bc      	cmp	r4, r7
 80172fe:	d1f5      	bne.n	80172ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017300:	2000      	movs	r0, #0
 8017302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017306:	4620      	mov	r0, r4
 8017308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801730c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017314:	58d3      	ldr	r3, [r2, r3]
 8017316:	4718      	bx	r3
 8017318:	20000694 	.word	0x20000694

0801731c <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 801731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017320:	6805      	ldr	r5, [r0, #0]
 8017322:	4604      	mov	r4, r0
 8017324:	460e      	mov	r6, r1
 8017326:	4628      	mov	r0, r5
 8017328:	f7e8 ff8a 	bl	8000240 <strcmp>
 801732c:	b1c8      	cbz	r0, 8017362 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801732e:	4b11      	ldr	r3, [pc, #68]	; (8017374 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	429d      	cmp	r5, r3
 8017334:	d112      	bne.n	801735c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017336:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801733a:	f8d8 4000 	ldr.w	r4, [r8]
 801733e:	b16c      	cbz	r4, 801735c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017340:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017344:	2700      	movs	r7, #0
 8017346:	3d04      	subs	r5, #4
 8017348:	4631      	mov	r1, r6
 801734a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801734e:	f7e8 ff77 	bl	8000240 <strcmp>
 8017352:	00bb      	lsls	r3, r7, #2
 8017354:	b140      	cbz	r0, 8017368 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8017356:	3701      	adds	r7, #1
 8017358:	42bc      	cmp	r4, r7
 801735a:	d1f5      	bne.n	8017348 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 801735c:	2000      	movs	r0, #0
 801735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017362:	4620      	mov	r0, r4
 8017364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017368:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801736c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017370:	58d3      	ldr	r3, [r2, r3]
 8017372:	4718      	bx	r3
 8017374:	20000694 	.word	0x20000694

08017378 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017378:	4b04      	ldr	r3, [pc, #16]	; (801738c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801737a:	681a      	ldr	r2, [r3, #0]
 801737c:	b10a      	cbz	r2, 8017382 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801737e:	4803      	ldr	r0, [pc, #12]	; (801738c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017380:	4770      	bx	lr
 8017382:	4a03      	ldr	r2, [pc, #12]	; (8017390 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8017384:	4801      	ldr	r0, [pc, #4]	; (801738c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017386:	6812      	ldr	r2, [r2, #0]
 8017388:	601a      	str	r2, [r3, #0]
 801738a:	4770      	bx	lr
 801738c:	200006a4 	.word	0x200006a4
 8017390:	20000694 	.word	0x20000694

08017394 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017394:	4a02      	ldr	r2, [pc, #8]	; (80173a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 8017396:	4b03      	ldr	r3, [pc, #12]	; (80173a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8017398:	6812      	ldr	r2, [r2, #0]
 801739a:	601a      	str	r2, [r3, #0]
 801739c:	4770      	bx	lr
 801739e:	bf00      	nop
 80173a0:	20000694 	.word	0x20000694
 80173a4:	200006a4 	.word	0x200006a4

080173a8 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 80173a8:	f007 b838 	b.w	801e41c <std_msgs__msg__String__init>

080173ac <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 80173ac:	f007 b848 	b.w	801e440 <std_msgs__msg__String__fini>

080173b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 80173b0:	4b04      	ldr	r3, [pc, #16]	; (80173c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80173b2:	681a      	ldr	r2, [r3, #0]
 80173b4:	b10a      	cbz	r2, 80173ba <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80173b6:	4803      	ldr	r0, [pc, #12]	; (80173c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80173b8:	4770      	bx	lr
 80173ba:	4a03      	ldr	r2, [pc, #12]	; (80173c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80173bc:	4801      	ldr	r0, [pc, #4]	; (80173c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80173be:	6812      	ldr	r2, [r2, #0]
 80173c0:	601a      	str	r2, [r3, #0]
 80173c2:	4770      	bx	lr
 80173c4:	200006ec 	.word	0x200006ec
 80173c8:	20000698 	.word	0x20000698

080173cc <_String__max_serialized_size>:
 80173cc:	2000      	movs	r0, #0
 80173ce:	4770      	bx	lr

080173d0 <_String__cdr_serialize>:
 80173d0:	b1c8      	cbz	r0, 8017406 <_String__cdr_serialize+0x36>
 80173d2:	b570      	push	{r4, r5, r6, lr}
 80173d4:	6806      	ldr	r6, [r0, #0]
 80173d6:	4604      	mov	r4, r0
 80173d8:	460d      	mov	r5, r1
 80173da:	b15e      	cbz	r6, 80173f4 <_String__cdr_serialize+0x24>
 80173dc:	4630      	mov	r0, r6
 80173de:	f7e8 ff8f 	bl	8000300 <strlen>
 80173e2:	4603      	mov	r3, r0
 80173e4:	1c42      	adds	r2, r0, #1
 80173e6:	4631      	mov	r1, r6
 80173e8:	4628      	mov	r0, r5
 80173ea:	6063      	str	r3, [r4, #4]
 80173ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173f0:	f7fb bf74 	b.w	80132dc <ucdr_serialize_sequence_char>
 80173f4:	4633      	mov	r3, r6
 80173f6:	4632      	mov	r2, r6
 80173f8:	4631      	mov	r1, r6
 80173fa:	4628      	mov	r0, r5
 80173fc:	6063      	str	r3, [r4, #4]
 80173fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017402:	f7fb bf6b 	b.w	80132dc <ucdr_serialize_sequence_char>
 8017406:	4770      	bx	lr

08017408 <get_serialized_size_std_msgs__msg__String>:
 8017408:	b510      	push	{r4, lr}
 801740a:	4604      	mov	r4, r0
 801740c:	b130      	cbz	r0, 801741c <get_serialized_size_std_msgs__msg__String+0x14>
 801740e:	4608      	mov	r0, r1
 8017410:	2104      	movs	r1, #4
 8017412:	f7fb fef3 	bl	80131fc <ucdr_alignment>
 8017416:	6863      	ldr	r3, [r4, #4]
 8017418:	3305      	adds	r3, #5
 801741a:	4418      	add	r0, r3
 801741c:	bd10      	pop	{r4, pc}
 801741e:	bf00      	nop

08017420 <_String__cdr_deserialize>:
 8017420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017422:	460c      	mov	r4, r1
 8017424:	b083      	sub	sp, #12
 8017426:	b1a1      	cbz	r1, 8017452 <_String__cdr_deserialize+0x32>
 8017428:	688f      	ldr	r7, [r1, #8]
 801742a:	ab01      	add	r3, sp, #4
 801742c:	6809      	ldr	r1, [r1, #0]
 801742e:	4606      	mov	r6, r0
 8017430:	463a      	mov	r2, r7
 8017432:	f7fb ff65 	bl	8013300 <ucdr_deserialize_sequence_char>
 8017436:	9b01      	ldr	r3, [sp, #4]
 8017438:	4605      	mov	r5, r0
 801743a:	b920      	cbnz	r0, 8017446 <_String__cdr_deserialize+0x26>
 801743c:	429f      	cmp	r7, r3
 801743e:	d30c      	bcc.n	801745a <_String__cdr_deserialize+0x3a>
 8017440:	4628      	mov	r0, r5
 8017442:	b003      	add	sp, #12
 8017444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017446:	b103      	cbz	r3, 801744a <_String__cdr_deserialize+0x2a>
 8017448:	3b01      	subs	r3, #1
 801744a:	4628      	mov	r0, r5
 801744c:	6063      	str	r3, [r4, #4]
 801744e:	b003      	add	sp, #12
 8017450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017452:	460d      	mov	r5, r1
 8017454:	4628      	mov	r0, r5
 8017456:	b003      	add	sp, #12
 8017458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801745a:	2101      	movs	r1, #1
 801745c:	4630      	mov	r0, r6
 801745e:	75b5      	strb	r5, [r6, #22]
 8017460:	7571      	strb	r1, [r6, #21]
 8017462:	6065      	str	r5, [r4, #4]
 8017464:	f7fb fee2 	bl	801322c <ucdr_align_to>
 8017468:	4630      	mov	r0, r6
 801746a:	9901      	ldr	r1, [sp, #4]
 801746c:	f7fb ff16 	bl	801329c <ucdr_advance_buffer>
 8017470:	4628      	mov	r0, r5
 8017472:	b003      	add	sp, #12
 8017474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017476:	bf00      	nop

08017478 <_String__get_serialized_size>:
 8017478:	b510      	push	{r4, lr}
 801747a:	4604      	mov	r4, r0
 801747c:	b130      	cbz	r0, 801748c <_String__get_serialized_size+0x14>
 801747e:	2104      	movs	r1, #4
 8017480:	2000      	movs	r0, #0
 8017482:	f7fb febb 	bl	80131fc <ucdr_alignment>
 8017486:	6863      	ldr	r3, [r4, #4]
 8017488:	3305      	adds	r3, #5
 801748a:	4418      	add	r0, r3
 801748c:	bd10      	pop	{r4, pc}
 801748e:	bf00      	nop

08017490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017490:	4800      	ldr	r0, [pc, #0]	; (8017494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8017492:	4770      	bx	lr
 8017494:	200006f8 	.word	0x200006f8

08017498 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8017498:	3800      	subs	r0, #0
 801749a:	bf18      	it	ne
 801749c:	2001      	movne	r0, #1
 801749e:	4770      	bx	lr

080174a0 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 80174a0:	4770      	bx	lr
 80174a2:	bf00      	nop

080174a4 <custom_test_msgs__srv__AddThreeInts_Response__init>:
 80174a4:	3800      	subs	r0, #0
 80174a6:	bf18      	it	ne
 80174a8:	2001      	movne	r0, #1
 80174aa:	4770      	bx	lr

080174ac <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 80174ac:	4770      	bx	lr
 80174ae:	bf00      	nop

080174b0 <drive_msgs__msg__Omni__init>:
 80174b0:	b538      	push	{r3, r4, r5, lr}
 80174b2:	4604      	mov	r4, r0
 80174b4:	b128      	cbz	r0, 80174c2 <drive_msgs__msg__Omni__init+0x12>
 80174b6:	f7ff fe71 	bl	801719c <rosidl_runtime_c__String__init>
 80174ba:	4605      	mov	r5, r0
 80174bc:	b120      	cbz	r0, 80174c8 <drive_msgs__msg__Omni__init+0x18>
 80174be:	4628      	mov	r0, r5
 80174c0:	bd38      	pop	{r3, r4, r5, pc}
 80174c2:	4605      	mov	r5, r0
 80174c4:	4628      	mov	r0, r5
 80174c6:	bd38      	pop	{r3, r4, r5, pc}
 80174c8:	4620      	mov	r0, r4
 80174ca:	f7ff fe7d 	bl	80171c8 <rosidl_runtime_c__String__fini>
 80174ce:	4628      	mov	r0, r5
 80174d0:	bd38      	pop	{r3, r4, r5, pc}
 80174d2:	bf00      	nop

080174d4 <drive_msgs__msg__Omni__fini>:
 80174d4:	b108      	cbz	r0, 80174da <drive_msgs__msg__Omni__fini+0x6>
 80174d6:	f7ff be77 	b.w	80171c8 <rosidl_runtime_c__String__fini>
 80174da:	4770      	bx	lr

080174dc <drive_msgs__msg__OmniEnc__init>:
 80174dc:	b538      	push	{r3, r4, r5, lr}
 80174de:	4604      	mov	r4, r0
 80174e0:	b128      	cbz	r0, 80174ee <drive_msgs__msg__OmniEnc__init+0x12>
 80174e2:	f7ff fe5b 	bl	801719c <rosidl_runtime_c__String__init>
 80174e6:	4605      	mov	r5, r0
 80174e8:	b120      	cbz	r0, 80174f4 <drive_msgs__msg__OmniEnc__init+0x18>
 80174ea:	4628      	mov	r0, r5
 80174ec:	bd38      	pop	{r3, r4, r5, pc}
 80174ee:	4605      	mov	r5, r0
 80174f0:	4628      	mov	r0, r5
 80174f2:	bd38      	pop	{r3, r4, r5, pc}
 80174f4:	4620      	mov	r0, r4
 80174f6:	f7ff fe67 	bl	80171c8 <rosidl_runtime_c__String__fini>
 80174fa:	4628      	mov	r0, r5
 80174fc:	bd38      	pop	{r3, r4, r5, pc}
 80174fe:	bf00      	nop

08017500 <drive_msgs__msg__OmniEnc__fini>:
 8017500:	b108      	cbz	r0, 8017506 <drive_msgs__msg__OmniEnc__fini+0x6>
 8017502:	f7ff be61 	b.w	80171c8 <rosidl_runtime_c__String__fini>
 8017506:	4770      	bx	lr

08017508 <ucdr_serialize_endian_array_char>:
 8017508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801750c:	4619      	mov	r1, r3
 801750e:	461f      	mov	r7, r3
 8017510:	4605      	mov	r5, r0
 8017512:	4690      	mov	r8, r2
 8017514:	f7fb fe1a 	bl	801314c <ucdr_check_buffer_available_for>
 8017518:	b9e0      	cbnz	r0, 8017554 <ucdr_serialize_endian_array_char+0x4c>
 801751a:	463e      	mov	r6, r7
 801751c:	e00b      	b.n	8017536 <ucdr_serialize_endian_array_char+0x2e>
 801751e:	4441      	add	r1, r8
 8017520:	68a8      	ldr	r0, [r5, #8]
 8017522:	4622      	mov	r2, r4
 8017524:	1b36      	subs	r6, r6, r4
 8017526:	f009 fc9a 	bl	8020e5e <memcpy>
 801752a:	68ab      	ldr	r3, [r5, #8]
 801752c:	6928      	ldr	r0, [r5, #16]
 801752e:	4423      	add	r3, r4
 8017530:	4420      	add	r0, r4
 8017532:	60ab      	str	r3, [r5, #8]
 8017534:	6128      	str	r0, [r5, #16]
 8017536:	4631      	mov	r1, r6
 8017538:	2201      	movs	r2, #1
 801753a:	4628      	mov	r0, r5
 801753c:	f7fb fe90 	bl	8013260 <ucdr_check_final_buffer_behavior_array>
 8017540:	1bb9      	subs	r1, r7, r6
 8017542:	4604      	mov	r4, r0
 8017544:	2800      	cmp	r0, #0
 8017546:	d1ea      	bne.n	801751e <ucdr_serialize_endian_array_char+0x16>
 8017548:	2301      	movs	r3, #1
 801754a:	7da8      	ldrb	r0, [r5, #22]
 801754c:	756b      	strb	r3, [r5, #21]
 801754e:	4058      	eors	r0, r3
 8017550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017554:	463a      	mov	r2, r7
 8017556:	4641      	mov	r1, r8
 8017558:	68a8      	ldr	r0, [r5, #8]
 801755a:	f009 fc80 	bl	8020e5e <memcpy>
 801755e:	68aa      	ldr	r2, [r5, #8]
 8017560:	692b      	ldr	r3, [r5, #16]
 8017562:	443a      	add	r2, r7
 8017564:	443b      	add	r3, r7
 8017566:	60aa      	str	r2, [r5, #8]
 8017568:	612b      	str	r3, [r5, #16]
 801756a:	e7ed      	b.n	8017548 <ucdr_serialize_endian_array_char+0x40>

0801756c <ucdr_deserialize_endian_array_char>:
 801756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017570:	4619      	mov	r1, r3
 8017572:	461f      	mov	r7, r3
 8017574:	4605      	mov	r5, r0
 8017576:	4690      	mov	r8, r2
 8017578:	f7fb fde8 	bl	801314c <ucdr_check_buffer_available_for>
 801757c:	b9e8      	cbnz	r0, 80175ba <ucdr_deserialize_endian_array_char+0x4e>
 801757e:	463e      	mov	r6, r7
 8017580:	e00c      	b.n	801759c <ucdr_deserialize_endian_array_char+0x30>
 8017582:	eb08 0003 	add.w	r0, r8, r3
 8017586:	68a9      	ldr	r1, [r5, #8]
 8017588:	4622      	mov	r2, r4
 801758a:	1b36      	subs	r6, r6, r4
 801758c:	f009 fc67 	bl	8020e5e <memcpy>
 8017590:	68ab      	ldr	r3, [r5, #8]
 8017592:	6928      	ldr	r0, [r5, #16]
 8017594:	4423      	add	r3, r4
 8017596:	4420      	add	r0, r4
 8017598:	60ab      	str	r3, [r5, #8]
 801759a:	6128      	str	r0, [r5, #16]
 801759c:	4631      	mov	r1, r6
 801759e:	2201      	movs	r2, #1
 80175a0:	4628      	mov	r0, r5
 80175a2:	f7fb fe5d 	bl	8013260 <ucdr_check_final_buffer_behavior_array>
 80175a6:	1bbb      	subs	r3, r7, r6
 80175a8:	4604      	mov	r4, r0
 80175aa:	2800      	cmp	r0, #0
 80175ac:	d1e9      	bne.n	8017582 <ucdr_deserialize_endian_array_char+0x16>
 80175ae:	2301      	movs	r3, #1
 80175b0:	7da8      	ldrb	r0, [r5, #22]
 80175b2:	756b      	strb	r3, [r5, #21]
 80175b4:	4058      	eors	r0, r3
 80175b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ba:	463a      	mov	r2, r7
 80175bc:	68a9      	ldr	r1, [r5, #8]
 80175be:	4640      	mov	r0, r8
 80175c0:	f009 fc4d 	bl	8020e5e <memcpy>
 80175c4:	68aa      	ldr	r2, [r5, #8]
 80175c6:	692b      	ldr	r3, [r5, #16]
 80175c8:	443a      	add	r2, r7
 80175ca:	443b      	add	r3, r7
 80175cc:	60aa      	str	r2, [r5, #8]
 80175ce:	612b      	str	r3, [r5, #16]
 80175d0:	e7ed      	b.n	80175ae <ucdr_deserialize_endian_array_char+0x42>
 80175d2:	bf00      	nop

080175d4 <ucdr_serialize_array_uint8_t>:
 80175d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175d8:	4688      	mov	r8, r1
 80175da:	4611      	mov	r1, r2
 80175dc:	4617      	mov	r7, r2
 80175de:	4605      	mov	r5, r0
 80175e0:	f7fb fdb4 	bl	801314c <ucdr_check_buffer_available_for>
 80175e4:	b9e0      	cbnz	r0, 8017620 <ucdr_serialize_array_uint8_t+0x4c>
 80175e6:	463e      	mov	r6, r7
 80175e8:	e00b      	b.n	8017602 <ucdr_serialize_array_uint8_t+0x2e>
 80175ea:	4441      	add	r1, r8
 80175ec:	68a8      	ldr	r0, [r5, #8]
 80175ee:	4622      	mov	r2, r4
 80175f0:	1b36      	subs	r6, r6, r4
 80175f2:	f009 fc34 	bl	8020e5e <memcpy>
 80175f6:	68ab      	ldr	r3, [r5, #8]
 80175f8:	6928      	ldr	r0, [r5, #16]
 80175fa:	4423      	add	r3, r4
 80175fc:	4420      	add	r0, r4
 80175fe:	60ab      	str	r3, [r5, #8]
 8017600:	6128      	str	r0, [r5, #16]
 8017602:	4631      	mov	r1, r6
 8017604:	2201      	movs	r2, #1
 8017606:	4628      	mov	r0, r5
 8017608:	f7fb fe2a 	bl	8013260 <ucdr_check_final_buffer_behavior_array>
 801760c:	1bb9      	subs	r1, r7, r6
 801760e:	4604      	mov	r4, r0
 8017610:	2800      	cmp	r0, #0
 8017612:	d1ea      	bne.n	80175ea <ucdr_serialize_array_uint8_t+0x16>
 8017614:	2301      	movs	r3, #1
 8017616:	7da8      	ldrb	r0, [r5, #22]
 8017618:	756b      	strb	r3, [r5, #21]
 801761a:	4058      	eors	r0, r3
 801761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017620:	463a      	mov	r2, r7
 8017622:	4641      	mov	r1, r8
 8017624:	68a8      	ldr	r0, [r5, #8]
 8017626:	f009 fc1a 	bl	8020e5e <memcpy>
 801762a:	68aa      	ldr	r2, [r5, #8]
 801762c:	692b      	ldr	r3, [r5, #16]
 801762e:	443a      	add	r2, r7
 8017630:	443b      	add	r3, r7
 8017632:	60aa      	str	r2, [r5, #8]
 8017634:	612b      	str	r3, [r5, #16]
 8017636:	e7ed      	b.n	8017614 <ucdr_serialize_array_uint8_t+0x40>

08017638 <ucdr_serialize_endian_array_uint8_t>:
 8017638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801763c:	4619      	mov	r1, r3
 801763e:	461f      	mov	r7, r3
 8017640:	4605      	mov	r5, r0
 8017642:	4690      	mov	r8, r2
 8017644:	f7fb fd82 	bl	801314c <ucdr_check_buffer_available_for>
 8017648:	b9e0      	cbnz	r0, 8017684 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801764a:	463e      	mov	r6, r7
 801764c:	e00b      	b.n	8017666 <ucdr_serialize_endian_array_uint8_t+0x2e>
 801764e:	4441      	add	r1, r8
 8017650:	68a8      	ldr	r0, [r5, #8]
 8017652:	4622      	mov	r2, r4
 8017654:	1b36      	subs	r6, r6, r4
 8017656:	f009 fc02 	bl	8020e5e <memcpy>
 801765a:	68ab      	ldr	r3, [r5, #8]
 801765c:	6928      	ldr	r0, [r5, #16]
 801765e:	4423      	add	r3, r4
 8017660:	4420      	add	r0, r4
 8017662:	60ab      	str	r3, [r5, #8]
 8017664:	6128      	str	r0, [r5, #16]
 8017666:	4631      	mov	r1, r6
 8017668:	2201      	movs	r2, #1
 801766a:	4628      	mov	r0, r5
 801766c:	f7fb fdf8 	bl	8013260 <ucdr_check_final_buffer_behavior_array>
 8017670:	1bb9      	subs	r1, r7, r6
 8017672:	4604      	mov	r4, r0
 8017674:	2800      	cmp	r0, #0
 8017676:	d1ea      	bne.n	801764e <ucdr_serialize_endian_array_uint8_t+0x16>
 8017678:	2301      	movs	r3, #1
 801767a:	7da8      	ldrb	r0, [r5, #22]
 801767c:	756b      	strb	r3, [r5, #21]
 801767e:	4058      	eors	r0, r3
 8017680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017684:	463a      	mov	r2, r7
 8017686:	4641      	mov	r1, r8
 8017688:	68a8      	ldr	r0, [r5, #8]
 801768a:	f009 fbe8 	bl	8020e5e <memcpy>
 801768e:	68aa      	ldr	r2, [r5, #8]
 8017690:	692b      	ldr	r3, [r5, #16]
 8017692:	443a      	add	r2, r7
 8017694:	443b      	add	r3, r7
 8017696:	60aa      	str	r2, [r5, #8]
 8017698:	612b      	str	r3, [r5, #16]
 801769a:	e7ed      	b.n	8017678 <ucdr_serialize_endian_array_uint8_t+0x40>

0801769c <ucdr_deserialize_array_uint8_t>:
 801769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176a0:	4688      	mov	r8, r1
 80176a2:	4611      	mov	r1, r2
 80176a4:	4617      	mov	r7, r2
 80176a6:	4605      	mov	r5, r0
 80176a8:	f7fb fd50 	bl	801314c <ucdr_check_buffer_available_for>
 80176ac:	b9e8      	cbnz	r0, 80176ea <ucdr_deserialize_array_uint8_t+0x4e>
 80176ae:	463e      	mov	r6, r7
 80176b0:	e00c      	b.n	80176cc <ucdr_deserialize_array_uint8_t+0x30>
 80176b2:	eb08 0003 	add.w	r0, r8, r3
 80176b6:	68a9      	ldr	r1, [r5, #8]
 80176b8:	4622      	mov	r2, r4
 80176ba:	1b36      	subs	r6, r6, r4
 80176bc:	f009 fbcf 	bl	8020e5e <memcpy>
 80176c0:	68ab      	ldr	r3, [r5, #8]
 80176c2:	6928      	ldr	r0, [r5, #16]
 80176c4:	4423      	add	r3, r4
 80176c6:	4420      	add	r0, r4
 80176c8:	60ab      	str	r3, [r5, #8]
 80176ca:	6128      	str	r0, [r5, #16]
 80176cc:	4631      	mov	r1, r6
 80176ce:	2201      	movs	r2, #1
 80176d0:	4628      	mov	r0, r5
 80176d2:	f7fb fdc5 	bl	8013260 <ucdr_check_final_buffer_behavior_array>
 80176d6:	1bbb      	subs	r3, r7, r6
 80176d8:	4604      	mov	r4, r0
 80176da:	2800      	cmp	r0, #0
 80176dc:	d1e9      	bne.n	80176b2 <ucdr_deserialize_array_uint8_t+0x16>
 80176de:	2301      	movs	r3, #1
 80176e0:	7da8      	ldrb	r0, [r5, #22]
 80176e2:	756b      	strb	r3, [r5, #21]
 80176e4:	4058      	eors	r0, r3
 80176e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176ea:	463a      	mov	r2, r7
 80176ec:	68a9      	ldr	r1, [r5, #8]
 80176ee:	4640      	mov	r0, r8
 80176f0:	f009 fbb5 	bl	8020e5e <memcpy>
 80176f4:	68aa      	ldr	r2, [r5, #8]
 80176f6:	692b      	ldr	r3, [r5, #16]
 80176f8:	443a      	add	r2, r7
 80176fa:	443b      	add	r3, r7
 80176fc:	60aa      	str	r2, [r5, #8]
 80176fe:	612b      	str	r3, [r5, #16]
 8017700:	e7ed      	b.n	80176de <ucdr_deserialize_array_uint8_t+0x42>
 8017702:	bf00      	nop

08017704 <ucdr_deserialize_endian_array_uint8_t>:
 8017704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017708:	4619      	mov	r1, r3
 801770a:	461f      	mov	r7, r3
 801770c:	4605      	mov	r5, r0
 801770e:	4690      	mov	r8, r2
 8017710:	f7fb fd1c 	bl	801314c <ucdr_check_buffer_available_for>
 8017714:	b9e8      	cbnz	r0, 8017752 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8017716:	463e      	mov	r6, r7
 8017718:	e00c      	b.n	8017734 <ucdr_deserialize_endian_array_uint8_t+0x30>
 801771a:	eb08 0003 	add.w	r0, r8, r3
 801771e:	68a9      	ldr	r1, [r5, #8]
 8017720:	4622      	mov	r2, r4
 8017722:	1b36      	subs	r6, r6, r4
 8017724:	f009 fb9b 	bl	8020e5e <memcpy>
 8017728:	68ab      	ldr	r3, [r5, #8]
 801772a:	6928      	ldr	r0, [r5, #16]
 801772c:	4423      	add	r3, r4
 801772e:	4420      	add	r0, r4
 8017730:	60ab      	str	r3, [r5, #8]
 8017732:	6128      	str	r0, [r5, #16]
 8017734:	4631      	mov	r1, r6
 8017736:	2201      	movs	r2, #1
 8017738:	4628      	mov	r0, r5
 801773a:	f7fb fd91 	bl	8013260 <ucdr_check_final_buffer_behavior_array>
 801773e:	1bbb      	subs	r3, r7, r6
 8017740:	4604      	mov	r4, r0
 8017742:	2800      	cmp	r0, #0
 8017744:	d1e9      	bne.n	801771a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017746:	2301      	movs	r3, #1
 8017748:	7da8      	ldrb	r0, [r5, #22]
 801774a:	756b      	strb	r3, [r5, #21]
 801774c:	4058      	eors	r0, r3
 801774e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017752:	463a      	mov	r2, r7
 8017754:	68a9      	ldr	r1, [r5, #8]
 8017756:	4640      	mov	r0, r8
 8017758:	f009 fb81 	bl	8020e5e <memcpy>
 801775c:	68aa      	ldr	r2, [r5, #8]
 801775e:	692b      	ldr	r3, [r5, #16]
 8017760:	443a      	add	r2, r7
 8017762:	443b      	add	r3, r7
 8017764:	60aa      	str	r2, [r5, #8]
 8017766:	612b      	str	r3, [r5, #16]
 8017768:	e7ed      	b.n	8017746 <ucdr_deserialize_endian_array_uint8_t+0x42>
 801776a:	bf00      	nop

0801776c <uxr_buffer_delete_entity>:
 801776c:	b510      	push	{r4, lr}
 801776e:	2300      	movs	r3, #0
 8017770:	b08e      	sub	sp, #56	; 0x38
 8017772:	4604      	mov	r4, r0
 8017774:	9103      	str	r1, [sp, #12]
 8017776:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801777a:	2303      	movs	r3, #3
 801777c:	2204      	movs	r2, #4
 801777e:	9300      	str	r3, [sp, #0]
 8017780:	ab06      	add	r3, sp, #24
 8017782:	f001 fb79 	bl	8018e78 <uxr_prepare_stream_to_write_submessage>
 8017786:	b918      	cbnz	r0, 8017790 <uxr_buffer_delete_entity+0x24>
 8017788:	4604      	mov	r4, r0
 801778a:	4620      	mov	r0, r4
 801778c:	b00e      	add	sp, #56	; 0x38
 801778e:	bd10      	pop	{r4, pc}
 8017790:	9902      	ldr	r1, [sp, #8]
 8017792:	aa05      	add	r2, sp, #20
 8017794:	4620      	mov	r0, r4
 8017796:	f001 fcab 	bl	80190f0 <uxr_init_base_object_request>
 801779a:	4604      	mov	r4, r0
 801779c:	a905      	add	r1, sp, #20
 801779e:	a806      	add	r0, sp, #24
 80177a0:	f003 fbb0 	bl	801af04 <uxr_serialize_DELETE_Payload>
 80177a4:	4620      	mov	r0, r4
 80177a6:	b00e      	add	sp, #56	; 0x38
 80177a8:	bd10      	pop	{r4, pc}
 80177aa:	bf00      	nop

080177ac <uxr_common_create_entity>:
 80177ac:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80177b0:	b510      	push	{r4, lr}
 80177b2:	f1bc 0f01 	cmp.w	ip, #1
 80177b6:	b08c      	sub	sp, #48	; 0x30
 80177b8:	4604      	mov	r4, r0
 80177ba:	9202      	str	r2, [sp, #8]
 80177bc:	bf0c      	ite	eq
 80177be:	f003 0201 	andeq.w	r2, r3, #1
 80177c2:	2200      	movne	r2, #0
 80177c4:	330e      	adds	r3, #14
 80177c6:	9103      	str	r1, [sp, #12]
 80177c8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80177cc:	441a      	add	r2, r3
 80177ce:	ab04      	add	r3, sp, #16
 80177d0:	9101      	str	r1, [sp, #4]
 80177d2:	2101      	movs	r1, #1
 80177d4:	b292      	uxth	r2, r2
 80177d6:	9100      	str	r1, [sp, #0]
 80177d8:	9903      	ldr	r1, [sp, #12]
 80177da:	f001 fb4d 	bl	8018e78 <uxr_prepare_stream_to_write_submessage>
 80177de:	b918      	cbnz	r0, 80177e8 <uxr_common_create_entity+0x3c>
 80177e0:	4604      	mov	r4, r0
 80177e2:	4620      	mov	r0, r4
 80177e4:	b00c      	add	sp, #48	; 0x30
 80177e6:	bd10      	pop	{r4, pc}
 80177e8:	9902      	ldr	r1, [sp, #8]
 80177ea:	4620      	mov	r0, r4
 80177ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177ee:	f001 fc7f 	bl	80190f0 <uxr_init_base_object_request>
 80177f2:	4604      	mov	r4, r0
 80177f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80177f6:	a804      	add	r0, sp, #16
 80177f8:	f003 fade 	bl	801adb8 <uxr_serialize_CREATE_Payload>
 80177fc:	4620      	mov	r0, r4
 80177fe:	b00c      	add	sp, #48	; 0x30
 8017800:	bd10      	pop	{r4, pc}
 8017802:	bf00      	nop

08017804 <uxr_buffer_create_participant_bin>:
 8017804:	b570      	push	{r4, r5, r6, lr}
 8017806:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801780a:	4605      	mov	r5, r0
 801780c:	ac11      	add	r4, sp, #68	; 0x44
 801780e:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8017812:	2303      	movs	r3, #3
 8017814:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8017818:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801781c:	7223      	strb	r3, [r4, #8]
 801781e:	2300      	movs	r3, #0
 8017820:	2201      	movs	r2, #1
 8017822:	f88d 3014 	strb.w	r3, [sp, #20]
 8017826:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8017828:	7122      	strb	r2, [r4, #4]
 801782a:	b1cb      	cbz	r3, 8017860 <uxr_buffer_create_participant_bin+0x5c>
 801782c:	f88d 201c 	strb.w	r2, [sp, #28]
 8017830:	9308      	str	r3, [sp, #32]
 8017832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017836:	a915      	add	r1, sp, #84	; 0x54
 8017838:	a809      	add	r0, sp, #36	; 0x24
 801783a:	f7fb fcdb 	bl	80131f4 <ucdr_init_buffer>
 801783e:	a905      	add	r1, sp, #20
 8017840:	a809      	add	r0, sp, #36	; 0x24
 8017842:	f002 fe6f 	bl	801a524 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8017846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017848:	9600      	str	r6, [sp, #0]
 801784a:	4628      	mov	r0, r5
 801784c:	9401      	str	r4, [sp, #4]
 801784e:	60e3      	str	r3, [r4, #12]
 8017850:	b29b      	uxth	r3, r3
 8017852:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017856:	f7ff ffa9 	bl	80177ac <uxr_common_create_entity>
 801785a:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 801785e:	bd70      	pop	{r4, r5, r6, pc}
 8017860:	f88d 301c 	strb.w	r3, [sp, #28]
 8017864:	e7e5      	b.n	8017832 <uxr_buffer_create_participant_bin+0x2e>
 8017866:	bf00      	nop

08017868 <uxr_buffer_create_topic_bin>:
 8017868:	b570      	push	{r4, r5, r6, lr}
 801786a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801786e:	4605      	mov	r5, r0
 8017870:	4618      	mov	r0, r3
 8017872:	9105      	str	r1, [sp, #20]
 8017874:	a997      	add	r1, sp, #604	; 0x25c
 8017876:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 801787a:	ac13      	add	r4, sp, #76	; 0x4c
 801787c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017880:	2302      	movs	r3, #2
 8017882:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8017886:	f000 fa8d 	bl	8017da4 <uxr_object_id_to_raw>
 801788a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 801788c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017890:	a917      	add	r1, sp, #92	; 0x5c
 8017892:	a80b      	add	r0, sp, #44	; 0x2c
 8017894:	9306      	str	r3, [sp, #24]
 8017896:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8017898:	930a      	str	r3, [sp, #40]	; 0x28
 801789a:	2303      	movs	r3, #3
 801789c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80178a0:	2301      	movs	r3, #1
 80178a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80178a6:	2300      	movs	r3, #0
 80178a8:	f88d 301c 	strb.w	r3, [sp, #28]
 80178ac:	f7fb fca2 	bl	80131f4 <ucdr_init_buffer>
 80178b0:	a906      	add	r1, sp, #24
 80178b2:	a80b      	add	r0, sp, #44	; 0x2c
 80178b4:	f002 fe58 	bl	801a568 <uxr_serialize_OBJK_Topic_Binary>
 80178b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178ba:	4628      	mov	r0, r5
 80178bc:	9600      	str	r6, [sp, #0]
 80178be:	9316      	str	r3, [sp, #88]	; 0x58
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	9401      	str	r4, [sp, #4]
 80178c4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80178c8:	f7ff ff70 	bl	80177ac <uxr_common_create_entity>
 80178cc:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80178d0:	bd70      	pop	{r4, r5, r6, pc}
 80178d2:	bf00      	nop

080178d4 <uxr_buffer_create_publisher_bin>:
 80178d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178d6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80178da:	2603      	movs	r6, #3
 80178dc:	4605      	mov	r5, r0
 80178de:	4618      	mov	r0, r3
 80178e0:	9105      	str	r1, [sp, #20]
 80178e2:	a992      	add	r1, sp, #584	; 0x248
 80178e4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80178e8:	ac0e      	add	r4, sp, #56	; 0x38
 80178ea:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80178ee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80178f2:	f000 fa57 	bl	8017da4 <uxr_object_id_to_raw>
 80178f6:	2300      	movs	r3, #0
 80178f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80178fc:	a912      	add	r1, sp, #72	; 0x48
 80178fe:	a806      	add	r0, sp, #24
 8017900:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017904:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017908:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 801790c:	f7fb fc72 	bl	80131f4 <ucdr_init_buffer>
 8017910:	a993      	add	r1, sp, #588	; 0x24c
 8017912:	a806      	add	r0, sp, #24
 8017914:	f002 fedc 	bl	801a6d0 <uxr_serialize_OBJK_Publisher_Binary>
 8017918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801791a:	4628      	mov	r0, r5
 801791c:	9700      	str	r7, [sp, #0]
 801791e:	9311      	str	r3, [sp, #68]	; 0x44
 8017920:	b29b      	uxth	r3, r3
 8017922:	9401      	str	r4, [sp, #4]
 8017924:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017928:	f7ff ff40 	bl	80177ac <uxr_common_create_entity>
 801792c:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8017930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017932:	bf00      	nop

08017934 <uxr_buffer_create_subscriber_bin>:
 8017934:	b570      	push	{r4, r5, r6, lr}
 8017936:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 801793a:	4605      	mov	r5, r0
 801793c:	4618      	mov	r0, r3
 801793e:	9105      	str	r1, [sp, #20]
 8017940:	a992      	add	r1, sp, #584	; 0x248
 8017942:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8017946:	ac0e      	add	r4, sp, #56	; 0x38
 8017948:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801794c:	2304      	movs	r3, #4
 801794e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8017952:	f000 fa27 	bl	8017da4 <uxr_object_id_to_raw>
 8017956:	2300      	movs	r3, #0
 8017958:	f44f 7200 	mov.w	r2, #512	; 0x200
 801795c:	a912      	add	r1, sp, #72	; 0x48
 801795e:	a806      	add	r0, sp, #24
 8017960:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017964:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017968:	2303      	movs	r3, #3
 801796a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801796e:	f7fb fc41 	bl	80131f4 <ucdr_init_buffer>
 8017972:	a993      	add	r1, sp, #588	; 0x24c
 8017974:	a806      	add	r0, sp, #24
 8017976:	f002 ff5b 	bl	801a830 <uxr_serialize_OBJK_Subscriber_Binary>
 801797a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801797c:	4628      	mov	r0, r5
 801797e:	9600      	str	r6, [sp, #0]
 8017980:	9311      	str	r3, [sp, #68]	; 0x44
 8017982:	b29b      	uxth	r3, r3
 8017984:	9401      	str	r4, [sp, #4]
 8017986:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801798a:	f7ff ff0f 	bl	80177ac <uxr_common_create_entity>
 801798e:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8017992:	bd70      	pop	{r4, r5, r6, pc}

08017994 <uxr_buffer_create_datawriter_bin>:
 8017994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017998:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801799c:	4606      	mov	r6, r0
 801799e:	4618      	mov	r0, r3
 80179a0:	2703      	movs	r7, #3
 80179a2:	ac1d      	add	r4, sp, #116	; 0x74
 80179a4:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 80179a8:	9105      	str	r1, [sp, #20]
 80179aa:	a9a1      	add	r1, sp, #644	; 0x284
 80179ac:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 80179b0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80179b4:	2305      	movs	r3, #5
 80179b6:	7123      	strb	r3, [r4, #4]
 80179b8:	f000 f9f4 	bl	8017da4 <uxr_object_id_to_raw>
 80179bc:	a90e      	add	r1, sp, #56	; 0x38
 80179be:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80179c0:	7227      	strb	r7, [r4, #8]
 80179c2:	f000 f9ef 	bl	8017da4 <uxr_object_id_to_raw>
 80179c6:	2300      	movs	r3, #0
 80179c8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80179cc:	3d00      	subs	r5, #0
 80179ce:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 80179d2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80179d6:	bf18      	it	ne
 80179d8:	2501      	movne	r5, #1
 80179da:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80179de:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80179e2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80179e6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80179ea:	2301      	movs	r3, #1
 80179ec:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80179f0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80179f4:	bb8a      	cbnz	r2, 8017a5a <uxr_buffer_create_datawriter_bin+0xc6>
 80179f6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80179fa:	f04f 0c13 	mov.w	ip, #19
 80179fe:	250b      	movs	r5, #11
 8017a00:	2221      	movs	r2, #33	; 0x21
 8017a02:	2111      	movs	r1, #17
 8017a04:	2009      	movs	r0, #9
 8017a06:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017a0a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8017a0e:	b923      	cbnz	r3, 8017a1a <uxr_buffer_create_datawriter_bin+0x86>
 8017a10:	4672      	mov	r2, lr
 8017a12:	4661      	mov	r1, ip
 8017a14:	4628      	mov	r0, r5
 8017a16:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017a1a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8017a1e:	2b01      	cmp	r3, #1
 8017a20:	d025      	beq.n	8017a6e <uxr_buffer_create_datawriter_bin+0xda>
 8017a22:	2b03      	cmp	r3, #3
 8017a24:	d029      	beq.n	8017a7a <uxr_buffer_create_datawriter_bin+0xe6>
 8017a26:	b32b      	cbz	r3, 8017a74 <uxr_buffer_create_datawriter_bin+0xe0>
 8017a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a2c:	a921      	add	r1, sp, #132	; 0x84
 8017a2e:	a806      	add	r0, sp, #24
 8017a30:	f7fb fbe0 	bl	80131f4 <ucdr_init_buffer>
 8017a34:	a90e      	add	r1, sp, #56	; 0x38
 8017a36:	a806      	add	r0, sp, #24
 8017a38:	f002 ffac 	bl	801a994 <uxr_serialize_OBJK_DataWriter_Binary>
 8017a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a3e:	f8cd 8000 	str.w	r8, [sp]
 8017a42:	4630      	mov	r0, r6
 8017a44:	9401      	str	r4, [sp, #4]
 8017a46:	60e3      	str	r3, [r4, #12]
 8017a48:	b29b      	uxth	r3, r3
 8017a4a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017a4e:	f7ff fead 	bl	80177ac <uxr_common_create_entity>
 8017a52:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a5a:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017a5e:	f04f 0c12 	mov.w	ip, #18
 8017a62:	250a      	movs	r5, #10
 8017a64:	2220      	movs	r2, #32
 8017a66:	2110      	movs	r1, #16
 8017a68:	2008      	movs	r0, #8
 8017a6a:	2702      	movs	r7, #2
 8017a6c:	e7cd      	b.n	8017a0a <uxr_buffer_create_datawriter_bin+0x76>
 8017a6e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017a72:	e7d9      	b.n	8017a28 <uxr_buffer_create_datawriter_bin+0x94>
 8017a74:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017a78:	e7d6      	b.n	8017a28 <uxr_buffer_create_datawriter_bin+0x94>
 8017a7a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017a7e:	e7d3      	b.n	8017a28 <uxr_buffer_create_datawriter_bin+0x94>

08017a80 <uxr_buffer_create_datareader_bin>:
 8017a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a84:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017a88:	4606      	mov	r6, r0
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	2703      	movs	r7, #3
 8017a8e:	ac1f      	add	r4, sp, #124	; 0x7c
 8017a90:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8017a94:	9105      	str	r1, [sp, #20]
 8017a96:	a9a3      	add	r1, sp, #652	; 0x28c
 8017a98:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8017a9c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017aa0:	2306      	movs	r3, #6
 8017aa2:	7123      	strb	r3, [r4, #4]
 8017aa4:	f000 f97e 	bl	8017da4 <uxr_object_id_to_raw>
 8017aa8:	a90e      	add	r1, sp, #56	; 0x38
 8017aaa:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8017aac:	7227      	strb	r7, [r4, #8]
 8017aae:	f000 f979 	bl	8017da4 <uxr_object_id_to_raw>
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017ab8:	3d00      	subs	r5, #0
 8017aba:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8017abe:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8017ac2:	bf18      	it	ne
 8017ac4:	2501      	movne	r5, #1
 8017ac6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017aca:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017ace:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017ad2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017ad6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017ada:	2301      	movs	r3, #1
 8017adc:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017ae0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017ae4:	bb8a      	cbnz	r2, 8017b4a <uxr_buffer_create_datareader_bin+0xca>
 8017ae6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017aea:	f04f 0c13 	mov.w	ip, #19
 8017aee:	250b      	movs	r5, #11
 8017af0:	2221      	movs	r2, #33	; 0x21
 8017af2:	2111      	movs	r1, #17
 8017af4:	2009      	movs	r0, #9
 8017af6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017afa:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8017afe:	b923      	cbnz	r3, 8017b0a <uxr_buffer_create_datareader_bin+0x8a>
 8017b00:	4672      	mov	r2, lr
 8017b02:	4661      	mov	r1, ip
 8017b04:	4628      	mov	r0, r5
 8017b06:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017b0a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8017b0e:	2b01      	cmp	r3, #1
 8017b10:	d025      	beq.n	8017b5e <uxr_buffer_create_datareader_bin+0xde>
 8017b12:	2b03      	cmp	r3, #3
 8017b14:	d029      	beq.n	8017b6a <uxr_buffer_create_datareader_bin+0xea>
 8017b16:	b32b      	cbz	r3, 8017b64 <uxr_buffer_create_datareader_bin+0xe4>
 8017b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b1c:	a923      	add	r1, sp, #140	; 0x8c
 8017b1e:	a806      	add	r0, sp, #24
 8017b20:	f7fb fb68 	bl	80131f4 <ucdr_init_buffer>
 8017b24:	a90e      	add	r1, sp, #56	; 0x38
 8017b26:	a806      	add	r0, sp, #24
 8017b28:	f002 fef8 	bl	801a91c <uxr_serialize_OBJK_DataReader_Binary>
 8017b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b2e:	f8cd 8000 	str.w	r8, [sp]
 8017b32:	4630      	mov	r0, r6
 8017b34:	9401      	str	r4, [sp, #4]
 8017b36:	60e3      	str	r3, [r4, #12]
 8017b38:	b29b      	uxth	r3, r3
 8017b3a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017b3e:	f7ff fe35 	bl	80177ac <uxr_common_create_entity>
 8017b42:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8017b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b4a:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017b4e:	f04f 0c12 	mov.w	ip, #18
 8017b52:	250a      	movs	r5, #10
 8017b54:	2220      	movs	r2, #32
 8017b56:	2110      	movs	r1, #16
 8017b58:	2008      	movs	r0, #8
 8017b5a:	2702      	movs	r7, #2
 8017b5c:	e7cd      	b.n	8017afa <uxr_buffer_create_datareader_bin+0x7a>
 8017b5e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017b62:	e7d9      	b.n	8017b18 <uxr_buffer_create_datareader_bin+0x98>
 8017b64:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017b68:	e7d6      	b.n	8017b18 <uxr_buffer_create_datareader_bin+0x98>
 8017b6a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017b6e:	e7d3      	b.n	8017b18 <uxr_buffer_create_datareader_bin+0x98>

08017b70 <uxr_buffer_create_replier_bin>:
 8017b70:	b570      	push	{r4, r5, r6, lr}
 8017b72:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8017b76:	4605      	mov	r5, r0
 8017b78:	4618      	mov	r0, r3
 8017b7a:	9105      	str	r1, [sp, #20]
 8017b7c:	a999      	add	r1, sp, #612	; 0x264
 8017b7e:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8017b82:	ac15      	add	r4, sp, #84	; 0x54
 8017b84:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017b88:	2308      	movs	r3, #8
 8017b8a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8017b8e:	f000 f909 	bl	8017da4 <uxr_object_id_to_raw>
 8017b92:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8017b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b98:	a919      	add	r1, sp, #100	; 0x64
 8017b9a:	a80d      	add	r0, sp, #52	; 0x34
 8017b9c:	9306      	str	r3, [sp, #24]
 8017b9e:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8017ba0:	9307      	str	r3, [sp, #28]
 8017ba2:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8017ba4:	9308      	str	r3, [sp, #32]
 8017ba6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8017ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8017baa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017bac:	930a      	str	r3, [sp, #40]	; 0x28
 8017bae:	2301      	movs	r3, #1
 8017bb0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017bb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017bb8:	2303      	movs	r3, #3
 8017bba:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8017bbe:	f7fb fb19 	bl	80131f4 <ucdr_init_buffer>
 8017bc2:	a906      	add	r1, sp, #24
 8017bc4:	a80d      	add	r0, sp, #52	; 0x34
 8017bc6:	f002 ff11 	bl	801a9ec <uxr_serialize_OBJK_Replier_Binary>
 8017bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017bcc:	4628      	mov	r0, r5
 8017bce:	9600      	str	r6, [sp, #0]
 8017bd0:	9318      	str	r3, [sp, #96]	; 0x60
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	9401      	str	r4, [sp, #4]
 8017bd6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017bda:	f7ff fde7 	bl	80177ac <uxr_common_create_entity>
 8017bde:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8017be2:	bd70      	pop	{r4, r5, r6, pc}

08017be4 <get_custom_error>:
 8017be4:	4b01      	ldr	r3, [pc, #4]	; (8017bec <get_custom_error+0x8>)
 8017be6:	7818      	ldrb	r0, [r3, #0]
 8017be8:	4770      	bx	lr
 8017bea:	bf00      	nop
 8017bec:	20016c54 	.word	0x20016c54

08017bf0 <recv_custom_msg>:
 8017bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bf4:	4693      	mov	fp, r2
 8017bf6:	b089      	sub	sp, #36	; 0x24
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	468a      	mov	sl, r1
 8017bfe:	9305      	str	r3, [sp, #20]
 8017c00:	f88d 201e 	strb.w	r2, [sp, #30]
 8017c04:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8017c08:	b322      	cbz	r2, 8017c54 <recv_custom_msg+0x64>
 8017c0a:	f200 2902 	addw	r9, r0, #514	; 0x202
 8017c0e:	f10d 081f 	add.w	r8, sp, #31
 8017c12:	af05      	add	r7, sp, #20
 8017c14:	f10d 061e 	add.w	r6, sp, #30
 8017c18:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017c1c:	e002      	b.n	8017c24 <recv_custom_msg+0x34>
 8017c1e:	9b05      	ldr	r3, [sp, #20]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	dd0f      	ble.n	8017c44 <recv_custom_msg+0x54>
 8017c24:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8017c28:	4623      	mov	r3, r4
 8017c2a:	4622      	mov	r2, r4
 8017c2c:	4648      	mov	r0, r9
 8017c2e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017c32:	e9cd 5600 	strd	r5, r6, [sp]
 8017c36:	f001 fc71 	bl	801951c <uxr_read_framed_msg>
 8017c3a:	2800      	cmp	r0, #0
 8017c3c:	d0ef      	beq.n	8017c1e <recv_custom_msg+0x2e>
 8017c3e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017c42:	b1b3      	cbz	r3, 8017c72 <recv_custom_msg+0x82>
 8017c44:	4b0f      	ldr	r3, [pc, #60]	; (8017c84 <recv_custom_msg+0x94>)
 8017c46:	2000      	movs	r0, #0
 8017c48:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017c4c:	701a      	strb	r2, [r3, #0]
 8017c4e:	b009      	add	sp, #36	; 0x24
 8017c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c54:	f10d 021f 	add.w	r2, sp, #31
 8017c58:	4601      	mov	r1, r0
 8017c5a:	9200      	str	r2, [sp, #0]
 8017c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c60:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8017c64:	47a8      	blx	r5
 8017c66:	2800      	cmp	r0, #0
 8017c68:	d0ec      	beq.n	8017c44 <recv_custom_msg+0x54>
 8017c6a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d1e8      	bne.n	8017c44 <recv_custom_msg+0x54>
 8017c72:	f8cb 0000 	str.w	r0, [fp]
 8017c76:	2001      	movs	r0, #1
 8017c78:	f8ca 4000 	str.w	r4, [sl]
 8017c7c:	b009      	add	sp, #36	; 0x24
 8017c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c82:	bf00      	nop
 8017c84:	20016c54 	.word	0x20016c54

08017c88 <send_custom_msg>:
 8017c88:	b530      	push	{r4, r5, lr}
 8017c8a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8017c8e:	b087      	sub	sp, #28
 8017c90:	4614      	mov	r4, r2
 8017c92:	b995      	cbnz	r5, 8017cba <send_custom_msg+0x32>
 8017c94:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8017c98:	f10d 0317 	add.w	r3, sp, #23
 8017c9c:	47a8      	blx	r5
 8017c9e:	1e03      	subs	r3, r0, #0
 8017ca0:	bf18      	it	ne
 8017ca2:	2301      	movne	r3, #1
 8017ca4:	42a0      	cmp	r0, r4
 8017ca6:	bf18      	it	ne
 8017ca8:	2300      	movne	r3, #0
 8017caa:	b91b      	cbnz	r3, 8017cb4 <send_custom_msg+0x2c>
 8017cac:	4a0a      	ldr	r2, [pc, #40]	; (8017cd8 <send_custom_msg+0x50>)
 8017cae:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017cb2:	7011      	strb	r1, [r2, #0]
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	b007      	add	sp, #28
 8017cb8:	bd30      	pop	{r4, r5, pc}
 8017cba:	460b      	mov	r3, r1
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	f10d 0117 	add.w	r1, sp, #23
 8017cc2:	9400      	str	r4, [sp, #0]
 8017cc4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017cc8:	4602      	mov	r2, r0
 8017cca:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8017cce:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017cd2:	f001 fa45 	bl	8019160 <uxr_write_framed_msg>
 8017cd6:	e7e2      	b.n	8017c9e <send_custom_msg+0x16>
 8017cd8:	20016c54 	.word	0x20016c54

08017cdc <uxr_set_custom_transport_callbacks>:
 8017cdc:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8017ce0:	9901      	ldr	r1, [sp, #4]
 8017ce2:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017ce6:	9b00      	ldr	r3, [sp, #0]
 8017ce8:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8017cec:	4770      	bx	lr
 8017cee:	bf00      	nop

08017cf0 <uxr_init_custom_transport>:
 8017cf0:	b538      	push	{r3, r4, r5, lr}
 8017cf2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8017cf6:	b303      	cbz	r3, 8017d3a <uxr_init_custom_transport+0x4a>
 8017cf8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8017cfc:	4604      	mov	r4, r0
 8017cfe:	b1e2      	cbz	r2, 8017d3a <uxr_init_custom_transport+0x4a>
 8017d00:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8017d04:	b1ca      	cbz	r2, 8017d3a <uxr_init_custom_transport+0x4a>
 8017d06:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8017d0a:	b1b2      	cbz	r2, 8017d3a <uxr_init_custom_transport+0x4a>
 8017d0c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8017d10:	4798      	blx	r3
 8017d12:	4605      	mov	r5, r0
 8017d14:	b188      	cbz	r0, 8017d3a <uxr_init_custom_transport+0x4a>
 8017d16:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8017d1a:	b98b      	cbnz	r3, 8017d40 <uxr_init_custom_transport+0x50>
 8017d1c:	4b0b      	ldr	r3, [pc, #44]	; (8017d4c <uxr_init_custom_transport+0x5c>)
 8017d1e:	4628      	mov	r0, r5
 8017d20:	490b      	ldr	r1, [pc, #44]	; (8017d50 <uxr_init_custom_transport+0x60>)
 8017d22:	4a0c      	ldr	r2, [pc, #48]	; (8017d54 <uxr_init_custom_transport+0x64>)
 8017d24:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8017d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017d2c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8017d30:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8017d34:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8017d38:	bd38      	pop	{r3, r4, r5, pc}
 8017d3a:	2500      	movs	r5, #0
 8017d3c:	4628      	mov	r0, r5
 8017d3e:	bd38      	pop	{r3, r4, r5, pc}
 8017d40:	2100      	movs	r1, #0
 8017d42:	f204 2002 	addw	r0, r4, #514	; 0x202
 8017d46:	f001 fa05 	bl	8019154 <uxr_init_framing_io>
 8017d4a:	e7e7      	b.n	8017d1c <uxr_init_custom_transport+0x2c>
 8017d4c:	08017bf1 	.word	0x08017bf1
 8017d50:	08017c89 	.word	0x08017c89
 8017d54:	08017be5 	.word	0x08017be5

08017d58 <uxr_close_custom_transport>:
 8017d58:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8017d5c:	4718      	bx	r3
 8017d5e:	bf00      	nop

08017d60 <uxr_object_id>:
 8017d60:	b082      	sub	sp, #8
 8017d62:	2300      	movs	r3, #0
 8017d64:	f88d 1006 	strb.w	r1, [sp, #6]
 8017d68:	f360 030f 	bfi	r3, r0, #0, #16
 8017d6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017d70:	f362 431f 	bfi	r3, r2, #16, #16
 8017d74:	4618      	mov	r0, r3
 8017d76:	b002      	add	sp, #8
 8017d78:	4770      	bx	lr
 8017d7a:	bf00      	nop

08017d7c <uxr_object_id_from_raw>:
 8017d7c:	7843      	ldrb	r3, [r0, #1]
 8017d7e:	b082      	sub	sp, #8
 8017d80:	7801      	ldrb	r1, [r0, #0]
 8017d82:	2000      	movs	r0, #0
 8017d84:	091a      	lsrs	r2, r3, #4
 8017d86:	f003 030f 	and.w	r3, r3, #15
 8017d8a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017d8e:	f88d 3006 	strb.w	r3, [sp, #6]
 8017d92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017d96:	f362 000f 	bfi	r0, r2, #0, #16
 8017d9a:	f363 401f 	bfi	r0, r3, #16, #16
 8017d9e:	b002      	add	sp, #8
 8017da0:	4770      	bx	lr
 8017da2:	bf00      	nop

08017da4 <uxr_object_id_to_raw>:
 8017da4:	4602      	mov	r2, r0
 8017da6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8017daa:	b082      	sub	sp, #8
 8017dac:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017db0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017db4:	f881 c000 	strb.w	ip, [r1]
 8017db8:	7048      	strb	r0, [r1, #1]
 8017dba:	b002      	add	sp, #8
 8017dbc:	4770      	bx	lr
 8017dbe:	bf00      	nop

08017dc0 <uxr_buffer_request_data>:
 8017dc0:	b530      	push	{r4, r5, lr}
 8017dc2:	b095      	sub	sp, #84	; 0x54
 8017dc4:	4604      	mov	r4, r0
 8017dc6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017dc8:	9303      	str	r3, [sp, #12]
 8017dca:	2d00      	cmp	r5, #0
 8017dcc:	f88d 301c 	strb.w	r3, [sp, #28]
 8017dd0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017dd4:	f04f 0200 	mov.w	r2, #0
 8017dd8:	bf14      	ite	ne
 8017dda:	2101      	movne	r1, #1
 8017ddc:	4611      	moveq	r1, r2
 8017dde:	f88d 201d 	strb.w	r2, [sp, #29]
 8017de2:	f88d 201e 	strb.w	r2, [sp, #30]
 8017de6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017dea:	d021      	beq.n	8017e30 <uxr_buffer_request_data+0x70>
 8017dec:	686b      	ldr	r3, [r5, #4]
 8017dee:	2210      	movs	r2, #16
 8017df0:	6829      	ldr	r1, [r5, #0]
 8017df2:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017df6:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8017dfa:	2308      	movs	r3, #8
 8017dfc:	2100      	movs	r1, #0
 8017dfe:	4620      	mov	r0, r4
 8017e00:	e9cd 3100 	strd	r3, r1, [sp]
 8017e04:	ab0c      	add	r3, sp, #48	; 0x30
 8017e06:	9905      	ldr	r1, [sp, #20]
 8017e08:	f001 f836 	bl	8018e78 <uxr_prepare_stream_to_write_submessage>
 8017e0c:	b918      	cbnz	r0, 8017e16 <uxr_buffer_request_data+0x56>
 8017e0e:	4604      	mov	r4, r0
 8017e10:	4620      	mov	r0, r4
 8017e12:	b015      	add	sp, #84	; 0x54
 8017e14:	bd30      	pop	{r4, r5, pc}
 8017e16:	9904      	ldr	r1, [sp, #16]
 8017e18:	aa06      	add	r2, sp, #24
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f001 f968 	bl	80190f0 <uxr_init_base_object_request>
 8017e20:	4604      	mov	r4, r0
 8017e22:	a906      	add	r1, sp, #24
 8017e24:	a80c      	add	r0, sp, #48	; 0x30
 8017e26:	f003 f917 	bl	801b058 <uxr_serialize_READ_DATA_Payload>
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	b015      	add	sp, #84	; 0x54
 8017e2e:	bd30      	pop	{r4, r5, pc}
 8017e30:	2208      	movs	r2, #8
 8017e32:	e7e2      	b.n	8017dfa <uxr_buffer_request_data+0x3a>

08017e34 <uxr_buffer_cancel_data>:
 8017e34:	b510      	push	{r4, lr}
 8017e36:	2300      	movs	r3, #0
 8017e38:	b094      	sub	sp, #80	; 0x50
 8017e3a:	4604      	mov	r4, r0
 8017e3c:	9205      	str	r2, [sp, #20]
 8017e3e:	9301      	str	r3, [sp, #4]
 8017e40:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017e44:	f88d 301e 	strb.w	r3, [sp, #30]
 8017e48:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8017e4c:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017e50:	2308      	movs	r3, #8
 8017e52:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017e56:	2201      	movs	r2, #1
 8017e58:	9300      	str	r3, [sp, #0]
 8017e5a:	ab0c      	add	r3, sp, #48	; 0x30
 8017e5c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8017e60:	2210      	movs	r2, #16
 8017e62:	f001 f809 	bl	8018e78 <uxr_prepare_stream_to_write_submessage>
 8017e66:	b918      	cbnz	r0, 8017e70 <uxr_buffer_cancel_data+0x3c>
 8017e68:	4604      	mov	r4, r0
 8017e6a:	4620      	mov	r0, r4
 8017e6c:	b014      	add	sp, #80	; 0x50
 8017e6e:	bd10      	pop	{r4, pc}
 8017e70:	9905      	ldr	r1, [sp, #20]
 8017e72:	aa06      	add	r2, sp, #24
 8017e74:	4620      	mov	r0, r4
 8017e76:	f001 f93b 	bl	80190f0 <uxr_init_base_object_request>
 8017e7a:	4604      	mov	r4, r0
 8017e7c:	a906      	add	r1, sp, #24
 8017e7e:	a80c      	add	r0, sp, #48	; 0x30
 8017e80:	f003 f8ea 	bl	801b058 <uxr_serialize_READ_DATA_Payload>
 8017e84:	4620      	mov	r0, r4
 8017e86:	b014      	add	sp, #80	; 0x50
 8017e88:	bd10      	pop	{r4, pc}
 8017e8a:	bf00      	nop

08017e8c <read_submessage_format>:
 8017e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e90:	b095      	sub	sp, #84	; 0x54
 8017e92:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8017e96:	b113      	cbz	r3, 8017e9e <read_submessage_format+0x12>
 8017e98:	b015      	add	sp, #84	; 0x54
 8017e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017ea2:	460c      	mov	r4, r1
 8017ea4:	4615      	mov	r5, r2
 8017ea6:	9004      	str	r0, [sp, #16]
 8017ea8:	4699      	mov	r9, r3
 8017eaa:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017eac:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8017eb0:	9005      	str	r0, [sp, #20]
 8017eb2:	a80c      	add	r0, sp, #48	; 0x30
 8017eb4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017eb8:	1a52      	subs	r2, r2, r1
 8017eba:	f7fb f99b 	bl	80131f4 <ucdr_init_buffer>
 8017ebe:	a80c      	add	r0, sp, #48	; 0x30
 8017ec0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017ec4:	f7fb f96a 	bl	801319c <ucdr_set_on_full_buffer_callback>
 8017ec8:	69e2      	ldr	r2, [r4, #28]
 8017eca:	b19a      	cbz	r2, 8017ef4 <read_submessage_format+0x68>
 8017ecc:	f1b8 0f07 	cmp.w	r8, #7
 8017ed0:	f882 9014 	strb.w	r9, [r2, #20]
 8017ed4:	d040      	beq.n	8017f58 <read_submessage_format+0xcc>
 8017ed6:	f1b8 0f08 	cmp.w	r8, #8
 8017eda:	d02e      	beq.n	8017f3a <read_submessage_format+0xae>
 8017edc:	f1b8 0f06 	cmp.w	r8, #6
 8017ee0:	d011      	beq.n	8017f06 <read_submessage_format+0x7a>
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	7513      	strb	r3, [r2, #20]
 8017ee6:	4629      	mov	r1, r5
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f7fb f9d7 	bl	801329c <ucdr_advance_buffer>
 8017eee:	b015      	add	sp, #84	; 0x54
 8017ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ef4:	f1b8 0f07 	cmp.w	r8, #7
 8017ef8:	d02e      	beq.n	8017f58 <read_submessage_format+0xcc>
 8017efa:	f1b8 0f08 	cmp.w	r8, #8
 8017efe:	d01c      	beq.n	8017f3a <read_submessage_format+0xae>
 8017f00:	f1b8 0f06 	cmp.w	r8, #6
 8017f04:	d1ef      	bne.n	8017ee6 <read_submessage_format+0x5a>
 8017f06:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8017f0a:	f1b8 0f00 	cmp.w	r8, #0
 8017f0e:	d011      	beq.n	8017f34 <read_submessage_format+0xa8>
 8017f10:	ab0c      	add	r3, sp, #48	; 0x30
 8017f12:	9501      	str	r5, [sp, #4]
 8017f14:	463a      	mov	r2, r7
 8017f16:	4630      	mov	r0, r6
 8017f18:	9300      	str	r3, [sp, #0]
 8017f1a:	2306      	movs	r3, #6
 8017f1c:	f88d 3016 	strb.w	r3, [sp, #22]
 8017f20:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8017f24:	9302      	str	r3, [sp, #8]
 8017f26:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017f2a:	47c0      	blx	r8
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	69e2      	ldr	r2, [r4, #28]
 8017f30:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8017f34:	2a00      	cmp	r2, #0
 8017f36:	d1d4      	bne.n	8017ee2 <read_submessage_format+0x56>
 8017f38:	e7d5      	b.n	8017ee6 <read_submessage_format+0x5a>
 8017f3a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d0f8      	beq.n	8017f34 <read_submessage_format+0xa8>
 8017f42:	a80c      	add	r0, sp, #48	; 0x30
 8017f44:	a906      	add	r1, sp, #24
 8017f46:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017f4a:	f003 f951 	bl	801b1f0 <uxr_deserialize_SampleIdentity>
 8017f4e:	b9a0      	cbnz	r0, 8017f7a <read_submessage_format+0xee>
 8017f50:	69e2      	ldr	r2, [r4, #28]
 8017f52:	2a00      	cmp	r2, #0
 8017f54:	d1c5      	bne.n	8017ee2 <read_submessage_format+0x56>
 8017f56:	e7c6      	b.n	8017ee6 <read_submessage_format+0x5a>
 8017f58:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8017f5c:	b13b      	cbz	r3, 8017f6e <read_submessage_format+0xe2>
 8017f5e:	a906      	add	r1, sp, #24
 8017f60:	a80c      	add	r0, sp, #48	; 0x30
 8017f62:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017f66:	f002 fe17 	bl	801ab98 <uxr_deserialize_BaseObjectRequest>
 8017f6a:	bb60      	cbnz	r0, 8017fc6 <read_submessage_format+0x13a>
 8017f6c:	69e2      	ldr	r2, [r4, #28]
 8017f6e:	68a3      	ldr	r3, [r4, #8]
 8017f70:	442b      	add	r3, r5
 8017f72:	60a3      	str	r3, [r4, #8]
 8017f74:	2a00      	cmp	r2, #0
 8017f76:	d1b4      	bne.n	8017ee2 <read_submessage_format+0x56>
 8017f78:	e7b5      	b.n	8017ee6 <read_submessage_format+0x5a>
 8017f7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f7c:	a80c      	add	r0, sp, #48	; 0x30
 8017f7e:	eba8 0803 	sub.w	r8, r8, r3
 8017f82:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017f86:	44a8      	add	r8, r5
 8017f88:	1a52      	subs	r2, r2, r1
 8017f8a:	f7fb f933 	bl	80131f4 <ucdr_init_buffer>
 8017f8e:	a80c      	add	r0, sp, #48	; 0x30
 8017f90:	fa1f f888 	uxth.w	r8, r8
 8017f94:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017f98:	f7fb f900 	bl	801319c <ucdr_set_on_full_buffer_callback>
 8017f9c:	ab0c      	add	r3, sp, #48	; 0x30
 8017f9e:	2108      	movs	r1, #8
 8017fa0:	f8cd 8004 	str.w	r8, [sp, #4]
 8017fa4:	9300      	str	r3, [sp, #0]
 8017fa6:	463a      	mov	r2, r7
 8017fa8:	f88d 1016 	strb.w	r1, [sp, #22]
 8017fac:	ab06      	add	r3, sp, #24
 8017fae:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8017fb2:	4630      	mov	r0, r6
 8017fb4:	9102      	str	r1, [sp, #8]
 8017fb6:	9905      	ldr	r1, [sp, #20]
 8017fb8:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8017fbc:	47b8      	blx	r7
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8017fc4:	e7c4      	b.n	8017f50 <read_submessage_format+0xc4>
 8017fc6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017fca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017fcc:	a80c      	add	r0, sp, #48	; 0x30
 8017fce:	1a52      	subs	r2, r2, r1
 8017fd0:	eba8 0803 	sub.w	r8, r8, r3
 8017fd4:	f7fb f90e 	bl	80131f4 <ucdr_init_buffer>
 8017fd8:	a80c      	add	r0, sp, #48	; 0x30
 8017fda:	44a8      	add	r8, r5
 8017fdc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017fe0:	f7fb f8dc 	bl	801319c <ucdr_set_on_full_buffer_callback>
 8017fe4:	ab0c      	add	r3, sp, #48	; 0x30
 8017fe6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8017fea:	fa1f f888 	uxth.w	r8, r8
 8017fee:	9300      	str	r3, [sp, #0]
 8017ff0:	463a      	mov	r2, r7
 8017ff2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017ff6:	4630      	mov	r0, r6
 8017ff8:	f8cd 8004 	str.w	r8, [sp, #4]
 8017ffc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018000:	2107      	movs	r1, #7
 8018002:	f88d 1016 	strb.w	r1, [sp, #22]
 8018006:	b29b      	uxth	r3, r3
 8018008:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801800c:	9102      	str	r1, [sp, #8]
 801800e:	9905      	ldr	r1, [sp, #20]
 8018010:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8018014:	47b8      	blx	r7
 8018016:	2301      	movs	r3, #1
 8018018:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801801c:	e7a6      	b.n	8017f6c <read_submessage_format+0xe0>
 801801e:	bf00      	nop

08018020 <on_get_fragmentation_info>:
 8018020:	b500      	push	{lr}
 8018022:	b08b      	sub	sp, #44	; 0x2c
 8018024:	4601      	mov	r1, r0
 8018026:	2204      	movs	r2, #4
 8018028:	a802      	add	r0, sp, #8
 801802a:	f7fb f8e3 	bl	80131f4 <ucdr_init_buffer>
 801802e:	f10d 0305 	add.w	r3, sp, #5
 8018032:	f10d 0206 	add.w	r2, sp, #6
 8018036:	a901      	add	r1, sp, #4
 8018038:	a802      	add	r0, sp, #8
 801803a:	f001 fe5f 	bl	8019cfc <uxr_read_submessage_header>
 801803e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018042:	2b0d      	cmp	r3, #13
 8018044:	d003      	beq.n	801804e <on_get_fragmentation_info+0x2e>
 8018046:	2000      	movs	r0, #0
 8018048:	b00b      	add	sp, #44	; 0x2c
 801804a:	f85d fb04 	ldr.w	pc, [sp], #4
 801804e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018052:	f013 0f02 	tst.w	r3, #2
 8018056:	bf14      	ite	ne
 8018058:	2002      	movne	r0, #2
 801805a:	2001      	moveq	r0, #1
 801805c:	b00b      	add	sp, #44	; 0x2c
 801805e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018062:	bf00      	nop

08018064 <read_submessage_get_info>:
 8018064:	b570      	push	{r4, r5, r6, lr}
 8018066:	2500      	movs	r5, #0
 8018068:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 801806c:	460e      	mov	r6, r1
 801806e:	4604      	mov	r4, r0
 8018070:	f44f 7224 	mov.w	r2, #656	; 0x290
 8018074:	4629      	mov	r1, r5
 8018076:	a810      	add	r0, sp, #64	; 0x40
 8018078:	9503      	str	r5, [sp, #12]
 801807a:	9504      	str	r5, [sp, #16]
 801807c:	f008 fe22 	bl	8020cc4 <memset>
 8018080:	a903      	add	r1, sp, #12
 8018082:	4630      	mov	r0, r6
 8018084:	f002 ff28 	bl	801aed8 <uxr_deserialize_GET_INFO_Payload>
 8018088:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801808c:	4620      	mov	r0, r4
 801808e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8018092:	f001 f825 	bl	80190e0 <uxr_session_header_offset>
 8018096:	462b      	mov	r3, r5
 8018098:	220c      	movs	r2, #12
 801809a:	a905      	add	r1, sp, #20
 801809c:	9000      	str	r0, [sp, #0]
 801809e:	a808      	add	r0, sp, #32
 80180a0:	f7fb f896 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 80180a4:	a910      	add	r1, sp, #64	; 0x40
 80180a6:	a808      	add	r0, sp, #32
 80180a8:	f002 ff8a 	bl	801afc0 <uxr_serialize_INFO_Payload>
 80180ac:	9b08      	ldr	r3, [sp, #32]
 80180ae:	462a      	mov	r2, r5
 80180b0:	4629      	mov	r1, r5
 80180b2:	4620      	mov	r0, r4
 80180b4:	f000 ffc0 	bl	8019038 <uxr_stamp_session_header>
 80180b8:	a808      	add	r0, sp, #32
 80180ba:	f7fb f8c9 	bl	8013250 <ucdr_buffer_length>
 80180be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80180c0:	4602      	mov	r2, r0
 80180c2:	a905      	add	r1, sp, #20
 80180c4:	e9d3 0400 	ldrd	r0, r4, [r3]
 80180c8:	47a0      	blx	r4
 80180ca:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80180ce:	bd70      	pop	{r4, r5, r6, pc}

080180d0 <write_submessage_acknack.isra.0>:
 80180d0:	b570      	push	{r4, r5, r6, lr}
 80180d2:	b092      	sub	sp, #72	; 0x48
 80180d4:	4605      	mov	r5, r0
 80180d6:	460e      	mov	r6, r1
 80180d8:	4614      	mov	r4, r2
 80180da:	f001 f801 	bl	80190e0 <uxr_session_header_offset>
 80180de:	a905      	add	r1, sp, #20
 80180e0:	9000      	str	r0, [sp, #0]
 80180e2:	2300      	movs	r3, #0
 80180e4:	a80a      	add	r0, sp, #40	; 0x28
 80180e6:	2211      	movs	r2, #17
 80180e8:	f7fb f872 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 80180ec:	2218      	movs	r2, #24
 80180ee:	2300      	movs	r3, #0
 80180f0:	210a      	movs	r1, #10
 80180f2:	fb02 5404 	mla	r4, r2, r4, r5
 80180f6:	a80a      	add	r0, sp, #40	; 0x28
 80180f8:	2205      	movs	r2, #5
 80180fa:	3450      	adds	r4, #80	; 0x50
 80180fc:	f001 fde4 	bl	8019cc8 <uxr_buffer_submessage_header>
 8018100:	a903      	add	r1, sp, #12
 8018102:	4620      	mov	r0, r4
 8018104:	f006 fb52 	bl	801e7ac <uxr_compute_acknack>
 8018108:	ba40      	rev16	r0, r0
 801810a:	a903      	add	r1, sp, #12
 801810c:	f88d 6010 	strb.w	r6, [sp, #16]
 8018110:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018114:	a80a      	add	r0, sp, #40	; 0x28
 8018116:	f002 ffc5 	bl	801b0a4 <uxr_serialize_ACKNACK_Payload>
 801811a:	2200      	movs	r2, #0
 801811c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801811e:	4628      	mov	r0, r5
 8018120:	4611      	mov	r1, r2
 8018122:	f000 ff89 	bl	8019038 <uxr_stamp_session_header>
 8018126:	a80a      	add	r0, sp, #40	; 0x28
 8018128:	f7fb f892 	bl	8013250 <ucdr_buffer_length>
 801812c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801812e:	4602      	mov	r2, r0
 8018130:	a905      	add	r1, sp, #20
 8018132:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018136:	47a0      	blx	r4
 8018138:	b012      	add	sp, #72	; 0x48
 801813a:	bd70      	pop	{r4, r5, r6, pc}
 801813c:	0000      	movs	r0, r0
	...

08018140 <uxr_init_session>:
 8018140:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8018178 <uxr_init_session+0x38>
 8018144:	2300      	movs	r3, #0
 8018146:	b510      	push	{r4, lr}
 8018148:	4604      	mov	r4, r0
 801814a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801814e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8018152:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8018156:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801815a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801815e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8018162:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8018166:	2181      	movs	r1, #129	; 0x81
 8018168:	f000 feca 	bl	8018f00 <uxr_init_session_info>
 801816c:	f104 0008 	add.w	r0, r4, #8
 8018170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018174:	f001 bcc4 	b.w	8019b00 <uxr_init_stream_storage>
	...

08018180 <uxr_set_status_callback>:
 8018180:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8018184:	4770      	bx	lr
 8018186:	bf00      	nop

08018188 <uxr_set_topic_callback>:
 8018188:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801818c:	4770      	bx	lr
 801818e:	bf00      	nop

08018190 <uxr_set_request_callback>:
 8018190:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8018194:	4770      	bx	lr
 8018196:	bf00      	nop

08018198 <uxr_set_reply_callback>:
 8018198:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801819c:	4770      	bx	lr
 801819e:	bf00      	nop

080181a0 <uxr_create_output_best_effort_stream>:
 80181a0:	b510      	push	{r4, lr}
 80181a2:	4604      	mov	r4, r0
 80181a4:	b084      	sub	sp, #16
 80181a6:	e9cd 2100 	strd	r2, r1, [sp]
 80181aa:	f000 ff99 	bl	80190e0 <uxr_session_header_offset>
 80181ae:	4603      	mov	r3, r0
 80181b0:	f104 0008 	add.w	r0, r4, #8
 80181b4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80181b8:	b004      	add	sp, #16
 80181ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181be:	f001 bce5 	b.w	8019b8c <uxr_add_output_best_effort_buffer>
 80181c2:	bf00      	nop

080181c4 <uxr_create_output_reliable_stream>:
 80181c4:	b530      	push	{r4, r5, lr}
 80181c6:	b089      	sub	sp, #36	; 0x24
 80181c8:	4604      	mov	r4, r0
 80181ca:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80181ce:	9303      	str	r3, [sp, #12]
 80181d0:	f000 ff86 	bl	80190e0 <uxr_session_header_offset>
 80181d4:	4605      	mov	r5, r0
 80181d6:	9905      	ldr	r1, [sp, #20]
 80181d8:	f104 0008 	add.w	r0, r4, #8
 80181dc:	9500      	str	r5, [sp, #0]
 80181de:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80181e2:	f001 fce7 	bl	8019bb4 <uxr_add_output_reliable_buffer>
 80181e6:	2200      	movs	r2, #0
 80181e8:	fa5f fc80 	uxtb.w	ip, r0
 80181ec:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80181f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80181f4:	0e03      	lsrs	r3, r0, #24
 80181f6:	f36c 0207 	bfi	r2, ip, #0, #8
 80181fa:	f364 220f 	bfi	r2, r4, #8, #8
 80181fe:	f361 4217 	bfi	r2, r1, #16, #8
 8018202:	f363 621f 	bfi	r2, r3, #24, #8
 8018206:	4610      	mov	r0, r2
 8018208:	b009      	add	sp, #36	; 0x24
 801820a:	bd30      	pop	{r4, r5, pc}

0801820c <uxr_create_input_best_effort_stream>:
 801820c:	b082      	sub	sp, #8
 801820e:	3008      	adds	r0, #8
 8018210:	b002      	add	sp, #8
 8018212:	f001 bce9 	b.w	8019be8 <uxr_add_input_best_effort_buffer>
 8018216:	bf00      	nop

08018218 <uxr_create_input_reliable_stream>:
 8018218:	b510      	push	{r4, lr}
 801821a:	4c0c      	ldr	r4, [pc, #48]	; (801824c <uxr_create_input_reliable_stream+0x34>)
 801821c:	b084      	sub	sp, #16
 801821e:	3008      	adds	r0, #8
 8018220:	9400      	str	r4, [sp, #0]
 8018222:	f001 fcf7 	bl	8019c14 <uxr_add_input_reliable_buffer>
 8018226:	2200      	movs	r2, #0
 8018228:	fa5f fe80 	uxtb.w	lr, r0
 801822c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018230:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018234:	0e03      	lsrs	r3, r0, #24
 8018236:	f36e 0207 	bfi	r2, lr, #0, #8
 801823a:	f36c 220f 	bfi	r2, ip, #8, #8
 801823e:	f361 4217 	bfi	r2, r1, #16, #8
 8018242:	f363 621f 	bfi	r2, r3, #24, #8
 8018246:	4610      	mov	r0, r2
 8018248:	b004      	add	sp, #16
 801824a:	bd10      	pop	{r4, pc}
 801824c:	08018021 	.word	0x08018021

08018250 <uxr_epoch_nanos>:
 8018250:	b510      	push	{r4, lr}
 8018252:	4604      	mov	r4, r0
 8018254:	f001 fd9a 	bl	8019d8c <uxr_nanos>
 8018258:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801825c:	1ac0      	subs	r0, r0, r3
 801825e:	eb61 0102 	sbc.w	r1, r1, r2
 8018262:	bd10      	pop	{r4, pc}

08018264 <uxr_flash_output_streams>:
 8018264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018268:	7e03      	ldrb	r3, [r0, #24]
 801826a:	b084      	sub	sp, #16
 801826c:	4604      	mov	r4, r0
 801826e:	b1fb      	cbz	r3, 80182b0 <uxr_flash_output_streams+0x4c>
 8018270:	f04f 0900 	mov.w	r9, #0
 8018274:	f10d 0802 	add.w	r8, sp, #2
 8018278:	af03      	add	r7, sp, #12
 801827a:	ae02      	add	r6, sp, #8
 801827c:	4648      	mov	r0, r9
 801827e:	2201      	movs	r2, #1
 8018280:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8018284:	4611      	mov	r1, r2
 8018286:	3508      	adds	r5, #8
 8018288:	f001 fbe0 	bl	8019a4c <uxr_stream_id>
 801828c:	4684      	mov	ip, r0
 801828e:	4643      	mov	r3, r8
 8018290:	463a      	mov	r2, r7
 8018292:	4631      	mov	r1, r6
 8018294:	4628      	mov	r0, r5
 8018296:	f8cd c004 	str.w	ip, [sp, #4]
 801829a:	f006 fb11 	bl	801e8c0 <uxr_prepare_best_effort_buffer_to_send>
 801829e:	2800      	cmp	r0, #0
 80182a0:	d13d      	bne.n	801831e <uxr_flash_output_streams+0xba>
 80182a2:	f109 0901 	add.w	r9, r9, #1
 80182a6:	7e23      	ldrb	r3, [r4, #24]
 80182a8:	fa5f f089 	uxtb.w	r0, r9
 80182ac:	4283      	cmp	r3, r0
 80182ae:	d8e6      	bhi.n	801827e <uxr_flash_output_streams+0x1a>
 80182b0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80182b4:	b383      	cbz	r3, 8018318 <uxr_flash_output_streams+0xb4>
 80182b6:	f04f 0900 	mov.w	r9, #0
 80182ba:	f10d 0802 	add.w	r8, sp, #2
 80182be:	af03      	add	r7, sp, #12
 80182c0:	ae02      	add	r6, sp, #8
 80182c2:	4648      	mov	r0, r9
 80182c4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80182c8:	2201      	movs	r2, #1
 80182ca:	2102      	movs	r1, #2
 80182cc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80182d0:	f001 fbbc 	bl	8019a4c <uxr_stream_id>
 80182d4:	9001      	str	r0, [sp, #4]
 80182d6:	3520      	adds	r5, #32
 80182d8:	e00c      	b.n	80182f4 <uxr_flash_output_streams+0x90>
 80182da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80182de:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80182e2:	9b02      	ldr	r3, [sp, #8]
 80182e4:	f000 fea8 	bl	8019038 <uxr_stamp_session_header>
 80182e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80182ea:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80182ee:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80182f2:	47d0      	blx	sl
 80182f4:	4643      	mov	r3, r8
 80182f6:	463a      	mov	r2, r7
 80182f8:	4631      	mov	r1, r6
 80182fa:	4628      	mov	r0, r5
 80182fc:	f006 fd04 	bl	801ed08 <uxr_prepare_next_reliable_buffer_to_send>
 8018300:	4603      	mov	r3, r0
 8018302:	4620      	mov	r0, r4
 8018304:	2b00      	cmp	r3, #0
 8018306:	d1e8      	bne.n	80182da <uxr_flash_output_streams+0x76>
 8018308:	f109 0901 	add.w	r9, r9, #1
 801830c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018310:	fa5f f089 	uxtb.w	r0, r9
 8018314:	4283      	cmp	r3, r0
 8018316:	d8d5      	bhi.n	80182c4 <uxr_flash_output_streams+0x60>
 8018318:	b004      	add	sp, #16
 801831a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801831e:	9b02      	ldr	r3, [sp, #8]
 8018320:	4620      	mov	r0, r4
 8018322:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018326:	f109 0901 	add.w	r9, r9, #1
 801832a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801832e:	f000 fe83 	bl	8019038 <uxr_stamp_session_header>
 8018332:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018334:	9a03      	ldr	r2, [sp, #12]
 8018336:	685d      	ldr	r5, [r3, #4]
 8018338:	6818      	ldr	r0, [r3, #0]
 801833a:	9902      	ldr	r1, [sp, #8]
 801833c:	47a8      	blx	r5
 801833e:	7e23      	ldrb	r3, [r4, #24]
 8018340:	fa5f f089 	uxtb.w	r0, r9
 8018344:	4283      	cmp	r3, r0
 8018346:	d89a      	bhi.n	801827e <uxr_flash_output_streams+0x1a>
 8018348:	e7b2      	b.n	80182b0 <uxr_flash_output_streams+0x4c>
 801834a:	bf00      	nop

0801834c <read_submessage_info>:
 801834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018350:	460d      	mov	r5, r1
 8018352:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8018356:	4606      	mov	r6, r0
 8018358:	4669      	mov	r1, sp
 801835a:	4628      	mov	r0, r5
 801835c:	f002 fcce 	bl	801acfc <uxr_deserialize_BaseObjectReply>
 8018360:	4604      	mov	r4, r0
 8018362:	a902      	add	r1, sp, #8
 8018364:	4628      	mov	r0, r5
 8018366:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801836a:	f7f9 fc53 	bl	8011c14 <ucdr_deserialize_bool>
 801836e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8018372:	4004      	ands	r4, r0
 8018374:	b2e4      	uxtb	r4, r4
 8018376:	b95b      	cbnz	r3, 8018390 <read_submessage_info+0x44>
 8018378:	a987      	add	r1, sp, #540	; 0x21c
 801837a:	4628      	mov	r0, r5
 801837c:	f7f9 fc4a 	bl	8011c14 <ucdr_deserialize_bool>
 8018380:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8018384:	4680      	mov	r8, r0
 8018386:	b94b      	cbnz	r3, 801839c <read_submessage_info+0x50>
 8018388:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018390:	a903      	add	r1, sp, #12
 8018392:	4628      	mov	r0, r5
 8018394:	f002 fb5e 	bl	801aa54 <uxr_deserialize_ObjectVariant>
 8018398:	4004      	ands	r4, r0
 801839a:	e7ed      	b.n	8018378 <read_submessage_info+0x2c>
 801839c:	a988      	add	r1, sp, #544	; 0x220
 801839e:	4628      	mov	r0, r5
 80183a0:	f7f9 fc66 	bl	8011c70 <ucdr_deserialize_uint8_t>
 80183a4:	ea14 0f08 	tst.w	r4, r8
 80183a8:	d0ee      	beq.n	8018388 <read_submessage_info+0x3c>
 80183aa:	2800      	cmp	r0, #0
 80183ac:	d0ec      	beq.n	8018388 <read_submessage_info+0x3c>
 80183ae:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80183b2:	2b0d      	cmp	r3, #13
 80183b4:	d1e8      	bne.n	8018388 <read_submessage_info+0x3c>
 80183b6:	a98a      	add	r1, sp, #552	; 0x228
 80183b8:	4628      	mov	r0, r5
 80183ba:	f7fa f9ff 	bl	80127bc <ucdr_deserialize_int16_t>
 80183be:	b138      	cbz	r0, 80183d0 <read_submessage_info+0x84>
 80183c0:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	dd06      	ble.n	80183d6 <read_submessage_info+0x8a>
 80183c8:	2f00      	cmp	r7, #0
 80183ca:	bf14      	ite	ne
 80183cc:	2001      	movne	r0, #1
 80183ce:	2002      	moveq	r0, #2
 80183d0:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80183d4:	e7d8      	b.n	8018388 <read_submessage_info+0x3c>
 80183d6:	2000      	movs	r0, #0
 80183d8:	e7fa      	b.n	80183d0 <read_submessage_info+0x84>
 80183da:	bf00      	nop

080183dc <read_submessage_list>:
 80183dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183e0:	4604      	mov	r4, r0
 80183e2:	b097      	sub	sp, #92	; 0x5c
 80183e4:	460d      	mov	r5, r1
 80183e6:	4ec1      	ldr	r6, [pc, #772]	; (80186ec <read_submessage_list+0x310>)
 80183e8:	9209      	str	r2, [sp, #36]	; 0x24
 80183ea:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80183ee:	aa0c      	add	r2, sp, #48	; 0x30
 80183f0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80183f4:	4628      	mov	r0, r5
 80183f6:	f001 fc81 	bl	8019cfc <uxr_read_submessage_header>
 80183fa:	2800      	cmp	r0, #0
 80183fc:	f000 8142 	beq.w	8018684 <read_submessage_list+0x2a8>
 8018400:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8018404:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8018408:	3b02      	subs	r3, #2
 801840a:	2b0d      	cmp	r3, #13
 801840c:	d8ed      	bhi.n	80183ea <read_submessage_list+0xe>
 801840e:	a101      	add	r1, pc, #4	; (adr r1, 8018414 <read_submessage_list+0x38>)
 8018410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018414:	0801867b 	.word	0x0801867b
 8018418:	080183eb 	.word	0x080183eb
 801841c:	0801866b 	.word	0x0801866b
 8018420:	08018609 	.word	0x08018609
 8018424:	080185ff 	.word	0x080185ff
 8018428:	080183eb 	.word	0x080183eb
 801842c:	080183eb 	.word	0x080183eb
 8018430:	08018555 	.word	0x08018555
 8018434:	080184e7 	.word	0x080184e7
 8018438:	080184a7 	.word	0x080184a7
 801843c:	080183eb 	.word	0x080183eb
 8018440:	080183eb 	.word	0x080183eb
 8018444:	080183eb 	.word	0x080183eb
 8018448:	0801844d 	.word	0x0801844d
 801844c:	a910      	add	r1, sp, #64	; 0x40
 801844e:	4628      	mov	r0, r5
 8018450:	f002 fe7c 	bl	801b14c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8018454:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8018458:	f1b8 0f00 	cmp.w	r8, #0
 801845c:	f000 811a 	beq.w	8018694 <read_submessage_list+0x2b8>
 8018460:	f001 fc94 	bl	8019d8c <uxr_nanos>
 8018464:	4602      	mov	r2, r0
 8018466:	460b      	mov	r3, r1
 8018468:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801846c:	2100      	movs	r1, #0
 801846e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018470:	9006      	str	r0, [sp, #24]
 8018472:	468c      	mov	ip, r1
 8018474:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018476:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801847a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801847c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8018480:	468c      	mov	ip, r1
 8018482:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018484:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8018488:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801848c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8018490:	fbc7 0106 	smlal	r0, r1, r7, r6
 8018494:	e9cd 0100 	strd	r0, r1, [sp]
 8018498:	4620      	mov	r0, r4
 801849a:	47c0      	blx	r8
 801849c:	f04f 0301 	mov.w	r3, #1
 80184a0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80184a4:	e7a1      	b.n	80183ea <read_submessage_list+0xe>
 80184a6:	a910      	add	r1, sp, #64	; 0x40
 80184a8:	4628      	mov	r0, r5
 80184aa:	f002 fe3b 	bl	801b124 <uxr_deserialize_HEARTBEAT_Payload>
 80184ae:	2100      	movs	r1, #0
 80184b0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80184b4:	f001 faf8 	bl	8019aa8 <uxr_stream_id_from_raw>
 80184b8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80184bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80184be:	f104 0008 	add.w	r0, r4, #8
 80184c2:	4641      	mov	r1, r8
 80184c4:	f001 fbde 	bl	8019c84 <uxr_get_input_reliable_stream>
 80184c8:	2800      	cmp	r0, #0
 80184ca:	d08e      	beq.n	80183ea <read_submessage_list+0xe>
 80184cc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80184d0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80184d4:	f006 f95e 	bl	801e794 <uxr_process_heartbeat>
 80184d8:	4642      	mov	r2, r8
 80184da:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80184de:	4620      	mov	r0, r4
 80184e0:	f7ff fdf6 	bl	80180d0 <write_submessage_acknack.isra.0>
 80184e4:	e781      	b.n	80183ea <read_submessage_list+0xe>
 80184e6:	a910      	add	r1, sp, #64	; 0x40
 80184e8:	4628      	mov	r0, r5
 80184ea:	f002 fdf3 	bl	801b0d4 <uxr_deserialize_ACKNACK_Payload>
 80184ee:	2100      	movs	r1, #0
 80184f0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80184f4:	f001 fad8 	bl	8019aa8 <uxr_stream_id_from_raw>
 80184f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80184fc:	900d      	str	r0, [sp, #52]	; 0x34
 80184fe:	f104 0008 	add.w	r0, r4, #8
 8018502:	f001 fba9 	bl	8019c58 <uxr_get_output_reliable_stream>
 8018506:	4680      	mov	r8, r0
 8018508:	2800      	cmp	r0, #0
 801850a:	f43f af6e 	beq.w	80183ea <read_submessage_list+0xe>
 801850e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8018512:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018516:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801851a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801851e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8018522:	b289      	uxth	r1, r1
 8018524:	f006 fc98 	bl	801ee58 <uxr_process_acknack>
 8018528:	4640      	mov	r0, r8
 801852a:	f006 fc59 	bl	801ede0 <uxr_begin_output_nack_buffer_it>
 801852e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8018532:	e005      	b.n	8018540 <read_submessage_list+0x164>
 8018534:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018536:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801853a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801853e:	47c8      	blx	r9
 8018540:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8018544:	aa0f      	add	r2, sp, #60	; 0x3c
 8018546:	4651      	mov	r1, sl
 8018548:	4640      	mov	r0, r8
 801854a:	f006 fc4b 	bl	801ede4 <uxr_next_reliable_nack_buffer_to_send>
 801854e:	2800      	cmp	r0, #0
 8018550:	d1f0      	bne.n	8018534 <read_submessage_list+0x158>
 8018552:	e74a      	b.n	80183ea <read_submessage_list+0xe>
 8018554:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8018558:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801855c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8018560:	4628      	mov	r0, r5
 8018562:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8018566:	4651      	mov	r1, sl
 8018568:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801856c:	f1a8 0804 	sub.w	r8, r8, #4
 8018570:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8018574:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8018578:	fa1f f888 	uxth.w	r8, r8
 801857c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018580:	f009 090e 	and.w	r9, r9, #14
 8018584:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8018588:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801858c:	f002 fb04 	bl	801ab98 <uxr_deserialize_BaseObjectRequest>
 8018590:	4650      	mov	r0, sl
 8018592:	a90f      	add	r1, sp, #60	; 0x3c
 8018594:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8018598:	f000 fdca 	bl	8019130 <uxr_parse_base_object_request>
 801859c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801859e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80185a2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80185a6:	9110      	str	r1, [sp, #64]	; 0x40
 80185a8:	f1bb 0f00 	cmp.w	fp, #0
 80185ac:	d006      	beq.n	80185bc <read_submessage_list+0x1e0>
 80185ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80185b2:	4652      	mov	r2, sl
 80185b4:	4620      	mov	r0, r4
 80185b6:	9300      	str	r3, [sp, #0]
 80185b8:	2300      	movs	r3, #0
 80185ba:	47d8      	blx	fp
 80185bc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80185be:	b182      	cbz	r2, 80185e2 <read_submessage_list+0x206>
 80185c0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80185c2:	f04f 0c00 	mov.w	ip, #0
 80185c6:	3902      	subs	r1, #2
 80185c8:	e003      	b.n	80185d2 <read_submessage_list+0x1f6>
 80185ca:	f10c 0c01 	add.w	ip, ip, #1
 80185ce:	4594      	cmp	ip, r2
 80185d0:	d007      	beq.n	80185e2 <read_submessage_list+0x206>
 80185d2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80185d6:	4553      	cmp	r3, sl
 80185d8:	d1f7      	bne.n	80185ca <read_submessage_list+0x1ee>
 80185da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80185dc:	2200      	movs	r2, #0
 80185de:	f803 200c 	strb.w	r2, [r3, ip]
 80185e2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80185e6:	464b      	mov	r3, r9
 80185e8:	4642      	mov	r2, r8
 80185ea:	4620      	mov	r0, r4
 80185ec:	9102      	str	r1, [sp, #8]
 80185ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80185f0:	9101      	str	r1, [sp, #4]
 80185f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80185f4:	9100      	str	r1, [sp, #0]
 80185f6:	4629      	mov	r1, r5
 80185f8:	f7ff fc48 	bl	8017e8c <read_submessage_format>
 80185fc:	e6f5      	b.n	80183ea <read_submessage_list+0xe>
 80185fe:	4629      	mov	r1, r5
 8018600:	4620      	mov	r0, r4
 8018602:	f7ff fea3 	bl	801834c <read_submessage_info>
 8018606:	e6f0      	b.n	80183ea <read_submessage_list+0xe>
 8018608:	2a00      	cmp	r2, #0
 801860a:	d03e      	beq.n	801868a <read_submessage_list+0x2ae>
 801860c:	a910      	add	r1, sp, #64	; 0x40
 801860e:	4628      	mov	r0, r5
 8018610:	f002 fcb8 	bl	801af84 <uxr_deserialize_STATUS_Payload>
 8018614:	a90e      	add	r1, sp, #56	; 0x38
 8018616:	aa0d      	add	r2, sp, #52	; 0x34
 8018618:	a810      	add	r0, sp, #64	; 0x40
 801861a:	f000 fd89 	bl	8019130 <uxr_parse_base_object_request>
 801861e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018620:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8018624:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8018628:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801862c:	910f      	str	r1, [sp, #60]	; 0x3c
 801862e:	f1ba 0f00 	cmp.w	sl, #0
 8018632:	d006      	beq.n	8018642 <read_submessage_list+0x266>
 8018634:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018638:	4642      	mov	r2, r8
 801863a:	4620      	mov	r0, r4
 801863c:	9300      	str	r3, [sp, #0]
 801863e:	464b      	mov	r3, r9
 8018640:	47d0      	blx	sl
 8018642:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018644:	2a00      	cmp	r2, #0
 8018646:	f43f aed0 	beq.w	80183ea <read_submessage_list+0xe>
 801864a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801864c:	2100      	movs	r1, #0
 801864e:	3802      	subs	r0, #2
 8018650:	e003      	b.n	801865a <read_submessage_list+0x27e>
 8018652:	3101      	adds	r1, #1
 8018654:	4291      	cmp	r1, r2
 8018656:	f43f aec8 	beq.w	80183ea <read_submessage_list+0xe>
 801865a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801865e:	4543      	cmp	r3, r8
 8018660:	d1f7      	bne.n	8018652 <read_submessage_list+0x276>
 8018662:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8018664:	f803 9001 	strb.w	r9, [r3, r1]
 8018668:	e6bf      	b.n	80183ea <read_submessage_list+0xe>
 801866a:	2a00      	cmp	r2, #0
 801866c:	f47f aebd 	bne.w	80183ea <read_submessage_list+0xe>
 8018670:	4629      	mov	r1, r5
 8018672:	4620      	mov	r0, r4
 8018674:	f000 fca0 	bl	8018fb8 <uxr_read_create_session_status>
 8018678:	e6b7      	b.n	80183ea <read_submessage_list+0xe>
 801867a:	4629      	mov	r1, r5
 801867c:	4620      	mov	r0, r4
 801867e:	f7ff fcf1 	bl	8018064 <read_submessage_get_info>
 8018682:	e6b2      	b.n	80183ea <read_submessage_list+0xe>
 8018684:	b017      	add	sp, #92	; 0x5c
 8018686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801868a:	4629      	mov	r1, r5
 801868c:	4620      	mov	r0, r4
 801868e:	f000 fca1 	bl	8018fd4 <uxr_read_delete_session_status>
 8018692:	e6aa      	b.n	80183ea <read_submessage_list+0xe>
 8018694:	f001 fb7a 	bl	8019d8c <uxr_nanos>
 8018698:	4642      	mov	r2, r8
 801869a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801869c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801869e:	fbc7 3206 	smlal	r3, r2, r7, r6
 80186a2:	1818      	adds	r0, r3, r0
 80186a4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80186a6:	eb42 0101 	adc.w	r1, r2, r1
 80186aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80186ac:	4642      	mov	r2, r8
 80186ae:	fbc7 3206 	smlal	r3, r2, r7, r6
 80186b2:	469c      	mov	ip, r3
 80186b4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 80186b8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80186bc:	4643      	mov	r3, r8
 80186be:	eb1c 0c07 	adds.w	ip, ip, r7
 80186c2:	eb42 0203 	adc.w	r2, r2, r3
 80186c6:	ebb0 030c 	subs.w	r3, r0, ip
 80186ca:	eb61 0202 	sbc.w	r2, r1, r2
 80186ce:	2a00      	cmp	r2, #0
 80186d0:	db08      	blt.n	80186e4 <read_submessage_list+0x308>
 80186d2:	085b      	lsrs	r3, r3, #1
 80186d4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80186d8:	1052      	asrs	r2, r2, #1
 80186da:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80186de:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80186e2:	e6db      	b.n	801849c <read_submessage_list+0xc0>
 80186e4:	3301      	adds	r3, #1
 80186e6:	f142 0200 	adc.w	r2, r2, #0
 80186ea:	e7f2      	b.n	80186d2 <read_submessage_list+0x2f6>
 80186ec:	3b9aca00 	.word	0x3b9aca00

080186f0 <listen_message_reliably>:
 80186f0:	1e0b      	subs	r3, r1, #0
 80186f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186f6:	bfb8      	it	lt
 80186f8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80186fc:	b09d      	sub	sp, #116	; 0x74
 80186fe:	4680      	mov	r8, r0
 8018700:	9305      	str	r3, [sp, #20]
 8018702:	f001 fb27 	bl	8019d54 <uxr_millis>
 8018706:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801870a:	4681      	mov	r9, r0
 801870c:	2a00      	cmp	r2, #0
 801870e:	f000 809a 	beq.w	8018846 <listen_message_reliably+0x156>
 8018712:	2600      	movs	r6, #0
 8018714:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018718:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801871c:	460f      	mov	r7, r1
 801871e:	4630      	mov	r0, r6
 8018720:	9303      	str	r3, [sp, #12]
 8018722:	e00e      	b.n	8018742 <listen_message_reliably+0x52>
 8018724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018726:	3601      	adds	r6, #1
 8018728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801872a:	455a      	cmp	r2, fp
 801872c:	9903      	ldr	r1, [sp, #12]
 801872e:	b2f0      	uxtb	r0, r6
 8018730:	eb73 0101 	sbcs.w	r1, r3, r1
 8018734:	da01      	bge.n	801873a <listen_message_reliably+0x4a>
 8018736:	4693      	mov	fp, r2
 8018738:	9303      	str	r3, [sp, #12]
 801873a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801873e:	4283      	cmp	r3, r0
 8018740:	d95f      	bls.n	8018802 <listen_message_reliably+0x112>
 8018742:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8018746:	2102      	movs	r1, #2
 8018748:	2201      	movs	r2, #1
 801874a:	00e4      	lsls	r4, r4, #3
 801874c:	f001 f97e 	bl	8019a4c <uxr_stream_id>
 8018750:	4601      	mov	r1, r0
 8018752:	f104 0520 	add.w	r5, r4, #32
 8018756:	463b      	mov	r3, r7
 8018758:	464a      	mov	r2, r9
 801875a:	9109      	str	r1, [sp, #36]	; 0x24
 801875c:	4445      	add	r5, r8
 801875e:	4628      	mov	r0, r5
 8018760:	f006 fb12 	bl	801ed88 <uxr_update_output_stream_heartbeat_timestamp>
 8018764:	eb08 0304 	add.w	r3, r8, r4
 8018768:	2800      	cmp	r0, #0
 801876a:	d0db      	beq.n	8018724 <listen_message_reliably+0x34>
 801876c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8018770:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8018774:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018778:	4640      	mov	r0, r8
 801877a:	3501      	adds	r5, #1
 801877c:	4444      	add	r4, r8
 801877e:	9304      	str	r3, [sp, #16]
 8018780:	f000 fcae 	bl	80190e0 <uxr_session_header_offset>
 8018784:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8018788:	2300      	movs	r3, #0
 801878a:	2211      	movs	r2, #17
 801878c:	a90c      	add	r1, sp, #48	; 0x30
 801878e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8018792:	9000      	str	r0, [sp, #0]
 8018794:	4650      	mov	r0, sl
 8018796:	3601      	adds	r6, #1
 8018798:	f7fa fd1a 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 801879c:	2300      	movs	r3, #0
 801879e:	2205      	movs	r2, #5
 80187a0:	210b      	movs	r1, #11
 80187a2:	4650      	mov	r0, sl
 80187a4:	f001 fa90 	bl	8019cc8 <uxr_buffer_submessage_header>
 80187a8:	2101      	movs	r1, #1
 80187aa:	8968      	ldrh	r0, [r5, #10]
 80187ac:	f006 fbb0 	bl	801ef10 <uxr_seq_num_add>
 80187b0:	892b      	ldrh	r3, [r5, #8]
 80187b2:	4602      	mov	r2, r0
 80187b4:	a90a      	add	r1, sp, #40	; 0x28
 80187b6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80187ba:	4650      	mov	r0, sl
 80187bc:	9b04      	ldr	r3, [sp, #16]
 80187be:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80187c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80187c6:	f002 fc99 	bl	801b0fc <uxr_serialize_HEARTBEAT_Payload>
 80187ca:	2200      	movs	r2, #0
 80187cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80187ce:	4640      	mov	r0, r8
 80187d0:	4611      	mov	r1, r2
 80187d2:	f000 fc31 	bl	8019038 <uxr_stamp_session_header>
 80187d6:	4650      	mov	r0, sl
 80187d8:	f7fa fd3a 	bl	8013250 <ucdr_buffer_length>
 80187dc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80187e0:	4602      	mov	r2, r0
 80187e2:	a90c      	add	r1, sp, #48	; 0x30
 80187e4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80187e8:	47a8      	blx	r5
 80187ea:	9903      	ldr	r1, [sp, #12]
 80187ec:	b2f0      	uxtb	r0, r6
 80187ee:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80187f2:	455a      	cmp	r2, fp
 80187f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80187f8:	db9d      	blt.n	8018736 <listen_message_reliably+0x46>
 80187fa:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80187fe:	4283      	cmp	r3, r0
 8018800:	d89f      	bhi.n	8018742 <listen_message_reliably+0x52>
 8018802:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018806:	9a03      	ldr	r2, [sp, #12]
 8018808:	429a      	cmp	r2, r3
 801880a:	bf08      	it	eq
 801880c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8018810:	d019      	beq.n	8018846 <listen_message_reliably+0x156>
 8018812:	ebab 0309 	sub.w	r3, fp, r9
 8018816:	2b00      	cmp	r3, #0
 8018818:	9d05      	ldr	r5, [sp, #20]
 801881a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 801881e:	aa08      	add	r2, sp, #32
 8018820:	bf08      	it	eq
 8018822:	2301      	moveq	r3, #1
 8018824:	a907      	add	r1, sp, #28
 8018826:	6884      	ldr	r4, [r0, #8]
 8018828:	429d      	cmp	r5, r3
 801882a:	6800      	ldr	r0, [r0, #0]
 801882c:	bfa8      	it	ge
 801882e:	461d      	movge	r5, r3
 8018830:	462b      	mov	r3, r5
 8018832:	47a0      	blx	r4
 8018834:	b948      	cbnz	r0, 801884a <listen_message_reliably+0x15a>
 8018836:	9b05      	ldr	r3, [sp, #20]
 8018838:	1b5b      	subs	r3, r3, r5
 801883a:	2b00      	cmp	r3, #0
 801883c:	9305      	str	r3, [sp, #20]
 801883e:	f73f af60 	bgt.w	8018702 <listen_message_reliably+0x12>
 8018842:	4604      	mov	r4, r0
 8018844:	e012      	b.n	801886c <listen_message_reliably+0x17c>
 8018846:	9b05      	ldr	r3, [sp, #20]
 8018848:	e7e5      	b.n	8018816 <listen_message_reliably+0x126>
 801884a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801884e:	4604      	mov	r4, r0
 8018850:	2500      	movs	r5, #0
 8018852:	a80c      	add	r0, sp, #48	; 0x30
 8018854:	f7fa fcce 	bl	80131f4 <ucdr_init_buffer>
 8018858:	f10d 031a 	add.w	r3, sp, #26
 801885c:	aa06      	add	r2, sp, #24
 801885e:	a90c      	add	r1, sp, #48	; 0x30
 8018860:	4640      	mov	r0, r8
 8018862:	f88d 5018 	strb.w	r5, [sp, #24]
 8018866:	f000 fbfb 	bl	8019060 <uxr_read_session_header>
 801886a:	b918      	cbnz	r0, 8018874 <listen_message_reliably+0x184>
 801886c:	4620      	mov	r0, r4
 801886e:	b01d      	add	sp, #116	; 0x74
 8018870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018874:	4629      	mov	r1, r5
 8018876:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801887a:	f001 f915 	bl	8019aa8 <uxr_stream_id_from_raw>
 801887e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018882:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8018886:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801888a:	2e01      	cmp	r6, #1
 801888c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018890:	d04b      	beq.n	801892a <listen_message_reliably+0x23a>
 8018892:	2e02      	cmp	r6, #2
 8018894:	d00f      	beq.n	80188b6 <listen_message_reliably+0x1c6>
 8018896:	2e00      	cmp	r6, #0
 8018898:	d1e8      	bne.n	801886c <listen_message_reliably+0x17c>
 801889a:	4631      	mov	r1, r6
 801889c:	4630      	mov	r0, r6
 801889e:	f001 f903 	bl	8019aa8 <uxr_stream_id_from_raw>
 80188a2:	4602      	mov	r2, r0
 80188a4:	a90c      	add	r1, sp, #48	; 0x30
 80188a6:	4640      	mov	r0, r8
 80188a8:	920a      	str	r2, [sp, #40]	; 0x28
 80188aa:	f7ff fd97 	bl	80183dc <read_submessage_list>
 80188ae:	4620      	mov	r0, r4
 80188b0:	b01d      	add	sp, #116	; 0x74
 80188b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188b6:	4629      	mov	r1, r5
 80188b8:	f108 0008 	add.w	r0, r8, #8
 80188bc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80188c0:	f001 f9e0 	bl	8019c84 <uxr_get_input_reliable_stream>
 80188c4:	4607      	mov	r7, r0
 80188c6:	b338      	cbz	r0, 8018918 <listen_message_reliably+0x228>
 80188c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188ca:	a80c      	add	r0, sp, #48	; 0x30
 80188cc:	9203      	str	r2, [sp, #12]
 80188ce:	f7fa fcc3 	bl	8013258 <ucdr_buffer_remaining>
 80188d2:	4603      	mov	r3, r0
 80188d4:	f10d 0019 	add.w	r0, sp, #25
 80188d8:	9a03      	ldr	r2, [sp, #12]
 80188da:	4651      	mov	r1, sl
 80188dc:	9000      	str	r0, [sp, #0]
 80188de:	4638      	mov	r0, r7
 80188e0:	f005 fe5c 	bl	801e59c <uxr_receive_reliable_message>
 80188e4:	b1c0      	cbz	r0, 8018918 <listen_message_reliably+0x228>
 80188e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80188ea:	b393      	cbz	r3, 8018952 <listen_message_reliably+0x262>
 80188ec:	ae14      	add	r6, sp, #80	; 0x50
 80188ee:	f04f 0a02 	mov.w	sl, #2
 80188f2:	e00a      	b.n	801890a <listen_message_reliably+0x21a>
 80188f4:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80188f8:	4631      	mov	r1, r6
 80188fa:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80188fe:	4640      	mov	r0, r8
 8018900:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018906:	f7ff fd69 	bl	80183dc <read_submessage_list>
 801890a:	2204      	movs	r2, #4
 801890c:	4631      	mov	r1, r6
 801890e:	4638      	mov	r0, r7
 8018910:	f005 fec6 	bl	801e6a0 <uxr_next_input_reliable_buffer_available>
 8018914:	2800      	cmp	r0, #0
 8018916:	d1ed      	bne.n	80188f4 <listen_message_reliably+0x204>
 8018918:	4640      	mov	r0, r8
 801891a:	462a      	mov	r2, r5
 801891c:	4649      	mov	r1, r9
 801891e:	f7ff fbd7 	bl	80180d0 <write_submessage_acknack.isra.0>
 8018922:	4620      	mov	r0, r4
 8018924:	b01d      	add	sp, #116	; 0x74
 8018926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801892a:	4629      	mov	r1, r5
 801892c:	f108 0008 	add.w	r0, r8, #8
 8018930:	f001 f99e 	bl	8019c70 <uxr_get_input_best_effort_stream>
 8018934:	2800      	cmp	r0, #0
 8018936:	d099      	beq.n	801886c <listen_message_reliably+0x17c>
 8018938:	4651      	mov	r1, sl
 801893a:	f005 fda5 	bl	801e488 <uxr_receive_best_effort_message>
 801893e:	2800      	cmp	r0, #0
 8018940:	d094      	beq.n	801886c <listen_message_reliably+0x17c>
 8018942:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018946:	a90c      	add	r1, sp, #48	; 0x30
 8018948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801894a:	4640      	mov	r0, r8
 801894c:	f7ff fd46 	bl	80183dc <read_submessage_list>
 8018950:	e78c      	b.n	801886c <listen_message_reliably+0x17c>
 8018952:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018956:	a90c      	add	r1, sp, #48	; 0x30
 8018958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801895a:	4640      	mov	r0, r8
 801895c:	f7ff fd3e 	bl	80183dc <read_submessage_list>
 8018960:	e7c4      	b.n	80188ec <listen_message_reliably+0x1fc>
 8018962:	bf00      	nop

08018964 <uxr_run_session_timeout>:
 8018964:	b570      	push	{r4, r5, r6, lr}
 8018966:	4604      	mov	r4, r0
 8018968:	460d      	mov	r5, r1
 801896a:	f001 f9f3 	bl	8019d54 <uxr_millis>
 801896e:	4606      	mov	r6, r0
 8018970:	4620      	mov	r0, r4
 8018972:	f7ff fc77 	bl	8018264 <uxr_flash_output_streams>
 8018976:	4629      	mov	r1, r5
 8018978:	4620      	mov	r0, r4
 801897a:	f7ff feb9 	bl	80186f0 <listen_message_reliably>
 801897e:	f001 f9e9 	bl	8019d54 <uxr_millis>
 8018982:	1b83      	subs	r3, r0, r6
 8018984:	1ae9      	subs	r1, r5, r3
 8018986:	2900      	cmp	r1, #0
 8018988:	dcf6      	bgt.n	8018978 <uxr_run_session_timeout+0x14>
 801898a:	f104 0008 	add.w	r0, r4, #8
 801898e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018992:	f001 b983 	b.w	8019c9c <uxr_output_streams_confirmed>
 8018996:	bf00      	nop

08018998 <uxr_run_session_until_data>:
 8018998:	b570      	push	{r4, r5, r6, lr}
 801899a:	4604      	mov	r4, r0
 801899c:	460d      	mov	r5, r1
 801899e:	f001 f9d9 	bl	8019d54 <uxr_millis>
 80189a2:	4606      	mov	r6, r0
 80189a4:	4620      	mov	r0, r4
 80189a6:	f7ff fc5d 	bl	8018264 <uxr_flash_output_streams>
 80189aa:	2300      	movs	r3, #0
 80189ac:	4629      	mov	r1, r5
 80189ae:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80189b2:	e005      	b.n	80189c0 <uxr_run_session_until_data+0x28>
 80189b4:	f001 f9ce 	bl	8019d54 <uxr_millis>
 80189b8:	1b83      	subs	r3, r0, r6
 80189ba:	1ae9      	subs	r1, r5, r3
 80189bc:	2900      	cmp	r1, #0
 80189be:	dd07      	ble.n	80189d0 <uxr_run_session_until_data+0x38>
 80189c0:	4620      	mov	r0, r4
 80189c2:	f7ff fe95 	bl	80186f0 <listen_message_reliably>
 80189c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80189ca:	2800      	cmp	r0, #0
 80189cc:	d0f2      	beq.n	80189b4 <uxr_run_session_until_data+0x1c>
 80189ce:	bd70      	pop	{r4, r5, r6, pc}
 80189d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80189d4:	bd70      	pop	{r4, r5, r6, pc}
 80189d6:	bf00      	nop

080189d8 <uxr_run_session_until_confirm_delivery>:
 80189d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189dc:	4606      	mov	r6, r0
 80189de:	460d      	mov	r5, r1
 80189e0:	f001 f9b8 	bl	8019d54 <uxr_millis>
 80189e4:	4607      	mov	r7, r0
 80189e6:	4630      	mov	r0, r6
 80189e8:	f106 0808 	add.w	r8, r6, #8
 80189ec:	f7ff fc3a 	bl	8018264 <uxr_flash_output_streams>
 80189f0:	2d00      	cmp	r5, #0
 80189f2:	db10      	blt.n	8018a16 <uxr_run_session_until_confirm_delivery+0x3e>
 80189f4:	462c      	mov	r4, r5
 80189f6:	e006      	b.n	8018a06 <uxr_run_session_until_confirm_delivery+0x2e>
 80189f8:	f7ff fe7a 	bl	80186f0 <listen_message_reliably>
 80189fc:	f001 f9aa 	bl	8019d54 <uxr_millis>
 8018a00:	1bc3      	subs	r3, r0, r7
 8018a02:	1aec      	subs	r4, r5, r3
 8018a04:	d407      	bmi.n	8018a16 <uxr_run_session_until_confirm_delivery+0x3e>
 8018a06:	4640      	mov	r0, r8
 8018a08:	f001 f948 	bl	8019c9c <uxr_output_streams_confirmed>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	4621      	mov	r1, r4
 8018a10:	4630      	mov	r0, r6
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d0f0      	beq.n	80189f8 <uxr_run_session_until_confirm_delivery+0x20>
 8018a16:	4640      	mov	r0, r8
 8018a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a1c:	f001 b93e 	b.w	8019c9c <uxr_output_streams_confirmed>

08018a20 <uxr_run_session_until_all_status>:
 8018a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a24:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018a28:	4606      	mov	r6, r0
 8018a2a:	4688      	mov	r8, r1
 8018a2c:	4692      	mov	sl, r2
 8018a2e:	461f      	mov	r7, r3
 8018a30:	f7ff fc18 	bl	8018264 <uxr_flash_output_streams>
 8018a34:	f1bb 0f00 	cmp.w	fp, #0
 8018a38:	d004      	beq.n	8018a44 <uxr_run_session_until_all_status+0x24>
 8018a3a:	465a      	mov	r2, fp
 8018a3c:	21ff      	movs	r1, #255	; 0xff
 8018a3e:	4638      	mov	r0, r7
 8018a40:	f008 f940 	bl	8020cc4 <memset>
 8018a44:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018a48:	1e7d      	subs	r5, r7, #1
 8018a4a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8018a4e:	f001 f981 	bl	8019d54 <uxr_millis>
 8018a52:	4641      	mov	r1, r8
 8018a54:	4681      	mov	r9, r0
 8018a56:	4630      	mov	r0, r6
 8018a58:	f7ff fe4a 	bl	80186f0 <listen_message_reliably>
 8018a5c:	f001 f97a 	bl	8019d54 <uxr_millis>
 8018a60:	eba0 0009 	sub.w	r0, r0, r9
 8018a64:	eba8 0100 	sub.w	r1, r8, r0
 8018a68:	f1bb 0f00 	cmp.w	fp, #0
 8018a6c:	d029      	beq.n	8018ac2 <uxr_run_session_until_all_status+0xa2>
 8018a6e:	46ae      	mov	lr, r5
 8018a70:	f04f 0c00 	mov.w	ip, #0
 8018a74:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018a78:	2cff      	cmp	r4, #255	; 0xff
 8018a7a:	d015      	beq.n	8018aa8 <uxr_run_session_until_all_status+0x88>
 8018a7c:	f10c 0c01 	add.w	ip, ip, #1
 8018a80:	45e3      	cmp	fp, ip
 8018a82:	d8f7      	bhi.n	8018a74 <uxr_run_session_until_all_status+0x54>
 8018a84:	2300      	movs	r3, #0
 8018a86:	67f3      	str	r3, [r6, #124]	; 0x7c
 8018a88:	e000      	b.n	8018a8c <uxr_run_session_until_all_status+0x6c>
 8018a8a:	b158      	cbz	r0, 8018aa4 <uxr_run_session_until_all_status+0x84>
 8018a8c:	462b      	mov	r3, r5
 8018a8e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018a92:	3302      	adds	r3, #2
 8018a94:	2801      	cmp	r0, #1
 8018a96:	eba3 0307 	sub.w	r3, r3, r7
 8018a9a:	bf8c      	ite	hi
 8018a9c:	2000      	movhi	r0, #0
 8018a9e:	2001      	movls	r0, #1
 8018aa0:	459b      	cmp	fp, r3
 8018aa2:	d8f2      	bhi.n	8018a8a <uxr_run_session_until_all_status+0x6a>
 8018aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aa8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018aac:	f10c 0c01 	add.w	ip, ip, #1
 8018ab0:	45dc      	cmp	ip, fp
 8018ab2:	d201      	bcs.n	8018ab8 <uxr_run_session_until_all_status+0x98>
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d0dd      	beq.n	8018a74 <uxr_run_session_until_all_status+0x54>
 8018ab8:	2900      	cmp	r1, #0
 8018aba:	dde3      	ble.n	8018a84 <uxr_run_session_until_all_status+0x64>
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d1ca      	bne.n	8018a56 <uxr_run_session_until_all_status+0x36>
 8018ac0:	e7e0      	b.n	8018a84 <uxr_run_session_until_all_status+0x64>
 8018ac2:	2001      	movs	r0, #1
 8018ac4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018ac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018acc <wait_session_status>:
 8018acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad0:	4604      	mov	r4, r0
 8018ad2:	b09d      	sub	sp, #116	; 0x74
 8018ad4:	20ff      	movs	r0, #255	; 0xff
 8018ad6:	9303      	str	r3, [sp, #12]
 8018ad8:	7160      	strb	r0, [r4, #5]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	f000 80b6 	beq.w	8018c4c <wait_session_status+0x180>
 8018ae0:	4689      	mov	r9, r1
 8018ae2:	4692      	mov	sl, r2
 8018ae4:	f04f 0b00 	mov.w	fp, #0
 8018ae8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018aea:	4652      	mov	r2, sl
 8018aec:	4649      	mov	r1, r9
 8018aee:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018af2:	47a8      	blx	r5
 8018af4:	f001 f92e 	bl	8019d54 <uxr_millis>
 8018af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018afc:	4605      	mov	r5, r0
 8018afe:	e009      	b.n	8018b14 <wait_session_status+0x48>
 8018b00:	f001 f928 	bl	8019d54 <uxr_millis>
 8018b04:	1b40      	subs	r0, r0, r5
 8018b06:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	dd40      	ble.n	8018b90 <wait_session_status+0xc4>
 8018b0e:	7960      	ldrb	r0, [r4, #5]
 8018b10:	28ff      	cmp	r0, #255	; 0xff
 8018b12:	d145      	bne.n	8018ba0 <wait_session_status+0xd4>
 8018b14:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018b16:	a908      	add	r1, sp, #32
 8018b18:	6896      	ldr	r6, [r2, #8]
 8018b1a:	6810      	ldr	r0, [r2, #0]
 8018b1c:	aa09      	add	r2, sp, #36	; 0x24
 8018b1e:	47b0      	blx	r6
 8018b20:	2800      	cmp	r0, #0
 8018b22:	d0ed      	beq.n	8018b00 <wait_session_status+0x34>
 8018b24:	a80c      	add	r0, sp, #48	; 0x30
 8018b26:	2600      	movs	r6, #0
 8018b28:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018b2c:	f7fa fb62 	bl	80131f4 <ucdr_init_buffer>
 8018b30:	f10d 031e 	add.w	r3, sp, #30
 8018b34:	aa07      	add	r2, sp, #28
 8018b36:	a90c      	add	r1, sp, #48	; 0x30
 8018b38:	4620      	mov	r0, r4
 8018b3a:	f88d 601c 	strb.w	r6, [sp, #28]
 8018b3e:	f000 fa8f 	bl	8019060 <uxr_read_session_header>
 8018b42:	2800      	cmp	r0, #0
 8018b44:	d0dc      	beq.n	8018b00 <wait_session_status+0x34>
 8018b46:	4631      	mov	r1, r6
 8018b48:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018b4c:	f000 ffac 	bl	8019aa8 <uxr_stream_id_from_raw>
 8018b50:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018b54:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018b58:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018b5c:	2f01      	cmp	r7, #1
 8018b5e:	9302      	str	r3, [sp, #8]
 8018b60:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8018b64:	d05c      	beq.n	8018c20 <wait_session_status+0x154>
 8018b66:	2f02      	cmp	r7, #2
 8018b68:	d020      	beq.n	8018bac <wait_session_status+0xe0>
 8018b6a:	2f00      	cmp	r7, #0
 8018b6c:	d1c8      	bne.n	8018b00 <wait_session_status+0x34>
 8018b6e:	4639      	mov	r1, r7
 8018b70:	4638      	mov	r0, r7
 8018b72:	f000 ff99 	bl	8019aa8 <uxr_stream_id_from_raw>
 8018b76:	a90c      	add	r1, sp, #48	; 0x30
 8018b78:	4602      	mov	r2, r0
 8018b7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	f7ff fc2d 	bl	80183dc <read_submessage_list>
 8018b82:	f001 f8e7 	bl	8019d54 <uxr_millis>
 8018b86:	1b40      	subs	r0, r0, r5
 8018b88:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	dcbe      	bgt.n	8018b0e <wait_session_status+0x42>
 8018b90:	f10b 0b01 	add.w	fp, fp, #1
 8018b94:	9b03      	ldr	r3, [sp, #12]
 8018b96:	7960      	ldrb	r0, [r4, #5]
 8018b98:	455b      	cmp	r3, fp
 8018b9a:	d001      	beq.n	8018ba0 <wait_session_status+0xd4>
 8018b9c:	28ff      	cmp	r0, #255	; 0xff
 8018b9e:	d0a3      	beq.n	8018ae8 <wait_session_status+0x1c>
 8018ba0:	38ff      	subs	r0, #255	; 0xff
 8018ba2:	bf18      	it	ne
 8018ba4:	2001      	movne	r0, #1
 8018ba6:	b01d      	add	sp, #116	; 0x74
 8018ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bac:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8018bb0:	4631      	mov	r1, r6
 8018bb2:	f104 0008 	add.w	r0, r4, #8
 8018bb6:	9304      	str	r3, [sp, #16]
 8018bb8:	f001 f864 	bl	8019c84 <uxr_get_input_reliable_stream>
 8018bbc:	4680      	mov	r8, r0
 8018bbe:	b348      	cbz	r0, 8018c14 <wait_session_status+0x148>
 8018bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018bc2:	a80c      	add	r0, sp, #48	; 0x30
 8018bc4:	9205      	str	r2, [sp, #20]
 8018bc6:	f7fa fb47 	bl	8013258 <ucdr_buffer_remaining>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	f10d 001d 	add.w	r0, sp, #29
 8018bd0:	9a05      	ldr	r2, [sp, #20]
 8018bd2:	9000      	str	r0, [sp, #0]
 8018bd4:	4640      	mov	r0, r8
 8018bd6:	9902      	ldr	r1, [sp, #8]
 8018bd8:	f005 fce0 	bl	801e59c <uxr_receive_reliable_message>
 8018bdc:	b1d0      	cbz	r0, 8018c14 <wait_session_status+0x148>
 8018bde:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d03a      	beq.n	8018c5c <wait_session_status+0x190>
 8018be6:	9f04      	ldr	r7, [sp, #16]
 8018be8:	e00a      	b.n	8018c00 <wait_session_status+0x134>
 8018bea:	f04f 0302 	mov.w	r3, #2
 8018bee:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8018bf2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018bf6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8018bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018bfc:	f7ff fbee 	bl	80183dc <read_submessage_list>
 8018c00:	a914      	add	r1, sp, #80	; 0x50
 8018c02:	2204      	movs	r2, #4
 8018c04:	4640      	mov	r0, r8
 8018c06:	f005 fd4b 	bl	801e6a0 <uxr_next_input_reliable_buffer_available>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	a914      	add	r1, sp, #80	; 0x50
 8018c0e:	4620      	mov	r0, r4
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d1ea      	bne.n	8018bea <wait_session_status+0x11e>
 8018c14:	4632      	mov	r2, r6
 8018c16:	9904      	ldr	r1, [sp, #16]
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f7ff fa59 	bl	80180d0 <write_submessage_acknack.isra.0>
 8018c1e:	e76f      	b.n	8018b00 <wait_session_status+0x34>
 8018c20:	4631      	mov	r1, r6
 8018c22:	f104 0008 	add.w	r0, r4, #8
 8018c26:	f001 f823 	bl	8019c70 <uxr_get_input_best_effort_stream>
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	f43f af68 	beq.w	8018b00 <wait_session_status+0x34>
 8018c30:	9902      	ldr	r1, [sp, #8]
 8018c32:	f005 fc29 	bl	801e488 <uxr_receive_best_effort_message>
 8018c36:	2800      	cmp	r0, #0
 8018c38:	f43f af62 	beq.w	8018b00 <wait_session_status+0x34>
 8018c3c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018c40:	a90c      	add	r1, sp, #48	; 0x30
 8018c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c44:	4620      	mov	r0, r4
 8018c46:	f7ff fbc9 	bl	80183dc <read_submessage_list>
 8018c4a:	e759      	b.n	8018b00 <wait_session_status+0x34>
 8018c4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018c4e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018c52:	47a0      	blx	r4
 8018c54:	2001      	movs	r0, #1
 8018c56:	b01d      	add	sp, #116	; 0x74
 8018c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c5c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018c60:	a90c      	add	r1, sp, #48	; 0x30
 8018c62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c64:	4620      	mov	r0, r4
 8018c66:	f7ff fbb9 	bl	80183dc <read_submessage_list>
 8018c6a:	e7bc      	b.n	8018be6 <wait_session_status+0x11a>

08018c6c <uxr_delete_session_retries>:
 8018c6c:	b530      	push	{r4, r5, lr}
 8018c6e:	b08f      	sub	sp, #60	; 0x3c
 8018c70:	4604      	mov	r4, r0
 8018c72:	460d      	mov	r5, r1
 8018c74:	f000 fa34 	bl	80190e0 <uxr_session_header_offset>
 8018c78:	2300      	movs	r3, #0
 8018c7a:	2210      	movs	r2, #16
 8018c7c:	a902      	add	r1, sp, #8
 8018c7e:	9000      	str	r0, [sp, #0]
 8018c80:	a806      	add	r0, sp, #24
 8018c82:	f7fa faa5 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 8018c86:	a906      	add	r1, sp, #24
 8018c88:	4620      	mov	r0, r4
 8018c8a:	f000 f979 	bl	8018f80 <uxr_buffer_delete_session>
 8018c8e:	2200      	movs	r2, #0
 8018c90:	9b06      	ldr	r3, [sp, #24]
 8018c92:	4620      	mov	r0, r4
 8018c94:	4611      	mov	r1, r2
 8018c96:	f000 f9cf 	bl	8019038 <uxr_stamp_session_header>
 8018c9a:	a806      	add	r0, sp, #24
 8018c9c:	f7fa fad8 	bl	8013250 <ucdr_buffer_length>
 8018ca0:	462b      	mov	r3, r5
 8018ca2:	4602      	mov	r2, r0
 8018ca4:	a902      	add	r1, sp, #8
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	f7ff ff10 	bl	8018acc <wait_session_status>
 8018cac:	b118      	cbz	r0, 8018cb6 <uxr_delete_session_retries+0x4a>
 8018cae:	7960      	ldrb	r0, [r4, #5]
 8018cb0:	fab0 f080 	clz	r0, r0
 8018cb4:	0940      	lsrs	r0, r0, #5
 8018cb6:	b00f      	add	sp, #60	; 0x3c
 8018cb8:	bd30      	pop	{r4, r5, pc}
 8018cba:	bf00      	nop

08018cbc <uxr_create_session>:
 8018cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc0:	f100 0b08 	add.w	fp, r0, #8
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	b0ab      	sub	sp, #172	; 0xac
 8018cc8:	4658      	mov	r0, fp
 8018cca:	465e      	mov	r6, fp
 8018ccc:	f000 ff22 	bl	8019b14 <uxr_reset_stream_storage>
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	f000 fa05 	bl	80190e0 <uxr_session_header_offset>
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	221c      	movs	r2, #28
 8018cda:	a90b      	add	r1, sp, #44	; 0x2c
 8018cdc:	9000      	str	r0, [sp, #0]
 8018cde:	a812      	add	r0, sp, #72	; 0x48
 8018ce0:	f7fa fa76 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 8018ce4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018ce6:	a912      	add	r1, sp, #72	; 0x48
 8018ce8:	4620      	mov	r0, r4
 8018cea:	8a1a      	ldrh	r2, [r3, #16]
 8018cec:	3a04      	subs	r2, #4
 8018cee:	b292      	uxth	r2, r2
 8018cf0:	f000 f91c 	bl	8018f2c <uxr_buffer_create_session>
 8018cf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018cf6:	4620      	mov	r0, r4
 8018cf8:	f000 f98a 	bl	8019010 <uxr_stamp_create_session_header>
 8018cfc:	a812      	add	r0, sp, #72	; 0x48
 8018cfe:	f7fa faa7 	bl	8013250 <ucdr_buffer_length>
 8018d02:	23ff      	movs	r3, #255	; 0xff
 8018d04:	4681      	mov	r9, r0
 8018d06:	7163      	strb	r3, [r4, #5]
 8018d08:	230a      	movs	r3, #10
 8018d0a:	9303      	str	r3, [sp, #12]
 8018d0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018d0e:	464a      	mov	r2, r9
 8018d10:	a90b      	add	r1, sp, #44	; 0x2c
 8018d12:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018d16:	47a8      	blx	r5
 8018d18:	f001 f81c 	bl	8019d54 <uxr_millis>
 8018d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018d20:	4605      	mov	r5, r0
 8018d22:	e009      	b.n	8018d38 <uxr_create_session+0x7c>
 8018d24:	f001 f816 	bl	8019d54 <uxr_millis>
 8018d28:	1b40      	subs	r0, r0, r5
 8018d2a:	7962      	ldrb	r2, [r4, #5]
 8018d2c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	dd38      	ble.n	8018da6 <uxr_create_session+0xea>
 8018d34:	2aff      	cmp	r2, #255	; 0xff
 8018d36:	d13c      	bne.n	8018db2 <uxr_create_session+0xf6>
 8018d38:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018d3a:	a907      	add	r1, sp, #28
 8018d3c:	6897      	ldr	r7, [r2, #8]
 8018d3e:	6810      	ldr	r0, [r2, #0]
 8018d40:	aa08      	add	r2, sp, #32
 8018d42:	47b8      	blx	r7
 8018d44:	2800      	cmp	r0, #0
 8018d46:	d0ed      	beq.n	8018d24 <uxr_create_session+0x68>
 8018d48:	a81a      	add	r0, sp, #104	; 0x68
 8018d4a:	2700      	movs	r7, #0
 8018d4c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018d50:	f7fa fa50 	bl	80131f4 <ucdr_init_buffer>
 8018d54:	f10d 031a 	add.w	r3, sp, #26
 8018d58:	aa06      	add	r2, sp, #24
 8018d5a:	a91a      	add	r1, sp, #104	; 0x68
 8018d5c:	4620      	mov	r0, r4
 8018d5e:	f88d 7018 	strb.w	r7, [sp, #24]
 8018d62:	f000 f97d 	bl	8019060 <uxr_read_session_header>
 8018d66:	2800      	cmp	r0, #0
 8018d68:	d0dc      	beq.n	8018d24 <uxr_create_session+0x68>
 8018d6a:	4639      	mov	r1, r7
 8018d6c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018d70:	f000 fe9a 	bl	8019aa8 <uxr_stream_id_from_raw>
 8018d74:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018d78:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018d7c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018d80:	2f01      	cmp	r7, #1
 8018d82:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018d86:	d053      	beq.n	8018e30 <uxr_create_session+0x174>
 8018d88:	2f02      	cmp	r7, #2
 8018d8a:	d018      	beq.n	8018dbe <uxr_create_session+0x102>
 8018d8c:	2f00      	cmp	r7, #0
 8018d8e:	d1c9      	bne.n	8018d24 <uxr_create_session+0x68>
 8018d90:	4639      	mov	r1, r7
 8018d92:	4638      	mov	r0, r7
 8018d94:	f000 fe88 	bl	8019aa8 <uxr_stream_id_from_raw>
 8018d98:	a91a      	add	r1, sp, #104	; 0x68
 8018d9a:	4602      	mov	r2, r0
 8018d9c:	900a      	str	r0, [sp, #40]	; 0x28
 8018d9e:	4620      	mov	r0, r4
 8018da0:	f7ff fb1c 	bl	80183dc <read_submessage_list>
 8018da4:	e7be      	b.n	8018d24 <uxr_create_session+0x68>
 8018da6:	9b03      	ldr	r3, [sp, #12]
 8018da8:	3b01      	subs	r3, #1
 8018daa:	9303      	str	r3, [sp, #12]
 8018dac:	d001      	beq.n	8018db2 <uxr_create_session+0xf6>
 8018dae:	2aff      	cmp	r2, #255	; 0xff
 8018db0:	d0ac      	beq.n	8018d0c <uxr_create_session+0x50>
 8018db2:	2a00      	cmp	r2, #0
 8018db4:	d051      	beq.n	8018e5a <uxr_create_session+0x19e>
 8018db6:	2000      	movs	r0, #0
 8018db8:	b02b      	add	sp, #172	; 0xac
 8018dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dbe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018dc2:	4641      	mov	r1, r8
 8018dc4:	4630      	mov	r0, r6
 8018dc6:	9304      	str	r3, [sp, #16]
 8018dc8:	f000 ff5c 	bl	8019c84 <uxr_get_input_reliable_stream>
 8018dcc:	4682      	mov	sl, r0
 8018dce:	b348      	cbz	r0, 8018e24 <uxr_create_session+0x168>
 8018dd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018dd2:	a81a      	add	r0, sp, #104	; 0x68
 8018dd4:	9205      	str	r2, [sp, #20]
 8018dd6:	f7fa fa3f 	bl	8013258 <ucdr_buffer_remaining>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	f10d 0019 	add.w	r0, sp, #25
 8018de0:	9a05      	ldr	r2, [sp, #20]
 8018de2:	4659      	mov	r1, fp
 8018de4:	9000      	str	r0, [sp, #0]
 8018de6:	4650      	mov	r0, sl
 8018de8:	f005 fbd8 	bl	801e59c <uxr_receive_reliable_message>
 8018dec:	b1d0      	cbz	r0, 8018e24 <uxr_create_session+0x168>
 8018dee:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d038      	beq.n	8018e68 <uxr_create_session+0x1ac>
 8018df6:	9f04      	ldr	r7, [sp, #16]
 8018df8:	e00a      	b.n	8018e10 <uxr_create_session+0x154>
 8018dfa:	f04f 0302 	mov.w	r3, #2
 8018dfe:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8018e02:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8018e06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e0c:	f7ff fae6 	bl	80183dc <read_submessage_list>
 8018e10:	a922      	add	r1, sp, #136	; 0x88
 8018e12:	2204      	movs	r2, #4
 8018e14:	4650      	mov	r0, sl
 8018e16:	f005 fc43 	bl	801e6a0 <uxr_next_input_reliable_buffer_available>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	a922      	add	r1, sp, #136	; 0x88
 8018e1e:	4620      	mov	r0, r4
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d1ea      	bne.n	8018dfa <uxr_create_session+0x13e>
 8018e24:	4642      	mov	r2, r8
 8018e26:	9904      	ldr	r1, [sp, #16]
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f7ff f951 	bl	80180d0 <write_submessage_acknack.isra.0>
 8018e2e:	e779      	b.n	8018d24 <uxr_create_session+0x68>
 8018e30:	4641      	mov	r1, r8
 8018e32:	4630      	mov	r0, r6
 8018e34:	f000 ff1c 	bl	8019c70 <uxr_get_input_best_effort_stream>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	f43f af73 	beq.w	8018d24 <uxr_create_session+0x68>
 8018e3e:	4659      	mov	r1, fp
 8018e40:	f005 fb22 	bl	801e488 <uxr_receive_best_effort_message>
 8018e44:	2800      	cmp	r0, #0
 8018e46:	f43f af6d 	beq.w	8018d24 <uxr_create_session+0x68>
 8018e4a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018e4e:	a91a      	add	r1, sp, #104	; 0x68
 8018e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e52:	4620      	mov	r0, r4
 8018e54:	f7ff fac2 	bl	80183dc <read_submessage_list>
 8018e58:	e764      	b.n	8018d24 <uxr_create_session+0x68>
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f000 fe5a 	bl	8019b14 <uxr_reset_stream_storage>
 8018e60:	2001      	movs	r0, #1
 8018e62:	b02b      	add	sp, #172	; 0xac
 8018e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e68:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018e6c:	a91a      	add	r1, sp, #104	; 0x68
 8018e6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e70:	4620      	mov	r0, r4
 8018e72:	f7ff fab3 	bl	80183dc <read_submessage_list>
 8018e76:	e7be      	b.n	8018df6 <uxr_create_session+0x13a>

08018e78 <uxr_prepare_stream_to_write_submessage>:
 8018e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e7c:	b082      	sub	sp, #8
 8018e7e:	4604      	mov	r4, r0
 8018e80:	4610      	mov	r0, r2
 8018e82:	4615      	mov	r5, r2
 8018e84:	461e      	mov	r6, r3
 8018e86:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8018e8a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8018e8e:	f105 0904 	add.w	r9, r5, #4
 8018e92:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8018e96:	9101      	str	r1, [sp, #4]
 8018e98:	f000 ff56 	bl	8019d48 <uxr_submessage_padding>
 8018e9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018ea0:	4481      	add	r9, r0
 8018ea2:	2b01      	cmp	r3, #1
 8018ea4:	d01d      	beq.n	8018ee2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8018ea6:	2b02      	cmp	r3, #2
 8018ea8:	d116      	bne.n	8018ed8 <uxr_prepare_stream_to_write_submessage+0x60>
 8018eaa:	f104 0008 	add.w	r0, r4, #8
 8018eae:	4651      	mov	r1, sl
 8018eb0:	f000 fed2 	bl	8019c58 <uxr_get_output_reliable_stream>
 8018eb4:	4604      	mov	r4, r0
 8018eb6:	b158      	cbz	r0, 8018ed0 <uxr_prepare_stream_to_write_submessage+0x58>
 8018eb8:	4649      	mov	r1, r9
 8018eba:	4632      	mov	r2, r6
 8018ebc:	f005 fdb6 	bl	801ea2c <uxr_prepare_reliable_buffer_to_write>
 8018ec0:	4604      	mov	r4, r0
 8018ec2:	b12c      	cbz	r4, 8018ed0 <uxr_prepare_stream_to_write_submessage+0x58>
 8018ec4:	4643      	mov	r3, r8
 8018ec6:	b2aa      	uxth	r2, r5
 8018ec8:	4639      	mov	r1, r7
 8018eca:	4630      	mov	r0, r6
 8018ecc:	f000 fefc 	bl	8019cc8 <uxr_buffer_submessage_header>
 8018ed0:	4620      	mov	r0, r4
 8018ed2:	b002      	add	sp, #8
 8018ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ed8:	2400      	movs	r4, #0
 8018eda:	4620      	mov	r0, r4
 8018edc:	b002      	add	sp, #8
 8018ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ee2:	f104 0008 	add.w	r0, r4, #8
 8018ee6:	4651      	mov	r1, sl
 8018ee8:	f000 feae 	bl	8019c48 <uxr_get_output_best_effort_stream>
 8018eec:	4604      	mov	r4, r0
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	d0ee      	beq.n	8018ed0 <uxr_prepare_stream_to_write_submessage+0x58>
 8018ef2:	4649      	mov	r1, r9
 8018ef4:	4632      	mov	r2, r6
 8018ef6:	f005 fcc3 	bl	801e880 <uxr_prepare_best_effort_buffer_to_write>
 8018efa:	4604      	mov	r4, r0
 8018efc:	e7e1      	b.n	8018ec2 <uxr_prepare_stream_to_write_submessage+0x4a>
 8018efe:	bf00      	nop

08018f00 <uxr_init_session_info>:
 8018f00:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8018f04:	23ff      	movs	r3, #255	; 0xff
 8018f06:	7102      	strb	r2, [r0, #4]
 8018f08:	f880 c001 	strb.w	ip, [r0, #1]
 8018f0c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018f10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018f14:	7001      	strb	r1, [r0, #0]
 8018f16:	f880 c002 	strb.w	ip, [r0, #2]
 8018f1a:	7143      	strb	r3, [r0, #5]
 8018f1c:	70c2      	strb	r2, [r0, #3]
 8018f1e:	b500      	push	{lr}
 8018f20:	f04f 0e09 	mov.w	lr, #9
 8018f24:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018f28:	f85d fb04 	ldr.w	pc, [sp], #4

08018f2c <uxr_buffer_create_session>:
 8018f2c:	b530      	push	{r4, r5, lr}
 8018f2e:	2300      	movs	r3, #0
 8018f30:	b089      	sub	sp, #36	; 0x24
 8018f32:	4d12      	ldr	r5, [pc, #72]	; (8018f7c <uxr_buffer_create_session+0x50>)
 8018f34:	460c      	mov	r4, r1
 8018f36:	9307      	str	r3, [sp, #28]
 8018f38:	4619      	mov	r1, r3
 8018f3a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018f3e:	2201      	movs	r2, #1
 8018f40:	9301      	str	r3, [sp, #4]
 8018f42:	80c2      	strh	r2, [r0, #6]
 8018f44:	f88d 2004 	strb.w	r2, [sp, #4]
 8018f48:	682a      	ldr	r2, [r5, #0]
 8018f4a:	9303      	str	r3, [sp, #12]
 8018f4c:	9200      	str	r2, [sp, #0]
 8018f4e:	88aa      	ldrh	r2, [r5, #4]
 8018f50:	9306      	str	r3, [sp, #24]
 8018f52:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018f56:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8018f5a:	9202      	str	r2, [sp, #8]
 8018f5c:	7802      	ldrb	r2, [r0, #0]
 8018f5e:	4620      	mov	r0, r4
 8018f60:	f88d 200c 	strb.w	r2, [sp, #12]
 8018f64:	2210      	movs	r2, #16
 8018f66:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8018f6a:	f000 fead 	bl	8019cc8 <uxr_buffer_submessage_header>
 8018f6e:	4669      	mov	r1, sp
 8018f70:	4620      	mov	r0, r4
 8018f72:	f001 ff1f 	bl	801adb4 <uxr_serialize_CREATE_CLIENT_Payload>
 8018f76:	b009      	add	sp, #36	; 0x24
 8018f78:	bd30      	pop	{r4, r5, pc}
 8018f7a:	bf00      	nop
 8018f7c:	080244d4 	.word	0x080244d4

08018f80 <uxr_buffer_delete_session>:
 8018f80:	4a0c      	ldr	r2, [pc, #48]	; (8018fb4 <uxr_buffer_delete_session+0x34>)
 8018f82:	2302      	movs	r3, #2
 8018f84:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8018f88:	b510      	push	{r4, lr}
 8018f8a:	460c      	mov	r4, r1
 8018f8c:	b082      	sub	sp, #8
 8018f8e:	8911      	ldrh	r1, [r2, #8]
 8018f90:	2204      	movs	r2, #4
 8018f92:	80c3      	strh	r3, [r0, #6]
 8018f94:	2300      	movs	r3, #0
 8018f96:	f8ad 1006 	strh.w	r1, [sp, #6]
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	2103      	movs	r1, #3
 8018f9e:	f8ad c004 	strh.w	ip, [sp, #4]
 8018fa2:	f000 fe91 	bl	8019cc8 <uxr_buffer_submessage_header>
 8018fa6:	a901      	add	r1, sp, #4
 8018fa8:	4620      	mov	r0, r4
 8018faa:	f001 ffab 	bl	801af04 <uxr_serialize_DELETE_Payload>
 8018fae:	b002      	add	sp, #8
 8018fb0:	bd10      	pop	{r4, pc}
 8018fb2:	bf00      	nop
 8018fb4:	080244d4 	.word	0x080244d4

08018fb8 <uxr_read_create_session_status>:
 8018fb8:	b510      	push	{r4, lr}
 8018fba:	460b      	mov	r3, r1
 8018fbc:	b088      	sub	sp, #32
 8018fbe:	4604      	mov	r4, r0
 8018fc0:	a901      	add	r1, sp, #4
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f001 ffae 	bl	801af24 <uxr_deserialize_STATUS_AGENT_Payload>
 8018fc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018fcc:	7163      	strb	r3, [r4, #5]
 8018fce:	b008      	add	sp, #32
 8018fd0:	bd10      	pop	{r4, pc}
 8018fd2:	bf00      	nop

08018fd4 <uxr_read_delete_session_status>:
 8018fd4:	b510      	push	{r4, lr}
 8018fd6:	b084      	sub	sp, #16
 8018fd8:	4604      	mov	r4, r0
 8018fda:	4608      	mov	r0, r1
 8018fdc:	a902      	add	r1, sp, #8
 8018fde:	f001 ffd1 	bl	801af84 <uxr_deserialize_STATUS_Payload>
 8018fe2:	88e3      	ldrh	r3, [r4, #6]
 8018fe4:	2b02      	cmp	r3, #2
 8018fe6:	d001      	beq.n	8018fec <uxr_read_delete_session_status+0x18>
 8018fe8:	b004      	add	sp, #16
 8018fea:	bd10      	pop	{r4, pc}
 8018fec:	f10d 000a 	add.w	r0, sp, #10
 8018ff0:	f7fe fec4 	bl	8017d7c <uxr_object_id_from_raw>
 8018ff4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018ff8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8018ffc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019000:	b29b      	uxth	r3, r3
 8019002:	2b02      	cmp	r3, #2
 8019004:	d1f0      	bne.n	8018fe8 <uxr_read_delete_session_status+0x14>
 8019006:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801900a:	7163      	strb	r3, [r4, #5]
 801900c:	e7ec      	b.n	8018fe8 <uxr_read_delete_session_status+0x14>
 801900e:	bf00      	nop

08019010 <uxr_stamp_create_session_header>:
 8019010:	b510      	push	{r4, lr}
 8019012:	2208      	movs	r2, #8
 8019014:	b08a      	sub	sp, #40	; 0x28
 8019016:	4604      	mov	r4, r0
 8019018:	eb0d 0002 	add.w	r0, sp, r2
 801901c:	f7fa f8ea 	bl	80131f4 <ucdr_init_buffer>
 8019020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019024:	2300      	movs	r3, #0
 8019026:	a802      	add	r0, sp, #8
 8019028:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801902c:	9400      	str	r4, [sp, #0]
 801902e:	461a      	mov	r2, r3
 8019030:	f001 f846 	bl	801a0c0 <uxr_serialize_message_header>
 8019034:	b00a      	add	sp, #40	; 0x28
 8019036:	bd10      	pop	{r4, pc}

08019038 <uxr_stamp_session_header>:
 8019038:	b530      	push	{r4, r5, lr}
 801903a:	b08d      	sub	sp, #52	; 0x34
 801903c:	4604      	mov	r4, r0
 801903e:	460d      	mov	r5, r1
 8019040:	4619      	mov	r1, r3
 8019042:	a804      	add	r0, sp, #16
 8019044:	9203      	str	r2, [sp, #12]
 8019046:	2208      	movs	r2, #8
 8019048:	f7fa f8d4 	bl	80131f4 <ucdr_init_buffer>
 801904c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019050:	9b03      	ldr	r3, [sp, #12]
 8019052:	462a      	mov	r2, r5
 8019054:	a804      	add	r0, sp, #16
 8019056:	9400      	str	r4, [sp, #0]
 8019058:	f001 f832 	bl	801a0c0 <uxr_serialize_message_header>
 801905c:	b00d      	add	sp, #52	; 0x34
 801905e:	bd30      	pop	{r4, r5, pc}

08019060 <uxr_read_session_header>:
 8019060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019064:	4607      	mov	r7, r0
 8019066:	b084      	sub	sp, #16
 8019068:	4608      	mov	r0, r1
 801906a:	460c      	mov	r4, r1
 801906c:	4615      	mov	r5, r2
 801906e:	461e      	mov	r6, r3
 8019070:	f7fa f8f2 	bl	8013258 <ucdr_buffer_remaining>
 8019074:	2808      	cmp	r0, #8
 8019076:	d803      	bhi.n	8019080 <uxr_read_session_header+0x20>
 8019078:	2000      	movs	r0, #0
 801907a:	b004      	add	sp, #16
 801907c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019080:	f10d 080c 	add.w	r8, sp, #12
 8019084:	4633      	mov	r3, r6
 8019086:	462a      	mov	r2, r5
 8019088:	4620      	mov	r0, r4
 801908a:	f10d 010b 	add.w	r1, sp, #11
 801908e:	f8cd 8000 	str.w	r8, [sp]
 8019092:	f001 f833 	bl	801a0fc <uxr_deserialize_message_header>
 8019096:	783a      	ldrb	r2, [r7, #0]
 8019098:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801909c:	4293      	cmp	r3, r2
 801909e:	d1eb      	bne.n	8019078 <uxr_read_session_header+0x18>
 80190a0:	061b      	lsls	r3, r3, #24
 80190a2:	d41b      	bmi.n	80190dc <uxr_read_session_header+0x7c>
 80190a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80190a8:	787b      	ldrb	r3, [r7, #1]
 80190aa:	429a      	cmp	r2, r3
 80190ac:	d003      	beq.n	80190b6 <uxr_read_session_header+0x56>
 80190ae:	2001      	movs	r0, #1
 80190b0:	f080 0001 	eor.w	r0, r0, #1
 80190b4:	e7e1      	b.n	801907a <uxr_read_session_header+0x1a>
 80190b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80190ba:	1cb8      	adds	r0, r7, #2
 80190bc:	78bb      	ldrb	r3, [r7, #2]
 80190be:	429a      	cmp	r2, r3
 80190c0:	d1f5      	bne.n	80190ae <uxr_read_session_header+0x4e>
 80190c2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80190c6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80190ca:	429a      	cmp	r2, r3
 80190cc:	d1ef      	bne.n	80190ae <uxr_read_session_header+0x4e>
 80190ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80190d2:	7843      	ldrb	r3, [r0, #1]
 80190d4:	429a      	cmp	r2, r3
 80190d6:	d1ea      	bne.n	80190ae <uxr_read_session_header+0x4e>
 80190d8:	2000      	movs	r0, #0
 80190da:	e7e9      	b.n	80190b0 <uxr_read_session_header+0x50>
 80190dc:	2001      	movs	r0, #1
 80190de:	e7cc      	b.n	801907a <uxr_read_session_header+0x1a>

080190e0 <uxr_session_header_offset>:
 80190e0:	f990 3000 	ldrsb.w	r3, [r0]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	bfac      	ite	ge
 80190e8:	2008      	movge	r0, #8
 80190ea:	2004      	movlt	r0, #4
 80190ec:	4770      	bx	lr
 80190ee:	bf00      	nop

080190f0 <uxr_init_base_object_request>:
 80190f0:	b510      	push	{r4, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80190f8:	9101      	str	r1, [sp, #4]
 80190fa:	88c3      	ldrh	r3, [r0, #6]
 80190fc:	f1a3 010a 	sub.w	r1, r3, #10
 8019100:	b289      	uxth	r1, r1
 8019102:	42a1      	cmp	r1, r4
 8019104:	d80f      	bhi.n	8019126 <uxr_init_base_object_request+0x36>
 8019106:	3301      	adds	r3, #1
 8019108:	b29c      	uxth	r4, r3
 801910a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801910e:	b2db      	uxtb	r3, r3
 8019110:	80c4      	strh	r4, [r0, #6]
 8019112:	1c91      	adds	r1, r2, #2
 8019114:	9801      	ldr	r0, [sp, #4]
 8019116:	f882 c000 	strb.w	ip, [r2]
 801911a:	7053      	strb	r3, [r2, #1]
 801911c:	f7fe fe42 	bl	8017da4 <uxr_object_id_to_raw>
 8019120:	4620      	mov	r0, r4
 8019122:	b002      	add	sp, #8
 8019124:	bd10      	pop	{r4, pc}
 8019126:	230a      	movs	r3, #10
 8019128:	f04f 0c00 	mov.w	ip, #0
 801912c:	461c      	mov	r4, r3
 801912e:	e7ef      	b.n	8019110 <uxr_init_base_object_request+0x20>

08019130 <uxr_parse_base_object_request>:
 8019130:	b570      	push	{r4, r5, r6, lr}
 8019132:	4604      	mov	r4, r0
 8019134:	3002      	adds	r0, #2
 8019136:	460d      	mov	r5, r1
 8019138:	4616      	mov	r6, r2
 801913a:	f7fe fe1f 	bl	8017d7c <uxr_object_id_from_raw>
 801913e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8019142:	8028      	strh	r0, [r5, #0]
 8019144:	806b      	strh	r3, [r5, #2]
 8019146:	7822      	ldrb	r2, [r4, #0]
 8019148:	7863      	ldrb	r3, [r4, #1]
 801914a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801914e:	8033      	strh	r3, [r6, #0]
 8019150:	bd70      	pop	{r4, r5, r6, pc}
 8019152:	bf00      	nop

08019154 <uxr_init_framing_io>:
 8019154:	2300      	movs	r3, #0
 8019156:	7041      	strb	r1, [r0, #1]
 8019158:	7003      	strb	r3, [r0, #0]
 801915a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801915c:	4770      	bx	lr
 801915e:	bf00      	nop

08019160 <uxr_write_framed_msg>:
 8019160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019164:	4617      	mov	r7, r2
 8019166:	7842      	ldrb	r2, [r0, #1]
 8019168:	460e      	mov	r6, r1
 801916a:	b083      	sub	sp, #12
 801916c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019170:	469b      	mov	fp, r3
 8019172:	237e      	movs	r3, #126	; 0x7e
 8019174:	4604      	mov	r4, r0
 8019176:	2901      	cmp	r1, #1
 8019178:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801917c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019180:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8019184:	f240 8115 	bls.w	80193b2 <uxr_write_framed_msg+0x252>
 8019188:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801918c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019190:	2202      	movs	r2, #2
 8019192:	2901      	cmp	r1, #1
 8019194:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019198:	d952      	bls.n	8019240 <uxr_write_framed_msg+0xe0>
 801919a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801919c:	2103      	movs	r1, #3
 801919e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80191a2:	b2dd      	uxtb	r5, r3
 80191a4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80191a8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80191ac:	2a01      	cmp	r2, #1
 80191ae:	d95c      	bls.n	801926a <uxr_write_framed_msg+0x10a>
 80191b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191b2:	1862      	adds	r2, r4, r1
 80191b4:	3101      	adds	r1, #1
 80191b6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80191ba:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 80191be:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80191c2:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80191c6:	2a01      	cmp	r2, #1
 80191c8:	d961      	bls.n	801928e <uxr_write_framed_msg+0x12e>
 80191ca:	1c4a      	adds	r2, r1, #1
 80191cc:	4421      	add	r1, r4
 80191ce:	b2d2      	uxtb	r2, r2
 80191d0:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80191d4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d06a      	beq.n	80192b2 <uxr_write_framed_msg+0x152>
 80191dc:	f04f 0800 	mov.w	r8, #0
 80191e0:	46c1      	mov	r9, r8
 80191e2:	e016      	b.n	8019212 <uxr_write_framed_msg+0xb2>
 80191e4:	2a29      	cmp	r2, #41	; 0x29
 80191e6:	d868      	bhi.n	80192ba <uxr_write_framed_msg+0x15a>
 80191e8:	18a0      	adds	r0, r4, r2
 80191ea:	3201      	adds	r2, #1
 80191ec:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80191f0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80191f4:	ea88 0101 	eor.w	r1, r8, r1
 80191f8:	4b7d      	ldr	r3, [pc, #500]	; (80193f0 <uxr_write_framed_msg+0x290>)
 80191fa:	f109 0901 	add.w	r9, r9, #1
 80191fe:	b2c9      	uxtb	r1, r1
 8019200:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019204:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801920a:	454b      	cmp	r3, r9
 801920c:	d969      	bls.n	80192e2 <uxr_write_framed_msg+0x182>
 801920e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019212:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019216:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801921a:	2801      	cmp	r0, #1
 801921c:	d8e2      	bhi.n	80191e4 <uxr_write_framed_msg+0x84>
 801921e:	1c50      	adds	r0, r2, #1
 8019220:	b2c0      	uxtb	r0, r0
 8019222:	2829      	cmp	r0, #41	; 0x29
 8019224:	d849      	bhi.n	80192ba <uxr_write_framed_msg+0x15a>
 8019226:	18a0      	adds	r0, r4, r2
 8019228:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801922c:	3202      	adds	r2, #2
 801922e:	f081 0520 	eor.w	r5, r1, #32
 8019232:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019236:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801923a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801923e:	e7d9      	b.n	80191f4 <uxr_write_framed_msg+0x94>
 8019240:	2104      	movs	r1, #4
 8019242:	f04f 0c03 	mov.w	ip, #3
 8019246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019248:	4422      	add	r2, r4
 801924a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801924e:	44a4      	add	ip, r4
 8019250:	b2dd      	uxtb	r5, r3
 8019252:	f080 0020 	eor.w	r0, r0, #32
 8019256:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801925a:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801925e:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8019262:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019266:	2a01      	cmp	r2, #1
 8019268:	d8a2      	bhi.n	80191b0 <uxr_write_framed_msg+0x50>
 801926a:	1862      	adds	r2, r4, r1
 801926c:	207d      	movs	r0, #125	; 0x7d
 801926e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019270:	f085 0520 	eor.w	r5, r5, #32
 8019274:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8019278:	3102      	adds	r1, #2
 801927a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801927e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8019282:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019286:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801928a:	2a01      	cmp	r2, #1
 801928c:	d89d      	bhi.n	80191ca <uxr_write_framed_msg+0x6a>
 801928e:	1c4d      	adds	r5, r1, #1
 8019290:	1c8a      	adds	r2, r1, #2
 8019292:	f080 0020 	eor.w	r0, r0, #32
 8019296:	4421      	add	r1, r4
 8019298:	fa54 f585 	uxtab	r5, r4, r5
 801929c:	b2d2      	uxtb	r2, r2
 801929e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80192a2:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 80192a6:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80192aa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d194      	bne.n	80191dc <uxr_write_framed_msg+0x7c>
 80192b2:	4619      	mov	r1, r3
 80192b4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80192b8:	e019      	b.n	80192ee <uxr_write_framed_msg+0x18e>
 80192ba:	2500      	movs	r5, #0
 80192bc:	e000      	b.n	80192c0 <uxr_write_framed_msg+0x160>
 80192be:	b160      	cbz	r0, 80192da <uxr_write_framed_msg+0x17a>
 80192c0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80192c4:	1b52      	subs	r2, r2, r5
 80192c6:	4653      	mov	r3, sl
 80192c8:	4638      	mov	r0, r7
 80192ca:	4421      	add	r1, r4
 80192cc:	47b0      	blx	r6
 80192ce:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80192d2:	4405      	add	r5, r0
 80192d4:	4295      	cmp	r5, r2
 80192d6:	d3f2      	bcc.n	80192be <uxr_write_framed_msg+0x15e>
 80192d8:	d066      	beq.n	80193a8 <uxr_write_framed_msg+0x248>
 80192da:	2000      	movs	r0, #0
 80192dc:	b003      	add	sp, #12
 80192de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192e2:	fa5f f188 	uxtb.w	r1, r8
 80192e6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80192ea:	f8ad 8004 	strh.w	r8, [sp, #4]
 80192ee:	f04f 0900 	mov.w	r9, #0
 80192f2:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80192f6:	46c8      	mov	r8, r9
 80192f8:	e013      	b.n	8019322 <uxr_write_framed_msg+0x1c2>
 80192fa:	2a29      	cmp	r2, #41	; 0x29
 80192fc:	d824      	bhi.n	8019348 <uxr_write_framed_msg+0x1e8>
 80192fe:	18a3      	adds	r3, r4, r2
 8019300:	3201      	adds	r2, #1
 8019302:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8019306:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801930a:	f109 0901 	add.w	r9, r9, #1
 801930e:	f1b9 0f02 	cmp.w	r9, #2
 8019312:	d02d      	beq.n	8019370 <uxr_write_framed_msg+0x210>
 8019314:	f109 0308 	add.w	r3, r9, #8
 8019318:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801931c:	446b      	add	r3, sp
 801931e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019322:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8019326:	2b01      	cmp	r3, #1
 8019328:	d8e7      	bhi.n	80192fa <uxr_write_framed_msg+0x19a>
 801932a:	1c53      	adds	r3, r2, #1
 801932c:	b2db      	uxtb	r3, r3
 801932e:	2b29      	cmp	r3, #41	; 0x29
 8019330:	d80a      	bhi.n	8019348 <uxr_write_framed_msg+0x1e8>
 8019332:	18a3      	adds	r3, r4, r2
 8019334:	f081 0120 	eor.w	r1, r1, #32
 8019338:	3202      	adds	r2, #2
 801933a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801933e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8019342:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019346:	e7e0      	b.n	801930a <uxr_write_framed_msg+0x1aa>
 8019348:	2500      	movs	r5, #0
 801934a:	e001      	b.n	8019350 <uxr_write_framed_msg+0x1f0>
 801934c:	2800      	cmp	r0, #0
 801934e:	d0c4      	beq.n	80192da <uxr_write_framed_msg+0x17a>
 8019350:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019354:	1b52      	subs	r2, r2, r5
 8019356:	4653      	mov	r3, sl
 8019358:	4638      	mov	r0, r7
 801935a:	4421      	add	r1, r4
 801935c:	47b0      	blx	r6
 801935e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019362:	4405      	add	r5, r0
 8019364:	4295      	cmp	r5, r2
 8019366:	d3f1      	bcc.n	801934c <uxr_write_framed_msg+0x1ec>
 8019368:	d1b7      	bne.n	80192da <uxr_write_framed_msg+0x17a>
 801936a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801936e:	e7d1      	b.n	8019314 <uxr_write_framed_msg+0x1b4>
 8019370:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019374:	b19a      	cbz	r2, 801939e <uxr_write_framed_msg+0x23e>
 8019376:	2500      	movs	r5, #0
 8019378:	e001      	b.n	801937e <uxr_write_framed_msg+0x21e>
 801937a:	2800      	cmp	r0, #0
 801937c:	d0ad      	beq.n	80192da <uxr_write_framed_msg+0x17a>
 801937e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019382:	1b52      	subs	r2, r2, r5
 8019384:	4653      	mov	r3, sl
 8019386:	4638      	mov	r0, r7
 8019388:	4421      	add	r1, r4
 801938a:	47b0      	blx	r6
 801938c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019390:	4405      	add	r5, r0
 8019392:	4295      	cmp	r5, r2
 8019394:	d3f1      	bcc.n	801937a <uxr_write_framed_msg+0x21a>
 8019396:	d1a0      	bne.n	80192da <uxr_write_framed_msg+0x17a>
 8019398:	2300      	movs	r3, #0
 801939a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801939e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193a0:	b298      	uxth	r0, r3
 80193a2:	b003      	add	sp, #12
 80193a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a8:	f04f 0300 	mov.w	r3, #0
 80193ac:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80193b0:	e72a      	b.n	8019208 <uxr_write_framed_msg+0xa8>
 80193b2:	217d      	movs	r1, #125	; 0x7d
 80193b4:	f082 0220 	eor.w	r2, r2, #32
 80193b8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80193bc:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80193c0:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80193c4:	2203      	movs	r2, #3
 80193c6:	2901      	cmp	r1, #1
 80193c8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193cc:	d803      	bhi.n	80193d6 <uxr_write_framed_msg+0x276>
 80193ce:	2105      	movs	r1, #5
 80193d0:	f04f 0c04 	mov.w	ip, #4
 80193d4:	e737      	b.n	8019246 <uxr_write_framed_msg+0xe6>
 80193d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193d8:	2104      	movs	r1, #4
 80193da:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80193de:	b2dd      	uxtb	r5, r3
 80193e0:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80193e4:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80193e8:	2a01      	cmp	r2, #1
 80193ea:	f63f aee1 	bhi.w	80191b0 <uxr_write_framed_msg+0x50>
 80193ee:	e73c      	b.n	801926a <uxr_write_framed_msg+0x10a>
 80193f0:	080254bc 	.word	0x080254bc

080193f4 <uxr_framing_read_transport>:
 80193f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f8:	4604      	mov	r4, r0
 80193fa:	b085      	sub	sp, #20
 80193fc:	4692      	mov	sl, r2
 80193fe:	4689      	mov	r9, r1
 8019400:	461d      	mov	r5, r3
 8019402:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019404:	f000 fca6 	bl	8019d54 <uxr_millis>
 8019408:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801940c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019410:	4680      	mov	r8, r0
 8019412:	42ba      	cmp	r2, r7
 8019414:	d05f      	beq.n	80194d6 <uxr_framing_read_transport+0xe2>
 8019416:	d817      	bhi.n	8019448 <uxr_framing_read_transport+0x54>
 8019418:	3f01      	subs	r7, #1
 801941a:	1aba      	subs	r2, r7, r2
 801941c:	2700      	movs	r7, #0
 801941e:	b2d2      	uxtb	r2, r2
 8019420:	42b2      	cmp	r2, r6
 8019422:	d81a      	bhi.n	801945a <uxr_framing_read_transport+0x66>
 8019424:	19d3      	adds	r3, r2, r7
 8019426:	42b3      	cmp	r3, r6
 8019428:	d852      	bhi.n	80194d0 <uxr_framing_read_transport+0xdc>
 801942a:	b9d2      	cbnz	r2, 8019462 <uxr_framing_read_transport+0x6e>
 801942c:	2600      	movs	r6, #0
 801942e:	f000 fc91 	bl	8019d54 <uxr_millis>
 8019432:	682b      	ldr	r3, [r5, #0]
 8019434:	eba0 0008 	sub.w	r0, r0, r8
 8019438:	1a1b      	subs	r3, r3, r0
 801943a:	4630      	mov	r0, r6
 801943c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019440:	602b      	str	r3, [r5, #0]
 8019442:	b005      	add	sp, #20
 8019444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019448:	2f00      	cmp	r7, #0
 801944a:	d060      	beq.n	801950e <uxr_framing_read_transport+0x11a>
 801944c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8019450:	3f01      	subs	r7, #1
 8019452:	b2d2      	uxtb	r2, r2
 8019454:	b2ff      	uxtb	r7, r7
 8019456:	42b2      	cmp	r2, r6
 8019458:	d9e4      	bls.n	8019424 <uxr_framing_read_transport+0x30>
 801945a:	b2f2      	uxtb	r2, r6
 801945c:	2700      	movs	r7, #0
 801945e:	2a00      	cmp	r2, #0
 8019460:	d0e4      	beq.n	801942c <uxr_framing_read_transport+0x38>
 8019462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019464:	4650      	mov	r0, sl
 8019466:	9203      	str	r2, [sp, #12]
 8019468:	9300      	str	r3, [sp, #0]
 801946a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801946e:	682b      	ldr	r3, [r5, #0]
 8019470:	3102      	adds	r1, #2
 8019472:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019518 <uxr_framing_read_transport+0x124>
 8019476:	4421      	add	r1, r4
 8019478:	47c8      	blx	r9
 801947a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801947e:	4606      	mov	r6, r0
 8019480:	4403      	add	r3, r0
 8019482:	0859      	lsrs	r1, r3, #1
 8019484:	fbab 2101 	umull	r2, r1, fp, r1
 8019488:	222a      	movs	r2, #42	; 0x2a
 801948a:	0889      	lsrs	r1, r1, #2
 801948c:	fb02 3111 	mls	r1, r2, r1, r3
 8019490:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8019494:	2800      	cmp	r0, #0
 8019496:	d0c9      	beq.n	801942c <uxr_framing_read_transport+0x38>
 8019498:	9a03      	ldr	r2, [sp, #12]
 801949a:	4290      	cmp	r0, r2
 801949c:	d1c7      	bne.n	801942e <uxr_framing_read_transport+0x3a>
 801949e:	2f00      	cmp	r7, #0
 80194a0:	d0c5      	beq.n	801942e <uxr_framing_read_transport+0x3a>
 80194a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194a4:	3102      	adds	r1, #2
 80194a6:	463a      	mov	r2, r7
 80194a8:	4650      	mov	r0, sl
 80194aa:	4421      	add	r1, r4
 80194ac:	9300      	str	r3, [sp, #0]
 80194ae:	2300      	movs	r3, #0
 80194b0:	47c8      	blx	r9
 80194b2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80194b6:	4406      	add	r6, r0
 80194b8:	1813      	adds	r3, r2, r0
 80194ba:	085a      	lsrs	r2, r3, #1
 80194bc:	fbab 1b02 	umull	r1, fp, fp, r2
 80194c0:	222a      	movs	r2, #42	; 0x2a
 80194c2:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80194c6:	fb02 331b 	mls	r3, r2, fp, r3
 80194ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80194ce:	e7ae      	b.n	801942e <uxr_framing_read_transport+0x3a>
 80194d0:	1ab6      	subs	r6, r6, r2
 80194d2:	b2f7      	uxtb	r7, r6
 80194d4:	e7a9      	b.n	801942a <uxr_framing_read_transport+0x36>
 80194d6:	2300      	movs	r3, #0
 80194d8:	2e28      	cmp	r6, #40	; 0x28
 80194da:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80194dc:	d9bd      	bls.n	801945a <uxr_framing_read_transport+0x66>
 80194de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194e0:	2229      	movs	r2, #41	; 0x29
 80194e2:	1ca1      	adds	r1, r4, #2
 80194e4:	4650      	mov	r0, sl
 80194e6:	9300      	str	r3, [sp, #0]
 80194e8:	682b      	ldr	r3, [r5, #0]
 80194ea:	47c8      	blx	r9
 80194ec:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80194f0:	4606      	mov	r6, r0
 80194f2:	212a      	movs	r1, #42	; 0x2a
 80194f4:	4403      	add	r3, r0
 80194f6:	4808      	ldr	r0, [pc, #32]	; (8019518 <uxr_framing_read_transport+0x124>)
 80194f8:	085a      	lsrs	r2, r3, #1
 80194fa:	fba0 0202 	umull	r0, r2, r0, r2
 80194fe:	0892      	lsrs	r2, r2, #2
 8019500:	fb01 3312 	mls	r3, r1, r2, r3
 8019504:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019508:	2e00      	cmp	r6, #0
 801950a:	d08f      	beq.n	801942c <uxr_framing_read_transport+0x38>
 801950c:	e78f      	b.n	801942e <uxr_framing_read_transport+0x3a>
 801950e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8019512:	b2d2      	uxtb	r2, r2
 8019514:	e784      	b.n	8019420 <uxr_framing_read_transport+0x2c>
 8019516:	bf00      	nop
 8019518:	30c30c31 	.word	0x30c30c31

0801951c <uxr_read_framed_msg>:
 801951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019520:	461e      	mov	r6, r3
 8019522:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019526:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801952a:	b083      	sub	sp, #12
 801952c:	4604      	mov	r4, r0
 801952e:	4688      	mov	r8, r1
 8019530:	429d      	cmp	r5, r3
 8019532:	4691      	mov	r9, r2
 8019534:	f000 818c 	beq.w	8019850 <uxr_read_framed_msg+0x334>
 8019538:	7823      	ldrb	r3, [r4, #0]
 801953a:	4dc3      	ldr	r5, [pc, #780]	; (8019848 <uxr_read_framed_msg+0x32c>)
 801953c:	4fc3      	ldr	r7, [pc, #780]	; (801984c <uxr_read_framed_msg+0x330>)
 801953e:	2b07      	cmp	r3, #7
 8019540:	d8fd      	bhi.n	801953e <uxr_read_framed_msg+0x22>
 8019542:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019546:	011c      	.short	0x011c
 8019548:	00d900fb 	.word	0x00d900fb
 801954c:	008f00ba 	.word	0x008f00ba
 8019550:	00320051 	.word	0x00320051
 8019554:	0008      	.short	0x0008
 8019556:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801955a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801955e:	4299      	cmp	r1, r3
 8019560:	f000 814d 	beq.w	80197fe <uxr_read_framed_msg+0x2e2>
 8019564:	18e2      	adds	r2, r4, r3
 8019566:	7892      	ldrb	r2, [r2, #2]
 8019568:	2a7d      	cmp	r2, #125	; 0x7d
 801956a:	f000 81b8 	beq.w	80198de <uxr_read_framed_msg+0x3c2>
 801956e:	3301      	adds	r3, #1
 8019570:	212a      	movs	r1, #42	; 0x2a
 8019572:	2a7e      	cmp	r2, #126	; 0x7e
 8019574:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8019578:	fba5 c000 	umull	ip, r0, r5, r0
 801957c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019580:	fb01 3310 	mls	r3, r1, r0, r3
 8019584:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019588:	f000 8257 	beq.w	8019a3a <uxr_read_framed_msg+0x51e>
 801958c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801958e:	2000      	movs	r0, #0
 8019590:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8019592:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019596:	7020      	strb	r0, [r4, #0]
 8019598:	b29b      	uxth	r3, r3
 801959a:	4299      	cmp	r1, r3
 801959c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801959e:	f000 8178 	beq.w	8019892 <uxr_read_framed_msg+0x376>
 80195a2:	2000      	movs	r0, #0
 80195a4:	b003      	add	sp, #12
 80195a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195aa:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80195ae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80195b2:	4298      	cmp	r0, r3
 80195b4:	f000 8132 	beq.w	801981c <uxr_read_framed_msg+0x300>
 80195b8:	18e2      	adds	r2, r4, r3
 80195ba:	7891      	ldrb	r1, [r2, #2]
 80195bc:	297d      	cmp	r1, #125	; 0x7d
 80195be:	f000 8170 	beq.w	80198a2 <uxr_read_framed_msg+0x386>
 80195c2:	3301      	adds	r3, #1
 80195c4:	202a      	movs	r0, #42	; 0x2a
 80195c6:	297e      	cmp	r1, #126	; 0x7e
 80195c8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80195cc:	fba5 c202 	umull	ip, r2, r5, r2
 80195d0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80195d4:	fb00 3312 	mls	r3, r0, r2, r3
 80195d8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195dc:	f000 821d 	beq.w	8019a1a <uxr_read_framed_msg+0x4fe>
 80195e0:	2307      	movs	r3, #7
 80195e2:	86a1      	strh	r1, [r4, #52]	; 0x34
 80195e4:	7023      	strb	r3, [r4, #0]
 80195e6:	e7aa      	b.n	801953e <uxr_read_framed_msg+0x22>
 80195e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80195ea:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80195ee:	459e      	cmp	lr, r3
 80195f0:	d827      	bhi.n	8019642 <uxr_read_framed_msg+0x126>
 80195f2:	e032      	b.n	801965a <uxr_read_framed_msg+0x13e>
 80195f4:	fba5 b101 	umull	fp, r1, r5, r1
 80195f8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80195fc:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019600:	0889      	lsrs	r1, r1, #2
 8019602:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019606:	fb0b 0111 	mls	r1, fp, r1, r0
 801960a:	f000 80d4 	beq.w	80197b6 <uxr_read_framed_msg+0x29a>
 801960e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019612:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019616:	f000 80cb 	beq.w	80197b0 <uxr_read_framed_msg+0x294>
 801961a:	f806 c003 	strb.w	ip, [r6, r3]
 801961e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019620:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019622:	ea80 010c 	eor.w	r1, r0, ip
 8019626:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801962a:	3301      	adds	r3, #1
 801962c:	b2c9      	uxtb	r1, r1
 801962e:	b29b      	uxth	r3, r3
 8019630:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019634:	4573      	cmp	r3, lr
 8019636:	8663      	strh	r3, [r4, #50]	; 0x32
 8019638:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801963c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801963e:	f080 811d 	bcs.w	801987c <uxr_read_framed_msg+0x360>
 8019642:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019646:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801964a:	1c50      	adds	r0, r2, #1
 801964c:	eb04 0c02 	add.w	ip, r4, r2
 8019650:	4592      	cmp	sl, r2
 8019652:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019656:	d1cd      	bne.n	80195f4 <uxr_read_framed_msg+0xd8>
 8019658:	459e      	cmp	lr, r3
 801965a:	f040 8114 	bne.w	8019886 <uxr_read_framed_msg+0x36a>
 801965e:	2306      	movs	r3, #6
 8019660:	7023      	strb	r3, [r4, #0]
 8019662:	e76c      	b.n	801953e <uxr_read_framed_msg+0x22>
 8019664:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019668:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801966c:	4298      	cmp	r0, r3
 801966e:	f000 80c6 	beq.w	80197fe <uxr_read_framed_msg+0x2e2>
 8019672:	18e2      	adds	r2, r4, r3
 8019674:	7891      	ldrb	r1, [r2, #2]
 8019676:	297d      	cmp	r1, #125	; 0x7d
 8019678:	f000 8193 	beq.w	80199a2 <uxr_read_framed_msg+0x486>
 801967c:	3301      	adds	r3, #1
 801967e:	202a      	movs	r0, #42	; 0x2a
 8019680:	297e      	cmp	r1, #126	; 0x7e
 8019682:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019686:	fba5 c202 	umull	ip, r2, r5, r2
 801968a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801968e:	fb00 3312 	mls	r3, r0, r2, r3
 8019692:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019696:	f000 81d0 	beq.w	8019a3a <uxr_read_framed_msg+0x51e>
 801969a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801969c:	2000      	movs	r0, #0
 801969e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80196a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80196a4:	8660      	strh	r0, [r4, #50]	; 0x32
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	86e0      	strh	r0, [r4, #54]	; 0x36
 80196aa:	428b      	cmp	r3, r1
 80196ac:	8623      	strh	r3, [r4, #48]	; 0x30
 80196ae:	f240 80e2 	bls.w	8019876 <uxr_read_framed_msg+0x35a>
 80196b2:	7020      	strb	r0, [r4, #0]
 80196b4:	b003      	add	sp, #12
 80196b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ba:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80196be:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80196c2:	4298      	cmp	r0, r3
 80196c4:	f000 80aa 	beq.w	801981c <uxr_read_framed_msg+0x300>
 80196c8:	18e2      	adds	r2, r4, r3
 80196ca:	7891      	ldrb	r1, [r2, #2]
 80196cc:	297d      	cmp	r1, #125	; 0x7d
 80196ce:	f000 8186 	beq.w	80199de <uxr_read_framed_msg+0x4c2>
 80196d2:	3301      	adds	r3, #1
 80196d4:	202a      	movs	r0, #42	; 0x2a
 80196d6:	297e      	cmp	r1, #126	; 0x7e
 80196d8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80196dc:	fba5 c202 	umull	ip, r2, r5, r2
 80196e0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80196e4:	fb00 3312 	mls	r3, r0, r2, r3
 80196e8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80196ec:	f000 8195 	beq.w	8019a1a <uxr_read_framed_msg+0x4fe>
 80196f0:	2304      	movs	r3, #4
 80196f2:	8621      	strh	r1, [r4, #48]	; 0x30
 80196f4:	7023      	strb	r3, [r4, #0]
 80196f6:	e722      	b.n	801953e <uxr_read_framed_msg+0x22>
 80196f8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80196fc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019700:	4290      	cmp	r0, r2
 8019702:	f000 80b4 	beq.w	801986e <uxr_read_framed_msg+0x352>
 8019706:	18a3      	adds	r3, r4, r2
 8019708:	7899      	ldrb	r1, [r3, #2]
 801970a:	297d      	cmp	r1, #125	; 0x7d
 801970c:	f000 8107 	beq.w	801991e <uxr_read_framed_msg+0x402>
 8019710:	3201      	adds	r2, #1
 8019712:	232a      	movs	r3, #42	; 0x2a
 8019714:	297e      	cmp	r1, #126	; 0x7e
 8019716:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801971a:	fba5 c000 	umull	ip, r0, r5, r0
 801971e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019722:	fb03 2210 	mls	r2, r3, r0, r2
 8019726:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801972a:	f000 818a 	beq.w	8019a42 <uxr_read_framed_msg+0x526>
 801972e:	7863      	ldrb	r3, [r4, #1]
 8019730:	428b      	cmp	r3, r1
 8019732:	bf0c      	ite	eq
 8019734:	2303      	moveq	r3, #3
 8019736:	2300      	movne	r3, #0
 8019738:	7023      	strb	r3, [r4, #0]
 801973a:	e700      	b.n	801953e <uxr_read_framed_msg+0x22>
 801973c:	2300      	movs	r3, #0
 801973e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019742:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019746:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801974a:	4299      	cmp	r1, r3
 801974c:	d06a      	beq.n	8019824 <uxr_read_framed_msg+0x308>
 801974e:	18e2      	adds	r2, r4, r3
 8019750:	7890      	ldrb	r0, [r2, #2]
 8019752:	287d      	cmp	r0, #125	; 0x7d
 8019754:	f000 8100 	beq.w	8019958 <uxr_read_framed_msg+0x43c>
 8019758:	3301      	adds	r3, #1
 801975a:	212a      	movs	r1, #42	; 0x2a
 801975c:	287e      	cmp	r0, #126	; 0x7e
 801975e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8019762:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019766:	fba5 c202 	umull	ip, r2, r5, r2
 801976a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801976e:	fb01 3312 	mls	r3, r1, r2, r3
 8019772:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019776:	d055      	beq.n	8019824 <uxr_read_framed_msg+0x308>
 8019778:	2302      	movs	r3, #2
 801977a:	7023      	strb	r3, [r4, #0]
 801977c:	e6df      	b.n	801953e <uxr_read_framed_msg+0x22>
 801977e:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8019782:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8019786:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801978a:	1c5a      	adds	r2, r3, #1
 801978c:	459c      	cmp	ip, r3
 801978e:	eb04 0103 	add.w	r1, r4, r3
 8019792:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019796:	f43f af04 	beq.w	80195a2 <uxr_read_framed_msg+0x86>
 801979a:	fba5 0303 	umull	r0, r3, r5, r3
 801979e:	7889      	ldrb	r1, [r1, #2]
 80197a0:	089b      	lsrs	r3, r3, #2
 80197a2:	297e      	cmp	r1, #126	; 0x7e
 80197a4:	fb0e 2313 	mls	r3, lr, r3, r2
 80197a8:	b2db      	uxtb	r3, r3
 80197aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80197ae:	d1ec      	bne.n	801978a <uxr_read_framed_msg+0x26e>
 80197b0:	2301      	movs	r3, #1
 80197b2:	7023      	strb	r3, [r4, #0]
 80197b4:	e6c3      	b.n	801953e <uxr_read_framed_msg+0x22>
 80197b6:	1c50      	adds	r0, r2, #1
 80197b8:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80197bc:	3202      	adds	r2, #2
 80197be:	0841      	lsrs	r1, r0, #1
 80197c0:	fba5 c101 	umull	ip, r1, r5, r1
 80197c4:	0889      	lsrs	r1, r1, #2
 80197c6:	fb0b 0111 	mls	r1, fp, r1, r0
 80197ca:	1860      	adds	r0, r4, r1
 80197cc:	b2c9      	uxtb	r1, r1
 80197ce:	458a      	cmp	sl, r1
 80197d0:	f43f af42 	beq.w	8019658 <uxr_read_framed_msg+0x13c>
 80197d4:	0851      	lsrs	r1, r2, #1
 80197d6:	7880      	ldrb	r0, [r0, #2]
 80197d8:	fba5 a101 	umull	sl, r1, r5, r1
 80197dc:	287e      	cmp	r0, #126	; 0x7e
 80197de:	f080 0c20 	eor.w	ip, r0, #32
 80197e2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80197e6:	fb0b 2211 	mls	r2, fp, r1, r2
 80197ea:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80197ee:	f47f af14 	bne.w	801961a <uxr_read_framed_msg+0xfe>
 80197f2:	459e      	cmp	lr, r3
 80197f4:	f43f af33 	beq.w	801965e <uxr_read_framed_msg+0x142>
 80197f8:	2301      	movs	r3, #1
 80197fa:	7023      	strb	r3, [r4, #0]
 80197fc:	e69f      	b.n	801953e <uxr_read_framed_msg+0x22>
 80197fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019800:	9300      	str	r3, [sp, #0]
 8019802:	2301      	movs	r3, #1
 8019804:	9301      	str	r3, [sp, #4]
 8019806:	464a      	mov	r2, r9
 8019808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801980a:	4641      	mov	r1, r8
 801980c:	4620      	mov	r0, r4
 801980e:	f7ff fdf1 	bl	80193f4 <uxr_framing_read_transport>
 8019812:	2800      	cmp	r0, #0
 8019814:	f43f aec5 	beq.w	80195a2 <uxr_read_framed_msg+0x86>
 8019818:	7823      	ldrb	r3, [r4, #0]
 801981a:	e690      	b.n	801953e <uxr_read_framed_msg+0x22>
 801981c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801981e:	9300      	str	r3, [sp, #0]
 8019820:	2302      	movs	r3, #2
 8019822:	e7ef      	b.n	8019804 <uxr_read_framed_msg+0x2e8>
 8019824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019826:	464a      	mov	r2, r9
 8019828:	4641      	mov	r1, r8
 801982a:	4620      	mov	r0, r4
 801982c:	9300      	str	r3, [sp, #0]
 801982e:	2304      	movs	r3, #4
 8019830:	9301      	str	r3, [sp, #4]
 8019832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019834:	f7ff fdde 	bl	80193f4 <uxr_framing_read_transport>
 8019838:	2800      	cmp	r0, #0
 801983a:	d1ed      	bne.n	8019818 <uxr_read_framed_msg+0x2fc>
 801983c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019840:	2b7e      	cmp	r3, #126	; 0x7e
 8019842:	d0e9      	beq.n	8019818 <uxr_read_framed_msg+0x2fc>
 8019844:	e6ad      	b.n	80195a2 <uxr_read_framed_msg+0x86>
 8019846:	bf00      	nop
 8019848:	30c30c31 	.word	0x30c30c31
 801984c:	080254bc 	.word	0x080254bc
 8019850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019852:	9300      	str	r3, [sp, #0]
 8019854:	2305      	movs	r3, #5
 8019856:	9301      	str	r3, [sp, #4]
 8019858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801985a:	f7ff fdcb 	bl	80193f4 <uxr_framing_read_transport>
 801985e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019862:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019866:	429a      	cmp	r2, r3
 8019868:	f43f ae9b 	beq.w	80195a2 <uxr_read_framed_msg+0x86>
 801986c:	e664      	b.n	8019538 <uxr_read_framed_msg+0x1c>
 801986e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019870:	9300      	str	r3, [sp, #0]
 8019872:	2303      	movs	r3, #3
 8019874:	e7c6      	b.n	8019804 <uxr_read_framed_msg+0x2e8>
 8019876:	2305      	movs	r3, #5
 8019878:	7023      	strb	r3, [r4, #0]
 801987a:	e660      	b.n	801953e <uxr_read_framed_msg+0x22>
 801987c:	f43f aeef 	beq.w	801965e <uxr_read_framed_msg+0x142>
 8019880:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019884:	d094      	beq.n	80197b0 <uxr_read_framed_msg+0x294>
 8019886:	ebae 0303 	sub.w	r3, lr, r3
 801988a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801988c:	3302      	adds	r3, #2
 801988e:	9200      	str	r2, [sp, #0]
 8019890:	e7b8      	b.n	8019804 <uxr_read_framed_msg+0x2e8>
 8019892:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019898:	7013      	strb	r3, [r2, #0]
 801989a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801989c:	b003      	add	sp, #12
 801989e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a2:	1c59      	adds	r1, r3, #1
 80198a4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80198a8:	084a      	lsrs	r2, r1, #1
 80198aa:	fba5 e202 	umull	lr, r2, r5, r2
 80198ae:	0892      	lsrs	r2, r2, #2
 80198b0:	fb0c 1212 	mls	r2, ip, r2, r1
 80198b4:	b2d1      	uxtb	r1, r2
 80198b6:	4288      	cmp	r0, r1
 80198b8:	d0b0      	beq.n	801981c <uxr_read_framed_msg+0x300>
 80198ba:	3302      	adds	r3, #2
 80198bc:	4422      	add	r2, r4
 80198be:	7891      	ldrb	r1, [r2, #2]
 80198c0:	085a      	lsrs	r2, r3, #1
 80198c2:	fba5 0202 	umull	r0, r2, r5, r2
 80198c6:	297e      	cmp	r1, #126	; 0x7e
 80198c8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80198cc:	fb0c 3312 	mls	r3, ip, r2, r3
 80198d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80198d4:	f000 80a1 	beq.w	8019a1a <uxr_read_framed_msg+0x4fe>
 80198d8:	f081 0120 	eor.w	r1, r1, #32
 80198dc:	e680      	b.n	80195e0 <uxr_read_framed_msg+0xc4>
 80198de:	f103 0c01 	add.w	ip, r3, #1
 80198e2:	202a      	movs	r0, #42	; 0x2a
 80198e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80198e8:	fba5 e202 	umull	lr, r2, r5, r2
 80198ec:	0892      	lsrs	r2, r2, #2
 80198ee:	fb00 c212 	mls	r2, r0, r2, ip
 80198f2:	fa5f fc82 	uxtb.w	ip, r2
 80198f6:	4561      	cmp	r1, ip
 80198f8:	d081      	beq.n	80197fe <uxr_read_framed_msg+0x2e2>
 80198fa:	3302      	adds	r3, #2
 80198fc:	4422      	add	r2, r4
 80198fe:	0859      	lsrs	r1, r3, #1
 8019900:	7892      	ldrb	r2, [r2, #2]
 8019902:	fba5 c101 	umull	ip, r1, r5, r1
 8019906:	2a7e      	cmp	r2, #126	; 0x7e
 8019908:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801990c:	fb00 3311 	mls	r3, r0, r1, r3
 8019910:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019914:	f000 8091 	beq.w	8019a3a <uxr_read_framed_msg+0x51e>
 8019918:	f082 0220 	eor.w	r2, r2, #32
 801991c:	e636      	b.n	801958c <uxr_read_framed_msg+0x70>
 801991e:	1c51      	adds	r1, r2, #1
 8019920:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019924:	084b      	lsrs	r3, r1, #1
 8019926:	fba5 e303 	umull	lr, r3, r5, r3
 801992a:	089b      	lsrs	r3, r3, #2
 801992c:	fb0c 1313 	mls	r3, ip, r3, r1
 8019930:	b2d9      	uxtb	r1, r3
 8019932:	4288      	cmp	r0, r1
 8019934:	d09b      	beq.n	801986e <uxr_read_framed_msg+0x352>
 8019936:	3202      	adds	r2, #2
 8019938:	4423      	add	r3, r4
 801993a:	0850      	lsrs	r0, r2, #1
 801993c:	789b      	ldrb	r3, [r3, #2]
 801993e:	fba5 1000 	umull	r1, r0, r5, r0
 8019942:	2b7e      	cmp	r3, #126	; 0x7e
 8019944:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019948:	fb0c 2210 	mls	r2, ip, r0, r2
 801994c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019950:	d077      	beq.n	8019a42 <uxr_read_framed_msg+0x526>
 8019952:	f083 0120 	eor.w	r1, r3, #32
 8019956:	e6ea      	b.n	801972e <uxr_read_framed_msg+0x212>
 8019958:	f103 0c01 	add.w	ip, r3, #1
 801995c:	202a      	movs	r0, #42	; 0x2a
 801995e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019962:	fba5 e202 	umull	lr, r2, r5, r2
 8019966:	0892      	lsrs	r2, r2, #2
 8019968:	fb00 c212 	mls	r2, r0, r2, ip
 801996c:	fa5f fc82 	uxtb.w	ip, r2
 8019970:	4561      	cmp	r1, ip
 8019972:	f43f af57 	beq.w	8019824 <uxr_read_framed_msg+0x308>
 8019976:	3302      	adds	r3, #2
 8019978:	4422      	add	r2, r4
 801997a:	7891      	ldrb	r1, [r2, #2]
 801997c:	085a      	lsrs	r2, r3, #1
 801997e:	fba5 c202 	umull	ip, r2, r5, r2
 8019982:	297e      	cmp	r1, #126	; 0x7e
 8019984:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019988:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801998c:	fb00 3312 	mls	r3, r0, r2, r3
 8019990:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019994:	f43f af46 	beq.w	8019824 <uxr_read_framed_msg+0x308>
 8019998:	f081 0120 	eor.w	r1, r1, #32
 801999c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80199a0:	e6ea      	b.n	8019778 <uxr_read_framed_msg+0x25c>
 80199a2:	1c59      	adds	r1, r3, #1
 80199a4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80199a8:	084a      	lsrs	r2, r1, #1
 80199aa:	fba5 e202 	umull	lr, r2, r5, r2
 80199ae:	0892      	lsrs	r2, r2, #2
 80199b0:	fb0c 1212 	mls	r2, ip, r2, r1
 80199b4:	b2d1      	uxtb	r1, r2
 80199b6:	4288      	cmp	r0, r1
 80199b8:	f43f af21 	beq.w	80197fe <uxr_read_framed_msg+0x2e2>
 80199bc:	3302      	adds	r3, #2
 80199be:	4422      	add	r2, r4
 80199c0:	7891      	ldrb	r1, [r2, #2]
 80199c2:	085a      	lsrs	r2, r3, #1
 80199c4:	fba5 0202 	umull	r0, r2, r5, r2
 80199c8:	297e      	cmp	r1, #126	; 0x7e
 80199ca:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80199ce:	fb0c 3312 	mls	r3, ip, r2, r3
 80199d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80199d6:	d030      	beq.n	8019a3a <uxr_read_framed_msg+0x51e>
 80199d8:	f081 0120 	eor.w	r1, r1, #32
 80199dc:	e65d      	b.n	801969a <uxr_read_framed_msg+0x17e>
 80199de:	1c59      	adds	r1, r3, #1
 80199e0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80199e4:	084a      	lsrs	r2, r1, #1
 80199e6:	fba5 e202 	umull	lr, r2, r5, r2
 80199ea:	0892      	lsrs	r2, r2, #2
 80199ec:	fb0c 1212 	mls	r2, ip, r2, r1
 80199f0:	b2d1      	uxtb	r1, r2
 80199f2:	4288      	cmp	r0, r1
 80199f4:	f43f af12 	beq.w	801981c <uxr_read_framed_msg+0x300>
 80199f8:	3302      	adds	r3, #2
 80199fa:	4422      	add	r2, r4
 80199fc:	7891      	ldrb	r1, [r2, #2]
 80199fe:	085a      	lsrs	r2, r3, #1
 8019a00:	fba5 0202 	umull	r0, r2, r5, r2
 8019a04:	297e      	cmp	r1, #126	; 0x7e
 8019a06:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a0a:	fb0c 3312 	mls	r3, ip, r2, r3
 8019a0e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a12:	d002      	beq.n	8019a1a <uxr_read_framed_msg+0x4fe>
 8019a14:	f081 0120 	eor.w	r1, r1, #32
 8019a18:	e66a      	b.n	80196f0 <uxr_read_framed_msg+0x1d4>
 8019a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a1c:	9300      	str	r3, [sp, #0]
 8019a1e:	2302      	movs	r3, #2
 8019a20:	9301      	str	r3, [sp, #4]
 8019a22:	464a      	mov	r2, r9
 8019a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a26:	4641      	mov	r1, r8
 8019a28:	4620      	mov	r0, r4
 8019a2a:	f7ff fce3 	bl	80193f4 <uxr_framing_read_transport>
 8019a2e:	2800      	cmp	r0, #0
 8019a30:	f47f aef2 	bne.w	8019818 <uxr_read_framed_msg+0x2fc>
 8019a34:	2301      	movs	r3, #1
 8019a36:	7023      	strb	r3, [r4, #0]
 8019a38:	e581      	b.n	801953e <uxr_read_framed_msg+0x22>
 8019a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a3c:	9300      	str	r3, [sp, #0]
 8019a3e:	2301      	movs	r3, #1
 8019a40:	e7ee      	b.n	8019a20 <uxr_read_framed_msg+0x504>
 8019a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019a44:	9300      	str	r3, [sp, #0]
 8019a46:	2303      	movs	r3, #3
 8019a48:	e7ea      	b.n	8019a20 <uxr_read_framed_msg+0x504>
 8019a4a:	bf00      	nop

08019a4c <uxr_stream_id>:
 8019a4c:	2901      	cmp	r1, #1
 8019a4e:	4684      	mov	ip, r0
 8019a50:	b500      	push	{lr}
 8019a52:	b083      	sub	sp, #12
 8019a54:	d01f      	beq.n	8019a96 <uxr_stream_id+0x4a>
 8019a56:	2902      	cmp	r1, #2
 8019a58:	f04f 0e00 	mov.w	lr, #0
 8019a5c:	d020      	beq.n	8019aa0 <uxr_stream_id+0x54>
 8019a5e:	2300      	movs	r3, #0
 8019a60:	2000      	movs	r0, #0
 8019a62:	f36e 0307 	bfi	r3, lr, #0, #8
 8019a66:	f36c 230f 	bfi	r3, ip, #8, #8
 8019a6a:	f361 4317 	bfi	r3, r1, #16, #8
 8019a6e:	f362 631f 	bfi	r3, r2, #24, #8
 8019a72:	fa5f fc83 	uxtb.w	ip, r3
 8019a76:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019a7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019a7e:	0e1b      	lsrs	r3, r3, #24
 8019a80:	f36c 0007 	bfi	r0, ip, #0, #8
 8019a84:	f361 200f 	bfi	r0, r1, #8, #8
 8019a88:	f362 4017 	bfi	r0, r2, #16, #8
 8019a8c:	f363 601f 	bfi	r0, r3, #24, #8
 8019a90:	b003      	add	sp, #12
 8019a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a96:	f100 0e01 	add.w	lr, r0, #1
 8019a9a:	fa5f fe8e 	uxtb.w	lr, lr
 8019a9e:	e7de      	b.n	8019a5e <uxr_stream_id+0x12>
 8019aa0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8019aa4:	e7db      	b.n	8019a5e <uxr_stream_id+0x12>
 8019aa6:	bf00      	nop

08019aa8 <uxr_stream_id_from_raw>:
 8019aa8:	b082      	sub	sp, #8
 8019aaa:	b130      	cbz	r0, 8019aba <uxr_stream_id_from_raw+0x12>
 8019aac:	0603      	lsls	r3, r0, #24
 8019aae:	d421      	bmi.n	8019af4 <uxr_stream_id_from_raw+0x4c>
 8019ab0:	1e42      	subs	r2, r0, #1
 8019ab2:	f04f 0c01 	mov.w	ip, #1
 8019ab6:	b2d2      	uxtb	r2, r2
 8019ab8:	e001      	b.n	8019abe <uxr_stream_id_from_raw+0x16>
 8019aba:	4684      	mov	ip, r0
 8019abc:	4602      	mov	r2, r0
 8019abe:	2300      	movs	r3, #0
 8019ac0:	f360 0307 	bfi	r3, r0, #0, #8
 8019ac4:	2000      	movs	r0, #0
 8019ac6:	f362 230f 	bfi	r3, r2, #8, #8
 8019aca:	f36c 4317 	bfi	r3, ip, #16, #8
 8019ace:	f361 631f 	bfi	r3, r1, #24, #8
 8019ad2:	fa5f fc83 	uxtb.w	ip, r3
 8019ad6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019ada:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019ade:	0e1b      	lsrs	r3, r3, #24
 8019ae0:	f36c 0007 	bfi	r0, ip, #0, #8
 8019ae4:	f361 200f 	bfi	r0, r1, #8, #8
 8019ae8:	f362 4017 	bfi	r0, r2, #16, #8
 8019aec:	f363 601f 	bfi	r0, r3, #24, #8
 8019af0:	b002      	add	sp, #8
 8019af2:	4770      	bx	lr
 8019af4:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8019af8:	f04f 0c02 	mov.w	ip, #2
 8019afc:	e7df      	b.n	8019abe <uxr_stream_id_from_raw+0x16>
 8019afe:	bf00      	nop

08019b00 <uxr_init_stream_storage>:
 8019b00:	2300      	movs	r3, #0
 8019b02:	7403      	strb	r3, [r0, #16]
 8019b04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019b08:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019b0c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8019b10:	4770      	bx	lr
 8019b12:	bf00      	nop

08019b14 <uxr_reset_stream_storage>:
 8019b14:	b570      	push	{r4, r5, r6, lr}
 8019b16:	7c03      	ldrb	r3, [r0, #16]
 8019b18:	4604      	mov	r4, r0
 8019b1a:	b14b      	cbz	r3, 8019b30 <uxr_reset_stream_storage+0x1c>
 8019b1c:	4606      	mov	r6, r0
 8019b1e:	2500      	movs	r5, #0
 8019b20:	4630      	mov	r0, r6
 8019b22:	3501      	adds	r5, #1
 8019b24:	f004 fea6 	bl	801e874 <uxr_reset_output_best_effort_stream>
 8019b28:	7c23      	ldrb	r3, [r4, #16]
 8019b2a:	3610      	adds	r6, #16
 8019b2c:	42ab      	cmp	r3, r5
 8019b2e:	d8f7      	bhi.n	8019b20 <uxr_reset_stream_storage+0xc>
 8019b30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019b34:	b15b      	cbz	r3, 8019b4e <uxr_reset_stream_storage+0x3a>
 8019b36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019b3a:	2500      	movs	r5, #0
 8019b3c:	4630      	mov	r0, r6
 8019b3e:	3501      	adds	r5, #1
 8019b40:	f004 fc9e 	bl	801e480 <uxr_reset_input_best_effort_stream>
 8019b44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019b48:	3602      	adds	r6, #2
 8019b4a:	42ab      	cmp	r3, r5
 8019b4c:	d8f6      	bhi.n	8019b3c <uxr_reset_stream_storage+0x28>
 8019b4e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019b52:	b15b      	cbz	r3, 8019b6c <uxr_reset_stream_storage+0x58>
 8019b54:	f104 0618 	add.w	r6, r4, #24
 8019b58:	2500      	movs	r5, #0
 8019b5a:	4630      	mov	r0, r6
 8019b5c:	3501      	adds	r5, #1
 8019b5e:	f004 ff37 	bl	801e9d0 <uxr_reset_output_reliable_stream>
 8019b62:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019b66:	3628      	adds	r6, #40	; 0x28
 8019b68:	42ab      	cmp	r3, r5
 8019b6a:	d8f6      	bhi.n	8019b5a <uxr_reset_stream_storage+0x46>
 8019b6c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019b70:	b15b      	cbz	r3, 8019b8a <uxr_reset_stream_storage+0x76>
 8019b72:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8019b76:	2500      	movs	r5, #0
 8019b78:	4630      	mov	r0, r6
 8019b7a:	3501      	adds	r5, #1
 8019b7c:	f004 fcec 	bl	801e558 <uxr_reset_input_reliable_stream>
 8019b80:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019b84:	3618      	adds	r6, #24
 8019b86:	42ab      	cmp	r3, r5
 8019b88:	d8f6      	bhi.n	8019b78 <uxr_reset_stream_storage+0x64>
 8019b8a:	bd70      	pop	{r4, r5, r6, pc}

08019b8c <uxr_add_output_best_effort_buffer>:
 8019b8c:	b510      	push	{r4, lr}
 8019b8e:	7c04      	ldrb	r4, [r0, #16]
 8019b90:	b082      	sub	sp, #8
 8019b92:	f104 0c01 	add.w	ip, r4, #1
 8019b96:	f880 c010 	strb.w	ip, [r0, #16]
 8019b9a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019b9e:	f004 fe5f 	bl	801e860 <uxr_init_output_best_effort_stream>
 8019ba2:	2201      	movs	r2, #1
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	4611      	mov	r1, r2
 8019ba8:	b002      	add	sp, #8
 8019baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bae:	f7ff bf4d 	b.w	8019a4c <uxr_stream_id>
 8019bb2:	bf00      	nop

08019bb4 <uxr_add_output_reliable_buffer>:
 8019bb4:	b510      	push	{r4, lr}
 8019bb6:	b084      	sub	sp, #16
 8019bb8:	4684      	mov	ip, r0
 8019bba:	2028      	movs	r0, #40	; 0x28
 8019bbc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019bc0:	9400      	str	r4, [sp, #0]
 8019bc2:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8019bc6:	fb00 c004 	mla	r0, r0, r4, ip
 8019bca:	f104 0e01 	add.w	lr, r4, #1
 8019bce:	3018      	adds	r0, #24
 8019bd0:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8019bd4:	f004 fec4 	bl	801e960 <uxr_init_output_reliable_stream>
 8019bd8:	2201      	movs	r2, #1
 8019bda:	2102      	movs	r1, #2
 8019bdc:	4620      	mov	r0, r4
 8019bde:	b004      	add	sp, #16
 8019be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019be4:	f7ff bf32 	b.w	8019a4c <uxr_stream_id>

08019be8 <uxr_add_input_best_effort_buffer>:
 8019be8:	b510      	push	{r4, lr}
 8019bea:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8019bee:	b082      	sub	sp, #8
 8019bf0:	1c62      	adds	r2, r4, #1
 8019bf2:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8019bf6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019bfa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019bfe:	f004 fc3b 	bl	801e478 <uxr_init_input_best_effort_stream>
 8019c02:	2200      	movs	r2, #0
 8019c04:	2101      	movs	r1, #1
 8019c06:	4620      	mov	r0, r4
 8019c08:	b002      	add	sp, #8
 8019c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c0e:	f7ff bf1d 	b.w	8019a4c <uxr_stream_id>
 8019c12:	bf00      	nop

08019c14 <uxr_add_input_reliable_buffer>:
 8019c14:	b510      	push	{r4, lr}
 8019c16:	b084      	sub	sp, #16
 8019c18:	4684      	mov	ip, r0
 8019c1a:	2018      	movs	r0, #24
 8019c1c:	9c06      	ldr	r4, [sp, #24]
 8019c1e:	9400      	str	r4, [sp, #0]
 8019c20:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8019c24:	fb00 c004 	mla	r0, r0, r4, ip
 8019c28:	f104 0e01 	add.w	lr, r4, #1
 8019c2c:	3048      	adds	r0, #72	; 0x48
 8019c2e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8019c32:	f004 fc6b 	bl	801e50c <uxr_init_input_reliable_stream>
 8019c36:	2200      	movs	r2, #0
 8019c38:	2102      	movs	r1, #2
 8019c3a:	4620      	mov	r0, r4
 8019c3c:	b004      	add	sp, #16
 8019c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c42:	f7ff bf03 	b.w	8019a4c <uxr_stream_id>
 8019c46:	bf00      	nop

08019c48 <uxr_get_output_best_effort_stream>:
 8019c48:	7c03      	ldrb	r3, [r0, #16]
 8019c4a:	428b      	cmp	r3, r1
 8019c4c:	bf8c      	ite	hi
 8019c4e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019c52:	2000      	movls	r0, #0
 8019c54:	4770      	bx	lr
 8019c56:	bf00      	nop

08019c58 <uxr_get_output_reliable_stream>:
 8019c58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019c5c:	428b      	cmp	r3, r1
 8019c5e:	d904      	bls.n	8019c6a <uxr_get_output_reliable_stream+0x12>
 8019c60:	2328      	movs	r3, #40	; 0x28
 8019c62:	fb03 0001 	mla	r0, r3, r1, r0
 8019c66:	3018      	adds	r0, #24
 8019c68:	4770      	bx	lr
 8019c6a:	2000      	movs	r0, #0
 8019c6c:	4770      	bx	lr
 8019c6e:	bf00      	nop

08019c70 <uxr_get_input_best_effort_stream>:
 8019c70:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019c74:	428b      	cmp	r3, r1
 8019c76:	d903      	bls.n	8019c80 <uxr_get_input_best_effort_stream+0x10>
 8019c78:	3121      	adds	r1, #33	; 0x21
 8019c7a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019c7e:	4770      	bx	lr
 8019c80:	2000      	movs	r0, #0
 8019c82:	4770      	bx	lr

08019c84 <uxr_get_input_reliable_stream>:
 8019c84:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8019c88:	428b      	cmp	r3, r1
 8019c8a:	d904      	bls.n	8019c96 <uxr_get_input_reliable_stream+0x12>
 8019c8c:	2318      	movs	r3, #24
 8019c8e:	fb03 0001 	mla	r0, r3, r1, r0
 8019c92:	3048      	adds	r0, #72	; 0x48
 8019c94:	4770      	bx	lr
 8019c96:	2000      	movs	r0, #0
 8019c98:	4770      	bx	lr
 8019c9a:	bf00      	nop

08019c9c <uxr_output_streams_confirmed>:
 8019c9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019ca0:	b183      	cbz	r3, 8019cc4 <uxr_output_streams_confirmed+0x28>
 8019ca2:	b570      	push	{r4, r5, r6, lr}
 8019ca4:	4606      	mov	r6, r0
 8019ca6:	f100 0518 	add.w	r5, r0, #24
 8019caa:	2400      	movs	r4, #0
 8019cac:	e000      	b.n	8019cb0 <uxr_output_streams_confirmed+0x14>
 8019cae:	b140      	cbz	r0, 8019cc2 <uxr_output_streams_confirmed+0x26>
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	3401      	adds	r4, #1
 8019cb4:	f005 f900 	bl	801eeb8 <uxr_is_output_up_to_date>
 8019cb8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8019cbc:	3528      	adds	r5, #40	; 0x28
 8019cbe:	42a3      	cmp	r3, r4
 8019cc0:	d8f5      	bhi.n	8019cae <uxr_output_streams_confirmed+0x12>
 8019cc2:	bd70      	pop	{r4, r5, r6, pc}
 8019cc4:	2001      	movs	r0, #1
 8019cc6:	4770      	bx	lr

08019cc8 <uxr_buffer_submessage_header>:
 8019cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cca:	460e      	mov	r6, r1
 8019ccc:	2104      	movs	r1, #4
 8019cce:	4604      	mov	r4, r0
 8019cd0:	4615      	mov	r5, r2
 8019cd2:	461f      	mov	r7, r3
 8019cd4:	f7f9 faaa 	bl	801322c <ucdr_align_to>
 8019cd8:	2301      	movs	r3, #1
 8019cda:	4631      	mov	r1, r6
 8019cdc:	4620      	mov	r0, r4
 8019cde:	ea47 0203 	orr.w	r2, r7, r3
 8019ce2:	7523      	strb	r3, [r4, #20]
 8019ce4:	462b      	mov	r3, r5
 8019ce6:	f000 fa29 	bl	801a13c <uxr_serialize_submessage_header>
 8019cea:	4620      	mov	r0, r4
 8019cec:	f7f9 fab4 	bl	8013258 <ucdr_buffer_remaining>
 8019cf0:	42a8      	cmp	r0, r5
 8019cf2:	bf34      	ite	cc
 8019cf4:	2000      	movcc	r0, #0
 8019cf6:	2001      	movcs	r0, #1
 8019cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cfa:	bf00      	nop

08019cfc <uxr_read_submessage_header>:
 8019cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d00:	4604      	mov	r4, r0
 8019d02:	460d      	mov	r5, r1
 8019d04:	2104      	movs	r1, #4
 8019d06:	4616      	mov	r6, r2
 8019d08:	4698      	mov	r8, r3
 8019d0a:	f7f9 fa8f 	bl	801322c <ucdr_align_to>
 8019d0e:	4620      	mov	r0, r4
 8019d10:	f7f9 faa2 	bl	8013258 <ucdr_buffer_remaining>
 8019d14:	2803      	cmp	r0, #3
 8019d16:	bf8c      	ite	hi
 8019d18:	2701      	movhi	r7, #1
 8019d1a:	2700      	movls	r7, #0
 8019d1c:	d802      	bhi.n	8019d24 <uxr_read_submessage_header+0x28>
 8019d1e:	4638      	mov	r0, r7
 8019d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d24:	4633      	mov	r3, r6
 8019d26:	4642      	mov	r2, r8
 8019d28:	4620      	mov	r0, r4
 8019d2a:	4629      	mov	r1, r5
 8019d2c:	f000 fa1a 	bl	801a164 <uxr_deserialize_submessage_header>
 8019d30:	f898 3000 	ldrb.w	r3, [r8]
 8019d34:	4638      	mov	r0, r7
 8019d36:	f003 0201 	and.w	r2, r3, #1
 8019d3a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019d3e:	f888 3000 	strb.w	r3, [r8]
 8019d42:	7522      	strb	r2, [r4, #20]
 8019d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019d48 <uxr_submessage_padding>:
 8019d48:	f010 0003 	ands.w	r0, r0, #3
 8019d4c:	bf18      	it	ne
 8019d4e:	f1c0 0004 	rsbne	r0, r0, #4
 8019d52:	4770      	bx	lr

08019d54 <uxr_millis>:
 8019d54:	b510      	push	{r4, lr}
 8019d56:	b084      	sub	sp, #16
 8019d58:	2001      	movs	r0, #1
 8019d5a:	4669      	mov	r1, sp
 8019d5c:	f7e9 fac4 	bl	80032e8 <clock_gettime>
 8019d60:	4908      	ldr	r1, [pc, #32]	; (8019d84 <uxr_millis+0x30>)
 8019d62:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019d66:	fba0 0301 	umull	r0, r3, r0, r1
 8019d6a:	1900      	adds	r0, r0, r4
 8019d6c:	fb01 3102 	mla	r1, r1, r2, r3
 8019d70:	4a05      	ldr	r2, [pc, #20]	; (8019d88 <uxr_millis+0x34>)
 8019d72:	f04f 0300 	mov.w	r3, #0
 8019d76:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019d7a:	f7e6 fc85 	bl	8000688 <__aeabi_ldivmod>
 8019d7e:	b004      	add	sp, #16
 8019d80:	bd10      	pop	{r4, pc}
 8019d82:	bf00      	nop
 8019d84:	3b9aca00 	.word	0x3b9aca00
 8019d88:	000f4240 	.word	0x000f4240

08019d8c <uxr_nanos>:
 8019d8c:	b510      	push	{r4, lr}
 8019d8e:	b084      	sub	sp, #16
 8019d90:	2001      	movs	r0, #1
 8019d92:	4669      	mov	r1, sp
 8019d94:	f7e9 faa8 	bl	80032e8 <clock_gettime>
 8019d98:	4a06      	ldr	r2, [pc, #24]	; (8019db4 <uxr_nanos+0x28>)
 8019d9a:	9800      	ldr	r0, [sp, #0]
 8019d9c:	9902      	ldr	r1, [sp, #8]
 8019d9e:	fba0 0302 	umull	r0, r3, r0, r2
 8019da2:	9c01      	ldr	r4, [sp, #4]
 8019da4:	1840      	adds	r0, r0, r1
 8019da6:	fb02 3304 	mla	r3, r2, r4, r3
 8019daa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8019dae:	b004      	add	sp, #16
 8019db0:	bd10      	pop	{r4, pc}
 8019db2:	bf00      	nop
 8019db4:	3b9aca00 	.word	0x3b9aca00

08019db8 <on_full_output_buffer_fragmented>:
 8019db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dbc:	460c      	mov	r4, r1
 8019dbe:	b08a      	sub	sp, #40	; 0x28
 8019dc0:	4606      	mov	r6, r0
 8019dc2:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8019dc6:	f104 0008 	add.w	r0, r4, #8
 8019dca:	f7ff ff45 	bl	8019c58 <uxr_get_output_reliable_stream>
 8019dce:	4605      	mov	r5, r0
 8019dd0:	f005 f87c 	bl	801eecc <get_available_free_slots>
 8019dd4:	b968      	cbnz	r0, 8019df2 <on_full_output_buffer_fragmented+0x3a>
 8019dd6:	4620      	mov	r0, r4
 8019dd8:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8019ddc:	4798      	blx	r3
 8019dde:	b918      	cbnz	r0, 8019de8 <on_full_output_buffer_fragmented+0x30>
 8019de0:	2001      	movs	r0, #1
 8019de2:	b00a      	add	sp, #40	; 0x28
 8019de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019de8:	4628      	mov	r0, r5
 8019dea:	f005 f86f 	bl	801eecc <get_available_free_slots>
 8019dee:	2800      	cmp	r0, #0
 8019df0:	d0f6      	beq.n	8019de0 <on_full_output_buffer_fragmented+0x28>
 8019df2:	8929      	ldrh	r1, [r5, #8]
 8019df4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8019df8:	89eb      	ldrh	r3, [r5, #14]
 8019dfa:	7b28      	ldrb	r0, [r5, #12]
 8019dfc:	686f      	ldr	r7, [r5, #4]
 8019dfe:	1a12      	subs	r2, r2, r0
 8019e00:	fbb3 f0f1 	udiv	r0, r3, r1
 8019e04:	fbb7 f7f1 	udiv	r7, r7, r1
 8019e08:	fb01 3110 	mls	r1, r1, r0, r3
 8019e0c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8019e10:	b289      	uxth	r1, r1
 8019e12:	fb07 f101 	mul.w	r1, r7, r1
 8019e16:	3f04      	subs	r7, #4
 8019e18:	443a      	add	r2, r7
 8019e1a:	3104      	adds	r1, #4
 8019e1c:	fa1f f882 	uxth.w	r8, r2
 8019e20:	463a      	mov	r2, r7
 8019e22:	eba3 0308 	sub.w	r3, r3, r8
 8019e26:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8019e2a:	682b      	ldr	r3, [r5, #0]
 8019e2c:	4419      	add	r1, r3
 8019e2e:	2300      	movs	r3, #0
 8019e30:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019e34:	9000      	str	r0, [sp, #0]
 8019e36:	a802      	add	r0, sp, #8
 8019e38:	f7f9 f9ca 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 8019e3c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019e40:	f102 0308 	add.w	r3, r2, #8
 8019e44:	42bb      	cmp	r3, r7
 8019e46:	d927      	bls.n	8019e98 <on_full_output_buffer_fragmented+0xe0>
 8019e48:	4642      	mov	r2, r8
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	210d      	movs	r1, #13
 8019e4e:	a802      	add	r0, sp, #8
 8019e50:	f7ff ff3a 	bl	8019cc8 <uxr_buffer_submessage_header>
 8019e54:	8929      	ldrh	r1, [r5, #8]
 8019e56:	89eb      	ldrh	r3, [r5, #14]
 8019e58:	686a      	ldr	r2, [r5, #4]
 8019e5a:	fbb3 f0f1 	udiv	r0, r3, r1
 8019e5e:	fbb2 f2f1 	udiv	r2, r2, r1
 8019e62:	fb01 3310 	mls	r3, r1, r0, r3
 8019e66:	b29b      	uxth	r3, r3
 8019e68:	fb02 f303 	mul.w	r3, r2, r3
 8019e6c:	682a      	ldr	r2, [r5, #0]
 8019e6e:	50d7      	str	r7, [r2, r3]
 8019e70:	2101      	movs	r1, #1
 8019e72:	89e8      	ldrh	r0, [r5, #14]
 8019e74:	f005 f84c 	bl	801ef10 <uxr_seq_num_add>
 8019e78:	9904      	ldr	r1, [sp, #16]
 8019e7a:	9a03      	ldr	r2, [sp, #12]
 8019e7c:	81e8      	strh	r0, [r5, #14]
 8019e7e:	4630      	mov	r0, r6
 8019e80:	1a52      	subs	r2, r2, r1
 8019e82:	f7f9 f9b7 	bl	80131f4 <ucdr_init_buffer>
 8019e86:	4630      	mov	r0, r6
 8019e88:	4622      	mov	r2, r4
 8019e8a:	490f      	ldr	r1, [pc, #60]	; (8019ec8 <on_full_output_buffer_fragmented+0x110>)
 8019e8c:	f7f9 f986 	bl	801319c <ucdr_set_on_full_buffer_callback>
 8019e90:	2000      	movs	r0, #0
 8019e92:	b00a      	add	sp, #40	; 0x28
 8019e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e98:	b292      	uxth	r2, r2
 8019e9a:	2302      	movs	r3, #2
 8019e9c:	210d      	movs	r1, #13
 8019e9e:	a802      	add	r0, sp, #8
 8019ea0:	f7ff ff12 	bl	8019cc8 <uxr_buffer_submessage_header>
 8019ea4:	8928      	ldrh	r0, [r5, #8]
 8019ea6:	89eb      	ldrh	r3, [r5, #14]
 8019ea8:	6869      	ldr	r1, [r5, #4]
 8019eaa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019eae:	fbb3 f7f0 	udiv	r7, r3, r0
 8019eb2:	fbb1 f1f0 	udiv	r1, r1, r0
 8019eb6:	fb00 3317 	mls	r3, r0, r7, r3
 8019eba:	3208      	adds	r2, #8
 8019ebc:	b29b      	uxth	r3, r3
 8019ebe:	fb01 f303 	mul.w	r3, r1, r3
 8019ec2:	6829      	ldr	r1, [r5, #0]
 8019ec4:	50ca      	str	r2, [r1, r3]
 8019ec6:	e7d3      	b.n	8019e70 <on_full_output_buffer_fragmented+0xb8>
 8019ec8:	08019db9 	.word	0x08019db9

08019ecc <uxr_prepare_output_stream>:
 8019ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ece:	b087      	sub	sp, #28
 8019ed0:	2707      	movs	r7, #7
 8019ed2:	2500      	movs	r5, #0
 8019ed4:	461c      	mov	r4, r3
 8019ed6:	4606      	mov	r6, r0
 8019ed8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019edc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019ede:	e9cd 7500 	strd	r7, r5, [sp]
 8019ee2:	3204      	adds	r2, #4
 8019ee4:	f7fe ffc8 	bl	8018e78 <uxr_prepare_stream_to_write_submessage>
 8019ee8:	f080 0201 	eor.w	r2, r0, #1
 8019eec:	b2d2      	uxtb	r2, r2
 8019eee:	75a2      	strb	r2, [r4, #22]
 8019ef0:	b112      	cbz	r2, 8019ef8 <uxr_prepare_output_stream+0x2c>
 8019ef2:	4628      	mov	r0, r5
 8019ef4:	b007      	add	sp, #28
 8019ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ef8:	aa05      	add	r2, sp, #20
 8019efa:	9902      	ldr	r1, [sp, #8]
 8019efc:	4630      	mov	r0, r6
 8019efe:	f7ff f8f7 	bl	80190f0 <uxr_init_base_object_request>
 8019f02:	a905      	add	r1, sp, #20
 8019f04:	4605      	mov	r5, r0
 8019f06:	4620      	mov	r0, r4
 8019f08:	f001 f8bc 	bl	801b084 <uxr_serialize_WRITE_DATA_Payload_Data>
 8019f0c:	69a6      	ldr	r6, [r4, #24]
 8019f0e:	69e7      	ldr	r7, [r4, #28]
 8019f10:	4620      	mov	r0, r4
 8019f12:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8019f16:	1a52      	subs	r2, r2, r1
 8019f18:	f7f9 f96c 	bl	80131f4 <ucdr_init_buffer>
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	463a      	mov	r2, r7
 8019f20:	4631      	mov	r1, r6
 8019f22:	f7f9 f93b 	bl	801319c <ucdr_set_on_full_buffer_callback>
 8019f26:	4628      	mov	r0, r5
 8019f28:	b007      	add	sp, #28
 8019f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f2c <uxr_prepare_output_stream_fragmented>:
 8019f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f30:	b091      	sub	sp, #68	; 0x44
 8019f32:	4605      	mov	r5, r0
 8019f34:	3008      	adds	r0, #8
 8019f36:	461e      	mov	r6, r3
 8019f38:	9105      	str	r1, [sp, #20]
 8019f3a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019f3e:	9204      	str	r2, [sp, #16]
 8019f40:	f7ff fe8a 	bl	8019c58 <uxr_get_output_reliable_stream>
 8019f44:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8019f48:	2b01      	cmp	r3, #1
 8019f4a:	f000 8093 	beq.w	801a074 <uxr_prepare_output_stream_fragmented+0x148>
 8019f4e:	4604      	mov	r4, r0
 8019f50:	2800      	cmp	r0, #0
 8019f52:	f000 808f 	beq.w	801a074 <uxr_prepare_output_stream_fragmented+0x148>
 8019f56:	f004 ffb9 	bl	801eecc <get_available_free_slots>
 8019f5a:	2800      	cmp	r0, #0
 8019f5c:	f000 8085 	beq.w	801a06a <uxr_prepare_output_stream_fragmented+0x13e>
 8019f60:	8923      	ldrh	r3, [r4, #8]
 8019f62:	89e7      	ldrh	r7, [r4, #14]
 8019f64:	6862      	ldr	r2, [r4, #4]
 8019f66:	fbb7 f9f3 	udiv	r9, r7, r3
 8019f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8019f6e:	fb03 7919 	mls	r9, r3, r9, r7
 8019f72:	6823      	ldr	r3, [r4, #0]
 8019f74:	f1a2 0b04 	sub.w	fp, r2, #4
 8019f78:	9203      	str	r2, [sp, #12]
 8019f7a:	fa1f f989 	uxth.w	r9, r9
 8019f7e:	fb02 f909 	mul.w	r9, r2, r9
 8019f82:	f109 0904 	add.w	r9, r9, #4
 8019f86:	4499      	add	r9, r3
 8019f88:	7b23      	ldrb	r3, [r4, #12]
 8019f8a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8019f8e:	4543      	cmp	r3, r8
 8019f90:	d37c      	bcc.n	801a08c <uxr_prepare_output_stream_fragmented+0x160>
 8019f92:	f1ab 0a04 	sub.w	sl, fp, #4
 8019f96:	465a      	mov	r2, fp
 8019f98:	4649      	mov	r1, r9
 8019f9a:	a808      	add	r0, sp, #32
 8019f9c:	ebaa 0a03 	sub.w	sl, sl, r3
 8019fa0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019fa2:	f8cd 8000 	str.w	r8, [sp]
 8019fa6:	3308      	adds	r3, #8
 8019fa8:	fa1f fa8a 	uxth.w	sl, sl
 8019fac:	9302      	str	r3, [sp, #8]
 8019fae:	2300      	movs	r3, #0
 8019fb0:	f7f9 f90e 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 8019fb4:	9b02      	ldr	r3, [sp, #8]
 8019fb6:	4652      	mov	r2, sl
 8019fb8:	210d      	movs	r1, #13
 8019fba:	455b      	cmp	r3, fp
 8019fbc:	bf34      	ite	cc
 8019fbe:	2302      	movcc	r3, #2
 8019fc0:	2300      	movcs	r3, #0
 8019fc2:	a808      	add	r0, sp, #32
 8019fc4:	f7ff fe80 	bl	8019cc8 <uxr_buffer_submessage_header>
 8019fc8:	8921      	ldrh	r1, [r4, #8]
 8019fca:	6863      	ldr	r3, [r4, #4]
 8019fcc:	4638      	mov	r0, r7
 8019fce:	fbb7 f2f1 	udiv	r2, r7, r1
 8019fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8019fd6:	fb01 7212 	mls	r2, r1, r2, r7
 8019fda:	2101      	movs	r1, #1
 8019fdc:	b292      	uxth	r2, r2
 8019fde:	fb02 f303 	mul.w	r3, r2, r3
 8019fe2:	6822      	ldr	r2, [r4, #0]
 8019fe4:	f842 b003 	str.w	fp, [r2, r3]
 8019fe8:	f004 ff92 	bl	801ef10 <uxr_seq_num_add>
 8019fec:	9b03      	ldr	r3, [sp, #12]
 8019fee:	f108 0104 	add.w	r1, r8, #4
 8019ff2:	4607      	mov	r7, r0
 8019ff4:	f1a3 0208 	sub.w	r2, r3, #8
 8019ff8:	4630      	mov	r0, r6
 8019ffa:	4449      	add	r1, r9
 8019ffc:	eba2 0208 	sub.w	r2, r2, r8
 801a000:	f7f9 f8f8 	bl	80131f4 <ucdr_init_buffer>
 801a004:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a006:	2107      	movs	r1, #7
 801a008:	81e7      	strh	r7, [r4, #14]
 801a00a:	1d1a      	adds	r2, r3, #4
 801a00c:	2300      	movs	r3, #0
 801a00e:	4630      	mov	r0, r6
 801a010:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801a014:	bf28      	it	cs
 801a016:	461a      	movcs	r2, r3
 801a018:	b292      	uxth	r2, r2
 801a01a:	f7ff fe55 	bl	8019cc8 <uxr_buffer_submessage_header>
 801a01e:	aa07      	add	r2, sp, #28
 801a020:	9904      	ldr	r1, [sp, #16]
 801a022:	4628      	mov	r0, r5
 801a024:	f7ff f864 	bl	80190f0 <uxr_init_base_object_request>
 801a028:	4604      	mov	r4, r0
 801a02a:	b320      	cbz	r0, 801a076 <uxr_prepare_output_stream_fragmented+0x14a>
 801a02c:	a907      	add	r1, sp, #28
 801a02e:	4630      	mov	r0, r6
 801a030:	f001 f828 	bl	801b084 <uxr_serialize_WRITE_DATA_Payload_Data>
 801a034:	4630      	mov	r0, r6
 801a036:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801a03a:	1a52      	subs	r2, r2, r1
 801a03c:	f7f9 f8da 	bl	80131f4 <ucdr_init_buffer>
 801a040:	9b05      	ldr	r3, [sp, #20]
 801a042:	9a02      	ldr	r2, [sp, #8]
 801a044:	4630      	mov	r0, r6
 801a046:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801a04a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a04c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801a050:	462a      	mov	r2, r5
 801a052:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801a056:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a058:	4918      	ldr	r1, [pc, #96]	; (801a0bc <uxr_prepare_output_stream_fragmented+0x190>)
 801a05a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801a05e:	f7f9 f89d 	bl	801319c <ucdr_set_on_full_buffer_callback>
 801a062:	4620      	mov	r0, r4
 801a064:	b011      	add	sp, #68	; 0x44
 801a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a06a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a06c:	4628      	mov	r0, r5
 801a06e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a070:	4798      	blx	r3
 801a072:	b920      	cbnz	r0, 801a07e <uxr_prepare_output_stream_fragmented+0x152>
 801a074:	2400      	movs	r4, #0
 801a076:	4620      	mov	r0, r4
 801a078:	b011      	add	sp, #68	; 0x44
 801a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a07e:	4620      	mov	r0, r4
 801a080:	f004 ff24 	bl	801eecc <get_available_free_slots>
 801a084:	2800      	cmp	r0, #0
 801a086:	f47f af6b 	bne.w	8019f60 <uxr_prepare_output_stream_fragmented+0x34>
 801a08a:	e7f3      	b.n	801a074 <uxr_prepare_output_stream_fragmented+0x148>
 801a08c:	4638      	mov	r0, r7
 801a08e:	2101      	movs	r1, #1
 801a090:	f004 ff3e 	bl	801ef10 <uxr_seq_num_add>
 801a094:	8922      	ldrh	r2, [r4, #8]
 801a096:	6863      	ldr	r3, [r4, #4]
 801a098:	4607      	mov	r7, r0
 801a09a:	fbb3 f9f2 	udiv	r9, r3, r2
 801a09e:	fbb0 f3f2 	udiv	r3, r0, r2
 801a0a2:	fb02 0313 	mls	r3, r2, r3, r0
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	fb03 f909 	mul.w	r9, r3, r9
 801a0ac:	6823      	ldr	r3, [r4, #0]
 801a0ae:	f109 0904 	add.w	r9, r9, #4
 801a0b2:	4499      	add	r9, r3
 801a0b4:	7b23      	ldrb	r3, [r4, #12]
 801a0b6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a0ba:	e76a      	b.n	8019f92 <uxr_prepare_output_stream_fragmented+0x66>
 801a0bc:	08019db9 	.word	0x08019db9

0801a0c0 <uxr_serialize_message_header>:
 801a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0c2:	4616      	mov	r6, r2
 801a0c4:	b083      	sub	sp, #12
 801a0c6:	4604      	mov	r4, r0
 801a0c8:	460d      	mov	r5, r1
 801a0ca:	9301      	str	r3, [sp, #4]
 801a0cc:	9f08      	ldr	r7, [sp, #32]
 801a0ce:	f7f7 fdb9 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a0d2:	4631      	mov	r1, r6
 801a0d4:	4620      	mov	r0, r4
 801a0d6:	f7f7 fdb5 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a0da:	9a01      	ldr	r2, [sp, #4]
 801a0dc:	2101      	movs	r1, #1
 801a0de:	4620      	mov	r0, r4
 801a0e0:	f7f7 fe5c 	bl	8011d9c <ucdr_serialize_endian_uint16_t>
 801a0e4:	062b      	lsls	r3, r5, #24
 801a0e6:	d501      	bpl.n	801a0ec <uxr_serialize_message_header+0x2c>
 801a0e8:	b003      	add	sp, #12
 801a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ec:	2204      	movs	r2, #4
 801a0ee:	4639      	mov	r1, r7
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	b003      	add	sp, #12
 801a0f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a0f8:	f7fd ba6c 	b.w	80175d4 <ucdr_serialize_array_uint8_t>

0801a0fc <uxr_deserialize_message_header>:
 801a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0fe:	4616      	mov	r6, r2
 801a100:	b083      	sub	sp, #12
 801a102:	4604      	mov	r4, r0
 801a104:	460d      	mov	r5, r1
 801a106:	9301      	str	r3, [sp, #4]
 801a108:	9f08      	ldr	r7, [sp, #32]
 801a10a:	f7f7 fdb1 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801a10e:	4631      	mov	r1, r6
 801a110:	4620      	mov	r0, r4
 801a112:	f7f7 fdad 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801a116:	9a01      	ldr	r2, [sp, #4]
 801a118:	2101      	movs	r1, #1
 801a11a:	4620      	mov	r0, r4
 801a11c:	f7f7 ff32 	bl	8011f84 <ucdr_deserialize_endian_uint16_t>
 801a120:	f995 3000 	ldrsb.w	r3, [r5]
 801a124:	2b00      	cmp	r3, #0
 801a126:	da01      	bge.n	801a12c <uxr_deserialize_message_header+0x30>
 801a128:	b003      	add	sp, #12
 801a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a12c:	2204      	movs	r2, #4
 801a12e:	4639      	mov	r1, r7
 801a130:	4620      	mov	r0, r4
 801a132:	b003      	add	sp, #12
 801a134:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a138:	f7fd bab0 	b.w	801769c <ucdr_deserialize_array_uint8_t>

0801a13c <uxr_serialize_submessage_header>:
 801a13c:	b530      	push	{r4, r5, lr}
 801a13e:	4615      	mov	r5, r2
 801a140:	b083      	sub	sp, #12
 801a142:	4604      	mov	r4, r0
 801a144:	9301      	str	r3, [sp, #4]
 801a146:	f7f7 fd7d 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a14a:	4629      	mov	r1, r5
 801a14c:	4620      	mov	r0, r4
 801a14e:	f7f7 fd79 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a152:	9a01      	ldr	r2, [sp, #4]
 801a154:	2101      	movs	r1, #1
 801a156:	4620      	mov	r0, r4
 801a158:	b003      	add	sp, #12
 801a15a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a15e:	f7f7 be1d 	b.w	8011d9c <ucdr_serialize_endian_uint16_t>
 801a162:	bf00      	nop

0801a164 <uxr_deserialize_submessage_header>:
 801a164:	b530      	push	{r4, r5, lr}
 801a166:	4615      	mov	r5, r2
 801a168:	b083      	sub	sp, #12
 801a16a:	4604      	mov	r4, r0
 801a16c:	9301      	str	r3, [sp, #4]
 801a16e:	f7f7 fd7f 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801a172:	4629      	mov	r1, r5
 801a174:	4620      	mov	r0, r4
 801a176:	f7f7 fd7b 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801a17a:	9a01      	ldr	r2, [sp, #4]
 801a17c:	2101      	movs	r1, #1
 801a17e:	4620      	mov	r0, r4
 801a180:	b003      	add	sp, #12
 801a182:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a186:	f7f7 befd 	b.w	8011f84 <ucdr_deserialize_endian_uint16_t>
 801a18a:	bf00      	nop

0801a18c <uxr_serialize_CLIENT_Representation>:
 801a18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a190:	2204      	movs	r2, #4
 801a192:	460e      	mov	r6, r1
 801a194:	4605      	mov	r5, r0
 801a196:	f7fd fa1d 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a19a:	4607      	mov	r7, r0
 801a19c:	2202      	movs	r2, #2
 801a19e:	1d31      	adds	r1, r6, #4
 801a1a0:	4628      	mov	r0, r5
 801a1a2:	f7fd fa17 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a1a6:	4038      	ands	r0, r7
 801a1a8:	2202      	movs	r2, #2
 801a1aa:	1db1      	adds	r1, r6, #6
 801a1ac:	b2c7      	uxtb	r7, r0
 801a1ae:	4628      	mov	r0, r5
 801a1b0:	f7fd fa10 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a1b4:	2204      	movs	r2, #4
 801a1b6:	4007      	ands	r7, r0
 801a1b8:	f106 0108 	add.w	r1, r6, #8
 801a1bc:	4628      	mov	r0, r5
 801a1be:	f7fd fa09 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a1c2:	4007      	ands	r7, r0
 801a1c4:	7b31      	ldrb	r1, [r6, #12]
 801a1c6:	4628      	mov	r0, r5
 801a1c8:	f7f7 fd3c 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a1cc:	7b71      	ldrb	r1, [r6, #13]
 801a1ce:	4007      	ands	r7, r0
 801a1d0:	4628      	mov	r0, r5
 801a1d2:	f7f7 fd09 	bl	8011be8 <ucdr_serialize_bool>
 801a1d6:	7b73      	ldrb	r3, [r6, #13]
 801a1d8:	ea07 0800 	and.w	r8, r7, r0
 801a1dc:	b93b      	cbnz	r3, 801a1ee <uxr_serialize_CLIENT_Representation+0x62>
 801a1de:	8bb1      	ldrh	r1, [r6, #28]
 801a1e0:	4628      	mov	r0, r5
 801a1e2:	f7f7 fd5b 	bl	8011c9c <ucdr_serialize_uint16_t>
 801a1e6:	ea08 0000 	and.w	r0, r8, r0
 801a1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1ee:	6931      	ldr	r1, [r6, #16]
 801a1f0:	4628      	mov	r0, r5
 801a1f2:	f7f7 ff3d 	bl	8012070 <ucdr_serialize_uint32_t>
 801a1f6:	6933      	ldr	r3, [r6, #16]
 801a1f8:	b1e3      	cbz	r3, 801a234 <uxr_serialize_CLIENT_Representation+0xa8>
 801a1fa:	b1c0      	cbz	r0, 801a22e <uxr_serialize_CLIENT_Representation+0xa2>
 801a1fc:	4637      	mov	r7, r6
 801a1fe:	f04f 0900 	mov.w	r9, #0
 801a202:	e000      	b.n	801a206 <uxr_serialize_CLIENT_Representation+0x7a>
 801a204:	b19c      	cbz	r4, 801a22e <uxr_serialize_CLIENT_Representation+0xa2>
 801a206:	6979      	ldr	r1, [r7, #20]
 801a208:	4628      	mov	r0, r5
 801a20a:	f004 f91d 	bl	801e448 <ucdr_serialize_string>
 801a20e:	69b9      	ldr	r1, [r7, #24]
 801a210:	4604      	mov	r4, r0
 801a212:	4628      	mov	r0, r5
 801a214:	f004 f918 	bl	801e448 <ucdr_serialize_string>
 801a218:	f109 0901 	add.w	r9, r9, #1
 801a21c:	6933      	ldr	r3, [r6, #16]
 801a21e:	4004      	ands	r4, r0
 801a220:	3708      	adds	r7, #8
 801a222:	4599      	cmp	r9, r3
 801a224:	b2e4      	uxtb	r4, r4
 801a226:	d3ed      	bcc.n	801a204 <uxr_serialize_CLIENT_Representation+0x78>
 801a228:	ea08 0804 	and.w	r8, r8, r4
 801a22c:	e7d7      	b.n	801a1de <uxr_serialize_CLIENT_Representation+0x52>
 801a22e:	f04f 0800 	mov.w	r8, #0
 801a232:	e7d4      	b.n	801a1de <uxr_serialize_CLIENT_Representation+0x52>
 801a234:	ea08 0800 	and.w	r8, r8, r0
 801a238:	e7d1      	b.n	801a1de <uxr_serialize_CLIENT_Representation+0x52>
 801a23a:	bf00      	nop

0801a23c <uxr_deserialize_CLIENT_Representation>:
 801a23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a240:	2204      	movs	r2, #4
 801a242:	460c      	mov	r4, r1
 801a244:	4605      	mov	r5, r0
 801a246:	f7fd fa29 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801a24a:	4607      	mov	r7, r0
 801a24c:	2202      	movs	r2, #2
 801a24e:	1d21      	adds	r1, r4, #4
 801a250:	4628      	mov	r0, r5
 801a252:	f7fd fa23 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801a256:	4038      	ands	r0, r7
 801a258:	2202      	movs	r2, #2
 801a25a:	1da1      	adds	r1, r4, #6
 801a25c:	b2c6      	uxtb	r6, r0
 801a25e:	4628      	mov	r0, r5
 801a260:	f7fd fa1c 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801a264:	2204      	movs	r2, #4
 801a266:	4006      	ands	r6, r0
 801a268:	f104 0108 	add.w	r1, r4, #8
 801a26c:	4628      	mov	r0, r5
 801a26e:	f7fd fa15 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801a272:	4006      	ands	r6, r0
 801a274:	f104 010c 	add.w	r1, r4, #12
 801a278:	4628      	mov	r0, r5
 801a27a:	f7f7 fcf9 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801a27e:	f104 010d 	add.w	r1, r4, #13
 801a282:	ea06 0700 	and.w	r7, r6, r0
 801a286:	4628      	mov	r0, r5
 801a288:	f7f7 fcc4 	bl	8011c14 <ucdr_deserialize_bool>
 801a28c:	7b63      	ldrb	r3, [r4, #13]
 801a28e:	4007      	ands	r7, r0
 801a290:	b93b      	cbnz	r3, 801a2a2 <uxr_deserialize_CLIENT_Representation+0x66>
 801a292:	f104 011c 	add.w	r1, r4, #28
 801a296:	4628      	mov	r0, r5
 801a298:	f7f7 fe00 	bl	8011e9c <ucdr_deserialize_uint16_t>
 801a29c:	4038      	ands	r0, r7
 801a29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2a2:	f104 0110 	add.w	r1, r4, #16
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	f7f8 f812 	bl	80122d0 <ucdr_deserialize_uint32_t>
 801a2ac:	6923      	ldr	r3, [r4, #16]
 801a2ae:	2b01      	cmp	r3, #1
 801a2b0:	d903      	bls.n	801a2ba <uxr_deserialize_CLIENT_Representation+0x7e>
 801a2b2:	2301      	movs	r3, #1
 801a2b4:	2700      	movs	r7, #0
 801a2b6:	75ab      	strb	r3, [r5, #22]
 801a2b8:	e7eb      	b.n	801a292 <uxr_deserialize_CLIENT_Representation+0x56>
 801a2ba:	b30b      	cbz	r3, 801a300 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a2bc:	b1f0      	cbz	r0, 801a2fc <uxr_deserialize_CLIENT_Representation+0xc0>
 801a2be:	46a0      	mov	r8, r4
 801a2c0:	f04f 0900 	mov.w	r9, #0
 801a2c4:	e000      	b.n	801a2c8 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a2c6:	b1ce      	cbz	r6, 801a2fc <uxr_deserialize_CLIENT_Representation+0xc0>
 801a2c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a2cc:	f108 0808 	add.w	r8, r8, #8
 801a2d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a2d4:	4628      	mov	r0, r5
 801a2d6:	f004 f8c7 	bl	801e468 <ucdr_deserialize_string>
 801a2da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a2de:	4606      	mov	r6, r0
 801a2e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	f109 0901 	add.w	r9, r9, #1
 801a2ea:	f004 f8bd 	bl	801e468 <ucdr_deserialize_string>
 801a2ee:	6923      	ldr	r3, [r4, #16]
 801a2f0:	4006      	ands	r6, r0
 801a2f2:	4599      	cmp	r9, r3
 801a2f4:	b2f6      	uxtb	r6, r6
 801a2f6:	d3e6      	bcc.n	801a2c6 <uxr_deserialize_CLIENT_Representation+0x8a>
 801a2f8:	4037      	ands	r7, r6
 801a2fa:	e7ca      	b.n	801a292 <uxr_deserialize_CLIENT_Representation+0x56>
 801a2fc:	2700      	movs	r7, #0
 801a2fe:	e7c8      	b.n	801a292 <uxr_deserialize_CLIENT_Representation+0x56>
 801a300:	4007      	ands	r7, r0
 801a302:	e7c6      	b.n	801a292 <uxr_deserialize_CLIENT_Representation+0x56>

0801a304 <uxr_serialize_AGENT_Representation>:
 801a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a308:	2204      	movs	r2, #4
 801a30a:	460f      	mov	r7, r1
 801a30c:	4605      	mov	r5, r0
 801a30e:	f7fd f961 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a312:	4604      	mov	r4, r0
 801a314:	2202      	movs	r2, #2
 801a316:	1d39      	adds	r1, r7, #4
 801a318:	4628      	mov	r0, r5
 801a31a:	f7fd f95b 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a31e:	4020      	ands	r0, r4
 801a320:	2202      	movs	r2, #2
 801a322:	1db9      	adds	r1, r7, #6
 801a324:	b2c4      	uxtb	r4, r0
 801a326:	4628      	mov	r0, r5
 801a328:	f7fd f954 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a32c:	7a39      	ldrb	r1, [r7, #8]
 801a32e:	4004      	ands	r4, r0
 801a330:	4628      	mov	r0, r5
 801a332:	f7f7 fc59 	bl	8011be8 <ucdr_serialize_bool>
 801a336:	7a3b      	ldrb	r3, [r7, #8]
 801a338:	ea00 0804 	and.w	r8, r0, r4
 801a33c:	b913      	cbnz	r3, 801a344 <uxr_serialize_AGENT_Representation+0x40>
 801a33e:	4640      	mov	r0, r8
 801a340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a344:	68f9      	ldr	r1, [r7, #12]
 801a346:	4628      	mov	r0, r5
 801a348:	f7f7 fe92 	bl	8012070 <ucdr_serialize_uint32_t>
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	b303      	cbz	r3, 801a392 <uxr_serialize_AGENT_Representation+0x8e>
 801a350:	b1d0      	cbz	r0, 801a388 <uxr_serialize_AGENT_Representation+0x84>
 801a352:	463e      	mov	r6, r7
 801a354:	f04f 0900 	mov.w	r9, #0
 801a358:	e000      	b.n	801a35c <uxr_serialize_AGENT_Representation+0x58>
 801a35a:	b1ac      	cbz	r4, 801a388 <uxr_serialize_AGENT_Representation+0x84>
 801a35c:	6931      	ldr	r1, [r6, #16]
 801a35e:	4628      	mov	r0, r5
 801a360:	f004 f872 	bl	801e448 <ucdr_serialize_string>
 801a364:	6971      	ldr	r1, [r6, #20]
 801a366:	4604      	mov	r4, r0
 801a368:	4628      	mov	r0, r5
 801a36a:	f004 f86d 	bl	801e448 <ucdr_serialize_string>
 801a36e:	f109 0901 	add.w	r9, r9, #1
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	4004      	ands	r4, r0
 801a376:	3608      	adds	r6, #8
 801a378:	4599      	cmp	r9, r3
 801a37a:	b2e4      	uxtb	r4, r4
 801a37c:	d3ed      	bcc.n	801a35a <uxr_serialize_AGENT_Representation+0x56>
 801a37e:	ea08 0804 	and.w	r8, r8, r4
 801a382:	4640      	mov	r0, r8
 801a384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a388:	f04f 0800 	mov.w	r8, #0
 801a38c:	4640      	mov	r0, r8
 801a38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a392:	ea08 0800 	and.w	r8, r8, r0
 801a396:	e7d2      	b.n	801a33e <uxr_serialize_AGENT_Representation+0x3a>

0801a398 <uxr_serialize_DATAWRITER_Representation>:
 801a398:	b570      	push	{r4, r5, r6, lr}
 801a39a:	460d      	mov	r5, r1
 801a39c:	7809      	ldrb	r1, [r1, #0]
 801a39e:	4606      	mov	r6, r0
 801a3a0:	f7f7 fc50 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a3a4:	4604      	mov	r4, r0
 801a3a6:	b130      	cbz	r0, 801a3b6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a3a8:	782b      	ldrb	r3, [r5, #0]
 801a3aa:	2b02      	cmp	r3, #2
 801a3ac:	d00c      	beq.n	801a3c8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a3ae:	2b03      	cmp	r3, #3
 801a3b0:	d010      	beq.n	801a3d4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a3b2:	2b01      	cmp	r3, #1
 801a3b4:	d008      	beq.n	801a3c8 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a3b6:	2202      	movs	r2, #2
 801a3b8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a3bc:	4630      	mov	r0, r6
 801a3be:	f7fd f909 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a3c2:	4020      	ands	r0, r4
 801a3c4:	b2c0      	uxtb	r0, r0
 801a3c6:	bd70      	pop	{r4, r5, r6, pc}
 801a3c8:	6869      	ldr	r1, [r5, #4]
 801a3ca:	4630      	mov	r0, r6
 801a3cc:	f004 f83c 	bl	801e448 <ucdr_serialize_string>
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	e7f0      	b.n	801a3b6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a3d4:	4629      	mov	r1, r5
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a3dc:	3104      	adds	r1, #4
 801a3de:	f7f8 ffa9 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801a3e2:	4604      	mov	r4, r0
 801a3e4:	e7e7      	b.n	801a3b6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a3e6:	bf00      	nop

0801a3e8 <uxr_serialize_ObjectVariant.part.0>:
 801a3e8:	b570      	push	{r4, r5, r6, lr}
 801a3ea:	780b      	ldrb	r3, [r1, #0]
 801a3ec:	460c      	mov	r4, r1
 801a3ee:	4605      	mov	r5, r0
 801a3f0:	3b01      	subs	r3, #1
 801a3f2:	2b0d      	cmp	r3, #13
 801a3f4:	d854      	bhi.n	801a4a0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a3f6:	e8df f003 	tbb	[pc, r3]
 801a3fa:	0730      	.short	0x0730
 801a3fc:	07071b1b 	.word	0x07071b1b
 801a400:	0c530707 	.word	0x0c530707
 801a404:	494e0c0c 	.word	0x494e0c0c
 801a408:	3104      	adds	r1, #4
 801a40a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a40e:	f7ff bfc3 	b.w	801a398 <uxr_serialize_DATAWRITER_Representation>
 801a412:	7909      	ldrb	r1, [r1, #4]
 801a414:	f7f7 fc16 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a418:	b1e8      	cbz	r0, 801a456 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a41a:	7923      	ldrb	r3, [r4, #4]
 801a41c:	2b01      	cmp	r3, #1
 801a41e:	d001      	beq.n	801a424 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a420:	2b02      	cmp	r3, #2
 801a422:	d13d      	bne.n	801a4a0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a424:	68a1      	ldr	r1, [r4, #8]
 801a426:	4628      	mov	r0, r5
 801a428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a42c:	f004 b80c 	b.w	801e448 <ucdr_serialize_string>
 801a430:	7909      	ldrb	r1, [r1, #4]
 801a432:	f7f7 fc07 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a436:	4606      	mov	r6, r0
 801a438:	b120      	cbz	r0, 801a444 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a43a:	7923      	ldrb	r3, [r4, #4]
 801a43c:	2b02      	cmp	r3, #2
 801a43e:	d039      	beq.n	801a4b4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a440:	2b03      	cmp	r3, #3
 801a442:	d02f      	beq.n	801a4a4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a444:	2202      	movs	r2, #2
 801a446:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801a44a:	4628      	mov	r0, r5
 801a44c:	f7fd f8c2 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a450:	4030      	ands	r0, r6
 801a452:	b2c0      	uxtb	r0, r0
 801a454:	bd70      	pop	{r4, r5, r6, pc}
 801a456:	2000      	movs	r0, #0
 801a458:	bd70      	pop	{r4, r5, r6, pc}
 801a45a:	7909      	ldrb	r1, [r1, #4]
 801a45c:	f7f7 fbf2 	bl	8011c44 <ucdr_serialize_uint8_t>
 801a460:	4606      	mov	r6, r0
 801a462:	b158      	cbz	r0, 801a47c <uxr_serialize_ObjectVariant.part.0+0x94>
 801a464:	7923      	ldrb	r3, [r4, #4]
 801a466:	2b02      	cmp	r3, #2
 801a468:	d003      	beq.n	801a472 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a46a:	2b03      	cmp	r3, #3
 801a46c:	d028      	beq.n	801a4c0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a46e:	2b01      	cmp	r3, #1
 801a470:	d104      	bne.n	801a47c <uxr_serialize_ObjectVariant.part.0+0x94>
 801a472:	68a1      	ldr	r1, [r4, #8]
 801a474:	4628      	mov	r0, r5
 801a476:	f003 ffe7 	bl	801e448 <ucdr_serialize_string>
 801a47a:	4606      	mov	r6, r0
 801a47c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801a480:	4628      	mov	r0, r5
 801a482:	f7f8 f91b 	bl	80126bc <ucdr_serialize_int16_t>
 801a486:	4030      	ands	r0, r6
 801a488:	b2c0      	uxtb	r0, r0
 801a48a:	bd70      	pop	{r4, r5, r6, pc}
 801a48c:	3104      	adds	r1, #4
 801a48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a492:	f7ff be7b 	b.w	801a18c <uxr_serialize_CLIENT_Representation>
 801a496:	3104      	adds	r1, #4
 801a498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a49c:	f7ff bf32 	b.w	801a304 <uxr_serialize_AGENT_Representation>
 801a4a0:	2001      	movs	r0, #1
 801a4a2:	bd70      	pop	{r4, r5, r6, pc}
 801a4a4:	68a2      	ldr	r2, [r4, #8]
 801a4a6:	f104 010c 	add.w	r1, r4, #12
 801a4aa:	4628      	mov	r0, r5
 801a4ac:	f7f8 ff42 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801a4b0:	4606      	mov	r6, r0
 801a4b2:	e7c7      	b.n	801a444 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a4b4:	68a1      	ldr	r1, [r4, #8]
 801a4b6:	4628      	mov	r0, r5
 801a4b8:	f003 ffc6 	bl	801e448 <ucdr_serialize_string>
 801a4bc:	4606      	mov	r6, r0
 801a4be:	e7c1      	b.n	801a444 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a4c0:	68a2      	ldr	r2, [r4, #8]
 801a4c2:	f104 010c 	add.w	r1, r4, #12
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	f7f8 ff34 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801a4cc:	4606      	mov	r6, r0
 801a4ce:	e7d5      	b.n	801a47c <uxr_serialize_ObjectVariant.part.0+0x94>

0801a4d0 <uxr_deserialize_DATAWRITER_Representation>:
 801a4d0:	b570      	push	{r4, r5, r6, lr}
 801a4d2:	4606      	mov	r6, r0
 801a4d4:	460d      	mov	r5, r1
 801a4d6:	f7f7 fbcb 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801a4da:	4604      	mov	r4, r0
 801a4dc:	b130      	cbz	r0, 801a4ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a4de:	782b      	ldrb	r3, [r5, #0]
 801a4e0:	2b02      	cmp	r3, #2
 801a4e2:	d00c      	beq.n	801a4fe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a4e4:	2b03      	cmp	r3, #3
 801a4e6:	d012      	beq.n	801a50e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a4e8:	2b01      	cmp	r3, #1
 801a4ea:	d008      	beq.n	801a4fe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a4ec:	2202      	movs	r2, #2
 801a4ee:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a4f2:	4630      	mov	r0, r6
 801a4f4:	f7fd f8d2 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801a4f8:	4020      	ands	r0, r4
 801a4fa:	b2c0      	uxtb	r0, r0
 801a4fc:	bd70      	pop	{r4, r5, r6, pc}
 801a4fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a502:	6869      	ldr	r1, [r5, #4]
 801a504:	4630      	mov	r0, r6
 801a506:	f003 ffaf 	bl	801e468 <ucdr_deserialize_string>
 801a50a:	4604      	mov	r4, r0
 801a50c:	e7ee      	b.n	801a4ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a50e:	1d2b      	adds	r3, r5, #4
 801a510:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a514:	f105 0108 	add.w	r1, r5, #8
 801a518:	4630      	mov	r0, r6
 801a51a:	f7f8 ff1d 	bl	8013358 <ucdr_deserialize_sequence_uint8_t>
 801a51e:	4604      	mov	r4, r0
 801a520:	e7e4      	b.n	801a4ec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a522:	bf00      	nop

0801a524 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a524:	b570      	push	{r4, r5, r6, lr}
 801a526:	460d      	mov	r5, r1
 801a528:	7809      	ldrb	r1, [r1, #0]
 801a52a:	4606      	mov	r6, r0
 801a52c:	f7f7 fb5c 	bl	8011be8 <ucdr_serialize_bool>
 801a530:	782b      	ldrb	r3, [r5, #0]
 801a532:	4604      	mov	r4, r0
 801a534:	b94b      	cbnz	r3, 801a54a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a536:	7a29      	ldrb	r1, [r5, #8]
 801a538:	4630      	mov	r0, r6
 801a53a:	f7f7 fb55 	bl	8011be8 <ucdr_serialize_bool>
 801a53e:	7a2b      	ldrb	r3, [r5, #8]
 801a540:	4004      	ands	r4, r0
 801a542:	b2e4      	uxtb	r4, r4
 801a544:	b943      	cbnz	r3, 801a558 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a546:	4620      	mov	r0, r4
 801a548:	bd70      	pop	{r4, r5, r6, pc}
 801a54a:	6869      	ldr	r1, [r5, #4]
 801a54c:	4630      	mov	r0, r6
 801a54e:	f003 ff7b 	bl	801e448 <ucdr_serialize_string>
 801a552:	4004      	ands	r4, r0
 801a554:	b2e4      	uxtb	r4, r4
 801a556:	e7ee      	b.n	801a536 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a558:	68e9      	ldr	r1, [r5, #12]
 801a55a:	4630      	mov	r0, r6
 801a55c:	f003 ff74 	bl	801e448 <ucdr_serialize_string>
 801a560:	4004      	ands	r4, r0
 801a562:	4620      	mov	r0, r4
 801a564:	bd70      	pop	{r4, r5, r6, pc}
 801a566:	bf00      	nop

0801a568 <uxr_serialize_OBJK_Topic_Binary>:
 801a568:	b570      	push	{r4, r5, r6, lr}
 801a56a:	460d      	mov	r5, r1
 801a56c:	4606      	mov	r6, r0
 801a56e:	6809      	ldr	r1, [r1, #0]
 801a570:	f003 ff6a 	bl	801e448 <ucdr_serialize_string>
 801a574:	4604      	mov	r4, r0
 801a576:	7929      	ldrb	r1, [r5, #4]
 801a578:	4630      	mov	r0, r6
 801a57a:	f7f7 fb35 	bl	8011be8 <ucdr_serialize_bool>
 801a57e:	792b      	ldrb	r3, [r5, #4]
 801a580:	4004      	ands	r4, r0
 801a582:	b2e4      	uxtb	r4, r4
 801a584:	b943      	cbnz	r3, 801a598 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a586:	7b29      	ldrb	r1, [r5, #12]
 801a588:	4630      	mov	r0, r6
 801a58a:	f7f7 fb2d 	bl	8011be8 <ucdr_serialize_bool>
 801a58e:	7b2b      	ldrb	r3, [r5, #12]
 801a590:	4004      	ands	r4, r0
 801a592:	b93b      	cbnz	r3, 801a5a4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a594:	4620      	mov	r0, r4
 801a596:	bd70      	pop	{r4, r5, r6, pc}
 801a598:	68a9      	ldr	r1, [r5, #8]
 801a59a:	4630      	mov	r0, r6
 801a59c:	f003 ff54 	bl	801e448 <ucdr_serialize_string>
 801a5a0:	4004      	ands	r4, r0
 801a5a2:	e7f0      	b.n	801a586 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a5a4:	6929      	ldr	r1, [r5, #16]
 801a5a6:	4630      	mov	r0, r6
 801a5a8:	f003 ff4e 	bl	801e448 <ucdr_serialize_string>
 801a5ac:	4004      	ands	r4, r0
 801a5ae:	b2e4      	uxtb	r4, r4
 801a5b0:	4620      	mov	r0, r4
 801a5b2:	bd70      	pop	{r4, r5, r6, pc}

0801a5b4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5b8:	460c      	mov	r4, r1
 801a5ba:	7809      	ldrb	r1, [r1, #0]
 801a5bc:	4606      	mov	r6, r0
 801a5be:	f7f7 fb13 	bl	8011be8 <ucdr_serialize_bool>
 801a5c2:	7823      	ldrb	r3, [r4, #0]
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	b96b      	cbnz	r3, 801a5e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a5c8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a5cc:	4630      	mov	r0, r6
 801a5ce:	f7f7 fb0b 	bl	8011be8 <ucdr_serialize_bool>
 801a5d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a5d6:	4005      	ands	r5, r0
 801a5d8:	b2ed      	uxtb	r5, r5
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d169      	bne.n	801a6b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a5de:	4628      	mov	r0, r5
 801a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5e4:	6861      	ldr	r1, [r4, #4]
 801a5e6:	4630      	mov	r0, r6
 801a5e8:	f7f7 fd42 	bl	8012070 <ucdr_serialize_uint32_t>
 801a5ec:	6863      	ldr	r3, [r4, #4]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d06b      	beq.n	801a6ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a5f2:	2800      	cmp	r0, #0
 801a5f4:	d067      	beq.n	801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a5f6:	68a1      	ldr	r1, [r4, #8]
 801a5f8:	4630      	mov	r0, r6
 801a5fa:	f003 ff25 	bl	801e448 <ucdr_serialize_string>
 801a5fe:	6863      	ldr	r3, [r4, #4]
 801a600:	2b01      	cmp	r3, #1
 801a602:	d953      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a604:	2800      	cmp	r0, #0
 801a606:	d05e      	beq.n	801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a608:	68e1      	ldr	r1, [r4, #12]
 801a60a:	4630      	mov	r0, r6
 801a60c:	f003 ff1c 	bl	801e448 <ucdr_serialize_string>
 801a610:	6863      	ldr	r3, [r4, #4]
 801a612:	2b02      	cmp	r3, #2
 801a614:	d94a      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a616:	2800      	cmp	r0, #0
 801a618:	d055      	beq.n	801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a61a:	6921      	ldr	r1, [r4, #16]
 801a61c:	4630      	mov	r0, r6
 801a61e:	f003 ff13 	bl	801e448 <ucdr_serialize_string>
 801a622:	6863      	ldr	r3, [r4, #4]
 801a624:	2b03      	cmp	r3, #3
 801a626:	d941      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a628:	2800      	cmp	r0, #0
 801a62a:	d04c      	beq.n	801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a62c:	6961      	ldr	r1, [r4, #20]
 801a62e:	4630      	mov	r0, r6
 801a630:	f003 ff0a 	bl	801e448 <ucdr_serialize_string>
 801a634:	6863      	ldr	r3, [r4, #4]
 801a636:	2b04      	cmp	r3, #4
 801a638:	d938      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a63a:	2800      	cmp	r0, #0
 801a63c:	d043      	beq.n	801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a63e:	69a1      	ldr	r1, [r4, #24]
 801a640:	4630      	mov	r0, r6
 801a642:	f003 ff01 	bl	801e448 <ucdr_serialize_string>
 801a646:	6863      	ldr	r3, [r4, #4]
 801a648:	2b05      	cmp	r3, #5
 801a64a:	d92f      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a64c:	2800      	cmp	r0, #0
 801a64e:	d03a      	beq.n	801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a650:	69e1      	ldr	r1, [r4, #28]
 801a652:	4630      	mov	r0, r6
 801a654:	f003 fef8 	bl	801e448 <ucdr_serialize_string>
 801a658:	6863      	ldr	r3, [r4, #4]
 801a65a:	2b06      	cmp	r3, #6
 801a65c:	d926      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a65e:	b390      	cbz	r0, 801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a660:	6a21      	ldr	r1, [r4, #32]
 801a662:	4630      	mov	r0, r6
 801a664:	f003 fef0 	bl	801e448 <ucdr_serialize_string>
 801a668:	6863      	ldr	r3, [r4, #4]
 801a66a:	2b07      	cmp	r3, #7
 801a66c:	d91e      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a66e:	b350      	cbz	r0, 801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a670:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a672:	4630      	mov	r0, r6
 801a674:	f003 fee8 	bl	801e448 <ucdr_serialize_string>
 801a678:	6863      	ldr	r3, [r4, #4]
 801a67a:	2b08      	cmp	r3, #8
 801a67c:	d916      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a67e:	b310      	cbz	r0, 801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a680:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a682:	4630      	mov	r0, r6
 801a684:	f003 fee0 	bl	801e448 <ucdr_serialize_string>
 801a688:	6863      	ldr	r3, [r4, #4]
 801a68a:	2b09      	cmp	r3, #9
 801a68c:	d90e      	bls.n	801a6ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a68e:	b1d0      	cbz	r0, 801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a690:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a694:	2709      	movs	r7, #9
 801a696:	e000      	b.n	801a69a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a698:	b1a8      	cbz	r0, 801a6c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a69a:	f858 1b04 	ldr.w	r1, [r8], #4
 801a69e:	4630      	mov	r0, r6
 801a6a0:	f003 fed2 	bl	801e448 <ucdr_serialize_string>
 801a6a4:	3701      	adds	r7, #1
 801a6a6:	6862      	ldr	r2, [r4, #4]
 801a6a8:	4297      	cmp	r7, r2
 801a6aa:	d3f5      	bcc.n	801a698 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a6ac:	4005      	ands	r5, r0
 801a6ae:	b2ed      	uxtb	r5, r5
 801a6b0:	e78a      	b.n	801a5c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a6b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a6b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a6b8:	4630      	mov	r0, r6
 801a6ba:	f7f8 fe3b 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801a6be:	4005      	ands	r5, r0
 801a6c0:	4628      	mov	r0, r5
 801a6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6c6:	2500      	movs	r5, #0
 801a6c8:	e77e      	b.n	801a5c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a6ca:	4028      	ands	r0, r5
 801a6cc:	b2c5      	uxtb	r5, r0
 801a6ce:	e77b      	b.n	801a5c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a6d0 <uxr_serialize_OBJK_Publisher_Binary>:
 801a6d0:	b570      	push	{r4, r5, r6, lr}
 801a6d2:	460d      	mov	r5, r1
 801a6d4:	7809      	ldrb	r1, [r1, #0]
 801a6d6:	4606      	mov	r6, r0
 801a6d8:	f7f7 fa86 	bl	8011be8 <ucdr_serialize_bool>
 801a6dc:	782b      	ldrb	r3, [r5, #0]
 801a6de:	4604      	mov	r4, r0
 801a6e0:	b94b      	cbnz	r3, 801a6f6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a6e2:	7a29      	ldrb	r1, [r5, #8]
 801a6e4:	4630      	mov	r0, r6
 801a6e6:	f7f7 fa7f 	bl	8011be8 <ucdr_serialize_bool>
 801a6ea:	7a2b      	ldrb	r3, [r5, #8]
 801a6ec:	4004      	ands	r4, r0
 801a6ee:	b2e4      	uxtb	r4, r4
 801a6f0:	b943      	cbnz	r3, 801a704 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a6f2:	4620      	mov	r0, r4
 801a6f4:	bd70      	pop	{r4, r5, r6, pc}
 801a6f6:	6869      	ldr	r1, [r5, #4]
 801a6f8:	4630      	mov	r0, r6
 801a6fa:	f003 fea5 	bl	801e448 <ucdr_serialize_string>
 801a6fe:	4004      	ands	r4, r0
 801a700:	b2e4      	uxtb	r4, r4
 801a702:	e7ee      	b.n	801a6e2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a704:	f105 010c 	add.w	r1, r5, #12
 801a708:	4630      	mov	r0, r6
 801a70a:	f7ff ff53 	bl	801a5b4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a70e:	4004      	ands	r4, r0
 801a710:	4620      	mov	r0, r4
 801a712:	bd70      	pop	{r4, r5, r6, pc}

0801a714 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a718:	460c      	mov	r4, r1
 801a71a:	7809      	ldrb	r1, [r1, #0]
 801a71c:	4606      	mov	r6, r0
 801a71e:	f7f7 fa63 	bl	8011be8 <ucdr_serialize_bool>
 801a722:	7823      	ldrb	r3, [r4, #0]
 801a724:	4605      	mov	r5, r0
 801a726:	b96b      	cbnz	r3, 801a744 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a728:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a72c:	4630      	mov	r0, r6
 801a72e:	f7f7 fa5b 	bl	8011be8 <ucdr_serialize_bool>
 801a732:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a736:	4005      	ands	r5, r0
 801a738:	b2ed      	uxtb	r5, r5
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d169      	bne.n	801a812 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a73e:	4628      	mov	r0, r5
 801a740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a744:	6861      	ldr	r1, [r4, #4]
 801a746:	4630      	mov	r0, r6
 801a748:	f7f7 fc92 	bl	8012070 <ucdr_serialize_uint32_t>
 801a74c:	6863      	ldr	r3, [r4, #4]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d06b      	beq.n	801a82a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a752:	2800      	cmp	r0, #0
 801a754:	d067      	beq.n	801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a756:	68a1      	ldr	r1, [r4, #8]
 801a758:	4630      	mov	r0, r6
 801a75a:	f003 fe75 	bl	801e448 <ucdr_serialize_string>
 801a75e:	6863      	ldr	r3, [r4, #4]
 801a760:	2b01      	cmp	r3, #1
 801a762:	d953      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a764:	2800      	cmp	r0, #0
 801a766:	d05e      	beq.n	801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a768:	68e1      	ldr	r1, [r4, #12]
 801a76a:	4630      	mov	r0, r6
 801a76c:	f003 fe6c 	bl	801e448 <ucdr_serialize_string>
 801a770:	6863      	ldr	r3, [r4, #4]
 801a772:	2b02      	cmp	r3, #2
 801a774:	d94a      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a776:	2800      	cmp	r0, #0
 801a778:	d055      	beq.n	801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a77a:	6921      	ldr	r1, [r4, #16]
 801a77c:	4630      	mov	r0, r6
 801a77e:	f003 fe63 	bl	801e448 <ucdr_serialize_string>
 801a782:	6863      	ldr	r3, [r4, #4]
 801a784:	2b03      	cmp	r3, #3
 801a786:	d941      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a788:	2800      	cmp	r0, #0
 801a78a:	d04c      	beq.n	801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a78c:	6961      	ldr	r1, [r4, #20]
 801a78e:	4630      	mov	r0, r6
 801a790:	f003 fe5a 	bl	801e448 <ucdr_serialize_string>
 801a794:	6863      	ldr	r3, [r4, #4]
 801a796:	2b04      	cmp	r3, #4
 801a798:	d938      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a79a:	2800      	cmp	r0, #0
 801a79c:	d043      	beq.n	801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a79e:	69a1      	ldr	r1, [r4, #24]
 801a7a0:	4630      	mov	r0, r6
 801a7a2:	f003 fe51 	bl	801e448 <ucdr_serialize_string>
 801a7a6:	6863      	ldr	r3, [r4, #4]
 801a7a8:	2b05      	cmp	r3, #5
 801a7aa:	d92f      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7ac:	2800      	cmp	r0, #0
 801a7ae:	d03a      	beq.n	801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7b0:	69e1      	ldr	r1, [r4, #28]
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	f003 fe48 	bl	801e448 <ucdr_serialize_string>
 801a7b8:	6863      	ldr	r3, [r4, #4]
 801a7ba:	2b06      	cmp	r3, #6
 801a7bc:	d926      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7be:	b390      	cbz	r0, 801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7c0:	6a21      	ldr	r1, [r4, #32]
 801a7c2:	4630      	mov	r0, r6
 801a7c4:	f003 fe40 	bl	801e448 <ucdr_serialize_string>
 801a7c8:	6863      	ldr	r3, [r4, #4]
 801a7ca:	2b07      	cmp	r3, #7
 801a7cc:	d91e      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7ce:	b350      	cbz	r0, 801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f003 fe38 	bl	801e448 <ucdr_serialize_string>
 801a7d8:	6863      	ldr	r3, [r4, #4]
 801a7da:	2b08      	cmp	r3, #8
 801a7dc:	d916      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7de:	b310      	cbz	r0, 801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a7e2:	4630      	mov	r0, r6
 801a7e4:	f003 fe30 	bl	801e448 <ucdr_serialize_string>
 801a7e8:	6863      	ldr	r3, [r4, #4]
 801a7ea:	2b09      	cmp	r3, #9
 801a7ec:	d90e      	bls.n	801a80c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a7ee:	b1d0      	cbz	r0, 801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7f0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a7f4:	2709      	movs	r7, #9
 801a7f6:	e000      	b.n	801a7fa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a7f8:	b1a8      	cbz	r0, 801a826 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a7fa:	f858 1b04 	ldr.w	r1, [r8], #4
 801a7fe:	4630      	mov	r0, r6
 801a800:	f003 fe22 	bl	801e448 <ucdr_serialize_string>
 801a804:	3701      	adds	r7, #1
 801a806:	6862      	ldr	r2, [r4, #4]
 801a808:	4297      	cmp	r7, r2
 801a80a:	d3f5      	bcc.n	801a7f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a80c:	4005      	ands	r5, r0
 801a80e:	b2ed      	uxtb	r5, r5
 801a810:	e78a      	b.n	801a728 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a814:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a818:	4630      	mov	r0, r6
 801a81a:	f7f8 fd8b 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801a81e:	4005      	ands	r5, r0
 801a820:	4628      	mov	r0, r5
 801a822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a826:	2500      	movs	r5, #0
 801a828:	e77e      	b.n	801a728 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a82a:	4028      	ands	r0, r5
 801a82c:	b2c5      	uxtb	r5, r0
 801a82e:	e77b      	b.n	801a728 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a830 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a830:	b570      	push	{r4, r5, r6, lr}
 801a832:	460d      	mov	r5, r1
 801a834:	7809      	ldrb	r1, [r1, #0]
 801a836:	4606      	mov	r6, r0
 801a838:	f7f7 f9d6 	bl	8011be8 <ucdr_serialize_bool>
 801a83c:	782b      	ldrb	r3, [r5, #0]
 801a83e:	4604      	mov	r4, r0
 801a840:	b94b      	cbnz	r3, 801a856 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a842:	7a29      	ldrb	r1, [r5, #8]
 801a844:	4630      	mov	r0, r6
 801a846:	f7f7 f9cf 	bl	8011be8 <ucdr_serialize_bool>
 801a84a:	7a2b      	ldrb	r3, [r5, #8]
 801a84c:	4004      	ands	r4, r0
 801a84e:	b2e4      	uxtb	r4, r4
 801a850:	b943      	cbnz	r3, 801a864 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a852:	4620      	mov	r0, r4
 801a854:	bd70      	pop	{r4, r5, r6, pc}
 801a856:	6869      	ldr	r1, [r5, #4]
 801a858:	4630      	mov	r0, r6
 801a85a:	f003 fdf5 	bl	801e448 <ucdr_serialize_string>
 801a85e:	4004      	ands	r4, r0
 801a860:	b2e4      	uxtb	r4, r4
 801a862:	e7ee      	b.n	801a842 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a864:	f105 010c 	add.w	r1, r5, #12
 801a868:	4630      	mov	r0, r6
 801a86a:	f7ff ff53 	bl	801a714 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a86e:	4004      	ands	r4, r0
 801a870:	4620      	mov	r0, r4
 801a872:	bd70      	pop	{r4, r5, r6, pc}

0801a874 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a874:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a878:	4688      	mov	r8, r1
 801a87a:	4681      	mov	r9, r0
 801a87c:	8809      	ldrh	r1, [r1, #0]
 801a87e:	f7f7 fa0d 	bl	8011c9c <ucdr_serialize_uint16_t>
 801a882:	4606      	mov	r6, r0
 801a884:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a888:	4648      	mov	r0, r9
 801a88a:	f7f7 f9ad 	bl	8011be8 <ucdr_serialize_bool>
 801a88e:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a892:	4006      	ands	r6, r0
 801a894:	b2f5      	uxtb	r5, r6
 801a896:	b9eb      	cbnz	r3, 801a8d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a898:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a89c:	4648      	mov	r0, r9
 801a89e:	f7f7 f9a3 	bl	8011be8 <ucdr_serialize_bool>
 801a8a2:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a8a6:	4005      	ands	r5, r0
 801a8a8:	bb7b      	cbnz	r3, 801a90a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a8aa:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a8ae:	4648      	mov	r0, r9
 801a8b0:	f7f7 f99a 	bl	8011be8 <ucdr_serialize_bool>
 801a8b4:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a8b8:	4005      	ands	r5, r0
 801a8ba:	b9f3      	cbnz	r3, 801a8fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a8bc:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a8c0:	4648      	mov	r0, r9
 801a8c2:	f7f7 f991 	bl	8011be8 <ucdr_serialize_bool>
 801a8c6:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a8ca:	4005      	ands	r5, r0
 801a8cc:	b94b      	cbnz	r3, 801a8e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a8d4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a8d8:	4648      	mov	r0, r9
 801a8da:	f7f7 f9df 	bl	8011c9c <ucdr_serialize_uint16_t>
 801a8de:	4005      	ands	r5, r0
 801a8e0:	e7da      	b.n	801a898 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a8e2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a8e6:	f108 011c 	add.w	r1, r8, #28
 801a8ea:	4648      	mov	r0, r9
 801a8ec:	f7f8 fd22 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801a8f0:	4028      	ands	r0, r5
 801a8f2:	b2c5      	uxtb	r5, r0
 801a8f4:	4628      	mov	r0, r5
 801a8f6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a8fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a8fe:	4648      	mov	r0, r9
 801a900:	f7f7 fbb6 	bl	8012070 <ucdr_serialize_uint32_t>
 801a904:	4028      	ands	r0, r5
 801a906:	b2c5      	uxtb	r5, r0
 801a908:	e7d8      	b.n	801a8bc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a90a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a90e:	4648      	mov	r0, r9
 801a910:	f7f7 fbae 	bl	8012070 <ucdr_serialize_uint32_t>
 801a914:	4028      	ands	r0, r5
 801a916:	b2c5      	uxtb	r5, r0
 801a918:	e7c7      	b.n	801a8aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a91a:	bf00      	nop

0801a91c <uxr_serialize_OBJK_DataReader_Binary>:
 801a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a91e:	2202      	movs	r2, #2
 801a920:	460c      	mov	r4, r1
 801a922:	4606      	mov	r6, r0
 801a924:	f7fc fe56 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a928:	4605      	mov	r5, r0
 801a92a:	78a1      	ldrb	r1, [r4, #2]
 801a92c:	4630      	mov	r0, r6
 801a92e:	f7f7 f95b 	bl	8011be8 <ucdr_serialize_bool>
 801a932:	78a3      	ldrb	r3, [r4, #2]
 801a934:	4005      	ands	r5, r0
 801a936:	b2ed      	uxtb	r5, r5
 801a938:	b90b      	cbnz	r3, 801a93e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a93a:	4628      	mov	r0, r5
 801a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a93e:	f104 0108 	add.w	r1, r4, #8
 801a942:	4630      	mov	r0, r6
 801a944:	f7ff ff96 	bl	801a874 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a948:	4607      	mov	r7, r0
 801a94a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a94e:	4630      	mov	r0, r6
 801a950:	f7f7 f94a 	bl	8011be8 <ucdr_serialize_bool>
 801a954:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a958:	4038      	ands	r0, r7
 801a95a:	b2c7      	uxtb	r7, r0
 801a95c:	b95b      	cbnz	r3, 801a976 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a95e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801a962:	4630      	mov	r0, r6
 801a964:	f7f7 f940 	bl	8011be8 <ucdr_serialize_bool>
 801a968:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a96c:	4007      	ands	r7, r0
 801a96e:	b94b      	cbnz	r3, 801a984 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a970:	403d      	ands	r5, r7
 801a972:	4628      	mov	r0, r5
 801a974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a976:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801a97a:	4630      	mov	r0, r6
 801a97c:	f7f7 fdce 	bl	801251c <ucdr_serialize_uint64_t>
 801a980:	4007      	ands	r7, r0
 801a982:	e7ec      	b.n	801a95e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a984:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a986:	4630      	mov	r0, r6
 801a988:	f003 fd5e 	bl	801e448 <ucdr_serialize_string>
 801a98c:	4007      	ands	r7, r0
 801a98e:	b2ff      	uxtb	r7, r7
 801a990:	e7ee      	b.n	801a970 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a992:	bf00      	nop

0801a994 <uxr_serialize_OBJK_DataWriter_Binary>:
 801a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a996:	2202      	movs	r2, #2
 801a998:	460d      	mov	r5, r1
 801a99a:	4606      	mov	r6, r0
 801a99c:	f7fc fe1a 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801a9a0:	4604      	mov	r4, r0
 801a9a2:	78a9      	ldrb	r1, [r5, #2]
 801a9a4:	4630      	mov	r0, r6
 801a9a6:	f7f7 f91f 	bl	8011be8 <ucdr_serialize_bool>
 801a9aa:	78ab      	ldrb	r3, [r5, #2]
 801a9ac:	4004      	ands	r4, r0
 801a9ae:	b2e4      	uxtb	r4, r4
 801a9b0:	b90b      	cbnz	r3, 801a9b6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a9b2:	4620      	mov	r0, r4
 801a9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9b6:	f105 0108 	add.w	r1, r5, #8
 801a9ba:	4630      	mov	r0, r6
 801a9bc:	f7ff ff5a 	bl	801a874 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a9c0:	4607      	mov	r7, r0
 801a9c2:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801a9c6:	4630      	mov	r0, r6
 801a9c8:	f7f7 f90e 	bl	8011be8 <ucdr_serialize_bool>
 801a9cc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801a9d0:	4038      	ands	r0, r7
 801a9d2:	b2c7      	uxtb	r7, r0
 801a9d4:	b913      	cbnz	r3, 801a9dc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a9d6:	403c      	ands	r4, r7
 801a9d8:	4620      	mov	r0, r4
 801a9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9dc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801a9e0:	4630      	mov	r0, r6
 801a9e2:	f7f7 fd9b 	bl	801251c <ucdr_serialize_uint64_t>
 801a9e6:	4007      	ands	r7, r0
 801a9e8:	e7f5      	b.n	801a9d6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a9ea:	bf00      	nop

0801a9ec <uxr_serialize_OBJK_Replier_Binary>:
 801a9ec:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a9f0:	460f      	mov	r7, r1
 801a9f2:	4680      	mov	r8, r0
 801a9f4:	6809      	ldr	r1, [r1, #0]
 801a9f6:	f003 fd27 	bl	801e448 <ucdr_serialize_string>
 801a9fa:	4605      	mov	r5, r0
 801a9fc:	6879      	ldr	r1, [r7, #4]
 801a9fe:	4640      	mov	r0, r8
 801aa00:	f003 fd22 	bl	801e448 <ucdr_serialize_string>
 801aa04:	4005      	ands	r5, r0
 801aa06:	68b9      	ldr	r1, [r7, #8]
 801aa08:	4640      	mov	r0, r8
 801aa0a:	b2ec      	uxtb	r4, r5
 801aa0c:	f003 fd1c 	bl	801e448 <ucdr_serialize_string>
 801aa10:	7b39      	ldrb	r1, [r7, #12]
 801aa12:	4004      	ands	r4, r0
 801aa14:	4640      	mov	r0, r8
 801aa16:	f7f7 f8e7 	bl	8011be8 <ucdr_serialize_bool>
 801aa1a:	7b3b      	ldrb	r3, [r7, #12]
 801aa1c:	4004      	ands	r4, r0
 801aa1e:	b94b      	cbnz	r3, 801aa34 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801aa20:	7d39      	ldrb	r1, [r7, #20]
 801aa22:	4640      	mov	r0, r8
 801aa24:	f7f7 f8e0 	bl	8011be8 <ucdr_serialize_bool>
 801aa28:	7d3b      	ldrb	r3, [r7, #20]
 801aa2a:	4004      	ands	r4, r0
 801aa2c:	b943      	cbnz	r3, 801aa40 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801aa2e:	4620      	mov	r0, r4
 801aa30:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aa34:	6939      	ldr	r1, [r7, #16]
 801aa36:	4640      	mov	r0, r8
 801aa38:	f003 fd06 	bl	801e448 <ucdr_serialize_string>
 801aa3c:	4004      	ands	r4, r0
 801aa3e:	e7ef      	b.n	801aa20 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801aa40:	69b9      	ldr	r1, [r7, #24]
 801aa42:	4640      	mov	r0, r8
 801aa44:	f003 fd00 	bl	801e448 <ucdr_serialize_string>
 801aa48:	4004      	ands	r4, r0
 801aa4a:	b2e4      	uxtb	r4, r4
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aa52:	bf00      	nop

0801aa54 <uxr_deserialize_ObjectVariant>:
 801aa54:	b570      	push	{r4, r5, r6, lr}
 801aa56:	4605      	mov	r5, r0
 801aa58:	460e      	mov	r6, r1
 801aa5a:	f7f7 f909 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801aa5e:	b168      	cbz	r0, 801aa7c <uxr_deserialize_ObjectVariant+0x28>
 801aa60:	7833      	ldrb	r3, [r6, #0]
 801aa62:	4604      	mov	r4, r0
 801aa64:	3b01      	subs	r3, #1
 801aa66:	2b0d      	cmp	r3, #13
 801aa68:	d809      	bhi.n	801aa7e <uxr_deserialize_ObjectVariant+0x2a>
 801aa6a:	e8df f003 	tbb	[pc, r3]
 801aa6e:	0a41      	.short	0x0a41
 801aa70:	0a0a2323 	.word	0x0a0a2323
 801aa74:	10080a0a 	.word	0x10080a0a
 801aa78:	565c1010 	.word	0x565c1010
 801aa7c:	2400      	movs	r4, #0
 801aa7e:	4620      	mov	r0, r4
 801aa80:	bd70      	pop	{r4, r5, r6, pc}
 801aa82:	1d31      	adds	r1, r6, #4
 801aa84:	4628      	mov	r0, r5
 801aa86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa8a:	f7ff bd21 	b.w	801a4d0 <uxr_deserialize_DATAWRITER_Representation>
 801aa8e:	1d31      	adds	r1, r6, #4
 801aa90:	4628      	mov	r0, r5
 801aa92:	f7f7 f8ed 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801aa96:	2800      	cmp	r0, #0
 801aa98:	d0f0      	beq.n	801aa7c <uxr_deserialize_ObjectVariant+0x28>
 801aa9a:	7933      	ldrb	r3, [r6, #4]
 801aa9c:	2b01      	cmp	r3, #1
 801aa9e:	d001      	beq.n	801aaa4 <uxr_deserialize_ObjectVariant+0x50>
 801aaa0:	2b02      	cmp	r3, #2
 801aaa2:	d1ec      	bne.n	801aa7e <uxr_deserialize_ObjectVariant+0x2a>
 801aaa4:	68b1      	ldr	r1, [r6, #8]
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801aaac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aab0:	f003 bcda 	b.w	801e468 <ucdr_deserialize_string>
 801aab4:	1d31      	adds	r1, r6, #4
 801aab6:	4628      	mov	r0, r5
 801aab8:	f7f7 f8da 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801aabc:	4604      	mov	r4, r0
 801aabe:	b170      	cbz	r0, 801aade <uxr_deserialize_ObjectVariant+0x8a>
 801aac0:	7933      	ldrb	r3, [r6, #4]
 801aac2:	2b02      	cmp	r3, #2
 801aac4:	d04c      	beq.n	801ab60 <uxr_deserialize_ObjectVariant+0x10c>
 801aac6:	2b03      	cmp	r3, #3
 801aac8:	d109      	bne.n	801aade <uxr_deserialize_ObjectVariant+0x8a>
 801aaca:	f106 0308 	add.w	r3, r6, #8
 801aace:	f44f 7200 	mov.w	r2, #512	; 0x200
 801aad2:	f106 010c 	add.w	r1, r6, #12
 801aad6:	4628      	mov	r0, r5
 801aad8:	f7f8 fc3e 	bl	8013358 <ucdr_deserialize_sequence_uint8_t>
 801aadc:	4604      	mov	r4, r0
 801aade:	2202      	movs	r2, #2
 801aae0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801aae4:	4628      	mov	r0, r5
 801aae6:	f7fc fdd9 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801aaea:	4020      	ands	r0, r4
 801aaec:	b2c4      	uxtb	r4, r0
 801aaee:	e7c6      	b.n	801aa7e <uxr_deserialize_ObjectVariant+0x2a>
 801aaf0:	1d31      	adds	r1, r6, #4
 801aaf2:	4628      	mov	r0, r5
 801aaf4:	f7f7 f8bc 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801aaf8:	4604      	mov	r4, r0
 801aafa:	b130      	cbz	r0, 801ab0a <uxr_deserialize_ObjectVariant+0xb6>
 801aafc:	7933      	ldrb	r3, [r6, #4]
 801aafe:	2b02      	cmp	r3, #2
 801ab00:	d036      	beq.n	801ab70 <uxr_deserialize_ObjectVariant+0x11c>
 801ab02:	2b03      	cmp	r3, #3
 801ab04:	d03c      	beq.n	801ab80 <uxr_deserialize_ObjectVariant+0x12c>
 801ab06:	2b01      	cmp	r3, #1
 801ab08:	d032      	beq.n	801ab70 <uxr_deserialize_ObjectVariant+0x11c>
 801ab0a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801ab0e:	4628      	mov	r0, r5
 801ab10:	f7f7 fe54 	bl	80127bc <ucdr_deserialize_int16_t>
 801ab14:	4020      	ands	r0, r4
 801ab16:	b2c4      	uxtb	r4, r0
 801ab18:	e7b1      	b.n	801aa7e <uxr_deserialize_ObjectVariant+0x2a>
 801ab1a:	1d31      	adds	r1, r6, #4
 801ab1c:	4628      	mov	r0, r5
 801ab1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab22:	f7ff bb8b 	b.w	801a23c <uxr_deserialize_CLIENT_Representation>
 801ab26:	2204      	movs	r2, #4
 801ab28:	4628      	mov	r0, r5
 801ab2a:	18b1      	adds	r1, r6, r2
 801ab2c:	f7fc fdb6 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801ab30:	4604      	mov	r4, r0
 801ab32:	2202      	movs	r2, #2
 801ab34:	f106 0108 	add.w	r1, r6, #8
 801ab38:	4628      	mov	r0, r5
 801ab3a:	f7fc fdaf 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801ab3e:	4004      	ands	r4, r0
 801ab40:	2202      	movs	r2, #2
 801ab42:	f106 010a 	add.w	r1, r6, #10
 801ab46:	4628      	mov	r0, r5
 801ab48:	b2e4      	uxtb	r4, r4
 801ab4a:	f7fc fda7 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801ab4e:	4603      	mov	r3, r0
 801ab50:	f106 010c 	add.w	r1, r6, #12
 801ab54:	4628      	mov	r0, r5
 801ab56:	401c      	ands	r4, r3
 801ab58:	f7f7 f85c 	bl	8011c14 <ucdr_deserialize_bool>
 801ab5c:	4004      	ands	r4, r0
 801ab5e:	e78e      	b.n	801aa7e <uxr_deserialize_ObjectVariant+0x2a>
 801ab60:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab64:	68b1      	ldr	r1, [r6, #8]
 801ab66:	4628      	mov	r0, r5
 801ab68:	f003 fc7e 	bl	801e468 <ucdr_deserialize_string>
 801ab6c:	4604      	mov	r4, r0
 801ab6e:	e7b6      	b.n	801aade <uxr_deserialize_ObjectVariant+0x8a>
 801ab70:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab74:	68b1      	ldr	r1, [r6, #8]
 801ab76:	4628      	mov	r0, r5
 801ab78:	f003 fc76 	bl	801e468 <ucdr_deserialize_string>
 801ab7c:	4604      	mov	r4, r0
 801ab7e:	e7c4      	b.n	801ab0a <uxr_deserialize_ObjectVariant+0xb6>
 801ab80:	f106 0308 	add.w	r3, r6, #8
 801ab84:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ab88:	f106 010c 	add.w	r1, r6, #12
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	f7f8 fbe3 	bl	8013358 <ucdr_deserialize_sequence_uint8_t>
 801ab92:	4604      	mov	r4, r0
 801ab94:	e7b9      	b.n	801ab0a <uxr_deserialize_ObjectVariant+0xb6>
 801ab96:	bf00      	nop

0801ab98 <uxr_deserialize_BaseObjectRequest>:
 801ab98:	b570      	push	{r4, r5, r6, lr}
 801ab9a:	2202      	movs	r2, #2
 801ab9c:	4605      	mov	r5, r0
 801ab9e:	460e      	mov	r6, r1
 801aba0:	f7fc fd7c 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801aba4:	2202      	movs	r2, #2
 801aba6:	4604      	mov	r4, r0
 801aba8:	4628      	mov	r0, r5
 801abaa:	18b1      	adds	r1, r6, r2
 801abac:	f7fc fd76 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801abb0:	4020      	ands	r0, r4
 801abb2:	b2c0      	uxtb	r0, r0
 801abb4:	bd70      	pop	{r4, r5, r6, pc}
 801abb6:	bf00      	nop

0801abb8 <uxr_serialize_ActivityInfoVariant>:
 801abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abbc:	460e      	mov	r6, r1
 801abbe:	7809      	ldrb	r1, [r1, #0]
 801abc0:	4680      	mov	r8, r0
 801abc2:	f7f7 f83f 	bl	8011c44 <ucdr_serialize_uint8_t>
 801abc6:	4607      	mov	r7, r0
 801abc8:	b138      	cbz	r0, 801abda <uxr_serialize_ActivityInfoVariant+0x22>
 801abca:	7833      	ldrb	r3, [r6, #0]
 801abcc:	2b06      	cmp	r3, #6
 801abce:	f000 8081 	beq.w	801acd4 <uxr_serialize_ActivityInfoVariant+0x11c>
 801abd2:	2b0d      	cmp	r3, #13
 801abd4:	d014      	beq.n	801ac00 <uxr_serialize_ActivityInfoVariant+0x48>
 801abd6:	2b05      	cmp	r3, #5
 801abd8:	d002      	beq.n	801abe0 <uxr_serialize_ActivityInfoVariant+0x28>
 801abda:	4638      	mov	r0, r7
 801abdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abe0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801abe4:	4640      	mov	r0, r8
 801abe6:	f7f7 fd69 	bl	80126bc <ucdr_serialize_int16_t>
 801abea:	4607      	mov	r7, r0
 801abec:	4640      	mov	r0, r8
 801abee:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801abf2:	f7f7 fc93 	bl	801251c <ucdr_serialize_uint64_t>
 801abf6:	4038      	ands	r0, r7
 801abf8:	b2c7      	uxtb	r7, r0
 801abfa:	4638      	mov	r0, r7
 801abfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac00:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ac04:	4640      	mov	r0, r8
 801ac06:	f7f7 fd59 	bl	80126bc <ucdr_serialize_int16_t>
 801ac0a:	68f1      	ldr	r1, [r6, #12]
 801ac0c:	4607      	mov	r7, r0
 801ac0e:	4640      	mov	r0, r8
 801ac10:	f7f7 fa2e 	bl	8012070 <ucdr_serialize_uint32_t>
 801ac14:	68f3      	ldr	r3, [r6, #12]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d0ed      	beq.n	801abf6 <uxr_serialize_ActivityInfoVariant+0x3e>
 801ac1a:	b318      	cbz	r0, 801ac64 <uxr_serialize_ActivityInfoVariant+0xac>
 801ac1c:	f106 090c 	add.w	r9, r6, #12
 801ac20:	2400      	movs	r4, #0
 801ac22:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801ac26:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801ac2a:	7c29      	ldrb	r1, [r5, #16]
 801ac2c:	4640      	mov	r0, r8
 801ac2e:	f7f7 f809 	bl	8011c44 <ucdr_serialize_uint8_t>
 801ac32:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801ac36:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	d051      	beq.n	801ace2 <uxr_serialize_ActivityInfoVariant+0x12a>
 801ac3e:	7c2b      	ldrb	r3, [r5, #16]
 801ac40:	00c9      	lsls	r1, r1, #3
 801ac42:	2b03      	cmp	r3, #3
 801ac44:	d854      	bhi.n	801acf0 <uxr_serialize_ActivityInfoVariant+0x138>
 801ac46:	e8df f003 	tbb	[pc, r3]
 801ac4a:	2133      	.short	0x2133
 801ac4c:	020f      	.short	0x020f
 801ac4e:	4449      	add	r1, r9
 801ac50:	4640      	mov	r0, r8
 801ac52:	6889      	ldr	r1, [r1, #8]
 801ac54:	f003 fbf8 	bl	801e448 <ucdr_serialize_string>
 801ac58:	3401      	adds	r4, #1
 801ac5a:	68f2      	ldr	r2, [r6, #12]
 801ac5c:	4294      	cmp	r4, r2
 801ac5e:	d244      	bcs.n	801acea <uxr_serialize_ActivityInfoVariant+0x132>
 801ac60:	2800      	cmp	r0, #0
 801ac62:	d1de      	bne.n	801ac22 <uxr_serialize_ActivityInfoVariant+0x6a>
 801ac64:	2700      	movs	r7, #0
 801ac66:	e7b8      	b.n	801abda <uxr_serialize_ActivityInfoVariant+0x22>
 801ac68:	3108      	adds	r1, #8
 801ac6a:	44a2      	add	sl, r4
 801ac6c:	2210      	movs	r2, #16
 801ac6e:	4640      	mov	r0, r8
 801ac70:	4449      	add	r1, r9
 801ac72:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ac76:	f7fc fcad 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801ac7a:	4605      	mov	r5, r0
 801ac7c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801ac80:	4640      	mov	r0, r8
 801ac82:	f7f7 f9f5 	bl	8012070 <ucdr_serialize_uint32_t>
 801ac86:	4028      	ands	r0, r5
 801ac88:	b2c0      	uxtb	r0, r0
 801ac8a:	e7e5      	b.n	801ac58 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ac8c:	3108      	adds	r1, #8
 801ac8e:	44a2      	add	sl, r4
 801ac90:	2204      	movs	r2, #4
 801ac92:	4640      	mov	r0, r8
 801ac94:	4449      	add	r1, r9
 801ac96:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ac9a:	f7fc fc9b 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801ac9e:	4605      	mov	r5, r0
 801aca0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801aca4:	4640      	mov	r0, r8
 801aca6:	f7f6 fff9 	bl	8011c9c <ucdr_serialize_uint16_t>
 801acaa:	4028      	ands	r0, r5
 801acac:	b2c0      	uxtb	r0, r0
 801acae:	e7d3      	b.n	801ac58 <uxr_serialize_ActivityInfoVariant+0xa0>
 801acb0:	3108      	adds	r1, #8
 801acb2:	44a2      	add	sl, r4
 801acb4:	2202      	movs	r2, #2
 801acb6:	4640      	mov	r0, r8
 801acb8:	4449      	add	r1, r9
 801acba:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801acbe:	f7fc fc89 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801acc2:	4605      	mov	r5, r0
 801acc4:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801acc8:	4640      	mov	r0, r8
 801acca:	f7f6 ffbb 	bl	8011c44 <ucdr_serialize_uint8_t>
 801acce:	4028      	ands	r0, r5
 801acd0:	b2c0      	uxtb	r0, r0
 801acd2:	e7c1      	b.n	801ac58 <uxr_serialize_ActivityInfoVariant+0xa0>
 801acd4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801acd8:	4640      	mov	r0, r8
 801acda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acde:	f7f7 bced 	b.w	80126bc <ucdr_serialize_int16_t>
 801ace2:	3401      	adds	r4, #1
 801ace4:	68f2      	ldr	r2, [r6, #12]
 801ace6:	42a2      	cmp	r2, r4
 801ace8:	d8bc      	bhi.n	801ac64 <uxr_serialize_ActivityInfoVariant+0xac>
 801acea:	4007      	ands	r7, r0
 801acec:	b2ff      	uxtb	r7, r7
 801acee:	e774      	b.n	801abda <uxr_serialize_ActivityInfoVariant+0x22>
 801acf0:	3401      	adds	r4, #1
 801acf2:	68f3      	ldr	r3, [r6, #12]
 801acf4:	3518      	adds	r5, #24
 801acf6:	429c      	cmp	r4, r3
 801acf8:	d397      	bcc.n	801ac2a <uxr_serialize_ActivityInfoVariant+0x72>
 801acfa:	e76e      	b.n	801abda <uxr_serialize_ActivityInfoVariant+0x22>

0801acfc <uxr_deserialize_BaseObjectReply>:
 801acfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad00:	2202      	movs	r2, #2
 801ad02:	4606      	mov	r6, r0
 801ad04:	460f      	mov	r7, r1
 801ad06:	f7fc fcc9 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801ad0a:	2202      	movs	r2, #2
 801ad0c:	4605      	mov	r5, r0
 801ad0e:	4630      	mov	r0, r6
 801ad10:	18b9      	adds	r1, r7, r2
 801ad12:	f7fc fcc3 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801ad16:	4680      	mov	r8, r0
 801ad18:	1d39      	adds	r1, r7, #4
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	f7f6 ffa8 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801ad20:	ea05 0508 	and.w	r5, r5, r8
 801ad24:	4604      	mov	r4, r0
 801ad26:	1d79      	adds	r1, r7, #5
 801ad28:	4630      	mov	r0, r6
 801ad2a:	402c      	ands	r4, r5
 801ad2c:	f7f6 ffa0 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801ad30:	4020      	ands	r0, r4
 801ad32:	b2c0      	uxtb	r0, r0
 801ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad38 <uxr_serialize_ReadSpecification>:
 801ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad3a:	460e      	mov	r6, r1
 801ad3c:	4607      	mov	r7, r0
 801ad3e:	7809      	ldrb	r1, [r1, #0]
 801ad40:	f7f6 ff80 	bl	8011c44 <ucdr_serialize_uint8_t>
 801ad44:	4604      	mov	r4, r0
 801ad46:	7871      	ldrb	r1, [r6, #1]
 801ad48:	4638      	mov	r0, r7
 801ad4a:	f7f6 ff7b 	bl	8011c44 <ucdr_serialize_uint8_t>
 801ad4e:	4004      	ands	r4, r0
 801ad50:	78b1      	ldrb	r1, [r6, #2]
 801ad52:	4638      	mov	r0, r7
 801ad54:	f7f6 ff48 	bl	8011be8 <ucdr_serialize_bool>
 801ad58:	78b3      	ldrb	r3, [r6, #2]
 801ad5a:	b2e4      	uxtb	r4, r4
 801ad5c:	4004      	ands	r4, r0
 801ad5e:	b943      	cbnz	r3, 801ad72 <uxr_serialize_ReadSpecification+0x3a>
 801ad60:	7a31      	ldrb	r1, [r6, #8]
 801ad62:	4638      	mov	r0, r7
 801ad64:	f7f6 ff40 	bl	8011be8 <ucdr_serialize_bool>
 801ad68:	7a33      	ldrb	r3, [r6, #8]
 801ad6a:	4004      	ands	r4, r0
 801ad6c:	b93b      	cbnz	r3, 801ad7e <uxr_serialize_ReadSpecification+0x46>
 801ad6e:	4620      	mov	r0, r4
 801ad70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad72:	6871      	ldr	r1, [r6, #4]
 801ad74:	4638      	mov	r0, r7
 801ad76:	f003 fb67 	bl	801e448 <ucdr_serialize_string>
 801ad7a:	4004      	ands	r4, r0
 801ad7c:	e7f0      	b.n	801ad60 <uxr_serialize_ReadSpecification+0x28>
 801ad7e:	8971      	ldrh	r1, [r6, #10]
 801ad80:	4638      	mov	r0, r7
 801ad82:	f7f6 ff8b 	bl	8011c9c <ucdr_serialize_uint16_t>
 801ad86:	4605      	mov	r5, r0
 801ad88:	89b1      	ldrh	r1, [r6, #12]
 801ad8a:	4638      	mov	r0, r7
 801ad8c:	f7f6 ff86 	bl	8011c9c <ucdr_serialize_uint16_t>
 801ad90:	4005      	ands	r5, r0
 801ad92:	89f1      	ldrh	r1, [r6, #14]
 801ad94:	4638      	mov	r0, r7
 801ad96:	b2ed      	uxtb	r5, r5
 801ad98:	f7f6 ff80 	bl	8011c9c <ucdr_serialize_uint16_t>
 801ad9c:	8a31      	ldrh	r1, [r6, #16]
 801ad9e:	4025      	ands	r5, r4
 801ada0:	4604      	mov	r4, r0
 801ada2:	4638      	mov	r0, r7
 801ada4:	4025      	ands	r5, r4
 801ada6:	f7f6 ff79 	bl	8011c9c <ucdr_serialize_uint16_t>
 801adaa:	ea00 0405 	and.w	r4, r0, r5
 801adae:	4620      	mov	r0, r4
 801adb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adb2:	bf00      	nop

0801adb4 <uxr_serialize_CREATE_CLIENT_Payload>:
 801adb4:	f7ff b9ea 	b.w	801a18c <uxr_serialize_CLIENT_Representation>

0801adb8 <uxr_serialize_CREATE_Payload>:
 801adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adba:	2202      	movs	r2, #2
 801adbc:	4607      	mov	r7, r0
 801adbe:	460e      	mov	r6, r1
 801adc0:	f7fc fc08 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801adc4:	2202      	movs	r2, #2
 801adc6:	4605      	mov	r5, r0
 801adc8:	4638      	mov	r0, r7
 801adca:	18b1      	adds	r1, r6, r2
 801adcc:	f7fc fc02 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801add0:	7931      	ldrb	r1, [r6, #4]
 801add2:	4604      	mov	r4, r0
 801add4:	4638      	mov	r0, r7
 801add6:	f7f6 ff35 	bl	8011c44 <ucdr_serialize_uint8_t>
 801adda:	b170      	cbz	r0, 801adfa <uxr_serialize_CREATE_Payload+0x42>
 801addc:	7933      	ldrb	r3, [r6, #4]
 801adde:	402c      	ands	r4, r5
 801ade0:	3b01      	subs	r3, #1
 801ade2:	b2e4      	uxtb	r4, r4
 801ade4:	2b0d      	cmp	r3, #13
 801ade6:	d809      	bhi.n	801adfc <uxr_serialize_CREATE_Payload+0x44>
 801ade8:	e8df f003 	tbb	[pc, r3]
 801adec:	23230a4c 	.word	0x23230a4c
 801adf0:	0a0a0a0a 	.word	0x0a0a0a0a
 801adf4:	12121208 	.word	0x12121208
 801adf8:	3e45      	.short	0x3e45
 801adfa:	2400      	movs	r4, #0
 801adfc:	4620      	mov	r0, r4
 801adfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae00:	f106 0108 	add.w	r1, r6, #8
 801ae04:	4638      	mov	r0, r7
 801ae06:	f7ff fac7 	bl	801a398 <uxr_serialize_DATAWRITER_Representation>
 801ae0a:	4004      	ands	r4, r0
 801ae0c:	4620      	mov	r0, r4
 801ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae10:	7a31      	ldrb	r1, [r6, #8]
 801ae12:	4638      	mov	r0, r7
 801ae14:	f7f6 ff16 	bl	8011c44 <ucdr_serialize_uint8_t>
 801ae18:	2800      	cmp	r0, #0
 801ae1a:	d0ee      	beq.n	801adfa <uxr_serialize_CREATE_Payload+0x42>
 801ae1c:	7a33      	ldrb	r3, [r6, #8]
 801ae1e:	2b01      	cmp	r3, #1
 801ae20:	d001      	beq.n	801ae26 <uxr_serialize_CREATE_Payload+0x6e>
 801ae22:	2b02      	cmp	r3, #2
 801ae24:	d1ea      	bne.n	801adfc <uxr_serialize_CREATE_Payload+0x44>
 801ae26:	68f1      	ldr	r1, [r6, #12]
 801ae28:	4638      	mov	r0, r7
 801ae2a:	f003 fb0d 	bl	801e448 <ucdr_serialize_string>
 801ae2e:	4004      	ands	r4, r0
 801ae30:	e7e4      	b.n	801adfc <uxr_serialize_CREATE_Payload+0x44>
 801ae32:	7a31      	ldrb	r1, [r6, #8]
 801ae34:	4638      	mov	r0, r7
 801ae36:	f7f6 ff05 	bl	8011c44 <ucdr_serialize_uint8_t>
 801ae3a:	4605      	mov	r5, r0
 801ae3c:	b158      	cbz	r0, 801ae56 <uxr_serialize_CREATE_Payload+0x9e>
 801ae3e:	7a33      	ldrb	r3, [r6, #8]
 801ae40:	2b02      	cmp	r3, #2
 801ae42:	d034      	beq.n	801aeae <uxr_serialize_CREATE_Payload+0xf6>
 801ae44:	2b03      	cmp	r3, #3
 801ae46:	d106      	bne.n	801ae56 <uxr_serialize_CREATE_Payload+0x9e>
 801ae48:	68f2      	ldr	r2, [r6, #12]
 801ae4a:	f106 0110 	add.w	r1, r6, #16
 801ae4e:	4638      	mov	r0, r7
 801ae50:	f7f8 fa70 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801ae54:	4605      	mov	r5, r0
 801ae56:	2202      	movs	r2, #2
 801ae58:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801ae5c:	4638      	mov	r0, r7
 801ae5e:	f7fc fbb9 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801ae62:	4028      	ands	r0, r5
 801ae64:	4004      	ands	r4, r0
 801ae66:	e7c9      	b.n	801adfc <uxr_serialize_CREATE_Payload+0x44>
 801ae68:	f106 0108 	add.w	r1, r6, #8
 801ae6c:	4638      	mov	r0, r7
 801ae6e:	f7ff f98d 	bl	801a18c <uxr_serialize_CLIENT_Representation>
 801ae72:	4004      	ands	r4, r0
 801ae74:	e7c2      	b.n	801adfc <uxr_serialize_CREATE_Payload+0x44>
 801ae76:	f106 0108 	add.w	r1, r6, #8
 801ae7a:	4638      	mov	r0, r7
 801ae7c:	f7ff fa42 	bl	801a304 <uxr_serialize_AGENT_Representation>
 801ae80:	4004      	ands	r4, r0
 801ae82:	e7bb      	b.n	801adfc <uxr_serialize_CREATE_Payload+0x44>
 801ae84:	7a31      	ldrb	r1, [r6, #8]
 801ae86:	4638      	mov	r0, r7
 801ae88:	f7f6 fedc 	bl	8011c44 <ucdr_serialize_uint8_t>
 801ae8c:	4605      	mov	r5, r0
 801ae8e:	b130      	cbz	r0, 801ae9e <uxr_serialize_CREATE_Payload+0xe6>
 801ae90:	7a33      	ldrb	r3, [r6, #8]
 801ae92:	2b02      	cmp	r3, #2
 801ae94:	d011      	beq.n	801aeba <uxr_serialize_CREATE_Payload+0x102>
 801ae96:	2b03      	cmp	r3, #3
 801ae98:	d015      	beq.n	801aec6 <uxr_serialize_CREATE_Payload+0x10e>
 801ae9a:	2b01      	cmp	r3, #1
 801ae9c:	d00d      	beq.n	801aeba <uxr_serialize_CREATE_Payload+0x102>
 801ae9e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801aea2:	4638      	mov	r0, r7
 801aea4:	f7f7 fc0a 	bl	80126bc <ucdr_serialize_int16_t>
 801aea8:	4028      	ands	r0, r5
 801aeaa:	4004      	ands	r4, r0
 801aeac:	e7a6      	b.n	801adfc <uxr_serialize_CREATE_Payload+0x44>
 801aeae:	68f1      	ldr	r1, [r6, #12]
 801aeb0:	4638      	mov	r0, r7
 801aeb2:	f003 fac9 	bl	801e448 <ucdr_serialize_string>
 801aeb6:	4605      	mov	r5, r0
 801aeb8:	e7cd      	b.n	801ae56 <uxr_serialize_CREATE_Payload+0x9e>
 801aeba:	68f1      	ldr	r1, [r6, #12]
 801aebc:	4638      	mov	r0, r7
 801aebe:	f003 fac3 	bl	801e448 <ucdr_serialize_string>
 801aec2:	4605      	mov	r5, r0
 801aec4:	e7eb      	b.n	801ae9e <uxr_serialize_CREATE_Payload+0xe6>
 801aec6:	68f2      	ldr	r2, [r6, #12]
 801aec8:	f106 0110 	add.w	r1, r6, #16
 801aecc:	4638      	mov	r0, r7
 801aece:	f7f8 fa31 	bl	8013334 <ucdr_serialize_sequence_uint8_t>
 801aed2:	4605      	mov	r5, r0
 801aed4:	e7e3      	b.n	801ae9e <uxr_serialize_CREATE_Payload+0xe6>
 801aed6:	bf00      	nop

0801aed8 <uxr_deserialize_GET_INFO_Payload>:
 801aed8:	b570      	push	{r4, r5, r6, lr}
 801aeda:	2202      	movs	r2, #2
 801aedc:	4605      	mov	r5, r0
 801aede:	460e      	mov	r6, r1
 801aee0:	f7fc fbdc 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801aee4:	2202      	movs	r2, #2
 801aee6:	4604      	mov	r4, r0
 801aee8:	4628      	mov	r0, r5
 801aeea:	18b1      	adds	r1, r6, r2
 801aeec:	f7fc fbd6 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801aef0:	4603      	mov	r3, r0
 801aef2:	1d31      	adds	r1, r6, #4
 801aef4:	4628      	mov	r0, r5
 801aef6:	401c      	ands	r4, r3
 801aef8:	f7f7 f9ea 	bl	80122d0 <ucdr_deserialize_uint32_t>
 801aefc:	b2e4      	uxtb	r4, r4
 801aefe:	4020      	ands	r0, r4
 801af00:	bd70      	pop	{r4, r5, r6, pc}
 801af02:	bf00      	nop

0801af04 <uxr_serialize_DELETE_Payload>:
 801af04:	b570      	push	{r4, r5, r6, lr}
 801af06:	2202      	movs	r2, #2
 801af08:	4605      	mov	r5, r0
 801af0a:	460e      	mov	r6, r1
 801af0c:	f7fc fb62 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801af10:	2202      	movs	r2, #2
 801af12:	4604      	mov	r4, r0
 801af14:	4628      	mov	r0, r5
 801af16:	18b1      	adds	r1, r6, r2
 801af18:	f7fc fb5c 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801af1c:	4020      	ands	r0, r4
 801af1e:	b2c0      	uxtb	r0, r0
 801af20:	bd70      	pop	{r4, r5, r6, pc}
 801af22:	bf00      	nop

0801af24 <uxr_deserialize_STATUS_AGENT_Payload>:
 801af24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af28:	460e      	mov	r6, r1
 801af2a:	4605      	mov	r5, r0
 801af2c:	f7f6 fea0 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801af30:	4604      	mov	r4, r0
 801af32:	1c71      	adds	r1, r6, #1
 801af34:	4628      	mov	r0, r5
 801af36:	f7f6 fe9b 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801af3a:	2204      	movs	r2, #4
 801af3c:	4681      	mov	r9, r0
 801af3e:	4628      	mov	r0, r5
 801af40:	18b1      	adds	r1, r6, r2
 801af42:	f7fc fbab 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801af46:	f106 0108 	add.w	r1, r6, #8
 801af4a:	4680      	mov	r8, r0
 801af4c:	2202      	movs	r2, #2
 801af4e:	4628      	mov	r0, r5
 801af50:	f7fc fba4 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801af54:	ea04 0309 	and.w	r3, r4, r9
 801af58:	4607      	mov	r7, r0
 801af5a:	2202      	movs	r2, #2
 801af5c:	b2db      	uxtb	r3, r3
 801af5e:	f106 010a 	add.w	r1, r6, #10
 801af62:	4628      	mov	r0, r5
 801af64:	ea03 0408 	and.w	r4, r3, r8
 801af68:	f7fc fb98 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801af6c:	4603      	mov	r3, r0
 801af6e:	4628      	mov	r0, r5
 801af70:	403c      	ands	r4, r7
 801af72:	f106 010c 	add.w	r1, r6, #12
 801af76:	461d      	mov	r5, r3
 801af78:	f7f6 fe4c 	bl	8011c14 <ucdr_deserialize_bool>
 801af7c:	4025      	ands	r5, r4
 801af7e:	4028      	ands	r0, r5
 801af80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801af84 <uxr_deserialize_STATUS_Payload>:
 801af84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af88:	2202      	movs	r2, #2
 801af8a:	4606      	mov	r6, r0
 801af8c:	460f      	mov	r7, r1
 801af8e:	f7fc fb85 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801af92:	2202      	movs	r2, #2
 801af94:	4605      	mov	r5, r0
 801af96:	4630      	mov	r0, r6
 801af98:	18b9      	adds	r1, r7, r2
 801af9a:	f7fc fb7f 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801af9e:	4680      	mov	r8, r0
 801afa0:	1d39      	adds	r1, r7, #4
 801afa2:	4630      	mov	r0, r6
 801afa4:	f7f6 fe64 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801afa8:	ea05 0508 	and.w	r5, r5, r8
 801afac:	4604      	mov	r4, r0
 801afae:	1d79      	adds	r1, r7, #5
 801afb0:	4630      	mov	r0, r6
 801afb2:	402c      	ands	r4, r5
 801afb4:	f7f6 fe5c 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801afb8:	4020      	ands	r0, r4
 801afba:	b2c0      	uxtb	r0, r0
 801afbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801afc0 <uxr_serialize_INFO_Payload>:
 801afc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afc4:	2202      	movs	r2, #2
 801afc6:	460c      	mov	r4, r1
 801afc8:	4605      	mov	r5, r0
 801afca:	f7fc fb03 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801afce:	2202      	movs	r2, #2
 801afd0:	4680      	mov	r8, r0
 801afd2:	4628      	mov	r0, r5
 801afd4:	18a1      	adds	r1, r4, r2
 801afd6:	f7fc fafd 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801afda:	4607      	mov	r7, r0
 801afdc:	7921      	ldrb	r1, [r4, #4]
 801afde:	4628      	mov	r0, r5
 801afe0:	f7f6 fe30 	bl	8011c44 <ucdr_serialize_uint8_t>
 801afe4:	ea08 0807 	and.w	r8, r8, r7
 801afe8:	4606      	mov	r6, r0
 801afea:	7961      	ldrb	r1, [r4, #5]
 801afec:	4628      	mov	r0, r5
 801afee:	ea06 0608 	and.w	r6, r6, r8
 801aff2:	f7f6 fe27 	bl	8011c44 <ucdr_serialize_uint8_t>
 801aff6:	7a21      	ldrb	r1, [r4, #8]
 801aff8:	4030      	ands	r0, r6
 801affa:	b2c7      	uxtb	r7, r0
 801affc:	4628      	mov	r0, r5
 801affe:	f7f6 fdf3 	bl	8011be8 <ucdr_serialize_bool>
 801b002:	7a23      	ldrb	r3, [r4, #8]
 801b004:	4606      	mov	r6, r0
 801b006:	b96b      	cbnz	r3, 801b024 <uxr_serialize_INFO_Payload+0x64>
 801b008:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801b00c:	4628      	mov	r0, r5
 801b00e:	f7f6 fdeb 	bl	8011be8 <ucdr_serialize_bool>
 801b012:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801b016:	4030      	ands	r0, r6
 801b018:	b2c6      	uxtb	r6, r0
 801b01a:	b983      	cbnz	r3, 801b03e <uxr_serialize_INFO_Payload+0x7e>
 801b01c:	ea06 0007 	and.w	r0, r6, r7
 801b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b024:	7b21      	ldrb	r1, [r4, #12]
 801b026:	4628      	mov	r0, r5
 801b028:	f7f6 fe0c 	bl	8011c44 <ucdr_serialize_uint8_t>
 801b02c:	b188      	cbz	r0, 801b052 <uxr_serialize_INFO_Payload+0x92>
 801b02e:	f104 010c 	add.w	r1, r4, #12
 801b032:	4628      	mov	r0, r5
 801b034:	f7ff f9d8 	bl	801a3e8 <uxr_serialize_ObjectVariant.part.0>
 801b038:	4030      	ands	r0, r6
 801b03a:	b2c6      	uxtb	r6, r0
 801b03c:	e7e4      	b.n	801b008 <uxr_serialize_INFO_Payload+0x48>
 801b03e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801b042:	4628      	mov	r0, r5
 801b044:	f7ff fdb8 	bl	801abb8 <uxr_serialize_ActivityInfoVariant>
 801b048:	4006      	ands	r6, r0
 801b04a:	ea06 0007 	and.w	r0, r6, r7
 801b04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b052:	4606      	mov	r6, r0
 801b054:	e7d8      	b.n	801b008 <uxr_serialize_INFO_Payload+0x48>
 801b056:	bf00      	nop

0801b058 <uxr_serialize_READ_DATA_Payload>:
 801b058:	b570      	push	{r4, r5, r6, lr}
 801b05a:	2202      	movs	r2, #2
 801b05c:	4605      	mov	r5, r0
 801b05e:	460e      	mov	r6, r1
 801b060:	f7fc fab8 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801b064:	2202      	movs	r2, #2
 801b066:	4604      	mov	r4, r0
 801b068:	4628      	mov	r0, r5
 801b06a:	18b1      	adds	r1, r6, r2
 801b06c:	f7fc fab2 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801b070:	4603      	mov	r3, r0
 801b072:	1d31      	adds	r1, r6, #4
 801b074:	4628      	mov	r0, r5
 801b076:	401c      	ands	r4, r3
 801b078:	f7ff fe5e 	bl	801ad38 <uxr_serialize_ReadSpecification>
 801b07c:	b2e4      	uxtb	r4, r4
 801b07e:	4020      	ands	r0, r4
 801b080:	bd70      	pop	{r4, r5, r6, pc}
 801b082:	bf00      	nop

0801b084 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b084:	b570      	push	{r4, r5, r6, lr}
 801b086:	2202      	movs	r2, #2
 801b088:	4605      	mov	r5, r0
 801b08a:	460e      	mov	r6, r1
 801b08c:	f7fc faa2 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801b090:	2202      	movs	r2, #2
 801b092:	4604      	mov	r4, r0
 801b094:	4628      	mov	r0, r5
 801b096:	18b1      	adds	r1, r6, r2
 801b098:	f7fc fa9c 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801b09c:	4020      	ands	r0, r4
 801b09e:	b2c0      	uxtb	r0, r0
 801b0a0:	bd70      	pop	{r4, r5, r6, pc}
 801b0a2:	bf00      	nop

0801b0a4 <uxr_serialize_ACKNACK_Payload>:
 801b0a4:	b570      	push	{r4, r5, r6, lr}
 801b0a6:	460c      	mov	r4, r1
 801b0a8:	4605      	mov	r5, r0
 801b0aa:	460e      	mov	r6, r1
 801b0ac:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b0b0:	f7f6 fdf4 	bl	8011c9c <ucdr_serialize_uint16_t>
 801b0b4:	2202      	movs	r2, #2
 801b0b6:	4621      	mov	r1, r4
 801b0b8:	4604      	mov	r4, r0
 801b0ba:	4628      	mov	r0, r5
 801b0bc:	f7fc fa8a 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	7931      	ldrb	r1, [r6, #4]
 801b0c4:	4628      	mov	r0, r5
 801b0c6:	401c      	ands	r4, r3
 801b0c8:	f7f6 fdbc 	bl	8011c44 <ucdr_serialize_uint8_t>
 801b0cc:	b2e4      	uxtb	r4, r4
 801b0ce:	4020      	ands	r0, r4
 801b0d0:	bd70      	pop	{r4, r5, r6, pc}
 801b0d2:	bf00      	nop

0801b0d4 <uxr_deserialize_ACKNACK_Payload>:
 801b0d4:	b570      	push	{r4, r5, r6, lr}
 801b0d6:	460e      	mov	r6, r1
 801b0d8:	4605      	mov	r5, r0
 801b0da:	f7f6 fedf 	bl	8011e9c <ucdr_deserialize_uint16_t>
 801b0de:	2202      	movs	r2, #2
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	4628      	mov	r0, r5
 801b0e4:	18b1      	adds	r1, r6, r2
 801b0e6:	f7fc fad9 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	1d31      	adds	r1, r6, #4
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	401c      	ands	r4, r3
 801b0f2:	f7f6 fdbd 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801b0f6:	b2e4      	uxtb	r4, r4
 801b0f8:	4020      	ands	r0, r4
 801b0fa:	bd70      	pop	{r4, r5, r6, pc}

0801b0fc <uxr_serialize_HEARTBEAT_Payload>:
 801b0fc:	b570      	push	{r4, r5, r6, lr}
 801b0fe:	460d      	mov	r5, r1
 801b100:	4606      	mov	r6, r0
 801b102:	8809      	ldrh	r1, [r1, #0]
 801b104:	f7f6 fdca 	bl	8011c9c <ucdr_serialize_uint16_t>
 801b108:	8869      	ldrh	r1, [r5, #2]
 801b10a:	4604      	mov	r4, r0
 801b10c:	4630      	mov	r0, r6
 801b10e:	f7f6 fdc5 	bl	8011c9c <ucdr_serialize_uint16_t>
 801b112:	4603      	mov	r3, r0
 801b114:	7929      	ldrb	r1, [r5, #4]
 801b116:	4630      	mov	r0, r6
 801b118:	401c      	ands	r4, r3
 801b11a:	f7f6 fd93 	bl	8011c44 <ucdr_serialize_uint8_t>
 801b11e:	b2e4      	uxtb	r4, r4
 801b120:	4020      	ands	r0, r4
 801b122:	bd70      	pop	{r4, r5, r6, pc}

0801b124 <uxr_deserialize_HEARTBEAT_Payload>:
 801b124:	b570      	push	{r4, r5, r6, lr}
 801b126:	460e      	mov	r6, r1
 801b128:	4605      	mov	r5, r0
 801b12a:	f7f6 feb7 	bl	8011e9c <ucdr_deserialize_uint16_t>
 801b12e:	4604      	mov	r4, r0
 801b130:	1cb1      	adds	r1, r6, #2
 801b132:	4628      	mov	r0, r5
 801b134:	f7f6 feb2 	bl	8011e9c <ucdr_deserialize_uint16_t>
 801b138:	4603      	mov	r3, r0
 801b13a:	1d31      	adds	r1, r6, #4
 801b13c:	4628      	mov	r0, r5
 801b13e:	401c      	ands	r4, r3
 801b140:	f7f6 fd96 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801b144:	b2e4      	uxtb	r4, r4
 801b146:	4020      	ands	r0, r4
 801b148:	bd70      	pop	{r4, r5, r6, pc}
 801b14a:	bf00      	nop

0801b14c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b150:	460e      	mov	r6, r1
 801b152:	4605      	mov	r5, r0
 801b154:	f7f7 fc3e 	bl	80129d4 <ucdr_deserialize_int32_t>
 801b158:	4607      	mov	r7, r0
 801b15a:	1d31      	adds	r1, r6, #4
 801b15c:	4628      	mov	r0, r5
 801b15e:	f7f7 f8b7 	bl	80122d0 <ucdr_deserialize_uint32_t>
 801b162:	4680      	mov	r8, r0
 801b164:	f106 0108 	add.w	r1, r6, #8
 801b168:	4628      	mov	r0, r5
 801b16a:	f7f7 fc33 	bl	80129d4 <ucdr_deserialize_int32_t>
 801b16e:	ea07 0708 	and.w	r7, r7, r8
 801b172:	4604      	mov	r4, r0
 801b174:	f106 010c 	add.w	r1, r6, #12
 801b178:	4628      	mov	r0, r5
 801b17a:	403c      	ands	r4, r7
 801b17c:	f7f7 f8a8 	bl	80122d0 <ucdr_deserialize_uint32_t>
 801b180:	f106 0110 	add.w	r1, r6, #16
 801b184:	4004      	ands	r4, r0
 801b186:	4628      	mov	r0, r5
 801b188:	f7f7 fc24 	bl	80129d4 <ucdr_deserialize_int32_t>
 801b18c:	4603      	mov	r3, r0
 801b18e:	b2e4      	uxtb	r4, r4
 801b190:	4628      	mov	r0, r5
 801b192:	461d      	mov	r5, r3
 801b194:	f106 0114 	add.w	r1, r6, #20
 801b198:	f7f7 f89a 	bl	80122d0 <ucdr_deserialize_uint32_t>
 801b19c:	402c      	ands	r4, r5
 801b19e:	4020      	ands	r0, r4
 801b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b1a4 <uxr_serialize_SampleIdentity>:
 801b1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	460d      	mov	r5, r1
 801b1ac:	220c      	movs	r2, #12
 801b1ae:	f7fc fa11 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801b1b2:	2203      	movs	r2, #3
 801b1b4:	f105 010c 	add.w	r1, r5, #12
 801b1b8:	4607      	mov	r7, r0
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	f7fc fa0a 	bl	80175d4 <ucdr_serialize_array_uint8_t>
 801b1c0:	7be9      	ldrb	r1, [r5, #15]
 801b1c2:	4680      	mov	r8, r0
 801b1c4:	4620      	mov	r0, r4
 801b1c6:	f7f6 fd3d 	bl	8011c44 <ucdr_serialize_uint8_t>
 801b1ca:	6929      	ldr	r1, [r5, #16]
 801b1cc:	4606      	mov	r6, r0
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	f7f7 fb68 	bl	80128a4 <ucdr_serialize_int32_t>
 801b1d4:	ea07 0708 	and.w	r7, r7, r8
 801b1d8:	4603      	mov	r3, r0
 801b1da:	4620      	mov	r0, r4
 801b1dc:	403e      	ands	r6, r7
 801b1de:	6969      	ldr	r1, [r5, #20]
 801b1e0:	461c      	mov	r4, r3
 801b1e2:	f7f6 ff45 	bl	8012070 <ucdr_serialize_uint32_t>
 801b1e6:	4034      	ands	r4, r6
 801b1e8:	4020      	ands	r0, r4
 801b1ea:	b2c0      	uxtb	r0, r0
 801b1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b1f0 <uxr_deserialize_SampleIdentity>:
 801b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1f4:	4604      	mov	r4, r0
 801b1f6:	460d      	mov	r5, r1
 801b1f8:	220c      	movs	r2, #12
 801b1fa:	f7fc fa4f 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801b1fe:	2203      	movs	r2, #3
 801b200:	f105 010c 	add.w	r1, r5, #12
 801b204:	4607      	mov	r7, r0
 801b206:	4620      	mov	r0, r4
 801b208:	f7fc fa48 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801b20c:	f105 010f 	add.w	r1, r5, #15
 801b210:	4680      	mov	r8, r0
 801b212:	4620      	mov	r0, r4
 801b214:	f7f6 fd2c 	bl	8011c70 <ucdr_deserialize_uint8_t>
 801b218:	f105 0110 	add.w	r1, r5, #16
 801b21c:	4606      	mov	r6, r0
 801b21e:	4620      	mov	r0, r4
 801b220:	f7f7 fbd8 	bl	80129d4 <ucdr_deserialize_int32_t>
 801b224:	ea07 0708 	and.w	r7, r7, r8
 801b228:	4603      	mov	r3, r0
 801b22a:	4620      	mov	r0, r4
 801b22c:	403e      	ands	r6, r7
 801b22e:	f105 0114 	add.w	r1, r5, #20
 801b232:	461c      	mov	r4, r3
 801b234:	f7f7 f84c 	bl	80122d0 <ucdr_deserialize_uint32_t>
 801b238:	4034      	ands	r4, r6
 801b23a:	4020      	ands	r0, r4
 801b23c:	b2c0      	uxtb	r0, r0
 801b23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b242:	bf00      	nop

0801b244 <rcl_client_get_rmw_handle>:
 801b244:	b118      	cbz	r0, 801b24e <rcl_client_get_rmw_handle+0xa>
 801b246:	6800      	ldr	r0, [r0, #0]
 801b248:	b108      	cbz	r0, 801b24e <rcl_client_get_rmw_handle+0xa>
 801b24a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b24e:	4770      	bx	lr

0801b250 <rcl_send_request>:
 801b250:	b570      	push	{r4, r5, r6, lr}
 801b252:	b082      	sub	sp, #8
 801b254:	b1f8      	cbz	r0, 801b296 <rcl_send_request+0x46>
 801b256:	4604      	mov	r4, r0
 801b258:	6800      	ldr	r0, [r0, #0]
 801b25a:	b1e0      	cbz	r0, 801b296 <rcl_send_request+0x46>
 801b25c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b260:	b1cb      	cbz	r3, 801b296 <rcl_send_request+0x46>
 801b262:	460e      	mov	r6, r1
 801b264:	b1e1      	cbz	r1, 801b2a0 <rcl_send_request+0x50>
 801b266:	4615      	mov	r5, r2
 801b268:	b1d2      	cbz	r2, 801b2a0 <rcl_send_request+0x50>
 801b26a:	2105      	movs	r1, #5
 801b26c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b270:	f002 fa2e 	bl	801d6d0 <__atomic_load_8>
 801b274:	4602      	mov	r2, r0
 801b276:	460b      	mov	r3, r1
 801b278:	4631      	mov	r1, r6
 801b27a:	e9c5 2300 	strd	r2, r3, [r5]
 801b27e:	6823      	ldr	r3, [r4, #0]
 801b280:	462a      	mov	r2, r5
 801b282:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b286:	f7fa feff 	bl	8016088 <rmw_send_request>
 801b28a:	4606      	mov	r6, r0
 801b28c:	b160      	cbz	r0, 801b2a8 <rcl_send_request+0x58>
 801b28e:	2601      	movs	r6, #1
 801b290:	4630      	mov	r0, r6
 801b292:	b002      	add	sp, #8
 801b294:	bd70      	pop	{r4, r5, r6, pc}
 801b296:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b29a:	4630      	mov	r0, r6
 801b29c:	b002      	add	sp, #8
 801b29e:	bd70      	pop	{r4, r5, r6, pc}
 801b2a0:	260b      	movs	r6, #11
 801b2a2:	4630      	mov	r0, r6
 801b2a4:	b002      	add	sp, #8
 801b2a6:	bd70      	pop	{r4, r5, r6, pc}
 801b2a8:	6820      	ldr	r0, [r4, #0]
 801b2aa:	2105      	movs	r1, #5
 801b2ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b2b0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b2b4:	9100      	str	r1, [sp, #0]
 801b2b6:	f002 fa77 	bl	801d7a8 <__atomic_exchange_8>
 801b2ba:	4630      	mov	r0, r6
 801b2bc:	b002      	add	sp, #8
 801b2be:	bd70      	pop	{r4, r5, r6, pc}

0801b2c0 <rcl_take_response>:
 801b2c0:	b570      	push	{r4, r5, r6, lr}
 801b2c2:	468e      	mov	lr, r1
 801b2c4:	b08c      	sub	sp, #48	; 0x30
 801b2c6:	460c      	mov	r4, r1
 801b2c8:	4616      	mov	r6, r2
 801b2ca:	f10d 0c18 	add.w	ip, sp, #24
 801b2ce:	4605      	mov	r5, r0
 801b2d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b2d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b2d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b2dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b2e0:	b35d      	cbz	r5, 801b33a <rcl_take_response+0x7a>
 801b2e2:	682b      	ldr	r3, [r5, #0]
 801b2e4:	b34b      	cbz	r3, 801b33a <rcl_take_response+0x7a>
 801b2e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b2ea:	b330      	cbz	r0, 801b33a <rcl_take_response+0x7a>
 801b2ec:	b346      	cbz	r6, 801b340 <rcl_take_response+0x80>
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	4632      	mov	r2, r6
 801b2f2:	a902      	add	r1, sp, #8
 801b2f4:	f88d 3007 	strb.w	r3, [sp, #7]
 801b2f8:	f10d 0307 	add.w	r3, sp, #7
 801b2fc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b348 <rcl_take_response+0x88>
 801b300:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b304:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b308:	f7fa ffc6 	bl	8016298 <rmw_take_response>
 801b30c:	4605      	mov	r5, r0
 801b30e:	b9c8      	cbnz	r0, 801b344 <rcl_take_response+0x84>
 801b310:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b314:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b318:	2a00      	cmp	r2, #0
 801b31a:	bf08      	it	eq
 801b31c:	461d      	moveq	r5, r3
 801b31e:	f10d 0e18 	add.w	lr, sp, #24
 801b322:	46a4      	mov	ip, r4
 801b324:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b32c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b330:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b334:	4628      	mov	r0, r5
 801b336:	b00c      	add	sp, #48	; 0x30
 801b338:	bd70      	pop	{r4, r5, r6, pc}
 801b33a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b33e:	e7ee      	b.n	801b31e <rcl_take_response+0x5e>
 801b340:	250b      	movs	r5, #11
 801b342:	e7ec      	b.n	801b31e <rcl_take_response+0x5e>
 801b344:	2501      	movs	r5, #1
 801b346:	e7ea      	b.n	801b31e <rcl_take_response+0x5e>
	...

0801b350 <rcl_client_is_valid>:
 801b350:	b130      	cbz	r0, 801b360 <rcl_client_is_valid+0x10>
 801b352:	6800      	ldr	r0, [r0, #0]
 801b354:	b120      	cbz	r0, 801b360 <rcl_client_is_valid+0x10>
 801b356:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b35a:	3800      	subs	r0, #0
 801b35c:	bf18      	it	ne
 801b35e:	2001      	movne	r0, #1
 801b360:	4770      	bx	lr
 801b362:	bf00      	nop

0801b364 <rcl_convert_rmw_ret_to_rcl_ret>:
 801b364:	280b      	cmp	r0, #11
 801b366:	dc0d      	bgt.n	801b384 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b368:	2800      	cmp	r0, #0
 801b36a:	db09      	blt.n	801b380 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b36c:	280b      	cmp	r0, #11
 801b36e:	d807      	bhi.n	801b380 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b370:	e8df f000 	tbb	[pc, r0]
 801b374:	07060607 	.word	0x07060607
 801b378:	06060606 	.word	0x06060606
 801b37c:	07070606 	.word	0x07070606
 801b380:	2001      	movs	r0, #1
 801b382:	4770      	bx	lr
 801b384:	28cb      	cmp	r0, #203	; 0xcb
 801b386:	bf18      	it	ne
 801b388:	2001      	movne	r0, #1
 801b38a:	4770      	bx	lr

0801b38c <rcl_get_zero_initialized_context>:
 801b38c:	4a03      	ldr	r2, [pc, #12]	; (801b39c <rcl_get_zero_initialized_context+0x10>)
 801b38e:	4603      	mov	r3, r0
 801b390:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b394:	e883 0003 	stmia.w	r3, {r0, r1}
 801b398:	4618      	mov	r0, r3
 801b39a:	4770      	bx	lr
 801b39c:	080256bc 	.word	0x080256bc

0801b3a0 <rcl_context_is_valid>:
 801b3a0:	b118      	cbz	r0, 801b3aa <rcl_context_is_valid+0xa>
 801b3a2:	6840      	ldr	r0, [r0, #4]
 801b3a4:	3800      	subs	r0, #0
 801b3a6:	bf18      	it	ne
 801b3a8:	2001      	movne	r0, #1
 801b3aa:	4770      	bx	lr

0801b3ac <__cleanup_context>:
 801b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3b0:	4606      	mov	r6, r0
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	6800      	ldr	r0, [r0, #0]
 801b3b6:	6073      	str	r3, [r6, #4]
 801b3b8:	2800      	cmp	r0, #0
 801b3ba:	d049      	beq.n	801b450 <__cleanup_context+0xa4>
 801b3bc:	6947      	ldr	r7, [r0, #20]
 801b3be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b3c2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b3c6:	b137      	cbz	r7, 801b3d6 <__cleanup_context+0x2a>
 801b3c8:	3014      	adds	r0, #20
 801b3ca:	f7f8 f847 	bl	801345c <rcl_init_options_fini>
 801b3ce:	4607      	mov	r7, r0
 801b3d0:	2800      	cmp	r0, #0
 801b3d2:	d144      	bne.n	801b45e <__cleanup_context+0xb2>
 801b3d4:	6830      	ldr	r0, [r6, #0]
 801b3d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b3d8:	b143      	cbz	r3, 801b3ec <__cleanup_context+0x40>
 801b3da:	3028      	adds	r0, #40	; 0x28
 801b3dc:	f7fa fb5c 	bl	8015a98 <rmw_context_fini>
 801b3e0:	b118      	cbz	r0, 801b3ea <__cleanup_context+0x3e>
 801b3e2:	2f00      	cmp	r7, #0
 801b3e4:	d03e      	beq.n	801b464 <__cleanup_context+0xb8>
 801b3e6:	f7f9 fe1b 	bl	8015020 <rcutils_reset_error>
 801b3ea:	6830      	ldr	r0, [r6, #0]
 801b3ec:	6a03      	ldr	r3, [r0, #32]
 801b3ee:	b1db      	cbz	r3, 801b428 <__cleanup_context+0x7c>
 801b3f0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b3f4:	2a01      	cmp	r2, #1
 801b3f6:	f17c 0100 	sbcs.w	r1, ip, #0
 801b3fa:	db11      	blt.n	801b420 <__cleanup_context+0x74>
 801b3fc:	2400      	movs	r4, #0
 801b3fe:	4625      	mov	r5, r4
 801b400:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b404:	4649      	mov	r1, r9
 801b406:	b1b8      	cbz	r0, 801b438 <__cleanup_context+0x8c>
 801b408:	47c0      	blx	r8
 801b40a:	6833      	ldr	r3, [r6, #0]
 801b40c:	3401      	adds	r4, #1
 801b40e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b412:	f145 0500 	adc.w	r5, r5, #0
 801b416:	6a1b      	ldr	r3, [r3, #32]
 801b418:	4294      	cmp	r4, r2
 801b41a:	eb75 010c 	sbcs.w	r1, r5, ip
 801b41e:	dbef      	blt.n	801b400 <__cleanup_context+0x54>
 801b420:	4618      	mov	r0, r3
 801b422:	4649      	mov	r1, r9
 801b424:	47c0      	blx	r8
 801b426:	6830      	ldr	r0, [r6, #0]
 801b428:	4649      	mov	r1, r9
 801b42a:	47c0      	blx	r8
 801b42c:	2300      	movs	r3, #0
 801b42e:	4638      	mov	r0, r7
 801b430:	e9c6 3300 	strd	r3, r3, [r6]
 801b434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b438:	3401      	adds	r4, #1
 801b43a:	f145 0500 	adc.w	r5, r5, #0
 801b43e:	4294      	cmp	r4, r2
 801b440:	eb75 010c 	sbcs.w	r1, r5, ip
 801b444:	dbdc      	blt.n	801b400 <__cleanup_context+0x54>
 801b446:	4618      	mov	r0, r3
 801b448:	4649      	mov	r1, r9
 801b44a:	47c0      	blx	r8
 801b44c:	6830      	ldr	r0, [r6, #0]
 801b44e:	e7eb      	b.n	801b428 <__cleanup_context+0x7c>
 801b450:	4607      	mov	r7, r0
 801b452:	2300      	movs	r3, #0
 801b454:	4638      	mov	r0, r7
 801b456:	e9c6 3300 	strd	r3, r3, [r6]
 801b45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b45e:	f7f9 fddf 	bl	8015020 <rcutils_reset_error>
 801b462:	e7b7      	b.n	801b3d4 <__cleanup_context+0x28>
 801b464:	f7ff ff7e 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 801b468:	4607      	mov	r7, r0
 801b46a:	e7bc      	b.n	801b3e6 <__cleanup_context+0x3a>

0801b46c <rcl_get_zero_initialized_guard_condition>:
 801b46c:	4a03      	ldr	r2, [pc, #12]	; (801b47c <rcl_get_zero_initialized_guard_condition+0x10>)
 801b46e:	4603      	mov	r3, r0
 801b470:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b474:	e883 0003 	stmia.w	r3, {r0, r1}
 801b478:	4618      	mov	r0, r3
 801b47a:	4770      	bx	lr
 801b47c:	080256c4 	.word	0x080256c4

0801b480 <rcl_guard_condition_init_from_rmw>:
 801b480:	b082      	sub	sp, #8
 801b482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b486:	b086      	sub	sp, #24
 801b488:	4604      	mov	r4, r0
 801b48a:	460e      	mov	r6, r1
 801b48c:	4615      	mov	r5, r2
 801b48e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b492:	f10d 0e04 	add.w	lr, sp, #4
 801b496:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b49a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b49e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b4a2:	f8dc 3000 	ldr.w	r3, [ip]
 801b4a6:	a801      	add	r0, sp, #4
 801b4a8:	f8ce 3000 	str.w	r3, [lr]
 801b4ac:	f7f9 fd7a 	bl	8014fa4 <rcutils_allocator_is_valid>
 801b4b0:	f080 0301 	eor.w	r3, r0, #1
 801b4b4:	b2db      	uxtb	r3, r3
 801b4b6:	bb3b      	cbnz	r3, 801b508 <rcl_guard_condition_init_from_rmw+0x88>
 801b4b8:	b334      	cbz	r4, 801b508 <rcl_guard_condition_init_from_rmw+0x88>
 801b4ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b4be:	f1b8 0f00 	cmp.w	r8, #0
 801b4c2:	d11a      	bne.n	801b4fa <rcl_guard_condition_init_from_rmw+0x7a>
 801b4c4:	b305      	cbz	r5, 801b508 <rcl_guard_condition_init_from_rmw+0x88>
 801b4c6:	4628      	mov	r0, r5
 801b4c8:	f7ff ff6a 	bl	801b3a0 <rcl_context_is_valid>
 801b4cc:	b1f0      	cbz	r0, 801b50c <rcl_guard_condition_init_from_rmw+0x8c>
 801b4ce:	9b01      	ldr	r3, [sp, #4]
 801b4d0:	201c      	movs	r0, #28
 801b4d2:	9905      	ldr	r1, [sp, #20]
 801b4d4:	4798      	blx	r3
 801b4d6:	4607      	mov	r7, r0
 801b4d8:	6060      	str	r0, [r4, #4]
 801b4da:	b320      	cbz	r0, 801b526 <rcl_guard_condition_init_from_rmw+0xa6>
 801b4dc:	b1c6      	cbz	r6, 801b510 <rcl_guard_condition_init_from_rmw+0x90>
 801b4de:	6006      	str	r6, [r0, #0]
 801b4e0:	f880 8004 	strb.w	r8, [r0, #4]
 801b4e4:	ac01      	add	r4, sp, #4
 801b4e6:	f107 0c08 	add.w	ip, r7, #8
 801b4ea:	2500      	movs	r5, #0
 801b4ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b4ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b4f2:	6823      	ldr	r3, [r4, #0]
 801b4f4:	f8cc 3000 	str.w	r3, [ip]
 801b4f8:	e000      	b.n	801b4fc <rcl_guard_condition_init_from_rmw+0x7c>
 801b4fa:	2564      	movs	r5, #100	; 0x64
 801b4fc:	4628      	mov	r0, r5
 801b4fe:	b006      	add	sp, #24
 801b500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b504:	b002      	add	sp, #8
 801b506:	4770      	bx	lr
 801b508:	250b      	movs	r5, #11
 801b50a:	e7f7      	b.n	801b4fc <rcl_guard_condition_init_from_rmw+0x7c>
 801b50c:	2565      	movs	r5, #101	; 0x65
 801b50e:	e7f5      	b.n	801b4fc <rcl_guard_condition_init_from_rmw+0x7c>
 801b510:	6828      	ldr	r0, [r5, #0]
 801b512:	3028      	adds	r0, #40	; 0x28
 801b514:	f002 fd56 	bl	801dfc4 <rmw_create_guard_condition>
 801b518:	6038      	str	r0, [r7, #0]
 801b51a:	6867      	ldr	r7, [r4, #4]
 801b51c:	683e      	ldr	r6, [r7, #0]
 801b51e:	b126      	cbz	r6, 801b52a <rcl_guard_condition_init_from_rmw+0xaa>
 801b520:	2301      	movs	r3, #1
 801b522:	713b      	strb	r3, [r7, #4]
 801b524:	e7de      	b.n	801b4e4 <rcl_guard_condition_init_from_rmw+0x64>
 801b526:	250a      	movs	r5, #10
 801b528:	e7e8      	b.n	801b4fc <rcl_guard_condition_init_from_rmw+0x7c>
 801b52a:	9b02      	ldr	r3, [sp, #8]
 801b52c:	4638      	mov	r0, r7
 801b52e:	9905      	ldr	r1, [sp, #20]
 801b530:	2501      	movs	r5, #1
 801b532:	4798      	blx	r3
 801b534:	6066      	str	r6, [r4, #4]
 801b536:	e7e1      	b.n	801b4fc <rcl_guard_condition_init_from_rmw+0x7c>

0801b538 <rcl_guard_condition_fini>:
 801b538:	b570      	push	{r4, r5, r6, lr}
 801b53a:	b082      	sub	sp, #8
 801b53c:	b1f0      	cbz	r0, 801b57c <rcl_guard_condition_fini+0x44>
 801b53e:	6843      	ldr	r3, [r0, #4]
 801b540:	4604      	mov	r4, r0
 801b542:	b163      	cbz	r3, 801b55e <rcl_guard_condition_fini+0x26>
 801b544:	6818      	ldr	r0, [r3, #0]
 801b546:	68de      	ldr	r6, [r3, #12]
 801b548:	6999      	ldr	r1, [r3, #24]
 801b54a:	b160      	cbz	r0, 801b566 <rcl_guard_condition_fini+0x2e>
 801b54c:	791d      	ldrb	r5, [r3, #4]
 801b54e:	b965      	cbnz	r5, 801b56a <rcl_guard_condition_fini+0x32>
 801b550:	4618      	mov	r0, r3
 801b552:	47b0      	blx	r6
 801b554:	2300      	movs	r3, #0
 801b556:	4628      	mov	r0, r5
 801b558:	6063      	str	r3, [r4, #4]
 801b55a:	b002      	add	sp, #8
 801b55c:	bd70      	pop	{r4, r5, r6, pc}
 801b55e:	461d      	mov	r5, r3
 801b560:	4628      	mov	r0, r5
 801b562:	b002      	add	sp, #8
 801b564:	bd70      	pop	{r4, r5, r6, pc}
 801b566:	4605      	mov	r5, r0
 801b568:	e7f2      	b.n	801b550 <rcl_guard_condition_fini+0x18>
 801b56a:	9101      	str	r1, [sp, #4]
 801b56c:	f002 fd40 	bl	801dff0 <rmw_destroy_guard_condition>
 801b570:	1e05      	subs	r5, r0, #0
 801b572:	6863      	ldr	r3, [r4, #4]
 801b574:	9901      	ldr	r1, [sp, #4]
 801b576:	bf18      	it	ne
 801b578:	2501      	movne	r5, #1
 801b57a:	e7e9      	b.n	801b550 <rcl_guard_condition_fini+0x18>
 801b57c:	250b      	movs	r5, #11
 801b57e:	4628      	mov	r0, r5
 801b580:	b002      	add	sp, #8
 801b582:	bd70      	pop	{r4, r5, r6, pc}

0801b584 <rcl_guard_condition_get_default_options>:
 801b584:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b586:	b087      	sub	sp, #28
 801b588:	4606      	mov	r6, r0
 801b58a:	4c0b      	ldr	r4, [pc, #44]	; (801b5b8 <rcl_guard_condition_get_default_options+0x34>)
 801b58c:	4668      	mov	r0, sp
 801b58e:	f7f9 fcfb 	bl	8014f88 <rcutils_get_default_allocator>
 801b592:	46ee      	mov	lr, sp
 801b594:	46a4      	mov	ip, r4
 801b596:	4625      	mov	r5, r4
 801b598:	4634      	mov	r4, r6
 801b59a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b59e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b5a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5a4:	f8de 7000 	ldr.w	r7, [lr]
 801b5a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b5aa:	4630      	mov	r0, r6
 801b5ac:	f8cc 7000 	str.w	r7, [ip]
 801b5b0:	6027      	str	r7, [r4, #0]
 801b5b2:	b007      	add	sp, #28
 801b5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5b6:	bf00      	nop
 801b5b8:	20016c58 	.word	0x20016c58

0801b5bc <rcl_guard_condition_get_rmw_handle>:
 801b5bc:	b110      	cbz	r0, 801b5c4 <rcl_guard_condition_get_rmw_handle+0x8>
 801b5be:	6840      	ldr	r0, [r0, #4]
 801b5c0:	b100      	cbz	r0, 801b5c4 <rcl_guard_condition_get_rmw_handle+0x8>
 801b5c2:	6800      	ldr	r0, [r0, #0]
 801b5c4:	4770      	bx	lr
 801b5c6:	bf00      	nop

0801b5c8 <rcl_init>:
 801b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5cc:	1e05      	subs	r5, r0, #0
 801b5ce:	b09e      	sub	sp, #120	; 0x78
 801b5d0:	460e      	mov	r6, r1
 801b5d2:	4690      	mov	r8, r2
 801b5d4:	461f      	mov	r7, r3
 801b5d6:	f340 809f 	ble.w	801b718 <rcl_init+0x150>
 801b5da:	2900      	cmp	r1, #0
 801b5dc:	f000 809f 	beq.w	801b71e <rcl_init+0x156>
 801b5e0:	f1a1 0e04 	sub.w	lr, r1, #4
 801b5e4:	f04f 0c00 	mov.w	ip, #0
 801b5e8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801b5ec:	f10c 0c01 	add.w	ip, ip, #1
 801b5f0:	2c00      	cmp	r4, #0
 801b5f2:	f000 8094 	beq.w	801b71e <rcl_init+0x156>
 801b5f6:	4565      	cmp	r5, ip
 801b5f8:	d1f6      	bne.n	801b5e8 <rcl_init+0x20>
 801b5fa:	f1b8 0f00 	cmp.w	r8, #0
 801b5fe:	f000 808e 	beq.w	801b71e <rcl_init+0x156>
 801b602:	f8d8 4000 	ldr.w	r4, [r8]
 801b606:	2c00      	cmp	r4, #0
 801b608:	f000 8089 	beq.w	801b71e <rcl_init+0x156>
 801b60c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801b610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b612:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b616:	6823      	ldr	r3, [r4, #0]
 801b618:	a819      	add	r0, sp, #100	; 0x64
 801b61a:	f8cc 3000 	str.w	r3, [ip]
 801b61e:	f7f9 fcc1 	bl	8014fa4 <rcutils_allocator_is_valid>
 801b622:	f080 0001 	eor.w	r0, r0, #1
 801b626:	b2c0      	uxtb	r0, r0
 801b628:	2800      	cmp	r0, #0
 801b62a:	d178      	bne.n	801b71e <rcl_init+0x156>
 801b62c:	2f00      	cmp	r7, #0
 801b62e:	d076      	beq.n	801b71e <rcl_init+0x156>
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d178      	bne.n	801b728 <rcl_init+0x160>
 801b636:	2178      	movs	r1, #120	; 0x78
 801b638:	2001      	movs	r0, #1
 801b63a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b63e:	4798      	blx	r3
 801b640:	4604      	mov	r4, r0
 801b642:	6038      	str	r0, [r7, #0]
 801b644:	2800      	cmp	r0, #0
 801b646:	f000 80b6 	beq.w	801b7b6 <rcl_init+0x1ee>
 801b64a:	a802      	add	r0, sp, #8
 801b64c:	f002 fa4c 	bl	801dae8 <rmw_get_zero_initialized_context>
 801b650:	a902      	add	r1, sp, #8
 801b652:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801b656:	2250      	movs	r2, #80	; 0x50
 801b658:	f005 fc01 	bl	8020e5e <memcpy>
 801b65c:	ac19      	add	r4, sp, #100	; 0x64
 801b65e:	f8d7 e000 	ldr.w	lr, [r7]
 801b662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b664:	46f4      	mov	ip, lr
 801b666:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b66a:	6823      	ldr	r3, [r4, #0]
 801b66c:	f10e 0114 	add.w	r1, lr, #20
 801b670:	4640      	mov	r0, r8
 801b672:	f8cc 3000 	str.w	r3, [ip]
 801b676:	f7f7 ff1b 	bl	80134b0 <rcl_init_options_copy>
 801b67a:	4604      	mov	r4, r0
 801b67c:	2800      	cmp	r0, #0
 801b67e:	d144      	bne.n	801b70a <rcl_init+0x142>
 801b680:	f8d7 9000 	ldr.w	r9, [r7]
 801b684:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801b688:	f8c9 0020 	str.w	r0, [r9, #32]
 801b68c:	f8c9 5018 	str.w	r5, [r9, #24]
 801b690:	f8c9 801c 	str.w	r8, [r9, #28]
 801b694:	2d00      	cmp	r5, #0
 801b696:	d04e      	beq.n	801b736 <rcl_init+0x16e>
 801b698:	2e00      	cmp	r6, #0
 801b69a:	d04c      	beq.n	801b736 <rcl_init+0x16e>
 801b69c:	2104      	movs	r1, #4
 801b69e:	4628      	mov	r0, r5
 801b6a0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b6a4:	4798      	blx	r3
 801b6a6:	f8c9 0020 	str.w	r0, [r9, #32]
 801b6aa:	f8d7 9000 	ldr.w	r9, [r7]
 801b6ae:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801b6b2:	46ca      	mov	sl, r9
 801b6b4:	b343      	cbz	r3, 801b708 <rcl_init+0x140>
 801b6b6:	2d01      	cmp	r5, #1
 801b6b8:	f178 0300 	sbcs.w	r3, r8, #0
 801b6bc:	db3b      	blt.n	801b736 <rcl_init+0x16e>
 801b6be:	2400      	movs	r4, #0
 801b6c0:	3e04      	subs	r6, #4
 801b6c2:	46a1      	mov	r9, r4
 801b6c4:	e00b      	b.n	801b6de <rcl_init+0x116>
 801b6c6:	6831      	ldr	r1, [r6, #0]
 801b6c8:	f005 fbc9 	bl	8020e5e <memcpy>
 801b6cc:	3401      	adds	r4, #1
 801b6ce:	f149 0900 	adc.w	r9, r9, #0
 801b6d2:	45c8      	cmp	r8, r9
 801b6d4:	bf08      	it	eq
 801b6d6:	42a5      	cmpeq	r5, r4
 801b6d8:	d02b      	beq.n	801b732 <rcl_init+0x16a>
 801b6da:	f8d7 a000 	ldr.w	sl, [r7]
 801b6de:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801b6e2:	f7e4 fe0d 	bl	8000300 <strlen>
 801b6e6:	1c42      	adds	r2, r0, #1
 801b6e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b6ea:	4610      	mov	r0, r2
 801b6ec:	991d      	ldr	r1, [sp, #116]	; 0x74
 801b6ee:	f8da a020 	ldr.w	sl, [sl, #32]
 801b6f2:	9201      	str	r2, [sp, #4]
 801b6f4:	4798      	blx	r3
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801b6fc:	6a1b      	ldr	r3, [r3, #32]
 801b6fe:	9a01      	ldr	r2, [sp, #4]
 801b700:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b704:	2800      	cmp	r0, #0
 801b706:	d1de      	bne.n	801b6c6 <rcl_init+0xfe>
 801b708:	240a      	movs	r4, #10
 801b70a:	4638      	mov	r0, r7
 801b70c:	f7ff fe4e 	bl	801b3ac <__cleanup_context>
 801b710:	4620      	mov	r0, r4
 801b712:	b01e      	add	sp, #120	; 0x78
 801b714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b718:	2900      	cmp	r1, #0
 801b71a:	f43f af6e 	beq.w	801b5fa <rcl_init+0x32>
 801b71e:	240b      	movs	r4, #11
 801b720:	4620      	mov	r0, r4
 801b722:	b01e      	add	sp, #120	; 0x78
 801b724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b728:	2464      	movs	r4, #100	; 0x64
 801b72a:	4620      	mov	r0, r4
 801b72c:	b01e      	add	sp, #120	; 0x78
 801b72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b732:	f8d7 9000 	ldr.w	r9, [r7]
 801b736:	4926      	ldr	r1, [pc, #152]	; (801b7d0 <rcl_init+0x208>)
 801b738:	680b      	ldr	r3, [r1, #0]
 801b73a:	3301      	adds	r3, #1
 801b73c:	d036      	beq.n	801b7ac <rcl_init+0x1e4>
 801b73e:	461a      	mov	r2, r3
 801b740:	2400      	movs	r4, #0
 801b742:	600b      	str	r3, [r1, #0]
 801b744:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801b748:	607b      	str	r3, [r7, #4]
 801b74a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b74c:	3301      	adds	r3, #1
 801b74e:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801b752:	d034      	beq.n	801b7be <rcl_init+0x1f6>
 801b754:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b758:	b93b      	cbnz	r3, 801b76a <rcl_init+0x1a2>
 801b75a:	3030      	adds	r0, #48	; 0x30
 801b75c:	f000 f83a 	bl	801b7d4 <rcl_get_localhost_only>
 801b760:	4604      	mov	r4, r0
 801b762:	2800      	cmp	r0, #0
 801b764:	d1d1      	bne.n	801b70a <rcl_init+0x142>
 801b766:	683b      	ldr	r3, [r7, #0]
 801b768:	6958      	ldr	r0, [r3, #20]
 801b76a:	aa18      	add	r2, sp, #96	; 0x60
 801b76c:	a917      	add	r1, sp, #92	; 0x5c
 801b76e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b770:	f000 fc38 	bl	801bfe4 <rcl_validate_enclave_name>
 801b774:	4604      	mov	r4, r0
 801b776:	2800      	cmp	r0, #0
 801b778:	d1c7      	bne.n	801b70a <rcl_init+0x142>
 801b77a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b77c:	b9eb      	cbnz	r3, 801b7ba <rcl_init+0x1f2>
 801b77e:	6839      	ldr	r1, [r7, #0]
 801b780:	694b      	ldr	r3, [r1, #20]
 801b782:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801b786:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b788:	f000 f9c8 	bl	801bb1c <rcl_get_security_options_from_environment>
 801b78c:	4604      	mov	r4, r0
 801b78e:	2800      	cmp	r0, #0
 801b790:	d1bb      	bne.n	801b70a <rcl_init+0x142>
 801b792:	6839      	ldr	r1, [r7, #0]
 801b794:	6948      	ldr	r0, [r1, #20]
 801b796:	3128      	adds	r1, #40	; 0x28
 801b798:	3018      	adds	r0, #24
 801b79a:	f7fa f847 	bl	801582c <rmw_init>
 801b79e:	4604      	mov	r4, r0
 801b7a0:	2800      	cmp	r0, #0
 801b7a2:	d0bd      	beq.n	801b720 <rcl_init+0x158>
 801b7a4:	f7ff fdde 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 801b7a8:	4604      	mov	r4, r0
 801b7aa:	e7ae      	b.n	801b70a <rcl_init+0x142>
 801b7ac:	2201      	movs	r2, #1
 801b7ae:	461c      	mov	r4, r3
 801b7b0:	600a      	str	r2, [r1, #0]
 801b7b2:	4613      	mov	r3, r2
 801b7b4:	e7c6      	b.n	801b744 <rcl_init+0x17c>
 801b7b6:	240a      	movs	r4, #10
 801b7b8:	e7b2      	b.n	801b720 <rcl_init+0x158>
 801b7ba:	2401      	movs	r4, #1
 801b7bc:	e7a5      	b.n	801b70a <rcl_init+0x142>
 801b7be:	3024      	adds	r0, #36	; 0x24
 801b7c0:	f003 fbc6 	bl	801ef50 <rcl_get_default_domain_id>
 801b7c4:	4604      	mov	r4, r0
 801b7c6:	2800      	cmp	r0, #0
 801b7c8:	d19f      	bne.n	801b70a <rcl_init+0x142>
 801b7ca:	683b      	ldr	r3, [r7, #0]
 801b7cc:	6958      	ldr	r0, [r3, #20]
 801b7ce:	e7c1      	b.n	801b754 <rcl_init+0x18c>
 801b7d0:	20016c6c 	.word	0x20016c6c

0801b7d4 <rcl_get_localhost_only>:
 801b7d4:	b510      	push	{r4, lr}
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	b082      	sub	sp, #8
 801b7da:	9301      	str	r3, [sp, #4]
 801b7dc:	b1b8      	cbz	r0, 801b80e <rcl_get_localhost_only+0x3a>
 801b7de:	4604      	mov	r4, r0
 801b7e0:	a901      	add	r1, sp, #4
 801b7e2:	480c      	ldr	r0, [pc, #48]	; (801b814 <rcl_get_localhost_only+0x40>)
 801b7e4:	f7f9 fbec 	bl	8014fc0 <rcutils_get_env>
 801b7e8:	b110      	cbz	r0, 801b7f0 <rcl_get_localhost_only+0x1c>
 801b7ea:	2001      	movs	r0, #1
 801b7ec:	b002      	add	sp, #8
 801b7ee:	bd10      	pop	{r4, pc}
 801b7f0:	9b01      	ldr	r3, [sp, #4]
 801b7f2:	b113      	cbz	r3, 801b7fa <rcl_get_localhost_only+0x26>
 801b7f4:	781a      	ldrb	r2, [r3, #0]
 801b7f6:	2a31      	cmp	r2, #49	; 0x31
 801b7f8:	d004      	beq.n	801b804 <rcl_get_localhost_only+0x30>
 801b7fa:	2302      	movs	r3, #2
 801b7fc:	2000      	movs	r0, #0
 801b7fe:	7023      	strb	r3, [r4, #0]
 801b800:	b002      	add	sp, #8
 801b802:	bd10      	pop	{r4, pc}
 801b804:	785b      	ldrb	r3, [r3, #1]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d1f7      	bne.n	801b7fa <rcl_get_localhost_only+0x26>
 801b80a:	2301      	movs	r3, #1
 801b80c:	e7f6      	b.n	801b7fc <rcl_get_localhost_only+0x28>
 801b80e:	200b      	movs	r0, #11
 801b810:	b002      	add	sp, #8
 801b812:	bd10      	pop	{r4, pc}
 801b814:	080256cc 	.word	0x080256cc

0801b818 <rcl_node_resolve_name>:
 801b818:	b082      	sub	sp, #8
 801b81a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b81e:	b091      	sub	sp, #68	; 0x44
 801b820:	ac1a      	add	r4, sp, #104	; 0x68
 801b822:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801b826:	e884 000c 	stmia.w	r4, {r2, r3}
 801b82a:	2800      	cmp	r0, #0
 801b82c:	d03d      	beq.n	801b8aa <rcl_node_resolve_name+0x92>
 801b82e:	460c      	mov	r4, r1
 801b830:	4605      	mov	r5, r0
 801b832:	f7f8 f81f 	bl	8013874 <rcl_node_get_options>
 801b836:	2800      	cmp	r0, #0
 801b838:	d03a      	beq.n	801b8b0 <rcl_node_resolve_name+0x98>
 801b83a:	4628      	mov	r0, r5
 801b83c:	f7f8 f80a 	bl	8013854 <rcl_node_get_name>
 801b840:	4606      	mov	r6, r0
 801b842:	4628      	mov	r0, r5
 801b844:	ad0b      	add	r5, sp, #44	; 0x2c
 801b846:	f7f8 f80d 	bl	8013864 <rcl_node_get_namespace>
 801b84a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801b84e:	4607      	mov	r7, r0
 801b850:	46ac      	mov	ip, r5
 801b852:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b85a:	f8de 3000 	ldr.w	r3, [lr]
 801b85e:	f8cc 3000 	str.w	r3, [ip]
 801b862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b864:	b30b      	cbz	r3, 801b8aa <rcl_node_resolve_name+0x92>
 801b866:	4689      	mov	r9, r1
 801b868:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b86c:	f002 f80e 	bl	801d88c <rcutils_get_zero_initialized_string_map>
 801b870:	ab10      	add	r3, sp, #64	; 0x40
 801b872:	9008      	str	r0, [sp, #32]
 801b874:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b878:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b87c:	2100      	movs	r1, #0
 801b87e:	a808      	add	r0, sp, #32
 801b880:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b884:	f002 f878 	bl	801d978 <rcutils_string_map_init>
 801b888:	4683      	mov	fp, r0
 801b88a:	b1a0      	cbz	r0, 801b8b6 <rcl_node_resolve_name+0x9e>
 801b88c:	f7f9 fbb0 	bl	8014ff0 <rcutils_get_error_string>
 801b890:	f7f9 fbc6 	bl	8015020 <rcutils_reset_error>
 801b894:	f1bb 0f0a 	cmp.w	fp, #10
 801b898:	bf18      	it	ne
 801b89a:	f04f 0b01 	movne.w	fp, #1
 801b89e:	4658      	mov	r0, fp
 801b8a0:	b011      	add	sp, #68	; 0x44
 801b8a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a6:	b002      	add	sp, #8
 801b8a8:	4770      	bx	lr
 801b8aa:	f04f 0b0b 	mov.w	fp, #11
 801b8ae:	e7f6      	b.n	801b89e <rcl_node_resolve_name+0x86>
 801b8b0:	f04f 0b01 	mov.w	fp, #1
 801b8b4:	e7f3      	b.n	801b89e <rcl_node_resolve_name+0x86>
 801b8b6:	9009      	str	r0, [sp, #36]	; 0x24
 801b8b8:	9007      	str	r0, [sp, #28]
 801b8ba:	a808      	add	r0, sp, #32
 801b8bc:	f003 fcdc 	bl	801f278 <rcl_get_default_topic_name_substitutions>
 801b8c0:	4683      	mov	fp, r0
 801b8c2:	b180      	cbz	r0, 801b8e6 <rcl_node_resolve_name+0xce>
 801b8c4:	280a      	cmp	r0, #10
 801b8c6:	a808      	add	r0, sp, #32
 801b8c8:	bf18      	it	ne
 801b8ca:	f04f 0b01 	movne.w	fp, #1
 801b8ce:	f002 f893 	bl	801d9f8 <rcutils_string_map_fini>
 801b8d2:	4604      	mov	r4, r0
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	d15b      	bne.n	801b990 <rcl_node_resolve_name+0x178>
 801b8d8:	4651      	mov	r1, sl
 801b8da:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b8dc:	47c8      	blx	r9
 801b8de:	4651      	mov	r1, sl
 801b8e0:	4620      	mov	r0, r4
 801b8e2:	47c8      	blx	r9
 801b8e4:	e7db      	b.n	801b89e <rcl_node_resolve_name+0x86>
 801b8e6:	ab09      	add	r3, sp, #36	; 0x24
 801b8e8:	46ec      	mov	ip, sp
 801b8ea:	9305      	str	r3, [sp, #20]
 801b8ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b8ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b8f2:	682b      	ldr	r3, [r5, #0]
 801b8f4:	463a      	mov	r2, r7
 801b8f6:	4631      	mov	r1, r6
 801b8f8:	4620      	mov	r0, r4
 801b8fa:	f8cc 3000 	str.w	r3, [ip]
 801b8fe:	ab08      	add	r3, sp, #32
 801b900:	f003 fb5a 	bl	801efb8 <rcl_expand_topic_name>
 801b904:	4683      	mov	fp, r0
 801b906:	b9d8      	cbnz	r0, 801b940 <rcl_node_resolve_name+0x128>
 801b908:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b90a:	4602      	mov	r2, r0
 801b90c:	9009      	str	r0, [sp, #36]	; 0x24
 801b90e:	a90a      	add	r1, sp, #40	; 0x28
 801b910:	4620      	mov	r0, r4
 801b912:	f002 f985 	bl	801dc20 <rmw_validate_full_topic_name>
 801b916:	bb50      	cbnz	r0, 801b96e <rcl_node_resolve_name+0x156>
 801b918:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b91a:	2d00      	cmp	r5, #0
 801b91c:	d140      	bne.n	801b9a0 <rcl_node_resolve_name+0x188>
 801b91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b920:	a808      	add	r0, sp, #32
 801b922:	601c      	str	r4, [r3, #0]
 801b924:	f002 f868 	bl	801d9f8 <rcutils_string_map_fini>
 801b928:	4683      	mov	fp, r0
 801b92a:	2800      	cmp	r0, #0
 801b92c:	d043      	beq.n	801b9b6 <rcl_node_resolve_name+0x19e>
 801b92e:	f7f9 fb5f 	bl	8014ff0 <rcutils_get_error_string>
 801b932:	46a8      	mov	r8, r5
 801b934:	f04f 0b01 	mov.w	fp, #1
 801b938:	462c      	mov	r4, r5
 801b93a:	f7f9 fb71 	bl	8015020 <rcutils_reset_error>
 801b93e:	e00a      	b.n	801b956 <rcl_node_resolve_name+0x13e>
 801b940:	2867      	cmp	r0, #103	; 0x67
 801b942:	bf14      	ite	ne
 801b944:	f04f 0800 	movne.w	r8, #0
 801b948:	f008 0801 	andeq.w	r8, r8, #1
 801b94c:	9c07      	ldr	r4, [sp, #28]
 801b94e:	a808      	add	r0, sp, #32
 801b950:	f002 f852 	bl	801d9f8 <rcutils_string_map_fini>
 801b954:	bb50      	cbnz	r0, 801b9ac <rcl_node_resolve_name+0x194>
 801b956:	4651      	mov	r1, sl
 801b958:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b95a:	47c8      	blx	r9
 801b95c:	4651      	mov	r1, sl
 801b95e:	4620      	mov	r0, r4
 801b960:	47c8      	blx	r9
 801b962:	f1b8 0f00 	cmp.w	r8, #0
 801b966:	bf18      	it	ne
 801b968:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801b96c:	e797      	b.n	801b89e <rcl_node_resolve_name+0x86>
 801b96e:	f7f9 fb3f 	bl	8014ff0 <rcutils_get_error_string>
 801b972:	f7f9 fb55 	bl	8015020 <rcutils_reset_error>
 801b976:	a808      	add	r0, sp, #32
 801b978:	f002 f83e 	bl	801d9f8 <rcutils_string_map_fini>
 801b97c:	b998      	cbnz	r0, 801b9a6 <rcl_node_resolve_name+0x18e>
 801b97e:	4651      	mov	r1, sl
 801b980:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b982:	47c8      	blx	r9
 801b984:	4651      	mov	r1, sl
 801b986:	4620      	mov	r0, r4
 801b988:	f04f 0b01 	mov.w	fp, #1
 801b98c:	47c8      	blx	r9
 801b98e:	e786      	b.n	801b89e <rcl_node_resolve_name+0x86>
 801b990:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b994:	f7f9 fb2c 	bl	8014ff0 <rcutils_get_error_string>
 801b998:	f7f9 fb42 	bl	8015020 <rcutils_reset_error>
 801b99c:	4644      	mov	r4, r8
 801b99e:	e7da      	b.n	801b956 <rcl_node_resolve_name+0x13e>
 801b9a0:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b9a4:	e7d3      	b.n	801b94e <rcl_node_resolve_name+0x136>
 801b9a6:	46d8      	mov	r8, fp
 801b9a8:	f04f 0b01 	mov.w	fp, #1
 801b9ac:	f7f9 fb20 	bl	8014ff0 <rcutils_get_error_string>
 801b9b0:	f7f9 fb36 	bl	8015020 <rcutils_reset_error>
 801b9b4:	e7cf      	b.n	801b956 <rcl_node_resolve_name+0x13e>
 801b9b6:	4651      	mov	r1, sl
 801b9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b9ba:	47c8      	blx	r9
 801b9bc:	4651      	mov	r1, sl
 801b9be:	4658      	mov	r0, fp
 801b9c0:	47c8      	blx	r9
 801b9c2:	e76c      	b.n	801b89e <rcl_node_resolve_name+0x86>

0801b9c4 <exact_match_lookup>:
 801b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9c6:	f102 0708 	add.w	r7, r2, #8
 801b9ca:	460b      	mov	r3, r1
 801b9cc:	b085      	sub	sp, #20
 801b9ce:	4614      	mov	r4, r2
 801b9d0:	4606      	mov	r6, r0
 801b9d2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b9d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	4919      	ldr	r1, [pc, #100]	; (801ba44 <exact_match_lookup+0x80>)
 801b9de:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b9e2:	f001 ff1b 	bl	801d81c <rcutils_join_path>
 801b9e6:	7833      	ldrb	r3, [r6, #0]
 801b9e8:	4605      	mov	r5, r0
 801b9ea:	2b2f      	cmp	r3, #47	; 0x2f
 801b9ec:	d023      	beq.n	801ba36 <exact_match_lookup+0x72>
 801b9ee:	f104 030c 	add.w	r3, r4, #12
 801b9f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b9f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b9fa:	1c70      	adds	r0, r6, #1
 801b9fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ba00:	f001 ff12 	bl	801d828 <rcutils_to_native_path>
 801ba04:	4606      	mov	r6, r0
 801ba06:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801ba0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ba0e:	4631      	mov	r1, r6
 801ba10:	4628      	mov	r0, r5
 801ba12:	e894 000c 	ldmia.w	r4, {r2, r3}
 801ba16:	f001 ff01 	bl	801d81c <rcutils_join_path>
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	4630      	mov	r0, r6
 801ba1e:	6862      	ldr	r2, [r4, #4]
 801ba20:	461e      	mov	r6, r3
 801ba22:	6921      	ldr	r1, [r4, #16]
 801ba24:	4790      	blx	r2
 801ba26:	4628      	mov	r0, r5
 801ba28:	4635      	mov	r5, r6
 801ba2a:	6863      	ldr	r3, [r4, #4]
 801ba2c:	6921      	ldr	r1, [r4, #16]
 801ba2e:	4798      	blx	r3
 801ba30:	4628      	mov	r0, r5
 801ba32:	b005      	add	sp, #20
 801ba34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba36:	7873      	ldrb	r3, [r6, #1]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d1d8      	bne.n	801b9ee <exact_match_lookup+0x2a>
 801ba3c:	4628      	mov	r0, r5
 801ba3e:	b005      	add	sp, #20
 801ba40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba42:	bf00      	nop
 801ba44:	0802571c 	.word	0x0802571c

0801ba48 <rcl_get_secure_root>:
 801ba48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba4c:	b085      	sub	sp, #20
 801ba4e:	b168      	cbz	r0, 801ba6c <rcl_get_secure_root+0x24>
 801ba50:	4607      	mov	r7, r0
 801ba52:	4608      	mov	r0, r1
 801ba54:	460c      	mov	r4, r1
 801ba56:	f7f9 faa5 	bl	8014fa4 <rcutils_allocator_is_valid>
 801ba5a:	b138      	cbz	r0, 801ba6c <rcl_get_secure_root+0x24>
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	482d      	ldr	r0, [pc, #180]	; (801bb14 <rcl_get_secure_root+0xcc>)
 801ba60:	a903      	add	r1, sp, #12
 801ba62:	9303      	str	r3, [sp, #12]
 801ba64:	f7f9 faac 	bl	8014fc0 <rcutils_get_env>
 801ba68:	4605      	mov	r5, r0
 801ba6a:	b120      	cbz	r0, 801ba76 <rcl_get_secure_root+0x2e>
 801ba6c:	2500      	movs	r5, #0
 801ba6e:	4628      	mov	r0, r5
 801ba70:	b005      	add	sp, #20
 801ba72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba76:	9b03      	ldr	r3, [sp, #12]
 801ba78:	781a      	ldrb	r2, [r3, #0]
 801ba7a:	2a00      	cmp	r2, #0
 801ba7c:	d0f6      	beq.n	801ba6c <rcl_get_secure_root+0x24>
 801ba7e:	f104 090c 	add.w	r9, r4, #12
 801ba82:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ba86:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ba90:	f7f9 fc1c 	bl	80152cc <rcutils_strdup>
 801ba94:	4680      	mov	r8, r0
 801ba96:	2800      	cmp	r0, #0
 801ba98:	d0e8      	beq.n	801ba6c <rcl_get_secure_root+0x24>
 801ba9a:	a903      	add	r1, sp, #12
 801ba9c:	481e      	ldr	r0, [pc, #120]	; (801bb18 <rcl_get_secure_root+0xd0>)
 801ba9e:	9503      	str	r5, [sp, #12]
 801baa0:	f7f9 fa8e 	bl	8014fc0 <rcutils_get_env>
 801baa4:	b160      	cbz	r0, 801bac0 <rcl_get_secure_root+0x78>
 801baa6:	2600      	movs	r6, #0
 801baa8:	4630      	mov	r0, r6
 801baaa:	6863      	ldr	r3, [r4, #4]
 801baac:	6921      	ldr	r1, [r4, #16]
 801baae:	4798      	blx	r3
 801bab0:	4640      	mov	r0, r8
 801bab2:	6863      	ldr	r3, [r4, #4]
 801bab4:	6921      	ldr	r1, [r4, #16]
 801bab6:	4798      	blx	r3
 801bab8:	4628      	mov	r0, r5
 801baba:	b005      	add	sp, #20
 801babc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bac0:	9b03      	ldr	r3, [sp, #12]
 801bac2:	781e      	ldrb	r6, [r3, #0]
 801bac4:	b1f6      	cbz	r6, 801bb04 <rcl_get_secure_root+0xbc>
 801bac6:	e899 0003 	ldmia.w	r9, {r0, r1}
 801baca:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bace:	4618      	mov	r0, r3
 801bad0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bad4:	f7f9 fbfa 	bl	80152cc <rcutils_strdup>
 801bad8:	4606      	mov	r6, r0
 801bada:	2800      	cmp	r0, #0
 801badc:	d0e3      	beq.n	801baa6 <rcl_get_secure_root+0x5e>
 801bade:	4622      	mov	r2, r4
 801bae0:	4641      	mov	r1, r8
 801bae2:	f7ff ff6f 	bl	801b9c4 <exact_match_lookup>
 801bae6:	4605      	mov	r5, r0
 801bae8:	2d00      	cmp	r5, #0
 801baea:	d0dd      	beq.n	801baa8 <rcl_get_secure_root+0x60>
 801baec:	4628      	mov	r0, r5
 801baee:	f001 fe93 	bl	801d818 <rcutils_is_directory>
 801baf2:	4603      	mov	r3, r0
 801baf4:	2800      	cmp	r0, #0
 801baf6:	d1d7      	bne.n	801baa8 <rcl_get_secure_root+0x60>
 801baf8:	4628      	mov	r0, r5
 801bafa:	6921      	ldr	r1, [r4, #16]
 801bafc:	461d      	mov	r5, r3
 801bafe:	6863      	ldr	r3, [r4, #4]
 801bb00:	4798      	blx	r3
 801bb02:	e7d1      	b.n	801baa8 <rcl_get_secure_root+0x60>
 801bb04:	4622      	mov	r2, r4
 801bb06:	4638      	mov	r0, r7
 801bb08:	4641      	mov	r1, r8
 801bb0a:	f7ff ff5b 	bl	801b9c4 <exact_match_lookup>
 801bb0e:	4605      	mov	r5, r0
 801bb10:	e7ea      	b.n	801bae8 <rcl_get_secure_root+0xa0>
 801bb12:	bf00      	nop
 801bb14:	08025728 	.word	0x08025728
 801bb18:	08025740 	.word	0x08025740

0801bb1c <rcl_get_security_options_from_environment>:
 801bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb20:	b082      	sub	sp, #8
 801bb22:	2300      	movs	r3, #0
 801bb24:	4606      	mov	r6, r0
 801bb26:	460f      	mov	r7, r1
 801bb28:	4821      	ldr	r0, [pc, #132]	; (801bbb0 <rcl_get_security_options_from_environment+0x94>)
 801bb2a:	a901      	add	r1, sp, #4
 801bb2c:	4690      	mov	r8, r2
 801bb2e:	9301      	str	r3, [sp, #4]
 801bb30:	f7f9 fa46 	bl	8014fc0 <rcutils_get_env>
 801bb34:	b120      	cbz	r0, 801bb40 <rcl_get_security_options_from_environment+0x24>
 801bb36:	2501      	movs	r5, #1
 801bb38:	4628      	mov	r0, r5
 801bb3a:	b002      	add	sp, #8
 801bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb40:	4604      	mov	r4, r0
 801bb42:	491c      	ldr	r1, [pc, #112]	; (801bbb4 <rcl_get_security_options_from_environment+0x98>)
 801bb44:	9801      	ldr	r0, [sp, #4]
 801bb46:	f7e4 fb7b 	bl	8000240 <strcmp>
 801bb4a:	4605      	mov	r5, r0
 801bb4c:	b9f0      	cbnz	r0, 801bb8c <rcl_get_security_options_from_environment+0x70>
 801bb4e:	9001      	str	r0, [sp, #4]
 801bb50:	f1b8 0f00 	cmp.w	r8, #0
 801bb54:	d021      	beq.n	801bb9a <rcl_get_security_options_from_environment+0x7e>
 801bb56:	a901      	add	r1, sp, #4
 801bb58:	4817      	ldr	r0, [pc, #92]	; (801bbb8 <rcl_get_security_options_from_environment+0x9c>)
 801bb5a:	f7f9 fa31 	bl	8014fc0 <rcutils_get_env>
 801bb5e:	2800      	cmp	r0, #0
 801bb60:	d1e9      	bne.n	801bb36 <rcl_get_security_options_from_environment+0x1a>
 801bb62:	4916      	ldr	r1, [pc, #88]	; (801bbbc <rcl_get_security_options_from_environment+0xa0>)
 801bb64:	9801      	ldr	r0, [sp, #4]
 801bb66:	f7e4 fb6b 	bl	8000240 <strcmp>
 801bb6a:	4603      	mov	r3, r0
 801bb6c:	4639      	mov	r1, r7
 801bb6e:	4630      	mov	r0, r6
 801bb70:	fab3 f383 	clz	r3, r3
 801bb74:	095b      	lsrs	r3, r3, #5
 801bb76:	f888 3000 	strb.w	r3, [r8]
 801bb7a:	f7ff ff65 	bl	801ba48 <rcl_get_secure_root>
 801bb7e:	b170      	cbz	r0, 801bb9e <rcl_get_security_options_from_environment+0x82>
 801bb80:	f8c8 0004 	str.w	r0, [r8, #4]
 801bb84:	4628      	mov	r0, r5
 801bb86:	b002      	add	sp, #8
 801bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb8c:	4625      	mov	r5, r4
 801bb8e:	f888 4000 	strb.w	r4, [r8]
 801bb92:	4628      	mov	r0, r5
 801bb94:	b002      	add	sp, #8
 801bb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb9a:	250b      	movs	r5, #11
 801bb9c:	e7cc      	b.n	801bb38 <rcl_get_security_options_from_environment+0x1c>
 801bb9e:	f898 5000 	ldrb.w	r5, [r8]
 801bba2:	f1a5 0501 	sub.w	r5, r5, #1
 801bba6:	fab5 f585 	clz	r5, r5
 801bbaa:	096d      	lsrs	r5, r5, #5
 801bbac:	e7c4      	b.n	801bb38 <rcl_get_security_options_from_environment+0x1c>
 801bbae:	bf00      	nop
 801bbb0:	080256e0 	.word	0x080256e0
 801bbb4:	080256f4 	.word	0x080256f4
 801bbb8:	080256fc 	.word	0x080256fc
 801bbbc:	08025714 	.word	0x08025714

0801bbc0 <rcl_get_system_time>:
 801bbc0:	4608      	mov	r0, r1
 801bbc2:	f7f9 bbc1 	b.w	8015348 <rcutils_system_time_now>
 801bbc6:	bf00      	nop

0801bbc8 <rcl_get_steady_time>:
 801bbc8:	4608      	mov	r0, r1
 801bbca:	f7f9 bbe3 	b.w	8015394 <rcutils_steady_time_now>
 801bbce:	bf00      	nop

0801bbd0 <rcl_get_ros_time>:
 801bbd0:	7a03      	ldrb	r3, [r0, #8]
 801bbd2:	b510      	push	{r4, lr}
 801bbd4:	460c      	mov	r4, r1
 801bbd6:	b143      	cbz	r3, 801bbea <rcl_get_ros_time+0x1a>
 801bbd8:	2105      	movs	r1, #5
 801bbda:	f001 fd79 	bl	801d6d0 <__atomic_load_8>
 801bbde:	4602      	mov	r2, r0
 801bbe0:	460b      	mov	r3, r1
 801bbe2:	2000      	movs	r0, #0
 801bbe4:	e9c4 2300 	strd	r2, r3, [r4]
 801bbe8:	bd10      	pop	{r4, pc}
 801bbea:	4608      	mov	r0, r1
 801bbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbf0:	f7f9 bbaa 	b.w	8015348 <rcutils_system_time_now>

0801bbf4 <rcl_clock_init>:
 801bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	4610      	mov	r0, r2
 801bbfa:	4614      	mov	r4, r2
 801bbfc:	460e      	mov	r6, r1
 801bbfe:	f7f9 f9d1 	bl	8014fa4 <rcutils_allocator_is_valid>
 801bc02:	b128      	cbz	r0, 801bc10 <rcl_clock_init+0x1c>
 801bc04:	2d03      	cmp	r5, #3
 801bc06:	d803      	bhi.n	801bc10 <rcl_clock_init+0x1c>
 801bc08:	e8df f005 	tbb	[pc, r5]
 801bc0c:	0659301f 	.word	0x0659301f
 801bc10:	f04f 0c0b 	mov.w	ip, #11
 801bc14:	4660      	mov	r0, ip
 801bc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc18:	2c00      	cmp	r4, #0
 801bc1a:	d0f9      	beq.n	801bc10 <rcl_clock_init+0x1c>
 801bc1c:	fab6 f386 	clz	r3, r6
 801bc20:	095b      	lsrs	r3, r3, #5
 801bc22:	2e00      	cmp	r6, #0
 801bc24:	d0f4      	beq.n	801bc10 <rcl_clock_init+0x1c>
 801bc26:	6133      	str	r3, [r6, #16]
 801bc28:	469c      	mov	ip, r3
 801bc2a:	f106 0514 	add.w	r5, r6, #20
 801bc2e:	4f32      	ldr	r7, [pc, #200]	; (801bcf8 <rcl_clock_init+0x104>)
 801bc30:	f04f 0e03 	mov.w	lr, #3
 801bc34:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bc38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc3c:	6823      	ldr	r3, [r4, #0]
 801bc3e:	4660      	mov	r0, ip
 801bc40:	602b      	str	r3, [r5, #0]
 801bc42:	60f7      	str	r7, [r6, #12]
 801bc44:	f886 e000 	strb.w	lr, [r6]
 801bc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc4a:	2e00      	cmp	r6, #0
 801bc4c:	d0e0      	beq.n	801bc10 <rcl_clock_init+0x1c>
 801bc4e:	2300      	movs	r3, #0
 801bc50:	f106 0514 	add.w	r5, r6, #20
 801bc54:	7033      	strb	r3, [r6, #0]
 801bc56:	469c      	mov	ip, r3
 801bc58:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bc5c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bc60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bc64:	6823      	ldr	r3, [r4, #0]
 801bc66:	4660      	mov	r0, ip
 801bc68:	602b      	str	r3, [r5, #0]
 801bc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc6c:	2c00      	cmp	r4, #0
 801bc6e:	d0cf      	beq.n	801bc10 <rcl_clock_init+0x1c>
 801bc70:	fab6 f586 	clz	r5, r6
 801bc74:	096d      	lsrs	r5, r5, #5
 801bc76:	2e00      	cmp	r6, #0
 801bc78:	d0ca      	beq.n	801bc10 <rcl_clock_init+0x1c>
 801bc7a:	46a6      	mov	lr, r4
 801bc7c:	7035      	strb	r5, [r6, #0]
 801bc7e:	f106 0c14 	add.w	ip, r6, #20
 801bc82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bc86:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bc8a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bc8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bc92:	f8de 3000 	ldr.w	r3, [lr]
 801bc96:	2010      	movs	r0, #16
 801bc98:	f8cc 3000 	str.w	r3, [ip]
 801bc9c:	6823      	ldr	r3, [r4, #0]
 801bc9e:	6921      	ldr	r1, [r4, #16]
 801bca0:	4798      	blx	r3
 801bca2:	6130      	str	r0, [r6, #16]
 801bca4:	b320      	cbz	r0, 801bcf0 <rcl_clock_init+0xfc>
 801bca6:	2200      	movs	r2, #0
 801bca8:	2300      	movs	r3, #0
 801bcaa:	46ac      	mov	ip, r5
 801bcac:	7205      	strb	r5, [r0, #8]
 801bcae:	e9c0 2300 	strd	r2, r3, [r0]
 801bcb2:	4a12      	ldr	r2, [pc, #72]	; (801bcfc <rcl_clock_init+0x108>)
 801bcb4:	2301      	movs	r3, #1
 801bcb6:	4660      	mov	r0, ip
 801bcb8:	60f2      	str	r2, [r6, #12]
 801bcba:	7033      	strb	r3, [r6, #0]
 801bcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcbe:	2c00      	cmp	r4, #0
 801bcc0:	d0a6      	beq.n	801bc10 <rcl_clock_init+0x1c>
 801bcc2:	fab6 f386 	clz	r3, r6
 801bcc6:	095b      	lsrs	r3, r3, #5
 801bcc8:	2e00      	cmp	r6, #0
 801bcca:	d0a1      	beq.n	801bc10 <rcl_clock_init+0x1c>
 801bccc:	6133      	str	r3, [r6, #16]
 801bcce:	469c      	mov	ip, r3
 801bcd0:	f106 0514 	add.w	r5, r6, #20
 801bcd4:	f8df e028 	ldr.w	lr, [pc, #40]	; 801bd00 <rcl_clock_init+0x10c>
 801bcd8:	2702      	movs	r7, #2
 801bcda:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bcde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bce2:	6823      	ldr	r3, [r4, #0]
 801bce4:	4660      	mov	r0, ip
 801bce6:	602b      	str	r3, [r5, #0]
 801bce8:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bcec:	7037      	strb	r7, [r6, #0]
 801bcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcf0:	f04f 0c0a 	mov.w	ip, #10
 801bcf4:	e78e      	b.n	801bc14 <rcl_clock_init+0x20>
 801bcf6:	bf00      	nop
 801bcf8:	0801bbc9 	.word	0x0801bbc9
 801bcfc:	0801bbd1 	.word	0x0801bbd1
 801bd00:	0801bbc1 	.word	0x0801bbc1

0801bd04 <rcl_clock_get_now>:
 801bd04:	b140      	cbz	r0, 801bd18 <rcl_clock_get_now+0x14>
 801bd06:	b139      	cbz	r1, 801bd18 <rcl_clock_get_now+0x14>
 801bd08:	7803      	ldrb	r3, [r0, #0]
 801bd0a:	b11b      	cbz	r3, 801bd14 <rcl_clock_get_now+0x10>
 801bd0c:	68c3      	ldr	r3, [r0, #12]
 801bd0e:	b10b      	cbz	r3, 801bd14 <rcl_clock_get_now+0x10>
 801bd10:	6900      	ldr	r0, [r0, #16]
 801bd12:	4718      	bx	r3
 801bd14:	2001      	movs	r0, #1
 801bd16:	4770      	bx	lr
 801bd18:	200b      	movs	r0, #11
 801bd1a:	4770      	bx	lr

0801bd1c <rcl_timer_call>:
 801bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd20:	b087      	sub	sp, #28
 801bd22:	2800      	cmp	r0, #0
 801bd24:	d06c      	beq.n	801be00 <rcl_timer_call+0xe4>
 801bd26:	6803      	ldr	r3, [r0, #0]
 801bd28:	4604      	mov	r4, r0
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d062      	beq.n	801bdf4 <rcl_timer_call+0xd8>
 801bd2e:	f3bf 8f5b 	dmb	ish
 801bd32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bd36:	f3bf 8f5b 	dmb	ish
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d14f      	bne.n	801bdde <rcl_timer_call+0xc2>
 801bd3e:	6803      	ldr	r3, [r0, #0]
 801bd40:	a904      	add	r1, sp, #16
 801bd42:	6818      	ldr	r0, [r3, #0]
 801bd44:	f7ff ffde 	bl	801bd04 <rcl_clock_get_now>
 801bd48:	4605      	mov	r5, r0
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	d149      	bne.n	801bde2 <rcl_timer_call+0xc6>
 801bd4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	db49      	blt.n	801bdea <rcl_timer_call+0xce>
 801bd56:	2605      	movs	r6, #5
 801bd58:	6820      	ldr	r0, [r4, #0]
 801bd5a:	9600      	str	r6, [sp, #0]
 801bd5c:	3020      	adds	r0, #32
 801bd5e:	f001 fd23 	bl	801d7a8 <__atomic_exchange_8>
 801bd62:	6823      	ldr	r3, [r4, #0]
 801bd64:	4680      	mov	r8, r0
 801bd66:	f3bf 8f5b 	dmb	ish
 801bd6a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801bd6e:	f3bf 8f5b 	dmb	ish
 801bd72:	6820      	ldr	r0, [r4, #0]
 801bd74:	4689      	mov	r9, r1
 801bd76:	4631      	mov	r1, r6
 801bd78:	3028      	adds	r0, #40	; 0x28
 801bd7a:	f001 fca9 	bl	801d6d0 <__atomic_load_8>
 801bd7e:	460f      	mov	r7, r1
 801bd80:	4631      	mov	r1, r6
 801bd82:	4606      	mov	r6, r0
 801bd84:	6820      	ldr	r0, [r4, #0]
 801bd86:	3018      	adds	r0, #24
 801bd88:	f001 fca2 	bl	801d6d0 <__atomic_load_8>
 801bd8c:	4602      	mov	r2, r0
 801bd8e:	9804      	ldr	r0, [sp, #16]
 801bd90:	460b      	mov	r3, r1
 801bd92:	18b6      	adds	r6, r6, r2
 801bd94:	f8dd c014 	ldr.w	ip, [sp, #20]
 801bd98:	4692      	mov	sl, r2
 801bd9a:	eb47 0701 	adc.w	r7, r7, r1
 801bd9e:	4286      	cmp	r6, r0
 801bda0:	eb77 010c 	sbcs.w	r1, r7, ip
 801bda4:	da04      	bge.n	801bdb0 <rcl_timer_call+0x94>
 801bda6:	ea53 0102 	orrs.w	r1, r3, r2
 801bdaa:	d12e      	bne.n	801be0a <rcl_timer_call+0xee>
 801bdac:	4606      	mov	r6, r0
 801bdae:	4667      	mov	r7, ip
 801bdb0:	6820      	ldr	r0, [r4, #0]
 801bdb2:	2105      	movs	r1, #5
 801bdb4:	4632      	mov	r2, r6
 801bdb6:	463b      	mov	r3, r7
 801bdb8:	3028      	adds	r0, #40	; 0x28
 801bdba:	9100      	str	r1, [sp, #0]
 801bdbc:	f001 fcbe 	bl	801d73c <__atomic_store_8>
 801bdc0:	f1bb 0f00 	cmp.w	fp, #0
 801bdc4:	d00d      	beq.n	801bde2 <rcl_timer_call+0xc6>
 801bdc6:	9a04      	ldr	r2, [sp, #16]
 801bdc8:	4620      	mov	r0, r4
 801bdca:	9b05      	ldr	r3, [sp, #20]
 801bdcc:	ebb2 0208 	subs.w	r2, r2, r8
 801bdd0:	eb63 0309 	sbc.w	r3, r3, r9
 801bdd4:	47d8      	blx	fp
 801bdd6:	4628      	mov	r0, r5
 801bdd8:	b007      	add	sp, #28
 801bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdde:	f240 3521 	movw	r5, #801	; 0x321
 801bde2:	4628      	mov	r0, r5
 801bde4:	b007      	add	sp, #28
 801bde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdea:	2501      	movs	r5, #1
 801bdec:	4628      	mov	r0, r5
 801bdee:	b007      	add	sp, #28
 801bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdf4:	f44f 7548 	mov.w	r5, #800	; 0x320
 801bdf8:	4628      	mov	r0, r5
 801bdfa:	b007      	add	sp, #28
 801bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be00:	250b      	movs	r5, #11
 801be02:	4628      	mov	r0, r5
 801be04:	b007      	add	sp, #28
 801be06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be0a:	1b80      	subs	r0, r0, r6
 801be0c:	eb6c 0107 	sbc.w	r1, ip, r7
 801be10:	3801      	subs	r0, #1
 801be12:	f161 0100 	sbc.w	r1, r1, #0
 801be16:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801be1a:	f7e4 fc35 	bl	8000688 <__aeabi_ldivmod>
 801be1e:	9b02      	ldr	r3, [sp, #8]
 801be20:	3001      	adds	r0, #1
 801be22:	f141 0100 	adc.w	r1, r1, #0
 801be26:	fb00 f303 	mul.w	r3, r0, r3
 801be2a:	fb01 330a 	mla	r3, r1, sl, r3
 801be2e:	fba0 0a0a 	umull	r0, sl, r0, sl
 801be32:	1986      	adds	r6, r0, r6
 801be34:	4453      	add	r3, sl
 801be36:	eb43 0707 	adc.w	r7, r3, r7
 801be3a:	e7b9      	b.n	801bdb0 <rcl_timer_call+0x94>

0801be3c <rcl_timer_is_ready>:
 801be3c:	b570      	push	{r4, r5, r6, lr}
 801be3e:	b082      	sub	sp, #8
 801be40:	b380      	cbz	r0, 801bea4 <rcl_timer_is_ready+0x68>
 801be42:	6803      	ldr	r3, [r0, #0]
 801be44:	4604      	mov	r4, r0
 801be46:	b38b      	cbz	r3, 801beac <rcl_timer_is_ready+0x70>
 801be48:	460d      	mov	r5, r1
 801be4a:	b359      	cbz	r1, 801bea4 <rcl_timer_is_ready+0x68>
 801be4c:	f3bf 8f5b 	dmb	ish
 801be50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801be54:	f3bf 8f5b 	dmb	ish
 801be58:	b953      	cbnz	r3, 801be70 <rcl_timer_is_ready+0x34>
 801be5a:	6803      	ldr	r3, [r0, #0]
 801be5c:	4669      	mov	r1, sp
 801be5e:	6818      	ldr	r0, [r3, #0]
 801be60:	f7ff ff50 	bl	801bd04 <rcl_clock_get_now>
 801be64:	4606      	mov	r6, r0
 801be66:	b148      	cbz	r0, 801be7c <rcl_timer_is_ready+0x40>
 801be68:	f240 3321 	movw	r3, #801	; 0x321
 801be6c:	4298      	cmp	r0, r3
 801be6e:	d102      	bne.n	801be76 <rcl_timer_is_ready+0x3a>
 801be70:	2300      	movs	r3, #0
 801be72:	461e      	mov	r6, r3
 801be74:	702b      	strb	r3, [r5, #0]
 801be76:	4630      	mov	r0, r6
 801be78:	b002      	add	sp, #8
 801be7a:	bd70      	pop	{r4, r5, r6, pc}
 801be7c:	6820      	ldr	r0, [r4, #0]
 801be7e:	2105      	movs	r1, #5
 801be80:	3028      	adds	r0, #40	; 0x28
 801be82:	f001 fc25 	bl	801d6d0 <__atomic_load_8>
 801be86:	9b00      	ldr	r3, [sp, #0]
 801be88:	1ac0      	subs	r0, r0, r3
 801be8a:	9b01      	ldr	r3, [sp, #4]
 801be8c:	eb61 0103 	sbc.w	r1, r1, r3
 801be90:	2801      	cmp	r0, #1
 801be92:	4630      	mov	r0, r6
 801be94:	f171 0300 	sbcs.w	r3, r1, #0
 801be98:	bfb4      	ite	lt
 801be9a:	2301      	movlt	r3, #1
 801be9c:	2300      	movge	r3, #0
 801be9e:	702b      	strb	r3, [r5, #0]
 801bea0:	b002      	add	sp, #8
 801bea2:	bd70      	pop	{r4, r5, r6, pc}
 801bea4:	260b      	movs	r6, #11
 801bea6:	4630      	mov	r0, r6
 801bea8:	b002      	add	sp, #8
 801beaa:	bd70      	pop	{r4, r5, r6, pc}
 801beac:	f44f 7648 	mov.w	r6, #800	; 0x320
 801beb0:	e7e1      	b.n	801be76 <rcl_timer_is_ready+0x3a>
 801beb2:	bf00      	nop

0801beb4 <rcl_timer_get_time_until_next_call>:
 801beb4:	b570      	push	{r4, r5, r6, lr}
 801beb6:	b082      	sub	sp, #8
 801beb8:	b330      	cbz	r0, 801bf08 <rcl_timer_get_time_until_next_call+0x54>
 801beba:	6803      	ldr	r3, [r0, #0]
 801bebc:	4604      	mov	r4, r0
 801bebe:	b33b      	cbz	r3, 801bf10 <rcl_timer_get_time_until_next_call+0x5c>
 801bec0:	460d      	mov	r5, r1
 801bec2:	b309      	cbz	r1, 801bf08 <rcl_timer_get_time_until_next_call+0x54>
 801bec4:	f3bf 8f5b 	dmb	ish
 801bec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801becc:	f3bf 8f5b 	dmb	ish
 801bed0:	b9ab      	cbnz	r3, 801befe <rcl_timer_get_time_until_next_call+0x4a>
 801bed2:	6803      	ldr	r3, [r0, #0]
 801bed4:	4669      	mov	r1, sp
 801bed6:	6818      	ldr	r0, [r3, #0]
 801bed8:	f7ff ff14 	bl	801bd04 <rcl_clock_get_now>
 801bedc:	4606      	mov	r6, r0
 801bede:	b958      	cbnz	r0, 801bef8 <rcl_timer_get_time_until_next_call+0x44>
 801bee0:	6820      	ldr	r0, [r4, #0]
 801bee2:	2105      	movs	r1, #5
 801bee4:	3028      	adds	r0, #40	; 0x28
 801bee6:	f001 fbf3 	bl	801d6d0 <__atomic_load_8>
 801beea:	9b00      	ldr	r3, [sp, #0]
 801beec:	1ac0      	subs	r0, r0, r3
 801beee:	9b01      	ldr	r3, [sp, #4]
 801bef0:	eb61 0103 	sbc.w	r1, r1, r3
 801bef4:	6028      	str	r0, [r5, #0]
 801bef6:	6069      	str	r1, [r5, #4]
 801bef8:	4630      	mov	r0, r6
 801befa:	b002      	add	sp, #8
 801befc:	bd70      	pop	{r4, r5, r6, pc}
 801befe:	f240 3621 	movw	r6, #801	; 0x321
 801bf02:	4630      	mov	r0, r6
 801bf04:	b002      	add	sp, #8
 801bf06:	bd70      	pop	{r4, r5, r6, pc}
 801bf08:	260b      	movs	r6, #11
 801bf0a:	4630      	mov	r0, r6
 801bf0c:	b002      	add	sp, #8
 801bf0e:	bd70      	pop	{r4, r5, r6, pc}
 801bf10:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bf14:	e7f0      	b.n	801bef8 <rcl_timer_get_time_until_next_call+0x44>
 801bf16:	bf00      	nop

0801bf18 <rcl_timer_get_guard_condition>:
 801bf18:	b130      	cbz	r0, 801bf28 <rcl_timer_get_guard_condition+0x10>
 801bf1a:	6800      	ldr	r0, [r0, #0]
 801bf1c:	b120      	cbz	r0, 801bf28 <rcl_timer_get_guard_condition+0x10>
 801bf1e:	68c3      	ldr	r3, [r0, #12]
 801bf20:	b10b      	cbz	r3, 801bf26 <rcl_timer_get_guard_condition+0xe>
 801bf22:	3008      	adds	r0, #8
 801bf24:	4770      	bx	lr
 801bf26:	4618      	mov	r0, r3
 801bf28:	4770      	bx	lr
 801bf2a:	bf00      	nop

0801bf2c <rcl_validate_enclave_name_with_size>:
 801bf2c:	2800      	cmp	r0, #0
 801bf2e:	d049      	beq.n	801bfc4 <rcl_validate_enclave_name_with_size+0x98>
 801bf30:	b570      	push	{r4, r5, r6, lr}
 801bf32:	4615      	mov	r5, r2
 801bf34:	b0c2      	sub	sp, #264	; 0x108
 801bf36:	b19a      	cbz	r2, 801bf60 <rcl_validate_enclave_name_with_size+0x34>
 801bf38:	461e      	mov	r6, r3
 801bf3a:	466a      	mov	r2, sp
 801bf3c:	ab01      	add	r3, sp, #4
 801bf3e:	460c      	mov	r4, r1
 801bf40:	f7f9 fa8e 	bl	8015460 <rmw_validate_namespace_with_size>
 801bf44:	4684      	mov	ip, r0
 801bf46:	b9b8      	cbnz	r0, 801bf78 <rcl_validate_enclave_name_with_size+0x4c>
 801bf48:	9900      	ldr	r1, [sp, #0]
 801bf4a:	b171      	cbz	r1, 801bf6a <rcl_validate_enclave_name_with_size+0x3e>
 801bf4c:	2907      	cmp	r1, #7
 801bf4e:	d019      	beq.n	801bf84 <rcl_validate_enclave_name_with_size+0x58>
 801bf50:	1e4b      	subs	r3, r1, #1
 801bf52:	2b05      	cmp	r3, #5
 801bf54:	d83a      	bhi.n	801bfcc <rcl_validate_enclave_name_with_size+0xa0>
 801bf56:	e8df f003 	tbb	[pc, r3]
 801bf5a:	2926      	.short	0x2926
 801bf5c:	1d322f2c 	.word	0x1d322f2c
 801bf60:	f04f 0c0b 	mov.w	ip, #11
 801bf64:	4660      	mov	r0, ip
 801bf66:	b042      	add	sp, #264	; 0x108
 801bf68:	bd70      	pop	{r4, r5, r6, pc}
 801bf6a:	2907      	cmp	r1, #7
 801bf6c:	d00a      	beq.n	801bf84 <rcl_validate_enclave_name_with_size+0x58>
 801bf6e:	2300      	movs	r3, #0
 801bf70:	4660      	mov	r0, ip
 801bf72:	602b      	str	r3, [r5, #0]
 801bf74:	b042      	add	sp, #264	; 0x108
 801bf76:	bd70      	pop	{r4, r5, r6, pc}
 801bf78:	f7ff f9f4 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 801bf7c:	4684      	mov	ip, r0
 801bf7e:	4660      	mov	r0, ip
 801bf80:	b042      	add	sp, #264	; 0x108
 801bf82:	bd70      	pop	{r4, r5, r6, pc}
 801bf84:	2cff      	cmp	r4, #255	; 0xff
 801bf86:	d9f2      	bls.n	801bf6e <rcl_validate_enclave_name_with_size+0x42>
 801bf88:	6029      	str	r1, [r5, #0]
 801bf8a:	2e00      	cmp	r6, #0
 801bf8c:	d0ea      	beq.n	801bf64 <rcl_validate_enclave_name_with_size+0x38>
 801bf8e:	23fe      	movs	r3, #254	; 0xfe
 801bf90:	6033      	str	r3, [r6, #0]
 801bf92:	e7e7      	b.n	801bf64 <rcl_validate_enclave_name_with_size+0x38>
 801bf94:	2306      	movs	r3, #6
 801bf96:	602b      	str	r3, [r5, #0]
 801bf98:	2e00      	cmp	r6, #0
 801bf9a:	d0e3      	beq.n	801bf64 <rcl_validate_enclave_name_with_size+0x38>
 801bf9c:	9b01      	ldr	r3, [sp, #4]
 801bf9e:	4660      	mov	r0, ip
 801bfa0:	6033      	str	r3, [r6, #0]
 801bfa2:	b042      	add	sp, #264	; 0x108
 801bfa4:	bd70      	pop	{r4, r5, r6, pc}
 801bfa6:	2301      	movs	r3, #1
 801bfa8:	602b      	str	r3, [r5, #0]
 801bfaa:	e7f5      	b.n	801bf98 <rcl_validate_enclave_name_with_size+0x6c>
 801bfac:	2302      	movs	r3, #2
 801bfae:	602b      	str	r3, [r5, #0]
 801bfb0:	e7f2      	b.n	801bf98 <rcl_validate_enclave_name_with_size+0x6c>
 801bfb2:	2303      	movs	r3, #3
 801bfb4:	602b      	str	r3, [r5, #0]
 801bfb6:	e7ef      	b.n	801bf98 <rcl_validate_enclave_name_with_size+0x6c>
 801bfb8:	2304      	movs	r3, #4
 801bfba:	602b      	str	r3, [r5, #0]
 801bfbc:	e7ec      	b.n	801bf98 <rcl_validate_enclave_name_with_size+0x6c>
 801bfbe:	2305      	movs	r3, #5
 801bfc0:	602b      	str	r3, [r5, #0]
 801bfc2:	e7e9      	b.n	801bf98 <rcl_validate_enclave_name_with_size+0x6c>
 801bfc4:	f04f 0c0b 	mov.w	ip, #11
 801bfc8:	4660      	mov	r0, ip
 801bfca:	4770      	bx	lr
 801bfcc:	460b      	mov	r3, r1
 801bfce:	4a04      	ldr	r2, [pc, #16]	; (801bfe0 <rcl_validate_enclave_name_with_size+0xb4>)
 801bfd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801bfd4:	a802      	add	r0, sp, #8
 801bfd6:	f7f9 f92b 	bl	8015230 <rcutils_snprintf>
 801bfda:	f04f 0c01 	mov.w	ip, #1
 801bfde:	e7c1      	b.n	801bf64 <rcl_validate_enclave_name_with_size+0x38>
 801bfe0:	08025760 	.word	0x08025760

0801bfe4 <rcl_validate_enclave_name>:
 801bfe4:	b168      	cbz	r0, 801c002 <rcl_validate_enclave_name+0x1e>
 801bfe6:	b570      	push	{r4, r5, r6, lr}
 801bfe8:	460d      	mov	r5, r1
 801bfea:	4616      	mov	r6, r2
 801bfec:	4604      	mov	r4, r0
 801bfee:	f7e4 f987 	bl	8000300 <strlen>
 801bff2:	4633      	mov	r3, r6
 801bff4:	4601      	mov	r1, r0
 801bff6:	462a      	mov	r2, r5
 801bff8:	4620      	mov	r0, r4
 801bffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bffe:	f7ff bf95 	b.w	801bf2c <rcl_validate_enclave_name_with_size>
 801c002:	200b      	movs	r0, #11
 801c004:	4770      	bx	lr
 801c006:	bf00      	nop

0801c008 <rcl_get_zero_initialized_wait_set>:
 801c008:	b510      	push	{r4, lr}
 801c00a:	4c08      	ldr	r4, [pc, #32]	; (801c02c <rcl_get_zero_initialized_wait_set+0x24>)
 801c00c:	4686      	mov	lr, r0
 801c00e:	4684      	mov	ip, r0
 801c010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c012:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c01c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c01e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c022:	6823      	ldr	r3, [r4, #0]
 801c024:	4670      	mov	r0, lr
 801c026:	f8cc 3000 	str.w	r3, [ip]
 801c02a:	bd10      	pop	{r4, pc}
 801c02c:	080257c0 	.word	0x080257c0

0801c030 <rcl_wait_set_is_valid>:
 801c030:	b118      	cbz	r0, 801c03a <rcl_wait_set_is_valid+0xa>
 801c032:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c034:	3800      	subs	r0, #0
 801c036:	bf18      	it	ne
 801c038:	2001      	movne	r0, #1
 801c03a:	4770      	bx	lr

0801c03c <rcl_wait_set_fini>:
 801c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c040:	b082      	sub	sp, #8
 801c042:	2800      	cmp	r0, #0
 801c044:	f000 8095 	beq.w	801c172 <rcl_wait_set_fini+0x136>
 801c048:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c04a:	4604      	mov	r4, r0
 801c04c:	2e00      	cmp	r6, #0
 801c04e:	f000 808c 	beq.w	801c16a <rcl_wait_set_fini+0x12e>
 801c052:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c054:	f002 f9c0 	bl	801e3d8 <rmw_destroy_wait_set>
 801c058:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c05a:	1e06      	subs	r6, r0, #0
 801c05c:	bf18      	it	ne
 801c05e:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c062:	2d00      	cmp	r5, #0
 801c064:	f000 8081 	beq.w	801c16a <rcl_wait_set_fini+0x12e>
 801c068:	2700      	movs	r7, #0
 801c06a:	6820      	ldr	r0, [r4, #0]
 801c06c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c070:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c072:	6067      	str	r7, [r4, #4]
 801c074:	602f      	str	r7, [r5, #0]
 801c076:	b120      	cbz	r0, 801c082 <rcl_wait_set_fini+0x46>
 801c078:	9101      	str	r1, [sp, #4]
 801c07a:	47c0      	blx	r8
 801c07c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c07e:	9901      	ldr	r1, [sp, #4]
 801c080:	6027      	str	r7, [r4, #0]
 801c082:	68a8      	ldr	r0, [r5, #8]
 801c084:	b120      	cbz	r0, 801c090 <rcl_wait_set_fini+0x54>
 801c086:	47c0      	blx	r8
 801c088:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c08a:	2300      	movs	r3, #0
 801c08c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c090:	f04f 0800 	mov.w	r8, #0
 801c094:	68a0      	ldr	r0, [r4, #8]
 801c096:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c098:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c09a:	f8c4 800c 	str.w	r8, [r4, #12]
 801c09e:	f8c5 800c 	str.w	r8, [r5, #12]
 801c0a2:	b128      	cbz	r0, 801c0b0 <rcl_wait_set_fini+0x74>
 801c0a4:	47b8      	blx	r7
 801c0a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c0a8:	f8c4 8008 	str.w	r8, [r4, #8]
 801c0ac:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c0ae:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c0b0:	f04f 0800 	mov.w	r8, #0
 801c0b4:	6968      	ldr	r0, [r5, #20]
 801c0b6:	f8c5 8010 	str.w	r8, [r5, #16]
 801c0ba:	b128      	cbz	r0, 801c0c8 <rcl_wait_set_fini+0x8c>
 801c0bc:	47b8      	blx	r7
 801c0be:	f8c5 8014 	str.w	r8, [r5, #20]
 801c0c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c0c4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c0c6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c0c8:	f04f 0800 	mov.w	r8, #0
 801c0cc:	6920      	ldr	r0, [r4, #16]
 801c0ce:	f8c4 8014 	str.w	r8, [r4, #20]
 801c0d2:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c0d6:	b128      	cbz	r0, 801c0e4 <rcl_wait_set_fini+0xa8>
 801c0d8:	47b8      	blx	r7
 801c0da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c0dc:	f8c4 8010 	str.w	r8, [r4, #16]
 801c0e0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c0e2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c0e4:	f04f 0800 	mov.w	r8, #0
 801c0e8:	69a0      	ldr	r0, [r4, #24]
 801c0ea:	f8c4 801c 	str.w	r8, [r4, #28]
 801c0ee:	f8c5 8018 	str.w	r8, [r5, #24]
 801c0f2:	b128      	cbz	r0, 801c100 <rcl_wait_set_fini+0xc4>
 801c0f4:	9101      	str	r1, [sp, #4]
 801c0f6:	47b8      	blx	r7
 801c0f8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c0fa:	9901      	ldr	r1, [sp, #4]
 801c0fc:	f8c4 8018 	str.w	r8, [r4, #24]
 801c100:	6a28      	ldr	r0, [r5, #32]
 801c102:	b120      	cbz	r0, 801c10e <rcl_wait_set_fini+0xd2>
 801c104:	47b8      	blx	r7
 801c106:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c108:	2300      	movs	r3, #0
 801c10a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c10e:	2700      	movs	r7, #0
 801c110:	6a20      	ldr	r0, [r4, #32]
 801c112:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c116:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c118:	6267      	str	r7, [r4, #36]	; 0x24
 801c11a:	626f      	str	r7, [r5, #36]	; 0x24
 801c11c:	b120      	cbz	r0, 801c128 <rcl_wait_set_fini+0xec>
 801c11e:	9101      	str	r1, [sp, #4]
 801c120:	47c0      	blx	r8
 801c122:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c124:	9901      	ldr	r1, [sp, #4]
 801c126:	6227      	str	r7, [r4, #32]
 801c128:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c12a:	b120      	cbz	r0, 801c136 <rcl_wait_set_fini+0xfa>
 801c12c:	47c0      	blx	r8
 801c12e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c130:	2300      	movs	r3, #0
 801c132:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c136:	2700      	movs	r7, #0
 801c138:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c13a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c13e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c140:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c142:	632f      	str	r7, [r5, #48]	; 0x30
 801c144:	b120      	cbz	r0, 801c150 <rcl_wait_set_fini+0x114>
 801c146:	9101      	str	r1, [sp, #4]
 801c148:	47c0      	blx	r8
 801c14a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c14c:	9901      	ldr	r1, [sp, #4]
 801c14e:	62a7      	str	r7, [r4, #40]	; 0x28
 801c150:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c152:	b120      	cbz	r0, 801c15e <rcl_wait_set_fini+0x122>
 801c154:	47c0      	blx	r8
 801c156:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c158:	2300      	movs	r3, #0
 801c15a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c15e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c160:	4628      	mov	r0, r5
 801c162:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c164:	4798      	blx	r3
 801c166:	2300      	movs	r3, #0
 801c168:	6323      	str	r3, [r4, #48]	; 0x30
 801c16a:	4630      	mov	r0, r6
 801c16c:	b002      	add	sp, #8
 801c16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c172:	260b      	movs	r6, #11
 801c174:	4630      	mov	r0, r6
 801c176:	b002      	add	sp, #8
 801c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c17c <rcl_wait_set_add_subscription>:
 801c17c:	b318      	cbz	r0, 801c1c6 <rcl_wait_set_add_subscription+0x4a>
 801c17e:	b538      	push	{r3, r4, r5, lr}
 801c180:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c182:	4604      	mov	r4, r0
 801c184:	b30b      	cbz	r3, 801c1ca <rcl_wait_set_add_subscription+0x4e>
 801c186:	b319      	cbz	r1, 801c1d0 <rcl_wait_set_add_subscription+0x54>
 801c188:	681d      	ldr	r5, [r3, #0]
 801c18a:	6840      	ldr	r0, [r0, #4]
 801c18c:	4285      	cmp	r5, r0
 801c18e:	d217      	bcs.n	801c1c0 <rcl_wait_set_add_subscription+0x44>
 801c190:	1c68      	adds	r0, r5, #1
 801c192:	6018      	str	r0, [r3, #0]
 801c194:	6823      	ldr	r3, [r4, #0]
 801c196:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c19a:	b102      	cbz	r2, 801c19e <rcl_wait_set_add_subscription+0x22>
 801c19c:	6015      	str	r5, [r2, #0]
 801c19e:	4608      	mov	r0, r1
 801c1a0:	f7f7 ff16 	bl	8013fd0 <rcl_subscription_get_rmw_handle>
 801c1a4:	b150      	cbz	r0, 801c1bc <rcl_wait_set_add_subscription+0x40>
 801c1a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c1a8:	6842      	ldr	r2, [r0, #4]
 801c1aa:	2000      	movs	r0, #0
 801c1ac:	689b      	ldr	r3, [r3, #8]
 801c1ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c1b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c1b4:	6853      	ldr	r3, [r2, #4]
 801c1b6:	3301      	adds	r3, #1
 801c1b8:	6053      	str	r3, [r2, #4]
 801c1ba:	bd38      	pop	{r3, r4, r5, pc}
 801c1bc:	2001      	movs	r0, #1
 801c1be:	bd38      	pop	{r3, r4, r5, pc}
 801c1c0:	f240 3086 	movw	r0, #902	; 0x386
 801c1c4:	bd38      	pop	{r3, r4, r5, pc}
 801c1c6:	200b      	movs	r0, #11
 801c1c8:	4770      	bx	lr
 801c1ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c1ce:	bd38      	pop	{r3, r4, r5, pc}
 801c1d0:	200b      	movs	r0, #11
 801c1d2:	bd38      	pop	{r3, r4, r5, pc}

0801c1d4 <rcl_wait_set_clear>:
 801c1d4:	2800      	cmp	r0, #0
 801c1d6:	d074      	beq.n	801c2c2 <rcl_wait_set_clear+0xee>
 801c1d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c1da:	b510      	push	{r4, lr}
 801c1dc:	4604      	mov	r4, r0
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d071      	beq.n	801c2c6 <rcl_wait_set_clear+0xf2>
 801c1e2:	6800      	ldr	r0, [r0, #0]
 801c1e4:	b138      	cbz	r0, 801c1f6 <rcl_wait_set_clear+0x22>
 801c1e6:	6862      	ldr	r2, [r4, #4]
 801c1e8:	2100      	movs	r1, #0
 801c1ea:	0092      	lsls	r2, r2, #2
 801c1ec:	f004 fd6a 	bl	8020cc4 <memset>
 801c1f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c1f2:	2200      	movs	r2, #0
 801c1f4:	601a      	str	r2, [r3, #0]
 801c1f6:	68a0      	ldr	r0, [r4, #8]
 801c1f8:	b138      	cbz	r0, 801c20a <rcl_wait_set_clear+0x36>
 801c1fa:	68e2      	ldr	r2, [r4, #12]
 801c1fc:	2100      	movs	r1, #0
 801c1fe:	0092      	lsls	r2, r2, #2
 801c200:	f004 fd60 	bl	8020cc4 <memset>
 801c204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c206:	2200      	movs	r2, #0
 801c208:	60da      	str	r2, [r3, #12]
 801c20a:	69a0      	ldr	r0, [r4, #24]
 801c20c:	b138      	cbz	r0, 801c21e <rcl_wait_set_clear+0x4a>
 801c20e:	69e2      	ldr	r2, [r4, #28]
 801c210:	2100      	movs	r1, #0
 801c212:	0092      	lsls	r2, r2, #2
 801c214:	f004 fd56 	bl	8020cc4 <memset>
 801c218:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c21a:	2200      	movs	r2, #0
 801c21c:	619a      	str	r2, [r3, #24]
 801c21e:	6a20      	ldr	r0, [r4, #32]
 801c220:	b138      	cbz	r0, 801c232 <rcl_wait_set_clear+0x5e>
 801c222:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c224:	2100      	movs	r1, #0
 801c226:	0092      	lsls	r2, r2, #2
 801c228:	f004 fd4c 	bl	8020cc4 <memset>
 801c22c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c22e:	2200      	movs	r2, #0
 801c230:	625a      	str	r2, [r3, #36]	; 0x24
 801c232:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c234:	b138      	cbz	r0, 801c246 <rcl_wait_set_clear+0x72>
 801c236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c238:	2100      	movs	r1, #0
 801c23a:	0092      	lsls	r2, r2, #2
 801c23c:	f004 fd42 	bl	8020cc4 <memset>
 801c240:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c242:	2200      	movs	r2, #0
 801c244:	631a      	str	r2, [r3, #48]	; 0x30
 801c246:	6920      	ldr	r0, [r4, #16]
 801c248:	b138      	cbz	r0, 801c25a <rcl_wait_set_clear+0x86>
 801c24a:	6962      	ldr	r2, [r4, #20]
 801c24c:	2100      	movs	r1, #0
 801c24e:	0092      	lsls	r2, r2, #2
 801c250:	f004 fd38 	bl	8020cc4 <memset>
 801c254:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c256:	2200      	movs	r2, #0
 801c258:	641a      	str	r2, [r3, #64]	; 0x40
 801c25a:	6898      	ldr	r0, [r3, #8]
 801c25c:	b138      	cbz	r0, 801c26e <rcl_wait_set_clear+0x9a>
 801c25e:	685a      	ldr	r2, [r3, #4]
 801c260:	2100      	movs	r1, #0
 801c262:	0092      	lsls	r2, r2, #2
 801c264:	f004 fd2e 	bl	8020cc4 <memset>
 801c268:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c26a:	2200      	movs	r2, #0
 801c26c:	605a      	str	r2, [r3, #4]
 801c26e:	6958      	ldr	r0, [r3, #20]
 801c270:	b138      	cbz	r0, 801c282 <rcl_wait_set_clear+0xae>
 801c272:	691a      	ldr	r2, [r3, #16]
 801c274:	2100      	movs	r1, #0
 801c276:	0092      	lsls	r2, r2, #2
 801c278:	f004 fd24 	bl	8020cc4 <memset>
 801c27c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c27e:	2200      	movs	r2, #0
 801c280:	611a      	str	r2, [r3, #16]
 801c282:	6a18      	ldr	r0, [r3, #32]
 801c284:	b138      	cbz	r0, 801c296 <rcl_wait_set_clear+0xc2>
 801c286:	69da      	ldr	r2, [r3, #28]
 801c288:	2100      	movs	r1, #0
 801c28a:	0092      	lsls	r2, r2, #2
 801c28c:	f004 fd1a 	bl	8020cc4 <memset>
 801c290:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c292:	2200      	movs	r2, #0
 801c294:	61da      	str	r2, [r3, #28]
 801c296:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c298:	b138      	cbz	r0, 801c2aa <rcl_wait_set_clear+0xd6>
 801c29a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c29c:	2100      	movs	r1, #0
 801c29e:	0092      	lsls	r2, r2, #2
 801c2a0:	f004 fd10 	bl	8020cc4 <memset>
 801c2a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2a6:	2200      	movs	r2, #0
 801c2a8:	629a      	str	r2, [r3, #40]	; 0x28
 801c2aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c2ac:	b140      	cbz	r0, 801c2c0 <rcl_wait_set_clear+0xec>
 801c2ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c2b0:	2100      	movs	r1, #0
 801c2b2:	0092      	lsls	r2, r2, #2
 801c2b4:	f004 fd06 	bl	8020cc4 <memset>
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c2bc:	4618      	mov	r0, r3
 801c2be:	6353      	str	r3, [r2, #52]	; 0x34
 801c2c0:	bd10      	pop	{r4, pc}
 801c2c2:	200b      	movs	r0, #11
 801c2c4:	4770      	bx	lr
 801c2c6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c2ca:	bd10      	pop	{r4, pc}

0801c2cc <rcl_wait_set_resize>:
 801c2cc:	2800      	cmp	r0, #0
 801c2ce:	f000 8180 	beq.w	801c5d2 <rcl_wait_set_resize+0x306>
 801c2d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c2d8:	b083      	sub	sp, #12
 801c2da:	4605      	mov	r5, r0
 801c2dc:	2c00      	cmp	r4, #0
 801c2de:	f000 817a 	beq.w	801c5d6 <rcl_wait_set_resize+0x30a>
 801c2e2:	f04f 0900 	mov.w	r9, #0
 801c2e6:	461f      	mov	r7, r3
 801c2e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c2ec:	4688      	mov	r8, r1
 801c2ee:	4616      	mov	r6, r2
 801c2f0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c2f4:	f8c0 9004 	str.w	r9, [r0, #4]
 801c2f8:	f8c4 9000 	str.w	r9, [r4]
 801c2fc:	2900      	cmp	r1, #0
 801c2fe:	f000 80bf 	beq.w	801c480 <rcl_wait_set_resize+0x1b4>
 801c302:	008c      	lsls	r4, r1, #2
 801c304:	4652      	mov	r2, sl
 801c306:	6800      	ldr	r0, [r0, #0]
 801c308:	4621      	mov	r1, r4
 801c30a:	9301      	str	r3, [sp, #4]
 801c30c:	4798      	blx	r3
 801c30e:	9b01      	ldr	r3, [sp, #4]
 801c310:	6028      	str	r0, [r5, #0]
 801c312:	2800      	cmp	r0, #0
 801c314:	f000 80f6 	beq.w	801c504 <rcl_wait_set_resize+0x238>
 801c318:	4622      	mov	r2, r4
 801c31a:	4649      	mov	r1, r9
 801c31c:	9301      	str	r3, [sp, #4]
 801c31e:	f004 fcd1 	bl	8020cc4 <memset>
 801c322:	f8c5 8004 	str.w	r8, [r5, #4]
 801c326:	4652      	mov	r2, sl
 801c328:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c32c:	4621      	mov	r1, r4
 801c32e:	9b01      	ldr	r3, [sp, #4]
 801c330:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c334:	f8c8 9004 	str.w	r9, [r8, #4]
 801c338:	4798      	blx	r3
 801c33a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c33c:	f8c8 0008 	str.w	r0, [r8, #8]
 801c340:	689b      	ldr	r3, [r3, #8]
 801c342:	2b00      	cmp	r3, #0
 801c344:	f000 814a 	beq.w	801c5dc <rcl_wait_set_resize+0x310>
 801c348:	4622      	mov	r2, r4
 801c34a:	4649      	mov	r1, r9
 801c34c:	4618      	mov	r0, r3
 801c34e:	f004 fcb9 	bl	8020cc4 <memset>
 801c352:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c354:	f04f 0800 	mov.w	r8, #0
 801c358:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c35c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c360:	f8c5 800c 	str.w	r8, [r5, #12]
 801c364:	f8c4 800c 	str.w	r8, [r4, #12]
 801c368:	2e00      	cmp	r6, #0
 801c36a:	f040 809b 	bne.w	801c4a4 <rcl_wait_set_resize+0x1d8>
 801c36e:	68a8      	ldr	r0, [r5, #8]
 801c370:	b128      	cbz	r0, 801c37e <rcl_wait_set_resize+0xb2>
 801c372:	4649      	mov	r1, r9
 801c374:	4790      	blx	r2
 801c376:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c378:	60ae      	str	r6, [r5, #8]
 801c37a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c37e:	f04f 0800 	mov.w	r8, #0
 801c382:	19f6      	adds	r6, r6, r7
 801c384:	f8c4 8010 	str.w	r8, [r4, #16]
 801c388:	f040 80a2 	bne.w	801c4d0 <rcl_wait_set_resize+0x204>
 801c38c:	6960      	ldr	r0, [r4, #20]
 801c38e:	b130      	cbz	r0, 801c39e <rcl_wait_set_resize+0xd2>
 801c390:	4649      	mov	r1, r9
 801c392:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c394:	4798      	blx	r3
 801c396:	6166      	str	r6, [r4, #20]
 801c398:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c39a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c39e:	2600      	movs	r6, #0
 801c3a0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c3a4:	616e      	str	r6, [r5, #20]
 801c3a6:	6426      	str	r6, [r4, #64]	; 0x40
 801c3a8:	2f00      	cmp	r7, #0
 801c3aa:	f040 80af 	bne.w	801c50c <rcl_wait_set_resize+0x240>
 801c3ae:	6928      	ldr	r0, [r5, #16]
 801c3b0:	b138      	cbz	r0, 801c3c2 <rcl_wait_set_resize+0xf6>
 801c3b2:	4649      	mov	r1, r9
 801c3b4:	47d0      	blx	sl
 801c3b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c3b8:	612f      	str	r7, [r5, #16]
 801c3ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c3be:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c3c2:	2600      	movs	r6, #0
 801c3c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c3c6:	61ee      	str	r6, [r5, #28]
 801c3c8:	61a6      	str	r6, [r4, #24]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	f040 8093 	bne.w	801c4f6 <rcl_wait_set_resize+0x22a>
 801c3d0:	69a8      	ldr	r0, [r5, #24]
 801c3d2:	b120      	cbz	r0, 801c3de <rcl_wait_set_resize+0x112>
 801c3d4:	4649      	mov	r1, r9
 801c3d6:	47d0      	blx	sl
 801c3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c3da:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c3dc:	61ab      	str	r3, [r5, #24]
 801c3de:	6a20      	ldr	r0, [r4, #32]
 801c3e0:	b128      	cbz	r0, 801c3ee <rcl_wait_set_resize+0x122>
 801c3e2:	4649      	mov	r1, r9
 801c3e4:	47d0      	blx	sl
 801c3e6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c3ee:	2600      	movs	r6, #0
 801c3f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c3f2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c3f4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c3f8:	626e      	str	r6, [r5, #36]	; 0x24
 801c3fa:	6266      	str	r6, [r4, #36]	; 0x24
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	f000 8098 	beq.w	801c532 <rcl_wait_set_resize+0x266>
 801c402:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c406:	463a      	mov	r2, r7
 801c408:	6a28      	ldr	r0, [r5, #32]
 801c40a:	4651      	mov	r1, sl
 801c40c:	47c8      	blx	r9
 801c40e:	6228      	str	r0, [r5, #32]
 801c410:	2800      	cmp	r0, #0
 801c412:	d077      	beq.n	801c504 <rcl_wait_set_resize+0x238>
 801c414:	4652      	mov	r2, sl
 801c416:	4631      	mov	r1, r6
 801c418:	f004 fc54 	bl	8020cc4 <memset>
 801c41c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c420:	463a      	mov	r2, r7
 801c422:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c424:	4651      	mov	r1, sl
 801c426:	626b      	str	r3, [r5, #36]	; 0x24
 801c428:	62a6      	str	r6, [r4, #40]	; 0x28
 801c42a:	47c8      	blx	r9
 801c42c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c42e:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c430:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c432:	2c00      	cmp	r4, #0
 801c434:	f000 80f2 	beq.w	801c61c <rcl_wait_set_resize+0x350>
 801c438:	4620      	mov	r0, r4
 801c43a:	4652      	mov	r2, sl
 801c43c:	4631      	mov	r1, r6
 801c43e:	f004 fc41 	bl	8020cc4 <memset>
 801c442:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c444:	2600      	movs	r6, #0
 801c446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c448:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c44a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c44e:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c450:	6326      	str	r6, [r4, #48]	; 0x30
 801c452:	2b00      	cmp	r3, #0
 801c454:	f040 8097 	bne.w	801c586 <rcl_wait_set_resize+0x2ba>
 801c458:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c45a:	b120      	cbz	r0, 801c466 <rcl_wait_set_resize+0x19a>
 801c45c:	4639      	mov	r1, r7
 801c45e:	47c0      	blx	r8
 801c460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c462:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c464:	62ab      	str	r3, [r5, #40]	; 0x28
 801c466:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c468:	2800      	cmp	r0, #0
 801c46a:	d04c      	beq.n	801c506 <rcl_wait_set_resize+0x23a>
 801c46c:	4639      	mov	r1, r7
 801c46e:	47c0      	blx	r8
 801c470:	2300      	movs	r3, #0
 801c472:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c474:	4618      	mov	r0, r3
 801c476:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c47a:	b003      	add	sp, #12
 801c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c480:	6800      	ldr	r0, [r0, #0]
 801c482:	b120      	cbz	r0, 801c48e <rcl_wait_set_resize+0x1c2>
 801c484:	4651      	mov	r1, sl
 801c486:	47d8      	blx	fp
 801c488:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c48a:	f8c5 8000 	str.w	r8, [r5]
 801c48e:	68a0      	ldr	r0, [r4, #8]
 801c490:	2800      	cmp	r0, #0
 801c492:	f43f af5f 	beq.w	801c354 <rcl_wait_set_resize+0x88>
 801c496:	4651      	mov	r1, sl
 801c498:	47d8      	blx	fp
 801c49a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c49c:	2300      	movs	r3, #0
 801c49e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c4a2:	e757      	b.n	801c354 <rcl_wait_set_resize+0x88>
 801c4a4:	00b4      	lsls	r4, r6, #2
 801c4a6:	464a      	mov	r2, r9
 801c4a8:	68a8      	ldr	r0, [r5, #8]
 801c4aa:	4621      	mov	r1, r4
 801c4ac:	4798      	blx	r3
 801c4ae:	60a8      	str	r0, [r5, #8]
 801c4b0:	b340      	cbz	r0, 801c504 <rcl_wait_set_resize+0x238>
 801c4b2:	4622      	mov	r2, r4
 801c4b4:	4641      	mov	r1, r8
 801c4b6:	f004 fc05 	bl	8020cc4 <memset>
 801c4ba:	f04f 0800 	mov.w	r8, #0
 801c4be:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4c0:	60ee      	str	r6, [r5, #12]
 801c4c2:	19f6      	adds	r6, r6, r7
 801c4c4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c4c8:	f8c4 8010 	str.w	r8, [r4, #16]
 801c4cc:	f43f af5e 	beq.w	801c38c <rcl_wait_set_resize+0xc0>
 801c4d0:	00b6      	lsls	r6, r6, #2
 801c4d2:	464a      	mov	r2, r9
 801c4d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c4d6:	6960      	ldr	r0, [r4, #20]
 801c4d8:	4631      	mov	r1, r6
 801c4da:	4798      	blx	r3
 801c4dc:	4681      	mov	r9, r0
 801c4de:	6160      	str	r0, [r4, #20]
 801c4e0:	2800      	cmp	r0, #0
 801c4e2:	f000 8084 	beq.w	801c5ee <rcl_wait_set_resize+0x322>
 801c4e6:	4632      	mov	r2, r6
 801c4e8:	4641      	mov	r1, r8
 801c4ea:	f004 fbeb 	bl	8020cc4 <memset>
 801c4ee:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c4f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c4f4:	e753      	b.n	801c39e <rcl_wait_set_resize+0xd2>
 801c4f6:	009c      	lsls	r4, r3, #2
 801c4f8:	464a      	mov	r2, r9
 801c4fa:	69a8      	ldr	r0, [r5, #24]
 801c4fc:	4621      	mov	r1, r4
 801c4fe:	47c0      	blx	r8
 801c500:	61a8      	str	r0, [r5, #24]
 801c502:	bb40      	cbnz	r0, 801c556 <rcl_wait_set_resize+0x28a>
 801c504:	200a      	movs	r0, #10
 801c506:	b003      	add	sp, #12
 801c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c50c:	00bc      	lsls	r4, r7, #2
 801c50e:	464a      	mov	r2, r9
 801c510:	6928      	ldr	r0, [r5, #16]
 801c512:	4621      	mov	r1, r4
 801c514:	47c0      	blx	r8
 801c516:	6128      	str	r0, [r5, #16]
 801c518:	2800      	cmp	r0, #0
 801c51a:	d0f3      	beq.n	801c504 <rcl_wait_set_resize+0x238>
 801c51c:	4622      	mov	r2, r4
 801c51e:	4631      	mov	r1, r6
 801c520:	f004 fbd0 	bl	8020cc4 <memset>
 801c524:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c526:	616f      	str	r7, [r5, #20]
 801c528:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c52c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c530:	e747      	b.n	801c3c2 <rcl_wait_set_resize+0xf6>
 801c532:	6a28      	ldr	r0, [r5, #32]
 801c534:	b120      	cbz	r0, 801c540 <rcl_wait_set_resize+0x274>
 801c536:	4639      	mov	r1, r7
 801c538:	47c0      	blx	r8
 801c53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c53c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c53e:	622b      	str	r3, [r5, #32]
 801c540:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c542:	2800      	cmp	r0, #0
 801c544:	f43f af7e 	beq.w	801c444 <rcl_wait_set_resize+0x178>
 801c548:	4639      	mov	r1, r7
 801c54a:	47c0      	blx	r8
 801c54c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c54e:	2300      	movs	r3, #0
 801c550:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c554:	e776      	b.n	801c444 <rcl_wait_set_resize+0x178>
 801c556:	4622      	mov	r2, r4
 801c558:	4631      	mov	r1, r6
 801c55a:	f004 fbb3 	bl	8020cc4 <memset>
 801c55e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c562:	464a      	mov	r2, r9
 801c564:	6a38      	ldr	r0, [r7, #32]
 801c566:	4621      	mov	r1, r4
 801c568:	61eb      	str	r3, [r5, #28]
 801c56a:	61fe      	str	r6, [r7, #28]
 801c56c:	47c0      	blx	r8
 801c56e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c570:	6238      	str	r0, [r7, #32]
 801c572:	6a1f      	ldr	r7, [r3, #32]
 801c574:	2f00      	cmp	r7, #0
 801c576:	d04a      	beq.n	801c60e <rcl_wait_set_resize+0x342>
 801c578:	4622      	mov	r2, r4
 801c57a:	4631      	mov	r1, r6
 801c57c:	4638      	mov	r0, r7
 801c57e:	f004 fba1 	bl	8020cc4 <memset>
 801c582:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c584:	e733      	b.n	801c3ee <rcl_wait_set_resize+0x122>
 801c586:	009c      	lsls	r4, r3, #2
 801c588:	463a      	mov	r2, r7
 801c58a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c58c:	4621      	mov	r1, r4
 801c58e:	47c8      	blx	r9
 801c590:	62a8      	str	r0, [r5, #40]	; 0x28
 801c592:	2800      	cmp	r0, #0
 801c594:	d0b6      	beq.n	801c504 <rcl_wait_set_resize+0x238>
 801c596:	4622      	mov	r2, r4
 801c598:	4631      	mov	r1, r6
 801c59a:	f004 fb93 	bl	8020cc4 <memset>
 801c59e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c5a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c5a4:	463a      	mov	r2, r7
 801c5a6:	4621      	mov	r1, r4
 801c5a8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801c5ac:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c5ae:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801c5b2:	47c8      	blx	r9
 801c5b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c5b6:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801c5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d034      	beq.n	801c62a <rcl_wait_set_resize+0x35e>
 801c5c0:	4622      	mov	r2, r4
 801c5c2:	4631      	mov	r1, r6
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	f004 fb7d 	bl	8020cc4 <memset>
 801c5ca:	4630      	mov	r0, r6
 801c5cc:	b003      	add	sp, #12
 801c5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d2:	200b      	movs	r0, #11
 801c5d4:	4770      	bx	lr
 801c5d6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c5da:	e794      	b.n	801c506 <rcl_wait_set_resize+0x23a>
 801c5dc:	6828      	ldr	r0, [r5, #0]
 801c5de:	4651      	mov	r1, sl
 801c5e0:	9301      	str	r3, [sp, #4]
 801c5e2:	47d8      	blx	fp
 801c5e4:	9b01      	ldr	r3, [sp, #4]
 801c5e6:	200a      	movs	r0, #10
 801c5e8:	e9c5 3300 	strd	r3, r3, [r5]
 801c5ec:	e78b      	b.n	801c506 <rcl_wait_set_resize+0x23a>
 801c5ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c5f0:	68a8      	ldr	r0, [r5, #8]
 801c5f2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5f6:	4798      	blx	r3
 801c5f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c5fa:	6928      	ldr	r0, [r5, #16]
 801c5fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c5fe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c600:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c604:	4790      	blx	r2
 801c606:	200a      	movs	r0, #10
 801c608:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c60c:	e77b      	b.n	801c506 <rcl_wait_set_resize+0x23a>
 801c60e:	69a8      	ldr	r0, [r5, #24]
 801c610:	4649      	mov	r1, r9
 801c612:	47d0      	blx	sl
 801c614:	200a      	movs	r0, #10
 801c616:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c61a:	e774      	b.n	801c506 <rcl_wait_set_resize+0x23a>
 801c61c:	6a28      	ldr	r0, [r5, #32]
 801c61e:	4639      	mov	r1, r7
 801c620:	47c0      	blx	r8
 801c622:	200a      	movs	r0, #10
 801c624:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c628:	e76d      	b.n	801c506 <rcl_wait_set_resize+0x23a>
 801c62a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c62c:	4639      	mov	r1, r7
 801c62e:	9301      	str	r3, [sp, #4]
 801c630:	47c0      	blx	r8
 801c632:	9b01      	ldr	r3, [sp, #4]
 801c634:	200a      	movs	r0, #10
 801c636:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c63a:	e764      	b.n	801c506 <rcl_wait_set_resize+0x23a>

0801c63c <rcl_wait_set_init>:
 801c63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c640:	b085      	sub	sp, #20
 801c642:	4605      	mov	r5, r0
 801c644:	460e      	mov	r6, r1
 801c646:	4617      	mov	r7, r2
 801c648:	a812      	add	r0, sp, #72	; 0x48
 801c64a:	4698      	mov	r8, r3
 801c64c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801c650:	f7f8 fca8 	bl	8014fa4 <rcutils_allocator_is_valid>
 801c654:	2d00      	cmp	r5, #0
 801c656:	d072      	beq.n	801c73e <rcl_wait_set_init+0x102>
 801c658:	f080 0001 	eor.w	r0, r0, #1
 801c65c:	b2c0      	uxtb	r0, r0
 801c65e:	2800      	cmp	r0, #0
 801c660:	d16d      	bne.n	801c73e <rcl_wait_set_init+0x102>
 801c662:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c666:	f1ba 0f00 	cmp.w	sl, #0
 801c66a:	d004      	beq.n	801c676 <rcl_wait_set_init+0x3a>
 801c66c:	2464      	movs	r4, #100	; 0x64
 801c66e:	4620      	mov	r0, r4
 801c670:	b005      	add	sp, #20
 801c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c676:	f1b9 0f00 	cmp.w	r9, #0
 801c67a:	d060      	beq.n	801c73e <rcl_wait_set_init+0x102>
 801c67c:	4648      	mov	r0, r9
 801c67e:	f7fe fe8f 	bl	801b3a0 <rcl_context_is_valid>
 801c682:	2800      	cmp	r0, #0
 801c684:	d068      	beq.n	801c758 <rcl_wait_set_init+0x11c>
 801c686:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c688:	205c      	movs	r0, #92	; 0x5c
 801c68a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c68c:	4798      	blx	r3
 801c68e:	6328      	str	r0, [r5, #48]	; 0x30
 801c690:	2800      	cmp	r0, #0
 801c692:	d063      	beq.n	801c75c <rcl_wait_set_init+0x120>
 801c694:	225c      	movs	r2, #92	; 0x5c
 801c696:	4651      	mov	r1, sl
 801c698:	f004 fb14 	bl	8020cc4 <memset>
 801c69c:	ac12      	add	r4, sp, #72	; 0x48
 801c69e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801c6a2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c6a6:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801c6aa:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801c6ae:	eb03 0e02 	add.w	lr, r3, r2
 801c6b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6b4:	f8d9 9000 	ldr.w	r9, [r9]
 801c6b8:	449e      	add	lr, r3
 801c6ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c6bc:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801c6c0:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801c6c4:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801c6c8:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801c6cc:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801c6d0:	44be      	add	lr, r7
 801c6d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c6d6:	6823      	ldr	r3, [r4, #0]
 801c6d8:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801c6dc:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801c6e0:	f8cc 3000 	str.w	r3, [ip]
 801c6e4:	f001 fe6e 	bl	801e3c4 <rmw_create_wait_set>
 801c6e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c6ea:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801c6ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c6f0:	b350      	cbz	r0, 801c748 <rcl_wait_set_init+0x10c>
 801c6f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c6f4:	4643      	mov	r3, r8
 801c6f6:	463a      	mov	r2, r7
 801c6f8:	4631      	mov	r1, r6
 801c6fa:	9402      	str	r4, [sp, #8]
 801c6fc:	4628      	mov	r0, r5
 801c6fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c700:	9401      	str	r4, [sp, #4]
 801c702:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c704:	9400      	str	r4, [sp, #0]
 801c706:	f7ff fde1 	bl	801c2cc <rcl_wait_set_resize>
 801c70a:	4604      	mov	r4, r0
 801c70c:	2800      	cmp	r0, #0
 801c70e:	d0ae      	beq.n	801c66e <rcl_wait_set_init+0x32>
 801c710:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c712:	bb2b      	cbnz	r3, 801c760 <rcl_wait_set_init+0x124>
 801c714:	2600      	movs	r6, #0
 801c716:	4628      	mov	r0, r5
 801c718:	4633      	mov	r3, r6
 801c71a:	4632      	mov	r2, r6
 801c71c:	4631      	mov	r1, r6
 801c71e:	9600      	str	r6, [sp, #0]
 801c720:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801c724:	f7ff fdd2 	bl	801c2cc <rcl_wait_set_resize>
 801c728:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c72a:	2800      	cmp	r0, #0
 801c72c:	d09f      	beq.n	801c66e <rcl_wait_set_init+0x32>
 801c72e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801c730:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801c732:	4798      	blx	r3
 801c734:	4620      	mov	r0, r4
 801c736:	632e      	str	r6, [r5, #48]	; 0x30
 801c738:	b005      	add	sp, #20
 801c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c73e:	240b      	movs	r4, #11
 801c740:	4620      	mov	r0, r4
 801c742:	b005      	add	sp, #20
 801c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c748:	2401      	movs	r4, #1
 801c74a:	f001 fe45 	bl	801e3d8 <rmw_destroy_wait_set>
 801c74e:	2800      	cmp	r0, #0
 801c750:	bf18      	it	ne
 801c752:	f44f 7461 	movne.w	r4, #900	; 0x384
 801c756:	e7dd      	b.n	801c714 <rcl_wait_set_init+0xd8>
 801c758:	2465      	movs	r4, #101	; 0x65
 801c75a:	e788      	b.n	801c66e <rcl_wait_set_init+0x32>
 801c75c:	240a      	movs	r4, #10
 801c75e:	e786      	b.n	801c66e <rcl_wait_set_init+0x32>
 801c760:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c762:	e7f2      	b.n	801c74a <rcl_wait_set_init+0x10e>

0801c764 <rcl_wait_set_add_guard_condition>:
 801c764:	b318      	cbz	r0, 801c7ae <rcl_wait_set_add_guard_condition+0x4a>
 801c766:	b538      	push	{r3, r4, r5, lr}
 801c768:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c76a:	4604      	mov	r4, r0
 801c76c:	b30b      	cbz	r3, 801c7b2 <rcl_wait_set_add_guard_condition+0x4e>
 801c76e:	b319      	cbz	r1, 801c7b8 <rcl_wait_set_add_guard_condition+0x54>
 801c770:	68dd      	ldr	r5, [r3, #12]
 801c772:	68c0      	ldr	r0, [r0, #12]
 801c774:	4285      	cmp	r5, r0
 801c776:	d217      	bcs.n	801c7a8 <rcl_wait_set_add_guard_condition+0x44>
 801c778:	1c68      	adds	r0, r5, #1
 801c77a:	60d8      	str	r0, [r3, #12]
 801c77c:	68a3      	ldr	r3, [r4, #8]
 801c77e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c782:	b102      	cbz	r2, 801c786 <rcl_wait_set_add_guard_condition+0x22>
 801c784:	6015      	str	r5, [r2, #0]
 801c786:	4608      	mov	r0, r1
 801c788:	f7fe ff18 	bl	801b5bc <rcl_guard_condition_get_rmw_handle>
 801c78c:	b150      	cbz	r0, 801c7a4 <rcl_wait_set_add_guard_condition+0x40>
 801c78e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c790:	6842      	ldr	r2, [r0, #4]
 801c792:	2000      	movs	r0, #0
 801c794:	695b      	ldr	r3, [r3, #20]
 801c796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c79a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c79c:	6913      	ldr	r3, [r2, #16]
 801c79e:	3301      	adds	r3, #1
 801c7a0:	6113      	str	r3, [r2, #16]
 801c7a2:	bd38      	pop	{r3, r4, r5, pc}
 801c7a4:	2001      	movs	r0, #1
 801c7a6:	bd38      	pop	{r3, r4, r5, pc}
 801c7a8:	f240 3086 	movw	r0, #902	; 0x386
 801c7ac:	bd38      	pop	{r3, r4, r5, pc}
 801c7ae:	200b      	movs	r0, #11
 801c7b0:	4770      	bx	lr
 801c7b2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c7b6:	bd38      	pop	{r3, r4, r5, pc}
 801c7b8:	200b      	movs	r0, #11
 801c7ba:	bd38      	pop	{r3, r4, r5, pc}

0801c7bc <rcl_wait_set_add_timer>:
 801c7bc:	b328      	cbz	r0, 801c80a <rcl_wait_set_add_timer+0x4e>
 801c7be:	b538      	push	{r3, r4, r5, lr}
 801c7c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c7c2:	4604      	mov	r4, r0
 801c7c4:	b31b      	cbz	r3, 801c80e <rcl_wait_set_add_timer+0x52>
 801c7c6:	b329      	cbz	r1, 801c814 <rcl_wait_set_add_timer+0x58>
 801c7c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801c7ca:	6965      	ldr	r5, [r4, #20]
 801c7cc:	42a8      	cmp	r0, r5
 801c7ce:	d219      	bcs.n	801c804 <rcl_wait_set_add_timer+0x48>
 801c7d0:	1c45      	adds	r5, r0, #1
 801c7d2:	641d      	str	r5, [r3, #64]	; 0x40
 801c7d4:	6923      	ldr	r3, [r4, #16]
 801c7d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801c7da:	b102      	cbz	r2, 801c7de <rcl_wait_set_add_timer+0x22>
 801c7dc:	6010      	str	r0, [r2, #0]
 801c7de:	4608      	mov	r0, r1
 801c7e0:	f7ff fb9a 	bl	801bf18 <rcl_timer_get_guard_condition>
 801c7e4:	b168      	cbz	r0, 801c802 <rcl_wait_set_add_timer+0x46>
 801c7e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c7e8:	68e3      	ldr	r3, [r4, #12]
 801c7ea:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801c7ec:	3b01      	subs	r3, #1
 801c7ee:	441d      	add	r5, r3
 801c7f0:	f7fe fee4 	bl	801b5bc <rcl_guard_condition_get_rmw_handle>
 801c7f4:	b180      	cbz	r0, 801c818 <rcl_wait_set_add_timer+0x5c>
 801c7f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c7f8:	6842      	ldr	r2, [r0, #4]
 801c7fa:	2000      	movs	r0, #0
 801c7fc:	695b      	ldr	r3, [r3, #20]
 801c7fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c802:	bd38      	pop	{r3, r4, r5, pc}
 801c804:	f240 3086 	movw	r0, #902	; 0x386
 801c808:	bd38      	pop	{r3, r4, r5, pc}
 801c80a:	200b      	movs	r0, #11
 801c80c:	4770      	bx	lr
 801c80e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c812:	bd38      	pop	{r3, r4, r5, pc}
 801c814:	200b      	movs	r0, #11
 801c816:	bd38      	pop	{r3, r4, r5, pc}
 801c818:	2001      	movs	r0, #1
 801c81a:	bd38      	pop	{r3, r4, r5, pc}

0801c81c <rcl_wait_set_add_client>:
 801c81c:	b318      	cbz	r0, 801c866 <rcl_wait_set_add_client+0x4a>
 801c81e:	b538      	push	{r3, r4, r5, lr}
 801c820:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c822:	4604      	mov	r4, r0
 801c824:	b30b      	cbz	r3, 801c86a <rcl_wait_set_add_client+0x4e>
 801c826:	b319      	cbz	r1, 801c870 <rcl_wait_set_add_client+0x54>
 801c828:	699d      	ldr	r5, [r3, #24]
 801c82a:	69c0      	ldr	r0, [r0, #28]
 801c82c:	4285      	cmp	r5, r0
 801c82e:	d217      	bcs.n	801c860 <rcl_wait_set_add_client+0x44>
 801c830:	1c68      	adds	r0, r5, #1
 801c832:	6198      	str	r0, [r3, #24]
 801c834:	69a3      	ldr	r3, [r4, #24]
 801c836:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c83a:	b102      	cbz	r2, 801c83e <rcl_wait_set_add_client+0x22>
 801c83c:	6015      	str	r5, [r2, #0]
 801c83e:	4608      	mov	r0, r1
 801c840:	f7fe fd00 	bl	801b244 <rcl_client_get_rmw_handle>
 801c844:	b150      	cbz	r0, 801c85c <rcl_wait_set_add_client+0x40>
 801c846:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c848:	6842      	ldr	r2, [r0, #4]
 801c84a:	2000      	movs	r0, #0
 801c84c:	6a1b      	ldr	r3, [r3, #32]
 801c84e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c852:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c854:	69d3      	ldr	r3, [r2, #28]
 801c856:	3301      	adds	r3, #1
 801c858:	61d3      	str	r3, [r2, #28]
 801c85a:	bd38      	pop	{r3, r4, r5, pc}
 801c85c:	2001      	movs	r0, #1
 801c85e:	bd38      	pop	{r3, r4, r5, pc}
 801c860:	f240 3086 	movw	r0, #902	; 0x386
 801c864:	bd38      	pop	{r3, r4, r5, pc}
 801c866:	200b      	movs	r0, #11
 801c868:	4770      	bx	lr
 801c86a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c86e:	bd38      	pop	{r3, r4, r5, pc}
 801c870:	200b      	movs	r0, #11
 801c872:	bd38      	pop	{r3, r4, r5, pc}

0801c874 <rcl_wait_set_add_service>:
 801c874:	b318      	cbz	r0, 801c8be <rcl_wait_set_add_service+0x4a>
 801c876:	b538      	push	{r3, r4, r5, lr}
 801c878:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c87a:	4604      	mov	r4, r0
 801c87c:	b30b      	cbz	r3, 801c8c2 <rcl_wait_set_add_service+0x4e>
 801c87e:	b319      	cbz	r1, 801c8c8 <rcl_wait_set_add_service+0x54>
 801c880:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c882:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c884:	4285      	cmp	r5, r0
 801c886:	d217      	bcs.n	801c8b8 <rcl_wait_set_add_service+0x44>
 801c888:	1c68      	adds	r0, r5, #1
 801c88a:	6258      	str	r0, [r3, #36]	; 0x24
 801c88c:	6a23      	ldr	r3, [r4, #32]
 801c88e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c892:	b102      	cbz	r2, 801c896 <rcl_wait_set_add_service+0x22>
 801c894:	6015      	str	r5, [r2, #0]
 801c896:	4608      	mov	r0, r1
 801c898:	f7f7 f9fa 	bl	8013c90 <rcl_service_get_rmw_handle>
 801c89c:	b150      	cbz	r0, 801c8b4 <rcl_wait_set_add_service+0x40>
 801c89e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c8a0:	6842      	ldr	r2, [r0, #4]
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c8aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c8ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801c8ae:	3301      	adds	r3, #1
 801c8b0:	6293      	str	r3, [r2, #40]	; 0x28
 801c8b2:	bd38      	pop	{r3, r4, r5, pc}
 801c8b4:	2001      	movs	r0, #1
 801c8b6:	bd38      	pop	{r3, r4, r5, pc}
 801c8b8:	f240 3086 	movw	r0, #902	; 0x386
 801c8bc:	bd38      	pop	{r3, r4, r5, pc}
 801c8be:	200b      	movs	r0, #11
 801c8c0:	4770      	bx	lr
 801c8c2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c8c6:	bd38      	pop	{r3, r4, r5, pc}
 801c8c8:	200b      	movs	r0, #11
 801c8ca:	bd38      	pop	{r3, r4, r5, pc}
 801c8cc:	0000      	movs	r0, r0
	...

0801c8d0 <rcl_wait>:
 801c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d4:	ed2d 8b02 	vpush	{d8}
 801c8d8:	b08d      	sub	sp, #52	; 0x34
 801c8da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c8de:	2800      	cmp	r0, #0
 801c8e0:	f000 814f 	beq.w	801cb82 <rcl_wait+0x2b2>
 801c8e4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c8e6:	4605      	mov	r5, r0
 801c8e8:	2e00      	cmp	r6, #0
 801c8ea:	f000 811a 	beq.w	801cb22 <rcl_wait+0x252>
 801c8ee:	6843      	ldr	r3, [r0, #4]
 801c8f0:	b983      	cbnz	r3, 801c914 <rcl_wait+0x44>
 801c8f2:	68eb      	ldr	r3, [r5, #12]
 801c8f4:	b973      	cbnz	r3, 801c914 <rcl_wait+0x44>
 801c8f6:	696b      	ldr	r3, [r5, #20]
 801c8f8:	b963      	cbnz	r3, 801c914 <rcl_wait+0x44>
 801c8fa:	69eb      	ldr	r3, [r5, #28]
 801c8fc:	b953      	cbnz	r3, 801c914 <rcl_wait+0x44>
 801c8fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c900:	b943      	cbnz	r3, 801c914 <rcl_wait+0x44>
 801c902:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801c904:	b933      	cbnz	r3, 801c914 <rcl_wait+0x44>
 801c906:	f240 3085 	movw	r0, #901	; 0x385
 801c90a:	b00d      	add	sp, #52	; 0x34
 801c90c:	ecbd 8b02 	vpop	{d8}
 801c910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c914:	9b04      	ldr	r3, [sp, #16]
 801c916:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801c918:	2b01      	cmp	r3, #1
 801c91a:	9b05      	ldr	r3, [sp, #20]
 801c91c:	f173 0300 	sbcs.w	r3, r3, #0
 801c920:	f2c0 80f8 	blt.w	801cb14 <rcl_wait+0x244>
 801c924:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801c928:	2a00      	cmp	r2, #0
 801c92a:	f000 810f 	beq.w	801cb4c <rcl_wait+0x27c>
 801c92e:	2400      	movs	r4, #0
 801c930:	4613      	mov	r3, r2
 801c932:	f240 3921 	movw	r9, #801	; 0x321
 801c936:	4632      	mov	r2, r6
 801c938:	46a2      	mov	sl, r4
 801c93a:	46a3      	mov	fp, r4
 801c93c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801cba0 <rcl_wait+0x2d0>
 801c940:	e014      	b.n	801c96c <rcl_wait+0x9c>
 801c942:	2800      	cmp	r0, #0
 801c944:	d1e1      	bne.n	801c90a <rcl_wait+0x3a>
 801c946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c94a:	4542      	cmp	r2, r8
 801c94c:	eb73 0107 	sbcs.w	r1, r3, r7
 801c950:	da03      	bge.n	801c95a <rcl_wait+0x8a>
 801c952:	4690      	mov	r8, r2
 801c954:	461f      	mov	r7, r3
 801c956:	f04f 0b01 	mov.w	fp, #1
 801c95a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c95c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801c95e:	3401      	adds	r4, #1
 801c960:	f14a 0a00 	adc.w	sl, sl, #0
 801c964:	429c      	cmp	r4, r3
 801c966:	f17a 0100 	sbcs.w	r1, sl, #0
 801c96a:	d228      	bcs.n	801c9be <rcl_wait+0xee>
 801c96c:	6928      	ldr	r0, [r5, #16]
 801c96e:	a908      	add	r1, sp, #32
 801c970:	00a6      	lsls	r6, r4, #2
 801c972:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801c976:	2800      	cmp	r0, #0
 801c978:	d0f1      	beq.n	801c95e <rcl_wait+0x8e>
 801c97a:	68eb      	ldr	r3, [r5, #12]
 801c97c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801c980:	4423      	add	r3, r4
 801c982:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801c986:	f1be 0f00 	cmp.w	lr, #0
 801c98a:	d006      	beq.n	801c99a <rcl_wait+0xca>
 801c98c:	6913      	ldr	r3, [r2, #16]
 801c98e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801c992:	3301      	adds	r3, #1
 801c994:	6113      	str	r3, [r2, #16]
 801c996:	692b      	ldr	r3, [r5, #16]
 801c998:	5998      	ldr	r0, [r3, r6]
 801c99a:	ed8d 8b08 	vstr	d8, [sp, #32]
 801c99e:	f7ff fa89 	bl	801beb4 <rcl_timer_get_time_until_next_call>
 801c9a2:	4548      	cmp	r0, r9
 801c9a4:	d1cd      	bne.n	801c942 <rcl_wait+0x72>
 801c9a6:	692b      	ldr	r3, [r5, #16]
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	3401      	adds	r4, #1
 801c9ac:	519a      	str	r2, [r3, r6]
 801c9ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c9b0:	f14a 0a00 	adc.w	sl, sl, #0
 801c9b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801c9b6:	429c      	cmp	r4, r3
 801c9b8:	f17a 0100 	sbcs.w	r1, sl, #0
 801c9bc:	d3d6      	bcc.n	801c96c <rcl_wait+0x9c>
 801c9be:	4659      	mov	r1, fp
 801c9c0:	4616      	mov	r6, r2
 801c9c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c9c6:	4313      	orrs	r3, r2
 801c9c8:	f040 80b4 	bne.w	801cb34 <rcl_wait+0x264>
 801c9cc:	2300      	movs	r3, #0
 801c9ce:	2200      	movs	r2, #0
 801c9d0:	460c      	mov	r4, r1
 801c9d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c9d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c9da:	ab08      	add	r3, sp, #32
 801c9dc:	9302      	str	r3, [sp, #8]
 801c9de:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801c9e2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801c9e4:	f106 0110 	add.w	r1, r6, #16
 801c9e8:	9300      	str	r3, [sp, #0]
 801c9ea:	1d30      	adds	r0, r6, #4
 801c9ec:	f106 031c 	add.w	r3, r6, #28
 801c9f0:	9201      	str	r2, [sp, #4]
 801c9f2:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801c9f6:	f001 fb81 	bl	801e0fc <rmw_wait>
 801c9fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c9fc:	4680      	mov	r8, r0
 801c9fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ca00:	b1e2      	cbz	r2, 801ca3c <rcl_wait+0x16c>
 801ca02:	f04f 0900 	mov.w	r9, #0
 801ca06:	464f      	mov	r7, r9
 801ca08:	692a      	ldr	r2, [r5, #16]
 801ca0a:	f10d 011f 	add.w	r1, sp, #31
 801ca0e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801ca12:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801ca16:	b160      	cbz	r0, 801ca32 <rcl_wait+0x162>
 801ca18:	f88d 701f 	strb.w	r7, [sp, #31]
 801ca1c:	f7ff fa0e 	bl	801be3c <rcl_timer_is_ready>
 801ca20:	2800      	cmp	r0, #0
 801ca22:	f47f af72 	bne.w	801c90a <rcl_wait+0x3a>
 801ca26:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ca2a:	b90b      	cbnz	r3, 801ca30 <rcl_wait+0x160>
 801ca2c:	692a      	ldr	r2, [r5, #16]
 801ca2e:	5193      	str	r3, [r2, r6]
 801ca30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ca32:	f109 0901 	add.w	r9, r9, #1
 801ca36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ca38:	454a      	cmp	r2, r9
 801ca3a:	d8e5      	bhi.n	801ca08 <rcl_wait+0x138>
 801ca3c:	f038 0002 	bics.w	r0, r8, #2
 801ca40:	d176      	bne.n	801cb30 <rcl_wait+0x260>
 801ca42:	686f      	ldr	r7, [r5, #4]
 801ca44:	b17f      	cbz	r7, 801ca66 <rcl_wait+0x196>
 801ca46:	4602      	mov	r2, r0
 801ca48:	e002      	b.n	801ca50 <rcl_wait+0x180>
 801ca4a:	3201      	adds	r2, #1
 801ca4c:	42ba      	cmp	r2, r7
 801ca4e:	d00a      	beq.n	801ca66 <rcl_wait+0x196>
 801ca50:	6899      	ldr	r1, [r3, #8]
 801ca52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ca56:	2900      	cmp	r1, #0
 801ca58:	d1f7      	bne.n	801ca4a <rcl_wait+0x17a>
 801ca5a:	682e      	ldr	r6, [r5, #0]
 801ca5c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801ca60:	3201      	adds	r2, #1
 801ca62:	42ba      	cmp	r2, r7
 801ca64:	d1f4      	bne.n	801ca50 <rcl_wait+0x180>
 801ca66:	68ef      	ldr	r7, [r5, #12]
 801ca68:	b17f      	cbz	r7, 801ca8a <rcl_wait+0x1ba>
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	e002      	b.n	801ca74 <rcl_wait+0x1a4>
 801ca6e:	3201      	adds	r2, #1
 801ca70:	42ba      	cmp	r2, r7
 801ca72:	d00a      	beq.n	801ca8a <rcl_wait+0x1ba>
 801ca74:	6959      	ldr	r1, [r3, #20]
 801ca76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ca7a:	2900      	cmp	r1, #0
 801ca7c:	d1f7      	bne.n	801ca6e <rcl_wait+0x19e>
 801ca7e:	68ae      	ldr	r6, [r5, #8]
 801ca80:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801ca84:	3201      	adds	r2, #1
 801ca86:	42ba      	cmp	r2, r7
 801ca88:	d1f4      	bne.n	801ca74 <rcl_wait+0x1a4>
 801ca8a:	69ef      	ldr	r7, [r5, #28]
 801ca8c:	b17f      	cbz	r7, 801caae <rcl_wait+0x1de>
 801ca8e:	2200      	movs	r2, #0
 801ca90:	e002      	b.n	801ca98 <rcl_wait+0x1c8>
 801ca92:	3201      	adds	r2, #1
 801ca94:	42ba      	cmp	r2, r7
 801ca96:	d00a      	beq.n	801caae <rcl_wait+0x1de>
 801ca98:	6a19      	ldr	r1, [r3, #32]
 801ca9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ca9e:	2900      	cmp	r1, #0
 801caa0:	d1f7      	bne.n	801ca92 <rcl_wait+0x1c2>
 801caa2:	69ae      	ldr	r6, [r5, #24]
 801caa4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801caa8:	3201      	adds	r2, #1
 801caaa:	42ba      	cmp	r2, r7
 801caac:	d1f4      	bne.n	801ca98 <rcl_wait+0x1c8>
 801caae:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801cab0:	b17f      	cbz	r7, 801cad2 <rcl_wait+0x202>
 801cab2:	2200      	movs	r2, #0
 801cab4:	e002      	b.n	801cabc <rcl_wait+0x1ec>
 801cab6:	3201      	adds	r2, #1
 801cab8:	42ba      	cmp	r2, r7
 801caba:	d00a      	beq.n	801cad2 <rcl_wait+0x202>
 801cabc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cabe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cac2:	2900      	cmp	r1, #0
 801cac4:	d1f7      	bne.n	801cab6 <rcl_wait+0x1e6>
 801cac6:	6a2e      	ldr	r6, [r5, #32]
 801cac8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cacc:	3201      	adds	r2, #1
 801cace:	42ba      	cmp	r2, r7
 801cad0:	d1f4      	bne.n	801cabc <rcl_wait+0x1ec>
 801cad2:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801cad4:	b17f      	cbz	r7, 801caf6 <rcl_wait+0x226>
 801cad6:	2200      	movs	r2, #0
 801cad8:	e002      	b.n	801cae0 <rcl_wait+0x210>
 801cada:	3201      	adds	r2, #1
 801cadc:	42ba      	cmp	r2, r7
 801cade:	d00a      	beq.n	801caf6 <rcl_wait+0x226>
 801cae0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801cae2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cae6:	2900      	cmp	r1, #0
 801cae8:	d1f7      	bne.n	801cada <rcl_wait+0x20a>
 801caea:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801caec:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801caf0:	3201      	adds	r2, #1
 801caf2:	42ba      	cmp	r2, r7
 801caf4:	d1f4      	bne.n	801cae0 <rcl_wait+0x210>
 801caf6:	f1b8 0f02 	cmp.w	r8, #2
 801cafa:	f47f af06 	bne.w	801c90a <rcl_wait+0x3a>
 801cafe:	f084 0301 	eor.w	r3, r4, #1
 801cb02:	b2db      	uxtb	r3, r3
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	bf18      	it	ne
 801cb08:	2002      	movne	r0, #2
 801cb0a:	b00d      	add	sp, #52	; 0x34
 801cb0c:	ecbd 8b02 	vpop	{d8}
 801cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb14:	2a00      	cmp	r2, #0
 801cb16:	d03a      	beq.n	801cb8e <rcl_wait+0x2be>
 801cb18:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cb1c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cb20:	e705      	b.n	801c92e <rcl_wait+0x5e>
 801cb22:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cb26:	b00d      	add	sp, #52	; 0x34
 801cb28:	ecbd 8b02 	vpop	{d8}
 801cb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb30:	2001      	movs	r0, #1
 801cb32:	e6ea      	b.n	801c90a <rcl_wait+0x3a>
 801cb34:	9b04      	ldr	r3, [sp, #16]
 801cb36:	460c      	mov	r4, r1
 801cb38:	2b01      	cmp	r3, #1
 801cb3a:	9b05      	ldr	r3, [sp, #20]
 801cb3c:	f173 0300 	sbcs.w	r3, r3, #0
 801cb40:	bfa8      	it	ge
 801cb42:	f044 0401 	orrge.w	r4, r4, #1
 801cb46:	b914      	cbnz	r4, 801cb4e <rcl_wait+0x27e>
 801cb48:	4623      	mov	r3, r4
 801cb4a:	e747      	b.n	801c9dc <rcl_wait+0x10c>
 801cb4c:	4611      	mov	r1, r2
 801cb4e:	2f00      	cmp	r7, #0
 801cb50:	da02      	bge.n	801cb58 <rcl_wait+0x288>
 801cb52:	f04f 0800 	mov.w	r8, #0
 801cb56:	4647      	mov	r7, r8
 801cb58:	460c      	mov	r4, r1
 801cb5a:	4640      	mov	r0, r8
 801cb5c:	4639      	mov	r1, r7
 801cb5e:	a312      	add	r3, pc, #72	; (adr r3, 801cba8 <rcl_wait+0x2d8>)
 801cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb64:	f7e3 fd90 	bl	8000688 <__aeabi_ldivmod>
 801cb68:	a30f      	add	r3, pc, #60	; (adr r3, 801cba8 <rcl_wait+0x2d8>)
 801cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cb72:	4640      	mov	r0, r8
 801cb74:	4639      	mov	r1, r7
 801cb76:	f7e3 fd87 	bl	8000688 <__aeabi_ldivmod>
 801cb7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cb7e:	ab08      	add	r3, sp, #32
 801cb80:	e72c      	b.n	801c9dc <rcl_wait+0x10c>
 801cb82:	200b      	movs	r0, #11
 801cb84:	b00d      	add	sp, #52	; 0x34
 801cb86:	ecbd 8b02 	vpop	{d8}
 801cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb8e:	4611      	mov	r1, r2
 801cb90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cb94:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cb98:	e713      	b.n	801c9c2 <rcl_wait+0xf2>
 801cb9a:	bf00      	nop
 801cb9c:	f3af 8000 	nop.w
 801cba0:	ffffffff 	.word	0xffffffff
 801cba4:	7fffffff 	.word	0x7fffffff
 801cba8:	3b9aca00 	.word	0x3b9aca00
 801cbac:	00000000 	.word	0x00000000

0801cbb0 <rcl_action_take_goal_response>:
 801cbb0:	2800      	cmp	r0, #0
 801cbb2:	d039      	beq.n	801cc28 <rcl_action_take_goal_response+0x78>
 801cbb4:	b570      	push	{r4, r5, r6, lr}
 801cbb6:	4604      	mov	r4, r0
 801cbb8:	6800      	ldr	r0, [r0, #0]
 801cbba:	b380      	cbz	r0, 801cc1e <rcl_action_take_goal_response+0x6e>
 801cbbc:	460e      	mov	r6, r1
 801cbbe:	4615      	mov	r5, r2
 801cbc0:	f7fe fbc6 	bl	801b350 <rcl_client_is_valid>
 801cbc4:	b330      	cbz	r0, 801cc14 <rcl_action_take_goal_response+0x64>
 801cbc6:	6820      	ldr	r0, [r4, #0]
 801cbc8:	3004      	adds	r0, #4
 801cbca:	f7fe fbc1 	bl	801b350 <rcl_client_is_valid>
 801cbce:	b308      	cbz	r0, 801cc14 <rcl_action_take_goal_response+0x64>
 801cbd0:	6820      	ldr	r0, [r4, #0]
 801cbd2:	3008      	adds	r0, #8
 801cbd4:	f7fe fbbc 	bl	801b350 <rcl_client_is_valid>
 801cbd8:	b1e0      	cbz	r0, 801cc14 <rcl_action_take_goal_response+0x64>
 801cbda:	6820      	ldr	r0, [r4, #0]
 801cbdc:	300c      	adds	r0, #12
 801cbde:	f7f7 f9fd 	bl	8013fdc <rcl_subscription_is_valid>
 801cbe2:	b1b8      	cbz	r0, 801cc14 <rcl_action_take_goal_response+0x64>
 801cbe4:	6820      	ldr	r0, [r4, #0]
 801cbe6:	3010      	adds	r0, #16
 801cbe8:	f7f7 f9f8 	bl	8013fdc <rcl_subscription_is_valid>
 801cbec:	b190      	cbz	r0, 801cc14 <rcl_action_take_goal_response+0x64>
 801cbee:	b1cd      	cbz	r5, 801cc24 <rcl_action_take_goal_response+0x74>
 801cbf0:	b1c6      	cbz	r6, 801cc24 <rcl_action_take_goal_response+0x74>
 801cbf2:	462a      	mov	r2, r5
 801cbf4:	4631      	mov	r1, r6
 801cbf6:	6820      	ldr	r0, [r4, #0]
 801cbf8:	f7fe fb62 	bl	801b2c0 <rcl_take_response>
 801cbfc:	b148      	cbz	r0, 801cc12 <rcl_action_take_goal_response+0x62>
 801cbfe:	280a      	cmp	r0, #10
 801cc00:	d007      	beq.n	801cc12 <rcl_action_take_goal_response+0x62>
 801cc02:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cc06:	f640 0337 	movw	r3, #2103	; 0x837
 801cc0a:	4290      	cmp	r0, r2
 801cc0c:	bf0c      	ite	eq
 801cc0e:	4618      	moveq	r0, r3
 801cc10:	2001      	movne	r0, #1
 801cc12:	bd70      	pop	{r4, r5, r6, pc}
 801cc14:	f7f8 fa04 	bl	8015020 <rcutils_reset_error>
 801cc18:	f640 0036 	movw	r0, #2102	; 0x836
 801cc1c:	bd70      	pop	{r4, r5, r6, pc}
 801cc1e:	f640 0036 	movw	r0, #2102	; 0x836
 801cc22:	bd70      	pop	{r4, r5, r6, pc}
 801cc24:	200b      	movs	r0, #11
 801cc26:	bd70      	pop	{r4, r5, r6, pc}
 801cc28:	f640 0036 	movw	r0, #2102	; 0x836
 801cc2c:	4770      	bx	lr
 801cc2e:	bf00      	nop

0801cc30 <rcl_action_send_result_request>:
 801cc30:	b390      	cbz	r0, 801cc98 <rcl_action_send_result_request+0x68>
 801cc32:	b570      	push	{r4, r5, r6, lr}
 801cc34:	4604      	mov	r4, r0
 801cc36:	6800      	ldr	r0, [r0, #0]
 801cc38:	b348      	cbz	r0, 801cc8e <rcl_action_send_result_request+0x5e>
 801cc3a:	460e      	mov	r6, r1
 801cc3c:	4615      	mov	r5, r2
 801cc3e:	f7fe fb87 	bl	801b350 <rcl_client_is_valid>
 801cc42:	b1f8      	cbz	r0, 801cc84 <rcl_action_send_result_request+0x54>
 801cc44:	6820      	ldr	r0, [r4, #0]
 801cc46:	3004      	adds	r0, #4
 801cc48:	f7fe fb82 	bl	801b350 <rcl_client_is_valid>
 801cc4c:	b1d0      	cbz	r0, 801cc84 <rcl_action_send_result_request+0x54>
 801cc4e:	6820      	ldr	r0, [r4, #0]
 801cc50:	3008      	adds	r0, #8
 801cc52:	f7fe fb7d 	bl	801b350 <rcl_client_is_valid>
 801cc56:	b1a8      	cbz	r0, 801cc84 <rcl_action_send_result_request+0x54>
 801cc58:	6820      	ldr	r0, [r4, #0]
 801cc5a:	300c      	adds	r0, #12
 801cc5c:	f7f7 f9be 	bl	8013fdc <rcl_subscription_is_valid>
 801cc60:	b180      	cbz	r0, 801cc84 <rcl_action_send_result_request+0x54>
 801cc62:	6820      	ldr	r0, [r4, #0]
 801cc64:	3010      	adds	r0, #16
 801cc66:	f7f7 f9b9 	bl	8013fdc <rcl_subscription_is_valid>
 801cc6a:	b158      	cbz	r0, 801cc84 <rcl_action_send_result_request+0x54>
 801cc6c:	b195      	cbz	r5, 801cc94 <rcl_action_send_result_request+0x64>
 801cc6e:	b18e      	cbz	r6, 801cc94 <rcl_action_send_result_request+0x64>
 801cc70:	6820      	ldr	r0, [r4, #0]
 801cc72:	462a      	mov	r2, r5
 801cc74:	4631      	mov	r1, r6
 801cc76:	3008      	adds	r0, #8
 801cc78:	f7fe faea 	bl	801b250 <rcl_send_request>
 801cc7c:	3800      	subs	r0, #0
 801cc7e:	bf18      	it	ne
 801cc80:	2001      	movne	r0, #1
 801cc82:	bd70      	pop	{r4, r5, r6, pc}
 801cc84:	f7f8 f9cc 	bl	8015020 <rcutils_reset_error>
 801cc88:	f640 0036 	movw	r0, #2102	; 0x836
 801cc8c:	bd70      	pop	{r4, r5, r6, pc}
 801cc8e:	f640 0036 	movw	r0, #2102	; 0x836
 801cc92:	bd70      	pop	{r4, r5, r6, pc}
 801cc94:	200b      	movs	r0, #11
 801cc96:	bd70      	pop	{r4, r5, r6, pc}
 801cc98:	f640 0036 	movw	r0, #2102	; 0x836
 801cc9c:	4770      	bx	lr
 801cc9e:	bf00      	nop

0801cca0 <rcl_action_take_result_response>:
 801cca0:	2800      	cmp	r0, #0
 801cca2:	d03a      	beq.n	801cd1a <rcl_action_take_result_response+0x7a>
 801cca4:	b570      	push	{r4, r5, r6, lr}
 801cca6:	4604      	mov	r4, r0
 801cca8:	6800      	ldr	r0, [r0, #0]
 801ccaa:	b388      	cbz	r0, 801cd10 <rcl_action_take_result_response+0x70>
 801ccac:	460e      	mov	r6, r1
 801ccae:	4615      	mov	r5, r2
 801ccb0:	f7fe fb4e 	bl	801b350 <rcl_client_is_valid>
 801ccb4:	b338      	cbz	r0, 801cd06 <rcl_action_take_result_response+0x66>
 801ccb6:	6820      	ldr	r0, [r4, #0]
 801ccb8:	3004      	adds	r0, #4
 801ccba:	f7fe fb49 	bl	801b350 <rcl_client_is_valid>
 801ccbe:	b310      	cbz	r0, 801cd06 <rcl_action_take_result_response+0x66>
 801ccc0:	6820      	ldr	r0, [r4, #0]
 801ccc2:	3008      	adds	r0, #8
 801ccc4:	f7fe fb44 	bl	801b350 <rcl_client_is_valid>
 801ccc8:	b1e8      	cbz	r0, 801cd06 <rcl_action_take_result_response+0x66>
 801ccca:	6820      	ldr	r0, [r4, #0]
 801cccc:	300c      	adds	r0, #12
 801ccce:	f7f7 f985 	bl	8013fdc <rcl_subscription_is_valid>
 801ccd2:	b1c0      	cbz	r0, 801cd06 <rcl_action_take_result_response+0x66>
 801ccd4:	6820      	ldr	r0, [r4, #0]
 801ccd6:	3010      	adds	r0, #16
 801ccd8:	f7f7 f980 	bl	8013fdc <rcl_subscription_is_valid>
 801ccdc:	b198      	cbz	r0, 801cd06 <rcl_action_take_result_response+0x66>
 801ccde:	b1d5      	cbz	r5, 801cd16 <rcl_action_take_result_response+0x76>
 801cce0:	b1ce      	cbz	r6, 801cd16 <rcl_action_take_result_response+0x76>
 801cce2:	6820      	ldr	r0, [r4, #0]
 801cce4:	462a      	mov	r2, r5
 801cce6:	4631      	mov	r1, r6
 801cce8:	3008      	adds	r0, #8
 801ccea:	f7fe fae9 	bl	801b2c0 <rcl_take_response>
 801ccee:	b148      	cbz	r0, 801cd04 <rcl_action_take_result_response+0x64>
 801ccf0:	280a      	cmp	r0, #10
 801ccf2:	d007      	beq.n	801cd04 <rcl_action_take_result_response+0x64>
 801ccf4:	f240 12f5 	movw	r2, #501	; 0x1f5
 801ccf8:	f640 0337 	movw	r3, #2103	; 0x837
 801ccfc:	4290      	cmp	r0, r2
 801ccfe:	bf0c      	ite	eq
 801cd00:	4618      	moveq	r0, r3
 801cd02:	2001      	movne	r0, #1
 801cd04:	bd70      	pop	{r4, r5, r6, pc}
 801cd06:	f7f8 f98b 	bl	8015020 <rcutils_reset_error>
 801cd0a:	f640 0036 	movw	r0, #2102	; 0x836
 801cd0e:	bd70      	pop	{r4, r5, r6, pc}
 801cd10:	f640 0036 	movw	r0, #2102	; 0x836
 801cd14:	bd70      	pop	{r4, r5, r6, pc}
 801cd16:	200b      	movs	r0, #11
 801cd18:	bd70      	pop	{r4, r5, r6, pc}
 801cd1a:	f640 0036 	movw	r0, #2102	; 0x836
 801cd1e:	4770      	bx	lr

0801cd20 <rcl_action_take_cancel_response>:
 801cd20:	2800      	cmp	r0, #0
 801cd22:	d03a      	beq.n	801cd9a <rcl_action_take_cancel_response+0x7a>
 801cd24:	b570      	push	{r4, r5, r6, lr}
 801cd26:	4604      	mov	r4, r0
 801cd28:	6800      	ldr	r0, [r0, #0]
 801cd2a:	b388      	cbz	r0, 801cd90 <rcl_action_take_cancel_response+0x70>
 801cd2c:	460e      	mov	r6, r1
 801cd2e:	4615      	mov	r5, r2
 801cd30:	f7fe fb0e 	bl	801b350 <rcl_client_is_valid>
 801cd34:	b338      	cbz	r0, 801cd86 <rcl_action_take_cancel_response+0x66>
 801cd36:	6820      	ldr	r0, [r4, #0]
 801cd38:	3004      	adds	r0, #4
 801cd3a:	f7fe fb09 	bl	801b350 <rcl_client_is_valid>
 801cd3e:	b310      	cbz	r0, 801cd86 <rcl_action_take_cancel_response+0x66>
 801cd40:	6820      	ldr	r0, [r4, #0]
 801cd42:	3008      	adds	r0, #8
 801cd44:	f7fe fb04 	bl	801b350 <rcl_client_is_valid>
 801cd48:	b1e8      	cbz	r0, 801cd86 <rcl_action_take_cancel_response+0x66>
 801cd4a:	6820      	ldr	r0, [r4, #0]
 801cd4c:	300c      	adds	r0, #12
 801cd4e:	f7f7 f945 	bl	8013fdc <rcl_subscription_is_valid>
 801cd52:	b1c0      	cbz	r0, 801cd86 <rcl_action_take_cancel_response+0x66>
 801cd54:	6820      	ldr	r0, [r4, #0]
 801cd56:	3010      	adds	r0, #16
 801cd58:	f7f7 f940 	bl	8013fdc <rcl_subscription_is_valid>
 801cd5c:	b198      	cbz	r0, 801cd86 <rcl_action_take_cancel_response+0x66>
 801cd5e:	b1d5      	cbz	r5, 801cd96 <rcl_action_take_cancel_response+0x76>
 801cd60:	b1ce      	cbz	r6, 801cd96 <rcl_action_take_cancel_response+0x76>
 801cd62:	6820      	ldr	r0, [r4, #0]
 801cd64:	462a      	mov	r2, r5
 801cd66:	4631      	mov	r1, r6
 801cd68:	3004      	adds	r0, #4
 801cd6a:	f7fe faa9 	bl	801b2c0 <rcl_take_response>
 801cd6e:	b148      	cbz	r0, 801cd84 <rcl_action_take_cancel_response+0x64>
 801cd70:	280a      	cmp	r0, #10
 801cd72:	d007      	beq.n	801cd84 <rcl_action_take_cancel_response+0x64>
 801cd74:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cd78:	f640 0337 	movw	r3, #2103	; 0x837
 801cd7c:	4290      	cmp	r0, r2
 801cd7e:	bf0c      	ite	eq
 801cd80:	4618      	moveq	r0, r3
 801cd82:	2001      	movne	r0, #1
 801cd84:	bd70      	pop	{r4, r5, r6, pc}
 801cd86:	f7f8 f94b 	bl	8015020 <rcutils_reset_error>
 801cd8a:	f640 0036 	movw	r0, #2102	; 0x836
 801cd8e:	bd70      	pop	{r4, r5, r6, pc}
 801cd90:	f640 0036 	movw	r0, #2102	; 0x836
 801cd94:	bd70      	pop	{r4, r5, r6, pc}
 801cd96:	200b      	movs	r0, #11
 801cd98:	bd70      	pop	{r4, r5, r6, pc}
 801cd9a:	f640 0036 	movw	r0, #2102	; 0x836
 801cd9e:	4770      	bx	lr

0801cda0 <rcl_action_take_feedback>:
 801cda0:	2800      	cmp	r0, #0
 801cda2:	d038      	beq.n	801ce16 <rcl_action_take_feedback+0x76>
 801cda4:	b530      	push	{r4, r5, lr}
 801cda6:	4604      	mov	r4, r0
 801cda8:	6800      	ldr	r0, [r0, #0]
 801cdaa:	b091      	sub	sp, #68	; 0x44
 801cdac:	b378      	cbz	r0, 801ce0e <rcl_action_take_feedback+0x6e>
 801cdae:	460d      	mov	r5, r1
 801cdb0:	f7fe face 	bl	801b350 <rcl_client_is_valid>
 801cdb4:	b328      	cbz	r0, 801ce02 <rcl_action_take_feedback+0x62>
 801cdb6:	6820      	ldr	r0, [r4, #0]
 801cdb8:	3004      	adds	r0, #4
 801cdba:	f7fe fac9 	bl	801b350 <rcl_client_is_valid>
 801cdbe:	b300      	cbz	r0, 801ce02 <rcl_action_take_feedback+0x62>
 801cdc0:	6820      	ldr	r0, [r4, #0]
 801cdc2:	3008      	adds	r0, #8
 801cdc4:	f7fe fac4 	bl	801b350 <rcl_client_is_valid>
 801cdc8:	b1d8      	cbz	r0, 801ce02 <rcl_action_take_feedback+0x62>
 801cdca:	6820      	ldr	r0, [r4, #0]
 801cdcc:	300c      	adds	r0, #12
 801cdce:	f7f7 f905 	bl	8013fdc <rcl_subscription_is_valid>
 801cdd2:	b1b0      	cbz	r0, 801ce02 <rcl_action_take_feedback+0x62>
 801cdd4:	6820      	ldr	r0, [r4, #0]
 801cdd6:	3010      	adds	r0, #16
 801cdd8:	f7f7 f900 	bl	8013fdc <rcl_subscription_is_valid>
 801cddc:	b188      	cbz	r0, 801ce02 <rcl_action_take_feedback+0x62>
 801cdde:	b1ed      	cbz	r5, 801ce1c <rcl_action_take_feedback+0x7c>
 801cde0:	6820      	ldr	r0, [r4, #0]
 801cde2:	2300      	movs	r3, #0
 801cde4:	466a      	mov	r2, sp
 801cde6:	4629      	mov	r1, r5
 801cde8:	300c      	adds	r0, #12
 801cdea:	f7f7 f89b 	bl	8013f24 <rcl_take>
 801cdee:	b160      	cbz	r0, 801ce0a <rcl_action_take_feedback+0x6a>
 801cdf0:	f240 1391 	movw	r3, #401	; 0x191
 801cdf4:	4298      	cmp	r0, r3
 801cdf6:	d014      	beq.n	801ce22 <rcl_action_take_feedback+0x82>
 801cdf8:	280a      	cmp	r0, #10
 801cdfa:	bf18      	it	ne
 801cdfc:	2001      	movne	r0, #1
 801cdfe:	b011      	add	sp, #68	; 0x44
 801ce00:	bd30      	pop	{r4, r5, pc}
 801ce02:	f7f8 f90d 	bl	8015020 <rcutils_reset_error>
 801ce06:	f640 0036 	movw	r0, #2102	; 0x836
 801ce0a:	b011      	add	sp, #68	; 0x44
 801ce0c:	bd30      	pop	{r4, r5, pc}
 801ce0e:	f640 0036 	movw	r0, #2102	; 0x836
 801ce12:	b011      	add	sp, #68	; 0x44
 801ce14:	bd30      	pop	{r4, r5, pc}
 801ce16:	f640 0036 	movw	r0, #2102	; 0x836
 801ce1a:	4770      	bx	lr
 801ce1c:	200b      	movs	r0, #11
 801ce1e:	b011      	add	sp, #68	; 0x44
 801ce20:	bd30      	pop	{r4, r5, pc}
 801ce22:	f640 0037 	movw	r0, #2103	; 0x837
 801ce26:	e7f0      	b.n	801ce0a <rcl_action_take_feedback+0x6a>

0801ce28 <rcl_action_wait_set_add_action_client>:
 801ce28:	2800      	cmp	r0, #0
 801ce2a:	d048      	beq.n	801cebe <rcl_action_wait_set_add_action_client+0x96>
 801ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce2e:	460c      	mov	r4, r1
 801ce30:	2900      	cmp	r1, #0
 801ce32:	d03c      	beq.n	801ceae <rcl_action_wait_set_add_action_client+0x86>
 801ce34:	4605      	mov	r5, r0
 801ce36:	6808      	ldr	r0, [r1, #0]
 801ce38:	2800      	cmp	r0, #0
 801ce3a:	d038      	beq.n	801ceae <rcl_action_wait_set_add_action_client+0x86>
 801ce3c:	4617      	mov	r7, r2
 801ce3e:	461e      	mov	r6, r3
 801ce40:	f7fe fa86 	bl	801b350 <rcl_client_is_valid>
 801ce44:	b3b0      	cbz	r0, 801ceb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ce46:	6820      	ldr	r0, [r4, #0]
 801ce48:	3004      	adds	r0, #4
 801ce4a:	f7fe fa81 	bl	801b350 <rcl_client_is_valid>
 801ce4e:	b388      	cbz	r0, 801ceb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ce50:	6820      	ldr	r0, [r4, #0]
 801ce52:	3008      	adds	r0, #8
 801ce54:	f7fe fa7c 	bl	801b350 <rcl_client_is_valid>
 801ce58:	b360      	cbz	r0, 801ceb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ce5a:	6820      	ldr	r0, [r4, #0]
 801ce5c:	300c      	adds	r0, #12
 801ce5e:	f7f7 f8bd 	bl	8013fdc <rcl_subscription_is_valid>
 801ce62:	b338      	cbz	r0, 801ceb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ce64:	6820      	ldr	r0, [r4, #0]
 801ce66:	3010      	adds	r0, #16
 801ce68:	f7f7 f8b8 	bl	8013fdc <rcl_subscription_is_valid>
 801ce6c:	b310      	cbz	r0, 801ceb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ce6e:	6821      	ldr	r1, [r4, #0]
 801ce70:	4628      	mov	r0, r5
 801ce72:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801ce76:	f7ff fcd1 	bl	801c81c <rcl_wait_set_add_client>
 801ce7a:	b9b8      	cbnz	r0, 801ceac <rcl_action_wait_set_add_action_client+0x84>
 801ce7c:	6821      	ldr	r1, [r4, #0]
 801ce7e:	4628      	mov	r0, r5
 801ce80:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801ce84:	3104      	adds	r1, #4
 801ce86:	f7ff fcc9 	bl	801c81c <rcl_wait_set_add_client>
 801ce8a:	b978      	cbnz	r0, 801ceac <rcl_action_wait_set_add_action_client+0x84>
 801ce8c:	6821      	ldr	r1, [r4, #0]
 801ce8e:	4628      	mov	r0, r5
 801ce90:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801ce94:	3108      	adds	r1, #8
 801ce96:	f7ff fcc1 	bl	801c81c <rcl_wait_set_add_client>
 801ce9a:	b938      	cbnz	r0, 801ceac <rcl_action_wait_set_add_action_client+0x84>
 801ce9c:	6821      	ldr	r1, [r4, #0]
 801ce9e:	4628      	mov	r0, r5
 801cea0:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801cea4:	310c      	adds	r1, #12
 801cea6:	f7ff f969 	bl	801c17c <rcl_wait_set_add_subscription>
 801ceaa:	b158      	cbz	r0, 801cec4 <rcl_action_wait_set_add_action_client+0x9c>
 801ceac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ceae:	f640 0036 	movw	r0, #2102	; 0x836
 801ceb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ceb4:	f7f8 f8b4 	bl	8015020 <rcutils_reset_error>
 801ceb8:	f640 0036 	movw	r0, #2102	; 0x836
 801cebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cebe:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cec2:	4770      	bx	lr
 801cec4:	6821      	ldr	r1, [r4, #0]
 801cec6:	4628      	mov	r0, r5
 801cec8:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801cecc:	3110      	adds	r1, #16
 801cece:	f7ff f955 	bl	801c17c <rcl_wait_set_add_subscription>
 801ced2:	2800      	cmp	r0, #0
 801ced4:	d1ea      	bne.n	801ceac <rcl_action_wait_set_add_action_client+0x84>
 801ced6:	b11f      	cbz	r7, 801cee0 <rcl_action_wait_set_add_action_client+0xb8>
 801ced8:	6823      	ldr	r3, [r4, #0]
 801ceda:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801cede:	603b      	str	r3, [r7, #0]
 801cee0:	2e00      	cmp	r6, #0
 801cee2:	d0e3      	beq.n	801ceac <rcl_action_wait_set_add_action_client+0x84>
 801cee4:	6823      	ldr	r3, [r4, #0]
 801cee6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801ceea:	6033      	str	r3, [r6, #0]
 801ceec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ceee:	bf00      	nop

0801cef0 <rcl_action_client_wait_set_get_entities_ready>:
 801cef0:	2800      	cmp	r0, #0
 801cef2:	d050      	beq.n	801cf96 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801cef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cef8:	460c      	mov	r4, r1
 801cefa:	2900      	cmp	r1, #0
 801cefc:	d03e      	beq.n	801cf7c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cefe:	4605      	mov	r5, r0
 801cf00:	6808      	ldr	r0, [r1, #0]
 801cf02:	2800      	cmp	r0, #0
 801cf04:	d03a      	beq.n	801cf7c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cf06:	4616      	mov	r6, r2
 801cf08:	461f      	mov	r7, r3
 801cf0a:	f7fe fa21 	bl	801b350 <rcl_client_is_valid>
 801cf0e:	2800      	cmp	r0, #0
 801cf10:	d038      	beq.n	801cf84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf12:	6820      	ldr	r0, [r4, #0]
 801cf14:	3004      	adds	r0, #4
 801cf16:	f7fe fa1b 	bl	801b350 <rcl_client_is_valid>
 801cf1a:	2800      	cmp	r0, #0
 801cf1c:	d032      	beq.n	801cf84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf1e:	6820      	ldr	r0, [r4, #0]
 801cf20:	3008      	adds	r0, #8
 801cf22:	f7fe fa15 	bl	801b350 <rcl_client_is_valid>
 801cf26:	b368      	cbz	r0, 801cf84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf28:	6820      	ldr	r0, [r4, #0]
 801cf2a:	300c      	adds	r0, #12
 801cf2c:	f7f7 f856 	bl	8013fdc <rcl_subscription_is_valid>
 801cf30:	b340      	cbz	r0, 801cf84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf32:	6820      	ldr	r0, [r4, #0]
 801cf34:	3010      	adds	r0, #16
 801cf36:	f7f7 f851 	bl	8013fdc <rcl_subscription_is_valid>
 801cf3a:	b318      	cbz	r0, 801cf84 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cf3c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cf40:	2a00      	cmp	r2, #0
 801cf42:	bf18      	it	ne
 801cf44:	2b00      	cmpne	r3, #0
 801cf46:	9b08      	ldr	r3, [sp, #32]
 801cf48:	bf0c      	ite	eq
 801cf4a:	2101      	moveq	r1, #1
 801cf4c:	2100      	movne	r1, #0
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	bf08      	it	eq
 801cf52:	f041 0101 	orreq.w	r1, r1, #1
 801cf56:	2f00      	cmp	r7, #0
 801cf58:	bf08      	it	eq
 801cf5a:	f041 0101 	orreq.w	r1, r1, #1
 801cf5e:	b9b9      	cbnz	r1, 801cf90 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801cf60:	b1b6      	cbz	r6, 801cf90 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801cf62:	6823      	ldr	r3, [r4, #0]
 801cf64:	686c      	ldr	r4, [r5, #4]
 801cf66:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801cf6a:	428a      	cmp	r2, r1
 801cf6c:	4610      	mov	r0, r2
 801cf6e:	bf38      	it	cc
 801cf70:	4608      	movcc	r0, r1
 801cf72:	4284      	cmp	r4, r0
 801cf74:	d812      	bhi.n	801cf9c <rcl_action_client_wait_set_get_entities_ready+0xac>
 801cf76:	2001      	movs	r0, #1
 801cf78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf7c:	f640 0036 	movw	r0, #2102	; 0x836
 801cf80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf84:	f7f8 f84c 	bl	8015020 <rcutils_reset_error>
 801cf88:	f640 0036 	movw	r0, #2102	; 0x836
 801cf8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf90:	200b      	movs	r0, #11
 801cf92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf96:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cf9a:	4770      	bx	lr
 801cf9c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801cfa0:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801cfa4:	45f0      	cmp	r8, lr
 801cfa6:	4640      	mov	r0, r8
 801cfa8:	69ec      	ldr	r4, [r5, #28]
 801cfaa:	bf38      	it	cc
 801cfac:	4670      	movcc	r0, lr
 801cfae:	4560      	cmp	r0, ip
 801cfb0:	bf38      	it	cc
 801cfb2:	4660      	movcc	r0, ip
 801cfb4:	4284      	cmp	r4, r0
 801cfb6:	d9de      	bls.n	801cf76 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801cfb8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801cfbc:	682d      	ldr	r5, [r5, #0]
 801cfbe:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801cfc2:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801cfc6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801cfca:	1a18      	subs	r0, r3, r0
 801cfcc:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801cfd0:	f103 0c0c 	add.w	ip, r3, #12
 801cfd4:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801cfd8:	fab0 f080 	clz	r0, r0
 801cfdc:	eba5 050c 	sub.w	r5, r5, ip
 801cfe0:	0940      	lsrs	r0, r0, #5
 801cfe2:	fab5 f585 	clz	r5, r5
 801cfe6:	096d      	lsrs	r5, r5, #5
 801cfe8:	7035      	strb	r5, [r6, #0]
 801cfea:	f103 0510 	add.w	r5, r3, #16
 801cfee:	1b64      	subs	r4, r4, r5
 801cff0:	9d08      	ldr	r5, [sp, #32]
 801cff2:	fab4 f484 	clz	r4, r4
 801cff6:	0964      	lsrs	r4, r4, #5
 801cff8:	703c      	strb	r4, [r7, #0]
 801cffa:	1d1c      	adds	r4, r3, #4
 801cffc:	3308      	adds	r3, #8
 801cffe:	7028      	strb	r0, [r5, #0]
 801d000:	1b09      	subs	r1, r1, r4
 801d002:	2000      	movs	r0, #0
 801d004:	1ad3      	subs	r3, r2, r3
 801d006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d008:	fab1 f181 	clz	r1, r1
 801d00c:	fab3 f383 	clz	r3, r3
 801d010:	0949      	lsrs	r1, r1, #5
 801d012:	095b      	lsrs	r3, r3, #5
 801d014:	7011      	strb	r1, [r2, #0]
 801d016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d018:	7013      	strb	r3, [r2, #0]
 801d01a:	e7b1      	b.n	801cf80 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d01c <rcl_action_take_goal_request>:
 801d01c:	2800      	cmp	r0, #0
 801d01e:	d039      	beq.n	801d094 <rcl_action_take_goal_request+0x78>
 801d020:	b570      	push	{r4, r5, r6, lr}
 801d022:	4604      	mov	r4, r0
 801d024:	6800      	ldr	r0, [r0, #0]
 801d026:	b380      	cbz	r0, 801d08a <rcl_action_take_goal_request+0x6e>
 801d028:	460e      	mov	r6, r1
 801d02a:	4615      	mov	r5, r2
 801d02c:	f7f6 fe8e 	bl	8013d4c <rcl_service_is_valid>
 801d030:	b330      	cbz	r0, 801d080 <rcl_action_take_goal_request+0x64>
 801d032:	6820      	ldr	r0, [r4, #0]
 801d034:	3004      	adds	r0, #4
 801d036:	f7f6 fe89 	bl	8013d4c <rcl_service_is_valid>
 801d03a:	b308      	cbz	r0, 801d080 <rcl_action_take_goal_request+0x64>
 801d03c:	6820      	ldr	r0, [r4, #0]
 801d03e:	3008      	adds	r0, #8
 801d040:	f7f6 fe84 	bl	8013d4c <rcl_service_is_valid>
 801d044:	b1e0      	cbz	r0, 801d080 <rcl_action_take_goal_request+0x64>
 801d046:	6820      	ldr	r0, [r4, #0]
 801d048:	300c      	adds	r0, #12
 801d04a:	f7f6 fd43 	bl	8013ad4 <rcl_publisher_is_valid>
 801d04e:	b1b8      	cbz	r0, 801d080 <rcl_action_take_goal_request+0x64>
 801d050:	6820      	ldr	r0, [r4, #0]
 801d052:	3010      	adds	r0, #16
 801d054:	f7f6 fd3e 	bl	8013ad4 <rcl_publisher_is_valid>
 801d058:	b190      	cbz	r0, 801d080 <rcl_action_take_goal_request+0x64>
 801d05a:	b1cd      	cbz	r5, 801d090 <rcl_action_take_goal_request+0x74>
 801d05c:	b1c6      	cbz	r6, 801d090 <rcl_action_take_goal_request+0x74>
 801d05e:	462a      	mov	r2, r5
 801d060:	4631      	mov	r1, r6
 801d062:	6820      	ldr	r0, [r4, #0]
 801d064:	f7f6 fe1a 	bl	8013c9c <rcl_take_request>
 801d068:	b148      	cbz	r0, 801d07e <rcl_action_take_goal_request+0x62>
 801d06a:	280a      	cmp	r0, #10
 801d06c:	d007      	beq.n	801d07e <rcl_action_take_goal_request+0x62>
 801d06e:	f240 2259 	movw	r2, #601	; 0x259
 801d072:	f640 0399 	movw	r3, #2201	; 0x899
 801d076:	4290      	cmp	r0, r2
 801d078:	bf0c      	ite	eq
 801d07a:	4618      	moveq	r0, r3
 801d07c:	2001      	movne	r0, #1
 801d07e:	bd70      	pop	{r4, r5, r6, pc}
 801d080:	f7f7 ffce 	bl	8015020 <rcutils_reset_error>
 801d084:	f640 0098 	movw	r0, #2200	; 0x898
 801d088:	bd70      	pop	{r4, r5, r6, pc}
 801d08a:	f640 0098 	movw	r0, #2200	; 0x898
 801d08e:	bd70      	pop	{r4, r5, r6, pc}
 801d090:	200b      	movs	r0, #11
 801d092:	bd70      	pop	{r4, r5, r6, pc}
 801d094:	f640 0098 	movw	r0, #2200	; 0x898
 801d098:	4770      	bx	lr
 801d09a:	bf00      	nop

0801d09c <rcl_action_send_goal_response>:
 801d09c:	b388      	cbz	r0, 801d102 <rcl_action_send_goal_response+0x66>
 801d09e:	b570      	push	{r4, r5, r6, lr}
 801d0a0:	4604      	mov	r4, r0
 801d0a2:	6800      	ldr	r0, [r0, #0]
 801d0a4:	b340      	cbz	r0, 801d0f8 <rcl_action_send_goal_response+0x5c>
 801d0a6:	460e      	mov	r6, r1
 801d0a8:	4615      	mov	r5, r2
 801d0aa:	f7f6 fe4f 	bl	8013d4c <rcl_service_is_valid>
 801d0ae:	b1f0      	cbz	r0, 801d0ee <rcl_action_send_goal_response+0x52>
 801d0b0:	6820      	ldr	r0, [r4, #0]
 801d0b2:	3004      	adds	r0, #4
 801d0b4:	f7f6 fe4a 	bl	8013d4c <rcl_service_is_valid>
 801d0b8:	b1c8      	cbz	r0, 801d0ee <rcl_action_send_goal_response+0x52>
 801d0ba:	6820      	ldr	r0, [r4, #0]
 801d0bc:	3008      	adds	r0, #8
 801d0be:	f7f6 fe45 	bl	8013d4c <rcl_service_is_valid>
 801d0c2:	b1a0      	cbz	r0, 801d0ee <rcl_action_send_goal_response+0x52>
 801d0c4:	6820      	ldr	r0, [r4, #0]
 801d0c6:	300c      	adds	r0, #12
 801d0c8:	f7f6 fd04 	bl	8013ad4 <rcl_publisher_is_valid>
 801d0cc:	b178      	cbz	r0, 801d0ee <rcl_action_send_goal_response+0x52>
 801d0ce:	6820      	ldr	r0, [r4, #0]
 801d0d0:	3010      	adds	r0, #16
 801d0d2:	f7f6 fcff 	bl	8013ad4 <rcl_publisher_is_valid>
 801d0d6:	b150      	cbz	r0, 801d0ee <rcl_action_send_goal_response+0x52>
 801d0d8:	b18d      	cbz	r5, 801d0fe <rcl_action_send_goal_response+0x62>
 801d0da:	b186      	cbz	r6, 801d0fe <rcl_action_send_goal_response+0x62>
 801d0dc:	462a      	mov	r2, r5
 801d0de:	4631      	mov	r1, r6
 801d0e0:	6820      	ldr	r0, [r4, #0]
 801d0e2:	f7f6 fe1b 	bl	8013d1c <rcl_send_response>
 801d0e6:	3800      	subs	r0, #0
 801d0e8:	bf18      	it	ne
 801d0ea:	2001      	movne	r0, #1
 801d0ec:	bd70      	pop	{r4, r5, r6, pc}
 801d0ee:	f7f7 ff97 	bl	8015020 <rcutils_reset_error>
 801d0f2:	f640 0098 	movw	r0, #2200	; 0x898
 801d0f6:	bd70      	pop	{r4, r5, r6, pc}
 801d0f8:	f640 0098 	movw	r0, #2200	; 0x898
 801d0fc:	bd70      	pop	{r4, r5, r6, pc}
 801d0fe:	200b      	movs	r0, #11
 801d100:	bd70      	pop	{r4, r5, r6, pc}
 801d102:	f640 0098 	movw	r0, #2200	; 0x898
 801d106:	4770      	bx	lr

0801d108 <rcl_action_take_result_request>:
 801d108:	2800      	cmp	r0, #0
 801d10a:	d03a      	beq.n	801d182 <rcl_action_take_result_request+0x7a>
 801d10c:	b570      	push	{r4, r5, r6, lr}
 801d10e:	4604      	mov	r4, r0
 801d110:	6800      	ldr	r0, [r0, #0]
 801d112:	b388      	cbz	r0, 801d178 <rcl_action_take_result_request+0x70>
 801d114:	460e      	mov	r6, r1
 801d116:	4615      	mov	r5, r2
 801d118:	f7f6 fe18 	bl	8013d4c <rcl_service_is_valid>
 801d11c:	b338      	cbz	r0, 801d16e <rcl_action_take_result_request+0x66>
 801d11e:	6820      	ldr	r0, [r4, #0]
 801d120:	3004      	adds	r0, #4
 801d122:	f7f6 fe13 	bl	8013d4c <rcl_service_is_valid>
 801d126:	b310      	cbz	r0, 801d16e <rcl_action_take_result_request+0x66>
 801d128:	6820      	ldr	r0, [r4, #0]
 801d12a:	3008      	adds	r0, #8
 801d12c:	f7f6 fe0e 	bl	8013d4c <rcl_service_is_valid>
 801d130:	b1e8      	cbz	r0, 801d16e <rcl_action_take_result_request+0x66>
 801d132:	6820      	ldr	r0, [r4, #0]
 801d134:	300c      	adds	r0, #12
 801d136:	f7f6 fccd 	bl	8013ad4 <rcl_publisher_is_valid>
 801d13a:	b1c0      	cbz	r0, 801d16e <rcl_action_take_result_request+0x66>
 801d13c:	6820      	ldr	r0, [r4, #0]
 801d13e:	3010      	adds	r0, #16
 801d140:	f7f6 fcc8 	bl	8013ad4 <rcl_publisher_is_valid>
 801d144:	b198      	cbz	r0, 801d16e <rcl_action_take_result_request+0x66>
 801d146:	b1d5      	cbz	r5, 801d17e <rcl_action_take_result_request+0x76>
 801d148:	b1ce      	cbz	r6, 801d17e <rcl_action_take_result_request+0x76>
 801d14a:	6820      	ldr	r0, [r4, #0]
 801d14c:	462a      	mov	r2, r5
 801d14e:	4631      	mov	r1, r6
 801d150:	3008      	adds	r0, #8
 801d152:	f7f6 fda3 	bl	8013c9c <rcl_take_request>
 801d156:	b148      	cbz	r0, 801d16c <rcl_action_take_result_request+0x64>
 801d158:	280a      	cmp	r0, #10
 801d15a:	d007      	beq.n	801d16c <rcl_action_take_result_request+0x64>
 801d15c:	f240 2259 	movw	r2, #601	; 0x259
 801d160:	f640 0399 	movw	r3, #2201	; 0x899
 801d164:	4290      	cmp	r0, r2
 801d166:	bf0c      	ite	eq
 801d168:	4618      	moveq	r0, r3
 801d16a:	2001      	movne	r0, #1
 801d16c:	bd70      	pop	{r4, r5, r6, pc}
 801d16e:	f7f7 ff57 	bl	8015020 <rcutils_reset_error>
 801d172:	f640 0098 	movw	r0, #2200	; 0x898
 801d176:	bd70      	pop	{r4, r5, r6, pc}
 801d178:	f640 0098 	movw	r0, #2200	; 0x898
 801d17c:	bd70      	pop	{r4, r5, r6, pc}
 801d17e:	200b      	movs	r0, #11
 801d180:	bd70      	pop	{r4, r5, r6, pc}
 801d182:	f640 0098 	movw	r0, #2200	; 0x898
 801d186:	4770      	bx	lr

0801d188 <rcl_action_take_cancel_request>:
 801d188:	2800      	cmp	r0, #0
 801d18a:	d03a      	beq.n	801d202 <rcl_action_take_cancel_request+0x7a>
 801d18c:	b570      	push	{r4, r5, r6, lr}
 801d18e:	4604      	mov	r4, r0
 801d190:	6800      	ldr	r0, [r0, #0]
 801d192:	b388      	cbz	r0, 801d1f8 <rcl_action_take_cancel_request+0x70>
 801d194:	460e      	mov	r6, r1
 801d196:	4615      	mov	r5, r2
 801d198:	f7f6 fdd8 	bl	8013d4c <rcl_service_is_valid>
 801d19c:	b338      	cbz	r0, 801d1ee <rcl_action_take_cancel_request+0x66>
 801d19e:	6820      	ldr	r0, [r4, #0]
 801d1a0:	3004      	adds	r0, #4
 801d1a2:	f7f6 fdd3 	bl	8013d4c <rcl_service_is_valid>
 801d1a6:	b310      	cbz	r0, 801d1ee <rcl_action_take_cancel_request+0x66>
 801d1a8:	6820      	ldr	r0, [r4, #0]
 801d1aa:	3008      	adds	r0, #8
 801d1ac:	f7f6 fdce 	bl	8013d4c <rcl_service_is_valid>
 801d1b0:	b1e8      	cbz	r0, 801d1ee <rcl_action_take_cancel_request+0x66>
 801d1b2:	6820      	ldr	r0, [r4, #0]
 801d1b4:	300c      	adds	r0, #12
 801d1b6:	f7f6 fc8d 	bl	8013ad4 <rcl_publisher_is_valid>
 801d1ba:	b1c0      	cbz	r0, 801d1ee <rcl_action_take_cancel_request+0x66>
 801d1bc:	6820      	ldr	r0, [r4, #0]
 801d1be:	3010      	adds	r0, #16
 801d1c0:	f7f6 fc88 	bl	8013ad4 <rcl_publisher_is_valid>
 801d1c4:	b198      	cbz	r0, 801d1ee <rcl_action_take_cancel_request+0x66>
 801d1c6:	b1d5      	cbz	r5, 801d1fe <rcl_action_take_cancel_request+0x76>
 801d1c8:	b1ce      	cbz	r6, 801d1fe <rcl_action_take_cancel_request+0x76>
 801d1ca:	6820      	ldr	r0, [r4, #0]
 801d1cc:	462a      	mov	r2, r5
 801d1ce:	4631      	mov	r1, r6
 801d1d0:	3004      	adds	r0, #4
 801d1d2:	f7f6 fd63 	bl	8013c9c <rcl_take_request>
 801d1d6:	b148      	cbz	r0, 801d1ec <rcl_action_take_cancel_request+0x64>
 801d1d8:	280a      	cmp	r0, #10
 801d1da:	d007      	beq.n	801d1ec <rcl_action_take_cancel_request+0x64>
 801d1dc:	f240 2259 	movw	r2, #601	; 0x259
 801d1e0:	f640 0399 	movw	r3, #2201	; 0x899
 801d1e4:	4290      	cmp	r0, r2
 801d1e6:	bf0c      	ite	eq
 801d1e8:	4618      	moveq	r0, r3
 801d1ea:	2001      	movne	r0, #1
 801d1ec:	bd70      	pop	{r4, r5, r6, pc}
 801d1ee:	f7f7 ff17 	bl	8015020 <rcutils_reset_error>
 801d1f2:	f640 0098 	movw	r0, #2200	; 0x898
 801d1f6:	bd70      	pop	{r4, r5, r6, pc}
 801d1f8:	f640 0098 	movw	r0, #2200	; 0x898
 801d1fc:	bd70      	pop	{r4, r5, r6, pc}
 801d1fe:	200b      	movs	r0, #11
 801d200:	bd70      	pop	{r4, r5, r6, pc}
 801d202:	f640 0098 	movw	r0, #2200	; 0x898
 801d206:	4770      	bx	lr

0801d208 <rcl_action_send_cancel_response>:
 801d208:	b390      	cbz	r0, 801d270 <rcl_action_send_cancel_response+0x68>
 801d20a:	b570      	push	{r4, r5, r6, lr}
 801d20c:	4604      	mov	r4, r0
 801d20e:	6800      	ldr	r0, [r0, #0]
 801d210:	b348      	cbz	r0, 801d266 <rcl_action_send_cancel_response+0x5e>
 801d212:	460e      	mov	r6, r1
 801d214:	4615      	mov	r5, r2
 801d216:	f7f6 fd99 	bl	8013d4c <rcl_service_is_valid>
 801d21a:	b1f8      	cbz	r0, 801d25c <rcl_action_send_cancel_response+0x54>
 801d21c:	6820      	ldr	r0, [r4, #0]
 801d21e:	3004      	adds	r0, #4
 801d220:	f7f6 fd94 	bl	8013d4c <rcl_service_is_valid>
 801d224:	b1d0      	cbz	r0, 801d25c <rcl_action_send_cancel_response+0x54>
 801d226:	6820      	ldr	r0, [r4, #0]
 801d228:	3008      	adds	r0, #8
 801d22a:	f7f6 fd8f 	bl	8013d4c <rcl_service_is_valid>
 801d22e:	b1a8      	cbz	r0, 801d25c <rcl_action_send_cancel_response+0x54>
 801d230:	6820      	ldr	r0, [r4, #0]
 801d232:	300c      	adds	r0, #12
 801d234:	f7f6 fc4e 	bl	8013ad4 <rcl_publisher_is_valid>
 801d238:	b180      	cbz	r0, 801d25c <rcl_action_send_cancel_response+0x54>
 801d23a:	6820      	ldr	r0, [r4, #0]
 801d23c:	3010      	adds	r0, #16
 801d23e:	f7f6 fc49 	bl	8013ad4 <rcl_publisher_is_valid>
 801d242:	b158      	cbz	r0, 801d25c <rcl_action_send_cancel_response+0x54>
 801d244:	b195      	cbz	r5, 801d26c <rcl_action_send_cancel_response+0x64>
 801d246:	b18e      	cbz	r6, 801d26c <rcl_action_send_cancel_response+0x64>
 801d248:	6820      	ldr	r0, [r4, #0]
 801d24a:	462a      	mov	r2, r5
 801d24c:	4631      	mov	r1, r6
 801d24e:	3004      	adds	r0, #4
 801d250:	f7f6 fd64 	bl	8013d1c <rcl_send_response>
 801d254:	3800      	subs	r0, #0
 801d256:	bf18      	it	ne
 801d258:	2001      	movne	r0, #1
 801d25a:	bd70      	pop	{r4, r5, r6, pc}
 801d25c:	f7f7 fee0 	bl	8015020 <rcutils_reset_error>
 801d260:	f640 0098 	movw	r0, #2200	; 0x898
 801d264:	bd70      	pop	{r4, r5, r6, pc}
 801d266:	f640 0098 	movw	r0, #2200	; 0x898
 801d26a:	bd70      	pop	{r4, r5, r6, pc}
 801d26c:	200b      	movs	r0, #11
 801d26e:	bd70      	pop	{r4, r5, r6, pc}
 801d270:	f640 0098 	movw	r0, #2200	; 0x898
 801d274:	4770      	bx	lr
 801d276:	bf00      	nop

0801d278 <rcl_action_wait_set_add_action_server>:
 801d278:	2800      	cmp	r0, #0
 801d27a:	d04d      	beq.n	801d318 <rcl_action_wait_set_add_action_server+0xa0>
 801d27c:	b570      	push	{r4, r5, r6, lr}
 801d27e:	460c      	mov	r4, r1
 801d280:	b159      	cbz	r1, 801d29a <rcl_action_wait_set_add_action_server+0x22>
 801d282:	4605      	mov	r5, r0
 801d284:	6808      	ldr	r0, [r1, #0]
 801d286:	b140      	cbz	r0, 801d29a <rcl_action_wait_set_add_action_server+0x22>
 801d288:	4616      	mov	r6, r2
 801d28a:	f7f6 fd5f 	bl	8013d4c <rcl_service_is_valid>
 801d28e:	b120      	cbz	r0, 801d29a <rcl_action_wait_set_add_action_server+0x22>
 801d290:	6820      	ldr	r0, [r4, #0]
 801d292:	3004      	adds	r0, #4
 801d294:	f7f6 fd5a 	bl	8013d4c <rcl_service_is_valid>
 801d298:	b910      	cbnz	r0, 801d2a0 <rcl_action_wait_set_add_action_server+0x28>
 801d29a:	f640 0098 	movw	r0, #2200	; 0x898
 801d29e:	bd70      	pop	{r4, r5, r6, pc}
 801d2a0:	6820      	ldr	r0, [r4, #0]
 801d2a2:	3008      	adds	r0, #8
 801d2a4:	f7f6 fd52 	bl	8013d4c <rcl_service_is_valid>
 801d2a8:	2800      	cmp	r0, #0
 801d2aa:	d0f6      	beq.n	801d29a <rcl_action_wait_set_add_action_server+0x22>
 801d2ac:	6820      	ldr	r0, [r4, #0]
 801d2ae:	300c      	adds	r0, #12
 801d2b0:	f7f6 fc28 	bl	8013b04 <rcl_publisher_is_valid_except_context>
 801d2b4:	2800      	cmp	r0, #0
 801d2b6:	d0f0      	beq.n	801d29a <rcl_action_wait_set_add_action_server+0x22>
 801d2b8:	6820      	ldr	r0, [r4, #0]
 801d2ba:	3010      	adds	r0, #16
 801d2bc:	f7f6 fc22 	bl	8013b04 <rcl_publisher_is_valid_except_context>
 801d2c0:	2800      	cmp	r0, #0
 801d2c2:	d0ea      	beq.n	801d29a <rcl_action_wait_set_add_action_server+0x22>
 801d2c4:	6821      	ldr	r1, [r4, #0]
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d2cc:	f7ff fad2 	bl	801c874 <rcl_wait_set_add_service>
 801d2d0:	2800      	cmp	r0, #0
 801d2d2:	d1e4      	bne.n	801d29e <rcl_action_wait_set_add_action_server+0x26>
 801d2d4:	6821      	ldr	r1, [r4, #0]
 801d2d6:	4628      	mov	r0, r5
 801d2d8:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d2dc:	3104      	adds	r1, #4
 801d2de:	f7ff fac9 	bl	801c874 <rcl_wait_set_add_service>
 801d2e2:	2800      	cmp	r0, #0
 801d2e4:	d1db      	bne.n	801d29e <rcl_action_wait_set_add_action_server+0x26>
 801d2e6:	6821      	ldr	r1, [r4, #0]
 801d2e8:	4628      	mov	r0, r5
 801d2ea:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d2ee:	3108      	adds	r1, #8
 801d2f0:	f7ff fac0 	bl	801c874 <rcl_wait_set_add_service>
 801d2f4:	2800      	cmp	r0, #0
 801d2f6:	d1d2      	bne.n	801d29e <rcl_action_wait_set_add_action_server+0x26>
 801d2f8:	6821      	ldr	r1, [r4, #0]
 801d2fa:	4628      	mov	r0, r5
 801d2fc:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d300:	3114      	adds	r1, #20
 801d302:	f7ff fa5b 	bl	801c7bc <rcl_wait_set_add_timer>
 801d306:	2800      	cmp	r0, #0
 801d308:	d1c9      	bne.n	801d29e <rcl_action_wait_set_add_action_server+0x26>
 801d30a:	2e00      	cmp	r6, #0
 801d30c:	d0c7      	beq.n	801d29e <rcl_action_wait_set_add_action_server+0x26>
 801d30e:	6823      	ldr	r3, [r4, #0]
 801d310:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d314:	6033      	str	r3, [r6, #0]
 801d316:	bd70      	pop	{r4, r5, r6, pc}
 801d318:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d31c:	4770      	bx	lr
 801d31e:	bf00      	nop

0801d320 <rcl_action_server_wait_set_get_entities_ready>:
 801d320:	2800      	cmp	r0, #0
 801d322:	d067      	beq.n	801d3f4 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d328:	460c      	mov	r4, r1
 801d32a:	b161      	cbz	r1, 801d346 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d32c:	4605      	mov	r5, r0
 801d32e:	6808      	ldr	r0, [r1, #0]
 801d330:	b148      	cbz	r0, 801d346 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d332:	4616      	mov	r6, r2
 801d334:	4698      	mov	r8, r3
 801d336:	f7f6 fd09 	bl	8013d4c <rcl_service_is_valid>
 801d33a:	b120      	cbz	r0, 801d346 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d33c:	6820      	ldr	r0, [r4, #0]
 801d33e:	3004      	adds	r0, #4
 801d340:	f7f6 fd04 	bl	8013d4c <rcl_service_is_valid>
 801d344:	b918      	cbnz	r0, 801d34e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d346:	f640 0098 	movw	r0, #2200	; 0x898
 801d34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d34e:	6820      	ldr	r0, [r4, #0]
 801d350:	3008      	adds	r0, #8
 801d352:	f7f6 fcfb 	bl	8013d4c <rcl_service_is_valid>
 801d356:	2800      	cmp	r0, #0
 801d358:	d0f5      	beq.n	801d346 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d35a:	6820      	ldr	r0, [r4, #0]
 801d35c:	300c      	adds	r0, #12
 801d35e:	f7f6 fbd1 	bl	8013b04 <rcl_publisher_is_valid_except_context>
 801d362:	2800      	cmp	r0, #0
 801d364:	d0ef      	beq.n	801d346 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d366:	6820      	ldr	r0, [r4, #0]
 801d368:	3010      	adds	r0, #16
 801d36a:	f7f6 fbcb 	bl	8013b04 <rcl_publisher_is_valid_except_context>
 801d36e:	2800      	cmp	r0, #0
 801d370:	d0e9      	beq.n	801d346 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d376:	2a00      	cmp	r2, #0
 801d378:	bf18      	it	ne
 801d37a:	2b00      	cmpne	r3, #0
 801d37c:	bf0c      	ite	eq
 801d37e:	2101      	moveq	r1, #1
 801d380:	2100      	movne	r1, #0
 801d382:	f1b8 0f00 	cmp.w	r8, #0
 801d386:	bf08      	it	eq
 801d388:	f041 0101 	orreq.w	r1, r1, #1
 801d38c:	bba9      	cbnz	r1, 801d3fa <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d38e:	b3a6      	cbz	r6, 801d3fa <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d390:	6821      	ldr	r1, [r4, #0]
 801d392:	2000      	movs	r0, #0
 801d394:	692c      	ldr	r4, [r5, #16]
 801d396:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d39a:	6a2f      	ldr	r7, [r5, #32]
 801d39c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d3a0:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d3a4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d3a8:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d3ac:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d3b0:	1a64      	subs	r4, r4, r1
 801d3b2:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d3b6:	fab4 f484 	clz	r4, r4
 801d3ba:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d3be:	0964      	lsrs	r4, r4, #5
 801d3c0:	7034      	strb	r4, [r6, #0]
 801d3c2:	1d0c      	adds	r4, r1, #4
 801d3c4:	1b2c      	subs	r4, r5, r4
 801d3c6:	fab4 f484 	clz	r4, r4
 801d3ca:	0964      	lsrs	r4, r4, #5
 801d3cc:	f888 4000 	strb.w	r4, [r8]
 801d3d0:	f101 0408 	add.w	r4, r1, #8
 801d3d4:	1b1b      	subs	r3, r3, r4
 801d3d6:	9c06      	ldr	r4, [sp, #24]
 801d3d8:	fab3 f383 	clz	r3, r3
 801d3dc:	095b      	lsrs	r3, r3, #5
 801d3de:	7023      	strb	r3, [r4, #0]
 801d3e0:	f101 0314 	add.w	r3, r1, #20
 801d3e4:	1ad3      	subs	r3, r2, r3
 801d3e6:	9a07      	ldr	r2, [sp, #28]
 801d3e8:	fab3 f383 	clz	r3, r3
 801d3ec:	095b      	lsrs	r3, r3, #5
 801d3ee:	7013      	strb	r3, [r2, #0]
 801d3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3f4:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d3f8:	4770      	bx	lr
 801d3fa:	200b      	movs	r0, #11
 801d3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d400 <_execute_event_handler>:
 801d400:	2002      	movs	r0, #2
 801d402:	4770      	bx	lr

0801d404 <_cancel_goal_event_handler>:
 801d404:	2003      	movs	r0, #3
 801d406:	4770      	bx	lr

0801d408 <_succeed_event_handler>:
 801d408:	2004      	movs	r0, #4
 801d40a:	4770      	bx	lr

0801d40c <_abort_event_handler>:
 801d40c:	2006      	movs	r0, #6
 801d40e:	4770      	bx	lr

0801d410 <_canceled_event_handler>:
 801d410:	2005      	movs	r0, #5
 801d412:	4770      	bx	lr

0801d414 <rcl_action_transition_goal_state>:
 801d414:	b2c2      	uxtb	r2, r0
 801d416:	2a06      	cmp	r2, #6
 801d418:	d810      	bhi.n	801d43c <rcl_action_transition_goal_state+0x28>
 801d41a:	2904      	cmp	r1, #4
 801d41c:	d80e      	bhi.n	801d43c <rcl_action_transition_goal_state+0x28>
 801d41e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d422:	b410      	push	{r4}
 801d424:	1853      	adds	r3, r2, r1
 801d426:	4c06      	ldr	r4, [pc, #24]	; (801d440 <rcl_action_transition_goal_state+0x2c>)
 801d428:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d42c:	b113      	cbz	r3, 801d434 <rcl_action_transition_goal_state+0x20>
 801d42e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d432:	4718      	bx	r3
 801d434:	2000      	movs	r0, #0
 801d436:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d43a:	4770      	bx	lr
 801d43c:	2000      	movs	r0, #0
 801d43e:	4770      	bx	lr
 801d440:	080257f4 	.word	0x080257f4

0801d444 <rcl_action_get_zero_initialized_cancel_response>:
 801d444:	b510      	push	{r4, lr}
 801d446:	4c07      	ldr	r4, [pc, #28]	; (801d464 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d448:	4686      	mov	lr, r0
 801d44a:	4684      	mov	ip, r0
 801d44c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d44e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d458:	6823      	ldr	r3, [r4, #0]
 801d45a:	4670      	mov	r0, lr
 801d45c:	f8cc 3000 	str.w	r3, [ip]
 801d460:	bd10      	pop	{r4, pc}
 801d462:	bf00      	nop
 801d464:	08025880 	.word	0x08025880

0801d468 <rclc_action_send_result_request>:
 801d468:	b1d0      	cbz	r0, 801d4a0 <rclc_action_send_result_request+0x38>
 801d46a:	4684      	mov	ip, r0
 801d46c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d470:	b500      	push	{lr}
 801d472:	b087      	sub	sp, #28
 801d474:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d478:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d47c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d480:	f10d 0e08 	add.w	lr, sp, #8
 801d484:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d488:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d48c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d490:	a902      	add	r1, sp, #8
 801d492:	3010      	adds	r0, #16
 801d494:	f7ff fbcc 	bl	801cc30 <rcl_action_send_result_request>
 801d498:	b920      	cbnz	r0, 801d4a4 <rclc_action_send_result_request+0x3c>
 801d49a:	b007      	add	sp, #28
 801d49c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d4a0:	200b      	movs	r0, #11
 801d4a2:	4770      	bx	lr
 801d4a4:	9001      	str	r0, [sp, #4]
 801d4a6:	f7f7 fdbb 	bl	8015020 <rcutils_reset_error>
 801d4aa:	9801      	ldr	r0, [sp, #4]
 801d4ac:	b007      	add	sp, #28
 801d4ae:	f85d fb04 	ldr.w	pc, [sp], #4
 801d4b2:	bf00      	nop

0801d4b4 <rclc_action_take_goal_handle>:
 801d4b4:	b160      	cbz	r0, 801d4d0 <rclc_action_take_goal_handle+0x1c>
 801d4b6:	6883      	ldr	r3, [r0, #8]
 801d4b8:	b143      	cbz	r3, 801d4cc <rclc_action_take_goal_handle+0x18>
 801d4ba:	6819      	ldr	r1, [r3, #0]
 801d4bc:	2200      	movs	r2, #0
 801d4be:	6081      	str	r1, [r0, #8]
 801d4c0:	721a      	strb	r2, [r3, #8]
 801d4c2:	68c1      	ldr	r1, [r0, #12]
 801d4c4:	621a      	str	r2, [r3, #32]
 801d4c6:	849a      	strh	r2, [r3, #36]	; 0x24
 801d4c8:	6019      	str	r1, [r3, #0]
 801d4ca:	60c3      	str	r3, [r0, #12]
 801d4cc:	4618      	mov	r0, r3
 801d4ce:	4770      	bx	lr
 801d4d0:	4603      	mov	r3, r0
 801d4d2:	e7fb      	b.n	801d4cc <rclc_action_take_goal_handle+0x18>

0801d4d4 <rclc_action_remove_used_goal_handle>:
 801d4d4:	b180      	cbz	r0, 801d4f8 <rclc_action_remove_used_goal_handle+0x24>
 801d4d6:	b179      	cbz	r1, 801d4f8 <rclc_action_remove_used_goal_handle+0x24>
 801d4d8:	68c3      	ldr	r3, [r0, #12]
 801d4da:	4299      	cmp	r1, r3
 801d4dc:	d00d      	beq.n	801d4fa <rclc_action_remove_used_goal_handle+0x26>
 801d4de:	b12b      	cbz	r3, 801d4ec <rclc_action_remove_used_goal_handle+0x18>
 801d4e0:	681a      	ldr	r2, [r3, #0]
 801d4e2:	4291      	cmp	r1, r2
 801d4e4:	d003      	beq.n	801d4ee <rclc_action_remove_used_goal_handle+0x1a>
 801d4e6:	4613      	mov	r3, r2
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d1f9      	bne.n	801d4e0 <rclc_action_remove_used_goal_handle+0xc>
 801d4ec:	4770      	bx	lr
 801d4ee:	680a      	ldr	r2, [r1, #0]
 801d4f0:	601a      	str	r2, [r3, #0]
 801d4f2:	6883      	ldr	r3, [r0, #8]
 801d4f4:	600b      	str	r3, [r1, #0]
 801d4f6:	6081      	str	r1, [r0, #8]
 801d4f8:	4770      	bx	lr
 801d4fa:	680b      	ldr	r3, [r1, #0]
 801d4fc:	60c3      	str	r3, [r0, #12]
 801d4fe:	e7f8      	b.n	801d4f2 <rclc_action_remove_used_goal_handle+0x1e>

0801d500 <rclc_action_find_goal_handle_by_uuid>:
 801d500:	b538      	push	{r3, r4, r5, lr}
 801d502:	b181      	cbz	r1, 801d526 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d504:	b178      	cbz	r0, 801d526 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d506:	68c4      	ldr	r4, [r0, #12]
 801d508:	460d      	mov	r5, r1
 801d50a:	b914      	cbnz	r4, 801d512 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d50c:	e009      	b.n	801d522 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d50e:	6824      	ldr	r4, [r4, #0]
 801d510:	b13c      	cbz	r4, 801d522 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d512:	f104 0009 	add.w	r0, r4, #9
 801d516:	2210      	movs	r2, #16
 801d518:	4629      	mov	r1, r5
 801d51a:	f003 fba9 	bl	8020c70 <memcmp>
 801d51e:	2800      	cmp	r0, #0
 801d520:	d1f5      	bne.n	801d50e <rclc_action_find_goal_handle_by_uuid+0xe>
 801d522:	4620      	mov	r0, r4
 801d524:	bd38      	pop	{r3, r4, r5, pc}
 801d526:	2400      	movs	r4, #0
 801d528:	4620      	mov	r0, r4
 801d52a:	bd38      	pop	{r3, r4, r5, pc}

0801d52c <rclc_action_find_first_handle_by_status>:
 801d52c:	b140      	cbz	r0, 801d540 <rclc_action_find_first_handle_by_status+0x14>
 801d52e:	68c0      	ldr	r0, [r0, #12]
 801d530:	b910      	cbnz	r0, 801d538 <rclc_action_find_first_handle_by_status+0xc>
 801d532:	e005      	b.n	801d540 <rclc_action_find_first_handle_by_status+0x14>
 801d534:	6800      	ldr	r0, [r0, #0]
 801d536:	b118      	cbz	r0, 801d540 <rclc_action_find_first_handle_by_status+0x14>
 801d538:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d53c:	428b      	cmp	r3, r1
 801d53e:	d1f9      	bne.n	801d534 <rclc_action_find_first_handle_by_status+0x8>
 801d540:	4770      	bx	lr
 801d542:	bf00      	nop

0801d544 <rclc_action_find_first_terminated_handle>:
 801d544:	b140      	cbz	r0, 801d558 <rclc_action_find_first_terminated_handle+0x14>
 801d546:	68c0      	ldr	r0, [r0, #12]
 801d548:	b910      	cbnz	r0, 801d550 <rclc_action_find_first_terminated_handle+0xc>
 801d54a:	e005      	b.n	801d558 <rclc_action_find_first_terminated_handle+0x14>
 801d54c:	6800      	ldr	r0, [r0, #0]
 801d54e:	b118      	cbz	r0, 801d558 <rclc_action_find_first_terminated_handle+0x14>
 801d550:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d554:	2b03      	cmp	r3, #3
 801d556:	ddf9      	ble.n	801d54c <rclc_action_find_first_terminated_handle+0x8>
 801d558:	4770      	bx	lr
 801d55a:	bf00      	nop

0801d55c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d55c:	b170      	cbz	r0, 801d57c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d55e:	68c0      	ldr	r0, [r0, #12]
 801d560:	b160      	cbz	r0, 801d57c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d562:	b410      	push	{r4}
 801d564:	e001      	b.n	801d56a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d566:	6800      	ldr	r0, [r0, #0]
 801d568:	b128      	cbz	r0, 801d576 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d56a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d56e:	4299      	cmp	r1, r3
 801d570:	bf08      	it	eq
 801d572:	4294      	cmpeq	r4, r2
 801d574:	d1f7      	bne.n	801d566 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d57a:	4770      	bx	lr
 801d57c:	4770      	bx	lr
 801d57e:	bf00      	nop

0801d580 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d580:	b170      	cbz	r0, 801d5a0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d582:	68c0      	ldr	r0, [r0, #12]
 801d584:	b160      	cbz	r0, 801d5a0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d586:	b410      	push	{r4}
 801d588:	e001      	b.n	801d58e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d58a:	6800      	ldr	r0, [r0, #0]
 801d58c:	b128      	cbz	r0, 801d59a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d58e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d592:	4299      	cmp	r1, r3
 801d594:	bf08      	it	eq
 801d596:	4294      	cmpeq	r4, r2
 801d598:	d1f7      	bne.n	801d58a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d59e:	4770      	bx	lr
 801d5a0:	4770      	bx	lr
 801d5a2:	bf00      	nop

0801d5a4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d5a4:	b170      	cbz	r0, 801d5c4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d5a6:	68c0      	ldr	r0, [r0, #12]
 801d5a8:	b160      	cbz	r0, 801d5c4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d5aa:	b410      	push	{r4}
 801d5ac:	e001      	b.n	801d5b2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d5ae:	6800      	ldr	r0, [r0, #0]
 801d5b0:	b128      	cbz	r0, 801d5be <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d5b2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801d5b6:	4299      	cmp	r1, r3
 801d5b8:	bf08      	it	eq
 801d5ba:	4294      	cmpeq	r4, r2
 801d5bc:	d1f7      	bne.n	801d5ae <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d5be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5c2:	4770      	bx	lr
 801d5c4:	4770      	bx	lr
 801d5c6:	bf00      	nop

0801d5c8 <rclc_action_find_first_handle_with_goal_response>:
 801d5c8:	b140      	cbz	r0, 801d5dc <rclc_action_find_first_handle_with_goal_response+0x14>
 801d5ca:	68c0      	ldr	r0, [r0, #12]
 801d5cc:	b910      	cbnz	r0, 801d5d4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801d5ce:	e005      	b.n	801d5dc <rclc_action_find_first_handle_with_goal_response+0x14>
 801d5d0:	6800      	ldr	r0, [r0, #0]
 801d5d2:	b118      	cbz	r0, 801d5dc <rclc_action_find_first_handle_with_goal_response+0x14>
 801d5d4:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d0f9      	beq.n	801d5d0 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d5dc:	4770      	bx	lr
 801d5de:	bf00      	nop

0801d5e0 <rclc_action_find_first_handle_with_result_response>:
 801d5e0:	b140      	cbz	r0, 801d5f4 <rclc_action_find_first_handle_with_result_response+0x14>
 801d5e2:	68c0      	ldr	r0, [r0, #12]
 801d5e4:	b910      	cbnz	r0, 801d5ec <rclc_action_find_first_handle_with_result_response+0xc>
 801d5e6:	e005      	b.n	801d5f4 <rclc_action_find_first_handle_with_result_response+0x14>
 801d5e8:	6800      	ldr	r0, [r0, #0]
 801d5ea:	b118      	cbz	r0, 801d5f4 <rclc_action_find_first_handle_with_result_response+0x14>
 801d5ec:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	d0f9      	beq.n	801d5e8 <rclc_action_find_first_handle_with_result_response+0x8>
 801d5f4:	4770      	bx	lr
 801d5f6:	bf00      	nop

0801d5f8 <rclc_action_server_response_goal_request>:
 801d5f8:	b198      	cbz	r0, 801d622 <rclc_action_server_response_goal_request+0x2a>
 801d5fa:	2200      	movs	r2, #0
 801d5fc:	460b      	mov	r3, r1
 801d5fe:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d602:	b510      	push	{r4, lr}
 801d604:	6844      	ldr	r4, [r0, #4]
 801d606:	b086      	sub	sp, #24
 801d608:	f104 0010 	add.w	r0, r4, #16
 801d60c:	9205      	str	r2, [sp, #20]
 801d60e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d612:	aa03      	add	r2, sp, #12
 801d614:	f88d 300c 	strb.w	r3, [sp, #12]
 801d618:	f7ff fd40 	bl	801d09c <rcl_action_send_goal_response>
 801d61c:	b918      	cbnz	r0, 801d626 <rclc_action_server_response_goal_request+0x2e>
 801d61e:	b006      	add	sp, #24
 801d620:	bd10      	pop	{r4, pc}
 801d622:	200b      	movs	r0, #11
 801d624:	4770      	bx	lr
 801d626:	9001      	str	r0, [sp, #4]
 801d628:	f7f7 fcfa 	bl	8015020 <rcutils_reset_error>
 801d62c:	9801      	ldr	r0, [sp, #4]
 801d62e:	b006      	add	sp, #24
 801d630:	bd10      	pop	{r4, pc}
 801d632:	bf00      	nop
 801d634:	0000      	movs	r0, r0
	...

0801d638 <rclc_action_server_goal_cancel_accept>:
 801d638:	b310      	cbz	r0, 801d680 <rclc_action_server_goal_cancel_accept+0x48>
 801d63a:	b510      	push	{r4, lr}
 801d63c:	b090      	sub	sp, #64	; 0x40
 801d63e:	4604      	mov	r4, r0
 801d640:	a806      	add	r0, sp, #24
 801d642:	f7ff feff 	bl	801d444 <rcl_action_get_zero_initialized_cancel_response>
 801d646:	2300      	movs	r3, #0
 801d648:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d64c:	46ec      	mov	ip, sp
 801d64e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d652:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d656:	f88d 3018 	strb.w	r3, [sp, #24]
 801d65a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d65e:	f8cd d01c 	str.w	sp, [sp, #28]
 801d662:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d666:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801d688 <rclc_action_server_goal_cancel_accept+0x50>
 801d66a:	6860      	ldr	r0, [r4, #4]
 801d66c:	aa06      	add	r2, sp, #24
 801d66e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801d672:	3010      	adds	r0, #16
 801d674:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d678:	f7ff fdc6 	bl	801d208 <rcl_action_send_cancel_response>
 801d67c:	b010      	add	sp, #64	; 0x40
 801d67e:	bd10      	pop	{r4, pc}
 801d680:	200b      	movs	r0, #11
 801d682:	4770      	bx	lr
 801d684:	f3af 8000 	nop.w
 801d688:	00000001 	.word	0x00000001
 801d68c:	00000001 	.word	0x00000001

0801d690 <rclc_action_server_goal_cancel_reject>:
 801d690:	b082      	sub	sp, #8
 801d692:	b530      	push	{r4, r5, lr}
 801d694:	b08b      	sub	sp, #44	; 0x2c
 801d696:	ac0e      	add	r4, sp, #56	; 0x38
 801d698:	e884 000c 	stmia.w	r4, {r2, r3}
 801d69c:	b188      	cbz	r0, 801d6c2 <rclc_action_server_goal_cancel_reject+0x32>
 801d69e:	4604      	mov	r4, r0
 801d6a0:	a801      	add	r0, sp, #4
 801d6a2:	460d      	mov	r5, r1
 801d6a4:	f7ff fece 	bl	801d444 <rcl_action_get_zero_initialized_cancel_response>
 801d6a8:	aa01      	add	r2, sp, #4
 801d6aa:	a90e      	add	r1, sp, #56	; 0x38
 801d6ac:	f104 0010 	add.w	r0, r4, #16
 801d6b0:	f88d 5004 	strb.w	r5, [sp, #4]
 801d6b4:	f7ff fda8 	bl	801d208 <rcl_action_send_cancel_response>
 801d6b8:	b00b      	add	sp, #44	; 0x2c
 801d6ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d6be:	b002      	add	sp, #8
 801d6c0:	4770      	bx	lr
 801d6c2:	200b      	movs	r0, #11
 801d6c4:	b00b      	add	sp, #44	; 0x2c
 801d6c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d6ca:	b002      	add	sp, #8
 801d6cc:	4770      	bx	lr
 801d6ce:	bf00      	nop

0801d6d0 <__atomic_load_8>:
 801d6d0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801d6d4:	4a16      	ldr	r2, [pc, #88]	; (801d730 <__atomic_load_8+0x60>)
 801d6d6:	4b17      	ldr	r3, [pc, #92]	; (801d734 <__atomic_load_8+0x64>)
 801d6d8:	f04f 0c01 	mov.w	ip, #1
 801d6dc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801d6e0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801d6e4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801d6e8:	fb02 f101 	mul.w	r1, r2, r1
 801d6ec:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801d6f0:	fba3 2301 	umull	r2, r3, r3, r1
 801d6f4:	091b      	lsrs	r3, r3, #4
 801d6f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d6fa:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801d6fe:	b4d0      	push	{r4, r6, r7}
 801d700:	1ac9      	subs	r1, r1, r3
 801d702:	4c0d      	ldr	r4, [pc, #52]	; (801d738 <__atomic_load_8+0x68>)
 801d704:	1862      	adds	r2, r4, r1
 801d706:	e8d2 3f4f 	ldrexb	r3, [r2]
 801d70a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801d70e:	2e00      	cmp	r6, #0
 801d710:	d1f9      	bne.n	801d706 <__atomic_load_8+0x36>
 801d712:	b2db      	uxtb	r3, r3
 801d714:	f3bf 8f5b 	dmb	ish
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d1f4      	bne.n	801d706 <__atomic_load_8+0x36>
 801d71c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801d720:	f3bf 8f5b 	dmb	ish
 801d724:	5463      	strb	r3, [r4, r1]
 801d726:	4630      	mov	r0, r6
 801d728:	4639      	mov	r1, r7
 801d72a:	bcd0      	pop	{r4, r6, r7}
 801d72c:	4770      	bx	lr
 801d72e:	bf00      	nop
 801d730:	27d4eb2d 	.word	0x27d4eb2d
 801d734:	b21642c9 	.word	0xb21642c9
 801d738:	20016c70 	.word	0x20016c70

0801d73c <__atomic_store_8>:
 801d73c:	b570      	push	{r4, r5, r6, lr}
 801d73e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801d742:	4916      	ldr	r1, [pc, #88]	; (801d79c <__atomic_store_8+0x60>)
 801d744:	4c16      	ldr	r4, [pc, #88]	; (801d7a0 <__atomic_store_8+0x64>)
 801d746:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801d74a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801d74e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801d752:	fb01 fe0e 	mul.w	lr, r1, lr
 801d756:	4913      	ldr	r1, [pc, #76]	; (801d7a4 <__atomic_store_8+0x68>)
 801d758:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801d75c:	fba1 510e 	umull	r5, r1, r1, lr
 801d760:	f04f 0501 	mov.w	r5, #1
 801d764:	0909      	lsrs	r1, r1, #4
 801d766:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801d76a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801d76e:	ebae 0e01 	sub.w	lr, lr, r1
 801d772:	eb04 0c0e 	add.w	ip, r4, lr
 801d776:	e8dc 1f4f 	ldrexb	r1, [ip]
 801d77a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801d77e:	2e00      	cmp	r6, #0
 801d780:	d1f9      	bne.n	801d776 <__atomic_store_8+0x3a>
 801d782:	b2c9      	uxtb	r1, r1
 801d784:	f3bf 8f5b 	dmb	ish
 801d788:	2900      	cmp	r1, #0
 801d78a:	d1f4      	bne.n	801d776 <__atomic_store_8+0x3a>
 801d78c:	e9c0 2300 	strd	r2, r3, [r0]
 801d790:	f3bf 8f5b 	dmb	ish
 801d794:	f804 100e 	strb.w	r1, [r4, lr]
 801d798:	bd70      	pop	{r4, r5, r6, pc}
 801d79a:	bf00      	nop
 801d79c:	27d4eb2d 	.word	0x27d4eb2d
 801d7a0:	20016c70 	.word	0x20016c70
 801d7a4:	b21642c9 	.word	0xb21642c9

0801d7a8 <__atomic_exchange_8>:
 801d7a8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801d7ac:	4917      	ldr	r1, [pc, #92]	; (801d80c <__atomic_exchange_8+0x64>)
 801d7ae:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801d7b2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801d7b6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801d7ba:	fb01 fc0c 	mul.w	ip, r1, ip
 801d7be:	4914      	ldr	r1, [pc, #80]	; (801d810 <__atomic_exchange_8+0x68>)
 801d7c0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801d7c4:	b570      	push	{r4, r5, r6, lr}
 801d7c6:	4686      	mov	lr, r0
 801d7c8:	fba1 010c 	umull	r0, r1, r1, ip
 801d7cc:	4d11      	ldr	r5, [pc, #68]	; (801d814 <__atomic_exchange_8+0x6c>)
 801d7ce:	f04f 0001 	mov.w	r0, #1
 801d7d2:	0909      	lsrs	r1, r1, #4
 801d7d4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801d7d8:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801d7dc:	ebac 0c01 	sub.w	ip, ip, r1
 801d7e0:	eb05 010c 	add.w	r1, r5, ip
 801d7e4:	e8d1 4f4f 	ldrexb	r4, [r1]
 801d7e8:	e8c1 0f46 	strexb	r6, r0, [r1]
 801d7ec:	2e00      	cmp	r6, #0
 801d7ee:	d1f9      	bne.n	801d7e4 <__atomic_exchange_8+0x3c>
 801d7f0:	b2e4      	uxtb	r4, r4
 801d7f2:	f3bf 8f5b 	dmb	ish
 801d7f6:	2c00      	cmp	r4, #0
 801d7f8:	d1f4      	bne.n	801d7e4 <__atomic_exchange_8+0x3c>
 801d7fa:	e9de 0100 	ldrd	r0, r1, [lr]
 801d7fe:	e9ce 2300 	strd	r2, r3, [lr]
 801d802:	f3bf 8f5b 	dmb	ish
 801d806:	f805 400c 	strb.w	r4, [r5, ip]
 801d80a:	bd70      	pop	{r4, r5, r6, pc}
 801d80c:	27d4eb2d 	.word	0x27d4eb2d
 801d810:	b21642c9 	.word	0xb21642c9
 801d814:	20016c70 	.word	0x20016c70

0801d818 <rcutils_is_directory>:
 801d818:	2000      	movs	r0, #0
 801d81a:	4770      	bx	lr

0801d81c <rcutils_join_path>:
 801d81c:	b082      	sub	sp, #8
 801d81e:	2000      	movs	r0, #0
 801d820:	e88d 000c 	stmia.w	sp, {r2, r3}
 801d824:	b002      	add	sp, #8
 801d826:	4770      	bx	lr

0801d828 <rcutils_to_native_path>:
 801d828:	b084      	sub	sp, #16
 801d82a:	2000      	movs	r0, #0
 801d82c:	f10d 0c04 	add.w	ip, sp, #4
 801d830:	b004      	add	sp, #16
 801d832:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801d836:	4770      	bx	lr

0801d838 <rcutils_string_array_fini>:
 801d838:	b328      	cbz	r0, 801d886 <rcutils_string_array_fini+0x4e>
 801d83a:	b570      	push	{r4, r5, r6, lr}
 801d83c:	4604      	mov	r4, r0
 801d83e:	6840      	ldr	r0, [r0, #4]
 801d840:	b1e0      	cbz	r0, 801d87c <rcutils_string_array_fini+0x44>
 801d842:	f104 0008 	add.w	r0, r4, #8
 801d846:	f7f7 fbad 	bl	8014fa4 <rcutils_allocator_is_valid>
 801d84a:	b1c0      	cbz	r0, 801d87e <rcutils_string_array_fini+0x46>
 801d84c:	6823      	ldr	r3, [r4, #0]
 801d84e:	b1c3      	cbz	r3, 801d882 <rcutils_string_array_fini+0x4a>
 801d850:	2500      	movs	r5, #0
 801d852:	6860      	ldr	r0, [r4, #4]
 801d854:	462e      	mov	r6, r5
 801d856:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d85a:	68e3      	ldr	r3, [r4, #12]
 801d85c:	69a1      	ldr	r1, [r4, #24]
 801d85e:	4798      	blx	r3
 801d860:	e9d4 3000 	ldrd	r3, r0, [r4]
 801d864:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801d868:	3501      	adds	r5, #1
 801d86a:	429d      	cmp	r5, r3
 801d86c:	d3f3      	bcc.n	801d856 <rcutils_string_array_fini+0x1e>
 801d86e:	68e3      	ldr	r3, [r4, #12]
 801d870:	69a1      	ldr	r1, [r4, #24]
 801d872:	4798      	blx	r3
 801d874:	2300      	movs	r3, #0
 801d876:	4618      	mov	r0, r3
 801d878:	e9c4 3300 	strd	r3, r3, [r4]
 801d87c:	bd70      	pop	{r4, r5, r6, pc}
 801d87e:	200b      	movs	r0, #11
 801d880:	bd70      	pop	{r4, r5, r6, pc}
 801d882:	6860      	ldr	r0, [r4, #4]
 801d884:	e7f3      	b.n	801d86e <rcutils_string_array_fini+0x36>
 801d886:	200b      	movs	r0, #11
 801d888:	4770      	bx	lr
 801d88a:	bf00      	nop

0801d88c <rcutils_get_zero_initialized_string_map>:
 801d88c:	2000      	movs	r0, #0
 801d88e:	4b01      	ldr	r3, [pc, #4]	; (801d894 <rcutils_get_zero_initialized_string_map+0x8>)
 801d890:	6018      	str	r0, [r3, #0]
 801d892:	4770      	bx	lr
 801d894:	20016c88 	.word	0x20016c88

0801d898 <rcutils_string_map_reserve>:
 801d898:	2800      	cmp	r0, #0
 801d89a:	d05e      	beq.n	801d95a <rcutils_string_map_reserve+0xc2>
 801d89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8a0:	460c      	mov	r4, r1
 801d8a2:	6801      	ldr	r1, [r0, #0]
 801d8a4:	b082      	sub	sp, #8
 801d8a6:	4605      	mov	r5, r0
 801d8a8:	b129      	cbz	r1, 801d8b6 <rcutils_string_map_reserve+0x1e>
 801d8aa:	68cb      	ldr	r3, [r1, #12]
 801d8ac:	42a3      	cmp	r3, r4
 801d8ae:	d906      	bls.n	801d8be <rcutils_string_map_reserve+0x26>
 801d8b0:	461c      	mov	r4, r3
 801d8b2:	2900      	cmp	r1, #0
 801d8b4:	d1f9      	bne.n	801d8aa <rcutils_string_map_reserve+0x12>
 801d8b6:	201f      	movs	r0, #31
 801d8b8:	b002      	add	sp, #8
 801d8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8be:	688b      	ldr	r3, [r1, #8]
 801d8c0:	42a3      	cmp	r3, r4
 801d8c2:	d046      	beq.n	801d952 <rcutils_string_map_reserve+0xba>
 801d8c4:	6a0e      	ldr	r6, [r1, #32]
 801d8c6:	2c00      	cmp	r4, #0
 801d8c8:	d033      	beq.n	801d932 <rcutils_string_map_reserve+0x9a>
 801d8ca:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801d8ce:	d242      	bcs.n	801d956 <rcutils_string_map_reserve+0xbe>
 801d8d0:	00a7      	lsls	r7, r4, #2
 801d8d2:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801d8d6:	6808      	ldr	r0, [r1, #0]
 801d8d8:	4632      	mov	r2, r6
 801d8da:	4639      	mov	r1, r7
 801d8dc:	47c0      	blx	r8
 801d8de:	2800      	cmp	r0, #0
 801d8e0:	d039      	beq.n	801d956 <rcutils_string_map_reserve+0xbe>
 801d8e2:	682b      	ldr	r3, [r5, #0]
 801d8e4:	4632      	mov	r2, r6
 801d8e6:	4639      	mov	r1, r7
 801d8e8:	6018      	str	r0, [r3, #0]
 801d8ea:	6858      	ldr	r0, [r3, #4]
 801d8ec:	47c0      	blx	r8
 801d8ee:	2800      	cmp	r0, #0
 801d8f0:	d031      	beq.n	801d956 <rcutils_string_map_reserve+0xbe>
 801d8f2:	682d      	ldr	r5, [r5, #0]
 801d8f4:	68ab      	ldr	r3, [r5, #8]
 801d8f6:	6068      	str	r0, [r5, #4]
 801d8f8:	42a3      	cmp	r3, r4
 801d8fa:	d225      	bcs.n	801d948 <rcutils_string_map_reserve+0xb0>
 801d8fc:	682a      	ldr	r2, [r5, #0]
 801d8fe:	eb00 0c07 	add.w	ip, r0, r7
 801d902:	0099      	lsls	r1, r3, #2
 801d904:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801d908:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801d90c:	45e6      	cmp	lr, ip
 801d90e:	d203      	bcs.n	801d918 <rcutils_string_map_reserve+0x80>
 801d910:	eb02 0c07 	add.w	ip, r2, r7
 801d914:	4566      	cmp	r6, ip
 801d916:	d322      	bcc.n	801d95e <rcutils_string_map_reserve+0xc6>
 801d918:	1ae3      	subs	r3, r4, r3
 801d91a:	4670      	mov	r0, lr
 801d91c:	2100      	movs	r1, #0
 801d91e:	009a      	lsls	r2, r3, #2
 801d920:	9201      	str	r2, [sp, #4]
 801d922:	f003 f9cf 	bl	8020cc4 <memset>
 801d926:	9a01      	ldr	r2, [sp, #4]
 801d928:	2100      	movs	r1, #0
 801d92a:	4630      	mov	r0, r6
 801d92c:	f003 f9ca 	bl	8020cc4 <memset>
 801d930:	e00a      	b.n	801d948 <rcutils_string_map_reserve+0xb0>
 801d932:	694f      	ldr	r7, [r1, #20]
 801d934:	6808      	ldr	r0, [r1, #0]
 801d936:	4631      	mov	r1, r6
 801d938:	47b8      	blx	r7
 801d93a:	682b      	ldr	r3, [r5, #0]
 801d93c:	4631      	mov	r1, r6
 801d93e:	6858      	ldr	r0, [r3, #4]
 801d940:	601c      	str	r4, [r3, #0]
 801d942:	47b8      	blx	r7
 801d944:	682d      	ldr	r5, [r5, #0]
 801d946:	606c      	str	r4, [r5, #4]
 801d948:	2000      	movs	r0, #0
 801d94a:	60ac      	str	r4, [r5, #8]
 801d94c:	b002      	add	sp, #8
 801d94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d952:	2000      	movs	r0, #0
 801d954:	e7b0      	b.n	801d8b8 <rcutils_string_map_reserve+0x20>
 801d956:	200a      	movs	r0, #10
 801d958:	e7ae      	b.n	801d8b8 <rcutils_string_map_reserve+0x20>
 801d95a:	200b      	movs	r0, #11
 801d95c:	4770      	bx	lr
 801d95e:	1f0b      	subs	r3, r1, #4
 801d960:	4418      	add	r0, r3
 801d962:	4413      	add	r3, r2
 801d964:	3a04      	subs	r2, #4
 801d966:	4417      	add	r7, r2
 801d968:	2200      	movs	r2, #0
 801d96a:	f843 2f04 	str.w	r2, [r3, #4]!
 801d96e:	42bb      	cmp	r3, r7
 801d970:	f840 2f04 	str.w	r2, [r0, #4]!
 801d974:	d1f9      	bne.n	801d96a <rcutils_string_map_reserve+0xd2>
 801d976:	e7e7      	b.n	801d948 <rcutils_string_map_reserve+0xb0>

0801d978 <rcutils_string_map_init>:
 801d978:	b082      	sub	sp, #8
 801d97a:	b570      	push	{r4, r5, r6, lr}
 801d97c:	ac04      	add	r4, sp, #16
 801d97e:	e884 000c 	stmia.w	r4, {r2, r3}
 801d982:	b380      	cbz	r0, 801d9e6 <rcutils_string_map_init+0x6e>
 801d984:	6806      	ldr	r6, [r0, #0]
 801d986:	4604      	mov	r4, r0
 801d988:	b12e      	cbz	r6, 801d996 <rcutils_string_map_init+0x1e>
 801d98a:	251e      	movs	r5, #30
 801d98c:	4628      	mov	r0, r5
 801d98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d992:	b002      	add	sp, #8
 801d994:	4770      	bx	lr
 801d996:	a804      	add	r0, sp, #16
 801d998:	460d      	mov	r5, r1
 801d99a:	f7f7 fb03 	bl	8014fa4 <rcutils_allocator_is_valid>
 801d99e:	b310      	cbz	r0, 801d9e6 <rcutils_string_map_init+0x6e>
 801d9a0:	9b04      	ldr	r3, [sp, #16]
 801d9a2:	2024      	movs	r0, #36	; 0x24
 801d9a4:	9908      	ldr	r1, [sp, #32]
 801d9a6:	4798      	blx	r3
 801d9a8:	6020      	str	r0, [r4, #0]
 801d9aa:	b310      	cbz	r0, 801d9f2 <rcutils_string_map_init+0x7a>
 801d9ac:	f10d 0e10 	add.w	lr, sp, #16
 801d9b0:	f100 0c10 	add.w	ip, r0, #16
 801d9b4:	e9c0 6600 	strd	r6, r6, [r0]
 801d9b8:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801d9bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d9c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d9c4:	f8de 3000 	ldr.w	r3, [lr]
 801d9c8:	4629      	mov	r1, r5
 801d9ca:	4620      	mov	r0, r4
 801d9cc:	f8cc 3000 	str.w	r3, [ip]
 801d9d0:	f7ff ff62 	bl	801d898 <rcutils_string_map_reserve>
 801d9d4:	4605      	mov	r5, r0
 801d9d6:	2800      	cmp	r0, #0
 801d9d8:	d0d8      	beq.n	801d98c <rcutils_string_map_init+0x14>
 801d9da:	9b05      	ldr	r3, [sp, #20]
 801d9dc:	9908      	ldr	r1, [sp, #32]
 801d9de:	6820      	ldr	r0, [r4, #0]
 801d9e0:	4798      	blx	r3
 801d9e2:	6026      	str	r6, [r4, #0]
 801d9e4:	e7d2      	b.n	801d98c <rcutils_string_map_init+0x14>
 801d9e6:	250b      	movs	r5, #11
 801d9e8:	4628      	mov	r0, r5
 801d9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d9ee:	b002      	add	sp, #8
 801d9f0:	4770      	bx	lr
 801d9f2:	250a      	movs	r5, #10
 801d9f4:	e7ca      	b.n	801d98c <rcutils_string_map_init+0x14>
 801d9f6:	bf00      	nop

0801d9f8 <rcutils_string_map_fini>:
 801d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9fc:	b082      	sub	sp, #8
 801d9fe:	2800      	cmp	r0, #0
 801da00:	d03a      	beq.n	801da78 <rcutils_string_map_fini+0x80>
 801da02:	6804      	ldr	r4, [r0, #0]
 801da04:	4606      	mov	r6, r0
 801da06:	2c00      	cmp	r4, #0
 801da08:	d032      	beq.n	801da70 <rcutils_string_map_fini+0x78>
 801da0a:	68a3      	ldr	r3, [r4, #8]
 801da0c:	b32b      	cbz	r3, 801da5a <rcutils_string_map_fini+0x62>
 801da0e:	2500      	movs	r5, #0
 801da10:	6822      	ldr	r2, [r4, #0]
 801da12:	462f      	mov	r7, r5
 801da14:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801da18:	b1e0      	cbz	r0, 801da54 <rcutils_string_map_fini+0x5c>
 801da1a:	6a21      	ldr	r1, [r4, #32]
 801da1c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801da20:	9101      	str	r1, [sp, #4]
 801da22:	47c0      	blx	r8
 801da24:	9901      	ldr	r1, [sp, #4]
 801da26:	e9d4 3200 	ldrd	r3, r2, [r4]
 801da2a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801da2e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801da32:	47c0      	blx	r8
 801da34:	68e3      	ldr	r3, [r4, #12]
 801da36:	6862      	ldr	r2, [r4, #4]
 801da38:	3b01      	subs	r3, #1
 801da3a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801da3e:	3501      	adds	r5, #1
 801da40:	60e3      	str	r3, [r4, #12]
 801da42:	6834      	ldr	r4, [r6, #0]
 801da44:	68a3      	ldr	r3, [r4, #8]
 801da46:	429d      	cmp	r5, r3
 801da48:	d207      	bcs.n	801da5a <rcutils_string_map_fini+0x62>
 801da4a:	6822      	ldr	r2, [r4, #0]
 801da4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801da50:	2800      	cmp	r0, #0
 801da52:	d1e2      	bne.n	801da1a <rcutils_string_map_fini+0x22>
 801da54:	3501      	adds	r5, #1
 801da56:	429d      	cmp	r5, r3
 801da58:	d3dc      	bcc.n	801da14 <rcutils_string_map_fini+0x1c>
 801da5a:	2100      	movs	r1, #0
 801da5c:	4630      	mov	r0, r6
 801da5e:	f7ff ff1b 	bl	801d898 <rcutils_string_map_reserve>
 801da62:	4604      	mov	r4, r0
 801da64:	b920      	cbnz	r0, 801da70 <rcutils_string_map_fini+0x78>
 801da66:	6830      	ldr	r0, [r6, #0]
 801da68:	6943      	ldr	r3, [r0, #20]
 801da6a:	6a01      	ldr	r1, [r0, #32]
 801da6c:	4798      	blx	r3
 801da6e:	6034      	str	r4, [r6, #0]
 801da70:	4620      	mov	r0, r4
 801da72:	b002      	add	sp, #8
 801da74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da78:	240b      	movs	r4, #11
 801da7a:	4620      	mov	r0, r4
 801da7c:	b002      	add	sp, #8
 801da7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da82:	bf00      	nop

0801da84 <rcutils_string_map_getn>:
 801da84:	b378      	cbz	r0, 801dae6 <rcutils_string_map_getn+0x62>
 801da86:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da8a:	f8d0 b000 	ldr.w	fp, [r0]
 801da8e:	f1bb 0f00 	cmp.w	fp, #0
 801da92:	d01f      	beq.n	801dad4 <rcutils_string_map_getn+0x50>
 801da94:	fab1 f481 	clz	r4, r1
 801da98:	4688      	mov	r8, r1
 801da9a:	0964      	lsrs	r4, r4, #5
 801da9c:	b1d1      	cbz	r1, 801dad4 <rcutils_string_map_getn+0x50>
 801da9e:	f8db 7008 	ldr.w	r7, [fp, #8]
 801daa2:	f8db 6000 	ldr.w	r6, [fp]
 801daa6:	b1af      	cbz	r7, 801dad4 <rcutils_string_map_getn+0x50>
 801daa8:	4691      	mov	r9, r2
 801daaa:	3e04      	subs	r6, #4
 801daac:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801dab0:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801dab4:	3401      	adds	r4, #1
 801dab6:	4628      	mov	r0, r5
 801dab8:	b155      	cbz	r5, 801dad0 <rcutils_string_map_getn+0x4c>
 801daba:	f7e2 fc21 	bl	8000300 <strlen>
 801dabe:	4602      	mov	r2, r0
 801dac0:	4629      	mov	r1, r5
 801dac2:	4640      	mov	r0, r8
 801dac4:	454a      	cmp	r2, r9
 801dac6:	bf38      	it	cc
 801dac8:	464a      	movcc	r2, r9
 801daca:	f003 f910 	bl	8020cee <strncmp>
 801dace:	b120      	cbz	r0, 801dada <rcutils_string_map_getn+0x56>
 801dad0:	42a7      	cmp	r7, r4
 801dad2:	d1eb      	bne.n	801daac <rcutils_string_map_getn+0x28>
 801dad4:	2000      	movs	r0, #0
 801dad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dada:	f8db 3004 	ldr.w	r3, [fp, #4]
 801dade:	f853 000a 	ldr.w	r0, [r3, sl]
 801dae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dae6:	4770      	bx	lr

0801dae8 <rmw_get_zero_initialized_context>:
 801dae8:	b510      	push	{r4, lr}
 801daea:	4604      	mov	r4, r0
 801daec:	3010      	adds	r0, #16
 801daee:	f7f7 fc77 	bl	80153e0 <rmw_get_zero_initialized_init_options>
 801daf2:	2300      	movs	r3, #0
 801daf4:	4620      	mov	r0, r4
 801daf6:	60a3      	str	r3, [r4, #8]
 801daf8:	64a3      	str	r3, [r4, #72]	; 0x48
 801dafa:	64e3      	str	r3, [r4, #76]	; 0x4c
 801dafc:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801db08 <rmw_get_zero_initialized_context+0x20>
 801db00:	ed84 7b00 	vstr	d7, [r4]
 801db04:	bd10      	pop	{r4, pc}
 801db06:	bf00      	nop
	...

0801db10 <rmw_time_equal>:
 801db10:	b4f0      	push	{r4, r5, r6, r7}
 801db12:	b084      	sub	sp, #16
 801db14:	ac04      	add	r4, sp, #16
 801db16:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801db1a:	4603      	mov	r3, r0
 801db1c:	4925      	ldr	r1, [pc, #148]	; (801dbb4 <rmw_time_equal+0xa4>)
 801db1e:	9d01      	ldr	r5, [sp, #4]
 801db20:	4610      	mov	r0, r2
 801db22:	4299      	cmp	r1, r3
 801db24:	f04f 0202 	mov.w	r2, #2
 801db28:	9e03      	ldr	r6, [sp, #12]
 801db2a:	41aa      	sbcs	r2, r5
 801db2c:	d330      	bcc.n	801db90 <rmw_time_equal+0x80>
 801db2e:	4c22      	ldr	r4, [pc, #136]	; (801dbb8 <rmw_time_equal+0xa8>)
 801db30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801db34:	fba3 3204 	umull	r3, r2, r3, r4
 801db38:	fb04 2205 	mla	r2, r4, r5, r2
 801db3c:	43dd      	mvns	r5, r3
 801db3e:	1a8c      	subs	r4, r1, r2
 801db40:	4285      	cmp	r5, r0
 801db42:	41b4      	sbcs	r4, r6
 801db44:	d332      	bcc.n	801dbac <rmw_time_equal+0x9c>
 801db46:	eb10 0c03 	adds.w	ip, r0, r3
 801db4a:	eb42 0106 	adc.w	r1, r2, r6
 801db4e:	4819      	ldr	r0, [pc, #100]	; (801dbb4 <rmw_time_equal+0xa4>)
 801db50:	2202      	movs	r2, #2
 801db52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801db54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801db56:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801db5a:	4298      	cmp	r0, r3
 801db5c:	41b2      	sbcs	r2, r6
 801db5e:	d31c      	bcc.n	801db9a <rmw_time_equal+0x8a>
 801db60:	4c15      	ldr	r4, [pc, #84]	; (801dbb8 <rmw_time_equal+0xa8>)
 801db62:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801db66:	fba3 3204 	umull	r3, r2, r3, r4
 801db6a:	fb04 2206 	mla	r2, r4, r6, r2
 801db6e:	43de      	mvns	r6, r3
 801db70:	1a84      	subs	r4, r0, r2
 801db72:	42ae      	cmp	r6, r5
 801db74:	41bc      	sbcs	r4, r7
 801db76:	d315      	bcc.n	801dba4 <rmw_time_equal+0x94>
 801db78:	195b      	adds	r3, r3, r5
 801db7a:	eb42 0207 	adc.w	r2, r2, r7
 801db7e:	428a      	cmp	r2, r1
 801db80:	bf08      	it	eq
 801db82:	4563      	cmpeq	r3, ip
 801db84:	bf0c      	ite	eq
 801db86:	2001      	moveq	r0, #1
 801db88:	2000      	movne	r0, #0
 801db8a:	b004      	add	sp, #16
 801db8c:	bcf0      	pop	{r4, r5, r6, r7}
 801db8e:	4770      	bx	lr
 801db90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801db94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801db98:	e7d9      	b.n	801db4e <rmw_time_equal+0x3e>
 801db9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801db9e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801dba2:	e7ec      	b.n	801db7e <rmw_time_equal+0x6e>
 801dba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dba8:	4602      	mov	r2, r0
 801dbaa:	e7e8      	b.n	801db7e <rmw_time_equal+0x6e>
 801dbac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dbb0:	e7cd      	b.n	801db4e <rmw_time_equal+0x3e>
 801dbb2:	bf00      	nop
 801dbb4:	25c17d04 	.word	0x25c17d04
 801dbb8:	3b9aca00 	.word	0x3b9aca00

0801dbbc <rmw_time_total_nsec>:
 801dbbc:	b470      	push	{r4, r5, r6}
 801dbbe:	b085      	sub	sp, #20
 801dbc0:	ac04      	add	r4, sp, #16
 801dbc2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801dbc6:	4603      	mov	r3, r0
 801dbc8:	4913      	ldr	r1, [pc, #76]	; (801dc18 <rmw_time_total_nsec+0x5c>)
 801dbca:	9d01      	ldr	r5, [sp, #4]
 801dbcc:	4610      	mov	r0, r2
 801dbce:	4299      	cmp	r1, r3
 801dbd0:	f04f 0202 	mov.w	r2, #2
 801dbd4:	9e03      	ldr	r6, [sp, #12]
 801dbd6:	41aa      	sbcs	r2, r5
 801dbd8:	d311      	bcc.n	801dbfe <rmw_time_total_nsec+0x42>
 801dbda:	4c10      	ldr	r4, [pc, #64]	; (801dc1c <rmw_time_total_nsec+0x60>)
 801dbdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dbe0:	fba3 3204 	umull	r3, r2, r3, r4
 801dbe4:	fb04 2205 	mla	r2, r4, r5, r2
 801dbe8:	43dd      	mvns	r5, r3
 801dbea:	1a8c      	subs	r4, r1, r2
 801dbec:	4285      	cmp	r5, r0
 801dbee:	41b4      	sbcs	r4, r6
 801dbf0:	d30c      	bcc.n	801dc0c <rmw_time_total_nsec+0x50>
 801dbf2:	1818      	adds	r0, r3, r0
 801dbf4:	eb42 0106 	adc.w	r1, r2, r6
 801dbf8:	b005      	add	sp, #20
 801dbfa:	bc70      	pop	{r4, r5, r6}
 801dbfc:	4770      	bx	lr
 801dbfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dc06:	b005      	add	sp, #20
 801dc08:	bc70      	pop	{r4, r5, r6}
 801dc0a:	4770      	bx	lr
 801dc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc10:	b005      	add	sp, #20
 801dc12:	bc70      	pop	{r4, r5, r6}
 801dc14:	4770      	bx	lr
 801dc16:	bf00      	nop
 801dc18:	25c17d04 	.word	0x25c17d04
 801dc1c:	3b9aca00 	.word	0x3b9aca00

0801dc20 <rmw_validate_full_topic_name>:
 801dc20:	2800      	cmp	r0, #0
 801dc22:	d05d      	beq.n	801dce0 <rmw_validate_full_topic_name+0xc0>
 801dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc28:	460d      	mov	r5, r1
 801dc2a:	2900      	cmp	r1, #0
 801dc2c:	d05a      	beq.n	801dce4 <rmw_validate_full_topic_name+0xc4>
 801dc2e:	4604      	mov	r4, r0
 801dc30:	4616      	mov	r6, r2
 801dc32:	f7e2 fb65 	bl	8000300 <strlen>
 801dc36:	b150      	cbz	r0, 801dc4e <rmw_validate_full_topic_name+0x2e>
 801dc38:	7823      	ldrb	r3, [r4, #0]
 801dc3a:	2b2f      	cmp	r3, #47	; 0x2f
 801dc3c:	d00e      	beq.n	801dc5c <rmw_validate_full_topic_name+0x3c>
 801dc3e:	2302      	movs	r3, #2
 801dc40:	602b      	str	r3, [r5, #0]
 801dc42:	b146      	cbz	r6, 801dc56 <rmw_validate_full_topic_name+0x36>
 801dc44:	2300      	movs	r3, #0
 801dc46:	4618      	mov	r0, r3
 801dc48:	6033      	str	r3, [r6, #0]
 801dc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc4e:	2301      	movs	r3, #1
 801dc50:	602b      	str	r3, [r5, #0]
 801dc52:	2e00      	cmp	r6, #0
 801dc54:	d1f6      	bne.n	801dc44 <rmw_validate_full_topic_name+0x24>
 801dc56:	2000      	movs	r0, #0
 801dc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc5c:	1e43      	subs	r3, r0, #1
 801dc5e:	5ce2      	ldrb	r2, [r4, r3]
 801dc60:	2a2f      	cmp	r2, #47	; 0x2f
 801dc62:	d041      	beq.n	801dce8 <rmw_validate_full_topic_name+0xc8>
 801dc64:	1e62      	subs	r2, r4, #1
 801dc66:	f1c4 0e01 	rsb	lr, r4, #1
 801dc6a:	eb02 0800 	add.w	r8, r2, r0
 801dc6e:	eb0e 0702 	add.w	r7, lr, r2
 801dc72:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801dc76:	f023 0120 	bic.w	r1, r3, #32
 801dc7a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801dc7e:	3941      	subs	r1, #65	; 0x41
 801dc80:	2919      	cmp	r1, #25
 801dc82:	d90f      	bls.n	801dca4 <rmw_validate_full_topic_name+0x84>
 801dc84:	f1bc 0f0a 	cmp.w	ip, #10
 801dc88:	d90c      	bls.n	801dca4 <rmw_validate_full_topic_name+0x84>
 801dc8a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801dc8e:	fab3 f383 	clz	r3, r3
 801dc92:	095b      	lsrs	r3, r3, #5
 801dc94:	b933      	cbnz	r3, 801dca4 <rmw_validate_full_topic_name+0x84>
 801dc96:	2204      	movs	r2, #4
 801dc98:	602a      	str	r2, [r5, #0]
 801dc9a:	2e00      	cmp	r6, #0
 801dc9c:	d0db      	beq.n	801dc56 <rmw_validate_full_topic_name+0x36>
 801dc9e:	4618      	mov	r0, r3
 801dca0:	6037      	str	r7, [r6, #0]
 801dca2:	e7d2      	b.n	801dc4a <rmw_validate_full_topic_name+0x2a>
 801dca4:	4542      	cmp	r2, r8
 801dca6:	d1e2      	bne.n	801dc6e <rmw_validate_full_topic_name+0x4e>
 801dca8:	2301      	movs	r3, #1
 801dcaa:	4f1a      	ldr	r7, [pc, #104]	; (801dd14 <rmw_validate_full_topic_name+0xf4>)
 801dcac:	e004      	b.n	801dcb8 <rmw_validate_full_topic_name+0x98>
 801dcae:	4298      	cmp	r0, r3
 801dcb0:	f104 0401 	add.w	r4, r4, #1
 801dcb4:	4613      	mov	r3, r2
 801dcb6:	d91c      	bls.n	801dcf2 <rmw_validate_full_topic_name+0xd2>
 801dcb8:	4298      	cmp	r0, r3
 801dcba:	f103 0201 	add.w	r2, r3, #1
 801dcbe:	d0f6      	beq.n	801dcae <rmw_validate_full_topic_name+0x8e>
 801dcc0:	7821      	ldrb	r1, [r4, #0]
 801dcc2:	292f      	cmp	r1, #47	; 0x2f
 801dcc4:	d1f3      	bne.n	801dcae <rmw_validate_full_topic_name+0x8e>
 801dcc6:	7861      	ldrb	r1, [r4, #1]
 801dcc8:	292f      	cmp	r1, #47	; 0x2f
 801dcca:	d01e      	beq.n	801dd0a <rmw_validate_full_topic_name+0xea>
 801dccc:	5dc9      	ldrb	r1, [r1, r7]
 801dcce:	0749      	lsls	r1, r1, #29
 801dcd0:	d5ed      	bpl.n	801dcae <rmw_validate_full_topic_name+0x8e>
 801dcd2:	2206      	movs	r2, #6
 801dcd4:	602a      	str	r2, [r5, #0]
 801dcd6:	2e00      	cmp	r6, #0
 801dcd8:	d0bd      	beq.n	801dc56 <rmw_validate_full_topic_name+0x36>
 801dcda:	2000      	movs	r0, #0
 801dcdc:	6033      	str	r3, [r6, #0]
 801dcde:	e7b4      	b.n	801dc4a <rmw_validate_full_topic_name+0x2a>
 801dce0:	200b      	movs	r0, #11
 801dce2:	4770      	bx	lr
 801dce4:	200b      	movs	r0, #11
 801dce6:	e7b0      	b.n	801dc4a <rmw_validate_full_topic_name+0x2a>
 801dce8:	2203      	movs	r2, #3
 801dcea:	602a      	str	r2, [r5, #0]
 801dcec:	2e00      	cmp	r6, #0
 801dcee:	d1f4      	bne.n	801dcda <rmw_validate_full_topic_name+0xba>
 801dcf0:	e7b1      	b.n	801dc56 <rmw_validate_full_topic_name+0x36>
 801dcf2:	28f7      	cmp	r0, #247	; 0xf7
 801dcf4:	d803      	bhi.n	801dcfe <rmw_validate_full_topic_name+0xde>
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	602b      	str	r3, [r5, #0]
 801dcfc:	e7a5      	b.n	801dc4a <rmw_validate_full_topic_name+0x2a>
 801dcfe:	2307      	movs	r3, #7
 801dd00:	602b      	str	r3, [r5, #0]
 801dd02:	2e00      	cmp	r6, #0
 801dd04:	d0a7      	beq.n	801dc56 <rmw_validate_full_topic_name+0x36>
 801dd06:	23f6      	movs	r3, #246	; 0xf6
 801dd08:	e7e7      	b.n	801dcda <rmw_validate_full_topic_name+0xba>
 801dd0a:	2205      	movs	r2, #5
 801dd0c:	602a      	str	r2, [r5, #0]
 801dd0e:	2e00      	cmp	r6, #0
 801dd10:	d1e3      	bne.n	801dcda <rmw_validate_full_topic_name+0xba>
 801dd12:	e7a0      	b.n	801dc56 <rmw_validate_full_topic_name+0x36>
 801dd14:	08025964 	.word	0x08025964

0801dd18 <on_status>:
 801dd18:	b082      	sub	sp, #8
 801dd1a:	b002      	add	sp, #8
 801dd1c:	4770      	bx	lr
 801dd1e:	bf00      	nop

0801dd20 <on_topic>:
 801dd20:	4a23      	ldr	r2, [pc, #140]	; (801ddb0 <on_topic+0x90>)
 801dd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd26:	6812      	ldr	r2, [r2, #0]
 801dd28:	b094      	sub	sp, #80	; 0x50
 801dd2a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801dd2c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801dd30:	9113      	str	r1, [sp, #76]	; 0x4c
 801dd32:	9312      	str	r3, [sp, #72]	; 0x48
 801dd34:	b3c2      	cbz	r2, 801dda8 <on_topic+0x88>
 801dd36:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801dd3a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801dd3e:	e001      	b.n	801dd44 <on_topic+0x24>
 801dd40:	6852      	ldr	r2, [r2, #4]
 801dd42:	b38a      	cbz	r2, 801dda8 <on_topic+0x88>
 801dd44:	6894      	ldr	r4, [r2, #8]
 801dd46:	8aa3      	ldrh	r3, [r4, #20]
 801dd48:	428b      	cmp	r3, r1
 801dd4a:	d1f9      	bne.n	801dd40 <on_topic+0x20>
 801dd4c:	7da3      	ldrb	r3, [r4, #22]
 801dd4e:	4283      	cmp	r3, r0
 801dd50:	d1f6      	bne.n	801dd40 <on_topic+0x20>
 801dd52:	2248      	movs	r2, #72	; 0x48
 801dd54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801dd58:	4668      	mov	r0, sp
 801dd5a:	f003 f880 	bl	8020e5e <memcpy>
 801dd5e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801dd62:	4620      	mov	r0, r4
 801dd64:	cb0c      	ldmia	r3, {r2, r3}
 801dd66:	f7f8 ffdf 	bl	8016d28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801dd6a:	4607      	mov	r7, r0
 801dd6c:	b1e0      	cbz	r0, 801dda8 <on_topic+0x88>
 801dd6e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801dd72:	462a      	mov	r2, r5
 801dd74:	4630      	mov	r0, r6
 801dd76:	f108 0110 	add.w	r1, r8, #16
 801dd7a:	f7f9 fc8f 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801dd7e:	b930      	cbnz	r0, 801dd8e <on_topic+0x6e>
 801dd80:	4639      	mov	r1, r7
 801dd82:	480c      	ldr	r0, [pc, #48]	; (801ddb4 <on_topic+0x94>)
 801dd84:	b014      	add	sp, #80	; 0x50
 801dd86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dd8a:	f000 b8bd 	b.w	801df08 <put_memory>
 801dd8e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801dd92:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801dd96:	f000 fb33 	bl	801e400 <rmw_uros_epoch_nanos>
 801dd9a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801dd9e:	2305      	movs	r3, #5
 801dda0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801dda4:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801dda8:	b014      	add	sp, #80	; 0x50
 801ddaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddae:	bf00      	nop
 801ddb0:	20016c24 	.word	0x20016c24
 801ddb4:	20016c14 	.word	0x20016c14

0801ddb8 <on_request>:
 801ddb8:	4824      	ldr	r0, [pc, #144]	; (801de4c <on_request+0x94>)
 801ddba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddbe:	6800      	ldr	r0, [r0, #0]
 801ddc0:	b094      	sub	sp, #80	; 0x50
 801ddc2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801ddc4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801ddc8:	9113      	str	r1, [sp, #76]	; 0x4c
 801ddca:	2800      	cmp	r0, #0
 801ddcc:	d03b      	beq.n	801de46 <on_request+0x8e>
 801ddce:	461d      	mov	r5, r3
 801ddd0:	e001      	b.n	801ddd6 <on_request+0x1e>
 801ddd2:	6840      	ldr	r0, [r0, #4]
 801ddd4:	b3b8      	cbz	r0, 801de46 <on_request+0x8e>
 801ddd6:	6884      	ldr	r4, [r0, #8]
 801ddd8:	8b21      	ldrh	r1, [r4, #24]
 801ddda:	4291      	cmp	r1, r2
 801dddc:	d1f9      	bne.n	801ddd2 <on_request+0x1a>
 801ddde:	2248      	movs	r2, #72	; 0x48
 801dde0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801dde4:	4668      	mov	r0, sp
 801dde6:	f003 f83a 	bl	8020e5e <memcpy>
 801ddea:	f104 0320 	add.w	r3, r4, #32
 801ddee:	4620      	mov	r0, r4
 801ddf0:	cb0c      	ldmia	r3, {r2, r3}
 801ddf2:	f7f8 ff99 	bl	8016d28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ddf6:	4680      	mov	r8, r0
 801ddf8:	b328      	cbz	r0, 801de46 <on_request+0x8e>
 801ddfa:	4630      	mov	r0, r6
 801ddfc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801de00:	463a      	mov	r2, r7
 801de02:	f106 0110 	add.w	r1, r6, #16
 801de06:	f7f9 fc49 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801de0a:	b930      	cbnz	r0, 801de1a <on_request+0x62>
 801de0c:	4641      	mov	r1, r8
 801de0e:	4810      	ldr	r0, [pc, #64]	; (801de50 <on_request+0x98>)
 801de10:	b014      	add	sp, #80	; 0x50
 801de12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de16:	f000 b877 	b.w	801df08 <put_memory>
 801de1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801de1c:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801de20:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801de24:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801de28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801de2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801de30:	e88c 0003 	stmia.w	ip, {r0, r1}
 801de34:	f000 fae4 	bl	801e400 <rmw_uros_epoch_nanos>
 801de38:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801de3c:	2303      	movs	r3, #3
 801de3e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801de42:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801de46:	b014      	add	sp, #80	; 0x50
 801de48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de4c:	20016bf4 	.word	0x20016bf4
 801de50:	20016c14 	.word	0x20016c14

0801de54 <on_reply>:
 801de54:	4822      	ldr	r0, [pc, #136]	; (801dee0 <on_reply+0x8c>)
 801de56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de5a:	6800      	ldr	r0, [r0, #0]
 801de5c:	b094      	sub	sp, #80	; 0x50
 801de5e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801de60:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801de64:	9113      	str	r1, [sp, #76]	; 0x4c
 801de66:	b3b8      	cbz	r0, 801ded8 <on_reply+0x84>
 801de68:	461d      	mov	r5, r3
 801de6a:	e001      	b.n	801de70 <on_reply+0x1c>
 801de6c:	6840      	ldr	r0, [r0, #4]
 801de6e:	b398      	cbz	r0, 801ded8 <on_reply+0x84>
 801de70:	6884      	ldr	r4, [r0, #8]
 801de72:	8b21      	ldrh	r1, [r4, #24]
 801de74:	4291      	cmp	r1, r2
 801de76:	d1f9      	bne.n	801de6c <on_reply+0x18>
 801de78:	2248      	movs	r2, #72	; 0x48
 801de7a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801de7e:	4668      	mov	r0, sp
 801de80:	f002 ffed 	bl	8020e5e <memcpy>
 801de84:	f104 0320 	add.w	r3, r4, #32
 801de88:	4620      	mov	r0, r4
 801de8a:	cb0c      	ldmia	r3, {r2, r3}
 801de8c:	f7f8 ff4c 	bl	8016d28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801de90:	4680      	mov	r8, r0
 801de92:	b308      	cbz	r0, 801ded8 <on_reply+0x84>
 801de94:	4630      	mov	r0, r6
 801de96:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801de9a:	463a      	mov	r2, r7
 801de9c:	f106 0110 	add.w	r1, r6, #16
 801dea0:	f7f9 fbfc 	bl	801769c <ucdr_deserialize_array_uint8_t>
 801dea4:	b930      	cbnz	r0, 801deb4 <on_reply+0x60>
 801dea6:	4641      	mov	r1, r8
 801dea8:	480e      	ldr	r0, [pc, #56]	; (801dee4 <on_reply+0x90>)
 801deaa:	b014      	add	sp, #80	; 0x50
 801deac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801deb0:	f000 b82a 	b.w	801df08 <put_memory>
 801deb4:	2200      	movs	r2, #0
 801deb6:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801deba:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801debe:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801dec2:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801dec6:	f000 fa9b 	bl	801e400 <rmw_uros_epoch_nanos>
 801deca:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801dece:	2304      	movs	r3, #4
 801ded0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ded4:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801ded8:	b014      	add	sp, #80	; 0x50
 801deda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dede:	bf00      	nop
 801dee0:	20012304 	.word	0x20012304
 801dee4:	20016c14 	.word	0x20016c14

0801dee8 <get_memory>:
 801dee8:	4603      	mov	r3, r0
 801deea:	6840      	ldr	r0, [r0, #4]
 801deec:	b158      	cbz	r0, 801df06 <get_memory+0x1e>
 801deee:	6842      	ldr	r2, [r0, #4]
 801def0:	605a      	str	r2, [r3, #4]
 801def2:	b10a      	cbz	r2, 801def8 <get_memory+0x10>
 801def4:	2100      	movs	r1, #0
 801def6:	6011      	str	r1, [r2, #0]
 801def8:	681a      	ldr	r2, [r3, #0]
 801defa:	6042      	str	r2, [r0, #4]
 801defc:	b102      	cbz	r2, 801df00 <get_memory+0x18>
 801defe:	6010      	str	r0, [r2, #0]
 801df00:	2200      	movs	r2, #0
 801df02:	6002      	str	r2, [r0, #0]
 801df04:	6018      	str	r0, [r3, #0]
 801df06:	4770      	bx	lr

0801df08 <put_memory>:
 801df08:	680b      	ldr	r3, [r1, #0]
 801df0a:	b10b      	cbz	r3, 801df10 <put_memory+0x8>
 801df0c:	684a      	ldr	r2, [r1, #4]
 801df0e:	605a      	str	r2, [r3, #4]
 801df10:	684a      	ldr	r2, [r1, #4]
 801df12:	b102      	cbz	r2, 801df16 <put_memory+0xe>
 801df14:	6013      	str	r3, [r2, #0]
 801df16:	6803      	ldr	r3, [r0, #0]
 801df18:	428b      	cmp	r3, r1
 801df1a:	6843      	ldr	r3, [r0, #4]
 801df1c:	bf08      	it	eq
 801df1e:	6002      	streq	r2, [r0, #0]
 801df20:	604b      	str	r3, [r1, #4]
 801df22:	b103      	cbz	r3, 801df26 <put_memory+0x1e>
 801df24:	6019      	str	r1, [r3, #0]
 801df26:	2300      	movs	r3, #0
 801df28:	600b      	str	r3, [r1, #0]
 801df2a:	6041      	str	r1, [r0, #4]
 801df2c:	4770      	bx	lr
 801df2e:	bf00      	nop

0801df30 <rmw_destroy_client>:
 801df30:	b570      	push	{r4, r5, r6, lr}
 801df32:	b128      	cbz	r0, 801df40 <rmw_destroy_client+0x10>
 801df34:	4604      	mov	r4, r0
 801df36:	6800      	ldr	r0, [r0, #0]
 801df38:	460d      	mov	r5, r1
 801df3a:	f7f9 f909 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 801df3e:	b910      	cbnz	r0, 801df46 <rmw_destroy_client+0x16>
 801df40:	2401      	movs	r4, #1
 801df42:	4620      	mov	r0, r4
 801df44:	bd70      	pop	{r4, r5, r6, pc}
 801df46:	6863      	ldr	r3, [r4, #4]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	d0f9      	beq.n	801df40 <rmw_destroy_client+0x10>
 801df4c:	2d00      	cmp	r5, #0
 801df4e:	d0f7      	beq.n	801df40 <rmw_destroy_client+0x10>
 801df50:	6828      	ldr	r0, [r5, #0]
 801df52:	f7f9 f8fd 	bl	8017150 <is_uxrce_rmw_identifier_valid>
 801df56:	2800      	cmp	r0, #0
 801df58:	d0f2      	beq.n	801df40 <rmw_destroy_client+0x10>
 801df5a:	686e      	ldr	r6, [r5, #4]
 801df5c:	2e00      	cmp	r6, #0
 801df5e:	d0ef      	beq.n	801df40 <rmw_destroy_client+0x10>
 801df60:	6864      	ldr	r4, [r4, #4]
 801df62:	6932      	ldr	r2, [r6, #16]
 801df64:	6920      	ldr	r0, [r4, #16]
 801df66:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801df6a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801df6e:	6819      	ldr	r1, [r3, #0]
 801df70:	f7f9 ff60 	bl	8017e34 <uxr_buffer_cancel_data>
 801df74:	4602      	mov	r2, r0
 801df76:	6920      	ldr	r0, [r4, #16]
 801df78:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801df7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801df80:	f7f8 ffd4 	bl	8016f2c <run_xrce_session>
 801df84:	6920      	ldr	r0, [r4, #16]
 801df86:	6932      	ldr	r2, [r6, #16]
 801df88:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801df8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801df90:	6819      	ldr	r1, [r3, #0]
 801df92:	f7f9 fbeb 	bl	801776c <uxr_buffer_delete_entity>
 801df96:	4602      	mov	r2, r0
 801df98:	6920      	ldr	r0, [r4, #16]
 801df9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801df9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801dfa2:	f7f8 ffc3 	bl	8016f2c <run_xrce_session>
 801dfa6:	4603      	mov	r3, r0
 801dfa8:	4628      	mov	r0, r5
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	bf14      	ite	ne
 801dfae:	2400      	movne	r4, #0
 801dfb0:	2402      	moveq	r4, #2
 801dfb2:	f7f8 fe97 	bl	8016ce4 <rmw_uxrce_fini_client_memory>
 801dfb6:	e7c4      	b.n	801df42 <rmw_destroy_client+0x12>

0801dfb8 <rmw_get_implementation_identifier>:
 801dfb8:	4b01      	ldr	r3, [pc, #4]	; (801dfc0 <rmw_get_implementation_identifier+0x8>)
 801dfba:	6818      	ldr	r0, [r3, #0]
 801dfbc:	4770      	bx	lr
 801dfbe:	bf00      	nop
 801dfc0:	080258bc 	.word	0x080258bc

0801dfc4 <rmw_create_guard_condition>:
 801dfc4:	b538      	push	{r3, r4, r5, lr}
 801dfc6:	4605      	mov	r5, r0
 801dfc8:	4808      	ldr	r0, [pc, #32]	; (801dfec <rmw_create_guard_condition+0x28>)
 801dfca:	f7ff ff8d 	bl	801dee8 <get_memory>
 801dfce:	4603      	mov	r3, r0
 801dfd0:	b148      	cbz	r0, 801dfe6 <rmw_create_guard_condition+0x22>
 801dfd2:	6884      	ldr	r4, [r0, #8]
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	61e5      	str	r5, [r4, #28]
 801dfd8:	7423      	strb	r3, [r4, #16]
 801dfda:	f7ff ffed 	bl	801dfb8 <rmw_get_implementation_identifier>
 801dfde:	f104 0314 	add.w	r3, r4, #20
 801dfe2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801dfe6:	4618      	mov	r0, r3
 801dfe8:	bd38      	pop	{r3, r4, r5, pc}
 801dfea:	bf00      	nop
 801dfec:	20016bb4 	.word	0x20016bb4

0801dff0 <rmw_destroy_guard_condition>:
 801dff0:	b508      	push	{r3, lr}
 801dff2:	4b08      	ldr	r3, [pc, #32]	; (801e014 <rmw_destroy_guard_condition+0x24>)
 801dff4:	6819      	ldr	r1, [r3, #0]
 801dff6:	b911      	cbnz	r1, 801dffe <rmw_destroy_guard_condition+0xe>
 801dff8:	e00a      	b.n	801e010 <rmw_destroy_guard_condition+0x20>
 801dffa:	6849      	ldr	r1, [r1, #4]
 801dffc:	b141      	cbz	r1, 801e010 <rmw_destroy_guard_condition+0x20>
 801dffe:	688b      	ldr	r3, [r1, #8]
 801e000:	3314      	adds	r3, #20
 801e002:	4298      	cmp	r0, r3
 801e004:	d1f9      	bne.n	801dffa <rmw_destroy_guard_condition+0xa>
 801e006:	4803      	ldr	r0, [pc, #12]	; (801e014 <rmw_destroy_guard_condition+0x24>)
 801e008:	f7ff ff7e 	bl	801df08 <put_memory>
 801e00c:	2000      	movs	r0, #0
 801e00e:	bd08      	pop	{r3, pc}
 801e010:	2001      	movs	r0, #1
 801e012:	bd08      	pop	{r3, pc}
 801e014:	20016bb4 	.word	0x20016bb4

0801e018 <create_topic>:
 801e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e01c:	4605      	mov	r5, r0
 801e01e:	b084      	sub	sp, #16
 801e020:	4822      	ldr	r0, [pc, #136]	; (801e0ac <create_topic+0x94>)
 801e022:	460f      	mov	r7, r1
 801e024:	4616      	mov	r6, r2
 801e026:	f7ff ff5f 	bl	801dee8 <get_memory>
 801e02a:	4604      	mov	r4, r0
 801e02c:	2800      	cmp	r0, #0
 801e02e:	d039      	beq.n	801e0a4 <create_topic+0x8c>
 801e030:	692b      	ldr	r3, [r5, #16]
 801e032:	2102      	movs	r1, #2
 801e034:	6884      	ldr	r4, [r0, #8]
 801e036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e03a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e0b4 <create_topic+0x9c>
 801e03e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e042:	1c42      	adds	r2, r0, #1
 801e044:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e048:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e04c:	f7f9 fe88 	bl	8017d60 <uxr_object_id>
 801e050:	223c      	movs	r2, #60	; 0x3c
 801e052:	6120      	str	r0, [r4, #16]
 801e054:	4641      	mov	r1, r8
 801e056:	4638      	mov	r0, r7
 801e058:	f7f9 f862 	bl	8017120 <generate_topic_name>
 801e05c:	b1f0      	cbz	r0, 801e09c <create_topic+0x84>
 801e05e:	4f14      	ldr	r7, [pc, #80]	; (801e0b0 <create_topic+0x98>)
 801e060:	4630      	mov	r0, r6
 801e062:	2264      	movs	r2, #100	; 0x64
 801e064:	4639      	mov	r1, r7
 801e066:	f7f9 f82d 	bl	80170c4 <generate_type_name>
 801e06a:	b1b8      	cbz	r0, 801e09c <create_topic+0x84>
 801e06c:	6928      	ldr	r0, [r5, #16]
 801e06e:	2106      	movs	r1, #6
 801e070:	696b      	ldr	r3, [r5, #20]
 801e072:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e076:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e07a:	f8cd 8000 	str.w	r8, [sp]
 801e07e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e082:	6811      	ldr	r1, [r2, #0]
 801e084:	6922      	ldr	r2, [r4, #16]
 801e086:	f7f9 fbef 	bl	8017868 <uxr_buffer_create_topic_bin>
 801e08a:	4602      	mov	r2, r0
 801e08c:	6928      	ldr	r0, [r5, #16]
 801e08e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e092:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e096:	f7f8 ff49 	bl	8016f2c <run_xrce_session>
 801e09a:	b918      	cbnz	r0, 801e0a4 <create_topic+0x8c>
 801e09c:	4620      	mov	r0, r4
 801e09e:	2400      	movs	r4, #0
 801e0a0:	f7f8 fe36 	bl	8016d10 <rmw_uxrce_fini_topic_memory>
 801e0a4:	4620      	mov	r0, r4
 801e0a6:	b004      	add	sp, #16
 801e0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0ac:	20016c34 	.word	0x20016c34
 801e0b0:	20016cc8 	.word	0x20016cc8
 801e0b4:	20016c8c 	.word	0x20016c8c

0801e0b8 <destroy_topic>:
 801e0b8:	b538      	push	{r3, r4, r5, lr}
 801e0ba:	6985      	ldr	r5, [r0, #24]
 801e0bc:	b1dd      	cbz	r5, 801e0f6 <destroy_topic+0x3e>
 801e0be:	4604      	mov	r4, r0
 801e0c0:	6928      	ldr	r0, [r5, #16]
 801e0c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e0c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e0ca:	6922      	ldr	r2, [r4, #16]
 801e0cc:	6819      	ldr	r1, [r3, #0]
 801e0ce:	f7f9 fb4d 	bl	801776c <uxr_buffer_delete_entity>
 801e0d2:	4602      	mov	r2, r0
 801e0d4:	6928      	ldr	r0, [r5, #16]
 801e0d6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e0da:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e0de:	f7f8 ff25 	bl	8016f2c <run_xrce_session>
 801e0e2:	4603      	mov	r3, r0
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	bf14      	ite	ne
 801e0ea:	2400      	movne	r4, #0
 801e0ec:	2402      	moveq	r4, #2
 801e0ee:	f7f8 fe0f 	bl	8016d10 <rmw_uxrce_fini_topic_memory>
 801e0f2:	4620      	mov	r0, r4
 801e0f4:	bd38      	pop	{r3, r4, r5, pc}
 801e0f6:	2401      	movs	r4, #1
 801e0f8:	4620      	mov	r0, r4
 801e0fa:	bd38      	pop	{r3, r4, r5, pc}

0801e0fc <rmw_wait>:
 801e0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e100:	4698      	mov	r8, r3
 801e102:	ea40 0301 	orr.w	r3, r0, r1
 801e106:	b089      	sub	sp, #36	; 0x24
 801e108:	ea48 0303 	orr.w	r3, r8, r3
 801e10c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e10e:	4313      	orrs	r3, r2
 801e110:	f000 8106 	beq.w	801e320 <rmw_wait+0x224>
 801e114:	4605      	mov	r5, r0
 801e116:	460e      	mov	r6, r1
 801e118:	4691      	mov	r9, r2
 801e11a:	b16c      	cbz	r4, 801e138 <rmw_wait+0x3c>
 801e11c:	4ba6      	ldr	r3, [pc, #664]	; (801e3b8 <rmw_wait+0x2bc>)
 801e11e:	af04      	add	r7, sp, #16
 801e120:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e122:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801e126:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e12a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e12e:	f7ff fcef 	bl	801db10 <rmw_time_equal>
 801e132:	2800      	cmp	r0, #0
 801e134:	f000 810b 	beq.w	801e34e <rmw_wait+0x252>
 801e138:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e13c:	f7f8 fe78 	bl	8016e30 <rmw_uxrce_clean_expired_static_input_buffer>
 801e140:	4b9e      	ldr	r3, [pc, #632]	; (801e3bc <rmw_wait+0x2c0>)
 801e142:	681c      	ldr	r4, [r3, #0]
 801e144:	b14c      	cbz	r4, 801e15a <rmw_wait+0x5e>
 801e146:	4623      	mov	r3, r4
 801e148:	2100      	movs	r1, #0
 801e14a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801e14e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e152:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801e156:	2b00      	cmp	r3, #0
 801e158:	d1f7      	bne.n	801e14a <rmw_wait+0x4e>
 801e15a:	f1b9 0f00 	cmp.w	r9, #0
 801e15e:	d011      	beq.n	801e184 <rmw_wait+0x88>
 801e160:	f8d9 1000 	ldr.w	r1, [r9]
 801e164:	b171      	cbz	r1, 801e184 <rmw_wait+0x88>
 801e166:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801e16a:	2300      	movs	r3, #0
 801e16c:	2001      	movs	r0, #1
 801e16e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e172:	3301      	adds	r3, #1
 801e174:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e176:	4299      	cmp	r1, r3
 801e178:	6912      	ldr	r2, [r2, #16]
 801e17a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e17e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e182:	d1f4      	bne.n	801e16e <rmw_wait+0x72>
 801e184:	f1b8 0f00 	cmp.w	r8, #0
 801e188:	d011      	beq.n	801e1ae <rmw_wait+0xb2>
 801e18a:	f8d8 1000 	ldr.w	r1, [r8]
 801e18e:	b171      	cbz	r1, 801e1ae <rmw_wait+0xb2>
 801e190:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801e194:	2300      	movs	r3, #0
 801e196:	2001      	movs	r0, #1
 801e198:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e19c:	3301      	adds	r3, #1
 801e19e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e1a0:	4299      	cmp	r1, r3
 801e1a2:	6912      	ldr	r2, [r2, #16]
 801e1a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e1a8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e1ac:	d1f4      	bne.n	801e198 <rmw_wait+0x9c>
 801e1ae:	b185      	cbz	r5, 801e1d2 <rmw_wait+0xd6>
 801e1b0:	6829      	ldr	r1, [r5, #0]
 801e1b2:	b171      	cbz	r1, 801e1d2 <rmw_wait+0xd6>
 801e1b4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	2001      	movs	r0, #1
 801e1bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e1c0:	3301      	adds	r3, #1
 801e1c2:	6a12      	ldr	r2, [r2, #32]
 801e1c4:	4299      	cmp	r1, r3
 801e1c6:	6912      	ldr	r2, [r2, #16]
 801e1c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e1cc:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e1d0:	d1f4      	bne.n	801e1bc <rmw_wait+0xc0>
 801e1d2:	b344      	cbz	r4, 801e226 <rmw_wait+0x12a>
 801e1d4:	4622      	mov	r2, r4
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e1dc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e1e0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e1e4:	440b      	add	r3, r1
 801e1e6:	b2db      	uxtb	r3, r3
 801e1e8:	2a00      	cmp	r2, #0
 801e1ea:	d1f5      	bne.n	801e1d8 <rmw_wait+0xdc>
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d05f      	beq.n	801e2b0 <rmw_wait+0x1b4>
 801e1f0:	1c7a      	adds	r2, r7, #1
 801e1f2:	d00d      	beq.n	801e210 <rmw_wait+0x114>
 801e1f4:	ee07 7a90 	vmov	s15, r7
 801e1f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e1fc:	ee07 3a90 	vmov	s15, r3
 801e200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e208:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e20c:	ee17 7a90 	vmov	r7, s15
 801e210:	68a0      	ldr	r0, [r4, #8]
 801e212:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801e216:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	f040 808d 	bne.w	801e33a <rmw_wait+0x23e>
 801e220:	6864      	ldr	r4, [r4, #4]
 801e222:	2c00      	cmp	r4, #0
 801e224:	d1f4      	bne.n	801e210 <rmw_wait+0x114>
 801e226:	f1b9 0f00 	cmp.w	r9, #0
 801e22a:	f000 80a1 	beq.w	801e370 <rmw_wait+0x274>
 801e22e:	f8d9 7000 	ldr.w	r7, [r9]
 801e232:	2f00      	cmp	r7, #0
 801e234:	f000 80a4 	beq.w	801e380 <rmw_wait+0x284>
 801e238:	2400      	movs	r4, #0
 801e23a:	4627      	mov	r7, r4
 801e23c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e240:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e244:	f7f8 fdca 	bl	8016ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 801e248:	2800      	cmp	r0, #0
 801e24a:	d03b      	beq.n	801e2c4 <rmw_wait+0x1c8>
 801e24c:	3401      	adds	r4, #1
 801e24e:	f8d9 3000 	ldr.w	r3, [r9]
 801e252:	2701      	movs	r7, #1
 801e254:	42a3      	cmp	r3, r4
 801e256:	d8f1      	bhi.n	801e23c <rmw_wait+0x140>
 801e258:	2701      	movs	r7, #1
 801e25a:	f1b8 0f00 	cmp.w	r8, #0
 801e25e:	d010      	beq.n	801e282 <rmw_wait+0x186>
 801e260:	f8d8 3000 	ldr.w	r3, [r8]
 801e264:	b16b      	cbz	r3, 801e282 <rmw_wait+0x186>
 801e266:	2400      	movs	r4, #0
 801e268:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e26c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e270:	f7f8 fdb4 	bl	8016ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 801e274:	b370      	cbz	r0, 801e2d4 <rmw_wait+0x1d8>
 801e276:	3401      	adds	r4, #1
 801e278:	f8d8 3000 	ldr.w	r3, [r8]
 801e27c:	2701      	movs	r7, #1
 801e27e:	42a3      	cmp	r3, r4
 801e280:	d8f2      	bhi.n	801e268 <rmw_wait+0x16c>
 801e282:	2d00      	cmp	r5, #0
 801e284:	d035      	beq.n	801e2f2 <rmw_wait+0x1f6>
 801e286:	682b      	ldr	r3, [r5, #0]
 801e288:	b39b      	cbz	r3, 801e2f2 <rmw_wait+0x1f6>
 801e28a:	2400      	movs	r4, #0
 801e28c:	686b      	ldr	r3, [r5, #4]
 801e28e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e292:	f7f8 fda3 	bl	8016ddc <rmw_uxrce_find_static_input_buffer_by_owner>
 801e296:	b328      	cbz	r0, 801e2e4 <rmw_wait+0x1e8>
 801e298:	3401      	adds	r4, #1
 801e29a:	682b      	ldr	r3, [r5, #0]
 801e29c:	2701      	movs	r7, #1
 801e29e:	42a3      	cmp	r3, r4
 801e2a0:	d8f4      	bhi.n	801e28c <rmw_wait+0x190>
 801e2a2:	2e00      	cmp	r6, #0
 801e2a4:	d03c      	beq.n	801e320 <rmw_wait+0x224>
 801e2a6:	6834      	ldr	r4, [r6, #0]
 801e2a8:	2c00      	cmp	r4, #0
 801e2aa:	d039      	beq.n	801e320 <rmw_wait+0x224>
 801e2ac:	2701      	movs	r7, #1
 801e2ae:	e023      	b.n	801e2f8 <rmw_wait+0x1fc>
 801e2b0:	68a0      	ldr	r0, [r4, #8]
 801e2b2:	2100      	movs	r1, #0
 801e2b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e2b8:	f7fa fb54 	bl	8018964 <uxr_run_session_timeout>
 801e2bc:	6864      	ldr	r4, [r4, #4]
 801e2be:	2c00      	cmp	r4, #0
 801e2c0:	d1f6      	bne.n	801e2b0 <rmw_wait+0x1b4>
 801e2c2:	e7b0      	b.n	801e226 <rmw_wait+0x12a>
 801e2c4:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e2c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e2cc:	3401      	adds	r4, #1
 801e2ce:	42a3      	cmp	r3, r4
 801e2d0:	d8b4      	bhi.n	801e23c <rmw_wait+0x140>
 801e2d2:	e7c2      	b.n	801e25a <rmw_wait+0x15e>
 801e2d4:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e2d8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e2dc:	3401      	adds	r4, #1
 801e2de:	429c      	cmp	r4, r3
 801e2e0:	d3c2      	bcc.n	801e268 <rmw_wait+0x16c>
 801e2e2:	e7ce      	b.n	801e282 <rmw_wait+0x186>
 801e2e4:	e9d5 3200 	ldrd	r3, r2, [r5]
 801e2e8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e2ec:	3401      	adds	r4, #1
 801e2ee:	42a3      	cmp	r3, r4
 801e2f0:	d8cc      	bhi.n	801e28c <rmw_wait+0x190>
 801e2f2:	b1a6      	cbz	r6, 801e31e <rmw_wait+0x222>
 801e2f4:	6834      	ldr	r4, [r6, #0]
 801e2f6:	b194      	cbz	r4, 801e31e <rmw_wait+0x222>
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	461d      	mov	r5, r3
 801e2fc:	e004      	b.n	801e308 <rmw_wait+0x20c>
 801e2fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801e302:	3301      	adds	r3, #1
 801e304:	42a3      	cmp	r3, r4
 801e306:	d00a      	beq.n	801e31e <rmw_wait+0x222>
 801e308:	6870      	ldr	r0, [r6, #4]
 801e30a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801e30e:	7c0a      	ldrb	r2, [r1, #16]
 801e310:	2a00      	cmp	r2, #0
 801e312:	d0f4      	beq.n	801e2fe <rmw_wait+0x202>
 801e314:	3301      	adds	r3, #1
 801e316:	4617      	mov	r7, r2
 801e318:	740d      	strb	r5, [r1, #16]
 801e31a:	42a3      	cmp	r3, r4
 801e31c:	d1f4      	bne.n	801e308 <rmw_wait+0x20c>
 801e31e:	b147      	cbz	r7, 801e332 <rmw_wait+0x236>
 801e320:	2000      	movs	r0, #0
 801e322:	b009      	add	sp, #36	; 0x24
 801e324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e328:	b11e      	cbz	r6, 801e332 <rmw_wait+0x236>
 801e32a:	6834      	ldr	r4, [r6, #0]
 801e32c:	462f      	mov	r7, r5
 801e32e:	2c00      	cmp	r4, #0
 801e330:	d1e2      	bne.n	801e2f8 <rmw_wait+0x1fc>
 801e332:	2002      	movs	r0, #2
 801e334:	b009      	add	sp, #36	; 0x24
 801e336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e33a:	4639      	mov	r1, r7
 801e33c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e340:	f7fa fb2a 	bl	8018998 <uxr_run_session_until_data>
 801e344:	6864      	ldr	r4, [r4, #4]
 801e346:	2c00      	cmp	r4, #0
 801e348:	f47f af62 	bne.w	801e210 <rmw_wait+0x114>
 801e34c:	e76b      	b.n	801e226 <rmw_wait+0x12a>
 801e34e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e352:	f7ff fc33 	bl	801dbbc <rmw_time_total_nsec>
 801e356:	2300      	movs	r3, #0
 801e358:	4a19      	ldr	r2, [pc, #100]	; (801e3c0 <rmw_wait+0x2c4>)
 801e35a:	f7e2 f9e5 	bl	8000728 <__aeabi_uldivmod>
 801e35e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801e362:	4607      	mov	r7, r0
 801e364:	f171 0300 	sbcs.w	r3, r1, #0
 801e368:	bfa8      	it	ge
 801e36a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801e36e:	e6e5      	b.n	801e13c <rmw_wait+0x40>
 801e370:	f1b8 0f00 	cmp.w	r8, #0
 801e374:	d00f      	beq.n	801e396 <rmw_wait+0x29a>
 801e376:	f8d8 3000 	ldr.w	r3, [r8]
 801e37a:	b193      	cbz	r3, 801e3a2 <rmw_wait+0x2a6>
 801e37c:	464f      	mov	r7, r9
 801e37e:	e772      	b.n	801e266 <rmw_wait+0x16a>
 801e380:	f1b8 0f00 	cmp.w	r8, #0
 801e384:	d007      	beq.n	801e396 <rmw_wait+0x29a>
 801e386:	f8d8 3000 	ldr.w	r3, [r8]
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	f47f af6b 	bne.w	801e266 <rmw_wait+0x16a>
 801e390:	b155      	cbz	r5, 801e3a8 <rmw_wait+0x2ac>
 801e392:	461f      	mov	r7, r3
 801e394:	e777      	b.n	801e286 <rmw_wait+0x18a>
 801e396:	2d00      	cmp	r5, #0
 801e398:	d0c6      	beq.n	801e328 <rmw_wait+0x22c>
 801e39a:	682b      	ldr	r3, [r5, #0]
 801e39c:	b143      	cbz	r3, 801e3b0 <rmw_wait+0x2b4>
 801e39e:	4647      	mov	r7, r8
 801e3a0:	e773      	b.n	801e28a <rmw_wait+0x18e>
 801e3a2:	b10d      	cbz	r5, 801e3a8 <rmw_wait+0x2ac>
 801e3a4:	464f      	mov	r7, r9
 801e3a6:	e76e      	b.n	801e286 <rmw_wait+0x18a>
 801e3a8:	462f      	mov	r7, r5
 801e3aa:	2e00      	cmp	r6, #0
 801e3ac:	d1a2      	bne.n	801e2f4 <rmw_wait+0x1f8>
 801e3ae:	e7c0      	b.n	801e332 <rmw_wait+0x236>
 801e3b0:	4647      	mov	r7, r8
 801e3b2:	2e00      	cmp	r6, #0
 801e3b4:	d19e      	bne.n	801e2f4 <rmw_wait+0x1f8>
 801e3b6:	e7bc      	b.n	801e332 <rmw_wait+0x236>
 801e3b8:	080244e0 	.word	0x080244e0
 801e3bc:	20016c04 	.word	0x20016c04
 801e3c0:	000f4240 	.word	0x000f4240

0801e3c4 <rmw_create_wait_set>:
 801e3c4:	b508      	push	{r3, lr}
 801e3c6:	4803      	ldr	r0, [pc, #12]	; (801e3d4 <rmw_create_wait_set+0x10>)
 801e3c8:	f7ff fd8e 	bl	801dee8 <get_memory>
 801e3cc:	b108      	cbz	r0, 801e3d2 <rmw_create_wait_set+0xe>
 801e3ce:	6880      	ldr	r0, [r0, #8]
 801e3d0:	3010      	adds	r0, #16
 801e3d2:	bd08      	pop	{r3, pc}
 801e3d4:	20016c44 	.word	0x20016c44

0801e3d8 <rmw_destroy_wait_set>:
 801e3d8:	b508      	push	{r3, lr}
 801e3da:	4b08      	ldr	r3, [pc, #32]	; (801e3fc <rmw_destroy_wait_set+0x24>)
 801e3dc:	6819      	ldr	r1, [r3, #0]
 801e3de:	b911      	cbnz	r1, 801e3e6 <rmw_destroy_wait_set+0xe>
 801e3e0:	e00a      	b.n	801e3f8 <rmw_destroy_wait_set+0x20>
 801e3e2:	6849      	ldr	r1, [r1, #4]
 801e3e4:	b141      	cbz	r1, 801e3f8 <rmw_destroy_wait_set+0x20>
 801e3e6:	688b      	ldr	r3, [r1, #8]
 801e3e8:	3310      	adds	r3, #16
 801e3ea:	4298      	cmp	r0, r3
 801e3ec:	d1f9      	bne.n	801e3e2 <rmw_destroy_wait_set+0xa>
 801e3ee:	4803      	ldr	r0, [pc, #12]	; (801e3fc <rmw_destroy_wait_set+0x24>)
 801e3f0:	f7ff fd8a 	bl	801df08 <put_memory>
 801e3f4:	2000      	movs	r0, #0
 801e3f6:	bd08      	pop	{r3, pc}
 801e3f8:	2001      	movs	r0, #1
 801e3fa:	bd08      	pop	{r3, pc}
 801e3fc:	20016c44 	.word	0x20016c44

0801e400 <rmw_uros_epoch_nanos>:
 801e400:	4b05      	ldr	r3, [pc, #20]	; (801e418 <rmw_uros_epoch_nanos+0x18>)
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	b123      	cbz	r3, 801e410 <rmw_uros_epoch_nanos+0x10>
 801e406:	6898      	ldr	r0, [r3, #8]
 801e408:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e40c:	f7f9 bf20 	b.w	8018250 <uxr_epoch_nanos>
 801e410:	2000      	movs	r0, #0
 801e412:	2100      	movs	r1, #0
 801e414:	4770      	bx	lr
 801e416:	bf00      	nop
 801e418:	20016c04 	.word	0x20016c04

0801e41c <std_msgs__msg__String__init>:
 801e41c:	b538      	push	{r3, r4, r5, lr}
 801e41e:	4604      	mov	r4, r0
 801e420:	b128      	cbz	r0, 801e42e <std_msgs__msg__String__init+0x12>
 801e422:	f7f8 febb 	bl	801719c <rosidl_runtime_c__String__init>
 801e426:	4605      	mov	r5, r0
 801e428:	b120      	cbz	r0, 801e434 <std_msgs__msg__String__init+0x18>
 801e42a:	4628      	mov	r0, r5
 801e42c:	bd38      	pop	{r3, r4, r5, pc}
 801e42e:	4605      	mov	r5, r0
 801e430:	4628      	mov	r0, r5
 801e432:	bd38      	pop	{r3, r4, r5, pc}
 801e434:	4620      	mov	r0, r4
 801e436:	f7f8 fec7 	bl	80171c8 <rosidl_runtime_c__String__fini>
 801e43a:	4628      	mov	r0, r5
 801e43c:	bd38      	pop	{r3, r4, r5, pc}
 801e43e:	bf00      	nop

0801e440 <std_msgs__msg__String__fini>:
 801e440:	b108      	cbz	r0, 801e446 <std_msgs__msg__String__fini+0x6>
 801e442:	f7f8 bec1 	b.w	80171c8 <rosidl_runtime_c__String__fini>
 801e446:	4770      	bx	lr

0801e448 <ucdr_serialize_string>:
 801e448:	b510      	push	{r4, lr}
 801e44a:	b082      	sub	sp, #8
 801e44c:	4604      	mov	r4, r0
 801e44e:	4608      	mov	r0, r1
 801e450:	9101      	str	r1, [sp, #4]
 801e452:	f7e1 ff55 	bl	8000300 <strlen>
 801e456:	4602      	mov	r2, r0
 801e458:	9901      	ldr	r1, [sp, #4]
 801e45a:	4620      	mov	r0, r4
 801e45c:	3201      	adds	r2, #1
 801e45e:	b002      	add	sp, #8
 801e460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e464:	f7f4 bf3a 	b.w	80132dc <ucdr_serialize_sequence_char>

0801e468 <ucdr_deserialize_string>:
 801e468:	b500      	push	{lr}
 801e46a:	b083      	sub	sp, #12
 801e46c:	ab01      	add	r3, sp, #4
 801e46e:	f7f4 ff47 	bl	8013300 <ucdr_deserialize_sequence_char>
 801e472:	b003      	add	sp, #12
 801e474:	f85d fb04 	ldr.w	pc, [sp], #4

0801e478 <uxr_init_input_best_effort_stream>:
 801e478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e47c:	8003      	strh	r3, [r0, #0]
 801e47e:	4770      	bx	lr

0801e480 <uxr_reset_input_best_effort_stream>:
 801e480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e484:	8003      	strh	r3, [r0, #0]
 801e486:	4770      	bx	lr

0801e488 <uxr_receive_best_effort_message>:
 801e488:	b538      	push	{r3, r4, r5, lr}
 801e48a:	4604      	mov	r4, r0
 801e48c:	8800      	ldrh	r0, [r0, #0]
 801e48e:	460d      	mov	r5, r1
 801e490:	f000 fd46 	bl	801ef20 <uxr_seq_num_cmp>
 801e494:	4603      	mov	r3, r0
 801e496:	0fc0      	lsrs	r0, r0, #31
 801e498:	2b00      	cmp	r3, #0
 801e49a:	bfb8      	it	lt
 801e49c:	8025      	strhlt	r5, [r4, #0]
 801e49e:	bd38      	pop	{r3, r4, r5, pc}

0801e4a0 <on_full_input_buffer>:
 801e4a0:	b570      	push	{r4, r5, r6, lr}
 801e4a2:	460c      	mov	r4, r1
 801e4a4:	4605      	mov	r5, r0
 801e4a6:	8908      	ldrh	r0, [r1, #8]
 801e4a8:	682b      	ldr	r3, [r5, #0]
 801e4aa:	7d26      	ldrb	r6, [r4, #20]
 801e4ac:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e4b0:	fbb2 f2f0 	udiv	r2, r2, r0
 801e4b4:	eba3 0c01 	sub.w	ip, r3, r1
 801e4b8:	fbbc fcf2 	udiv	ip, ip, r2
 801e4bc:	f10c 0c01 	add.w	ip, ip, #1
 801e4c0:	fa1f f38c 	uxth.w	r3, ip
 801e4c4:	fbb3 fcf0 	udiv	ip, r3, r0
 801e4c8:	fb00 331c 	mls	r3, r0, ip, r3
 801e4cc:	b29b      	uxth	r3, r3
 801e4ce:	fb02 f303 	mul.w	r3, r2, r3
 801e4d2:	1d18      	adds	r0, r3, #4
 801e4d4:	4408      	add	r0, r1
 801e4d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e4da:	b116      	cbz	r6, 801e4e2 <on_full_input_buffer+0x42>
 801e4dc:	2600      	movs	r6, #0
 801e4de:	f840 6c04 	str.w	r6, [r0, #-4]
 801e4e2:	2a03      	cmp	r2, #3
 801e4e4:	d801      	bhi.n	801e4ea <on_full_input_buffer+0x4a>
 801e4e6:	2001      	movs	r0, #1
 801e4e8:	bd70      	pop	{r4, r5, r6, pc}
 801e4ea:	3308      	adds	r3, #8
 801e4ec:	4628      	mov	r0, r5
 801e4ee:	3a04      	subs	r2, #4
 801e4f0:	4419      	add	r1, r3
 801e4f2:	692b      	ldr	r3, [r5, #16]
 801e4f4:	f7f4 fe76 	bl	80131e4 <ucdr_init_buffer_origin>
 801e4f8:	4628      	mov	r0, r5
 801e4fa:	4622      	mov	r2, r4
 801e4fc:	4902      	ldr	r1, [pc, #8]	; (801e508 <on_full_input_buffer+0x68>)
 801e4fe:	f7f4 fe4d 	bl	801319c <ucdr_set_on_full_buffer_callback>
 801e502:	2000      	movs	r0, #0
 801e504:	bd70      	pop	{r4, r5, r6, pc}
 801e506:	bf00      	nop
 801e508:	0801e4a1 	.word	0x0801e4a1

0801e50c <uxr_init_input_reliable_stream>:
 801e50c:	b510      	push	{r4, lr}
 801e50e:	e9c0 1200 	strd	r1, r2, [r0]
 801e512:	2400      	movs	r4, #0
 801e514:	9a02      	ldr	r2, [sp, #8]
 801e516:	8103      	strh	r3, [r0, #8]
 801e518:	6102      	str	r2, [r0, #16]
 801e51a:	7504      	strb	r4, [r0, #20]
 801e51c:	b1c3      	cbz	r3, 801e550 <uxr_init_input_reliable_stream+0x44>
 801e51e:	600c      	str	r4, [r1, #0]
 801e520:	8901      	ldrh	r1, [r0, #8]
 801e522:	2901      	cmp	r1, #1
 801e524:	d914      	bls.n	801e550 <uxr_init_input_reliable_stream+0x44>
 801e526:	f04f 0c01 	mov.w	ip, #1
 801e52a:	6843      	ldr	r3, [r0, #4]
 801e52c:	f10c 0e01 	add.w	lr, ip, #1
 801e530:	fbbc f2f1 	udiv	r2, ip, r1
 801e534:	fbb3 f3f1 	udiv	r3, r3, r1
 801e538:	fb01 c212 	mls	r2, r1, r2, ip
 801e53c:	fa1f fc8e 	uxth.w	ip, lr
 801e540:	b292      	uxth	r2, r2
 801e542:	fb02 f303 	mul.w	r3, r2, r3
 801e546:	6802      	ldr	r2, [r0, #0]
 801e548:	50d4      	str	r4, [r2, r3]
 801e54a:	8901      	ldrh	r1, [r0, #8]
 801e54c:	4561      	cmp	r1, ip
 801e54e:	d8ec      	bhi.n	801e52a <uxr_init_input_reliable_stream+0x1e>
 801e550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e554:	60c3      	str	r3, [r0, #12]
 801e556:	bd10      	pop	{r4, pc}

0801e558 <uxr_reset_input_reliable_stream>:
 801e558:	8901      	ldrh	r1, [r0, #8]
 801e55a:	b1d9      	cbz	r1, 801e594 <uxr_reset_input_reliable_stream+0x3c>
 801e55c:	b510      	push	{r4, lr}
 801e55e:	f04f 0e00 	mov.w	lr, #0
 801e562:	46f4      	mov	ip, lr
 801e564:	4674      	mov	r4, lr
 801e566:	6843      	ldr	r3, [r0, #4]
 801e568:	f10e 0e01 	add.w	lr, lr, #1
 801e56c:	fbbc f2f1 	udiv	r2, ip, r1
 801e570:	fbb3 f3f1 	udiv	r3, r3, r1
 801e574:	fb01 c212 	mls	r2, r1, r2, ip
 801e578:	fa1f fc8e 	uxth.w	ip, lr
 801e57c:	b292      	uxth	r2, r2
 801e57e:	fb02 f303 	mul.w	r3, r2, r3
 801e582:	6802      	ldr	r2, [r0, #0]
 801e584:	50d4      	str	r4, [r2, r3]
 801e586:	8901      	ldrh	r1, [r0, #8]
 801e588:	4561      	cmp	r1, ip
 801e58a:	d8ec      	bhi.n	801e566 <uxr_reset_input_reliable_stream+0xe>
 801e58c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e590:	60c3      	str	r3, [r0, #12]
 801e592:	bd10      	pop	{r4, pc}
 801e594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e598:	60c3      	str	r3, [r0, #12]
 801e59a:	4770      	bx	lr

0801e59c <uxr_receive_reliable_message>:
 801e59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5a0:	4604      	mov	r4, r0
 801e5a2:	460d      	mov	r5, r1
 801e5a4:	8901      	ldrh	r1, [r0, #8]
 801e5a6:	4617      	mov	r7, r2
 801e5a8:	8980      	ldrh	r0, [r0, #12]
 801e5aa:	4698      	mov	r8, r3
 801e5ac:	f000 fcb0 	bl	801ef10 <uxr_seq_num_add>
 801e5b0:	4629      	mov	r1, r5
 801e5b2:	4606      	mov	r6, r0
 801e5b4:	89a0      	ldrh	r0, [r4, #12]
 801e5b6:	f000 fcb3 	bl	801ef20 <uxr_seq_num_cmp>
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	db0a      	blt.n	801e5d4 <uxr_receive_reliable_message+0x38>
 801e5be:	2600      	movs	r6, #0
 801e5c0:	4629      	mov	r1, r5
 801e5c2:	89e0      	ldrh	r0, [r4, #14]
 801e5c4:	f000 fcac 	bl	801ef20 <uxr_seq_num_cmp>
 801e5c8:	2800      	cmp	r0, #0
 801e5ca:	da00      	bge.n	801e5ce <uxr_receive_reliable_message+0x32>
 801e5cc:	81e5      	strh	r5, [r4, #14]
 801e5ce:	4630      	mov	r0, r6
 801e5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5d4:	4630      	mov	r0, r6
 801e5d6:	4629      	mov	r1, r5
 801e5d8:	f000 fca2 	bl	801ef20 <uxr_seq_num_cmp>
 801e5dc:	2800      	cmp	r0, #0
 801e5de:	dbee      	blt.n	801e5be <uxr_receive_reliable_message+0x22>
 801e5e0:	6923      	ldr	r3, [r4, #16]
 801e5e2:	4638      	mov	r0, r7
 801e5e4:	4798      	blx	r3
 801e5e6:	4681      	mov	r9, r0
 801e5e8:	2101      	movs	r1, #1
 801e5ea:	89a0      	ldrh	r0, [r4, #12]
 801e5ec:	f000 fc90 	bl	801ef10 <uxr_seq_num_add>
 801e5f0:	f1b9 0f00 	cmp.w	r9, #0
 801e5f4:	bf08      	it	eq
 801e5f6:	4285      	cmpeq	r5, r0
 801e5f8:	bf0c      	ite	eq
 801e5fa:	2601      	moveq	r6, #1
 801e5fc:	2600      	movne	r6, #0
 801e5fe:	d104      	bne.n	801e60a <uxr_receive_reliable_message+0x6e>
 801e600:	2300      	movs	r3, #0
 801e602:	9a08      	ldr	r2, [sp, #32]
 801e604:	81a0      	strh	r0, [r4, #12]
 801e606:	7013      	strb	r3, [r2, #0]
 801e608:	e7da      	b.n	801e5c0 <uxr_receive_reliable_message+0x24>
 801e60a:	8922      	ldrh	r2, [r4, #8]
 801e60c:	6863      	ldr	r3, [r4, #4]
 801e60e:	fbb5 f0f2 	udiv	r0, r5, r2
 801e612:	fbb3 f3f2 	udiv	r3, r3, r2
 801e616:	fb02 5010 	mls	r0, r2, r0, r5
 801e61a:	b280      	uxth	r0, r0
 801e61c:	fb03 f000 	mul.w	r0, r3, r0
 801e620:	6823      	ldr	r3, [r4, #0]
 801e622:	3004      	adds	r0, #4
 801e624:	4418      	add	r0, r3
 801e626:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	d1c7      	bne.n	801e5be <uxr_receive_reliable_message+0x22>
 801e62e:	4639      	mov	r1, r7
 801e630:	4642      	mov	r2, r8
 801e632:	f002 fc14 	bl	8020e5e <memcpy>
 801e636:	8921      	ldrh	r1, [r4, #8]
 801e638:	6863      	ldr	r3, [r4, #4]
 801e63a:	fbb5 f2f1 	udiv	r2, r5, r1
 801e63e:	fbb3 f3f1 	udiv	r3, r3, r1
 801e642:	fb01 5212 	mls	r2, r1, r2, r5
 801e646:	b292      	uxth	r2, r2
 801e648:	fb02 f303 	mul.w	r3, r2, r3
 801e64c:	6822      	ldr	r2, [r4, #0]
 801e64e:	f842 8003 	str.w	r8, [r2, r3]
 801e652:	2301      	movs	r3, #1
 801e654:	9a08      	ldr	r2, [sp, #32]
 801e656:	7013      	strb	r3, [r2, #0]
 801e658:	f1b9 0f00 	cmp.w	r9, #0
 801e65c:	d0af      	beq.n	801e5be <uxr_receive_reliable_message+0x22>
 801e65e:	89a6      	ldrh	r6, [r4, #12]
 801e660:	2101      	movs	r1, #1
 801e662:	4630      	mov	r0, r6
 801e664:	f000 fc54 	bl	801ef10 <uxr_seq_num_add>
 801e668:	8921      	ldrh	r1, [r4, #8]
 801e66a:	6863      	ldr	r3, [r4, #4]
 801e66c:	4606      	mov	r6, r0
 801e66e:	fbb0 f2f1 	udiv	r2, r0, r1
 801e672:	fbb3 f3f1 	udiv	r3, r3, r1
 801e676:	fb01 0212 	mls	r2, r1, r2, r0
 801e67a:	6820      	ldr	r0, [r4, #0]
 801e67c:	b292      	uxth	r2, r2
 801e67e:	fb02 f303 	mul.w	r3, r2, r3
 801e682:	3304      	adds	r3, #4
 801e684:	4418      	add	r0, r3
 801e686:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d097      	beq.n	801e5be <uxr_receive_reliable_message+0x22>
 801e68e:	6923      	ldr	r3, [r4, #16]
 801e690:	4798      	blx	r3
 801e692:	2802      	cmp	r0, #2
 801e694:	d002      	beq.n	801e69c <uxr_receive_reliable_message+0x100>
 801e696:	2801      	cmp	r0, #1
 801e698:	d0e2      	beq.n	801e660 <uxr_receive_reliable_message+0xc4>
 801e69a:	e790      	b.n	801e5be <uxr_receive_reliable_message+0x22>
 801e69c:	2601      	movs	r6, #1
 801e69e:	e78f      	b.n	801e5c0 <uxr_receive_reliable_message+0x24>

0801e6a0 <uxr_next_input_reliable_buffer_available>:
 801e6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6a4:	4604      	mov	r4, r0
 801e6a6:	460f      	mov	r7, r1
 801e6a8:	8980      	ldrh	r0, [r0, #12]
 801e6aa:	2101      	movs	r1, #1
 801e6ac:	4690      	mov	r8, r2
 801e6ae:	f000 fc2f 	bl	801ef10 <uxr_seq_num_add>
 801e6b2:	8922      	ldrh	r2, [r4, #8]
 801e6b4:	6866      	ldr	r6, [r4, #4]
 801e6b6:	fbb0 f3f2 	udiv	r3, r0, r2
 801e6ba:	fbb6 f6f2 	udiv	r6, r6, r2
 801e6be:	fb02 0313 	mls	r3, r2, r3, r0
 801e6c2:	b29b      	uxth	r3, r3
 801e6c4:	fb03 f606 	mul.w	r6, r3, r6
 801e6c8:	6823      	ldr	r3, [r4, #0]
 801e6ca:	3604      	adds	r6, #4
 801e6cc:	441e      	add	r6, r3
 801e6ce:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e6d2:	f1b9 0f00 	cmp.w	r9, #0
 801e6d6:	d023      	beq.n	801e720 <uxr_next_input_reliable_buffer_available+0x80>
 801e6d8:	4605      	mov	r5, r0
 801e6da:	6923      	ldr	r3, [r4, #16]
 801e6dc:	4630      	mov	r0, r6
 801e6de:	4798      	blx	r3
 801e6e0:	4682      	mov	sl, r0
 801e6e2:	b300      	cbz	r0, 801e726 <uxr_next_input_reliable_buffer_available+0x86>
 801e6e4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e6e8:	2101      	movs	r1, #1
 801e6ea:	4650      	mov	r0, sl
 801e6ec:	f000 fc10 	bl	801ef10 <uxr_seq_num_add>
 801e6f0:	8921      	ldrh	r1, [r4, #8]
 801e6f2:	4682      	mov	sl, r0
 801e6f4:	6863      	ldr	r3, [r4, #4]
 801e6f6:	6820      	ldr	r0, [r4, #0]
 801e6f8:	fbba f2f1 	udiv	r2, sl, r1
 801e6fc:	fbb3 f3f1 	udiv	r3, r3, r1
 801e700:	fb01 a212 	mls	r2, r1, r2, sl
 801e704:	b292      	uxth	r2, r2
 801e706:	fb02 f303 	mul.w	r3, r2, r3
 801e70a:	3304      	adds	r3, #4
 801e70c:	4418      	add	r0, r3
 801e70e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e712:	b12b      	cbz	r3, 801e720 <uxr_next_input_reliable_buffer_available+0x80>
 801e714:	6923      	ldr	r3, [r4, #16]
 801e716:	4798      	blx	r3
 801e718:	2802      	cmp	r0, #2
 801e71a:	d01b      	beq.n	801e754 <uxr_next_input_reliable_buffer_available+0xb4>
 801e71c:	2801      	cmp	r0, #1
 801e71e:	d0e3      	beq.n	801e6e8 <uxr_next_input_reliable_buffer_available+0x48>
 801e720:	2000      	movs	r0, #0
 801e722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e726:	464a      	mov	r2, r9
 801e728:	4631      	mov	r1, r6
 801e72a:	4638      	mov	r0, r7
 801e72c:	f7f4 fd62 	bl	80131f4 <ucdr_init_buffer>
 801e730:	8921      	ldrh	r1, [r4, #8]
 801e732:	6863      	ldr	r3, [r4, #4]
 801e734:	2001      	movs	r0, #1
 801e736:	fbb5 f2f1 	udiv	r2, r5, r1
 801e73a:	fbb3 f3f1 	udiv	r3, r3, r1
 801e73e:	fb01 5212 	mls	r2, r1, r2, r5
 801e742:	b292      	uxth	r2, r2
 801e744:	fb02 f303 	mul.w	r3, r2, r3
 801e748:	6822      	ldr	r2, [r4, #0]
 801e74a:	f842 a003 	str.w	sl, [r2, r3]
 801e74e:	81a5      	strh	r5, [r4, #12]
 801e750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e754:	8920      	ldrh	r0, [r4, #8]
 801e756:	eb06 0108 	add.w	r1, r6, r8
 801e75a:	6863      	ldr	r3, [r4, #4]
 801e75c:	eba9 0208 	sub.w	r2, r9, r8
 801e760:	fbb5 f6f0 	udiv	r6, r5, r0
 801e764:	fbb3 f3f0 	udiv	r3, r3, r0
 801e768:	fb00 5516 	mls	r5, r0, r6, r5
 801e76c:	2000      	movs	r0, #0
 801e76e:	b2ad      	uxth	r5, r5
 801e770:	fb03 f505 	mul.w	r5, r3, r5
 801e774:	6823      	ldr	r3, [r4, #0]
 801e776:	5158      	str	r0, [r3, r5]
 801e778:	4638      	mov	r0, r7
 801e77a:	f7f4 fd3b 	bl	80131f4 <ucdr_init_buffer>
 801e77e:	4638      	mov	r0, r7
 801e780:	4622      	mov	r2, r4
 801e782:	4903      	ldr	r1, [pc, #12]	; (801e790 <uxr_next_input_reliable_buffer_available+0xf0>)
 801e784:	f7f4 fd0a 	bl	801319c <ucdr_set_on_full_buffer_callback>
 801e788:	2001      	movs	r0, #1
 801e78a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801e78e:	e7c8      	b.n	801e722 <uxr_next_input_reliable_buffer_available+0x82>
 801e790:	0801e4a1 	.word	0x0801e4a1

0801e794 <uxr_process_heartbeat>:
 801e794:	b538      	push	{r3, r4, r5, lr}
 801e796:	4611      	mov	r1, r2
 801e798:	4604      	mov	r4, r0
 801e79a:	89c0      	ldrh	r0, [r0, #14]
 801e79c:	4615      	mov	r5, r2
 801e79e:	f000 fbbf 	bl	801ef20 <uxr_seq_num_cmp>
 801e7a2:	2800      	cmp	r0, #0
 801e7a4:	bfb8      	it	lt
 801e7a6:	81e5      	strhlt	r5, [r4, #14]
 801e7a8:	bd38      	pop	{r3, r4, r5, pc}
 801e7aa:	bf00      	nop

0801e7ac <uxr_compute_acknack>:
 801e7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7b0:	8903      	ldrh	r3, [r0, #8]
 801e7b2:	4604      	mov	r4, r0
 801e7b4:	460f      	mov	r7, r1
 801e7b6:	8985      	ldrh	r5, [r0, #12]
 801e7b8:	b1db      	cbz	r3, 801e7f2 <uxr_compute_acknack+0x46>
 801e7ba:	4628      	mov	r0, r5
 801e7bc:	2601      	movs	r6, #1
 801e7be:	e004      	b.n	801e7ca <uxr_compute_acknack+0x1e>
 801e7c0:	4566      	cmp	r6, ip
 801e7c2:	f106 0601 	add.w	r6, r6, #1
 801e7c6:	d214      	bcs.n	801e7f2 <uxr_compute_acknack+0x46>
 801e7c8:	89a0      	ldrh	r0, [r4, #12]
 801e7ca:	b2b1      	uxth	r1, r6
 801e7cc:	f000 fba0 	bl	801ef10 <uxr_seq_num_add>
 801e7d0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e7d4:	fbb0 f2fc 	udiv	r2, r0, ip
 801e7d8:	e9d4 1300 	ldrd	r1, r3, [r4]
 801e7dc:	fb0c 0212 	mls	r2, ip, r2, r0
 801e7e0:	fbb3 f3fc 	udiv	r3, r3, ip
 801e7e4:	b292      	uxth	r2, r2
 801e7e6:	fb02 f303 	mul.w	r3, r2, r3
 801e7ea:	58cb      	ldr	r3, [r1, r3]
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d1e7      	bne.n	801e7c0 <uxr_compute_acknack+0x14>
 801e7f0:	4605      	mov	r5, r0
 801e7f2:	803d      	strh	r5, [r7, #0]
 801e7f4:	2101      	movs	r1, #1
 801e7f6:	89e6      	ldrh	r6, [r4, #14]
 801e7f8:	4628      	mov	r0, r5
 801e7fa:	f000 fb8d 	bl	801ef18 <uxr_seq_num_sub>
 801e7fe:	4601      	mov	r1, r0
 801e800:	4630      	mov	r0, r6
 801e802:	f000 fb89 	bl	801ef18 <uxr_seq_num_sub>
 801e806:	4606      	mov	r6, r0
 801e808:	b328      	cbz	r0, 801e856 <uxr_compute_acknack+0xaa>
 801e80a:	f04f 0900 	mov.w	r9, #0
 801e80e:	f04f 0801 	mov.w	r8, #1
 801e812:	464d      	mov	r5, r9
 801e814:	fa1f f189 	uxth.w	r1, r9
 801e818:	8838      	ldrh	r0, [r7, #0]
 801e81a:	f000 fb79 	bl	801ef10 <uxr_seq_num_add>
 801e81e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e822:	6861      	ldr	r1, [r4, #4]
 801e824:	fa08 fe09 	lsl.w	lr, r8, r9
 801e828:	6822      	ldr	r2, [r4, #0]
 801e82a:	f109 0901 	add.w	r9, r9, #1
 801e82e:	ea4e 0e05 	orr.w	lr, lr, r5
 801e832:	fbb0 f3fc 	udiv	r3, r0, ip
 801e836:	fbb1 f1fc 	udiv	r1, r1, ip
 801e83a:	fb03 001c 	mls	r0, r3, ip, r0
 801e83e:	b283      	uxth	r3, r0
 801e840:	fb01 f303 	mul.w	r3, r1, r3
 801e844:	58d3      	ldr	r3, [r2, r3]
 801e846:	b90b      	cbnz	r3, 801e84c <uxr_compute_acknack+0xa0>
 801e848:	fa1f f58e 	uxth.w	r5, lr
 801e84c:	454e      	cmp	r6, r9
 801e84e:	d1e1      	bne.n	801e814 <uxr_compute_acknack+0x68>
 801e850:	4628      	mov	r0, r5
 801e852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e856:	4605      	mov	r5, r0
 801e858:	4628      	mov	r0, r5
 801e85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e85e:	bf00      	nop

0801e860 <uxr_init_output_best_effort_stream>:
 801e860:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801e864:	6001      	str	r1, [r0, #0]
 801e866:	7303      	strb	r3, [r0, #12]
 801e868:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801e86c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801e870:	4770      	bx	lr
 801e872:	bf00      	nop

0801e874 <uxr_reset_output_best_effort_stream>:
 801e874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e878:	7b03      	ldrb	r3, [r0, #12]
 801e87a:	81c2      	strh	r2, [r0, #14]
 801e87c:	6043      	str	r3, [r0, #4]
 801e87e:	4770      	bx	lr

0801e880 <uxr_prepare_best_effort_buffer_to_write>:
 801e880:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e882:	4604      	mov	r4, r0
 801e884:	b083      	sub	sp, #12
 801e886:	6840      	ldr	r0, [r0, #4]
 801e888:	460d      	mov	r5, r1
 801e88a:	4616      	mov	r6, r2
 801e88c:	f7fb fa5c 	bl	8019d48 <uxr_submessage_padding>
 801e890:	6863      	ldr	r3, [r4, #4]
 801e892:	4418      	add	r0, r3
 801e894:	68a3      	ldr	r3, [r4, #8]
 801e896:	1942      	adds	r2, r0, r5
 801e898:	4293      	cmp	r3, r2
 801e89a:	bf2c      	ite	cs
 801e89c:	2701      	movcs	r7, #1
 801e89e:	2700      	movcc	r7, #0
 801e8a0:	d202      	bcs.n	801e8a8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801e8a2:	4638      	mov	r0, r7
 801e8a4:	b003      	add	sp, #12
 801e8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8a8:	9000      	str	r0, [sp, #0]
 801e8aa:	2300      	movs	r3, #0
 801e8ac:	4630      	mov	r0, r6
 801e8ae:	6821      	ldr	r1, [r4, #0]
 801e8b0:	f7f4 fc8e 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 801e8b4:	6861      	ldr	r1, [r4, #4]
 801e8b6:	4638      	mov	r0, r7
 801e8b8:	4429      	add	r1, r5
 801e8ba:	6061      	str	r1, [r4, #4]
 801e8bc:	b003      	add	sp, #12
 801e8be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e8c0 <uxr_prepare_best_effort_buffer_to_send>:
 801e8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8c4:	4604      	mov	r4, r0
 801e8c6:	461d      	mov	r5, r3
 801e8c8:	6840      	ldr	r0, [r0, #4]
 801e8ca:	7b23      	ldrb	r3, [r4, #12]
 801e8cc:	4298      	cmp	r0, r3
 801e8ce:	bf8c      	ite	hi
 801e8d0:	2601      	movhi	r6, #1
 801e8d2:	2600      	movls	r6, #0
 801e8d4:	d802      	bhi.n	801e8dc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801e8d6:	4630      	mov	r0, r6
 801e8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8dc:	4688      	mov	r8, r1
 801e8de:	89e0      	ldrh	r0, [r4, #14]
 801e8e0:	2101      	movs	r1, #1
 801e8e2:	4617      	mov	r7, r2
 801e8e4:	f000 fb14 	bl	801ef10 <uxr_seq_num_add>
 801e8e8:	6823      	ldr	r3, [r4, #0]
 801e8ea:	81e0      	strh	r0, [r4, #14]
 801e8ec:	8028      	strh	r0, [r5, #0]
 801e8ee:	4630      	mov	r0, r6
 801e8f0:	f8c8 3000 	str.w	r3, [r8]
 801e8f4:	6863      	ldr	r3, [r4, #4]
 801e8f6:	603b      	str	r3, [r7, #0]
 801e8f8:	7b23      	ldrb	r3, [r4, #12]
 801e8fa:	6063      	str	r3, [r4, #4]
 801e8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e900 <on_full_output_buffer>:
 801e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e902:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801e906:	460c      	mov	r4, r1
 801e908:	6803      	ldr	r3, [r0, #0]
 801e90a:	4605      	mov	r5, r0
 801e90c:	7b26      	ldrb	r6, [r4, #12]
 801e90e:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e912:	fbb2 f2fc 	udiv	r2, r2, ip
 801e916:	eba3 0e01 	sub.w	lr, r3, r1
 801e91a:	6903      	ldr	r3, [r0, #16]
 801e91c:	fbbe fef2 	udiv	lr, lr, r2
 801e920:	f10e 0e01 	add.w	lr, lr, #1
 801e924:	fa1f fe8e 	uxth.w	lr, lr
 801e928:	fbbe f7fc 	udiv	r7, lr, ip
 801e92c:	fb0c ec17 	mls	ip, ip, r7, lr
 801e930:	fa1f fc8c 	uxth.w	ip, ip
 801e934:	fb02 fc0c 	mul.w	ip, r2, ip
 801e938:	f851 200c 	ldr.w	r2, [r1, ip]
 801e93c:	44b4      	add	ip, r6
 801e93e:	1b92      	subs	r2, r2, r6
 801e940:	f10c 0c08 	add.w	ip, ip, #8
 801e944:	3a04      	subs	r2, #4
 801e946:	4461      	add	r1, ip
 801e948:	f7f4 fc4c 	bl	80131e4 <ucdr_init_buffer_origin>
 801e94c:	4628      	mov	r0, r5
 801e94e:	4622      	mov	r2, r4
 801e950:	4902      	ldr	r1, [pc, #8]	; (801e95c <on_full_output_buffer+0x5c>)
 801e952:	f7f4 fc23 	bl	801319c <ucdr_set_on_full_buffer_callback>
 801e956:	2000      	movs	r0, #0
 801e958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e95a:	bf00      	nop
 801e95c:	0801e901 	.word	0x0801e901

0801e960 <uxr_init_output_reliable_stream>:
 801e960:	b530      	push	{r4, r5, lr}
 801e962:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801e966:	8103      	strh	r3, [r0, #8]
 801e968:	7304      	strb	r4, [r0, #12]
 801e96a:	e9c0 1200 	strd	r1, r2, [r0]
 801e96e:	b1e3      	cbz	r3, 801e9aa <uxr_init_output_reliable_stream+0x4a>
 801e970:	600c      	str	r4, [r1, #0]
 801e972:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e976:	f1bc 0f01 	cmp.w	ip, #1
 801e97a:	d916      	bls.n	801e9aa <uxr_init_output_reliable_stream+0x4a>
 801e97c:	f04f 0e01 	mov.w	lr, #1
 801e980:	6843      	ldr	r3, [r0, #4]
 801e982:	f10e 0501 	add.w	r5, lr, #1
 801e986:	7b04      	ldrb	r4, [r0, #12]
 801e988:	6801      	ldr	r1, [r0, #0]
 801e98a:	fbbe f2fc 	udiv	r2, lr, ip
 801e98e:	fbb3 f3fc 	udiv	r3, r3, ip
 801e992:	fb0c e212 	mls	r2, ip, r2, lr
 801e996:	fa1f fe85 	uxth.w	lr, r5
 801e99a:	b292      	uxth	r2, r2
 801e99c:	fb02 f303 	mul.w	r3, r2, r3
 801e9a0:	50cc      	str	r4, [r1, r3]
 801e9a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e9a6:	45f4      	cmp	ip, lr
 801e9a8:	d8ea      	bhi.n	801e980 <uxr_init_output_reliable_stream+0x20>
 801e9aa:	4b07      	ldr	r3, [pc, #28]	; (801e9c8 <uxr_init_output_reliable_stream+0x68>)
 801e9ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e9b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e9b4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801e9b8:	f8c0 300e 	str.w	r3, [r0, #14]
 801e9bc:	2300      	movs	r3, #0
 801e9be:	8242      	strh	r2, [r0, #18]
 801e9c0:	8403      	strh	r3, [r0, #32]
 801e9c2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801e9c6:	bd30      	pop	{r4, r5, pc}
 801e9c8:	ffff0000 	.word	0xffff0000
 801e9cc:	00000000 	.word	0x00000000

0801e9d0 <uxr_reset_output_reliable_stream>:
 801e9d0:	8901      	ldrh	r1, [r0, #8]
 801e9d2:	b510      	push	{r4, lr}
 801e9d4:	b1b1      	cbz	r1, 801ea04 <uxr_reset_output_reliable_stream+0x34>
 801e9d6:	f04f 0e00 	mov.w	lr, #0
 801e9da:	46f4      	mov	ip, lr
 801e9dc:	6843      	ldr	r3, [r0, #4]
 801e9de:	f10e 0e01 	add.w	lr, lr, #1
 801e9e2:	7b04      	ldrb	r4, [r0, #12]
 801e9e4:	fbbc f2f1 	udiv	r2, ip, r1
 801e9e8:	fbb3 f3f1 	udiv	r3, r3, r1
 801e9ec:	fb01 c212 	mls	r2, r1, r2, ip
 801e9f0:	fa1f fc8e 	uxth.w	ip, lr
 801e9f4:	b292      	uxth	r2, r2
 801e9f6:	fb02 f303 	mul.w	r3, r2, r3
 801e9fa:	6802      	ldr	r2, [r0, #0]
 801e9fc:	50d4      	str	r4, [r2, r3]
 801e9fe:	8901      	ldrh	r1, [r0, #8]
 801ea00:	4561      	cmp	r1, ip
 801ea02:	d8eb      	bhi.n	801e9dc <uxr_reset_output_reliable_stream+0xc>
 801ea04:	4b08      	ldr	r3, [pc, #32]	; (801ea28 <uxr_reset_output_reliable_stream+0x58>)
 801ea06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ea0a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801ea20 <uxr_reset_output_reliable_stream+0x50>
 801ea0e:	f8c0 300e 	str.w	r3, [r0, #14]
 801ea12:	2300      	movs	r3, #0
 801ea14:	8242      	strh	r2, [r0, #18]
 801ea16:	8403      	strh	r3, [r0, #32]
 801ea18:	ed80 7b06 	vstr	d7, [r0, #24]
 801ea1c:	bd10      	pop	{r4, pc}
 801ea1e:	bf00      	nop
 801ea20:	ffffffff 	.word	0xffffffff
 801ea24:	7fffffff 	.word	0x7fffffff
 801ea28:	ffff0000 	.word	0xffff0000

0801ea2c <uxr_prepare_reliable_buffer_to_write>:
 801ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea30:	4604      	mov	r4, r0
 801ea32:	b091      	sub	sp, #68	; 0x44
 801ea34:	8900      	ldrh	r0, [r0, #8]
 801ea36:	468b      	mov	fp, r1
 801ea38:	89e6      	ldrh	r6, [r4, #14]
 801ea3a:	9204      	str	r2, [sp, #16]
 801ea3c:	6865      	ldr	r5, [r4, #4]
 801ea3e:	6823      	ldr	r3, [r4, #0]
 801ea40:	f894 900c 	ldrb.w	r9, [r4, #12]
 801ea44:	fbb6 f2f0 	udiv	r2, r6, r0
 801ea48:	fbb5 f5f0 	udiv	r5, r5, r0
 801ea4c:	fb00 6212 	mls	r2, r0, r2, r6
 801ea50:	1f2f      	subs	r7, r5, #4
 801ea52:	b292      	uxth	r2, r2
 801ea54:	fb05 3202 	mla	r2, r5, r2, r3
 801ea58:	1d11      	adds	r1, r2, #4
 801ea5a:	f8d2 8000 	ldr.w	r8, [r2]
 801ea5e:	9103      	str	r1, [sp, #12]
 801ea60:	2800      	cmp	r0, #0
 801ea62:	f000 814a 	beq.w	801ecfa <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801ea66:	f04f 0c00 	mov.w	ip, #0
 801ea6a:	46e2      	mov	sl, ip
 801ea6c:	4661      	mov	r1, ip
 801ea6e:	f10c 0c01 	add.w	ip, ip, #1
 801ea72:	fbb1 f2f0 	udiv	r2, r1, r0
 801ea76:	fb00 1212 	mls	r2, r0, r2, r1
 801ea7a:	fa1f f18c 	uxth.w	r1, ip
 801ea7e:	b292      	uxth	r2, r2
 801ea80:	fb05 f202 	mul.w	r2, r5, r2
 801ea84:	589a      	ldr	r2, [r3, r2]
 801ea86:	454a      	cmp	r2, r9
 801ea88:	d103      	bne.n	801ea92 <uxr_prepare_reliable_buffer_to_write+0x66>
 801ea8a:	f10a 0a01 	add.w	sl, sl, #1
 801ea8e:	fa1f fa8a 	uxth.w	sl, sl
 801ea92:	4281      	cmp	r1, r0
 801ea94:	d3eb      	bcc.n	801ea6e <uxr_prepare_reliable_buffer_to_write+0x42>
 801ea96:	4640      	mov	r0, r8
 801ea98:	2104      	movs	r1, #4
 801ea9a:	f8cd a014 	str.w	sl, [sp, #20]
 801ea9e:	f7f4 fbad 	bl	80131fc <ucdr_alignment>
 801eaa2:	4480      	add	r8, r0
 801eaa4:	eb08 020b 	add.w	r2, r8, fp
 801eaa8:	42ba      	cmp	r2, r7
 801eaaa:	f240 80ca 	bls.w	801ec42 <uxr_prepare_reliable_buffer_to_write+0x216>
 801eaae:	7b22      	ldrb	r2, [r4, #12]
 801eab0:	445a      	add	r2, fp
 801eab2:	42ba      	cmp	r2, r7
 801eab4:	f240 80b2 	bls.w	801ec1c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801eab8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801eabc:	b2bb      	uxth	r3, r7
 801eabe:	eba2 0209 	sub.w	r2, r2, r9
 801eac2:	441a      	add	r2, r3
 801eac4:	b292      	uxth	r2, r2
 801eac6:	fb0a f902 	mul.w	r9, sl, r2
 801eaca:	9205      	str	r2, [sp, #20]
 801eacc:	45d9      	cmp	r9, fp
 801eace:	9206      	str	r2, [sp, #24]
 801ead0:	f0c0 80b3 	bcc.w	801ec3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ead4:	f108 0204 	add.w	r2, r8, #4
 801ead8:	42ba      	cmp	r2, r7
 801eada:	f080 80da 	bcs.w	801ec92 <uxr_prepare_reliable_buffer_to_write+0x266>
 801eade:	f1a3 0904 	sub.w	r9, r3, #4
 801eae2:	9b05      	ldr	r3, [sp, #20]
 801eae4:	eba9 0908 	sub.w	r9, r9, r8
 801eae8:	fa1f f989 	uxth.w	r9, r9
 801eaec:	ebab 0b09 	sub.w	fp, fp, r9
 801eaf0:	fbbb f2f3 	udiv	r2, fp, r3
 801eaf4:	fb03 b312 	mls	r3, r3, r2, fp
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	f040 80c4 	bne.w	801ec86 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801eafe:	b293      	uxth	r3, r2
 801eb00:	4553      	cmp	r3, sl
 801eb02:	f200 809a 	bhi.w	801ec3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	f000 80f9 	beq.w	801ecfe <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801eb0c:	f8cd 801c 	str.w	r8, [sp, #28]
 801eb10:	f04f 0a00 	mov.w	sl, #0
 801eb14:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801eb18:	f10d 0b20 	add.w	fp, sp, #32
 801eb1c:	9505      	str	r5, [sp, #20]
 801eb1e:	461d      	mov	r5, r3
 801eb20:	e000      	b.n	801eb24 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801eb22:	46c1      	mov	r9, r8
 801eb24:	8922      	ldrh	r2, [r4, #8]
 801eb26:	4658      	mov	r0, fp
 801eb28:	6863      	ldr	r3, [r4, #4]
 801eb2a:	f10a 0a01 	add.w	sl, sl, #1
 801eb2e:	fbb6 f1f2 	udiv	r1, r6, r2
 801eb32:	fbb3 f3f2 	udiv	r3, r3, r2
 801eb36:	fb02 6111 	mls	r1, r2, r1, r6
 801eb3a:	463a      	mov	r2, r7
 801eb3c:	b289      	uxth	r1, r1
 801eb3e:	fb03 f101 	mul.w	r1, r3, r1
 801eb42:	6823      	ldr	r3, [r4, #0]
 801eb44:	3104      	adds	r1, #4
 801eb46:	4419      	add	r1, r3
 801eb48:	2300      	movs	r3, #0
 801eb4a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801eb4e:	f8cd c000 	str.w	ip, [sp]
 801eb52:	f7f4 fb3d 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 801eb56:	464a      	mov	r2, r9
 801eb58:	2300      	movs	r3, #0
 801eb5a:	210d      	movs	r1, #13
 801eb5c:	4658      	mov	r0, fp
 801eb5e:	f7fb f8b3 	bl	8019cc8 <uxr_buffer_submessage_header>
 801eb62:	8921      	ldrh	r1, [r4, #8]
 801eb64:	6863      	ldr	r3, [r4, #4]
 801eb66:	4630      	mov	r0, r6
 801eb68:	fbb6 f2f1 	udiv	r2, r6, r1
 801eb6c:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb70:	fb01 6212 	mls	r2, r1, r2, r6
 801eb74:	2101      	movs	r1, #1
 801eb76:	b292      	uxth	r2, r2
 801eb78:	fb02 f303 	mul.w	r3, r2, r3
 801eb7c:	6822      	ldr	r2, [r4, #0]
 801eb7e:	50d7      	str	r7, [r2, r3]
 801eb80:	f000 f9c6 	bl	801ef10 <uxr_seq_num_add>
 801eb84:	4606      	mov	r6, r0
 801eb86:	fa1f f38a 	uxth.w	r3, sl
 801eb8a:	429d      	cmp	r5, r3
 801eb8c:	d8c9      	bhi.n	801eb22 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801eb8e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801eb92:	9d05      	ldr	r5, [sp, #20]
 801eb94:	8920      	ldrh	r0, [r4, #8]
 801eb96:	463a      	mov	r2, r7
 801eb98:	6863      	ldr	r3, [r4, #4]
 801eb9a:	fbb6 f1f0 	udiv	r1, r6, r0
 801eb9e:	fbb3 f3f0 	udiv	r3, r3, r0
 801eba2:	fb00 6111 	mls	r1, r0, r1, r6
 801eba6:	4658      	mov	r0, fp
 801eba8:	b289      	uxth	r1, r1
 801ebaa:	fb01 f303 	mul.w	r3, r1, r3
 801ebae:	6821      	ldr	r1, [r4, #0]
 801ebb0:	3304      	adds	r3, #4
 801ebb2:	4419      	add	r1, r3
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801ebba:	9700      	str	r7, [sp, #0]
 801ebbc:	f7f4 fb08 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 801ebc0:	9f06      	ldr	r7, [sp, #24]
 801ebc2:	4658      	mov	r0, fp
 801ebc4:	2302      	movs	r3, #2
 801ebc6:	b2ba      	uxth	r2, r7
 801ebc8:	210d      	movs	r1, #13
 801ebca:	f7fb f87d 	bl	8019cc8 <uxr_buffer_submessage_header>
 801ebce:	f108 0104 	add.w	r1, r8, #4
 801ebd2:	9b03      	ldr	r3, [sp, #12]
 801ebd4:	f1a5 0208 	sub.w	r2, r5, #8
 801ebd8:	8925      	ldrh	r5, [r4, #8]
 801ebda:	440b      	add	r3, r1
 801ebdc:	eba2 0208 	sub.w	r2, r2, r8
 801ebe0:	fbb6 f0f5 	udiv	r0, r6, r5
 801ebe4:	4619      	mov	r1, r3
 801ebe6:	6863      	ldr	r3, [r4, #4]
 801ebe8:	fb05 6010 	mls	r0, r5, r0, r6
 801ebec:	fbb3 f3f5 	udiv	r3, r3, r5
 801ebf0:	b280      	uxth	r0, r0
 801ebf2:	6825      	ldr	r5, [r4, #0]
 801ebf4:	fb00 f303 	mul.w	r3, r0, r3
 801ebf8:	7b20      	ldrb	r0, [r4, #12]
 801ebfa:	3004      	adds	r0, #4
 801ebfc:	4438      	add	r0, r7
 801ebfe:	50e8      	str	r0, [r5, r3]
 801ec00:	9d04      	ldr	r5, [sp, #16]
 801ec02:	4628      	mov	r0, r5
 801ec04:	f7f4 faf6 	bl	80131f4 <ucdr_init_buffer>
 801ec08:	4628      	mov	r0, r5
 801ec0a:	4622      	mov	r2, r4
 801ec0c:	493d      	ldr	r1, [pc, #244]	; (801ed04 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ec0e:	f7f4 fac5 	bl	801319c <ucdr_set_on_full_buffer_callback>
 801ec12:	2001      	movs	r0, #1
 801ec14:	81e6      	strh	r6, [r4, #14]
 801ec16:	b011      	add	sp, #68	; 0x44
 801ec18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec1c:	2101      	movs	r1, #1
 801ec1e:	89e0      	ldrh	r0, [r4, #14]
 801ec20:	f000 f976 	bl	801ef10 <uxr_seq_num_add>
 801ec24:	4605      	mov	r5, r0
 801ec26:	8921      	ldrh	r1, [r4, #8]
 801ec28:	8a60      	ldrh	r0, [r4, #18]
 801ec2a:	f000 f971 	bl	801ef10 <uxr_seq_num_add>
 801ec2e:	4601      	mov	r1, r0
 801ec30:	4628      	mov	r0, r5
 801ec32:	f000 f975 	bl	801ef20 <uxr_seq_num_cmp>
 801ec36:	2800      	cmp	r0, #0
 801ec38:	dd44      	ble.n	801ecc4 <uxr_prepare_reliable_buffer_to_write+0x298>
 801ec3a:	2000      	movs	r0, #0
 801ec3c:	b011      	add	sp, #68	; 0x44
 801ec3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec42:	8921      	ldrh	r1, [r4, #8]
 801ec44:	8a60      	ldrh	r0, [r4, #18]
 801ec46:	9205      	str	r2, [sp, #20]
 801ec48:	f000 f962 	bl	801ef10 <uxr_seq_num_add>
 801ec4c:	4601      	mov	r1, r0
 801ec4e:	4630      	mov	r0, r6
 801ec50:	f000 f966 	bl	801ef20 <uxr_seq_num_cmp>
 801ec54:	2800      	cmp	r0, #0
 801ec56:	9a05      	ldr	r2, [sp, #20]
 801ec58:	dcef      	bgt.n	801ec3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ec5a:	8925      	ldrh	r5, [r4, #8]
 801ec5c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801ec60:	fbb6 f4f5 	udiv	r4, r6, r5
 801ec64:	fbb3 f3f5 	udiv	r3, r3, r5
 801ec68:	fb05 6414 	mls	r4, r5, r4, r6
 801ec6c:	b2a4      	uxth	r4, r4
 801ec6e:	fb04 f303 	mul.w	r3, r4, r3
 801ec72:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801ec76:	50fa      	str	r2, [r7, r3]
 801ec78:	2300      	movs	r3, #0
 801ec7a:	f8cd 8000 	str.w	r8, [sp]
 801ec7e:	f7f4 faa7 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 801ec82:	2001      	movs	r0, #1
 801ec84:	e7da      	b.n	801ec3c <uxr_prepare_reliable_buffer_to_write+0x210>
 801ec86:	3201      	adds	r2, #1
 801ec88:	9306      	str	r3, [sp, #24]
 801ec8a:	b293      	uxth	r3, r2
 801ec8c:	4553      	cmp	r3, sl
 801ec8e:	d8d4      	bhi.n	801ec3a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ec90:	e739      	b.n	801eb06 <uxr_prepare_reliable_buffer_to_write+0xda>
 801ec92:	4630      	mov	r0, r6
 801ec94:	2101      	movs	r1, #1
 801ec96:	9307      	str	r3, [sp, #28]
 801ec98:	f000 f93a 	bl	801ef10 <uxr_seq_num_add>
 801ec9c:	4606      	mov	r6, r0
 801ec9e:	8920      	ldrh	r0, [r4, #8]
 801eca0:	6862      	ldr	r2, [r4, #4]
 801eca2:	fbb6 f1f0 	udiv	r1, r6, r0
 801eca6:	fbb2 f2f0 	udiv	r2, r2, r0
 801ecaa:	fb00 6111 	mls	r1, r0, r1, r6
 801ecae:	b289      	uxth	r1, r1
 801ecb0:	fb01 f202 	mul.w	r2, r1, r2
 801ecb4:	6821      	ldr	r1, [r4, #0]
 801ecb6:	3204      	adds	r2, #4
 801ecb8:	188b      	adds	r3, r1, r2
 801ecba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ecbe:	9303      	str	r3, [sp, #12]
 801ecc0:	9b07      	ldr	r3, [sp, #28]
 801ecc2:	e70c      	b.n	801eade <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ecc4:	8921      	ldrh	r1, [r4, #8]
 801ecc6:	6863      	ldr	r3, [r4, #4]
 801ecc8:	9804      	ldr	r0, [sp, #16]
 801ecca:	fbb5 f2f1 	udiv	r2, r5, r1
 801ecce:	fbb3 f3f1 	udiv	r3, r3, r1
 801ecd2:	fb01 5212 	mls	r2, r1, r2, r5
 801ecd6:	6821      	ldr	r1, [r4, #0]
 801ecd8:	b292      	uxth	r2, r2
 801ecda:	fb02 f303 	mul.w	r3, r2, r3
 801ecde:	7b22      	ldrb	r2, [r4, #12]
 801ece0:	3304      	adds	r3, #4
 801ece2:	445a      	add	r2, fp
 801ece4:	4419      	add	r1, r3
 801ece6:	f841 2c04 	str.w	r2, [r1, #-4]
 801ecea:	7b23      	ldrb	r3, [r4, #12]
 801ecec:	9300      	str	r3, [sp, #0]
 801ecee:	2300      	movs	r3, #0
 801ecf0:	f7f4 fa6e 	bl	80131d0 <ucdr_init_buffer_origin_offset>
 801ecf4:	2001      	movs	r0, #1
 801ecf6:	81e5      	strh	r5, [r4, #14]
 801ecf8:	e7a0      	b.n	801ec3c <uxr_prepare_reliable_buffer_to_write+0x210>
 801ecfa:	4682      	mov	sl, r0
 801ecfc:	e6cb      	b.n	801ea96 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ecfe:	f10d 0b20 	add.w	fp, sp, #32
 801ed02:	e747      	b.n	801eb94 <uxr_prepare_reliable_buffer_to_write+0x168>
 801ed04:	0801e901 	.word	0x0801e901

0801ed08 <uxr_prepare_next_reliable_buffer_to_send>:
 801ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed0a:	4604      	mov	r4, r0
 801ed0c:	461d      	mov	r5, r3
 801ed0e:	460f      	mov	r7, r1
 801ed10:	8a00      	ldrh	r0, [r0, #16]
 801ed12:	2101      	movs	r1, #1
 801ed14:	4616      	mov	r6, r2
 801ed16:	f000 f8fb 	bl	801ef10 <uxr_seq_num_add>
 801ed1a:	8028      	strh	r0, [r5, #0]
 801ed1c:	8922      	ldrh	r2, [r4, #8]
 801ed1e:	6863      	ldr	r3, [r4, #4]
 801ed20:	fbb0 f1f2 	udiv	r1, r0, r2
 801ed24:	fbb3 f3f2 	udiv	r3, r3, r2
 801ed28:	fb02 0c11 	mls	ip, r2, r1, r0
 801ed2c:	89e1      	ldrh	r1, [r4, #14]
 801ed2e:	fa1f fc8c 	uxth.w	ip, ip
 801ed32:	fb0c fc03 	mul.w	ip, ip, r3
 801ed36:	6823      	ldr	r3, [r4, #0]
 801ed38:	f10c 0c04 	add.w	ip, ip, #4
 801ed3c:	4463      	add	r3, ip
 801ed3e:	603b      	str	r3, [r7, #0]
 801ed40:	6823      	ldr	r3, [r4, #0]
 801ed42:	449c      	add	ip, r3
 801ed44:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ed48:	6033      	str	r3, [r6, #0]
 801ed4a:	f000 f8e9 	bl	801ef20 <uxr_seq_num_cmp>
 801ed4e:	2800      	cmp	r0, #0
 801ed50:	dd01      	ble.n	801ed56 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ed52:	2000      	movs	r0, #0
 801ed54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed56:	7b23      	ldrb	r3, [r4, #12]
 801ed58:	6832      	ldr	r2, [r6, #0]
 801ed5a:	429a      	cmp	r2, r3
 801ed5c:	d9f9      	bls.n	801ed52 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ed5e:	8a61      	ldrh	r1, [r4, #18]
 801ed60:	8a20      	ldrh	r0, [r4, #16]
 801ed62:	f000 f8d9 	bl	801ef18 <uxr_seq_num_sub>
 801ed66:	8923      	ldrh	r3, [r4, #8]
 801ed68:	4283      	cmp	r3, r0
 801ed6a:	d0f2      	beq.n	801ed52 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ed6c:	8828      	ldrh	r0, [r5, #0]
 801ed6e:	89e3      	ldrh	r3, [r4, #14]
 801ed70:	8220      	strh	r0, [r4, #16]
 801ed72:	4298      	cmp	r0, r3
 801ed74:	d001      	beq.n	801ed7a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801ed76:	2001      	movs	r0, #1
 801ed78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed7a:	2101      	movs	r1, #1
 801ed7c:	f000 f8c8 	bl	801ef10 <uxr_seq_num_add>
 801ed80:	4603      	mov	r3, r0
 801ed82:	2001      	movs	r0, #1
 801ed84:	81e3      	strh	r3, [r4, #14]
 801ed86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ed88 <uxr_update_output_stream_heartbeat_timestamp>:
 801ed88:	b570      	push	{r4, r5, r6, lr}
 801ed8a:	8a01      	ldrh	r1, [r0, #16]
 801ed8c:	4604      	mov	r4, r0
 801ed8e:	8a40      	ldrh	r0, [r0, #18]
 801ed90:	4615      	mov	r5, r2
 801ed92:	461e      	mov	r6, r3
 801ed94:	f000 f8c4 	bl	801ef20 <uxr_seq_num_cmp>
 801ed98:	2800      	cmp	r0, #0
 801ed9a:	db07      	blt.n	801edac <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ed9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801eda0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801eda4:	2000      	movs	r0, #0
 801eda6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801edaa:	bd70      	pop	{r4, r5, r6, pc}
 801edac:	f894 0020 	ldrb.w	r0, [r4, #32]
 801edb0:	b940      	cbnz	r0, 801edc4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801edb2:	2301      	movs	r3, #1
 801edb4:	f884 3020 	strb.w	r3, [r4, #32]
 801edb8:	3564      	adds	r5, #100	; 0x64
 801edba:	f146 0600 	adc.w	r6, r6, #0
 801edbe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801edc2:	bd70      	pop	{r4, r5, r6, pc}
 801edc4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801edc8:	4295      	cmp	r5, r2
 801edca:	eb76 0303 	sbcs.w	r3, r6, r3
 801edce:	db04      	blt.n	801edda <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801edd0:	1c43      	adds	r3, r0, #1
 801edd2:	2001      	movs	r0, #1
 801edd4:	f884 3020 	strb.w	r3, [r4, #32]
 801edd8:	e7ee      	b.n	801edb8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801edda:	2000      	movs	r0, #0
 801eddc:	e7ec      	b.n	801edb8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801edde:	bf00      	nop

0801ede0 <uxr_begin_output_nack_buffer_it>:
 801ede0:	8a40      	ldrh	r0, [r0, #18]
 801ede2:	4770      	bx	lr

0801ede4 <uxr_next_reliable_nack_buffer_to_send>:
 801ede4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ede8:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801edec:	b197      	cbz	r7, 801ee14 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801edee:	4680      	mov	r8, r0
 801edf0:	460d      	mov	r5, r1
 801edf2:	4616      	mov	r6, r2
 801edf4:	461c      	mov	r4, r3
 801edf6:	8818      	ldrh	r0, [r3, #0]
 801edf8:	2101      	movs	r1, #1
 801edfa:	f000 f889 	bl	801ef10 <uxr_seq_num_add>
 801edfe:	8020      	strh	r0, [r4, #0]
 801ee00:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801ee04:	f000 f88c 	bl	801ef20 <uxr_seq_num_cmp>
 801ee08:	2800      	cmp	r0, #0
 801ee0a:	dd06      	ble.n	801ee1a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	461f      	mov	r7, r3
 801ee10:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801ee14:	4638      	mov	r0, r7
 801ee16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee1a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801ee1e:	8820      	ldrh	r0, [r4, #0]
 801ee20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ee24:	fbb0 f3f2 	udiv	r3, r0, r2
 801ee28:	fbb1 fcf2 	udiv	ip, r1, r2
 801ee2c:	fb02 0313 	mls	r3, r2, r3, r0
 801ee30:	b29b      	uxth	r3, r3
 801ee32:	fb03 fc0c 	mul.w	ip, r3, ip
 801ee36:	f8d8 3000 	ldr.w	r3, [r8]
 801ee3a:	f10c 0c04 	add.w	ip, ip, #4
 801ee3e:	4463      	add	r3, ip
 801ee40:	602b      	str	r3, [r5, #0]
 801ee42:	f8d8 3000 	ldr.w	r3, [r8]
 801ee46:	4463      	add	r3, ip
 801ee48:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801ee4c:	6033      	str	r3, [r6, #0]
 801ee4e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801ee52:	429a      	cmp	r2, r3
 801ee54:	d0d0      	beq.n	801edf8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801ee56:	e7dd      	b.n	801ee14 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801ee58 <uxr_process_acknack>:
 801ee58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee5a:	4604      	mov	r4, r0
 801ee5c:	460e      	mov	r6, r1
 801ee5e:	4610      	mov	r0, r2
 801ee60:	2101      	movs	r1, #1
 801ee62:	f000 f859 	bl	801ef18 <uxr_seq_num_sub>
 801ee66:	8a61      	ldrh	r1, [r4, #18]
 801ee68:	f000 f856 	bl	801ef18 <uxr_seq_num_sub>
 801ee6c:	b1c8      	cbz	r0, 801eea2 <uxr_process_acknack+0x4a>
 801ee6e:	4605      	mov	r5, r0
 801ee70:	2700      	movs	r7, #0
 801ee72:	2101      	movs	r1, #1
 801ee74:	8a60      	ldrh	r0, [r4, #18]
 801ee76:	f000 f84b 	bl	801ef10 <uxr_seq_num_add>
 801ee7a:	8923      	ldrh	r3, [r4, #8]
 801ee7c:	6862      	ldr	r2, [r4, #4]
 801ee7e:	3701      	adds	r7, #1
 801ee80:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801ee84:	6821      	ldr	r1, [r4, #0]
 801ee86:	42bd      	cmp	r5, r7
 801ee88:	8260      	strh	r0, [r4, #18]
 801ee8a:	fbb0 fef3 	udiv	lr, r0, r3
 801ee8e:	fbb2 f2f3 	udiv	r2, r2, r3
 801ee92:	fb03 031e 	mls	r3, r3, lr, r0
 801ee96:	b29b      	uxth	r3, r3
 801ee98:	fb02 f303 	mul.w	r3, r2, r3
 801ee9c:	f841 c003 	str.w	ip, [r1, r3]
 801eea0:	d1e7      	bne.n	801ee72 <uxr_process_acknack+0x1a>
 801eea2:	3e00      	subs	r6, #0
 801eea4:	f04f 0300 	mov.w	r3, #0
 801eea8:	bf18      	it	ne
 801eeaa:	2601      	movne	r6, #1
 801eeac:	f884 3020 	strb.w	r3, [r4, #32]
 801eeb0:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801eeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eeb6:	bf00      	nop

0801eeb8 <uxr_is_output_up_to_date>:
 801eeb8:	8a01      	ldrh	r1, [r0, #16]
 801eeba:	8a40      	ldrh	r0, [r0, #18]
 801eebc:	b508      	push	{r3, lr}
 801eebe:	f000 f82f 	bl	801ef20 <uxr_seq_num_cmp>
 801eec2:	fab0 f080 	clz	r0, r0
 801eec6:	0940      	lsrs	r0, r0, #5
 801eec8:	bd08      	pop	{r3, pc}
 801eeca:	bf00      	nop

0801eecc <get_available_free_slots>:
 801eecc:	8901      	ldrh	r1, [r0, #8]
 801eece:	b1e1      	cbz	r1, 801ef0a <get_available_free_slots+0x3e>
 801eed0:	6843      	ldr	r3, [r0, #4]
 801eed2:	f04f 0c00 	mov.w	ip, #0
 801eed6:	b530      	push	{r4, r5, lr}
 801eed8:	fbb3 fef1 	udiv	lr, r3, r1
 801eedc:	6805      	ldr	r5, [r0, #0]
 801eede:	4662      	mov	r2, ip
 801eee0:	7b04      	ldrb	r4, [r0, #12]
 801eee2:	4660      	mov	r0, ip
 801eee4:	f10c 0c01 	add.w	ip, ip, #1
 801eee8:	fbb2 f3f1 	udiv	r3, r2, r1
 801eeec:	fb01 2313 	mls	r3, r1, r3, r2
 801eef0:	fa1f f28c 	uxth.w	r2, ip
 801eef4:	b29b      	uxth	r3, r3
 801eef6:	fb0e f303 	mul.w	r3, lr, r3
 801eefa:	58eb      	ldr	r3, [r5, r3]
 801eefc:	429c      	cmp	r4, r3
 801eefe:	d101      	bne.n	801ef04 <get_available_free_slots+0x38>
 801ef00:	3001      	adds	r0, #1
 801ef02:	b280      	uxth	r0, r0
 801ef04:	428a      	cmp	r2, r1
 801ef06:	d3ed      	bcc.n	801eee4 <get_available_free_slots+0x18>
 801ef08:	bd30      	pop	{r4, r5, pc}
 801ef0a:	4608      	mov	r0, r1
 801ef0c:	4770      	bx	lr
 801ef0e:	bf00      	nop

0801ef10 <uxr_seq_num_add>:
 801ef10:	4408      	add	r0, r1
 801ef12:	b280      	uxth	r0, r0
 801ef14:	4770      	bx	lr
 801ef16:	bf00      	nop

0801ef18 <uxr_seq_num_sub>:
 801ef18:	1a40      	subs	r0, r0, r1
 801ef1a:	b280      	uxth	r0, r0
 801ef1c:	4770      	bx	lr
 801ef1e:	bf00      	nop

0801ef20 <uxr_seq_num_cmp>:
 801ef20:	4288      	cmp	r0, r1
 801ef22:	d011      	beq.n	801ef48 <uxr_seq_num_cmp+0x28>
 801ef24:	d309      	bcc.n	801ef3a <uxr_seq_num_cmp+0x1a>
 801ef26:	4288      	cmp	r0, r1
 801ef28:	d910      	bls.n	801ef4c <uxr_seq_num_cmp+0x2c>
 801ef2a:	1a40      	subs	r0, r0, r1
 801ef2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801ef30:	bfd4      	ite	le
 801ef32:	2001      	movle	r0, #1
 801ef34:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801ef38:	4770      	bx	lr
 801ef3a:	1a0b      	subs	r3, r1, r0
 801ef3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ef40:	daf1      	bge.n	801ef26 <uxr_seq_num_cmp+0x6>
 801ef42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ef46:	4770      	bx	lr
 801ef48:	2000      	movs	r0, #0
 801ef4a:	4770      	bx	lr
 801ef4c:	2001      	movs	r0, #1
 801ef4e:	4770      	bx	lr

0801ef50 <rcl_get_default_domain_id>:
 801ef50:	b530      	push	{r4, r5, lr}
 801ef52:	2300      	movs	r3, #0
 801ef54:	b083      	sub	sp, #12
 801ef56:	9300      	str	r3, [sp, #0]
 801ef58:	b1d0      	cbz	r0, 801ef90 <rcl_get_default_domain_id+0x40>
 801ef5a:	4604      	mov	r4, r0
 801ef5c:	4669      	mov	r1, sp
 801ef5e:	4815      	ldr	r0, [pc, #84]	; (801efb4 <rcl_get_default_domain_id+0x64>)
 801ef60:	f7f6 f82e 	bl	8014fc0 <rcutils_get_env>
 801ef64:	4602      	mov	r2, r0
 801ef66:	b110      	cbz	r0, 801ef6e <rcl_get_default_domain_id+0x1e>
 801ef68:	2001      	movs	r0, #1
 801ef6a:	b003      	add	sp, #12
 801ef6c:	bd30      	pop	{r4, r5, pc}
 801ef6e:	9b00      	ldr	r3, [sp, #0]
 801ef70:	b18b      	cbz	r3, 801ef96 <rcl_get_default_domain_id+0x46>
 801ef72:	7818      	ldrb	r0, [r3, #0]
 801ef74:	2800      	cmp	r0, #0
 801ef76:	d0f8      	beq.n	801ef6a <rcl_get_default_domain_id+0x1a>
 801ef78:	a901      	add	r1, sp, #4
 801ef7a:	4618      	mov	r0, r3
 801ef7c:	9201      	str	r2, [sp, #4]
 801ef7e:	f000 fc8f 	bl	801f8a0 <strtoul>
 801ef82:	4605      	mov	r5, r0
 801ef84:	b150      	cbz	r0, 801ef9c <rcl_get_default_domain_id+0x4c>
 801ef86:	1c43      	adds	r3, r0, #1
 801ef88:	d00d      	beq.n	801efa6 <rcl_get_default_domain_id+0x56>
 801ef8a:	2000      	movs	r0, #0
 801ef8c:	6025      	str	r5, [r4, #0]
 801ef8e:	e7ec      	b.n	801ef6a <rcl_get_default_domain_id+0x1a>
 801ef90:	200b      	movs	r0, #11
 801ef92:	b003      	add	sp, #12
 801ef94:	bd30      	pop	{r4, r5, pc}
 801ef96:	4618      	mov	r0, r3
 801ef98:	b003      	add	sp, #12
 801ef9a:	bd30      	pop	{r4, r5, pc}
 801ef9c:	9b01      	ldr	r3, [sp, #4]
 801ef9e:	781b      	ldrb	r3, [r3, #0]
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d0f2      	beq.n	801ef8a <rcl_get_default_domain_id+0x3a>
 801efa4:	e7e0      	b.n	801ef68 <rcl_get_default_domain_id+0x18>
 801efa6:	f001 ff25 	bl	8020df4 <__errno>
 801efaa:	6803      	ldr	r3, [r0, #0]
 801efac:	2b22      	cmp	r3, #34	; 0x22
 801efae:	d1ec      	bne.n	801ef8a <rcl_get_default_domain_id+0x3a>
 801efb0:	e7da      	b.n	801ef68 <rcl_get_default_domain_id+0x18>
 801efb2:	bf00      	nop
 801efb4:	080258c0 	.word	0x080258c0

0801efb8 <rcl_expand_topic_name>:
 801efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efbc:	b08d      	sub	sp, #52	; 0x34
 801efbe:	4698      	mov	r8, r3
 801efc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801efc2:	9207      	str	r2, [sp, #28]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	bf18      	it	ne
 801efc8:	f1b8 0f00 	cmpne.w	r8, #0
 801efcc:	bf0c      	ite	eq
 801efce:	2301      	moveq	r3, #1
 801efd0:	2300      	movne	r3, #0
 801efd2:	2a00      	cmp	r2, #0
 801efd4:	bf08      	it	eq
 801efd6:	f043 0301 	orreq.w	r3, r3, #1
 801efda:	2900      	cmp	r1, #0
 801efdc:	bf08      	it	eq
 801efde:	f043 0301 	orreq.w	r3, r3, #1
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d13d      	bne.n	801f062 <rcl_expand_topic_name+0xaa>
 801efe6:	fab0 f280 	clz	r2, r0
 801efea:	4604      	mov	r4, r0
 801efec:	0952      	lsrs	r2, r2, #5
 801efee:	2800      	cmp	r0, #0
 801eff0:	d037      	beq.n	801f062 <rcl_expand_topic_name+0xaa>
 801eff2:	460f      	mov	r7, r1
 801eff4:	a90b      	add	r1, sp, #44	; 0x2c
 801eff6:	f000 f945 	bl	801f284 <rcl_validate_topic_name>
 801effa:	4605      	mov	r5, r0
 801effc:	bb68      	cbnz	r0, 801f05a <rcl_expand_topic_name+0xa2>
 801effe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f000:	2b00      	cmp	r3, #0
 801f002:	d137      	bne.n	801f074 <rcl_expand_topic_name+0xbc>
 801f004:	4602      	mov	r2, r0
 801f006:	a90b      	add	r1, sp, #44	; 0x2c
 801f008:	4638      	mov	r0, r7
 801f00a:	f7f6 fa9b 	bl	8015544 <rmw_validate_node_name>
 801f00e:	bb68      	cbnz	r0, 801f06c <rcl_expand_topic_name+0xb4>
 801f010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f012:	2b00      	cmp	r3, #0
 801f014:	d133      	bne.n	801f07e <rcl_expand_topic_name+0xc6>
 801f016:	462a      	mov	r2, r5
 801f018:	a90b      	add	r1, sp, #44	; 0x2c
 801f01a:	9807      	ldr	r0, [sp, #28]
 801f01c:	f7f6 fa74 	bl	8015508 <rmw_validate_namespace>
 801f020:	bb20      	cbnz	r0, 801f06c <rcl_expand_topic_name+0xb4>
 801f022:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f024:	2d00      	cmp	r5, #0
 801f026:	f040 80a2 	bne.w	801f16e <rcl_expand_topic_name+0x1b6>
 801f02a:	217b      	movs	r1, #123	; 0x7b
 801f02c:	4620      	mov	r0, r4
 801f02e:	f001 fe51 	bl	8020cd4 <strchr>
 801f032:	7823      	ldrb	r3, [r4, #0]
 801f034:	4681      	mov	r9, r0
 801f036:	bb20      	cbnz	r0, 801f082 <rcl_expand_topic_name+0xca>
 801f038:	2b2f      	cmp	r3, #47	; 0x2f
 801f03a:	d122      	bne.n	801f082 <rcl_expand_topic_name+0xca>
 801f03c:	ab19      	add	r3, sp, #100	; 0x64
 801f03e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f042:	ab16      	add	r3, sp, #88	; 0x58
 801f044:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f048:	4620      	mov	r0, r4
 801f04a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f04c:	f7f6 f93e 	bl	80152cc <rcutils_strdup>
 801f050:	2800      	cmp	r0, #0
 801f052:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f054:	bf08      	it	eq
 801f056:	250a      	moveq	r5, #10
 801f058:	6018      	str	r0, [r3, #0]
 801f05a:	4628      	mov	r0, r5
 801f05c:	b00d      	add	sp, #52	; 0x34
 801f05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f062:	250b      	movs	r5, #11
 801f064:	4628      	mov	r0, r5
 801f066:	b00d      	add	sp, #52	; 0x34
 801f068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f06c:	f7fc f97a 	bl	801b364 <rcl_convert_rmw_ret_to_rcl_ret>
 801f070:	4605      	mov	r5, r0
 801f072:	e7f2      	b.n	801f05a <rcl_expand_topic_name+0xa2>
 801f074:	2567      	movs	r5, #103	; 0x67
 801f076:	4628      	mov	r0, r5
 801f078:	b00d      	add	sp, #52	; 0x34
 801f07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f07e:	25c9      	movs	r5, #201	; 0xc9
 801f080:	e7eb      	b.n	801f05a <rcl_expand_topic_name+0xa2>
 801f082:	2b7e      	cmp	r3, #126	; 0x7e
 801f084:	d075      	beq.n	801f172 <rcl_expand_topic_name+0x1ba>
 801f086:	f1b9 0f00 	cmp.w	r9, #0
 801f08a:	f000 80c2 	beq.w	801f212 <rcl_expand_topic_name+0x25a>
 801f08e:	2300      	movs	r3, #0
 801f090:	46a2      	mov	sl, r4
 801f092:	461e      	mov	r6, r3
 801f094:	9508      	str	r5, [sp, #32]
 801f096:	4655      	mov	r5, sl
 801f098:	9409      	str	r4, [sp, #36]	; 0x24
 801f09a:	46b2      	mov	sl, r6
 801f09c:	464c      	mov	r4, r9
 801f09e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f0a2:	2c00      	cmp	r4, #0
 801f0a4:	f000 80ae 	beq.w	801f204 <rcl_expand_topic_name+0x24c>
 801f0a8:	217d      	movs	r1, #125	; 0x7d
 801f0aa:	4628      	mov	r0, r5
 801f0ac:	f001 fe12 	bl	8020cd4 <strchr>
 801f0b0:	eba0 0904 	sub.w	r9, r0, r4
 801f0b4:	4621      	mov	r1, r4
 801f0b6:	4869      	ldr	r0, [pc, #420]	; (801f25c <rcl_expand_topic_name+0x2a4>)
 801f0b8:	f109 0601 	add.w	r6, r9, #1
 801f0bc:	4632      	mov	r2, r6
 801f0be:	f001 fe16 	bl	8020cee <strncmp>
 801f0c2:	2800      	cmp	r0, #0
 801f0c4:	d051      	beq.n	801f16a <rcl_expand_topic_name+0x1b2>
 801f0c6:	4632      	mov	r2, r6
 801f0c8:	4621      	mov	r1, r4
 801f0ca:	4865      	ldr	r0, [pc, #404]	; (801f260 <rcl_expand_topic_name+0x2a8>)
 801f0cc:	f001 fe0f 	bl	8020cee <strncmp>
 801f0d0:	b128      	cbz	r0, 801f0de <rcl_expand_topic_name+0x126>
 801f0d2:	4632      	mov	r2, r6
 801f0d4:	4621      	mov	r1, r4
 801f0d6:	4863      	ldr	r0, [pc, #396]	; (801f264 <rcl_expand_topic_name+0x2ac>)
 801f0d8:	f001 fe09 	bl	8020cee <strncmp>
 801f0dc:	bb38      	cbnz	r0, 801f12e <rcl_expand_topic_name+0x176>
 801f0de:	46d9      	mov	r9, fp
 801f0e0:	ab18      	add	r3, sp, #96	; 0x60
 801f0e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f0e6:	ab16      	add	r3, sp, #88	; 0x58
 801f0e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f0ec:	4620      	mov	r0, r4
 801f0ee:	4631      	mov	r1, r6
 801f0f0:	cb0c      	ldmia	r3, {r2, r3}
 801f0f2:	f7f6 f90d 	bl	8015310 <rcutils_strndup>
 801f0f6:	4604      	mov	r4, r0
 801f0f8:	2800      	cmp	r0, #0
 801f0fa:	f000 80a3 	beq.w	801f244 <rcl_expand_topic_name+0x28c>
 801f0fe:	464a      	mov	r2, r9
 801f100:	4628      	mov	r0, r5
 801f102:	ab16      	add	r3, sp, #88	; 0x58
 801f104:	4621      	mov	r1, r4
 801f106:	f7f5 ffe1 	bl	80150cc <rcutils_repl_str>
 801f10a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f10c:	4605      	mov	r5, r0
 801f10e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f110:	4620      	mov	r0, r4
 801f112:	4798      	blx	r3
 801f114:	4650      	mov	r0, sl
 801f116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f118:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f11a:	4798      	blx	r3
 801f11c:	2d00      	cmp	r5, #0
 801f11e:	d06c      	beq.n	801f1fa <rcl_expand_topic_name+0x242>
 801f120:	217b      	movs	r1, #123	; 0x7b
 801f122:	4628      	mov	r0, r5
 801f124:	f001 fdd6 	bl	8020cd4 <strchr>
 801f128:	46aa      	mov	sl, r5
 801f12a:	4604      	mov	r4, r0
 801f12c:	e7b9      	b.n	801f0a2 <rcl_expand_topic_name+0xea>
 801f12e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801f132:	1c61      	adds	r1, r4, #1
 801f134:	4640      	mov	r0, r8
 801f136:	f7fe fca5 	bl	801da84 <rcutils_string_map_getn>
 801f13a:	4681      	mov	r9, r0
 801f13c:	2800      	cmp	r0, #0
 801f13e:	d1cf      	bne.n	801f0e0 <rcl_expand_topic_name+0x128>
 801f140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f142:	aa18      	add	r2, sp, #96	; 0x60
 801f144:	2569      	movs	r5, #105	; 0x69
 801f146:	6018      	str	r0, [r3, #0]
 801f148:	ab16      	add	r3, sp, #88	; 0x58
 801f14a:	ca07      	ldmia	r2, {r0, r1, r2}
 801f14c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f150:	4631      	mov	r1, r6
 801f152:	4620      	mov	r0, r4
 801f154:	cb0c      	ldmia	r3, {r2, r3}
 801f156:	f7f6 f8db 	bl	8015310 <rcutils_strndup>
 801f15a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f15c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f15e:	4798      	blx	r3
 801f160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f162:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f164:	4650      	mov	r0, sl
 801f166:	4798      	blx	r3
 801f168:	e777      	b.n	801f05a <rcl_expand_topic_name+0xa2>
 801f16a:	46b9      	mov	r9, r7
 801f16c:	e7b8      	b.n	801f0e0 <rcl_expand_topic_name+0x128>
 801f16e:	25ca      	movs	r5, #202	; 0xca
 801f170:	e773      	b.n	801f05a <rcl_expand_topic_name+0xa2>
 801f172:	9e07      	ldr	r6, [sp, #28]
 801f174:	4630      	mov	r0, r6
 801f176:	f7e1 f8c3 	bl	8000300 <strlen>
 801f17a:	4a3b      	ldr	r2, [pc, #236]	; (801f268 <rcl_expand_topic_name+0x2b0>)
 801f17c:	4b3b      	ldr	r3, [pc, #236]	; (801f26c <rcl_expand_topic_name+0x2b4>)
 801f17e:	9603      	str	r6, [sp, #12]
 801f180:	2801      	cmp	r0, #1
 801f182:	bf18      	it	ne
 801f184:	4613      	movne	r3, r2
 801f186:	9704      	str	r7, [sp, #16]
 801f188:	9302      	str	r3, [sp, #8]
 801f18a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f18c:	9300      	str	r3, [sp, #0]
 801f18e:	1c63      	adds	r3, r4, #1
 801f190:	9305      	str	r3, [sp, #20]
 801f192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f196:	9301      	str	r3, [sp, #4]
 801f198:	ab16      	add	r3, sp, #88	; 0x58
 801f19a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f19c:	f7f5 ff5c 	bl	8015058 <rcutils_format_string_limit>
 801f1a0:	4606      	mov	r6, r0
 801f1a2:	b350      	cbz	r0, 801f1fa <rcl_expand_topic_name+0x242>
 801f1a4:	f1b9 0f00 	cmp.w	r9, #0
 801f1a8:	d005      	beq.n	801f1b6 <rcl_expand_topic_name+0x1fe>
 801f1aa:	217b      	movs	r1, #123	; 0x7b
 801f1ac:	46b2      	mov	sl, r6
 801f1ae:	f001 fd91 	bl	8020cd4 <strchr>
 801f1b2:	4681      	mov	r9, r0
 801f1b4:	e76e      	b.n	801f094 <rcl_expand_topic_name+0xdc>
 801f1b6:	7833      	ldrb	r3, [r6, #0]
 801f1b8:	2b2f      	cmp	r3, #47	; 0x2f
 801f1ba:	d01b      	beq.n	801f1f4 <rcl_expand_topic_name+0x23c>
 801f1bc:	9c07      	ldr	r4, [sp, #28]
 801f1be:	4620      	mov	r0, r4
 801f1c0:	f7e1 f89e 	bl	8000300 <strlen>
 801f1c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f1c8:	4a29      	ldr	r2, [pc, #164]	; (801f270 <rcl_expand_topic_name+0x2b8>)
 801f1ca:	9301      	str	r3, [sp, #4]
 801f1cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f1ce:	9604      	str	r6, [sp, #16]
 801f1d0:	9300      	str	r3, [sp, #0]
 801f1d2:	4b28      	ldr	r3, [pc, #160]	; (801f274 <rcl_expand_topic_name+0x2bc>)
 801f1d4:	9403      	str	r4, [sp, #12]
 801f1d6:	2801      	cmp	r0, #1
 801f1d8:	bf18      	it	ne
 801f1da:	4613      	movne	r3, r2
 801f1dc:	9302      	str	r3, [sp, #8]
 801f1de:	ab16      	add	r3, sp, #88	; 0x58
 801f1e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f1e2:	f7f5 ff39 	bl	8015058 <rcutils_format_string_limit>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f1ea:	4630      	mov	r0, r6
 801f1ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f1ee:	461e      	mov	r6, r3
 801f1f0:	4790      	blx	r2
 801f1f2:	b116      	cbz	r6, 801f1fa <rcl_expand_topic_name+0x242>
 801f1f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f1f6:	601e      	str	r6, [r3, #0]
 801f1f8:	e72f      	b.n	801f05a <rcl_expand_topic_name+0xa2>
 801f1fa:	2300      	movs	r3, #0
 801f1fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f1fe:	250a      	movs	r5, #10
 801f200:	6013      	str	r3, [r2, #0]
 801f202:	e72a      	b.n	801f05a <rcl_expand_topic_name+0xa2>
 801f204:	4653      	mov	r3, sl
 801f206:	4656      	mov	r6, sl
 801f208:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f20c:	2b00      	cmp	r3, #0
 801f20e:	d1d2      	bne.n	801f1b6 <rcl_expand_topic_name+0x1fe>
 801f210:	7823      	ldrb	r3, [r4, #0]
 801f212:	2b2f      	cmp	r3, #47	; 0x2f
 801f214:	d01e      	beq.n	801f254 <rcl_expand_topic_name+0x29c>
 801f216:	9e07      	ldr	r6, [sp, #28]
 801f218:	4630      	mov	r0, r6
 801f21a:	f7e1 f871 	bl	8000300 <strlen>
 801f21e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f224:	9603      	str	r6, [sp, #12]
 801f226:	9404      	str	r4, [sp, #16]
 801f228:	e9cd 2300 	strd	r2, r3, [sp]
 801f22c:	4a10      	ldr	r2, [pc, #64]	; (801f270 <rcl_expand_topic_name+0x2b8>)
 801f22e:	4b11      	ldr	r3, [pc, #68]	; (801f274 <rcl_expand_topic_name+0x2bc>)
 801f230:	2801      	cmp	r0, #1
 801f232:	bf18      	it	ne
 801f234:	4613      	movne	r3, r2
 801f236:	9302      	str	r3, [sp, #8]
 801f238:	ab16      	add	r3, sp, #88	; 0x58
 801f23a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f23c:	f7f5 ff0c 	bl	8015058 <rcutils_format_string_limit>
 801f240:	4606      	mov	r6, r0
 801f242:	e7d6      	b.n	801f1f2 <rcl_expand_topic_name+0x23a>
 801f244:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801f248:	4650      	mov	r0, sl
 801f24a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f24c:	6014      	str	r4, [r2, #0]
 801f24e:	250a      	movs	r5, #10
 801f250:	4798      	blx	r3
 801f252:	e702      	b.n	801f05a <rcl_expand_topic_name+0xa2>
 801f254:	2300      	movs	r3, #0
 801f256:	461e      	mov	r6, r3
 801f258:	e7cc      	b.n	801f1f4 <rcl_expand_topic_name+0x23c>
 801f25a:	bf00      	nop
 801f25c:	080258d8 	.word	0x080258d8
 801f260:	080258e0 	.word	0x080258e0
 801f264:	080258e8 	.word	0x080258e8
 801f268:	080258d0 	.word	0x080258d0
 801f26c:	08025258 	.word	0x08025258
 801f270:	08024c58 	.word	0x08024c58
 801f274:	08024c50 	.word	0x08024c50

0801f278 <rcl_get_default_topic_name_substitutions>:
 801f278:	2800      	cmp	r0, #0
 801f27a:	bf0c      	ite	eq
 801f27c:	200b      	moveq	r0, #11
 801f27e:	2000      	movne	r0, #0
 801f280:	4770      	bx	lr
 801f282:	bf00      	nop

0801f284 <rcl_validate_topic_name>:
 801f284:	2800      	cmp	r0, #0
 801f286:	f000 8089 	beq.w	801f39c <rcl_validate_topic_name+0x118>
 801f28a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f28e:	460e      	mov	r6, r1
 801f290:	2900      	cmp	r1, #0
 801f292:	f000 8085 	beq.w	801f3a0 <rcl_validate_topic_name+0x11c>
 801f296:	4604      	mov	r4, r0
 801f298:	4617      	mov	r7, r2
 801f29a:	f7e1 f831 	bl	8000300 <strlen>
 801f29e:	b1b0      	cbz	r0, 801f2ce <rcl_validate_topic_name+0x4a>
 801f2a0:	f894 e000 	ldrb.w	lr, [r4]
 801f2a4:	f8df c160 	ldr.w	ip, [pc, #352]	; 801f408 <rcl_validate_topic_name+0x184>
 801f2a8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f2ac:	f013 0304 	ands.w	r3, r3, #4
 801f2b0:	d139      	bne.n	801f326 <rcl_validate_topic_name+0xa2>
 801f2b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801f2b6:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f2ba:	2a2f      	cmp	r2, #47	; 0x2f
 801f2bc:	d10f      	bne.n	801f2de <rcl_validate_topic_name+0x5a>
 801f2be:	2202      	movs	r2, #2
 801f2c0:	6032      	str	r2, [r6, #0]
 801f2c2:	b3a7      	cbz	r7, 801f32e <rcl_validate_topic_name+0xaa>
 801f2c4:	4618      	mov	r0, r3
 801f2c6:	f8c7 8000 	str.w	r8, [r7]
 801f2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2ce:	2301      	movs	r3, #1
 801f2d0:	6033      	str	r3, [r6, #0]
 801f2d2:	b367      	cbz	r7, 801f32e <rcl_validate_topic_name+0xaa>
 801f2d4:	2300      	movs	r3, #0
 801f2d6:	4618      	mov	r0, r3
 801f2d8:	603b      	str	r3, [r7, #0]
 801f2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2de:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801f2e2:	461d      	mov	r5, r3
 801f2e4:	4619      	mov	r1, r3
 801f2e6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f2ea:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801f2ee:	f1b9 0f09 	cmp.w	r9, #9
 801f2f2:	d91f      	bls.n	801f334 <rcl_validate_topic_name+0xb0>
 801f2f4:	f022 0920 	bic.w	r9, r2, #32
 801f2f8:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801f2fc:	f1b9 0f19 	cmp.w	r9, #25
 801f300:	d918      	bls.n	801f334 <rcl_validate_topic_name+0xb0>
 801f302:	2a5f      	cmp	r2, #95	; 0x5f
 801f304:	d024      	beq.n	801f350 <rcl_validate_topic_name+0xcc>
 801f306:	2a2f      	cmp	r2, #47	; 0x2f
 801f308:	d058      	beq.n	801f3bc <rcl_validate_topic_name+0x138>
 801f30a:	2a7e      	cmp	r2, #126	; 0x7e
 801f30c:	d04a      	beq.n	801f3a4 <rcl_validate_topic_name+0x120>
 801f30e:	2a7b      	cmp	r2, #123	; 0x7b
 801f310:	d05b      	beq.n	801f3ca <rcl_validate_topic_name+0x146>
 801f312:	2a7d      	cmp	r2, #125	; 0x7d
 801f314:	d169      	bne.n	801f3ea <rcl_validate_topic_name+0x166>
 801f316:	2d00      	cmp	r5, #0
 801f318:	d15c      	bne.n	801f3d4 <rcl_validate_topic_name+0x150>
 801f31a:	2305      	movs	r3, #5
 801f31c:	6033      	str	r3, [r6, #0]
 801f31e:	b137      	cbz	r7, 801f32e <rcl_validate_topic_name+0xaa>
 801f320:	2000      	movs	r0, #0
 801f322:	6039      	str	r1, [r7, #0]
 801f324:	e7d9      	b.n	801f2da <rcl_validate_topic_name+0x56>
 801f326:	2304      	movs	r3, #4
 801f328:	6033      	str	r3, [r6, #0]
 801f32a:	2f00      	cmp	r7, #0
 801f32c:	d1d2      	bne.n	801f2d4 <rcl_validate_topic_name+0x50>
 801f32e:	2000      	movs	r0, #0
 801f330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f334:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f338:	0752      	lsls	r2, r2, #29
 801f33a:	d509      	bpl.n	801f350 <rcl_validate_topic_name+0xcc>
 801f33c:	2900      	cmp	r1, #0
 801f33e:	bf0c      	ite	eq
 801f340:	2200      	moveq	r2, #0
 801f342:	f005 0201 	andne.w	r2, r5, #1
 801f346:	b11a      	cbz	r2, 801f350 <rcl_validate_topic_name+0xcc>
 801f348:	1e4d      	subs	r5, r1, #1
 801f34a:	429d      	cmp	r5, r3
 801f34c:	d031      	beq.n	801f3b2 <rcl_validate_topic_name+0x12e>
 801f34e:	4615      	mov	r5, r2
 801f350:	3101      	adds	r1, #1
 801f352:	4288      	cmp	r0, r1
 801f354:	d1c7      	bne.n	801f2e6 <rcl_validate_topic_name+0x62>
 801f356:	2d00      	cmp	r5, #0
 801f358:	d142      	bne.n	801f3e0 <rcl_validate_topic_name+0x15c>
 801f35a:	4628      	mov	r0, r5
 801f35c:	2301      	movs	r3, #1
 801f35e:	e00c      	b.n	801f37a <rcl_validate_topic_name+0xf6>
 801f360:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801f364:	d101      	bne.n	801f36a <rcl_validate_topic_name+0xe6>
 801f366:	2801      	cmp	r0, #1
 801f368:	d047      	beq.n	801f3fa <rcl_validate_topic_name+0x176>
 801f36a:	1c5a      	adds	r2, r3, #1
 801f36c:	428b      	cmp	r3, r1
 801f36e:	f100 0001 	add.w	r0, r0, #1
 801f372:	f104 0401 	add.w	r4, r4, #1
 801f376:	4613      	mov	r3, r2
 801f378:	d22e      	bcs.n	801f3d8 <rcl_validate_topic_name+0x154>
 801f37a:	4580      	cmp	r8, r0
 801f37c:	d0f5      	beq.n	801f36a <rcl_validate_topic_name+0xe6>
 801f37e:	7822      	ldrb	r2, [r4, #0]
 801f380:	2a2f      	cmp	r2, #47	; 0x2f
 801f382:	d1ed      	bne.n	801f360 <rcl_validate_topic_name+0xdc>
 801f384:	7862      	ldrb	r2, [r4, #1]
 801f386:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f38a:	0752      	lsls	r2, r2, #29
 801f38c:	d5ed      	bpl.n	801f36a <rcl_validate_topic_name+0xe6>
 801f38e:	2204      	movs	r2, #4
 801f390:	6032      	str	r2, [r6, #0]
 801f392:	2f00      	cmp	r7, #0
 801f394:	d0cb      	beq.n	801f32e <rcl_validate_topic_name+0xaa>
 801f396:	2000      	movs	r0, #0
 801f398:	603b      	str	r3, [r7, #0]
 801f39a:	e79e      	b.n	801f2da <rcl_validate_topic_name+0x56>
 801f39c:	200b      	movs	r0, #11
 801f39e:	4770      	bx	lr
 801f3a0:	200b      	movs	r0, #11
 801f3a2:	e79a      	b.n	801f2da <rcl_validate_topic_name+0x56>
 801f3a4:	2900      	cmp	r1, #0
 801f3a6:	d0d3      	beq.n	801f350 <rcl_validate_topic_name+0xcc>
 801f3a8:	2306      	movs	r3, #6
 801f3aa:	6033      	str	r3, [r6, #0]
 801f3ac:	2f00      	cmp	r7, #0
 801f3ae:	d1b7      	bne.n	801f320 <rcl_validate_topic_name+0x9c>
 801f3b0:	e7bd      	b.n	801f32e <rcl_validate_topic_name+0xaa>
 801f3b2:	2309      	movs	r3, #9
 801f3b4:	6033      	str	r3, [r6, #0]
 801f3b6:	2f00      	cmp	r7, #0
 801f3b8:	d1b2      	bne.n	801f320 <rcl_validate_topic_name+0x9c>
 801f3ba:	e7b8      	b.n	801f32e <rcl_validate_topic_name+0xaa>
 801f3bc:	2d00      	cmp	r5, #0
 801f3be:	d0c7      	beq.n	801f350 <rcl_validate_topic_name+0xcc>
 801f3c0:	2308      	movs	r3, #8
 801f3c2:	6033      	str	r3, [r6, #0]
 801f3c4:	2f00      	cmp	r7, #0
 801f3c6:	d1ab      	bne.n	801f320 <rcl_validate_topic_name+0x9c>
 801f3c8:	e7b1      	b.n	801f32e <rcl_validate_topic_name+0xaa>
 801f3ca:	2d00      	cmp	r5, #0
 801f3cc:	d1f8      	bne.n	801f3c0 <rcl_validate_topic_name+0x13c>
 801f3ce:	460b      	mov	r3, r1
 801f3d0:	2501      	movs	r5, #1
 801f3d2:	e7bd      	b.n	801f350 <rcl_validate_topic_name+0xcc>
 801f3d4:	2500      	movs	r5, #0
 801f3d6:	e7bb      	b.n	801f350 <rcl_validate_topic_name+0xcc>
 801f3d8:	2300      	movs	r3, #0
 801f3da:	4618      	mov	r0, r3
 801f3dc:	6033      	str	r3, [r6, #0]
 801f3de:	e77c      	b.n	801f2da <rcl_validate_topic_name+0x56>
 801f3e0:	2205      	movs	r2, #5
 801f3e2:	6032      	str	r2, [r6, #0]
 801f3e4:	2f00      	cmp	r7, #0
 801f3e6:	d1d6      	bne.n	801f396 <rcl_validate_topic_name+0x112>
 801f3e8:	e7a1      	b.n	801f32e <rcl_validate_topic_name+0xaa>
 801f3ea:	2d00      	cmp	r5, #0
 801f3ec:	bf14      	ite	ne
 801f3ee:	2308      	movne	r3, #8
 801f3f0:	2303      	moveq	r3, #3
 801f3f2:	6033      	str	r3, [r6, #0]
 801f3f4:	2f00      	cmp	r7, #0
 801f3f6:	d193      	bne.n	801f320 <rcl_validate_topic_name+0x9c>
 801f3f8:	e799      	b.n	801f32e <rcl_validate_topic_name+0xaa>
 801f3fa:	2307      	movs	r3, #7
 801f3fc:	6033      	str	r3, [r6, #0]
 801f3fe:	2f00      	cmp	r7, #0
 801f400:	d095      	beq.n	801f32e <rcl_validate_topic_name+0xaa>
 801f402:	2301      	movs	r3, #1
 801f404:	e7c7      	b.n	801f396 <rcl_validate_topic_name+0x112>
 801f406:	bf00      	nop
 801f408:	08025964 	.word	0x08025964

0801f40c <calloc>:
 801f40c:	4b02      	ldr	r3, [pc, #8]	; (801f418 <calloc+0xc>)
 801f40e:	460a      	mov	r2, r1
 801f410:	4601      	mov	r1, r0
 801f412:	6818      	ldr	r0, [r3, #0]
 801f414:	f000 b802 	b.w	801f41c <_calloc_r>
 801f418:	20000778 	.word	0x20000778

0801f41c <_calloc_r>:
 801f41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f41e:	fba1 2402 	umull	r2, r4, r1, r2
 801f422:	b94c      	cbnz	r4, 801f438 <_calloc_r+0x1c>
 801f424:	4611      	mov	r1, r2
 801f426:	9201      	str	r2, [sp, #4]
 801f428:	f000 f898 	bl	801f55c <_malloc_r>
 801f42c:	9a01      	ldr	r2, [sp, #4]
 801f42e:	4605      	mov	r5, r0
 801f430:	b930      	cbnz	r0, 801f440 <_calloc_r+0x24>
 801f432:	4628      	mov	r0, r5
 801f434:	b003      	add	sp, #12
 801f436:	bd30      	pop	{r4, r5, pc}
 801f438:	220c      	movs	r2, #12
 801f43a:	6002      	str	r2, [r0, #0]
 801f43c:	2500      	movs	r5, #0
 801f43e:	e7f8      	b.n	801f432 <_calloc_r+0x16>
 801f440:	4621      	mov	r1, r4
 801f442:	f001 fc3f 	bl	8020cc4 <memset>
 801f446:	e7f4      	b.n	801f432 <_calloc_r+0x16>

0801f448 <exit>:
 801f448:	b508      	push	{r3, lr}
 801f44a:	4b06      	ldr	r3, [pc, #24]	; (801f464 <exit+0x1c>)
 801f44c:	4604      	mov	r4, r0
 801f44e:	b113      	cbz	r3, 801f456 <exit+0xe>
 801f450:	2100      	movs	r1, #0
 801f452:	f3af 8000 	nop.w
 801f456:	4b04      	ldr	r3, [pc, #16]	; (801f468 <exit+0x20>)
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	b103      	cbz	r3, 801f45e <exit+0x16>
 801f45c:	4798      	blx	r3
 801f45e:	4620      	mov	r0, r4
 801f460:	f7e4 f8da 	bl	8003618 <_exit>
 801f464:	00000000 	.word	0x00000000
 801f468:	20016e6c 	.word	0x20016e6c

0801f46c <getenv>:
 801f46c:	b507      	push	{r0, r1, r2, lr}
 801f46e:	4b04      	ldr	r3, [pc, #16]	; (801f480 <getenv+0x14>)
 801f470:	4601      	mov	r1, r0
 801f472:	aa01      	add	r2, sp, #4
 801f474:	6818      	ldr	r0, [r3, #0]
 801f476:	f000 f805 	bl	801f484 <_findenv_r>
 801f47a:	b003      	add	sp, #12
 801f47c:	f85d fb04 	ldr.w	pc, [sp], #4
 801f480:	20000778 	.word	0x20000778

0801f484 <_findenv_r>:
 801f484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f488:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f4f8 <_findenv_r+0x74>
 801f48c:	4607      	mov	r7, r0
 801f48e:	4689      	mov	r9, r1
 801f490:	4616      	mov	r6, r2
 801f492:	f002 fb0d 	bl	8021ab0 <__env_lock>
 801f496:	f8da 4000 	ldr.w	r4, [sl]
 801f49a:	b134      	cbz	r4, 801f4aa <_findenv_r+0x26>
 801f49c:	464b      	mov	r3, r9
 801f49e:	4698      	mov	r8, r3
 801f4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f4a4:	b13a      	cbz	r2, 801f4b6 <_findenv_r+0x32>
 801f4a6:	2a3d      	cmp	r2, #61	; 0x3d
 801f4a8:	d1f9      	bne.n	801f49e <_findenv_r+0x1a>
 801f4aa:	4638      	mov	r0, r7
 801f4ac:	f002 fb06 	bl	8021abc <__env_unlock>
 801f4b0:	2000      	movs	r0, #0
 801f4b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4b6:	eba8 0809 	sub.w	r8, r8, r9
 801f4ba:	46a3      	mov	fp, r4
 801f4bc:	f854 0b04 	ldr.w	r0, [r4], #4
 801f4c0:	2800      	cmp	r0, #0
 801f4c2:	d0f2      	beq.n	801f4aa <_findenv_r+0x26>
 801f4c4:	4642      	mov	r2, r8
 801f4c6:	4649      	mov	r1, r9
 801f4c8:	f001 fc11 	bl	8020cee <strncmp>
 801f4cc:	2800      	cmp	r0, #0
 801f4ce:	d1f4      	bne.n	801f4ba <_findenv_r+0x36>
 801f4d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f4d4:	eb03 0508 	add.w	r5, r3, r8
 801f4d8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f4dc:	2b3d      	cmp	r3, #61	; 0x3d
 801f4de:	d1ec      	bne.n	801f4ba <_findenv_r+0x36>
 801f4e0:	f8da 3000 	ldr.w	r3, [sl]
 801f4e4:	ebab 0303 	sub.w	r3, fp, r3
 801f4e8:	109b      	asrs	r3, r3, #2
 801f4ea:	4638      	mov	r0, r7
 801f4ec:	6033      	str	r3, [r6, #0]
 801f4ee:	f002 fae5 	bl	8021abc <__env_unlock>
 801f4f2:	1c68      	adds	r0, r5, #1
 801f4f4:	e7dd      	b.n	801f4b2 <_findenv_r+0x2e>
 801f4f6:	bf00      	nop
 801f4f8:	20000004 	.word	0x20000004

0801f4fc <malloc>:
 801f4fc:	4b02      	ldr	r3, [pc, #8]	; (801f508 <malloc+0xc>)
 801f4fe:	4601      	mov	r1, r0
 801f500:	6818      	ldr	r0, [r3, #0]
 801f502:	f000 b82b 	b.w	801f55c <_malloc_r>
 801f506:	bf00      	nop
 801f508:	20000778 	.word	0x20000778

0801f50c <free>:
 801f50c:	4b02      	ldr	r3, [pc, #8]	; (801f518 <free+0xc>)
 801f50e:	4601      	mov	r1, r0
 801f510:	6818      	ldr	r0, [r3, #0]
 801f512:	f002 bad9 	b.w	8021ac8 <_free_r>
 801f516:	bf00      	nop
 801f518:	20000778 	.word	0x20000778

0801f51c <sbrk_aligned>:
 801f51c:	b570      	push	{r4, r5, r6, lr}
 801f51e:	4e0e      	ldr	r6, [pc, #56]	; (801f558 <sbrk_aligned+0x3c>)
 801f520:	460c      	mov	r4, r1
 801f522:	6831      	ldr	r1, [r6, #0]
 801f524:	4605      	mov	r5, r0
 801f526:	b911      	cbnz	r1, 801f52e <sbrk_aligned+0x12>
 801f528:	f001 fc42 	bl	8020db0 <_sbrk_r>
 801f52c:	6030      	str	r0, [r6, #0]
 801f52e:	4621      	mov	r1, r4
 801f530:	4628      	mov	r0, r5
 801f532:	f001 fc3d 	bl	8020db0 <_sbrk_r>
 801f536:	1c43      	adds	r3, r0, #1
 801f538:	d00a      	beq.n	801f550 <sbrk_aligned+0x34>
 801f53a:	1cc4      	adds	r4, r0, #3
 801f53c:	f024 0403 	bic.w	r4, r4, #3
 801f540:	42a0      	cmp	r0, r4
 801f542:	d007      	beq.n	801f554 <sbrk_aligned+0x38>
 801f544:	1a21      	subs	r1, r4, r0
 801f546:	4628      	mov	r0, r5
 801f548:	f001 fc32 	bl	8020db0 <_sbrk_r>
 801f54c:	3001      	adds	r0, #1
 801f54e:	d101      	bne.n	801f554 <sbrk_aligned+0x38>
 801f550:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f554:	4620      	mov	r0, r4
 801f556:	bd70      	pop	{r4, r5, r6, pc}
 801f558:	20016d30 	.word	0x20016d30

0801f55c <_malloc_r>:
 801f55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f560:	1ccd      	adds	r5, r1, #3
 801f562:	f025 0503 	bic.w	r5, r5, #3
 801f566:	3508      	adds	r5, #8
 801f568:	2d0c      	cmp	r5, #12
 801f56a:	bf38      	it	cc
 801f56c:	250c      	movcc	r5, #12
 801f56e:	2d00      	cmp	r5, #0
 801f570:	4607      	mov	r7, r0
 801f572:	db01      	blt.n	801f578 <_malloc_r+0x1c>
 801f574:	42a9      	cmp	r1, r5
 801f576:	d905      	bls.n	801f584 <_malloc_r+0x28>
 801f578:	230c      	movs	r3, #12
 801f57a:	603b      	str	r3, [r7, #0]
 801f57c:	2600      	movs	r6, #0
 801f57e:	4630      	mov	r0, r6
 801f580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f584:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f658 <_malloc_r+0xfc>
 801f588:	f000 f868 	bl	801f65c <__malloc_lock>
 801f58c:	f8d8 3000 	ldr.w	r3, [r8]
 801f590:	461c      	mov	r4, r3
 801f592:	bb5c      	cbnz	r4, 801f5ec <_malloc_r+0x90>
 801f594:	4629      	mov	r1, r5
 801f596:	4638      	mov	r0, r7
 801f598:	f7ff ffc0 	bl	801f51c <sbrk_aligned>
 801f59c:	1c43      	adds	r3, r0, #1
 801f59e:	4604      	mov	r4, r0
 801f5a0:	d155      	bne.n	801f64e <_malloc_r+0xf2>
 801f5a2:	f8d8 4000 	ldr.w	r4, [r8]
 801f5a6:	4626      	mov	r6, r4
 801f5a8:	2e00      	cmp	r6, #0
 801f5aa:	d145      	bne.n	801f638 <_malloc_r+0xdc>
 801f5ac:	2c00      	cmp	r4, #0
 801f5ae:	d048      	beq.n	801f642 <_malloc_r+0xe6>
 801f5b0:	6823      	ldr	r3, [r4, #0]
 801f5b2:	4631      	mov	r1, r6
 801f5b4:	4638      	mov	r0, r7
 801f5b6:	eb04 0903 	add.w	r9, r4, r3
 801f5ba:	f001 fbf9 	bl	8020db0 <_sbrk_r>
 801f5be:	4581      	cmp	r9, r0
 801f5c0:	d13f      	bne.n	801f642 <_malloc_r+0xe6>
 801f5c2:	6821      	ldr	r1, [r4, #0]
 801f5c4:	1a6d      	subs	r5, r5, r1
 801f5c6:	4629      	mov	r1, r5
 801f5c8:	4638      	mov	r0, r7
 801f5ca:	f7ff ffa7 	bl	801f51c <sbrk_aligned>
 801f5ce:	3001      	adds	r0, #1
 801f5d0:	d037      	beq.n	801f642 <_malloc_r+0xe6>
 801f5d2:	6823      	ldr	r3, [r4, #0]
 801f5d4:	442b      	add	r3, r5
 801f5d6:	6023      	str	r3, [r4, #0]
 801f5d8:	f8d8 3000 	ldr.w	r3, [r8]
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d038      	beq.n	801f652 <_malloc_r+0xf6>
 801f5e0:	685a      	ldr	r2, [r3, #4]
 801f5e2:	42a2      	cmp	r2, r4
 801f5e4:	d12b      	bne.n	801f63e <_malloc_r+0xe2>
 801f5e6:	2200      	movs	r2, #0
 801f5e8:	605a      	str	r2, [r3, #4]
 801f5ea:	e00f      	b.n	801f60c <_malloc_r+0xb0>
 801f5ec:	6822      	ldr	r2, [r4, #0]
 801f5ee:	1b52      	subs	r2, r2, r5
 801f5f0:	d41f      	bmi.n	801f632 <_malloc_r+0xd6>
 801f5f2:	2a0b      	cmp	r2, #11
 801f5f4:	d917      	bls.n	801f626 <_malloc_r+0xca>
 801f5f6:	1961      	adds	r1, r4, r5
 801f5f8:	42a3      	cmp	r3, r4
 801f5fa:	6025      	str	r5, [r4, #0]
 801f5fc:	bf18      	it	ne
 801f5fe:	6059      	strne	r1, [r3, #4]
 801f600:	6863      	ldr	r3, [r4, #4]
 801f602:	bf08      	it	eq
 801f604:	f8c8 1000 	streq.w	r1, [r8]
 801f608:	5162      	str	r2, [r4, r5]
 801f60a:	604b      	str	r3, [r1, #4]
 801f60c:	4638      	mov	r0, r7
 801f60e:	f104 060b 	add.w	r6, r4, #11
 801f612:	f000 f829 	bl	801f668 <__malloc_unlock>
 801f616:	f026 0607 	bic.w	r6, r6, #7
 801f61a:	1d23      	adds	r3, r4, #4
 801f61c:	1af2      	subs	r2, r6, r3
 801f61e:	d0ae      	beq.n	801f57e <_malloc_r+0x22>
 801f620:	1b9b      	subs	r3, r3, r6
 801f622:	50a3      	str	r3, [r4, r2]
 801f624:	e7ab      	b.n	801f57e <_malloc_r+0x22>
 801f626:	42a3      	cmp	r3, r4
 801f628:	6862      	ldr	r2, [r4, #4]
 801f62a:	d1dd      	bne.n	801f5e8 <_malloc_r+0x8c>
 801f62c:	f8c8 2000 	str.w	r2, [r8]
 801f630:	e7ec      	b.n	801f60c <_malloc_r+0xb0>
 801f632:	4623      	mov	r3, r4
 801f634:	6864      	ldr	r4, [r4, #4]
 801f636:	e7ac      	b.n	801f592 <_malloc_r+0x36>
 801f638:	4634      	mov	r4, r6
 801f63a:	6876      	ldr	r6, [r6, #4]
 801f63c:	e7b4      	b.n	801f5a8 <_malloc_r+0x4c>
 801f63e:	4613      	mov	r3, r2
 801f640:	e7cc      	b.n	801f5dc <_malloc_r+0x80>
 801f642:	230c      	movs	r3, #12
 801f644:	603b      	str	r3, [r7, #0]
 801f646:	4638      	mov	r0, r7
 801f648:	f000 f80e 	bl	801f668 <__malloc_unlock>
 801f64c:	e797      	b.n	801f57e <_malloc_r+0x22>
 801f64e:	6025      	str	r5, [r4, #0]
 801f650:	e7dc      	b.n	801f60c <_malloc_r+0xb0>
 801f652:	605b      	str	r3, [r3, #4]
 801f654:	deff      	udf	#255	; 0xff
 801f656:	bf00      	nop
 801f658:	20016d2c 	.word	0x20016d2c

0801f65c <__malloc_lock>:
 801f65c:	4801      	ldr	r0, [pc, #4]	; (801f664 <__malloc_lock+0x8>)
 801f65e:	f001 bbf4 	b.w	8020e4a <__retarget_lock_acquire_recursive>
 801f662:	bf00      	nop
 801f664:	20016e75 	.word	0x20016e75

0801f668 <__malloc_unlock>:
 801f668:	4801      	ldr	r0, [pc, #4]	; (801f670 <__malloc_unlock+0x8>)
 801f66a:	f001 bbef 	b.w	8020e4c <__retarget_lock_release_recursive>
 801f66e:	bf00      	nop
 801f670:	20016e75 	.word	0x20016e75

0801f674 <srand>:
 801f674:	b538      	push	{r3, r4, r5, lr}
 801f676:	4b10      	ldr	r3, [pc, #64]	; (801f6b8 <srand+0x44>)
 801f678:	681d      	ldr	r5, [r3, #0]
 801f67a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f67c:	4604      	mov	r4, r0
 801f67e:	b9b3      	cbnz	r3, 801f6ae <srand+0x3a>
 801f680:	2018      	movs	r0, #24
 801f682:	f7ff ff3b 	bl	801f4fc <malloc>
 801f686:	4602      	mov	r2, r0
 801f688:	6328      	str	r0, [r5, #48]	; 0x30
 801f68a:	b920      	cbnz	r0, 801f696 <srand+0x22>
 801f68c:	4b0b      	ldr	r3, [pc, #44]	; (801f6bc <srand+0x48>)
 801f68e:	480c      	ldr	r0, [pc, #48]	; (801f6c0 <srand+0x4c>)
 801f690:	2146      	movs	r1, #70	; 0x46
 801f692:	f001 fbf9 	bl	8020e88 <__assert_func>
 801f696:	490b      	ldr	r1, [pc, #44]	; (801f6c4 <srand+0x50>)
 801f698:	4b0b      	ldr	r3, [pc, #44]	; (801f6c8 <srand+0x54>)
 801f69a:	e9c0 1300 	strd	r1, r3, [r0]
 801f69e:	4b0b      	ldr	r3, [pc, #44]	; (801f6cc <srand+0x58>)
 801f6a0:	6083      	str	r3, [r0, #8]
 801f6a2:	230b      	movs	r3, #11
 801f6a4:	8183      	strh	r3, [r0, #12]
 801f6a6:	2100      	movs	r1, #0
 801f6a8:	2001      	movs	r0, #1
 801f6aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f6ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f6b0:	2200      	movs	r2, #0
 801f6b2:	611c      	str	r4, [r3, #16]
 801f6b4:	615a      	str	r2, [r3, #20]
 801f6b6:	bd38      	pop	{r3, r4, r5, pc}
 801f6b8:	20000778 	.word	0x20000778
 801f6bc:	080258f4 	.word	0x080258f4
 801f6c0:	0802590b 	.word	0x0802590b
 801f6c4:	abcd330e 	.word	0xabcd330e
 801f6c8:	e66d1234 	.word	0xe66d1234
 801f6cc:	0005deec 	.word	0x0005deec

0801f6d0 <rand>:
 801f6d0:	4b16      	ldr	r3, [pc, #88]	; (801f72c <rand+0x5c>)
 801f6d2:	b510      	push	{r4, lr}
 801f6d4:	681c      	ldr	r4, [r3, #0]
 801f6d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f6d8:	b9b3      	cbnz	r3, 801f708 <rand+0x38>
 801f6da:	2018      	movs	r0, #24
 801f6dc:	f7ff ff0e 	bl	801f4fc <malloc>
 801f6e0:	4602      	mov	r2, r0
 801f6e2:	6320      	str	r0, [r4, #48]	; 0x30
 801f6e4:	b920      	cbnz	r0, 801f6f0 <rand+0x20>
 801f6e6:	4b12      	ldr	r3, [pc, #72]	; (801f730 <rand+0x60>)
 801f6e8:	4812      	ldr	r0, [pc, #72]	; (801f734 <rand+0x64>)
 801f6ea:	2152      	movs	r1, #82	; 0x52
 801f6ec:	f001 fbcc 	bl	8020e88 <__assert_func>
 801f6f0:	4911      	ldr	r1, [pc, #68]	; (801f738 <rand+0x68>)
 801f6f2:	4b12      	ldr	r3, [pc, #72]	; (801f73c <rand+0x6c>)
 801f6f4:	e9c0 1300 	strd	r1, r3, [r0]
 801f6f8:	4b11      	ldr	r3, [pc, #68]	; (801f740 <rand+0x70>)
 801f6fa:	6083      	str	r3, [r0, #8]
 801f6fc:	230b      	movs	r3, #11
 801f6fe:	8183      	strh	r3, [r0, #12]
 801f700:	2100      	movs	r1, #0
 801f702:	2001      	movs	r0, #1
 801f704:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f708:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f70a:	480e      	ldr	r0, [pc, #56]	; (801f744 <rand+0x74>)
 801f70c:	690b      	ldr	r3, [r1, #16]
 801f70e:	694c      	ldr	r4, [r1, #20]
 801f710:	4a0d      	ldr	r2, [pc, #52]	; (801f748 <rand+0x78>)
 801f712:	4358      	muls	r0, r3
 801f714:	fb02 0004 	mla	r0, r2, r4, r0
 801f718:	fba3 3202 	umull	r3, r2, r3, r2
 801f71c:	3301      	adds	r3, #1
 801f71e:	eb40 0002 	adc.w	r0, r0, r2
 801f722:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f726:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f72a:	bd10      	pop	{r4, pc}
 801f72c:	20000778 	.word	0x20000778
 801f730:	080258f4 	.word	0x080258f4
 801f734:	0802590b 	.word	0x0802590b
 801f738:	abcd330e 	.word	0xabcd330e
 801f73c:	e66d1234 	.word	0xe66d1234
 801f740:	0005deec 	.word	0x0005deec
 801f744:	5851f42d 	.word	0x5851f42d
 801f748:	4c957f2d 	.word	0x4c957f2d

0801f74c <realloc>:
 801f74c:	4b02      	ldr	r3, [pc, #8]	; (801f758 <realloc+0xc>)
 801f74e:	460a      	mov	r2, r1
 801f750:	4601      	mov	r1, r0
 801f752:	6818      	ldr	r0, [r3, #0]
 801f754:	f000 b802 	b.w	801f75c <_realloc_r>
 801f758:	20000778 	.word	0x20000778

0801f75c <_realloc_r>:
 801f75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f760:	4680      	mov	r8, r0
 801f762:	4614      	mov	r4, r2
 801f764:	460e      	mov	r6, r1
 801f766:	b921      	cbnz	r1, 801f772 <_realloc_r+0x16>
 801f768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f76c:	4611      	mov	r1, r2
 801f76e:	f7ff bef5 	b.w	801f55c <_malloc_r>
 801f772:	b92a      	cbnz	r2, 801f780 <_realloc_r+0x24>
 801f774:	f002 f9a8 	bl	8021ac8 <_free_r>
 801f778:	4625      	mov	r5, r4
 801f77a:	4628      	mov	r0, r5
 801f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f780:	f002 fe98 	bl	80224b4 <_malloc_usable_size_r>
 801f784:	4284      	cmp	r4, r0
 801f786:	4607      	mov	r7, r0
 801f788:	d802      	bhi.n	801f790 <_realloc_r+0x34>
 801f78a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f78e:	d812      	bhi.n	801f7b6 <_realloc_r+0x5a>
 801f790:	4621      	mov	r1, r4
 801f792:	4640      	mov	r0, r8
 801f794:	f7ff fee2 	bl	801f55c <_malloc_r>
 801f798:	4605      	mov	r5, r0
 801f79a:	2800      	cmp	r0, #0
 801f79c:	d0ed      	beq.n	801f77a <_realloc_r+0x1e>
 801f79e:	42bc      	cmp	r4, r7
 801f7a0:	4622      	mov	r2, r4
 801f7a2:	4631      	mov	r1, r6
 801f7a4:	bf28      	it	cs
 801f7a6:	463a      	movcs	r2, r7
 801f7a8:	f001 fb59 	bl	8020e5e <memcpy>
 801f7ac:	4631      	mov	r1, r6
 801f7ae:	4640      	mov	r0, r8
 801f7b0:	f002 f98a 	bl	8021ac8 <_free_r>
 801f7b4:	e7e1      	b.n	801f77a <_realloc_r+0x1e>
 801f7b6:	4635      	mov	r5, r6
 801f7b8:	e7df      	b.n	801f77a <_realloc_r+0x1e>
	...

0801f7bc <_strtoul_l.constprop.0>:
 801f7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f7c0:	4f36      	ldr	r7, [pc, #216]	; (801f89c <_strtoul_l.constprop.0+0xe0>)
 801f7c2:	4686      	mov	lr, r0
 801f7c4:	460d      	mov	r5, r1
 801f7c6:	4628      	mov	r0, r5
 801f7c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f7cc:	5d3e      	ldrb	r6, [r7, r4]
 801f7ce:	f016 0608 	ands.w	r6, r6, #8
 801f7d2:	d1f8      	bne.n	801f7c6 <_strtoul_l.constprop.0+0xa>
 801f7d4:	2c2d      	cmp	r4, #45	; 0x2d
 801f7d6:	d130      	bne.n	801f83a <_strtoul_l.constprop.0+0x7e>
 801f7d8:	782c      	ldrb	r4, [r5, #0]
 801f7da:	2601      	movs	r6, #1
 801f7dc:	1c85      	adds	r5, r0, #2
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d057      	beq.n	801f892 <_strtoul_l.constprop.0+0xd6>
 801f7e2:	2b10      	cmp	r3, #16
 801f7e4:	d109      	bne.n	801f7fa <_strtoul_l.constprop.0+0x3e>
 801f7e6:	2c30      	cmp	r4, #48	; 0x30
 801f7e8:	d107      	bne.n	801f7fa <_strtoul_l.constprop.0+0x3e>
 801f7ea:	7828      	ldrb	r0, [r5, #0]
 801f7ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f7f0:	2858      	cmp	r0, #88	; 0x58
 801f7f2:	d149      	bne.n	801f888 <_strtoul_l.constprop.0+0xcc>
 801f7f4:	786c      	ldrb	r4, [r5, #1]
 801f7f6:	2310      	movs	r3, #16
 801f7f8:	3502      	adds	r5, #2
 801f7fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801f7fe:	2700      	movs	r7, #0
 801f800:	fbb8 f8f3 	udiv	r8, r8, r3
 801f804:	fb03 f908 	mul.w	r9, r3, r8
 801f808:	ea6f 0909 	mvn.w	r9, r9
 801f80c:	4638      	mov	r0, r7
 801f80e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f812:	f1bc 0f09 	cmp.w	ip, #9
 801f816:	d815      	bhi.n	801f844 <_strtoul_l.constprop.0+0x88>
 801f818:	4664      	mov	r4, ip
 801f81a:	42a3      	cmp	r3, r4
 801f81c:	dd23      	ble.n	801f866 <_strtoul_l.constprop.0+0xaa>
 801f81e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801f822:	d007      	beq.n	801f834 <_strtoul_l.constprop.0+0x78>
 801f824:	4580      	cmp	r8, r0
 801f826:	d31b      	bcc.n	801f860 <_strtoul_l.constprop.0+0xa4>
 801f828:	d101      	bne.n	801f82e <_strtoul_l.constprop.0+0x72>
 801f82a:	45a1      	cmp	r9, r4
 801f82c:	db18      	blt.n	801f860 <_strtoul_l.constprop.0+0xa4>
 801f82e:	fb00 4003 	mla	r0, r0, r3, r4
 801f832:	2701      	movs	r7, #1
 801f834:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f838:	e7e9      	b.n	801f80e <_strtoul_l.constprop.0+0x52>
 801f83a:	2c2b      	cmp	r4, #43	; 0x2b
 801f83c:	bf04      	itt	eq
 801f83e:	782c      	ldrbeq	r4, [r5, #0]
 801f840:	1c85      	addeq	r5, r0, #2
 801f842:	e7cc      	b.n	801f7de <_strtoul_l.constprop.0+0x22>
 801f844:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f848:	f1bc 0f19 	cmp.w	ip, #25
 801f84c:	d801      	bhi.n	801f852 <_strtoul_l.constprop.0+0x96>
 801f84e:	3c37      	subs	r4, #55	; 0x37
 801f850:	e7e3      	b.n	801f81a <_strtoul_l.constprop.0+0x5e>
 801f852:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f856:	f1bc 0f19 	cmp.w	ip, #25
 801f85a:	d804      	bhi.n	801f866 <_strtoul_l.constprop.0+0xaa>
 801f85c:	3c57      	subs	r4, #87	; 0x57
 801f85e:	e7dc      	b.n	801f81a <_strtoul_l.constprop.0+0x5e>
 801f860:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f864:	e7e6      	b.n	801f834 <_strtoul_l.constprop.0+0x78>
 801f866:	1c7b      	adds	r3, r7, #1
 801f868:	d106      	bne.n	801f878 <_strtoul_l.constprop.0+0xbc>
 801f86a:	2322      	movs	r3, #34	; 0x22
 801f86c:	f8ce 3000 	str.w	r3, [lr]
 801f870:	4638      	mov	r0, r7
 801f872:	b932      	cbnz	r2, 801f882 <_strtoul_l.constprop.0+0xc6>
 801f874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f878:	b106      	cbz	r6, 801f87c <_strtoul_l.constprop.0+0xc0>
 801f87a:	4240      	negs	r0, r0
 801f87c:	2a00      	cmp	r2, #0
 801f87e:	d0f9      	beq.n	801f874 <_strtoul_l.constprop.0+0xb8>
 801f880:	b107      	cbz	r7, 801f884 <_strtoul_l.constprop.0+0xc8>
 801f882:	1e69      	subs	r1, r5, #1
 801f884:	6011      	str	r1, [r2, #0]
 801f886:	e7f5      	b.n	801f874 <_strtoul_l.constprop.0+0xb8>
 801f888:	2430      	movs	r4, #48	; 0x30
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d1b5      	bne.n	801f7fa <_strtoul_l.constprop.0+0x3e>
 801f88e:	2308      	movs	r3, #8
 801f890:	e7b3      	b.n	801f7fa <_strtoul_l.constprop.0+0x3e>
 801f892:	2c30      	cmp	r4, #48	; 0x30
 801f894:	d0a9      	beq.n	801f7ea <_strtoul_l.constprop.0+0x2e>
 801f896:	230a      	movs	r3, #10
 801f898:	e7af      	b.n	801f7fa <_strtoul_l.constprop.0+0x3e>
 801f89a:	bf00      	nop
 801f89c:	08025964 	.word	0x08025964

0801f8a0 <strtoul>:
 801f8a0:	4613      	mov	r3, r2
 801f8a2:	460a      	mov	r2, r1
 801f8a4:	4601      	mov	r1, r0
 801f8a6:	4802      	ldr	r0, [pc, #8]	; (801f8b0 <strtoul+0x10>)
 801f8a8:	6800      	ldr	r0, [r0, #0]
 801f8aa:	f7ff bf87 	b.w	801f7bc <_strtoul_l.constprop.0>
 801f8ae:	bf00      	nop
 801f8b0:	20000778 	.word	0x20000778

0801f8b4 <__cvt>:
 801f8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f8b6:	ed2d 8b02 	vpush	{d8}
 801f8ba:	eeb0 8b40 	vmov.f64	d8, d0
 801f8be:	b085      	sub	sp, #20
 801f8c0:	4617      	mov	r7, r2
 801f8c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f8c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f8c6:	ee18 2a90 	vmov	r2, s17
 801f8ca:	f025 0520 	bic.w	r5, r5, #32
 801f8ce:	2a00      	cmp	r2, #0
 801f8d0:	bfb6      	itet	lt
 801f8d2:	222d      	movlt	r2, #45	; 0x2d
 801f8d4:	2200      	movge	r2, #0
 801f8d6:	eeb1 8b40 	vneglt.f64	d8, d0
 801f8da:	2d46      	cmp	r5, #70	; 0x46
 801f8dc:	460c      	mov	r4, r1
 801f8de:	701a      	strb	r2, [r3, #0]
 801f8e0:	d004      	beq.n	801f8ec <__cvt+0x38>
 801f8e2:	2d45      	cmp	r5, #69	; 0x45
 801f8e4:	d100      	bne.n	801f8e8 <__cvt+0x34>
 801f8e6:	3401      	adds	r4, #1
 801f8e8:	2102      	movs	r1, #2
 801f8ea:	e000      	b.n	801f8ee <__cvt+0x3a>
 801f8ec:	2103      	movs	r1, #3
 801f8ee:	ab03      	add	r3, sp, #12
 801f8f0:	9301      	str	r3, [sp, #4]
 801f8f2:	ab02      	add	r3, sp, #8
 801f8f4:	9300      	str	r3, [sp, #0]
 801f8f6:	4622      	mov	r2, r4
 801f8f8:	4633      	mov	r3, r6
 801f8fa:	eeb0 0b48 	vmov.f64	d0, d8
 801f8fe:	f001 fb6b 	bl	8020fd8 <_dtoa_r>
 801f902:	2d47      	cmp	r5, #71	; 0x47
 801f904:	d101      	bne.n	801f90a <__cvt+0x56>
 801f906:	07fb      	lsls	r3, r7, #31
 801f908:	d51a      	bpl.n	801f940 <__cvt+0x8c>
 801f90a:	2d46      	cmp	r5, #70	; 0x46
 801f90c:	eb00 0204 	add.w	r2, r0, r4
 801f910:	d10c      	bne.n	801f92c <__cvt+0x78>
 801f912:	7803      	ldrb	r3, [r0, #0]
 801f914:	2b30      	cmp	r3, #48	; 0x30
 801f916:	d107      	bne.n	801f928 <__cvt+0x74>
 801f918:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f920:	bf1c      	itt	ne
 801f922:	f1c4 0401 	rsbne	r4, r4, #1
 801f926:	6034      	strne	r4, [r6, #0]
 801f928:	6833      	ldr	r3, [r6, #0]
 801f92a:	441a      	add	r2, r3
 801f92c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f934:	bf08      	it	eq
 801f936:	9203      	streq	r2, [sp, #12]
 801f938:	2130      	movs	r1, #48	; 0x30
 801f93a:	9b03      	ldr	r3, [sp, #12]
 801f93c:	4293      	cmp	r3, r2
 801f93e:	d307      	bcc.n	801f950 <__cvt+0x9c>
 801f940:	9b03      	ldr	r3, [sp, #12]
 801f942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f944:	1a1b      	subs	r3, r3, r0
 801f946:	6013      	str	r3, [r2, #0]
 801f948:	b005      	add	sp, #20
 801f94a:	ecbd 8b02 	vpop	{d8}
 801f94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f950:	1c5c      	adds	r4, r3, #1
 801f952:	9403      	str	r4, [sp, #12]
 801f954:	7019      	strb	r1, [r3, #0]
 801f956:	e7f0      	b.n	801f93a <__cvt+0x86>

0801f958 <__exponent>:
 801f958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f95a:	4603      	mov	r3, r0
 801f95c:	2900      	cmp	r1, #0
 801f95e:	bfb8      	it	lt
 801f960:	4249      	neglt	r1, r1
 801f962:	f803 2b02 	strb.w	r2, [r3], #2
 801f966:	bfb4      	ite	lt
 801f968:	222d      	movlt	r2, #45	; 0x2d
 801f96a:	222b      	movge	r2, #43	; 0x2b
 801f96c:	2909      	cmp	r1, #9
 801f96e:	7042      	strb	r2, [r0, #1]
 801f970:	dd2a      	ble.n	801f9c8 <__exponent+0x70>
 801f972:	f10d 0207 	add.w	r2, sp, #7
 801f976:	4617      	mov	r7, r2
 801f978:	260a      	movs	r6, #10
 801f97a:	4694      	mov	ip, r2
 801f97c:	fb91 f5f6 	sdiv	r5, r1, r6
 801f980:	fb06 1415 	mls	r4, r6, r5, r1
 801f984:	3430      	adds	r4, #48	; 0x30
 801f986:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801f98a:	460c      	mov	r4, r1
 801f98c:	2c63      	cmp	r4, #99	; 0x63
 801f98e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801f992:	4629      	mov	r1, r5
 801f994:	dcf1      	bgt.n	801f97a <__exponent+0x22>
 801f996:	3130      	adds	r1, #48	; 0x30
 801f998:	f1ac 0402 	sub.w	r4, ip, #2
 801f99c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801f9a0:	1c41      	adds	r1, r0, #1
 801f9a2:	4622      	mov	r2, r4
 801f9a4:	42ba      	cmp	r2, r7
 801f9a6:	d30a      	bcc.n	801f9be <__exponent+0x66>
 801f9a8:	f10d 0209 	add.w	r2, sp, #9
 801f9ac:	eba2 020c 	sub.w	r2, r2, ip
 801f9b0:	42bc      	cmp	r4, r7
 801f9b2:	bf88      	it	hi
 801f9b4:	2200      	movhi	r2, #0
 801f9b6:	4413      	add	r3, r2
 801f9b8:	1a18      	subs	r0, r3, r0
 801f9ba:	b003      	add	sp, #12
 801f9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9be:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f9c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 801f9c6:	e7ed      	b.n	801f9a4 <__exponent+0x4c>
 801f9c8:	2330      	movs	r3, #48	; 0x30
 801f9ca:	3130      	adds	r1, #48	; 0x30
 801f9cc:	7083      	strb	r3, [r0, #2]
 801f9ce:	70c1      	strb	r1, [r0, #3]
 801f9d0:	1d03      	adds	r3, r0, #4
 801f9d2:	e7f1      	b.n	801f9b8 <__exponent+0x60>
 801f9d4:	0000      	movs	r0, r0
	...

0801f9d8 <_printf_float>:
 801f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9dc:	b08b      	sub	sp, #44	; 0x2c
 801f9de:	460c      	mov	r4, r1
 801f9e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801f9e4:	4616      	mov	r6, r2
 801f9e6:	461f      	mov	r7, r3
 801f9e8:	4605      	mov	r5, r0
 801f9ea:	f001 f9a9 	bl	8020d40 <_localeconv_r>
 801f9ee:	f8d0 b000 	ldr.w	fp, [r0]
 801f9f2:	4658      	mov	r0, fp
 801f9f4:	f7e0 fc84 	bl	8000300 <strlen>
 801f9f8:	2300      	movs	r3, #0
 801f9fa:	9308      	str	r3, [sp, #32]
 801f9fc:	f8d8 3000 	ldr.w	r3, [r8]
 801fa00:	f894 9018 	ldrb.w	r9, [r4, #24]
 801fa04:	6822      	ldr	r2, [r4, #0]
 801fa06:	3307      	adds	r3, #7
 801fa08:	f023 0307 	bic.w	r3, r3, #7
 801fa0c:	f103 0108 	add.w	r1, r3, #8
 801fa10:	f8c8 1000 	str.w	r1, [r8]
 801fa14:	ed93 0b00 	vldr	d0, [r3]
 801fa18:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801fc78 <_printf_float+0x2a0>
 801fa1c:	eeb0 7bc0 	vabs.f64	d7, d0
 801fa20:	eeb4 7b46 	vcmp.f64	d7, d6
 801fa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa28:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801fa2c:	4682      	mov	sl, r0
 801fa2e:	dd24      	ble.n	801fa7a <_printf_float+0xa2>
 801fa30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fa34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa38:	d502      	bpl.n	801fa40 <_printf_float+0x68>
 801fa3a:	232d      	movs	r3, #45	; 0x2d
 801fa3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa40:	498f      	ldr	r1, [pc, #572]	; (801fc80 <_printf_float+0x2a8>)
 801fa42:	4b90      	ldr	r3, [pc, #576]	; (801fc84 <_printf_float+0x2ac>)
 801fa44:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801fa48:	bf94      	ite	ls
 801fa4a:	4688      	movls	r8, r1
 801fa4c:	4698      	movhi	r8, r3
 801fa4e:	2303      	movs	r3, #3
 801fa50:	6123      	str	r3, [r4, #16]
 801fa52:	f022 0204 	bic.w	r2, r2, #4
 801fa56:	2300      	movs	r3, #0
 801fa58:	6022      	str	r2, [r4, #0]
 801fa5a:	9304      	str	r3, [sp, #16]
 801fa5c:	9700      	str	r7, [sp, #0]
 801fa5e:	4633      	mov	r3, r6
 801fa60:	aa09      	add	r2, sp, #36	; 0x24
 801fa62:	4621      	mov	r1, r4
 801fa64:	4628      	mov	r0, r5
 801fa66:	f000 f9d1 	bl	801fe0c <_printf_common>
 801fa6a:	3001      	adds	r0, #1
 801fa6c:	f040 808a 	bne.w	801fb84 <_printf_float+0x1ac>
 801fa70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa74:	b00b      	add	sp, #44	; 0x2c
 801fa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa7a:	eeb4 0b40 	vcmp.f64	d0, d0
 801fa7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa82:	d709      	bvc.n	801fa98 <_printf_float+0xc0>
 801fa84:	ee10 3a90 	vmov	r3, s1
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	bfbc      	itt	lt
 801fa8c:	232d      	movlt	r3, #45	; 0x2d
 801fa8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801fa92:	497d      	ldr	r1, [pc, #500]	; (801fc88 <_printf_float+0x2b0>)
 801fa94:	4b7d      	ldr	r3, [pc, #500]	; (801fc8c <_printf_float+0x2b4>)
 801fa96:	e7d5      	b.n	801fa44 <_printf_float+0x6c>
 801fa98:	6863      	ldr	r3, [r4, #4]
 801fa9a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801fa9e:	9104      	str	r1, [sp, #16]
 801faa0:	1c59      	adds	r1, r3, #1
 801faa2:	d13c      	bne.n	801fb1e <_printf_float+0x146>
 801faa4:	2306      	movs	r3, #6
 801faa6:	6063      	str	r3, [r4, #4]
 801faa8:	2300      	movs	r3, #0
 801faaa:	9303      	str	r3, [sp, #12]
 801faac:	ab08      	add	r3, sp, #32
 801faae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801fab2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fab6:	ab07      	add	r3, sp, #28
 801fab8:	6861      	ldr	r1, [r4, #4]
 801faba:	9300      	str	r3, [sp, #0]
 801fabc:	6022      	str	r2, [r4, #0]
 801fabe:	f10d 031b 	add.w	r3, sp, #27
 801fac2:	4628      	mov	r0, r5
 801fac4:	f7ff fef6 	bl	801f8b4 <__cvt>
 801fac8:	9b04      	ldr	r3, [sp, #16]
 801faca:	9907      	ldr	r1, [sp, #28]
 801facc:	2b47      	cmp	r3, #71	; 0x47
 801face:	4680      	mov	r8, r0
 801fad0:	d108      	bne.n	801fae4 <_printf_float+0x10c>
 801fad2:	1cc8      	adds	r0, r1, #3
 801fad4:	db02      	blt.n	801fadc <_printf_float+0x104>
 801fad6:	6863      	ldr	r3, [r4, #4]
 801fad8:	4299      	cmp	r1, r3
 801fada:	dd41      	ble.n	801fb60 <_printf_float+0x188>
 801fadc:	f1a9 0902 	sub.w	r9, r9, #2
 801fae0:	fa5f f989 	uxtb.w	r9, r9
 801fae4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fae8:	d820      	bhi.n	801fb2c <_printf_float+0x154>
 801faea:	3901      	subs	r1, #1
 801faec:	464a      	mov	r2, r9
 801faee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801faf2:	9107      	str	r1, [sp, #28]
 801faf4:	f7ff ff30 	bl	801f958 <__exponent>
 801faf8:	9a08      	ldr	r2, [sp, #32]
 801fafa:	9004      	str	r0, [sp, #16]
 801fafc:	1813      	adds	r3, r2, r0
 801fafe:	2a01      	cmp	r2, #1
 801fb00:	6123      	str	r3, [r4, #16]
 801fb02:	dc02      	bgt.n	801fb0a <_printf_float+0x132>
 801fb04:	6822      	ldr	r2, [r4, #0]
 801fb06:	07d2      	lsls	r2, r2, #31
 801fb08:	d501      	bpl.n	801fb0e <_printf_float+0x136>
 801fb0a:	3301      	adds	r3, #1
 801fb0c:	6123      	str	r3, [r4, #16]
 801fb0e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	d0a2      	beq.n	801fa5c <_printf_float+0x84>
 801fb16:	232d      	movs	r3, #45	; 0x2d
 801fb18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fb1c:	e79e      	b.n	801fa5c <_printf_float+0x84>
 801fb1e:	9904      	ldr	r1, [sp, #16]
 801fb20:	2947      	cmp	r1, #71	; 0x47
 801fb22:	d1c1      	bne.n	801faa8 <_printf_float+0xd0>
 801fb24:	2b00      	cmp	r3, #0
 801fb26:	d1bf      	bne.n	801faa8 <_printf_float+0xd0>
 801fb28:	2301      	movs	r3, #1
 801fb2a:	e7bc      	b.n	801faa6 <_printf_float+0xce>
 801fb2c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801fb30:	d118      	bne.n	801fb64 <_printf_float+0x18c>
 801fb32:	2900      	cmp	r1, #0
 801fb34:	6863      	ldr	r3, [r4, #4]
 801fb36:	dd0b      	ble.n	801fb50 <_printf_float+0x178>
 801fb38:	6121      	str	r1, [r4, #16]
 801fb3a:	b913      	cbnz	r3, 801fb42 <_printf_float+0x16a>
 801fb3c:	6822      	ldr	r2, [r4, #0]
 801fb3e:	07d0      	lsls	r0, r2, #31
 801fb40:	d502      	bpl.n	801fb48 <_printf_float+0x170>
 801fb42:	3301      	adds	r3, #1
 801fb44:	440b      	add	r3, r1
 801fb46:	6123      	str	r3, [r4, #16]
 801fb48:	2300      	movs	r3, #0
 801fb4a:	65a1      	str	r1, [r4, #88]	; 0x58
 801fb4c:	9304      	str	r3, [sp, #16]
 801fb4e:	e7de      	b.n	801fb0e <_printf_float+0x136>
 801fb50:	b913      	cbnz	r3, 801fb58 <_printf_float+0x180>
 801fb52:	6822      	ldr	r2, [r4, #0]
 801fb54:	07d2      	lsls	r2, r2, #31
 801fb56:	d501      	bpl.n	801fb5c <_printf_float+0x184>
 801fb58:	3302      	adds	r3, #2
 801fb5a:	e7f4      	b.n	801fb46 <_printf_float+0x16e>
 801fb5c:	2301      	movs	r3, #1
 801fb5e:	e7f2      	b.n	801fb46 <_printf_float+0x16e>
 801fb60:	f04f 0967 	mov.w	r9, #103	; 0x67
 801fb64:	9b08      	ldr	r3, [sp, #32]
 801fb66:	4299      	cmp	r1, r3
 801fb68:	db05      	blt.n	801fb76 <_printf_float+0x19e>
 801fb6a:	6823      	ldr	r3, [r4, #0]
 801fb6c:	6121      	str	r1, [r4, #16]
 801fb6e:	07d8      	lsls	r0, r3, #31
 801fb70:	d5ea      	bpl.n	801fb48 <_printf_float+0x170>
 801fb72:	1c4b      	adds	r3, r1, #1
 801fb74:	e7e7      	b.n	801fb46 <_printf_float+0x16e>
 801fb76:	2900      	cmp	r1, #0
 801fb78:	bfd4      	ite	le
 801fb7a:	f1c1 0202 	rsble	r2, r1, #2
 801fb7e:	2201      	movgt	r2, #1
 801fb80:	4413      	add	r3, r2
 801fb82:	e7e0      	b.n	801fb46 <_printf_float+0x16e>
 801fb84:	6823      	ldr	r3, [r4, #0]
 801fb86:	055a      	lsls	r2, r3, #21
 801fb88:	d407      	bmi.n	801fb9a <_printf_float+0x1c2>
 801fb8a:	6923      	ldr	r3, [r4, #16]
 801fb8c:	4642      	mov	r2, r8
 801fb8e:	4631      	mov	r1, r6
 801fb90:	4628      	mov	r0, r5
 801fb92:	47b8      	blx	r7
 801fb94:	3001      	adds	r0, #1
 801fb96:	d12a      	bne.n	801fbee <_printf_float+0x216>
 801fb98:	e76a      	b.n	801fa70 <_printf_float+0x98>
 801fb9a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fb9e:	f240 80e0 	bls.w	801fd62 <_printf_float+0x38a>
 801fba2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fba6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbae:	d133      	bne.n	801fc18 <_printf_float+0x240>
 801fbb0:	4a37      	ldr	r2, [pc, #220]	; (801fc90 <_printf_float+0x2b8>)
 801fbb2:	2301      	movs	r3, #1
 801fbb4:	4631      	mov	r1, r6
 801fbb6:	4628      	mov	r0, r5
 801fbb8:	47b8      	blx	r7
 801fbba:	3001      	adds	r0, #1
 801fbbc:	f43f af58 	beq.w	801fa70 <_printf_float+0x98>
 801fbc0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fbc4:	429a      	cmp	r2, r3
 801fbc6:	db02      	blt.n	801fbce <_printf_float+0x1f6>
 801fbc8:	6823      	ldr	r3, [r4, #0]
 801fbca:	07d8      	lsls	r0, r3, #31
 801fbcc:	d50f      	bpl.n	801fbee <_printf_float+0x216>
 801fbce:	4653      	mov	r3, sl
 801fbd0:	465a      	mov	r2, fp
 801fbd2:	4631      	mov	r1, r6
 801fbd4:	4628      	mov	r0, r5
 801fbd6:	47b8      	blx	r7
 801fbd8:	3001      	adds	r0, #1
 801fbda:	f43f af49 	beq.w	801fa70 <_printf_float+0x98>
 801fbde:	f04f 0800 	mov.w	r8, #0
 801fbe2:	f104 091a 	add.w	r9, r4, #26
 801fbe6:	9b08      	ldr	r3, [sp, #32]
 801fbe8:	3b01      	subs	r3, #1
 801fbea:	4543      	cmp	r3, r8
 801fbec:	dc09      	bgt.n	801fc02 <_printf_float+0x22a>
 801fbee:	6823      	ldr	r3, [r4, #0]
 801fbf0:	079b      	lsls	r3, r3, #30
 801fbf2:	f100 8106 	bmi.w	801fe02 <_printf_float+0x42a>
 801fbf6:	68e0      	ldr	r0, [r4, #12]
 801fbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fbfa:	4298      	cmp	r0, r3
 801fbfc:	bfb8      	it	lt
 801fbfe:	4618      	movlt	r0, r3
 801fc00:	e738      	b.n	801fa74 <_printf_float+0x9c>
 801fc02:	2301      	movs	r3, #1
 801fc04:	464a      	mov	r2, r9
 801fc06:	4631      	mov	r1, r6
 801fc08:	4628      	mov	r0, r5
 801fc0a:	47b8      	blx	r7
 801fc0c:	3001      	adds	r0, #1
 801fc0e:	f43f af2f 	beq.w	801fa70 <_printf_float+0x98>
 801fc12:	f108 0801 	add.w	r8, r8, #1
 801fc16:	e7e6      	b.n	801fbe6 <_printf_float+0x20e>
 801fc18:	9b07      	ldr	r3, [sp, #28]
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	dc3a      	bgt.n	801fc94 <_printf_float+0x2bc>
 801fc1e:	4a1c      	ldr	r2, [pc, #112]	; (801fc90 <_printf_float+0x2b8>)
 801fc20:	2301      	movs	r3, #1
 801fc22:	4631      	mov	r1, r6
 801fc24:	4628      	mov	r0, r5
 801fc26:	47b8      	blx	r7
 801fc28:	3001      	adds	r0, #1
 801fc2a:	f43f af21 	beq.w	801fa70 <_printf_float+0x98>
 801fc2e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fc32:	4313      	orrs	r3, r2
 801fc34:	d102      	bne.n	801fc3c <_printf_float+0x264>
 801fc36:	6823      	ldr	r3, [r4, #0]
 801fc38:	07d9      	lsls	r1, r3, #31
 801fc3a:	d5d8      	bpl.n	801fbee <_printf_float+0x216>
 801fc3c:	4653      	mov	r3, sl
 801fc3e:	465a      	mov	r2, fp
 801fc40:	4631      	mov	r1, r6
 801fc42:	4628      	mov	r0, r5
 801fc44:	47b8      	blx	r7
 801fc46:	3001      	adds	r0, #1
 801fc48:	f43f af12 	beq.w	801fa70 <_printf_float+0x98>
 801fc4c:	f04f 0900 	mov.w	r9, #0
 801fc50:	f104 0a1a 	add.w	sl, r4, #26
 801fc54:	9b07      	ldr	r3, [sp, #28]
 801fc56:	425b      	negs	r3, r3
 801fc58:	454b      	cmp	r3, r9
 801fc5a:	dc01      	bgt.n	801fc60 <_printf_float+0x288>
 801fc5c:	9b08      	ldr	r3, [sp, #32]
 801fc5e:	e795      	b.n	801fb8c <_printf_float+0x1b4>
 801fc60:	2301      	movs	r3, #1
 801fc62:	4652      	mov	r2, sl
 801fc64:	4631      	mov	r1, r6
 801fc66:	4628      	mov	r0, r5
 801fc68:	47b8      	blx	r7
 801fc6a:	3001      	adds	r0, #1
 801fc6c:	f43f af00 	beq.w	801fa70 <_printf_float+0x98>
 801fc70:	f109 0901 	add.w	r9, r9, #1
 801fc74:	e7ee      	b.n	801fc54 <_printf_float+0x27c>
 801fc76:	bf00      	nop
 801fc78:	ffffffff 	.word	0xffffffff
 801fc7c:	7fefffff 	.word	0x7fefffff
 801fc80:	08025a64 	.word	0x08025a64
 801fc84:	08025a68 	.word	0x08025a68
 801fc88:	08025a6c 	.word	0x08025a6c
 801fc8c:	08025a70 	.word	0x08025a70
 801fc90:	08025a74 	.word	0x08025a74
 801fc94:	9a08      	ldr	r2, [sp, #32]
 801fc96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fc98:	429a      	cmp	r2, r3
 801fc9a:	bfa8      	it	ge
 801fc9c:	461a      	movge	r2, r3
 801fc9e:	2a00      	cmp	r2, #0
 801fca0:	4691      	mov	r9, r2
 801fca2:	dc38      	bgt.n	801fd16 <_printf_float+0x33e>
 801fca4:	2300      	movs	r3, #0
 801fca6:	9305      	str	r3, [sp, #20]
 801fca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fcac:	f104 021a 	add.w	r2, r4, #26
 801fcb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fcb2:	9905      	ldr	r1, [sp, #20]
 801fcb4:	9304      	str	r3, [sp, #16]
 801fcb6:	eba3 0309 	sub.w	r3, r3, r9
 801fcba:	428b      	cmp	r3, r1
 801fcbc:	dc33      	bgt.n	801fd26 <_printf_float+0x34e>
 801fcbe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fcc2:	429a      	cmp	r2, r3
 801fcc4:	db3c      	blt.n	801fd40 <_printf_float+0x368>
 801fcc6:	6823      	ldr	r3, [r4, #0]
 801fcc8:	07da      	lsls	r2, r3, #31
 801fcca:	d439      	bmi.n	801fd40 <_printf_float+0x368>
 801fccc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fcd0:	eba2 0903 	sub.w	r9, r2, r3
 801fcd4:	9b04      	ldr	r3, [sp, #16]
 801fcd6:	1ad2      	subs	r2, r2, r3
 801fcd8:	4591      	cmp	r9, r2
 801fcda:	bfa8      	it	ge
 801fcdc:	4691      	movge	r9, r2
 801fcde:	f1b9 0f00 	cmp.w	r9, #0
 801fce2:	dc35      	bgt.n	801fd50 <_printf_float+0x378>
 801fce4:	f04f 0800 	mov.w	r8, #0
 801fce8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fcec:	f104 0a1a 	add.w	sl, r4, #26
 801fcf0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fcf4:	1a9b      	subs	r3, r3, r2
 801fcf6:	eba3 0309 	sub.w	r3, r3, r9
 801fcfa:	4543      	cmp	r3, r8
 801fcfc:	f77f af77 	ble.w	801fbee <_printf_float+0x216>
 801fd00:	2301      	movs	r3, #1
 801fd02:	4652      	mov	r2, sl
 801fd04:	4631      	mov	r1, r6
 801fd06:	4628      	mov	r0, r5
 801fd08:	47b8      	blx	r7
 801fd0a:	3001      	adds	r0, #1
 801fd0c:	f43f aeb0 	beq.w	801fa70 <_printf_float+0x98>
 801fd10:	f108 0801 	add.w	r8, r8, #1
 801fd14:	e7ec      	b.n	801fcf0 <_printf_float+0x318>
 801fd16:	4613      	mov	r3, r2
 801fd18:	4631      	mov	r1, r6
 801fd1a:	4642      	mov	r2, r8
 801fd1c:	4628      	mov	r0, r5
 801fd1e:	47b8      	blx	r7
 801fd20:	3001      	adds	r0, #1
 801fd22:	d1bf      	bne.n	801fca4 <_printf_float+0x2cc>
 801fd24:	e6a4      	b.n	801fa70 <_printf_float+0x98>
 801fd26:	2301      	movs	r3, #1
 801fd28:	4631      	mov	r1, r6
 801fd2a:	4628      	mov	r0, r5
 801fd2c:	9204      	str	r2, [sp, #16]
 801fd2e:	47b8      	blx	r7
 801fd30:	3001      	adds	r0, #1
 801fd32:	f43f ae9d 	beq.w	801fa70 <_printf_float+0x98>
 801fd36:	9b05      	ldr	r3, [sp, #20]
 801fd38:	9a04      	ldr	r2, [sp, #16]
 801fd3a:	3301      	adds	r3, #1
 801fd3c:	9305      	str	r3, [sp, #20]
 801fd3e:	e7b7      	b.n	801fcb0 <_printf_float+0x2d8>
 801fd40:	4653      	mov	r3, sl
 801fd42:	465a      	mov	r2, fp
 801fd44:	4631      	mov	r1, r6
 801fd46:	4628      	mov	r0, r5
 801fd48:	47b8      	blx	r7
 801fd4a:	3001      	adds	r0, #1
 801fd4c:	d1be      	bne.n	801fccc <_printf_float+0x2f4>
 801fd4e:	e68f      	b.n	801fa70 <_printf_float+0x98>
 801fd50:	9a04      	ldr	r2, [sp, #16]
 801fd52:	464b      	mov	r3, r9
 801fd54:	4442      	add	r2, r8
 801fd56:	4631      	mov	r1, r6
 801fd58:	4628      	mov	r0, r5
 801fd5a:	47b8      	blx	r7
 801fd5c:	3001      	adds	r0, #1
 801fd5e:	d1c1      	bne.n	801fce4 <_printf_float+0x30c>
 801fd60:	e686      	b.n	801fa70 <_printf_float+0x98>
 801fd62:	9a08      	ldr	r2, [sp, #32]
 801fd64:	2a01      	cmp	r2, #1
 801fd66:	dc01      	bgt.n	801fd6c <_printf_float+0x394>
 801fd68:	07db      	lsls	r3, r3, #31
 801fd6a:	d537      	bpl.n	801fddc <_printf_float+0x404>
 801fd6c:	2301      	movs	r3, #1
 801fd6e:	4642      	mov	r2, r8
 801fd70:	4631      	mov	r1, r6
 801fd72:	4628      	mov	r0, r5
 801fd74:	47b8      	blx	r7
 801fd76:	3001      	adds	r0, #1
 801fd78:	f43f ae7a 	beq.w	801fa70 <_printf_float+0x98>
 801fd7c:	4653      	mov	r3, sl
 801fd7e:	465a      	mov	r2, fp
 801fd80:	4631      	mov	r1, r6
 801fd82:	4628      	mov	r0, r5
 801fd84:	47b8      	blx	r7
 801fd86:	3001      	adds	r0, #1
 801fd88:	f43f ae72 	beq.w	801fa70 <_printf_float+0x98>
 801fd8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fd90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd98:	9b08      	ldr	r3, [sp, #32]
 801fd9a:	d01a      	beq.n	801fdd2 <_printf_float+0x3fa>
 801fd9c:	3b01      	subs	r3, #1
 801fd9e:	f108 0201 	add.w	r2, r8, #1
 801fda2:	4631      	mov	r1, r6
 801fda4:	4628      	mov	r0, r5
 801fda6:	47b8      	blx	r7
 801fda8:	3001      	adds	r0, #1
 801fdaa:	d10e      	bne.n	801fdca <_printf_float+0x3f2>
 801fdac:	e660      	b.n	801fa70 <_printf_float+0x98>
 801fdae:	2301      	movs	r3, #1
 801fdb0:	464a      	mov	r2, r9
 801fdb2:	4631      	mov	r1, r6
 801fdb4:	4628      	mov	r0, r5
 801fdb6:	47b8      	blx	r7
 801fdb8:	3001      	adds	r0, #1
 801fdba:	f43f ae59 	beq.w	801fa70 <_printf_float+0x98>
 801fdbe:	f108 0801 	add.w	r8, r8, #1
 801fdc2:	9b08      	ldr	r3, [sp, #32]
 801fdc4:	3b01      	subs	r3, #1
 801fdc6:	4543      	cmp	r3, r8
 801fdc8:	dcf1      	bgt.n	801fdae <_printf_float+0x3d6>
 801fdca:	9b04      	ldr	r3, [sp, #16]
 801fdcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fdd0:	e6dd      	b.n	801fb8e <_printf_float+0x1b6>
 801fdd2:	f04f 0800 	mov.w	r8, #0
 801fdd6:	f104 091a 	add.w	r9, r4, #26
 801fdda:	e7f2      	b.n	801fdc2 <_printf_float+0x3ea>
 801fddc:	2301      	movs	r3, #1
 801fdde:	4642      	mov	r2, r8
 801fde0:	e7df      	b.n	801fda2 <_printf_float+0x3ca>
 801fde2:	2301      	movs	r3, #1
 801fde4:	464a      	mov	r2, r9
 801fde6:	4631      	mov	r1, r6
 801fde8:	4628      	mov	r0, r5
 801fdea:	47b8      	blx	r7
 801fdec:	3001      	adds	r0, #1
 801fdee:	f43f ae3f 	beq.w	801fa70 <_printf_float+0x98>
 801fdf2:	f108 0801 	add.w	r8, r8, #1
 801fdf6:	68e3      	ldr	r3, [r4, #12]
 801fdf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fdfa:	1a5b      	subs	r3, r3, r1
 801fdfc:	4543      	cmp	r3, r8
 801fdfe:	dcf0      	bgt.n	801fde2 <_printf_float+0x40a>
 801fe00:	e6f9      	b.n	801fbf6 <_printf_float+0x21e>
 801fe02:	f04f 0800 	mov.w	r8, #0
 801fe06:	f104 0919 	add.w	r9, r4, #25
 801fe0a:	e7f4      	b.n	801fdf6 <_printf_float+0x41e>

0801fe0c <_printf_common>:
 801fe0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe10:	4616      	mov	r6, r2
 801fe12:	4699      	mov	r9, r3
 801fe14:	688a      	ldr	r2, [r1, #8]
 801fe16:	690b      	ldr	r3, [r1, #16]
 801fe18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fe1c:	4293      	cmp	r3, r2
 801fe1e:	bfb8      	it	lt
 801fe20:	4613      	movlt	r3, r2
 801fe22:	6033      	str	r3, [r6, #0]
 801fe24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fe28:	4607      	mov	r7, r0
 801fe2a:	460c      	mov	r4, r1
 801fe2c:	b10a      	cbz	r2, 801fe32 <_printf_common+0x26>
 801fe2e:	3301      	adds	r3, #1
 801fe30:	6033      	str	r3, [r6, #0]
 801fe32:	6823      	ldr	r3, [r4, #0]
 801fe34:	0699      	lsls	r1, r3, #26
 801fe36:	bf42      	ittt	mi
 801fe38:	6833      	ldrmi	r3, [r6, #0]
 801fe3a:	3302      	addmi	r3, #2
 801fe3c:	6033      	strmi	r3, [r6, #0]
 801fe3e:	6825      	ldr	r5, [r4, #0]
 801fe40:	f015 0506 	ands.w	r5, r5, #6
 801fe44:	d106      	bne.n	801fe54 <_printf_common+0x48>
 801fe46:	f104 0a19 	add.w	sl, r4, #25
 801fe4a:	68e3      	ldr	r3, [r4, #12]
 801fe4c:	6832      	ldr	r2, [r6, #0]
 801fe4e:	1a9b      	subs	r3, r3, r2
 801fe50:	42ab      	cmp	r3, r5
 801fe52:	dc26      	bgt.n	801fea2 <_printf_common+0x96>
 801fe54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fe58:	1e13      	subs	r3, r2, #0
 801fe5a:	6822      	ldr	r2, [r4, #0]
 801fe5c:	bf18      	it	ne
 801fe5e:	2301      	movne	r3, #1
 801fe60:	0692      	lsls	r2, r2, #26
 801fe62:	d42b      	bmi.n	801febc <_printf_common+0xb0>
 801fe64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fe68:	4649      	mov	r1, r9
 801fe6a:	4638      	mov	r0, r7
 801fe6c:	47c0      	blx	r8
 801fe6e:	3001      	adds	r0, #1
 801fe70:	d01e      	beq.n	801feb0 <_printf_common+0xa4>
 801fe72:	6823      	ldr	r3, [r4, #0]
 801fe74:	6922      	ldr	r2, [r4, #16]
 801fe76:	f003 0306 	and.w	r3, r3, #6
 801fe7a:	2b04      	cmp	r3, #4
 801fe7c:	bf02      	ittt	eq
 801fe7e:	68e5      	ldreq	r5, [r4, #12]
 801fe80:	6833      	ldreq	r3, [r6, #0]
 801fe82:	1aed      	subeq	r5, r5, r3
 801fe84:	68a3      	ldr	r3, [r4, #8]
 801fe86:	bf0c      	ite	eq
 801fe88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fe8c:	2500      	movne	r5, #0
 801fe8e:	4293      	cmp	r3, r2
 801fe90:	bfc4      	itt	gt
 801fe92:	1a9b      	subgt	r3, r3, r2
 801fe94:	18ed      	addgt	r5, r5, r3
 801fe96:	2600      	movs	r6, #0
 801fe98:	341a      	adds	r4, #26
 801fe9a:	42b5      	cmp	r5, r6
 801fe9c:	d11a      	bne.n	801fed4 <_printf_common+0xc8>
 801fe9e:	2000      	movs	r0, #0
 801fea0:	e008      	b.n	801feb4 <_printf_common+0xa8>
 801fea2:	2301      	movs	r3, #1
 801fea4:	4652      	mov	r2, sl
 801fea6:	4649      	mov	r1, r9
 801fea8:	4638      	mov	r0, r7
 801feaa:	47c0      	blx	r8
 801feac:	3001      	adds	r0, #1
 801feae:	d103      	bne.n	801feb8 <_printf_common+0xac>
 801feb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801feb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feb8:	3501      	adds	r5, #1
 801feba:	e7c6      	b.n	801fe4a <_printf_common+0x3e>
 801febc:	18e1      	adds	r1, r4, r3
 801febe:	1c5a      	adds	r2, r3, #1
 801fec0:	2030      	movs	r0, #48	; 0x30
 801fec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fec6:	4422      	add	r2, r4
 801fec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fed0:	3302      	adds	r3, #2
 801fed2:	e7c7      	b.n	801fe64 <_printf_common+0x58>
 801fed4:	2301      	movs	r3, #1
 801fed6:	4622      	mov	r2, r4
 801fed8:	4649      	mov	r1, r9
 801feda:	4638      	mov	r0, r7
 801fedc:	47c0      	blx	r8
 801fede:	3001      	adds	r0, #1
 801fee0:	d0e6      	beq.n	801feb0 <_printf_common+0xa4>
 801fee2:	3601      	adds	r6, #1
 801fee4:	e7d9      	b.n	801fe9a <_printf_common+0x8e>
	...

0801fee8 <_printf_i>:
 801fee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801feec:	7e0f      	ldrb	r7, [r1, #24]
 801feee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fef0:	2f78      	cmp	r7, #120	; 0x78
 801fef2:	4691      	mov	r9, r2
 801fef4:	4680      	mov	r8, r0
 801fef6:	460c      	mov	r4, r1
 801fef8:	469a      	mov	sl, r3
 801fefa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fefe:	d807      	bhi.n	801ff10 <_printf_i+0x28>
 801ff00:	2f62      	cmp	r7, #98	; 0x62
 801ff02:	d80a      	bhi.n	801ff1a <_printf_i+0x32>
 801ff04:	2f00      	cmp	r7, #0
 801ff06:	f000 80d4 	beq.w	80200b2 <_printf_i+0x1ca>
 801ff0a:	2f58      	cmp	r7, #88	; 0x58
 801ff0c:	f000 80c0 	beq.w	8020090 <_printf_i+0x1a8>
 801ff10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ff14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ff18:	e03a      	b.n	801ff90 <_printf_i+0xa8>
 801ff1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ff1e:	2b15      	cmp	r3, #21
 801ff20:	d8f6      	bhi.n	801ff10 <_printf_i+0x28>
 801ff22:	a101      	add	r1, pc, #4	; (adr r1, 801ff28 <_printf_i+0x40>)
 801ff24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ff28:	0801ff81 	.word	0x0801ff81
 801ff2c:	0801ff95 	.word	0x0801ff95
 801ff30:	0801ff11 	.word	0x0801ff11
 801ff34:	0801ff11 	.word	0x0801ff11
 801ff38:	0801ff11 	.word	0x0801ff11
 801ff3c:	0801ff11 	.word	0x0801ff11
 801ff40:	0801ff95 	.word	0x0801ff95
 801ff44:	0801ff11 	.word	0x0801ff11
 801ff48:	0801ff11 	.word	0x0801ff11
 801ff4c:	0801ff11 	.word	0x0801ff11
 801ff50:	0801ff11 	.word	0x0801ff11
 801ff54:	08020099 	.word	0x08020099
 801ff58:	0801ffc1 	.word	0x0801ffc1
 801ff5c:	08020053 	.word	0x08020053
 801ff60:	0801ff11 	.word	0x0801ff11
 801ff64:	0801ff11 	.word	0x0801ff11
 801ff68:	080200bb 	.word	0x080200bb
 801ff6c:	0801ff11 	.word	0x0801ff11
 801ff70:	0801ffc1 	.word	0x0801ffc1
 801ff74:	0801ff11 	.word	0x0801ff11
 801ff78:	0801ff11 	.word	0x0801ff11
 801ff7c:	0802005b 	.word	0x0802005b
 801ff80:	682b      	ldr	r3, [r5, #0]
 801ff82:	1d1a      	adds	r2, r3, #4
 801ff84:	681b      	ldr	r3, [r3, #0]
 801ff86:	602a      	str	r2, [r5, #0]
 801ff88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ff8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ff90:	2301      	movs	r3, #1
 801ff92:	e09f      	b.n	80200d4 <_printf_i+0x1ec>
 801ff94:	6820      	ldr	r0, [r4, #0]
 801ff96:	682b      	ldr	r3, [r5, #0]
 801ff98:	0607      	lsls	r7, r0, #24
 801ff9a:	f103 0104 	add.w	r1, r3, #4
 801ff9e:	6029      	str	r1, [r5, #0]
 801ffa0:	d501      	bpl.n	801ffa6 <_printf_i+0xbe>
 801ffa2:	681e      	ldr	r6, [r3, #0]
 801ffa4:	e003      	b.n	801ffae <_printf_i+0xc6>
 801ffa6:	0646      	lsls	r6, r0, #25
 801ffa8:	d5fb      	bpl.n	801ffa2 <_printf_i+0xba>
 801ffaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ffae:	2e00      	cmp	r6, #0
 801ffb0:	da03      	bge.n	801ffba <_printf_i+0xd2>
 801ffb2:	232d      	movs	r3, #45	; 0x2d
 801ffb4:	4276      	negs	r6, r6
 801ffb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ffba:	485a      	ldr	r0, [pc, #360]	; (8020124 <_printf_i+0x23c>)
 801ffbc:	230a      	movs	r3, #10
 801ffbe:	e012      	b.n	801ffe6 <_printf_i+0xfe>
 801ffc0:	682b      	ldr	r3, [r5, #0]
 801ffc2:	6820      	ldr	r0, [r4, #0]
 801ffc4:	1d19      	adds	r1, r3, #4
 801ffc6:	6029      	str	r1, [r5, #0]
 801ffc8:	0605      	lsls	r5, r0, #24
 801ffca:	d501      	bpl.n	801ffd0 <_printf_i+0xe8>
 801ffcc:	681e      	ldr	r6, [r3, #0]
 801ffce:	e002      	b.n	801ffd6 <_printf_i+0xee>
 801ffd0:	0641      	lsls	r1, r0, #25
 801ffd2:	d5fb      	bpl.n	801ffcc <_printf_i+0xe4>
 801ffd4:	881e      	ldrh	r6, [r3, #0]
 801ffd6:	4853      	ldr	r0, [pc, #332]	; (8020124 <_printf_i+0x23c>)
 801ffd8:	2f6f      	cmp	r7, #111	; 0x6f
 801ffda:	bf0c      	ite	eq
 801ffdc:	2308      	moveq	r3, #8
 801ffde:	230a      	movne	r3, #10
 801ffe0:	2100      	movs	r1, #0
 801ffe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ffe6:	6865      	ldr	r5, [r4, #4]
 801ffe8:	60a5      	str	r5, [r4, #8]
 801ffea:	2d00      	cmp	r5, #0
 801ffec:	bfa2      	ittt	ge
 801ffee:	6821      	ldrge	r1, [r4, #0]
 801fff0:	f021 0104 	bicge.w	r1, r1, #4
 801fff4:	6021      	strge	r1, [r4, #0]
 801fff6:	b90e      	cbnz	r6, 801fffc <_printf_i+0x114>
 801fff8:	2d00      	cmp	r5, #0
 801fffa:	d04b      	beq.n	8020094 <_printf_i+0x1ac>
 801fffc:	4615      	mov	r5, r2
 801fffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8020002:	fb03 6711 	mls	r7, r3, r1, r6
 8020006:	5dc7      	ldrb	r7, [r0, r7]
 8020008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802000c:	4637      	mov	r7, r6
 802000e:	42bb      	cmp	r3, r7
 8020010:	460e      	mov	r6, r1
 8020012:	d9f4      	bls.n	801fffe <_printf_i+0x116>
 8020014:	2b08      	cmp	r3, #8
 8020016:	d10b      	bne.n	8020030 <_printf_i+0x148>
 8020018:	6823      	ldr	r3, [r4, #0]
 802001a:	07de      	lsls	r6, r3, #31
 802001c:	d508      	bpl.n	8020030 <_printf_i+0x148>
 802001e:	6923      	ldr	r3, [r4, #16]
 8020020:	6861      	ldr	r1, [r4, #4]
 8020022:	4299      	cmp	r1, r3
 8020024:	bfde      	ittt	le
 8020026:	2330      	movle	r3, #48	; 0x30
 8020028:	f805 3c01 	strble.w	r3, [r5, #-1]
 802002c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020030:	1b52      	subs	r2, r2, r5
 8020032:	6122      	str	r2, [r4, #16]
 8020034:	f8cd a000 	str.w	sl, [sp]
 8020038:	464b      	mov	r3, r9
 802003a:	aa03      	add	r2, sp, #12
 802003c:	4621      	mov	r1, r4
 802003e:	4640      	mov	r0, r8
 8020040:	f7ff fee4 	bl	801fe0c <_printf_common>
 8020044:	3001      	adds	r0, #1
 8020046:	d14a      	bne.n	80200de <_printf_i+0x1f6>
 8020048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802004c:	b004      	add	sp, #16
 802004e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020052:	6823      	ldr	r3, [r4, #0]
 8020054:	f043 0320 	orr.w	r3, r3, #32
 8020058:	6023      	str	r3, [r4, #0]
 802005a:	4833      	ldr	r0, [pc, #204]	; (8020128 <_printf_i+0x240>)
 802005c:	2778      	movs	r7, #120	; 0x78
 802005e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020062:	6823      	ldr	r3, [r4, #0]
 8020064:	6829      	ldr	r1, [r5, #0]
 8020066:	061f      	lsls	r7, r3, #24
 8020068:	f851 6b04 	ldr.w	r6, [r1], #4
 802006c:	d402      	bmi.n	8020074 <_printf_i+0x18c>
 802006e:	065f      	lsls	r7, r3, #25
 8020070:	bf48      	it	mi
 8020072:	b2b6      	uxthmi	r6, r6
 8020074:	07df      	lsls	r7, r3, #31
 8020076:	bf48      	it	mi
 8020078:	f043 0320 	orrmi.w	r3, r3, #32
 802007c:	6029      	str	r1, [r5, #0]
 802007e:	bf48      	it	mi
 8020080:	6023      	strmi	r3, [r4, #0]
 8020082:	b91e      	cbnz	r6, 802008c <_printf_i+0x1a4>
 8020084:	6823      	ldr	r3, [r4, #0]
 8020086:	f023 0320 	bic.w	r3, r3, #32
 802008a:	6023      	str	r3, [r4, #0]
 802008c:	2310      	movs	r3, #16
 802008e:	e7a7      	b.n	801ffe0 <_printf_i+0xf8>
 8020090:	4824      	ldr	r0, [pc, #144]	; (8020124 <_printf_i+0x23c>)
 8020092:	e7e4      	b.n	802005e <_printf_i+0x176>
 8020094:	4615      	mov	r5, r2
 8020096:	e7bd      	b.n	8020014 <_printf_i+0x12c>
 8020098:	682b      	ldr	r3, [r5, #0]
 802009a:	6826      	ldr	r6, [r4, #0]
 802009c:	6961      	ldr	r1, [r4, #20]
 802009e:	1d18      	adds	r0, r3, #4
 80200a0:	6028      	str	r0, [r5, #0]
 80200a2:	0635      	lsls	r5, r6, #24
 80200a4:	681b      	ldr	r3, [r3, #0]
 80200a6:	d501      	bpl.n	80200ac <_printf_i+0x1c4>
 80200a8:	6019      	str	r1, [r3, #0]
 80200aa:	e002      	b.n	80200b2 <_printf_i+0x1ca>
 80200ac:	0670      	lsls	r0, r6, #25
 80200ae:	d5fb      	bpl.n	80200a8 <_printf_i+0x1c0>
 80200b0:	8019      	strh	r1, [r3, #0]
 80200b2:	2300      	movs	r3, #0
 80200b4:	6123      	str	r3, [r4, #16]
 80200b6:	4615      	mov	r5, r2
 80200b8:	e7bc      	b.n	8020034 <_printf_i+0x14c>
 80200ba:	682b      	ldr	r3, [r5, #0]
 80200bc:	1d1a      	adds	r2, r3, #4
 80200be:	602a      	str	r2, [r5, #0]
 80200c0:	681d      	ldr	r5, [r3, #0]
 80200c2:	6862      	ldr	r2, [r4, #4]
 80200c4:	2100      	movs	r1, #0
 80200c6:	4628      	mov	r0, r5
 80200c8:	f7e0 f8ca 	bl	8000260 <memchr>
 80200cc:	b108      	cbz	r0, 80200d2 <_printf_i+0x1ea>
 80200ce:	1b40      	subs	r0, r0, r5
 80200d0:	6060      	str	r0, [r4, #4]
 80200d2:	6863      	ldr	r3, [r4, #4]
 80200d4:	6123      	str	r3, [r4, #16]
 80200d6:	2300      	movs	r3, #0
 80200d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80200dc:	e7aa      	b.n	8020034 <_printf_i+0x14c>
 80200de:	6923      	ldr	r3, [r4, #16]
 80200e0:	462a      	mov	r2, r5
 80200e2:	4649      	mov	r1, r9
 80200e4:	4640      	mov	r0, r8
 80200e6:	47d0      	blx	sl
 80200e8:	3001      	adds	r0, #1
 80200ea:	d0ad      	beq.n	8020048 <_printf_i+0x160>
 80200ec:	6823      	ldr	r3, [r4, #0]
 80200ee:	079b      	lsls	r3, r3, #30
 80200f0:	d413      	bmi.n	802011a <_printf_i+0x232>
 80200f2:	68e0      	ldr	r0, [r4, #12]
 80200f4:	9b03      	ldr	r3, [sp, #12]
 80200f6:	4298      	cmp	r0, r3
 80200f8:	bfb8      	it	lt
 80200fa:	4618      	movlt	r0, r3
 80200fc:	e7a6      	b.n	802004c <_printf_i+0x164>
 80200fe:	2301      	movs	r3, #1
 8020100:	4632      	mov	r2, r6
 8020102:	4649      	mov	r1, r9
 8020104:	4640      	mov	r0, r8
 8020106:	47d0      	blx	sl
 8020108:	3001      	adds	r0, #1
 802010a:	d09d      	beq.n	8020048 <_printf_i+0x160>
 802010c:	3501      	adds	r5, #1
 802010e:	68e3      	ldr	r3, [r4, #12]
 8020110:	9903      	ldr	r1, [sp, #12]
 8020112:	1a5b      	subs	r3, r3, r1
 8020114:	42ab      	cmp	r3, r5
 8020116:	dcf2      	bgt.n	80200fe <_printf_i+0x216>
 8020118:	e7eb      	b.n	80200f2 <_printf_i+0x20a>
 802011a:	2500      	movs	r5, #0
 802011c:	f104 0619 	add.w	r6, r4, #25
 8020120:	e7f5      	b.n	802010e <_printf_i+0x226>
 8020122:	bf00      	nop
 8020124:	08025a76 	.word	0x08025a76
 8020128:	08025a87 	.word	0x08025a87

0802012c <_scanf_float>:
 802012c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020130:	b087      	sub	sp, #28
 8020132:	4617      	mov	r7, r2
 8020134:	9303      	str	r3, [sp, #12]
 8020136:	688b      	ldr	r3, [r1, #8]
 8020138:	1e5a      	subs	r2, r3, #1
 802013a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802013e:	bf83      	ittte	hi
 8020140:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020144:	195b      	addhi	r3, r3, r5
 8020146:	9302      	strhi	r3, [sp, #8]
 8020148:	2300      	movls	r3, #0
 802014a:	bf86      	itte	hi
 802014c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020150:	608b      	strhi	r3, [r1, #8]
 8020152:	9302      	strls	r3, [sp, #8]
 8020154:	680b      	ldr	r3, [r1, #0]
 8020156:	468b      	mov	fp, r1
 8020158:	2500      	movs	r5, #0
 802015a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802015e:	f84b 3b1c 	str.w	r3, [fp], #28
 8020162:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8020166:	4680      	mov	r8, r0
 8020168:	460c      	mov	r4, r1
 802016a:	465e      	mov	r6, fp
 802016c:	46aa      	mov	sl, r5
 802016e:	46a9      	mov	r9, r5
 8020170:	9501      	str	r5, [sp, #4]
 8020172:	68a2      	ldr	r2, [r4, #8]
 8020174:	b152      	cbz	r2, 802018c <_scanf_float+0x60>
 8020176:	683b      	ldr	r3, [r7, #0]
 8020178:	781b      	ldrb	r3, [r3, #0]
 802017a:	2b4e      	cmp	r3, #78	; 0x4e
 802017c:	d864      	bhi.n	8020248 <_scanf_float+0x11c>
 802017e:	2b40      	cmp	r3, #64	; 0x40
 8020180:	d83c      	bhi.n	80201fc <_scanf_float+0xd0>
 8020182:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8020186:	b2c8      	uxtb	r0, r1
 8020188:	280e      	cmp	r0, #14
 802018a:	d93a      	bls.n	8020202 <_scanf_float+0xd6>
 802018c:	f1b9 0f00 	cmp.w	r9, #0
 8020190:	d003      	beq.n	802019a <_scanf_float+0x6e>
 8020192:	6823      	ldr	r3, [r4, #0]
 8020194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020198:	6023      	str	r3, [r4, #0]
 802019a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802019e:	f1ba 0f01 	cmp.w	sl, #1
 80201a2:	f200 8113 	bhi.w	80203cc <_scanf_float+0x2a0>
 80201a6:	455e      	cmp	r6, fp
 80201a8:	f200 8105 	bhi.w	80203b6 <_scanf_float+0x28a>
 80201ac:	2501      	movs	r5, #1
 80201ae:	4628      	mov	r0, r5
 80201b0:	b007      	add	sp, #28
 80201b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80201ba:	2a0d      	cmp	r2, #13
 80201bc:	d8e6      	bhi.n	802018c <_scanf_float+0x60>
 80201be:	a101      	add	r1, pc, #4	; (adr r1, 80201c4 <_scanf_float+0x98>)
 80201c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80201c4:	08020303 	.word	0x08020303
 80201c8:	0802018d 	.word	0x0802018d
 80201cc:	0802018d 	.word	0x0802018d
 80201d0:	0802018d 	.word	0x0802018d
 80201d4:	08020363 	.word	0x08020363
 80201d8:	0802033b 	.word	0x0802033b
 80201dc:	0802018d 	.word	0x0802018d
 80201e0:	0802018d 	.word	0x0802018d
 80201e4:	08020311 	.word	0x08020311
 80201e8:	0802018d 	.word	0x0802018d
 80201ec:	0802018d 	.word	0x0802018d
 80201f0:	0802018d 	.word	0x0802018d
 80201f4:	0802018d 	.word	0x0802018d
 80201f8:	080202c9 	.word	0x080202c9
 80201fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8020200:	e7db      	b.n	80201ba <_scanf_float+0x8e>
 8020202:	290e      	cmp	r1, #14
 8020204:	d8c2      	bhi.n	802018c <_scanf_float+0x60>
 8020206:	a001      	add	r0, pc, #4	; (adr r0, 802020c <_scanf_float+0xe0>)
 8020208:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802020c:	080202bb 	.word	0x080202bb
 8020210:	0802018d 	.word	0x0802018d
 8020214:	080202bb 	.word	0x080202bb
 8020218:	0802034f 	.word	0x0802034f
 802021c:	0802018d 	.word	0x0802018d
 8020220:	08020269 	.word	0x08020269
 8020224:	080202a5 	.word	0x080202a5
 8020228:	080202a5 	.word	0x080202a5
 802022c:	080202a5 	.word	0x080202a5
 8020230:	080202a5 	.word	0x080202a5
 8020234:	080202a5 	.word	0x080202a5
 8020238:	080202a5 	.word	0x080202a5
 802023c:	080202a5 	.word	0x080202a5
 8020240:	080202a5 	.word	0x080202a5
 8020244:	080202a5 	.word	0x080202a5
 8020248:	2b6e      	cmp	r3, #110	; 0x6e
 802024a:	d809      	bhi.n	8020260 <_scanf_float+0x134>
 802024c:	2b60      	cmp	r3, #96	; 0x60
 802024e:	d8b2      	bhi.n	80201b6 <_scanf_float+0x8a>
 8020250:	2b54      	cmp	r3, #84	; 0x54
 8020252:	d077      	beq.n	8020344 <_scanf_float+0x218>
 8020254:	2b59      	cmp	r3, #89	; 0x59
 8020256:	d199      	bne.n	802018c <_scanf_float+0x60>
 8020258:	2d07      	cmp	r5, #7
 802025a:	d197      	bne.n	802018c <_scanf_float+0x60>
 802025c:	2508      	movs	r5, #8
 802025e:	e029      	b.n	80202b4 <_scanf_float+0x188>
 8020260:	2b74      	cmp	r3, #116	; 0x74
 8020262:	d06f      	beq.n	8020344 <_scanf_float+0x218>
 8020264:	2b79      	cmp	r3, #121	; 0x79
 8020266:	e7f6      	b.n	8020256 <_scanf_float+0x12a>
 8020268:	6821      	ldr	r1, [r4, #0]
 802026a:	05c8      	lsls	r0, r1, #23
 802026c:	d51a      	bpl.n	80202a4 <_scanf_float+0x178>
 802026e:	9b02      	ldr	r3, [sp, #8]
 8020270:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8020274:	6021      	str	r1, [r4, #0]
 8020276:	f109 0901 	add.w	r9, r9, #1
 802027a:	b11b      	cbz	r3, 8020284 <_scanf_float+0x158>
 802027c:	3b01      	subs	r3, #1
 802027e:	3201      	adds	r2, #1
 8020280:	9302      	str	r3, [sp, #8]
 8020282:	60a2      	str	r2, [r4, #8]
 8020284:	68a3      	ldr	r3, [r4, #8]
 8020286:	3b01      	subs	r3, #1
 8020288:	60a3      	str	r3, [r4, #8]
 802028a:	6923      	ldr	r3, [r4, #16]
 802028c:	3301      	adds	r3, #1
 802028e:	6123      	str	r3, [r4, #16]
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	3b01      	subs	r3, #1
 8020294:	2b00      	cmp	r3, #0
 8020296:	607b      	str	r3, [r7, #4]
 8020298:	f340 8084 	ble.w	80203a4 <_scanf_float+0x278>
 802029c:	683b      	ldr	r3, [r7, #0]
 802029e:	3301      	adds	r3, #1
 80202a0:	603b      	str	r3, [r7, #0]
 80202a2:	e766      	b.n	8020172 <_scanf_float+0x46>
 80202a4:	eb1a 0f05 	cmn.w	sl, r5
 80202a8:	f47f af70 	bne.w	802018c <_scanf_float+0x60>
 80202ac:	6822      	ldr	r2, [r4, #0]
 80202ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80202b2:	6022      	str	r2, [r4, #0]
 80202b4:	f806 3b01 	strb.w	r3, [r6], #1
 80202b8:	e7e4      	b.n	8020284 <_scanf_float+0x158>
 80202ba:	6822      	ldr	r2, [r4, #0]
 80202bc:	0610      	lsls	r0, r2, #24
 80202be:	f57f af65 	bpl.w	802018c <_scanf_float+0x60>
 80202c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80202c6:	e7f4      	b.n	80202b2 <_scanf_float+0x186>
 80202c8:	f1ba 0f00 	cmp.w	sl, #0
 80202cc:	d10e      	bne.n	80202ec <_scanf_float+0x1c0>
 80202ce:	f1b9 0f00 	cmp.w	r9, #0
 80202d2:	d10e      	bne.n	80202f2 <_scanf_float+0x1c6>
 80202d4:	6822      	ldr	r2, [r4, #0]
 80202d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80202da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80202de:	d108      	bne.n	80202f2 <_scanf_float+0x1c6>
 80202e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80202e4:	6022      	str	r2, [r4, #0]
 80202e6:	f04f 0a01 	mov.w	sl, #1
 80202ea:	e7e3      	b.n	80202b4 <_scanf_float+0x188>
 80202ec:	f1ba 0f02 	cmp.w	sl, #2
 80202f0:	d055      	beq.n	802039e <_scanf_float+0x272>
 80202f2:	2d01      	cmp	r5, #1
 80202f4:	d002      	beq.n	80202fc <_scanf_float+0x1d0>
 80202f6:	2d04      	cmp	r5, #4
 80202f8:	f47f af48 	bne.w	802018c <_scanf_float+0x60>
 80202fc:	3501      	adds	r5, #1
 80202fe:	b2ed      	uxtb	r5, r5
 8020300:	e7d8      	b.n	80202b4 <_scanf_float+0x188>
 8020302:	f1ba 0f01 	cmp.w	sl, #1
 8020306:	f47f af41 	bne.w	802018c <_scanf_float+0x60>
 802030a:	f04f 0a02 	mov.w	sl, #2
 802030e:	e7d1      	b.n	80202b4 <_scanf_float+0x188>
 8020310:	b97d      	cbnz	r5, 8020332 <_scanf_float+0x206>
 8020312:	f1b9 0f00 	cmp.w	r9, #0
 8020316:	f47f af3c 	bne.w	8020192 <_scanf_float+0x66>
 802031a:	6822      	ldr	r2, [r4, #0]
 802031c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020320:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020324:	f47f af39 	bne.w	802019a <_scanf_float+0x6e>
 8020328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802032c:	6022      	str	r2, [r4, #0]
 802032e:	2501      	movs	r5, #1
 8020330:	e7c0      	b.n	80202b4 <_scanf_float+0x188>
 8020332:	2d03      	cmp	r5, #3
 8020334:	d0e2      	beq.n	80202fc <_scanf_float+0x1d0>
 8020336:	2d05      	cmp	r5, #5
 8020338:	e7de      	b.n	80202f8 <_scanf_float+0x1cc>
 802033a:	2d02      	cmp	r5, #2
 802033c:	f47f af26 	bne.w	802018c <_scanf_float+0x60>
 8020340:	2503      	movs	r5, #3
 8020342:	e7b7      	b.n	80202b4 <_scanf_float+0x188>
 8020344:	2d06      	cmp	r5, #6
 8020346:	f47f af21 	bne.w	802018c <_scanf_float+0x60>
 802034a:	2507      	movs	r5, #7
 802034c:	e7b2      	b.n	80202b4 <_scanf_float+0x188>
 802034e:	6822      	ldr	r2, [r4, #0]
 8020350:	0591      	lsls	r1, r2, #22
 8020352:	f57f af1b 	bpl.w	802018c <_scanf_float+0x60>
 8020356:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802035a:	6022      	str	r2, [r4, #0]
 802035c:	f8cd 9004 	str.w	r9, [sp, #4]
 8020360:	e7a8      	b.n	80202b4 <_scanf_float+0x188>
 8020362:	6822      	ldr	r2, [r4, #0]
 8020364:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020368:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802036c:	d006      	beq.n	802037c <_scanf_float+0x250>
 802036e:	0550      	lsls	r0, r2, #21
 8020370:	f57f af0c 	bpl.w	802018c <_scanf_float+0x60>
 8020374:	f1b9 0f00 	cmp.w	r9, #0
 8020378:	f43f af0f 	beq.w	802019a <_scanf_float+0x6e>
 802037c:	0591      	lsls	r1, r2, #22
 802037e:	bf58      	it	pl
 8020380:	9901      	ldrpl	r1, [sp, #4]
 8020382:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020386:	bf58      	it	pl
 8020388:	eba9 0101 	subpl.w	r1, r9, r1
 802038c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020390:	bf58      	it	pl
 8020392:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8020396:	6022      	str	r2, [r4, #0]
 8020398:	f04f 0900 	mov.w	r9, #0
 802039c:	e78a      	b.n	80202b4 <_scanf_float+0x188>
 802039e:	f04f 0a03 	mov.w	sl, #3
 80203a2:	e787      	b.n	80202b4 <_scanf_float+0x188>
 80203a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80203a8:	4639      	mov	r1, r7
 80203aa:	4640      	mov	r0, r8
 80203ac:	4798      	blx	r3
 80203ae:	2800      	cmp	r0, #0
 80203b0:	f43f aedf 	beq.w	8020172 <_scanf_float+0x46>
 80203b4:	e6ea      	b.n	802018c <_scanf_float+0x60>
 80203b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80203ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80203be:	463a      	mov	r2, r7
 80203c0:	4640      	mov	r0, r8
 80203c2:	4798      	blx	r3
 80203c4:	6923      	ldr	r3, [r4, #16]
 80203c6:	3b01      	subs	r3, #1
 80203c8:	6123      	str	r3, [r4, #16]
 80203ca:	e6ec      	b.n	80201a6 <_scanf_float+0x7a>
 80203cc:	1e6b      	subs	r3, r5, #1
 80203ce:	2b06      	cmp	r3, #6
 80203d0:	d825      	bhi.n	802041e <_scanf_float+0x2f2>
 80203d2:	2d02      	cmp	r5, #2
 80203d4:	d836      	bhi.n	8020444 <_scanf_float+0x318>
 80203d6:	455e      	cmp	r6, fp
 80203d8:	f67f aee8 	bls.w	80201ac <_scanf_float+0x80>
 80203dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80203e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80203e4:	463a      	mov	r2, r7
 80203e6:	4640      	mov	r0, r8
 80203e8:	4798      	blx	r3
 80203ea:	6923      	ldr	r3, [r4, #16]
 80203ec:	3b01      	subs	r3, #1
 80203ee:	6123      	str	r3, [r4, #16]
 80203f0:	e7f1      	b.n	80203d6 <_scanf_float+0x2aa>
 80203f2:	9802      	ldr	r0, [sp, #8]
 80203f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80203f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80203fc:	9002      	str	r0, [sp, #8]
 80203fe:	463a      	mov	r2, r7
 8020400:	4640      	mov	r0, r8
 8020402:	4798      	blx	r3
 8020404:	6923      	ldr	r3, [r4, #16]
 8020406:	3b01      	subs	r3, #1
 8020408:	6123      	str	r3, [r4, #16]
 802040a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802040e:	fa5f fa8a 	uxtb.w	sl, sl
 8020412:	f1ba 0f02 	cmp.w	sl, #2
 8020416:	d1ec      	bne.n	80203f2 <_scanf_float+0x2c6>
 8020418:	3d03      	subs	r5, #3
 802041a:	b2ed      	uxtb	r5, r5
 802041c:	1b76      	subs	r6, r6, r5
 802041e:	6823      	ldr	r3, [r4, #0]
 8020420:	05da      	lsls	r2, r3, #23
 8020422:	d52f      	bpl.n	8020484 <_scanf_float+0x358>
 8020424:	055b      	lsls	r3, r3, #21
 8020426:	d510      	bpl.n	802044a <_scanf_float+0x31e>
 8020428:	455e      	cmp	r6, fp
 802042a:	f67f aebf 	bls.w	80201ac <_scanf_float+0x80>
 802042e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020436:	463a      	mov	r2, r7
 8020438:	4640      	mov	r0, r8
 802043a:	4798      	blx	r3
 802043c:	6923      	ldr	r3, [r4, #16]
 802043e:	3b01      	subs	r3, #1
 8020440:	6123      	str	r3, [r4, #16]
 8020442:	e7f1      	b.n	8020428 <_scanf_float+0x2fc>
 8020444:	46aa      	mov	sl, r5
 8020446:	9602      	str	r6, [sp, #8]
 8020448:	e7df      	b.n	802040a <_scanf_float+0x2de>
 802044a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802044e:	6923      	ldr	r3, [r4, #16]
 8020450:	2965      	cmp	r1, #101	; 0x65
 8020452:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8020456:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 802045a:	6123      	str	r3, [r4, #16]
 802045c:	d00c      	beq.n	8020478 <_scanf_float+0x34c>
 802045e:	2945      	cmp	r1, #69	; 0x45
 8020460:	d00a      	beq.n	8020478 <_scanf_float+0x34c>
 8020462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020466:	463a      	mov	r2, r7
 8020468:	4640      	mov	r0, r8
 802046a:	4798      	blx	r3
 802046c:	6923      	ldr	r3, [r4, #16]
 802046e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8020472:	3b01      	subs	r3, #1
 8020474:	1eb5      	subs	r5, r6, #2
 8020476:	6123      	str	r3, [r4, #16]
 8020478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802047c:	463a      	mov	r2, r7
 802047e:	4640      	mov	r0, r8
 8020480:	4798      	blx	r3
 8020482:	462e      	mov	r6, r5
 8020484:	6825      	ldr	r5, [r4, #0]
 8020486:	f015 0510 	ands.w	r5, r5, #16
 802048a:	d14d      	bne.n	8020528 <_scanf_float+0x3fc>
 802048c:	7035      	strb	r5, [r6, #0]
 802048e:	6823      	ldr	r3, [r4, #0]
 8020490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8020494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020498:	d11a      	bne.n	80204d0 <_scanf_float+0x3a4>
 802049a:	9b01      	ldr	r3, [sp, #4]
 802049c:	454b      	cmp	r3, r9
 802049e:	eba3 0209 	sub.w	r2, r3, r9
 80204a2:	d122      	bne.n	80204ea <_scanf_float+0x3be>
 80204a4:	2200      	movs	r2, #0
 80204a6:	4659      	mov	r1, fp
 80204a8:	4640      	mov	r0, r8
 80204aa:	f002 fdd7 	bl	802305c <_strtod_r>
 80204ae:	9b03      	ldr	r3, [sp, #12]
 80204b0:	6821      	ldr	r1, [r4, #0]
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	f011 0f02 	tst.w	r1, #2
 80204b8:	f103 0204 	add.w	r2, r3, #4
 80204bc:	d020      	beq.n	8020500 <_scanf_float+0x3d4>
 80204be:	9903      	ldr	r1, [sp, #12]
 80204c0:	600a      	str	r2, [r1, #0]
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	ed83 0b00 	vstr	d0, [r3]
 80204c8:	68e3      	ldr	r3, [r4, #12]
 80204ca:	3301      	adds	r3, #1
 80204cc:	60e3      	str	r3, [r4, #12]
 80204ce:	e66e      	b.n	80201ae <_scanf_float+0x82>
 80204d0:	9b04      	ldr	r3, [sp, #16]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d0e6      	beq.n	80204a4 <_scanf_float+0x378>
 80204d6:	9905      	ldr	r1, [sp, #20]
 80204d8:	230a      	movs	r3, #10
 80204da:	462a      	mov	r2, r5
 80204dc:	3101      	adds	r1, #1
 80204de:	4640      	mov	r0, r8
 80204e0:	f002 fe44 	bl	802316c <_strtol_r>
 80204e4:	9b04      	ldr	r3, [sp, #16]
 80204e6:	9e05      	ldr	r6, [sp, #20]
 80204e8:	1ac2      	subs	r2, r0, r3
 80204ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80204ee:	429e      	cmp	r6, r3
 80204f0:	bf28      	it	cs
 80204f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80204f6:	490d      	ldr	r1, [pc, #52]	; (802052c <_scanf_float+0x400>)
 80204f8:	4630      	mov	r0, r6
 80204fa:	f000 fa87 	bl	8020a0c <siprintf>
 80204fe:	e7d1      	b.n	80204a4 <_scanf_float+0x378>
 8020500:	f011 0f04 	tst.w	r1, #4
 8020504:	9903      	ldr	r1, [sp, #12]
 8020506:	600a      	str	r2, [r1, #0]
 8020508:	d1db      	bne.n	80204c2 <_scanf_float+0x396>
 802050a:	eeb4 0b40 	vcmp.f64	d0, d0
 802050e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020512:	681e      	ldr	r6, [r3, #0]
 8020514:	d705      	bvc.n	8020522 <_scanf_float+0x3f6>
 8020516:	4806      	ldr	r0, [pc, #24]	; (8020530 <_scanf_float+0x404>)
 8020518:	f000 fcb0 	bl	8020e7c <nanf>
 802051c:	ed86 0a00 	vstr	s0, [r6]
 8020520:	e7d2      	b.n	80204c8 <_scanf_float+0x39c>
 8020522:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020526:	e7f9      	b.n	802051c <_scanf_float+0x3f0>
 8020528:	2500      	movs	r5, #0
 802052a:	e640      	b.n	80201ae <_scanf_float+0x82>
 802052c:	08025a98 	.word	0x08025a98
 8020530:	08025ad8 	.word	0x08025ad8

08020534 <std>:
 8020534:	2300      	movs	r3, #0
 8020536:	b510      	push	{r4, lr}
 8020538:	4604      	mov	r4, r0
 802053a:	e9c0 3300 	strd	r3, r3, [r0]
 802053e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020542:	6083      	str	r3, [r0, #8]
 8020544:	8181      	strh	r1, [r0, #12]
 8020546:	6643      	str	r3, [r0, #100]	; 0x64
 8020548:	81c2      	strh	r2, [r0, #14]
 802054a:	6183      	str	r3, [r0, #24]
 802054c:	4619      	mov	r1, r3
 802054e:	2208      	movs	r2, #8
 8020550:	305c      	adds	r0, #92	; 0x5c
 8020552:	f000 fbb7 	bl	8020cc4 <memset>
 8020556:	4b0d      	ldr	r3, [pc, #52]	; (802058c <std+0x58>)
 8020558:	6263      	str	r3, [r4, #36]	; 0x24
 802055a:	4b0d      	ldr	r3, [pc, #52]	; (8020590 <std+0x5c>)
 802055c:	62a3      	str	r3, [r4, #40]	; 0x28
 802055e:	4b0d      	ldr	r3, [pc, #52]	; (8020594 <std+0x60>)
 8020560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020562:	4b0d      	ldr	r3, [pc, #52]	; (8020598 <std+0x64>)
 8020564:	6323      	str	r3, [r4, #48]	; 0x30
 8020566:	4b0d      	ldr	r3, [pc, #52]	; (802059c <std+0x68>)
 8020568:	6224      	str	r4, [r4, #32]
 802056a:	429c      	cmp	r4, r3
 802056c:	d006      	beq.n	802057c <std+0x48>
 802056e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8020572:	4294      	cmp	r4, r2
 8020574:	d002      	beq.n	802057c <std+0x48>
 8020576:	33d0      	adds	r3, #208	; 0xd0
 8020578:	429c      	cmp	r4, r3
 802057a:	d105      	bne.n	8020588 <std+0x54>
 802057c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020584:	f000 bc60 	b.w	8020e48 <__retarget_lock_init_recursive>
 8020588:	bd10      	pop	{r4, pc}
 802058a:	bf00      	nop
 802058c:	08020a4d 	.word	0x08020a4d
 8020590:	08020a6f 	.word	0x08020a6f
 8020594:	08020aa7 	.word	0x08020aa7
 8020598:	08020acb 	.word	0x08020acb
 802059c:	20016d34 	.word	0x20016d34

080205a0 <stdio_exit_handler>:
 80205a0:	4a02      	ldr	r2, [pc, #8]	; (80205ac <stdio_exit_handler+0xc>)
 80205a2:	4903      	ldr	r1, [pc, #12]	; (80205b0 <stdio_exit_handler+0x10>)
 80205a4:	4803      	ldr	r0, [pc, #12]	; (80205b4 <stdio_exit_handler+0x14>)
 80205a6:	f000 b869 	b.w	802067c <_fwalk_sglue>
 80205aa:	bf00      	nop
 80205ac:	20000720 	.word	0x20000720
 80205b0:	080237b5 	.word	0x080237b5
 80205b4:	2000072c 	.word	0x2000072c

080205b8 <cleanup_stdio>:
 80205b8:	6841      	ldr	r1, [r0, #4]
 80205ba:	4b0c      	ldr	r3, [pc, #48]	; (80205ec <cleanup_stdio+0x34>)
 80205bc:	4299      	cmp	r1, r3
 80205be:	b510      	push	{r4, lr}
 80205c0:	4604      	mov	r4, r0
 80205c2:	d001      	beq.n	80205c8 <cleanup_stdio+0x10>
 80205c4:	f003 f8f6 	bl	80237b4 <_fflush_r>
 80205c8:	68a1      	ldr	r1, [r4, #8]
 80205ca:	4b09      	ldr	r3, [pc, #36]	; (80205f0 <cleanup_stdio+0x38>)
 80205cc:	4299      	cmp	r1, r3
 80205ce:	d002      	beq.n	80205d6 <cleanup_stdio+0x1e>
 80205d0:	4620      	mov	r0, r4
 80205d2:	f003 f8ef 	bl	80237b4 <_fflush_r>
 80205d6:	68e1      	ldr	r1, [r4, #12]
 80205d8:	4b06      	ldr	r3, [pc, #24]	; (80205f4 <cleanup_stdio+0x3c>)
 80205da:	4299      	cmp	r1, r3
 80205dc:	d004      	beq.n	80205e8 <cleanup_stdio+0x30>
 80205de:	4620      	mov	r0, r4
 80205e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205e4:	f003 b8e6 	b.w	80237b4 <_fflush_r>
 80205e8:	bd10      	pop	{r4, pc}
 80205ea:	bf00      	nop
 80205ec:	20016d34 	.word	0x20016d34
 80205f0:	20016d9c 	.word	0x20016d9c
 80205f4:	20016e04 	.word	0x20016e04

080205f8 <global_stdio_init.part.0>:
 80205f8:	b510      	push	{r4, lr}
 80205fa:	4b0b      	ldr	r3, [pc, #44]	; (8020628 <global_stdio_init.part.0+0x30>)
 80205fc:	4c0b      	ldr	r4, [pc, #44]	; (802062c <global_stdio_init.part.0+0x34>)
 80205fe:	4a0c      	ldr	r2, [pc, #48]	; (8020630 <global_stdio_init.part.0+0x38>)
 8020600:	601a      	str	r2, [r3, #0]
 8020602:	4620      	mov	r0, r4
 8020604:	2200      	movs	r2, #0
 8020606:	2104      	movs	r1, #4
 8020608:	f7ff ff94 	bl	8020534 <std>
 802060c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020610:	2201      	movs	r2, #1
 8020612:	2109      	movs	r1, #9
 8020614:	f7ff ff8e 	bl	8020534 <std>
 8020618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802061c:	2202      	movs	r2, #2
 802061e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020622:	2112      	movs	r1, #18
 8020624:	f7ff bf86 	b.w	8020534 <std>
 8020628:	20016e6c 	.word	0x20016e6c
 802062c:	20016d34 	.word	0x20016d34
 8020630:	080205a1 	.word	0x080205a1

08020634 <__sfp_lock_acquire>:
 8020634:	4801      	ldr	r0, [pc, #4]	; (802063c <__sfp_lock_acquire+0x8>)
 8020636:	f000 bc08 	b.w	8020e4a <__retarget_lock_acquire_recursive>
 802063a:	bf00      	nop
 802063c:	20016e76 	.word	0x20016e76

08020640 <__sfp_lock_release>:
 8020640:	4801      	ldr	r0, [pc, #4]	; (8020648 <__sfp_lock_release+0x8>)
 8020642:	f000 bc03 	b.w	8020e4c <__retarget_lock_release_recursive>
 8020646:	bf00      	nop
 8020648:	20016e76 	.word	0x20016e76

0802064c <__sinit>:
 802064c:	b510      	push	{r4, lr}
 802064e:	4604      	mov	r4, r0
 8020650:	f7ff fff0 	bl	8020634 <__sfp_lock_acquire>
 8020654:	6a23      	ldr	r3, [r4, #32]
 8020656:	b11b      	cbz	r3, 8020660 <__sinit+0x14>
 8020658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802065c:	f7ff bff0 	b.w	8020640 <__sfp_lock_release>
 8020660:	4b04      	ldr	r3, [pc, #16]	; (8020674 <__sinit+0x28>)
 8020662:	6223      	str	r3, [r4, #32]
 8020664:	4b04      	ldr	r3, [pc, #16]	; (8020678 <__sinit+0x2c>)
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	2b00      	cmp	r3, #0
 802066a:	d1f5      	bne.n	8020658 <__sinit+0xc>
 802066c:	f7ff ffc4 	bl	80205f8 <global_stdio_init.part.0>
 8020670:	e7f2      	b.n	8020658 <__sinit+0xc>
 8020672:	bf00      	nop
 8020674:	080205b9 	.word	0x080205b9
 8020678:	20016e6c 	.word	0x20016e6c

0802067c <_fwalk_sglue>:
 802067c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020680:	4607      	mov	r7, r0
 8020682:	4688      	mov	r8, r1
 8020684:	4614      	mov	r4, r2
 8020686:	2600      	movs	r6, #0
 8020688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802068c:	f1b9 0901 	subs.w	r9, r9, #1
 8020690:	d505      	bpl.n	802069e <_fwalk_sglue+0x22>
 8020692:	6824      	ldr	r4, [r4, #0]
 8020694:	2c00      	cmp	r4, #0
 8020696:	d1f7      	bne.n	8020688 <_fwalk_sglue+0xc>
 8020698:	4630      	mov	r0, r6
 802069a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802069e:	89ab      	ldrh	r3, [r5, #12]
 80206a0:	2b01      	cmp	r3, #1
 80206a2:	d907      	bls.n	80206b4 <_fwalk_sglue+0x38>
 80206a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80206a8:	3301      	adds	r3, #1
 80206aa:	d003      	beq.n	80206b4 <_fwalk_sglue+0x38>
 80206ac:	4629      	mov	r1, r5
 80206ae:	4638      	mov	r0, r7
 80206b0:	47c0      	blx	r8
 80206b2:	4306      	orrs	r6, r0
 80206b4:	3568      	adds	r5, #104	; 0x68
 80206b6:	e7e9      	b.n	802068c <_fwalk_sglue+0x10>

080206b8 <_fwrite_r>:
 80206b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206bc:	9c08      	ldr	r4, [sp, #32]
 80206be:	468a      	mov	sl, r1
 80206c0:	4690      	mov	r8, r2
 80206c2:	fb02 f903 	mul.w	r9, r2, r3
 80206c6:	4606      	mov	r6, r0
 80206c8:	b118      	cbz	r0, 80206d2 <_fwrite_r+0x1a>
 80206ca:	6a03      	ldr	r3, [r0, #32]
 80206cc:	b90b      	cbnz	r3, 80206d2 <_fwrite_r+0x1a>
 80206ce:	f7ff ffbd 	bl	802064c <__sinit>
 80206d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80206d4:	07dd      	lsls	r5, r3, #31
 80206d6:	d405      	bmi.n	80206e4 <_fwrite_r+0x2c>
 80206d8:	89a3      	ldrh	r3, [r4, #12]
 80206da:	0598      	lsls	r0, r3, #22
 80206dc:	d402      	bmi.n	80206e4 <_fwrite_r+0x2c>
 80206de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80206e0:	f000 fbb3 	bl	8020e4a <__retarget_lock_acquire_recursive>
 80206e4:	89a3      	ldrh	r3, [r4, #12]
 80206e6:	0719      	lsls	r1, r3, #28
 80206e8:	d516      	bpl.n	8020718 <_fwrite_r+0x60>
 80206ea:	6923      	ldr	r3, [r4, #16]
 80206ec:	b1a3      	cbz	r3, 8020718 <_fwrite_r+0x60>
 80206ee:	2500      	movs	r5, #0
 80206f0:	454d      	cmp	r5, r9
 80206f2:	d01f      	beq.n	8020734 <_fwrite_r+0x7c>
 80206f4:	68a7      	ldr	r7, [r4, #8]
 80206f6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80206fa:	3f01      	subs	r7, #1
 80206fc:	2f00      	cmp	r7, #0
 80206fe:	60a7      	str	r7, [r4, #8]
 8020700:	da04      	bge.n	802070c <_fwrite_r+0x54>
 8020702:	69a3      	ldr	r3, [r4, #24]
 8020704:	429f      	cmp	r7, r3
 8020706:	db0f      	blt.n	8020728 <_fwrite_r+0x70>
 8020708:	290a      	cmp	r1, #10
 802070a:	d00d      	beq.n	8020728 <_fwrite_r+0x70>
 802070c:	6823      	ldr	r3, [r4, #0]
 802070e:	1c5a      	adds	r2, r3, #1
 8020710:	6022      	str	r2, [r4, #0]
 8020712:	7019      	strb	r1, [r3, #0]
 8020714:	3501      	adds	r5, #1
 8020716:	e7eb      	b.n	80206f0 <_fwrite_r+0x38>
 8020718:	4621      	mov	r1, r4
 802071a:	4630      	mov	r0, r6
 802071c:	f000 fa50 	bl	8020bc0 <__swsetup_r>
 8020720:	2800      	cmp	r0, #0
 8020722:	d0e4      	beq.n	80206ee <_fwrite_r+0x36>
 8020724:	2500      	movs	r5, #0
 8020726:	e005      	b.n	8020734 <_fwrite_r+0x7c>
 8020728:	4622      	mov	r2, r4
 802072a:	4630      	mov	r0, r6
 802072c:	f000 fa0a 	bl	8020b44 <__swbuf_r>
 8020730:	3001      	adds	r0, #1
 8020732:	d1ef      	bne.n	8020714 <_fwrite_r+0x5c>
 8020734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020736:	07da      	lsls	r2, r3, #31
 8020738:	d405      	bmi.n	8020746 <_fwrite_r+0x8e>
 802073a:	89a3      	ldrh	r3, [r4, #12]
 802073c:	059b      	lsls	r3, r3, #22
 802073e:	d402      	bmi.n	8020746 <_fwrite_r+0x8e>
 8020740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020742:	f000 fb83 	bl	8020e4c <__retarget_lock_release_recursive>
 8020746:	fbb5 f0f8 	udiv	r0, r5, r8
 802074a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020750 <fwrite>:
 8020750:	b507      	push	{r0, r1, r2, lr}
 8020752:	9300      	str	r3, [sp, #0]
 8020754:	4613      	mov	r3, r2
 8020756:	460a      	mov	r2, r1
 8020758:	4601      	mov	r1, r0
 802075a:	4803      	ldr	r0, [pc, #12]	; (8020768 <fwrite+0x18>)
 802075c:	6800      	ldr	r0, [r0, #0]
 802075e:	f7ff ffab 	bl	80206b8 <_fwrite_r>
 8020762:	b003      	add	sp, #12
 8020764:	f85d fb04 	ldr.w	pc, [sp], #4
 8020768:	20000778 	.word	0x20000778

0802076c <iprintf>:
 802076c:	b40f      	push	{r0, r1, r2, r3}
 802076e:	b507      	push	{r0, r1, r2, lr}
 8020770:	4906      	ldr	r1, [pc, #24]	; (802078c <iprintf+0x20>)
 8020772:	ab04      	add	r3, sp, #16
 8020774:	6808      	ldr	r0, [r1, #0]
 8020776:	f853 2b04 	ldr.w	r2, [r3], #4
 802077a:	6881      	ldr	r1, [r0, #8]
 802077c:	9301      	str	r3, [sp, #4]
 802077e:	f002 fe79 	bl	8023474 <_vfiprintf_r>
 8020782:	b003      	add	sp, #12
 8020784:	f85d eb04 	ldr.w	lr, [sp], #4
 8020788:	b004      	add	sp, #16
 802078a:	4770      	bx	lr
 802078c:	20000778 	.word	0x20000778

08020790 <_puts_r>:
 8020790:	6a03      	ldr	r3, [r0, #32]
 8020792:	b570      	push	{r4, r5, r6, lr}
 8020794:	6884      	ldr	r4, [r0, #8]
 8020796:	4605      	mov	r5, r0
 8020798:	460e      	mov	r6, r1
 802079a:	b90b      	cbnz	r3, 80207a0 <_puts_r+0x10>
 802079c:	f7ff ff56 	bl	802064c <__sinit>
 80207a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80207a2:	07db      	lsls	r3, r3, #31
 80207a4:	d405      	bmi.n	80207b2 <_puts_r+0x22>
 80207a6:	89a3      	ldrh	r3, [r4, #12]
 80207a8:	0598      	lsls	r0, r3, #22
 80207aa:	d402      	bmi.n	80207b2 <_puts_r+0x22>
 80207ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80207ae:	f000 fb4c 	bl	8020e4a <__retarget_lock_acquire_recursive>
 80207b2:	89a3      	ldrh	r3, [r4, #12]
 80207b4:	0719      	lsls	r1, r3, #28
 80207b6:	d513      	bpl.n	80207e0 <_puts_r+0x50>
 80207b8:	6923      	ldr	r3, [r4, #16]
 80207ba:	b18b      	cbz	r3, 80207e0 <_puts_r+0x50>
 80207bc:	3e01      	subs	r6, #1
 80207be:	68a3      	ldr	r3, [r4, #8]
 80207c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80207c4:	3b01      	subs	r3, #1
 80207c6:	60a3      	str	r3, [r4, #8]
 80207c8:	b9e9      	cbnz	r1, 8020806 <_puts_r+0x76>
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	da2e      	bge.n	802082c <_puts_r+0x9c>
 80207ce:	4622      	mov	r2, r4
 80207d0:	210a      	movs	r1, #10
 80207d2:	4628      	mov	r0, r5
 80207d4:	f000 f9b6 	bl	8020b44 <__swbuf_r>
 80207d8:	3001      	adds	r0, #1
 80207da:	d007      	beq.n	80207ec <_puts_r+0x5c>
 80207dc:	250a      	movs	r5, #10
 80207de:	e007      	b.n	80207f0 <_puts_r+0x60>
 80207e0:	4621      	mov	r1, r4
 80207e2:	4628      	mov	r0, r5
 80207e4:	f000 f9ec 	bl	8020bc0 <__swsetup_r>
 80207e8:	2800      	cmp	r0, #0
 80207ea:	d0e7      	beq.n	80207bc <_puts_r+0x2c>
 80207ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80207f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80207f2:	07da      	lsls	r2, r3, #31
 80207f4:	d405      	bmi.n	8020802 <_puts_r+0x72>
 80207f6:	89a3      	ldrh	r3, [r4, #12]
 80207f8:	059b      	lsls	r3, r3, #22
 80207fa:	d402      	bmi.n	8020802 <_puts_r+0x72>
 80207fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80207fe:	f000 fb25 	bl	8020e4c <__retarget_lock_release_recursive>
 8020802:	4628      	mov	r0, r5
 8020804:	bd70      	pop	{r4, r5, r6, pc}
 8020806:	2b00      	cmp	r3, #0
 8020808:	da04      	bge.n	8020814 <_puts_r+0x84>
 802080a:	69a2      	ldr	r2, [r4, #24]
 802080c:	429a      	cmp	r2, r3
 802080e:	dc06      	bgt.n	802081e <_puts_r+0x8e>
 8020810:	290a      	cmp	r1, #10
 8020812:	d004      	beq.n	802081e <_puts_r+0x8e>
 8020814:	6823      	ldr	r3, [r4, #0]
 8020816:	1c5a      	adds	r2, r3, #1
 8020818:	6022      	str	r2, [r4, #0]
 802081a:	7019      	strb	r1, [r3, #0]
 802081c:	e7cf      	b.n	80207be <_puts_r+0x2e>
 802081e:	4622      	mov	r2, r4
 8020820:	4628      	mov	r0, r5
 8020822:	f000 f98f 	bl	8020b44 <__swbuf_r>
 8020826:	3001      	adds	r0, #1
 8020828:	d1c9      	bne.n	80207be <_puts_r+0x2e>
 802082a:	e7df      	b.n	80207ec <_puts_r+0x5c>
 802082c:	6823      	ldr	r3, [r4, #0]
 802082e:	250a      	movs	r5, #10
 8020830:	1c5a      	adds	r2, r3, #1
 8020832:	6022      	str	r2, [r4, #0]
 8020834:	701d      	strb	r5, [r3, #0]
 8020836:	e7db      	b.n	80207f0 <_puts_r+0x60>

08020838 <puts>:
 8020838:	4b02      	ldr	r3, [pc, #8]	; (8020844 <puts+0xc>)
 802083a:	4601      	mov	r1, r0
 802083c:	6818      	ldr	r0, [r3, #0]
 802083e:	f7ff bfa7 	b.w	8020790 <_puts_r>
 8020842:	bf00      	nop
 8020844:	20000778 	.word	0x20000778

08020848 <setvbuf>:
 8020848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802084c:	461d      	mov	r5, r3
 802084e:	4b54      	ldr	r3, [pc, #336]	; (80209a0 <setvbuf+0x158>)
 8020850:	681f      	ldr	r7, [r3, #0]
 8020852:	4604      	mov	r4, r0
 8020854:	460e      	mov	r6, r1
 8020856:	4690      	mov	r8, r2
 8020858:	b127      	cbz	r7, 8020864 <setvbuf+0x1c>
 802085a:	6a3b      	ldr	r3, [r7, #32]
 802085c:	b913      	cbnz	r3, 8020864 <setvbuf+0x1c>
 802085e:	4638      	mov	r0, r7
 8020860:	f7ff fef4 	bl	802064c <__sinit>
 8020864:	f1b8 0f02 	cmp.w	r8, #2
 8020868:	d006      	beq.n	8020878 <setvbuf+0x30>
 802086a:	f1b8 0f01 	cmp.w	r8, #1
 802086e:	f200 8094 	bhi.w	802099a <setvbuf+0x152>
 8020872:	2d00      	cmp	r5, #0
 8020874:	f2c0 8091 	blt.w	802099a <setvbuf+0x152>
 8020878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802087a:	07da      	lsls	r2, r3, #31
 802087c:	d405      	bmi.n	802088a <setvbuf+0x42>
 802087e:	89a3      	ldrh	r3, [r4, #12]
 8020880:	059b      	lsls	r3, r3, #22
 8020882:	d402      	bmi.n	802088a <setvbuf+0x42>
 8020884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020886:	f000 fae0 	bl	8020e4a <__retarget_lock_acquire_recursive>
 802088a:	4621      	mov	r1, r4
 802088c:	4638      	mov	r0, r7
 802088e:	f002 ff91 	bl	80237b4 <_fflush_r>
 8020892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020894:	b141      	cbz	r1, 80208a8 <setvbuf+0x60>
 8020896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802089a:	4299      	cmp	r1, r3
 802089c:	d002      	beq.n	80208a4 <setvbuf+0x5c>
 802089e:	4638      	mov	r0, r7
 80208a0:	f001 f912 	bl	8021ac8 <_free_r>
 80208a4:	2300      	movs	r3, #0
 80208a6:	6363      	str	r3, [r4, #52]	; 0x34
 80208a8:	2300      	movs	r3, #0
 80208aa:	61a3      	str	r3, [r4, #24]
 80208ac:	6063      	str	r3, [r4, #4]
 80208ae:	89a3      	ldrh	r3, [r4, #12]
 80208b0:	0618      	lsls	r0, r3, #24
 80208b2:	d503      	bpl.n	80208bc <setvbuf+0x74>
 80208b4:	6921      	ldr	r1, [r4, #16]
 80208b6:	4638      	mov	r0, r7
 80208b8:	f001 f906 	bl	8021ac8 <_free_r>
 80208bc:	89a3      	ldrh	r3, [r4, #12]
 80208be:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80208c2:	f023 0303 	bic.w	r3, r3, #3
 80208c6:	f1b8 0f02 	cmp.w	r8, #2
 80208ca:	81a3      	strh	r3, [r4, #12]
 80208cc:	d05f      	beq.n	802098e <setvbuf+0x146>
 80208ce:	ab01      	add	r3, sp, #4
 80208d0:	466a      	mov	r2, sp
 80208d2:	4621      	mov	r1, r4
 80208d4:	4638      	mov	r0, r7
 80208d6:	f002 ffa7 	bl	8023828 <__swhatbuf_r>
 80208da:	89a3      	ldrh	r3, [r4, #12]
 80208dc:	4318      	orrs	r0, r3
 80208de:	81a0      	strh	r0, [r4, #12]
 80208e0:	bb2d      	cbnz	r5, 802092e <setvbuf+0xe6>
 80208e2:	9d00      	ldr	r5, [sp, #0]
 80208e4:	4628      	mov	r0, r5
 80208e6:	f7fe fe09 	bl	801f4fc <malloc>
 80208ea:	4606      	mov	r6, r0
 80208ec:	2800      	cmp	r0, #0
 80208ee:	d150      	bne.n	8020992 <setvbuf+0x14a>
 80208f0:	f8dd 9000 	ldr.w	r9, [sp]
 80208f4:	45a9      	cmp	r9, r5
 80208f6:	d13e      	bne.n	8020976 <setvbuf+0x12e>
 80208f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80208fc:	2200      	movs	r2, #0
 80208fe:	60a2      	str	r2, [r4, #8]
 8020900:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8020904:	6022      	str	r2, [r4, #0]
 8020906:	6122      	str	r2, [r4, #16]
 8020908:	2201      	movs	r2, #1
 802090a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802090e:	6162      	str	r2, [r4, #20]
 8020910:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020912:	f043 0302 	orr.w	r3, r3, #2
 8020916:	07d1      	lsls	r1, r2, #31
 8020918:	81a3      	strh	r3, [r4, #12]
 802091a:	d404      	bmi.n	8020926 <setvbuf+0xde>
 802091c:	059b      	lsls	r3, r3, #22
 802091e:	d402      	bmi.n	8020926 <setvbuf+0xde>
 8020920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020922:	f000 fa93 	bl	8020e4c <__retarget_lock_release_recursive>
 8020926:	4628      	mov	r0, r5
 8020928:	b003      	add	sp, #12
 802092a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802092e:	2e00      	cmp	r6, #0
 8020930:	d0d8      	beq.n	80208e4 <setvbuf+0x9c>
 8020932:	6a3b      	ldr	r3, [r7, #32]
 8020934:	b913      	cbnz	r3, 802093c <setvbuf+0xf4>
 8020936:	4638      	mov	r0, r7
 8020938:	f7ff fe88 	bl	802064c <__sinit>
 802093c:	f1b8 0f01 	cmp.w	r8, #1
 8020940:	bf08      	it	eq
 8020942:	89a3      	ldrheq	r3, [r4, #12]
 8020944:	6026      	str	r6, [r4, #0]
 8020946:	bf04      	itt	eq
 8020948:	f043 0301 	orreq.w	r3, r3, #1
 802094c:	81a3      	strheq	r3, [r4, #12]
 802094e:	89a3      	ldrh	r3, [r4, #12]
 8020950:	f013 0208 	ands.w	r2, r3, #8
 8020954:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020958:	d01d      	beq.n	8020996 <setvbuf+0x14e>
 802095a:	07da      	lsls	r2, r3, #31
 802095c:	bf41      	itttt	mi
 802095e:	2200      	movmi	r2, #0
 8020960:	426d      	negmi	r5, r5
 8020962:	60a2      	strmi	r2, [r4, #8]
 8020964:	61a5      	strmi	r5, [r4, #24]
 8020966:	bf58      	it	pl
 8020968:	60a5      	strpl	r5, [r4, #8]
 802096a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802096c:	f015 0501 	ands.w	r5, r5, #1
 8020970:	d0d4      	beq.n	802091c <setvbuf+0xd4>
 8020972:	2500      	movs	r5, #0
 8020974:	e7d7      	b.n	8020926 <setvbuf+0xde>
 8020976:	4648      	mov	r0, r9
 8020978:	f7fe fdc0 	bl	801f4fc <malloc>
 802097c:	4606      	mov	r6, r0
 802097e:	2800      	cmp	r0, #0
 8020980:	d0ba      	beq.n	80208f8 <setvbuf+0xb0>
 8020982:	89a3      	ldrh	r3, [r4, #12]
 8020984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020988:	81a3      	strh	r3, [r4, #12]
 802098a:	464d      	mov	r5, r9
 802098c:	e7d1      	b.n	8020932 <setvbuf+0xea>
 802098e:	2500      	movs	r5, #0
 8020990:	e7b4      	b.n	80208fc <setvbuf+0xb4>
 8020992:	46a9      	mov	r9, r5
 8020994:	e7f5      	b.n	8020982 <setvbuf+0x13a>
 8020996:	60a2      	str	r2, [r4, #8]
 8020998:	e7e7      	b.n	802096a <setvbuf+0x122>
 802099a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802099e:	e7c2      	b.n	8020926 <setvbuf+0xde>
 80209a0:	20000778 	.word	0x20000778

080209a4 <sniprintf>:
 80209a4:	b40c      	push	{r2, r3}
 80209a6:	b530      	push	{r4, r5, lr}
 80209a8:	4b17      	ldr	r3, [pc, #92]	; (8020a08 <sniprintf+0x64>)
 80209aa:	1e0c      	subs	r4, r1, #0
 80209ac:	681d      	ldr	r5, [r3, #0]
 80209ae:	b09d      	sub	sp, #116	; 0x74
 80209b0:	da08      	bge.n	80209c4 <sniprintf+0x20>
 80209b2:	238b      	movs	r3, #139	; 0x8b
 80209b4:	602b      	str	r3, [r5, #0]
 80209b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80209ba:	b01d      	add	sp, #116	; 0x74
 80209bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80209c0:	b002      	add	sp, #8
 80209c2:	4770      	bx	lr
 80209c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80209c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80209cc:	bf14      	ite	ne
 80209ce:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80209d2:	4623      	moveq	r3, r4
 80209d4:	9304      	str	r3, [sp, #16]
 80209d6:	9307      	str	r3, [sp, #28]
 80209d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80209dc:	9002      	str	r0, [sp, #8]
 80209de:	9006      	str	r0, [sp, #24]
 80209e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80209e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80209e6:	ab21      	add	r3, sp, #132	; 0x84
 80209e8:	a902      	add	r1, sp, #8
 80209ea:	4628      	mov	r0, r5
 80209ec:	9301      	str	r3, [sp, #4]
 80209ee:	f002 fc19 	bl	8023224 <_svfiprintf_r>
 80209f2:	1c43      	adds	r3, r0, #1
 80209f4:	bfbc      	itt	lt
 80209f6:	238b      	movlt	r3, #139	; 0x8b
 80209f8:	602b      	strlt	r3, [r5, #0]
 80209fa:	2c00      	cmp	r4, #0
 80209fc:	d0dd      	beq.n	80209ba <sniprintf+0x16>
 80209fe:	9b02      	ldr	r3, [sp, #8]
 8020a00:	2200      	movs	r2, #0
 8020a02:	701a      	strb	r2, [r3, #0]
 8020a04:	e7d9      	b.n	80209ba <sniprintf+0x16>
 8020a06:	bf00      	nop
 8020a08:	20000778 	.word	0x20000778

08020a0c <siprintf>:
 8020a0c:	b40e      	push	{r1, r2, r3}
 8020a0e:	b500      	push	{lr}
 8020a10:	b09c      	sub	sp, #112	; 0x70
 8020a12:	ab1d      	add	r3, sp, #116	; 0x74
 8020a14:	9002      	str	r0, [sp, #8]
 8020a16:	9006      	str	r0, [sp, #24]
 8020a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020a1c:	4809      	ldr	r0, [pc, #36]	; (8020a44 <siprintf+0x38>)
 8020a1e:	9107      	str	r1, [sp, #28]
 8020a20:	9104      	str	r1, [sp, #16]
 8020a22:	4909      	ldr	r1, [pc, #36]	; (8020a48 <siprintf+0x3c>)
 8020a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a28:	9105      	str	r1, [sp, #20]
 8020a2a:	6800      	ldr	r0, [r0, #0]
 8020a2c:	9301      	str	r3, [sp, #4]
 8020a2e:	a902      	add	r1, sp, #8
 8020a30:	f002 fbf8 	bl	8023224 <_svfiprintf_r>
 8020a34:	9b02      	ldr	r3, [sp, #8]
 8020a36:	2200      	movs	r2, #0
 8020a38:	701a      	strb	r2, [r3, #0]
 8020a3a:	b01c      	add	sp, #112	; 0x70
 8020a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020a40:	b003      	add	sp, #12
 8020a42:	4770      	bx	lr
 8020a44:	20000778 	.word	0x20000778
 8020a48:	ffff0208 	.word	0xffff0208

08020a4c <__sread>:
 8020a4c:	b510      	push	{r4, lr}
 8020a4e:	460c      	mov	r4, r1
 8020a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a54:	f000 f99a 	bl	8020d8c <_read_r>
 8020a58:	2800      	cmp	r0, #0
 8020a5a:	bfab      	itete	ge
 8020a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8020a60:	181b      	addge	r3, r3, r0
 8020a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020a66:	bfac      	ite	ge
 8020a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8020a6a:	81a3      	strhlt	r3, [r4, #12]
 8020a6c:	bd10      	pop	{r4, pc}

08020a6e <__swrite>:
 8020a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a72:	461f      	mov	r7, r3
 8020a74:	898b      	ldrh	r3, [r1, #12]
 8020a76:	05db      	lsls	r3, r3, #23
 8020a78:	4605      	mov	r5, r0
 8020a7a:	460c      	mov	r4, r1
 8020a7c:	4616      	mov	r6, r2
 8020a7e:	d505      	bpl.n	8020a8c <__swrite+0x1e>
 8020a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a84:	2302      	movs	r3, #2
 8020a86:	2200      	movs	r2, #0
 8020a88:	f000 f96e 	bl	8020d68 <_lseek_r>
 8020a8c:	89a3      	ldrh	r3, [r4, #12]
 8020a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020a96:	81a3      	strh	r3, [r4, #12]
 8020a98:	4632      	mov	r2, r6
 8020a9a:	463b      	mov	r3, r7
 8020a9c:	4628      	mov	r0, r5
 8020a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020aa2:	f000 b995 	b.w	8020dd0 <_write_r>

08020aa6 <__sseek>:
 8020aa6:	b510      	push	{r4, lr}
 8020aa8:	460c      	mov	r4, r1
 8020aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020aae:	f000 f95b 	bl	8020d68 <_lseek_r>
 8020ab2:	1c43      	adds	r3, r0, #1
 8020ab4:	89a3      	ldrh	r3, [r4, #12]
 8020ab6:	bf15      	itete	ne
 8020ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8020aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020ac2:	81a3      	strheq	r3, [r4, #12]
 8020ac4:	bf18      	it	ne
 8020ac6:	81a3      	strhne	r3, [r4, #12]
 8020ac8:	bd10      	pop	{r4, pc}

08020aca <__sclose>:
 8020aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ace:	f000 b93b 	b.w	8020d48 <_close_r>

08020ad2 <_vsniprintf_r>:
 8020ad2:	b530      	push	{r4, r5, lr}
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	2c00      	cmp	r4, #0
 8020ad8:	b09b      	sub	sp, #108	; 0x6c
 8020ada:	4605      	mov	r5, r0
 8020adc:	461a      	mov	r2, r3
 8020ade:	da05      	bge.n	8020aec <_vsniprintf_r+0x1a>
 8020ae0:	238b      	movs	r3, #139	; 0x8b
 8020ae2:	6003      	str	r3, [r0, #0]
 8020ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020ae8:	b01b      	add	sp, #108	; 0x6c
 8020aea:	bd30      	pop	{r4, r5, pc}
 8020aec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020af0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020af4:	bf14      	ite	ne
 8020af6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020afa:	4623      	moveq	r3, r4
 8020afc:	9302      	str	r3, [sp, #8]
 8020afe:	9305      	str	r3, [sp, #20]
 8020b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020b04:	9100      	str	r1, [sp, #0]
 8020b06:	9104      	str	r1, [sp, #16]
 8020b08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020b0c:	4669      	mov	r1, sp
 8020b0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020b10:	f002 fb88 	bl	8023224 <_svfiprintf_r>
 8020b14:	1c43      	adds	r3, r0, #1
 8020b16:	bfbc      	itt	lt
 8020b18:	238b      	movlt	r3, #139	; 0x8b
 8020b1a:	602b      	strlt	r3, [r5, #0]
 8020b1c:	2c00      	cmp	r4, #0
 8020b1e:	d0e3      	beq.n	8020ae8 <_vsniprintf_r+0x16>
 8020b20:	9b00      	ldr	r3, [sp, #0]
 8020b22:	2200      	movs	r2, #0
 8020b24:	701a      	strb	r2, [r3, #0]
 8020b26:	e7df      	b.n	8020ae8 <_vsniprintf_r+0x16>

08020b28 <vsniprintf>:
 8020b28:	b507      	push	{r0, r1, r2, lr}
 8020b2a:	9300      	str	r3, [sp, #0]
 8020b2c:	4613      	mov	r3, r2
 8020b2e:	460a      	mov	r2, r1
 8020b30:	4601      	mov	r1, r0
 8020b32:	4803      	ldr	r0, [pc, #12]	; (8020b40 <vsniprintf+0x18>)
 8020b34:	6800      	ldr	r0, [r0, #0]
 8020b36:	f7ff ffcc 	bl	8020ad2 <_vsniprintf_r>
 8020b3a:	b003      	add	sp, #12
 8020b3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020b40:	20000778 	.word	0x20000778

08020b44 <__swbuf_r>:
 8020b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b46:	460e      	mov	r6, r1
 8020b48:	4614      	mov	r4, r2
 8020b4a:	4605      	mov	r5, r0
 8020b4c:	b118      	cbz	r0, 8020b56 <__swbuf_r+0x12>
 8020b4e:	6a03      	ldr	r3, [r0, #32]
 8020b50:	b90b      	cbnz	r3, 8020b56 <__swbuf_r+0x12>
 8020b52:	f7ff fd7b 	bl	802064c <__sinit>
 8020b56:	69a3      	ldr	r3, [r4, #24]
 8020b58:	60a3      	str	r3, [r4, #8]
 8020b5a:	89a3      	ldrh	r3, [r4, #12]
 8020b5c:	071a      	lsls	r2, r3, #28
 8020b5e:	d525      	bpl.n	8020bac <__swbuf_r+0x68>
 8020b60:	6923      	ldr	r3, [r4, #16]
 8020b62:	b31b      	cbz	r3, 8020bac <__swbuf_r+0x68>
 8020b64:	6823      	ldr	r3, [r4, #0]
 8020b66:	6922      	ldr	r2, [r4, #16]
 8020b68:	1a98      	subs	r0, r3, r2
 8020b6a:	6963      	ldr	r3, [r4, #20]
 8020b6c:	b2f6      	uxtb	r6, r6
 8020b6e:	4283      	cmp	r3, r0
 8020b70:	4637      	mov	r7, r6
 8020b72:	dc04      	bgt.n	8020b7e <__swbuf_r+0x3a>
 8020b74:	4621      	mov	r1, r4
 8020b76:	4628      	mov	r0, r5
 8020b78:	f002 fe1c 	bl	80237b4 <_fflush_r>
 8020b7c:	b9e0      	cbnz	r0, 8020bb8 <__swbuf_r+0x74>
 8020b7e:	68a3      	ldr	r3, [r4, #8]
 8020b80:	3b01      	subs	r3, #1
 8020b82:	60a3      	str	r3, [r4, #8]
 8020b84:	6823      	ldr	r3, [r4, #0]
 8020b86:	1c5a      	adds	r2, r3, #1
 8020b88:	6022      	str	r2, [r4, #0]
 8020b8a:	701e      	strb	r6, [r3, #0]
 8020b8c:	6962      	ldr	r2, [r4, #20]
 8020b8e:	1c43      	adds	r3, r0, #1
 8020b90:	429a      	cmp	r2, r3
 8020b92:	d004      	beq.n	8020b9e <__swbuf_r+0x5a>
 8020b94:	89a3      	ldrh	r3, [r4, #12]
 8020b96:	07db      	lsls	r3, r3, #31
 8020b98:	d506      	bpl.n	8020ba8 <__swbuf_r+0x64>
 8020b9a:	2e0a      	cmp	r6, #10
 8020b9c:	d104      	bne.n	8020ba8 <__swbuf_r+0x64>
 8020b9e:	4621      	mov	r1, r4
 8020ba0:	4628      	mov	r0, r5
 8020ba2:	f002 fe07 	bl	80237b4 <_fflush_r>
 8020ba6:	b938      	cbnz	r0, 8020bb8 <__swbuf_r+0x74>
 8020ba8:	4638      	mov	r0, r7
 8020baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bac:	4621      	mov	r1, r4
 8020bae:	4628      	mov	r0, r5
 8020bb0:	f000 f806 	bl	8020bc0 <__swsetup_r>
 8020bb4:	2800      	cmp	r0, #0
 8020bb6:	d0d5      	beq.n	8020b64 <__swbuf_r+0x20>
 8020bb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020bbc:	e7f4      	b.n	8020ba8 <__swbuf_r+0x64>
	...

08020bc0 <__swsetup_r>:
 8020bc0:	b538      	push	{r3, r4, r5, lr}
 8020bc2:	4b2a      	ldr	r3, [pc, #168]	; (8020c6c <__swsetup_r+0xac>)
 8020bc4:	4605      	mov	r5, r0
 8020bc6:	6818      	ldr	r0, [r3, #0]
 8020bc8:	460c      	mov	r4, r1
 8020bca:	b118      	cbz	r0, 8020bd4 <__swsetup_r+0x14>
 8020bcc:	6a03      	ldr	r3, [r0, #32]
 8020bce:	b90b      	cbnz	r3, 8020bd4 <__swsetup_r+0x14>
 8020bd0:	f7ff fd3c 	bl	802064c <__sinit>
 8020bd4:	89a3      	ldrh	r3, [r4, #12]
 8020bd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020bda:	0718      	lsls	r0, r3, #28
 8020bdc:	d422      	bmi.n	8020c24 <__swsetup_r+0x64>
 8020bde:	06d9      	lsls	r1, r3, #27
 8020be0:	d407      	bmi.n	8020bf2 <__swsetup_r+0x32>
 8020be2:	2309      	movs	r3, #9
 8020be4:	602b      	str	r3, [r5, #0]
 8020be6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020bea:	81a3      	strh	r3, [r4, #12]
 8020bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020bf0:	e034      	b.n	8020c5c <__swsetup_r+0x9c>
 8020bf2:	0758      	lsls	r0, r3, #29
 8020bf4:	d512      	bpl.n	8020c1c <__swsetup_r+0x5c>
 8020bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020bf8:	b141      	cbz	r1, 8020c0c <__swsetup_r+0x4c>
 8020bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020bfe:	4299      	cmp	r1, r3
 8020c00:	d002      	beq.n	8020c08 <__swsetup_r+0x48>
 8020c02:	4628      	mov	r0, r5
 8020c04:	f000 ff60 	bl	8021ac8 <_free_r>
 8020c08:	2300      	movs	r3, #0
 8020c0a:	6363      	str	r3, [r4, #52]	; 0x34
 8020c0c:	89a3      	ldrh	r3, [r4, #12]
 8020c0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020c12:	81a3      	strh	r3, [r4, #12]
 8020c14:	2300      	movs	r3, #0
 8020c16:	6063      	str	r3, [r4, #4]
 8020c18:	6923      	ldr	r3, [r4, #16]
 8020c1a:	6023      	str	r3, [r4, #0]
 8020c1c:	89a3      	ldrh	r3, [r4, #12]
 8020c1e:	f043 0308 	orr.w	r3, r3, #8
 8020c22:	81a3      	strh	r3, [r4, #12]
 8020c24:	6923      	ldr	r3, [r4, #16]
 8020c26:	b94b      	cbnz	r3, 8020c3c <__swsetup_r+0x7c>
 8020c28:	89a3      	ldrh	r3, [r4, #12]
 8020c2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020c32:	d003      	beq.n	8020c3c <__swsetup_r+0x7c>
 8020c34:	4621      	mov	r1, r4
 8020c36:	4628      	mov	r0, r5
 8020c38:	f002 fe1c 	bl	8023874 <__smakebuf_r>
 8020c3c:	89a0      	ldrh	r0, [r4, #12]
 8020c3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020c42:	f010 0301 	ands.w	r3, r0, #1
 8020c46:	d00a      	beq.n	8020c5e <__swsetup_r+0x9e>
 8020c48:	2300      	movs	r3, #0
 8020c4a:	60a3      	str	r3, [r4, #8]
 8020c4c:	6963      	ldr	r3, [r4, #20]
 8020c4e:	425b      	negs	r3, r3
 8020c50:	61a3      	str	r3, [r4, #24]
 8020c52:	6923      	ldr	r3, [r4, #16]
 8020c54:	b943      	cbnz	r3, 8020c68 <__swsetup_r+0xa8>
 8020c56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020c5a:	d1c4      	bne.n	8020be6 <__swsetup_r+0x26>
 8020c5c:	bd38      	pop	{r3, r4, r5, pc}
 8020c5e:	0781      	lsls	r1, r0, #30
 8020c60:	bf58      	it	pl
 8020c62:	6963      	ldrpl	r3, [r4, #20]
 8020c64:	60a3      	str	r3, [r4, #8]
 8020c66:	e7f4      	b.n	8020c52 <__swsetup_r+0x92>
 8020c68:	2000      	movs	r0, #0
 8020c6a:	e7f7      	b.n	8020c5c <__swsetup_r+0x9c>
 8020c6c:	20000778 	.word	0x20000778

08020c70 <memcmp>:
 8020c70:	b510      	push	{r4, lr}
 8020c72:	3901      	subs	r1, #1
 8020c74:	4402      	add	r2, r0
 8020c76:	4290      	cmp	r0, r2
 8020c78:	d101      	bne.n	8020c7e <memcmp+0xe>
 8020c7a:	2000      	movs	r0, #0
 8020c7c:	e005      	b.n	8020c8a <memcmp+0x1a>
 8020c7e:	7803      	ldrb	r3, [r0, #0]
 8020c80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020c84:	42a3      	cmp	r3, r4
 8020c86:	d001      	beq.n	8020c8c <memcmp+0x1c>
 8020c88:	1b18      	subs	r0, r3, r4
 8020c8a:	bd10      	pop	{r4, pc}
 8020c8c:	3001      	adds	r0, #1
 8020c8e:	e7f2      	b.n	8020c76 <memcmp+0x6>

08020c90 <memmove>:
 8020c90:	4288      	cmp	r0, r1
 8020c92:	b510      	push	{r4, lr}
 8020c94:	eb01 0402 	add.w	r4, r1, r2
 8020c98:	d902      	bls.n	8020ca0 <memmove+0x10>
 8020c9a:	4284      	cmp	r4, r0
 8020c9c:	4623      	mov	r3, r4
 8020c9e:	d807      	bhi.n	8020cb0 <memmove+0x20>
 8020ca0:	1e43      	subs	r3, r0, #1
 8020ca2:	42a1      	cmp	r1, r4
 8020ca4:	d008      	beq.n	8020cb8 <memmove+0x28>
 8020ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020cae:	e7f8      	b.n	8020ca2 <memmove+0x12>
 8020cb0:	4402      	add	r2, r0
 8020cb2:	4601      	mov	r1, r0
 8020cb4:	428a      	cmp	r2, r1
 8020cb6:	d100      	bne.n	8020cba <memmove+0x2a>
 8020cb8:	bd10      	pop	{r4, pc}
 8020cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020cc2:	e7f7      	b.n	8020cb4 <memmove+0x24>

08020cc4 <memset>:
 8020cc4:	4402      	add	r2, r0
 8020cc6:	4603      	mov	r3, r0
 8020cc8:	4293      	cmp	r3, r2
 8020cca:	d100      	bne.n	8020cce <memset+0xa>
 8020ccc:	4770      	bx	lr
 8020cce:	f803 1b01 	strb.w	r1, [r3], #1
 8020cd2:	e7f9      	b.n	8020cc8 <memset+0x4>

08020cd4 <strchr>:
 8020cd4:	b2c9      	uxtb	r1, r1
 8020cd6:	4603      	mov	r3, r0
 8020cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020cdc:	b11a      	cbz	r2, 8020ce6 <strchr+0x12>
 8020cde:	428a      	cmp	r2, r1
 8020ce0:	d1f9      	bne.n	8020cd6 <strchr+0x2>
 8020ce2:	4618      	mov	r0, r3
 8020ce4:	4770      	bx	lr
 8020ce6:	2900      	cmp	r1, #0
 8020ce8:	bf18      	it	ne
 8020cea:	2300      	movne	r3, #0
 8020cec:	e7f9      	b.n	8020ce2 <strchr+0xe>

08020cee <strncmp>:
 8020cee:	b510      	push	{r4, lr}
 8020cf0:	b16a      	cbz	r2, 8020d0e <strncmp+0x20>
 8020cf2:	3901      	subs	r1, #1
 8020cf4:	1884      	adds	r4, r0, r2
 8020cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020cfa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020cfe:	429a      	cmp	r2, r3
 8020d00:	d103      	bne.n	8020d0a <strncmp+0x1c>
 8020d02:	42a0      	cmp	r0, r4
 8020d04:	d001      	beq.n	8020d0a <strncmp+0x1c>
 8020d06:	2a00      	cmp	r2, #0
 8020d08:	d1f5      	bne.n	8020cf6 <strncmp+0x8>
 8020d0a:	1ad0      	subs	r0, r2, r3
 8020d0c:	bd10      	pop	{r4, pc}
 8020d0e:	4610      	mov	r0, r2
 8020d10:	e7fc      	b.n	8020d0c <strncmp+0x1e>

08020d12 <strstr>:
 8020d12:	780a      	ldrb	r2, [r1, #0]
 8020d14:	b570      	push	{r4, r5, r6, lr}
 8020d16:	b96a      	cbnz	r2, 8020d34 <strstr+0x22>
 8020d18:	bd70      	pop	{r4, r5, r6, pc}
 8020d1a:	429a      	cmp	r2, r3
 8020d1c:	d109      	bne.n	8020d32 <strstr+0x20>
 8020d1e:	460c      	mov	r4, r1
 8020d20:	4605      	mov	r5, r0
 8020d22:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d0f6      	beq.n	8020d18 <strstr+0x6>
 8020d2a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8020d2e:	429e      	cmp	r6, r3
 8020d30:	d0f7      	beq.n	8020d22 <strstr+0x10>
 8020d32:	3001      	adds	r0, #1
 8020d34:	7803      	ldrb	r3, [r0, #0]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d1ef      	bne.n	8020d1a <strstr+0x8>
 8020d3a:	4618      	mov	r0, r3
 8020d3c:	e7ec      	b.n	8020d18 <strstr+0x6>
	...

08020d40 <_localeconv_r>:
 8020d40:	4800      	ldr	r0, [pc, #0]	; (8020d44 <_localeconv_r+0x4>)
 8020d42:	4770      	bx	lr
 8020d44:	2000086c 	.word	0x2000086c

08020d48 <_close_r>:
 8020d48:	b538      	push	{r3, r4, r5, lr}
 8020d4a:	4d06      	ldr	r5, [pc, #24]	; (8020d64 <_close_r+0x1c>)
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	4604      	mov	r4, r0
 8020d50:	4608      	mov	r0, r1
 8020d52:	602b      	str	r3, [r5, #0]
 8020d54:	f7e2 fca3 	bl	800369e <_close>
 8020d58:	1c43      	adds	r3, r0, #1
 8020d5a:	d102      	bne.n	8020d62 <_close_r+0x1a>
 8020d5c:	682b      	ldr	r3, [r5, #0]
 8020d5e:	b103      	cbz	r3, 8020d62 <_close_r+0x1a>
 8020d60:	6023      	str	r3, [r4, #0]
 8020d62:	bd38      	pop	{r3, r4, r5, pc}
 8020d64:	20016e70 	.word	0x20016e70

08020d68 <_lseek_r>:
 8020d68:	b538      	push	{r3, r4, r5, lr}
 8020d6a:	4d07      	ldr	r5, [pc, #28]	; (8020d88 <_lseek_r+0x20>)
 8020d6c:	4604      	mov	r4, r0
 8020d6e:	4608      	mov	r0, r1
 8020d70:	4611      	mov	r1, r2
 8020d72:	2200      	movs	r2, #0
 8020d74:	602a      	str	r2, [r5, #0]
 8020d76:	461a      	mov	r2, r3
 8020d78:	f7e2 fcb8 	bl	80036ec <_lseek>
 8020d7c:	1c43      	adds	r3, r0, #1
 8020d7e:	d102      	bne.n	8020d86 <_lseek_r+0x1e>
 8020d80:	682b      	ldr	r3, [r5, #0]
 8020d82:	b103      	cbz	r3, 8020d86 <_lseek_r+0x1e>
 8020d84:	6023      	str	r3, [r4, #0]
 8020d86:	bd38      	pop	{r3, r4, r5, pc}
 8020d88:	20016e70 	.word	0x20016e70

08020d8c <_read_r>:
 8020d8c:	b538      	push	{r3, r4, r5, lr}
 8020d8e:	4d07      	ldr	r5, [pc, #28]	; (8020dac <_read_r+0x20>)
 8020d90:	4604      	mov	r4, r0
 8020d92:	4608      	mov	r0, r1
 8020d94:	4611      	mov	r1, r2
 8020d96:	2200      	movs	r2, #0
 8020d98:	602a      	str	r2, [r5, #0]
 8020d9a:	461a      	mov	r2, r3
 8020d9c:	f7e2 fc46 	bl	800362c <_read>
 8020da0:	1c43      	adds	r3, r0, #1
 8020da2:	d102      	bne.n	8020daa <_read_r+0x1e>
 8020da4:	682b      	ldr	r3, [r5, #0]
 8020da6:	b103      	cbz	r3, 8020daa <_read_r+0x1e>
 8020da8:	6023      	str	r3, [r4, #0]
 8020daa:	bd38      	pop	{r3, r4, r5, pc}
 8020dac:	20016e70 	.word	0x20016e70

08020db0 <_sbrk_r>:
 8020db0:	b538      	push	{r3, r4, r5, lr}
 8020db2:	4d06      	ldr	r5, [pc, #24]	; (8020dcc <_sbrk_r+0x1c>)
 8020db4:	2300      	movs	r3, #0
 8020db6:	4604      	mov	r4, r0
 8020db8:	4608      	mov	r0, r1
 8020dba:	602b      	str	r3, [r5, #0]
 8020dbc:	f7e2 fca4 	bl	8003708 <_sbrk>
 8020dc0:	1c43      	adds	r3, r0, #1
 8020dc2:	d102      	bne.n	8020dca <_sbrk_r+0x1a>
 8020dc4:	682b      	ldr	r3, [r5, #0]
 8020dc6:	b103      	cbz	r3, 8020dca <_sbrk_r+0x1a>
 8020dc8:	6023      	str	r3, [r4, #0]
 8020dca:	bd38      	pop	{r3, r4, r5, pc}
 8020dcc:	20016e70 	.word	0x20016e70

08020dd0 <_write_r>:
 8020dd0:	b538      	push	{r3, r4, r5, lr}
 8020dd2:	4d07      	ldr	r5, [pc, #28]	; (8020df0 <_write_r+0x20>)
 8020dd4:	4604      	mov	r4, r0
 8020dd6:	4608      	mov	r0, r1
 8020dd8:	4611      	mov	r1, r2
 8020dda:	2200      	movs	r2, #0
 8020ddc:	602a      	str	r2, [r5, #0]
 8020dde:	461a      	mov	r2, r3
 8020de0:	f7e2 fc41 	bl	8003666 <_write>
 8020de4:	1c43      	adds	r3, r0, #1
 8020de6:	d102      	bne.n	8020dee <_write_r+0x1e>
 8020de8:	682b      	ldr	r3, [r5, #0]
 8020dea:	b103      	cbz	r3, 8020dee <_write_r+0x1e>
 8020dec:	6023      	str	r3, [r4, #0]
 8020dee:	bd38      	pop	{r3, r4, r5, pc}
 8020df0:	20016e70 	.word	0x20016e70

08020df4 <__errno>:
 8020df4:	4b01      	ldr	r3, [pc, #4]	; (8020dfc <__errno+0x8>)
 8020df6:	6818      	ldr	r0, [r3, #0]
 8020df8:	4770      	bx	lr
 8020dfa:	bf00      	nop
 8020dfc:	20000778 	.word	0x20000778

08020e00 <__libc_init_array>:
 8020e00:	b570      	push	{r4, r5, r6, lr}
 8020e02:	4d0d      	ldr	r5, [pc, #52]	; (8020e38 <__libc_init_array+0x38>)
 8020e04:	4c0d      	ldr	r4, [pc, #52]	; (8020e3c <__libc_init_array+0x3c>)
 8020e06:	1b64      	subs	r4, r4, r5
 8020e08:	10a4      	asrs	r4, r4, #2
 8020e0a:	2600      	movs	r6, #0
 8020e0c:	42a6      	cmp	r6, r4
 8020e0e:	d109      	bne.n	8020e24 <__libc_init_array+0x24>
 8020e10:	4d0b      	ldr	r5, [pc, #44]	; (8020e40 <__libc_init_array+0x40>)
 8020e12:	4c0c      	ldr	r4, [pc, #48]	; (8020e44 <__libc_init_array+0x44>)
 8020e14:	f003 f954 	bl	80240c0 <_init>
 8020e18:	1b64      	subs	r4, r4, r5
 8020e1a:	10a4      	asrs	r4, r4, #2
 8020e1c:	2600      	movs	r6, #0
 8020e1e:	42a6      	cmp	r6, r4
 8020e20:	d105      	bne.n	8020e2e <__libc_init_array+0x2e>
 8020e22:	bd70      	pop	{r4, r5, r6, pc}
 8020e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e28:	4798      	blx	r3
 8020e2a:	3601      	adds	r6, #1
 8020e2c:	e7ee      	b.n	8020e0c <__libc_init_array+0xc>
 8020e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e32:	4798      	blx	r3
 8020e34:	3601      	adds	r6, #1
 8020e36:	e7f2      	b.n	8020e1e <__libc_init_array+0x1e>
 8020e38:	08025d7c 	.word	0x08025d7c
 8020e3c:	08025d7c 	.word	0x08025d7c
 8020e40:	08025d7c 	.word	0x08025d7c
 8020e44:	08025d90 	.word	0x08025d90

08020e48 <__retarget_lock_init_recursive>:
 8020e48:	4770      	bx	lr

08020e4a <__retarget_lock_acquire_recursive>:
 8020e4a:	4770      	bx	lr

08020e4c <__retarget_lock_release_recursive>:
 8020e4c:	4770      	bx	lr

08020e4e <strcpy>:
 8020e4e:	4603      	mov	r3, r0
 8020e50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020e54:	f803 2b01 	strb.w	r2, [r3], #1
 8020e58:	2a00      	cmp	r2, #0
 8020e5a:	d1f9      	bne.n	8020e50 <strcpy+0x2>
 8020e5c:	4770      	bx	lr

08020e5e <memcpy>:
 8020e5e:	440a      	add	r2, r1
 8020e60:	4291      	cmp	r1, r2
 8020e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020e66:	d100      	bne.n	8020e6a <memcpy+0xc>
 8020e68:	4770      	bx	lr
 8020e6a:	b510      	push	{r4, lr}
 8020e6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020e74:	4291      	cmp	r1, r2
 8020e76:	d1f9      	bne.n	8020e6c <memcpy+0xe>
 8020e78:	bd10      	pop	{r4, pc}
	...

08020e7c <nanf>:
 8020e7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020e84 <nanf+0x8>
 8020e80:	4770      	bx	lr
 8020e82:	bf00      	nop
 8020e84:	7fc00000 	.word	0x7fc00000

08020e88 <__assert_func>:
 8020e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020e8a:	4614      	mov	r4, r2
 8020e8c:	461a      	mov	r2, r3
 8020e8e:	4b09      	ldr	r3, [pc, #36]	; (8020eb4 <__assert_func+0x2c>)
 8020e90:	681b      	ldr	r3, [r3, #0]
 8020e92:	4605      	mov	r5, r0
 8020e94:	68d8      	ldr	r0, [r3, #12]
 8020e96:	b14c      	cbz	r4, 8020eac <__assert_func+0x24>
 8020e98:	4b07      	ldr	r3, [pc, #28]	; (8020eb8 <__assert_func+0x30>)
 8020e9a:	9100      	str	r1, [sp, #0]
 8020e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020ea0:	4906      	ldr	r1, [pc, #24]	; (8020ebc <__assert_func+0x34>)
 8020ea2:	462b      	mov	r3, r5
 8020ea4:	f002 fcae 	bl	8023804 <fiprintf>
 8020ea8:	f002 fd4a 	bl	8023940 <abort>
 8020eac:	4b04      	ldr	r3, [pc, #16]	; (8020ec0 <__assert_func+0x38>)
 8020eae:	461c      	mov	r4, r3
 8020eb0:	e7f3      	b.n	8020e9a <__assert_func+0x12>
 8020eb2:	bf00      	nop
 8020eb4:	20000778 	.word	0x20000778
 8020eb8:	08025a9d 	.word	0x08025a9d
 8020ebc:	08025aaa 	.word	0x08025aaa
 8020ec0:	08025ad8 	.word	0x08025ad8

08020ec4 <quorem>:
 8020ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ec8:	6903      	ldr	r3, [r0, #16]
 8020eca:	690c      	ldr	r4, [r1, #16]
 8020ecc:	42a3      	cmp	r3, r4
 8020ece:	4607      	mov	r7, r0
 8020ed0:	db7e      	blt.n	8020fd0 <quorem+0x10c>
 8020ed2:	3c01      	subs	r4, #1
 8020ed4:	f101 0814 	add.w	r8, r1, #20
 8020ed8:	f100 0514 	add.w	r5, r0, #20
 8020edc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020ee0:	9301      	str	r3, [sp, #4]
 8020ee2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020ee6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020eea:	3301      	adds	r3, #1
 8020eec:	429a      	cmp	r2, r3
 8020eee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020ef2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020ef6:	fbb2 f6f3 	udiv	r6, r2, r3
 8020efa:	d331      	bcc.n	8020f60 <quorem+0x9c>
 8020efc:	f04f 0e00 	mov.w	lr, #0
 8020f00:	4640      	mov	r0, r8
 8020f02:	46ac      	mov	ip, r5
 8020f04:	46f2      	mov	sl, lr
 8020f06:	f850 2b04 	ldr.w	r2, [r0], #4
 8020f0a:	b293      	uxth	r3, r2
 8020f0c:	fb06 e303 	mla	r3, r6, r3, lr
 8020f10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020f14:	0c1a      	lsrs	r2, r3, #16
 8020f16:	b29b      	uxth	r3, r3
 8020f18:	ebaa 0303 	sub.w	r3, sl, r3
 8020f1c:	f8dc a000 	ldr.w	sl, [ip]
 8020f20:	fa13 f38a 	uxtah	r3, r3, sl
 8020f24:	fb06 220e 	mla	r2, r6, lr, r2
 8020f28:	9300      	str	r3, [sp, #0]
 8020f2a:	9b00      	ldr	r3, [sp, #0]
 8020f2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020f30:	b292      	uxth	r2, r2
 8020f32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020f36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f3a:	f8bd 3000 	ldrh.w	r3, [sp]
 8020f3e:	4581      	cmp	r9, r0
 8020f40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f44:	f84c 3b04 	str.w	r3, [ip], #4
 8020f48:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020f4c:	d2db      	bcs.n	8020f06 <quorem+0x42>
 8020f4e:	f855 300b 	ldr.w	r3, [r5, fp]
 8020f52:	b92b      	cbnz	r3, 8020f60 <quorem+0x9c>
 8020f54:	9b01      	ldr	r3, [sp, #4]
 8020f56:	3b04      	subs	r3, #4
 8020f58:	429d      	cmp	r5, r3
 8020f5a:	461a      	mov	r2, r3
 8020f5c:	d32c      	bcc.n	8020fb8 <quorem+0xf4>
 8020f5e:	613c      	str	r4, [r7, #16]
 8020f60:	4638      	mov	r0, r7
 8020f62:	f001 f8c3 	bl	80220ec <__mcmp>
 8020f66:	2800      	cmp	r0, #0
 8020f68:	db22      	blt.n	8020fb0 <quorem+0xec>
 8020f6a:	3601      	adds	r6, #1
 8020f6c:	4629      	mov	r1, r5
 8020f6e:	2000      	movs	r0, #0
 8020f70:	f858 2b04 	ldr.w	r2, [r8], #4
 8020f74:	f8d1 c000 	ldr.w	ip, [r1]
 8020f78:	b293      	uxth	r3, r2
 8020f7a:	1ac3      	subs	r3, r0, r3
 8020f7c:	0c12      	lsrs	r2, r2, #16
 8020f7e:	fa13 f38c 	uxtah	r3, r3, ip
 8020f82:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8020f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f8a:	b29b      	uxth	r3, r3
 8020f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f90:	45c1      	cmp	r9, r8
 8020f92:	f841 3b04 	str.w	r3, [r1], #4
 8020f96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8020f9a:	d2e9      	bcs.n	8020f70 <quorem+0xac>
 8020f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020fa4:	b922      	cbnz	r2, 8020fb0 <quorem+0xec>
 8020fa6:	3b04      	subs	r3, #4
 8020fa8:	429d      	cmp	r5, r3
 8020faa:	461a      	mov	r2, r3
 8020fac:	d30a      	bcc.n	8020fc4 <quorem+0x100>
 8020fae:	613c      	str	r4, [r7, #16]
 8020fb0:	4630      	mov	r0, r6
 8020fb2:	b003      	add	sp, #12
 8020fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fb8:	6812      	ldr	r2, [r2, #0]
 8020fba:	3b04      	subs	r3, #4
 8020fbc:	2a00      	cmp	r2, #0
 8020fbe:	d1ce      	bne.n	8020f5e <quorem+0x9a>
 8020fc0:	3c01      	subs	r4, #1
 8020fc2:	e7c9      	b.n	8020f58 <quorem+0x94>
 8020fc4:	6812      	ldr	r2, [r2, #0]
 8020fc6:	3b04      	subs	r3, #4
 8020fc8:	2a00      	cmp	r2, #0
 8020fca:	d1f0      	bne.n	8020fae <quorem+0xea>
 8020fcc:	3c01      	subs	r4, #1
 8020fce:	e7eb      	b.n	8020fa8 <quorem+0xe4>
 8020fd0:	2000      	movs	r0, #0
 8020fd2:	e7ee      	b.n	8020fb2 <quorem+0xee>
 8020fd4:	0000      	movs	r0, r0
	...

08020fd8 <_dtoa_r>:
 8020fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fdc:	ed2d 8b02 	vpush	{d8}
 8020fe0:	69c5      	ldr	r5, [r0, #28]
 8020fe2:	b091      	sub	sp, #68	; 0x44
 8020fe4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020fe8:	ec59 8b10 	vmov	r8, r9, d0
 8020fec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020fee:	9106      	str	r1, [sp, #24]
 8020ff0:	4606      	mov	r6, r0
 8020ff2:	9208      	str	r2, [sp, #32]
 8020ff4:	930c      	str	r3, [sp, #48]	; 0x30
 8020ff6:	b975      	cbnz	r5, 8021016 <_dtoa_r+0x3e>
 8020ff8:	2010      	movs	r0, #16
 8020ffa:	f7fe fa7f 	bl	801f4fc <malloc>
 8020ffe:	4602      	mov	r2, r0
 8021000:	61f0      	str	r0, [r6, #28]
 8021002:	b920      	cbnz	r0, 802100e <_dtoa_r+0x36>
 8021004:	4ba6      	ldr	r3, [pc, #664]	; (80212a0 <_dtoa_r+0x2c8>)
 8021006:	21ef      	movs	r1, #239	; 0xef
 8021008:	48a6      	ldr	r0, [pc, #664]	; (80212a4 <_dtoa_r+0x2cc>)
 802100a:	f7ff ff3d 	bl	8020e88 <__assert_func>
 802100e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021012:	6005      	str	r5, [r0, #0]
 8021014:	60c5      	str	r5, [r0, #12]
 8021016:	69f3      	ldr	r3, [r6, #28]
 8021018:	6819      	ldr	r1, [r3, #0]
 802101a:	b151      	cbz	r1, 8021032 <_dtoa_r+0x5a>
 802101c:	685a      	ldr	r2, [r3, #4]
 802101e:	604a      	str	r2, [r1, #4]
 8021020:	2301      	movs	r3, #1
 8021022:	4093      	lsls	r3, r2
 8021024:	608b      	str	r3, [r1, #8]
 8021026:	4630      	mov	r0, r6
 8021028:	f000 fdda 	bl	8021be0 <_Bfree>
 802102c:	69f3      	ldr	r3, [r6, #28]
 802102e:	2200      	movs	r2, #0
 8021030:	601a      	str	r2, [r3, #0]
 8021032:	f1b9 0300 	subs.w	r3, r9, #0
 8021036:	bfbb      	ittet	lt
 8021038:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802103c:	9303      	strlt	r3, [sp, #12]
 802103e:	2300      	movge	r3, #0
 8021040:	2201      	movlt	r2, #1
 8021042:	bfac      	ite	ge
 8021044:	6023      	strge	r3, [r4, #0]
 8021046:	6022      	strlt	r2, [r4, #0]
 8021048:	4b97      	ldr	r3, [pc, #604]	; (80212a8 <_dtoa_r+0x2d0>)
 802104a:	9c03      	ldr	r4, [sp, #12]
 802104c:	43a3      	bics	r3, r4
 802104e:	d11c      	bne.n	802108a <_dtoa_r+0xb2>
 8021050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021052:	f242 730f 	movw	r3, #9999	; 0x270f
 8021056:	6013      	str	r3, [r2, #0]
 8021058:	f3c4 0313 	ubfx	r3, r4, #0, #20
 802105c:	ea53 0308 	orrs.w	r3, r3, r8
 8021060:	f000 84fb 	beq.w	8021a5a <_dtoa_r+0xa82>
 8021064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021066:	b963      	cbnz	r3, 8021082 <_dtoa_r+0xaa>
 8021068:	4b90      	ldr	r3, [pc, #576]	; (80212ac <_dtoa_r+0x2d4>)
 802106a:	e020      	b.n	80210ae <_dtoa_r+0xd6>
 802106c:	4b90      	ldr	r3, [pc, #576]	; (80212b0 <_dtoa_r+0x2d8>)
 802106e:	9301      	str	r3, [sp, #4]
 8021070:	3308      	adds	r3, #8
 8021072:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8021074:	6013      	str	r3, [r2, #0]
 8021076:	9801      	ldr	r0, [sp, #4]
 8021078:	b011      	add	sp, #68	; 0x44
 802107a:	ecbd 8b02 	vpop	{d8}
 802107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021082:	4b8a      	ldr	r3, [pc, #552]	; (80212ac <_dtoa_r+0x2d4>)
 8021084:	9301      	str	r3, [sp, #4]
 8021086:	3303      	adds	r3, #3
 8021088:	e7f3      	b.n	8021072 <_dtoa_r+0x9a>
 802108a:	ed9d 8b02 	vldr	d8, [sp, #8]
 802108e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8021092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021096:	d10c      	bne.n	80210b2 <_dtoa_r+0xda>
 8021098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802109a:	2301      	movs	r3, #1
 802109c:	6013      	str	r3, [r2, #0]
 802109e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	f000 84d7 	beq.w	8021a54 <_dtoa_r+0xa7c>
 80210a6:	4b83      	ldr	r3, [pc, #524]	; (80212b4 <_dtoa_r+0x2dc>)
 80210a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80210aa:	6013      	str	r3, [r2, #0]
 80210ac:	3b01      	subs	r3, #1
 80210ae:	9301      	str	r3, [sp, #4]
 80210b0:	e7e1      	b.n	8021076 <_dtoa_r+0x9e>
 80210b2:	aa0e      	add	r2, sp, #56	; 0x38
 80210b4:	a90f      	add	r1, sp, #60	; 0x3c
 80210b6:	4630      	mov	r0, r6
 80210b8:	eeb0 0b48 	vmov.f64	d0, d8
 80210bc:	f001 f92c 	bl	8022318 <__d2b>
 80210c0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80210c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80210c6:	4605      	mov	r5, r0
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d046      	beq.n	802115a <_dtoa_r+0x182>
 80210cc:	eeb0 7b48 	vmov.f64	d7, d8
 80210d0:	ee18 1a90 	vmov	r1, s17
 80210d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80210d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80210dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80210e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80210e4:	2000      	movs	r0, #0
 80210e6:	ee07 1a90 	vmov	s15, r1
 80210ea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80210ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8021288 <_dtoa_r+0x2b0>
 80210f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80210f6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8021290 <_dtoa_r+0x2b8>
 80210fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80210fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8021298 <_dtoa_r+0x2c0>
 8021102:	ee07 3a90 	vmov	s15, r3
 8021106:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802110a:	eeb0 7b46 	vmov.f64	d7, d6
 802110e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8021112:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8021116:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802111e:	ee16 ba90 	vmov	fp, s13
 8021122:	9009      	str	r0, [sp, #36]	; 0x24
 8021124:	d508      	bpl.n	8021138 <_dtoa_r+0x160>
 8021126:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802112a:	eeb4 6b47 	vcmp.f64	d6, d7
 802112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021132:	bf18      	it	ne
 8021134:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8021138:	f1bb 0f16 	cmp.w	fp, #22
 802113c:	d82b      	bhi.n	8021196 <_dtoa_r+0x1be>
 802113e:	495e      	ldr	r1, [pc, #376]	; (80212b8 <_dtoa_r+0x2e0>)
 8021140:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8021144:	ed91 7b00 	vldr	d7, [r1]
 8021148:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021150:	d501      	bpl.n	8021156 <_dtoa_r+0x17e>
 8021152:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021156:	2100      	movs	r1, #0
 8021158:	e01e      	b.n	8021198 <_dtoa_r+0x1c0>
 802115a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802115c:	4413      	add	r3, r2
 802115e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8021162:	2920      	cmp	r1, #32
 8021164:	bfc1      	itttt	gt
 8021166:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 802116a:	408c      	lslgt	r4, r1
 802116c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8021170:	fa28 f101 	lsrgt.w	r1, r8, r1
 8021174:	bfd6      	itet	le
 8021176:	f1c1 0120 	rsble	r1, r1, #32
 802117a:	4321      	orrgt	r1, r4
 802117c:	fa08 f101 	lslle.w	r1, r8, r1
 8021180:	ee07 1a90 	vmov	s15, r1
 8021184:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8021188:	3b01      	subs	r3, #1
 802118a:	ee17 1a90 	vmov	r1, s15
 802118e:	2001      	movs	r0, #1
 8021190:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8021194:	e7a7      	b.n	80210e6 <_dtoa_r+0x10e>
 8021196:	2101      	movs	r1, #1
 8021198:	1ad2      	subs	r2, r2, r3
 802119a:	1e53      	subs	r3, r2, #1
 802119c:	9305      	str	r3, [sp, #20]
 802119e:	bf45      	ittet	mi
 80211a0:	f1c2 0301 	rsbmi	r3, r2, #1
 80211a4:	9304      	strmi	r3, [sp, #16]
 80211a6:	2300      	movpl	r3, #0
 80211a8:	2300      	movmi	r3, #0
 80211aa:	bf4c      	ite	mi
 80211ac:	9305      	strmi	r3, [sp, #20]
 80211ae:	9304      	strpl	r3, [sp, #16]
 80211b0:	f1bb 0f00 	cmp.w	fp, #0
 80211b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80211b6:	db18      	blt.n	80211ea <_dtoa_r+0x212>
 80211b8:	9b05      	ldr	r3, [sp, #20]
 80211ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80211be:	445b      	add	r3, fp
 80211c0:	9305      	str	r3, [sp, #20]
 80211c2:	2300      	movs	r3, #0
 80211c4:	9a06      	ldr	r2, [sp, #24]
 80211c6:	2a09      	cmp	r2, #9
 80211c8:	d848      	bhi.n	802125c <_dtoa_r+0x284>
 80211ca:	2a05      	cmp	r2, #5
 80211cc:	bfc4      	itt	gt
 80211ce:	3a04      	subgt	r2, #4
 80211d0:	9206      	strgt	r2, [sp, #24]
 80211d2:	9a06      	ldr	r2, [sp, #24]
 80211d4:	f1a2 0202 	sub.w	r2, r2, #2
 80211d8:	bfcc      	ite	gt
 80211da:	2400      	movgt	r4, #0
 80211dc:	2401      	movle	r4, #1
 80211de:	2a03      	cmp	r2, #3
 80211e0:	d847      	bhi.n	8021272 <_dtoa_r+0x29a>
 80211e2:	e8df f002 	tbb	[pc, r2]
 80211e6:	2d0b      	.short	0x2d0b
 80211e8:	392b      	.short	0x392b
 80211ea:	9b04      	ldr	r3, [sp, #16]
 80211ec:	2200      	movs	r2, #0
 80211ee:	eba3 030b 	sub.w	r3, r3, fp
 80211f2:	9304      	str	r3, [sp, #16]
 80211f4:	920a      	str	r2, [sp, #40]	; 0x28
 80211f6:	f1cb 0300 	rsb	r3, fp, #0
 80211fa:	e7e3      	b.n	80211c4 <_dtoa_r+0x1ec>
 80211fc:	2200      	movs	r2, #0
 80211fe:	9207      	str	r2, [sp, #28]
 8021200:	9a08      	ldr	r2, [sp, #32]
 8021202:	2a00      	cmp	r2, #0
 8021204:	dc38      	bgt.n	8021278 <_dtoa_r+0x2a0>
 8021206:	f04f 0a01 	mov.w	sl, #1
 802120a:	46d1      	mov	r9, sl
 802120c:	4652      	mov	r2, sl
 802120e:	f8cd a020 	str.w	sl, [sp, #32]
 8021212:	69f7      	ldr	r7, [r6, #28]
 8021214:	2100      	movs	r1, #0
 8021216:	2004      	movs	r0, #4
 8021218:	f100 0c14 	add.w	ip, r0, #20
 802121c:	4594      	cmp	ip, r2
 802121e:	d930      	bls.n	8021282 <_dtoa_r+0x2aa>
 8021220:	6079      	str	r1, [r7, #4]
 8021222:	4630      	mov	r0, r6
 8021224:	930d      	str	r3, [sp, #52]	; 0x34
 8021226:	f000 fc9b 	bl	8021b60 <_Balloc>
 802122a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802122c:	9001      	str	r0, [sp, #4]
 802122e:	4602      	mov	r2, r0
 8021230:	2800      	cmp	r0, #0
 8021232:	d145      	bne.n	80212c0 <_dtoa_r+0x2e8>
 8021234:	4b21      	ldr	r3, [pc, #132]	; (80212bc <_dtoa_r+0x2e4>)
 8021236:	f240 11af 	movw	r1, #431	; 0x1af
 802123a:	e6e5      	b.n	8021008 <_dtoa_r+0x30>
 802123c:	2201      	movs	r2, #1
 802123e:	e7de      	b.n	80211fe <_dtoa_r+0x226>
 8021240:	2200      	movs	r2, #0
 8021242:	9207      	str	r2, [sp, #28]
 8021244:	9a08      	ldr	r2, [sp, #32]
 8021246:	eb0b 0a02 	add.w	sl, fp, r2
 802124a:	f10a 0901 	add.w	r9, sl, #1
 802124e:	464a      	mov	r2, r9
 8021250:	2a01      	cmp	r2, #1
 8021252:	bfb8      	it	lt
 8021254:	2201      	movlt	r2, #1
 8021256:	e7dc      	b.n	8021212 <_dtoa_r+0x23a>
 8021258:	2201      	movs	r2, #1
 802125a:	e7f2      	b.n	8021242 <_dtoa_r+0x26a>
 802125c:	2401      	movs	r4, #1
 802125e:	2200      	movs	r2, #0
 8021260:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8021264:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8021268:	2100      	movs	r1, #0
 802126a:	46d1      	mov	r9, sl
 802126c:	2212      	movs	r2, #18
 802126e:	9108      	str	r1, [sp, #32]
 8021270:	e7cf      	b.n	8021212 <_dtoa_r+0x23a>
 8021272:	2201      	movs	r2, #1
 8021274:	9207      	str	r2, [sp, #28]
 8021276:	e7f5      	b.n	8021264 <_dtoa_r+0x28c>
 8021278:	f8dd a020 	ldr.w	sl, [sp, #32]
 802127c:	46d1      	mov	r9, sl
 802127e:	4652      	mov	r2, sl
 8021280:	e7c7      	b.n	8021212 <_dtoa_r+0x23a>
 8021282:	3101      	adds	r1, #1
 8021284:	0040      	lsls	r0, r0, #1
 8021286:	e7c7      	b.n	8021218 <_dtoa_r+0x240>
 8021288:	636f4361 	.word	0x636f4361
 802128c:	3fd287a7 	.word	0x3fd287a7
 8021290:	8b60c8b3 	.word	0x8b60c8b3
 8021294:	3fc68a28 	.word	0x3fc68a28
 8021298:	509f79fb 	.word	0x509f79fb
 802129c:	3fd34413 	.word	0x3fd34413
 80212a0:	080258f4 	.word	0x080258f4
 80212a4:	08025ae6 	.word	0x08025ae6
 80212a8:	7ff00000 	.word	0x7ff00000
 80212ac:	08025ae2 	.word	0x08025ae2
 80212b0:	08025ad9 	.word	0x08025ad9
 80212b4:	08025a75 	.word	0x08025a75
 80212b8:	08025bd0 	.word	0x08025bd0
 80212bc:	08025b3e 	.word	0x08025b3e
 80212c0:	69f2      	ldr	r2, [r6, #28]
 80212c2:	9901      	ldr	r1, [sp, #4]
 80212c4:	6011      	str	r1, [r2, #0]
 80212c6:	f1b9 0f0e 	cmp.w	r9, #14
 80212ca:	d86c      	bhi.n	80213a6 <_dtoa_r+0x3ce>
 80212cc:	2c00      	cmp	r4, #0
 80212ce:	d06a      	beq.n	80213a6 <_dtoa_r+0x3ce>
 80212d0:	f1bb 0f00 	cmp.w	fp, #0
 80212d4:	f340 80a0 	ble.w	8021418 <_dtoa_r+0x440>
 80212d8:	4ac1      	ldr	r2, [pc, #772]	; (80215e0 <_dtoa_r+0x608>)
 80212da:	f00b 010f 	and.w	r1, fp, #15
 80212de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80212e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80212e6:	ed92 7b00 	vldr	d7, [r2]
 80212ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 80212ee:	f000 8087 	beq.w	8021400 <_dtoa_r+0x428>
 80212f2:	49bc      	ldr	r1, [pc, #752]	; (80215e4 <_dtoa_r+0x60c>)
 80212f4:	ed91 6b08 	vldr	d6, [r1, #32]
 80212f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80212fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021300:	f002 020f 	and.w	r2, r2, #15
 8021304:	2103      	movs	r1, #3
 8021306:	48b7      	ldr	r0, [pc, #732]	; (80215e4 <_dtoa_r+0x60c>)
 8021308:	2a00      	cmp	r2, #0
 802130a:	d17b      	bne.n	8021404 <_dtoa_r+0x42c>
 802130c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021310:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021314:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802131a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802131e:	2a00      	cmp	r2, #0
 8021320:	f000 80a0 	beq.w	8021464 <_dtoa_r+0x48c>
 8021324:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021328:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021330:	f140 8098 	bpl.w	8021464 <_dtoa_r+0x48c>
 8021334:	f1b9 0f00 	cmp.w	r9, #0
 8021338:	f000 8094 	beq.w	8021464 <_dtoa_r+0x48c>
 802133c:	f1ba 0f00 	cmp.w	sl, #0
 8021340:	dd2f      	ble.n	80213a2 <_dtoa_r+0x3ca>
 8021342:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8021346:	ee27 7b06 	vmul.f64	d7, d7, d6
 802134a:	ed8d 7b02 	vstr	d7, [sp, #8]
 802134e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8021352:	3101      	adds	r1, #1
 8021354:	4654      	mov	r4, sl
 8021356:	ed9d 6b02 	vldr	d6, [sp, #8]
 802135a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802135e:	ee07 1a90 	vmov	s15, r1
 8021362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021366:	eea7 5b06 	vfma.f64	d5, d7, d6
 802136a:	ee15 7a90 	vmov	r7, s11
 802136e:	ec51 0b15 	vmov	r0, r1, d5
 8021372:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8021376:	2c00      	cmp	r4, #0
 8021378:	d177      	bne.n	802146a <_dtoa_r+0x492>
 802137a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802137e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8021382:	ec41 0b17 	vmov	d7, r0, r1
 8021386:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802138e:	f300 826a 	bgt.w	8021866 <_dtoa_r+0x88e>
 8021392:	eeb1 7b47 	vneg.f64	d7, d7
 8021396:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802139e:	f100 8260 	bmi.w	8021862 <_dtoa_r+0x88a>
 80213a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80213a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80213a8:	2a00      	cmp	r2, #0
 80213aa:	f2c0 811d 	blt.w	80215e8 <_dtoa_r+0x610>
 80213ae:	f1bb 0f0e 	cmp.w	fp, #14
 80213b2:	f300 8119 	bgt.w	80215e8 <_dtoa_r+0x610>
 80213b6:	4b8a      	ldr	r3, [pc, #552]	; (80215e0 <_dtoa_r+0x608>)
 80213b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80213bc:	ed93 6b00 	vldr	d6, [r3]
 80213c0:	9b08      	ldr	r3, [sp, #32]
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	f280 80b7 	bge.w	8021536 <_dtoa_r+0x55e>
 80213c8:	f1b9 0f00 	cmp.w	r9, #0
 80213cc:	f300 80b3 	bgt.w	8021536 <_dtoa_r+0x55e>
 80213d0:	f040 8246 	bne.w	8021860 <_dtoa_r+0x888>
 80213d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80213d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80213dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80213e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80213e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213e8:	464c      	mov	r4, r9
 80213ea:	464f      	mov	r7, r9
 80213ec:	f280 821c 	bge.w	8021828 <_dtoa_r+0x850>
 80213f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80213f4:	2331      	movs	r3, #49	; 0x31
 80213f6:	f808 3b01 	strb.w	r3, [r8], #1
 80213fa:	f10b 0b01 	add.w	fp, fp, #1
 80213fe:	e218      	b.n	8021832 <_dtoa_r+0x85a>
 8021400:	2102      	movs	r1, #2
 8021402:	e780      	b.n	8021306 <_dtoa_r+0x32e>
 8021404:	07d4      	lsls	r4, r2, #31
 8021406:	d504      	bpl.n	8021412 <_dtoa_r+0x43a>
 8021408:	ed90 6b00 	vldr	d6, [r0]
 802140c:	3101      	adds	r1, #1
 802140e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021412:	1052      	asrs	r2, r2, #1
 8021414:	3008      	adds	r0, #8
 8021416:	e777      	b.n	8021308 <_dtoa_r+0x330>
 8021418:	d022      	beq.n	8021460 <_dtoa_r+0x488>
 802141a:	f1cb 0200 	rsb	r2, fp, #0
 802141e:	4970      	ldr	r1, [pc, #448]	; (80215e0 <_dtoa_r+0x608>)
 8021420:	f002 000f 	and.w	r0, r2, #15
 8021424:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021428:	ed91 7b00 	vldr	d7, [r1]
 802142c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8021430:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021434:	486b      	ldr	r0, [pc, #428]	; (80215e4 <_dtoa_r+0x60c>)
 8021436:	1112      	asrs	r2, r2, #4
 8021438:	2400      	movs	r4, #0
 802143a:	2102      	movs	r1, #2
 802143c:	b92a      	cbnz	r2, 802144a <_dtoa_r+0x472>
 802143e:	2c00      	cmp	r4, #0
 8021440:	f43f af6a 	beq.w	8021318 <_dtoa_r+0x340>
 8021444:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021448:	e766      	b.n	8021318 <_dtoa_r+0x340>
 802144a:	07d7      	lsls	r7, r2, #31
 802144c:	d505      	bpl.n	802145a <_dtoa_r+0x482>
 802144e:	ed90 6b00 	vldr	d6, [r0]
 8021452:	3101      	adds	r1, #1
 8021454:	2401      	movs	r4, #1
 8021456:	ee27 7b06 	vmul.f64	d7, d7, d6
 802145a:	1052      	asrs	r2, r2, #1
 802145c:	3008      	adds	r0, #8
 802145e:	e7ed      	b.n	802143c <_dtoa_r+0x464>
 8021460:	2102      	movs	r1, #2
 8021462:	e759      	b.n	8021318 <_dtoa_r+0x340>
 8021464:	465a      	mov	r2, fp
 8021466:	464c      	mov	r4, r9
 8021468:	e775      	b.n	8021356 <_dtoa_r+0x37e>
 802146a:	ec41 0b17 	vmov	d7, r0, r1
 802146e:	495c      	ldr	r1, [pc, #368]	; (80215e0 <_dtoa_r+0x608>)
 8021470:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8021474:	ed11 4b02 	vldr	d4, [r1, #-8]
 8021478:	9901      	ldr	r1, [sp, #4]
 802147a:	440c      	add	r4, r1
 802147c:	9907      	ldr	r1, [sp, #28]
 802147e:	b351      	cbz	r1, 80214d6 <_dtoa_r+0x4fe>
 8021480:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8021484:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8021488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802148c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021490:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021494:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021498:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 802149c:	ee14 1a90 	vmov	r1, s9
 80214a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80214a4:	3130      	adds	r1, #48	; 0x30
 80214a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80214aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80214ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214b2:	f808 1b01 	strb.w	r1, [r8], #1
 80214b6:	d439      	bmi.n	802152c <_dtoa_r+0x554>
 80214b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80214bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80214c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214c4:	d472      	bmi.n	80215ac <_dtoa_r+0x5d4>
 80214c6:	45a0      	cmp	r8, r4
 80214c8:	f43f af6b 	beq.w	80213a2 <_dtoa_r+0x3ca>
 80214cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80214d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80214d4:	e7e0      	b.n	8021498 <_dtoa_r+0x4c0>
 80214d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80214da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80214de:	4620      	mov	r0, r4
 80214e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80214e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80214e8:	ee14 1a90 	vmov	r1, s9
 80214ec:	3130      	adds	r1, #48	; 0x30
 80214ee:	f808 1b01 	strb.w	r1, [r8], #1
 80214f2:	45a0      	cmp	r8, r4
 80214f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80214f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80214fc:	d118      	bne.n	8021530 <_dtoa_r+0x558>
 80214fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021502:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021506:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802150e:	dc4d      	bgt.n	80215ac <_dtoa_r+0x5d4>
 8021510:	ee35 5b47 	vsub.f64	d5, d5, d7
 8021514:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802151c:	f57f af41 	bpl.w	80213a2 <_dtoa_r+0x3ca>
 8021520:	4680      	mov	r8, r0
 8021522:	3801      	subs	r0, #1
 8021524:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021528:	2b30      	cmp	r3, #48	; 0x30
 802152a:	d0f9      	beq.n	8021520 <_dtoa_r+0x548>
 802152c:	4693      	mov	fp, r2
 802152e:	e02a      	b.n	8021586 <_dtoa_r+0x5ae>
 8021530:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021534:	e7d6      	b.n	80214e4 <_dtoa_r+0x50c>
 8021536:	ed9d 7b02 	vldr	d7, [sp, #8]
 802153a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802153e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021542:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8021546:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802154a:	ee15 3a10 	vmov	r3, s10
 802154e:	3330      	adds	r3, #48	; 0x30
 8021550:	f808 3b01 	strb.w	r3, [r8], #1
 8021554:	9b01      	ldr	r3, [sp, #4]
 8021556:	eba8 0303 	sub.w	r3, r8, r3
 802155a:	4599      	cmp	r9, r3
 802155c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021560:	eea3 7b46 	vfms.f64	d7, d3, d6
 8021564:	d133      	bne.n	80215ce <_dtoa_r+0x5f6>
 8021566:	ee37 7b07 	vadd.f64	d7, d7, d7
 802156a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021572:	dc1a      	bgt.n	80215aa <_dtoa_r+0x5d2>
 8021574:	eeb4 7b46 	vcmp.f64	d7, d6
 8021578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802157c:	d103      	bne.n	8021586 <_dtoa_r+0x5ae>
 802157e:	ee15 3a10 	vmov	r3, s10
 8021582:	07d9      	lsls	r1, r3, #31
 8021584:	d411      	bmi.n	80215aa <_dtoa_r+0x5d2>
 8021586:	4629      	mov	r1, r5
 8021588:	4630      	mov	r0, r6
 802158a:	f000 fb29 	bl	8021be0 <_Bfree>
 802158e:	2300      	movs	r3, #0
 8021590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021592:	f888 3000 	strb.w	r3, [r8]
 8021596:	f10b 0301 	add.w	r3, fp, #1
 802159a:	6013      	str	r3, [r2, #0]
 802159c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802159e:	2b00      	cmp	r3, #0
 80215a0:	f43f ad69 	beq.w	8021076 <_dtoa_r+0x9e>
 80215a4:	f8c3 8000 	str.w	r8, [r3]
 80215a8:	e565      	b.n	8021076 <_dtoa_r+0x9e>
 80215aa:	465a      	mov	r2, fp
 80215ac:	4643      	mov	r3, r8
 80215ae:	4698      	mov	r8, r3
 80215b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80215b4:	2939      	cmp	r1, #57	; 0x39
 80215b6:	d106      	bne.n	80215c6 <_dtoa_r+0x5ee>
 80215b8:	9901      	ldr	r1, [sp, #4]
 80215ba:	4299      	cmp	r1, r3
 80215bc:	d1f7      	bne.n	80215ae <_dtoa_r+0x5d6>
 80215be:	9801      	ldr	r0, [sp, #4]
 80215c0:	2130      	movs	r1, #48	; 0x30
 80215c2:	3201      	adds	r2, #1
 80215c4:	7001      	strb	r1, [r0, #0]
 80215c6:	7819      	ldrb	r1, [r3, #0]
 80215c8:	3101      	adds	r1, #1
 80215ca:	7019      	strb	r1, [r3, #0]
 80215cc:	e7ae      	b.n	802152c <_dtoa_r+0x554>
 80215ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80215d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80215d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215da:	d1b2      	bne.n	8021542 <_dtoa_r+0x56a>
 80215dc:	e7d3      	b.n	8021586 <_dtoa_r+0x5ae>
 80215de:	bf00      	nop
 80215e0:	08025bd0 	.word	0x08025bd0
 80215e4:	08025ba8 	.word	0x08025ba8
 80215e8:	9907      	ldr	r1, [sp, #28]
 80215ea:	2900      	cmp	r1, #0
 80215ec:	f000 80d0 	beq.w	8021790 <_dtoa_r+0x7b8>
 80215f0:	9906      	ldr	r1, [sp, #24]
 80215f2:	2901      	cmp	r1, #1
 80215f4:	f300 80b4 	bgt.w	8021760 <_dtoa_r+0x788>
 80215f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80215fa:	2900      	cmp	r1, #0
 80215fc:	f000 80ac 	beq.w	8021758 <_dtoa_r+0x780>
 8021600:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021604:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021608:	461c      	mov	r4, r3
 802160a:	9309      	str	r3, [sp, #36]	; 0x24
 802160c:	9b04      	ldr	r3, [sp, #16]
 802160e:	4413      	add	r3, r2
 8021610:	9304      	str	r3, [sp, #16]
 8021612:	9b05      	ldr	r3, [sp, #20]
 8021614:	2101      	movs	r1, #1
 8021616:	4413      	add	r3, r2
 8021618:	4630      	mov	r0, r6
 802161a:	9305      	str	r3, [sp, #20]
 802161c:	f000 fbe0 	bl	8021de0 <__i2b>
 8021620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021622:	4607      	mov	r7, r0
 8021624:	f1b8 0f00 	cmp.w	r8, #0
 8021628:	d00d      	beq.n	8021646 <_dtoa_r+0x66e>
 802162a:	9a05      	ldr	r2, [sp, #20]
 802162c:	2a00      	cmp	r2, #0
 802162e:	dd0a      	ble.n	8021646 <_dtoa_r+0x66e>
 8021630:	4542      	cmp	r2, r8
 8021632:	9904      	ldr	r1, [sp, #16]
 8021634:	bfa8      	it	ge
 8021636:	4642      	movge	r2, r8
 8021638:	1a89      	subs	r1, r1, r2
 802163a:	9104      	str	r1, [sp, #16]
 802163c:	9905      	ldr	r1, [sp, #20]
 802163e:	eba8 0802 	sub.w	r8, r8, r2
 8021642:	1a8a      	subs	r2, r1, r2
 8021644:	9205      	str	r2, [sp, #20]
 8021646:	b303      	cbz	r3, 802168a <_dtoa_r+0x6b2>
 8021648:	9a07      	ldr	r2, [sp, #28]
 802164a:	2a00      	cmp	r2, #0
 802164c:	f000 80a5 	beq.w	802179a <_dtoa_r+0x7c2>
 8021650:	2c00      	cmp	r4, #0
 8021652:	dd13      	ble.n	802167c <_dtoa_r+0x6a4>
 8021654:	4639      	mov	r1, r7
 8021656:	4622      	mov	r2, r4
 8021658:	4630      	mov	r0, r6
 802165a:	930d      	str	r3, [sp, #52]	; 0x34
 802165c:	f000 fc80 	bl	8021f60 <__pow5mult>
 8021660:	462a      	mov	r2, r5
 8021662:	4601      	mov	r1, r0
 8021664:	4607      	mov	r7, r0
 8021666:	4630      	mov	r0, r6
 8021668:	f000 fbd0 	bl	8021e0c <__multiply>
 802166c:	4629      	mov	r1, r5
 802166e:	9009      	str	r0, [sp, #36]	; 0x24
 8021670:	4630      	mov	r0, r6
 8021672:	f000 fab5 	bl	8021be0 <_Bfree>
 8021676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021678:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802167a:	4615      	mov	r5, r2
 802167c:	1b1a      	subs	r2, r3, r4
 802167e:	d004      	beq.n	802168a <_dtoa_r+0x6b2>
 8021680:	4629      	mov	r1, r5
 8021682:	4630      	mov	r0, r6
 8021684:	f000 fc6c 	bl	8021f60 <__pow5mult>
 8021688:	4605      	mov	r5, r0
 802168a:	2101      	movs	r1, #1
 802168c:	4630      	mov	r0, r6
 802168e:	f000 fba7 	bl	8021de0 <__i2b>
 8021692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021694:	2b00      	cmp	r3, #0
 8021696:	4604      	mov	r4, r0
 8021698:	f340 8081 	ble.w	802179e <_dtoa_r+0x7c6>
 802169c:	461a      	mov	r2, r3
 802169e:	4601      	mov	r1, r0
 80216a0:	4630      	mov	r0, r6
 80216a2:	f000 fc5d 	bl	8021f60 <__pow5mult>
 80216a6:	9b06      	ldr	r3, [sp, #24]
 80216a8:	2b01      	cmp	r3, #1
 80216aa:	4604      	mov	r4, r0
 80216ac:	dd7a      	ble.n	80217a4 <_dtoa_r+0x7cc>
 80216ae:	2300      	movs	r3, #0
 80216b0:	9309      	str	r3, [sp, #36]	; 0x24
 80216b2:	6922      	ldr	r2, [r4, #16]
 80216b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80216b8:	6910      	ldr	r0, [r2, #16]
 80216ba:	f000 fb43 	bl	8021d44 <__hi0bits>
 80216be:	f1c0 0020 	rsb	r0, r0, #32
 80216c2:	9b05      	ldr	r3, [sp, #20]
 80216c4:	4418      	add	r0, r3
 80216c6:	f010 001f 	ands.w	r0, r0, #31
 80216ca:	f000 8093 	beq.w	80217f4 <_dtoa_r+0x81c>
 80216ce:	f1c0 0220 	rsb	r2, r0, #32
 80216d2:	2a04      	cmp	r2, #4
 80216d4:	f340 8085 	ble.w	80217e2 <_dtoa_r+0x80a>
 80216d8:	9b04      	ldr	r3, [sp, #16]
 80216da:	f1c0 001c 	rsb	r0, r0, #28
 80216de:	4403      	add	r3, r0
 80216e0:	9304      	str	r3, [sp, #16]
 80216e2:	9b05      	ldr	r3, [sp, #20]
 80216e4:	4480      	add	r8, r0
 80216e6:	4403      	add	r3, r0
 80216e8:	9305      	str	r3, [sp, #20]
 80216ea:	9b04      	ldr	r3, [sp, #16]
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	dd05      	ble.n	80216fc <_dtoa_r+0x724>
 80216f0:	4629      	mov	r1, r5
 80216f2:	461a      	mov	r2, r3
 80216f4:	4630      	mov	r0, r6
 80216f6:	f000 fc8d 	bl	8022014 <__lshift>
 80216fa:	4605      	mov	r5, r0
 80216fc:	9b05      	ldr	r3, [sp, #20]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	dd05      	ble.n	802170e <_dtoa_r+0x736>
 8021702:	4621      	mov	r1, r4
 8021704:	461a      	mov	r2, r3
 8021706:	4630      	mov	r0, r6
 8021708:	f000 fc84 	bl	8022014 <__lshift>
 802170c:	4604      	mov	r4, r0
 802170e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021710:	2b00      	cmp	r3, #0
 8021712:	d071      	beq.n	80217f8 <_dtoa_r+0x820>
 8021714:	4621      	mov	r1, r4
 8021716:	4628      	mov	r0, r5
 8021718:	f000 fce8 	bl	80220ec <__mcmp>
 802171c:	2800      	cmp	r0, #0
 802171e:	da6b      	bge.n	80217f8 <_dtoa_r+0x820>
 8021720:	2300      	movs	r3, #0
 8021722:	4629      	mov	r1, r5
 8021724:	220a      	movs	r2, #10
 8021726:	4630      	mov	r0, r6
 8021728:	f000 fa7c 	bl	8021c24 <__multadd>
 802172c:	9b07      	ldr	r3, [sp, #28]
 802172e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021732:	4605      	mov	r5, r0
 8021734:	2b00      	cmp	r3, #0
 8021736:	f000 8197 	beq.w	8021a68 <_dtoa_r+0xa90>
 802173a:	4639      	mov	r1, r7
 802173c:	2300      	movs	r3, #0
 802173e:	220a      	movs	r2, #10
 8021740:	4630      	mov	r0, r6
 8021742:	f000 fa6f 	bl	8021c24 <__multadd>
 8021746:	f1ba 0f00 	cmp.w	sl, #0
 802174a:	4607      	mov	r7, r0
 802174c:	f300 8093 	bgt.w	8021876 <_dtoa_r+0x89e>
 8021750:	9b06      	ldr	r3, [sp, #24]
 8021752:	2b02      	cmp	r3, #2
 8021754:	dc57      	bgt.n	8021806 <_dtoa_r+0x82e>
 8021756:	e08e      	b.n	8021876 <_dtoa_r+0x89e>
 8021758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802175a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802175e:	e751      	b.n	8021604 <_dtoa_r+0x62c>
 8021760:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8021764:	42a3      	cmp	r3, r4
 8021766:	bfbf      	itttt	lt
 8021768:	1ae2      	sublt	r2, r4, r3
 802176a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802176c:	189b      	addlt	r3, r3, r2
 802176e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8021770:	bfae      	itee	ge
 8021772:	1b1c      	subge	r4, r3, r4
 8021774:	4623      	movlt	r3, r4
 8021776:	2400      	movlt	r4, #0
 8021778:	f1b9 0f00 	cmp.w	r9, #0
 802177c:	bfb5      	itete	lt
 802177e:	9a04      	ldrlt	r2, [sp, #16]
 8021780:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8021784:	eba2 0809 	sublt.w	r8, r2, r9
 8021788:	464a      	movge	r2, r9
 802178a:	bfb8      	it	lt
 802178c:	2200      	movlt	r2, #0
 802178e:	e73c      	b.n	802160a <_dtoa_r+0x632>
 8021790:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021794:	9f07      	ldr	r7, [sp, #28]
 8021796:	461c      	mov	r4, r3
 8021798:	e744      	b.n	8021624 <_dtoa_r+0x64c>
 802179a:	461a      	mov	r2, r3
 802179c:	e770      	b.n	8021680 <_dtoa_r+0x6a8>
 802179e:	9b06      	ldr	r3, [sp, #24]
 80217a0:	2b01      	cmp	r3, #1
 80217a2:	dc18      	bgt.n	80217d6 <_dtoa_r+0x7fe>
 80217a4:	9b02      	ldr	r3, [sp, #8]
 80217a6:	b9b3      	cbnz	r3, 80217d6 <_dtoa_r+0x7fe>
 80217a8:	9b03      	ldr	r3, [sp, #12]
 80217aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80217ae:	b9a2      	cbnz	r2, 80217da <_dtoa_r+0x802>
 80217b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80217b4:	0d12      	lsrs	r2, r2, #20
 80217b6:	0512      	lsls	r2, r2, #20
 80217b8:	b18a      	cbz	r2, 80217de <_dtoa_r+0x806>
 80217ba:	9b04      	ldr	r3, [sp, #16]
 80217bc:	3301      	adds	r3, #1
 80217be:	9304      	str	r3, [sp, #16]
 80217c0:	9b05      	ldr	r3, [sp, #20]
 80217c2:	3301      	adds	r3, #1
 80217c4:	9305      	str	r3, [sp, #20]
 80217c6:	2301      	movs	r3, #1
 80217c8:	9309      	str	r3, [sp, #36]	; 0x24
 80217ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	f47f af70 	bne.w	80216b2 <_dtoa_r+0x6da>
 80217d2:	2001      	movs	r0, #1
 80217d4:	e775      	b.n	80216c2 <_dtoa_r+0x6ea>
 80217d6:	2300      	movs	r3, #0
 80217d8:	e7f6      	b.n	80217c8 <_dtoa_r+0x7f0>
 80217da:	9b02      	ldr	r3, [sp, #8]
 80217dc:	e7f4      	b.n	80217c8 <_dtoa_r+0x7f0>
 80217de:	9209      	str	r2, [sp, #36]	; 0x24
 80217e0:	e7f3      	b.n	80217ca <_dtoa_r+0x7f2>
 80217e2:	d082      	beq.n	80216ea <_dtoa_r+0x712>
 80217e4:	9b04      	ldr	r3, [sp, #16]
 80217e6:	321c      	adds	r2, #28
 80217e8:	4413      	add	r3, r2
 80217ea:	9304      	str	r3, [sp, #16]
 80217ec:	9b05      	ldr	r3, [sp, #20]
 80217ee:	4490      	add	r8, r2
 80217f0:	4413      	add	r3, r2
 80217f2:	e779      	b.n	80216e8 <_dtoa_r+0x710>
 80217f4:	4602      	mov	r2, r0
 80217f6:	e7f5      	b.n	80217e4 <_dtoa_r+0x80c>
 80217f8:	f1b9 0f00 	cmp.w	r9, #0
 80217fc:	dc36      	bgt.n	802186c <_dtoa_r+0x894>
 80217fe:	9b06      	ldr	r3, [sp, #24]
 8021800:	2b02      	cmp	r3, #2
 8021802:	dd33      	ble.n	802186c <_dtoa_r+0x894>
 8021804:	46ca      	mov	sl, r9
 8021806:	f1ba 0f00 	cmp.w	sl, #0
 802180a:	d10d      	bne.n	8021828 <_dtoa_r+0x850>
 802180c:	4621      	mov	r1, r4
 802180e:	4653      	mov	r3, sl
 8021810:	2205      	movs	r2, #5
 8021812:	4630      	mov	r0, r6
 8021814:	f000 fa06 	bl	8021c24 <__multadd>
 8021818:	4601      	mov	r1, r0
 802181a:	4604      	mov	r4, r0
 802181c:	4628      	mov	r0, r5
 802181e:	f000 fc65 	bl	80220ec <__mcmp>
 8021822:	2800      	cmp	r0, #0
 8021824:	f73f ade4 	bgt.w	80213f0 <_dtoa_r+0x418>
 8021828:	9b08      	ldr	r3, [sp, #32]
 802182a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802182e:	ea6f 0b03 	mvn.w	fp, r3
 8021832:	f04f 0900 	mov.w	r9, #0
 8021836:	4621      	mov	r1, r4
 8021838:	4630      	mov	r0, r6
 802183a:	f000 f9d1 	bl	8021be0 <_Bfree>
 802183e:	2f00      	cmp	r7, #0
 8021840:	f43f aea1 	beq.w	8021586 <_dtoa_r+0x5ae>
 8021844:	f1b9 0f00 	cmp.w	r9, #0
 8021848:	d005      	beq.n	8021856 <_dtoa_r+0x87e>
 802184a:	45b9      	cmp	r9, r7
 802184c:	d003      	beq.n	8021856 <_dtoa_r+0x87e>
 802184e:	4649      	mov	r1, r9
 8021850:	4630      	mov	r0, r6
 8021852:	f000 f9c5 	bl	8021be0 <_Bfree>
 8021856:	4639      	mov	r1, r7
 8021858:	4630      	mov	r0, r6
 802185a:	f000 f9c1 	bl	8021be0 <_Bfree>
 802185e:	e692      	b.n	8021586 <_dtoa_r+0x5ae>
 8021860:	2400      	movs	r4, #0
 8021862:	4627      	mov	r7, r4
 8021864:	e7e0      	b.n	8021828 <_dtoa_r+0x850>
 8021866:	4693      	mov	fp, r2
 8021868:	4627      	mov	r7, r4
 802186a:	e5c1      	b.n	80213f0 <_dtoa_r+0x418>
 802186c:	9b07      	ldr	r3, [sp, #28]
 802186e:	46ca      	mov	sl, r9
 8021870:	2b00      	cmp	r3, #0
 8021872:	f000 8100 	beq.w	8021a76 <_dtoa_r+0xa9e>
 8021876:	f1b8 0f00 	cmp.w	r8, #0
 802187a:	dd05      	ble.n	8021888 <_dtoa_r+0x8b0>
 802187c:	4639      	mov	r1, r7
 802187e:	4642      	mov	r2, r8
 8021880:	4630      	mov	r0, r6
 8021882:	f000 fbc7 	bl	8022014 <__lshift>
 8021886:	4607      	mov	r7, r0
 8021888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802188a:	2b00      	cmp	r3, #0
 802188c:	d05d      	beq.n	802194a <_dtoa_r+0x972>
 802188e:	6879      	ldr	r1, [r7, #4]
 8021890:	4630      	mov	r0, r6
 8021892:	f000 f965 	bl	8021b60 <_Balloc>
 8021896:	4680      	mov	r8, r0
 8021898:	b928      	cbnz	r0, 80218a6 <_dtoa_r+0x8ce>
 802189a:	4b82      	ldr	r3, [pc, #520]	; (8021aa4 <_dtoa_r+0xacc>)
 802189c:	4602      	mov	r2, r0
 802189e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80218a2:	f7ff bbb1 	b.w	8021008 <_dtoa_r+0x30>
 80218a6:	693a      	ldr	r2, [r7, #16]
 80218a8:	3202      	adds	r2, #2
 80218aa:	0092      	lsls	r2, r2, #2
 80218ac:	f107 010c 	add.w	r1, r7, #12
 80218b0:	300c      	adds	r0, #12
 80218b2:	f7ff fad4 	bl	8020e5e <memcpy>
 80218b6:	2201      	movs	r2, #1
 80218b8:	4641      	mov	r1, r8
 80218ba:	4630      	mov	r0, r6
 80218bc:	f000 fbaa 	bl	8022014 <__lshift>
 80218c0:	9b01      	ldr	r3, [sp, #4]
 80218c2:	3301      	adds	r3, #1
 80218c4:	9304      	str	r3, [sp, #16]
 80218c6:	9b01      	ldr	r3, [sp, #4]
 80218c8:	4453      	add	r3, sl
 80218ca:	9308      	str	r3, [sp, #32]
 80218cc:	9b02      	ldr	r3, [sp, #8]
 80218ce:	f003 0301 	and.w	r3, r3, #1
 80218d2:	46b9      	mov	r9, r7
 80218d4:	9307      	str	r3, [sp, #28]
 80218d6:	4607      	mov	r7, r0
 80218d8:	9b04      	ldr	r3, [sp, #16]
 80218da:	4621      	mov	r1, r4
 80218dc:	3b01      	subs	r3, #1
 80218de:	4628      	mov	r0, r5
 80218e0:	9302      	str	r3, [sp, #8]
 80218e2:	f7ff faef 	bl	8020ec4 <quorem>
 80218e6:	4603      	mov	r3, r0
 80218e8:	3330      	adds	r3, #48	; 0x30
 80218ea:	9005      	str	r0, [sp, #20]
 80218ec:	4649      	mov	r1, r9
 80218ee:	4628      	mov	r0, r5
 80218f0:	9309      	str	r3, [sp, #36]	; 0x24
 80218f2:	f000 fbfb 	bl	80220ec <__mcmp>
 80218f6:	463a      	mov	r2, r7
 80218f8:	4682      	mov	sl, r0
 80218fa:	4621      	mov	r1, r4
 80218fc:	4630      	mov	r0, r6
 80218fe:	f000 fc11 	bl	8022124 <__mdiff>
 8021902:	68c2      	ldr	r2, [r0, #12]
 8021904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021906:	4680      	mov	r8, r0
 8021908:	bb0a      	cbnz	r2, 802194e <_dtoa_r+0x976>
 802190a:	4601      	mov	r1, r0
 802190c:	4628      	mov	r0, r5
 802190e:	f000 fbed 	bl	80220ec <__mcmp>
 8021912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021914:	4602      	mov	r2, r0
 8021916:	4641      	mov	r1, r8
 8021918:	4630      	mov	r0, r6
 802191a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802191e:	f000 f95f 	bl	8021be0 <_Bfree>
 8021922:	9b06      	ldr	r3, [sp, #24]
 8021924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021926:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802192a:	ea43 0102 	orr.w	r1, r3, r2
 802192e:	9b07      	ldr	r3, [sp, #28]
 8021930:	4319      	orrs	r1, r3
 8021932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021934:	d10d      	bne.n	8021952 <_dtoa_r+0x97a>
 8021936:	2b39      	cmp	r3, #57	; 0x39
 8021938:	d029      	beq.n	802198e <_dtoa_r+0x9b6>
 802193a:	f1ba 0f00 	cmp.w	sl, #0
 802193e:	dd01      	ble.n	8021944 <_dtoa_r+0x96c>
 8021940:	9b05      	ldr	r3, [sp, #20]
 8021942:	3331      	adds	r3, #49	; 0x31
 8021944:	9a02      	ldr	r2, [sp, #8]
 8021946:	7013      	strb	r3, [r2, #0]
 8021948:	e775      	b.n	8021836 <_dtoa_r+0x85e>
 802194a:	4638      	mov	r0, r7
 802194c:	e7b8      	b.n	80218c0 <_dtoa_r+0x8e8>
 802194e:	2201      	movs	r2, #1
 8021950:	e7e1      	b.n	8021916 <_dtoa_r+0x93e>
 8021952:	f1ba 0f00 	cmp.w	sl, #0
 8021956:	db06      	blt.n	8021966 <_dtoa_r+0x98e>
 8021958:	9906      	ldr	r1, [sp, #24]
 802195a:	ea41 0a0a 	orr.w	sl, r1, sl
 802195e:	9907      	ldr	r1, [sp, #28]
 8021960:	ea5a 0a01 	orrs.w	sl, sl, r1
 8021964:	d120      	bne.n	80219a8 <_dtoa_r+0x9d0>
 8021966:	2a00      	cmp	r2, #0
 8021968:	ddec      	ble.n	8021944 <_dtoa_r+0x96c>
 802196a:	4629      	mov	r1, r5
 802196c:	2201      	movs	r2, #1
 802196e:	4630      	mov	r0, r6
 8021970:	9304      	str	r3, [sp, #16]
 8021972:	f000 fb4f 	bl	8022014 <__lshift>
 8021976:	4621      	mov	r1, r4
 8021978:	4605      	mov	r5, r0
 802197a:	f000 fbb7 	bl	80220ec <__mcmp>
 802197e:	2800      	cmp	r0, #0
 8021980:	9b04      	ldr	r3, [sp, #16]
 8021982:	dc02      	bgt.n	802198a <_dtoa_r+0x9b2>
 8021984:	d1de      	bne.n	8021944 <_dtoa_r+0x96c>
 8021986:	07da      	lsls	r2, r3, #31
 8021988:	d5dc      	bpl.n	8021944 <_dtoa_r+0x96c>
 802198a:	2b39      	cmp	r3, #57	; 0x39
 802198c:	d1d8      	bne.n	8021940 <_dtoa_r+0x968>
 802198e:	9a02      	ldr	r2, [sp, #8]
 8021990:	2339      	movs	r3, #57	; 0x39
 8021992:	7013      	strb	r3, [r2, #0]
 8021994:	4643      	mov	r3, r8
 8021996:	4698      	mov	r8, r3
 8021998:	3b01      	subs	r3, #1
 802199a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802199e:	2a39      	cmp	r2, #57	; 0x39
 80219a0:	d051      	beq.n	8021a46 <_dtoa_r+0xa6e>
 80219a2:	3201      	adds	r2, #1
 80219a4:	701a      	strb	r2, [r3, #0]
 80219a6:	e746      	b.n	8021836 <_dtoa_r+0x85e>
 80219a8:	2a00      	cmp	r2, #0
 80219aa:	dd03      	ble.n	80219b4 <_dtoa_r+0x9dc>
 80219ac:	2b39      	cmp	r3, #57	; 0x39
 80219ae:	d0ee      	beq.n	802198e <_dtoa_r+0x9b6>
 80219b0:	3301      	adds	r3, #1
 80219b2:	e7c7      	b.n	8021944 <_dtoa_r+0x96c>
 80219b4:	9a04      	ldr	r2, [sp, #16]
 80219b6:	9908      	ldr	r1, [sp, #32]
 80219b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80219bc:	428a      	cmp	r2, r1
 80219be:	d02b      	beq.n	8021a18 <_dtoa_r+0xa40>
 80219c0:	4629      	mov	r1, r5
 80219c2:	2300      	movs	r3, #0
 80219c4:	220a      	movs	r2, #10
 80219c6:	4630      	mov	r0, r6
 80219c8:	f000 f92c 	bl	8021c24 <__multadd>
 80219cc:	45b9      	cmp	r9, r7
 80219ce:	4605      	mov	r5, r0
 80219d0:	f04f 0300 	mov.w	r3, #0
 80219d4:	f04f 020a 	mov.w	r2, #10
 80219d8:	4649      	mov	r1, r9
 80219da:	4630      	mov	r0, r6
 80219dc:	d107      	bne.n	80219ee <_dtoa_r+0xa16>
 80219de:	f000 f921 	bl	8021c24 <__multadd>
 80219e2:	4681      	mov	r9, r0
 80219e4:	4607      	mov	r7, r0
 80219e6:	9b04      	ldr	r3, [sp, #16]
 80219e8:	3301      	adds	r3, #1
 80219ea:	9304      	str	r3, [sp, #16]
 80219ec:	e774      	b.n	80218d8 <_dtoa_r+0x900>
 80219ee:	f000 f919 	bl	8021c24 <__multadd>
 80219f2:	4639      	mov	r1, r7
 80219f4:	4681      	mov	r9, r0
 80219f6:	2300      	movs	r3, #0
 80219f8:	220a      	movs	r2, #10
 80219fa:	4630      	mov	r0, r6
 80219fc:	f000 f912 	bl	8021c24 <__multadd>
 8021a00:	4607      	mov	r7, r0
 8021a02:	e7f0      	b.n	80219e6 <_dtoa_r+0xa0e>
 8021a04:	f1ba 0f00 	cmp.w	sl, #0
 8021a08:	9a01      	ldr	r2, [sp, #4]
 8021a0a:	bfcc      	ite	gt
 8021a0c:	46d0      	movgt	r8, sl
 8021a0e:	f04f 0801 	movle.w	r8, #1
 8021a12:	4490      	add	r8, r2
 8021a14:	f04f 0900 	mov.w	r9, #0
 8021a18:	4629      	mov	r1, r5
 8021a1a:	2201      	movs	r2, #1
 8021a1c:	4630      	mov	r0, r6
 8021a1e:	9302      	str	r3, [sp, #8]
 8021a20:	f000 faf8 	bl	8022014 <__lshift>
 8021a24:	4621      	mov	r1, r4
 8021a26:	4605      	mov	r5, r0
 8021a28:	f000 fb60 	bl	80220ec <__mcmp>
 8021a2c:	2800      	cmp	r0, #0
 8021a2e:	dcb1      	bgt.n	8021994 <_dtoa_r+0x9bc>
 8021a30:	d102      	bne.n	8021a38 <_dtoa_r+0xa60>
 8021a32:	9b02      	ldr	r3, [sp, #8]
 8021a34:	07db      	lsls	r3, r3, #31
 8021a36:	d4ad      	bmi.n	8021994 <_dtoa_r+0x9bc>
 8021a38:	4643      	mov	r3, r8
 8021a3a:	4698      	mov	r8, r3
 8021a3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021a40:	2a30      	cmp	r2, #48	; 0x30
 8021a42:	d0fa      	beq.n	8021a3a <_dtoa_r+0xa62>
 8021a44:	e6f7      	b.n	8021836 <_dtoa_r+0x85e>
 8021a46:	9a01      	ldr	r2, [sp, #4]
 8021a48:	429a      	cmp	r2, r3
 8021a4a:	d1a4      	bne.n	8021996 <_dtoa_r+0x9be>
 8021a4c:	f10b 0b01 	add.w	fp, fp, #1
 8021a50:	2331      	movs	r3, #49	; 0x31
 8021a52:	e778      	b.n	8021946 <_dtoa_r+0x96e>
 8021a54:	4b14      	ldr	r3, [pc, #80]	; (8021aa8 <_dtoa_r+0xad0>)
 8021a56:	f7ff bb2a 	b.w	80210ae <_dtoa_r+0xd6>
 8021a5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	f47f ab05 	bne.w	802106c <_dtoa_r+0x94>
 8021a62:	4b12      	ldr	r3, [pc, #72]	; (8021aac <_dtoa_r+0xad4>)
 8021a64:	f7ff bb23 	b.w	80210ae <_dtoa_r+0xd6>
 8021a68:	f1ba 0f00 	cmp.w	sl, #0
 8021a6c:	dc03      	bgt.n	8021a76 <_dtoa_r+0xa9e>
 8021a6e:	9b06      	ldr	r3, [sp, #24]
 8021a70:	2b02      	cmp	r3, #2
 8021a72:	f73f aec8 	bgt.w	8021806 <_dtoa_r+0x82e>
 8021a76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021a7a:	4621      	mov	r1, r4
 8021a7c:	4628      	mov	r0, r5
 8021a7e:	f7ff fa21 	bl	8020ec4 <quorem>
 8021a82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021a86:	f808 3b01 	strb.w	r3, [r8], #1
 8021a8a:	9a01      	ldr	r2, [sp, #4]
 8021a8c:	eba8 0202 	sub.w	r2, r8, r2
 8021a90:	4592      	cmp	sl, r2
 8021a92:	ddb7      	ble.n	8021a04 <_dtoa_r+0xa2c>
 8021a94:	4629      	mov	r1, r5
 8021a96:	2300      	movs	r3, #0
 8021a98:	220a      	movs	r2, #10
 8021a9a:	4630      	mov	r0, r6
 8021a9c:	f000 f8c2 	bl	8021c24 <__multadd>
 8021aa0:	4605      	mov	r5, r0
 8021aa2:	e7ea      	b.n	8021a7a <_dtoa_r+0xaa2>
 8021aa4:	08025b3e 	.word	0x08025b3e
 8021aa8:	08025a74 	.word	0x08025a74
 8021aac:	08025ad9 	.word	0x08025ad9

08021ab0 <__env_lock>:
 8021ab0:	4801      	ldr	r0, [pc, #4]	; (8021ab8 <__env_lock+0x8>)
 8021ab2:	f7ff b9ca 	b.w	8020e4a <__retarget_lock_acquire_recursive>
 8021ab6:	bf00      	nop
 8021ab8:	20016e74 	.word	0x20016e74

08021abc <__env_unlock>:
 8021abc:	4801      	ldr	r0, [pc, #4]	; (8021ac4 <__env_unlock+0x8>)
 8021abe:	f7ff b9c5 	b.w	8020e4c <__retarget_lock_release_recursive>
 8021ac2:	bf00      	nop
 8021ac4:	20016e74 	.word	0x20016e74

08021ac8 <_free_r>:
 8021ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021aca:	2900      	cmp	r1, #0
 8021acc:	d044      	beq.n	8021b58 <_free_r+0x90>
 8021ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021ad2:	9001      	str	r0, [sp, #4]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	f1a1 0404 	sub.w	r4, r1, #4
 8021ada:	bfb8      	it	lt
 8021adc:	18e4      	addlt	r4, r4, r3
 8021ade:	f7fd fdbd 	bl	801f65c <__malloc_lock>
 8021ae2:	4a1e      	ldr	r2, [pc, #120]	; (8021b5c <_free_r+0x94>)
 8021ae4:	9801      	ldr	r0, [sp, #4]
 8021ae6:	6813      	ldr	r3, [r2, #0]
 8021ae8:	b933      	cbnz	r3, 8021af8 <_free_r+0x30>
 8021aea:	6063      	str	r3, [r4, #4]
 8021aec:	6014      	str	r4, [r2, #0]
 8021aee:	b003      	add	sp, #12
 8021af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021af4:	f7fd bdb8 	b.w	801f668 <__malloc_unlock>
 8021af8:	42a3      	cmp	r3, r4
 8021afa:	d908      	bls.n	8021b0e <_free_r+0x46>
 8021afc:	6825      	ldr	r5, [r4, #0]
 8021afe:	1961      	adds	r1, r4, r5
 8021b00:	428b      	cmp	r3, r1
 8021b02:	bf01      	itttt	eq
 8021b04:	6819      	ldreq	r1, [r3, #0]
 8021b06:	685b      	ldreq	r3, [r3, #4]
 8021b08:	1949      	addeq	r1, r1, r5
 8021b0a:	6021      	streq	r1, [r4, #0]
 8021b0c:	e7ed      	b.n	8021aea <_free_r+0x22>
 8021b0e:	461a      	mov	r2, r3
 8021b10:	685b      	ldr	r3, [r3, #4]
 8021b12:	b10b      	cbz	r3, 8021b18 <_free_r+0x50>
 8021b14:	42a3      	cmp	r3, r4
 8021b16:	d9fa      	bls.n	8021b0e <_free_r+0x46>
 8021b18:	6811      	ldr	r1, [r2, #0]
 8021b1a:	1855      	adds	r5, r2, r1
 8021b1c:	42a5      	cmp	r5, r4
 8021b1e:	d10b      	bne.n	8021b38 <_free_r+0x70>
 8021b20:	6824      	ldr	r4, [r4, #0]
 8021b22:	4421      	add	r1, r4
 8021b24:	1854      	adds	r4, r2, r1
 8021b26:	42a3      	cmp	r3, r4
 8021b28:	6011      	str	r1, [r2, #0]
 8021b2a:	d1e0      	bne.n	8021aee <_free_r+0x26>
 8021b2c:	681c      	ldr	r4, [r3, #0]
 8021b2e:	685b      	ldr	r3, [r3, #4]
 8021b30:	6053      	str	r3, [r2, #4]
 8021b32:	440c      	add	r4, r1
 8021b34:	6014      	str	r4, [r2, #0]
 8021b36:	e7da      	b.n	8021aee <_free_r+0x26>
 8021b38:	d902      	bls.n	8021b40 <_free_r+0x78>
 8021b3a:	230c      	movs	r3, #12
 8021b3c:	6003      	str	r3, [r0, #0]
 8021b3e:	e7d6      	b.n	8021aee <_free_r+0x26>
 8021b40:	6825      	ldr	r5, [r4, #0]
 8021b42:	1961      	adds	r1, r4, r5
 8021b44:	428b      	cmp	r3, r1
 8021b46:	bf04      	itt	eq
 8021b48:	6819      	ldreq	r1, [r3, #0]
 8021b4a:	685b      	ldreq	r3, [r3, #4]
 8021b4c:	6063      	str	r3, [r4, #4]
 8021b4e:	bf04      	itt	eq
 8021b50:	1949      	addeq	r1, r1, r5
 8021b52:	6021      	streq	r1, [r4, #0]
 8021b54:	6054      	str	r4, [r2, #4]
 8021b56:	e7ca      	b.n	8021aee <_free_r+0x26>
 8021b58:	b003      	add	sp, #12
 8021b5a:	bd30      	pop	{r4, r5, pc}
 8021b5c:	20016d2c 	.word	0x20016d2c

08021b60 <_Balloc>:
 8021b60:	b570      	push	{r4, r5, r6, lr}
 8021b62:	69c6      	ldr	r6, [r0, #28]
 8021b64:	4604      	mov	r4, r0
 8021b66:	460d      	mov	r5, r1
 8021b68:	b976      	cbnz	r6, 8021b88 <_Balloc+0x28>
 8021b6a:	2010      	movs	r0, #16
 8021b6c:	f7fd fcc6 	bl	801f4fc <malloc>
 8021b70:	4602      	mov	r2, r0
 8021b72:	61e0      	str	r0, [r4, #28]
 8021b74:	b920      	cbnz	r0, 8021b80 <_Balloc+0x20>
 8021b76:	4b18      	ldr	r3, [pc, #96]	; (8021bd8 <_Balloc+0x78>)
 8021b78:	4818      	ldr	r0, [pc, #96]	; (8021bdc <_Balloc+0x7c>)
 8021b7a:	216b      	movs	r1, #107	; 0x6b
 8021b7c:	f7ff f984 	bl	8020e88 <__assert_func>
 8021b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021b84:	6006      	str	r6, [r0, #0]
 8021b86:	60c6      	str	r6, [r0, #12]
 8021b88:	69e6      	ldr	r6, [r4, #28]
 8021b8a:	68f3      	ldr	r3, [r6, #12]
 8021b8c:	b183      	cbz	r3, 8021bb0 <_Balloc+0x50>
 8021b8e:	69e3      	ldr	r3, [r4, #28]
 8021b90:	68db      	ldr	r3, [r3, #12]
 8021b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021b96:	b9b8      	cbnz	r0, 8021bc8 <_Balloc+0x68>
 8021b98:	2101      	movs	r1, #1
 8021b9a:	fa01 f605 	lsl.w	r6, r1, r5
 8021b9e:	1d72      	adds	r2, r6, #5
 8021ba0:	0092      	lsls	r2, r2, #2
 8021ba2:	4620      	mov	r0, r4
 8021ba4:	f7fd fc3a 	bl	801f41c <_calloc_r>
 8021ba8:	b160      	cbz	r0, 8021bc4 <_Balloc+0x64>
 8021baa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021bae:	e00e      	b.n	8021bce <_Balloc+0x6e>
 8021bb0:	2221      	movs	r2, #33	; 0x21
 8021bb2:	2104      	movs	r1, #4
 8021bb4:	4620      	mov	r0, r4
 8021bb6:	f7fd fc31 	bl	801f41c <_calloc_r>
 8021bba:	69e3      	ldr	r3, [r4, #28]
 8021bbc:	60f0      	str	r0, [r6, #12]
 8021bbe:	68db      	ldr	r3, [r3, #12]
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	d1e4      	bne.n	8021b8e <_Balloc+0x2e>
 8021bc4:	2000      	movs	r0, #0
 8021bc6:	bd70      	pop	{r4, r5, r6, pc}
 8021bc8:	6802      	ldr	r2, [r0, #0]
 8021bca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021bce:	2300      	movs	r3, #0
 8021bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021bd4:	e7f7      	b.n	8021bc6 <_Balloc+0x66>
 8021bd6:	bf00      	nop
 8021bd8:	080258f4 	.word	0x080258f4
 8021bdc:	08025b4f 	.word	0x08025b4f

08021be0 <_Bfree>:
 8021be0:	b570      	push	{r4, r5, r6, lr}
 8021be2:	69c6      	ldr	r6, [r0, #28]
 8021be4:	4605      	mov	r5, r0
 8021be6:	460c      	mov	r4, r1
 8021be8:	b976      	cbnz	r6, 8021c08 <_Bfree+0x28>
 8021bea:	2010      	movs	r0, #16
 8021bec:	f7fd fc86 	bl	801f4fc <malloc>
 8021bf0:	4602      	mov	r2, r0
 8021bf2:	61e8      	str	r0, [r5, #28]
 8021bf4:	b920      	cbnz	r0, 8021c00 <_Bfree+0x20>
 8021bf6:	4b09      	ldr	r3, [pc, #36]	; (8021c1c <_Bfree+0x3c>)
 8021bf8:	4809      	ldr	r0, [pc, #36]	; (8021c20 <_Bfree+0x40>)
 8021bfa:	218f      	movs	r1, #143	; 0x8f
 8021bfc:	f7ff f944 	bl	8020e88 <__assert_func>
 8021c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021c04:	6006      	str	r6, [r0, #0]
 8021c06:	60c6      	str	r6, [r0, #12]
 8021c08:	b13c      	cbz	r4, 8021c1a <_Bfree+0x3a>
 8021c0a:	69eb      	ldr	r3, [r5, #28]
 8021c0c:	6862      	ldr	r2, [r4, #4]
 8021c0e:	68db      	ldr	r3, [r3, #12]
 8021c10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021c14:	6021      	str	r1, [r4, #0]
 8021c16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021c1a:	bd70      	pop	{r4, r5, r6, pc}
 8021c1c:	080258f4 	.word	0x080258f4
 8021c20:	08025b4f 	.word	0x08025b4f

08021c24 <__multadd>:
 8021c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c28:	690d      	ldr	r5, [r1, #16]
 8021c2a:	4607      	mov	r7, r0
 8021c2c:	460c      	mov	r4, r1
 8021c2e:	461e      	mov	r6, r3
 8021c30:	f101 0c14 	add.w	ip, r1, #20
 8021c34:	2000      	movs	r0, #0
 8021c36:	f8dc 3000 	ldr.w	r3, [ip]
 8021c3a:	b299      	uxth	r1, r3
 8021c3c:	fb02 6101 	mla	r1, r2, r1, r6
 8021c40:	0c1e      	lsrs	r6, r3, #16
 8021c42:	0c0b      	lsrs	r3, r1, #16
 8021c44:	fb02 3306 	mla	r3, r2, r6, r3
 8021c48:	b289      	uxth	r1, r1
 8021c4a:	3001      	adds	r0, #1
 8021c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021c50:	4285      	cmp	r5, r0
 8021c52:	f84c 1b04 	str.w	r1, [ip], #4
 8021c56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021c5a:	dcec      	bgt.n	8021c36 <__multadd+0x12>
 8021c5c:	b30e      	cbz	r6, 8021ca2 <__multadd+0x7e>
 8021c5e:	68a3      	ldr	r3, [r4, #8]
 8021c60:	42ab      	cmp	r3, r5
 8021c62:	dc19      	bgt.n	8021c98 <__multadd+0x74>
 8021c64:	6861      	ldr	r1, [r4, #4]
 8021c66:	4638      	mov	r0, r7
 8021c68:	3101      	adds	r1, #1
 8021c6a:	f7ff ff79 	bl	8021b60 <_Balloc>
 8021c6e:	4680      	mov	r8, r0
 8021c70:	b928      	cbnz	r0, 8021c7e <__multadd+0x5a>
 8021c72:	4602      	mov	r2, r0
 8021c74:	4b0c      	ldr	r3, [pc, #48]	; (8021ca8 <__multadd+0x84>)
 8021c76:	480d      	ldr	r0, [pc, #52]	; (8021cac <__multadd+0x88>)
 8021c78:	21ba      	movs	r1, #186	; 0xba
 8021c7a:	f7ff f905 	bl	8020e88 <__assert_func>
 8021c7e:	6922      	ldr	r2, [r4, #16]
 8021c80:	3202      	adds	r2, #2
 8021c82:	f104 010c 	add.w	r1, r4, #12
 8021c86:	0092      	lsls	r2, r2, #2
 8021c88:	300c      	adds	r0, #12
 8021c8a:	f7ff f8e8 	bl	8020e5e <memcpy>
 8021c8e:	4621      	mov	r1, r4
 8021c90:	4638      	mov	r0, r7
 8021c92:	f7ff ffa5 	bl	8021be0 <_Bfree>
 8021c96:	4644      	mov	r4, r8
 8021c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021c9c:	3501      	adds	r5, #1
 8021c9e:	615e      	str	r6, [r3, #20]
 8021ca0:	6125      	str	r5, [r4, #16]
 8021ca2:	4620      	mov	r0, r4
 8021ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021ca8:	08025b3e 	.word	0x08025b3e
 8021cac:	08025b4f 	.word	0x08025b4f

08021cb0 <__s2b>:
 8021cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021cb4:	460c      	mov	r4, r1
 8021cb6:	4615      	mov	r5, r2
 8021cb8:	461f      	mov	r7, r3
 8021cba:	2209      	movs	r2, #9
 8021cbc:	3308      	adds	r3, #8
 8021cbe:	4606      	mov	r6, r0
 8021cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8021cc4:	2100      	movs	r1, #0
 8021cc6:	2201      	movs	r2, #1
 8021cc8:	429a      	cmp	r2, r3
 8021cca:	db09      	blt.n	8021ce0 <__s2b+0x30>
 8021ccc:	4630      	mov	r0, r6
 8021cce:	f7ff ff47 	bl	8021b60 <_Balloc>
 8021cd2:	b940      	cbnz	r0, 8021ce6 <__s2b+0x36>
 8021cd4:	4602      	mov	r2, r0
 8021cd6:	4b19      	ldr	r3, [pc, #100]	; (8021d3c <__s2b+0x8c>)
 8021cd8:	4819      	ldr	r0, [pc, #100]	; (8021d40 <__s2b+0x90>)
 8021cda:	21d3      	movs	r1, #211	; 0xd3
 8021cdc:	f7ff f8d4 	bl	8020e88 <__assert_func>
 8021ce0:	0052      	lsls	r2, r2, #1
 8021ce2:	3101      	adds	r1, #1
 8021ce4:	e7f0      	b.n	8021cc8 <__s2b+0x18>
 8021ce6:	9b08      	ldr	r3, [sp, #32]
 8021ce8:	6143      	str	r3, [r0, #20]
 8021cea:	2d09      	cmp	r5, #9
 8021cec:	f04f 0301 	mov.w	r3, #1
 8021cf0:	6103      	str	r3, [r0, #16]
 8021cf2:	dd16      	ble.n	8021d22 <__s2b+0x72>
 8021cf4:	f104 0909 	add.w	r9, r4, #9
 8021cf8:	46c8      	mov	r8, r9
 8021cfa:	442c      	add	r4, r5
 8021cfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021d00:	4601      	mov	r1, r0
 8021d02:	3b30      	subs	r3, #48	; 0x30
 8021d04:	220a      	movs	r2, #10
 8021d06:	4630      	mov	r0, r6
 8021d08:	f7ff ff8c 	bl	8021c24 <__multadd>
 8021d0c:	45a0      	cmp	r8, r4
 8021d0e:	d1f5      	bne.n	8021cfc <__s2b+0x4c>
 8021d10:	f1a5 0408 	sub.w	r4, r5, #8
 8021d14:	444c      	add	r4, r9
 8021d16:	1b2d      	subs	r5, r5, r4
 8021d18:	1963      	adds	r3, r4, r5
 8021d1a:	42bb      	cmp	r3, r7
 8021d1c:	db04      	blt.n	8021d28 <__s2b+0x78>
 8021d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d22:	340a      	adds	r4, #10
 8021d24:	2509      	movs	r5, #9
 8021d26:	e7f6      	b.n	8021d16 <__s2b+0x66>
 8021d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021d2c:	4601      	mov	r1, r0
 8021d2e:	3b30      	subs	r3, #48	; 0x30
 8021d30:	220a      	movs	r2, #10
 8021d32:	4630      	mov	r0, r6
 8021d34:	f7ff ff76 	bl	8021c24 <__multadd>
 8021d38:	e7ee      	b.n	8021d18 <__s2b+0x68>
 8021d3a:	bf00      	nop
 8021d3c:	08025b3e 	.word	0x08025b3e
 8021d40:	08025b4f 	.word	0x08025b4f

08021d44 <__hi0bits>:
 8021d44:	0c03      	lsrs	r3, r0, #16
 8021d46:	041b      	lsls	r3, r3, #16
 8021d48:	b9d3      	cbnz	r3, 8021d80 <__hi0bits+0x3c>
 8021d4a:	0400      	lsls	r0, r0, #16
 8021d4c:	2310      	movs	r3, #16
 8021d4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021d52:	bf04      	itt	eq
 8021d54:	0200      	lsleq	r0, r0, #8
 8021d56:	3308      	addeq	r3, #8
 8021d58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021d5c:	bf04      	itt	eq
 8021d5e:	0100      	lsleq	r0, r0, #4
 8021d60:	3304      	addeq	r3, #4
 8021d62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021d66:	bf04      	itt	eq
 8021d68:	0080      	lsleq	r0, r0, #2
 8021d6a:	3302      	addeq	r3, #2
 8021d6c:	2800      	cmp	r0, #0
 8021d6e:	db05      	blt.n	8021d7c <__hi0bits+0x38>
 8021d70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021d74:	f103 0301 	add.w	r3, r3, #1
 8021d78:	bf08      	it	eq
 8021d7a:	2320      	moveq	r3, #32
 8021d7c:	4618      	mov	r0, r3
 8021d7e:	4770      	bx	lr
 8021d80:	2300      	movs	r3, #0
 8021d82:	e7e4      	b.n	8021d4e <__hi0bits+0xa>

08021d84 <__lo0bits>:
 8021d84:	6803      	ldr	r3, [r0, #0]
 8021d86:	f013 0207 	ands.w	r2, r3, #7
 8021d8a:	d00c      	beq.n	8021da6 <__lo0bits+0x22>
 8021d8c:	07d9      	lsls	r1, r3, #31
 8021d8e:	d422      	bmi.n	8021dd6 <__lo0bits+0x52>
 8021d90:	079a      	lsls	r2, r3, #30
 8021d92:	bf49      	itett	mi
 8021d94:	085b      	lsrmi	r3, r3, #1
 8021d96:	089b      	lsrpl	r3, r3, #2
 8021d98:	6003      	strmi	r3, [r0, #0]
 8021d9a:	2201      	movmi	r2, #1
 8021d9c:	bf5c      	itt	pl
 8021d9e:	6003      	strpl	r3, [r0, #0]
 8021da0:	2202      	movpl	r2, #2
 8021da2:	4610      	mov	r0, r2
 8021da4:	4770      	bx	lr
 8021da6:	b299      	uxth	r1, r3
 8021da8:	b909      	cbnz	r1, 8021dae <__lo0bits+0x2a>
 8021daa:	0c1b      	lsrs	r3, r3, #16
 8021dac:	2210      	movs	r2, #16
 8021dae:	b2d9      	uxtb	r1, r3
 8021db0:	b909      	cbnz	r1, 8021db6 <__lo0bits+0x32>
 8021db2:	3208      	adds	r2, #8
 8021db4:	0a1b      	lsrs	r3, r3, #8
 8021db6:	0719      	lsls	r1, r3, #28
 8021db8:	bf04      	itt	eq
 8021dba:	091b      	lsreq	r3, r3, #4
 8021dbc:	3204      	addeq	r2, #4
 8021dbe:	0799      	lsls	r1, r3, #30
 8021dc0:	bf04      	itt	eq
 8021dc2:	089b      	lsreq	r3, r3, #2
 8021dc4:	3202      	addeq	r2, #2
 8021dc6:	07d9      	lsls	r1, r3, #31
 8021dc8:	d403      	bmi.n	8021dd2 <__lo0bits+0x4e>
 8021dca:	085b      	lsrs	r3, r3, #1
 8021dcc:	f102 0201 	add.w	r2, r2, #1
 8021dd0:	d003      	beq.n	8021dda <__lo0bits+0x56>
 8021dd2:	6003      	str	r3, [r0, #0]
 8021dd4:	e7e5      	b.n	8021da2 <__lo0bits+0x1e>
 8021dd6:	2200      	movs	r2, #0
 8021dd8:	e7e3      	b.n	8021da2 <__lo0bits+0x1e>
 8021dda:	2220      	movs	r2, #32
 8021ddc:	e7e1      	b.n	8021da2 <__lo0bits+0x1e>
	...

08021de0 <__i2b>:
 8021de0:	b510      	push	{r4, lr}
 8021de2:	460c      	mov	r4, r1
 8021de4:	2101      	movs	r1, #1
 8021de6:	f7ff febb 	bl	8021b60 <_Balloc>
 8021dea:	4602      	mov	r2, r0
 8021dec:	b928      	cbnz	r0, 8021dfa <__i2b+0x1a>
 8021dee:	4b05      	ldr	r3, [pc, #20]	; (8021e04 <__i2b+0x24>)
 8021df0:	4805      	ldr	r0, [pc, #20]	; (8021e08 <__i2b+0x28>)
 8021df2:	f240 1145 	movw	r1, #325	; 0x145
 8021df6:	f7ff f847 	bl	8020e88 <__assert_func>
 8021dfa:	2301      	movs	r3, #1
 8021dfc:	6144      	str	r4, [r0, #20]
 8021dfe:	6103      	str	r3, [r0, #16]
 8021e00:	bd10      	pop	{r4, pc}
 8021e02:	bf00      	nop
 8021e04:	08025b3e 	.word	0x08025b3e
 8021e08:	08025b4f 	.word	0x08025b4f

08021e0c <__multiply>:
 8021e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e10:	4691      	mov	r9, r2
 8021e12:	690a      	ldr	r2, [r1, #16]
 8021e14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021e18:	429a      	cmp	r2, r3
 8021e1a:	bfb8      	it	lt
 8021e1c:	460b      	movlt	r3, r1
 8021e1e:	460c      	mov	r4, r1
 8021e20:	bfbc      	itt	lt
 8021e22:	464c      	movlt	r4, r9
 8021e24:	4699      	movlt	r9, r3
 8021e26:	6927      	ldr	r7, [r4, #16]
 8021e28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021e2c:	68a3      	ldr	r3, [r4, #8]
 8021e2e:	6861      	ldr	r1, [r4, #4]
 8021e30:	eb07 060a 	add.w	r6, r7, sl
 8021e34:	42b3      	cmp	r3, r6
 8021e36:	b085      	sub	sp, #20
 8021e38:	bfb8      	it	lt
 8021e3a:	3101      	addlt	r1, #1
 8021e3c:	f7ff fe90 	bl	8021b60 <_Balloc>
 8021e40:	b930      	cbnz	r0, 8021e50 <__multiply+0x44>
 8021e42:	4602      	mov	r2, r0
 8021e44:	4b44      	ldr	r3, [pc, #272]	; (8021f58 <__multiply+0x14c>)
 8021e46:	4845      	ldr	r0, [pc, #276]	; (8021f5c <__multiply+0x150>)
 8021e48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021e4c:	f7ff f81c 	bl	8020e88 <__assert_func>
 8021e50:	f100 0514 	add.w	r5, r0, #20
 8021e54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021e58:	462b      	mov	r3, r5
 8021e5a:	2200      	movs	r2, #0
 8021e5c:	4543      	cmp	r3, r8
 8021e5e:	d321      	bcc.n	8021ea4 <__multiply+0x98>
 8021e60:	f104 0314 	add.w	r3, r4, #20
 8021e64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021e68:	f109 0314 	add.w	r3, r9, #20
 8021e6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021e70:	9202      	str	r2, [sp, #8]
 8021e72:	1b3a      	subs	r2, r7, r4
 8021e74:	3a15      	subs	r2, #21
 8021e76:	f022 0203 	bic.w	r2, r2, #3
 8021e7a:	3204      	adds	r2, #4
 8021e7c:	f104 0115 	add.w	r1, r4, #21
 8021e80:	428f      	cmp	r7, r1
 8021e82:	bf38      	it	cc
 8021e84:	2204      	movcc	r2, #4
 8021e86:	9201      	str	r2, [sp, #4]
 8021e88:	9a02      	ldr	r2, [sp, #8]
 8021e8a:	9303      	str	r3, [sp, #12]
 8021e8c:	429a      	cmp	r2, r3
 8021e8e:	d80c      	bhi.n	8021eaa <__multiply+0x9e>
 8021e90:	2e00      	cmp	r6, #0
 8021e92:	dd03      	ble.n	8021e9c <__multiply+0x90>
 8021e94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	d05b      	beq.n	8021f54 <__multiply+0x148>
 8021e9c:	6106      	str	r6, [r0, #16]
 8021e9e:	b005      	add	sp, #20
 8021ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ea4:	f843 2b04 	str.w	r2, [r3], #4
 8021ea8:	e7d8      	b.n	8021e5c <__multiply+0x50>
 8021eaa:	f8b3 a000 	ldrh.w	sl, [r3]
 8021eae:	f1ba 0f00 	cmp.w	sl, #0
 8021eb2:	d024      	beq.n	8021efe <__multiply+0xf2>
 8021eb4:	f104 0e14 	add.w	lr, r4, #20
 8021eb8:	46a9      	mov	r9, r5
 8021eba:	f04f 0c00 	mov.w	ip, #0
 8021ebe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021ec2:	f8d9 1000 	ldr.w	r1, [r9]
 8021ec6:	fa1f fb82 	uxth.w	fp, r2
 8021eca:	b289      	uxth	r1, r1
 8021ecc:	fb0a 110b 	mla	r1, sl, fp, r1
 8021ed0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8021ed8:	4461      	add	r1, ip
 8021eda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021ede:	fb0a c20b 	mla	r2, sl, fp, ip
 8021ee2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021ee6:	b289      	uxth	r1, r1
 8021ee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021eec:	4577      	cmp	r7, lr
 8021eee:	f849 1b04 	str.w	r1, [r9], #4
 8021ef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021ef6:	d8e2      	bhi.n	8021ebe <__multiply+0xb2>
 8021ef8:	9a01      	ldr	r2, [sp, #4]
 8021efa:	f845 c002 	str.w	ip, [r5, r2]
 8021efe:	9a03      	ldr	r2, [sp, #12]
 8021f00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021f04:	3304      	adds	r3, #4
 8021f06:	f1b9 0f00 	cmp.w	r9, #0
 8021f0a:	d021      	beq.n	8021f50 <__multiply+0x144>
 8021f0c:	6829      	ldr	r1, [r5, #0]
 8021f0e:	f104 0c14 	add.w	ip, r4, #20
 8021f12:	46ae      	mov	lr, r5
 8021f14:	f04f 0a00 	mov.w	sl, #0
 8021f18:	f8bc b000 	ldrh.w	fp, [ip]
 8021f1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021f20:	fb09 220b 	mla	r2, r9, fp, r2
 8021f24:	4452      	add	r2, sl
 8021f26:	b289      	uxth	r1, r1
 8021f28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021f2c:	f84e 1b04 	str.w	r1, [lr], #4
 8021f30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021f34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021f38:	f8be 1000 	ldrh.w	r1, [lr]
 8021f3c:	fb09 110a 	mla	r1, r9, sl, r1
 8021f40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8021f44:	4567      	cmp	r7, ip
 8021f46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021f4a:	d8e5      	bhi.n	8021f18 <__multiply+0x10c>
 8021f4c:	9a01      	ldr	r2, [sp, #4]
 8021f4e:	50a9      	str	r1, [r5, r2]
 8021f50:	3504      	adds	r5, #4
 8021f52:	e799      	b.n	8021e88 <__multiply+0x7c>
 8021f54:	3e01      	subs	r6, #1
 8021f56:	e79b      	b.n	8021e90 <__multiply+0x84>
 8021f58:	08025b3e 	.word	0x08025b3e
 8021f5c:	08025b4f 	.word	0x08025b4f

08021f60 <__pow5mult>:
 8021f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f64:	4615      	mov	r5, r2
 8021f66:	f012 0203 	ands.w	r2, r2, #3
 8021f6a:	4606      	mov	r6, r0
 8021f6c:	460f      	mov	r7, r1
 8021f6e:	d007      	beq.n	8021f80 <__pow5mult+0x20>
 8021f70:	4c25      	ldr	r4, [pc, #148]	; (8022008 <__pow5mult+0xa8>)
 8021f72:	3a01      	subs	r2, #1
 8021f74:	2300      	movs	r3, #0
 8021f76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021f7a:	f7ff fe53 	bl	8021c24 <__multadd>
 8021f7e:	4607      	mov	r7, r0
 8021f80:	10ad      	asrs	r5, r5, #2
 8021f82:	d03d      	beq.n	8022000 <__pow5mult+0xa0>
 8021f84:	69f4      	ldr	r4, [r6, #28]
 8021f86:	b97c      	cbnz	r4, 8021fa8 <__pow5mult+0x48>
 8021f88:	2010      	movs	r0, #16
 8021f8a:	f7fd fab7 	bl	801f4fc <malloc>
 8021f8e:	4602      	mov	r2, r0
 8021f90:	61f0      	str	r0, [r6, #28]
 8021f92:	b928      	cbnz	r0, 8021fa0 <__pow5mult+0x40>
 8021f94:	4b1d      	ldr	r3, [pc, #116]	; (802200c <__pow5mult+0xac>)
 8021f96:	481e      	ldr	r0, [pc, #120]	; (8022010 <__pow5mult+0xb0>)
 8021f98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8021f9c:	f7fe ff74 	bl	8020e88 <__assert_func>
 8021fa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021fa4:	6004      	str	r4, [r0, #0]
 8021fa6:	60c4      	str	r4, [r0, #12]
 8021fa8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8021fac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021fb0:	b94c      	cbnz	r4, 8021fc6 <__pow5mult+0x66>
 8021fb2:	f240 2171 	movw	r1, #625	; 0x271
 8021fb6:	4630      	mov	r0, r6
 8021fb8:	f7ff ff12 	bl	8021de0 <__i2b>
 8021fbc:	2300      	movs	r3, #0
 8021fbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8021fc2:	4604      	mov	r4, r0
 8021fc4:	6003      	str	r3, [r0, #0]
 8021fc6:	f04f 0900 	mov.w	r9, #0
 8021fca:	07eb      	lsls	r3, r5, #31
 8021fcc:	d50a      	bpl.n	8021fe4 <__pow5mult+0x84>
 8021fce:	4639      	mov	r1, r7
 8021fd0:	4622      	mov	r2, r4
 8021fd2:	4630      	mov	r0, r6
 8021fd4:	f7ff ff1a 	bl	8021e0c <__multiply>
 8021fd8:	4639      	mov	r1, r7
 8021fda:	4680      	mov	r8, r0
 8021fdc:	4630      	mov	r0, r6
 8021fde:	f7ff fdff 	bl	8021be0 <_Bfree>
 8021fe2:	4647      	mov	r7, r8
 8021fe4:	106d      	asrs	r5, r5, #1
 8021fe6:	d00b      	beq.n	8022000 <__pow5mult+0xa0>
 8021fe8:	6820      	ldr	r0, [r4, #0]
 8021fea:	b938      	cbnz	r0, 8021ffc <__pow5mult+0x9c>
 8021fec:	4622      	mov	r2, r4
 8021fee:	4621      	mov	r1, r4
 8021ff0:	4630      	mov	r0, r6
 8021ff2:	f7ff ff0b 	bl	8021e0c <__multiply>
 8021ff6:	6020      	str	r0, [r4, #0]
 8021ff8:	f8c0 9000 	str.w	r9, [r0]
 8021ffc:	4604      	mov	r4, r0
 8021ffe:	e7e4      	b.n	8021fca <__pow5mult+0x6a>
 8022000:	4638      	mov	r0, r7
 8022002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022006:	bf00      	nop
 8022008:	08025c98 	.word	0x08025c98
 802200c:	080258f4 	.word	0x080258f4
 8022010:	08025b4f 	.word	0x08025b4f

08022014 <__lshift>:
 8022014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022018:	460c      	mov	r4, r1
 802201a:	6849      	ldr	r1, [r1, #4]
 802201c:	6923      	ldr	r3, [r4, #16]
 802201e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022022:	68a3      	ldr	r3, [r4, #8]
 8022024:	4607      	mov	r7, r0
 8022026:	4691      	mov	r9, r2
 8022028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802202c:	f108 0601 	add.w	r6, r8, #1
 8022030:	42b3      	cmp	r3, r6
 8022032:	db0b      	blt.n	802204c <__lshift+0x38>
 8022034:	4638      	mov	r0, r7
 8022036:	f7ff fd93 	bl	8021b60 <_Balloc>
 802203a:	4605      	mov	r5, r0
 802203c:	b948      	cbnz	r0, 8022052 <__lshift+0x3e>
 802203e:	4602      	mov	r2, r0
 8022040:	4b28      	ldr	r3, [pc, #160]	; (80220e4 <__lshift+0xd0>)
 8022042:	4829      	ldr	r0, [pc, #164]	; (80220e8 <__lshift+0xd4>)
 8022044:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8022048:	f7fe ff1e 	bl	8020e88 <__assert_func>
 802204c:	3101      	adds	r1, #1
 802204e:	005b      	lsls	r3, r3, #1
 8022050:	e7ee      	b.n	8022030 <__lshift+0x1c>
 8022052:	2300      	movs	r3, #0
 8022054:	f100 0114 	add.w	r1, r0, #20
 8022058:	f100 0210 	add.w	r2, r0, #16
 802205c:	4618      	mov	r0, r3
 802205e:	4553      	cmp	r3, sl
 8022060:	db33      	blt.n	80220ca <__lshift+0xb6>
 8022062:	6920      	ldr	r0, [r4, #16]
 8022064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022068:	f104 0314 	add.w	r3, r4, #20
 802206c:	f019 091f 	ands.w	r9, r9, #31
 8022070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022078:	d02b      	beq.n	80220d2 <__lshift+0xbe>
 802207a:	f1c9 0e20 	rsb	lr, r9, #32
 802207e:	468a      	mov	sl, r1
 8022080:	2200      	movs	r2, #0
 8022082:	6818      	ldr	r0, [r3, #0]
 8022084:	fa00 f009 	lsl.w	r0, r0, r9
 8022088:	4310      	orrs	r0, r2
 802208a:	f84a 0b04 	str.w	r0, [sl], #4
 802208e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022092:	459c      	cmp	ip, r3
 8022094:	fa22 f20e 	lsr.w	r2, r2, lr
 8022098:	d8f3      	bhi.n	8022082 <__lshift+0x6e>
 802209a:	ebac 0304 	sub.w	r3, ip, r4
 802209e:	3b15      	subs	r3, #21
 80220a0:	f023 0303 	bic.w	r3, r3, #3
 80220a4:	3304      	adds	r3, #4
 80220a6:	f104 0015 	add.w	r0, r4, #21
 80220aa:	4584      	cmp	ip, r0
 80220ac:	bf38      	it	cc
 80220ae:	2304      	movcc	r3, #4
 80220b0:	50ca      	str	r2, [r1, r3]
 80220b2:	b10a      	cbz	r2, 80220b8 <__lshift+0xa4>
 80220b4:	f108 0602 	add.w	r6, r8, #2
 80220b8:	3e01      	subs	r6, #1
 80220ba:	4638      	mov	r0, r7
 80220bc:	612e      	str	r6, [r5, #16]
 80220be:	4621      	mov	r1, r4
 80220c0:	f7ff fd8e 	bl	8021be0 <_Bfree>
 80220c4:	4628      	mov	r0, r5
 80220c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80220ce:	3301      	adds	r3, #1
 80220d0:	e7c5      	b.n	802205e <__lshift+0x4a>
 80220d2:	3904      	subs	r1, #4
 80220d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80220d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80220dc:	459c      	cmp	ip, r3
 80220de:	d8f9      	bhi.n	80220d4 <__lshift+0xc0>
 80220e0:	e7ea      	b.n	80220b8 <__lshift+0xa4>
 80220e2:	bf00      	nop
 80220e4:	08025b3e 	.word	0x08025b3e
 80220e8:	08025b4f 	.word	0x08025b4f

080220ec <__mcmp>:
 80220ec:	b530      	push	{r4, r5, lr}
 80220ee:	6902      	ldr	r2, [r0, #16]
 80220f0:	690c      	ldr	r4, [r1, #16]
 80220f2:	1b12      	subs	r2, r2, r4
 80220f4:	d10e      	bne.n	8022114 <__mcmp+0x28>
 80220f6:	f100 0314 	add.w	r3, r0, #20
 80220fa:	3114      	adds	r1, #20
 80220fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802210c:	42a5      	cmp	r5, r4
 802210e:	d003      	beq.n	8022118 <__mcmp+0x2c>
 8022110:	d305      	bcc.n	802211e <__mcmp+0x32>
 8022112:	2201      	movs	r2, #1
 8022114:	4610      	mov	r0, r2
 8022116:	bd30      	pop	{r4, r5, pc}
 8022118:	4283      	cmp	r3, r0
 802211a:	d3f3      	bcc.n	8022104 <__mcmp+0x18>
 802211c:	e7fa      	b.n	8022114 <__mcmp+0x28>
 802211e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022122:	e7f7      	b.n	8022114 <__mcmp+0x28>

08022124 <__mdiff>:
 8022124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022128:	460c      	mov	r4, r1
 802212a:	4606      	mov	r6, r0
 802212c:	4611      	mov	r1, r2
 802212e:	4620      	mov	r0, r4
 8022130:	4690      	mov	r8, r2
 8022132:	f7ff ffdb 	bl	80220ec <__mcmp>
 8022136:	1e05      	subs	r5, r0, #0
 8022138:	d110      	bne.n	802215c <__mdiff+0x38>
 802213a:	4629      	mov	r1, r5
 802213c:	4630      	mov	r0, r6
 802213e:	f7ff fd0f 	bl	8021b60 <_Balloc>
 8022142:	b930      	cbnz	r0, 8022152 <__mdiff+0x2e>
 8022144:	4b3a      	ldr	r3, [pc, #232]	; (8022230 <__mdiff+0x10c>)
 8022146:	4602      	mov	r2, r0
 8022148:	f240 2137 	movw	r1, #567	; 0x237
 802214c:	4839      	ldr	r0, [pc, #228]	; (8022234 <__mdiff+0x110>)
 802214e:	f7fe fe9b 	bl	8020e88 <__assert_func>
 8022152:	2301      	movs	r3, #1
 8022154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802215c:	bfa4      	itt	ge
 802215e:	4643      	movge	r3, r8
 8022160:	46a0      	movge	r8, r4
 8022162:	4630      	mov	r0, r6
 8022164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022168:	bfa6      	itte	ge
 802216a:	461c      	movge	r4, r3
 802216c:	2500      	movge	r5, #0
 802216e:	2501      	movlt	r5, #1
 8022170:	f7ff fcf6 	bl	8021b60 <_Balloc>
 8022174:	b920      	cbnz	r0, 8022180 <__mdiff+0x5c>
 8022176:	4b2e      	ldr	r3, [pc, #184]	; (8022230 <__mdiff+0x10c>)
 8022178:	4602      	mov	r2, r0
 802217a:	f240 2145 	movw	r1, #581	; 0x245
 802217e:	e7e5      	b.n	802214c <__mdiff+0x28>
 8022180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022184:	6926      	ldr	r6, [r4, #16]
 8022186:	60c5      	str	r5, [r0, #12]
 8022188:	f104 0914 	add.w	r9, r4, #20
 802218c:	f108 0514 	add.w	r5, r8, #20
 8022190:	f100 0e14 	add.w	lr, r0, #20
 8022194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802219c:	f108 0210 	add.w	r2, r8, #16
 80221a0:	46f2      	mov	sl, lr
 80221a2:	2100      	movs	r1, #0
 80221a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80221a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80221ac:	fa11 f88b 	uxtah	r8, r1, fp
 80221b0:	b299      	uxth	r1, r3
 80221b2:	0c1b      	lsrs	r3, r3, #16
 80221b4:	eba8 0801 	sub.w	r8, r8, r1
 80221b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80221bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80221c0:	fa1f f888 	uxth.w	r8, r8
 80221c4:	1419      	asrs	r1, r3, #16
 80221c6:	454e      	cmp	r6, r9
 80221c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80221cc:	f84a 3b04 	str.w	r3, [sl], #4
 80221d0:	d8e8      	bhi.n	80221a4 <__mdiff+0x80>
 80221d2:	1b33      	subs	r3, r6, r4
 80221d4:	3b15      	subs	r3, #21
 80221d6:	f023 0303 	bic.w	r3, r3, #3
 80221da:	3304      	adds	r3, #4
 80221dc:	3415      	adds	r4, #21
 80221de:	42a6      	cmp	r6, r4
 80221e0:	bf38      	it	cc
 80221e2:	2304      	movcc	r3, #4
 80221e4:	441d      	add	r5, r3
 80221e6:	4473      	add	r3, lr
 80221e8:	469e      	mov	lr, r3
 80221ea:	462e      	mov	r6, r5
 80221ec:	4566      	cmp	r6, ip
 80221ee:	d30e      	bcc.n	802220e <__mdiff+0xea>
 80221f0:	f10c 0203 	add.w	r2, ip, #3
 80221f4:	1b52      	subs	r2, r2, r5
 80221f6:	f022 0203 	bic.w	r2, r2, #3
 80221fa:	3d03      	subs	r5, #3
 80221fc:	45ac      	cmp	ip, r5
 80221fe:	bf38      	it	cc
 8022200:	2200      	movcc	r2, #0
 8022202:	4413      	add	r3, r2
 8022204:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022208:	b17a      	cbz	r2, 802222a <__mdiff+0x106>
 802220a:	6107      	str	r7, [r0, #16]
 802220c:	e7a4      	b.n	8022158 <__mdiff+0x34>
 802220e:	f856 8b04 	ldr.w	r8, [r6], #4
 8022212:	fa11 f288 	uxtah	r2, r1, r8
 8022216:	1414      	asrs	r4, r2, #16
 8022218:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802221c:	b292      	uxth	r2, r2
 802221e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022222:	f84e 2b04 	str.w	r2, [lr], #4
 8022226:	1421      	asrs	r1, r4, #16
 8022228:	e7e0      	b.n	80221ec <__mdiff+0xc8>
 802222a:	3f01      	subs	r7, #1
 802222c:	e7ea      	b.n	8022204 <__mdiff+0xe0>
 802222e:	bf00      	nop
 8022230:	08025b3e 	.word	0x08025b3e
 8022234:	08025b4f 	.word	0x08025b4f

08022238 <__ulp>:
 8022238:	b082      	sub	sp, #8
 802223a:	ed8d 0b00 	vstr	d0, [sp]
 802223e:	9a01      	ldr	r2, [sp, #4]
 8022240:	4b0f      	ldr	r3, [pc, #60]	; (8022280 <__ulp+0x48>)
 8022242:	4013      	ands	r3, r2
 8022244:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8022248:	2b00      	cmp	r3, #0
 802224a:	dc08      	bgt.n	802225e <__ulp+0x26>
 802224c:	425b      	negs	r3, r3
 802224e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8022252:	ea4f 5223 	mov.w	r2, r3, asr #20
 8022256:	da04      	bge.n	8022262 <__ulp+0x2a>
 8022258:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802225c:	4113      	asrs	r3, r2
 802225e:	2200      	movs	r2, #0
 8022260:	e008      	b.n	8022274 <__ulp+0x3c>
 8022262:	f1a2 0314 	sub.w	r3, r2, #20
 8022266:	2b1e      	cmp	r3, #30
 8022268:	bfda      	itte	le
 802226a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802226e:	40da      	lsrle	r2, r3
 8022270:	2201      	movgt	r2, #1
 8022272:	2300      	movs	r3, #0
 8022274:	4619      	mov	r1, r3
 8022276:	4610      	mov	r0, r2
 8022278:	ec41 0b10 	vmov	d0, r0, r1
 802227c:	b002      	add	sp, #8
 802227e:	4770      	bx	lr
 8022280:	7ff00000 	.word	0x7ff00000

08022284 <__b2d>:
 8022284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022288:	6906      	ldr	r6, [r0, #16]
 802228a:	f100 0814 	add.w	r8, r0, #20
 802228e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8022292:	1f37      	subs	r7, r6, #4
 8022294:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8022298:	4610      	mov	r0, r2
 802229a:	f7ff fd53 	bl	8021d44 <__hi0bits>
 802229e:	f1c0 0320 	rsb	r3, r0, #32
 80222a2:	280a      	cmp	r0, #10
 80222a4:	600b      	str	r3, [r1, #0]
 80222a6:	491b      	ldr	r1, [pc, #108]	; (8022314 <__b2d+0x90>)
 80222a8:	dc15      	bgt.n	80222d6 <__b2d+0x52>
 80222aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80222ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80222b2:	45b8      	cmp	r8, r7
 80222b4:	ea43 0501 	orr.w	r5, r3, r1
 80222b8:	bf34      	ite	cc
 80222ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80222be:	2300      	movcs	r3, #0
 80222c0:	3015      	adds	r0, #21
 80222c2:	fa02 f000 	lsl.w	r0, r2, r0
 80222c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80222ca:	4303      	orrs	r3, r0
 80222cc:	461c      	mov	r4, r3
 80222ce:	ec45 4b10 	vmov	d0, r4, r5
 80222d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222d6:	45b8      	cmp	r8, r7
 80222d8:	bf3a      	itte	cc
 80222da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80222de:	f1a6 0708 	subcc.w	r7, r6, #8
 80222e2:	2300      	movcs	r3, #0
 80222e4:	380b      	subs	r0, #11
 80222e6:	d012      	beq.n	802230e <__b2d+0x8a>
 80222e8:	f1c0 0120 	rsb	r1, r0, #32
 80222ec:	fa23 f401 	lsr.w	r4, r3, r1
 80222f0:	4082      	lsls	r2, r0
 80222f2:	4322      	orrs	r2, r4
 80222f4:	4547      	cmp	r7, r8
 80222f6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80222fa:	bf8c      	ite	hi
 80222fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8022300:	2200      	movls	r2, #0
 8022302:	4083      	lsls	r3, r0
 8022304:	40ca      	lsrs	r2, r1
 8022306:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802230a:	4313      	orrs	r3, r2
 802230c:	e7de      	b.n	80222cc <__b2d+0x48>
 802230e:	ea42 0501 	orr.w	r5, r2, r1
 8022312:	e7db      	b.n	80222cc <__b2d+0x48>
 8022314:	3ff00000 	.word	0x3ff00000

08022318 <__d2b>:
 8022318:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802231c:	460f      	mov	r7, r1
 802231e:	2101      	movs	r1, #1
 8022320:	ec59 8b10 	vmov	r8, r9, d0
 8022324:	4616      	mov	r6, r2
 8022326:	f7ff fc1b 	bl	8021b60 <_Balloc>
 802232a:	4604      	mov	r4, r0
 802232c:	b930      	cbnz	r0, 802233c <__d2b+0x24>
 802232e:	4602      	mov	r2, r0
 8022330:	4b24      	ldr	r3, [pc, #144]	; (80223c4 <__d2b+0xac>)
 8022332:	4825      	ldr	r0, [pc, #148]	; (80223c8 <__d2b+0xb0>)
 8022334:	f240 310f 	movw	r1, #783	; 0x30f
 8022338:	f7fe fda6 	bl	8020e88 <__assert_func>
 802233c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022344:	bb2d      	cbnz	r5, 8022392 <__d2b+0x7a>
 8022346:	9301      	str	r3, [sp, #4]
 8022348:	f1b8 0300 	subs.w	r3, r8, #0
 802234c:	d026      	beq.n	802239c <__d2b+0x84>
 802234e:	4668      	mov	r0, sp
 8022350:	9300      	str	r3, [sp, #0]
 8022352:	f7ff fd17 	bl	8021d84 <__lo0bits>
 8022356:	e9dd 1200 	ldrd	r1, r2, [sp]
 802235a:	b1e8      	cbz	r0, 8022398 <__d2b+0x80>
 802235c:	f1c0 0320 	rsb	r3, r0, #32
 8022360:	fa02 f303 	lsl.w	r3, r2, r3
 8022364:	430b      	orrs	r3, r1
 8022366:	40c2      	lsrs	r2, r0
 8022368:	6163      	str	r3, [r4, #20]
 802236a:	9201      	str	r2, [sp, #4]
 802236c:	9b01      	ldr	r3, [sp, #4]
 802236e:	61a3      	str	r3, [r4, #24]
 8022370:	2b00      	cmp	r3, #0
 8022372:	bf14      	ite	ne
 8022374:	2202      	movne	r2, #2
 8022376:	2201      	moveq	r2, #1
 8022378:	6122      	str	r2, [r4, #16]
 802237a:	b1bd      	cbz	r5, 80223ac <__d2b+0x94>
 802237c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022380:	4405      	add	r5, r0
 8022382:	603d      	str	r5, [r7, #0]
 8022384:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022388:	6030      	str	r0, [r6, #0]
 802238a:	4620      	mov	r0, r4
 802238c:	b003      	add	sp, #12
 802238e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022396:	e7d6      	b.n	8022346 <__d2b+0x2e>
 8022398:	6161      	str	r1, [r4, #20]
 802239a:	e7e7      	b.n	802236c <__d2b+0x54>
 802239c:	a801      	add	r0, sp, #4
 802239e:	f7ff fcf1 	bl	8021d84 <__lo0bits>
 80223a2:	9b01      	ldr	r3, [sp, #4]
 80223a4:	6163      	str	r3, [r4, #20]
 80223a6:	3020      	adds	r0, #32
 80223a8:	2201      	movs	r2, #1
 80223aa:	e7e5      	b.n	8022378 <__d2b+0x60>
 80223ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80223b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80223b4:	6038      	str	r0, [r7, #0]
 80223b6:	6918      	ldr	r0, [r3, #16]
 80223b8:	f7ff fcc4 	bl	8021d44 <__hi0bits>
 80223bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80223c0:	e7e2      	b.n	8022388 <__d2b+0x70>
 80223c2:	bf00      	nop
 80223c4:	08025b3e 	.word	0x08025b3e
 80223c8:	08025b4f 	.word	0x08025b4f

080223cc <__ratio>:
 80223cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223d0:	4688      	mov	r8, r1
 80223d2:	4669      	mov	r1, sp
 80223d4:	4681      	mov	r9, r0
 80223d6:	f7ff ff55 	bl	8022284 <__b2d>
 80223da:	a901      	add	r1, sp, #4
 80223dc:	4640      	mov	r0, r8
 80223de:	ec55 4b10 	vmov	r4, r5, d0
 80223e2:	ee10 aa10 	vmov	sl, s0
 80223e6:	f7ff ff4d 	bl	8022284 <__b2d>
 80223ea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80223ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80223f2:	1ad2      	subs	r2, r2, r3
 80223f4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80223f8:	1a5b      	subs	r3, r3, r1
 80223fa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80223fe:	ec57 6b10 	vmov	r6, r7, d0
 8022402:	2b00      	cmp	r3, #0
 8022404:	bfd6      	itet	le
 8022406:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802240a:	462a      	movgt	r2, r5
 802240c:	463a      	movle	r2, r7
 802240e:	46ab      	mov	fp, r5
 8022410:	bfd6      	itet	le
 8022412:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8022416:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 802241a:	ee00 3a90 	vmovle	s1, r3
 802241e:	ec4b ab17 	vmov	d7, sl, fp
 8022422:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8022426:	b003      	add	sp, #12
 8022428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802242c <__copybits>:
 802242c:	3901      	subs	r1, #1
 802242e:	b570      	push	{r4, r5, r6, lr}
 8022430:	1149      	asrs	r1, r1, #5
 8022432:	6914      	ldr	r4, [r2, #16]
 8022434:	3101      	adds	r1, #1
 8022436:	f102 0314 	add.w	r3, r2, #20
 802243a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802243e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022442:	1f05      	subs	r5, r0, #4
 8022444:	42a3      	cmp	r3, r4
 8022446:	d30c      	bcc.n	8022462 <__copybits+0x36>
 8022448:	1aa3      	subs	r3, r4, r2
 802244a:	3b11      	subs	r3, #17
 802244c:	f023 0303 	bic.w	r3, r3, #3
 8022450:	3211      	adds	r2, #17
 8022452:	42a2      	cmp	r2, r4
 8022454:	bf88      	it	hi
 8022456:	2300      	movhi	r3, #0
 8022458:	4418      	add	r0, r3
 802245a:	2300      	movs	r3, #0
 802245c:	4288      	cmp	r0, r1
 802245e:	d305      	bcc.n	802246c <__copybits+0x40>
 8022460:	bd70      	pop	{r4, r5, r6, pc}
 8022462:	f853 6b04 	ldr.w	r6, [r3], #4
 8022466:	f845 6f04 	str.w	r6, [r5, #4]!
 802246a:	e7eb      	b.n	8022444 <__copybits+0x18>
 802246c:	f840 3b04 	str.w	r3, [r0], #4
 8022470:	e7f4      	b.n	802245c <__copybits+0x30>

08022472 <__any_on>:
 8022472:	f100 0214 	add.w	r2, r0, #20
 8022476:	6900      	ldr	r0, [r0, #16]
 8022478:	114b      	asrs	r3, r1, #5
 802247a:	4298      	cmp	r0, r3
 802247c:	b510      	push	{r4, lr}
 802247e:	db11      	blt.n	80224a4 <__any_on+0x32>
 8022480:	dd0a      	ble.n	8022498 <__any_on+0x26>
 8022482:	f011 011f 	ands.w	r1, r1, #31
 8022486:	d007      	beq.n	8022498 <__any_on+0x26>
 8022488:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802248c:	fa24 f001 	lsr.w	r0, r4, r1
 8022490:	fa00 f101 	lsl.w	r1, r0, r1
 8022494:	428c      	cmp	r4, r1
 8022496:	d10b      	bne.n	80224b0 <__any_on+0x3e>
 8022498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802249c:	4293      	cmp	r3, r2
 802249e:	d803      	bhi.n	80224a8 <__any_on+0x36>
 80224a0:	2000      	movs	r0, #0
 80224a2:	bd10      	pop	{r4, pc}
 80224a4:	4603      	mov	r3, r0
 80224a6:	e7f7      	b.n	8022498 <__any_on+0x26>
 80224a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80224ac:	2900      	cmp	r1, #0
 80224ae:	d0f5      	beq.n	802249c <__any_on+0x2a>
 80224b0:	2001      	movs	r0, #1
 80224b2:	e7f6      	b.n	80224a2 <__any_on+0x30>

080224b4 <_malloc_usable_size_r>:
 80224b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80224b8:	1f18      	subs	r0, r3, #4
 80224ba:	2b00      	cmp	r3, #0
 80224bc:	bfbc      	itt	lt
 80224be:	580b      	ldrlt	r3, [r1, r0]
 80224c0:	18c0      	addlt	r0, r0, r3
 80224c2:	4770      	bx	lr

080224c4 <sulp>:
 80224c4:	b570      	push	{r4, r5, r6, lr}
 80224c6:	4604      	mov	r4, r0
 80224c8:	460d      	mov	r5, r1
 80224ca:	4616      	mov	r6, r2
 80224cc:	ec45 4b10 	vmov	d0, r4, r5
 80224d0:	f7ff feb2 	bl	8022238 <__ulp>
 80224d4:	b17e      	cbz	r6, 80224f6 <sulp+0x32>
 80224d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80224da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80224de:	2b00      	cmp	r3, #0
 80224e0:	dd09      	ble.n	80224f6 <sulp+0x32>
 80224e2:	051b      	lsls	r3, r3, #20
 80224e4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80224e8:	2000      	movs	r0, #0
 80224ea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80224ee:	ec41 0b17 	vmov	d7, r0, r1
 80224f2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80224f6:	bd70      	pop	{r4, r5, r6, pc}

080224f8 <_strtod_l>:
 80224f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224fc:	ed2d 8b0e 	vpush	{d8-d14}
 8022500:	b097      	sub	sp, #92	; 0x5c
 8022502:	4604      	mov	r4, r0
 8022504:	920d      	str	r2, [sp, #52]	; 0x34
 8022506:	2200      	movs	r2, #0
 8022508:	9212      	str	r2, [sp, #72]	; 0x48
 802250a:	468a      	mov	sl, r1
 802250c:	f04f 0800 	mov.w	r8, #0
 8022510:	f04f 0900 	mov.w	r9, #0
 8022514:	460a      	mov	r2, r1
 8022516:	9211      	str	r2, [sp, #68]	; 0x44
 8022518:	7811      	ldrb	r1, [r2, #0]
 802251a:	292b      	cmp	r1, #43	; 0x2b
 802251c:	d04c      	beq.n	80225b8 <_strtod_l+0xc0>
 802251e:	d839      	bhi.n	8022594 <_strtod_l+0x9c>
 8022520:	290d      	cmp	r1, #13
 8022522:	d833      	bhi.n	802258c <_strtod_l+0x94>
 8022524:	2908      	cmp	r1, #8
 8022526:	d833      	bhi.n	8022590 <_strtod_l+0x98>
 8022528:	2900      	cmp	r1, #0
 802252a:	d03c      	beq.n	80225a6 <_strtod_l+0xae>
 802252c:	2200      	movs	r2, #0
 802252e:	9208      	str	r2, [sp, #32]
 8022530:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022532:	7832      	ldrb	r2, [r6, #0]
 8022534:	2a30      	cmp	r2, #48	; 0x30
 8022536:	f040 80b8 	bne.w	80226aa <_strtod_l+0x1b2>
 802253a:	7872      	ldrb	r2, [r6, #1]
 802253c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8022540:	2a58      	cmp	r2, #88	; 0x58
 8022542:	d170      	bne.n	8022626 <_strtod_l+0x12e>
 8022544:	9302      	str	r3, [sp, #8]
 8022546:	9b08      	ldr	r3, [sp, #32]
 8022548:	9301      	str	r3, [sp, #4]
 802254a:	ab12      	add	r3, sp, #72	; 0x48
 802254c:	9300      	str	r3, [sp, #0]
 802254e:	4a91      	ldr	r2, [pc, #580]	; (8022794 <_strtod_l+0x29c>)
 8022550:	ab13      	add	r3, sp, #76	; 0x4c
 8022552:	a911      	add	r1, sp, #68	; 0x44
 8022554:	4620      	mov	r0, r4
 8022556:	f001 fa61 	bl	8023a1c <__gethex>
 802255a:	f010 070f 	ands.w	r7, r0, #15
 802255e:	4605      	mov	r5, r0
 8022560:	d005      	beq.n	802256e <_strtod_l+0x76>
 8022562:	2f06      	cmp	r7, #6
 8022564:	d12a      	bne.n	80225bc <_strtod_l+0xc4>
 8022566:	3601      	adds	r6, #1
 8022568:	2300      	movs	r3, #0
 802256a:	9611      	str	r6, [sp, #68]	; 0x44
 802256c:	9308      	str	r3, [sp, #32]
 802256e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022570:	2b00      	cmp	r3, #0
 8022572:	f040 8555 	bne.w	8023020 <_strtod_l+0xb28>
 8022576:	9b08      	ldr	r3, [sp, #32]
 8022578:	ec49 8b10 	vmov	d0, r8, r9
 802257c:	b1cb      	cbz	r3, 80225b2 <_strtod_l+0xba>
 802257e:	eeb1 0b40 	vneg.f64	d0, d0
 8022582:	b017      	add	sp, #92	; 0x5c
 8022584:	ecbd 8b0e 	vpop	{d8-d14}
 8022588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802258c:	2920      	cmp	r1, #32
 802258e:	d1cd      	bne.n	802252c <_strtod_l+0x34>
 8022590:	3201      	adds	r2, #1
 8022592:	e7c0      	b.n	8022516 <_strtod_l+0x1e>
 8022594:	292d      	cmp	r1, #45	; 0x2d
 8022596:	d1c9      	bne.n	802252c <_strtod_l+0x34>
 8022598:	2101      	movs	r1, #1
 802259a:	9108      	str	r1, [sp, #32]
 802259c:	1c51      	adds	r1, r2, #1
 802259e:	9111      	str	r1, [sp, #68]	; 0x44
 80225a0:	7852      	ldrb	r2, [r2, #1]
 80225a2:	2a00      	cmp	r2, #0
 80225a4:	d1c4      	bne.n	8022530 <_strtod_l+0x38>
 80225a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80225a8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	f040 8535 	bne.w	802301c <_strtod_l+0xb24>
 80225b2:	ec49 8b10 	vmov	d0, r8, r9
 80225b6:	e7e4      	b.n	8022582 <_strtod_l+0x8a>
 80225b8:	2100      	movs	r1, #0
 80225ba:	e7ee      	b.n	802259a <_strtod_l+0xa2>
 80225bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80225be:	b13a      	cbz	r2, 80225d0 <_strtod_l+0xd8>
 80225c0:	2135      	movs	r1, #53	; 0x35
 80225c2:	a814      	add	r0, sp, #80	; 0x50
 80225c4:	f7ff ff32 	bl	802242c <__copybits>
 80225c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80225ca:	4620      	mov	r0, r4
 80225cc:	f7ff fb08 	bl	8021be0 <_Bfree>
 80225d0:	1e7b      	subs	r3, r7, #1
 80225d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80225d4:	2b04      	cmp	r3, #4
 80225d6:	d806      	bhi.n	80225e6 <_strtod_l+0xee>
 80225d8:	e8df f003 	tbb	[pc, r3]
 80225dc:	201d0314 	.word	0x201d0314
 80225e0:	14          	.byte	0x14
 80225e1:	00          	.byte	0x00
 80225e2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80225e6:	05eb      	lsls	r3, r5, #23
 80225e8:	bf48      	it	mi
 80225ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80225ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80225f2:	0d1b      	lsrs	r3, r3, #20
 80225f4:	051b      	lsls	r3, r3, #20
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	d1b9      	bne.n	802256e <_strtod_l+0x76>
 80225fa:	f7fe fbfb 	bl	8020df4 <__errno>
 80225fe:	2322      	movs	r3, #34	; 0x22
 8022600:	6003      	str	r3, [r0, #0]
 8022602:	e7b4      	b.n	802256e <_strtod_l+0x76>
 8022604:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8022608:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802260c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8022610:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8022614:	e7e7      	b.n	80225e6 <_strtod_l+0xee>
 8022616:	f8df 9184 	ldr.w	r9, [pc, #388]	; 802279c <_strtod_l+0x2a4>
 802261a:	e7e4      	b.n	80225e6 <_strtod_l+0xee>
 802261c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8022620:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022624:	e7df      	b.n	80225e6 <_strtod_l+0xee>
 8022626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022628:	1c5a      	adds	r2, r3, #1
 802262a:	9211      	str	r2, [sp, #68]	; 0x44
 802262c:	785b      	ldrb	r3, [r3, #1]
 802262e:	2b30      	cmp	r3, #48	; 0x30
 8022630:	d0f9      	beq.n	8022626 <_strtod_l+0x12e>
 8022632:	2b00      	cmp	r3, #0
 8022634:	d09b      	beq.n	802256e <_strtod_l+0x76>
 8022636:	2301      	movs	r3, #1
 8022638:	9306      	str	r3, [sp, #24]
 802263a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802263c:	9309      	str	r3, [sp, #36]	; 0x24
 802263e:	2300      	movs	r3, #0
 8022640:	9305      	str	r3, [sp, #20]
 8022642:	9307      	str	r3, [sp, #28]
 8022644:	461e      	mov	r6, r3
 8022646:	220a      	movs	r2, #10
 8022648:	9811      	ldr	r0, [sp, #68]	; 0x44
 802264a:	7805      	ldrb	r5, [r0, #0]
 802264c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8022650:	b2d9      	uxtb	r1, r3
 8022652:	2909      	cmp	r1, #9
 8022654:	d92b      	bls.n	80226ae <_strtod_l+0x1b6>
 8022656:	4950      	ldr	r1, [pc, #320]	; (8022798 <_strtod_l+0x2a0>)
 8022658:	2201      	movs	r2, #1
 802265a:	f7fe fb48 	bl	8020cee <strncmp>
 802265e:	2800      	cmp	r0, #0
 8022660:	d035      	beq.n	80226ce <_strtod_l+0x1d6>
 8022662:	2000      	movs	r0, #0
 8022664:	462a      	mov	r2, r5
 8022666:	4633      	mov	r3, r6
 8022668:	4683      	mov	fp, r0
 802266a:	4601      	mov	r1, r0
 802266c:	2a65      	cmp	r2, #101	; 0x65
 802266e:	d001      	beq.n	8022674 <_strtod_l+0x17c>
 8022670:	2a45      	cmp	r2, #69	; 0x45
 8022672:	d118      	bne.n	80226a6 <_strtod_l+0x1ae>
 8022674:	b91b      	cbnz	r3, 802267e <_strtod_l+0x186>
 8022676:	9b06      	ldr	r3, [sp, #24]
 8022678:	4303      	orrs	r3, r0
 802267a:	d094      	beq.n	80225a6 <_strtod_l+0xae>
 802267c:	2300      	movs	r3, #0
 802267e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8022682:	f10a 0201 	add.w	r2, sl, #1
 8022686:	9211      	str	r2, [sp, #68]	; 0x44
 8022688:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802268c:	2a2b      	cmp	r2, #43	; 0x2b
 802268e:	d075      	beq.n	802277c <_strtod_l+0x284>
 8022690:	2a2d      	cmp	r2, #45	; 0x2d
 8022692:	d07b      	beq.n	802278c <_strtod_l+0x294>
 8022694:	f04f 0e00 	mov.w	lr, #0
 8022698:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802269c:	2d09      	cmp	r5, #9
 802269e:	f240 8083 	bls.w	80227a8 <_strtod_l+0x2b0>
 80226a2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80226a6:	2500      	movs	r5, #0
 80226a8:	e09e      	b.n	80227e8 <_strtod_l+0x2f0>
 80226aa:	2300      	movs	r3, #0
 80226ac:	e7c4      	b.n	8022638 <_strtod_l+0x140>
 80226ae:	2e08      	cmp	r6, #8
 80226b0:	bfd5      	itete	le
 80226b2:	9907      	ldrle	r1, [sp, #28]
 80226b4:	9905      	ldrgt	r1, [sp, #20]
 80226b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80226ba:	fb02 3301 	mlagt	r3, r2, r1, r3
 80226be:	f100 0001 	add.w	r0, r0, #1
 80226c2:	bfd4      	ite	le
 80226c4:	9307      	strle	r3, [sp, #28]
 80226c6:	9305      	strgt	r3, [sp, #20]
 80226c8:	3601      	adds	r6, #1
 80226ca:	9011      	str	r0, [sp, #68]	; 0x44
 80226cc:	e7bc      	b.n	8022648 <_strtod_l+0x150>
 80226ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226d0:	1c5a      	adds	r2, r3, #1
 80226d2:	9211      	str	r2, [sp, #68]	; 0x44
 80226d4:	785a      	ldrb	r2, [r3, #1]
 80226d6:	b3ae      	cbz	r6, 8022744 <_strtod_l+0x24c>
 80226d8:	4683      	mov	fp, r0
 80226da:	4633      	mov	r3, r6
 80226dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80226e0:	2909      	cmp	r1, #9
 80226e2:	d912      	bls.n	802270a <_strtod_l+0x212>
 80226e4:	2101      	movs	r1, #1
 80226e6:	e7c1      	b.n	802266c <_strtod_l+0x174>
 80226e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226ea:	1c5a      	adds	r2, r3, #1
 80226ec:	9211      	str	r2, [sp, #68]	; 0x44
 80226ee:	785a      	ldrb	r2, [r3, #1]
 80226f0:	3001      	adds	r0, #1
 80226f2:	2a30      	cmp	r2, #48	; 0x30
 80226f4:	d0f8      	beq.n	80226e8 <_strtod_l+0x1f0>
 80226f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80226fa:	2b08      	cmp	r3, #8
 80226fc:	f200 8495 	bhi.w	802302a <_strtod_l+0xb32>
 8022700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022702:	9309      	str	r3, [sp, #36]	; 0x24
 8022704:	4683      	mov	fp, r0
 8022706:	2000      	movs	r0, #0
 8022708:	4603      	mov	r3, r0
 802270a:	3a30      	subs	r2, #48	; 0x30
 802270c:	f100 0101 	add.w	r1, r0, #1
 8022710:	d012      	beq.n	8022738 <_strtod_l+0x240>
 8022712:	448b      	add	fp, r1
 8022714:	eb00 0c03 	add.w	ip, r0, r3
 8022718:	4619      	mov	r1, r3
 802271a:	250a      	movs	r5, #10
 802271c:	4561      	cmp	r1, ip
 802271e:	d113      	bne.n	8022748 <_strtod_l+0x250>
 8022720:	1819      	adds	r1, r3, r0
 8022722:	2908      	cmp	r1, #8
 8022724:	f103 0301 	add.w	r3, r3, #1
 8022728:	4403      	add	r3, r0
 802272a:	dc1b      	bgt.n	8022764 <_strtod_l+0x26c>
 802272c:	9807      	ldr	r0, [sp, #28]
 802272e:	210a      	movs	r1, #10
 8022730:	fb01 2200 	mla	r2, r1, r0, r2
 8022734:	9207      	str	r2, [sp, #28]
 8022736:	2100      	movs	r1, #0
 8022738:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802273a:	1c50      	adds	r0, r2, #1
 802273c:	9011      	str	r0, [sp, #68]	; 0x44
 802273e:	7852      	ldrb	r2, [r2, #1]
 8022740:	4608      	mov	r0, r1
 8022742:	e7cb      	b.n	80226dc <_strtod_l+0x1e4>
 8022744:	4630      	mov	r0, r6
 8022746:	e7d4      	b.n	80226f2 <_strtod_l+0x1fa>
 8022748:	2908      	cmp	r1, #8
 802274a:	f101 0101 	add.w	r1, r1, #1
 802274e:	dc03      	bgt.n	8022758 <_strtod_l+0x260>
 8022750:	9f07      	ldr	r7, [sp, #28]
 8022752:	436f      	muls	r7, r5
 8022754:	9707      	str	r7, [sp, #28]
 8022756:	e7e1      	b.n	802271c <_strtod_l+0x224>
 8022758:	2910      	cmp	r1, #16
 802275a:	bfde      	ittt	le
 802275c:	9f05      	ldrle	r7, [sp, #20]
 802275e:	436f      	mulle	r7, r5
 8022760:	9705      	strle	r7, [sp, #20]
 8022762:	e7db      	b.n	802271c <_strtod_l+0x224>
 8022764:	2b10      	cmp	r3, #16
 8022766:	bfdf      	itttt	le
 8022768:	9805      	ldrle	r0, [sp, #20]
 802276a:	210a      	movle	r1, #10
 802276c:	fb01 2200 	mlale	r2, r1, r0, r2
 8022770:	9205      	strle	r2, [sp, #20]
 8022772:	e7e0      	b.n	8022736 <_strtod_l+0x23e>
 8022774:	f04f 0b00 	mov.w	fp, #0
 8022778:	2101      	movs	r1, #1
 802277a:	e77c      	b.n	8022676 <_strtod_l+0x17e>
 802277c:	f04f 0e00 	mov.w	lr, #0
 8022780:	f10a 0202 	add.w	r2, sl, #2
 8022784:	9211      	str	r2, [sp, #68]	; 0x44
 8022786:	f89a 2002 	ldrb.w	r2, [sl, #2]
 802278a:	e785      	b.n	8022698 <_strtod_l+0x1a0>
 802278c:	f04f 0e01 	mov.w	lr, #1
 8022790:	e7f6      	b.n	8022780 <_strtod_l+0x288>
 8022792:	bf00      	nop
 8022794:	08025ca8 	.word	0x08025ca8
 8022798:	08025ca4 	.word	0x08025ca4
 802279c:	7ff00000 	.word	0x7ff00000
 80227a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80227a2:	1c55      	adds	r5, r2, #1
 80227a4:	9511      	str	r5, [sp, #68]	; 0x44
 80227a6:	7852      	ldrb	r2, [r2, #1]
 80227a8:	2a30      	cmp	r2, #48	; 0x30
 80227aa:	d0f9      	beq.n	80227a0 <_strtod_l+0x2a8>
 80227ac:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80227b0:	2d08      	cmp	r5, #8
 80227b2:	f63f af78 	bhi.w	80226a6 <_strtod_l+0x1ae>
 80227b6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80227ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80227bc:	920a      	str	r2, [sp, #40]	; 0x28
 80227be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80227c0:	1c55      	adds	r5, r2, #1
 80227c2:	9511      	str	r5, [sp, #68]	; 0x44
 80227c4:	7852      	ldrb	r2, [r2, #1]
 80227c6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80227ca:	2f09      	cmp	r7, #9
 80227cc:	d937      	bls.n	802283e <_strtod_l+0x346>
 80227ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80227d0:	1bed      	subs	r5, r5, r7
 80227d2:	2d08      	cmp	r5, #8
 80227d4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80227d8:	dc02      	bgt.n	80227e0 <_strtod_l+0x2e8>
 80227da:	4565      	cmp	r5, ip
 80227dc:	bfa8      	it	ge
 80227de:	4665      	movge	r5, ip
 80227e0:	f1be 0f00 	cmp.w	lr, #0
 80227e4:	d000      	beq.n	80227e8 <_strtod_l+0x2f0>
 80227e6:	426d      	negs	r5, r5
 80227e8:	2b00      	cmp	r3, #0
 80227ea:	d14d      	bne.n	8022888 <_strtod_l+0x390>
 80227ec:	9b06      	ldr	r3, [sp, #24]
 80227ee:	4303      	orrs	r3, r0
 80227f0:	f47f aebd 	bne.w	802256e <_strtod_l+0x76>
 80227f4:	2900      	cmp	r1, #0
 80227f6:	f47f aed6 	bne.w	80225a6 <_strtod_l+0xae>
 80227fa:	2a69      	cmp	r2, #105	; 0x69
 80227fc:	d027      	beq.n	802284e <_strtod_l+0x356>
 80227fe:	dc24      	bgt.n	802284a <_strtod_l+0x352>
 8022800:	2a49      	cmp	r2, #73	; 0x49
 8022802:	d024      	beq.n	802284e <_strtod_l+0x356>
 8022804:	2a4e      	cmp	r2, #78	; 0x4e
 8022806:	f47f aece 	bne.w	80225a6 <_strtod_l+0xae>
 802280a:	4995      	ldr	r1, [pc, #596]	; (8022a60 <_strtod_l+0x568>)
 802280c:	a811      	add	r0, sp, #68	; 0x44
 802280e:	f001 fb45 	bl	8023e9c <__match>
 8022812:	2800      	cmp	r0, #0
 8022814:	f43f aec7 	beq.w	80225a6 <_strtod_l+0xae>
 8022818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802281a:	781b      	ldrb	r3, [r3, #0]
 802281c:	2b28      	cmp	r3, #40	; 0x28
 802281e:	d12d      	bne.n	802287c <_strtod_l+0x384>
 8022820:	4990      	ldr	r1, [pc, #576]	; (8022a64 <_strtod_l+0x56c>)
 8022822:	aa14      	add	r2, sp, #80	; 0x50
 8022824:	a811      	add	r0, sp, #68	; 0x44
 8022826:	f001 fb4d 	bl	8023ec4 <__hexnan>
 802282a:	2805      	cmp	r0, #5
 802282c:	d126      	bne.n	802287c <_strtod_l+0x384>
 802282e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022830:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8022834:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8022838:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802283c:	e697      	b.n	802256e <_strtod_l+0x76>
 802283e:	250a      	movs	r5, #10
 8022840:	fb05 2c0c 	mla	ip, r5, ip, r2
 8022844:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8022848:	e7b9      	b.n	80227be <_strtod_l+0x2c6>
 802284a:	2a6e      	cmp	r2, #110	; 0x6e
 802284c:	e7db      	b.n	8022806 <_strtod_l+0x30e>
 802284e:	4986      	ldr	r1, [pc, #536]	; (8022a68 <_strtod_l+0x570>)
 8022850:	a811      	add	r0, sp, #68	; 0x44
 8022852:	f001 fb23 	bl	8023e9c <__match>
 8022856:	2800      	cmp	r0, #0
 8022858:	f43f aea5 	beq.w	80225a6 <_strtod_l+0xae>
 802285c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802285e:	4983      	ldr	r1, [pc, #524]	; (8022a6c <_strtod_l+0x574>)
 8022860:	3b01      	subs	r3, #1
 8022862:	a811      	add	r0, sp, #68	; 0x44
 8022864:	9311      	str	r3, [sp, #68]	; 0x44
 8022866:	f001 fb19 	bl	8023e9c <__match>
 802286a:	b910      	cbnz	r0, 8022872 <_strtod_l+0x37a>
 802286c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802286e:	3301      	adds	r3, #1
 8022870:	9311      	str	r3, [sp, #68]	; 0x44
 8022872:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8022a80 <_strtod_l+0x588>
 8022876:	f04f 0800 	mov.w	r8, #0
 802287a:	e678      	b.n	802256e <_strtod_l+0x76>
 802287c:	487c      	ldr	r0, [pc, #496]	; (8022a70 <_strtod_l+0x578>)
 802287e:	f001 f857 	bl	8023930 <nan>
 8022882:	ec59 8b10 	vmov	r8, r9, d0
 8022886:	e672      	b.n	802256e <_strtod_l+0x76>
 8022888:	eddd 7a07 	vldr	s15, [sp, #28]
 802288c:	eba5 020b 	sub.w	r2, r5, fp
 8022890:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022894:	2e00      	cmp	r6, #0
 8022896:	bf08      	it	eq
 8022898:	461e      	moveq	r6, r3
 802289a:	2b10      	cmp	r3, #16
 802289c:	9206      	str	r2, [sp, #24]
 802289e:	461a      	mov	r2, r3
 80228a0:	bfa8      	it	ge
 80228a2:	2210      	movge	r2, #16
 80228a4:	2b09      	cmp	r3, #9
 80228a6:	ec59 8b17 	vmov	r8, r9, d7
 80228aa:	dd0c      	ble.n	80228c6 <_strtod_l+0x3ce>
 80228ac:	4971      	ldr	r1, [pc, #452]	; (8022a74 <_strtod_l+0x57c>)
 80228ae:	eddd 6a05 	vldr	s13, [sp, #20]
 80228b2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80228b6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80228ba:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80228be:	eea7 6b05 	vfma.f64	d6, d7, d5
 80228c2:	ec59 8b16 	vmov	r8, r9, d6
 80228c6:	2b0f      	cmp	r3, #15
 80228c8:	dc37      	bgt.n	802293a <_strtod_l+0x442>
 80228ca:	9906      	ldr	r1, [sp, #24]
 80228cc:	2900      	cmp	r1, #0
 80228ce:	f43f ae4e 	beq.w	802256e <_strtod_l+0x76>
 80228d2:	dd23      	ble.n	802291c <_strtod_l+0x424>
 80228d4:	2916      	cmp	r1, #22
 80228d6:	dc0b      	bgt.n	80228f0 <_strtod_l+0x3f8>
 80228d8:	4b66      	ldr	r3, [pc, #408]	; (8022a74 <_strtod_l+0x57c>)
 80228da:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80228de:	ed93 7b00 	vldr	d7, [r3]
 80228e2:	ec49 8b16 	vmov	d6, r8, r9
 80228e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80228ea:	ec59 8b17 	vmov	r8, r9, d7
 80228ee:	e63e      	b.n	802256e <_strtod_l+0x76>
 80228f0:	9806      	ldr	r0, [sp, #24]
 80228f2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80228f6:	4281      	cmp	r1, r0
 80228f8:	db1f      	blt.n	802293a <_strtod_l+0x442>
 80228fa:	4a5e      	ldr	r2, [pc, #376]	; (8022a74 <_strtod_l+0x57c>)
 80228fc:	f1c3 030f 	rsb	r3, r3, #15
 8022900:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8022904:	ed91 7b00 	vldr	d7, [r1]
 8022908:	ec49 8b16 	vmov	d6, r8, r9
 802290c:	1ac3      	subs	r3, r0, r3
 802290e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8022912:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022916:	ed92 6b00 	vldr	d6, [r2]
 802291a:	e7e4      	b.n	80228e6 <_strtod_l+0x3ee>
 802291c:	9906      	ldr	r1, [sp, #24]
 802291e:	3116      	adds	r1, #22
 8022920:	db0b      	blt.n	802293a <_strtod_l+0x442>
 8022922:	4b54      	ldr	r3, [pc, #336]	; (8022a74 <_strtod_l+0x57c>)
 8022924:	ebab 0505 	sub.w	r5, fp, r5
 8022928:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 802292c:	ed95 7b00 	vldr	d7, [r5]
 8022930:	ec49 8b16 	vmov	d6, r8, r9
 8022934:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022938:	e7d7      	b.n	80228ea <_strtod_l+0x3f2>
 802293a:	9906      	ldr	r1, [sp, #24]
 802293c:	1a9a      	subs	r2, r3, r2
 802293e:	440a      	add	r2, r1
 8022940:	2a00      	cmp	r2, #0
 8022942:	dd6e      	ble.n	8022a22 <_strtod_l+0x52a>
 8022944:	f012 000f 	ands.w	r0, r2, #15
 8022948:	d00a      	beq.n	8022960 <_strtod_l+0x468>
 802294a:	494a      	ldr	r1, [pc, #296]	; (8022a74 <_strtod_l+0x57c>)
 802294c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022950:	ed91 7b00 	vldr	d7, [r1]
 8022954:	ec49 8b16 	vmov	d6, r8, r9
 8022958:	ee27 7b06 	vmul.f64	d7, d7, d6
 802295c:	ec59 8b17 	vmov	r8, r9, d7
 8022960:	f032 020f 	bics.w	r2, r2, #15
 8022964:	d04e      	beq.n	8022a04 <_strtod_l+0x50c>
 8022966:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 802296a:	dd22      	ble.n	80229b2 <_strtod_l+0x4ba>
 802296c:	2500      	movs	r5, #0
 802296e:	462e      	mov	r6, r5
 8022970:	9507      	str	r5, [sp, #28]
 8022972:	462f      	mov	r7, r5
 8022974:	2322      	movs	r3, #34	; 0x22
 8022976:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8022a80 <_strtod_l+0x588>
 802297a:	6023      	str	r3, [r4, #0]
 802297c:	f04f 0800 	mov.w	r8, #0
 8022980:	9b07      	ldr	r3, [sp, #28]
 8022982:	2b00      	cmp	r3, #0
 8022984:	f43f adf3 	beq.w	802256e <_strtod_l+0x76>
 8022988:	9912      	ldr	r1, [sp, #72]	; 0x48
 802298a:	4620      	mov	r0, r4
 802298c:	f7ff f928 	bl	8021be0 <_Bfree>
 8022990:	4639      	mov	r1, r7
 8022992:	4620      	mov	r0, r4
 8022994:	f7ff f924 	bl	8021be0 <_Bfree>
 8022998:	4631      	mov	r1, r6
 802299a:	4620      	mov	r0, r4
 802299c:	f7ff f920 	bl	8021be0 <_Bfree>
 80229a0:	9907      	ldr	r1, [sp, #28]
 80229a2:	4620      	mov	r0, r4
 80229a4:	f7ff f91c 	bl	8021be0 <_Bfree>
 80229a8:	4629      	mov	r1, r5
 80229aa:	4620      	mov	r0, r4
 80229ac:	f7ff f918 	bl	8021be0 <_Bfree>
 80229b0:	e5dd      	b.n	802256e <_strtod_l+0x76>
 80229b2:	2000      	movs	r0, #0
 80229b4:	ec49 8b17 	vmov	d7, r8, r9
 80229b8:	4f2f      	ldr	r7, [pc, #188]	; (8022a78 <_strtod_l+0x580>)
 80229ba:	1112      	asrs	r2, r2, #4
 80229bc:	4601      	mov	r1, r0
 80229be:	2a01      	cmp	r2, #1
 80229c0:	dc23      	bgt.n	8022a0a <_strtod_l+0x512>
 80229c2:	b108      	cbz	r0, 80229c8 <_strtod_l+0x4d0>
 80229c4:	ec59 8b17 	vmov	r8, r9, d7
 80229c8:	4a2b      	ldr	r2, [pc, #172]	; (8022a78 <_strtod_l+0x580>)
 80229ca:	482c      	ldr	r0, [pc, #176]	; (8022a7c <_strtod_l+0x584>)
 80229cc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80229d0:	ed92 7b00 	vldr	d7, [r2]
 80229d4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80229d8:	ec49 8b16 	vmov	d6, r8, r9
 80229dc:	4a28      	ldr	r2, [pc, #160]	; (8022a80 <_strtod_l+0x588>)
 80229de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80229e2:	ee17 1a90 	vmov	r1, s15
 80229e6:	400a      	ands	r2, r1
 80229e8:	4282      	cmp	r2, r0
 80229ea:	ec59 8b17 	vmov	r8, r9, d7
 80229ee:	d8bd      	bhi.n	802296c <_strtod_l+0x474>
 80229f0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80229f4:	4282      	cmp	r2, r0
 80229f6:	bf86      	itte	hi
 80229f8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8022a84 <_strtod_l+0x58c>
 80229fc:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8022a00:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8022a04:	2200      	movs	r2, #0
 8022a06:	9205      	str	r2, [sp, #20]
 8022a08:	e076      	b.n	8022af8 <_strtod_l+0x600>
 8022a0a:	f012 0f01 	tst.w	r2, #1
 8022a0e:	d004      	beq.n	8022a1a <_strtod_l+0x522>
 8022a10:	ed97 6b00 	vldr	d6, [r7]
 8022a14:	2001      	movs	r0, #1
 8022a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a1a:	3101      	adds	r1, #1
 8022a1c:	1052      	asrs	r2, r2, #1
 8022a1e:	3708      	adds	r7, #8
 8022a20:	e7cd      	b.n	80229be <_strtod_l+0x4c6>
 8022a22:	d0ef      	beq.n	8022a04 <_strtod_l+0x50c>
 8022a24:	4252      	negs	r2, r2
 8022a26:	f012 000f 	ands.w	r0, r2, #15
 8022a2a:	d00a      	beq.n	8022a42 <_strtod_l+0x54a>
 8022a2c:	4911      	ldr	r1, [pc, #68]	; (8022a74 <_strtod_l+0x57c>)
 8022a2e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022a32:	ed91 7b00 	vldr	d7, [r1]
 8022a36:	ec49 8b16 	vmov	d6, r8, r9
 8022a3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022a3e:	ec59 8b17 	vmov	r8, r9, d7
 8022a42:	1112      	asrs	r2, r2, #4
 8022a44:	d0de      	beq.n	8022a04 <_strtod_l+0x50c>
 8022a46:	2a1f      	cmp	r2, #31
 8022a48:	dd1e      	ble.n	8022a88 <_strtod_l+0x590>
 8022a4a:	2500      	movs	r5, #0
 8022a4c:	462e      	mov	r6, r5
 8022a4e:	9507      	str	r5, [sp, #28]
 8022a50:	462f      	mov	r7, r5
 8022a52:	2322      	movs	r3, #34	; 0x22
 8022a54:	f04f 0800 	mov.w	r8, #0
 8022a58:	f04f 0900 	mov.w	r9, #0
 8022a5c:	6023      	str	r3, [r4, #0]
 8022a5e:	e78f      	b.n	8022980 <_strtod_l+0x488>
 8022a60:	08025a71 	.word	0x08025a71
 8022a64:	08025cbc 	.word	0x08025cbc
 8022a68:	08025a69 	.word	0x08025a69
 8022a6c:	08025adc 	.word	0x08025adc
 8022a70:	08025ad8 	.word	0x08025ad8
 8022a74:	08025bd0 	.word	0x08025bd0
 8022a78:	08025ba8 	.word	0x08025ba8
 8022a7c:	7ca00000 	.word	0x7ca00000
 8022a80:	7ff00000 	.word	0x7ff00000
 8022a84:	7fefffff 	.word	0x7fefffff
 8022a88:	f012 0110 	ands.w	r1, r2, #16
 8022a8c:	bf18      	it	ne
 8022a8e:	216a      	movne	r1, #106	; 0x6a
 8022a90:	9105      	str	r1, [sp, #20]
 8022a92:	ec49 8b17 	vmov	d7, r8, r9
 8022a96:	49be      	ldr	r1, [pc, #760]	; (8022d90 <_strtod_l+0x898>)
 8022a98:	2000      	movs	r0, #0
 8022a9a:	07d7      	lsls	r7, r2, #31
 8022a9c:	d504      	bpl.n	8022aa8 <_strtod_l+0x5b0>
 8022a9e:	ed91 6b00 	vldr	d6, [r1]
 8022aa2:	2001      	movs	r0, #1
 8022aa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022aa8:	1052      	asrs	r2, r2, #1
 8022aaa:	f101 0108 	add.w	r1, r1, #8
 8022aae:	d1f4      	bne.n	8022a9a <_strtod_l+0x5a2>
 8022ab0:	b108      	cbz	r0, 8022ab6 <_strtod_l+0x5be>
 8022ab2:	ec59 8b17 	vmov	r8, r9, d7
 8022ab6:	9a05      	ldr	r2, [sp, #20]
 8022ab8:	b1ba      	cbz	r2, 8022aea <_strtod_l+0x5f2>
 8022aba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8022abe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8022ac2:	2a00      	cmp	r2, #0
 8022ac4:	4648      	mov	r0, r9
 8022ac6:	dd10      	ble.n	8022aea <_strtod_l+0x5f2>
 8022ac8:	2a1f      	cmp	r2, #31
 8022aca:	f340 812c 	ble.w	8022d26 <_strtod_l+0x82e>
 8022ace:	2a34      	cmp	r2, #52	; 0x34
 8022ad0:	bfde      	ittt	le
 8022ad2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8022ad6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8022ada:	408a      	lslle	r2, r1
 8022adc:	f04f 0800 	mov.w	r8, #0
 8022ae0:	bfcc      	ite	gt
 8022ae2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8022ae6:	ea02 0900 	andle.w	r9, r2, r0
 8022aea:	ec49 8b17 	vmov	d7, r8, r9
 8022aee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022af6:	d0a8      	beq.n	8022a4a <_strtod_l+0x552>
 8022af8:	9a07      	ldr	r2, [sp, #28]
 8022afa:	9200      	str	r2, [sp, #0]
 8022afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022afe:	4632      	mov	r2, r6
 8022b00:	4620      	mov	r0, r4
 8022b02:	f7ff f8d5 	bl	8021cb0 <__s2b>
 8022b06:	9007      	str	r0, [sp, #28]
 8022b08:	2800      	cmp	r0, #0
 8022b0a:	f43f af2f 	beq.w	802296c <_strtod_l+0x474>
 8022b0e:	9a06      	ldr	r2, [sp, #24]
 8022b10:	2a00      	cmp	r2, #0
 8022b12:	ebab 0305 	sub.w	r3, fp, r5
 8022b16:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8022d70 <_strtod_l+0x878>
 8022b1a:	bfa8      	it	ge
 8022b1c:	2300      	movge	r3, #0
 8022b1e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8022d78 <_strtod_l+0x880>
 8022b22:	ed9f bb97 	vldr	d11, [pc, #604]	; 8022d80 <_strtod_l+0x888>
 8022b26:	9309      	str	r3, [sp, #36]	; 0x24
 8022b28:	2500      	movs	r5, #0
 8022b2a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8022b30:	462e      	mov	r6, r5
 8022b32:	9b07      	ldr	r3, [sp, #28]
 8022b34:	4620      	mov	r0, r4
 8022b36:	6859      	ldr	r1, [r3, #4]
 8022b38:	f7ff f812 	bl	8021b60 <_Balloc>
 8022b3c:	4607      	mov	r7, r0
 8022b3e:	2800      	cmp	r0, #0
 8022b40:	f43f af18 	beq.w	8022974 <_strtod_l+0x47c>
 8022b44:	9b07      	ldr	r3, [sp, #28]
 8022b46:	691a      	ldr	r2, [r3, #16]
 8022b48:	3202      	adds	r2, #2
 8022b4a:	f103 010c 	add.w	r1, r3, #12
 8022b4e:	0092      	lsls	r2, r2, #2
 8022b50:	300c      	adds	r0, #12
 8022b52:	f7fe f984 	bl	8020e5e <memcpy>
 8022b56:	ec49 8b10 	vmov	d0, r8, r9
 8022b5a:	aa14      	add	r2, sp, #80	; 0x50
 8022b5c:	a913      	add	r1, sp, #76	; 0x4c
 8022b5e:	4620      	mov	r0, r4
 8022b60:	f7ff fbda 	bl	8022318 <__d2b>
 8022b64:	ec49 8b18 	vmov	d8, r8, r9
 8022b68:	9012      	str	r0, [sp, #72]	; 0x48
 8022b6a:	2800      	cmp	r0, #0
 8022b6c:	f43f af02 	beq.w	8022974 <_strtod_l+0x47c>
 8022b70:	2101      	movs	r1, #1
 8022b72:	4620      	mov	r0, r4
 8022b74:	f7ff f934 	bl	8021de0 <__i2b>
 8022b78:	4606      	mov	r6, r0
 8022b7a:	2800      	cmp	r0, #0
 8022b7c:	f43f aefa 	beq.w	8022974 <_strtod_l+0x47c>
 8022b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022b82:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022b84:	2b00      	cmp	r3, #0
 8022b86:	bfab      	itete	ge
 8022b88:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8022b8a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8022b8c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8022b90:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8022b94:	bfac      	ite	ge
 8022b96:	eb03 0b02 	addge.w	fp, r3, r2
 8022b9a:	eba2 0a03 	sublt.w	sl, r2, r3
 8022b9e:	9a05      	ldr	r2, [sp, #20]
 8022ba0:	1a9b      	subs	r3, r3, r2
 8022ba2:	440b      	add	r3, r1
 8022ba4:	4a7b      	ldr	r2, [pc, #492]	; (8022d94 <_strtod_l+0x89c>)
 8022ba6:	3b01      	subs	r3, #1
 8022ba8:	4293      	cmp	r3, r2
 8022baa:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8022bae:	f280 80cd 	bge.w	8022d4c <_strtod_l+0x854>
 8022bb2:	1ad2      	subs	r2, r2, r3
 8022bb4:	2a1f      	cmp	r2, #31
 8022bb6:	eba1 0102 	sub.w	r1, r1, r2
 8022bba:	f04f 0001 	mov.w	r0, #1
 8022bbe:	f300 80b9 	bgt.w	8022d34 <_strtod_l+0x83c>
 8022bc2:	fa00 f302 	lsl.w	r3, r0, r2
 8022bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bc8:	2300      	movs	r3, #0
 8022bca:	930a      	str	r3, [sp, #40]	; 0x28
 8022bcc:	eb0b 0301 	add.w	r3, fp, r1
 8022bd0:	9a05      	ldr	r2, [sp, #20]
 8022bd2:	459b      	cmp	fp, r3
 8022bd4:	448a      	add	sl, r1
 8022bd6:	4492      	add	sl, r2
 8022bd8:	465a      	mov	r2, fp
 8022bda:	bfa8      	it	ge
 8022bdc:	461a      	movge	r2, r3
 8022bde:	4552      	cmp	r2, sl
 8022be0:	bfa8      	it	ge
 8022be2:	4652      	movge	r2, sl
 8022be4:	2a00      	cmp	r2, #0
 8022be6:	bfc2      	ittt	gt
 8022be8:	1a9b      	subgt	r3, r3, r2
 8022bea:	ebaa 0a02 	subgt.w	sl, sl, r2
 8022bee:	ebab 0b02 	subgt.w	fp, fp, r2
 8022bf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022bf4:	2a00      	cmp	r2, #0
 8022bf6:	dd18      	ble.n	8022c2a <_strtod_l+0x732>
 8022bf8:	4631      	mov	r1, r6
 8022bfa:	4620      	mov	r0, r4
 8022bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8022bfe:	f7ff f9af 	bl	8021f60 <__pow5mult>
 8022c02:	4606      	mov	r6, r0
 8022c04:	2800      	cmp	r0, #0
 8022c06:	f43f aeb5 	beq.w	8022974 <_strtod_l+0x47c>
 8022c0a:	4601      	mov	r1, r0
 8022c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022c0e:	4620      	mov	r0, r4
 8022c10:	f7ff f8fc 	bl	8021e0c <__multiply>
 8022c14:	900e      	str	r0, [sp, #56]	; 0x38
 8022c16:	2800      	cmp	r0, #0
 8022c18:	f43f aeac 	beq.w	8022974 <_strtod_l+0x47c>
 8022c1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022c1e:	4620      	mov	r0, r4
 8022c20:	f7fe ffde 	bl	8021be0 <_Bfree>
 8022c24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c28:	9212      	str	r2, [sp, #72]	; 0x48
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	f300 8093 	bgt.w	8022d56 <_strtod_l+0x85e>
 8022c30:	9b06      	ldr	r3, [sp, #24]
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	dd08      	ble.n	8022c48 <_strtod_l+0x750>
 8022c36:	4639      	mov	r1, r7
 8022c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022c3a:	4620      	mov	r0, r4
 8022c3c:	f7ff f990 	bl	8021f60 <__pow5mult>
 8022c40:	4607      	mov	r7, r0
 8022c42:	2800      	cmp	r0, #0
 8022c44:	f43f ae96 	beq.w	8022974 <_strtod_l+0x47c>
 8022c48:	f1ba 0f00 	cmp.w	sl, #0
 8022c4c:	dd08      	ble.n	8022c60 <_strtod_l+0x768>
 8022c4e:	4639      	mov	r1, r7
 8022c50:	4652      	mov	r2, sl
 8022c52:	4620      	mov	r0, r4
 8022c54:	f7ff f9de 	bl	8022014 <__lshift>
 8022c58:	4607      	mov	r7, r0
 8022c5a:	2800      	cmp	r0, #0
 8022c5c:	f43f ae8a 	beq.w	8022974 <_strtod_l+0x47c>
 8022c60:	f1bb 0f00 	cmp.w	fp, #0
 8022c64:	dd08      	ble.n	8022c78 <_strtod_l+0x780>
 8022c66:	4631      	mov	r1, r6
 8022c68:	465a      	mov	r2, fp
 8022c6a:	4620      	mov	r0, r4
 8022c6c:	f7ff f9d2 	bl	8022014 <__lshift>
 8022c70:	4606      	mov	r6, r0
 8022c72:	2800      	cmp	r0, #0
 8022c74:	f43f ae7e 	beq.w	8022974 <_strtod_l+0x47c>
 8022c78:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022c7a:	463a      	mov	r2, r7
 8022c7c:	4620      	mov	r0, r4
 8022c7e:	f7ff fa51 	bl	8022124 <__mdiff>
 8022c82:	4605      	mov	r5, r0
 8022c84:	2800      	cmp	r0, #0
 8022c86:	f43f ae75 	beq.w	8022974 <_strtod_l+0x47c>
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8022c90:	60c3      	str	r3, [r0, #12]
 8022c92:	4631      	mov	r1, r6
 8022c94:	f7ff fa2a 	bl	80220ec <__mcmp>
 8022c98:	2800      	cmp	r0, #0
 8022c9a:	da7f      	bge.n	8022d9c <_strtod_l+0x8a4>
 8022c9c:	ea5a 0a08 	orrs.w	sl, sl, r8
 8022ca0:	f040 80a5 	bne.w	8022dee <_strtod_l+0x8f6>
 8022ca4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	f040 80a0 	bne.w	8022dee <_strtod_l+0x8f6>
 8022cae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022cb2:	0d1b      	lsrs	r3, r3, #20
 8022cb4:	051b      	lsls	r3, r3, #20
 8022cb6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8022cba:	f240 8098 	bls.w	8022dee <_strtod_l+0x8f6>
 8022cbe:	696b      	ldr	r3, [r5, #20]
 8022cc0:	b91b      	cbnz	r3, 8022cca <_strtod_l+0x7d2>
 8022cc2:	692b      	ldr	r3, [r5, #16]
 8022cc4:	2b01      	cmp	r3, #1
 8022cc6:	f340 8092 	ble.w	8022dee <_strtod_l+0x8f6>
 8022cca:	4629      	mov	r1, r5
 8022ccc:	2201      	movs	r2, #1
 8022cce:	4620      	mov	r0, r4
 8022cd0:	f7ff f9a0 	bl	8022014 <__lshift>
 8022cd4:	4631      	mov	r1, r6
 8022cd6:	4605      	mov	r5, r0
 8022cd8:	f7ff fa08 	bl	80220ec <__mcmp>
 8022cdc:	2800      	cmp	r0, #0
 8022cde:	f340 8086 	ble.w	8022dee <_strtod_l+0x8f6>
 8022ce2:	9905      	ldr	r1, [sp, #20]
 8022ce4:	4a2c      	ldr	r2, [pc, #176]	; (8022d98 <_strtod_l+0x8a0>)
 8022ce6:	464b      	mov	r3, r9
 8022ce8:	2900      	cmp	r1, #0
 8022cea:	f000 809f 	beq.w	8022e2c <_strtod_l+0x934>
 8022cee:	ea02 0109 	and.w	r1, r2, r9
 8022cf2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8022cf6:	f300 8099 	bgt.w	8022e2c <_strtod_l+0x934>
 8022cfa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8022cfe:	f77f aea8 	ble.w	8022a52 <_strtod_l+0x55a>
 8022d02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8022d88 <_strtod_l+0x890>
 8022d06:	ec49 8b16 	vmov	d6, r8, r9
 8022d0a:	4b23      	ldr	r3, [pc, #140]	; (8022d98 <_strtod_l+0x8a0>)
 8022d0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022d10:	ee17 2a90 	vmov	r2, s15
 8022d14:	4013      	ands	r3, r2
 8022d16:	ec59 8b17 	vmov	r8, r9, d7
 8022d1a:	2b00      	cmp	r3, #0
 8022d1c:	f47f ae34 	bne.w	8022988 <_strtod_l+0x490>
 8022d20:	2322      	movs	r3, #34	; 0x22
 8022d22:	6023      	str	r3, [r4, #0]
 8022d24:	e630      	b.n	8022988 <_strtod_l+0x490>
 8022d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8022d2e:	ea02 0808 	and.w	r8, r2, r8
 8022d32:	e6da      	b.n	8022aea <_strtod_l+0x5f2>
 8022d34:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8022d38:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8022d3c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8022d40:	33e2      	adds	r3, #226	; 0xe2
 8022d42:	fa00 f303 	lsl.w	r3, r0, r3
 8022d46:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8022d4a:	e73f      	b.n	8022bcc <_strtod_l+0x6d4>
 8022d4c:	2200      	movs	r2, #0
 8022d4e:	2301      	movs	r3, #1
 8022d50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8022d54:	e73a      	b.n	8022bcc <_strtod_l+0x6d4>
 8022d56:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022d58:	461a      	mov	r2, r3
 8022d5a:	4620      	mov	r0, r4
 8022d5c:	f7ff f95a 	bl	8022014 <__lshift>
 8022d60:	9012      	str	r0, [sp, #72]	; 0x48
 8022d62:	2800      	cmp	r0, #0
 8022d64:	f47f af64 	bne.w	8022c30 <_strtod_l+0x738>
 8022d68:	e604      	b.n	8022974 <_strtod_l+0x47c>
 8022d6a:	bf00      	nop
 8022d6c:	f3af 8000 	nop.w
 8022d70:	94a03595 	.word	0x94a03595
 8022d74:	3fcfffff 	.word	0x3fcfffff
 8022d78:	94a03595 	.word	0x94a03595
 8022d7c:	3fdfffff 	.word	0x3fdfffff
 8022d80:	35afe535 	.word	0x35afe535
 8022d84:	3fe00000 	.word	0x3fe00000
 8022d88:	00000000 	.word	0x00000000
 8022d8c:	39500000 	.word	0x39500000
 8022d90:	08025cd0 	.word	0x08025cd0
 8022d94:	fffffc02 	.word	0xfffffc02
 8022d98:	7ff00000 	.word	0x7ff00000
 8022d9c:	46cb      	mov	fp, r9
 8022d9e:	d15f      	bne.n	8022e60 <_strtod_l+0x968>
 8022da0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022da4:	f1ba 0f00 	cmp.w	sl, #0
 8022da8:	d02a      	beq.n	8022e00 <_strtod_l+0x908>
 8022daa:	4aa7      	ldr	r2, [pc, #668]	; (8023048 <_strtod_l+0xb50>)
 8022dac:	4293      	cmp	r3, r2
 8022dae:	d12b      	bne.n	8022e08 <_strtod_l+0x910>
 8022db0:	9b05      	ldr	r3, [sp, #20]
 8022db2:	4642      	mov	r2, r8
 8022db4:	b1fb      	cbz	r3, 8022df6 <_strtod_l+0x8fe>
 8022db6:	4ba5      	ldr	r3, [pc, #660]	; (802304c <_strtod_l+0xb54>)
 8022db8:	ea09 0303 	and.w	r3, r9, r3
 8022dbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8022dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022dc4:	d81a      	bhi.n	8022dfc <_strtod_l+0x904>
 8022dc6:	0d1b      	lsrs	r3, r3, #20
 8022dc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8022dd0:	429a      	cmp	r2, r3
 8022dd2:	d119      	bne.n	8022e08 <_strtod_l+0x910>
 8022dd4:	4b9e      	ldr	r3, [pc, #632]	; (8023050 <_strtod_l+0xb58>)
 8022dd6:	459b      	cmp	fp, r3
 8022dd8:	d102      	bne.n	8022de0 <_strtod_l+0x8e8>
 8022dda:	3201      	adds	r2, #1
 8022ddc:	f43f adca 	beq.w	8022974 <_strtod_l+0x47c>
 8022de0:	4b9a      	ldr	r3, [pc, #616]	; (802304c <_strtod_l+0xb54>)
 8022de2:	ea0b 0303 	and.w	r3, fp, r3
 8022de6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8022dea:	f04f 0800 	mov.w	r8, #0
 8022dee:	9b05      	ldr	r3, [sp, #20]
 8022df0:	2b00      	cmp	r3, #0
 8022df2:	d186      	bne.n	8022d02 <_strtod_l+0x80a>
 8022df4:	e5c8      	b.n	8022988 <_strtod_l+0x490>
 8022df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022dfa:	e7e9      	b.n	8022dd0 <_strtod_l+0x8d8>
 8022dfc:	460b      	mov	r3, r1
 8022dfe:	e7e7      	b.n	8022dd0 <_strtod_l+0x8d8>
 8022e00:	ea53 0308 	orrs.w	r3, r3, r8
 8022e04:	f43f af6d 	beq.w	8022ce2 <_strtod_l+0x7ea>
 8022e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e0a:	b1cb      	cbz	r3, 8022e40 <_strtod_l+0x948>
 8022e0c:	ea13 0f0b 	tst.w	r3, fp
 8022e10:	d0ed      	beq.n	8022dee <_strtod_l+0x8f6>
 8022e12:	9a05      	ldr	r2, [sp, #20]
 8022e14:	4640      	mov	r0, r8
 8022e16:	4649      	mov	r1, r9
 8022e18:	f1ba 0f00 	cmp.w	sl, #0
 8022e1c:	d014      	beq.n	8022e48 <_strtod_l+0x950>
 8022e1e:	f7ff fb51 	bl	80224c4 <sulp>
 8022e22:	ee38 7b00 	vadd.f64	d7, d8, d0
 8022e26:	ec59 8b17 	vmov	r8, r9, d7
 8022e2a:	e7e0      	b.n	8022dee <_strtod_l+0x8f6>
 8022e2c:	4013      	ands	r3, r2
 8022e2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8022e32:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8022e36:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8022e3a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022e3e:	e7d6      	b.n	8022dee <_strtod_l+0x8f6>
 8022e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e42:	ea13 0f08 	tst.w	r3, r8
 8022e46:	e7e3      	b.n	8022e10 <_strtod_l+0x918>
 8022e48:	f7ff fb3c 	bl	80224c4 <sulp>
 8022e4c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8022e50:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8022e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e58:	ec59 8b10 	vmov	r8, r9, d0
 8022e5c:	d1c7      	bne.n	8022dee <_strtod_l+0x8f6>
 8022e5e:	e5f8      	b.n	8022a52 <_strtod_l+0x55a>
 8022e60:	4631      	mov	r1, r6
 8022e62:	4628      	mov	r0, r5
 8022e64:	f7ff fab2 	bl	80223cc <__ratio>
 8022e68:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8022e6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8022e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e74:	d85f      	bhi.n	8022f36 <_strtod_l+0xa3e>
 8022e76:	f1ba 0f00 	cmp.w	sl, #0
 8022e7a:	d166      	bne.n	8022f4a <_strtod_l+0xa52>
 8022e7c:	f1b8 0f00 	cmp.w	r8, #0
 8022e80:	d14d      	bne.n	8022f1e <_strtod_l+0xa26>
 8022e82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022e86:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	d162      	bne.n	8022f54 <_strtod_l+0xa5c>
 8022e8e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8022e92:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e9a:	d401      	bmi.n	8022ea0 <_strtod_l+0x9a8>
 8022e9c:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022ea0:	eeb1 cb4d 	vneg.f64	d12, d13
 8022ea4:	4869      	ldr	r0, [pc, #420]	; (802304c <_strtod_l+0xb54>)
 8022ea6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8023058 <_strtod_l+0xb60>
 8022eaa:	ea0b 0100 	and.w	r1, fp, r0
 8022eae:	4561      	cmp	r1, ip
 8022eb0:	ec53 2b1c 	vmov	r2, r3, d12
 8022eb4:	d17a      	bne.n	8022fac <_strtod_l+0xab4>
 8022eb6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8022eba:	ec49 8b10 	vmov	d0, r8, r9
 8022ebe:	910a      	str	r1, [sp, #40]	; 0x28
 8022ec0:	f7ff f9ba 	bl	8022238 <__ulp>
 8022ec4:	ec49 8b1e 	vmov	d14, r8, r9
 8022ec8:	4860      	ldr	r0, [pc, #384]	; (802304c <_strtod_l+0xb54>)
 8022eca:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8022ece:	ee1e 3a90 	vmov	r3, s29
 8022ed2:	4a60      	ldr	r2, [pc, #384]	; (8023054 <_strtod_l+0xb5c>)
 8022ed4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022ed6:	4018      	ands	r0, r3
 8022ed8:	4290      	cmp	r0, r2
 8022eda:	ec59 8b1e 	vmov	r8, r9, d14
 8022ede:	d93c      	bls.n	8022f5a <_strtod_l+0xa62>
 8022ee0:	ee18 2a90 	vmov	r2, s17
 8022ee4:	4b5a      	ldr	r3, [pc, #360]	; (8023050 <_strtod_l+0xb58>)
 8022ee6:	429a      	cmp	r2, r3
 8022ee8:	d104      	bne.n	8022ef4 <_strtod_l+0x9fc>
 8022eea:	ee18 3a10 	vmov	r3, s16
 8022eee:	3301      	adds	r3, #1
 8022ef0:	f43f ad40 	beq.w	8022974 <_strtod_l+0x47c>
 8022ef4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8023050 <_strtod_l+0xb58>
 8022ef8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022efc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022efe:	4620      	mov	r0, r4
 8022f00:	f7fe fe6e 	bl	8021be0 <_Bfree>
 8022f04:	4639      	mov	r1, r7
 8022f06:	4620      	mov	r0, r4
 8022f08:	f7fe fe6a 	bl	8021be0 <_Bfree>
 8022f0c:	4631      	mov	r1, r6
 8022f0e:	4620      	mov	r0, r4
 8022f10:	f7fe fe66 	bl	8021be0 <_Bfree>
 8022f14:	4629      	mov	r1, r5
 8022f16:	4620      	mov	r0, r4
 8022f18:	f7fe fe62 	bl	8021be0 <_Bfree>
 8022f1c:	e609      	b.n	8022b32 <_strtod_l+0x63a>
 8022f1e:	f1b8 0f01 	cmp.w	r8, #1
 8022f22:	d103      	bne.n	8022f2c <_strtod_l+0xa34>
 8022f24:	f1b9 0f00 	cmp.w	r9, #0
 8022f28:	f43f ad93 	beq.w	8022a52 <_strtod_l+0x55a>
 8022f2c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8022f30:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022f34:	e7b6      	b.n	8022ea4 <_strtod_l+0x9ac>
 8022f36:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022f3a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022f3e:	f1ba 0f00 	cmp.w	sl, #0
 8022f42:	d0ad      	beq.n	8022ea0 <_strtod_l+0x9a8>
 8022f44:	eeb0 cb4d 	vmov.f64	d12, d13
 8022f48:	e7ac      	b.n	8022ea4 <_strtod_l+0x9ac>
 8022f4a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8022f4e:	eeb0 db4c 	vmov.f64	d13, d12
 8022f52:	e7a7      	b.n	8022ea4 <_strtod_l+0x9ac>
 8022f54:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8022f58:	e7a4      	b.n	8022ea4 <_strtod_l+0x9ac>
 8022f5a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8022f5e:	9b05      	ldr	r3, [sp, #20]
 8022f60:	46cb      	mov	fp, r9
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	d1ca      	bne.n	8022efc <_strtod_l+0xa04>
 8022f66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022f6a:	0d1b      	lsrs	r3, r3, #20
 8022f6c:	051b      	lsls	r3, r3, #20
 8022f6e:	4299      	cmp	r1, r3
 8022f70:	d1c4      	bne.n	8022efc <_strtod_l+0xa04>
 8022f72:	ec51 0b1d 	vmov	r0, r1, d13
 8022f76:	f7dd fbef 	bl	8000758 <__aeabi_d2lz>
 8022f7a:	f7dd fb57 	bl	800062c <__aeabi_l2d>
 8022f7e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8022f82:	ec41 0b17 	vmov	d7, r0, r1
 8022f86:	ea4b 0b08 	orr.w	fp, fp, r8
 8022f8a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8022f8e:	ee3d db47 	vsub.f64	d13, d13, d7
 8022f92:	d03c      	beq.n	802300e <_strtod_l+0xb16>
 8022f94:	eeb4 dbca 	vcmpe.f64	d13, d10
 8022f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f9c:	f53f acf4 	bmi.w	8022988 <_strtod_l+0x490>
 8022fa0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8022fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fa8:	dda8      	ble.n	8022efc <_strtod_l+0xa04>
 8022faa:	e4ed      	b.n	8022988 <_strtod_l+0x490>
 8022fac:	9805      	ldr	r0, [sp, #20]
 8022fae:	b1f0      	cbz	r0, 8022fee <_strtod_l+0xaf6>
 8022fb0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8022fb4:	d81b      	bhi.n	8022fee <_strtod_l+0xaf6>
 8022fb6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8023040 <_strtod_l+0xb48>
 8022fba:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8022fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fc2:	d811      	bhi.n	8022fe8 <_strtod_l+0xaf0>
 8022fc4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8022fc8:	ee1d 3a10 	vmov	r3, s26
 8022fcc:	2b01      	cmp	r3, #1
 8022fce:	bf38      	it	cc
 8022fd0:	2301      	movcc	r3, #1
 8022fd2:	ee0d 3a10 	vmov	s26, r3
 8022fd6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8022fda:	f1ba 0f00 	cmp.w	sl, #0
 8022fde:	d113      	bne.n	8023008 <_strtod_l+0xb10>
 8022fe0:	eeb1 7b4d 	vneg.f64	d7, d13
 8022fe4:	ec53 2b17 	vmov	r2, r3, d7
 8022fe8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8022fec:	1a43      	subs	r3, r0, r1
 8022fee:	eeb0 0b48 	vmov.f64	d0, d8
 8022ff2:	ec43 2b1c 	vmov	d12, r2, r3
 8022ff6:	910a      	str	r1, [sp, #40]	; 0x28
 8022ff8:	f7ff f91e 	bl	8022238 <__ulp>
 8022ffc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022ffe:	eeac 8b00 	vfma.f64	d8, d12, d0
 8023002:	ec59 8b18 	vmov	r8, r9, d8
 8023006:	e7aa      	b.n	8022f5e <_strtod_l+0xa66>
 8023008:	eeb0 7b4d 	vmov.f64	d7, d13
 802300c:	e7ea      	b.n	8022fe4 <_strtod_l+0xaec>
 802300e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8023012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023016:	f57f af71 	bpl.w	8022efc <_strtod_l+0xa04>
 802301a:	e4b5      	b.n	8022988 <_strtod_l+0x490>
 802301c:	2300      	movs	r3, #0
 802301e:	9308      	str	r3, [sp, #32]
 8023020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023024:	6013      	str	r3, [r2, #0]
 8023026:	f7ff baa6 	b.w	8022576 <_strtod_l+0x7e>
 802302a:	2a65      	cmp	r2, #101	; 0x65
 802302c:	f43f aba2 	beq.w	8022774 <_strtod_l+0x27c>
 8023030:	2a45      	cmp	r2, #69	; 0x45
 8023032:	f43f ab9f 	beq.w	8022774 <_strtod_l+0x27c>
 8023036:	2101      	movs	r1, #1
 8023038:	f7ff bbd8 	b.w	80227ec <_strtod_l+0x2f4>
 802303c:	f3af 8000 	nop.w
 8023040:	ffc00000 	.word	0xffc00000
 8023044:	41dfffff 	.word	0x41dfffff
 8023048:	000fffff 	.word	0x000fffff
 802304c:	7ff00000 	.word	0x7ff00000
 8023050:	7fefffff 	.word	0x7fefffff
 8023054:	7c9fffff 	.word	0x7c9fffff
 8023058:	7fe00000 	.word	0x7fe00000

0802305c <_strtod_r>:
 802305c:	4b01      	ldr	r3, [pc, #4]	; (8023064 <_strtod_r+0x8>)
 802305e:	f7ff ba4b 	b.w	80224f8 <_strtod_l>
 8023062:	bf00      	nop
 8023064:	2000077c 	.word	0x2000077c

08023068 <_strtol_l.constprop.0>:
 8023068:	2b01      	cmp	r3, #1
 802306a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802306e:	d001      	beq.n	8023074 <_strtol_l.constprop.0+0xc>
 8023070:	2b24      	cmp	r3, #36	; 0x24
 8023072:	d906      	bls.n	8023082 <_strtol_l.constprop.0+0x1a>
 8023074:	f7fd febe 	bl	8020df4 <__errno>
 8023078:	2316      	movs	r3, #22
 802307a:	6003      	str	r3, [r0, #0]
 802307c:	2000      	movs	r0, #0
 802307e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023082:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8023168 <_strtol_l.constprop.0+0x100>
 8023086:	460d      	mov	r5, r1
 8023088:	462e      	mov	r6, r5
 802308a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802308e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8023092:	f017 0708 	ands.w	r7, r7, #8
 8023096:	d1f7      	bne.n	8023088 <_strtol_l.constprop.0+0x20>
 8023098:	2c2d      	cmp	r4, #45	; 0x2d
 802309a:	d132      	bne.n	8023102 <_strtol_l.constprop.0+0x9a>
 802309c:	782c      	ldrb	r4, [r5, #0]
 802309e:	2701      	movs	r7, #1
 80230a0:	1cb5      	adds	r5, r6, #2
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	d05b      	beq.n	802315e <_strtol_l.constprop.0+0xf6>
 80230a6:	2b10      	cmp	r3, #16
 80230a8:	d109      	bne.n	80230be <_strtol_l.constprop.0+0x56>
 80230aa:	2c30      	cmp	r4, #48	; 0x30
 80230ac:	d107      	bne.n	80230be <_strtol_l.constprop.0+0x56>
 80230ae:	782c      	ldrb	r4, [r5, #0]
 80230b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80230b4:	2c58      	cmp	r4, #88	; 0x58
 80230b6:	d14d      	bne.n	8023154 <_strtol_l.constprop.0+0xec>
 80230b8:	786c      	ldrb	r4, [r5, #1]
 80230ba:	2310      	movs	r3, #16
 80230bc:	3502      	adds	r5, #2
 80230be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80230c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80230c6:	f04f 0e00 	mov.w	lr, #0
 80230ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80230ce:	4676      	mov	r6, lr
 80230d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80230d4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80230d8:	f1bc 0f09 	cmp.w	ip, #9
 80230dc:	d816      	bhi.n	802310c <_strtol_l.constprop.0+0xa4>
 80230de:	4664      	mov	r4, ip
 80230e0:	42a3      	cmp	r3, r4
 80230e2:	dd24      	ble.n	802312e <_strtol_l.constprop.0+0xc6>
 80230e4:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80230e8:	d008      	beq.n	80230fc <_strtol_l.constprop.0+0x94>
 80230ea:	45b1      	cmp	r9, r6
 80230ec:	d31c      	bcc.n	8023128 <_strtol_l.constprop.0+0xc0>
 80230ee:	d101      	bne.n	80230f4 <_strtol_l.constprop.0+0x8c>
 80230f0:	45a2      	cmp	sl, r4
 80230f2:	db19      	blt.n	8023128 <_strtol_l.constprop.0+0xc0>
 80230f4:	fb06 4603 	mla	r6, r6, r3, r4
 80230f8:	f04f 0e01 	mov.w	lr, #1
 80230fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023100:	e7e8      	b.n	80230d4 <_strtol_l.constprop.0+0x6c>
 8023102:	2c2b      	cmp	r4, #43	; 0x2b
 8023104:	bf04      	itt	eq
 8023106:	782c      	ldrbeq	r4, [r5, #0]
 8023108:	1cb5      	addeq	r5, r6, #2
 802310a:	e7ca      	b.n	80230a2 <_strtol_l.constprop.0+0x3a>
 802310c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023110:	f1bc 0f19 	cmp.w	ip, #25
 8023114:	d801      	bhi.n	802311a <_strtol_l.constprop.0+0xb2>
 8023116:	3c37      	subs	r4, #55	; 0x37
 8023118:	e7e2      	b.n	80230e0 <_strtol_l.constprop.0+0x78>
 802311a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802311e:	f1bc 0f19 	cmp.w	ip, #25
 8023122:	d804      	bhi.n	802312e <_strtol_l.constprop.0+0xc6>
 8023124:	3c57      	subs	r4, #87	; 0x57
 8023126:	e7db      	b.n	80230e0 <_strtol_l.constprop.0+0x78>
 8023128:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 802312c:	e7e6      	b.n	80230fc <_strtol_l.constprop.0+0x94>
 802312e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8023132:	d105      	bne.n	8023140 <_strtol_l.constprop.0+0xd8>
 8023134:	2322      	movs	r3, #34	; 0x22
 8023136:	6003      	str	r3, [r0, #0]
 8023138:	4646      	mov	r6, r8
 802313a:	b942      	cbnz	r2, 802314e <_strtol_l.constprop.0+0xe6>
 802313c:	4630      	mov	r0, r6
 802313e:	e79e      	b.n	802307e <_strtol_l.constprop.0+0x16>
 8023140:	b107      	cbz	r7, 8023144 <_strtol_l.constprop.0+0xdc>
 8023142:	4276      	negs	r6, r6
 8023144:	2a00      	cmp	r2, #0
 8023146:	d0f9      	beq.n	802313c <_strtol_l.constprop.0+0xd4>
 8023148:	f1be 0f00 	cmp.w	lr, #0
 802314c:	d000      	beq.n	8023150 <_strtol_l.constprop.0+0xe8>
 802314e:	1e69      	subs	r1, r5, #1
 8023150:	6011      	str	r1, [r2, #0]
 8023152:	e7f3      	b.n	802313c <_strtol_l.constprop.0+0xd4>
 8023154:	2430      	movs	r4, #48	; 0x30
 8023156:	2b00      	cmp	r3, #0
 8023158:	d1b1      	bne.n	80230be <_strtol_l.constprop.0+0x56>
 802315a:	2308      	movs	r3, #8
 802315c:	e7af      	b.n	80230be <_strtol_l.constprop.0+0x56>
 802315e:	2c30      	cmp	r4, #48	; 0x30
 8023160:	d0a5      	beq.n	80230ae <_strtol_l.constprop.0+0x46>
 8023162:	230a      	movs	r3, #10
 8023164:	e7ab      	b.n	80230be <_strtol_l.constprop.0+0x56>
 8023166:	bf00      	nop
 8023168:	08025964 	.word	0x08025964

0802316c <_strtol_r>:
 802316c:	f7ff bf7c 	b.w	8023068 <_strtol_l.constprop.0>

08023170 <__ssputs_r>:
 8023170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023174:	688e      	ldr	r6, [r1, #8]
 8023176:	461f      	mov	r7, r3
 8023178:	42be      	cmp	r6, r7
 802317a:	680b      	ldr	r3, [r1, #0]
 802317c:	4682      	mov	sl, r0
 802317e:	460c      	mov	r4, r1
 8023180:	4690      	mov	r8, r2
 8023182:	d82c      	bhi.n	80231de <__ssputs_r+0x6e>
 8023184:	898a      	ldrh	r2, [r1, #12]
 8023186:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802318a:	d026      	beq.n	80231da <__ssputs_r+0x6a>
 802318c:	6965      	ldr	r5, [r4, #20]
 802318e:	6909      	ldr	r1, [r1, #16]
 8023190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023194:	eba3 0901 	sub.w	r9, r3, r1
 8023198:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802319c:	1c7b      	adds	r3, r7, #1
 802319e:	444b      	add	r3, r9
 80231a0:	106d      	asrs	r5, r5, #1
 80231a2:	429d      	cmp	r5, r3
 80231a4:	bf38      	it	cc
 80231a6:	461d      	movcc	r5, r3
 80231a8:	0553      	lsls	r3, r2, #21
 80231aa:	d527      	bpl.n	80231fc <__ssputs_r+0x8c>
 80231ac:	4629      	mov	r1, r5
 80231ae:	f7fc f9d5 	bl	801f55c <_malloc_r>
 80231b2:	4606      	mov	r6, r0
 80231b4:	b360      	cbz	r0, 8023210 <__ssputs_r+0xa0>
 80231b6:	6921      	ldr	r1, [r4, #16]
 80231b8:	464a      	mov	r2, r9
 80231ba:	f7fd fe50 	bl	8020e5e <memcpy>
 80231be:	89a3      	ldrh	r3, [r4, #12]
 80231c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80231c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80231c8:	81a3      	strh	r3, [r4, #12]
 80231ca:	6126      	str	r6, [r4, #16]
 80231cc:	6165      	str	r5, [r4, #20]
 80231ce:	444e      	add	r6, r9
 80231d0:	eba5 0509 	sub.w	r5, r5, r9
 80231d4:	6026      	str	r6, [r4, #0]
 80231d6:	60a5      	str	r5, [r4, #8]
 80231d8:	463e      	mov	r6, r7
 80231da:	42be      	cmp	r6, r7
 80231dc:	d900      	bls.n	80231e0 <__ssputs_r+0x70>
 80231de:	463e      	mov	r6, r7
 80231e0:	6820      	ldr	r0, [r4, #0]
 80231e2:	4632      	mov	r2, r6
 80231e4:	4641      	mov	r1, r8
 80231e6:	f7fd fd53 	bl	8020c90 <memmove>
 80231ea:	68a3      	ldr	r3, [r4, #8]
 80231ec:	1b9b      	subs	r3, r3, r6
 80231ee:	60a3      	str	r3, [r4, #8]
 80231f0:	6823      	ldr	r3, [r4, #0]
 80231f2:	4433      	add	r3, r6
 80231f4:	6023      	str	r3, [r4, #0]
 80231f6:	2000      	movs	r0, #0
 80231f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80231fc:	462a      	mov	r2, r5
 80231fe:	f7fc faad 	bl	801f75c <_realloc_r>
 8023202:	4606      	mov	r6, r0
 8023204:	2800      	cmp	r0, #0
 8023206:	d1e0      	bne.n	80231ca <__ssputs_r+0x5a>
 8023208:	6921      	ldr	r1, [r4, #16]
 802320a:	4650      	mov	r0, sl
 802320c:	f7fe fc5c 	bl	8021ac8 <_free_r>
 8023210:	230c      	movs	r3, #12
 8023212:	f8ca 3000 	str.w	r3, [sl]
 8023216:	89a3      	ldrh	r3, [r4, #12]
 8023218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802321c:	81a3      	strh	r3, [r4, #12]
 802321e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023222:	e7e9      	b.n	80231f8 <__ssputs_r+0x88>

08023224 <_svfiprintf_r>:
 8023224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023228:	4698      	mov	r8, r3
 802322a:	898b      	ldrh	r3, [r1, #12]
 802322c:	061b      	lsls	r3, r3, #24
 802322e:	b09d      	sub	sp, #116	; 0x74
 8023230:	4607      	mov	r7, r0
 8023232:	460d      	mov	r5, r1
 8023234:	4614      	mov	r4, r2
 8023236:	d50e      	bpl.n	8023256 <_svfiprintf_r+0x32>
 8023238:	690b      	ldr	r3, [r1, #16]
 802323a:	b963      	cbnz	r3, 8023256 <_svfiprintf_r+0x32>
 802323c:	2140      	movs	r1, #64	; 0x40
 802323e:	f7fc f98d 	bl	801f55c <_malloc_r>
 8023242:	6028      	str	r0, [r5, #0]
 8023244:	6128      	str	r0, [r5, #16]
 8023246:	b920      	cbnz	r0, 8023252 <_svfiprintf_r+0x2e>
 8023248:	230c      	movs	r3, #12
 802324a:	603b      	str	r3, [r7, #0]
 802324c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023250:	e0d0      	b.n	80233f4 <_svfiprintf_r+0x1d0>
 8023252:	2340      	movs	r3, #64	; 0x40
 8023254:	616b      	str	r3, [r5, #20]
 8023256:	2300      	movs	r3, #0
 8023258:	9309      	str	r3, [sp, #36]	; 0x24
 802325a:	2320      	movs	r3, #32
 802325c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023260:	f8cd 800c 	str.w	r8, [sp, #12]
 8023264:	2330      	movs	r3, #48	; 0x30
 8023266:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802340c <_svfiprintf_r+0x1e8>
 802326a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802326e:	f04f 0901 	mov.w	r9, #1
 8023272:	4623      	mov	r3, r4
 8023274:	469a      	mov	sl, r3
 8023276:	f813 2b01 	ldrb.w	r2, [r3], #1
 802327a:	b10a      	cbz	r2, 8023280 <_svfiprintf_r+0x5c>
 802327c:	2a25      	cmp	r2, #37	; 0x25
 802327e:	d1f9      	bne.n	8023274 <_svfiprintf_r+0x50>
 8023280:	ebba 0b04 	subs.w	fp, sl, r4
 8023284:	d00b      	beq.n	802329e <_svfiprintf_r+0x7a>
 8023286:	465b      	mov	r3, fp
 8023288:	4622      	mov	r2, r4
 802328a:	4629      	mov	r1, r5
 802328c:	4638      	mov	r0, r7
 802328e:	f7ff ff6f 	bl	8023170 <__ssputs_r>
 8023292:	3001      	adds	r0, #1
 8023294:	f000 80a9 	beq.w	80233ea <_svfiprintf_r+0x1c6>
 8023298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802329a:	445a      	add	r2, fp
 802329c:	9209      	str	r2, [sp, #36]	; 0x24
 802329e:	f89a 3000 	ldrb.w	r3, [sl]
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	f000 80a1 	beq.w	80233ea <_svfiprintf_r+0x1c6>
 80232a8:	2300      	movs	r3, #0
 80232aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80232ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80232b2:	f10a 0a01 	add.w	sl, sl, #1
 80232b6:	9304      	str	r3, [sp, #16]
 80232b8:	9307      	str	r3, [sp, #28]
 80232ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80232be:	931a      	str	r3, [sp, #104]	; 0x68
 80232c0:	4654      	mov	r4, sl
 80232c2:	2205      	movs	r2, #5
 80232c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232c8:	4850      	ldr	r0, [pc, #320]	; (802340c <_svfiprintf_r+0x1e8>)
 80232ca:	f7dc ffc9 	bl	8000260 <memchr>
 80232ce:	9a04      	ldr	r2, [sp, #16]
 80232d0:	b9d8      	cbnz	r0, 802330a <_svfiprintf_r+0xe6>
 80232d2:	06d0      	lsls	r0, r2, #27
 80232d4:	bf44      	itt	mi
 80232d6:	2320      	movmi	r3, #32
 80232d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80232dc:	0711      	lsls	r1, r2, #28
 80232de:	bf44      	itt	mi
 80232e0:	232b      	movmi	r3, #43	; 0x2b
 80232e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80232e6:	f89a 3000 	ldrb.w	r3, [sl]
 80232ea:	2b2a      	cmp	r3, #42	; 0x2a
 80232ec:	d015      	beq.n	802331a <_svfiprintf_r+0xf6>
 80232ee:	9a07      	ldr	r2, [sp, #28]
 80232f0:	4654      	mov	r4, sl
 80232f2:	2000      	movs	r0, #0
 80232f4:	f04f 0c0a 	mov.w	ip, #10
 80232f8:	4621      	mov	r1, r4
 80232fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80232fe:	3b30      	subs	r3, #48	; 0x30
 8023300:	2b09      	cmp	r3, #9
 8023302:	d94d      	bls.n	80233a0 <_svfiprintf_r+0x17c>
 8023304:	b1b0      	cbz	r0, 8023334 <_svfiprintf_r+0x110>
 8023306:	9207      	str	r2, [sp, #28]
 8023308:	e014      	b.n	8023334 <_svfiprintf_r+0x110>
 802330a:	eba0 0308 	sub.w	r3, r0, r8
 802330e:	fa09 f303 	lsl.w	r3, r9, r3
 8023312:	4313      	orrs	r3, r2
 8023314:	9304      	str	r3, [sp, #16]
 8023316:	46a2      	mov	sl, r4
 8023318:	e7d2      	b.n	80232c0 <_svfiprintf_r+0x9c>
 802331a:	9b03      	ldr	r3, [sp, #12]
 802331c:	1d19      	adds	r1, r3, #4
 802331e:	681b      	ldr	r3, [r3, #0]
 8023320:	9103      	str	r1, [sp, #12]
 8023322:	2b00      	cmp	r3, #0
 8023324:	bfbb      	ittet	lt
 8023326:	425b      	neglt	r3, r3
 8023328:	f042 0202 	orrlt.w	r2, r2, #2
 802332c:	9307      	strge	r3, [sp, #28]
 802332e:	9307      	strlt	r3, [sp, #28]
 8023330:	bfb8      	it	lt
 8023332:	9204      	strlt	r2, [sp, #16]
 8023334:	7823      	ldrb	r3, [r4, #0]
 8023336:	2b2e      	cmp	r3, #46	; 0x2e
 8023338:	d10c      	bne.n	8023354 <_svfiprintf_r+0x130>
 802333a:	7863      	ldrb	r3, [r4, #1]
 802333c:	2b2a      	cmp	r3, #42	; 0x2a
 802333e:	d134      	bne.n	80233aa <_svfiprintf_r+0x186>
 8023340:	9b03      	ldr	r3, [sp, #12]
 8023342:	1d1a      	adds	r2, r3, #4
 8023344:	681b      	ldr	r3, [r3, #0]
 8023346:	9203      	str	r2, [sp, #12]
 8023348:	2b00      	cmp	r3, #0
 802334a:	bfb8      	it	lt
 802334c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023350:	3402      	adds	r4, #2
 8023352:	9305      	str	r3, [sp, #20]
 8023354:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802341c <_svfiprintf_r+0x1f8>
 8023358:	7821      	ldrb	r1, [r4, #0]
 802335a:	2203      	movs	r2, #3
 802335c:	4650      	mov	r0, sl
 802335e:	f7dc ff7f 	bl	8000260 <memchr>
 8023362:	b138      	cbz	r0, 8023374 <_svfiprintf_r+0x150>
 8023364:	9b04      	ldr	r3, [sp, #16]
 8023366:	eba0 000a 	sub.w	r0, r0, sl
 802336a:	2240      	movs	r2, #64	; 0x40
 802336c:	4082      	lsls	r2, r0
 802336e:	4313      	orrs	r3, r2
 8023370:	3401      	adds	r4, #1
 8023372:	9304      	str	r3, [sp, #16]
 8023374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023378:	4825      	ldr	r0, [pc, #148]	; (8023410 <_svfiprintf_r+0x1ec>)
 802337a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802337e:	2206      	movs	r2, #6
 8023380:	f7dc ff6e 	bl	8000260 <memchr>
 8023384:	2800      	cmp	r0, #0
 8023386:	d038      	beq.n	80233fa <_svfiprintf_r+0x1d6>
 8023388:	4b22      	ldr	r3, [pc, #136]	; (8023414 <_svfiprintf_r+0x1f0>)
 802338a:	bb1b      	cbnz	r3, 80233d4 <_svfiprintf_r+0x1b0>
 802338c:	9b03      	ldr	r3, [sp, #12]
 802338e:	3307      	adds	r3, #7
 8023390:	f023 0307 	bic.w	r3, r3, #7
 8023394:	3308      	adds	r3, #8
 8023396:	9303      	str	r3, [sp, #12]
 8023398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802339a:	4433      	add	r3, r6
 802339c:	9309      	str	r3, [sp, #36]	; 0x24
 802339e:	e768      	b.n	8023272 <_svfiprintf_r+0x4e>
 80233a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80233a4:	460c      	mov	r4, r1
 80233a6:	2001      	movs	r0, #1
 80233a8:	e7a6      	b.n	80232f8 <_svfiprintf_r+0xd4>
 80233aa:	2300      	movs	r3, #0
 80233ac:	3401      	adds	r4, #1
 80233ae:	9305      	str	r3, [sp, #20]
 80233b0:	4619      	mov	r1, r3
 80233b2:	f04f 0c0a 	mov.w	ip, #10
 80233b6:	4620      	mov	r0, r4
 80233b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80233bc:	3a30      	subs	r2, #48	; 0x30
 80233be:	2a09      	cmp	r2, #9
 80233c0:	d903      	bls.n	80233ca <_svfiprintf_r+0x1a6>
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	d0c6      	beq.n	8023354 <_svfiprintf_r+0x130>
 80233c6:	9105      	str	r1, [sp, #20]
 80233c8:	e7c4      	b.n	8023354 <_svfiprintf_r+0x130>
 80233ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80233ce:	4604      	mov	r4, r0
 80233d0:	2301      	movs	r3, #1
 80233d2:	e7f0      	b.n	80233b6 <_svfiprintf_r+0x192>
 80233d4:	ab03      	add	r3, sp, #12
 80233d6:	9300      	str	r3, [sp, #0]
 80233d8:	462a      	mov	r2, r5
 80233da:	4b0f      	ldr	r3, [pc, #60]	; (8023418 <_svfiprintf_r+0x1f4>)
 80233dc:	a904      	add	r1, sp, #16
 80233de:	4638      	mov	r0, r7
 80233e0:	f7fc fafa 	bl	801f9d8 <_printf_float>
 80233e4:	1c42      	adds	r2, r0, #1
 80233e6:	4606      	mov	r6, r0
 80233e8:	d1d6      	bne.n	8023398 <_svfiprintf_r+0x174>
 80233ea:	89ab      	ldrh	r3, [r5, #12]
 80233ec:	065b      	lsls	r3, r3, #25
 80233ee:	f53f af2d 	bmi.w	802324c <_svfiprintf_r+0x28>
 80233f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80233f4:	b01d      	add	sp, #116	; 0x74
 80233f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233fa:	ab03      	add	r3, sp, #12
 80233fc:	9300      	str	r3, [sp, #0]
 80233fe:	462a      	mov	r2, r5
 8023400:	4b05      	ldr	r3, [pc, #20]	; (8023418 <_svfiprintf_r+0x1f4>)
 8023402:	a904      	add	r1, sp, #16
 8023404:	4638      	mov	r0, r7
 8023406:	f7fc fd6f 	bl	801fee8 <_printf_i>
 802340a:	e7eb      	b.n	80233e4 <_svfiprintf_r+0x1c0>
 802340c:	08025cf8 	.word	0x08025cf8
 8023410:	08025d02 	.word	0x08025d02
 8023414:	0801f9d9 	.word	0x0801f9d9
 8023418:	08023171 	.word	0x08023171
 802341c:	08025cfe 	.word	0x08025cfe

08023420 <__sfputc_r>:
 8023420:	6893      	ldr	r3, [r2, #8]
 8023422:	3b01      	subs	r3, #1
 8023424:	2b00      	cmp	r3, #0
 8023426:	b410      	push	{r4}
 8023428:	6093      	str	r3, [r2, #8]
 802342a:	da08      	bge.n	802343e <__sfputc_r+0x1e>
 802342c:	6994      	ldr	r4, [r2, #24]
 802342e:	42a3      	cmp	r3, r4
 8023430:	db01      	blt.n	8023436 <__sfputc_r+0x16>
 8023432:	290a      	cmp	r1, #10
 8023434:	d103      	bne.n	802343e <__sfputc_r+0x1e>
 8023436:	f85d 4b04 	ldr.w	r4, [sp], #4
 802343a:	f7fd bb83 	b.w	8020b44 <__swbuf_r>
 802343e:	6813      	ldr	r3, [r2, #0]
 8023440:	1c58      	adds	r0, r3, #1
 8023442:	6010      	str	r0, [r2, #0]
 8023444:	7019      	strb	r1, [r3, #0]
 8023446:	4608      	mov	r0, r1
 8023448:	f85d 4b04 	ldr.w	r4, [sp], #4
 802344c:	4770      	bx	lr

0802344e <__sfputs_r>:
 802344e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023450:	4606      	mov	r6, r0
 8023452:	460f      	mov	r7, r1
 8023454:	4614      	mov	r4, r2
 8023456:	18d5      	adds	r5, r2, r3
 8023458:	42ac      	cmp	r4, r5
 802345a:	d101      	bne.n	8023460 <__sfputs_r+0x12>
 802345c:	2000      	movs	r0, #0
 802345e:	e007      	b.n	8023470 <__sfputs_r+0x22>
 8023460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023464:	463a      	mov	r2, r7
 8023466:	4630      	mov	r0, r6
 8023468:	f7ff ffda 	bl	8023420 <__sfputc_r>
 802346c:	1c43      	adds	r3, r0, #1
 802346e:	d1f3      	bne.n	8023458 <__sfputs_r+0xa>
 8023470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023474 <_vfiprintf_r>:
 8023474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023478:	460d      	mov	r5, r1
 802347a:	b09d      	sub	sp, #116	; 0x74
 802347c:	4614      	mov	r4, r2
 802347e:	4698      	mov	r8, r3
 8023480:	4606      	mov	r6, r0
 8023482:	b118      	cbz	r0, 802348c <_vfiprintf_r+0x18>
 8023484:	6a03      	ldr	r3, [r0, #32]
 8023486:	b90b      	cbnz	r3, 802348c <_vfiprintf_r+0x18>
 8023488:	f7fd f8e0 	bl	802064c <__sinit>
 802348c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802348e:	07d9      	lsls	r1, r3, #31
 8023490:	d405      	bmi.n	802349e <_vfiprintf_r+0x2a>
 8023492:	89ab      	ldrh	r3, [r5, #12]
 8023494:	059a      	lsls	r2, r3, #22
 8023496:	d402      	bmi.n	802349e <_vfiprintf_r+0x2a>
 8023498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802349a:	f7fd fcd6 	bl	8020e4a <__retarget_lock_acquire_recursive>
 802349e:	89ab      	ldrh	r3, [r5, #12]
 80234a0:	071b      	lsls	r3, r3, #28
 80234a2:	d501      	bpl.n	80234a8 <_vfiprintf_r+0x34>
 80234a4:	692b      	ldr	r3, [r5, #16]
 80234a6:	b99b      	cbnz	r3, 80234d0 <_vfiprintf_r+0x5c>
 80234a8:	4629      	mov	r1, r5
 80234aa:	4630      	mov	r0, r6
 80234ac:	f7fd fb88 	bl	8020bc0 <__swsetup_r>
 80234b0:	b170      	cbz	r0, 80234d0 <_vfiprintf_r+0x5c>
 80234b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234b4:	07dc      	lsls	r4, r3, #31
 80234b6:	d504      	bpl.n	80234c2 <_vfiprintf_r+0x4e>
 80234b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80234bc:	b01d      	add	sp, #116	; 0x74
 80234be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234c2:	89ab      	ldrh	r3, [r5, #12]
 80234c4:	0598      	lsls	r0, r3, #22
 80234c6:	d4f7      	bmi.n	80234b8 <_vfiprintf_r+0x44>
 80234c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234ca:	f7fd fcbf 	bl	8020e4c <__retarget_lock_release_recursive>
 80234ce:	e7f3      	b.n	80234b8 <_vfiprintf_r+0x44>
 80234d0:	2300      	movs	r3, #0
 80234d2:	9309      	str	r3, [sp, #36]	; 0x24
 80234d4:	2320      	movs	r3, #32
 80234d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80234da:	f8cd 800c 	str.w	r8, [sp, #12]
 80234de:	2330      	movs	r3, #48	; 0x30
 80234e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8023694 <_vfiprintf_r+0x220>
 80234e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80234e8:	f04f 0901 	mov.w	r9, #1
 80234ec:	4623      	mov	r3, r4
 80234ee:	469a      	mov	sl, r3
 80234f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80234f4:	b10a      	cbz	r2, 80234fa <_vfiprintf_r+0x86>
 80234f6:	2a25      	cmp	r2, #37	; 0x25
 80234f8:	d1f9      	bne.n	80234ee <_vfiprintf_r+0x7a>
 80234fa:	ebba 0b04 	subs.w	fp, sl, r4
 80234fe:	d00b      	beq.n	8023518 <_vfiprintf_r+0xa4>
 8023500:	465b      	mov	r3, fp
 8023502:	4622      	mov	r2, r4
 8023504:	4629      	mov	r1, r5
 8023506:	4630      	mov	r0, r6
 8023508:	f7ff ffa1 	bl	802344e <__sfputs_r>
 802350c:	3001      	adds	r0, #1
 802350e:	f000 80a9 	beq.w	8023664 <_vfiprintf_r+0x1f0>
 8023512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023514:	445a      	add	r2, fp
 8023516:	9209      	str	r2, [sp, #36]	; 0x24
 8023518:	f89a 3000 	ldrb.w	r3, [sl]
 802351c:	2b00      	cmp	r3, #0
 802351e:	f000 80a1 	beq.w	8023664 <_vfiprintf_r+0x1f0>
 8023522:	2300      	movs	r3, #0
 8023524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802352c:	f10a 0a01 	add.w	sl, sl, #1
 8023530:	9304      	str	r3, [sp, #16]
 8023532:	9307      	str	r3, [sp, #28]
 8023534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023538:	931a      	str	r3, [sp, #104]	; 0x68
 802353a:	4654      	mov	r4, sl
 802353c:	2205      	movs	r2, #5
 802353e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023542:	4854      	ldr	r0, [pc, #336]	; (8023694 <_vfiprintf_r+0x220>)
 8023544:	f7dc fe8c 	bl	8000260 <memchr>
 8023548:	9a04      	ldr	r2, [sp, #16]
 802354a:	b9d8      	cbnz	r0, 8023584 <_vfiprintf_r+0x110>
 802354c:	06d1      	lsls	r1, r2, #27
 802354e:	bf44      	itt	mi
 8023550:	2320      	movmi	r3, #32
 8023552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023556:	0713      	lsls	r3, r2, #28
 8023558:	bf44      	itt	mi
 802355a:	232b      	movmi	r3, #43	; 0x2b
 802355c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023560:	f89a 3000 	ldrb.w	r3, [sl]
 8023564:	2b2a      	cmp	r3, #42	; 0x2a
 8023566:	d015      	beq.n	8023594 <_vfiprintf_r+0x120>
 8023568:	9a07      	ldr	r2, [sp, #28]
 802356a:	4654      	mov	r4, sl
 802356c:	2000      	movs	r0, #0
 802356e:	f04f 0c0a 	mov.w	ip, #10
 8023572:	4621      	mov	r1, r4
 8023574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023578:	3b30      	subs	r3, #48	; 0x30
 802357a:	2b09      	cmp	r3, #9
 802357c:	d94d      	bls.n	802361a <_vfiprintf_r+0x1a6>
 802357e:	b1b0      	cbz	r0, 80235ae <_vfiprintf_r+0x13a>
 8023580:	9207      	str	r2, [sp, #28]
 8023582:	e014      	b.n	80235ae <_vfiprintf_r+0x13a>
 8023584:	eba0 0308 	sub.w	r3, r0, r8
 8023588:	fa09 f303 	lsl.w	r3, r9, r3
 802358c:	4313      	orrs	r3, r2
 802358e:	9304      	str	r3, [sp, #16]
 8023590:	46a2      	mov	sl, r4
 8023592:	e7d2      	b.n	802353a <_vfiprintf_r+0xc6>
 8023594:	9b03      	ldr	r3, [sp, #12]
 8023596:	1d19      	adds	r1, r3, #4
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	9103      	str	r1, [sp, #12]
 802359c:	2b00      	cmp	r3, #0
 802359e:	bfbb      	ittet	lt
 80235a0:	425b      	neglt	r3, r3
 80235a2:	f042 0202 	orrlt.w	r2, r2, #2
 80235a6:	9307      	strge	r3, [sp, #28]
 80235a8:	9307      	strlt	r3, [sp, #28]
 80235aa:	bfb8      	it	lt
 80235ac:	9204      	strlt	r2, [sp, #16]
 80235ae:	7823      	ldrb	r3, [r4, #0]
 80235b0:	2b2e      	cmp	r3, #46	; 0x2e
 80235b2:	d10c      	bne.n	80235ce <_vfiprintf_r+0x15a>
 80235b4:	7863      	ldrb	r3, [r4, #1]
 80235b6:	2b2a      	cmp	r3, #42	; 0x2a
 80235b8:	d134      	bne.n	8023624 <_vfiprintf_r+0x1b0>
 80235ba:	9b03      	ldr	r3, [sp, #12]
 80235bc:	1d1a      	adds	r2, r3, #4
 80235be:	681b      	ldr	r3, [r3, #0]
 80235c0:	9203      	str	r2, [sp, #12]
 80235c2:	2b00      	cmp	r3, #0
 80235c4:	bfb8      	it	lt
 80235c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80235ca:	3402      	adds	r4, #2
 80235cc:	9305      	str	r3, [sp, #20]
 80235ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80236a4 <_vfiprintf_r+0x230>
 80235d2:	7821      	ldrb	r1, [r4, #0]
 80235d4:	2203      	movs	r2, #3
 80235d6:	4650      	mov	r0, sl
 80235d8:	f7dc fe42 	bl	8000260 <memchr>
 80235dc:	b138      	cbz	r0, 80235ee <_vfiprintf_r+0x17a>
 80235de:	9b04      	ldr	r3, [sp, #16]
 80235e0:	eba0 000a 	sub.w	r0, r0, sl
 80235e4:	2240      	movs	r2, #64	; 0x40
 80235e6:	4082      	lsls	r2, r0
 80235e8:	4313      	orrs	r3, r2
 80235ea:	3401      	adds	r4, #1
 80235ec:	9304      	str	r3, [sp, #16]
 80235ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235f2:	4829      	ldr	r0, [pc, #164]	; (8023698 <_vfiprintf_r+0x224>)
 80235f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80235f8:	2206      	movs	r2, #6
 80235fa:	f7dc fe31 	bl	8000260 <memchr>
 80235fe:	2800      	cmp	r0, #0
 8023600:	d03f      	beq.n	8023682 <_vfiprintf_r+0x20e>
 8023602:	4b26      	ldr	r3, [pc, #152]	; (802369c <_vfiprintf_r+0x228>)
 8023604:	bb1b      	cbnz	r3, 802364e <_vfiprintf_r+0x1da>
 8023606:	9b03      	ldr	r3, [sp, #12]
 8023608:	3307      	adds	r3, #7
 802360a:	f023 0307 	bic.w	r3, r3, #7
 802360e:	3308      	adds	r3, #8
 8023610:	9303      	str	r3, [sp, #12]
 8023612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023614:	443b      	add	r3, r7
 8023616:	9309      	str	r3, [sp, #36]	; 0x24
 8023618:	e768      	b.n	80234ec <_vfiprintf_r+0x78>
 802361a:	fb0c 3202 	mla	r2, ip, r2, r3
 802361e:	460c      	mov	r4, r1
 8023620:	2001      	movs	r0, #1
 8023622:	e7a6      	b.n	8023572 <_vfiprintf_r+0xfe>
 8023624:	2300      	movs	r3, #0
 8023626:	3401      	adds	r4, #1
 8023628:	9305      	str	r3, [sp, #20]
 802362a:	4619      	mov	r1, r3
 802362c:	f04f 0c0a 	mov.w	ip, #10
 8023630:	4620      	mov	r0, r4
 8023632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023636:	3a30      	subs	r2, #48	; 0x30
 8023638:	2a09      	cmp	r2, #9
 802363a:	d903      	bls.n	8023644 <_vfiprintf_r+0x1d0>
 802363c:	2b00      	cmp	r3, #0
 802363e:	d0c6      	beq.n	80235ce <_vfiprintf_r+0x15a>
 8023640:	9105      	str	r1, [sp, #20]
 8023642:	e7c4      	b.n	80235ce <_vfiprintf_r+0x15a>
 8023644:	fb0c 2101 	mla	r1, ip, r1, r2
 8023648:	4604      	mov	r4, r0
 802364a:	2301      	movs	r3, #1
 802364c:	e7f0      	b.n	8023630 <_vfiprintf_r+0x1bc>
 802364e:	ab03      	add	r3, sp, #12
 8023650:	9300      	str	r3, [sp, #0]
 8023652:	462a      	mov	r2, r5
 8023654:	4b12      	ldr	r3, [pc, #72]	; (80236a0 <_vfiprintf_r+0x22c>)
 8023656:	a904      	add	r1, sp, #16
 8023658:	4630      	mov	r0, r6
 802365a:	f7fc f9bd 	bl	801f9d8 <_printf_float>
 802365e:	4607      	mov	r7, r0
 8023660:	1c78      	adds	r0, r7, #1
 8023662:	d1d6      	bne.n	8023612 <_vfiprintf_r+0x19e>
 8023664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023666:	07d9      	lsls	r1, r3, #31
 8023668:	d405      	bmi.n	8023676 <_vfiprintf_r+0x202>
 802366a:	89ab      	ldrh	r3, [r5, #12]
 802366c:	059a      	lsls	r2, r3, #22
 802366e:	d402      	bmi.n	8023676 <_vfiprintf_r+0x202>
 8023670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023672:	f7fd fbeb 	bl	8020e4c <__retarget_lock_release_recursive>
 8023676:	89ab      	ldrh	r3, [r5, #12]
 8023678:	065b      	lsls	r3, r3, #25
 802367a:	f53f af1d 	bmi.w	80234b8 <_vfiprintf_r+0x44>
 802367e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023680:	e71c      	b.n	80234bc <_vfiprintf_r+0x48>
 8023682:	ab03      	add	r3, sp, #12
 8023684:	9300      	str	r3, [sp, #0]
 8023686:	462a      	mov	r2, r5
 8023688:	4b05      	ldr	r3, [pc, #20]	; (80236a0 <_vfiprintf_r+0x22c>)
 802368a:	a904      	add	r1, sp, #16
 802368c:	4630      	mov	r0, r6
 802368e:	f7fc fc2b 	bl	801fee8 <_printf_i>
 8023692:	e7e4      	b.n	802365e <_vfiprintf_r+0x1ea>
 8023694:	08025cf8 	.word	0x08025cf8
 8023698:	08025d02 	.word	0x08025d02
 802369c:	0801f9d9 	.word	0x0801f9d9
 80236a0:	0802344f 	.word	0x0802344f
 80236a4:	08025cfe 	.word	0x08025cfe

080236a8 <__sflush_r>:
 80236a8:	898a      	ldrh	r2, [r1, #12]
 80236aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236ae:	4605      	mov	r5, r0
 80236b0:	0710      	lsls	r0, r2, #28
 80236b2:	460c      	mov	r4, r1
 80236b4:	d458      	bmi.n	8023768 <__sflush_r+0xc0>
 80236b6:	684b      	ldr	r3, [r1, #4]
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	dc05      	bgt.n	80236c8 <__sflush_r+0x20>
 80236bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80236be:	2b00      	cmp	r3, #0
 80236c0:	dc02      	bgt.n	80236c8 <__sflush_r+0x20>
 80236c2:	2000      	movs	r0, #0
 80236c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80236ca:	2e00      	cmp	r6, #0
 80236cc:	d0f9      	beq.n	80236c2 <__sflush_r+0x1a>
 80236ce:	2300      	movs	r3, #0
 80236d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80236d4:	682f      	ldr	r7, [r5, #0]
 80236d6:	6a21      	ldr	r1, [r4, #32]
 80236d8:	602b      	str	r3, [r5, #0]
 80236da:	d032      	beq.n	8023742 <__sflush_r+0x9a>
 80236dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80236de:	89a3      	ldrh	r3, [r4, #12]
 80236e0:	075a      	lsls	r2, r3, #29
 80236e2:	d505      	bpl.n	80236f0 <__sflush_r+0x48>
 80236e4:	6863      	ldr	r3, [r4, #4]
 80236e6:	1ac0      	subs	r0, r0, r3
 80236e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80236ea:	b10b      	cbz	r3, 80236f0 <__sflush_r+0x48>
 80236ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80236ee:	1ac0      	subs	r0, r0, r3
 80236f0:	2300      	movs	r3, #0
 80236f2:	4602      	mov	r2, r0
 80236f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80236f6:	6a21      	ldr	r1, [r4, #32]
 80236f8:	4628      	mov	r0, r5
 80236fa:	47b0      	blx	r6
 80236fc:	1c43      	adds	r3, r0, #1
 80236fe:	89a3      	ldrh	r3, [r4, #12]
 8023700:	d106      	bne.n	8023710 <__sflush_r+0x68>
 8023702:	6829      	ldr	r1, [r5, #0]
 8023704:	291d      	cmp	r1, #29
 8023706:	d82b      	bhi.n	8023760 <__sflush_r+0xb8>
 8023708:	4a29      	ldr	r2, [pc, #164]	; (80237b0 <__sflush_r+0x108>)
 802370a:	410a      	asrs	r2, r1
 802370c:	07d6      	lsls	r6, r2, #31
 802370e:	d427      	bmi.n	8023760 <__sflush_r+0xb8>
 8023710:	2200      	movs	r2, #0
 8023712:	6062      	str	r2, [r4, #4]
 8023714:	04d9      	lsls	r1, r3, #19
 8023716:	6922      	ldr	r2, [r4, #16]
 8023718:	6022      	str	r2, [r4, #0]
 802371a:	d504      	bpl.n	8023726 <__sflush_r+0x7e>
 802371c:	1c42      	adds	r2, r0, #1
 802371e:	d101      	bne.n	8023724 <__sflush_r+0x7c>
 8023720:	682b      	ldr	r3, [r5, #0]
 8023722:	b903      	cbnz	r3, 8023726 <__sflush_r+0x7e>
 8023724:	6560      	str	r0, [r4, #84]	; 0x54
 8023726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023728:	602f      	str	r7, [r5, #0]
 802372a:	2900      	cmp	r1, #0
 802372c:	d0c9      	beq.n	80236c2 <__sflush_r+0x1a>
 802372e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023732:	4299      	cmp	r1, r3
 8023734:	d002      	beq.n	802373c <__sflush_r+0x94>
 8023736:	4628      	mov	r0, r5
 8023738:	f7fe f9c6 	bl	8021ac8 <_free_r>
 802373c:	2000      	movs	r0, #0
 802373e:	6360      	str	r0, [r4, #52]	; 0x34
 8023740:	e7c0      	b.n	80236c4 <__sflush_r+0x1c>
 8023742:	2301      	movs	r3, #1
 8023744:	4628      	mov	r0, r5
 8023746:	47b0      	blx	r6
 8023748:	1c41      	adds	r1, r0, #1
 802374a:	d1c8      	bne.n	80236de <__sflush_r+0x36>
 802374c:	682b      	ldr	r3, [r5, #0]
 802374e:	2b00      	cmp	r3, #0
 8023750:	d0c5      	beq.n	80236de <__sflush_r+0x36>
 8023752:	2b1d      	cmp	r3, #29
 8023754:	d001      	beq.n	802375a <__sflush_r+0xb2>
 8023756:	2b16      	cmp	r3, #22
 8023758:	d101      	bne.n	802375e <__sflush_r+0xb6>
 802375a:	602f      	str	r7, [r5, #0]
 802375c:	e7b1      	b.n	80236c2 <__sflush_r+0x1a>
 802375e:	89a3      	ldrh	r3, [r4, #12]
 8023760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023764:	81a3      	strh	r3, [r4, #12]
 8023766:	e7ad      	b.n	80236c4 <__sflush_r+0x1c>
 8023768:	690f      	ldr	r7, [r1, #16]
 802376a:	2f00      	cmp	r7, #0
 802376c:	d0a9      	beq.n	80236c2 <__sflush_r+0x1a>
 802376e:	0793      	lsls	r3, r2, #30
 8023770:	680e      	ldr	r6, [r1, #0]
 8023772:	bf08      	it	eq
 8023774:	694b      	ldreq	r3, [r1, #20]
 8023776:	600f      	str	r7, [r1, #0]
 8023778:	bf18      	it	ne
 802377a:	2300      	movne	r3, #0
 802377c:	eba6 0807 	sub.w	r8, r6, r7
 8023780:	608b      	str	r3, [r1, #8]
 8023782:	f1b8 0f00 	cmp.w	r8, #0
 8023786:	dd9c      	ble.n	80236c2 <__sflush_r+0x1a>
 8023788:	6a21      	ldr	r1, [r4, #32]
 802378a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802378c:	4643      	mov	r3, r8
 802378e:	463a      	mov	r2, r7
 8023790:	4628      	mov	r0, r5
 8023792:	47b0      	blx	r6
 8023794:	2800      	cmp	r0, #0
 8023796:	dc06      	bgt.n	80237a6 <__sflush_r+0xfe>
 8023798:	89a3      	ldrh	r3, [r4, #12]
 802379a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802379e:	81a3      	strh	r3, [r4, #12]
 80237a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80237a4:	e78e      	b.n	80236c4 <__sflush_r+0x1c>
 80237a6:	4407      	add	r7, r0
 80237a8:	eba8 0800 	sub.w	r8, r8, r0
 80237ac:	e7e9      	b.n	8023782 <__sflush_r+0xda>
 80237ae:	bf00      	nop
 80237b0:	dfbffffe 	.word	0xdfbffffe

080237b4 <_fflush_r>:
 80237b4:	b538      	push	{r3, r4, r5, lr}
 80237b6:	690b      	ldr	r3, [r1, #16]
 80237b8:	4605      	mov	r5, r0
 80237ba:	460c      	mov	r4, r1
 80237bc:	b913      	cbnz	r3, 80237c4 <_fflush_r+0x10>
 80237be:	2500      	movs	r5, #0
 80237c0:	4628      	mov	r0, r5
 80237c2:	bd38      	pop	{r3, r4, r5, pc}
 80237c4:	b118      	cbz	r0, 80237ce <_fflush_r+0x1a>
 80237c6:	6a03      	ldr	r3, [r0, #32]
 80237c8:	b90b      	cbnz	r3, 80237ce <_fflush_r+0x1a>
 80237ca:	f7fc ff3f 	bl	802064c <__sinit>
 80237ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80237d2:	2b00      	cmp	r3, #0
 80237d4:	d0f3      	beq.n	80237be <_fflush_r+0xa>
 80237d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80237d8:	07d0      	lsls	r0, r2, #31
 80237da:	d404      	bmi.n	80237e6 <_fflush_r+0x32>
 80237dc:	0599      	lsls	r1, r3, #22
 80237de:	d402      	bmi.n	80237e6 <_fflush_r+0x32>
 80237e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80237e2:	f7fd fb32 	bl	8020e4a <__retarget_lock_acquire_recursive>
 80237e6:	4628      	mov	r0, r5
 80237e8:	4621      	mov	r1, r4
 80237ea:	f7ff ff5d 	bl	80236a8 <__sflush_r>
 80237ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80237f0:	07da      	lsls	r2, r3, #31
 80237f2:	4605      	mov	r5, r0
 80237f4:	d4e4      	bmi.n	80237c0 <_fflush_r+0xc>
 80237f6:	89a3      	ldrh	r3, [r4, #12]
 80237f8:	059b      	lsls	r3, r3, #22
 80237fa:	d4e1      	bmi.n	80237c0 <_fflush_r+0xc>
 80237fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80237fe:	f7fd fb25 	bl	8020e4c <__retarget_lock_release_recursive>
 8023802:	e7dd      	b.n	80237c0 <_fflush_r+0xc>

08023804 <fiprintf>:
 8023804:	b40e      	push	{r1, r2, r3}
 8023806:	b503      	push	{r0, r1, lr}
 8023808:	4601      	mov	r1, r0
 802380a:	ab03      	add	r3, sp, #12
 802380c:	4805      	ldr	r0, [pc, #20]	; (8023824 <fiprintf+0x20>)
 802380e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023812:	6800      	ldr	r0, [r0, #0]
 8023814:	9301      	str	r3, [sp, #4]
 8023816:	f7ff fe2d 	bl	8023474 <_vfiprintf_r>
 802381a:	b002      	add	sp, #8
 802381c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023820:	b003      	add	sp, #12
 8023822:	4770      	bx	lr
 8023824:	20000778 	.word	0x20000778

08023828 <__swhatbuf_r>:
 8023828:	b570      	push	{r4, r5, r6, lr}
 802382a:	460c      	mov	r4, r1
 802382c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023830:	2900      	cmp	r1, #0
 8023832:	b096      	sub	sp, #88	; 0x58
 8023834:	4615      	mov	r5, r2
 8023836:	461e      	mov	r6, r3
 8023838:	da0d      	bge.n	8023856 <__swhatbuf_r+0x2e>
 802383a:	89a3      	ldrh	r3, [r4, #12]
 802383c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023840:	f04f 0100 	mov.w	r1, #0
 8023844:	bf0c      	ite	eq
 8023846:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802384a:	2340      	movne	r3, #64	; 0x40
 802384c:	2000      	movs	r0, #0
 802384e:	6031      	str	r1, [r6, #0]
 8023850:	602b      	str	r3, [r5, #0]
 8023852:	b016      	add	sp, #88	; 0x58
 8023854:	bd70      	pop	{r4, r5, r6, pc}
 8023856:	466a      	mov	r2, sp
 8023858:	f000 f848 	bl	80238ec <_fstat_r>
 802385c:	2800      	cmp	r0, #0
 802385e:	dbec      	blt.n	802383a <__swhatbuf_r+0x12>
 8023860:	9901      	ldr	r1, [sp, #4]
 8023862:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023866:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802386a:	4259      	negs	r1, r3
 802386c:	4159      	adcs	r1, r3
 802386e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023872:	e7eb      	b.n	802384c <__swhatbuf_r+0x24>

08023874 <__smakebuf_r>:
 8023874:	898b      	ldrh	r3, [r1, #12]
 8023876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023878:	079d      	lsls	r5, r3, #30
 802387a:	4606      	mov	r6, r0
 802387c:	460c      	mov	r4, r1
 802387e:	d507      	bpl.n	8023890 <__smakebuf_r+0x1c>
 8023880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023884:	6023      	str	r3, [r4, #0]
 8023886:	6123      	str	r3, [r4, #16]
 8023888:	2301      	movs	r3, #1
 802388a:	6163      	str	r3, [r4, #20]
 802388c:	b002      	add	sp, #8
 802388e:	bd70      	pop	{r4, r5, r6, pc}
 8023890:	ab01      	add	r3, sp, #4
 8023892:	466a      	mov	r2, sp
 8023894:	f7ff ffc8 	bl	8023828 <__swhatbuf_r>
 8023898:	9900      	ldr	r1, [sp, #0]
 802389a:	4605      	mov	r5, r0
 802389c:	4630      	mov	r0, r6
 802389e:	f7fb fe5d 	bl	801f55c <_malloc_r>
 80238a2:	b948      	cbnz	r0, 80238b8 <__smakebuf_r+0x44>
 80238a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80238a8:	059a      	lsls	r2, r3, #22
 80238aa:	d4ef      	bmi.n	802388c <__smakebuf_r+0x18>
 80238ac:	f023 0303 	bic.w	r3, r3, #3
 80238b0:	f043 0302 	orr.w	r3, r3, #2
 80238b4:	81a3      	strh	r3, [r4, #12]
 80238b6:	e7e3      	b.n	8023880 <__smakebuf_r+0xc>
 80238b8:	89a3      	ldrh	r3, [r4, #12]
 80238ba:	6020      	str	r0, [r4, #0]
 80238bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80238c0:	81a3      	strh	r3, [r4, #12]
 80238c2:	9b00      	ldr	r3, [sp, #0]
 80238c4:	6163      	str	r3, [r4, #20]
 80238c6:	9b01      	ldr	r3, [sp, #4]
 80238c8:	6120      	str	r0, [r4, #16]
 80238ca:	b15b      	cbz	r3, 80238e4 <__smakebuf_r+0x70>
 80238cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80238d0:	4630      	mov	r0, r6
 80238d2:	f000 f81d 	bl	8023910 <_isatty_r>
 80238d6:	b128      	cbz	r0, 80238e4 <__smakebuf_r+0x70>
 80238d8:	89a3      	ldrh	r3, [r4, #12]
 80238da:	f023 0303 	bic.w	r3, r3, #3
 80238de:	f043 0301 	orr.w	r3, r3, #1
 80238e2:	81a3      	strh	r3, [r4, #12]
 80238e4:	89a3      	ldrh	r3, [r4, #12]
 80238e6:	431d      	orrs	r5, r3
 80238e8:	81a5      	strh	r5, [r4, #12]
 80238ea:	e7cf      	b.n	802388c <__smakebuf_r+0x18>

080238ec <_fstat_r>:
 80238ec:	b538      	push	{r3, r4, r5, lr}
 80238ee:	4d07      	ldr	r5, [pc, #28]	; (802390c <_fstat_r+0x20>)
 80238f0:	2300      	movs	r3, #0
 80238f2:	4604      	mov	r4, r0
 80238f4:	4608      	mov	r0, r1
 80238f6:	4611      	mov	r1, r2
 80238f8:	602b      	str	r3, [r5, #0]
 80238fa:	f7df fedc 	bl	80036b6 <_fstat>
 80238fe:	1c43      	adds	r3, r0, #1
 8023900:	d102      	bne.n	8023908 <_fstat_r+0x1c>
 8023902:	682b      	ldr	r3, [r5, #0]
 8023904:	b103      	cbz	r3, 8023908 <_fstat_r+0x1c>
 8023906:	6023      	str	r3, [r4, #0]
 8023908:	bd38      	pop	{r3, r4, r5, pc}
 802390a:	bf00      	nop
 802390c:	20016e70 	.word	0x20016e70

08023910 <_isatty_r>:
 8023910:	b538      	push	{r3, r4, r5, lr}
 8023912:	4d06      	ldr	r5, [pc, #24]	; (802392c <_isatty_r+0x1c>)
 8023914:	2300      	movs	r3, #0
 8023916:	4604      	mov	r4, r0
 8023918:	4608      	mov	r0, r1
 802391a:	602b      	str	r3, [r5, #0]
 802391c:	f7df fedb 	bl	80036d6 <_isatty>
 8023920:	1c43      	adds	r3, r0, #1
 8023922:	d102      	bne.n	802392a <_isatty_r+0x1a>
 8023924:	682b      	ldr	r3, [r5, #0]
 8023926:	b103      	cbz	r3, 802392a <_isatty_r+0x1a>
 8023928:	6023      	str	r3, [r4, #0]
 802392a:	bd38      	pop	{r3, r4, r5, pc}
 802392c:	20016e70 	.word	0x20016e70

08023930 <nan>:
 8023930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023938 <nan+0x8>
 8023934:	4770      	bx	lr
 8023936:	bf00      	nop
 8023938:	00000000 	.word	0x00000000
 802393c:	7ff80000 	.word	0x7ff80000

08023940 <abort>:
 8023940:	b508      	push	{r3, lr}
 8023942:	2006      	movs	r0, #6
 8023944:	f000 fba0 	bl	8024088 <raise>
 8023948:	2001      	movs	r0, #1
 802394a:	f7df fe65 	bl	8003618 <_exit>

0802394e <rshift>:
 802394e:	6903      	ldr	r3, [r0, #16]
 8023950:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8023954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023958:	ea4f 1261 	mov.w	r2, r1, asr #5
 802395c:	f100 0414 	add.w	r4, r0, #20
 8023960:	dd45      	ble.n	80239ee <rshift+0xa0>
 8023962:	f011 011f 	ands.w	r1, r1, #31
 8023966:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802396a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802396e:	d10c      	bne.n	802398a <rshift+0x3c>
 8023970:	f100 0710 	add.w	r7, r0, #16
 8023974:	4629      	mov	r1, r5
 8023976:	42b1      	cmp	r1, r6
 8023978:	d334      	bcc.n	80239e4 <rshift+0x96>
 802397a:	1a9b      	subs	r3, r3, r2
 802397c:	009b      	lsls	r3, r3, #2
 802397e:	1eea      	subs	r2, r5, #3
 8023980:	4296      	cmp	r6, r2
 8023982:	bf38      	it	cc
 8023984:	2300      	movcc	r3, #0
 8023986:	4423      	add	r3, r4
 8023988:	e015      	b.n	80239b6 <rshift+0x68>
 802398a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802398e:	f1c1 0820 	rsb	r8, r1, #32
 8023992:	40cf      	lsrs	r7, r1
 8023994:	f105 0e04 	add.w	lr, r5, #4
 8023998:	46a1      	mov	r9, r4
 802399a:	4576      	cmp	r6, lr
 802399c:	46f4      	mov	ip, lr
 802399e:	d815      	bhi.n	80239cc <rshift+0x7e>
 80239a0:	1a9a      	subs	r2, r3, r2
 80239a2:	0092      	lsls	r2, r2, #2
 80239a4:	3a04      	subs	r2, #4
 80239a6:	3501      	adds	r5, #1
 80239a8:	42ae      	cmp	r6, r5
 80239aa:	bf38      	it	cc
 80239ac:	2200      	movcc	r2, #0
 80239ae:	18a3      	adds	r3, r4, r2
 80239b0:	50a7      	str	r7, [r4, r2]
 80239b2:	b107      	cbz	r7, 80239b6 <rshift+0x68>
 80239b4:	3304      	adds	r3, #4
 80239b6:	1b1a      	subs	r2, r3, r4
 80239b8:	42a3      	cmp	r3, r4
 80239ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80239be:	bf08      	it	eq
 80239c0:	2300      	moveq	r3, #0
 80239c2:	6102      	str	r2, [r0, #16]
 80239c4:	bf08      	it	eq
 80239c6:	6143      	streq	r3, [r0, #20]
 80239c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80239cc:	f8dc c000 	ldr.w	ip, [ip]
 80239d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80239d4:	ea4c 0707 	orr.w	r7, ip, r7
 80239d8:	f849 7b04 	str.w	r7, [r9], #4
 80239dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80239e0:	40cf      	lsrs	r7, r1
 80239e2:	e7da      	b.n	802399a <rshift+0x4c>
 80239e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80239e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80239ec:	e7c3      	b.n	8023976 <rshift+0x28>
 80239ee:	4623      	mov	r3, r4
 80239f0:	e7e1      	b.n	80239b6 <rshift+0x68>

080239f2 <__hexdig_fun>:
 80239f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80239f6:	2b09      	cmp	r3, #9
 80239f8:	d802      	bhi.n	8023a00 <__hexdig_fun+0xe>
 80239fa:	3820      	subs	r0, #32
 80239fc:	b2c0      	uxtb	r0, r0
 80239fe:	4770      	bx	lr
 8023a00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8023a04:	2b05      	cmp	r3, #5
 8023a06:	d801      	bhi.n	8023a0c <__hexdig_fun+0x1a>
 8023a08:	3847      	subs	r0, #71	; 0x47
 8023a0a:	e7f7      	b.n	80239fc <__hexdig_fun+0xa>
 8023a0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8023a10:	2b05      	cmp	r3, #5
 8023a12:	d801      	bhi.n	8023a18 <__hexdig_fun+0x26>
 8023a14:	3827      	subs	r0, #39	; 0x27
 8023a16:	e7f1      	b.n	80239fc <__hexdig_fun+0xa>
 8023a18:	2000      	movs	r0, #0
 8023a1a:	4770      	bx	lr

08023a1c <__gethex>:
 8023a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a20:	4617      	mov	r7, r2
 8023a22:	680a      	ldr	r2, [r1, #0]
 8023a24:	b085      	sub	sp, #20
 8023a26:	f102 0b02 	add.w	fp, r2, #2
 8023a2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8023a2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8023a32:	4681      	mov	r9, r0
 8023a34:	468a      	mov	sl, r1
 8023a36:	9302      	str	r3, [sp, #8]
 8023a38:	32fe      	adds	r2, #254	; 0xfe
 8023a3a:	eb02 030b 	add.w	r3, r2, fp
 8023a3e:	46d8      	mov	r8, fp
 8023a40:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8023a44:	9301      	str	r3, [sp, #4]
 8023a46:	2830      	cmp	r0, #48	; 0x30
 8023a48:	d0f7      	beq.n	8023a3a <__gethex+0x1e>
 8023a4a:	f7ff ffd2 	bl	80239f2 <__hexdig_fun>
 8023a4e:	4604      	mov	r4, r0
 8023a50:	2800      	cmp	r0, #0
 8023a52:	d138      	bne.n	8023ac6 <__gethex+0xaa>
 8023a54:	49a7      	ldr	r1, [pc, #668]	; (8023cf4 <__gethex+0x2d8>)
 8023a56:	2201      	movs	r2, #1
 8023a58:	4640      	mov	r0, r8
 8023a5a:	f7fd f948 	bl	8020cee <strncmp>
 8023a5e:	4606      	mov	r6, r0
 8023a60:	2800      	cmp	r0, #0
 8023a62:	d169      	bne.n	8023b38 <__gethex+0x11c>
 8023a64:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023a68:	465d      	mov	r5, fp
 8023a6a:	f7ff ffc2 	bl	80239f2 <__hexdig_fun>
 8023a6e:	2800      	cmp	r0, #0
 8023a70:	d064      	beq.n	8023b3c <__gethex+0x120>
 8023a72:	465a      	mov	r2, fp
 8023a74:	7810      	ldrb	r0, [r2, #0]
 8023a76:	2830      	cmp	r0, #48	; 0x30
 8023a78:	4690      	mov	r8, r2
 8023a7a:	f102 0201 	add.w	r2, r2, #1
 8023a7e:	d0f9      	beq.n	8023a74 <__gethex+0x58>
 8023a80:	f7ff ffb7 	bl	80239f2 <__hexdig_fun>
 8023a84:	2301      	movs	r3, #1
 8023a86:	fab0 f480 	clz	r4, r0
 8023a8a:	0964      	lsrs	r4, r4, #5
 8023a8c:	465e      	mov	r6, fp
 8023a8e:	9301      	str	r3, [sp, #4]
 8023a90:	4642      	mov	r2, r8
 8023a92:	4615      	mov	r5, r2
 8023a94:	3201      	adds	r2, #1
 8023a96:	7828      	ldrb	r0, [r5, #0]
 8023a98:	f7ff ffab 	bl	80239f2 <__hexdig_fun>
 8023a9c:	2800      	cmp	r0, #0
 8023a9e:	d1f8      	bne.n	8023a92 <__gethex+0x76>
 8023aa0:	4994      	ldr	r1, [pc, #592]	; (8023cf4 <__gethex+0x2d8>)
 8023aa2:	2201      	movs	r2, #1
 8023aa4:	4628      	mov	r0, r5
 8023aa6:	f7fd f922 	bl	8020cee <strncmp>
 8023aaa:	b978      	cbnz	r0, 8023acc <__gethex+0xb0>
 8023aac:	b946      	cbnz	r6, 8023ac0 <__gethex+0xa4>
 8023aae:	1c6e      	adds	r6, r5, #1
 8023ab0:	4632      	mov	r2, r6
 8023ab2:	4615      	mov	r5, r2
 8023ab4:	3201      	adds	r2, #1
 8023ab6:	7828      	ldrb	r0, [r5, #0]
 8023ab8:	f7ff ff9b 	bl	80239f2 <__hexdig_fun>
 8023abc:	2800      	cmp	r0, #0
 8023abe:	d1f8      	bne.n	8023ab2 <__gethex+0x96>
 8023ac0:	1b73      	subs	r3, r6, r5
 8023ac2:	009e      	lsls	r6, r3, #2
 8023ac4:	e004      	b.n	8023ad0 <__gethex+0xb4>
 8023ac6:	2400      	movs	r4, #0
 8023ac8:	4626      	mov	r6, r4
 8023aca:	e7e1      	b.n	8023a90 <__gethex+0x74>
 8023acc:	2e00      	cmp	r6, #0
 8023ace:	d1f7      	bne.n	8023ac0 <__gethex+0xa4>
 8023ad0:	782b      	ldrb	r3, [r5, #0]
 8023ad2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023ad6:	2b50      	cmp	r3, #80	; 0x50
 8023ad8:	d13d      	bne.n	8023b56 <__gethex+0x13a>
 8023ada:	786b      	ldrb	r3, [r5, #1]
 8023adc:	2b2b      	cmp	r3, #43	; 0x2b
 8023ade:	d02f      	beq.n	8023b40 <__gethex+0x124>
 8023ae0:	2b2d      	cmp	r3, #45	; 0x2d
 8023ae2:	d031      	beq.n	8023b48 <__gethex+0x12c>
 8023ae4:	1c69      	adds	r1, r5, #1
 8023ae6:	f04f 0b00 	mov.w	fp, #0
 8023aea:	7808      	ldrb	r0, [r1, #0]
 8023aec:	f7ff ff81 	bl	80239f2 <__hexdig_fun>
 8023af0:	1e42      	subs	r2, r0, #1
 8023af2:	b2d2      	uxtb	r2, r2
 8023af4:	2a18      	cmp	r2, #24
 8023af6:	d82e      	bhi.n	8023b56 <__gethex+0x13a>
 8023af8:	f1a0 0210 	sub.w	r2, r0, #16
 8023afc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8023b00:	f7ff ff77 	bl	80239f2 <__hexdig_fun>
 8023b04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8023b08:	fa5f fc8c 	uxtb.w	ip, ip
 8023b0c:	f1bc 0f18 	cmp.w	ip, #24
 8023b10:	d91d      	bls.n	8023b4e <__gethex+0x132>
 8023b12:	f1bb 0f00 	cmp.w	fp, #0
 8023b16:	d000      	beq.n	8023b1a <__gethex+0xfe>
 8023b18:	4252      	negs	r2, r2
 8023b1a:	4416      	add	r6, r2
 8023b1c:	f8ca 1000 	str.w	r1, [sl]
 8023b20:	b1dc      	cbz	r4, 8023b5a <__gethex+0x13e>
 8023b22:	9b01      	ldr	r3, [sp, #4]
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	bf14      	ite	ne
 8023b28:	f04f 0800 	movne.w	r8, #0
 8023b2c:	f04f 0806 	moveq.w	r8, #6
 8023b30:	4640      	mov	r0, r8
 8023b32:	b005      	add	sp, #20
 8023b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b38:	4645      	mov	r5, r8
 8023b3a:	4626      	mov	r6, r4
 8023b3c:	2401      	movs	r4, #1
 8023b3e:	e7c7      	b.n	8023ad0 <__gethex+0xb4>
 8023b40:	f04f 0b00 	mov.w	fp, #0
 8023b44:	1ca9      	adds	r1, r5, #2
 8023b46:	e7d0      	b.n	8023aea <__gethex+0xce>
 8023b48:	f04f 0b01 	mov.w	fp, #1
 8023b4c:	e7fa      	b.n	8023b44 <__gethex+0x128>
 8023b4e:	230a      	movs	r3, #10
 8023b50:	fb03 0002 	mla	r0, r3, r2, r0
 8023b54:	e7d0      	b.n	8023af8 <__gethex+0xdc>
 8023b56:	4629      	mov	r1, r5
 8023b58:	e7e0      	b.n	8023b1c <__gethex+0x100>
 8023b5a:	eba5 0308 	sub.w	r3, r5, r8
 8023b5e:	3b01      	subs	r3, #1
 8023b60:	4621      	mov	r1, r4
 8023b62:	2b07      	cmp	r3, #7
 8023b64:	dc0a      	bgt.n	8023b7c <__gethex+0x160>
 8023b66:	4648      	mov	r0, r9
 8023b68:	f7fd fffa 	bl	8021b60 <_Balloc>
 8023b6c:	4604      	mov	r4, r0
 8023b6e:	b940      	cbnz	r0, 8023b82 <__gethex+0x166>
 8023b70:	4b61      	ldr	r3, [pc, #388]	; (8023cf8 <__gethex+0x2dc>)
 8023b72:	4602      	mov	r2, r0
 8023b74:	21e4      	movs	r1, #228	; 0xe4
 8023b76:	4861      	ldr	r0, [pc, #388]	; (8023cfc <__gethex+0x2e0>)
 8023b78:	f7fd f986 	bl	8020e88 <__assert_func>
 8023b7c:	3101      	adds	r1, #1
 8023b7e:	105b      	asrs	r3, r3, #1
 8023b80:	e7ef      	b.n	8023b62 <__gethex+0x146>
 8023b82:	f100 0a14 	add.w	sl, r0, #20
 8023b86:	2300      	movs	r3, #0
 8023b88:	495a      	ldr	r1, [pc, #360]	; (8023cf4 <__gethex+0x2d8>)
 8023b8a:	f8cd a004 	str.w	sl, [sp, #4]
 8023b8e:	469b      	mov	fp, r3
 8023b90:	45a8      	cmp	r8, r5
 8023b92:	d342      	bcc.n	8023c1a <__gethex+0x1fe>
 8023b94:	9801      	ldr	r0, [sp, #4]
 8023b96:	f840 bb04 	str.w	fp, [r0], #4
 8023b9a:	eba0 000a 	sub.w	r0, r0, sl
 8023b9e:	1080      	asrs	r0, r0, #2
 8023ba0:	6120      	str	r0, [r4, #16]
 8023ba2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8023ba6:	4658      	mov	r0, fp
 8023ba8:	f7fe f8cc 	bl	8021d44 <__hi0bits>
 8023bac:	683d      	ldr	r5, [r7, #0]
 8023bae:	eba8 0000 	sub.w	r0, r8, r0
 8023bb2:	42a8      	cmp	r0, r5
 8023bb4:	dd59      	ble.n	8023c6a <__gethex+0x24e>
 8023bb6:	eba0 0805 	sub.w	r8, r0, r5
 8023bba:	4641      	mov	r1, r8
 8023bbc:	4620      	mov	r0, r4
 8023bbe:	f7fe fc58 	bl	8022472 <__any_on>
 8023bc2:	4683      	mov	fp, r0
 8023bc4:	b1b8      	cbz	r0, 8023bf6 <__gethex+0x1da>
 8023bc6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8023bca:	1159      	asrs	r1, r3, #5
 8023bcc:	f003 021f 	and.w	r2, r3, #31
 8023bd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023bd4:	f04f 0b01 	mov.w	fp, #1
 8023bd8:	fa0b f202 	lsl.w	r2, fp, r2
 8023bdc:	420a      	tst	r2, r1
 8023bde:	d00a      	beq.n	8023bf6 <__gethex+0x1da>
 8023be0:	455b      	cmp	r3, fp
 8023be2:	dd06      	ble.n	8023bf2 <__gethex+0x1d6>
 8023be4:	f1a8 0102 	sub.w	r1, r8, #2
 8023be8:	4620      	mov	r0, r4
 8023bea:	f7fe fc42 	bl	8022472 <__any_on>
 8023bee:	2800      	cmp	r0, #0
 8023bf0:	d138      	bne.n	8023c64 <__gethex+0x248>
 8023bf2:	f04f 0b02 	mov.w	fp, #2
 8023bf6:	4641      	mov	r1, r8
 8023bf8:	4620      	mov	r0, r4
 8023bfa:	f7ff fea8 	bl	802394e <rshift>
 8023bfe:	4446      	add	r6, r8
 8023c00:	68bb      	ldr	r3, [r7, #8]
 8023c02:	42b3      	cmp	r3, r6
 8023c04:	da41      	bge.n	8023c8a <__gethex+0x26e>
 8023c06:	4621      	mov	r1, r4
 8023c08:	4648      	mov	r0, r9
 8023c0a:	f7fd ffe9 	bl	8021be0 <_Bfree>
 8023c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023c10:	2300      	movs	r3, #0
 8023c12:	6013      	str	r3, [r2, #0]
 8023c14:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8023c18:	e78a      	b.n	8023b30 <__gethex+0x114>
 8023c1a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8023c1e:	2a2e      	cmp	r2, #46	; 0x2e
 8023c20:	d014      	beq.n	8023c4c <__gethex+0x230>
 8023c22:	2b20      	cmp	r3, #32
 8023c24:	d106      	bne.n	8023c34 <__gethex+0x218>
 8023c26:	9b01      	ldr	r3, [sp, #4]
 8023c28:	f843 bb04 	str.w	fp, [r3], #4
 8023c2c:	f04f 0b00 	mov.w	fp, #0
 8023c30:	9301      	str	r3, [sp, #4]
 8023c32:	465b      	mov	r3, fp
 8023c34:	7828      	ldrb	r0, [r5, #0]
 8023c36:	9303      	str	r3, [sp, #12]
 8023c38:	f7ff fedb 	bl	80239f2 <__hexdig_fun>
 8023c3c:	9b03      	ldr	r3, [sp, #12]
 8023c3e:	f000 000f 	and.w	r0, r0, #15
 8023c42:	4098      	lsls	r0, r3
 8023c44:	ea4b 0b00 	orr.w	fp, fp, r0
 8023c48:	3304      	adds	r3, #4
 8023c4a:	e7a1      	b.n	8023b90 <__gethex+0x174>
 8023c4c:	45a8      	cmp	r8, r5
 8023c4e:	d8e8      	bhi.n	8023c22 <__gethex+0x206>
 8023c50:	2201      	movs	r2, #1
 8023c52:	4628      	mov	r0, r5
 8023c54:	9303      	str	r3, [sp, #12]
 8023c56:	f7fd f84a 	bl	8020cee <strncmp>
 8023c5a:	4926      	ldr	r1, [pc, #152]	; (8023cf4 <__gethex+0x2d8>)
 8023c5c:	9b03      	ldr	r3, [sp, #12]
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	d1df      	bne.n	8023c22 <__gethex+0x206>
 8023c62:	e795      	b.n	8023b90 <__gethex+0x174>
 8023c64:	f04f 0b03 	mov.w	fp, #3
 8023c68:	e7c5      	b.n	8023bf6 <__gethex+0x1da>
 8023c6a:	da0b      	bge.n	8023c84 <__gethex+0x268>
 8023c6c:	eba5 0800 	sub.w	r8, r5, r0
 8023c70:	4621      	mov	r1, r4
 8023c72:	4642      	mov	r2, r8
 8023c74:	4648      	mov	r0, r9
 8023c76:	f7fe f9cd 	bl	8022014 <__lshift>
 8023c7a:	eba6 0608 	sub.w	r6, r6, r8
 8023c7e:	4604      	mov	r4, r0
 8023c80:	f100 0a14 	add.w	sl, r0, #20
 8023c84:	f04f 0b00 	mov.w	fp, #0
 8023c88:	e7ba      	b.n	8023c00 <__gethex+0x1e4>
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	42b3      	cmp	r3, r6
 8023c8e:	dd73      	ble.n	8023d78 <__gethex+0x35c>
 8023c90:	1b9e      	subs	r6, r3, r6
 8023c92:	42b5      	cmp	r5, r6
 8023c94:	dc34      	bgt.n	8023d00 <__gethex+0x2e4>
 8023c96:	68fb      	ldr	r3, [r7, #12]
 8023c98:	2b02      	cmp	r3, #2
 8023c9a:	d023      	beq.n	8023ce4 <__gethex+0x2c8>
 8023c9c:	2b03      	cmp	r3, #3
 8023c9e:	d025      	beq.n	8023cec <__gethex+0x2d0>
 8023ca0:	2b01      	cmp	r3, #1
 8023ca2:	d115      	bne.n	8023cd0 <__gethex+0x2b4>
 8023ca4:	42b5      	cmp	r5, r6
 8023ca6:	d113      	bne.n	8023cd0 <__gethex+0x2b4>
 8023ca8:	2d01      	cmp	r5, #1
 8023caa:	d10b      	bne.n	8023cc4 <__gethex+0x2a8>
 8023cac:	9a02      	ldr	r2, [sp, #8]
 8023cae:	687b      	ldr	r3, [r7, #4]
 8023cb0:	6013      	str	r3, [r2, #0]
 8023cb2:	2301      	movs	r3, #1
 8023cb4:	6123      	str	r3, [r4, #16]
 8023cb6:	f8ca 3000 	str.w	r3, [sl]
 8023cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023cbc:	f04f 0862 	mov.w	r8, #98	; 0x62
 8023cc0:	601c      	str	r4, [r3, #0]
 8023cc2:	e735      	b.n	8023b30 <__gethex+0x114>
 8023cc4:	1e69      	subs	r1, r5, #1
 8023cc6:	4620      	mov	r0, r4
 8023cc8:	f7fe fbd3 	bl	8022472 <__any_on>
 8023ccc:	2800      	cmp	r0, #0
 8023cce:	d1ed      	bne.n	8023cac <__gethex+0x290>
 8023cd0:	4621      	mov	r1, r4
 8023cd2:	4648      	mov	r0, r9
 8023cd4:	f7fd ff84 	bl	8021be0 <_Bfree>
 8023cd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023cda:	2300      	movs	r3, #0
 8023cdc:	6013      	str	r3, [r2, #0]
 8023cde:	f04f 0850 	mov.w	r8, #80	; 0x50
 8023ce2:	e725      	b.n	8023b30 <__gethex+0x114>
 8023ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023ce6:	2b00      	cmp	r3, #0
 8023ce8:	d1f2      	bne.n	8023cd0 <__gethex+0x2b4>
 8023cea:	e7df      	b.n	8023cac <__gethex+0x290>
 8023cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	d1dc      	bne.n	8023cac <__gethex+0x290>
 8023cf2:	e7ed      	b.n	8023cd0 <__gethex+0x2b4>
 8023cf4:	08025ca4 	.word	0x08025ca4
 8023cf8:	08025b3e 	.word	0x08025b3e
 8023cfc:	08025d11 	.word	0x08025d11
 8023d00:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8023d04:	f1bb 0f00 	cmp.w	fp, #0
 8023d08:	d133      	bne.n	8023d72 <__gethex+0x356>
 8023d0a:	f1b8 0f00 	cmp.w	r8, #0
 8023d0e:	d004      	beq.n	8023d1a <__gethex+0x2fe>
 8023d10:	4641      	mov	r1, r8
 8023d12:	4620      	mov	r0, r4
 8023d14:	f7fe fbad 	bl	8022472 <__any_on>
 8023d18:	4683      	mov	fp, r0
 8023d1a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8023d1e:	2301      	movs	r3, #1
 8023d20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023d24:	f008 081f 	and.w	r8, r8, #31
 8023d28:	fa03 f308 	lsl.w	r3, r3, r8
 8023d2c:	4213      	tst	r3, r2
 8023d2e:	4631      	mov	r1, r6
 8023d30:	4620      	mov	r0, r4
 8023d32:	bf18      	it	ne
 8023d34:	f04b 0b02 	orrne.w	fp, fp, #2
 8023d38:	1bad      	subs	r5, r5, r6
 8023d3a:	f7ff fe08 	bl	802394e <rshift>
 8023d3e:	687e      	ldr	r6, [r7, #4]
 8023d40:	f04f 0802 	mov.w	r8, #2
 8023d44:	f1bb 0f00 	cmp.w	fp, #0
 8023d48:	d04a      	beq.n	8023de0 <__gethex+0x3c4>
 8023d4a:	68fb      	ldr	r3, [r7, #12]
 8023d4c:	2b02      	cmp	r3, #2
 8023d4e:	d016      	beq.n	8023d7e <__gethex+0x362>
 8023d50:	2b03      	cmp	r3, #3
 8023d52:	d018      	beq.n	8023d86 <__gethex+0x36a>
 8023d54:	2b01      	cmp	r3, #1
 8023d56:	d109      	bne.n	8023d6c <__gethex+0x350>
 8023d58:	f01b 0f02 	tst.w	fp, #2
 8023d5c:	d006      	beq.n	8023d6c <__gethex+0x350>
 8023d5e:	f8da 3000 	ldr.w	r3, [sl]
 8023d62:	ea4b 0b03 	orr.w	fp, fp, r3
 8023d66:	f01b 0f01 	tst.w	fp, #1
 8023d6a:	d10f      	bne.n	8023d8c <__gethex+0x370>
 8023d6c:	f048 0810 	orr.w	r8, r8, #16
 8023d70:	e036      	b.n	8023de0 <__gethex+0x3c4>
 8023d72:	f04f 0b01 	mov.w	fp, #1
 8023d76:	e7d0      	b.n	8023d1a <__gethex+0x2fe>
 8023d78:	f04f 0801 	mov.w	r8, #1
 8023d7c:	e7e2      	b.n	8023d44 <__gethex+0x328>
 8023d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d80:	f1c3 0301 	rsb	r3, r3, #1
 8023d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8023d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d88:	2b00      	cmp	r3, #0
 8023d8a:	d0ef      	beq.n	8023d6c <__gethex+0x350>
 8023d8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023d90:	f104 0214 	add.w	r2, r4, #20
 8023d94:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023d98:	9301      	str	r3, [sp, #4]
 8023d9a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8023d9e:	2300      	movs	r3, #0
 8023da0:	4694      	mov	ip, r2
 8023da2:	f852 1b04 	ldr.w	r1, [r2], #4
 8023da6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8023daa:	d01e      	beq.n	8023dea <__gethex+0x3ce>
 8023dac:	3101      	adds	r1, #1
 8023dae:	f8cc 1000 	str.w	r1, [ip]
 8023db2:	f1b8 0f02 	cmp.w	r8, #2
 8023db6:	f104 0214 	add.w	r2, r4, #20
 8023dba:	d13d      	bne.n	8023e38 <__gethex+0x41c>
 8023dbc:	683b      	ldr	r3, [r7, #0]
 8023dbe:	3b01      	subs	r3, #1
 8023dc0:	42ab      	cmp	r3, r5
 8023dc2:	d10b      	bne.n	8023ddc <__gethex+0x3c0>
 8023dc4:	1169      	asrs	r1, r5, #5
 8023dc6:	2301      	movs	r3, #1
 8023dc8:	f005 051f 	and.w	r5, r5, #31
 8023dcc:	fa03 f505 	lsl.w	r5, r3, r5
 8023dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023dd4:	421d      	tst	r5, r3
 8023dd6:	bf18      	it	ne
 8023dd8:	f04f 0801 	movne.w	r8, #1
 8023ddc:	f048 0820 	orr.w	r8, r8, #32
 8023de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023de2:	601c      	str	r4, [r3, #0]
 8023de4:	9b02      	ldr	r3, [sp, #8]
 8023de6:	601e      	str	r6, [r3, #0]
 8023de8:	e6a2      	b.n	8023b30 <__gethex+0x114>
 8023dea:	4290      	cmp	r0, r2
 8023dec:	f842 3c04 	str.w	r3, [r2, #-4]
 8023df0:	d8d6      	bhi.n	8023da0 <__gethex+0x384>
 8023df2:	68a2      	ldr	r2, [r4, #8]
 8023df4:	4593      	cmp	fp, r2
 8023df6:	db17      	blt.n	8023e28 <__gethex+0x40c>
 8023df8:	6861      	ldr	r1, [r4, #4]
 8023dfa:	4648      	mov	r0, r9
 8023dfc:	3101      	adds	r1, #1
 8023dfe:	f7fd feaf 	bl	8021b60 <_Balloc>
 8023e02:	4682      	mov	sl, r0
 8023e04:	b918      	cbnz	r0, 8023e0e <__gethex+0x3f2>
 8023e06:	4b1b      	ldr	r3, [pc, #108]	; (8023e74 <__gethex+0x458>)
 8023e08:	4602      	mov	r2, r0
 8023e0a:	2184      	movs	r1, #132	; 0x84
 8023e0c:	e6b3      	b.n	8023b76 <__gethex+0x15a>
 8023e0e:	6922      	ldr	r2, [r4, #16]
 8023e10:	3202      	adds	r2, #2
 8023e12:	f104 010c 	add.w	r1, r4, #12
 8023e16:	0092      	lsls	r2, r2, #2
 8023e18:	300c      	adds	r0, #12
 8023e1a:	f7fd f820 	bl	8020e5e <memcpy>
 8023e1e:	4621      	mov	r1, r4
 8023e20:	4648      	mov	r0, r9
 8023e22:	f7fd fedd 	bl	8021be0 <_Bfree>
 8023e26:	4654      	mov	r4, sl
 8023e28:	6922      	ldr	r2, [r4, #16]
 8023e2a:	1c51      	adds	r1, r2, #1
 8023e2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023e30:	6121      	str	r1, [r4, #16]
 8023e32:	2101      	movs	r1, #1
 8023e34:	6151      	str	r1, [r2, #20]
 8023e36:	e7bc      	b.n	8023db2 <__gethex+0x396>
 8023e38:	6921      	ldr	r1, [r4, #16]
 8023e3a:	4559      	cmp	r1, fp
 8023e3c:	dd0b      	ble.n	8023e56 <__gethex+0x43a>
 8023e3e:	2101      	movs	r1, #1
 8023e40:	4620      	mov	r0, r4
 8023e42:	f7ff fd84 	bl	802394e <rshift>
 8023e46:	68bb      	ldr	r3, [r7, #8]
 8023e48:	3601      	adds	r6, #1
 8023e4a:	42b3      	cmp	r3, r6
 8023e4c:	f6ff aedb 	blt.w	8023c06 <__gethex+0x1ea>
 8023e50:	f04f 0801 	mov.w	r8, #1
 8023e54:	e7c2      	b.n	8023ddc <__gethex+0x3c0>
 8023e56:	f015 051f 	ands.w	r5, r5, #31
 8023e5a:	d0f9      	beq.n	8023e50 <__gethex+0x434>
 8023e5c:	9b01      	ldr	r3, [sp, #4]
 8023e5e:	441a      	add	r2, r3
 8023e60:	f1c5 0520 	rsb	r5, r5, #32
 8023e64:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8023e68:	f7fd ff6c 	bl	8021d44 <__hi0bits>
 8023e6c:	42a8      	cmp	r0, r5
 8023e6e:	dbe6      	blt.n	8023e3e <__gethex+0x422>
 8023e70:	e7ee      	b.n	8023e50 <__gethex+0x434>
 8023e72:	bf00      	nop
 8023e74:	08025b3e 	.word	0x08025b3e

08023e78 <L_shift>:
 8023e78:	f1c2 0208 	rsb	r2, r2, #8
 8023e7c:	0092      	lsls	r2, r2, #2
 8023e7e:	b570      	push	{r4, r5, r6, lr}
 8023e80:	f1c2 0620 	rsb	r6, r2, #32
 8023e84:	6843      	ldr	r3, [r0, #4]
 8023e86:	6804      	ldr	r4, [r0, #0]
 8023e88:	fa03 f506 	lsl.w	r5, r3, r6
 8023e8c:	432c      	orrs	r4, r5
 8023e8e:	40d3      	lsrs	r3, r2
 8023e90:	6004      	str	r4, [r0, #0]
 8023e92:	f840 3f04 	str.w	r3, [r0, #4]!
 8023e96:	4288      	cmp	r0, r1
 8023e98:	d3f4      	bcc.n	8023e84 <L_shift+0xc>
 8023e9a:	bd70      	pop	{r4, r5, r6, pc}

08023e9c <__match>:
 8023e9c:	b530      	push	{r4, r5, lr}
 8023e9e:	6803      	ldr	r3, [r0, #0]
 8023ea0:	3301      	adds	r3, #1
 8023ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023ea6:	b914      	cbnz	r4, 8023eae <__match+0x12>
 8023ea8:	6003      	str	r3, [r0, #0]
 8023eaa:	2001      	movs	r0, #1
 8023eac:	bd30      	pop	{r4, r5, pc}
 8023eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023eb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8023eb6:	2d19      	cmp	r5, #25
 8023eb8:	bf98      	it	ls
 8023eba:	3220      	addls	r2, #32
 8023ebc:	42a2      	cmp	r2, r4
 8023ebe:	d0f0      	beq.n	8023ea2 <__match+0x6>
 8023ec0:	2000      	movs	r0, #0
 8023ec2:	e7f3      	b.n	8023eac <__match+0x10>

08023ec4 <__hexnan>:
 8023ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ec8:	680b      	ldr	r3, [r1, #0]
 8023eca:	6801      	ldr	r1, [r0, #0]
 8023ecc:	115e      	asrs	r6, r3, #5
 8023ece:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8023ed2:	f013 031f 	ands.w	r3, r3, #31
 8023ed6:	b087      	sub	sp, #28
 8023ed8:	bf18      	it	ne
 8023eda:	3604      	addne	r6, #4
 8023edc:	2500      	movs	r5, #0
 8023ede:	1f37      	subs	r7, r6, #4
 8023ee0:	4682      	mov	sl, r0
 8023ee2:	4690      	mov	r8, r2
 8023ee4:	9301      	str	r3, [sp, #4]
 8023ee6:	f846 5c04 	str.w	r5, [r6, #-4]
 8023eea:	46b9      	mov	r9, r7
 8023eec:	463c      	mov	r4, r7
 8023eee:	9502      	str	r5, [sp, #8]
 8023ef0:	46ab      	mov	fp, r5
 8023ef2:	784a      	ldrb	r2, [r1, #1]
 8023ef4:	1c4b      	adds	r3, r1, #1
 8023ef6:	9303      	str	r3, [sp, #12]
 8023ef8:	b342      	cbz	r2, 8023f4c <__hexnan+0x88>
 8023efa:	4610      	mov	r0, r2
 8023efc:	9105      	str	r1, [sp, #20]
 8023efe:	9204      	str	r2, [sp, #16]
 8023f00:	f7ff fd77 	bl	80239f2 <__hexdig_fun>
 8023f04:	2800      	cmp	r0, #0
 8023f06:	d14f      	bne.n	8023fa8 <__hexnan+0xe4>
 8023f08:	9a04      	ldr	r2, [sp, #16]
 8023f0a:	9905      	ldr	r1, [sp, #20]
 8023f0c:	2a20      	cmp	r2, #32
 8023f0e:	d818      	bhi.n	8023f42 <__hexnan+0x7e>
 8023f10:	9b02      	ldr	r3, [sp, #8]
 8023f12:	459b      	cmp	fp, r3
 8023f14:	dd13      	ble.n	8023f3e <__hexnan+0x7a>
 8023f16:	454c      	cmp	r4, r9
 8023f18:	d206      	bcs.n	8023f28 <__hexnan+0x64>
 8023f1a:	2d07      	cmp	r5, #7
 8023f1c:	dc04      	bgt.n	8023f28 <__hexnan+0x64>
 8023f1e:	462a      	mov	r2, r5
 8023f20:	4649      	mov	r1, r9
 8023f22:	4620      	mov	r0, r4
 8023f24:	f7ff ffa8 	bl	8023e78 <L_shift>
 8023f28:	4544      	cmp	r4, r8
 8023f2a:	d950      	bls.n	8023fce <__hexnan+0x10a>
 8023f2c:	2300      	movs	r3, #0
 8023f2e:	f1a4 0904 	sub.w	r9, r4, #4
 8023f32:	f844 3c04 	str.w	r3, [r4, #-4]
 8023f36:	f8cd b008 	str.w	fp, [sp, #8]
 8023f3a:	464c      	mov	r4, r9
 8023f3c:	461d      	mov	r5, r3
 8023f3e:	9903      	ldr	r1, [sp, #12]
 8023f40:	e7d7      	b.n	8023ef2 <__hexnan+0x2e>
 8023f42:	2a29      	cmp	r2, #41	; 0x29
 8023f44:	d155      	bne.n	8023ff2 <__hexnan+0x12e>
 8023f46:	3102      	adds	r1, #2
 8023f48:	f8ca 1000 	str.w	r1, [sl]
 8023f4c:	f1bb 0f00 	cmp.w	fp, #0
 8023f50:	d04f      	beq.n	8023ff2 <__hexnan+0x12e>
 8023f52:	454c      	cmp	r4, r9
 8023f54:	d206      	bcs.n	8023f64 <__hexnan+0xa0>
 8023f56:	2d07      	cmp	r5, #7
 8023f58:	dc04      	bgt.n	8023f64 <__hexnan+0xa0>
 8023f5a:	462a      	mov	r2, r5
 8023f5c:	4649      	mov	r1, r9
 8023f5e:	4620      	mov	r0, r4
 8023f60:	f7ff ff8a 	bl	8023e78 <L_shift>
 8023f64:	4544      	cmp	r4, r8
 8023f66:	d934      	bls.n	8023fd2 <__hexnan+0x10e>
 8023f68:	f1a8 0204 	sub.w	r2, r8, #4
 8023f6c:	4623      	mov	r3, r4
 8023f6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8023f72:	f842 1f04 	str.w	r1, [r2, #4]!
 8023f76:	429f      	cmp	r7, r3
 8023f78:	d2f9      	bcs.n	8023f6e <__hexnan+0xaa>
 8023f7a:	1b3b      	subs	r3, r7, r4
 8023f7c:	f023 0303 	bic.w	r3, r3, #3
 8023f80:	3304      	adds	r3, #4
 8023f82:	3e03      	subs	r6, #3
 8023f84:	3401      	adds	r4, #1
 8023f86:	42a6      	cmp	r6, r4
 8023f88:	bf38      	it	cc
 8023f8a:	2304      	movcc	r3, #4
 8023f8c:	4443      	add	r3, r8
 8023f8e:	2200      	movs	r2, #0
 8023f90:	f843 2b04 	str.w	r2, [r3], #4
 8023f94:	429f      	cmp	r7, r3
 8023f96:	d2fb      	bcs.n	8023f90 <__hexnan+0xcc>
 8023f98:	683b      	ldr	r3, [r7, #0]
 8023f9a:	b91b      	cbnz	r3, 8023fa4 <__hexnan+0xe0>
 8023f9c:	4547      	cmp	r7, r8
 8023f9e:	d126      	bne.n	8023fee <__hexnan+0x12a>
 8023fa0:	2301      	movs	r3, #1
 8023fa2:	603b      	str	r3, [r7, #0]
 8023fa4:	2005      	movs	r0, #5
 8023fa6:	e025      	b.n	8023ff4 <__hexnan+0x130>
 8023fa8:	3501      	adds	r5, #1
 8023faa:	2d08      	cmp	r5, #8
 8023fac:	f10b 0b01 	add.w	fp, fp, #1
 8023fb0:	dd06      	ble.n	8023fc0 <__hexnan+0xfc>
 8023fb2:	4544      	cmp	r4, r8
 8023fb4:	d9c3      	bls.n	8023f3e <__hexnan+0x7a>
 8023fb6:	2300      	movs	r3, #0
 8023fb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8023fbc:	2501      	movs	r5, #1
 8023fbe:	3c04      	subs	r4, #4
 8023fc0:	6822      	ldr	r2, [r4, #0]
 8023fc2:	f000 000f 	and.w	r0, r0, #15
 8023fc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8023fca:	6020      	str	r0, [r4, #0]
 8023fcc:	e7b7      	b.n	8023f3e <__hexnan+0x7a>
 8023fce:	2508      	movs	r5, #8
 8023fd0:	e7b5      	b.n	8023f3e <__hexnan+0x7a>
 8023fd2:	9b01      	ldr	r3, [sp, #4]
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	d0df      	beq.n	8023f98 <__hexnan+0xd4>
 8023fd8:	f1c3 0320 	rsb	r3, r3, #32
 8023fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023fe0:	40da      	lsrs	r2, r3
 8023fe2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023fe6:	4013      	ands	r3, r2
 8023fe8:	f846 3c04 	str.w	r3, [r6, #-4]
 8023fec:	e7d4      	b.n	8023f98 <__hexnan+0xd4>
 8023fee:	3f04      	subs	r7, #4
 8023ff0:	e7d2      	b.n	8023f98 <__hexnan+0xd4>
 8023ff2:	2004      	movs	r0, #4
 8023ff4:	b007      	add	sp, #28
 8023ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023ffa <__ascii_mbtowc>:
 8023ffa:	b082      	sub	sp, #8
 8023ffc:	b901      	cbnz	r1, 8024000 <__ascii_mbtowc+0x6>
 8023ffe:	a901      	add	r1, sp, #4
 8024000:	b142      	cbz	r2, 8024014 <__ascii_mbtowc+0x1a>
 8024002:	b14b      	cbz	r3, 8024018 <__ascii_mbtowc+0x1e>
 8024004:	7813      	ldrb	r3, [r2, #0]
 8024006:	600b      	str	r3, [r1, #0]
 8024008:	7812      	ldrb	r2, [r2, #0]
 802400a:	1e10      	subs	r0, r2, #0
 802400c:	bf18      	it	ne
 802400e:	2001      	movne	r0, #1
 8024010:	b002      	add	sp, #8
 8024012:	4770      	bx	lr
 8024014:	4610      	mov	r0, r2
 8024016:	e7fb      	b.n	8024010 <__ascii_mbtowc+0x16>
 8024018:	f06f 0001 	mvn.w	r0, #1
 802401c:	e7f8      	b.n	8024010 <__ascii_mbtowc+0x16>

0802401e <__ascii_wctomb>:
 802401e:	b149      	cbz	r1, 8024034 <__ascii_wctomb+0x16>
 8024020:	2aff      	cmp	r2, #255	; 0xff
 8024022:	bf85      	ittet	hi
 8024024:	238a      	movhi	r3, #138	; 0x8a
 8024026:	6003      	strhi	r3, [r0, #0]
 8024028:	700a      	strbls	r2, [r1, #0]
 802402a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802402e:	bf98      	it	ls
 8024030:	2001      	movls	r0, #1
 8024032:	4770      	bx	lr
 8024034:	4608      	mov	r0, r1
 8024036:	4770      	bx	lr

08024038 <_raise_r>:
 8024038:	291f      	cmp	r1, #31
 802403a:	b538      	push	{r3, r4, r5, lr}
 802403c:	4604      	mov	r4, r0
 802403e:	460d      	mov	r5, r1
 8024040:	d904      	bls.n	802404c <_raise_r+0x14>
 8024042:	2316      	movs	r3, #22
 8024044:	6003      	str	r3, [r0, #0]
 8024046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802404a:	bd38      	pop	{r3, r4, r5, pc}
 802404c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802404e:	b112      	cbz	r2, 8024056 <_raise_r+0x1e>
 8024050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024054:	b94b      	cbnz	r3, 802406a <_raise_r+0x32>
 8024056:	4620      	mov	r0, r4
 8024058:	f000 f830 	bl	80240bc <_getpid_r>
 802405c:	462a      	mov	r2, r5
 802405e:	4601      	mov	r1, r0
 8024060:	4620      	mov	r0, r4
 8024062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024066:	f000 b817 	b.w	8024098 <_kill_r>
 802406a:	2b01      	cmp	r3, #1
 802406c:	d00a      	beq.n	8024084 <_raise_r+0x4c>
 802406e:	1c59      	adds	r1, r3, #1
 8024070:	d103      	bne.n	802407a <_raise_r+0x42>
 8024072:	2316      	movs	r3, #22
 8024074:	6003      	str	r3, [r0, #0]
 8024076:	2001      	movs	r0, #1
 8024078:	e7e7      	b.n	802404a <_raise_r+0x12>
 802407a:	2400      	movs	r4, #0
 802407c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024080:	4628      	mov	r0, r5
 8024082:	4798      	blx	r3
 8024084:	2000      	movs	r0, #0
 8024086:	e7e0      	b.n	802404a <_raise_r+0x12>

08024088 <raise>:
 8024088:	4b02      	ldr	r3, [pc, #8]	; (8024094 <raise+0xc>)
 802408a:	4601      	mov	r1, r0
 802408c:	6818      	ldr	r0, [r3, #0]
 802408e:	f7ff bfd3 	b.w	8024038 <_raise_r>
 8024092:	bf00      	nop
 8024094:	20000778 	.word	0x20000778

08024098 <_kill_r>:
 8024098:	b538      	push	{r3, r4, r5, lr}
 802409a:	4d07      	ldr	r5, [pc, #28]	; (80240b8 <_kill_r+0x20>)
 802409c:	2300      	movs	r3, #0
 802409e:	4604      	mov	r4, r0
 80240a0:	4608      	mov	r0, r1
 80240a2:	4611      	mov	r1, r2
 80240a4:	602b      	str	r3, [r5, #0]
 80240a6:	f7df faa7 	bl	80035f8 <_kill>
 80240aa:	1c43      	adds	r3, r0, #1
 80240ac:	d102      	bne.n	80240b4 <_kill_r+0x1c>
 80240ae:	682b      	ldr	r3, [r5, #0]
 80240b0:	b103      	cbz	r3, 80240b4 <_kill_r+0x1c>
 80240b2:	6023      	str	r3, [r4, #0]
 80240b4:	bd38      	pop	{r3, r4, r5, pc}
 80240b6:	bf00      	nop
 80240b8:	20016e70 	.word	0x20016e70

080240bc <_getpid_r>:
 80240bc:	f7df ba94 	b.w	80035e8 <_getpid>

080240c0 <_init>:
 80240c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240c2:	bf00      	nop
 80240c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80240c6:	bc08      	pop	{r3}
 80240c8:	469e      	mov	lr, r3
 80240ca:	4770      	bx	lr

080240cc <_fini>:
 80240cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240ce:	bf00      	nop
 80240d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80240d2:	bc08      	pop	{r3}
 80240d4:	469e      	mov	lr, r3
 80240d6:	4770      	bx	lr
