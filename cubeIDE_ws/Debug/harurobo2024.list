
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023d30  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dac  08023f30  08023f30  00033f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025cdc  08025cdc  00040b48  2**0
                  CONTENTS
  4 .ARM          00000008  08025cdc  08025cdc  00035cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025ce4  08025ce4  00040b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  08025ce4  08025ce4  00035ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025cfc  08025cfc  00035cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b48  20000000  08025d00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016668  20000b48  08026848  00040b48  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200171b0  08026848  000471b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b48  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b76  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f33f  00000000  00000000  00040bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c25  00000000  00000000  0006ff2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a0  00000000  00000000  00076b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a8e  00000000  00000000  00078df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002db1a  00000000  00000000  000acb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119dde  00000000  00000000  000da692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a5d4  00000000  00000000  001f4470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fea44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b48 	.word	0x20000b48
 800021c:	00000000 	.word	0x00000000
 8000220:	08023f18 	.word	0x08023f18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b4c 	.word	0x20000b4c
 800023c:	08023f18 	.word	0x08023f18

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a6:	f000 b9f3 	b.w	8000a90 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3304      	adds	r3, #4
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <PushTx8Bytes+0x52>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	7808      	ldrb	r0, [r1, #0]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d8ea      	bhi.n	8000ac4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <PushTx8Bytes+0x70>
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <PushTx8Bytes+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b02:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b10:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d102      	bne.n	8000b24 <PushTx8Bytes+0x90>
		isfull = 1;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20002e3c 	.word	0x20002e3c
 8000b38:	20000e38 	.word	0x20000e38
 8000b3c:	20002e40 	.word	0x20002e40
 8000b40:	20002e38 	.word	0x20002e38

08000b44 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000b4e:	2304      	movs	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000b56:	e035      	b.n	8000bc4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <PopSendTx8Bytes+0x28>
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <PopSendTx8Bytes+0xa8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d034      	beq.n	8000bd6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3308      	adds	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b98:	441a      	add	r2, r3
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f003 fc23 	bl	80043e8 <HAL_CAN_AddTxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PopSendTx8Bytes+0x6c>
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	e014      	b.n	8000bda <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fcdd 	bl	8004588 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c1      	bne.n	8000b58 <PopSendTx8Bytes+0x14>
 8000bd4:	e000      	b.n	8000bd8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000bd6:	bf00      	nop
	}

	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002e40 	.word	0x20002e40
 8000be8:	20002e38 	.word	0x20002e38
 8000bec:	20002e3c 	.word	0x20002e3c
 8000bf0:	20000e38 	.word	0x20000e38
 8000bf4:	20000b64 	.word	0x20000b64

08000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000bfc:	f7ff ffa2 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000c08:	f7ff ff9c 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c14:	b08e      	sub	sp, #56	; 0x38
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 fce3 	bl	80045f2 <HAL_CAN_GetRxMessage>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000c32:	486e      	ldr	r0, [pc, #440]	; (8000dec <WhenCANRxFifo0MsgPending+0x1dc>)
 8000c34:	f01f fcc6 	bl	80205c4 <iprintf>
		Error_Handler();
 8000c38:	f002 fbbd 	bl	80033b6 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4698      	mov	r8, r3
 8000c42:	4691      	mov	r9, r2
 8000c44:	4640      	mov	r0, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	f000 fe70 	bl	800192c <Extract_CAN_Device>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	733a      	strb	r2, [r7, #12]
 8000c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c56:	737a      	strb	r2, [r7, #13]
 8000c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2200      	movs	r2, #0
 8000c62:	461c      	mov	r4, r3
 8000c64:	4615      	mov	r5, r2
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 feab 	bl	80019c4 <Extract_CAN_CMD>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d139      	bne.n	8000cf0 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c82:	e013      	b.n	8000cac <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8c:	4958      	ldr	r1, [pc, #352]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f000 80a0 	beq.w	8000de2 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	461c      	mov	r4, r3
 8000cca:	7c38      	ldrb	r0, [r7, #16]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000cce:	460b      	mov	r3, r1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4423      	add	r3, r4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	7b3a      	ldrb	r2, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e04a      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d146      	bne.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	7bba      	ldrb	r2, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb03      	ldmia	r3!, {r0, r1}
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	6051      	str	r1, [r2, #4]
 8000d18:	e035      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10d      	bne.n	8000d3c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <WhenCANRxFifo0MsgPending+0x1ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	cb03      	ldmia	r3!, {r0, r1}
 8000d36:	6010      	str	r0, [r2, #0]
 8000d38:	6051      	str	r1, [r2, #4]
 8000d3a:	e024      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10d      	bne.n	8000d5e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	cb03      	ldmia	r3!, {r0, r1}
 8000d58:	6010      	str	r0, [r2, #0]
 8000d5a:	6051      	str	r1, [r2, #4]
 8000d5c:	e013      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d10d      	bne.n	8000d80 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	cb03      	ldmia	r3!, {r0, r1}
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	6051      	str	r1, [r2, #4]
 8000d7e:	e002      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000d82:	f01f fc1f 	bl	80205c4 <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d128      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d122      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000da0:	78da      	ldrb	r2, [r3, #3]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d11c      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000db8:	795a      	ldrb	r2, [r3, #5]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d110      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dc4:	799a      	ldrb	r2, [r3, #6]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10a      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dd0:	7a1a      	ldrb	r2, [r3, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	08023f30 	.word	0x08023f30
 8000df0:	20000b78 	.word	0x20000b78
 8000df4:	20000b6c 	.word	0x20000b6c
 8000df8:	20000bb8 	.word	0x20000bb8
 8000dfc:	20000c58 	.word	0x20000c58
 8000e00:	20000cf8 	.word	0x20000cf8
 8000e04:	20000d98 	.word	0x20000d98
 8000e08:	08023f48 	.word	0x08023f48
 8000e0c:	20000b68 	.word	0x20000b68

08000e10 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e015      	b.n	8000e5e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe27 	bl	8000a94 <PushTx8Bytes>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <SendBytes+0x48>
			Error_Handler();
 8000e50:	f002 fab1 	bl	80033b6 <Error_Handler>
			return ret;
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	e027      	b.n	8000ea8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8e5      	bhi.n	8000e32 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fe0b 	bl	8000a94 <PushTx8Bytes>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <SendBytes+0x80>
			Error_Handler();
 8000e88:	f002 fa95 	bl	80033b6 <Error_Handler>
			return ret;
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	e00b      	b.n	8000ea8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 8000e90:	f7ff fe58 	bl	8000b44 <PopSendTx8Bytes>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <SendBytes+0x96>
		Error_Handler();
 8000e9e:	f002 fa8a 	bl	80033b6 <Error_Handler>
		return ret;
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	e000      	b.n	8000ea8 <SendBytes+0x98>
	}

	return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <CAN_SystemInit+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN_SystemInit+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000eca:	e029      	b.n	8000f20 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <CAN_SystemInit+0x38>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000edc:	e017      	b.n	8000f0e <CAN_SystemInit+0x5e>
 8000ede:	bf00      	nop
 8000ee0:	20000b64 	.word	0x20000b64
 8000ee4:	20000b68 	.word	0x20000b68
 8000ee8:	20000b6c 	.word	0x20000b6c
			node_id_list[type][i] = 0xff;
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ef4:	48d7      	ldr	r0, [pc, #860]	; (8001254 <CAN_SystemInit+0x3a4>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d9ea      	bls.n	8000eec <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d9d1      	bls.n	8000ecc <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fcc3 	bl	80018d2 <Make_CAN_ID>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	0b42      	lsrs	r2, r0, #13
 8000f56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f5a:	0b4b      	lsrs	r3, r1, #13
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000f60:	231f      	movs	r3, #31
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fcb3 	bl	80018d2 <Make_CAN_ID>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0b42      	lsrs	r2, r0, #13
 8000f76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f7a:	0b4b      	lsrs	r3, r1, #13
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fca3 	bl	80018d2 <Make_CAN_ID>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4613      	mov	r3, r2
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fc93 	bl	80018d2 <Make_CAN_ID>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <CAN_SystemInit+0x3a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 f8dc 	bl	8004188 <HAL_CAN_ConfigFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000fd6:	f002 f9ee 	bl	80033b6 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fc74 	bl	80018d2 <Make_CAN_ID>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	0b42      	lsrs	r2, r0, #13
 8000ff4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ff8:	0b4b      	lsrs	r3, r1, #13
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000ffe:	231f      	movs	r3, #31
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2002      	movs	r0, #2
 8001006:	f000 fc64 	bl	80018d2 <Make_CAN_ID>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	0b42      	lsrs	r2, r0, #13
 8001014:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001018:	0b4b      	lsrs	r3, r1, #13
 800101a:	4613      	mov	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fc54 	bl	80018d2 <Make_CAN_ID>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4613      	mov	r3, r2
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001036:	4013      	ands	r3, r2
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800103e:	231f      	movs	r3, #31
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2002      	movs	r0, #2
 8001046:	f000 fc44 	bl	80018d2 <Make_CAN_ID>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4613      	mov	r3, r2
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001056:	4013      	ands	r3, r2
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <CAN_SystemInit+0x3a8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f88d 	bl	8004188 <HAL_CAN_ConfigFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8001074:	f002 f99f 	bl	80033b6 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2003      	movs	r0, #3
 8001084:	f000 fc25 	bl	80018d2 <Make_CAN_ID>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	0b42      	lsrs	r2, r0, #13
 8001092:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001096:	0b4b      	lsrs	r3, r1, #13
 8001098:	4613      	mov	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 800109c:	231f      	movs	r3, #31
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 fc15 	bl	80018d2 <Make_CAN_ID>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	0b42      	lsrs	r2, r0, #13
 80010b2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010b6:	0b4b      	lsrs	r3, r1, #13
 80010b8:	4613      	mov	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 fc05 	bl	80018d2 <Make_CAN_ID>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d4:	4013      	ands	r3, r2
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010dc:	231f      	movs	r3, #31
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fbf5 	bl	80018d2 <Make_CAN_ID>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010f4:	4013      	ands	r3, r2
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <CAN_SystemInit+0x3a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f003 f83e 	bl	8004188 <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8001112:	f002 f950 	bl	80033b6 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fbd6 	bl	80018d2 <Make_CAN_ID>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0b42      	lsrs	r2, r0, #13
 8001130:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001134:	0b4b      	lsrs	r3, r1, #13
 8001136:	4613      	mov	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 800113a:	231f      	movs	r3, #31
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fbc6 	bl	80018d2 <Make_CAN_ID>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0b42      	lsrs	r2, r0, #13
 8001150:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001154:	0b4b      	lsrs	r3, r1, #13
 8001156:	4613      	mov	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 800115a:	2301      	movs	r3, #1
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fbb6 	bl	80018d2 <Make_CAN_ID>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4613      	mov	r3, r2
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001172:	4013      	ands	r3, r2
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800117a:	231f      	movs	r3, #31
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fba6 	bl	80018d2 <Make_CAN_ID>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4613      	mov	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001192:	4013      	ands	r3, r2
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <CAN_SystemInit+0x3a8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 ffef 	bl	8004188 <HAL_CAN_ConfigFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 80011b0:	f002 f901 	bl	80033b6 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2004      	movs	r0, #4
 80011c0:	f000 fb87 	bl	80018d2 <Make_CAN_ID>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	0b42      	lsrs	r2, r0, #13
 80011ce:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011d2:	0b4b      	lsrs	r3, r1, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 80011d8:	231f      	movs	r3, #31
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2004      	movs	r0, #4
 80011e0:	f000 fb77 	bl	80018d2 <Make_CAN_ID>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0b42      	lsrs	r2, r0, #13
 80011ee:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011f2:	0b4b      	lsrs	r3, r1, #13
 80011f4:	4613      	mov	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2004      	movs	r0, #4
 8001200:	f000 fb67 	bl	80018d2 <Make_CAN_ID>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4613      	mov	r3, r2
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001218:	231f      	movs	r3, #31
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fb57 	bl	80018d2 <Make_CAN_ID>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4613      	mov	r3, r2
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	4013      	ands	r3, r2
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <CAN_SystemInit+0x3a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ffa0 	bl	8004188 <HAL_CAN_ConfigFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800124e:	f002 f8b2 	bl	80033b6 <Error_Handler>
 8001252:	e003      	b.n	800125c <CAN_SystemInit+0x3ac>
 8001254:	20000b78 	.word	0x20000b78
 8001258:	20000b64 	.word	0x20000b64
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fb33 	bl	80018d2 <Make_CAN_ID>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0b42      	lsrs	r2, r0, #13
 8001276:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800127a:	0b4b      	lsrs	r3, r1, #13
 800127c:	4613      	mov	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001280:	231f      	movs	r3, #31
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fb23 	bl	80018d2 <Make_CAN_ID>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0b42      	lsrs	r2, r0, #13
 8001296:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800129a:	0b4b      	lsrs	r3, r1, #13
 800129c:	4613      	mov	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fb13 	bl	80018d2 <Make_CAN_ID>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012b8:	4013      	ands	r3, r2
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80012c0:	231f      	movs	r3, #31
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fb03 	bl	80018d2 <Make_CAN_ID>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <CAN_SystemInit+0x544>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 ff4c 	bl	8004188 <HAL_CAN_ConfigFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80012f6:	f002 f85e 	bl	80033b6 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 80012fa:	2306      	movs	r3, #6
 80012fc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2006      	movs	r0, #6
 8001306:	f000 fae4 	bl	80018d2 <Make_CAN_ID>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0b42      	lsrs	r2, r0, #13
 8001314:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001318:	0b4b      	lsrs	r3, r1, #13
 800131a:	4613      	mov	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 800131e:	231f      	movs	r3, #31
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fad4 	bl	80018d2 <Make_CAN_ID>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	0b42      	lsrs	r2, r0, #13
 8001334:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001338:	0b4b      	lsrs	r3, r1, #13
 800133a:	4613      	mov	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f000 fac4 	bl	80018d2 <Make_CAN_ID>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4613      	mov	r3, r2
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001356:	4013      	ands	r3, r2
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800135e:	231f      	movs	r3, #31
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fab4 	bl	80018d2 <Make_CAN_ID>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001376:	4013      	ands	r3, r2
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <CAN_SystemInit+0x544>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fefd 	bl	8004188 <HAL_CAN_ConfigFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001394:	f002 f80f 	bl	80033b6 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <CAN_SystemInit+0x544>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 ffdf 	bl	8004360 <HAL_CAN_Start>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <CAN_SystemInit+0x548>)
 80013aa:	f01f f971 	bl	8020690 <puts>
		Error_Handler();
 80013ae:	f002 f802 	bl	80033b6 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <CAN_SystemInit+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fa2c 	bl	8004816 <HAL_CAN_ActivateNotification>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <CAN_SystemInit+0x54c>)
 80013c6:	f01f f8fd 	bl	80205c4 <iprintf>
		Error_Handler();
 80013ca:	f001 fff4 	bl	80033b6 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <CAN_SystemInit+0x544>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 fa1e 	bl	8004816 <HAL_CAN_ActivateNotification>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <CAN_SystemInit+0x54c>)
 80013e2:	f01f f8ef 	bl	80205c4 <iprintf>
		Error_Handler();
 80013e6:	f001 ffe6 	bl	80033b6 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000b64 	.word	0x20000b64
 80013f8:	08023f50 	.word	0x08023f50
 80013fc:	08023f60 	.word	0x08023f60

08001400 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8001408:	e006      	b.n	8001418 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <CAN_WaitConnect+0x13c>)
 800140c:	f01f f8da 	bl	80205c4 <iprintf>
		HAL_Delay(500);
 8001410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001414:	f002 fd98 	bl	8003f48 <HAL_Delay>
	while (all_node_detected == 0){
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <CAN_WaitConnect+0x140>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00a      	b.n	800143e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <CAN_WaitConnect+0x144>)
 800142c:	4413      	add	r3, r2
 800142e:	79db      	ldrb	r3, [r3, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <CAN_WaitConnect+0x148>)
 8001434:	f01f f8c6 	bl	80205c4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ef      	bcc.n	8001428 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e00a      	b.n	8001464 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <CAN_WaitConnect+0x144>)
 8001452:	4413      	add	r3, r2
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <CAN_WaitConnect+0x14c>)
 800145a:	f01f f8b3 	bl	80205c4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	7bba      	ldrb	r2, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ef      	bcc.n	800144e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	e00a      	b.n	800148a <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <CAN_WaitConnect+0x144>)
 8001478:	4413      	add	r3, r2
 800147a:	7d5b      	ldrb	r3, [r3, #21]
 800147c:	4619      	mov	r1, r3
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <CAN_WaitConnect+0x150>)
 8001480:	f01f f8a0 	bl	80205c4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	3301      	adds	r3, #1
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	7b7a      	ldrb	r2, [r7, #13]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ef      	bcc.n	8001474 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e00b      	b.n	80014b2 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <CAN_WaitConnect+0x144>)
 800149e:	4413      	add	r3, r2
 80014a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014a4:	4619      	mov	r1, r3
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <CAN_WaitConnect+0x154>)
 80014a8:	f01f f88c 	bl	80205c4 <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	7b3a      	ldrb	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ee      	bcc.n	800149a <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	e00a      	b.n	80014d8 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <CAN_WaitConnect+0x144>)
 80014c6:	4413      	add	r3, r2
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <CAN_WaitConnect+0x158>)
 80014ce:	f01f f879 	bl	80205c4 <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3301      	adds	r3, #1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3ef      	bcc.n	80014c2 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	72bb      	strb	r3, [r7, #10]
 80014e6:	e00b      	b.n	8001500 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <CAN_WaitConnect+0x144>)
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <CAN_WaitConnect+0x15c>)
 80014f6:	f01f f865 	bl	80205c4 <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	3301      	adds	r3, #1
 80014fe:	72bb      	strb	r3, [r7, #10]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ee      	bcc.n	80014e8 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	e00b      	b.n	8001528 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <CAN_WaitConnect+0x144>)
 8001514:	4413      	add	r3, r2
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <CAN_WaitConnect+0x160>)
 800151e:	f01f f851 	bl	80205c4 <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	3301      	adds	r3, #1
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	7a7a      	ldrb	r2, [r7, #9]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ee      	bcc.n	8001510 <CAN_WaitConnect+0x110>
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08023f84 	.word	0x08023f84
 8001540:	20000b68 	.word	0x20000b68
 8001544:	20000b78 	.word	0x20000b78
 8001548:	08023fa4 	.word	0x08023fa4
 800154c:	08023fb4 	.word	0x08023fb4
 8001550:	08023fc4 	.word	0x08023fc4
 8001554:	08023fd4 	.word	0x08023fd4
 8001558:	08023fe4 	.word	0x08023fe4
 800155c:	08023ff4 	.word	0x08023ff4
 8001560:	08024000 	.word	0x08024000

08001564 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f97f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fc3e 	bl	8000e10 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2106      	movs	r1, #6
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f96b 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fc2a 	bl	8000e10 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f957 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fc16 	bl	8000e10 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f0:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001600:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800160e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2108      	movs	r1, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f933 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2206      	movs	r2, #6
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fbf2 	bl	8000e10 <SendBytes>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795b      	ldrb	r3, [r3, #5]
 8001646:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f911 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fbd0 	bl	8000e10 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8fd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fbbc 	bl	8000e10 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2104      	movs	r1, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f8e9 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fba8 	bl	8000e10 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f002 fc41 	bl	8003f48 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <MCMD_ChangeControl>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2109      	movs	r1, #9
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8cd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fb8c 	bl	8000e10 <SendBytes>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	210a      	movs	r1, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8b7 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fb76 	bl	8000e10 <SendBytes>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	210c      	movs	r1, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f89f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fb5f 	bl	8000e10 <SendBytes>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <ServoDriver_Init>:
		return ans;
	}
}

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001770:	2101      	movs	r1, #1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f884 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2208      	movs	r2, #8
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fb43 	bl	8000e10 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 8001796:	2102      	movs	r1, #2
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f871 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2208      	movs	r2, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff fb30 	bl	8000e10 <SendBytes>
	fdata[0] = param->angle_offset;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 80017bc:	2103      	movs	r1, #3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f85e 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2208      	movs	r2, #8
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fb1d 	bl	8000e10 <SendBytes>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 80017ea:	2104      	movs	r1, #4
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f847 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	463b      	mov	r3, r7
 80017fa:	2204      	movs	r2, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fb07 	bl	8000e10 <SendBytes>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <ServoDriver_SendValue+0x2e>
		Error_Handler();
 8001808:	f001 fdd5 	bl	80033b6 <Error_Handler>
	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001820:	2101      	movs	r1, #1
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f82c 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	1cfb      	adds	r3, r7, #3
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff faec 	bl	8000e10 <SendBytes>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <AirCylinder_Init+0x2e>
		Error_Handler();
 800183e:	f001 fdba 	bl	80033b6 <Error_Handler>
	}
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001856:	2102      	movs	r1, #2
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f811 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff fad1 	bl	8000e10 <SendBytes>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001874:	f001 fd9f 	bl	80033b6 <Error_Handler>
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001880:	b4b0      	push	{r4, r5, r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	02db      	lsls	r3, r3, #11
 800189a:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	4313      	orrs	r3, r2
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	461c      	mov	r4, r3
 80018c0:	4615      	mov	r5, r2
 80018c2:	4622      	mov	r2, r4
 80018c4:	462b      	mov	r3, r5
}
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bcb0      	pop	{r4, r5, r7}
 80018d0:	4770      	bx	lr

080018d2 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 80018d2:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	02db      	lsls	r3, r3, #11
 80018f6:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001902:	431a      	orrs	r2, r3
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	015b      	lsls	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 800190c:	793b      	ldrb	r3, [r7, #4]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	17da      	asrs	r2, r3, #31
 8001916:	4698      	mov	r8, r3
 8001918:	4691      	mov	r9, r2
 800191a:	4642      	mov	r2, r8
 800191c:	464b      	mov	r3, r9
}
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 800192a:	4770      	bx	lr

0800192c <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	0942      	lsrs	r2, r0, #5
 8001944:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001948:	094b      	lsrs	r3, r1, #5
 800194a:	b2d3      	uxtb	r3, r2
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b2db      	uxtb	r3, r3
 8001952:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	0a02      	lsrs	r2, r0, #8
 8001962:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001966:	0a0b      	lsrs	r3, r1, #8
 8001968:	b2d3      	uxtb	r3, r2
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	b2db      	uxtb	r3, r3
 8001970:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	0ac2      	lsrs	r2, r0, #11
 8001980:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001984:	0acb      	lsrs	r3, r1, #11
 8001986:	b2d3      	uxtb	r3, r2
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	b2db      	uxtb	r3, r3
 800198e:	723b      	strb	r3, [r7, #8]
    return ans;
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	f107 0208 	add.w	r2, r7, #8
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4611      	mov	r1, r2
 800199c:	8019      	strh	r1, [r3, #0]
 800199e:	3302      	adds	r3, #2
 80019a0:	0c12      	lsrs	r2, r2, #16
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	7b3a      	ldrb	r2, [r7, #12]
 80019a8:	f362 0307 	bfi	r3, r2, #0, #8
 80019ac:	7b7a      	ldrb	r2, [r7, #13]
 80019ae:	f362 230f 	bfi	r3, r2, #8, #8
 80019b2:	7bba      	ldrb	r2, [r7, #14]
 80019b4:	f362 4317 	bfi	r3, r2, #16, #8
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	e9c7 0100 	strd	r0, r1, [r7]
 80019ce:	783b      	ldrb	r3, [r7, #0]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <MX_CAN1_Init+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a02:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001a06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a34:	f002 faac 	bl	8003f90 <HAL_CAN_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a3e:	f001 fcba 	bl	80033b6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20002e44 	.word	0x20002e44
 8001a4c:	40006400 	.word	0x40006400

08001a50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_CAN_MspInit+0xac>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d13f      	bne.n	8001af2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4811      	ldr	r0, [pc, #68]	; (8001b04 <HAL_CAN_MspInit+0xb4>)
 8001abe:	f003 fdbb 	bl	8005638 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	2013      	movs	r0, #19
 8001ac8:	f003 f976 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001acc:	2013      	movs	r0, #19
 8001ace:	f003 f98f 	bl	8004df0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	2014      	movs	r0, #20
 8001ad8:	f003 f96e 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001adc:	2014      	movs	r0, #20
 8001ade:	f003 f987 	bl	8004df0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2015      	movs	r0, #21
 8001ae8:	f003 f966 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001aec:	2015      	movs	r0, #21
 8001aee:	f003 f97f 	bl	8004df0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40006400 	.word	0x40006400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b14:	f00d f958 	bl	800edc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b18:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001b20:	f000 f98a 	bl	8001e38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 8092 	bne.w	8001c56 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01f      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001b38:	2208      	movs	r2, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f023 0307 	bic.w	r3, r3, #7
 8001b50:	3308      	adds	r3, #8
 8001b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00c      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b62:	b672      	cpsid	i
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	b662      	cpsie	i
 8001b72:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b74:	bf00      	nop
 8001b76:	e7fe      	b.n	8001b76 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06b      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d866      	bhi.n	8001c56 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b92:	e004      	b.n	8001b9e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d903      	bls.n	8001bb0 <pvPortMallocMicroROS+0xa8>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f1      	bne.n	8001b94 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d04d      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4413      	add	r3, r2
 8001bc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d921      	bls.n	8001c20 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	b672      	cpsid	i
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	b662      	cpsie	i
 8001c02:	613b      	str	r3, [r7, #16]
}
 8001c04:	bf00      	nop
 8001c06:	e7fe      	b.n	8001c06 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c1a:	69b8      	ldr	r0, [r7, #24]
 8001c1c:	f000 f96e 	bl	8001efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d203      	bcs.n	8001c42 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c56:	f00d f8c5 	bl	800ede4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	b672      	cpsid	i
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	b662      	cpsie	i
 8001c78:	60fb      	str	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	e7fe      	b.n	8001c7c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20006a74 	.word	0x20006a74
 8001c8c:	20006a80 	.word	0x20006a80
 8001c90:	20006a78 	.word	0x20006a78
 8001c94:	20006a6c 	.word	0x20006a6c
 8001c98:	20006a7c 	.word	0x20006a7c

08001c9c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	b672      	cpsid	i
 8001cd0:	f383 8811 	msr	BASEPRI, r3
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	f3bf 8f4f 	dsb	sy
 8001cdc:	b662      	cpsie	i
 8001cde:	60fb      	str	r3, [r7, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	e7fe      	b.n	8001ce2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	b672      	cpsid	i
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	b662      	cpsie	i
 8001d00:	60bb      	str	r3, [r7, #8]
}
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d019      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d115      	bne.n	8001d48 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d2c:	f00d f84c 	bl	800edc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d3e:	6938      	ldr	r0, [r7, #16]
 8001d40:	f000 f8dc 	bl	8001efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d44:	f00d f84e 	bl	800ede4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20006a80 	.word	0x20006a80
 8001d54:	20006a78 	.word	0x20006a78

08001d58 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d64:	2308      	movs	r3, #8
 8001d66:	425b      	negs	r3, r3
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <getBlockSize+0x38>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

	return count;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20006a80 	.word	0x20006a80

08001d94 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d9e:	f00d f813 	bl	800edc8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff feb0 	bl	8001b08 <pvPortMallocMicroROS>
 8001da8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d014      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffce 	bl	8001d58 <getBlockSize>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d201      	bcs.n	8001dd0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	f01e ff6e 	bl	8020cb6 <memcpy>

		vPortFreeMicroROS(pv);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff5e 	bl	8001c9c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001de0:	f00d f800 	bl	800ede4 <xTaskResumeAll>

	return newmem;
 8001de4:	68bb      	ldr	r3, [r7, #8]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001df8:	f00c ffe6 	bl	800edc8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff fe7e 	bl	8001b08 <pvPortMallocMicroROS>
 8001e0c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001e12:	e004      	b.n	8001e1e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	613a      	str	r2, [r7, #16]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	617a      	str	r2, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f5      	bne.n	8001e14 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001e28:	f00c ffdc 	bl	800ede4 <xTaskResumeAll>
  	return mem;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001e42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <prvHeapInit+0xac>)
 8001e46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3307      	adds	r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0307 	bic.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <prvHeapInit+0xac>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e84:	2208      	movs	r2, #8
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <prvHeapInit+0xb4>)
 8001e98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <prvHeapInit+0xb4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <prvHeapInit+0xb4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <prvHeapInit+0xb4>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <prvHeapInit+0xb8>)
 8001ec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <prvHeapInit+0xbc>)
 8001ece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <prvHeapInit+0xc0>)
 8001ed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20002e6c 	.word	0x20002e6c
 8001ee8:	20006a6c 	.word	0x20006a6c
 8001eec:	20006a74 	.word	0x20006a74
 8001ef0:	20006a7c 	.word	0x20006a7c
 8001ef4:	20006a78 	.word	0x20006a78
 8001ef8:	20006a80 	.word	0x20006a80

08001efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <prvInsertBlockIntoFreeList+0xac>)
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e002      	b.n	8001f10 <prvInsertBlockIntoFreeList+0x14>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8f7      	bhi.n	8001f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d108      	bne.n	8001f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	441a      	add	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d118      	bne.n	8001f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d00d      	beq.n	8001f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e008      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e003      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d002      	beq.n	8001f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20006a6c 	.word	0x20006a6c
 8001fac:	20006a74 	.word	0x20006a74

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	200c      	movs	r0, #12
 8001fd4:	f002 fef0 	bl	8004db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fd8:	200c      	movs	r0, #12
 8001fda:	f002 ff09 	bl	8004df0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	200e      	movs	r0, #14
 8001fe4:	f002 fee8 	bl	8004db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001fe8:	200e      	movs	r0, #14
 8001fea:	f002 ff01 	bl	8004df0 <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800200a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <cubemx_transport_open+0x28>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f006 fe88 	bl	8008d28 <HAL_UART_Receive_DMA>
    return true;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20006a84 	.word	0x20006a84

08002028 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002036:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f006 feb9 	bl	8008db0 <HAL_UART_DMAStop>
    return true;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800205c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002062:	2b20      	cmp	r3, #32
 8002064:	d11a      	bne.n	800209c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f006 fdde 	bl	8008c30 <HAL_UART_Transmit_DMA>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002078:	e002      	b.n	8002080 <cubemx_transport_write+0x38>
            osDelay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f00b fe3a 	bl	800dcf4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <cubemx_transport_write+0x46>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800208a:	2b20      	cmp	r3, #32
 800208c:	d1f5      	bne.n	800207a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <cubemx_transport_write+0x50>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	e002      	b.n	800209e <cubemx_transport_write+0x56>
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800209c:	2300      	movs	r3, #0
    }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020bc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c2:	b672      	cpsid	i
}
 80020c4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <cubemx_transport_read+0x9c>)
 80020d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
}
 80020d8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f00b fe07 	bl	800dcf4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <cubemx_transport_read+0xa0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <cubemx_transport_read+0x9c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <cubemx_transport_read+0x52>
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbe3      	blt.n	80020c2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80020fe:	e011      	b.n	8002124 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <cubemx_transport_read+0xa0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	440b      	add	r3, r1
 800210a:	4910      	ldr	r1, [pc, #64]	; (800214c <cubemx_transport_read+0xa4>)
 800210c:	5c8a      	ldrb	r2, [r1, r2]
 800210e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <cubemx_transport_read+0xa0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <cubemx_transport_read+0xa0>)
 800211c:	6013      	str	r3, [r2, #0]
        wrote++;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <cubemx_transport_read+0xa0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <cubemx_transport_read+0x9c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d003      	beq.n	8002138 <cubemx_transport_read+0x90>
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3e3      	bcc.n	8002100 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002138:	69bb      	ldr	r3, [r7, #24]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20007288 	.word	0x20007288
 8002148:	20007284 	.word	0x20007284
 800214c:	20006a84 	.word	0x20006a84

08002150 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002158:	f7fe fd4e 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800216c:	f7fe fd4a 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002180:	f7fe fd3a 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002194:	f7fe fd36 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80021a8:	f7fe fd26 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80021bc:	f7fe fd22 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fd1c 	bl	8000c10 <WhenCANRxFifo0MsgPending>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20007334 	.word	0x20007334

080021e4 <canSetting>:
//can通信の設定
void canSetting(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 80021e8:	480f      	ldr	r0, [pc, #60]	; (8002228 <canSetting+0x44>)
 80021ea:	f01e f9eb 	bl	80205c4 <iprintf>
	osDelay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f00b fd80 	bl	800dcf4 <osDelay>

	CAN_SystemInit(&hcan1);
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <canSetting+0x48>)
 80021f6:	f7fe fe5b 	bl	8000eb0 <CAN_SystemInit>

//	num_of_devices.mcmd3 = 0;
	num_of_devices.mcmd3 = 2;
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <canSetting+0x4c>)
 80021fc:	2202      	movs	r2, #2
 80021fe:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <canSetting+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 1;
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <canSetting+0x4c>)
 8002208:	2201      	movs	r2, #1
 800220a:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 2;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <canSetting+0x4c>)
 800220e:	2202      	movs	r2, #2
 8002210:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <canSetting+0x50>)
 8002214:	f01e f9d6 	bl	80205c4 <iprintf>
	osDelay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f00b fd6b 	bl	800dcf4 <osDelay>
	CAN_WaitConnect(&num_of_devices);
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <canSetting+0x4c>)
 8002220:	f7ff f8ee 	bl	8001400 <CAN_WaitConnect>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08024060 	.word	0x08024060
 800222c:	20002e44 	.word	0x20002e44
 8002230:	20007334 	.word	0x20007334
 8002234:	08024088 	.word	0x08024088

08002238 <mcmdMoter1Setting>:

//モータ1のmcmd設定
void mcmdMoter1Setting(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	    mcmd4M1_struct.device.node_type = NODE_MCMD3;
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800223e:	2203      	movs	r2, #3
 8002240:	701a      	strb	r2, [r3, #0]
	    mcmd4M1_struct.device.node_id = 0;
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002244:	2200      	movs	r2, #0
 8002246:	705a      	strb	r2, [r3, #1]
	    mcmd4M1_struct.device.device_num = 0;
 8002248:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800224a:	2200      	movs	r2, #0
 800224c:	709a      	strb	r2, [r3, #2]

	    mcmd4M1_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002250:	2202      	movs	r2, #2
 8002252:	751a      	strb	r2, [r3, #20]
	    mcmd4M1_struct.ctrl_param.PID_param.kp = 0.055f;
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002256:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002258:	619a      	str	r2, [r3, #24]
	    mcmd4M1_struct.ctrl_param.PID_param.ki = 0.015f;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <mcmdMoter1Setting+0xb4>)
 800225e:	61da      	str	r2, [r3, #28]
	    mcmd4M1_struct.ctrl_param.PID_param.kd = 0.02f;
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <mcmdMoter1Setting+0xb8>)
 8002264:	621a      	str	r2, [r3, #32]
	    mcmd4M1_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M1_struct.ctrl_param.accel_limit_size = 2.0f;
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002274:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M1_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M1_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M1_struct.enc_dir = MCMD_DIR_FW;
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002288:	2200      	movs	r2, #0
 800228a:	711a      	strb	r2, [r3, #4]
	    mcmd4M1_struct.rot_dir = MCMD_DIR_FW;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	715a      	strb	r2, [r3, #5]
	    mcmd4M1_struct.quant_per_unit = 1.0/103500.0f;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <mcmdMoter1Setting+0xac>)
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <mcmdMoter1Setting+0xbc>)
 8002296:	611a      	str	r2, [r3, #16]

	    mcmd4M1_struct.limit_sw_type = LIMIT_SW_NO;
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <mcmdMoter1Setting+0xac>)
 800229a:	2201      	movs	r2, #1
 800229c:	719a      	strb	r2, [r3, #6]
	    mcmd4M1_struct.calib = CALIBRATION_DISABLE;
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	71da      	strb	r2, [r3, #7]
	    mcmd4M1_struct.calib_duty = -0.2f;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <mcmdMoter1Setting+0xc0>)
 80022a8:	609a      	str	r2, [r3, #8]
	    mcmd4M1_struct.offset = 0.0f;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
	    mcmd4M1_struct.fb_type = MCMD_FB_POS;
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M1_struct);
 80022b8:	480a      	ldr	r0, [pc, #40]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022ba:	f7ff f9bb 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80022be:	200a      	movs	r0, #10
 80022c0:	f00b fd18 	bl	800dcf4 <osDelay>
		 MCMD_Calib(&mcmd4M1_struct);
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022c6:	f7ff fa05 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80022ca:	2032      	movs	r0, #50	; 0x32
 80022cc:	f00b fd12 	bl	800dcf4 <osDelay>
		 MCMD_SetTarget(&mcmd4M1_struct, 0.0f);
 80022d0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80022fc <mcmdMoter1Setting+0xc4>
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022d6:	f7ff fa29 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M1_struct);
 80022da:	4802      	ldr	r0, [pc, #8]	; (80022e4 <mcmdMoter1Setting+0xac>)
 80022dc:	f7ff fa10 	bl	8001700 <MCMD_Control_Enable>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000733c 	.word	0x2000733c
 80022e8:	3d6147ae 	.word	0x3d6147ae
 80022ec:	3c75c28f 	.word	0x3c75c28f
 80022f0:	3ca3d70a 	.word	0x3ca3d70a
 80022f4:	37221945 	.word	0x37221945
 80022f8:	be4ccccd 	.word	0xbe4ccccd
 80022fc:	00000000 	.word	0x00000000

08002300 <mcmdMoter2Setting>:

//モータ2のmcmd設定
void mcmdMoter2Setting(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	    mcmd4M2_struct.device.node_type = NODE_MCMD3;
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002306:	2203      	movs	r2, #3
 8002308:	701a      	strb	r2, [r3, #0]
	    mcmd4M2_struct.device.node_id = 0;
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <mcmdMoter2Setting+0xac>)
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
	    mcmd4M2_struct.device.device_num = 1;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002312:	2201      	movs	r2, #1
 8002314:	709a      	strb	r2, [r3, #2]

	    mcmd4M2_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 8002316:	4b25      	ldr	r3, [pc, #148]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002318:	2202      	movs	r2, #2
 800231a:	751a      	strb	r2, [r3, #20]
	    mcmd4M2_struct.ctrl_param.PID_param.kp = 0.055f;
 800231c:	4b23      	ldr	r3, [pc, #140]	; (80023ac <mcmdMoter2Setting+0xac>)
 800231e:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002320:	619a      	str	r2, [r3, #24]
	    mcmd4M2_struct.ctrl_param.PID_param.ki = 0.015f;
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002324:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <mcmdMoter2Setting+0xb4>)
 8002326:	61da      	str	r2, [r3, #28]
	    mcmd4M2_struct.ctrl_param.PID_param.kd = 0.02f;
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <mcmdMoter2Setting+0xac>)
 800232a:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <mcmdMoter2Setting+0xb8>)
 800232c:	621a      	str	r2, [r3, #32]
	    mcmd4M2_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M2_struct.ctrl_param.accel_limit_size = 2.0f;
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M2_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800233e:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M2_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M2_struct.enc_dir = MCMD_DIR_FW;
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002350:	2200      	movs	r2, #0
 8002352:	711a      	strb	r2, [r3, #4]
	    mcmd4M2_struct.rot_dir = MCMD_DIR_FW;
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002356:	2200      	movs	r2, #0
 8002358:	715a      	strb	r2, [r3, #5]
	    mcmd4M2_struct.quant_per_unit = 1.0/103500.0f;
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <mcmdMoter2Setting+0xac>)
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <mcmdMoter2Setting+0xbc>)
 800235e:	611a      	str	r2, [r3, #16]

	    mcmd4M2_struct.limit_sw_type = LIMIT_SW_NO;
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002362:	2201      	movs	r2, #1
 8002364:	719a      	strb	r2, [r3, #6]
	    mcmd4M2_struct.calib = CALIBRATION_DISABLE;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002368:	2201      	movs	r2, #1
 800236a:	71da      	strb	r2, [r3, #7]
	    mcmd4M2_struct.calib_duty = -0.2f;
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <mcmdMoter2Setting+0xac>)
 800236e:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <mcmdMoter2Setting+0xc0>)
 8002370:	609a      	str	r2, [r3, #8]
	    mcmd4M2_struct.offset = 0.0f;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	60da      	str	r2, [r3, #12]
	    mcmd4M2_struct.fb_type = MCMD_FB_POS;
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <mcmdMoter2Setting+0xac>)
 800237c:	2200      	movs	r2, #0
 800237e:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M2_struct);
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <mcmdMoter2Setting+0xac>)
 8002382:	f7ff f957 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002386:	200a      	movs	r0, #10
 8002388:	f00b fcb4 	bl	800dcf4 <osDelay>
		 MCMD_Calib(&mcmd4M2_struct);
 800238c:	4807      	ldr	r0, [pc, #28]	; (80023ac <mcmdMoter2Setting+0xac>)
 800238e:	f7ff f9a1 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002392:	2032      	movs	r0, #50	; 0x32
 8002394:	f00b fcae 	bl	800dcf4 <osDelay>
		 MCMD_SetTarget(&mcmd4M2_struct, 0.00f);
 8002398:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80023c4 <mcmdMoter2Setting+0xc4>
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <mcmdMoter2Setting+0xac>)
 800239e:	f7ff f9c5 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M2_struct);
 80023a2:	4802      	ldr	r0, [pc, #8]	; (80023ac <mcmdMoter2Setting+0xac>)
 80023a4:	f7ff f9ac 	bl	8001700 <MCMD_Control_Enable>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	2000737c 	.word	0x2000737c
 80023b0:	3d6147ae 	.word	0x3d6147ae
 80023b4:	3c75c28f 	.word	0x3c75c28f
 80023b8:	3ca3d70a 	.word	0x3ca3d70a
 80023bc:	37221945 	.word	0x37221945
 80023c0:	be4ccccd 	.word	0xbe4ccccd
 80023c4:	00000000 	.word	0x00000000

080023c8 <mcmdMoter3Setting>:

void mcmdMoter3Setting(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	    mcmd4M3_struct.device.node_type = NODE_MCMD3;
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023ce:	2203      	movs	r2, #3
 80023d0:	701a      	strb	r2, [r3, #0]
	    mcmd4M3_struct.device.node_id = 2;
 80023d2:	4b28      	ldr	r3, [pc, #160]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023d4:	2202      	movs	r2, #2
 80023d6:	705a      	strb	r2, [r3, #1]
	    mcmd4M3_struct.device.device_num = 0;
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023da:	2200      	movs	r2, #0
 80023dc:	709a      	strb	r2, [r3, #2]

	    mcmd4M3_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 80023de:	4b25      	ldr	r3, [pc, #148]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023e0:	2202      	movs	r2, #2
 80023e2:	751a      	strb	r2, [r3, #20]
	    mcmd4M3_struct.ctrl_param.PID_param.kp = 0.055f;
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023e8:	619a      	str	r2, [r3, #24]
	    mcmd4M3_struct.ctrl_param.PID_param.ki = 0.015f;
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <mcmdMoter3Setting+0xb4>)
 80023ee:	61da      	str	r2, [r3, #28]
	    mcmd4M3_struct.ctrl_param.PID_param.kd = 0.02f;
 80023f0:	4b20      	ldr	r3, [pc, #128]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023f2:	4a23      	ldr	r2, [pc, #140]	; (8002480 <mcmdMoter3Setting+0xb8>)
 80023f4:	621a      	str	r2, [r3, #32]
	    mcmd4M3_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <mcmdMoter3Setting+0xac>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M3_struct.ctrl_param.accel_limit_size = 2.0f;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M3_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M3_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M3_struct.enc_dir = MCMD_DIR_FW;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	711a      	strb	r2, [r3, #4]
	    mcmd4M3_struct.rot_dir = MCMD_DIR_FW;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <mcmdMoter3Setting+0xac>)
 800241e:	2200      	movs	r2, #0
 8002420:	715a      	strb	r2, [r3, #5]
	    mcmd4M3_struct.quant_per_unit = 1.0/103500.0f;
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <mcmdMoter3Setting+0xbc>)
 8002426:	611a      	str	r2, [r3, #16]

	    mcmd4M3_struct.limit_sw_type = LIMIT_SW_NO;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <mcmdMoter3Setting+0xac>)
 800242a:	2201      	movs	r2, #1
 800242c:	719a      	strb	r2, [r3, #6]
	    mcmd4M3_struct.calib = CALIBRATION_DISABLE;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002430:	2201      	movs	r2, #1
 8002432:	71da      	strb	r2, [r3, #7]
	    mcmd4M3_struct.calib_duty = -0.2f;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <mcmdMoter3Setting+0xc0>)
 8002438:	609a      	str	r2, [r3, #8]
	    mcmd4M3_struct.offset = 0.0f;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <mcmdMoter3Setting+0xac>)
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
	    mcmd4M3_struct.fb_type = MCMD_FB_POS;
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002444:	2200      	movs	r2, #0
 8002446:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M3_struct);
 8002448:	480a      	ldr	r0, [pc, #40]	; (8002474 <mcmdMoter3Setting+0xac>)
 800244a:	f7ff f8f3 	bl	8001634 <MCMD_init>
		 osDelay(10);
 800244e:	200a      	movs	r0, #10
 8002450:	f00b fc50 	bl	800dcf4 <osDelay>
		 MCMD_Calib(&mcmd4M3_struct);
 8002454:	4807      	ldr	r0, [pc, #28]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002456:	f7ff f93d 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800245a:	2032      	movs	r0, #50	; 0x32
 800245c:	f00b fc4a 	bl	800dcf4 <osDelay>
		 MCMD_SetTarget(&mcmd4M3_struct, 0.00f);
 8002460:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800248c <mcmdMoter3Setting+0xc4>
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <mcmdMoter3Setting+0xac>)
 8002466:	f7ff f961 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M3_struct);
 800246a:	4802      	ldr	r0, [pc, #8]	; (8002474 <mcmdMoter3Setting+0xac>)
 800246c:	f7ff f948 	bl	8001700 <MCMD_Control_Enable>
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200073bc 	.word	0x200073bc
 8002478:	3d6147ae 	.word	0x3d6147ae
 800247c:	3c75c28f 	.word	0x3c75c28f
 8002480:	3ca3d70a 	.word	0x3ca3d70a
 8002484:	37221945 	.word	0x37221945
 8002488:	be4ccccd 	.word	0xbe4ccccd
 800248c:	00000000 	.word	0x00000000

08002490 <mcmdMoter4Setting>:

void mcmdMoter4Setting(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	    mcmd4M4_struct.device.node_type = NODE_MCMD3;
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <mcmdMoter4Setting+0xac>)
 8002496:	2203      	movs	r2, #3
 8002498:	701a      	strb	r2, [r3, #0]
	    mcmd4M4_struct.device.node_id =2;
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <mcmdMoter4Setting+0xac>)
 800249c:	2202      	movs	r2, #2
 800249e:	705a      	strb	r2, [r3, #1]
	    mcmd4M4_struct.device.device_num = 1;
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <mcmdMoter4Setting+0xac>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	709a      	strb	r2, [r3, #2]

	    mcmd4M4_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <mcmdMoter4Setting+0xac>)
 80024a8:	2202      	movs	r2, #2
 80024aa:	751a      	strb	r2, [r3, #20]
	    mcmd4M4_struct.ctrl_param.PID_param.kp = 0.055f;
 80024ac:	4b23      	ldr	r3, [pc, #140]	; (800253c <mcmdMoter4Setting+0xac>)
 80024ae:	4a24      	ldr	r2, [pc, #144]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024b0:	619a      	str	r2, [r3, #24]
	    mcmd4M4_struct.ctrl_param.PID_param.ki = 0.015f;
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <mcmdMoter4Setting+0xac>)
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <mcmdMoter4Setting+0xb4>)
 80024b6:	61da      	str	r2, [r3, #28]
	    mcmd4M4_struct.ctrl_param.PID_param.kd = 0.02f;
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <mcmdMoter4Setting+0xac>)
 80024ba:	4a23      	ldr	r2, [pc, #140]	; (8002548 <mcmdMoter4Setting+0xb8>)
 80024bc:	621a      	str	r2, [r3, #32]
	    mcmd4M4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <mcmdMoter4Setting+0xac>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M4_struct.ctrl_param.accel_limit_size = 2.0f;
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <mcmdMoter4Setting+0xac>)
 80024c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <mcmdMoter4Setting+0xac>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <mcmdMoter4Setting+0xac>)
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M4_struct.enc_dir = MCMD_DIR_FW;
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <mcmdMoter4Setting+0xac>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	711a      	strb	r2, [r3, #4]
	    mcmd4M4_struct.rot_dir = MCMD_DIR_FW;
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <mcmdMoter4Setting+0xac>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	715a      	strb	r2, [r3, #5]
	    mcmd4M4_struct.quant_per_unit = 1.0/26850.0f;
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <mcmdMoter4Setting+0xac>)
 80024ec:	4a17      	ldr	r2, [pc, #92]	; (800254c <mcmdMoter4Setting+0xbc>)
 80024ee:	611a      	str	r2, [r3, #16]

	    mcmd4M4_struct.limit_sw_type = LIMIT_SW_NO;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <mcmdMoter4Setting+0xac>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	719a      	strb	r2, [r3, #6]
	    mcmd4M4_struct.calib = CALIBRATION_DISABLE;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <mcmdMoter4Setting+0xac>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	71da      	strb	r2, [r3, #7]
	    mcmd4M4_struct.calib_duty = -0.2f;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <mcmdMoter4Setting+0xac>)
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <mcmdMoter4Setting+0xc0>)
 8002500:	609a      	str	r2, [r3, #8]
	    mcmd4M4_struct.offset = 0.0f;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <mcmdMoter4Setting+0xac>)
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
	    mcmd4M4_struct.fb_type = MCMD_FB_POS;
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <mcmdMoter4Setting+0xac>)
 800250c:	2200      	movs	r2, #0
 800250e:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M4_struct);
 8002510:	480a      	ldr	r0, [pc, #40]	; (800253c <mcmdMoter4Setting+0xac>)
 8002512:	f7ff f88f 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002516:	200a      	movs	r0, #10
 8002518:	f00b fbec 	bl	800dcf4 <osDelay>
		 MCMD_Calib(&mcmd4M4_struct);
 800251c:	4807      	ldr	r0, [pc, #28]	; (800253c <mcmdMoter4Setting+0xac>)
 800251e:	f7ff f8d9 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002522:	2032      	movs	r0, #50	; 0x32
 8002524:	f00b fbe6 	bl	800dcf4 <osDelay>
		 MCMD_SetTarget(&mcmd4M4_struct, 0.00f);
 8002528:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002554 <mcmdMoter4Setting+0xc4>
 800252c:	4803      	ldr	r0, [pc, #12]	; (800253c <mcmdMoter4Setting+0xac>)
 800252e:	f7ff f8fd 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M4_struct);
 8002532:	4802      	ldr	r0, [pc, #8]	; (800253c <mcmdMoter4Setting+0xac>)
 8002534:	f7ff f8e4 	bl	8001700 <MCMD_Control_Enable>
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200073fc 	.word	0x200073fc
 8002540:	3d6147ae 	.word	0x3d6147ae
 8002544:	3c75c28f 	.word	0x3c75c28f
 8002548:	3ca3d70a 	.word	0x3ca3d70a
 800254c:	381c3662 	.word	0x381c3662
 8002550:	be4ccccd 	.word	0xbe4ccccd
 8002554:	00000000 	.word	0x00000000

08002558 <servo1Setting>:
		 MCMD_SetTarget(&mcmd4Mt_struct, 0.00f);
		 MCMD_Control_Enable(&mcmd4Mt_struct);
}

//サーボ基盤設定
void servo1Setting(){
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	servo_device1.node_type = NODE_SERVO;
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <servo1Setting+0x44>)
 800255e:	2204      	movs	r2, #4
 8002560:	701a      	strb	r2, [r3, #0]
	servo_device1.node_id = 0;
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <servo1Setting+0x44>)
 8002564:	2200      	movs	r2, #0
 8002566:	705a      	strb	r2, [r3, #1]
	servo_device1.device_num = 0;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <servo1Setting+0x44>)
 800256a:	2200      	movs	r2, #0
 800256c:	709a      	strb	r2, [r3, #2]

	servo_param1.angle_range=270.0f;
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <servo1Setting+0x48>)
 8002570:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <servo1Setting+0x4c>)
 8002572:	60da      	str	r2, [r3, #12]
	servo_param1.angle_offset=0.0f;
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <servo1Setting+0x48>)
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
	servo_param1.pulse_width_max=2.4f;
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <servo1Setting+0x48>)
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <servo1Setting+0x50>)
 8002580:	605a      	str	r2, [r3, #4]
	servo_param1.pulse_width_min=0.5f;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <servo1Setting+0x48>)
 8002584:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002588:	601a      	str	r2, [r3, #0]
	servo_param1.pwm_frequency=50;
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <servo1Setting+0x48>)
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <servo1Setting+0x54>)
 800258e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002590:	2032      	movs	r0, #50	; 0x32
 8002592:	f00b fbaf 	bl	800dcf4 <osDelay>
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200074d0 	.word	0x200074d0
 80025a0:	200074bc 	.word	0x200074bc
 80025a4:	43870000 	.word	0x43870000
 80025a8:	4019999a 	.word	0x4019999a
 80025ac:	42480000 	.word	0x42480000

080025b0 <servo2Setting>:

void servo2Setting(){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	servo_device2.node_type = NODE_SERVO;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <servo2Setting+0x44>)
 80025b6:	2204      	movs	r2, #4
 80025b8:	701a      	strb	r2, [r3, #0]
	servo_device2.node_id = 0;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <servo2Setting+0x44>)
 80025bc:	2200      	movs	r2, #0
 80025be:	705a      	strb	r2, [r3, #1]
	servo_device2.device_num = 1;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <servo2Setting+0x44>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	709a      	strb	r2, [r3, #2]

	servo_param2.angle_range=270.0f;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <servo2Setting+0x48>)
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <servo2Setting+0x4c>)
 80025ca:	60da      	str	r2, [r3, #12]
	servo_param2.angle_offset=0.0f;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <servo2Setting+0x48>)
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
	servo_param2.pulse_width_max=2.4f;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <servo2Setting+0x48>)
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <servo2Setting+0x50>)
 80025d8:	605a      	str	r2, [r3, #4]
	servo_param2.pulse_width_min=0.5f;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <servo2Setting+0x48>)
 80025dc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80025e0:	601a      	str	r2, [r3, #0]
	servo_param2.pwm_frequency=50;
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <servo2Setting+0x48>)
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <servo2Setting+0x54>)
 80025e6:	609a      	str	r2, [r3, #8]

	osDelay(50);
 80025e8:	2032      	movs	r0, #50	; 0x32
 80025ea:	f00b fb83 	bl	800dcf4 <osDelay>
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200074e8 	.word	0x200074e8
 80025f8:	200074d4 	.word	0x200074d4
 80025fc:	43870000 	.word	0x43870000
 8002600:	4019999a 	.word	0x4019999a
 8002604:	42480000 	.word	0x42480000

08002608 <servo3Setting>:

void servo3Setting(){
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	servo_device3.node_type = NODE_SERVO;
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <servo3Setting+0x44>)
 800260e:	2204      	movs	r2, #4
 8002610:	701a      	strb	r2, [r3, #0]
	servo_device3.node_id = 1;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <servo3Setting+0x44>)
 8002614:	2201      	movs	r2, #1
 8002616:	705a      	strb	r2, [r3, #1]
	servo_device3.device_num = 0;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <servo3Setting+0x44>)
 800261a:	2200      	movs	r2, #0
 800261c:	709a      	strb	r2, [r3, #2]

	servo_param3.angle_range=270.0f;
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <servo3Setting+0x48>)
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <servo3Setting+0x4c>)
 8002622:	60da      	str	r2, [r3, #12]
	servo_param3.angle_offset=0.0f;
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <servo3Setting+0x48>)
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
	servo_param3.pulse_width_max=2.4f;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <servo3Setting+0x48>)
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <servo3Setting+0x50>)
 8002630:	605a      	str	r2, [r3, #4]
	servo_param3.pulse_width_min=0.5f;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <servo3Setting+0x48>)
 8002634:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002638:	601a      	str	r2, [r3, #0]
	servo_param3.pwm_frequency=50;
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <servo3Setting+0x48>)
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <servo3Setting+0x54>)
 800263e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002640:	2032      	movs	r0, #50	; 0x32
 8002642:	f00b fb57 	bl	800dcf4 <osDelay>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20007500 	.word	0x20007500
 8002650:	200074ec 	.word	0x200074ec
 8002654:	43870000 	.word	0x43870000
 8002658:	4019999a 	.word	0x4019999a
 800265c:	42480000 	.word	0x42480000

08002660 <servo4Setting>:
void servo4Setting(){
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	servo_device4.node_type = NODE_SERVO;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <servo4Setting+0x44>)
 8002666:	2204      	movs	r2, #4
 8002668:	701a      	strb	r2, [r3, #0]
	servo_device4.node_id = 1;
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <servo4Setting+0x44>)
 800266c:	2201      	movs	r2, #1
 800266e:	705a      	strb	r2, [r3, #1]
	servo_device4.device_num = 1;
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <servo4Setting+0x44>)
 8002672:	2201      	movs	r2, #1
 8002674:	709a      	strb	r2, [r3, #2]

	servo_param4.angle_range=270.0f;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <servo4Setting+0x48>)
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <servo4Setting+0x4c>)
 800267a:	60da      	str	r2, [r3, #12]
	servo_param4.angle_offset=0.0f;
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <servo4Setting+0x48>)
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
	servo_param4.pulse_width_max=2.4f;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <servo4Setting+0x48>)
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <servo4Setting+0x50>)
 8002688:	605a      	str	r2, [r3, #4]
	servo_param4.pulse_width_min=0.5f;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <servo4Setting+0x48>)
 800268c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002690:	601a      	str	r2, [r3, #0]
	servo_param4.pwm_frequency=50;
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <servo4Setting+0x48>)
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <servo4Setting+0x54>)
 8002696:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002698:	2032      	movs	r0, #50	; 0x32
 800269a:	f00b fb2b 	bl	800dcf4 <osDelay>
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20007518 	.word	0x20007518
 80026a8:	20007504 	.word	0x20007504
 80026ac:	43870000 	.word	0x43870000
 80026b0:	4019999a 	.word	0x4019999a
 80026b4:	42480000 	.word	0x42480000

080026b8 <servo5Setting>:
void servo5Setting(){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	servo_device5.node_type = NODE_SERVO;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <servo5Setting+0x44>)
 80026be:	2204      	movs	r2, #4
 80026c0:	701a      	strb	r2, [r3, #0]
	servo_device5.node_id = 1;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <servo5Setting+0x44>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	705a      	strb	r2, [r3, #1]
	servo_device5.device_num = 2;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <servo5Setting+0x44>)
 80026ca:	2202      	movs	r2, #2
 80026cc:	709a      	strb	r2, [r3, #2]

	servo_param5.angle_range=270.0f;
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <servo5Setting+0x48>)
 80026d0:	4a0c      	ldr	r2, [pc, #48]	; (8002704 <servo5Setting+0x4c>)
 80026d2:	60da      	str	r2, [r3, #12]
	servo_param5.angle_offset=0.0f;
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <servo5Setting+0x48>)
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
	servo_param5.pulse_width_max=2.4f;
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <servo5Setting+0x48>)
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <servo5Setting+0x50>)
 80026e0:	605a      	str	r2, [r3, #4]
	servo_param5.pulse_width_min=0.5f;
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <servo5Setting+0x48>)
 80026e4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80026e8:	601a      	str	r2, [r3, #0]
	servo_param5.pwm_frequency=50;
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <servo5Setting+0x48>)
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <servo5Setting+0x54>)
 80026ee:	609a      	str	r2, [r3, #8]

	osDelay(50);
 80026f0:	2032      	movs	r0, #50	; 0x32
 80026f2:	f00b faff 	bl	800dcf4 <osDelay>
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20007530 	.word	0x20007530
 8002700:	2000751c 	.word	0x2000751c
 8002704:	43870000 	.word	0x43870000
 8002708:	4019999a 	.word	0x4019999a
 800270c:	42480000 	.word	0x42480000

08002710 <servo6Setting>:
void servo6Setting(){
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	servo_device6.node_type = NODE_SERVO;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <servo6Setting+0x44>)
 8002716:	2204      	movs	r2, #4
 8002718:	701a      	strb	r2, [r3, #0]
	servo_device6.node_id = 1;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <servo6Setting+0x44>)
 800271c:	2201      	movs	r2, #1
 800271e:	705a      	strb	r2, [r3, #1]
	servo_device6.device_num = 3;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <servo6Setting+0x44>)
 8002722:	2203      	movs	r2, #3
 8002724:	709a      	strb	r2, [r3, #2]

	servo_param6.angle_range=270.0f;
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <servo6Setting+0x48>)
 8002728:	4a0c      	ldr	r2, [pc, #48]	; (800275c <servo6Setting+0x4c>)
 800272a:	60da      	str	r2, [r3, #12]
	servo_param6.angle_offset=0.0f;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <servo6Setting+0x48>)
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
	servo_param6.pulse_width_max=2.4f;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <servo6Setting+0x48>)
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <servo6Setting+0x50>)
 8002738:	605a      	str	r2, [r3, #4]
	servo_param6.pulse_width_min=0.5f;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <servo6Setting+0x48>)
 800273c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002740:	601a      	str	r2, [r3, #0]
	servo_param6.pwm_frequency=50;
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <servo6Setting+0x48>)
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <servo6Setting+0x54>)
 8002746:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002748:	2032      	movs	r0, #50	; 0x32
 800274a:	f00b fad3 	bl	800dcf4 <osDelay>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20007548 	.word	0x20007548
 8002758:	20007534 	.word	0x20007534
 800275c:	43870000 	.word	0x43870000
 8002760:	4019999a 	.word	0x4019999a
 8002764:	42480000 	.word	0x42480000

08002768 <airSetting>:

//エアシリ基盤設定
void airSetting(){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR;
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <airSetting+0x44>)
 8002770:	2205      	movs	r2, #5
 8002772:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0;
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <airSetting+0x44>)
 8002776:	2200      	movs	r2, #0
 8002778:	705a      	strb	r2, [r3, #1]

	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 800277a:	2300      	movs	r3, #0
 800277c:	71fb      	strb	r3, [r7, #7]
 800277e:	e00c      	b.n	800279a <airSetting+0x32>
		air_device.device_num = i; //
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <airSetting+0x44>)
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	7093      	strb	r3, [r2, #2]
		AirCylinder_Init(&air_device, AIR_OFF);
 8002786:	2100      	movs	r1, #0
 8002788:	4808      	ldr	r0, [pc, #32]	; (80027ac <airSetting+0x44>)
 800278a:	f7ff f843 	bl	8001814 <AirCylinder_Init>
		HAL_Delay(10);  // このdelayは必要
 800278e:	200a      	movs	r0, #10
 8002790:	f001 fbda 	bl	8003f48 <HAL_Delay>
	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	3301      	adds	r3, #1
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b07      	cmp	r3, #7
 800279e:	d9ef      	bls.n	8002780 <airSetting+0x18>
	 }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000754c 	.word	0x2000754c

080027b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80027b4:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <MX_FREERTOS_Init+0x48>)
 80027b6:	2100      	movs	r1, #0
 80027b8:	4810      	ldr	r0, [pc, #64]	; (80027fc <MX_FREERTOS_Init+0x4c>)
 80027ba:	f00b f9f5 	bl	800dba8 <osThreadNew>
 80027be:	4603      	mov	r3, r0
 80027c0:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <MX_FREERTOS_Init+0x50>)
 80027c2:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 80027c4:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <MX_FREERTOS_Init+0x54>)
 80027c6:	2100      	movs	r1, #0
 80027c8:	480f      	ldr	r0, [pc, #60]	; (8002808 <MX_FREERTOS_Init+0x58>)
 80027ca:	f00b f9ed 	bl	800dba8 <osThreadNew>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a0e      	ldr	r2, [pc, #56]	; (800280c <MX_FREERTOS_Init+0x5c>)
 80027d2:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <MX_FREERTOS_Init+0x60>)
 80027d6:	2100      	movs	r1, #0
 80027d8:	480e      	ldr	r0, [pc, #56]	; (8002814 <MX_FREERTOS_Init+0x64>)
 80027da:	f00b f9e5 	bl	800dba8 <osThreadNew>
 80027de:	4603      	mov	r3, r0
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <MX_FREERTOS_Init+0x68>)
 80027e2:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <MX_FREERTOS_Init+0x6c>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	480d      	ldr	r0, [pc, #52]	; (8002820 <MX_FREERTOS_Init+0x70>)
 80027ea:	f00b f9dd 	bl	800dba8 <osThreadNew>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <MX_FREERTOS_Init+0x74>)
 80027f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	080242b0 	.word	0x080242b0
 80027fc:	08002c99 	.word	0x08002c99
 8002800:	20007558 	.word	0x20007558
 8002804:	080242d4 	.word	0x080242d4
 8002808:	08003119 	.word	0x08003119
 800280c:	2000a498 	.word	0x2000a498
 8002810:	080242f8 	.word	0x080242f8
 8002814:	0800315d 	.word	0x0800315d
 8002818:	2000acf8 	.word	0x2000acf8
 800281c:	0802431c 	.word	0x0802431c
 8002820:	0800316d 	.word	0x0800316d
 8002824:	2000b558 	.word	0x2000b558

08002828 <service_callback>:
  * @retval None
  */

//過去の遺物
void service_callback(const void *request, void *response)
{
 8002828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	60bb      	str	r3, [r7, #8]

	osDelay(1000);
 800283c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002840:	f00b fa58 	bl	800dcf4 <osDelay>

	_res->sum = _req->a + _req->b + _req->c;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002850:	1884      	adds	r4, r0, r2
 8002852:	eb41 0503 	adc.w	r5, r1, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800285c:	eb14 0802 	adds.w	r8, r4, r2
 8002860:	eb45 0903 	adc.w	r9, r5, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	e9c3 8900 	strd	r8, r9, [r3]
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002874 <subscription_callback>:

//速度司令を格納
void subscription_callback(const void * msgin)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	ed93 7b04 	vldr	d7, [r3, #16]
 8002886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <subscription_callback+0x58>)
 800288c:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	ed93 7b06 	vldr	d7, [r3, #24]
 8002896:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <subscription_callback+0x58>)
 800289c:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	ed93 7b08 	vldr	d7, [r3, #32]
 80028a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <subscription_callback+0x58>)
 80028ac:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80028b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <subscription_callback+0x58>)
 80028bc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	2000bdbc 	.word	0x2000bdbc

080028d0 <print_int>:

//micro-rosでのデバッグ用
void print_int(int num){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	rosidl_runtime_c__String__init(&pub);
 80028d8:	4811      	ldr	r0, [pc, #68]	; (8002920 <print_int+0x50>)
 80028da:	f014 fb87 	bl	8016fec <rosidl_runtime_c__String__init>
	char val[12];
	snprintf(val, 12, "%d", num);
 80028de:	f107 0008 	add.w	r0, r7, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <print_int+0x54>)
 80028e6:	210c      	movs	r1, #12
 80028e8:	f01d ff88 	bl	80207fc <sniprintf>
	rosidl_runtime_c__String__assignn(&pub.data, val, sizeof(val));
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	220c      	movs	r2, #12
 80028f2:	4619      	mov	r1, r3
 80028f4:	480a      	ldr	r0, [pc, #40]	; (8002920 <print_int+0x50>)
 80028f6:	f014 fbd7 	bl	80170a8 <rosidl_runtime_c__String__assignn>
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 80028fa:	2200      	movs	r2, #0
 80028fc:	4908      	ldr	r1, [pc, #32]	; (8002920 <print_int+0x50>)
 80028fe:	480a      	ldr	r0, [pc, #40]	; (8002928 <print_int+0x58>)
 8002900:	f010 ffee 	bl	80138e0 <rcl_publish>
 8002904:	6178      	str	r0, [r7, #20]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <print_int+0x48>
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	f240 21c2 	movw	r1, #706	; 0x2c2
 8002912:	4806      	ldr	r0, [pc, #24]	; (800292c <print_int+0x5c>)
 8002914:	f01d fe56 	bl	80205c4 <iprintf>
}
 8002918:	bf00      	nop
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20007328 	.word	0x20007328
 8002924:	080240ac 	.word	0x080240ac
 8002928:	20007550 	.word	0x20007550
 800292c:	080240b0 	.word	0x080240b0

08002930 <manipsub_callback>:

//マニピュレーションのためのコールバック関数群
void manipsub_callback(const void * msgin)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	60fb      	str	r3, [r7, #12]

	  print_int(msub->num);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002942:	4613      	mov	r3, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ffc3 	bl	80028d0 <print_int>
	  print_int(msub->top_base_arm);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002950:	4613      	mov	r3, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ffbc 	bl	80028d0 <print_int>
	  print_int(msub->top_base_hand);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800295e:	4613      	mov	r3, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ffb5 	bl	80028d0 <print_int>

	  work_arm_deployer(msub->work_arm_deploy);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f000 f834 	bl	80029dc <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f000 f899 	bl	8002ab4 <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f000 f872 	bl	8002a74 <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f000 f8ff 	bl	8002b9c <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f000 f916 	bl	8002bd8 <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f000 f92f 	bl	8002c18 <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f000 f946 	bl	8002c54 <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	4803      	ldr	r0, [pc, #12]	; (80029d8 <manipsub_callback+0xa8>)
 80029cc:	f002 fff9 	bl	80059c2 <HAL_GPIO_TogglePin>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40020400 	.word	0x40020400

080029dc <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d118      	bne.n	8002a1c <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 80029ea:	491c      	ldr	r1, [pc, #112]	; (8002a5c <work_arm_deployer+0x80>)
 80029ec:	481c      	ldr	r0, [pc, #112]	; (8002a60 <work_arm_deployer+0x84>)
 80029ee:	f7fe feb4 	bl	800175a <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 80029f2:	2064      	movs	r0, #100	; 0x64
 80029f4:	f00b f97e 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 80029f8:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002a64 <work_arm_deployer+0x88>
 80029fc:	4818      	ldr	r0, [pc, #96]	; (8002a60 <work_arm_deployer+0x84>)
 80029fe:	f7fe feee 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002a02:	4919      	ldr	r1, [pc, #100]	; (8002a68 <work_arm_deployer+0x8c>)
 8002a04:	4819      	ldr	r0, [pc, #100]	; (8002a6c <work_arm_deployer+0x90>)
 8002a06:	f7fe fea8 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002a0a:	2064      	movs	r0, #100	; 0x64
 8002a0c:	f00b f972 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device2, 135.0f);
 8002a10:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002a70 <work_arm_deployer+0x94>
 8002a14:	4815      	ldr	r0, [pc, #84]	; (8002a6c <work_arm_deployer+0x90>)
 8002a16:	f7fe fee2 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device2, 45.0f);
		ServoDriver_Init(&servo_device1, &servo_param1);
		osDelay(100);
		ServoDriver_SendValue(&servo_device1, 135.0f);
	}
}
 8002a1a:	e01a      	b.n	8002a52 <work_arm_deployer+0x76>
	}else if(state == 1){
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d117      	bne.n	8002a52 <work_arm_deployer+0x76>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002a22:	4911      	ldr	r1, [pc, #68]	; (8002a68 <work_arm_deployer+0x8c>)
 8002a24:	4811      	ldr	r0, [pc, #68]	; (8002a6c <work_arm_deployer+0x90>)
 8002a26:	f7fe fe98 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002a2a:	2064      	movs	r0, #100	; 0x64
 8002a2c:	f00b f962 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device2, 45.0f);
 8002a30:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002a64 <work_arm_deployer+0x88>
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <work_arm_deployer+0x90>)
 8002a36:	f7fe fed2 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <work_arm_deployer+0x80>)
 8002a3c:	4808      	ldr	r0, [pc, #32]	; (8002a60 <work_arm_deployer+0x84>)
 8002a3e:	f7fe fe8c 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002a42:	2064      	movs	r0, #100	; 0x64
 8002a44:	f00b f956 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8002a48:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002a70 <work_arm_deployer+0x94>
 8002a4c:	4804      	ldr	r0, [pc, #16]	; (8002a60 <work_arm_deployer+0x84>)
 8002a4e:	f7fe fec6 	bl	80017de <ServoDriver_SendValue>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200074bc 	.word	0x200074bc
 8002a60:	200074d0 	.word	0x200074d0
 8002a64:	42340000 	.word	0x42340000
 8002a68:	200074d4 	.word	0x200074d4
 8002a6c:	200074e8 	.word	0x200074e8
 8002a70:	43070000 	.word	0x43070000

08002a74 <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <work_hand_setter+0x3c>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <work_hand_setter+0x3c>)
 8002a8c:	f7fe fedd 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002a90:	e009      	b.n	8002aa6 <work_hand_setter+0x32>
	  }else if(state == 1){
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <work_hand_setter+0x32>
		  air_device.device_num=1;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <work_hand_setter+0x3c>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	4803      	ldr	r0, [pc, #12]	; (8002ab0 <work_hand_setter+0x3c>)
 8002aa2:	f7fe fed2 	bl	800184a <AirCylinder_SendOutput>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	2000754c 	.word	0x2000754c

08002ab4 <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d107      	bne.n	8002ad2 <work_arm_setter+0x1e>
		  air_device.device_num=0;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <work_arm_setter+0x3c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4809      	ldr	r0, [pc, #36]	; (8002af0 <work_arm_setter+0x3c>)
 8002acc:	f7fe febd 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002ad0:	e009      	b.n	8002ae6 <work_arm_setter+0x32>
	  }else if(state == 1){
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d106      	bne.n	8002ae6 <work_arm_setter+0x32>
		  air_device.device_num=0;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <work_arm_setter+0x3c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4803      	ldr	r0, [pc, #12]	; (8002af0 <work_arm_setter+0x3c>)
 8002ae2:	f7fe feb2 	bl	800184a <AirCylinder_SendOutput>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2000754c 	.word	0x2000754c

08002af4 <base_hand_deployer>:

void base_hand_deployer(int state){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d12f      	bne.n	8002b62 <base_hand_deployer+0x6e>
		ServoDriver_Init(&servo_device3, &servo_param3);
 8002b02:	491a      	ldr	r1, [pc, #104]	; (8002b6c <base_hand_deployer+0x78>)
 8002b04:	481a      	ldr	r0, [pc, #104]	; (8002b70 <base_hand_deployer+0x7c>)
 8002b06:	f7fe fe28 	bl	800175a <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8002b0a:	2064      	movs	r0, #100	; 0x64
 8002b0c:	f00b f8f2 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device3, 60.0f);
 8002b10:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002b74 <base_hand_deployer+0x80>
 8002b14:	4816      	ldr	r0, [pc, #88]	; (8002b70 <base_hand_deployer+0x7c>)
 8002b16:	f7fe fe62 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device4, &servo_param4);
 8002b1a:	4917      	ldr	r1, [pc, #92]	; (8002b78 <base_hand_deployer+0x84>)
 8002b1c:	4817      	ldr	r0, [pc, #92]	; (8002b7c <base_hand_deployer+0x88>)
 8002b1e:	f7fe fe1c 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002b22:	2064      	movs	r0, #100	; 0x64
 8002b24:	f00b f8e6 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device4, 110.0f);
 8002b28:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002b80 <base_hand_deployer+0x8c>
 8002b2c:	4813      	ldr	r0, [pc, #76]	; (8002b7c <base_hand_deployer+0x88>)
 8002b2e:	f7fe fe56 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device5, &servo_param5);
 8002b32:	4914      	ldr	r1, [pc, #80]	; (8002b84 <base_hand_deployer+0x90>)
 8002b34:	4814      	ldr	r0, [pc, #80]	; (8002b88 <base_hand_deployer+0x94>)
 8002b36:	f7fe fe10 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002b3a:	2064      	movs	r0, #100	; 0x64
 8002b3c:	f00b f8da 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device5, 210.0f);
 8002b40:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002b8c <base_hand_deployer+0x98>
 8002b44:	4810      	ldr	r0, [pc, #64]	; (8002b88 <base_hand_deployer+0x94>)
 8002b46:	f7fe fe4a 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device6, &servo_param6);
 8002b4a:	4911      	ldr	r1, [pc, #68]	; (8002b90 <base_hand_deployer+0x9c>)
 8002b4c:	4811      	ldr	r0, [pc, #68]	; (8002b94 <base_hand_deployer+0xa0>)
 8002b4e:	f7fe fe04 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	f00b f8ce 	bl	800dcf4 <osDelay>
		ServoDriver_SendValue(&servo_device6, 225.0f);
 8002b58:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002b98 <base_hand_deployer+0xa4>
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <base_hand_deployer+0xa0>)
 8002b5e:	f7fe fe3e 	bl	80017de <ServoDriver_SendValue>
	}else if(state == 1){

	}
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200074ec 	.word	0x200074ec
 8002b70:	20007500 	.word	0x20007500
 8002b74:	42700000 	.word	0x42700000
 8002b78:	20007504 	.word	0x20007504
 8002b7c:	20007518 	.word	0x20007518
 8002b80:	42dc0000 	.word	0x42dc0000
 8002b84:	2000751c 	.word	0x2000751c
 8002b88:	20007530 	.word	0x20007530
 8002b8c:	43520000 	.word	0x43520000
 8002b90:	20007534 	.word	0x20007534
 8002b94:	20007548 	.word	0x20007548
 8002b98:	43610000 	.word	0x43610000

08002b9c <base1_arm_setter>:

void base1_arm_setter(int state){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8002baa:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002bd0 <base1_arm_setter+0x34>
 8002bae:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <base1_arm_setter+0x38>)
 8002bb0:	f7fe fdbc 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
	}
}
 8002bb4:	e007      	b.n	8002bc6 <base1_arm_setter+0x2a>
	}else if(state == 1){
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d104      	bne.n	8002bc6 <base1_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
 8002bbc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <base1_arm_setter+0x38>)
 8002bc2:	f7fe fdb3 	bl	800172c <MCMD_SetTarget>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	2000743c 	.word	0x2000743c

08002bd8 <base1_hand_setter>:

void base1_hand_setter(int state){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

	if(state == 0){
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <base1_hand_setter+0x1e>
		air_device.device_num=3;
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <base1_hand_setter+0x3c>)
 8002be8:	2203      	movs	r2, #3
 8002bea:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002bec:	2100      	movs	r1, #0
 8002bee:	4809      	ldr	r0, [pc, #36]	; (8002c14 <base1_hand_setter+0x3c>)
 8002bf0:	f7fe fe2b 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002bf4:	e009      	b.n	8002c0a <base1_hand_setter+0x32>
		}else if(state == 1){
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <base1_hand_setter+0x32>
			air_device.device_num=3;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <base1_hand_setter+0x3c>)
 8002bfe:	2203      	movs	r2, #3
 8002c00:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002c02:	2101      	movs	r1, #1
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <base1_hand_setter+0x3c>)
 8002c06:	f7fe fe20 	bl	800184a <AirCylinder_SendOutput>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000754c 	.word	0x2000754c

08002c18 <base2_arm_setter>:

void base2_arm_setter(int state){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 8002c26:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002c4c <base2_arm_setter+0x34>
 8002c2a:	4809      	ldr	r0, [pc, #36]	; (8002c50 <base2_arm_setter+0x38>)
 8002c2c:	f7fe fd7e 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
	}
}
 8002c30:	e007      	b.n	8002c42 <base2_arm_setter+0x2a>
	}else if(state == 1){
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d104      	bne.n	8002c42 <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
 8002c38:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8002c3c:	4804      	ldr	r0, [pc, #16]	; (8002c50 <base2_arm_setter+0x38>)
 8002c3e:	f7fe fd75 	bl	800172c <MCMD_SetTarget>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	00000000 	.word	0x00000000
 8002c50:	2000747c 	.word	0x2000747c

08002c54 <base2_hand_setter>:

void base2_hand_setter(int state){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d107      	bne.n	8002c72 <base2_hand_setter+0x1e>
		air_device.device_num=2;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <base2_hand_setter+0x3c>)
 8002c64:	2202      	movs	r2, #2
 8002c66:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4809      	ldr	r0, [pc, #36]	; (8002c90 <base2_hand_setter+0x3c>)
 8002c6c:	f7fe fded 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002c70:	e009      	b.n	8002c86 <base2_hand_setter+0x32>
		}else if(state == 1){
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d106      	bne.n	8002c86 <base2_hand_setter+0x32>
			air_device.device_num=2;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <base2_hand_setter+0x3c>)
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <base2_hand_setter+0x3c>)
 8002c82:	f7fe fde2 	bl	800184a <AirCylinder_SendOutput>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000754c 	.word	0x2000754c
 8002c94:	00000000 	.word	0x00000000

08002c98 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b0f0      	sub	sp, #448	; 0x1c0
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002ca2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ca6:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002ca8:	f00d fd08 	bl	80106bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの設定
  	rmw_uros_set_custom_transport(
 8002cac:	4bd2      	ldr	r3, [pc, #840]	; (8002ff8 <StartDefaultTask+0x360>)
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	4bd2      	ldr	r3, [pc, #840]	; (8002ffc <StartDefaultTask+0x364>)
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	4bd2      	ldr	r3, [pc, #840]	; (8003000 <StartDefaultTask+0x368>)
 8002cb6:	4ad3      	ldr	r2, [pc, #844]	; (8003004 <StartDefaultTask+0x36c>)
 8002cb8:	49d3      	ldr	r1, [pc, #844]	; (8003008 <StartDefaultTask+0x370>)
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f012 fbca 	bl	8015454 <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002cc0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f012 f85b 	bl	8014d80 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8002cca:	4bd0      	ldr	r3, [pc, #832]	; (800300c <StartDefaultTask+0x374>)
 8002ccc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8002cd0:	4bcf      	ldr	r3, [pc, #828]	; (8003010 <StartDefaultTask+0x378>)
 8002cd2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8002cd6:	4bcf      	ldr	r3, [pc, #828]	; (8003014 <StartDefaultTask+0x37c>)
 8002cd8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002cdc:	4bce      	ldr	r3, [pc, #824]	; (8003018 <StartDefaultTask+0x380>)
 8002cde:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002ce2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f012 f858 	bl	8014d9c <rcutils_set_default_allocator>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8002cf8:	f240 314e 	movw	r1, #846	; 0x34e
 8002cfc:	48c7      	ldr	r0, [pc, #796]	; (800301c <StartDefaultTask+0x384>)
 8002cfe:	f01d fc61 	bl	80205c4 <iprintf>
  	}

  	osDelay(100);
 8002d02:	2064      	movs	r0, #100	; 0x64
 8002d04:	f00a fff6 	bl	800dcf4 <osDelay>

  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8002d08:	4bc5      	ldr	r3, [pc, #788]	; (8003020 <StartDefaultTask+0x388>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6898      	ldr	r0, [r3, #8]
 8002d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d12:	2202      	movs	r2, #2
 8002d14:	2100      	movs	r1, #0
 8002d16:	f01d fcc3 	bl	80206a0 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8002d1a:	f010 fa61 	bl	80131e0 <rcl_get_zero_initialized_init_options>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8002d24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f012 f855 	bl	8014dd8 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8002d2e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002d32:	4618      	mov	r0, r3
 8002d34:	f010 fb5c 	bl	80133f0 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8002d38:	f010 fe18 	bl	801396c <rcl_get_zero_initialized_service>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	publisher = rcl_get_zero_initialized_publisher();
 8002d42:	f010 fcff 	bl	8013744 <rcl_get_zero_initialized_publisher>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4ab6      	ldr	r2, [pc, #728]	; (8003024 <StartDefaultTask+0x38c>)
 8002d4a:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8002d4c:	f010 ff32 	bl	8013bb4 <rcl_get_zero_initialized_subscription>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 8002d56:	f010 ff2d 	bl	8013bb4 <rcl_get_zero_initialized_subscription>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002d60:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f011 fbb3 	bl	80144d4 <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002d6e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002d72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d76:	4618      	mov	r0, r3
 8002d78:	f010 fcb4 	bl	80136e4 <rcl_node_get_default_options>

  	osDelay(100);
 8002d7c:	2064      	movs	r0, #100	; 0x64
 8002d7e:	f00a ffb9 	bl	800dcf4 <osDelay>

  	//ノードの設定
  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002d82:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8002d86:	466a      	mov	r2, sp
 8002d88:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002d8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d90:	e882 0003 	stmia.w	r2, {r0, r1}
 8002d94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f010 fa22 	bl	80131e4 <rcl_init_options_init>
 8002da0:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8002da4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d006      	beq.n	8002dba <StartDefaultTask+0x122>
 8002dac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002db0:	f240 3162 	movw	r1, #866	; 0x362
 8002db4:	489c      	ldr	r0, [pc, #624]	; (8003028 <StartDefaultTask+0x390>)
 8002db6:	f01d fc05 	bl	80205c4 <iprintf>
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8002dba:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f010 fb0d 	bl	80133e0 <rcl_init_options_set_domain_id>
 8002dc6:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8002dca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <StartDefaultTask+0x148>
 8002dd2:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002dd6:	f240 3163 	movw	r1, #867	; 0x363
 8002dda:	4893      	ldr	r0, [pc, #588]	; (8003028 <StartDefaultTask+0x390>)
 8002ddc:	f01d fbf2 	bl	80205c4 <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002de0:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8002de4:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8002de8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	2200      	movs	r2, #0
 8002df2:	2100      	movs	r1, #0
 8002df4:	f011 fe9c 	bl	8014b30 <rclc_support_init_with_options>
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8002df8:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002dfc:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	4a88      	ldr	r2, [pc, #544]	; (800302c <StartDefaultTask+0x394>)
 8002e0a:	4989      	ldr	r1, [pc, #548]	; (8003030 <StartDefaultTask+0x398>)
 8002e0c:	f011 fec6 	bl	8014b9c <rclc_node_init_with_options>
 8002e10:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8002e14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <StartDefaultTask+0x192>
 8002e1c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002e20:	f240 3165 	movw	r1, #869	; 0x365
 8002e24:	4880      	ldr	r0, [pc, #512]	; (8003028 <StartDefaultTask+0x390>)
 8002e26:	f01d fbcd 	bl	80205c4 <iprintf>
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8002e2a:	f00e f9a7 	bl	801117c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e34:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002e38:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <StartDefaultTask+0x39c>)
 8002e3a:	f011 ff25 	bl	8014c88 <rclc_service_init_default>
 8002e3e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8002e42:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <StartDefaultTask+0x1c0>
 8002e4a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002e4e:	f240 3166 	movw	r1, #870	; 0x366
 8002e52:	4875      	ldr	r0, [pc, #468]	; (8003028 <StartDefaultTask+0x390>)
 8002e54:	f01d fbb6 	bl	80205c4 <iprintf>

	RCCHECK(rclc_publisher_init_default(
 8002e58:	f014 f9b6 	bl	80171c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e62:	4b75      	ldr	r3, [pc, #468]	; (8003038 <StartDefaultTask+0x3a0>)
 8002e64:	486f      	ldr	r0, [pc, #444]	; (8003024 <StartDefaultTask+0x38c>)
 8002e66:	f011 fed5 	bl	8014c14 <rclc_publisher_init_default>
 8002e6a:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002e6e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <StartDefaultTask+0x1ec>
 8002e76:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e7a:	f44f 715a 	mov.w	r1, #872	; 0x368
 8002e7e:	486a      	ldr	r0, [pc, #424]	; (8003028 <StartDefaultTask+0x390>)
 8002e80:	f01d fba0 	bl	80205c4 <iprintf>
	  &publisher,
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

		RCCHECK(rclc_publisher_init_default(
 8002e84:	f00e faaa 	bl	80113dc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	; (800303c <StartDefaultTask+0x3a4>)
 8002e90:	486b      	ldr	r0, [pc, #428]	; (8003040 <StartDefaultTask+0x3a8>)
 8002e92:	f011 febf 	bl	8014c14 <rclc_publisher_init_default>
 8002e96:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002e9a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <StartDefaultTask+0x218>
 8002ea2:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002ea6:	f240 316e 	movw	r1, #878	; 0x36e
 8002eaa:	485f      	ldr	r0, [pc, #380]	; (8003028 <StartDefaultTask+0x390>)
 8002eac:	f01d fb8a 	bl	80205c4 <iprintf>
		  &encpublisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002eb0:	f00e fa7c 	bl	80113ac <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002eba:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002ebe:	4b61      	ldr	r3, [pc, #388]	; (8003044 <StartDefaultTask+0x3ac>)
 8002ec0:	f011 ff1c 	bl	8014cfc <rclc_subscription_init_default>
 8002ec4:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8002ec8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <StartDefaultTask+0x246>
 8002ed0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ed4:	f44f 715d 	mov.w	r1, #884	; 0x374
 8002ed8:	4853      	ldr	r0, [pc, #332]	; (8003028 <StartDefaultTask+0x390>)
 8002eda:	f01d fb73 	bl	80205c4 <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002ede:	f00e fc8b 	bl	80117f8 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002ee8:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002eec:	4b56      	ldr	r3, [pc, #344]	; (8003048 <StartDefaultTask+0x3b0>)
 8002eee:	f011 ff05 	bl	8014cfc <rclc_subscription_init_default>
 8002ef2:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8002ef6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <StartDefaultTask+0x274>
 8002efe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f02:	f240 317a 	movw	r1, #890	; 0x37a
 8002f06:	4848      	ldr	r0, [pc, #288]	; (8003028 <StartDefaultTask+0x390>)
 8002f08:	f01d fb5c 	bl	80205c4 <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));

		RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 8002f0c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f10:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8002f14:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002f18:	2203      	movs	r2, #3
 8002f1a:	f011 fae5 	bl	80144e8 <rclc_executor_init>
 8002f1e:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8002f22:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <StartDefaultTask+0x2a0>
 8002f2a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f2e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002f32:	483d      	ldr	r0, [pc, #244]	; (8003028 <StartDefaultTask+0x390>)
 8002f34:	f01d fb46 	bl	80205c4 <iprintf>

  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8002f38:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002f3c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002f40:	4b42      	ldr	r3, [pc, #264]	; (800304c <StartDefaultTask+0x3b4>)
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4b42      	ldr	r3, [pc, #264]	; (8003050 <StartDefaultTask+0x3b8>)
 8002f46:	4a43      	ldr	r2, [pc, #268]	; (8003054 <StartDefaultTask+0x3bc>)
 8002f48:	f011 fb88 	bl	801465c <rclc_executor_add_service>
 8002f4c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8002f50:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <StartDefaultTask+0x2ce>
 8002f58:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002f5c:	f240 3182 	movw	r1, #898	; 0x382
 8002f60:	4831      	ldr	r0, [pc, #196]	; (8003028 <StartDefaultTask+0x390>)
 8002f62:	f01d fb2f 	bl	80205c4 <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8002f66:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002f6a:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <StartDefaultTask+0x3c0>)
 8002f74:	4a39      	ldr	r2, [pc, #228]	; (800305c <StartDefaultTask+0x3c4>)
 8002f76:	f011 fb33 	bl	80145e0 <rclc_executor_add_subscription>
 8002f7a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8002f7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <StartDefaultTask+0x2fc>
 8002f86:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002f8a:	f240 3183 	movw	r1, #899	; 0x383
 8002f8e:	4826      	ldr	r0, [pc, #152]	; (8003028 <StartDefaultTask+0x390>)
 8002f90:	f01d fb18 	bl	80205c4 <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 8002f94:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002f98:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <StartDefaultTask+0x3c8>)
 8002fa2:	4a30      	ldr	r2, [pc, #192]	; (8003064 <StartDefaultTask+0x3cc>)
 8002fa4:	f011 fb1c 	bl	80145e0 <rclc_executor_add_subscription>
 8002fa8:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8002fac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <StartDefaultTask+0x32a>
 8002fb4:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002fb8:	f240 3186 	movw	r1, #902	; 0x386
 8002fbc:	481a      	ldr	r0, [pc, #104]	; (8003028 <StartDefaultTask+0x390>)
 8002fbe:	f01d fb01 	bl	80205c4 <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

  	osDelay(100);
 8002fc2:	2064      	movs	r0, #100	; 0x64
 8002fc4:	f00a fe96 	bl	800dcf4 <osDelay>

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8002fc8:	4827      	ldr	r0, [pc, #156]	; (8003068 <StartDefaultTask+0x3d0>)
 8002fca:	f014 f80f 	bl	8016fec <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 8002fce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002fd2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fd6:	4a25      	ldr	r2, [pc, #148]	; (800306c <StartDefaultTask+0x3d4>)
 8002fd8:	461c      	mov	r4, r3
 8002fda:	4615      	mov	r5, r2
 8002fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	2214      	movs	r2, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	481e      	ldr	r0, [pc, #120]	; (8003068 <StartDefaultTask+0x3d0>)
 8002fee:	f014 f85b 	bl	80170a8 <rosidl_runtime_c__String__assignn>
    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	e03c      	b.n	8003070 <StartDefaultTask+0x3d8>
 8002ff6:	bf00      	nop
 8002ff8:	080020a9 	.word	0x080020a9
 8002ffc:	08002049 	.word	0x08002049
 8003000:	08002029 	.word	0x08002029
 8003004:	08001ffd 	.word	0x08001ffd
 8003008:	2000bec4 	.word	0x2000bec4
 800300c:	080033c1 	.word	0x080033c1
 8003010:	08003405 	.word	0x08003405
 8003014:	0800343d 	.word	0x0800343d
 8003018:	080034a9 	.word	0x080034a9
 800301c:	080240dc 	.word	0x080240dc
 8003020:	200009d8 	.word	0x200009d8
 8003024:	20007550 	.word	0x20007550
 8003028:	08024104 	.word	0x08024104
 800302c:	08024130 	.word	0x08024130
 8003030:	08024134 	.word	0x08024134
 8003034:	0802413c 	.word	0x0802413c
 8003038:	0802414c 	.word	0x0802414c
 800303c:	0802415c 	.word	0x0802415c
 8003040:	20007554 	.word	0x20007554
 8003044:	08024168 	.word	0x08024168
 8003048:	08024178 	.word	0x08024178
 800304c:	08002829 	.word	0x08002829
 8003050:	200072a8 	.word	0x200072a8
 8003054:	20007290 	.word	0x20007290
 8003058:	08002875 	.word	0x08002875
 800305c:	200072b0 	.word	0x200072b0
 8003060:	08002931 	.word	0x08002931
 8003064:	200072e0 	.word	0x200072e0
 8003068:	20007328 	.word	0x20007328
 800306c:	080241a0 	.word	0x080241a0
 8003070:	4923      	ldr	r1, [pc, #140]	; (8003100 <StartDefaultTask+0x468>)
 8003072:	4824      	ldr	r0, [pc, #144]	; (8003104 <StartDefaultTask+0x46c>)
 8003074:	f010 fc34 	bl	80138e0 <rcl_publish>
 8003078:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800307c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003080:	2b00      	cmp	r3, #0
 8003082:	d006      	beq.n	8003092 <StartDefaultTask+0x3fa>
 8003084:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003088:	f44f 7164 	mov.w	r1, #912	; 0x390
 800308c:	481e      	ldr	r0, [pc, #120]	; (8003108 <StartDefaultTask+0x470>)
 800308e:	f01d fa99 	bl	80205c4 <iprintf>

    //ピンの初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8003092:	2200      	movs	r2, #0
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	481d      	ldr	r0, [pc, #116]	; (800310c <StartDefaultTask+0x474>)
 8003098:	f002 fc7a 	bl	8005990 <HAL_GPIO_WritePin>

    //CANの設定を実行
	canSetting();
 800309c:	f7ff f8a2 	bl	80021e4 <canSetting>
//	mcmdMoter_Test_Setting();
	mcmdMoter1Setting();
 80030a0:	f7ff f8ca 	bl	8002238 <mcmdMoter1Setting>
	mcmdMoter2Setting();
 80030a4:	f7ff f92c 	bl	8002300 <mcmdMoter2Setting>
	mcmdMoter3Setting();
 80030a8:	f7ff f98e 	bl	80023c8 <mcmdMoter3Setting>
	mcmdMoter4Setting();
 80030ac:	f7ff f9f0 	bl	8002490 <mcmdMoter4Setting>
////	mcmdMoter5Setting();
////	mcmdMoter6Setting();
////	mcmdMoter7Setting();
////	mcmdMoter8Setting();
	servo1Setting();
 80030b0:	f7ff fa52 	bl	8002558 <servo1Setting>
	servo2Setting();
 80030b4:	f7ff fa7c 	bl	80025b0 <servo2Setting>
	servo3Setting();
 80030b8:	f7ff faa6 	bl	8002608 <servo3Setting>
	servo4Setting();
 80030bc:	f7ff fad0 	bl	8002660 <servo4Setting>
	servo5Setting();
 80030c0:	f7ff fafa 	bl	80026b8 <servo5Setting>
	servo6Setting();
 80030c4:	f7ff fb24 	bl	8002710 <servo6Setting>
	airSetting();
 80030c8:	f7ff fb4e 	bl	8002768 <airSetting>

	printf("All Setting Finished\r\n");
 80030cc:	4810      	ldr	r0, [pc, #64]	; (8003110 <StartDefaultTask+0x478>)
 80030ce:	f01d fadf 	bl	8020690 <puts>
	finishCANsetting = true;
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <StartDefaultTask+0x47c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 80030d8:	2064      	movs	r0, #100	; 0x64
 80030da:	f00a fe0b 	bl	800dcf4 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80030de:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80030e2:	a305      	add	r3, pc, #20	; (adr r3, 80030f8 <StartDefaultTask+0x460>)
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	4608      	mov	r0, r1
 80030ea:	f011 fce7 	bl	8014abc <rclc_executor_spin_some>
//	  RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));//printfを見たいときはコメントアウト

	  osDelay(10);
 80030ee:	200a      	movs	r0, #10
 80030f0:	f00a fe00 	bl	800dcf4 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80030f4:	e7f3      	b.n	80030de <StartDefaultTask+0x446>
 80030f6:	bf00      	nop
 80030f8:	05f5e100 	.word	0x05f5e100
 80030fc:	00000000 	.word	0x00000000
 8003100:	20007328 	.word	0x20007328
 8003104:	20007550 	.word	0x20007550
 8003108:	080240b0 	.word	0x080240b0
 800310c:	40020400 	.word	0x40020400
 8003110:	08024188 	.word	0x08024188
 8003114:	2000bdb8 	.word	0x2000bdb8

08003118 <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <StartSysCheckTask+0x3c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d010      	beq.n	800314a <StartSysCheckTask+0x32>
		  if(!finishCheck){
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <StartSysCheckTask+0x40>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	f083 0301 	eor.w	r3, r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <StartSysCheckTask+0x32>
			  osDelay(1000);//このdelayは必要？
 8003136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800313a:	f00a fddb 	bl	800dcf4 <osDelay>
//			  mcmdMotorCecker(&mcmd4M1_struct,MCMD_CTRL_DUTY,0.2f,5000,0.0f);
//			  mcmdMotorCecker(&mcmd4M2_struct,MCMD_CTRL_DUTY,0.2f,5000,0.0f);
//			  mcmdMotorCecker(&mcmd4M3_struct,MCMD_CTRL_DUTY,0.2f,5000,0.0f);
//			  mcmdMotorCecker(&mcmd4M4_struct,MCMD_CTRL_DUTY,0.2f,5000,0.0f);
//			  mcmdMotorCecker(&mcmd4Mt_struct,MCMD_CTRL_DUTY,0.2f,5000,0.0f);
			  base_hand_deployer(0);
 800313e:	2000      	movs	r0, #0
 8003140:	f7ff fcd8 	bl	8002af4 <base_hand_deployer>

			  finishCheck = true;
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <StartSysCheckTask+0x40>)
 8003146:	2201      	movs	r2, #1
 8003148:	701a      	strb	r2, [r3, #0]
//	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,100);
//	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,100);
//	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,100);
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,100);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,100);
	  osDelay(10);
 800314a:	200a      	movs	r0, #10
 800314c:	f00a fdd2 	bl	800dcf4 <osDelay>
	  if(finishCANsetting){
 8003150:	e7e6      	b.n	8003120 <StartSysCheckTask+0x8>
 8003152:	bf00      	nop
 8003154:	2000bdb8 	.word	0x2000bdb8
 8003158:	2000bdcc 	.word	0x2000bdcc

0800315c <StartMotorRunTask>:
	MCMD_SetTarget(&mcmd4M3_struct,dutyLimmiter(cmd_motor[2]));
	MCMD_SetTarget(&mcmd4M4_struct,dutyLimmiter(cmd_motor[3]));
}
/* USER CODE END Header_StartMotorRunTask */
void StartMotorRunTask(void *argument)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //motorRun();

    osDelay(10);
 8003164:	200a      	movs	r0, #10
 8003166:	f00a fdc5 	bl	800dcf4 <osDelay>
 800316a:	e7fb      	b.n	8003164 <StartMotorRunTask+0x8>

0800316c <StartEncorderTask>:
int64_t count1;
int64_t count2;
float quant_per_unit = 1.0/4096.0f;
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
//	  enc.encadditional = Get_MCMD_Feedback(&(mcmd4M6_struct.device)).value;

//	  printf("enc1: %d\r\n",(int)(count1*quant_per_unit));
//	  printf("enc2: %d\r\n",(int)(count2*quant_per_unit));

    osDelay(10);
 8003174:	200a      	movs	r0, #10
 8003176:	f00a fdbd 	bl	800dcf4 <osDelay>
 800317a:	e7fb      	b.n	8003174 <StartEncorderTask+0x8>

0800317c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <MX_GPIO_Init+0xd8>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a2f      	ldr	r2, [pc, #188]	; (8003254 <MX_GPIO_Init+0xd8>)
 8003198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a23      	ldr	r2, [pc, #140]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b21      	ldr	r3, [pc, #132]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a17      	ldr	r2, [pc, #92]	; (8003254 <MX_GPIO_Init+0xd8>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <MX_GPIO_Init+0xd8>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <MX_GPIO_Init+0xd8>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a11      	ldr	r2, [pc, #68]	; (8003254 <MX_GPIO_Init+0xd8>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_GPIO_Init+0xd8>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8003222:	2200      	movs	r2, #0
 8003224:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <MX_GPIO_Init+0xdc>)
 800322a:	f002 fbb1 	bl	8005990 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 800322e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8003232:	61fb      	str	r3, [r7, #28]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003234:	2301      	movs	r3, #1
 8003236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	4619      	mov	r1, r3
 8003246:	4804      	ldr	r0, [pc, #16]	; (8003258 <MX_GPIO_Init+0xdc>)
 8003248:	f002 f9f6 	bl	8005638 <HAL_GPIO_Init>

}
 800324c:	bf00      	nop
 800324e:	3730      	adds	r7, #48	; 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800
 8003258:	40020400 	.word	0x40020400

0800325c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8003266:	1df9      	adds	r1, r7, #7
 8003268:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800326c:	2201      	movs	r2, #1
 800326e:	4804      	ldr	r0, [pc, #16]	; (8003280 <__io_putchar+0x24>)
 8003270:	f005 fc5a 	bl	8008b28 <HAL_UART_Transmit>
    return ch;
 8003274:	79fb      	ldrb	r3, [r7, #7]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000bec4 	.word	0x2000bec4

08003284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003288:	f000 fe31 	bl	8003eee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800328c:	f000 f814 	bl	80032b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003290:	f7ff ff74 	bl	800317c <MX_GPIO_Init>
  MX_DMA_Init();
 8003294:	f7fe fe8c 	bl	8001fb0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003298:	f000 fd00 	bl	8003c9c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800329c:	f000 fbd4 	bl	8003a48 <MX_TIM1_Init>
  MX_CAN1_Init();
 80032a0:	f7fe fba0 	bl	80019e4 <MX_CAN1_Init>
  MX_TIM8_Init();
 80032a4:	f000 fc2a 	bl	8003afc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80032a8:	f00a fc14 	bl	800dad4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80032ac:	f7ff fa80 	bl	80027b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032b0:	f00a fc44 	bl	800db3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <main+0x30>
	...

080032b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b094      	sub	sp, #80	; 0x50
 80032bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032be:	f107 031c 	add.w	r3, r7, #28
 80032c2:	2234      	movs	r2, #52	; 0x34
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f01d fc28 	bl	8020b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032cc:	f107 0308 	add.w	r3, r7, #8
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <SystemClock_Config+0xd8>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <SystemClock_Config+0xd8>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6413      	str	r3, [r2, #64]	; 0x40
 80032e8:	4b29      	ldr	r3, [pc, #164]	; (8003390 <SystemClock_Config+0xd8>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <SystemClock_Config+0xdc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032fc:	4a25      	ldr	r2, [pc, #148]	; (8003394 <SystemClock_Config+0xdc>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <SystemClock_Config+0xdc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003310:	2301      	movs	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003318:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331a:	2302      	movs	r3, #2
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800331e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003322:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003324:	2304      	movs	r3, #4
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003328:	2360      	movs	r3, #96	; 0x60
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800332c:	2302      	movs	r3, #2
 800332e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003330:	2304      	movs	r3, #4
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003334:	2302      	movs	r3, #2
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4618      	mov	r0, r3
 800333e:	f003 fe63 	bl	8007008 <HAL_RCC_OscConfig>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003348:	f000 f835 	bl	80033b6 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800334c:	f003 fe0c 	bl	8006f68 <HAL_PWREx_EnableOverDrive>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003356:	f000 f82e 	bl	80033b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800335a:	230f      	movs	r3, #15
 800335c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800335e:	2302      	movs	r3, #2
 8003360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800336c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003370:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	2103      	movs	r1, #3
 8003378:	4618      	mov	r0, r3
 800337a:	f004 f8f3 	bl	8007564 <HAL_RCC_ClockConfig>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003384:	f000 f817 	bl	80033b6 <Error_Handler>
  }
}
 8003388:	bf00      	nop
 800338a:	3750      	adds	r7, #80	; 0x50
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	40007000 	.word	0x40007000

08003398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80033aa:	f000 fdad 	bl	8003f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80033ba:	b672      	cpsid	i
}
 80033bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033be:	e7fe      	b.n	80033be <Error_Handler+0x8>

080033c0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <microros_allocate+0x3c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <microros_allocate+0x3c>)
 80033d8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80033da:	4b09      	ldr	r3, [pc, #36]	; (8003400 <microros_allocate+0x40>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <microros_allocate+0x40>)
 80033e8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fe fb8c 	bl	8001b08 <pvPortMallocMicroROS>
 80033f0:	4603      	mov	r3, r0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000bdd0 	.word	0x2000bdd0
 8003400:	2000bdd4 	.word	0x2000bdd4

08003404 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00c      	beq.n	800342e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fe fc9f 	bl	8001d58 <getBlockSize>
 800341a:	4603      	mov	r3, r0
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <microros_deallocate+0x34>)
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	461a      	mov	r2, r3
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <microros_deallocate+0x34>)
 8003426:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fe fc37 	bl	8001c9c <vPortFreeMicroROS>
  }
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	2000bdd4 	.word	0x2000bdd4

0800343c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <microros_reallocate+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4413      	add	r3, r2
 8003452:	461a      	mov	r2, r3
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <microros_reallocate+0x64>)
 8003456:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <microros_reallocate+0x68>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4413      	add	r3, r2
 8003462:	461a      	mov	r2, r3
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <microros_reallocate+0x68>)
 8003466:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d104      	bne.n	8003478 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800346e:	68b8      	ldr	r0, [r7, #8]
 8003470:	f7fe fb4a 	bl	8001b08 <pvPortMallocMicroROS>
 8003474:	4603      	mov	r3, r0
 8003476:	e00e      	b.n	8003496 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7fe fc6d 	bl	8001d58 <getBlockSize>
 800347e:	4603      	mov	r3, r0
 8003480:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <microros_reallocate+0x68>)
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	461a      	mov	r2, r3
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <microros_reallocate+0x68>)
 800348a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7fe fc80 	bl	8001d94 <pvPortReallocMicroROS>
 8003494:	4603      	mov	r3, r0
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	2000bdd0 	.word	0x2000bdd0
 80034a4:	2000bdd4 	.word	0x2000bdd4

080034a8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <microros_zero_allocate+0x48>)
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <microros_zero_allocate+0x48>)
 80034c6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <microros_zero_allocate+0x4c>)
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <microros_zero_allocate+0x4c>)
 80034da:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7fe fc85 	bl	8001dee <pvPortCallocMicroROS>
 80034e4:	4603      	mov	r3, r0
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000bdd0 	.word	0x2000bdd0
 80034f4:	2000bdd4 	.word	0x2000bdd4

080034f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80034f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800350a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800350e:	a320      	add	r3, pc, #128	; (adr r3, 8003590 <UTILS_NanosecondsToTimespec+0x98>)
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f7fd f8b8 	bl	8000688 <__aeabi_ldivmod>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003526:	a31a      	add	r3, pc, #104	; (adr r3, 8003590 <UTILS_NanosecondsToTimespec+0x98>)
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f7fd f8ac 	bl	8000688 <__aeabi_ldivmod>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da20      	bge.n	800357e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a11      	ldr	r2, [pc, #68]	; (8003588 <UTILS_NanosecondsToTimespec+0x90>)
 8003542:	fb82 1203 	smull	r1, r2, r2, r3
 8003546:	1712      	asrs	r2, r2, #28
 8003548:	17db      	asrs	r3, r3, #31
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	3301      	adds	r3, #1
 800354e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	6979      	ldr	r1, [r7, #20]
 8003558:	17c8      	asrs	r0, r1, #31
 800355a:	460c      	mov	r4, r1
 800355c:	4605      	mov	r5, r0
 800355e:	ebb2 0804 	subs.w	r8, r2, r4
 8003562:	eb63 0905 	sbc.w	r9, r3, r5
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	4906      	ldr	r1, [pc, #24]	; (800358c <UTILS_NanosecondsToTimespec+0x94>)
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]
    }
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003588:	44b82fa1 	.word	0x44b82fa1
 800358c:	3b9aca00 	.word	0x3b9aca00
 8003590:	3b9aca00 	.word	0x3b9aca00
 8003594:	00000000 	.word	0x00000000

08003598 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b08e      	sub	sp, #56	; 0x38
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6278      	str	r0, [r7, #36]	; 0x24
 80035a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80035a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035a8:	2300      	movs	r3, #0
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80035ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035be:	4618      	mov	r0, r3
 80035c0:	f00b fe96 	bl	800f2f0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	17da      	asrs	r2, r3, #31
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	61fa      	str	r2, [r7, #28]
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	69b9      	ldr	r1, [r7, #24]
 80035d6:	000b      	movs	r3, r1
 80035d8:	2200      	movs	r2, #0
 80035da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	2200      	movs	r2, #0
 80035e2:	461c      	mov	r4, r3
 80035e4:	4615      	mov	r5, r2
 80035e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035ea:	1911      	adds	r1, r2, r4
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	416b      	adcs	r3, r5
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80035fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	f04f 0400 	mov.w	r4, #0
 8003606:	f04f 0500 	mov.w	r5, #0
 800360a:	015d      	lsls	r5, r3, #5
 800360c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003610:	0154      	lsls	r4, r2, #5
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	ebb2 0800 	subs.w	r8, r2, r0
 800361a:	eb63 0901 	sbc.w	r9, r3, r1
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800362a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800362e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003632:	4690      	mov	r8, r2
 8003634:	4699      	mov	r9, r3
 8003636:	eb18 0a00 	adds.w	sl, r8, r0
 800363a:	eb49 0b01 	adc.w	fp, r9, r1
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800364a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800364e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003652:	ebb2 040a 	subs.w	r4, r2, sl
 8003656:	603c      	str	r4, [r7, #0]
 8003658:	eb63 030b 	sbc.w	r3, r3, fp
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003662:	4623      	mov	r3, r4
 8003664:	181b      	adds	r3, r3, r0
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	462b      	mov	r3, r5
 800366a:	eb41 0303 	adc.w	r3, r1, r3
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003676:	f7ff ff3f 	bl	80034f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800367a:	2300      	movs	r3, #0
 800367c:	4618      	mov	r0, r3
 800367e:	3738      	adds	r7, #56	; 0x38
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_MspInit+0x4c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <HAL_MspInit+0x4c>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_MspInit+0x4c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_MspInit+0x4c>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_MspInit+0x4c>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	; 0x44
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_MspInit+0x4c>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	210f      	movs	r1, #15
 80036c2:	f06f 0001 	mvn.w	r0, #1
 80036c6:	f001 fb77 	bl	8004db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800

080036d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_InitTick+0xe4>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <HAL_InitTick+0xe4>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6413      	str	r3, [r2, #64]	; 0x40
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_InitTick+0xe4>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003700:	f107 0210 	add.w	r2, r7, #16
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f004 f950 	bl	80079b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800371a:	f004 f921 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 800371e:	6378      	str	r0, [r7, #52]	; 0x34
 8003720:	e004      	b.n	800372c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003722:	f004 f91d 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 8003726:	4603      	mov	r3, r0
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <HAL_InitTick+0xe8>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	3b01      	subs	r3, #1
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <HAL_InitTick+0xec>)
 800373c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003740:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_InitTick+0xec>)
 8003744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003748:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_InitTick+0xec>)
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_InitTick+0xec>)
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_InitTick+0xec>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_InitTick+0xec>)
 800375e:	2200      	movs	r2, #0
 8003760:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8003762:	4818      	ldr	r0, [pc, #96]	; (80037c4 <HAL_InitTick+0xec>)
 8003764:	f004 fd7e 	bl	8008264 <HAL_TIM_Base_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800376e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11b      	bne.n	80037ae <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003776:	4813      	ldr	r0, [pc, #76]	; (80037c4 <HAL_InitTick+0xec>)
 8003778:	f004 fdd6 	bl	8008328 <HAL_TIM_Base_Start_IT>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003786:	2b00      	cmp	r3, #0
 8003788:	d111      	bne.n	80037ae <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800378a:	201c      	movs	r0, #28
 800378c:	f001 fb30 	bl	8004df0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	d808      	bhi.n	80037a8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003796:	2200      	movs	r2, #0
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	201c      	movs	r0, #28
 800379c:	f001 fb0c 	bl	8004db8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_InitTick+0xf0>)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e002      	b.n	80037ae <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3738      	adds	r7, #56	; 0x38
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	2000bdd8 	.word	0x2000bdd8
 80037c8:	20000008 	.word	0x20000008

080037cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <NMI_Handler+0x4>

080037d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80037fc:	4802      	ldr	r0, [pc, #8]	; (8003808 <DMA1_Stream1_IRQHandler+0x10>)
 80037fe:	f001 fca5 	bl	800514c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2000bf4c 	.word	0x2000bf4c

0800380c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003810:	4802      	ldr	r0, [pc, #8]	; (800381c <DMA1_Stream3_IRQHandler+0x10>)
 8003812:	f001 fc9b 	bl	800514c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2000bfac 	.word	0x2000bfac

08003820 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <CAN1_TX_IRQHandler+0x10>)
 8003826:	f001 f81c 	bl	8004862 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20002e44 	.word	0x20002e44

08003834 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <CAN1_RX0_IRQHandler+0x10>)
 800383a:	f001 f812 	bl	8004862 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20002e44 	.word	0x20002e44

08003848 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <CAN1_RX1_IRQHandler+0x10>)
 800384e:	f001 f808 	bl	8004862 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20002e44 	.word	0x20002e44

0800385c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003860:	4802      	ldr	r0, [pc, #8]	; (800386c <TIM2_IRQHandler+0x10>)
 8003862:	f004 fe7f 	bl	8008564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000bdd8 	.word	0x2000bdd8

08003870 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <USART3_IRQHandler+0x10>)
 8003876:	f005 fb2d 	bl	8008ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	2000bec4 	.word	0x2000bec4

08003884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <OTG_FS_IRQHandler+0x10>)
 800388a:	f002 f9fa 	bl	8005c82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20011e38 	.word	0x20011e38

08003898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return 1;
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_kill>:

int _kill(int pid, int sig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038b2:	f01d f9cb 	bl	8020c4c <__errno>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2216      	movs	r2, #22
 80038ba:	601a      	str	r2, [r3, #0]
  return -1;
 80038bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_exit>:

void _exit (int status)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ffe7 	bl	80038a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038da:	e7fe      	b.n	80038da <_exit+0x12>

080038dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	e00a      	b.n	8003904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038ee:	f3af 8000 	nop.w
 80038f2:	4601      	mov	r1, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	60ba      	str	r2, [r7, #8]
 80038fa:	b2ca      	uxtb	r2, r1
 80038fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3301      	adds	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	dbf0      	blt.n	80038ee <_read+0x12>
  }

  return len;
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e009      	b.n	800393c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	60ba      	str	r2, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fc93 	bl	800325c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbf1      	blt.n	8003928 <_write+0x12>
  }
  return len;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_close>:

int _close(int file)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003976:	605a      	str	r2, [r3, #4]
  return 0;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <_isatty>:

int _isatty(int file)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800398e:	2301      	movs	r3, #1
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c0:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <_sbrk+0x5c>)
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <_sbrk+0x60>)
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <_sbrk+0x64>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <_sbrk+0x64>)
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <_sbrk+0x68>)
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <_sbrk+0x64>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d207      	bcs.n	80039f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e8:	f01d f930 	bl	8020c4c <__errno>
 80039ec:	4603      	mov	r3, r0
 80039ee:	220c      	movs	r2, #12
 80039f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039f6:	e009      	b.n	8003a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <_sbrk+0x64>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <_sbrk+0x64>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <_sbrk+0x64>)
 8003a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20080000 	.word	0x20080000
 8003a18:	00000400 	.word	0x00000400
 8003a1c:	2000be28 	.word	0x2000be28
 8003a20:	200171b0 	.word	0x200171b0

08003a24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <SystemInit+0x20>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <SystemInit+0x20>)
 8003a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	; 0x30
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a4e:	f107 030c 	add.w	r3, r7, #12
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f01d f860 	bl	8020b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a66:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003a68:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <MX_TIM1_Init+0xb0>)
 8003a6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a6c:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a92:	2303      	movs	r3, #3
 8003a94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	4619      	mov	r1, r3
 8003abc:	480d      	ldr	r0, [pc, #52]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003abe:	f004 fcab 	bl	8008418 <HAL_TIM_Encoder_Init>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003ac8:	f7ff fc75 	bl	80033b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003acc:	2300      	movs	r3, #0
 8003ace:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ad8:	463b      	mov	r3, r7
 8003ada:	4619      	mov	r1, r3
 8003adc:	4805      	ldr	r0, [pc, #20]	; (8003af4 <MX_TIM1_Init+0xac>)
 8003ade:	f004 ff29 	bl	8008934 <HAL_TIMEx_MasterConfigSynchronization>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003ae8:	f7ff fc65 	bl	80033b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003aec:	bf00      	nop
 8003aee:	3730      	adds	r7, #48	; 0x30
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	2000be2c 	.word	0x2000be2c
 8003af8:	40010000 	.word	0x40010000

08003afc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f01d f806 	bl	8020b1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b10:	463b      	mov	r3, r7
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b1c:	4a23      	ldr	r2, [pc, #140]	; (8003bac <MX_TIM8_Init+0xb0>)
 8003b1e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003b2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b32:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b34:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b46:	2303      	movs	r3, #3
 8003b48:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b62:	2300      	movs	r3, #0
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003b6a:	f107 030c 	add.w	r3, r7, #12
 8003b6e:	4619      	mov	r1, r3
 8003b70:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b72:	f004 fc51 	bl	8008418 <HAL_TIM_Encoder_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003b7c:	f7ff fc1b 	bl	80033b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_TIM8_Init+0xac>)
 8003b92:	f004 fecf 	bl	8008934 <HAL_TIMEx_MasterConfigSynchronization>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003b9c:	f7ff fc0b 	bl	80033b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003ba0:	bf00      	nop
 8003ba2:	3730      	adds	r7, #48	; 0x30
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	2000be78 	.word	0x2000be78
 8003bac:	40010400 	.word	0x40010400

08003bb0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2e      	ldr	r2, [pc, #184]	; (8003c88 <HAL_TIM_Encoder_MspInit+0xd8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d129      	bne.n	8003c26 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bde:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bea:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003bf0:	f043 0310 	orr.w	r3, r3, #16
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003c02:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c14:	2301      	movs	r3, #1
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	481c      	ldr	r0, [pc, #112]	; (8003c90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003c20:	f001 fd0a 	bl	8005638 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003c24:	e02c      	b.n	8003c80 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(tim_encoderHandle->Instance==TIM8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d127      	bne.n	8003c80 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c30:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c48:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003c4e:	f043 0304 	orr.w	r3, r3, #4
 8003c52:	6313      	str	r3, [r2, #48]	; 0x30
 8003c54:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c60:	23c0      	movs	r3, #192	; 0xc0
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c70:	2303      	movs	r3, #3
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c74:	f107 031c 	add.w	r3, r7, #28
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4807      	ldr	r0, [pc, #28]	; (8003c98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c7c:	f001 fcdc 	bl	8005638 <HAL_GPIO_Init>
}
 8003c80:	bf00      	nop
 8003c82:	3730      	adds	r7, #48	; 0x30
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40020800 	.word	0x40020800

08003c9c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <MX_USART3_UART_Init+0x5c>)
 8003ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003cde:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <MX_USART3_UART_Init+0x58>)
 8003ce0:	f004 fed4 	bl	8008a8c <HAL_UART_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003cea:	f7ff fb64 	bl	80033b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000bec4 	.word	0x2000bec4
 8003cf8:	40004800 	.word	0x40004800

08003cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0ae      	sub	sp, #184	; 0xb8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2290      	movs	r2, #144	; 0x90
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f01c fefd 	bl	8020b1c <memset>
  if(uartHandle->Instance==USART3)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a56      	ldr	r2, [pc, #344]	; (8003e80 <HAL_UART_MspInit+0x184>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	f040 80a4 	bne.w	8003e76 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003d34:	2300      	movs	r3, #0
 8003d36:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 fe69 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003d48:	f7ff fb35 	bl	80033b6 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d4c:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <HAL_UART_MspInit+0x188>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a4c      	ldr	r2, [pc, #304]	; (8003e84 <HAL_UART_MspInit+0x188>)
 8003d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_UART_MspInit+0x188>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d64:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_UART_MspInit+0x188>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4a46      	ldr	r2, [pc, #280]	; (8003e84 <HAL_UART_MspInit+0x188>)
 8003d6a:	f043 0308 	orr.w	r3, r3, #8
 8003d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d70:	4b44      	ldr	r3, [pc, #272]	; (8003e84 <HAL_UART_MspInit+0x188>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d84:	2302      	movs	r3, #2
 8003d86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d96:	2307      	movs	r3, #7
 8003d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4839      	ldr	r0, [pc, #228]	; (8003e88 <HAL_UART_MspInit+0x18c>)
 8003da4:	f001 fc48 	bl	8005638 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003da8:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003daa:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <HAL_UART_MspInit+0x194>)
 8003dac:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003dae:	4b37      	ldr	r3, [pc, #220]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003db6:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dbc:	4b33      	ldr	r3, [pc, #204]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dc2:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dc8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dca:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dd0:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003dd6:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ddc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dde:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003de0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003de4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003dec:	4827      	ldr	r0, [pc, #156]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003dee:	f001 f80d 	bl	8004e0c <HAL_DMA_Init>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8003df8:	f7ff fadd 	bl	80033b6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003e00:	675a      	str	r2, [r3, #116]	; 0x74
 8003e02:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_UART_MspInit+0x190>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003e08:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e0a:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <HAL_UART_MspInit+0x19c>)
 8003e0c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003e0e:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e14:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e18:	2240      	movs	r2, #64	; 0x40
 8003e1a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e28:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e3c:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e42:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003e4a:	4812      	ldr	r0, [pc, #72]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e4c:	f000 ffde 	bl	8004e0c <HAL_DMA_Init>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003e56:	f7ff faae 	bl	80033b6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e5e:	671a      	str	r2, [r3, #112]	; 0x70
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <HAL_UART_MspInit+0x198>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2105      	movs	r1, #5
 8003e6a:	2027      	movs	r0, #39	; 0x27
 8003e6c:	f000 ffa4 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e70:	2027      	movs	r0, #39	; 0x27
 8003e72:	f000 ffbd 	bl	8004df0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003e76:	bf00      	nop
 8003e78:	37b8      	adds	r7, #184	; 0xb8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40004800 	.word	0x40004800
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020c00 	.word	0x40020c00
 8003e8c:	2000bf4c 	.word	0x2000bf4c
 8003e90:	40026028 	.word	0x40026028
 8003e94:	2000bfac 	.word	0x2000bfac
 8003e98:	40026058 	.word	0x40026058

08003e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ea2:	490e      	ldr	r1, [pc, #56]	; (8003edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eb8:	4c0b      	ldr	r4, [pc, #44]	; (8003ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ec6:	f7ff fdad 	bl	8003a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eca:	f01c fec5 	bl	8020c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ece:	f7ff f9d9 	bl	8003284 <main>
  bx  lr    
 8003ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ed4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003edc:	20000b48 	.word	0x20000b48
  ldr r2, =_sidata
 8003ee0:	08025d00 	.word	0x08025d00
  ldr r2, =_sbss
 8003ee4:	20000b48 	.word	0x20000b48
  ldr r4, =_ebss
 8003ee8:	200171b0 	.word	0x200171b0

08003eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003eec:	e7fe      	b.n	8003eec <ADC_IRQHandler>

08003eee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef2:	2003      	movs	r0, #3
 8003ef4:	f000 ff55 	bl	8004da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ef8:	200f      	movs	r0, #15
 8003efa:	f7ff fbed 	bl	80036d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003efe:	f7ff fbc3 	bl	8003688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x20>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_IncTick+0x24>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <HAL_IncTick+0x24>)
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000000c 	.word	0x2000000c
 8003f2c:	2000c00c 	.word	0x2000c00c

08003f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return uwTick;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_GetTick+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	2000c00c 	.word	0x2000c00c

08003f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7ff ffee 	bl	8003f30 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f60:	d005      	beq.n	8003f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_Delay+0x44>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6e:	bf00      	nop
 8003f70:	f7ff ffde 	bl	8003f30 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8f7      	bhi.n	8003f70 <HAL_Delay+0x28>
  {
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2000000c 	.word	0x2000000c

08003f90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0ed      	b.n	800417e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fd4e 	bl	8001a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc4:	f7ff ffb4 	bl	8003f30 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003fca:	e012      	b.n	8003ff2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fcc:	f7ff ffb0 	bl	8003f30 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b0a      	cmp	r3, #10
 8003fd8:	d90b      	bls.n	8003ff2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2205      	movs	r2, #5
 8003fea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0c5      	b.n	800417e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0e5      	beq.n	8003fcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0202 	bic.w	r2, r2, #2
 800400e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004010:	f7ff ff8e 	bl	8003f30 <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004016:	e012      	b.n	800403e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004018:	f7ff ff8a 	bl	8003f30 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b0a      	cmp	r3, #10
 8004024:	d90b      	bls.n	800403e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2205      	movs	r2, #5
 8004036:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e09f      	b.n	800417e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7e1b      	ldrb	r3, [r3, #24]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d108      	bne.n	8004066 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	e007      	b.n	8004076 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7e5b      	ldrb	r3, [r3, #25]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e007      	b.n	80040a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	7e9b      	ldrb	r3, [r3, #26]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d108      	bne.n	80040ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0220 	orr.w	r2, r2, #32
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e007      	b.n	80040ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0220 	bic.w	r2, r2, #32
 80040c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7edb      	ldrb	r3, [r3, #27]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d108      	bne.n	80040e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0210 	bic.w	r2, r2, #16
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e007      	b.n	80040f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0210 	orr.w	r2, r2, #16
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7f1b      	ldrb	r3, [r3, #28]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d108      	bne.n	800410e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0208 	orr.w	r2, r2, #8
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e007      	b.n	800411e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0208 	bic.w	r2, r2, #8
 800411c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7f5b      	ldrb	r3, [r3, #29]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d108      	bne.n	8004138 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0204 	orr.w	r2, r2, #4
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e007      	b.n	8004148 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0204 	bic.w	r2, r2, #4
 8004146:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	ea42 0103 	orr.w	r1, r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	1e5a      	subs	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800419e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d003      	beq.n	80041ae <HAL_CAN_ConfigFilter+0x26>
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	f040 80c7 	bne.w	800433c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a69      	ldr	r2, [pc, #420]	; (8004358 <HAL_CAN_ConfigFilter+0x1d0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d001      	beq.n	80041bc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80041b8:	4b68      	ldr	r3, [pc, #416]	; (800435c <HAL_CAN_ConfigFilter+0x1d4>)
 80041ba:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4a63      	ldr	r2, [pc, #396]	; (800435c <HAL_CAN_ConfigFilter+0x1d4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d111      	bne.n	80041f8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	431a      	orrs	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	2201      	movs	r2, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d123      	bne.n	800426a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	43db      	mvns	r3, r3
 800422c:	401a      	ands	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004244:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	3248      	adds	r2, #72	; 0x48
 800424a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800425e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004260:	6979      	ldr	r1, [r7, #20]
 8004262:	3348      	adds	r3, #72	; 0x48
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	440b      	add	r3, r1
 8004268:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d122      	bne.n	80042b8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	431a      	orrs	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004292:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3248      	adds	r2, #72	; 0x48
 8004298:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	3348      	adds	r3, #72	; 0x48
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	440b      	add	r3, r1
 80042b6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	401a      	ands	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80042d2:	e007      	b.n	80042e4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	431a      	orrs	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	401a      	ands	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80042fe:	e007      	b.n	8004310 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	431a      	orrs	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	431a      	orrs	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800432e:	f023 0201 	bic.w	r2, r3, #1
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e006      	b.n	800434a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40003400 	.word	0x40003400
 800435c:	40006400 	.word	0x40006400

08004360 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d12e      	bne.n	80043d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800438c:	f7ff fdd0 	bl	8003f30 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004392:	e012      	b.n	80043ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004394:	f7ff fdcc 	bl	8003f30 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b0a      	cmp	r3, #10
 80043a0:	d90b      	bls.n	80043ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2205      	movs	r2, #5
 80043b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e012      	b.n	80043e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e5      	bne.n	8004394 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e006      	b.n	80043e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	; 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004406:	7ffb      	ldrb	r3, [r7, #31]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d003      	beq.n	8004414 <HAL_CAN_AddTxMessage+0x2c>
 800440c:	7ffb      	ldrb	r3, [r7, #31]
 800440e:	2b02      	cmp	r3, #2
 8004410:	f040 80ad 	bne.w	800456e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8095 	beq.w	800455e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	0e1b      	lsrs	r3, r3, #24
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800443e:	2201      	movs	r2, #1
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	409a      	lsls	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10d      	bne.n	800446c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	6809      	ldr	r1, [r1, #0]
 800445e:	431a      	orrs	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3318      	adds	r3, #24
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	440b      	add	r3, r1
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e00f      	b.n	800448c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004476:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004480:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	3318      	adds	r3, #24
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	440b      	add	r3, r1
 800448a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3318      	adds	r3, #24
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	440b      	add	r3, r1
 800449c:	3304      	adds	r3, #4
 800449e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	7d1b      	ldrb	r3, [r3, #20]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d111      	bne.n	80044cc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3318      	adds	r3, #24
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	6811      	ldr	r1, [r2, #0]
 80044bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3318      	adds	r3, #24
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	440b      	add	r3, r1
 80044c8:	3304      	adds	r3, #4
 80044ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3307      	adds	r3, #7
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	061a      	lsls	r2, r3, #24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3306      	adds	r3, #6
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3305      	adds	r3, #5
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	4313      	orrs	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	3204      	adds	r2, #4
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	4610      	mov	r0, r2
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	6811      	ldr	r1, [r2, #0]
 80044f4:	ea43 0200 	orr.w	r2, r3, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004502:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3303      	adds	r3, #3
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	061a      	lsls	r2, r3, #24
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3302      	adds	r3, #2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3301      	adds	r3, #1
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	4313      	orrs	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	7812      	ldrb	r2, [r2, #0]
 8004524:	4610      	mov	r0, r2
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	6811      	ldr	r1, [r2, #0]
 800452a:	ea43 0200 	orr.w	r2, r3, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	440b      	add	r3, r1
 8004534:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004538:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	3318      	adds	r3, #24
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	6811      	ldr	r1, [r2, #0]
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3318      	adds	r3, #24
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	440b      	add	r3, r1
 8004558:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e00e      	b.n	800457c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e006      	b.n	800457c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3724      	adds	r7, #36	; 0x24
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800459a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800459c:	7afb      	ldrb	r3, [r7, #11]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d002      	beq.n	80045a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80045a2:	7afb      	ldrb	r3, [r7, #11]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d11d      	bne.n	80045e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80045e4:	68fb      	ldr	r3, [r7, #12]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004606:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d003      	beq.n	8004616 <HAL_CAN_GetRxMessage+0x24>
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b02      	cmp	r3, #2
 8004612:	f040 80f3 	bne.w	80047fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10e      	bne.n	800463a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0e7      	b.n	800480a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0d8      	b.n	800480a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	331b      	adds	r3, #27
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	4413      	add	r3, r2
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0204 	and.w	r2, r3, #4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	331b      	adds	r3, #27
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	4413      	add	r3, r2
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	0d5b      	lsrs	r3, r3, #21
 8004686:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	331b      	adds	r3, #27
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	4413      	add	r3, r2
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	08db      	lsrs	r3, r3, #3
 80046a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	331b      	adds	r3, #27
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	4413      	add	r3, r2
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0202 	and.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	331b      	adds	r3, #27
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 020f 	and.w	r2, r3, #15
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	331b      	adds	r3, #27
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	4413      	add	r3, r2
 80046e2:	3304      	adds	r3, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	331b      	adds	r3, #27
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	4413      	add	r3, r2
 80046fa:	3304      	adds	r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	0c1b      	lsrs	r3, r3, #16
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	4413      	add	r3, r2
 8004710:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	4413      	add	r3, r2
 8004726:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	0a1a      	lsrs	r2, r3, #8
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	4413      	add	r3, r2
 8004740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	0c1a      	lsrs	r2, r3, #16
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	3302      	adds	r3, #2
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	4413      	add	r3, r2
 800475a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0e1a      	lsrs	r2, r3, #24
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	3303      	adds	r3, #3
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	4413      	add	r3, r2
 8004774:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	3304      	adds	r3, #4
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	4413      	add	r3, r2
 800478c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	0a1a      	lsrs	r2, r3, #8
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	3305      	adds	r3, #5
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	0c1a      	lsrs	r2, r3, #16
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	3306      	adds	r3, #6
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4413      	add	r3, r2
 80047c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	0e1a      	lsrs	r2, r3, #24
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	3307      	adds	r3, #7
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0220 	orr.w	r2, r2, #32
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	e007      	b.n	80047f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0220 	orr.w	r2, r2, #32
 80047f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e006      	b.n	800480a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004826:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d002      	beq.n	8004834 <HAL_CAN_ActivateNotification+0x1e>
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d109      	bne.n	8004848 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6959      	ldr	r1, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e006      	b.n	8004856 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08a      	sub	sp, #40	; 0x28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d07c      	beq.n	80049a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d023      	beq.n	80048fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fd fc43 	bl	8002150 <HAL_CAN_TxMailbox0CompleteCallback>
 80048ca:	e016      	b.n	80048fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
 80048de:	e00c      	b.n	80048fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
 80048f2:	e002      	b.n	80048fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fd fc35 	bl	8002164 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d024      	beq.n	800494e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fd fc2d 	bl	8002178 <HAL_CAN_TxMailbox1CompleteCallback>
 800491e:	e016      	b.n	800494e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	e00c      	b.n	800494e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	e002      	b.n	800494e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fd fc1f 	bl	800218c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d024      	beq.n	80049a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fd fc17 	bl	80021a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004972:	e016      	b.n	80049a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	e00c      	b.n	80049a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e002      	b.n	80049a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fd fc09 	bl	80021b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00c      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d006      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2208      	movs	r2, #8
 80049e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8f4 	bl	8004bd0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7fd fbe1 	bl	80021c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2210      	movs	r2, #16
 8004a28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d006      	beq.n	8004a4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2208      	movs	r2, #8
 8004a44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8d6 	bl	8004bf8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8bd 	bl	8004be4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d006      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2210      	movs	r2, #16
 8004a84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8c0 	bl	8004c0c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8b9 	bl	8004c20 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d07b      	beq.n	8004bb0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d072      	beq.n	8004ba8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	f043 0302 	orr.w	r3, r3, #2
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	f043 0304 	orr.w	r3, r3, #4
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d043      	beq.n	8004ba8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03e      	beq.n	8004ba8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b30:	2b60      	cmp	r3, #96	; 0x60
 8004b32:	d02b      	beq.n	8004b8c <HAL_CAN_IRQHandler+0x32a>
 8004b34:	2b60      	cmp	r3, #96	; 0x60
 8004b36:	d82e      	bhi.n	8004b96 <HAL_CAN_IRQHandler+0x334>
 8004b38:	2b50      	cmp	r3, #80	; 0x50
 8004b3a:	d022      	beq.n	8004b82 <HAL_CAN_IRQHandler+0x320>
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d82a      	bhi.n	8004b96 <HAL_CAN_IRQHandler+0x334>
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d019      	beq.n	8004b78 <HAL_CAN_IRQHandler+0x316>
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d826      	bhi.n	8004b96 <HAL_CAN_IRQHandler+0x334>
 8004b48:	2b30      	cmp	r3, #48	; 0x30
 8004b4a:	d010      	beq.n	8004b6e <HAL_CAN_IRQHandler+0x30c>
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d822      	bhi.n	8004b96 <HAL_CAN_IRQHandler+0x334>
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d002      	beq.n	8004b5a <HAL_CAN_IRQHandler+0x2f8>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d005      	beq.n	8004b64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004b58:	e01d      	b.n	8004b96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f043 0308 	orr.w	r3, r3, #8
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b62:	e019      	b.n	8004b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	f043 0310 	orr.w	r3, r3, #16
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b6c:	e014      	b.n	8004b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	f043 0320 	orr.w	r3, r3, #32
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b76:	e00f      	b.n	8004b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b80:	e00a      	b.n	8004b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b8a:	e005      	b.n	8004b98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b94:	e000      	b.n	8004b98 <HAL_CAN_IRQHandler+0x336>
            break;
 8004b96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ba6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2204      	movs	r2, #4
 8004bae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f836 	bl	8004c34 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004bc8:	bf00      	nop
 8004bca:	3728      	adds	r7, #40	; 0x28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <__NVIC_SetPriorityGrouping+0x40>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c64:	4013      	ands	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <__NVIC_SetPriorityGrouping+0x44>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <__NVIC_SetPriorityGrouping+0x40>)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	60d3      	str	r3, [r2, #12]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	e000ed00 	.word	0xe000ed00
 8004c8c:	05fa0000 	.word	0x05fa0000

08004c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	f003 0307 	and.w	r3, r3, #7
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	e000ed00 	.word	0xe000ed00

08004cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	db0b      	blt.n	8004cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	f003 021f 	and.w	r2, r3, #31
 8004cc4:	4907      	ldr	r1, [pc, #28]	; (8004ce4 <__NVIC_EnableIRQ+0x38>)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2001      	movs	r0, #1
 8004cce:	fa00 f202 	lsl.w	r2, r0, r2
 8004cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	e000e100 	.word	0xe000e100

08004ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	db0a      	blt.n	8004d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	490c      	ldr	r1, [pc, #48]	; (8004d34 <__NVIC_SetPriority+0x4c>)
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	0112      	lsls	r2, r2, #4
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d10:	e00a      	b.n	8004d28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4908      	ldr	r1, [pc, #32]	; (8004d38 <__NVIC_SetPriority+0x50>)
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	3b04      	subs	r3, #4
 8004d20:	0112      	lsls	r2, r2, #4
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	440b      	add	r3, r1
 8004d26:	761a      	strb	r2, [r3, #24]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	e000e100 	.word	0xe000e100
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b089      	sub	sp, #36	; 0x24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f1c3 0307 	rsb	r3, r3, #7
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	bf28      	it	cs
 8004d5a:	2304      	movcs	r3, #4
 8004d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3304      	adds	r3, #4
 8004d62:	2b06      	cmp	r3, #6
 8004d64:	d902      	bls.n	8004d6c <NVIC_EncodePriority+0x30>
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3b03      	subs	r3, #3
 8004d6a:	e000      	b.n	8004d6e <NVIC_EncodePriority+0x32>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43da      	mvns	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	401a      	ands	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	43d9      	mvns	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d94:	4313      	orrs	r3, r2
         );
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3724      	adds	r7, #36	; 0x24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ff4c 	bl	8004c48 <__NVIC_SetPriorityGrouping>
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dca:	f7ff ff61 	bl	8004c90 <__NVIC_GetPriorityGrouping>
 8004dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	6978      	ldr	r0, [r7, #20]
 8004dd6:	f7ff ffb1 	bl	8004d3c <NVIC_EncodePriority>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff ff80 	bl	8004ce8 <__NVIC_SetPriority>
}
 8004de8:	bf00      	nop
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ff54 	bl	8004cac <__NVIC_EnableIRQ>
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7ff f88a 	bl	8003f30 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e099      	b.n	8004f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e48:	e00f      	b.n	8004e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e4a:	f7ff f871 	bl	8003f30 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d908      	bls.n	8004e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2203      	movs	r2, #3
 8004e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e078      	b.n	8004f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e8      	bne.n	8004e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <HAL_DMA_Init+0x158>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d107      	bne.n	8004ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d117      	bne.n	8004f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00e      	beq.n	8004f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb15 	bl	8005540 <DMA_CheckFifoParam>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2240      	movs	r2, #64	; 0x40
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e016      	b.n	8004f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 facc 	bl	80054d4 <DMA_CalcBaseAndBitshift>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f44:	223f      	movs	r2, #63	; 0x3f
 8004f46:	409a      	lsls	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	e010803f 	.word	0xe010803f

08004f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_DMA_Start_IT+0x26>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e048      	b.n	8005020 <HAL_DMA_Start_IT+0xb8>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d137      	bne.n	8005012 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fa5e 	bl	8005478 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	223f      	movs	r2, #63	; 0x3f
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0216 	orr.w	r2, r2, #22
 8004fd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0208 	orr.w	r2, r2, #8
 8004ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e005      	b.n	800501e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800501a:	2302      	movs	r3, #2
 800501c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800501e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005036:	f7fe ff7b 	bl	8003f30 <HAL_GetTick>
 800503a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d008      	beq.n	800505a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2280      	movs	r2, #128	; 0x80
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e052      	b.n	8005100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0216 	bic.w	r2, r2, #22
 8005068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <HAL_DMA_Abort+0x62>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 0208 	bic.w	r2, r2, #8
 8005098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050aa:	e013      	b.n	80050d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ac:	f7fe ff40 	bl	8003f30 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d90c      	bls.n	80050d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2203      	movs	r2, #3
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e015      	b.n	8005100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e4      	bne.n	80050ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	223f      	movs	r2, #63	; 0x3f
 80050e8:	409a      	lsls	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d004      	beq.n	8005126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2280      	movs	r2, #128	; 0x80
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e00c      	b.n	8005140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2205      	movs	r2, #5
 800512a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005158:	4b8e      	ldr	r3, [pc, #568]	; (8005394 <HAL_DMA_IRQHandler+0x248>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a8e      	ldr	r2, [pc, #568]	; (8005398 <HAL_DMA_IRQHandler+0x24c>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	0a9b      	lsrs	r3, r3, #10
 8005164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	2208      	movs	r2, #8
 8005178:	409a      	lsls	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4013      	ands	r3, r2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01a      	beq.n	80051b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d013      	beq.n	80051b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	2208      	movs	r2, #8
 80051a6:	409a      	lsls	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	f043 0201 	orr.w	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051bc:	2201      	movs	r2, #1
 80051be:	409a      	lsls	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d012      	beq.n	80051ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00b      	beq.n	80051ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	2201      	movs	r2, #1
 80051dc:	409a      	lsls	r2, r3
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f043 0202 	orr.w	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	2204      	movs	r2, #4
 80051f4:	409a      	lsls	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d012      	beq.n	8005224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	2204      	movs	r2, #4
 8005212:	409a      	lsls	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521c:	f043 0204 	orr.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005228:	2210      	movs	r2, #16
 800522a:	409a      	lsls	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4013      	ands	r3, r2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d043      	beq.n	80052bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d03c      	beq.n	80052bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005246:	2210      	movs	r2, #16
 8005248:	409a      	lsls	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d018      	beq.n	800528e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d108      	bne.n	800527c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d024      	beq.n	80052bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	4798      	blx	r3
 800527a:	e01f      	b.n	80052bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
 800528c:	e016      	b.n	80052bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d107      	bne.n	80052ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0208 	bic.w	r2, r2, #8
 80052aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c0:	2220      	movs	r2, #32
 80052c2:	409a      	lsls	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 808f 	beq.w	80053ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8087 	beq.w	80053ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	2220      	movs	r2, #32
 80052e4:	409a      	lsls	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d136      	bne.n	8005364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0216 	bic.w	r2, r2, #22
 8005304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d103      	bne.n	8005326 <HAL_DMA_IRQHandler+0x1da>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0208 	bic.w	r2, r2, #8
 8005334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533a:	223f      	movs	r2, #63	; 0x3f
 800533c:	409a      	lsls	r2, r3
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005356:	2b00      	cmp	r3, #0
 8005358:	d07e      	beq.n	8005458 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
        }
        return;
 8005362:	e079      	b.n	8005458 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01d      	beq.n	80053ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10d      	bne.n	800539c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	2b00      	cmp	r3, #0
 8005386:	d031      	beq.n	80053ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
 8005390:	e02c      	b.n	80053ec <HAL_DMA_IRQHandler+0x2a0>
 8005392:	bf00      	nop
 8005394:	20000004 	.word	0x20000004
 8005398:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d023      	beq.n	80053ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
 80053ac:	e01e      	b.n	80053ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10f      	bne.n	80053dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0210 	bic.w	r2, r2, #16
 80053ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d032      	beq.n	800545a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d022      	beq.n	8005446 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2205      	movs	r2, #5
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	3301      	adds	r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	d307      	bcc.n	8005434 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f2      	bne.n	8005418 <HAL_DMA_IRQHandler+0x2cc>
 8005432:	e000      	b.n	8005436 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005434:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
 8005456:	e000      	b.n	800545a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005458:	bf00      	nop
    }
  }
}
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005494:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d108      	bne.n	80054b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054b6:	e007      	b.n	80054c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	3b10      	subs	r3, #16
 80054e4:	4a13      	ldr	r2, [pc, #76]	; (8005534 <DMA_CalcBaseAndBitshift+0x60>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	091b      	lsrs	r3, r3, #4
 80054ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054ee:	4a12      	ldr	r2, [pc, #72]	; (8005538 <DMA_CalcBaseAndBitshift+0x64>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d908      	bls.n	8005514 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <DMA_CalcBaseAndBitshift+0x68>)
 800550a:	4013      	ands	r3, r2
 800550c:	1d1a      	adds	r2, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	659a      	str	r2, [r3, #88]	; 0x58
 8005512:	e006      	b.n	8005522 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <DMA_CalcBaseAndBitshift+0x68>)
 800551c:	4013      	ands	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	aaaaaaab 	.word	0xaaaaaaab
 8005538:	08024358 	.word	0x08024358
 800553c:	fffffc00 	.word	0xfffffc00

08005540 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d11f      	bne.n	800559a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d856      	bhi.n	800560e <DMA_CheckFifoParam+0xce>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <DMA_CheckFifoParam+0x28>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	08005579 	.word	0x08005579
 800556c:	0800558b 	.word	0x0800558b
 8005570:	08005579 	.word	0x08005579
 8005574:	0800560f 	.word	0x0800560f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d046      	beq.n	8005612 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005588:	e043      	b.n	8005612 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005592:	d140      	bne.n	8005616 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005598:	e03d      	b.n	8005616 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a2:	d121      	bne.n	80055e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d837      	bhi.n	800561a <DMA_CheckFifoParam+0xda>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <DMA_CheckFifoParam+0x70>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055c1 	.word	0x080055c1
 80055b4:	080055c7 	.word	0x080055c7
 80055b8:	080055c1 	.word	0x080055c1
 80055bc:	080055d9 	.word	0x080055d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      break;
 80055c4:	e030      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d025      	beq.n	800561e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d6:	e022      	b.n	800561e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055e0:	d11f      	bne.n	8005622 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055e6:	e01c      	b.n	8005622 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d903      	bls.n	80055f6 <DMA_CheckFifoParam+0xb6>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d003      	beq.n	80055fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055f4:	e018      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
      break;
 80055fa:	e015      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00e      	beq.n	8005626 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
      break;
 800560c:	e00b      	b.n	8005626 <DMA_CheckFifoParam+0xe6>
      break;
 800560e:	bf00      	nop
 8005610:	e00a      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      break;
 8005612:	bf00      	nop
 8005614:	e008      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      break;
 8005616:	bf00      	nop
 8005618:	e006      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      break;
 800561a:	bf00      	nop
 800561c:	e004      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      break;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      break;   
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <DMA_CheckFifoParam+0xe8>
      break;
 8005626:	bf00      	nop
    }
  } 
  
  return status; 
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop

08005638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800564e:	2300      	movs	r3, #0
 8005650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	e175      	b.n	8005944 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005658:	2201      	movs	r2, #1
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	429a      	cmp	r2, r3
 8005672:	f040 8164 	bne.w	800593e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b01      	cmp	r3, #1
 8005680:	d005      	beq.n	800568e <HAL_GPIO_Init+0x56>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d130      	bne.n	80056f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	2203      	movs	r2, #3
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43db      	mvns	r3, r3
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	4013      	ands	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056c4:	2201      	movs	r2, #1
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 0201 	and.w	r2, r3, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d017      	beq.n	800572c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	2203      	movs	r2, #3
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d123      	bne.n	8005780 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	08da      	lsrs	r2, r3, #3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3208      	adds	r2, #8
 8005740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	220f      	movs	r2, #15
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4013      	ands	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4313      	orrs	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	08da      	lsrs	r2, r3, #3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3208      	adds	r2, #8
 800577a:	69b9      	ldr	r1, [r7, #24]
 800577c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2203      	movs	r2, #3
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 0203 	and.w	r2, r3, #3
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80be 	beq.w	800593e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c2:	4b66      	ldr	r3, [pc, #408]	; (800595c <HAL_GPIO_Init+0x324>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	4a65      	ldr	r2, [pc, #404]	; (800595c <HAL_GPIO_Init+0x324>)
 80057c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057cc:	6453      	str	r3, [r2, #68]	; 0x44
 80057ce:	4b63      	ldr	r3, [pc, #396]	; (800595c <HAL_GPIO_Init+0x324>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80057da:	4a61      	ldr	r2, [pc, #388]	; (8005960 <HAL_GPIO_Init+0x328>)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	3302      	adds	r3, #2
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a58      	ldr	r2, [pc, #352]	; (8005964 <HAL_GPIO_Init+0x32c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d037      	beq.n	8005876 <HAL_GPIO_Init+0x23e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a57      	ldr	r2, [pc, #348]	; (8005968 <HAL_GPIO_Init+0x330>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <HAL_GPIO_Init+0x23a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a56      	ldr	r2, [pc, #344]	; (800596c <HAL_GPIO_Init+0x334>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02b      	beq.n	800586e <HAL_GPIO_Init+0x236>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a55      	ldr	r2, [pc, #340]	; (8005970 <HAL_GPIO_Init+0x338>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d025      	beq.n	800586a <HAL_GPIO_Init+0x232>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a54      	ldr	r2, [pc, #336]	; (8005974 <HAL_GPIO_Init+0x33c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <HAL_GPIO_Init+0x22e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a53      	ldr	r2, [pc, #332]	; (8005978 <HAL_GPIO_Init+0x340>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d019      	beq.n	8005862 <HAL_GPIO_Init+0x22a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a52      	ldr	r2, [pc, #328]	; (800597c <HAL_GPIO_Init+0x344>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_GPIO_Init+0x226>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a51      	ldr	r2, [pc, #324]	; (8005980 <HAL_GPIO_Init+0x348>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00d      	beq.n	800585a <HAL_GPIO_Init+0x222>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a50      	ldr	r2, [pc, #320]	; (8005984 <HAL_GPIO_Init+0x34c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <HAL_GPIO_Init+0x21e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a4f      	ldr	r2, [pc, #316]	; (8005988 <HAL_GPIO_Init+0x350>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d101      	bne.n	8005852 <HAL_GPIO_Init+0x21a>
 800584e:	2309      	movs	r3, #9
 8005850:	e012      	b.n	8005878 <HAL_GPIO_Init+0x240>
 8005852:	230a      	movs	r3, #10
 8005854:	e010      	b.n	8005878 <HAL_GPIO_Init+0x240>
 8005856:	2308      	movs	r3, #8
 8005858:	e00e      	b.n	8005878 <HAL_GPIO_Init+0x240>
 800585a:	2307      	movs	r3, #7
 800585c:	e00c      	b.n	8005878 <HAL_GPIO_Init+0x240>
 800585e:	2306      	movs	r3, #6
 8005860:	e00a      	b.n	8005878 <HAL_GPIO_Init+0x240>
 8005862:	2305      	movs	r3, #5
 8005864:	e008      	b.n	8005878 <HAL_GPIO_Init+0x240>
 8005866:	2304      	movs	r3, #4
 8005868:	e006      	b.n	8005878 <HAL_GPIO_Init+0x240>
 800586a:	2303      	movs	r3, #3
 800586c:	e004      	b.n	8005878 <HAL_GPIO_Init+0x240>
 800586e:	2302      	movs	r3, #2
 8005870:	e002      	b.n	8005878 <HAL_GPIO_Init+0x240>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_GPIO_Init+0x240>
 8005876:	2300      	movs	r3, #0
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	f002 0203 	and.w	r2, r2, #3
 800587e:	0092      	lsls	r2, r2, #2
 8005880:	4093      	lsls	r3, r2
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005888:	4935      	ldr	r1, [pc, #212]	; (8005960 <HAL_GPIO_Init+0x328>)
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	089b      	lsrs	r3, r3, #2
 800588e:	3302      	adds	r3, #2
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005896:	4b3d      	ldr	r3, [pc, #244]	; (800598c <HAL_GPIO_Init+0x354>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058ba:	4a34      	ldr	r2, [pc, #208]	; (800598c <HAL_GPIO_Init+0x354>)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058c0:	4b32      	ldr	r3, [pc, #200]	; (800598c <HAL_GPIO_Init+0x354>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <HAL_GPIO_Init+0x354>)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058ea:	4b28      	ldr	r3, [pc, #160]	; (800598c <HAL_GPIO_Init+0x354>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800590e:	4a1f      	ldr	r2, [pc, #124]	; (800598c <HAL_GPIO_Init+0x354>)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <HAL_GPIO_Init+0x354>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <HAL_GPIO_Init+0x354>)
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	3301      	adds	r3, #1
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2b0f      	cmp	r3, #15
 8005948:	f67f ae86 	bls.w	8005658 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	3724      	adds	r7, #36	; 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40023800 	.word	0x40023800
 8005960:	40013800 	.word	0x40013800
 8005964:	40020000 	.word	0x40020000
 8005968:	40020400 	.word	0x40020400
 800596c:	40020800 	.word	0x40020800
 8005970:	40020c00 	.word	0x40020c00
 8005974:	40021000 	.word	0x40021000
 8005978:	40021400 	.word	0x40021400
 800597c:	40021800 	.word	0x40021800
 8005980:	40021c00 	.word	0x40021c00
 8005984:	40022000 	.word	0x40022000
 8005988:	40022400 	.word	0x40022400
 800598c:	40013c00 	.word	0x40013c00

08005990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	807b      	strh	r3, [r7, #2]
 800599c:	4613      	mov	r3, r2
 800599e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059a0:	787b      	ldrb	r3, [r7, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059a6:	887a      	ldrh	r2, [r7, #2]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80059ac:	e003      	b.n	80059b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80059ae:	887b      	ldrh	r3, [r7, #2]
 80059b0:	041a      	lsls	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	619a      	str	r2, [r3, #24]
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059d4:	887a      	ldrh	r2, [r7, #2]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4013      	ands	r3, r2
 80059da:	041a      	lsls	r2, r3, #16
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	43d9      	mvns	r1, r3
 80059e0:	887b      	ldrh	r3, [r7, #2]
 80059e2:	400b      	ands	r3, r1
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	619a      	str	r2, [r3, #24]
}
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f8:	b08f      	sub	sp, #60	; 0x3c
 80059fa:	af0a      	add	r7, sp, #40	; 0x28
 80059fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e116      	b.n	8005c36 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f00b f83c 	bl	8010aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f004 fd4f 	bl	800a4ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	687e      	ldr	r6, [r7, #4]
 8005a54:	466d      	mov	r5, sp
 8005a56:	f106 0410 	add.w	r4, r6, #16
 8005a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a6a:	1d33      	adds	r3, r6, #4
 8005a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a6e:	6838      	ldr	r0, [r7, #0]
 8005a70:	f004 fc30 	bl	800a2d4 <USB_CoreInit>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e0d7      	b.n	8005c36 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f004 fd3d 	bl	800a50c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
 8005a96:	e04a      	b.n	8005b2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	333d      	adds	r3, #61	; 0x3d
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	333c      	adds	r3, #60	; 0x3c
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	b298      	uxth	r0, r3
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	3344      	adds	r3, #68	; 0x44
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ad8:	7bfa      	ldrb	r2, [r7, #15]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3340      	adds	r3, #64	; 0x40
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005aec:	7bfa      	ldrb	r2, [r7, #15]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	3348      	adds	r3, #72	; 0x48
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	334c      	adds	r3, #76	; 0x4c
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b14:	7bfa      	ldrb	r2, [r7, #15]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	3354      	adds	r3, #84	; 0x54
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
 8005b2e:	7bfa      	ldrb	r2, [r7, #15]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d3af      	bcc.n	8005a98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e044      	b.n	8005bc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005b66:	7bfa      	ldrb	r2, [r7, #15]
 8005b68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b6a:	7bfa      	ldrb	r2, [r7, #15]
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b80:	7bfa      	ldrb	r2, [r7, #15]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bac:	7bfa      	ldrb	r2, [r7, #15]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
 8005bc8:	7bfa      	ldrb	r2, [r7, #15]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d3b5      	bcc.n	8005b3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	687e      	ldr	r6, [r7, #4]
 8005bda:	466d      	mov	r5, sp
 8005bdc:	f106 0410 	add.w	r4, r6, #16
 8005be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005be8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bec:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bf0:	1d33      	adds	r3, r6, #4
 8005bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bf4:	6838      	ldr	r0, [r7, #0]
 8005bf6:	f004 fcd5 	bl	800a5a4 <USB_DevInit>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e014      	b.n	8005c36 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d102      	bne.n	8005c2a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 f97b 	bl	8006f20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f005 fe23 	bl	800b87a <USB_DevDisconnect>

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_PCD_Start+0x16>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e012      	b.n	8005c7a <HAL_PCD_Start+0x3c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f004 fc31 	bl	800a4c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f005 fde4 	bl	800b838 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c82:	b590      	push	{r4, r7, lr}
 8005c84:	b08d      	sub	sp, #52	; 0x34
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f005 fea2 	bl	800b9e2 <USB_GetMode>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f040 84b7 	bne.w	8006614 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f005 fe06 	bl	800b8bc <USB_ReadInterrupts>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 84ad 	beq.w	8006612 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f005 fdf3 	bl	800b8bc <USB_ReadInterrupts>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d107      	bne.n	8005cf0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f002 0202 	and.w	r2, r2, #2
 8005cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f005 fde1 	bl	800b8bc <USB_ReadInterrupts>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d161      	bne.n	8005dc8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0210 	bic.w	r2, r2, #16
 8005d12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	4613      	mov	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	3304      	adds	r3, #4
 8005d32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	0c5b      	lsrs	r3, r3, #17
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d124      	bne.n	8005d8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d035      	beq.n	8005db8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6a38      	ldr	r0, [r7, #32]
 8005d60:	f005 fc18 	bl	800b594 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d70:	441a      	add	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	6a1a      	ldr	r2, [r3, #32]
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d82:	441a      	add	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	621a      	str	r2, [r3, #32]
 8005d88:	e016      	b.n	8005db8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	0c5b      	lsrs	r3, r3, #17
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d110      	bne.n	8005db8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6a38      	ldr	r0, [r7, #32]
 8005da2:	f005 fbf7 	bl	800b594 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005db2:	441a      	add	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0210 	orr.w	r2, r2, #16
 8005dc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f005 fd75 	bl	800b8bc <USB_ReadInterrupts>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ddc:	f040 80a7 	bne.w	8005f2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f005 fd7a 	bl	800b8e2 <USB_ReadDevAllOutEpInterrupt>
 8005dee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005df0:	e099      	b.n	8005f26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 808e 	beq.w	8005f1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	4611      	mov	r1, r2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f005 fd9e 	bl	800b94a <USB_ReadDevOutEPInterrupt>
 8005e0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	2301      	movs	r3, #1
 8005e2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fef0 	bl	8006c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 ffc6 	bl	8006de4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2310      	movs	r3, #16
 8005e72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d030      	beq.n	8005ee0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e86:	2b80      	cmp	r3, #128	; 0x80
 8005e88:	d109      	bne.n	8005e9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4413      	add	r3, r2
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	78db      	ldrb	r3, [r3, #3]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d108      	bne.n	8005ece <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f00a ff0d 	bl	8010ce8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	461a      	mov	r2, r3
 8005edc:	2302      	movs	r3, #2
 8005ede:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2320      	movs	r3, #32
 8005efa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	461a      	mov	r2, r3
 8005f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f47f af62 	bne.w	8005df2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f005 fcc2 	bl	800b8bc <USB_ReadInterrupts>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f42:	f040 80db 	bne.w	80060fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f005 fce3 	bl	800b916 <USB_ReadDevAllInEpInterrupt>
 8005f50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005f56:	e0cd      	b.n	80060f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80c2 	beq.w	80060e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f005 fd09 	bl	800b986 <USB_ReadDevInEPInterrupt>
 8005f74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d057      	beq.n	8006030 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	2201      	movs	r2, #1
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	69f9      	ldr	r1, [r7, #28]
 8005f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d132      	bne.n	8006024 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	334c      	adds	r3, #76	; 0x4c
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4403      	add	r3, r0
 8005fde:	3348      	adds	r3, #72	; 0x48
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4419      	add	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4403      	add	r3, r0
 8005ff2:	334c      	adds	r3, #76	; 0x4c
 8005ff4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d113      	bne.n	8006024 <HAL_PCD_IRQHandler+0x3a2>
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006000:	4613      	mov	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	3354      	adds	r3, #84	; 0x54
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d108      	bne.n	8006024 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800601c:	461a      	mov	r2, r3
 800601e:	2101      	movs	r1, #1
 8006020:	f005 fd12 	bl	800ba48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	b2db      	uxtb	r3, r3
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f00a fdd7 	bl	8010bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	461a      	mov	r2, r3
 8006048:	2308      	movs	r3, #8
 800604a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006062:	461a      	mov	r2, r3
 8006064:	2310      	movs	r3, #16
 8006066:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	461a      	mov	r2, r3
 8006080:	2340      	movs	r3, #64	; 0x40
 8006082:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d023      	beq.n	80060d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800608e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006090:	6a38      	ldr	r0, [r7, #32]
 8006092:	f004 fbe5 	bl	800a860 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	3338      	adds	r3, #56	; 0x38
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	4413      	add	r3, r2
 80060a6:	3304      	adds	r3, #4
 80060a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	78db      	ldrb	r3, [r3, #3]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d108      	bne.n	80060c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f00a fe24 	bl	8010d0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	461a      	mov	r2, r3
 80060d2:	2302      	movs	r3, #2
 80060d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80060e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fd08 	bl	8006af8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	3301      	adds	r3, #1
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f47f af2e 	bne.w	8005f58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f005 fbdb 	bl	800b8bc <USB_ReadInterrupts>
 8006106:	4603      	mov	r3, r0
 8006108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800610c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006110:	d122      	bne.n	8006158 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800612c:	2b01      	cmp	r3, #1
 800612e:	d108      	bne.n	8006142 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006138:	2100      	movs	r1, #0
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f00a ff9e 	bl	801107c <HAL_PCDEx_LPM_Callback>
 8006140:	e002      	b.n	8006148 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f00a fdc2 	bl	8010ccc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f005 fbad 	bl	800b8bc <USB_ReadInterrupts>
 8006162:	4603      	mov	r3, r0
 8006164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616c:	d112      	bne.n	8006194 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b01      	cmp	r3, #1
 800617c:	d102      	bne.n	8006184 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f00a fd7e 	bl	8010c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006192:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f005 fb8f 	bl	800b8bc <USB_ReadInterrupts>
 800619e:	4603      	mov	r3, r0
 80061a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a8:	d121      	bne.n	80061ee <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80061b8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d111      	bne.n	80061e8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	f003 020f 	and.w	r2, r3, #15
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80061de:	2101      	movs	r1, #1
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f00a ff4b 	bl	801107c <HAL_PCDEx_LPM_Callback>
 80061e6:	e002      	b.n	80061ee <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f00a fd49 	bl	8010c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f005 fb62 	bl	800b8bc <USB_ReadInterrupts>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	f040 80b7 	bne.w	8006374 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2110      	movs	r1, #16
 8006220:	4618      	mov	r0, r3
 8006222:	f004 fb1d 	bl	800a860 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006226:	2300      	movs	r3, #0
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800622a:	e046      	b.n	80062ba <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	461a      	mov	r2, r3
 800623a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800623e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800625e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	461a      	mov	r2, r3
 800626e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006272:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006292:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	3301      	adds	r3, #1
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d3b3      	bcc.n	800622c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80062d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d016      	beq.n	800630e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f0:	f043 030b 	orr.w	r3, r3, #11
 80062f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006306:	f043 030b 	orr.w	r3, r3, #11
 800630a:	6453      	str	r3, [r2, #68]	; 0x44
 800630c:	e015      	b.n	800633a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	4619      	mov	r1, r3
 800631e:	f242 032b 	movw	r3, #8235	; 0x202b
 8006322:	4313      	orrs	r3, r2
 8006324:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006334:	f043 030b 	orr.w	r3, r3, #11
 8006338:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006348:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800634c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800635e:	461a      	mov	r2, r3
 8006360:	f005 fb72 	bl	800ba48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f005 fa9f 	bl	800b8bc <USB_ReadInterrupts>
 800637e:	4603      	mov	r3, r0
 8006380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d124      	bne.n	80063d4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f005 fb36 	bl	800ba00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f004 fade 	bl	800a95a <USB_GetDevSpeed>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681c      	ldr	r4, [r3, #0]
 80063aa:	f001 facd 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 80063ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	4620      	mov	r0, r4
 80063ba:	f003 ffe3 	bl	800a384 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f00a fc35 	bl	8010c2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80063d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f005 fa6f 	bl	800b8bc <USB_ReadInterrupts>
 80063de:	4603      	mov	r3, r0
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d10a      	bne.n	80063fe <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f00a fc12 	bl	8010c12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695a      	ldr	r2, [r3, #20]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f002 0208 	and.w	r2, r2, #8
 80063fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f005 fa5a 	bl	800b8bc <USB_ReadInterrupts>
 8006408:	4603      	mov	r3, r0
 800640a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640e:	2b80      	cmp	r3, #128	; 0x80
 8006410:	d122      	bne.n	8006458 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800641e:	2301      	movs	r3, #1
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
 8006422:	e014      	b.n	800644e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006428:	4613      	mov	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d105      	bne.n	8006448 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	b2db      	uxtb	r3, r3
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fb27 	bl	8006a96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	3301      	adds	r3, #1
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006454:	429a      	cmp	r2, r3
 8006456:	d3e5      	bcc.n	8006424 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f005 fa2d 	bl	800b8bc <USB_ReadInterrupts>
 8006462:	4603      	mov	r3, r0
 8006464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646c:	d13b      	bne.n	80064e6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800646e:	2301      	movs	r3, #1
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	e02b      	b.n	80064cc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006488:	4613      	mov	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	3340      	adds	r3, #64	; 0x40
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d115      	bne.n	80064c6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800649a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800649c:	2b00      	cmp	r3, #0
 800649e:	da12      	bge.n	80064c6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a4:	4613      	mov	r3, r2
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	333f      	adds	r3, #63	; 0x3f
 80064b0:	2201      	movs	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fae8 	bl	8006a96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	3301      	adds	r3, #1
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d3ce      	bcc.n	8006474 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80064e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f005 f9e6 	bl	800b8bc <USB_ReadInterrupts>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064fa:	d155      	bne.n	80065a8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064fc:	2301      	movs	r3, #1
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006500:	e045      	b.n	800658e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006516:	4613      	mov	r3, r2
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d12e      	bne.n	8006588 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800652a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800652c:	2b00      	cmp	r3, #0
 800652e:	da2b      	bge.n	8006588 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800653c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006540:	429a      	cmp	r2, r3
 8006542:	d121      	bne.n	8006588 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006548:	4613      	mov	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006556:	2201      	movs	r2, #1
 8006558:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006584:	6053      	str	r3, [r2, #4]
            break;
 8006586:	e007      	b.n	8006598 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	3301      	adds	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006594:	429a      	cmp	r2, r3
 8006596:	d3b4      	bcc.n	8006502 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80065a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f005 f985 	bl	800b8bc <USB_ReadInterrupts>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d10a      	bne.n	80065d4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f00a fbb6 	bl	8010d30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80065d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f005 f96f 	bl	800b8bc <USB_ReadInterrupts>
 80065de:	4603      	mov	r3, r0
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d115      	bne.n	8006614 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f00a fba6 	bl	8010d4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
 8006610:	e000      	b.n	8006614 <HAL_PCD_IRQHandler+0x992>
      return;
 8006612:	bf00      	nop
    }
  }
}
 8006614:	3734      	adds	r7, #52	; 0x34
 8006616:	46bd      	mov	sp, r7
 8006618:	bd90      	pop	{r4, r7, pc}

0800661a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_PCD_SetAddress+0x1a>
 8006630:	2302      	movs	r3, #2
 8006632:	e013      	b.n	800665c <HAL_PCD_SetAddress+0x42>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	78fa      	ldrb	r2, [r7, #3]
 8006640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	78fa      	ldrb	r2, [r7, #3]
 800664a:	4611      	mov	r1, r2
 800664c:	4618      	mov	r0, r3
 800664e:	f005 f8cd 	bl	800b7ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	4608      	mov	r0, r1
 800666e:	4611      	mov	r1, r2
 8006670:	461a      	mov	r2, r3
 8006672:	4603      	mov	r3, r0
 8006674:	70fb      	strb	r3, [r7, #3]
 8006676:	460b      	mov	r3, r1
 8006678:	803b      	strh	r3, [r7, #0]
 800667a:	4613      	mov	r3, r2
 800667c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006686:	2b00      	cmp	r3, #0
 8006688:	da0f      	bge.n	80066aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	4613      	mov	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	3338      	adds	r3, #56	; 0x38
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	705a      	strb	r2, [r3, #1]
 80066a8:	e00f      	b.n	80066ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	4613      	mov	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4413      	add	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	4413      	add	r3, r2
 80066c0:	3304      	adds	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80066d6:	883a      	ldrh	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	78ba      	ldrb	r2, [r7, #2]
 80066e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80066f4:	78bb      	ldrb	r3, [r7, #2]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d102      	bne.n	8006700 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_PCD_EP_Open+0xaa>
 800670a:	2302      	movs	r3, #2
 800670c:	e00e      	b.n	800672c <HAL_PCD_EP_Open+0xc8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	4618      	mov	r0, r3
 800671e:	f004 f941 	bl	800a9a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800672a:	7afb      	ldrb	r3, [r7, #11]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	da0f      	bge.n	8006768 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 020f 	and.w	r2, r3, #15
 800674e:	4613      	mov	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	3338      	adds	r3, #56	; 0x38
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	3304      	adds	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	705a      	strb	r2, [r3, #1]
 8006766:	e00f      	b.n	8006788 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	3304      	adds	r3, #4
 8006780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	b2da      	uxtb	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800679a:	2b01      	cmp	r3, #1
 800679c:	d101      	bne.n	80067a2 <HAL_PCD_EP_Close+0x6e>
 800679e:	2302      	movs	r3, #2
 80067a0:	e00e      	b.n	80067c0 <HAL_PCD_EP_Close+0x8c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f004 f97f 	bl	800aab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	460b      	mov	r3, r1
 80067d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	f003 020f 	and.w	r2, r3, #15
 80067de:	4613      	mov	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	3304      	adds	r3, #4
 80067f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2200      	movs	r2, #0
 8006802:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	b2da      	uxtb	r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d102      	bne.n	8006824 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006824:	7afb      	ldrb	r3, [r7, #11]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	6979      	ldr	r1, [r7, #20]
 800683c:	f004 fc66 	bl	800b10c <USB_EP0StartXfer>
 8006840:	e008      	b.n	8006854 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	6979      	ldr	r1, [r7, #20]
 8006850:	f004 fa0c 	bl	800ac6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006880:	681b      	ldr	r3, [r3, #0]
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b086      	sub	sp, #24
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	460b      	mov	r3, r1
 800689c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800689e:	7afb      	ldrb	r3, [r7, #11]
 80068a0:	f003 020f 	and.w	r2, r3, #15
 80068a4:	4613      	mov	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	3338      	adds	r3, #56	; 0x38
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	3304      	adds	r3, #4
 80068b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2200      	movs	r2, #0
 80068c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2201      	movs	r2, #1
 80068cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d102      	bne.n	80068e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068e8:	7afb      	ldrb	r3, [r7, #11]
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	6979      	ldr	r1, [r7, #20]
 8006900:	f004 fc04 	bl	800b10c <USB_EP0StartXfer>
 8006904:	e008      	b.n	8006918 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	6979      	ldr	r1, [r7, #20]
 8006914:	f004 f9aa 	bl	800ac6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	460b      	mov	r3, r1
 800692c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	429a      	cmp	r2, r3
 800693a:	d901      	bls.n	8006940 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e050      	b.n	80069e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006944:	2b00      	cmp	r3, #0
 8006946:	da0f      	bge.n	8006968 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	f003 020f 	and.w	r2, r3, #15
 800694e:	4613      	mov	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	3338      	adds	r3, #56	; 0x38
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	3304      	adds	r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	705a      	strb	r2, [r3, #1]
 8006966:	e00d      	b.n	8006984 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	3304      	adds	r3, #4
 800697c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	f003 030f 	and.w	r3, r3, #15
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_PCD_EP_SetStall+0x82>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e01e      	b.n	80069e2 <HAL_PCD_EP_SetStall+0xc0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68f9      	ldr	r1, [r7, #12]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f004 fe46 	bl	800b644 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	b2d9      	uxtb	r1, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069d2:	461a      	mov	r2, r3
 80069d4:	f005 f838 	bl	800ba48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 020f 	and.w	r2, r3, #15
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d901      	bls.n	8006a08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e042      	b.n	8006a8e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	da0f      	bge.n	8006a30 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	f003 020f 	and.w	r2, r3, #15
 8006a16:	4613      	mov	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	3338      	adds	r3, #56	; 0x38
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	3304      	adds	r3, #4
 8006a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	705a      	strb	r2, [r3, #1]
 8006a2e:	e00f      	b.n	8006a50 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	f003 020f 	and.w	r2, r3, #15
 8006a36:	4613      	mov	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	3304      	adds	r3, #4
 8006a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_PCD_EP_ClrStall+0x86>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e00e      	b.n	8006a8e <HAL_PCD_EP_ClrStall+0xa4>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f004 fe4e 	bl	800b720 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da0c      	bge.n	8006ac4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	3338      	adds	r3, #56	; 0x38
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4413      	add	r3, r2
 8006abe:	3304      	adds	r3, #4
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	e00c      	b.n	8006ade <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	f003 020f 	and.w	r2, r3, #15
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	3304      	adds	r3, #4
 8006adc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f004 fc6d 	bl	800b3c4 <USB_EPStopXfer>
 8006aea:	4603      	mov	r3, r0
 8006aec:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006aee:	7afb      	ldrb	r3, [r7, #11]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	3338      	adds	r3, #56	; 0x38
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d901      	bls.n	8006b30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e06c      	b.n	8006c0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	699a      	ldr	r2, [r3, #24]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d902      	bls.n	8006b4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3303      	adds	r3, #3
 8006b50:	089b      	lsrs	r3, r3, #2
 8006b52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b54:	e02b      	b.n	8006bae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d902      	bls.n	8006b72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	3303      	adds	r3, #3
 8006b76:	089b      	lsrs	r3, r3, #2
 8006b78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6919      	ldr	r1, [r3, #16]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6978      	ldr	r0, [r7, #20]
 8006b92:	f004 fcc1 	bl	800b518 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a1a      	ldr	r2, [r3, #32]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	441a      	add	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d809      	bhi.n	8006bd8 <PCD_WriteEmptyTxFifo+0xe0>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1a      	ldr	r2, [r3, #32]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d203      	bcs.n	8006bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1be      	bne.n	8006b56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	699a      	ldr	r2, [r3, #24]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d811      	bhi.n	8006c08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	2201      	movs	r2, #1
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	6939      	ldr	r1, [r7, #16]
 8006c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c04:	4013      	ands	r3, r2
 8006c06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	333c      	adds	r3, #60	; 0x3c
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d17b      	bne.n	8006d42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f003 0308 	and.w	r3, r3, #8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d015      	beq.n	8006c80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	4a61      	ldr	r2, [pc, #388]	; (8006ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	f240 80b9 	bls.w	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80b3 	beq.w	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	461a      	mov	r2, r3
 8006c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7c:	6093      	str	r3, [r2, #8]
 8006c7e:	e0a7      	b.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c96:	461a      	mov	r2, r3
 8006c98:	2320      	movs	r3, #32
 8006c9a:	6093      	str	r3, [r2, #8]
 8006c9c:	e098      	b.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f040 8093 	bne.w	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	4a4b      	ldr	r2, [pc, #300]	; (8006ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d90f      	bls.n	8006cd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	6093      	str	r3, [r2, #8]
 8006cd0:	e07e      	b.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	0159      	lsls	r1, r3, #5
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	440b      	add	r3, r1
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d114      	bne.n	8006d34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2101      	movs	r1, #1
 8006d20:	f004 fe92 	bl	800ba48 <USB_EP0_OutStart>
 8006d24:	e006      	b.n	8006d34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	441a      	add	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f009 ff34 	bl	8010ba8 <HAL_PCD_DataOutStageCallback>
 8006d40:	e046      	b.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	4a26      	ldr	r2, [pc, #152]	; (8006de0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d124      	bne.n	8006d94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	461a      	mov	r2, r3
 8006d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d66:	6093      	str	r3, [r2, #8]
 8006d68:	e032      	b.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	461a      	mov	r2, r3
 8006d82:	2320      	movs	r3, #32
 8006d84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f009 ff0b 	bl	8010ba8 <HAL_PCD_DataOutStageCallback>
 8006d92:	e01d      	b.n	8006dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d114      	bne.n	8006dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d108      	bne.n	8006dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	f004 fe42 	bl	800ba48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f009 feec 	bl	8010ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	4f54300a 	.word	0x4f54300a
 8006de0:	4f54310a 	.word	0x4f54310a

08006de4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	333c      	adds	r3, #60	; 0x3c
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d90e      	bls.n	8006e38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d009      	beq.n	8006e38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e30:	461a      	mov	r2, r3
 8006e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f009 fea3 	bl	8010b84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d90c      	bls.n	8006e60 <PCD_EP_OutSetupPacket_int+0x7c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d108      	bne.n	8006e60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e58:	461a      	mov	r2, r3
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	f004 fdf4 	bl	800ba48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	4f54300a 	.word	0x4f54300a

08006e70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006e8e:	883b      	ldrh	r3, [r7, #0]
 8006e90:	0419      	lsls	r1, r3, #16
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e9c:	e028      	b.n	8006ef0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	e00d      	b.n	8006ece <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	3340      	adds	r3, #64	; 0x40
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	0c1b      	lsrs	r3, r3, #16
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	73fb      	strb	r3, [r7, #15]
 8006ece:	7bfa      	ldrb	r2, [r7, #15]
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3ec      	bcc.n	8006eb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ed8:	883b      	ldrh	r3, [r7, #0]
 8006eda:	0418      	lsls	r0, r3, #16
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6819      	ldr	r1, [r3, #0]
 8006ee0:	78fb      	ldrb	r3, [r7, #3]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	4302      	orrs	r2, r0
 8006ee8:	3340      	adds	r3, #64	; 0x40
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	887a      	ldrh	r2, [r7, #2]
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f4e:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <HAL_PCDEx_ActivateLPM+0x44>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	10000003 	.word	0x10000003

08006f68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f72:	4b23      	ldr	r3, [pc, #140]	; (8007000 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	4a22      	ldr	r2, [pc, #136]	; (8007000 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7e:	4b20      	ldr	r3, [pc, #128]	; (8007000 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	; (8007004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f96:	f7fc ffcb 	bl	8003f30 <HAL_GetTick>
 8006f9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f9c:	e009      	b.n	8006fb2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f9e:	f7fc ffc7 	bl	8003f30 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fac:	d901      	bls.n	8006fb2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e022      	b.n	8006ff8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fb2:	4b14      	ldr	r3, [pc, #80]	; (8007004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d1ee      	bne.n	8006f9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006fc0:	4b10      	ldr	r3, [pc, #64]	; (8007004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0f      	ldr	r2, [pc, #60]	; (8007004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fcc:	f7fc ffb0 	bl	8003f30 <HAL_GetTick>
 8006fd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fd2:	e009      	b.n	8006fe8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fd4:	f7fc ffac 	bl	8003f30 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fe2:	d901      	bls.n	8006fe8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e007      	b.n	8006ff8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fe8:	4b06      	ldr	r3, [pc, #24]	; (8007004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff4:	d1ee      	bne.n	8006fd4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40023800 	.word	0x40023800
 8007004:	40007000 	.word	0x40007000

08007008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007010:	2300      	movs	r3, #0
 8007012:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e29b      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 8087 	beq.w	800713a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800702c:	4b96      	ldr	r3, [pc, #600]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 030c 	and.w	r3, r3, #12
 8007034:	2b04      	cmp	r3, #4
 8007036:	d00c      	beq.n	8007052 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007038:	4b93      	ldr	r3, [pc, #588]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 030c 	and.w	r3, r3, #12
 8007040:	2b08      	cmp	r3, #8
 8007042:	d112      	bne.n	800706a <HAL_RCC_OscConfig+0x62>
 8007044:	4b90      	ldr	r3, [pc, #576]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007050:	d10b      	bne.n	800706a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007052:	4b8d      	ldr	r3, [pc, #564]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d06c      	beq.n	8007138 <HAL_RCC_OscConfig+0x130>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d168      	bne.n	8007138 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e275      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007072:	d106      	bne.n	8007082 <HAL_RCC_OscConfig+0x7a>
 8007074:	4b84      	ldr	r3, [pc, #528]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a83      	ldr	r2, [pc, #524]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 800707a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	e02e      	b.n	80070e0 <HAL_RCC_OscConfig+0xd8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10c      	bne.n	80070a4 <HAL_RCC_OscConfig+0x9c>
 800708a:	4b7f      	ldr	r3, [pc, #508]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a7e      	ldr	r2, [pc, #504]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	4b7c      	ldr	r3, [pc, #496]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a7b      	ldr	r2, [pc, #492]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 800709c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e01d      	b.n	80070e0 <HAL_RCC_OscConfig+0xd8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070ac:	d10c      	bne.n	80070c8 <HAL_RCC_OscConfig+0xc0>
 80070ae:	4b76      	ldr	r3, [pc, #472]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a75      	ldr	r2, [pc, #468]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	4b73      	ldr	r3, [pc, #460]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a72      	ldr	r2, [pc, #456]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e00b      	b.n	80070e0 <HAL_RCC_OscConfig+0xd8>
 80070c8:	4b6f      	ldr	r3, [pc, #444]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6e      	ldr	r2, [pc, #440]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	4b6c      	ldr	r3, [pc, #432]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a6b      	ldr	r2, [pc, #428]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80070da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d013      	beq.n	8007110 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fc ff22 	bl	8003f30 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f0:	f7fc ff1e 	bl	8003f30 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b64      	cmp	r3, #100	; 0x64
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e229      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007102:	4b61      	ldr	r3, [pc, #388]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0f0      	beq.n	80070f0 <HAL_RCC_OscConfig+0xe8>
 800710e:	e014      	b.n	800713a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fc ff0e 	bl	8003f30 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007118:	f7fc ff0a 	bl	8003f30 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b64      	cmp	r3, #100	; 0x64
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e215      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800712a:	4b57      	ldr	r3, [pc, #348]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f0      	bne.n	8007118 <HAL_RCC_OscConfig+0x110>
 8007136:	e000      	b.n	800713a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d069      	beq.n	800721a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007146:	4b50      	ldr	r3, [pc, #320]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 030c 	and.w	r3, r3, #12
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00b      	beq.n	800716a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007152:	4b4d      	ldr	r3, [pc, #308]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 030c 	and.w	r3, r3, #12
 800715a:	2b08      	cmp	r3, #8
 800715c:	d11c      	bne.n	8007198 <HAL_RCC_OscConfig+0x190>
 800715e:	4b4a      	ldr	r3, [pc, #296]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d116      	bne.n	8007198 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800716a:	4b47      	ldr	r3, [pc, #284]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <HAL_RCC_OscConfig+0x17a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d001      	beq.n	8007182 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e1e9      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007182:	4b41      	ldr	r3, [pc, #260]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	493d      	ldr	r1, [pc, #244]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007192:	4313      	orrs	r3, r2
 8007194:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007196:	e040      	b.n	800721a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d023      	beq.n	80071e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071a0:	4b39      	ldr	r3, [pc, #228]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a38      	ldr	r2, [pc, #224]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fc fec0 	bl	8003f30 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b4:	f7fc febc 	bl	8003f30 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e1c7      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c6:	4b30      	ldr	r3, [pc, #192]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d2:	4b2d      	ldr	r3, [pc, #180]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	4929      	ldr	r1, [pc, #164]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	600b      	str	r3, [r1, #0]
 80071e6:	e018      	b.n	800721a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071e8:	4b27      	ldr	r3, [pc, #156]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a26      	ldr	r2, [pc, #152]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f4:	f7fc fe9c 	bl	8003f30 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fc:	f7fc fe98 	bl	8003f30 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e1a3      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800720e:	4b1e      	ldr	r3, [pc, #120]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d038      	beq.n	8007298 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d019      	beq.n	8007262 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800722e:	4b16      	ldr	r3, [pc, #88]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007232:	4a15      	ldr	r2, [pc, #84]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007234:	f043 0301 	orr.w	r3, r3, #1
 8007238:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723a:	f7fc fe79 	bl	8003f30 <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007242:	f7fc fe75 	bl	8003f30 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e180      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007254:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <HAL_RCC_OscConfig+0x23a>
 8007260:	e01a      	b.n	8007298 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007262:	4b09      	ldr	r3, [pc, #36]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007266:	4a08      	ldr	r2, [pc, #32]	; (8007288 <HAL_RCC_OscConfig+0x280>)
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726e:	f7fc fe5f 	bl	8003f30 <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007274:	e00a      	b.n	800728c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007276:	f7fc fe5b 	bl	8003f30 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d903      	bls.n	800728c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e166      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
 8007288:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800728c:	4b92      	ldr	r3, [pc, #584]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800728e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1ee      	bne.n	8007276 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 80a4 	beq.w	80073ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072a6:	4b8c      	ldr	r3, [pc, #560]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80072b2:	4b89      	ldr	r3, [pc, #548]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	4a88      	ldr	r2, [pc, #544]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80072b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072bc:	6413      	str	r3, [r2, #64]	; 0x40
 80072be:	4b86      	ldr	r3, [pc, #536]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ca:	2301      	movs	r3, #1
 80072cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072ce:	4b83      	ldr	r3, [pc, #524]	; (80074dc <HAL_RCC_OscConfig+0x4d4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d118      	bne.n	800730c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80072da:	4b80      	ldr	r3, [pc, #512]	; (80074dc <HAL_RCC_OscConfig+0x4d4>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a7f      	ldr	r2, [pc, #508]	; (80074dc <HAL_RCC_OscConfig+0x4d4>)
 80072e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072e6:	f7fc fe23 	bl	8003f30 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ee:	f7fc fe1f 	bl	8003f30 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b64      	cmp	r3, #100	; 0x64
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e12a      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007300:	4b76      	ldr	r3, [pc, #472]	; (80074dc <HAL_RCC_OscConfig+0x4d4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0f0      	beq.n	80072ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d106      	bne.n	8007322 <HAL_RCC_OscConfig+0x31a>
 8007314:	4b70      	ldr	r3, [pc, #448]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007318:	4a6f      	ldr	r2, [pc, #444]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800731a:	f043 0301 	orr.w	r3, r3, #1
 800731e:	6713      	str	r3, [r2, #112]	; 0x70
 8007320:	e02d      	b.n	800737e <HAL_RCC_OscConfig+0x376>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <HAL_RCC_OscConfig+0x33c>
 800732a:	4b6b      	ldr	r3, [pc, #428]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	4a6a      	ldr	r2, [pc, #424]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	6713      	str	r3, [r2, #112]	; 0x70
 8007336:	4b68      	ldr	r3, [pc, #416]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	4a67      	ldr	r2, [pc, #412]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800733c:	f023 0304 	bic.w	r3, r3, #4
 8007340:	6713      	str	r3, [r2, #112]	; 0x70
 8007342:	e01c      	b.n	800737e <HAL_RCC_OscConfig+0x376>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b05      	cmp	r3, #5
 800734a:	d10c      	bne.n	8007366 <HAL_RCC_OscConfig+0x35e>
 800734c:	4b62      	ldr	r3, [pc, #392]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	4a61      	ldr	r2, [pc, #388]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007352:	f043 0304 	orr.w	r3, r3, #4
 8007356:	6713      	str	r3, [r2, #112]	; 0x70
 8007358:	4b5f      	ldr	r3, [pc, #380]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800735a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735c:	4a5e      	ldr	r2, [pc, #376]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800735e:	f043 0301 	orr.w	r3, r3, #1
 8007362:	6713      	str	r3, [r2, #112]	; 0x70
 8007364:	e00b      	b.n	800737e <HAL_RCC_OscConfig+0x376>
 8007366:	4b5c      	ldr	r3, [pc, #368]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	4a5b      	ldr	r2, [pc, #364]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	6713      	str	r3, [r2, #112]	; 0x70
 8007372:	4b59      	ldr	r3, [pc, #356]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007376:	4a58      	ldr	r2, [pc, #352]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007378:	f023 0304 	bic.w	r3, r3, #4
 800737c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d015      	beq.n	80073b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007386:	f7fc fdd3 	bl	8003f30 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800738c:	e00a      	b.n	80073a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738e:	f7fc fdcf 	bl	8003f30 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f241 3288 	movw	r2, #5000	; 0x1388
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e0d8      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a4:	4b4c      	ldr	r3, [pc, #304]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80073a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0ee      	beq.n	800738e <HAL_RCC_OscConfig+0x386>
 80073b0:	e014      	b.n	80073dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b2:	f7fc fdbd 	bl	8003f30 <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073b8:	e00a      	b.n	80073d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ba:	f7fc fdb9 	bl	8003f30 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e0c2      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073d0:	4b41      	ldr	r3, [pc, #260]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80073d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1ee      	bne.n	80073ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d105      	bne.n	80073ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073e2:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80073e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80ae 	beq.w	8007554 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073f8:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 030c 	and.w	r3, r3, #12
 8007400:	2b08      	cmp	r3, #8
 8007402:	d06d      	beq.n	80074e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d14b      	bne.n	80074a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740c:	4b32      	ldr	r3, [pc, #200]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a31      	ldr	r2, [pc, #196]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fc fd8a 	bl	8003f30 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007420:	f7fc fd86 	bl	8003f30 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e091      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007432:	4b29      	ldr	r3, [pc, #164]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f0      	bne.n	8007420 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69da      	ldr	r2, [r3, #28]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	019b      	lsls	r3, r3, #6
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	3b01      	subs	r3, #1
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	061b      	lsls	r3, r3, #24
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	071b      	lsls	r3, r3, #28
 800746a:	491b      	ldr	r1, [pc, #108]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 800746c:	4313      	orrs	r3, r2
 800746e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007470:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800747a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800747c:	f7fc fd58 	bl	8003f30 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007484:	f7fc fd54 	bl	8003f30 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e05f      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007496:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f0      	beq.n	8007484 <HAL_RCC_OscConfig+0x47c>
 80074a2:	e057      	b.n	8007554 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a0b      	ldr	r2, [pc, #44]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80074aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b0:	f7fc fd3e 	bl	8003f30 <HAL_GetTick>
 80074b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b8:	f7fc fd3a 	bl	8003f30 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e045      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ca:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <HAL_RCC_OscConfig+0x4d0>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f0      	bne.n	80074b8 <HAL_RCC_OscConfig+0x4b0>
 80074d6:	e03d      	b.n	8007554 <HAL_RCC_OscConfig+0x54c>
 80074d8:	40023800 	.word	0x40023800
 80074dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80074e0:	4b1f      	ldr	r3, [pc, #124]	; (8007560 <HAL_RCC_OscConfig+0x558>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d030      	beq.n	8007550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d129      	bne.n	8007550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d122      	bne.n	8007550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007510:	4013      	ands	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007516:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007518:	4293      	cmp	r3, r2
 800751a:	d119      	bne.n	8007550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	3b01      	subs	r3, #1
 800752a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800752c:	429a      	cmp	r2, r3
 800752e:	d10f      	bne.n	8007550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800753c:	429a      	cmp	r2, r3
 800753e:	d107      	bne.n	8007550 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800754c:	429a      	cmp	r2, r3
 800754e:	d001      	beq.n	8007554 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	40023800 	.word	0x40023800

08007564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e0d0      	b.n	800771e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800757c:	4b6a      	ldr	r3, [pc, #424]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d910      	bls.n	80075ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758a:	4b67      	ldr	r3, [pc, #412]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f023 020f 	bic.w	r2, r3, #15
 8007592:	4965      	ldr	r1, [pc, #404]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	4313      	orrs	r3, r2
 8007598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800759a:	4b63      	ldr	r3, [pc, #396]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0b8      	b.n	800771e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d020      	beq.n	80075fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075c4:	4b59      	ldr	r3, [pc, #356]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a58      	ldr	r2, [pc, #352]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80075ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0308 	and.w	r3, r3, #8
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075dc:	4b53      	ldr	r3, [pc, #332]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4a52      	ldr	r2, [pc, #328]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80075e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075e8:	4b50      	ldr	r3, [pc, #320]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	494d      	ldr	r1, [pc, #308]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d040      	beq.n	8007688 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d107      	bne.n	800761e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760e:	4b47      	ldr	r3, [pc, #284]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d115      	bne.n	8007646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e07f      	b.n	800771e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d107      	bne.n	8007636 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007626:	4b41      	ldr	r3, [pc, #260]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e073      	b.n	800771e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007636:	4b3d      	ldr	r3, [pc, #244]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e06b      	b.n	800771e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007646:	4b39      	ldr	r3, [pc, #228]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f023 0203 	bic.w	r2, r3, #3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	4936      	ldr	r1, [pc, #216]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 8007654:	4313      	orrs	r3, r2
 8007656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007658:	f7fc fc6a 	bl	8003f30 <HAL_GetTick>
 800765c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800765e:	e00a      	b.n	8007676 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007660:	f7fc fc66 	bl	8003f30 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f241 3288 	movw	r2, #5000	; 0x1388
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e053      	b.n	800771e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007676:	4b2d      	ldr	r3, [pc, #180]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 020c 	and.w	r2, r3, #12
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	429a      	cmp	r2, r3
 8007686:	d1eb      	bne.n	8007660 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d210      	bcs.n	80076b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007696:	4b24      	ldr	r3, [pc, #144]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f023 020f 	bic.w	r2, r3, #15
 800769e:	4922      	ldr	r1, [pc, #136]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a6:	4b20      	ldr	r3, [pc, #128]	; (8007728 <HAL_RCC_ClockConfig+0x1c4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d001      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e032      	b.n	800771e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076c4:	4b19      	ldr	r3, [pc, #100]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4916      	ldr	r1, [pc, #88]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	490e      	ldr	r1, [pc, #56]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80076f2:	4313      	orrs	r3, r2
 80076f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076f6:	f000 f821 	bl	800773c <HAL_RCC_GetSysClockFreq>
 80076fa:	4602      	mov	r2, r0
 80076fc:	4b0b      	ldr	r3, [pc, #44]	; (800772c <HAL_RCC_ClockConfig+0x1c8>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	091b      	lsrs	r3, r3, #4
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	490a      	ldr	r1, [pc, #40]	; (8007730 <HAL_RCC_ClockConfig+0x1cc>)
 8007708:	5ccb      	ldrb	r3, [r1, r3]
 800770a:	fa22 f303 	lsr.w	r3, r2, r3
 800770e:	4a09      	ldr	r2, [pc, #36]	; (8007734 <HAL_RCC_ClockConfig+0x1d0>)
 8007710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007712:	4b09      	ldr	r3, [pc, #36]	; (8007738 <HAL_RCC_ClockConfig+0x1d4>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f7fb ffde 	bl	80036d8 <HAL_InitTick>

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40023c00 	.word	0x40023c00
 800772c:	40023800 	.word	0x40023800
 8007730:	08024340 	.word	0x08024340
 8007734:	20000004 	.word	0x20000004
 8007738:	20000008 	.word	0x20000008

0800773c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800773c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007740:	b094      	sub	sp, #80	; 0x50
 8007742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	647b      	str	r3, [r7, #68]	; 0x44
 8007748:	2300      	movs	r3, #0
 800774a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800774c:	2300      	movs	r3, #0
 800774e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007754:	4b79      	ldr	r3, [pc, #484]	; (800793c <HAL_RCC_GetSysClockFreq+0x200>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 030c 	and.w	r3, r3, #12
 800775c:	2b08      	cmp	r3, #8
 800775e:	d00d      	beq.n	800777c <HAL_RCC_GetSysClockFreq+0x40>
 8007760:	2b08      	cmp	r3, #8
 8007762:	f200 80e1 	bhi.w	8007928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_RCC_GetSysClockFreq+0x34>
 800776a:	2b04      	cmp	r3, #4
 800776c:	d003      	beq.n	8007776 <HAL_RCC_GetSysClockFreq+0x3a>
 800776e:	e0db      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007770:	4b73      	ldr	r3, [pc, #460]	; (8007940 <HAL_RCC_GetSysClockFreq+0x204>)
 8007772:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007774:	e0db      	b.n	800792e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007776:	4b73      	ldr	r3, [pc, #460]	; (8007944 <HAL_RCC_GetSysClockFreq+0x208>)
 8007778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800777a:	e0d8      	b.n	800792e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800777c:	4b6f      	ldr	r3, [pc, #444]	; (800793c <HAL_RCC_GetSysClockFreq+0x200>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007784:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007786:	4b6d      	ldr	r3, [pc, #436]	; (800793c <HAL_RCC_GetSysClockFreq+0x200>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d063      	beq.n	800785a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007792:	4b6a      	ldr	r3, [pc, #424]	; (800793c <HAL_RCC_GetSysClockFreq+0x200>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	099b      	lsrs	r3, r3, #6
 8007798:	2200      	movs	r2, #0
 800779a:	63bb      	str	r3, [r7, #56]	; 0x38
 800779c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a4:	633b      	str	r3, [r7, #48]	; 0x30
 80077a6:	2300      	movs	r3, #0
 80077a8:	637b      	str	r3, [r7, #52]	; 0x34
 80077aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80077ae:	4622      	mov	r2, r4
 80077b0:	462b      	mov	r3, r5
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f04f 0100 	mov.w	r1, #0
 80077ba:	0159      	lsls	r1, r3, #5
 80077bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077c0:	0150      	lsls	r0, r2, #5
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4621      	mov	r1, r4
 80077c8:	1a51      	subs	r1, r2, r1
 80077ca:	6139      	str	r1, [r7, #16]
 80077cc:	4629      	mov	r1, r5
 80077ce:	eb63 0301 	sbc.w	r3, r3, r1
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077e0:	4659      	mov	r1, fp
 80077e2:	018b      	lsls	r3, r1, #6
 80077e4:	4651      	mov	r1, sl
 80077e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077ea:	4651      	mov	r1, sl
 80077ec:	018a      	lsls	r2, r1, #6
 80077ee:	4651      	mov	r1, sl
 80077f0:	ebb2 0801 	subs.w	r8, r2, r1
 80077f4:	4659      	mov	r1, fp
 80077f6:	eb63 0901 	sbc.w	r9, r3, r1
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800780a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800780e:	4690      	mov	r8, r2
 8007810:	4699      	mov	r9, r3
 8007812:	4623      	mov	r3, r4
 8007814:	eb18 0303 	adds.w	r3, r8, r3
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	462b      	mov	r3, r5
 800781c:	eb49 0303 	adc.w	r3, r9, r3
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	f04f 0200 	mov.w	r2, #0
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800782e:	4629      	mov	r1, r5
 8007830:	024b      	lsls	r3, r1, #9
 8007832:	4621      	mov	r1, r4
 8007834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007838:	4621      	mov	r1, r4
 800783a:	024a      	lsls	r2, r1, #9
 800783c:	4610      	mov	r0, r2
 800783e:	4619      	mov	r1, r3
 8007840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007842:	2200      	movs	r2, #0
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
 8007846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800784c:	f7f8 ff6c 	bl	8000728 <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4613      	mov	r3, r2
 8007856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007858:	e058      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800785a:	4b38      	ldr	r3, [pc, #224]	; (800793c <HAL_RCC_GetSysClockFreq+0x200>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	099b      	lsrs	r3, r3, #6
 8007860:	2200      	movs	r2, #0
 8007862:	4618      	mov	r0, r3
 8007864:	4611      	mov	r1, r2
 8007866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800786a:	623b      	str	r3, [r7, #32]
 800786c:	2300      	movs	r3, #0
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
 8007870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007874:	4642      	mov	r2, r8
 8007876:	464b      	mov	r3, r9
 8007878:	f04f 0000 	mov.w	r0, #0
 800787c:	f04f 0100 	mov.w	r1, #0
 8007880:	0159      	lsls	r1, r3, #5
 8007882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007886:	0150      	lsls	r0, r2, #5
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4641      	mov	r1, r8
 800788e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007892:	4649      	mov	r1, r9
 8007894:	eb63 0b01 	sbc.w	fp, r3, r1
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078ac:	ebb2 040a 	subs.w	r4, r2, sl
 80078b0:	eb63 050b 	sbc.w	r5, r3, fp
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	00eb      	lsls	r3, r5, #3
 80078be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078c2:	00e2      	lsls	r2, r4, #3
 80078c4:	4614      	mov	r4, r2
 80078c6:	461d      	mov	r5, r3
 80078c8:	4643      	mov	r3, r8
 80078ca:	18e3      	adds	r3, r4, r3
 80078cc:	603b      	str	r3, [r7, #0]
 80078ce:	464b      	mov	r3, r9
 80078d0:	eb45 0303 	adc.w	r3, r5, r3
 80078d4:	607b      	str	r3, [r7, #4]
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078e2:	4629      	mov	r1, r5
 80078e4:	028b      	lsls	r3, r1, #10
 80078e6:	4621      	mov	r1, r4
 80078e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078ec:	4621      	mov	r1, r4
 80078ee:	028a      	lsls	r2, r1, #10
 80078f0:	4610      	mov	r0, r2
 80078f2:	4619      	mov	r1, r3
 80078f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078f6:	2200      	movs	r2, #0
 80078f8:	61bb      	str	r3, [r7, #24]
 80078fa:	61fa      	str	r2, [r7, #28]
 80078fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007900:	f7f8 ff12 	bl	8000728 <__aeabi_uldivmod>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4613      	mov	r3, r2
 800790a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800790c:	4b0b      	ldr	r3, [pc, #44]	; (800793c <HAL_RCC_GetSysClockFreq+0x200>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	0c1b      	lsrs	r3, r3, #16
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	3301      	adds	r3, #1
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800791c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800791e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007926:	e002      	b.n	800792e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <HAL_RCC_GetSysClockFreq+0x204>)
 800792a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800792c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800792e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007930:	4618      	mov	r0, r3
 8007932:	3750      	adds	r7, #80	; 0x50
 8007934:	46bd      	mov	sp, r7
 8007936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800793a:	bf00      	nop
 800793c:	40023800 	.word	0x40023800
 8007940:	00f42400 	.word	0x00f42400
 8007944:	007a1200 	.word	0x007a1200

08007948 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800794c:	4b03      	ldr	r3, [pc, #12]	; (800795c <HAL_RCC_GetHCLKFreq+0x14>)
 800794e:	681b      	ldr	r3, [r3, #0]
}
 8007950:	4618      	mov	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000004 	.word	0x20000004

08007960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007964:	f7ff fff0 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 8007968:	4602      	mov	r2, r0
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	0a9b      	lsrs	r3, r3, #10
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	4903      	ldr	r1, [pc, #12]	; (8007984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007976:	5ccb      	ldrb	r3, [r1, r3]
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40023800 	.word	0x40023800
 8007984:	08024350 	.word	0x08024350

08007988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800798c:	f7ff ffdc 	bl	8007948 <HAL_RCC_GetHCLKFreq>
 8007990:	4602      	mov	r2, r0
 8007992:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	0b5b      	lsrs	r3, r3, #13
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	4903      	ldr	r1, [pc, #12]	; (80079ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800799e:	5ccb      	ldrb	r3, [r1, r3]
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40023800 	.word	0x40023800
 80079ac:	08024350 	.word	0x08024350

080079b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	220f      	movs	r2, #15
 80079be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079c0:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <HAL_RCC_GetClockConfig+0x5c>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 0203 	and.w	r2, r3, #3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <HAL_RCC_GetClockConfig+0x5c>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <HAL_RCC_GetClockConfig+0x5c>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80079e4:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <HAL_RCC_GetClockConfig+0x5c>)
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	08db      	lsrs	r3, r3, #3
 80079ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <HAL_RCC_GetClockConfig+0x60>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 020f 	and.w	r2, r3, #15
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	601a      	str	r2, [r3, #0]
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	40023c00 	.word	0x40023c00

08007a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d012      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a3c:	4b69      	ldr	r3, [pc, #420]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4a68      	ldr	r2, [pc, #416]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a46:	6093      	str	r3, [r2, #8]
 8007a48:	4b66      	ldr	r3, [pc, #408]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a50:	4964      	ldr	r1, [pc, #400]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d017      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a6e:	4b5d      	ldr	r3, [pc, #372]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7c:	4959      	ldr	r1, [pc, #356]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a8c:	d101      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d017      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007aaa:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	494a      	ldr	r1, [pc, #296]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac8:	d101      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 808b 	beq.w	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007af8:	4b3a      	ldr	r3, [pc, #232]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	4a39      	ldr	r2, [pc, #228]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b02:	6413      	str	r3, [r2, #64]	; 0x40
 8007b04:	4b37      	ldr	r3, [pc, #220]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0c:	60bb      	str	r3, [r7, #8]
 8007b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b10:	4b35      	ldr	r3, [pc, #212]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a34      	ldr	r2, [pc, #208]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b1c:	f7fc fa08 	bl	8003f30 <HAL_GetTick>
 8007b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b22:	e008      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b24:	f7fc fa04 	bl	8003f30 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b64      	cmp	r3, #100	; 0x64
 8007b30:	d901      	bls.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e38f      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b36:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0f0      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b42:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d035      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d02e      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b60:	4b20      	ldr	r3, [pc, #128]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b6a:	4b1e      	ldr	r3, [pc, #120]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b76:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b82:	4a18      	ldr	r2, [pc, #96]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b88:	4b16      	ldr	r3, [pc, #88]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d114      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fc f9cc 	bl	8003f30 <HAL_GetTick>
 8007b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9a:	e00a      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b9c:	f7fc f9c8 	bl	8003f30 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e351      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0ee      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bca:	d111      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bd8:	4b04      	ldr	r3, [pc, #16]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bda:	400b      	ands	r3, r1
 8007bdc:	4901      	ldr	r1, [pc, #4]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	608b      	str	r3, [r1, #8]
 8007be2:	e00b      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007be4:	40023800 	.word	0x40023800
 8007be8:	40007000 	.word	0x40007000
 8007bec:	0ffffcff 	.word	0x0ffffcff
 8007bf0:	4bac      	ldr	r3, [pc, #688]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	4aab      	ldr	r2, [pc, #684]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bfa:	6093      	str	r3, [r2, #8]
 8007bfc:	4ba9      	ldr	r3, [pc, #676]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c08:	49a6      	ldr	r1, [pc, #664]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d010      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c1a:	4ba2      	ldr	r3, [pc, #648]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c20:	4aa0      	ldr	r2, [pc, #640]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007c2a:	4b9e      	ldr	r3, [pc, #632]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	499b      	ldr	r1, [pc, #620]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c48:	4b96      	ldr	r3, [pc, #600]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c56:	4993      	ldr	r1, [pc, #588]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c6a:	4b8e      	ldr	r3, [pc, #568]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c78:	498a      	ldr	r1, [pc, #552]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c8c:	4b85      	ldr	r3, [pc, #532]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c9a:	4982      	ldr	r1, [pc, #520]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cae:	4b7d      	ldr	r3, [pc, #500]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbc:	4979      	ldr	r1, [pc, #484]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cd0:	4b74      	ldr	r3, [pc, #464]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd6:	f023 0203 	bic.w	r2, r3, #3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cde:	4971      	ldr	r1, [pc, #452]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cf2:	4b6c      	ldr	r3, [pc, #432]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf8:	f023 020c 	bic.w	r2, r3, #12
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d00:	4968      	ldr	r1, [pc, #416]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d14:	4b63      	ldr	r3, [pc, #396]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d22:	4960      	ldr	r1, [pc, #384]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d36:	4b5b      	ldr	r3, [pc, #364]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d44:	4957      	ldr	r1, [pc, #348]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d58:	4b52      	ldr	r3, [pc, #328]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	494f      	ldr	r1, [pc, #316]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d7a:	4b4a      	ldr	r3, [pc, #296]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d88:	4946      	ldr	r1, [pc, #280]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d9c:	4b41      	ldr	r3, [pc, #260]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007daa:	493e      	ldr	r1, [pc, #248]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007dbe:	4b39      	ldr	r3, [pc, #228]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dcc:	4935      	ldr	r1, [pc, #212]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007de0:	4b30      	ldr	r3, [pc, #192]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dee:	492d      	ldr	r1, [pc, #180]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d011      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007e02:	4b28      	ldr	r3, [pc, #160]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e10:	4924      	ldr	r1, [pc, #144]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e20:	d101      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007e22:	2301      	movs	r3, #1
 8007e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007e32:	2301      	movs	r3, #1
 8007e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e42:	4b18      	ldr	r3, [pc, #96]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e50:	4914      	ldr	r1, [pc, #80]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e64:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e74:	490b      	ldr	r1, [pc, #44]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00f      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007e88:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e98:	4902      	ldr	r1, [pc, #8]	; (8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007ea0:	e002      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007ea2:	bf00      	nop
 8007ea4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007eb4:	4b8a      	ldr	r3, [pc, #552]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec4:	4986      	ldr	r1, [pc, #536]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007ed8:	4b81      	ldr	r3, [pc, #516]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ede:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee8:	497d      	ldr	r1, [pc, #500]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d006      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 80d6 	beq.w	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f04:	4b76      	ldr	r3, [pc, #472]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a75      	ldr	r2, [pc, #468]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f10:	f7fc f80e 	bl	8003f30 <HAL_GetTick>
 8007f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f16:	e008      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f18:	f7fc f80a 	bl	8003f30 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b64      	cmp	r3, #100	; 0x64
 8007f24:	d901      	bls.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e195      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f2a:	4b6d      	ldr	r3, [pc, #436]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f0      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d021      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11d      	bne.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f4a:	4b65      	ldr	r3, [pc, #404]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f50:	0c1b      	lsrs	r3, r3, #16
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f58:	4b61      	ldr	r3, [pc, #388]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5e:	0e1b      	lsrs	r3, r3, #24
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	019a      	lsls	r2, r3, #6
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	431a      	orrs	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	061b      	lsls	r3, r3, #24
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	071b      	lsls	r3, r3, #28
 8007f7e:	4958      	ldr	r1, [pc, #352]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f9a:	d00a      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d02e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fb0:	d129      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fb2:	4b4b      	ldr	r3, [pc, #300]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fc0:	4b47      	ldr	r3, [pc, #284]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc6:	0f1b      	lsrs	r3, r3, #28
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	019a      	lsls	r2, r3, #6
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	061b      	lsls	r3, r3, #24
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	071b      	lsls	r3, r3, #28
 8007fe6:	493e      	ldr	r1, [pc, #248]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007fee:	4b3c      	ldr	r3, [pc, #240]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff4:	f023 021f 	bic.w	r2, r3, #31
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4938      	ldr	r1, [pc, #224]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01d      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008012:	4b33      	ldr	r3, [pc, #204]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008018:	0e1b      	lsrs	r3, r3, #24
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008020:	4b2f      	ldr	r3, [pc, #188]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008026:	0f1b      	lsrs	r3, r3, #28
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	019a      	lsls	r2, r3, #6
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	431a      	orrs	r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	071b      	lsls	r3, r3, #28
 8008046:	4926      	ldr	r1, [pc, #152]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008048:	4313      	orrs	r3, r2
 800804a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	019a      	lsls	r2, r3, #6
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	061b      	lsls	r3, r3, #24
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	071b      	lsls	r3, r3, #28
 8008076:	491a      	ldr	r1, [pc, #104]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800807e:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a17      	ldr	r2, [pc, #92]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800808a:	f7fb ff51 	bl	8003f30 <HAL_GetTick>
 800808e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008090:	e008      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008092:	f7fb ff4d 	bl	8003f30 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b64      	cmp	r3, #100	; 0x64
 800809e:	d901      	bls.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e0d8      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080a4:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f0      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	f040 80ce 	bne.w	8008254 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a08      	ldr	r2, [pc, #32]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080c4:	f7fb ff34 	bl	8003f30 <HAL_GetTick>
 80080c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080ca:	e00b      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080cc:	f7fb ff30 	bl	8003f30 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b64      	cmp	r3, #100	; 0x64
 80080d8:	d904      	bls.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e0bb      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80080de:	bf00      	nop
 80080e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080e4:	4b5e      	ldr	r3, [pc, #376]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080f0:	d0ec      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800810e:	2b00      	cmp	r3, #0
 8008110:	d02e      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d12a      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800811a:	4b51      	ldr	r3, [pc, #324]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008120:	0c1b      	lsrs	r3, r3, #16
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008128:	4b4d      	ldr	r3, [pc, #308]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800812a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812e:	0f1b      	lsrs	r3, r3, #28
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	019a      	lsls	r2, r3, #6
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	431a      	orrs	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	061b      	lsls	r3, r3, #24
 8008148:	431a      	orrs	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	071b      	lsls	r3, r3, #28
 800814e:	4944      	ldr	r1, [pc, #272]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008150:	4313      	orrs	r3, r2
 8008152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008156:	4b42      	ldr	r3, [pc, #264]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800815c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	3b01      	subs	r3, #1
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	493d      	ldr	r1, [pc, #244]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800816a:	4313      	orrs	r3, r2
 800816c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d022      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008184:	d11d      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008186:	4b36      	ldr	r3, [pc, #216]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818c:	0e1b      	lsrs	r3, r3, #24
 800818e:	f003 030f 	and.w	r3, r3, #15
 8008192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008194:	4b32      	ldr	r3, [pc, #200]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819a:	0f1b      	lsrs	r3, r3, #28
 800819c:	f003 0307 	and.w	r3, r3, #7
 80081a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	019a      	lsls	r2, r3, #6
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	431a      	orrs	r2, r3
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	061b      	lsls	r3, r3, #24
 80081b4:	431a      	orrs	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	071b      	lsls	r3, r3, #28
 80081ba:	4929      	ldr	r1, [pc, #164]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d028      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081ce:	4b24      	ldr	r3, [pc, #144]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d4:	0e1b      	lsrs	r3, r3, #24
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081dc:	4b20      	ldr	r3, [pc, #128]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	f003 0303 	and.w	r3, r3, #3
 80081e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	019a      	lsls	r2, r3, #6
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	431a      	orrs	r2, r3
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	061b      	lsls	r3, r3, #24
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	071b      	lsls	r3, r3, #28
 8008202:	4917      	ldr	r1, [pc, #92]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800820a:	4b15      	ldr	r3, [pc, #84]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800820c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	4911      	ldr	r1, [pc, #68]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008220:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822c:	f7fb fe80 	bl	8003f30 <HAL_GetTick>
 8008230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008232:	e008      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008234:	f7fb fe7c 	bl	8003f30 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b64      	cmp	r3, #100	; 0x64
 8008240:	d901      	bls.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e007      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008246:	4b06      	ldr	r3, [pc, #24]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800824e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008252:	d1ef      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3720      	adds	r7, #32
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	40023800 	.word	0x40023800

08008264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e049      	b.n	800830a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f841 	bl	8008312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f000 faa6 	bl	80087f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d001      	beq.n	8008340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e054      	b.n	80083ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a26      	ldr	r2, [pc, #152]	; (80083f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d022      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800836a:	d01d      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a22      	ldr	r2, [pc, #136]	; (80083fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d018      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a21      	ldr	r2, [pc, #132]	; (8008400 <HAL_TIM_Base_Start_IT+0xd8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d013      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <HAL_TIM_Base_Start_IT+0xdc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00e      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1e      	ldr	r2, [pc, #120]	; (8008408 <HAL_TIM_Base_Start_IT+0xe0>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d009      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1c      	ldr	r2, [pc, #112]	; (800840c <HAL_TIM_Base_Start_IT+0xe4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d004      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x80>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1b      	ldr	r2, [pc, #108]	; (8008410 <HAL_TIM_Base_Start_IT+0xe8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d115      	bne.n	80083d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	4b19      	ldr	r3, [pc, #100]	; (8008414 <HAL_TIM_Base_Start_IT+0xec>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b06      	cmp	r3, #6
 80083b8:	d015      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0xbe>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c0:	d011      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0201 	orr.w	r2, r2, #1
 80083d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083d2:	e008      	b.n	80083e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0201 	orr.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	e000      	b.n	80083e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40000c00 	.word	0x40000c00
 8008408:	40010400 	.word	0x40010400
 800840c:	40014000 	.word	0x40014000
 8008410:	40001800 	.word	0x40001800
 8008414:	00010007 	.word	0x00010007

08008418 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e08f      	b.n	800854c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7fb fbb5 	bl	8003bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2202      	movs	r2, #2
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6899      	ldr	r1, [r3, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b3e      	ldr	r3, [pc, #248]	; (8008554 <HAL_TIM_Encoder_Init+0x13c>)
 800845a:	400b      	ands	r3, r1
 800845c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3304      	adds	r3, #4
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f000 f9c3 	bl	80087f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4b31      	ldr	r3, [pc, #196]	; (8008558 <HAL_TIM_Encoder_Init+0x140>)
 8008494:	4013      	ands	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	4313      	orrs	r3, r2
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4b2b      	ldr	r3, [pc, #172]	; (800855c <HAL_TIM_Encoder_Init+0x144>)
 80084ae:	4013      	ands	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4b2a      	ldr	r3, [pc, #168]	; (8008560 <HAL_TIM_Encoder_Init+0x148>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	4313      	orrs	r3, r2
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	011a      	lsls	r2, r3, #4
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	031b      	lsls	r3, r3, #12
 80084d8:	4313      	orrs	r3, r2
 80084da:	693a      	ldr	r2, [r7, #16]
 80084dc:	4313      	orrs	r3, r2
 80084de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80084e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80084ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	4313      	orrs	r3, r2
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	fffebff8 	.word	0xfffebff8
 8008558:	fffffcfc 	.word	0xfffffcfc
 800855c:	fffff3f3 	.word	0xfffff3f3
 8008560:	ffff0f0f 	.word	0xffff0f0f

08008564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b02      	cmp	r3, #2
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b02      	cmp	r3, #2
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0202 	mvn.w	r2, #2
 8008590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f003 0303 	and.w	r3, r3, #3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f905 	bl	80087b6 <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8f7 	bl	80087a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f908 	bl	80087ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d122      	bne.n	8008614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d11b      	bne.n	8008614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0204 	mvn.w	r2, #4
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f8db 	bl	80087b6 <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f8cd 	bl	80087a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f8de 	bl	80087ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b08      	cmp	r3, #8
 8008620:	d122      	bne.n	8008668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0308 	and.w	r3, r3, #8
 800862c:	2b08      	cmp	r3, #8
 800862e:	d11b      	bne.n	8008668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0208 	mvn.w	r2, #8
 8008638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2204      	movs	r2, #4
 800863e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f8b1 	bl	80087b6 <HAL_TIM_IC_CaptureCallback>
 8008654:	e005      	b.n	8008662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8a3 	bl	80087a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f8b4 	bl	80087ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b10      	cmp	r3, #16
 8008674:	d122      	bne.n	80086bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b10      	cmp	r3, #16
 8008682:	d11b      	bne.n	80086bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0210 	mvn.w	r2, #16
 800868c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2208      	movs	r2, #8
 8008692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f887 	bl	80087b6 <HAL_TIM_IC_CaptureCallback>
 80086a8:	e005      	b.n	80086b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f879 	bl	80087a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f88a 	bl	80087ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d10e      	bne.n	80086e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d107      	bne.n	80086e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f06f 0201 	mvn.w	r2, #1
 80086e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fa fe58 	bl	8003398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b80      	cmp	r3, #128	; 0x80
 80086f4:	d10e      	bne.n	8008714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008700:	2b80      	cmp	r3, #128	; 0x80
 8008702:	d107      	bne.n	8008714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800870c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f9a8 	bl	8008a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008722:	d10e      	bne.n	8008742 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872e:	2b80      	cmp	r3, #128	; 0x80
 8008730:	d107      	bne.n	8008742 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800873a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f99b 	bl	8008a78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874c:	2b40      	cmp	r3, #64	; 0x40
 800874e:	d10e      	bne.n	800876e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875a:	2b40      	cmp	r3, #64	; 0x40
 800875c:	d107      	bne.n	800876e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f838 	bl	80087de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b20      	cmp	r3, #32
 800877a:	d10e      	bne.n	800879a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b20      	cmp	r3, #32
 8008788:	d107      	bne.n	800879a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f06f 0220 	mvn.w	r2, #32
 8008792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f95b 	bl	8008a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b083      	sub	sp, #12
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a40      	ldr	r2, [pc, #256]	; (8008908 <TIM_Base_SetConfig+0x114>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d013      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008812:	d00f      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a3d      	ldr	r2, [pc, #244]	; (800890c <TIM_Base_SetConfig+0x118>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00b      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a3c      	ldr	r2, [pc, #240]	; (8008910 <TIM_Base_SetConfig+0x11c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d007      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a3b      	ldr	r2, [pc, #236]	; (8008914 <TIM_Base_SetConfig+0x120>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_Base_SetConfig+0x40>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a3a      	ldr	r2, [pc, #232]	; (8008918 <TIM_Base_SetConfig+0x124>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d108      	bne.n	8008846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a2f      	ldr	r2, [pc, #188]	; (8008908 <TIM_Base_SetConfig+0x114>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d02b      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008854:	d027      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a2c      	ldr	r2, [pc, #176]	; (800890c <TIM_Base_SetConfig+0x118>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d023      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a2b      	ldr	r2, [pc, #172]	; (8008910 <TIM_Base_SetConfig+0x11c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d01f      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a2a      	ldr	r2, [pc, #168]	; (8008914 <TIM_Base_SetConfig+0x120>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d01b      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a29      	ldr	r2, [pc, #164]	; (8008918 <TIM_Base_SetConfig+0x124>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d017      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a28      	ldr	r2, [pc, #160]	; (800891c <TIM_Base_SetConfig+0x128>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d013      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a27      	ldr	r2, [pc, #156]	; (8008920 <TIM_Base_SetConfig+0x12c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00f      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a26      	ldr	r2, [pc, #152]	; (8008924 <TIM_Base_SetConfig+0x130>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00b      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a25      	ldr	r2, [pc, #148]	; (8008928 <TIM_Base_SetConfig+0x134>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d007      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a24      	ldr	r2, [pc, #144]	; (800892c <TIM_Base_SetConfig+0x138>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d003      	beq.n	80088a6 <TIM_Base_SetConfig+0xb2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a23      	ldr	r2, [pc, #140]	; (8008930 <TIM_Base_SetConfig+0x13c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d108      	bne.n	80088b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a0a      	ldr	r2, [pc, #40]	; (8008908 <TIM_Base_SetConfig+0x114>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_Base_SetConfig+0xf8>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <TIM_Base_SetConfig+0x124>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d103      	bne.n	80088f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	615a      	str	r2, [r3, #20]
}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	40010000 	.word	0x40010000
 800890c:	40000400 	.word	0x40000400
 8008910:	40000800 	.word	0x40000800
 8008914:	40000c00 	.word	0x40000c00
 8008918:	40010400 	.word	0x40010400
 800891c:	40014000 	.word	0x40014000
 8008920:	40014400 	.word	0x40014400
 8008924:	40014800 	.word	0x40014800
 8008928:	40001800 	.word	0x40001800
 800892c:	40001c00 	.word	0x40001c00
 8008930:	40002000 	.word	0x40002000

08008934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008948:	2302      	movs	r3, #2
 800894a:	e06d      	b.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a30      	ldr	r2, [pc, #192]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d004      	beq.n	8008980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a2f      	ldr	r2, [pc, #188]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d108      	bne.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a20      	ldr	r2, [pc, #128]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d022      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089be:	d01d      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1d      	ldr	r2, [pc, #116]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d018      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a1c      	ldr	r2, [pc, #112]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d013      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d00e      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d009      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a15      	ldr	r2, [pc, #84]	; (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d10c      	bne.n	8008a16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40010400 	.word	0x40010400
 8008a3c:	40000400 	.word	0x40000400
 8008a40:	40000800 	.word	0x40000800
 8008a44:	40000c00 	.word	0x40000c00
 8008a48:	40014000 	.word	0x40014000
 8008a4c:	40001800 	.word	0x40001800

08008a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e040      	b.n	8008b20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7fb f924 	bl	8003cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2224      	movs	r2, #36	; 0x24
 8008ab8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f022 0201 	bic.w	r2, r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fd32 	bl	8009534 <UART_SetConfig>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e022      	b.n	8008b20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 ff8a 	bl	80099fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008af6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0201 	orr.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 f811 	bl	8009b40 <UART_CheckIdleState>
 8008b1e:	4603      	mov	r3, r0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	; 0x28
 8008b2c:	af02      	add	r7, sp, #8
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	4613      	mov	r3, r2
 8008b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	d171      	bne.n	8008c24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_UART_Transmit+0x24>
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e06a      	b.n	8008c26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2221      	movs	r2, #33	; 0x21
 8008b5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b5e:	f7fb f9e7 	bl	8003f30 <HAL_GetTick>
 8008b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7c:	d108      	bne.n	8008b90 <HAL_UART_Transmit+0x68>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	61bb      	str	r3, [r7, #24]
 8008b8e:	e003      	b.n	8008b98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b98:	e02c      	b.n	8008bf4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2180      	movs	r1, #128	; 0x80
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f001 f818 	bl	8009bda <UART_WaitOnFlagUntilTimeout>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e038      	b.n	8008c26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	3302      	adds	r3, #2
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	e007      	b.n	8008be2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	3301      	adds	r3, #1
 8008be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1cc      	bne.n	8008b9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2200      	movs	r2, #0
 8008c08:	2140      	movs	r1, #64	; 0x40
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 ffe5 	bl	8009bda <UART_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e005      	b.n	8008c26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	e000      	b.n	8008c26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008c24:	2302      	movs	r3, #2
  }
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d165      	bne.n	8008d12 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <HAL_UART_Transmit_DMA+0x22>
 8008c4c:	88fb      	ldrh	r3, [r7, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e05e      	b.n	8008d14 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	88fa      	ldrh	r2, [r7, #6]
 8008c60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	88fa      	ldrh	r2, [r7, #6]
 8008c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2221      	movs	r2, #33	; 0x21
 8008c78:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d027      	beq.n	8008cd2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	4a25      	ldr	r2, [pc, #148]	; (8008d1c <HAL_UART_Transmit_DMA+0xec>)
 8008c88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	4a24      	ldr	r2, [pc, #144]	; (8008d20 <HAL_UART_Transmit_DMA+0xf0>)
 8008c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	4a23      	ldr	r2, [pc, #140]	; (8008d24 <HAL_UART_Transmit_DMA+0xf4>)
 8008c98:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008caa:	4619      	mov	r1, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3328      	adds	r3, #40	; 0x28
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	88fb      	ldrh	r3, [r7, #6]
 8008cb6:	f7fc f957 	bl	8004f68 <HAL_DMA_Start_IT>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2210      	movs	r2, #16
 8008cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2220      	movs	r2, #32
 8008ccc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e020      	b.n	8008d14 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2240      	movs	r2, #64	; 0x40
 8008cd8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	623a      	str	r2, [r7, #32]
 8008cfc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	69f9      	ldr	r1, [r7, #28]
 8008d00:	6a3a      	ldr	r2, [r7, #32]
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e000      	b.n	8008d14 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008d12:	2302      	movs	r3, #2
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3728      	adds	r7, #40	; 0x28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	08009fbd 	.word	0x08009fbd
 8008d20:	0800a053 	.word	0x0800a053
 8008d24:	0800a1d5 	.word	0x0800a1d5

08008d28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d132      	bne.n	8008da6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_UART_Receive_DMA+0x24>
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e02b      	b.n	8008da8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d018      	beq.n	8008d96 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	613b      	str	r3, [r7, #16]
   return(result);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	623b      	str	r3, [r7, #32]
 8008d84:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	69f9      	ldr	r1, [r7, #28]
 8008d88:	6a3a      	ldr	r2, [r7, #32]
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e6      	bne.n	8008d64 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 ffe3 	bl	8009d68 <UART_Start_Receive_DMA>
 8008da2:	4603      	mov	r3, r0
 8008da4:	e000      	b.n	8008da8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3728      	adds	r7, #40	; 0x28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b090      	sub	sp, #64	; 0x40
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dc4:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd0:	2b80      	cmp	r3, #128	; 0x80
 8008dd2:	d139      	bne.n	8008e48 <HAL_UART_DMAStop+0x98>
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd6:	2b21      	cmp	r3, #33	; 0x21
 8008dd8:	d136      	bne.n	8008e48 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3308      	adds	r3, #8
 8008de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3308      	adds	r3, #8
 8008df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d015      	beq.n	8008e42 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fc f904 	bl	8005028 <HAL_DMA_Abort>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00d      	beq.n	8008e42 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fc fb18 	bl	8005460 <HAL_DMA_GetError>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	d105      	bne.n	8008e42 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2210      	movs	r2, #16
 8008e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e044      	b.n	8008ecc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 f830 	bl	8009ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d139      	bne.n	8008eca <HAL_UART_DMAStop+0x11a>
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	2b22      	cmp	r3, #34	; 0x22
 8008e5a:	d136      	bne.n	8008eca <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e72:	633b      	str	r3, [r7, #48]	; 0x30
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7c:	61ba      	str	r2, [r7, #24]
 8008e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	6979      	ldr	r1, [r7, #20]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	613b      	str	r3, [r7, #16]
   return(result);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e5      	bne.n	8008e5c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d015      	beq.n	8008ec4 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fc f8c3 	bl	8005028 <HAL_DMA_Abort>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00d      	beq.n	8008ec4 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fc fad7 	bl	8005460 <HAL_DMA_GetError>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d105      	bne.n	8008ec4 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2210      	movs	r2, #16
 8008ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e003      	b.n	8008ecc <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 f815 	bl	8009ef4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3740      	adds	r7, #64	; 0x40
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b0ba      	sub	sp, #232	; 0xe8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008efa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008efe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f02:	4013      	ands	r3, r2
 8008f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d115      	bne.n	8008f3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00f      	beq.n	8008f3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d009      	beq.n	8008f3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 82ac 	beq.w	800948a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
      }
      return;
 8008f3a:	e2a6      	b.n	800948a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8117 	beq.w	8009174 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d106      	bne.n	8008f60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008f52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f56:	4b85      	ldr	r3, [pc, #532]	; (800916c <HAL_UART_IRQHandler+0x298>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 810a 	beq.w	8009174 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f64:	f003 0301 	and.w	r3, r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d011      	beq.n	8008f90 <HAL_UART_IRQHandler+0xbc>
 8008f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f86:	f043 0201 	orr.w	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d011      	beq.n	8008fc0 <HAL_UART_IRQHandler+0xec>
 8008f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2202      	movs	r2, #2
 8008fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb6:	f043 0204 	orr.w	r2, r3, #4
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d011      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x11c>
 8008fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00b      	beq.n	8008ff0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2204      	movs	r2, #4
 8008fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fe6:	f043 0202 	orr.w	r2, r3, #2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff4:	f003 0308 	and.w	r3, r3, #8
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d017      	beq.n	800902c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800900c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2208      	movs	r2, #8
 800901a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009022:	f043 0208 	orr.w	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800902c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <HAL_UART_IRQHandler+0x18a>
 8009038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800903c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00c      	beq.n	800905e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800904c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009054:	f043 0220 	orr.w	r2, r3, #32
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 8212 	beq.w	800948e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800906a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00d      	beq.n	8009092 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d005      	beq.n	80090b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80090aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d04f      	beq.n	8009156 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 ff1c 	bl	8009ef4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c6:	2b40      	cmp	r3, #64	; 0x40
 80090c8:	d141      	bne.n	800914e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3308      	adds	r3, #8
 80090d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3308      	adds	r3, #8
 80090f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800910e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1d9      	bne.n	80090ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800911a:	2b00      	cmp	r3, #0
 800911c:	d013      	beq.n	8009146 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009122:	4a13      	ldr	r2, [pc, #76]	; (8009170 <HAL_UART_IRQHandler+0x29c>)
 8009124:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800912a:	4618      	mov	r0, r3
 800912c:	f7fb ffec 	bl	8005108 <HAL_DMA_Abort_IT>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d017      	beq.n	8009166 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800913a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009144:	e00f      	b.n	8009166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9d4 	bl	80094f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800914c:	e00b      	b.n	8009166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9d0 	bl	80094f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009154:	e007      	b.n	8009166 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f9cc 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009164:	e193      	b.n	800948e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009166:	bf00      	nop
    return;
 8009168:	e191      	b.n	800948e <HAL_UART_IRQHandler+0x5ba>
 800916a:	bf00      	nop
 800916c:	04000120 	.word	0x04000120
 8009170:	0800a253 	.word	0x0800a253

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009178:	2b01      	cmp	r3, #1
 800917a:	f040 814c 	bne.w	8009416 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800917e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009182:	f003 0310 	and.w	r3, r3, #16
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8145 	beq.w	8009416 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800918c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 813e 	beq.w	8009416 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2210      	movs	r2, #16
 80091a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ac:	2b40      	cmp	r3, #64	; 0x40
 80091ae:	f040 80b6 	bne.w	800931e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 8165 	beq.w	8009492 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091d2:	429a      	cmp	r2, r3
 80091d4:	f080 815d 	bcs.w	8009492 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ec:	f000 8086 	beq.w	80092fc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800920c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800921a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800921e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1da      	bne.n	80091f0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800924a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800925e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009262:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009266:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e1      	bne.n	800923a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3308      	adds	r3, #8
 800927c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009280:	e853 3f00 	ldrex	r3, [r3]
 8009284:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800928c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3308      	adds	r3, #8
 8009296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800929a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800929c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e3      	bne.n	8009276 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092cc:	f023 0310 	bic.w	r3, r3, #16
 80092d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092de:	65bb      	str	r3, [r7, #88]	; 0x58
 80092e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e4      	bne.n	80092bc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fb fe96 	bl	8005028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800930e:	b29b      	uxth	r3, r3
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	b29b      	uxth	r3, r3
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f8f6 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800931c:	e0b9      	b.n	8009492 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800932a:	b29b      	uxth	r3, r3
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 80ab 	beq.w	8009496 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8009340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 80a6 	beq.w	8009496 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800935e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800936c:	647b      	str	r3, [r7, #68]	; 0x44
 800936e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800937a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e4      	bne.n	800934a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	623b      	str	r3, [r7, #32]
   return(result);
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3308      	adds	r3, #8
 80093a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093a4:	633a      	str	r2, [r7, #48]	; 0x30
 80093a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e3      	bne.n	8009380 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f023 0310 	bic.w	r3, r3, #16
 80093e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	69b9      	ldr	r1, [r7, #24]
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	617b      	str	r3, [r7, #20]
   return(result);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e4      	bne.n	80093cc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2202      	movs	r2, #2
 8009406:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f87a 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009414:	e03f      	b.n	8009496 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800941a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00e      	beq.n	8009440 <HAL_UART_IRQHandler+0x56c>
 8009422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009436:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f871 	bl	8009520 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800943e:	e02d      	b.n	800949c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00e      	beq.n	800946a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800944c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009454:	2b00      	cmp	r3, #0
 8009456:	d008      	beq.n	800946a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01c      	beq.n	800949a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	4798      	blx	r3
    }
    return;
 8009468:	e017      	b.n	800949a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800946a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800946e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d012      	beq.n	800949c <HAL_UART_IRQHandler+0x5c8>
 8009476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00c      	beq.n	800949c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fefb 	bl	800a27e <UART_EndTransmit_IT>
    return;
 8009488:	e008      	b.n	800949c <HAL_UART_IRQHandler+0x5c8>
      return;
 800948a:	bf00      	nop
 800948c:	e006      	b.n	800949c <HAL_UART_IRQHandler+0x5c8>
    return;
 800948e:	bf00      	nop
 8009490:	e004      	b.n	800949c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009492:	bf00      	nop
 8009494:	e002      	b.n	800949c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009496:	bf00      	nop
 8009498:	e000      	b.n	800949c <HAL_UART_IRQHandler+0x5c8>
    return;
 800949a:	bf00      	nop
  }

}
 800949c:	37e8      	adds	r7, #232	; 0xe8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop

080094a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	4313      	orrs	r3, r2
 8009556:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	4ba6      	ldr	r3, [pc, #664]	; (80097f8 <UART_SetConfig+0x2c4>)
 8009560:	4013      	ands	r3, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6812      	ldr	r2, [r2, #0]
 8009566:	6979      	ldr	r1, [r7, #20]
 8009568:	430b      	orrs	r3, r1
 800956a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a94      	ldr	r2, [pc, #592]	; (80097fc <UART_SetConfig+0x2c8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d120      	bne.n	80095f2 <UART_SetConfig+0xbe>
 80095b0:	4b93      	ldr	r3, [pc, #588]	; (8009800 <UART_SetConfig+0x2cc>)
 80095b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d816      	bhi.n	80095ec <UART_SetConfig+0xb8>
 80095be:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <UART_SetConfig+0x90>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	080095d5 	.word	0x080095d5
 80095c8:	080095e1 	.word	0x080095e1
 80095cc:	080095db 	.word	0x080095db
 80095d0:	080095e7 	.word	0x080095e7
 80095d4:	2301      	movs	r3, #1
 80095d6:	77fb      	strb	r3, [r7, #31]
 80095d8:	e150      	b.n	800987c <UART_SetConfig+0x348>
 80095da:	2302      	movs	r3, #2
 80095dc:	77fb      	strb	r3, [r7, #31]
 80095de:	e14d      	b.n	800987c <UART_SetConfig+0x348>
 80095e0:	2304      	movs	r3, #4
 80095e2:	77fb      	strb	r3, [r7, #31]
 80095e4:	e14a      	b.n	800987c <UART_SetConfig+0x348>
 80095e6:	2308      	movs	r3, #8
 80095e8:	77fb      	strb	r3, [r7, #31]
 80095ea:	e147      	b.n	800987c <UART_SetConfig+0x348>
 80095ec:	2310      	movs	r3, #16
 80095ee:	77fb      	strb	r3, [r7, #31]
 80095f0:	e144      	b.n	800987c <UART_SetConfig+0x348>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a83      	ldr	r2, [pc, #524]	; (8009804 <UART_SetConfig+0x2d0>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d132      	bne.n	8009662 <UART_SetConfig+0x12e>
 80095fc:	4b80      	ldr	r3, [pc, #512]	; (8009800 <UART_SetConfig+0x2cc>)
 80095fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009602:	f003 030c 	and.w	r3, r3, #12
 8009606:	2b0c      	cmp	r3, #12
 8009608:	d828      	bhi.n	800965c <UART_SetConfig+0x128>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <UART_SetConfig+0xdc>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	08009645 	.word	0x08009645
 8009614:	0800965d 	.word	0x0800965d
 8009618:	0800965d 	.word	0x0800965d
 800961c:	0800965d 	.word	0x0800965d
 8009620:	08009651 	.word	0x08009651
 8009624:	0800965d 	.word	0x0800965d
 8009628:	0800965d 	.word	0x0800965d
 800962c:	0800965d 	.word	0x0800965d
 8009630:	0800964b 	.word	0x0800964b
 8009634:	0800965d 	.word	0x0800965d
 8009638:	0800965d 	.word	0x0800965d
 800963c:	0800965d 	.word	0x0800965d
 8009640:	08009657 	.word	0x08009657
 8009644:	2300      	movs	r3, #0
 8009646:	77fb      	strb	r3, [r7, #31]
 8009648:	e118      	b.n	800987c <UART_SetConfig+0x348>
 800964a:	2302      	movs	r3, #2
 800964c:	77fb      	strb	r3, [r7, #31]
 800964e:	e115      	b.n	800987c <UART_SetConfig+0x348>
 8009650:	2304      	movs	r3, #4
 8009652:	77fb      	strb	r3, [r7, #31]
 8009654:	e112      	b.n	800987c <UART_SetConfig+0x348>
 8009656:	2308      	movs	r3, #8
 8009658:	77fb      	strb	r3, [r7, #31]
 800965a:	e10f      	b.n	800987c <UART_SetConfig+0x348>
 800965c:	2310      	movs	r3, #16
 800965e:	77fb      	strb	r3, [r7, #31]
 8009660:	e10c      	b.n	800987c <UART_SetConfig+0x348>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a68      	ldr	r2, [pc, #416]	; (8009808 <UART_SetConfig+0x2d4>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d120      	bne.n	80096ae <UART_SetConfig+0x17a>
 800966c:	4b64      	ldr	r3, [pc, #400]	; (8009800 <UART_SetConfig+0x2cc>)
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009676:	2b30      	cmp	r3, #48	; 0x30
 8009678:	d013      	beq.n	80096a2 <UART_SetConfig+0x16e>
 800967a:	2b30      	cmp	r3, #48	; 0x30
 800967c:	d814      	bhi.n	80096a8 <UART_SetConfig+0x174>
 800967e:	2b20      	cmp	r3, #32
 8009680:	d009      	beq.n	8009696 <UART_SetConfig+0x162>
 8009682:	2b20      	cmp	r3, #32
 8009684:	d810      	bhi.n	80096a8 <UART_SetConfig+0x174>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <UART_SetConfig+0x15c>
 800968a:	2b10      	cmp	r3, #16
 800968c:	d006      	beq.n	800969c <UART_SetConfig+0x168>
 800968e:	e00b      	b.n	80096a8 <UART_SetConfig+0x174>
 8009690:	2300      	movs	r3, #0
 8009692:	77fb      	strb	r3, [r7, #31]
 8009694:	e0f2      	b.n	800987c <UART_SetConfig+0x348>
 8009696:	2302      	movs	r3, #2
 8009698:	77fb      	strb	r3, [r7, #31]
 800969a:	e0ef      	b.n	800987c <UART_SetConfig+0x348>
 800969c:	2304      	movs	r3, #4
 800969e:	77fb      	strb	r3, [r7, #31]
 80096a0:	e0ec      	b.n	800987c <UART_SetConfig+0x348>
 80096a2:	2308      	movs	r3, #8
 80096a4:	77fb      	strb	r3, [r7, #31]
 80096a6:	e0e9      	b.n	800987c <UART_SetConfig+0x348>
 80096a8:	2310      	movs	r3, #16
 80096aa:	77fb      	strb	r3, [r7, #31]
 80096ac:	e0e6      	b.n	800987c <UART_SetConfig+0x348>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a56      	ldr	r2, [pc, #344]	; (800980c <UART_SetConfig+0x2d8>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d120      	bne.n	80096fa <UART_SetConfig+0x1c6>
 80096b8:	4b51      	ldr	r3, [pc, #324]	; (8009800 <UART_SetConfig+0x2cc>)
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096c2:	2bc0      	cmp	r3, #192	; 0xc0
 80096c4:	d013      	beq.n	80096ee <UART_SetConfig+0x1ba>
 80096c6:	2bc0      	cmp	r3, #192	; 0xc0
 80096c8:	d814      	bhi.n	80096f4 <UART_SetConfig+0x1c0>
 80096ca:	2b80      	cmp	r3, #128	; 0x80
 80096cc:	d009      	beq.n	80096e2 <UART_SetConfig+0x1ae>
 80096ce:	2b80      	cmp	r3, #128	; 0x80
 80096d0:	d810      	bhi.n	80096f4 <UART_SetConfig+0x1c0>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <UART_SetConfig+0x1a8>
 80096d6:	2b40      	cmp	r3, #64	; 0x40
 80096d8:	d006      	beq.n	80096e8 <UART_SetConfig+0x1b4>
 80096da:	e00b      	b.n	80096f4 <UART_SetConfig+0x1c0>
 80096dc:	2300      	movs	r3, #0
 80096de:	77fb      	strb	r3, [r7, #31]
 80096e0:	e0cc      	b.n	800987c <UART_SetConfig+0x348>
 80096e2:	2302      	movs	r3, #2
 80096e4:	77fb      	strb	r3, [r7, #31]
 80096e6:	e0c9      	b.n	800987c <UART_SetConfig+0x348>
 80096e8:	2304      	movs	r3, #4
 80096ea:	77fb      	strb	r3, [r7, #31]
 80096ec:	e0c6      	b.n	800987c <UART_SetConfig+0x348>
 80096ee:	2308      	movs	r3, #8
 80096f0:	77fb      	strb	r3, [r7, #31]
 80096f2:	e0c3      	b.n	800987c <UART_SetConfig+0x348>
 80096f4:	2310      	movs	r3, #16
 80096f6:	77fb      	strb	r3, [r7, #31]
 80096f8:	e0c0      	b.n	800987c <UART_SetConfig+0x348>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a44      	ldr	r2, [pc, #272]	; (8009810 <UART_SetConfig+0x2dc>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d125      	bne.n	8009750 <UART_SetConfig+0x21c>
 8009704:	4b3e      	ldr	r3, [pc, #248]	; (8009800 <UART_SetConfig+0x2cc>)
 8009706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800970a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800970e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009712:	d017      	beq.n	8009744 <UART_SetConfig+0x210>
 8009714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009718:	d817      	bhi.n	800974a <UART_SetConfig+0x216>
 800971a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971e:	d00b      	beq.n	8009738 <UART_SetConfig+0x204>
 8009720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009724:	d811      	bhi.n	800974a <UART_SetConfig+0x216>
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <UART_SetConfig+0x1fe>
 800972a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972e:	d006      	beq.n	800973e <UART_SetConfig+0x20a>
 8009730:	e00b      	b.n	800974a <UART_SetConfig+0x216>
 8009732:	2300      	movs	r3, #0
 8009734:	77fb      	strb	r3, [r7, #31]
 8009736:	e0a1      	b.n	800987c <UART_SetConfig+0x348>
 8009738:	2302      	movs	r3, #2
 800973a:	77fb      	strb	r3, [r7, #31]
 800973c:	e09e      	b.n	800987c <UART_SetConfig+0x348>
 800973e:	2304      	movs	r3, #4
 8009740:	77fb      	strb	r3, [r7, #31]
 8009742:	e09b      	b.n	800987c <UART_SetConfig+0x348>
 8009744:	2308      	movs	r3, #8
 8009746:	77fb      	strb	r3, [r7, #31]
 8009748:	e098      	b.n	800987c <UART_SetConfig+0x348>
 800974a:	2310      	movs	r3, #16
 800974c:	77fb      	strb	r3, [r7, #31]
 800974e:	e095      	b.n	800987c <UART_SetConfig+0x348>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a2f      	ldr	r2, [pc, #188]	; (8009814 <UART_SetConfig+0x2e0>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d125      	bne.n	80097a6 <UART_SetConfig+0x272>
 800975a:	4b29      	ldr	r3, [pc, #164]	; (8009800 <UART_SetConfig+0x2cc>)
 800975c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009768:	d017      	beq.n	800979a <UART_SetConfig+0x266>
 800976a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800976e:	d817      	bhi.n	80097a0 <UART_SetConfig+0x26c>
 8009770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009774:	d00b      	beq.n	800978e <UART_SetConfig+0x25a>
 8009776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800977a:	d811      	bhi.n	80097a0 <UART_SetConfig+0x26c>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d003      	beq.n	8009788 <UART_SetConfig+0x254>
 8009780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009784:	d006      	beq.n	8009794 <UART_SetConfig+0x260>
 8009786:	e00b      	b.n	80097a0 <UART_SetConfig+0x26c>
 8009788:	2301      	movs	r3, #1
 800978a:	77fb      	strb	r3, [r7, #31]
 800978c:	e076      	b.n	800987c <UART_SetConfig+0x348>
 800978e:	2302      	movs	r3, #2
 8009790:	77fb      	strb	r3, [r7, #31]
 8009792:	e073      	b.n	800987c <UART_SetConfig+0x348>
 8009794:	2304      	movs	r3, #4
 8009796:	77fb      	strb	r3, [r7, #31]
 8009798:	e070      	b.n	800987c <UART_SetConfig+0x348>
 800979a:	2308      	movs	r3, #8
 800979c:	77fb      	strb	r3, [r7, #31]
 800979e:	e06d      	b.n	800987c <UART_SetConfig+0x348>
 80097a0:	2310      	movs	r3, #16
 80097a2:	77fb      	strb	r3, [r7, #31]
 80097a4:	e06a      	b.n	800987c <UART_SetConfig+0x348>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1b      	ldr	r2, [pc, #108]	; (8009818 <UART_SetConfig+0x2e4>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d138      	bne.n	8009822 <UART_SetConfig+0x2ee>
 80097b0:	4b13      	ldr	r3, [pc, #76]	; (8009800 <UART_SetConfig+0x2cc>)
 80097b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80097ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097be:	d017      	beq.n	80097f0 <UART_SetConfig+0x2bc>
 80097c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097c4:	d82a      	bhi.n	800981c <UART_SetConfig+0x2e8>
 80097c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ca:	d00b      	beq.n	80097e4 <UART_SetConfig+0x2b0>
 80097cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097d0:	d824      	bhi.n	800981c <UART_SetConfig+0x2e8>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <UART_SetConfig+0x2aa>
 80097d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097da:	d006      	beq.n	80097ea <UART_SetConfig+0x2b6>
 80097dc:	e01e      	b.n	800981c <UART_SetConfig+0x2e8>
 80097de:	2300      	movs	r3, #0
 80097e0:	77fb      	strb	r3, [r7, #31]
 80097e2:	e04b      	b.n	800987c <UART_SetConfig+0x348>
 80097e4:	2302      	movs	r3, #2
 80097e6:	77fb      	strb	r3, [r7, #31]
 80097e8:	e048      	b.n	800987c <UART_SetConfig+0x348>
 80097ea:	2304      	movs	r3, #4
 80097ec:	77fb      	strb	r3, [r7, #31]
 80097ee:	e045      	b.n	800987c <UART_SetConfig+0x348>
 80097f0:	2308      	movs	r3, #8
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e042      	b.n	800987c <UART_SetConfig+0x348>
 80097f6:	bf00      	nop
 80097f8:	efff69f3 	.word	0xefff69f3
 80097fc:	40011000 	.word	0x40011000
 8009800:	40023800 	.word	0x40023800
 8009804:	40004400 	.word	0x40004400
 8009808:	40004800 	.word	0x40004800
 800980c:	40004c00 	.word	0x40004c00
 8009810:	40005000 	.word	0x40005000
 8009814:	40011400 	.word	0x40011400
 8009818:	40007800 	.word	0x40007800
 800981c:	2310      	movs	r3, #16
 800981e:	77fb      	strb	r3, [r7, #31]
 8009820:	e02c      	b.n	800987c <UART_SetConfig+0x348>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a72      	ldr	r2, [pc, #456]	; (80099f0 <UART_SetConfig+0x4bc>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d125      	bne.n	8009878 <UART_SetConfig+0x344>
 800982c:	4b71      	ldr	r3, [pc, #452]	; (80099f4 <UART_SetConfig+0x4c0>)
 800982e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009832:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009836:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800983a:	d017      	beq.n	800986c <UART_SetConfig+0x338>
 800983c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009840:	d817      	bhi.n	8009872 <UART_SetConfig+0x33e>
 8009842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009846:	d00b      	beq.n	8009860 <UART_SetConfig+0x32c>
 8009848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984c:	d811      	bhi.n	8009872 <UART_SetConfig+0x33e>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <UART_SetConfig+0x326>
 8009852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009856:	d006      	beq.n	8009866 <UART_SetConfig+0x332>
 8009858:	e00b      	b.n	8009872 <UART_SetConfig+0x33e>
 800985a:	2300      	movs	r3, #0
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e00d      	b.n	800987c <UART_SetConfig+0x348>
 8009860:	2302      	movs	r3, #2
 8009862:	77fb      	strb	r3, [r7, #31]
 8009864:	e00a      	b.n	800987c <UART_SetConfig+0x348>
 8009866:	2304      	movs	r3, #4
 8009868:	77fb      	strb	r3, [r7, #31]
 800986a:	e007      	b.n	800987c <UART_SetConfig+0x348>
 800986c:	2308      	movs	r3, #8
 800986e:	77fb      	strb	r3, [r7, #31]
 8009870:	e004      	b.n	800987c <UART_SetConfig+0x348>
 8009872:	2310      	movs	r3, #16
 8009874:	77fb      	strb	r3, [r7, #31]
 8009876:	e001      	b.n	800987c <UART_SetConfig+0x348>
 8009878:	2310      	movs	r3, #16
 800987a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009884:	d15b      	bne.n	800993e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009886:	7ffb      	ldrb	r3, [r7, #31]
 8009888:	2b08      	cmp	r3, #8
 800988a:	d828      	bhi.n	80098de <UART_SetConfig+0x3aa>
 800988c:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <UART_SetConfig+0x360>)
 800988e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009892:	bf00      	nop
 8009894:	080098b9 	.word	0x080098b9
 8009898:	080098c1 	.word	0x080098c1
 800989c:	080098c9 	.word	0x080098c9
 80098a0:	080098df 	.word	0x080098df
 80098a4:	080098cf 	.word	0x080098cf
 80098a8:	080098df 	.word	0x080098df
 80098ac:	080098df 	.word	0x080098df
 80098b0:	080098df 	.word	0x080098df
 80098b4:	080098d7 	.word	0x080098d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b8:	f7fe f852 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 80098bc:	61b8      	str	r0, [r7, #24]
        break;
 80098be:	e013      	b.n	80098e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c0:	f7fe f862 	bl	8007988 <HAL_RCC_GetPCLK2Freq>
 80098c4:	61b8      	str	r0, [r7, #24]
        break;
 80098c6:	e00f      	b.n	80098e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098c8:	4b4b      	ldr	r3, [pc, #300]	; (80099f8 <UART_SetConfig+0x4c4>)
 80098ca:	61bb      	str	r3, [r7, #24]
        break;
 80098cc:	e00c      	b.n	80098e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098ce:	f7fd ff35 	bl	800773c <HAL_RCC_GetSysClockFreq>
 80098d2:	61b8      	str	r0, [r7, #24]
        break;
 80098d4:	e008      	b.n	80098e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098da:	61bb      	str	r3, [r7, #24]
        break;
 80098dc:	e004      	b.n	80098e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	77bb      	strb	r3, [r7, #30]
        break;
 80098e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d074      	beq.n	80099d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	005a      	lsls	r2, r3, #1
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	085b      	lsrs	r3, r3, #1
 80098f8:	441a      	add	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009902:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	2b0f      	cmp	r3, #15
 8009908:	d916      	bls.n	8009938 <UART_SetConfig+0x404>
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009910:	d212      	bcs.n	8009938 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f023 030f 	bic.w	r3, r3, #15
 800991a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	085b      	lsrs	r3, r3, #1
 8009920:	b29b      	uxth	r3, r3
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	b29a      	uxth	r2, r3
 8009928:	89fb      	ldrh	r3, [r7, #14]
 800992a:	4313      	orrs	r3, r2
 800992c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	89fa      	ldrh	r2, [r7, #14]
 8009934:	60da      	str	r2, [r3, #12]
 8009936:	e04f      	b.n	80099d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	77bb      	strb	r3, [r7, #30]
 800993c:	e04c      	b.n	80099d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800993e:	7ffb      	ldrb	r3, [r7, #31]
 8009940:	2b08      	cmp	r3, #8
 8009942:	d828      	bhi.n	8009996 <UART_SetConfig+0x462>
 8009944:	a201      	add	r2, pc, #4	; (adr r2, 800994c <UART_SetConfig+0x418>)
 8009946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994a:	bf00      	nop
 800994c:	08009971 	.word	0x08009971
 8009950:	08009979 	.word	0x08009979
 8009954:	08009981 	.word	0x08009981
 8009958:	08009997 	.word	0x08009997
 800995c:	08009987 	.word	0x08009987
 8009960:	08009997 	.word	0x08009997
 8009964:	08009997 	.word	0x08009997
 8009968:	08009997 	.word	0x08009997
 800996c:	0800998f 	.word	0x0800998f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009970:	f7fd fff6 	bl	8007960 <HAL_RCC_GetPCLK1Freq>
 8009974:	61b8      	str	r0, [r7, #24]
        break;
 8009976:	e013      	b.n	80099a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009978:	f7fe f806 	bl	8007988 <HAL_RCC_GetPCLK2Freq>
 800997c:	61b8      	str	r0, [r7, #24]
        break;
 800997e:	e00f      	b.n	80099a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009980:	4b1d      	ldr	r3, [pc, #116]	; (80099f8 <UART_SetConfig+0x4c4>)
 8009982:	61bb      	str	r3, [r7, #24]
        break;
 8009984:	e00c      	b.n	80099a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009986:	f7fd fed9 	bl	800773c <HAL_RCC_GetSysClockFreq>
 800998a:	61b8      	str	r0, [r7, #24]
        break;
 800998c:	e008      	b.n	80099a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800998e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009992:	61bb      	str	r3, [r7, #24]
        break;
 8009994:	e004      	b.n	80099a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	77bb      	strb	r3, [r7, #30]
        break;
 800999e:	bf00      	nop
    }

    if (pclk != 0U)
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d018      	beq.n	80099d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	085a      	lsrs	r2, r3, #1
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	441a      	add	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b0f      	cmp	r3, #15
 80099be:	d909      	bls.n	80099d4 <UART_SetConfig+0x4a0>
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c6:	d205      	bcs.n	80099d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	60da      	str	r2, [r3, #12]
 80099d2:	e001      	b.n	80099d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80099e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3720      	adds	r7, #32
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40007c00 	.word	0x40007c00
 80099f4:	40023800 	.word	0x40023800
 80099f8:	00f42400 	.word	0x00f42400

080099fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00a      	beq.n	8009a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	f003 0308 	and.w	r3, r3, #8
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00a      	beq.n	8009a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	f003 0310 	and.w	r3, r3, #16
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00a      	beq.n	8009aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	f003 0320 	and.w	r3, r3, #32
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00a      	beq.n	8009ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	430a      	orrs	r2, r1
 8009ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01a      	beq.n	8009b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	430a      	orrs	r2, r1
 8009af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009afa:	d10a      	bne.n	8009b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	430a      	orrs	r2, r1
 8009b32:	605a      	str	r2, [r3, #4]
  }
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b50:	f7fa f9ee 	bl	8003f30 <HAL_GetTick>
 8009b54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0308 	and.w	r3, r3, #8
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d10e      	bne.n	8009b82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f831 	bl	8009bda <UART_WaitOnFlagUntilTimeout>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e027      	b.n	8009bd2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d10e      	bne.n	8009bae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f81b 	bl	8009bda <UART_WaitOnFlagUntilTimeout>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e011      	b.n	8009bd2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b09c      	sub	sp, #112	; 0x70
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	603b      	str	r3, [r7, #0]
 8009be6:	4613      	mov	r3, r2
 8009be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bea:	e0a7      	b.n	8009d3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf2:	f000 80a3 	beq.w	8009d3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bf6:	f7fa f99b 	bl	8003f30 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d302      	bcc.n	8009c0c <UART_WaitOnFlagUntilTimeout+0x32>
 8009c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d13f      	bne.n	8009c8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c20:	667b      	str	r3, [r7, #100]	; 0x64
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e6      	bne.n	8009c0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3308      	adds	r3, #8
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c50:	f023 0301 	bic.w	r3, r3, #1
 8009c54:	663b      	str	r3, [r7, #96]	; 0x60
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c66:	e841 2300 	strex	r3, r2, [r1]
 8009c6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1e5      	bne.n	8009c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2220      	movs	r2, #32
 8009c76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e068      	b.n	8009d5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0304 	and.w	r3, r3, #4
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d050      	beq.n	8009d3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ca8:	d148      	bne.n	8009d3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8009cd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e6      	bne.n	8009cb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3308      	adds	r3, #8
 8009cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f023 0301 	bic.w	r3, r3, #1
 8009cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3308      	adds	r3, #8
 8009d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d06:	623a      	str	r2, [r7, #32]
 8009d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0a:	69f9      	ldr	r1, [r7, #28]
 8009d0c:	6a3a      	ldr	r2, [r7, #32]
 8009d0e:	e841 2300 	strex	r3, r2, [r1]
 8009d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1e5      	bne.n	8009ce6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2220      	movs	r2, #32
 8009d24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e010      	b.n	8009d5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	69da      	ldr	r2, [r3, #28]
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	4013      	ands	r3, r2
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	bf0c      	ite	eq
 8009d4c:	2301      	moveq	r3, #1
 8009d4e:	2300      	movne	r3, #0
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	461a      	mov	r2, r3
 8009d54:	79fb      	ldrb	r3, [r7, #7]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	f43f af48 	beq.w	8009bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3770      	adds	r7, #112	; 0x70
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b096      	sub	sp, #88	; 0x58
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	4613      	mov	r3, r2
 8009d74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	88fa      	ldrh	r2, [r7, #6]
 8009d80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2222      	movs	r2, #34	; 0x22
 8009d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d028      	beq.n	8009dee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da0:	4a3e      	ldr	r2, [pc, #248]	; (8009e9c <UART_Start_Receive_DMA+0x134>)
 8009da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da8:	4a3d      	ldr	r2, [pc, #244]	; (8009ea0 <UART_Start_Receive_DMA+0x138>)
 8009daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db0:	4a3c      	ldr	r2, [pc, #240]	; (8009ea4 <UART_Start_Receive_DMA+0x13c>)
 8009db2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db8:	2200      	movs	r2, #0
 8009dba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3324      	adds	r3, #36	; 0x24
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dcc:	461a      	mov	r2, r3
 8009dce:	88fb      	ldrh	r3, [r7, #6]
 8009dd0:	f7fb f8ca 	bl	8004f68 <HAL_DMA_Start_IT>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2210      	movs	r2, #16
 8009dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2220      	movs	r2, #32
 8009de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e051      	b.n	8009e92 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d018      	beq.n	8009e28 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfe:	e853 3f00 	ldrex	r3, [r3]
 8009e02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e16:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e1c:	e841 2300 	strex	r3, r2, [r1]
 8009e20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e6      	bne.n	8009df6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	e853 3f00 	ldrex	r3, [r3]
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	f043 0301 	orr.w	r3, r3, #1
 8009e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3308      	adds	r3, #8
 8009e46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e48:	637a      	str	r2, [r7, #52]	; 0x34
 8009e4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e50:	e841 2300 	strex	r3, r2, [r1]
 8009e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1e5      	bne.n	8009e28 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3308      	adds	r3, #8
 8009e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	e853 3f00 	ldrex	r3, [r3]
 8009e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e7c:	623a      	str	r2, [r7, #32]
 8009e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	69f9      	ldr	r1, [r7, #28]
 8009e82:	6a3a      	ldr	r2, [r7, #32]
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e5      	bne.n	8009e5c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3758      	adds	r7, #88	; 0x58
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0800a06f 	.word	0x0800a06f
 8009ea0:	0800a197 	.word	0x0800a197
 8009ea4:	0800a1d5 	.word	0x0800a1d5

08009ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b089      	sub	sp, #36	; 0x24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ec4:	61fb      	str	r3, [r7, #28]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	61bb      	str	r3, [r7, #24]
 8009ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	6979      	ldr	r1, [r7, #20]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	613b      	str	r3, [r7, #16]
   return(result);
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e6      	bne.n	8009eb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009ee8:	bf00      	nop
 8009eea:	3724      	adds	r7, #36	; 0x24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b095      	sub	sp, #84	; 0x54
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e6      	bne.n	8009efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	e853 3f00 	ldrex	r3, [r3]
 8009f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	f023 0301 	bic.w	r3, r3, #1
 8009f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e5      	bne.n	8009f2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d118      	bne.n	8009f9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f023 0310 	bic.w	r3, r3, #16
 8009f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6979      	ldr	r1, [r7, #20]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	613b      	str	r3, [r7, #16]
   return(result);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009fb0:	bf00      	nop
 8009fb2:	3754      	adds	r7, #84	; 0x54
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b090      	sub	sp, #64	; 0x40
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd2:	d037      	beq.n	800a044 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	e853 3f00 	ldrex	r3, [r3]
 8009fea:	623b      	str	r3, [r7, #32]
   return(result);
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ff2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8009ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e5      	bne.n	8009fdc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	e853 3f00 	ldrex	r3, [r3]
 800a01c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
 800a026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	461a      	mov	r2, r3
 800a02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02e:	61fb      	str	r3, [r7, #28]
 800a030:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	69b9      	ldr	r1, [r7, #24]
 800a034:	69fa      	ldr	r2, [r7, #28]
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	617b      	str	r3, [r7, #20]
   return(result);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e6      	bne.n	800a010 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a042:	e002      	b.n	800a04a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a044:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a046:	f7ff fa2d 	bl	80094a4 <HAL_UART_TxCpltCallback>
}
 800a04a:	bf00      	nop
 800a04c:	3740      	adds	r7, #64	; 0x40
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7ff fa29 	bl	80094b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a066:	bf00      	nop
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b09c      	sub	sp, #112	; 0x70
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a084:	d071      	beq.n	800a16a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a088:	2200      	movs	r2, #0
 800a08a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a096:	e853 3f00 	ldrex	r3, [r3]
 800a09a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a0ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0b4:	e841 2300 	strex	r3, r2, [r1]
 800a0b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e6      	bne.n	800a08e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	667b      	str	r3, [r7, #100]	; 0x64
 800a0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a0e0:	647a      	str	r2, [r7, #68]	; 0x44
 800a0e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e5      	bne.n	800a0c0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	e853 3f00 	ldrex	r3, [r3]
 800a102:	623b      	str	r3, [r7, #32]
   return(result);
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a10a:	663b      	str	r3, [r7, #96]	; 0x60
 800a10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3308      	adds	r3, #8
 800a112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a114:	633a      	str	r2, [r7, #48]	; 0x30
 800a116:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a11a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11c:	e841 2300 	strex	r3, r2, [r1]
 800a120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e5      	bne.n	800a0f4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a12a:	2220      	movs	r2, #32
 800a12c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a134:	2b01      	cmp	r3, #1
 800a136:	d118      	bne.n	800a16a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	e853 3f00 	ldrex	r3, [r3]
 800a144:	60fb      	str	r3, [r7, #12]
   return(result);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f023 0310 	bic.w	r3, r3, #16
 800a14c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a14e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15a:	69b9      	ldr	r1, [r7, #24]
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	e841 2300 	strex	r3, r2, [r1]
 800a162:	617b      	str	r3, [r7, #20]
   return(result);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1e6      	bne.n	800a138 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a16a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a16c:	2200      	movs	r2, #0
 800a16e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a174:	2b01      	cmp	r3, #1
 800a176:	d107      	bne.n	800a188 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a17a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a17e:	4619      	mov	r1, r3
 800a180:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a182:	f7ff f9c1 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a186:	e002      	b.n	800a18e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a188:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a18a:	f7ff f99f 	bl	80094cc <HAL_UART_RxCpltCallback>
}
 800a18e:	bf00      	nop
 800a190:	3770      	adds	r7, #112	; 0x70
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d109      	bne.n	800a1c6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1b8:	085b      	lsrs	r3, r3, #1
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	4619      	mov	r1, r3
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff f9a2 	bl	8009508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1c4:	e002      	b.n	800a1cc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff f98a 	bl	80094e0 <HAL_UART_RxHalfCpltCallback>
}
 800a1cc:	bf00      	nop
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fa:	2b80      	cmp	r3, #128	; 0x80
 800a1fc:	d109      	bne.n	800a212 <UART_DMAError+0x3e>
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b21      	cmp	r3, #33	; 0x21
 800a202:	d106      	bne.n	800a212 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2200      	movs	r2, #0
 800a208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a20c:	6978      	ldr	r0, [r7, #20]
 800a20e:	f7ff fe4b 	bl	8009ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21c:	2b40      	cmp	r3, #64	; 0x40
 800a21e:	d109      	bne.n	800a234 <UART_DMAError+0x60>
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b22      	cmp	r3, #34	; 0x22
 800a224:	d106      	bne.n	800a234 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2200      	movs	r2, #0
 800a22a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a22e:	6978      	ldr	r0, [r7, #20]
 800a230:	f7ff fe60 	bl	8009ef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a23a:	f043 0210 	orr.w	r2, r3, #16
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a244:	6978      	ldr	r0, [r7, #20]
 800a246:	f7ff f955 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a24a:	bf00      	nop
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7ff f93f 	bl	80094f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a276:	bf00      	nop
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b088      	sub	sp, #32
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	60bb      	str	r3, [r7, #8]
   return(result);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a29a:	61fb      	str	r3, [r7, #28]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a8:	6979      	ldr	r1, [r7, #20]
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	e841 2300 	strex	r3, r2, [r1]
 800a2b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e6      	bne.n	800a286 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff f8ed 	bl	80094a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ca:	bf00      	nop
 800a2cc:	3720      	adds	r7, #32
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2d4:	b084      	sub	sp, #16
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	f107 001c 	add.w	r0, r7, #28
 800a2e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d120      	bne.n	800a32e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68da      	ldr	r2, [r3, #12]
 800a2fc:	4b20      	ldr	r3, [pc, #128]	; (800a380 <USB_CoreInit+0xac>)
 800a2fe:	4013      	ands	r3, r2
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a312:	2b01      	cmp	r3, #1
 800a314:	d105      	bne.n	800a322 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f001 fbee 	bl	800bb04 <USB_CoreReset>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
 800a32c:	e010      	b.n	800a350 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 fbe2 	bl	800bb04 <USB_CoreReset>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	2b01      	cmp	r3, #1
 800a354:	d10b      	bne.n	800a36e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f043 0206 	orr.w	r2, r3, #6
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f043 0220 	orr.w	r2, r3, #32
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a37a:	b004      	add	sp, #16
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	ffbdffbf 	.word	0xffbdffbf

0800a384 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a384:	b480      	push	{r7}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d165      	bne.n	800a464 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	4a41      	ldr	r2, [pc, #260]	; (800a4a0 <USB_SetTurnaroundTime+0x11c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d906      	bls.n	800a3ae <USB_SetTurnaroundTime+0x2a>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4a40      	ldr	r2, [pc, #256]	; (800a4a4 <USB_SetTurnaroundTime+0x120>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d202      	bcs.n	800a3ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3a8:	230f      	movs	r3, #15
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e062      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	4a3c      	ldr	r2, [pc, #240]	; (800a4a4 <USB_SetTurnaroundTime+0x120>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d306      	bcc.n	800a3c4 <USB_SetTurnaroundTime+0x40>
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	4a3b      	ldr	r2, [pc, #236]	; (800a4a8 <USB_SetTurnaroundTime+0x124>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d202      	bcs.n	800a3c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3be:	230e      	movs	r3, #14
 800a3c0:	617b      	str	r3, [r7, #20]
 800a3c2:	e057      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4a38      	ldr	r2, [pc, #224]	; (800a4a8 <USB_SetTurnaroundTime+0x124>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d306      	bcc.n	800a3da <USB_SetTurnaroundTime+0x56>
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4a37      	ldr	r2, [pc, #220]	; (800a4ac <USB_SetTurnaroundTime+0x128>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d202      	bcs.n	800a3da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a3d4:	230d      	movs	r3, #13
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	e04c      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	4a33      	ldr	r2, [pc, #204]	; (800a4ac <USB_SetTurnaroundTime+0x128>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d306      	bcc.n	800a3f0 <USB_SetTurnaroundTime+0x6c>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	4a32      	ldr	r2, [pc, #200]	; (800a4b0 <USB_SetTurnaroundTime+0x12c>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d802      	bhi.n	800a3f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a3ea:	230c      	movs	r3, #12
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	e041      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4a2f      	ldr	r2, [pc, #188]	; (800a4b0 <USB_SetTurnaroundTime+0x12c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d906      	bls.n	800a406 <USB_SetTurnaroundTime+0x82>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4a2e      	ldr	r2, [pc, #184]	; (800a4b4 <USB_SetTurnaroundTime+0x130>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d802      	bhi.n	800a406 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a400:	230b      	movs	r3, #11
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	e036      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4a2a      	ldr	r2, [pc, #168]	; (800a4b4 <USB_SetTurnaroundTime+0x130>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d906      	bls.n	800a41c <USB_SetTurnaroundTime+0x98>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4a29      	ldr	r2, [pc, #164]	; (800a4b8 <USB_SetTurnaroundTime+0x134>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d802      	bhi.n	800a41c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a416:	230a      	movs	r3, #10
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e02b      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4a26      	ldr	r2, [pc, #152]	; (800a4b8 <USB_SetTurnaroundTime+0x134>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d906      	bls.n	800a432 <USB_SetTurnaroundTime+0xae>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4a25      	ldr	r2, [pc, #148]	; (800a4bc <USB_SetTurnaroundTime+0x138>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d202      	bcs.n	800a432 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a42c:	2309      	movs	r3, #9
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	e020      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a21      	ldr	r2, [pc, #132]	; (800a4bc <USB_SetTurnaroundTime+0x138>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d306      	bcc.n	800a448 <USB_SetTurnaroundTime+0xc4>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4a20      	ldr	r2, [pc, #128]	; (800a4c0 <USB_SetTurnaroundTime+0x13c>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d802      	bhi.n	800a448 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a442:	2308      	movs	r3, #8
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	e015      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4a1d      	ldr	r2, [pc, #116]	; (800a4c0 <USB_SetTurnaroundTime+0x13c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d906      	bls.n	800a45e <USB_SetTurnaroundTime+0xda>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4a1c      	ldr	r2, [pc, #112]	; (800a4c4 <USB_SetTurnaroundTime+0x140>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d202      	bcs.n	800a45e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a458:	2307      	movs	r3, #7
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	e00a      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a45e:	2306      	movs	r3, #6
 800a460:	617b      	str	r3, [r7, #20]
 800a462:	e007      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d102      	bne.n	800a470 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a46a:	2309      	movs	r3, #9
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	e001      	b.n	800a474 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a470:	2309      	movs	r3, #9
 800a472:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	68da      	ldr	r2, [r3, #12]
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	029b      	lsls	r3, r3, #10
 800a488:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a48c:	431a      	orrs	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	371c      	adds	r7, #28
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	00d8acbf 	.word	0x00d8acbf
 800a4a4:	00e4e1c0 	.word	0x00e4e1c0
 800a4a8:	00f42400 	.word	0x00f42400
 800a4ac:	01067380 	.word	0x01067380
 800a4b0:	011a499f 	.word	0x011a499f
 800a4b4:	01312cff 	.word	0x01312cff
 800a4b8:	014ca43f 	.word	0x014ca43f
 800a4bc:	016e3600 	.word	0x016e3600
 800a4c0:	01a6ab1f 	.word	0x01a6ab1f
 800a4c4:	01e84800 	.word	0x01e84800

0800a4c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f043 0201 	orr.w	r2, r3, #1
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f023 0201 	bic.w	r2, r3, #1
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d115      	bne.n	800a55a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a53a:	2001      	movs	r0, #1
 800a53c:	f7f9 fd04 	bl	8003f48 <HAL_Delay>
      ms++;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3301      	adds	r3, #1
 800a544:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 fa4b 	bl	800b9e2 <USB_GetMode>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d01e      	beq.n	800a590 <USB_SetCurrentMode+0x84>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2b31      	cmp	r3, #49	; 0x31
 800a556:	d9f0      	bls.n	800a53a <USB_SetCurrentMode+0x2e>
 800a558:	e01a      	b.n	800a590 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a55a:	78fb      	ldrb	r3, [r7, #3]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d115      	bne.n	800a58c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a56c:	2001      	movs	r0, #1
 800a56e:	f7f9 fceb 	bl	8003f48 <HAL_Delay>
      ms++;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 fa32 	bl	800b9e2 <USB_GetMode>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <USB_SetCurrentMode+0x84>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b31      	cmp	r3, #49	; 0x31
 800a588:	d9f0      	bls.n	800a56c <USB_SetCurrentMode+0x60>
 800a58a:	e001      	b.n	800a590 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e005      	b.n	800a59c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b32      	cmp	r3, #50	; 0x32
 800a594:	d101      	bne.n	800a59a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e000      	b.n	800a59c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5a4:	b084      	sub	sp, #16
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5be:	2300      	movs	r3, #0
 800a5c0:	613b      	str	r3, [r7, #16]
 800a5c2:	e009      	b.n	800a5d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	3340      	adds	r3, #64	; 0x40
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	613b      	str	r3, [r7, #16]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b0e      	cmp	r3, #14
 800a5dc:	d9f2      	bls.n	800a5c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d11c      	bne.n	800a61e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5f2:	f043 0302 	orr.w	r3, r3, #2
 800a5f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	e005      	b.n	800a62a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a622:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a630:	461a      	mov	r2, r3
 800a632:	2300      	movs	r3, #0
 800a634:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a63c:	4619      	mov	r1, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a644:	461a      	mov	r2, r3
 800a646:	680b      	ldr	r3, [r1, #0]
 800a648:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d10c      	bne.n	800a66a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	2b00      	cmp	r3, #0
 800a654:	d104      	bne.n	800a660 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a656:	2100      	movs	r1, #0
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f965 	bl	800a928 <USB_SetDevSpeed>
 800a65e:	e008      	b.n	800a672 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a660:	2101      	movs	r1, #1
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f960 	bl	800a928 <USB_SetDevSpeed>
 800a668:	e003      	b.n	800a672 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a66a:	2103      	movs	r1, #3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f95b 	bl	800a928 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a672:	2110      	movs	r1, #16
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f8f3 	bl	800a860 <USB_FlushTxFifo>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f91f 	bl	800a8c8 <USB_FlushRxFifo>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69a:	461a      	mov	r2, r3
 800a69c:	2300      	movs	r3, #0
 800a69e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	613b      	str	r3, [r7, #16]
 800a6bc:	e043      	b.n	800a746 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6d4:	d118      	bne.n	800a708 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	e013      	b.n	800a71a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6fe:	461a      	mov	r2, r3
 800a700:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	e008      	b.n	800a71a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a714:	461a      	mov	r2, r3
 800a716:	2300      	movs	r3, #0
 800a718:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a726:	461a      	mov	r2, r3
 800a728:	2300      	movs	r3, #0
 800a72a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a738:	461a      	mov	r2, r3
 800a73a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a73e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	3301      	adds	r3, #1
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d3b7      	bcc.n	800a6be <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a74e:	2300      	movs	r3, #0
 800a750:	613b      	str	r3, [r7, #16]
 800a752:	e043      	b.n	800a7dc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a76a:	d118      	bne.n	800a79e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10a      	bne.n	800a788 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77e:	461a      	mov	r2, r3
 800a780:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	e013      	b.n	800a7b0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a794:	461a      	mov	r2, r3
 800a796:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	e008      	b.n	800a7b0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	015a      	lsls	r2, r3, #5
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	461a      	mov	r2, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	613b      	str	r3, [r7, #16]
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d3b7      	bcc.n	800a754 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a804:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d105      	bne.n	800a818 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	f043 0210 	orr.w	r2, r3, #16
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	699a      	ldr	r2, [r3, #24]
 800a81c:	4b0e      	ldr	r3, [pc, #56]	; (800a858 <USB_DevInit+0x2b4>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d005      	beq.n	800a836 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	f043 0208 	orr.w	r2, r3, #8
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d105      	bne.n	800a848 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	699a      	ldr	r2, [r3, #24]
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <USB_DevInit+0x2b8>)
 800a842:	4313      	orrs	r3, r2
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a848:	7dfb      	ldrb	r3, [r7, #23]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a854:	b004      	add	sp, #16
 800a856:	4770      	bx	lr
 800a858:	803c3800 	.word	0x803c3800
 800a85c:	40000004 	.word	0x40000004

0800a860 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3301      	adds	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4a13      	ldr	r2, [pc, #76]	; (800a8c4 <USB_FlushTxFifo+0x64>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d901      	bls.n	800a880 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e01b      	b.n	800a8b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	daf2      	bge.n	800a86e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	019b      	lsls	r3, r3, #6
 800a890:	f043 0220 	orr.w	r2, r3, #32
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <USB_FlushTxFifo+0x64>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d901      	bls.n	800a8aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e006      	b.n	800a8b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b20      	cmp	r3, #32
 800a8b4:	d0f0      	beq.n	800a898 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	00030d40 	.word	0x00030d40

0800a8c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a11      	ldr	r2, [pc, #68]	; (800a924 <USB_FlushRxFifo+0x5c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d901      	bls.n	800a8e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e018      	b.n	800a918 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	daf2      	bge.n	800a8d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2210      	movs	r2, #16
 800a8f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4a08      	ldr	r2, [pc, #32]	; (800a924 <USB_FlushRxFifo+0x5c>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d901      	bls.n	800a90a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e006      	b.n	800a918 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	f003 0310 	and.w	r3, r3, #16
 800a912:	2b10      	cmp	r3, #16
 800a914:	d0f0      	beq.n	800a8f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	00030d40 	.word	0x00030d40

0800a928 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	78fb      	ldrb	r3, [r7, #3]
 800a942:	68f9      	ldr	r1, [r7, #12]
 800a944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a948:	4313      	orrs	r3, r2
 800a94a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b087      	sub	sp, #28
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f003 0306 	and.w	r3, r3, #6
 800a972:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d102      	bne.n	800a980 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a97a:	2300      	movs	r3, #0
 800a97c:	75fb      	strb	r3, [r7, #23]
 800a97e:	e00a      	b.n	800a996 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b02      	cmp	r3, #2
 800a984:	d002      	beq.n	800a98c <USB_GetDevSpeed+0x32>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b06      	cmp	r3, #6
 800a98a:	d102      	bne.n	800a992 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a98c:	2302      	movs	r3, #2
 800a98e:	75fb      	strb	r3, [r7, #23]
 800a990:	e001      	b.n	800a996 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a992:	230f      	movs	r3, #15
 800a994:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a996:	7dfb      	ldrb	r3, [r7, #23]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	371c      	adds	r7, #28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	785b      	ldrb	r3, [r3, #1]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d139      	bne.n	800aa34 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c6:	69da      	ldr	r2, [r3, #28]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 030f 	and.w	r3, r3, #15
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	68f9      	ldr	r1, [r7, #12]
 800a9da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d153      	bne.n	800aaa0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	791b      	ldrb	r3, [r3, #4]
 800aa12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	059b      	lsls	r3, r3, #22
 800aa1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	0159      	lsls	r1, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	440b      	add	r3, r1
 800aa26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4b20      	ldr	r3, [pc, #128]	; (800aab0 <USB_ActivateEndpoint+0x10c>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	600b      	str	r3, [r1, #0]
 800aa32:	e035      	b.n	800aaa0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa3a:	69da      	ldr	r2, [r3, #28]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	2101      	movs	r1, #1
 800aa46:	fa01 f303 	lsl.w	r3, r1, r3
 800aa4a:	041b      	lsls	r3, r3, #16
 800aa4c:	68f9      	ldr	r1, [r7, #12]
 800aa4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa52:	4313      	orrs	r3, r2
 800aa54:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d119      	bne.n	800aaa0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	791b      	ldrb	r3, [r3, #4]
 800aa86:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa88:	430b      	orrs	r3, r1
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	0159      	lsls	r1, r3, #5
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	440b      	add	r3, r1
 800aa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <USB_ActivateEndpoint+0x10c>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	10008000 	.word	0x10008000

0800aab4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	785b      	ldrb	r3, [r3, #1]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d161      	bne.n	800ab94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aae6:	d11f      	bne.n	800ab28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	015a      	lsls	r2, r3, #5
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4413      	add	r3, r2
 800aaf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	0151      	lsls	r1, r2, #5
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	440a      	add	r2, r1
 800aafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	0151      	lsls	r1, r2, #5
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	440a      	add	r2, r1
 800ab1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f003 030f 	and.w	r3, r3, #15
 800ab38:	2101      	movs	r1, #1
 800ab3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	43db      	mvns	r3, r3
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab48:	4013      	ands	r3, r2
 800ab4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab52:	69da      	ldr	r2, [r3, #28]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 030f 	and.w	r3, r3, #15
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	43db      	mvns	r3, r3
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	0159      	lsls	r1, r3, #5
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	440b      	add	r3, r1
 800ab86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4b35      	ldr	r3, [pc, #212]	; (800ac64 <USB_DeactivateEndpoint+0x1b0>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	600b      	str	r3, [r1, #0]
 800ab92:	e060      	b.n	800ac56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abaa:	d11f      	bne.n	800abec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	0151      	lsls	r1, r2, #5
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	440a      	add	r2, r1
 800abc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	0151      	lsls	r1, r2, #5
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	440a      	add	r2, r1
 800abe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	f003 030f 	and.w	r3, r3, #15
 800abfc:	2101      	movs	r1, #1
 800abfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ac02:	041b      	lsls	r3, r3, #16
 800ac04:	43db      	mvns	r3, r3
 800ac06:	68f9      	ldr	r1, [r7, #12]
 800ac08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac16:	69da      	ldr	r2, [r3, #28]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	f003 030f 	and.w	r3, r3, #15
 800ac20:	2101      	movs	r1, #1
 800ac22:	fa01 f303 	lsl.w	r3, r1, r3
 800ac26:	041b      	lsls	r3, r3, #16
 800ac28:	43db      	mvns	r3, r3
 800ac2a:	68f9      	ldr	r1, [r7, #12]
 800ac2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac30:	4013      	ands	r3, r2
 800ac32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	0159      	lsls	r1, r3, #5
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	440b      	add	r3, r1
 800ac4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <USB_DeactivateEndpoint+0x1b4>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	ec337800 	.word	0xec337800
 800ac68:	eff37800 	.word	0xeff37800

0800ac6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	; 0x28
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	4613      	mov	r3, r2
 800ac78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	f040 8163 	bne.w	800af54 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d132      	bne.n	800acfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	015a      	lsls	r2, r3, #5
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca2:	691a      	ldr	r2, [r3, #16]
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	0159      	lsls	r1, r3, #5
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	440b      	add	r3, r1
 800acac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb0:	4619      	mov	r1, r3
 800acb2:	4ba5      	ldr	r3, [pc, #660]	; (800af48 <USB_EPStartXfer+0x2dc>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	69ba      	ldr	r2, [r7, #24]
 800acc8:	0151      	lsls	r1, r2, #5
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	440a      	add	r2, r1
 800acce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace4:	691a      	ldr	r2, [r3, #16]
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	0159      	lsls	r1, r3, #5
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	440b      	add	r3, r1
 800acee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf2:	4619      	mov	r1, r3
 800acf4:	4b95      	ldr	r3, [pc, #596]	; (800af4c <USB_EPStartXfer+0x2e0>)
 800acf6:	4013      	ands	r3, r2
 800acf8:	610b      	str	r3, [r1, #16]
 800acfa:	e074      	b.n	800ade6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	015a      	lsls	r2, r3, #5
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	4413      	add	r3, r2
 800ad04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad08:	691a      	ldr	r2, [r3, #16]
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	0159      	lsls	r1, r3, #5
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	440b      	add	r3, r1
 800ad12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad16:	4619      	mov	r1, r3
 800ad18:	4b8c      	ldr	r3, [pc, #560]	; (800af4c <USB_EPStartXfer+0x2e0>)
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	015a      	lsls	r2, r3, #5
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2a:	691a      	ldr	r2, [r3, #16]
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	0159      	lsls	r1, r3, #5
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	440b      	add	r3, r1
 800ad34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4b83      	ldr	r3, [pc, #524]	; (800af48 <USB_EPStartXfer+0x2dc>)
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	6999      	ldr	r1, [r3, #24]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	440b      	add	r3, r1
 800ad58:	1e59      	subs	r1, r3, #1
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ad62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad64:	4b7a      	ldr	r3, [pc, #488]	; (800af50 <USB_EPStartXfer+0x2e4>)
 800ad66:	400b      	ands	r3, r1
 800ad68:	69b9      	ldr	r1, [r7, #24]
 800ad6a:	0148      	lsls	r0, r1, #5
 800ad6c:	69f9      	ldr	r1, [r7, #28]
 800ad6e:	4401      	add	r1, r0
 800ad70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad74:	4313      	orrs	r3, r2
 800ad76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad84:	691a      	ldr	r2, [r3, #16]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad8e:	69b9      	ldr	r1, [r7, #24]
 800ad90:	0148      	lsls	r0, r1, #5
 800ad92:	69f9      	ldr	r1, [r7, #28]
 800ad94:	4401      	add	r1, r0
 800ad96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	791b      	ldrb	r3, [r3, #4]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d11f      	bne.n	800ade6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	0151      	lsls	r1, r2, #5
 800adb8:	69fa      	ldr	r2, [r7, #28]
 800adba:	440a      	add	r2, r1
 800adbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800adc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	0151      	lsls	r1, r2, #5
 800add8:	69fa      	ldr	r2, [r7, #28]
 800adda:	440a      	add	r2, r1
 800addc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ade0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ade4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d14b      	bne.n	800ae84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae00:	461a      	mov	r2, r3
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	791b      	ldrb	r3, [r3, #4]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d128      	bne.n	800ae62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d110      	bne.n	800ae42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	0151      	lsls	r1, r2, #5
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	440a      	add	r2, r1
 800ae36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	e00f      	b.n	800ae62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	0151      	lsls	r1, r2, #5
 800ae54:	69fa      	ldr	r2, [r7, #28]
 800ae56:	440a      	add	r2, r1
 800ae58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	015a      	lsls	r2, r3, #5
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	4413      	add	r3, r2
 800ae6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	0151      	lsls	r1, r2, #5
 800ae74:	69fa      	ldr	r2, [r7, #28]
 800ae76:	440a      	add	r2, r1
 800ae78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	e137      	b.n	800b0f4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	69ba      	ldr	r2, [r7, #24]
 800ae94:	0151      	lsls	r1, r2, #5
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	440a      	add	r2, r1
 800ae9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aea2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	791b      	ldrb	r3, [r3, #4]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d015      	beq.n	800aed8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 811f 	beq.w	800b0f4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f003 030f 	and.w	r3, r3, #15
 800aec6:	2101      	movs	r1, #1
 800aec8:	fa01 f303 	lsl.w	r3, r1, r3
 800aecc:	69f9      	ldr	r1, [r7, #28]
 800aece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aed2:	4313      	orrs	r3, r2
 800aed4:	634b      	str	r3, [r1, #52]	; 0x34
 800aed6:	e10d      	b.n	800b0f4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d110      	bne.n	800af0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	e00f      	b.n	800af2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	4413      	add	r3, r2
 800af12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	0151      	lsls	r1, r2, #5
 800af1c:	69fa      	ldr	r2, [r7, #28]
 800af1e:	440a      	add	r2, r1
 800af20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	6919      	ldr	r1, [r3, #16]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	781a      	ldrb	r2, [r3, #0]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	b298      	uxth	r0, r3
 800af38:	79fb      	ldrb	r3, [r7, #7]
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	4603      	mov	r3, r0
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f000 faea 	bl	800b518 <USB_WritePacket>
 800af44:	e0d6      	b.n	800b0f4 <USB_EPStartXfer+0x488>
 800af46:	bf00      	nop
 800af48:	e007ffff 	.word	0xe007ffff
 800af4c:	fff80000 	.word	0xfff80000
 800af50:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af60:	691a      	ldr	r2, [r3, #16]
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	0159      	lsls	r1, r3, #5
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	440b      	add	r3, r1
 800af6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6e:	4619      	mov	r1, r3
 800af70:	4b63      	ldr	r3, [pc, #396]	; (800b100 <USB_EPStartXfer+0x494>)
 800af72:	4013      	ands	r3, r2
 800af74:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af82:	691a      	ldr	r2, [r3, #16]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	0159      	lsls	r1, r3, #5
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	440b      	add	r3, r1
 800af8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af90:	4619      	mov	r1, r3
 800af92:	4b5c      	ldr	r3, [pc, #368]	; (800b104 <USB_EPStartXfer+0x498>)
 800af94:	4013      	ands	r3, r2
 800af96:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d123      	bne.n	800afe8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afac:	691a      	ldr	r2, [r3, #16]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afb6:	69b9      	ldr	r1, [r7, #24]
 800afb8:	0148      	lsls	r0, r1, #5
 800afba:	69f9      	ldr	r1, [r7, #28]
 800afbc:	4401      	add	r1, r0
 800afbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afc2:	4313      	orrs	r3, r2
 800afc4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	0151      	lsls	r1, r2, #5
 800afd8:	69fa      	ldr	r2, [r7, #28]
 800afda:	440a      	add	r2, r1
 800afdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afe4:	6113      	str	r3, [r2, #16]
 800afe6:	e037      	b.n	800b058 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	699a      	ldr	r2, [r3, #24]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	1e5a      	subs	r2, r3, #1
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800affc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	8afa      	ldrh	r2, [r7, #22]
 800b004:	fb03 f202 	mul.w	r2, r3, r2
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	8afb      	ldrh	r3, [r7, #22]
 800b01c:	04d9      	lsls	r1, r3, #19
 800b01e:	4b3a      	ldr	r3, [pc, #232]	; (800b108 <USB_EPStartXfer+0x49c>)
 800b020:	400b      	ands	r3, r1
 800b022:	69b9      	ldr	r1, [r7, #24]
 800b024:	0148      	lsls	r0, r1, #5
 800b026:	69f9      	ldr	r1, [r7, #28]
 800b028:	4401      	add	r1, r0
 800b02a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b02e:	4313      	orrs	r3, r2
 800b030:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03e:	691a      	ldr	r2, [r3, #16]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b048:	69b9      	ldr	r1, [r7, #24]
 800b04a:	0148      	lsls	r0, r1, #5
 800b04c:	69f9      	ldr	r1, [r7, #28]
 800b04e:	4401      	add	r1, r0
 800b050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b054:	4313      	orrs	r3, r2
 800b056:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b058:	79fb      	ldrb	r3, [r7, #7]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d10d      	bne.n	800b07a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d009      	beq.n	800b07a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	6919      	ldr	r1, [r3, #16]
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	015a      	lsls	r2, r3, #5
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	4413      	add	r3, r2
 800b072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b076:	460a      	mov	r2, r1
 800b078:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	791b      	ldrb	r3, [r3, #4]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d128      	bne.n	800b0d4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d110      	bne.n	800b0b4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	e00f      	b.n	800b0d4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	69fa      	ldr	r2, [r7, #28]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	0151      	lsls	r1, r2, #5
 800b0e6:	69fa      	ldr	r2, [r7, #28]
 800b0e8:	440a      	add	r2, r1
 800b0ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	fff80000 	.word	0xfff80000
 800b104:	e007ffff 	.word	0xe007ffff
 800b108:	1ff80000 	.word	0x1ff80000

0800b10c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	4613      	mov	r3, r2
 800b118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	f040 80ce 	bne.w	800b2ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d132      	bne.n	800b19c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	015a      	lsls	r2, r3, #5
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	4413      	add	r3, r2
 800b13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	0159      	lsls	r1, r3, #5
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	440b      	add	r3, r1
 800b14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b150:	4619      	mov	r1, r3
 800b152:	4b9a      	ldr	r3, [pc, #616]	; (800b3bc <USB_EP0StartXfer+0x2b0>)
 800b154:	4013      	ands	r3, r2
 800b156:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b184:	691a      	ldr	r2, [r3, #16]
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	0159      	lsls	r1, r3, #5
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	440b      	add	r3, r1
 800b18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b192:	4619      	mov	r1, r3
 800b194:	4b8a      	ldr	r3, [pc, #552]	; (800b3c0 <USB_EP0StartXfer+0x2b4>)
 800b196:	4013      	ands	r3, r2
 800b198:	610b      	str	r3, [r1, #16]
 800b19a:	e04e      	b.n	800b23a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a8:	691a      	ldr	r2, [r3, #16]
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	0159      	lsls	r1, r3, #5
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	440b      	add	r3, r1
 800b1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	4b81      	ldr	r3, [pc, #516]	; (800b3c0 <USB_EP0StartXfer+0x2b4>)
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	0159      	lsls	r1, r3, #5
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	440b      	add	r3, r1
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4b78      	ldr	r3, [pc, #480]	; (800b3bc <USB_EP0StartXfer+0x2b0>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	699a      	ldr	r2, [r3, #24]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d903      	bls.n	800b1f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	68da      	ldr	r2, [r3, #12]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	0151      	lsls	r1, r2, #5
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	440a      	add	r2, r1
 800b20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b20e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	015a      	lsls	r2, r3, #5
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	4413      	add	r3, r2
 800b21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b220:	691a      	ldr	r2, [r3, #16]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b22a:	6939      	ldr	r1, [r7, #16]
 800b22c:	0148      	lsls	r0, r1, #5
 800b22e:	6979      	ldr	r1, [r7, #20]
 800b230:	4401      	add	r1, r0
 800b232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b236:	4313      	orrs	r3, r2
 800b238:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d11e      	bne.n	800b27e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d009      	beq.n	800b25c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	015a      	lsls	r2, r3, #5
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b254:	461a      	mov	r2, r3
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	015a      	lsls	r2, r3, #5
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	4413      	add	r3, r2
 800b264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	0151      	lsls	r1, r2, #5
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	440a      	add	r2, r1
 800b272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b276:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	e097      	b.n	800b3ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	015a      	lsls	r2, r3, #5
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	4413      	add	r3, r2
 800b286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	0151      	lsls	r1, r2, #5
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	440a      	add	r2, r1
 800b294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b29c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 8083 	beq.w	800b3ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	f003 030f 	and.w	r3, r3, #15
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b2be:	6979      	ldr	r1, [r7, #20]
 800b2c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	634b      	str	r3, [r1, #52]	; 0x34
 800b2c8:	e071      	b.n	800b3ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d6:	691a      	ldr	r2, [r3, #16]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	0159      	lsls	r1, r3, #5
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	440b      	add	r3, r1
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4b36      	ldr	r3, [pc, #216]	; (800b3c0 <USB_EP0StartXfer+0x2b4>)
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f8:	691a      	ldr	r2, [r3, #16]
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	0159      	lsls	r1, r3, #5
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	440b      	add	r3, r1
 800b302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b306:	4619      	mov	r1, r3
 800b308:	4b2c      	ldr	r3, [pc, #176]	; (800b3bc <USB_EP0StartXfer+0x2b0>)
 800b30a:	4013      	ands	r3, r2
 800b30c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	68da      	ldr	r2, [r3, #12]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	0151      	lsls	r1, r2, #5
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	440a      	add	r2, r1
 800b33c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b344:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	015a      	lsls	r2, r3, #5
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	4413      	add	r3, r2
 800b34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b352:	691a      	ldr	r2, [r3, #16]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b35c:	6939      	ldr	r1, [r7, #16]
 800b35e:	0148      	lsls	r0, r1, #5
 800b360:	6979      	ldr	r1, [r7, #20]
 800b362:	4401      	add	r1, r0
 800b364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b368:	4313      	orrs	r3, r2
 800b36a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d10d      	bne.n	800b38e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d009      	beq.n	800b38e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	6919      	ldr	r1, [r3, #16]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38a:	460a      	mov	r2, r1
 800b38c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	0151      	lsls	r1, r2, #5
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	440a      	add	r2, r1
 800b3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	371c      	adds	r7, #28
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	e007ffff 	.word	0xe007ffff
 800b3c0:	fff80000 	.word	0xfff80000

0800b3c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d14a      	bne.n	800b478 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3fa:	f040 8086 	bne.w	800b50a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	7812      	ldrb	r2, [r2, #0]
 800b412:	0151      	lsls	r1, r2, #5
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	440a      	add	r2, r1
 800b418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b41c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b420:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	7812      	ldrb	r2, [r2, #0]
 800b436:	0151      	lsls	r1, r2, #5
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	440a      	add	r2, r1
 800b43c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	3301      	adds	r3, #1
 800b44a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b452:	4293      	cmp	r3, r2
 800b454:	d902      	bls.n	800b45c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	75fb      	strb	r3, [r7, #23]
          break;
 800b45a:	e056      	b.n	800b50a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	015a      	lsls	r2, r3, #5
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	4413      	add	r3, r2
 800b466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b474:	d0e7      	beq.n	800b446 <USB_EPStopXfer+0x82>
 800b476:	e048      	b.n	800b50a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	4413      	add	r3, r2
 800b482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b48c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b490:	d13b      	bne.n	800b50a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	7812      	ldrb	r2, [r2, #0]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	7812      	ldrb	r2, [r2, #0]
 800b4ca:	0151      	lsls	r1, r2, #5
 800b4cc:	693a      	ldr	r2, [r7, #16]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d902      	bls.n	800b4f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b4ee:	e00c      	b.n	800b50a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b508:	d0e7      	beq.n	800b4da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b518:	b480      	push	{r7}
 800b51a:	b089      	sub	sp, #36	; 0x24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4611      	mov	r1, r2
 800b524:	461a      	mov	r2, r3
 800b526:	460b      	mov	r3, r1
 800b528:	71fb      	strb	r3, [r7, #7]
 800b52a:	4613      	mov	r3, r2
 800b52c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b536:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d123      	bne.n	800b586 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b53e:	88bb      	ldrh	r3, [r7, #4]
 800b540:	3303      	adds	r3, #3
 800b542:	089b      	lsrs	r3, r3, #2
 800b544:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b546:	2300      	movs	r3, #0
 800b548:	61bb      	str	r3, [r7, #24]
 800b54a:	e018      	b.n	800b57e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	031a      	lsls	r2, r3, #12
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	4413      	add	r3, r2
 800b554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b558:	461a      	mov	r2, r3
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	3301      	adds	r3, #1
 800b564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	3301      	adds	r3, #1
 800b56a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	3301      	adds	r3, #1
 800b570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	3301      	adds	r3, #1
 800b576:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	3301      	adds	r3, #1
 800b57c:	61bb      	str	r3, [r7, #24]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	429a      	cmp	r2, r3
 800b584:	d3e2      	bcc.n	800b54c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3724      	adds	r7, #36	; 0x24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b594:	b480      	push	{r7}
 800b596:	b08b      	sub	sp, #44	; 0x2c
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	4613      	mov	r3, r2
 800b5a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b5aa:	88fb      	ldrh	r3, [r7, #6]
 800b5ac:	089b      	lsrs	r3, r3, #2
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5b2:	88fb      	ldrh	r3, [r7, #6]
 800b5b4:	f003 0303 	and.w	r3, r3, #3
 800b5b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	623b      	str	r3, [r7, #32]
 800b5be:	e014      	b.n	800b5ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	3301      	adds	r3, #1
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	623b      	str	r3, [r7, #32]
 800b5ea:	6a3a      	ldr	r2, [r7, #32]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d3e6      	bcc.n	800b5c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b5f2:	8bfb      	ldrh	r3, [r7, #30]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01e      	beq.n	800b636 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b602:	461a      	mov	r2, r3
 800b604:	f107 0310 	add.w	r3, r7, #16
 800b608:	6812      	ldr	r2, [r2, #0]
 800b60a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	6a3b      	ldr	r3, [r7, #32]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	fa22 f303 	lsr.w	r3, r2, r3
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	701a      	strb	r2, [r3, #0]
      i++;
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	3301      	adds	r3, #1
 800b622:	623b      	str	r3, [r7, #32]
      pDest++;
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	3301      	adds	r3, #1
 800b628:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b62a:	8bfb      	ldrh	r3, [r7, #30]
 800b62c:	3b01      	subs	r3, #1
 800b62e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b630:	8bfb      	ldrh	r3, [r7, #30]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1ea      	bne.n	800b60c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b638:	4618      	mov	r0, r3
 800b63a:	372c      	adds	r7, #44	; 0x2c
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	785b      	ldrb	r3, [r3, #1]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d12c      	bne.n	800b6ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	db12      	blt.n	800b698 <USB_EPSetStall+0x54>
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00f      	beq.n	800b698 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	015a      	lsls	r2, r3, #5
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	4413      	add	r3, r2
 800b680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	0151      	lsls	r1, r2, #5
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	440a      	add	r2, r1
 800b68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b692:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b696:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	015a      	lsls	r2, r3, #5
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	0151      	lsls	r1, r2, #5
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	440a      	add	r2, r1
 800b6ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	e02b      	b.n	800b712 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	db12      	blt.n	800b6f2 <USB_EPSetStall+0xae>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00f      	beq.n	800b6f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	4413      	add	r3, r2
 800b6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	0151      	lsls	r1, r2, #5
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	440a      	add	r2, r1
 800b6e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	015a      	lsls	r2, r3, #5
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	0151      	lsls	r1, r2, #5
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	440a      	add	r2, r1
 800b708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b70c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b710:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d128      	bne.n	800b78e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4413      	add	r3, r2
 800b744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	0151      	lsls	r1, r2, #5
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	440a      	add	r2, r1
 800b752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b756:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b75a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	791b      	ldrb	r3, [r3, #4]
 800b760:	2b03      	cmp	r3, #3
 800b762:	d003      	beq.n	800b76c <USB_EPClearStall+0x4c>
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	791b      	ldrb	r3, [r3, #4]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d138      	bne.n	800b7de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	0151      	lsls	r1, r2, #5
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	440a      	add	r2, r1
 800b782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	e027      	b.n	800b7de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	0151      	lsls	r1, r2, #5
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	440a      	add	r2, r1
 800b7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	791b      	ldrb	r3, [r3, #4]
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d003      	beq.n	800b7be <USB_EPClearStall+0x9e>
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	791b      	ldrb	r3, [r3, #4]
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d10f      	bne.n	800b7de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	0151      	lsls	r1, r2, #5
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b80a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b80e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	78fb      	ldrb	r3, [r7, #3]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b820:	68f9      	ldr	r1, [r7, #12]
 800b822:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b826:	4313      	orrs	r3, r2
 800b828:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b866:	f023 0302 	bic.w	r3, r3, #2
 800b86a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b87a:	b480      	push	{r7}
 800b87c:	b085      	sub	sp, #20
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b894:	f023 0303 	bic.w	r3, r3, #3
 800b898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8a8:	f043 0302 	orr.w	r3, r3, #2
 800b8ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	695b      	ldr	r3, [r3, #20]
 800b8c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b085      	sub	sp, #20
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	4013      	ands	r3, r2
 800b904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	0c1b      	lsrs	r3, r3, #16
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b932:	69db      	ldr	r3, [r3, #28]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	4013      	ands	r3, r2
 800b938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	b29b      	uxth	r3, r3
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b94a:	b480      	push	{r7}
 800b94c:	b085      	sub	sp, #20
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	460b      	mov	r3, r1
 800b954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	4013      	ands	r3, r2
 800b976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b978:	68bb      	ldr	r3, [r7, #8]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b986:	b480      	push	{r7}
 800b988:	b087      	sub	sp, #28
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	f003 030f 	and.w	r3, r3, #15
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b6:	01db      	lsls	r3, r3, #7
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	693a      	ldr	r2, [r7, #16]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9c0:	78fb      	ldrb	r3, [r7, #3]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9d4:	68bb      	ldr	r3, [r7, #8]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	371c      	adds	r7, #28
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	f003 0301 	and.w	r3, r3, #1
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
	...

0800ba00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4b09      	ldr	r3, [pc, #36]	; (800ba44 <USB_ActivateSetup+0x44>)
 800ba1e:	4013      	ands	r3, r2
 800ba20:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	fffff800 	.word	0xfffff800

0800ba48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	460b      	mov	r3, r1
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	333c      	adds	r3, #60	; 0x3c
 800ba5e:	3304      	adds	r3, #4
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	4a26      	ldr	r2, [pc, #152]	; (800bb00 <USB_EP0_OutStart+0xb8>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d90a      	bls.n	800ba82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba7c:	d101      	bne.n	800ba82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e037      	b.n	800baf2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba88:	461a      	mov	r2, r3
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800baa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab0:	f043 0318 	orr.w	r3, r3, #24
 800bab4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bac8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d10f      	bne.n	800baf0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad6:	461a      	mov	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800baee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	371c      	adds	r7, #28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	4f54300a 	.word	0x4f54300a

0800bb04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	3301      	adds	r3, #1
 800bb14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	4a13      	ldr	r2, [pc, #76]	; (800bb68 <USB_CoreReset+0x64>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d901      	bls.n	800bb22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e01b      	b.n	800bb5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	daf2      	bge.n	800bb10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f043 0201 	orr.w	r2, r3, #1
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4a09      	ldr	r2, [pc, #36]	; (800bb68 <USB_CoreReset+0x64>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d901      	bls.n	800bb4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e006      	b.n	800bb5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d0f0      	beq.n	800bb3a <USB_CoreReset+0x36>

  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	00030d40 	.word	0x00030d40

0800bb6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb7c:	f013 fbea 	bl	801f354 <malloc>
 800bb80:	4603      	mov	r3, r0
 800bb82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d109      	bne.n	800bb9e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	32b0      	adds	r2, #176	; 0xb0
 800bb94:	2100      	movs	r1, #0
 800bb96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	e0d4      	b.n	800bd48 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bb9e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bba2:	2100      	movs	r1, #0
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f014 ffb9 	bl	8020b1c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	32b0      	adds	r2, #176	; 0xb0
 800bbb4:	68f9      	ldr	r1, [r7, #12]
 800bbb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	32b0      	adds	r2, #176	; 0xb0
 800bbc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	7c1b      	ldrb	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d138      	bne.n	800bc48 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bbd6:	4b5e      	ldr	r3, [pc, #376]	; (800bd50 <USBD_CDC_Init+0x1e4>)
 800bbd8:	7819      	ldrb	r1, [r3, #0]
 800bbda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbde:	2202      	movs	r2, #2
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f005 f928 	bl	8010e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbe6:	4b5a      	ldr	r3, [pc, #360]	; (800bd50 <USBD_CDC_Init+0x1e4>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	f003 020f 	and.w	r2, r3, #15
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	440b      	add	r3, r1
 800bbfa:	3324      	adds	r3, #36	; 0x24
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc00:	4b54      	ldr	r3, [pc, #336]	; (800bd54 <USBD_CDC_Init+0x1e8>)
 800bc02:	7819      	ldrb	r1, [r3, #0]
 800bc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc08:	2202      	movs	r2, #2
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f005 f913 	bl	8010e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc10:	4b50      	ldr	r3, [pc, #320]	; (800bd54 <USBD_CDC_Init+0x1e8>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	f003 020f 	and.w	r2, r3, #15
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc28:	2201      	movs	r2, #1
 800bc2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc2c:	4b4a      	ldr	r3, [pc, #296]	; (800bd58 <USBD_CDC_Init+0x1ec>)
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	f003 020f 	and.w	r2, r3, #15
 800bc34:	6879      	ldr	r1, [r7, #4]
 800bc36:	4613      	mov	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	4413      	add	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	440b      	add	r3, r1
 800bc40:	3326      	adds	r3, #38	; 0x26
 800bc42:	2210      	movs	r2, #16
 800bc44:	801a      	strh	r2, [r3, #0]
 800bc46:	e035      	b.n	800bcb4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc48:	4b41      	ldr	r3, [pc, #260]	; (800bd50 <USBD_CDC_Init+0x1e4>)
 800bc4a:	7819      	ldrb	r1, [r3, #0]
 800bc4c:	2340      	movs	r3, #64	; 0x40
 800bc4e:	2202      	movs	r2, #2
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f005 f8f0 	bl	8010e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc56:	4b3e      	ldr	r3, [pc, #248]	; (800bd50 <USBD_CDC_Init+0x1e4>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	f003 020f 	and.w	r2, r3, #15
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	440b      	add	r3, r1
 800bc6a:	3324      	adds	r3, #36	; 0x24
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc70:	4b38      	ldr	r3, [pc, #224]	; (800bd54 <USBD_CDC_Init+0x1e8>)
 800bc72:	7819      	ldrb	r1, [r3, #0]
 800bc74:	2340      	movs	r3, #64	; 0x40
 800bc76:	2202      	movs	r2, #2
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f005 f8dc 	bl	8010e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc7e:	4b35      	ldr	r3, [pc, #212]	; (800bd54 <USBD_CDC_Init+0x1e8>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	f003 020f 	and.w	r2, r3, #15
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	440b      	add	r3, r1
 800bc92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc96:	2201      	movs	r2, #1
 800bc98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc9a:	4b2f      	ldr	r3, [pc, #188]	; (800bd58 <USBD_CDC_Init+0x1ec>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	f003 020f 	and.w	r2, r3, #15
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	4613      	mov	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4413      	add	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	440b      	add	r3, r1
 800bcae:	3326      	adds	r3, #38	; 0x26
 800bcb0:	2210      	movs	r2, #16
 800bcb2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bcb4:	4b28      	ldr	r3, [pc, #160]	; (800bd58 <USBD_CDC_Init+0x1ec>)
 800bcb6:	7819      	ldrb	r1, [r3, #0]
 800bcb8:	2308      	movs	r3, #8
 800bcba:	2203      	movs	r2, #3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f005 f8ba 	bl	8010e36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bcc2:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <USBD_CDC_Init+0x1ec>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	f003 020f 	and.w	r2, r3, #15
 800bcca:	6879      	ldr	r1, [r7, #4]
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	440b      	add	r3, r1
 800bcd6:	3324      	adds	r3, #36	; 0x24
 800bcd8:	2201      	movs	r2, #1
 800bcda:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	33b0      	adds	r3, #176	; 0xb0
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800bd12:	2302      	movs	r3, #2
 800bd14:	e018      	b.n	800bd48 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7c1b      	ldrb	r3, [r3, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10a      	bne.n	800bd34 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd1e:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <USBD_CDC_Init+0x1e8>)
 800bd20:	7819      	ldrb	r1, [r3, #0]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f005 f971 	bl	8011014 <USBD_LL_PrepareReceive>
 800bd32:	e008      	b.n	800bd46 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <USBD_CDC_Init+0x1e8>)
 800bd36:	7819      	ldrb	r1, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd3e:	2340      	movs	r3, #64	; 0x40
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f005 f967 	bl	8011014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	20000097 	.word	0x20000097
 800bd54:	20000098 	.word	0x20000098
 800bd58:	20000099 	.word	0x20000099

0800bd5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bd68:	4b3a      	ldr	r3, [pc, #232]	; (800be54 <USBD_CDC_DeInit+0xf8>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f005 f887 	bl	8010e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bd74:	4b37      	ldr	r3, [pc, #220]	; (800be54 <USBD_CDC_DeInit+0xf8>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	f003 020f 	and.w	r2, r3, #15
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	440b      	add	r3, r1
 800bd88:	3324      	adds	r3, #36	; 0x24
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bd8e:	4b32      	ldr	r3, [pc, #200]	; (800be58 <USBD_CDC_DeInit+0xfc>)
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f005 f874 	bl	8010e82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bd9a:	4b2f      	ldr	r3, [pc, #188]	; (800be58 <USBD_CDC_DeInit+0xfc>)
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	f003 020f 	and.w	r2, r3, #15
 800bda2:	6879      	ldr	r1, [r7, #4]
 800bda4:	4613      	mov	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4413      	add	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	440b      	add	r3, r1
 800bdae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bdb6:	4b29      	ldr	r3, [pc, #164]	; (800be5c <USBD_CDC_DeInit+0x100>)
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f005 f860 	bl	8010e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bdc2:	4b26      	ldr	r3, [pc, #152]	; (800be5c <USBD_CDC_DeInit+0x100>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	f003 020f 	and.w	r2, r3, #15
 800bdca:	6879      	ldr	r1, [r7, #4]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	440b      	add	r3, r1
 800bdd6:	3324      	adds	r3, #36	; 0x24
 800bdd8:	2200      	movs	r2, #0
 800bdda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bddc:	4b1f      	ldr	r3, [pc, #124]	; (800be5c <USBD_CDC_DeInit+0x100>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	f003 020f 	and.w	r2, r3, #15
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	4613      	mov	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	440b      	add	r3, r1
 800bdf0:	3326      	adds	r3, #38	; 0x26
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	32b0      	adds	r2, #176	; 0xb0
 800be00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01f      	beq.n	800be48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	33b0      	adds	r3, #176	; 0xb0
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	32b0      	adds	r2, #176	; 0xb0
 800be26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f013 fa9a 	bl	801f364 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	32b0      	adds	r2, #176	; 0xb0
 800be3a:	2100      	movs	r1, #0
 800be3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20000097 	.word	0x20000097
 800be58:	20000098 	.word	0x20000098
 800be5c:	20000099 	.word	0x20000099

0800be60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	32b0      	adds	r2, #176	; 0xb0
 800be74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be7a:	2300      	movs	r3, #0
 800be7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e0bf      	b.n	800c010 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d050      	beq.n	800bf3e <USBD_CDC_Setup+0xde>
 800be9c:	2b20      	cmp	r3, #32
 800be9e:	f040 80af 	bne.w	800c000 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	88db      	ldrh	r3, [r3, #6]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d03a      	beq.n	800bf20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	b25b      	sxtb	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	da1b      	bge.n	800beec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	33b0      	adds	r3, #176	; 0xb0
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800beca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	88d2      	ldrh	r2, [r2, #6]
 800bed0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	2b07      	cmp	r3, #7
 800bed8:	bf28      	it	cs
 800beda:	2307      	movcs	r3, #7
 800bedc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	89fa      	ldrh	r2, [r7, #14]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f001 fd6d 	bl	800d9c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800beea:	e090      	b.n	800c00e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	785a      	ldrb	r2, [r3, #1]
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	88db      	ldrh	r3, [r3, #6]
 800befa:	2b3f      	cmp	r3, #63	; 0x3f
 800befc:	d803      	bhi.n	800bf06 <USBD_CDC_Setup+0xa6>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	88db      	ldrh	r3, [r3, #6]
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	e000      	b.n	800bf08 <USBD_CDC_Setup+0xa8>
 800bf06:	2240      	movs	r2, #64	; 0x40
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bf0e:	6939      	ldr	r1, [r7, #16]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bf16:	461a      	mov	r2, r3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f001 fd7f 	bl	800da1c <USBD_CtlPrepareRx>
      break;
 800bf1e:	e076      	b.n	800c00e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	33b0      	adds	r3, #176	; 0xb0
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	7850      	ldrb	r0, [r2, #1]
 800bf36:	2200      	movs	r2, #0
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	4798      	blx	r3
      break;
 800bf3c:	e067      	b.n	800c00e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	785b      	ldrb	r3, [r3, #1]
 800bf42:	2b0b      	cmp	r3, #11
 800bf44:	d851      	bhi.n	800bfea <USBD_CDC_Setup+0x18a>
 800bf46:	a201      	add	r2, pc, #4	; (adr r2, 800bf4c <USBD_CDC_Setup+0xec>)
 800bf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf4c:	0800bf7d 	.word	0x0800bf7d
 800bf50:	0800bff9 	.word	0x0800bff9
 800bf54:	0800bfeb 	.word	0x0800bfeb
 800bf58:	0800bfeb 	.word	0x0800bfeb
 800bf5c:	0800bfeb 	.word	0x0800bfeb
 800bf60:	0800bfeb 	.word	0x0800bfeb
 800bf64:	0800bfeb 	.word	0x0800bfeb
 800bf68:	0800bfeb 	.word	0x0800bfeb
 800bf6c:	0800bfeb 	.word	0x0800bfeb
 800bf70:	0800bfeb 	.word	0x0800bfeb
 800bf74:	0800bfa7 	.word	0x0800bfa7
 800bf78:	0800bfd1 	.word	0x0800bfd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b03      	cmp	r3, #3
 800bf86:	d107      	bne.n	800bf98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf88:	f107 030a 	add.w	r3, r7, #10
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	4619      	mov	r1, r3
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 fd17 	bl	800d9c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf96:	e032      	b.n	800bffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 fca1 	bl	800d8e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	75fb      	strb	r3, [r7, #23]
          break;
 800bfa4:	e02b      	b.n	800bffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b03      	cmp	r3, #3
 800bfb0:	d107      	bne.n	800bfc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfb2:	f107 030d 	add.w	r3, r7, #13
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f001 fd02 	bl	800d9c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfc0:	e01d      	b.n	800bffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f001 fc8c 	bl	800d8e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	75fb      	strb	r3, [r7, #23]
          break;
 800bfce:	e016      	b.n	800bffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	d00f      	beq.n	800bffc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 fc7f 	bl	800d8e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bfe8:	e008      	b.n	800bffc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f001 fc78 	bl	800d8e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800bff2:	2303      	movs	r3, #3
 800bff4:	75fb      	strb	r3, [r7, #23]
          break;
 800bff6:	e002      	b.n	800bffe <USBD_CDC_Setup+0x19e>
          break;
 800bff8:	bf00      	nop
 800bffa:	e008      	b.n	800c00e <USBD_CDC_Setup+0x1ae>
          break;
 800bffc:	bf00      	nop
      }
      break;
 800bffe:	e006      	b.n	800c00e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 fc6d 	bl	800d8e2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c008:	2303      	movs	r3, #3
 800c00a:	75fb      	strb	r3, [r7, #23]
      break;
 800c00c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c02a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	32b0      	adds	r2, #176	; 0xb0
 800c036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c03e:	2303      	movs	r3, #3
 800c040:	e065      	b.n	800c10e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	32b0      	adds	r2, #176	; 0xb0
 800c04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c052:	78fb      	ldrb	r3, [r7, #3]
 800c054:	f003 020f 	and.w	r2, r3, #15
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	4613      	mov	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4413      	add	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	440b      	add	r3, r1
 800c064:	3318      	adds	r3, #24
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d02f      	beq.n	800c0cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c06c:	78fb      	ldrb	r3, [r7, #3]
 800c06e:	f003 020f 	and.w	r2, r3, #15
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	440b      	add	r3, r1
 800c07e:	3318      	adds	r3, #24
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	78fb      	ldrb	r3, [r7, #3]
 800c084:	f003 010f 	and.w	r1, r3, #15
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	460b      	mov	r3, r1
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	440b      	add	r3, r1
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4403      	add	r3, r0
 800c094:	3348      	adds	r3, #72	; 0x48
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	fbb2 f1f3 	udiv	r1, r2, r3
 800c09c:	fb01 f303 	mul.w	r3, r1, r3
 800c0a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d112      	bne.n	800c0cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c0a6:	78fb      	ldrb	r3, [r7, #3]
 800c0a8:	f003 020f 	and.w	r2, r3, #15
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3318      	adds	r3, #24
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0be:	78f9      	ldrb	r1, [r7, #3]
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f004 ff84 	bl	8010fd2 <USBD_LL_Transmit>
 800c0ca:	e01f      	b.n	800c10c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	33b0      	adds	r3, #176	; 0xb0
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d010      	beq.n	800c10c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	33b0      	adds	r3, #176	; 0xb0
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c108:	78fa      	ldrb	r2, [r7, #3]
 800c10a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	460b      	mov	r3, r1
 800c120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	32b0      	adds	r2, #176	; 0xb0
 800c12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	32b0      	adds	r2, #176	; 0xb0
 800c13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c144:	2303      	movs	r3, #3
 800c146:	e01a      	b.n	800c17e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c148:	78fb      	ldrb	r3, [r7, #3]
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f004 ff82 	bl	8011056 <USBD_LL_GetRxDataSize>
 800c152:	4602      	mov	r2, r0
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	33b0      	adds	r3, #176	; 0xb0
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4413      	add	r3, r2
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c178:	4611      	mov	r1, r2
 800c17a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}

0800c186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b084      	sub	sp, #16
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	32b0      	adds	r2, #176	; 0xb0
 800c198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d101      	bne.n	800c1a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1a4:	2303      	movs	r3, #3
 800c1a6:	e025      	b.n	800c1f4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	33b0      	adds	r3, #176	; 0xb0
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d01a      	beq.n	800c1f2 <USBD_CDC_EP0_RxReady+0x6c>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c1c2:	2bff      	cmp	r3, #255	; 0xff
 800c1c4:	d015      	beq.n	800c1f2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	33b0      	adds	r3, #176	; 0xb0
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c1de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1e6:	b292      	uxth	r2, r2
 800c1e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	22ff      	movs	r2, #255	; 0xff
 800c1ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c1f2:	2300      	movs	r3, #0
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c204:	2182      	movs	r1, #130	; 0x82
 800c206:	4818      	ldr	r0, [pc, #96]	; (800c268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c208:	f000 fd09 	bl	800cc1e <USBD_GetEpDesc>
 800c20c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c20e:	2101      	movs	r1, #1
 800c210:	4815      	ldr	r0, [pc, #84]	; (800c268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c212:	f000 fd04 	bl	800cc1e <USBD_GetEpDesc>
 800c216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c218:	2181      	movs	r1, #129	; 0x81
 800c21a:	4813      	ldr	r0, [pc, #76]	; (800c268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c21c:	f000 fcff 	bl	800cc1e <USBD_GetEpDesc>
 800c220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2210      	movs	r2, #16
 800c22c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d006      	beq.n	800c242 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	2200      	movs	r2, #0
 800c238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c23c:	711a      	strb	r2, [r3, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d006      	beq.n	800c256 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c250:	711a      	strb	r2, [r3, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2243      	movs	r2, #67	; 0x43
 800c25a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c25c:	4b02      	ldr	r3, [pc, #8]	; (800c268 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20000054 	.word	0x20000054

0800c26c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c274:	2182      	movs	r1, #130	; 0x82
 800c276:	4818      	ldr	r0, [pc, #96]	; (800c2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c278:	f000 fcd1 	bl	800cc1e <USBD_GetEpDesc>
 800c27c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c27e:	2101      	movs	r1, #1
 800c280:	4815      	ldr	r0, [pc, #84]	; (800c2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c282:	f000 fccc 	bl	800cc1e <USBD_GetEpDesc>
 800c286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c288:	2181      	movs	r1, #129	; 0x81
 800c28a:	4813      	ldr	r0, [pc, #76]	; (800c2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c28c:	f000 fcc7 	bl	800cc1e <USBD_GetEpDesc>
 800c290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	2210      	movs	r2, #16
 800c29c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d006      	beq.n	800c2b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	711a      	strb	r2, [r3, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f042 0202 	orr.w	r2, r2, #2
 800c2b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d006      	beq.n	800c2c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	711a      	strb	r2, [r3, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f042 0202 	orr.w	r2, r2, #2
 800c2c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2243      	movs	r2, #67	; 0x43
 800c2ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3718      	adds	r7, #24
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20000054 	.word	0x20000054

0800c2dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2e4:	2182      	movs	r1, #130	; 0x82
 800c2e6:	4818      	ldr	r0, [pc, #96]	; (800c348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2e8:	f000 fc99 	bl	800cc1e <USBD_GetEpDesc>
 800c2ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	4815      	ldr	r0, [pc, #84]	; (800c348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2f2:	f000 fc94 	bl	800cc1e <USBD_GetEpDesc>
 800c2f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2f8:	2181      	movs	r1, #129	; 0x81
 800c2fa:	4813      	ldr	r0, [pc, #76]	; (800c348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2fc:	f000 fc8f 	bl	800cc1e <USBD_GetEpDesc>
 800c300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2210      	movs	r2, #16
 800c30c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d006      	beq.n	800c322 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	2200      	movs	r2, #0
 800c318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c31c:	711a      	strb	r2, [r3, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d006      	beq.n	800c336 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c330:	711a      	strb	r2, [r3, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2243      	movs	r2, #67	; 0x43
 800c33a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c33c:	4b02      	ldr	r3, [pc, #8]	; (800c348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20000054 	.word	0x20000054

0800c34c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	220a      	movs	r2, #10
 800c358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c35a:	4b03      	ldr	r3, [pc, #12]	; (800c368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr
 800c368:	20000010 	.word	0x20000010

0800c36c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e009      	b.n	800c394 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	33b0      	adds	r3, #176	; 0xb0
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4413      	add	r3, r2
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b087      	sub	sp, #28
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	32b0      	adds	r2, #176	; 0xb0
 800c3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e008      	b.n	800c3d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	371c      	adds	r7, #28
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	32b0      	adds	r2, #176	; 0xb0
 800c3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d101      	bne.n	800c408 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c404:	2303      	movs	r3, #3
 800c406:	e004      	b.n	800c412 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr
	...

0800c420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	32b0      	adds	r2, #176	; 0xb0
 800c432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c436:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	32b0      	adds	r2, #176	; 0xb0
 800c442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c44a:	2303      	movs	r3, #3
 800c44c:	e018      	b.n	800c480 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	7c1b      	ldrb	r3, [r3, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <USBD_CDC_ReceivePacket+0x68>)
 800c458:	7819      	ldrb	r1, [r3, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c460:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f004 fdd5 	bl	8011014 <USBD_LL_PrepareReceive>
 800c46a:	e008      	b.n	800c47e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c46c:	4b06      	ldr	r3, [pc, #24]	; (800c488 <USBD_CDC_ReceivePacket+0x68>)
 800c46e:	7819      	ldrb	r1, [r3, #0]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f004 fdcb 	bl	8011014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	20000098 	.word	0x20000098

0800c48c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	4613      	mov	r3, r2
 800c498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e01f      	b.n	800c4e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	79fa      	ldrb	r2, [r7, #7]
 800c4d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f004 fc45 	bl	8010d68 <USBD_LL_Init>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3718      	adds	r7, #24
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c500:	2303      	movs	r3, #3
 800c502:	e025      	b.n	800c550 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	32ae      	adds	r2, #174	; 0xae
 800c516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00f      	beq.n	800c540 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	32ae      	adds	r2, #174	; 0xae
 800c52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c530:	f107 020e 	add.w	r2, r7, #14
 800c534:	4610      	mov	r0, r2
 800c536:	4798      	blx	r3
 800c538:	4602      	mov	r2, r0
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f004 fc4d 	bl	8010e00 <USBD_LL_Start>
 800c566:	4603      	mov	r3, r0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c578:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d009      	beq.n	800c5b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	78fa      	ldrb	r2, [r7, #3]
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	4611      	mov	r1, r2
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	4798      	blx	r3
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c602:	6839      	ldr	r1, [r7, #0]
 800c604:	4618      	mov	r0, r3
 800c606:	f001 f932 	bl	800d86e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c618:	461a      	mov	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c626:	f003 031f 	and.w	r3, r3, #31
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d01a      	beq.n	800c664 <USBD_LL_SetupStage+0x72>
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d822      	bhi.n	800c678 <USBD_LL_SetupStage+0x86>
 800c632:	2b00      	cmp	r3, #0
 800c634:	d002      	beq.n	800c63c <USBD_LL_SetupStage+0x4a>
 800c636:	2b01      	cmp	r3, #1
 800c638:	d00a      	beq.n	800c650 <USBD_LL_SetupStage+0x5e>
 800c63a:	e01d      	b.n	800c678 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fb5f 	bl	800cd08 <USBD_StdDevReq>
 800c64a:	4603      	mov	r3, r0
 800c64c:	73fb      	strb	r3, [r7, #15]
      break;
 800c64e:	e020      	b.n	800c692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fbc7 	bl	800cdec <USBD_StdItfReq>
 800c65e:	4603      	mov	r3, r0
 800c660:	73fb      	strb	r3, [r7, #15]
      break;
 800c662:	e016      	b.n	800c692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fc29 	bl	800cec4 <USBD_StdEPReq>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]
      break;
 800c676:	e00c      	b.n	800c692 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c67e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c682:	b2db      	uxtb	r3, r3
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f004 fc1a 	bl	8010ec0 <USBD_LL_StallEP>
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]
      break;
 800c690:	bf00      	nop
  }

  return ret;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c6ae:	7afb      	ldrb	r3, [r7, #11]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d16e      	bne.n	800c792 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c6ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	f040 8098 	bne.w	800c7f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d913      	bls.n	800c6fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	1ad2      	subs	r2, r2, r3
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	bf28      	it	cs
 800c6ee:	4613      	movcs	r3, r2
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f001 f9ae 	bl	800da56 <USBD_CtlContinueRx>
 800c6fa:	e07d      	b.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c702:	f003 031f 	and.w	r3, r3, #31
 800c706:	2b02      	cmp	r3, #2
 800c708:	d014      	beq.n	800c734 <USBD_LL_DataOutStage+0x98>
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d81d      	bhi.n	800c74a <USBD_LL_DataOutStage+0xae>
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d002      	beq.n	800c718 <USBD_LL_DataOutStage+0x7c>
 800c712:	2b01      	cmp	r3, #1
 800c714:	d003      	beq.n	800c71e <USBD_LL_DataOutStage+0x82>
 800c716:	e018      	b.n	800c74a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	75bb      	strb	r3, [r7, #22]
            break;
 800c71c:	e018      	b.n	800c750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c724:	b2db      	uxtb	r3, r3
 800c726:	4619      	mov	r1, r3
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 fa5e 	bl	800cbea <USBD_CoreFindIF>
 800c72e:	4603      	mov	r3, r0
 800c730:	75bb      	strb	r3, [r7, #22]
            break;
 800c732:	e00d      	b.n	800c750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	4619      	mov	r1, r3
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 fa60 	bl	800cc04 <USBD_CoreFindEP>
 800c744:	4603      	mov	r3, r0
 800c746:	75bb      	strb	r3, [r7, #22]
            break;
 800c748:	e002      	b.n	800c750 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	75bb      	strb	r3, [r7, #22]
            break;
 800c74e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c750:	7dbb      	ldrb	r3, [r7, #22]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d119      	bne.n	800c78a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d113      	bne.n	800c78a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c762:	7dba      	ldrb	r2, [r7, #22]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	32ae      	adds	r2, #174	; 0xae
 800c768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00b      	beq.n	800c78a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c772:	7dba      	ldrb	r2, [r7, #22]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c77a:	7dba      	ldrb	r2, [r7, #22]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	32ae      	adds	r2, #174	; 0xae
 800c780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f001 f974 	bl	800da78 <USBD_CtlSendStatus>
 800c790:	e032      	b.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c792:	7afb      	ldrb	r3, [r7, #11]
 800c794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	4619      	mov	r1, r3
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f000 fa31 	bl	800cc04 <USBD_CoreFindEP>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7a6:	7dbb      	ldrb	r3, [r7, #22]
 800c7a8:	2bff      	cmp	r3, #255	; 0xff
 800c7aa:	d025      	beq.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
 800c7ac:	7dbb      	ldrb	r3, [r7, #22]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d122      	bne.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	2b03      	cmp	r3, #3
 800c7bc:	d117      	bne.n	800c7ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c7be:	7dba      	ldrb	r2, [r7, #22]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	32ae      	adds	r2, #174	; 0xae
 800c7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00f      	beq.n	800c7ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c7ce:	7dba      	ldrb	r2, [r7, #22]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c7d6:	7dba      	ldrb	r2, [r7, #22]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	32ae      	adds	r2, #174	; 0xae
 800c7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	7afa      	ldrb	r2, [r7, #11]
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	4798      	blx	r3
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
 800c7f6:	e000      	b.n	800c7fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3718      	adds	r7, #24
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b086      	sub	sp, #24
 800c806:	af00      	add	r7, sp, #0
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	460b      	mov	r3, r1
 800c80c:	607a      	str	r2, [r7, #4]
 800c80e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c810:	7afb      	ldrb	r3, [r7, #11]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d16f      	bne.n	800c8f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3314      	adds	r3, #20
 800c81a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c822:	2b02      	cmp	r3, #2
 800c824:	d15a      	bne.n	800c8dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	689a      	ldr	r2, [r3, #8]
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d914      	bls.n	800c85c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	689a      	ldr	r2, [r3, #8]
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	1ad2      	subs	r2, r2, r3
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	461a      	mov	r2, r3
 800c846:	6879      	ldr	r1, [r7, #4]
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f001 f8d6 	bl	800d9fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c84e:	2300      	movs	r3, #0
 800c850:	2200      	movs	r2, #0
 800c852:	2100      	movs	r1, #0
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f004 fbdd 	bl	8011014 <USBD_LL_PrepareReceive>
 800c85a:	e03f      	b.n	800c8dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	68da      	ldr	r2, [r3, #12]
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	429a      	cmp	r2, r3
 800c866:	d11c      	bne.n	800c8a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c870:	429a      	cmp	r2, r3
 800c872:	d316      	bcc.n	800c8a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c87e:	429a      	cmp	r2, r3
 800c880:	d20f      	bcs.n	800c8a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c882:	2200      	movs	r2, #0
 800c884:	2100      	movs	r1, #0
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	f001 f8b7 	bl	800d9fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c894:	2300      	movs	r3, #0
 800c896:	2200      	movs	r2, #0
 800c898:	2100      	movs	r1, #0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f004 fbba 	bl	8011014 <USBD_LL_PrepareReceive>
 800c8a0:	e01c      	b.n	800c8dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d10f      	bne.n	800c8ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d009      	beq.n	800c8ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8ce:	2180      	movs	r1, #128	; 0x80
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f004 faf5 	bl	8010ec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f001 f8e1 	bl	800da9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d03a      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f7ff fe42 	bl	800c570 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c8f4:	e032      	b.n	800c95c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c8f6:	7afb      	ldrb	r3, [r7, #11]
 800c8f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	4619      	mov	r1, r3
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 f97f 	bl	800cc04 <USBD_CoreFindEP>
 800c906:	4603      	mov	r3, r0
 800c908:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	2bff      	cmp	r3, #255	; 0xff
 800c90e:	d025      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d122      	bne.n	800c95c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d11c      	bne.n	800c95c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c922:	7dfa      	ldrb	r2, [r7, #23]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	32ae      	adds	r2, #174	; 0xae
 800c928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d014      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c932:	7dfa      	ldrb	r2, [r7, #23]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c93a:	7dfa      	ldrb	r2, [r7, #23]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	32ae      	adds	r2, #174	; 0xae
 800c940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	7afa      	ldrb	r2, [r7, #11]
 800c948:	4611      	mov	r1, r2
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	4798      	blx	r3
 800c94e:	4603      	mov	r3, r0
 800c950:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c952:	7dbb      	ldrb	r3, [r7, #22]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c958:	7dbb      	ldrb	r3, [r7, #22]
 800c95a:	e000      	b.n	800c95e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d014      	beq.n	800c9cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00e      	beq.n	800c9cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	6852      	ldr	r2, [r2, #4]
 800c9ba:	b2d2      	uxtb	r2, r2
 800c9bc:	4611      	mov	r1, r2
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	4798      	blx	r3
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9cc:	2340      	movs	r3, #64	; 0x40
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f004 fa2f 	bl	8010e36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2240      	movs	r2, #64	; 0x40
 800c9e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9e8:	2340      	movs	r3, #64	; 0x40
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2180      	movs	r1, #128	; 0x80
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f004 fa21 	bl	8010e36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2240      	movs	r2, #64	; 0x40
 800c9fe:	621a      	str	r2, [r3, #32]

  return ret;
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	78fa      	ldrb	r2, [r7, #3]
 800ca1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b083      	sub	sp, #12
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2204      	movs	r2, #4
 800ca44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b083      	sub	sp, #12
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	d106      	bne.n	800ca78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d110      	bne.n	800cabc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00b      	beq.n	800cabc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d005      	beq.n	800cabc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	460b      	mov	r3, r1
 800cad0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	32ae      	adds	r2, #174	; 0xae
 800cadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e01c      	b.n	800cb22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d115      	bne.n	800cb20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	32ae      	adds	r2, #174	; 0xae
 800cafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	32ae      	adds	r2, #174	; 0xae
 800cb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb16:	6a1b      	ldr	r3, [r3, #32]
 800cb18:	78fa      	ldrb	r2, [r7, #3]
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	32ae      	adds	r2, #174	; 0xae
 800cb40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb48:	2303      	movs	r3, #3
 800cb4a:	e01c      	b.n	800cb86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b03      	cmp	r3, #3
 800cb56:	d115      	bne.n	800cb84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	32ae      	adds	r2, #174	; 0xae
 800cb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00b      	beq.n	800cb84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	32ae      	adds	r2, #174	; 0xae
 800cb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7c:	78fa      	ldrb	r2, [r7, #3]
 800cb7e:	4611      	mov	r1, r2
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00e      	beq.n	800cbe0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	6852      	ldr	r2, [r2, #4]
 800cbce:	b2d2      	uxtb	r2, r2
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	4798      	blx	r3
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cbf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	885b      	ldrh	r3, [r3, #2]
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d920      	bls.n	800cc88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cc4e:	e013      	b.n	800cc78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cc50:	f107 030a 	add.w	r3, r7, #10
 800cc54:	4619      	mov	r1, r3
 800cc56:	6978      	ldr	r0, [r7, #20]
 800cc58:	f000 f81b 	bl	800cc92 <USBD_GetNextDesc>
 800cc5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	785b      	ldrb	r3, [r3, #1]
 800cc62:	2b05      	cmp	r3, #5
 800cc64:	d108      	bne.n	800cc78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	789b      	ldrb	r3, [r3, #2]
 800cc6e:	78fa      	ldrb	r2, [r7, #3]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d008      	beq.n	800cc86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cc74:	2300      	movs	r3, #0
 800cc76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	885b      	ldrh	r3, [r3, #2]
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	897b      	ldrh	r3, [r7, #10]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d8e5      	bhi.n	800cc50 <USBD_GetEpDesc+0x32>
 800cc84:	e000      	b.n	800cc88 <USBD_GetEpDesc+0x6a>
          break;
 800cc86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cc88:	693b      	ldr	r3, [r7, #16]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b085      	sub	sp, #20
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	881a      	ldrh	r2, [r3, #0]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	4413      	add	r3, r2
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	4413      	add	r3, r2
 800ccbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	3301      	adds	r3, #1
 800cce2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	781b      	ldrb	r3, [r3, #0]
 800cce8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ccea:	8a3b      	ldrh	r3, [r7, #16]
 800ccec:	021b      	lsls	r3, r3, #8
 800ccee:	b21a      	sxth	r2, r3
 800ccf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	b21b      	sxth	r3, r3
 800ccf8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ccfa:	89fb      	ldrh	r3, [r7, #14]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	371c      	adds	r7, #28
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd1e:	2b40      	cmp	r3, #64	; 0x40
 800cd20:	d005      	beq.n	800cd2e <USBD_StdDevReq+0x26>
 800cd22:	2b40      	cmp	r3, #64	; 0x40
 800cd24:	d857      	bhi.n	800cdd6 <USBD_StdDevReq+0xce>
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00f      	beq.n	800cd4a <USBD_StdDevReq+0x42>
 800cd2a:	2b20      	cmp	r3, #32
 800cd2c:	d153      	bne.n	800cdd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	32ae      	adds	r2, #174	; 0xae
 800cd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	4798      	blx	r3
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]
      break;
 800cd48:	e04a      	b.n	800cde0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	785b      	ldrb	r3, [r3, #1]
 800cd4e:	2b09      	cmp	r3, #9
 800cd50:	d83b      	bhi.n	800cdca <USBD_StdDevReq+0xc2>
 800cd52:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <USBD_StdDevReq+0x50>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cdad 	.word	0x0800cdad
 800cd5c:	0800cdc1 	.word	0x0800cdc1
 800cd60:	0800cdcb 	.word	0x0800cdcb
 800cd64:	0800cdb7 	.word	0x0800cdb7
 800cd68:	0800cdcb 	.word	0x0800cdcb
 800cd6c:	0800cd8b 	.word	0x0800cd8b
 800cd70:	0800cd81 	.word	0x0800cd81
 800cd74:	0800cdcb 	.word	0x0800cdcb
 800cd78:	0800cda3 	.word	0x0800cda3
 800cd7c:	0800cd95 	.word	0x0800cd95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cd80:	6839      	ldr	r1, [r7, #0]
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fa3c 	bl	800d200 <USBD_GetDescriptor>
          break;
 800cd88:	e024      	b.n	800cdd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 fbcb 	bl	800d528 <USBD_SetAddress>
          break;
 800cd92:	e01f      	b.n	800cdd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fc0a 	bl	800d5b0 <USBD_SetConfig>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73fb      	strb	r3, [r7, #15]
          break;
 800cda0:	e018      	b.n	800cdd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cda2:	6839      	ldr	r1, [r7, #0]
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fcad 	bl	800d704 <USBD_GetConfig>
          break;
 800cdaa:	e013      	b.n	800cdd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fcde 	bl	800d770 <USBD_GetStatus>
          break;
 800cdb4:	e00e      	b.n	800cdd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fd0d 	bl	800d7d8 <USBD_SetFeature>
          break;
 800cdbe:	e009      	b.n	800cdd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cdc0:	6839      	ldr	r1, [r7, #0]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fd31 	bl	800d82a <USBD_ClrFeature>
          break;
 800cdc8:	e004      	b.n	800cdd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fd88 	bl	800d8e2 <USBD_CtlError>
          break;
 800cdd2:	bf00      	nop
      }
      break;
 800cdd4:	e004      	b.n	800cde0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fd82 	bl	800d8e2 <USBD_CtlError>
      break;
 800cdde:	bf00      	nop
  }

  return ret;
 800cde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop

0800cdec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce02:	2b40      	cmp	r3, #64	; 0x40
 800ce04:	d005      	beq.n	800ce12 <USBD_StdItfReq+0x26>
 800ce06:	2b40      	cmp	r3, #64	; 0x40
 800ce08:	d852      	bhi.n	800ceb0 <USBD_StdItfReq+0xc4>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d001      	beq.n	800ce12 <USBD_StdItfReq+0x26>
 800ce0e:	2b20      	cmp	r3, #32
 800ce10:	d14e      	bne.n	800ceb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d840      	bhi.n	800cea2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	889b      	ldrh	r3, [r3, #4]
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d836      	bhi.n	800ce98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	889b      	ldrh	r3, [r3, #4]
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f7ff fed9 	bl	800cbea <USBD_CoreFindIF>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce3c:	7bbb      	ldrb	r3, [r7, #14]
 800ce3e:	2bff      	cmp	r3, #255	; 0xff
 800ce40:	d01d      	beq.n	800ce7e <USBD_StdItfReq+0x92>
 800ce42:	7bbb      	ldrb	r3, [r7, #14]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d11a      	bne.n	800ce7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ce48:	7bba      	ldrb	r2, [r7, #14]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	32ae      	adds	r2, #174	; 0xae
 800ce4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00f      	beq.n	800ce78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ce58:	7bba      	ldrb	r2, [r7, #14]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce60:	7bba      	ldrb	r2, [r7, #14]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	32ae      	adds	r2, #174	; 0xae
 800ce66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	4798      	blx	r3
 800ce72:	4603      	mov	r3, r0
 800ce74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce76:	e004      	b.n	800ce82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ce78:	2303      	movs	r3, #3
 800ce7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce7c:	e001      	b.n	800ce82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	88db      	ldrh	r3, [r3, #6]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d110      	bne.n	800ceac <USBD_StdItfReq+0xc0>
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10d      	bne.n	800ceac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fdf1 	bl	800da78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ce96:	e009      	b.n	800ceac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ce98:	6839      	ldr	r1, [r7, #0]
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 fd21 	bl	800d8e2 <USBD_CtlError>
          break;
 800cea0:	e004      	b.n	800ceac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fd1c 	bl	800d8e2 <USBD_CtlError>
          break;
 800ceaa:	e000      	b.n	800ceae <USBD_StdItfReq+0xc2>
          break;
 800ceac:	bf00      	nop
      }
      break;
 800ceae:	e004      	b.n	800ceba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fd15 	bl	800d8e2 <USBD_CtlError>
      break;
 800ceb8:	bf00      	nop
  }

  return ret;
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	889b      	ldrh	r3, [r3, #4]
 800ced6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cee0:	2b40      	cmp	r3, #64	; 0x40
 800cee2:	d007      	beq.n	800cef4 <USBD_StdEPReq+0x30>
 800cee4:	2b40      	cmp	r3, #64	; 0x40
 800cee6:	f200 817f 	bhi.w	800d1e8 <USBD_StdEPReq+0x324>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d02a      	beq.n	800cf44 <USBD_StdEPReq+0x80>
 800ceee:	2b20      	cmp	r3, #32
 800cef0:	f040 817a 	bne.w	800d1e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	4619      	mov	r1, r3
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff fe83 	bl	800cc04 <USBD_CoreFindEP>
 800cefe:	4603      	mov	r3, r0
 800cf00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf02:	7b7b      	ldrb	r3, [r7, #13]
 800cf04:	2bff      	cmp	r3, #255	; 0xff
 800cf06:	f000 8174 	beq.w	800d1f2 <USBD_StdEPReq+0x32e>
 800cf0a:	7b7b      	ldrb	r3, [r7, #13]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f040 8170 	bne.w	800d1f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cf12:	7b7a      	ldrb	r2, [r7, #13]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cf1a:	7b7a      	ldrb	r2, [r7, #13]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	32ae      	adds	r2, #174	; 0xae
 800cf20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 8163 	beq.w	800d1f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cf2c:	7b7a      	ldrb	r2, [r7, #13]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	32ae      	adds	r2, #174	; 0xae
 800cf32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	4798      	blx	r3
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf42:	e156      	b.n	800d1f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	785b      	ldrb	r3, [r3, #1]
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	d008      	beq.n	800cf5e <USBD_StdEPReq+0x9a>
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	f300 8145 	bgt.w	800d1dc <USBD_StdEPReq+0x318>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 809b 	beq.w	800d08e <USBD_StdEPReq+0x1ca>
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d03c      	beq.n	800cfd6 <USBD_StdEPReq+0x112>
 800cf5c:	e13e      	b.n	800d1dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d002      	beq.n	800cf70 <USBD_StdEPReq+0xac>
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d016      	beq.n	800cf9c <USBD_StdEPReq+0xd8>
 800cf6e:	e02c      	b.n	800cfca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00d      	beq.n	800cf92 <USBD_StdEPReq+0xce>
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	2b80      	cmp	r3, #128	; 0x80
 800cf7a:	d00a      	beq.n	800cf92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf7c:	7bbb      	ldrb	r3, [r7, #14]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f003 ff9d 	bl	8010ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf86:	2180      	movs	r1, #128	; 0x80
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f003 ff99 	bl	8010ec0 <USBD_LL_StallEP>
 800cf8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf90:	e020      	b.n	800cfd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cf92:	6839      	ldr	r1, [r7, #0]
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fca4 	bl	800d8e2 <USBD_CtlError>
              break;
 800cf9a:	e01b      	b.n	800cfd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	885b      	ldrh	r3, [r3, #2]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10e      	bne.n	800cfc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00b      	beq.n	800cfc2 <USBD_StdEPReq+0xfe>
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
 800cfac:	2b80      	cmp	r3, #128	; 0x80
 800cfae:	d008      	beq.n	800cfc2 <USBD_StdEPReq+0xfe>
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	88db      	ldrh	r3, [r3, #6]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d104      	bne.n	800cfc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfb8:	7bbb      	ldrb	r3, [r7, #14]
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f003 ff7f 	bl	8010ec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fd58 	bl	800da78 <USBD_CtlSendStatus>

              break;
 800cfc8:	e004      	b.n	800cfd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fc88 	bl	800d8e2 <USBD_CtlError>
              break;
 800cfd2:	bf00      	nop
          }
          break;
 800cfd4:	e107      	b.n	800d1e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d002      	beq.n	800cfe8 <USBD_StdEPReq+0x124>
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d016      	beq.n	800d014 <USBD_StdEPReq+0x150>
 800cfe6:	e04b      	b.n	800d080 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfe8:	7bbb      	ldrb	r3, [r7, #14]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00d      	beq.n	800d00a <USBD_StdEPReq+0x146>
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	2b80      	cmp	r3, #128	; 0x80
 800cff2:	d00a      	beq.n	800d00a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f003 ff61 	bl	8010ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cffe:	2180      	movs	r1, #128	; 0x80
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f003 ff5d 	bl	8010ec0 <USBD_LL_StallEP>
 800d006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d008:	e040      	b.n	800d08c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fc68 	bl	800d8e2 <USBD_CtlError>
              break;
 800d012:	e03b      	b.n	800d08c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	885b      	ldrh	r3, [r3, #2]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d136      	bne.n	800d08a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
 800d01e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d022:	2b00      	cmp	r3, #0
 800d024:	d004      	beq.n	800d030 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d026:	7bbb      	ldrb	r3, [r7, #14]
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f003 ff67 	bl	8010efe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fd21 	bl	800da78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d036:	7bbb      	ldrb	r3, [r7, #14]
 800d038:	4619      	mov	r1, r3
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff fde2 	bl	800cc04 <USBD_CoreFindEP>
 800d040:	4603      	mov	r3, r0
 800d042:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d044:	7b7b      	ldrb	r3, [r7, #13]
 800d046:	2bff      	cmp	r3, #255	; 0xff
 800d048:	d01f      	beq.n	800d08a <USBD_StdEPReq+0x1c6>
 800d04a:	7b7b      	ldrb	r3, [r7, #13]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d11c      	bne.n	800d08a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d050:	7b7a      	ldrb	r2, [r7, #13]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d058:	7b7a      	ldrb	r2, [r7, #13]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	32ae      	adds	r2, #174	; 0xae
 800d05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d010      	beq.n	800d08a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d068:	7b7a      	ldrb	r2, [r7, #13]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	32ae      	adds	r2, #174	; 0xae
 800d06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	4798      	blx	r3
 800d07a:	4603      	mov	r3, r0
 800d07c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d07e:	e004      	b.n	800d08a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fc2d 	bl	800d8e2 <USBD_CtlError>
              break;
 800d088:	e000      	b.n	800d08c <USBD_StdEPReq+0x1c8>
              break;
 800d08a:	bf00      	nop
          }
          break;
 800d08c:	e0ab      	b.n	800d1e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b02      	cmp	r3, #2
 800d098:	d002      	beq.n	800d0a0 <USBD_StdEPReq+0x1dc>
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d032      	beq.n	800d104 <USBD_StdEPReq+0x240>
 800d09e:	e097      	b.n	800d1d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d007      	beq.n	800d0b6 <USBD_StdEPReq+0x1f2>
 800d0a6:	7bbb      	ldrb	r3, [r7, #14]
 800d0a8:	2b80      	cmp	r3, #128	; 0x80
 800d0aa:	d004      	beq.n	800d0b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fc17 	bl	800d8e2 <USBD_CtlError>
                break;
 800d0b4:	e091      	b.n	800d1da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	da0b      	bge.n	800d0d6 <USBD_StdEPReq+0x212>
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
 800d0c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4413      	add	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	3310      	adds	r3, #16
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	e00b      	b.n	800d0ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0dc:	4613      	mov	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	4413      	add	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fc61 	bl	800d9c4 <USBD_CtlSendData>
              break;
 800d102:	e06a      	b.n	800d1da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	da11      	bge.n	800d130 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
 800d10e:	f003 020f 	and.w	r2, r3, #15
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	4613      	mov	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4413      	add	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	440b      	add	r3, r1
 800d11e:	3324      	adds	r3, #36	; 0x24
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d117      	bne.n	800d156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d126:	6839      	ldr	r1, [r7, #0]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f000 fbda 	bl	800d8e2 <USBD_CtlError>
                  break;
 800d12e:	e054      	b.n	800d1da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d130:	7bbb      	ldrb	r3, [r7, #14]
 800d132:	f003 020f 	and.w	r2, r3, #15
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	4613      	mov	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4413      	add	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	440b      	add	r3, r1
 800d142:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d104      	bne.n	800d156 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fbc7 	bl	800d8e2 <USBD_CtlError>
                  break;
 800d154:	e041      	b.n	800d1da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	da0b      	bge.n	800d176 <USBD_StdEPReq+0x2b2>
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
 800d160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d164:	4613      	mov	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	3310      	adds	r3, #16
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	4413      	add	r3, r2
 800d172:	3304      	adds	r3, #4
 800d174:	e00b      	b.n	800d18e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d176:	7bbb      	ldrb	r3, [r7, #14]
 800d178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	4413      	add	r3, r2
 800d18c:	3304      	adds	r3, #4
 800d18e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d190:	7bbb      	ldrb	r3, [r7, #14]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d002      	beq.n	800d19c <USBD_StdEPReq+0x2d8>
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	2b80      	cmp	r3, #128	; 0x80
 800d19a:	d103      	bne.n	800d1a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	e00e      	b.n	800d1c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d1a4:	7bbb      	ldrb	r3, [r7, #14]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f003 fec7 	bl	8010f3c <USBD_LL_IsStallEP>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	e002      	b.n	800d1c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fbfb 	bl	800d9c4 <USBD_CtlSendData>
              break;
 800d1ce:	e004      	b.n	800d1da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 fb85 	bl	800d8e2 <USBD_CtlError>
              break;
 800d1d8:	bf00      	nop
          }
          break;
 800d1da:	e004      	b.n	800d1e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d1dc:	6839      	ldr	r1, [r7, #0]
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fb7f 	bl	800d8e2 <USBD_CtlError>
          break;
 800d1e4:	bf00      	nop
      }
      break;
 800d1e6:	e005      	b.n	800d1f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fb79 	bl	800d8e2 <USBD_CtlError>
      break;
 800d1f0:	e000      	b.n	800d1f4 <USBD_StdEPReq+0x330>
      break;
 800d1f2:	bf00      	nop
  }

  return ret;
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
	...

0800d200 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d20a:	2300      	movs	r3, #0
 800d20c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d212:	2300      	movs	r3, #0
 800d214:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	885b      	ldrh	r3, [r3, #2]
 800d21a:	0a1b      	lsrs	r3, r3, #8
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	3b01      	subs	r3, #1
 800d220:	2b0e      	cmp	r3, #14
 800d222:	f200 8152 	bhi.w	800d4ca <USBD_GetDescriptor+0x2ca>
 800d226:	a201      	add	r2, pc, #4	; (adr r2, 800d22c <USBD_GetDescriptor+0x2c>)
 800d228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22c:	0800d29d 	.word	0x0800d29d
 800d230:	0800d2b5 	.word	0x0800d2b5
 800d234:	0800d2f5 	.word	0x0800d2f5
 800d238:	0800d4cb 	.word	0x0800d4cb
 800d23c:	0800d4cb 	.word	0x0800d4cb
 800d240:	0800d46b 	.word	0x0800d46b
 800d244:	0800d497 	.word	0x0800d497
 800d248:	0800d4cb 	.word	0x0800d4cb
 800d24c:	0800d4cb 	.word	0x0800d4cb
 800d250:	0800d4cb 	.word	0x0800d4cb
 800d254:	0800d4cb 	.word	0x0800d4cb
 800d258:	0800d4cb 	.word	0x0800d4cb
 800d25c:	0800d4cb 	.word	0x0800d4cb
 800d260:	0800d4cb 	.word	0x0800d4cb
 800d264:	0800d269 	.word	0x0800d269
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d26e:	69db      	ldr	r3, [r3, #28]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00b      	beq.n	800d28c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	7c12      	ldrb	r2, [r2, #16]
 800d280:	f107 0108 	add.w	r1, r7, #8
 800d284:	4610      	mov	r0, r2
 800d286:	4798      	blx	r3
 800d288:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d28a:	e126      	b.n	800d4da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d28c:	6839      	ldr	r1, [r7, #0]
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fb27 	bl	800d8e2 <USBD_CtlError>
        err++;
 800d294:	7afb      	ldrb	r3, [r7, #11]
 800d296:	3301      	adds	r3, #1
 800d298:	72fb      	strb	r3, [r7, #11]
      break;
 800d29a:	e11e      	b.n	800d4da <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	7c12      	ldrb	r2, [r2, #16]
 800d2a8:	f107 0108 	add.w	r1, r7, #8
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	4798      	blx	r3
 800d2b0:	60f8      	str	r0, [r7, #12]
      break;
 800d2b2:	e112      	b.n	800d4da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	7c1b      	ldrb	r3, [r3, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10d      	bne.n	800d2d8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c4:	f107 0208 	add.w	r2, r7, #8
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	4798      	blx	r3
 800d2cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d2d6:	e100      	b.n	800d4da <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e0:	f107 0208 	add.w	r2, r7, #8
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	4798      	blx	r3
 800d2e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	701a      	strb	r2, [r3, #0]
      break;
 800d2f2:	e0f2      	b.n	800d4da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	885b      	ldrh	r3, [r3, #2]
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	2b05      	cmp	r3, #5
 800d2fc:	f200 80ac 	bhi.w	800d458 <USBD_GetDescriptor+0x258>
 800d300:	a201      	add	r2, pc, #4	; (adr r2, 800d308 <USBD_GetDescriptor+0x108>)
 800d302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d306:	bf00      	nop
 800d308:	0800d321 	.word	0x0800d321
 800d30c:	0800d355 	.word	0x0800d355
 800d310:	0800d389 	.word	0x0800d389
 800d314:	0800d3bd 	.word	0x0800d3bd
 800d318:	0800d3f1 	.word	0x0800d3f1
 800d31c:	0800d425 	.word	0x0800d425
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00b      	beq.n	800d344 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	7c12      	ldrb	r2, [r2, #16]
 800d338:	f107 0108 	add.w	r1, r7, #8
 800d33c:	4610      	mov	r0, r2
 800d33e:	4798      	blx	r3
 800d340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d342:	e091      	b.n	800d468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 facb 	bl	800d8e2 <USBD_CtlError>
            err++;
 800d34c:	7afb      	ldrb	r3, [r7, #11]
 800d34e:	3301      	adds	r3, #1
 800d350:	72fb      	strb	r3, [r7, #11]
          break;
 800d352:	e089      	b.n	800d468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00b      	beq.n	800d378 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	7c12      	ldrb	r2, [r2, #16]
 800d36c:	f107 0108 	add.w	r1, r7, #8
 800d370:	4610      	mov	r0, r2
 800d372:	4798      	blx	r3
 800d374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d376:	e077      	b.n	800d468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fab1 	bl	800d8e2 <USBD_CtlError>
            err++;
 800d380:	7afb      	ldrb	r3, [r7, #11]
 800d382:	3301      	adds	r3, #1
 800d384:	72fb      	strb	r3, [r7, #11]
          break;
 800d386:	e06f      	b.n	800d468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00b      	beq.n	800d3ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	7c12      	ldrb	r2, [r2, #16]
 800d3a0:	f107 0108 	add.w	r1, r7, #8
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	4798      	blx	r3
 800d3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3aa:	e05d      	b.n	800d468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fa97 	bl	800d8e2 <USBD_CtlError>
            err++;
 800d3b4:	7afb      	ldrb	r3, [r7, #11]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ba:	e055      	b.n	800d468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00b      	beq.n	800d3e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	7c12      	ldrb	r2, [r2, #16]
 800d3d4:	f107 0108 	add.w	r1, r7, #8
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4798      	blx	r3
 800d3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3de:	e043      	b.n	800d468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fa7d 	bl	800d8e2 <USBD_CtlError>
            err++;
 800d3e8:	7afb      	ldrb	r3, [r7, #11]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ee:	e03b      	b.n	800d468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	7c12      	ldrb	r2, [r2, #16]
 800d408:	f107 0108 	add.w	r1, r7, #8
 800d40c:	4610      	mov	r0, r2
 800d40e:	4798      	blx	r3
 800d410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d412:	e029      	b.n	800d468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d414:	6839      	ldr	r1, [r7, #0]
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 fa63 	bl	800d8e2 <USBD_CtlError>
            err++;
 800d41c:	7afb      	ldrb	r3, [r7, #11]
 800d41e:	3301      	adds	r3, #1
 800d420:	72fb      	strb	r3, [r7, #11]
          break;
 800d422:	e021      	b.n	800d468 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d42a:	699b      	ldr	r3, [r3, #24]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00b      	beq.n	800d448 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	7c12      	ldrb	r2, [r2, #16]
 800d43c:	f107 0108 	add.w	r1, r7, #8
 800d440:	4610      	mov	r0, r2
 800d442:	4798      	blx	r3
 800d444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d446:	e00f      	b.n	800d468 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 fa49 	bl	800d8e2 <USBD_CtlError>
            err++;
 800d450:	7afb      	ldrb	r3, [r7, #11]
 800d452:	3301      	adds	r3, #1
 800d454:	72fb      	strb	r3, [r7, #11]
          break;
 800d456:	e007      	b.n	800d468 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fa41 	bl	800d8e2 <USBD_CtlError>
          err++;
 800d460:	7afb      	ldrb	r3, [r7, #11]
 800d462:	3301      	adds	r3, #1
 800d464:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d466:	bf00      	nop
      }
      break;
 800d468:	e037      	b.n	800d4da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	7c1b      	ldrb	r3, [r3, #16]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d109      	bne.n	800d486 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47a:	f107 0208 	add.w	r2, r7, #8
 800d47e:	4610      	mov	r0, r2
 800d480:	4798      	blx	r3
 800d482:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d484:	e029      	b.n	800d4da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fa2a 	bl	800d8e2 <USBD_CtlError>
        err++;
 800d48e:	7afb      	ldrb	r3, [r7, #11]
 800d490:	3301      	adds	r3, #1
 800d492:	72fb      	strb	r3, [r7, #11]
      break;
 800d494:	e021      	b.n	800d4da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	7c1b      	ldrb	r3, [r3, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10d      	bne.n	800d4ba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4a6:	f107 0208 	add.w	r2, r7, #8
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4798      	blx	r3
 800d4ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	2207      	movs	r2, #7
 800d4b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4b8:	e00f      	b.n	800d4da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fa10 	bl	800d8e2 <USBD_CtlError>
        err++;
 800d4c2:	7afb      	ldrb	r3, [r7, #11]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	72fb      	strb	r3, [r7, #11]
      break;
 800d4c8:	e007      	b.n	800d4da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d4ca:	6839      	ldr	r1, [r7, #0]
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 fa08 	bl	800d8e2 <USBD_CtlError>
      err++;
 800d4d2:	7afb      	ldrb	r3, [r7, #11]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	72fb      	strb	r3, [r7, #11]
      break;
 800d4d8:	bf00      	nop
  }

  if (err != 0U)
 800d4da:	7afb      	ldrb	r3, [r7, #11]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d11e      	bne.n	800d51e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	88db      	ldrh	r3, [r3, #6]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d016      	beq.n	800d516 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d4e8:	893b      	ldrh	r3, [r7, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d00e      	beq.n	800d50c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	88da      	ldrh	r2, [r3, #6]
 800d4f2:	893b      	ldrh	r3, [r7, #8]
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	bf28      	it	cs
 800d4f8:	4613      	movcs	r3, r2
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4fe:	893b      	ldrh	r3, [r7, #8]
 800d500:	461a      	mov	r2, r3
 800d502:	68f9      	ldr	r1, [r7, #12]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fa5d 	bl	800d9c4 <USBD_CtlSendData>
 800d50a:	e009      	b.n	800d520 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f9e7 	bl	800d8e2 <USBD_CtlError>
 800d514:	e004      	b.n	800d520 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 faae 	bl	800da78 <USBD_CtlSendStatus>
 800d51c:	e000      	b.n	800d520 <USBD_GetDescriptor+0x320>
    return;
 800d51e:	bf00      	nop
  }
}
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop

0800d528 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	889b      	ldrh	r3, [r3, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d131      	bne.n	800d59e <USBD_SetAddress+0x76>
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	88db      	ldrh	r3, [r3, #6]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d12d      	bne.n	800d59e <USBD_SetAddress+0x76>
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	885b      	ldrh	r3, [r3, #2]
 800d546:	2b7f      	cmp	r3, #127	; 0x7f
 800d548:	d829      	bhi.n	800d59e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	885b      	ldrh	r3, [r3, #2]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d554:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d104      	bne.n	800d56c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d562:	6839      	ldr	r1, [r7, #0]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f9bc 	bl	800d8e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d56a:	e01d      	b.n	800d5a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	7bfa      	ldrb	r2, [r7, #15]
 800d570:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d574:	7bfb      	ldrb	r3, [r7, #15]
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f003 fd0b 	bl	8010f94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 fa7a 	bl	800da78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d584:	7bfb      	ldrb	r3, [r7, #15]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d004      	beq.n	800d594 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2202      	movs	r2, #2
 800d58e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d592:	e009      	b.n	800d5a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d59c:	e004      	b.n	800d5a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d59e:	6839      	ldr	r1, [r7, #0]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f99e 	bl	800d8e2 <USBD_CtlError>
  }
}
 800d5a6:	bf00      	nop
 800d5a8:	bf00      	nop
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	885b      	ldrh	r3, [r3, #2]
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	4b4e      	ldr	r3, [pc, #312]	; (800d700 <USBD_SetConfig+0x150>)
 800d5c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d5c8:	4b4d      	ldr	r3, [pc, #308]	; (800d700 <USBD_SetConfig+0x150>)
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d905      	bls.n	800d5dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d5d0:	6839      	ldr	r1, [r7, #0]
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f000 f985 	bl	800d8e2 <USBD_CtlError>
    return USBD_FAIL;
 800d5d8:	2303      	movs	r3, #3
 800d5da:	e08c      	b.n	800d6f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d002      	beq.n	800d5ee <USBD_SetConfig+0x3e>
 800d5e8:	2b03      	cmp	r3, #3
 800d5ea:	d029      	beq.n	800d640 <USBD_SetConfig+0x90>
 800d5ec:	e075      	b.n	800d6da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d5ee:	4b44      	ldr	r3, [pc, #272]	; (800d700 <USBD_SetConfig+0x150>)
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d020      	beq.n	800d638 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d5f6:	4b42      	ldr	r3, [pc, #264]	; (800d700 <USBD_SetConfig+0x150>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d600:	4b3f      	ldr	r3, [pc, #252]	; (800d700 <USBD_SetConfig+0x150>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	4619      	mov	r1, r3
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7fe ffbd 	bl	800c586 <USBD_SetClassConfig>
 800d60c:	4603      	mov	r3, r0
 800d60e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d610:	7bfb      	ldrb	r3, [r7, #15]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d008      	beq.n	800d628 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 f962 	bl	800d8e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2202      	movs	r2, #2
 800d622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d626:	e065      	b.n	800d6f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 fa25 	bl	800da78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2203      	movs	r2, #3
 800d632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d636:	e05d      	b.n	800d6f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fa1d 	bl	800da78 <USBD_CtlSendStatus>
      break;
 800d63e:	e059      	b.n	800d6f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d640:	4b2f      	ldr	r3, [pc, #188]	; (800d700 <USBD_SetConfig+0x150>)
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d112      	bne.n	800d66e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2202      	movs	r2, #2
 800d64c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d650:	4b2b      	ldr	r3, [pc, #172]	; (800d700 <USBD_SetConfig+0x150>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	461a      	mov	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d65a:	4b29      	ldr	r3, [pc, #164]	; (800d700 <USBD_SetConfig+0x150>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	4619      	mov	r1, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7fe ffac 	bl	800c5be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fa06 	bl	800da78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d66c:	e042      	b.n	800d6f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d66e:	4b24      	ldr	r3, [pc, #144]	; (800d700 <USBD_SetConfig+0x150>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d02a      	beq.n	800d6d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	b2db      	uxtb	r3, r3
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7fe ff9a 	bl	800c5be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d68a:	4b1d      	ldr	r3, [pc, #116]	; (800d700 <USBD_SetConfig+0x150>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d694:	4b1a      	ldr	r3, [pc, #104]	; (800d700 <USBD_SetConfig+0x150>)
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f7fe ff73 	bl	800c586 <USBD_SetClassConfig>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00f      	beq.n	800d6ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f918 	bl	800d8e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f7fe ff7f 	bl	800c5be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d6c8:	e014      	b.n	800d6f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f9d4 	bl	800da78 <USBD_CtlSendStatus>
      break;
 800d6d0:	e010      	b.n	800d6f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f9d0 	bl	800da78 <USBD_CtlSendStatus>
      break;
 800d6d8:	e00c      	b.n	800d6f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 f900 	bl	800d8e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6e2:	4b07      	ldr	r3, [pc, #28]	; (800d700 <USBD_SetConfig+0x150>)
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7fe ff68 	bl	800c5be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800d6f2:	bf00      	nop
  }

  return ret;
 800d6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	2000c010 	.word	0x2000c010

0800d704 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	88db      	ldrh	r3, [r3, #6]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d004      	beq.n	800d720 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d716:	6839      	ldr	r1, [r7, #0]
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f8e2 	bl	800d8e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d71e:	e023      	b.n	800d768 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b02      	cmp	r3, #2
 800d72a:	dc02      	bgt.n	800d732 <USBD_GetConfig+0x2e>
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	dc03      	bgt.n	800d738 <USBD_GetConfig+0x34>
 800d730:	e015      	b.n	800d75e <USBD_GetConfig+0x5a>
 800d732:	2b03      	cmp	r3, #3
 800d734:	d00b      	beq.n	800d74e <USBD_GetConfig+0x4a>
 800d736:	e012      	b.n	800d75e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3308      	adds	r3, #8
 800d742:	2201      	movs	r2, #1
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 f93c 	bl	800d9c4 <USBD_CtlSendData>
        break;
 800d74c:	e00c      	b.n	800d768 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	3304      	adds	r3, #4
 800d752:	2201      	movs	r2, #1
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f934 	bl	800d9c4 <USBD_CtlSendData>
        break;
 800d75c:	e004      	b.n	800d768 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d75e:	6839      	ldr	r1, [r7, #0]
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 f8be 	bl	800d8e2 <USBD_CtlError>
        break;
 800d766:	bf00      	nop
}
 800d768:	bf00      	nop
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d780:	b2db      	uxtb	r3, r3
 800d782:	3b01      	subs	r3, #1
 800d784:	2b02      	cmp	r3, #2
 800d786:	d81e      	bhi.n	800d7c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	88db      	ldrh	r3, [r3, #6]
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d004      	beq.n	800d79a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d790:	6839      	ldr	r1, [r7, #0]
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f8a5 	bl	800d8e2 <USBD_CtlError>
        break;
 800d798:	e01a      	b.n	800d7d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2201      	movs	r2, #1
 800d79e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d005      	beq.n	800d7b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	f043 0202 	orr.w	r2, r3, #2
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	330c      	adds	r3, #12
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f900 	bl	800d9c4 <USBD_CtlSendData>
      break;
 800d7c4:	e004      	b.n	800d7d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 f88a 	bl	800d8e2 <USBD_CtlError>
      break;
 800d7ce:	bf00      	nop
  }
}
 800d7d0:	bf00      	nop
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	885b      	ldrh	r3, [r3, #2]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d107      	bne.n	800d7fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f940 	bl	800da78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d7f8:	e013      	b.n	800d822 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	885b      	ldrh	r3, [r3, #2]
 800d7fe:	2b02      	cmp	r3, #2
 800d800:	d10b      	bne.n	800d81a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	889b      	ldrh	r3, [r3, #4]
 800d806:	0a1b      	lsrs	r3, r3, #8
 800d808:	b29b      	uxth	r3, r3
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f930 	bl	800da78 <USBD_CtlSendStatus>
}
 800d818:	e003      	b.n	800d822 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d81a:	6839      	ldr	r1, [r7, #0]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 f860 	bl	800d8e2 <USBD_CtlError>
}
 800d822:	bf00      	nop
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	3b01      	subs	r3, #1
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d80b      	bhi.n	800d85a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	885b      	ldrh	r3, [r3, #2]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d10c      	bne.n	800d864 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f910 	bl	800da78 <USBD_CtlSendStatus>
      }
      break;
 800d858:	e004      	b.n	800d864 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f840 	bl	800d8e2 <USBD_CtlError>
      break;
 800d862:	e000      	b.n	800d866 <USBD_ClrFeature+0x3c>
      break;
 800d864:	bf00      	nop
  }
}
 800d866:	bf00      	nop
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	781a      	ldrb	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3301      	adds	r3, #1
 800d888:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	781a      	ldrb	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	3301      	adds	r3, #1
 800d896:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f7ff fa17 	bl	800cccc <SWAPBYTE>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f7ff fa0a 	bl	800cccc <SWAPBYTE>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f7ff f9fd 	bl	800cccc <SWAPBYTE>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	80da      	strh	r2, [r3, #6]
}
 800d8da:	bf00      	nop
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8ec:	2180      	movs	r1, #128	; 0x80
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f003 fae6 	bl	8010ec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f003 fae2 	bl	8010ec0 <USBD_LL_StallEP>
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d910:	2300      	movs	r3, #0
 800d912:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d036      	beq.n	800d988 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d91e:	6938      	ldr	r0, [r7, #16]
 800d920:	f000 f836 	bl	800d990 <USBD_GetLen>
 800d924:	4603      	mov	r3, r0
 800d926:	3301      	adds	r3, #1
 800d928:	b29b      	uxth	r3, r3
 800d92a:	005b      	lsls	r3, r3, #1
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d932:	7dfb      	ldrb	r3, [r7, #23]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	4413      	add	r3, r2
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	7812      	ldrb	r2, [r2, #0]
 800d93c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d93e:	7dfb      	ldrb	r3, [r7, #23]
 800d940:	3301      	adds	r3, #1
 800d942:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d944:	7dfb      	ldrb	r3, [r7, #23]
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	4413      	add	r3, r2
 800d94a:	2203      	movs	r2, #3
 800d94c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
 800d950:	3301      	adds	r3, #1
 800d952:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d954:	e013      	b.n	800d97e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	4413      	add	r3, r2
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	7812      	ldrb	r2, [r2, #0]
 800d960:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	3301      	adds	r3, #1
 800d966:	613b      	str	r3, [r7, #16]
    idx++;
 800d968:	7dfb      	ldrb	r3, [r7, #23]
 800d96a:	3301      	adds	r3, #1
 800d96c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d96e:	7dfb      	ldrb	r3, [r7, #23]
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	4413      	add	r3, r2
 800d974:	2200      	movs	r2, #0
 800d976:	701a      	strb	r2, [r3, #0]
    idx++;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
 800d97a:	3301      	adds	r3, #1
 800d97c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e7      	bne.n	800d956 <USBD_GetString+0x52>
 800d986:	e000      	b.n	800d98a <USBD_GetString+0x86>
    return;
 800d988:	bf00      	nop
  }
}
 800d98a:	3718      	adds	r7, #24
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d998:	2300      	movs	r3, #0
 800d99a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d9a0:	e005      	b.n	800d9ae <USBD_GetLen+0x1e>
  {
    len++;
 800d9a2:	7bfb      	ldrb	r3, [r7, #15]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f5      	bne.n	800d9a2 <USBD_GetLen+0x12>
  }

  return len;
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3714      	adds	r7, #20
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2202      	movs	r2, #2
 800d9d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	68ba      	ldr	r2, [r7, #8]
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f003 faf1 	bl	8010fd2 <USBD_LL_Transmit>

  return USBD_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b084      	sub	sp, #16
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	60f8      	str	r0, [r7, #12]
 800da02:	60b9      	str	r1, [r7, #8]
 800da04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	2100      	movs	r1, #0
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f003 fae0 	bl	8010fd2 <USBD_LL_Transmit>

  return USBD_OK;
 800da12:	2300      	movs	r3, #0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2203      	movs	r2, #3
 800da2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	2100      	movs	r1, #0
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f003 fae4 	bl	8011014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b084      	sub	sp, #16
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	60f8      	str	r0, [r7, #12]
 800da5e:	60b9      	str	r1, [r7, #8]
 800da60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	2100      	movs	r1, #0
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f003 fad3 	bl	8011014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2204      	movs	r2, #4
 800da84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da88:	2300      	movs	r3, #0
 800da8a:	2200      	movs	r2, #0
 800da8c:	2100      	movs	r1, #0
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f003 fa9f 	bl	8010fd2 <USBD_LL_Transmit>

  return USBD_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b082      	sub	sp, #8
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2205      	movs	r2, #5
 800daaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daae:	2300      	movs	r3, #0
 800dab0:	2200      	movs	r2, #0
 800dab2:	2100      	movs	r1, #0
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f003 faad 	bl	8011014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dac4:	b480      	push	{r7}
 800dac6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800dac8:	bf00      	nop
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
	...

0800dad4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dada:	f3ef 8305 	mrs	r3, IPSR
 800dade:	60bb      	str	r3, [r7, #8]
  return(result);
 800dae0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10f      	bne.n	800db06 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dae6:	f3ef 8310 	mrs	r3, PRIMASK
 800daea:	607b      	str	r3, [r7, #4]
  return(result);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d105      	bne.n	800dafe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800daf2:	f3ef 8311 	mrs	r3, BASEPRI
 800daf6:	603b      	str	r3, [r7, #0]
  return(result);
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d007      	beq.n	800db0e <osKernelInitialize+0x3a>
 800dafe:	4b0e      	ldr	r3, [pc, #56]	; (800db38 <osKernelInitialize+0x64>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b02      	cmp	r3, #2
 800db04:	d103      	bne.n	800db0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800db06:	f06f 0305 	mvn.w	r3, #5
 800db0a:	60fb      	str	r3, [r7, #12]
 800db0c:	e00c      	b.n	800db28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800db0e:	4b0a      	ldr	r3, [pc, #40]	; (800db38 <osKernelInitialize+0x64>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d105      	bne.n	800db22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800db16:	4b08      	ldr	r3, [pc, #32]	; (800db38 <osKernelInitialize+0x64>)
 800db18:	2201      	movs	r2, #1
 800db1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800db1c:	2300      	movs	r3, #0
 800db1e:	60fb      	str	r3, [r7, #12]
 800db20:	e002      	b.n	800db28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800db22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800db28:	68fb      	ldr	r3, [r7, #12]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	2000c014 	.word	0x2000c014

0800db3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db42:	f3ef 8305 	mrs	r3, IPSR
 800db46:	60bb      	str	r3, [r7, #8]
  return(result);
 800db48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10f      	bne.n	800db6e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db4e:	f3ef 8310 	mrs	r3, PRIMASK
 800db52:	607b      	str	r3, [r7, #4]
  return(result);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d105      	bne.n	800db66 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db5a:	f3ef 8311 	mrs	r3, BASEPRI
 800db5e:	603b      	str	r3, [r7, #0]
  return(result);
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d007      	beq.n	800db76 <osKernelStart+0x3a>
 800db66:	4b0f      	ldr	r3, [pc, #60]	; (800dba4 <osKernelStart+0x68>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	d103      	bne.n	800db76 <osKernelStart+0x3a>
    stat = osErrorISR;
 800db6e:	f06f 0305 	mvn.w	r3, #5
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	e010      	b.n	800db98 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800db76:	4b0b      	ldr	r3, [pc, #44]	; (800dba4 <osKernelStart+0x68>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d109      	bne.n	800db92 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800db7e:	f7ff ffa1 	bl	800dac4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800db82:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <osKernelStart+0x68>)
 800db84:	2202      	movs	r2, #2
 800db86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800db88:	f001 f8b4 	bl	800ecf4 <vTaskStartScheduler>
      stat = osOK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	60fb      	str	r3, [r7, #12]
 800db90:	e002      	b.n	800db98 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800db92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800db98:	68fb      	ldr	r3, [r7, #12]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	2000c014 	.word	0x2000c014

0800dba8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b090      	sub	sp, #64	; 0x40
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbb8:	f3ef 8305 	mrs	r3, IPSR
 800dbbc:	61fb      	str	r3, [r7, #28]
  return(result);
 800dbbe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f040 808f 	bne.w	800dce4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbc6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbca:	61bb      	str	r3, [r7, #24]
  return(result);
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d105      	bne.n	800dbde <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbd2:	f3ef 8311 	mrs	r3, BASEPRI
 800dbd6:	617b      	str	r3, [r7, #20]
  return(result);
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d003      	beq.n	800dbe6 <osThreadNew+0x3e>
 800dbde:	4b44      	ldr	r3, [pc, #272]	; (800dcf0 <osThreadNew+0x148>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2b02      	cmp	r3, #2
 800dbe4:	d07e      	beq.n	800dce4 <osThreadNew+0x13c>
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d07b      	beq.n	800dce4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800dbec:	2380      	movs	r3, #128	; 0x80
 800dbee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800dbf0:	2318      	movs	r3, #24
 800dbf2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800dbf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d045      	beq.n	800dc90 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d002      	beq.n	800dc12 <osThreadNew+0x6a>
        name = attr->name;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	699b      	ldr	r3, [r3, #24]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	699b      	ldr	r3, [r3, #24]
 800dc1e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d008      	beq.n	800dc38 <osThreadNew+0x90>
 800dc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc28:	2b38      	cmp	r3, #56	; 0x38
 800dc2a:	d805      	bhi.n	800dc38 <osThreadNew+0x90>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	f003 0301 	and.w	r3, r3, #1
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <osThreadNew+0x94>
        return (NULL);
 800dc38:	2300      	movs	r3, #0
 800dc3a:	e054      	b.n	800dce6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	695b      	ldr	r3, [r3, #20]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d003      	beq.n	800dc4c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	695b      	ldr	r3, [r3, #20]
 800dc48:	089b      	lsrs	r3, r3, #2
 800dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00e      	beq.n	800dc72 <osThreadNew+0xca>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	2b5b      	cmp	r3, #91	; 0x5b
 800dc5a:	d90a      	bls.n	800dc72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d006      	beq.n	800dc72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	695b      	ldr	r3, [r3, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <osThreadNew+0xca>
        mem = 1;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	623b      	str	r3, [r7, #32]
 800dc70:	e010      	b.n	800dc94 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10c      	bne.n	800dc94 <osThreadNew+0xec>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d108      	bne.n	800dc94 <osThreadNew+0xec>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	691b      	ldr	r3, [r3, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d104      	bne.n	800dc94 <osThreadNew+0xec>
          mem = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	623b      	str	r3, [r7, #32]
 800dc8e:	e001      	b.n	800dc94 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dc94:	6a3b      	ldr	r3, [r7, #32]
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d110      	bne.n	800dcbc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dca2:	9202      	str	r2, [sp, #8]
 800dca4:	9301      	str	r3, [sp, #4]
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f000 fe3f 	bl	800e934 <xTaskCreateStatic>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	613b      	str	r3, [r7, #16]
 800dcba:	e013      	b.n	800dce4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d110      	bne.n	800dce4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	f107 0310 	add.w	r3, r7, #16
 800dcca:	9301      	str	r3, [sp, #4]
 800dccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 fe90 	bl	800e9fa <xTaskCreate>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d001      	beq.n	800dce4 <osThreadNew+0x13c>
          hTask = NULL;
 800dce0:	2300      	movs	r3, #0
 800dce2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dce4:	693b      	ldr	r3, [r7, #16]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3730      	adds	r7, #48	; 0x30
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	2000c014 	.word	0x2000c014

0800dcf4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcfc:	f3ef 8305 	mrs	r3, IPSR
 800dd00:	613b      	str	r3, [r7, #16]
  return(result);
 800dd02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10f      	bne.n	800dd28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd08:	f3ef 8310 	mrs	r3, PRIMASK
 800dd0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d105      	bne.n	800dd20 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd14:	f3ef 8311 	mrs	r3, BASEPRI
 800dd18:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d007      	beq.n	800dd30 <osDelay+0x3c>
 800dd20:	4b0a      	ldr	r3, [pc, #40]	; (800dd4c <osDelay+0x58>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d103      	bne.n	800dd30 <osDelay+0x3c>
    stat = osErrorISR;
 800dd28:	f06f 0305 	mvn.w	r3, #5
 800dd2c:	617b      	str	r3, [r7, #20]
 800dd2e:	e007      	b.n	800dd40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d002      	beq.n	800dd40 <osDelay+0x4c>
      vTaskDelay(ticks);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 ffa4 	bl	800ec88 <vTaskDelay>
    }
  }

  return (stat);
 800dd40:	697b      	ldr	r3, [r7, #20]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3718      	adds	r7, #24
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	2000c014 	.word	0x2000c014

0800dd50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	4a07      	ldr	r2, [pc, #28]	; (800dd7c <vApplicationGetIdleTaskMemory+0x2c>)
 800dd60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	4a06      	ldr	r2, [pc, #24]	; (800dd80 <vApplicationGetIdleTaskMemory+0x30>)
 800dd66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2280      	movs	r2, #128	; 0x80
 800dd6c:	601a      	str	r2, [r3, #0]
}
 800dd6e:	bf00      	nop
 800dd70:	3714      	adds	r7, #20
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
 800dd7a:	bf00      	nop
 800dd7c:	2000c018 	.word	0x2000c018
 800dd80:	2000c074 	.word	0x2000c074

0800dd84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4a07      	ldr	r2, [pc, #28]	; (800ddb0 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	4a06      	ldr	r2, [pc, #24]	; (800ddb4 <vApplicationGetTimerTaskMemory+0x30>)
 800dd9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dda2:	601a      	str	r2, [r3, #0]
}
 800dda4:	bf00      	nop
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	2000c274 	.word	0x2000c274
 800ddb4:	2000c2d0 	.word	0x2000c2d0

0800ddb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f103 0208 	add.w	r2, r3, #8
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f103 0208 	add.w	r2, r3, #8
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f103 0208 	add.w	r2, r3, #8
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de06:	bf00      	nop
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de12:	b480      	push	{r7}
 800de14:	b085      	sub	sp, #20
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	689a      	ldr	r2, [r3, #8]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	683a      	ldr	r2, [r7, #0]
 800de36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	601a      	str	r2, [r3, #0]
}
 800de4e:	bf00      	nop
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de5a:	b480      	push	{r7}
 800de5c:	b085      	sub	sp, #20
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
 800de62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de70:	d103      	bne.n	800de7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	60fb      	str	r3, [r7, #12]
 800de78:	e00c      	b.n	800de94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	3308      	adds	r3, #8
 800de7e:	60fb      	str	r3, [r7, #12]
 800de80:	e002      	b.n	800de88 <vListInsert+0x2e>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	60fb      	str	r3, [r7, #12]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	429a      	cmp	r2, r3
 800de92:	d2f6      	bcs.n	800de82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	683a      	ldr	r2, [r7, #0]
 800dea2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	1c5a      	adds	r2, r3, #1
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	601a      	str	r2, [r3, #0]
}
 800dec0:	bf00      	nop
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	6892      	ldr	r2, [r2, #8]
 800dee2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	6852      	ldr	r2, [r2, #4]
 800deec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	429a      	cmp	r2, r3
 800def6:	d103      	bne.n	800df00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	689a      	ldr	r2, [r3, #8]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	1e5a      	subs	r2, r3, #1
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10c      	bne.n	800df4e <xQueueGenericReset+0x2e>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df38:	b672      	cpsid	i
 800df3a:	f383 8811 	msr	BASEPRI, r3
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	b662      	cpsie	i
 800df48:	60bb      	str	r3, [r7, #8]
}
 800df4a:	bf00      	nop
 800df4c:	e7fe      	b.n	800df4c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800df4e:	f002 f8a5 	bl	801009c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df5a:	68f9      	ldr	r1, [r7, #12]
 800df5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df5e:	fb01 f303 	mul.w	r3, r1, r3
 800df62:	441a      	add	r2, r3
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2200      	movs	r2, #0
 800df6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df7e:	3b01      	subs	r3, #1
 800df80:	68f9      	ldr	r1, [r7, #12]
 800df82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df84:	fb01 f303 	mul.w	r3, r1, r3
 800df88:	441a      	add	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	22ff      	movs	r2, #255	; 0xff
 800df92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	22ff      	movs	r2, #255	; 0xff
 800df9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d114      	bne.n	800dfce <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01a      	beq.n	800dfe2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3310      	adds	r3, #16
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f001 f937 	bl	800f224 <xTaskRemoveFromEventList>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d012      	beq.n	800dfe2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dfbc:	4b0c      	ldr	r3, [pc, #48]	; (800dff0 <xQueueGenericReset+0xd0>)
 800dfbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	e009      	b.n	800dfe2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	3310      	adds	r3, #16
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7ff fef0 	bl	800ddb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3324      	adds	r3, #36	; 0x24
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7ff feeb 	bl	800ddb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dfe2:	f002 f88f 	bl	8010104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dfe6:	2301      	movs	r3, #1
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	e000ed04 	.word	0xe000ed04

0800dff4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08e      	sub	sp, #56	; 0x38
 800dff8:	af02      	add	r7, sp, #8
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10c      	bne.n	800e022 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00c:	b672      	cpsid	i
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	b662      	cpsie	i
 800e01c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e01e:	bf00      	nop
 800e020:	e7fe      	b.n	800e020 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10c      	bne.n	800e042 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	b672      	cpsid	i
 800e02e:	f383 8811 	msr	BASEPRI, r3
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	b662      	cpsie	i
 800e03c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e03e:	bf00      	nop
 800e040:	e7fe      	b.n	800e040 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <xQueueGenericCreateStatic+0x5a>
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <xQueueGenericCreateStatic+0x5e>
 800e04e:	2301      	movs	r3, #1
 800e050:	e000      	b.n	800e054 <xQueueGenericCreateStatic+0x60>
 800e052:	2300      	movs	r3, #0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10c      	bne.n	800e072 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05c:	b672      	cpsid	i
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	b662      	cpsie	i
 800e06c:	623b      	str	r3, [r7, #32]
}
 800e06e:	bf00      	nop
 800e070:	e7fe      	b.n	800e070 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d102      	bne.n	800e07e <xQueueGenericCreateStatic+0x8a>
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <xQueueGenericCreateStatic+0x8e>
 800e07e:	2301      	movs	r3, #1
 800e080:	e000      	b.n	800e084 <xQueueGenericCreateStatic+0x90>
 800e082:	2300      	movs	r3, #0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10c      	bne.n	800e0a2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08c:	b672      	cpsid	i
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	b662      	cpsie	i
 800e09c:	61fb      	str	r3, [r7, #28]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e0a2:	2350      	movs	r3, #80	; 0x50
 800e0a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	2b50      	cmp	r3, #80	; 0x50
 800e0aa:	d00c      	beq.n	800e0c6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	b672      	cpsid	i
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	b662      	cpsie	i
 800e0c0:	61bb      	str	r3, [r7, #24]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e0c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00d      	beq.n	800e0ee <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 f805 	bl	800e0f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3730      	adds	r7, #48	; 0x30
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d103      	bne.n	800e114 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	69ba      	ldr	r2, [r7, #24]
 800e110:	601a      	str	r2, [r3, #0]
 800e112:	e002      	b.n	800e11a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	687a      	ldr	r2, [r7, #4]
 800e118:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e126:	2101      	movs	r1, #1
 800e128:	69b8      	ldr	r0, [r7, #24]
 800e12a:	f7ff fef9 	bl	800df20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	78fa      	ldrb	r2, [r7, #3]
 800e132:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e136:	bf00      	nop
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
	...

0800e140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b08e      	sub	sp, #56	; 0x38
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
 800e14c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e14e:	2300      	movs	r3, #0
 800e150:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d10c      	bne.n	800e176 <xQueueGenericSend+0x36>
	__asm volatile
 800e15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e160:	b672      	cpsid	i
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	b662      	cpsie	i
 800e170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e172:	bf00      	nop
 800e174:	e7fe      	b.n	800e174 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d103      	bne.n	800e184 <xQueueGenericSend+0x44>
 800e17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <xQueueGenericSend+0x48>
 800e184:	2301      	movs	r3, #1
 800e186:	e000      	b.n	800e18a <xQueueGenericSend+0x4a>
 800e188:	2300      	movs	r3, #0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10c      	bne.n	800e1a8 <xQueueGenericSend+0x68>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e192:	b672      	cpsid	i
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	b662      	cpsie	i
 800e1a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1a4:	bf00      	nop
 800e1a6:	e7fe      	b.n	800e1a6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d103      	bne.n	800e1b6 <xQueueGenericSend+0x76>
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d101      	bne.n	800e1ba <xQueueGenericSend+0x7a>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e000      	b.n	800e1bc <xQueueGenericSend+0x7c>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d10c      	bne.n	800e1da <xQueueGenericSend+0x9a>
	__asm volatile
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	b672      	cpsid	i
 800e1c6:	f383 8811 	msr	BASEPRI, r3
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	b662      	cpsie	i
 800e1d4:	623b      	str	r3, [r7, #32]
}
 800e1d6:	bf00      	nop
 800e1d8:	e7fe      	b.n	800e1d8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1da:	f001 fa11 	bl	800f600 <xTaskGetSchedulerState>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <xQueueGenericSend+0xaa>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d101      	bne.n	800e1ee <xQueueGenericSend+0xae>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e000      	b.n	800e1f0 <xQueueGenericSend+0xb0>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10c      	bne.n	800e20e <xQueueGenericSend+0xce>
	__asm volatile
 800e1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f8:	b672      	cpsid	i
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	b662      	cpsie	i
 800e208:	61fb      	str	r3, [r7, #28]
}
 800e20a:	bf00      	nop
 800e20c:	e7fe      	b.n	800e20c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e20e:	f001 ff45 	bl	801009c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d302      	bcc.n	800e224 <xQueueGenericSend+0xe4>
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d129      	bne.n	800e278 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e224:	683a      	ldr	r2, [r7, #0]
 800e226:	68b9      	ldr	r1, [r7, #8]
 800e228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e22a:	f000 fa15 	bl	800e658 <prvCopyDataToQueue>
 800e22e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e234:	2b00      	cmp	r3, #0
 800e236:	d010      	beq.n	800e25a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23a:	3324      	adds	r3, #36	; 0x24
 800e23c:	4618      	mov	r0, r3
 800e23e:	f000 fff1 	bl	800f224 <xTaskRemoveFromEventList>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d013      	beq.n	800e270 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e248:	4b3f      	ldr	r3, [pc, #252]	; (800e348 <xQueueGenericSend+0x208>)
 800e24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e24e:	601a      	str	r2, [r3, #0]
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	e00a      	b.n	800e270 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d007      	beq.n	800e270 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e260:	4b39      	ldr	r3, [pc, #228]	; (800e348 <xQueueGenericSend+0x208>)
 800e262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	f3bf 8f4f 	dsb	sy
 800e26c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e270:	f001 ff48 	bl	8010104 <vPortExitCritical>
				return pdPASS;
 800e274:	2301      	movs	r3, #1
 800e276:	e063      	b.n	800e340 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d103      	bne.n	800e286 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e27e:	f001 ff41 	bl	8010104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e282:	2300      	movs	r3, #0
 800e284:	e05c      	b.n	800e340 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d106      	bne.n	800e29a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e28c:	f107 0314 	add.w	r3, r7, #20
 800e290:	4618      	mov	r0, r3
 800e292:	f001 f855 	bl	800f340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e296:	2301      	movs	r3, #1
 800e298:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e29a:	f001 ff33 	bl	8010104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e29e:	f000 fd93 	bl	800edc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2a2:	f001 fefb 	bl	801009c <vPortEnterCritical>
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2ac:	b25b      	sxtb	r3, r3
 800e2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2b2:	d103      	bne.n	800e2bc <xQueueGenericSend+0x17c>
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2c8:	d103      	bne.n	800e2d2 <xQueueGenericSend+0x192>
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2d2:	f001 ff17 	bl	8010104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2d6:	1d3a      	adds	r2, r7, #4
 800e2d8:	f107 0314 	add.w	r3, r7, #20
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f001 f844 	bl	800f36c <xTaskCheckForTimeOut>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d124      	bne.n	800e334 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e2ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2ec:	f000 faac 	bl	800e848 <prvIsQueueFull>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d018      	beq.n	800e328 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f8:	3310      	adds	r3, #16
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 ff3c 	bl	800f17c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e306:	f000 fa37 	bl	800e778 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e30a:	f000 fd6b 	bl	800ede4 <xTaskResumeAll>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	f47f af7c 	bne.w	800e20e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e316:	4b0c      	ldr	r3, [pc, #48]	; (800e348 <xQueueGenericSend+0x208>)
 800e318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	f3bf 8f6f 	isb	sy
 800e326:	e772      	b.n	800e20e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e32a:	f000 fa25 	bl	800e778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e32e:	f000 fd59 	bl	800ede4 <xTaskResumeAll>
 800e332:	e76c      	b.n	800e20e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e336:	f000 fa1f 	bl	800e778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e33a:	f000 fd53 	bl	800ede4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e33e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e340:	4618      	mov	r0, r3
 800e342:	3738      	adds	r7, #56	; 0x38
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b08e      	sub	sp, #56	; 0x38
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10c      	bne.n	800e37e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e368:	b672      	cpsid	i
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	b662      	cpsie	i
 800e378:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e37a:	bf00      	nop
 800e37c:	e7fe      	b.n	800e37c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d103      	bne.n	800e38c <xQueueGenericSendFromISR+0x40>
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <xQueueGenericSendFromISR+0x44>
 800e38c:	2301      	movs	r3, #1
 800e38e:	e000      	b.n	800e392 <xQueueGenericSendFromISR+0x46>
 800e390:	2300      	movs	r3, #0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d10c      	bne.n	800e3b0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39a:	b672      	cpsid	i
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	b662      	cpsie	i
 800e3aa:	623b      	str	r3, [r7, #32]
}
 800e3ac:	bf00      	nop
 800e3ae:	e7fe      	b.n	800e3ae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	d103      	bne.n	800e3be <xQueueGenericSendFromISR+0x72>
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d101      	bne.n	800e3c2 <xQueueGenericSendFromISR+0x76>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e000      	b.n	800e3c4 <xQueueGenericSendFromISR+0x78>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10c      	bne.n	800e3e2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3cc:	b672      	cpsid	i
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	b662      	cpsie	i
 800e3dc:	61fb      	str	r3, [r7, #28]
}
 800e3de:	bf00      	nop
 800e3e0:	e7fe      	b.n	800e3e0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3e2:	f001 ff43 	bl	801026c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e3e6:	f3ef 8211 	mrs	r2, BASEPRI
 800e3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ee:	b672      	cpsid	i
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	b662      	cpsie	i
 800e3fe:	61ba      	str	r2, [r7, #24]
 800e400:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e402:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e404:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e40e:	429a      	cmp	r2, r3
 800e410:	d302      	bcc.n	800e418 <xQueueGenericSendFromISR+0xcc>
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b02      	cmp	r3, #2
 800e416:	d12c      	bne.n	800e472 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e422:	683a      	ldr	r2, [r7, #0]
 800e424:	68b9      	ldr	r1, [r7, #8]
 800e426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e428:	f000 f916 	bl	800e658 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e42c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e434:	d112      	bne.n	800e45c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d016      	beq.n	800e46c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	3324      	adds	r3, #36	; 0x24
 800e442:	4618      	mov	r0, r3
 800e444:	f000 feee 	bl	800f224 <xTaskRemoveFromEventList>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00e      	beq.n	800e46c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00b      	beq.n	800e46c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2201      	movs	r2, #1
 800e458:	601a      	str	r2, [r3, #0]
 800e45a:	e007      	b.n	800e46c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e45c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e460:	3301      	adds	r3, #1
 800e462:	b2db      	uxtb	r3, r3
 800e464:	b25a      	sxtb	r2, r3
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e46c:	2301      	movs	r3, #1
 800e46e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e470:	e001      	b.n	800e476 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e472:	2300      	movs	r3, #0
 800e474:	637b      	str	r3, [r7, #52]	; 0x34
 800e476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e478:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e480:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e484:	4618      	mov	r0, r3
 800e486:	3738      	adds	r7, #56	; 0x38
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08c      	sub	sp, #48	; 0x30
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e498:	2300      	movs	r3, #0
 800e49a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10c      	bne.n	800e4c0 <xQueueReceive+0x34>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4aa:	b672      	cpsid	i
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	b662      	cpsie	i
 800e4ba:	623b      	str	r3, [r7, #32]
}
 800e4bc:	bf00      	nop
 800e4be:	e7fe      	b.n	800e4be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d103      	bne.n	800e4ce <xQueueReceive+0x42>
 800e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d101      	bne.n	800e4d2 <xQueueReceive+0x46>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e000      	b.n	800e4d4 <xQueueReceive+0x48>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10c      	bne.n	800e4f2 <xQueueReceive+0x66>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4dc:	b672      	cpsid	i
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	b662      	cpsie	i
 800e4ec:	61fb      	str	r3, [r7, #28]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4f2:	f001 f885 	bl	800f600 <xTaskGetSchedulerState>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <xQueueReceive+0x76>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <xQueueReceive+0x7a>
 800e502:	2301      	movs	r3, #1
 800e504:	e000      	b.n	800e508 <xQueueReceive+0x7c>
 800e506:	2300      	movs	r3, #0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10c      	bne.n	800e526 <xQueueReceive+0x9a>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	b672      	cpsid	i
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	b662      	cpsie	i
 800e520:	61bb      	str	r3, [r7, #24]
}
 800e522:	bf00      	nop
 800e524:	e7fe      	b.n	800e524 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e526:	f001 fdb9 	bl	801009c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e532:	2b00      	cmp	r3, #0
 800e534:	d01f      	beq.n	800e576 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e536:	68b9      	ldr	r1, [r7, #8]
 800e538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e53a:	f000 f8f7 	bl	800e72c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	1e5a      	subs	r2, r3, #1
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00f      	beq.n	800e56e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	3310      	adds	r3, #16
 800e552:	4618      	mov	r0, r3
 800e554:	f000 fe66 	bl	800f224 <xTaskRemoveFromEventList>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d007      	beq.n	800e56e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e55e:	4b3d      	ldr	r3, [pc, #244]	; (800e654 <xQueueReceive+0x1c8>)
 800e560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e56e:	f001 fdc9 	bl	8010104 <vPortExitCritical>
				return pdPASS;
 800e572:	2301      	movs	r3, #1
 800e574:	e069      	b.n	800e64a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d103      	bne.n	800e584 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e57c:	f001 fdc2 	bl	8010104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e580:	2300      	movs	r3, #0
 800e582:	e062      	b.n	800e64a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e58a:	f107 0310 	add.w	r3, r7, #16
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 fed6 	bl	800f340 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e594:	2301      	movs	r3, #1
 800e596:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e598:	f001 fdb4 	bl	8010104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e59c:	f000 fc14 	bl	800edc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5a0:	f001 fd7c 	bl	801009c <vPortEnterCritical>
 800e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5aa:	b25b      	sxtb	r3, r3
 800e5ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5b0:	d103      	bne.n	800e5ba <xQueueReceive+0x12e>
 800e5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5c0:	b25b      	sxtb	r3, r3
 800e5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5c6:	d103      	bne.n	800e5d0 <xQueueReceive+0x144>
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5d0:	f001 fd98 	bl	8010104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5d4:	1d3a      	adds	r2, r7, #4
 800e5d6:	f107 0310 	add.w	r3, r7, #16
 800e5da:	4611      	mov	r1, r2
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f000 fec5 	bl	800f36c <xTaskCheckForTimeOut>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d123      	bne.n	800e630 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ea:	f000 f917 	bl	800e81c <prvIsQueueEmpty>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d017      	beq.n	800e624 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f6:	3324      	adds	r3, #36	; 0x24
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	4611      	mov	r1, r2
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f000 fdbd 	bl	800f17c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e604:	f000 f8b8 	bl	800e778 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e608:	f000 fbec 	bl	800ede4 <xTaskResumeAll>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d189      	bne.n	800e526 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e612:	4b10      	ldr	r3, [pc, #64]	; (800e654 <xQueueReceive+0x1c8>)
 800e614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	f3bf 8f4f 	dsb	sy
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	e780      	b.n	800e526 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e626:	f000 f8a7 	bl	800e778 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e62a:	f000 fbdb 	bl	800ede4 <xTaskResumeAll>
 800e62e:	e77a      	b.n	800e526 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e632:	f000 f8a1 	bl	800e778 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e636:	f000 fbd5 	bl	800ede4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e63a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e63c:	f000 f8ee 	bl	800e81c <prvIsQueueEmpty>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	f43f af6f 	beq.w	800e526 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3730      	adds	r7, #48	; 0x30
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	e000ed04 	.word	0xe000ed04

0800e658 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e664:	2300      	movs	r3, #0
 800e666:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10d      	bne.n	800e692 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d14d      	bne.n	800e71a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	4618      	mov	r0, r3
 800e684:	f000 ffda 	bl	800f63c <xTaskPriorityDisinherit>
 800e688:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	609a      	str	r2, [r3, #8]
 800e690:	e043      	b.n	800e71a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d119      	bne.n	800e6cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6858      	ldr	r0, [r3, #4]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	68b9      	ldr	r1, [r7, #8]
 800e6a4:	f012 fb07 	bl	8020cb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b0:	441a      	add	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d32b      	bcc.n	800e71a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	605a      	str	r2, [r3, #4]
 800e6ca:	e026      	b.n	800e71a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	68d8      	ldr	r0, [r3, #12]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	68b9      	ldr	r1, [r7, #8]
 800e6d8:	f012 faed 	bl	8020cb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	68da      	ldr	r2, [r3, #12]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e4:	425b      	negs	r3, r3
 800e6e6:	441a      	add	r2, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	68da      	ldr	r2, [r3, #12]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d207      	bcs.n	800e708 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	689a      	ldr	r2, [r3, #8]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e700:	425b      	negs	r3, r3
 800e702:	441a      	add	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d105      	bne.n	800e71a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	3b01      	subs	r3, #1
 800e718:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	1c5a      	adds	r2, r3, #1
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e722:	697b      	ldr	r3, [r7, #20]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3718      	adds	r7, #24
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d018      	beq.n	800e770 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	68da      	ldr	r2, [r3, #12]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e746:	441a      	add	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	68da      	ldr	r2, [r3, #12]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	689b      	ldr	r3, [r3, #8]
 800e754:	429a      	cmp	r2, r3
 800e756:	d303      	bcc.n	800e760 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68d9      	ldr	r1, [r3, #12]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e768:	461a      	mov	r2, r3
 800e76a:	6838      	ldr	r0, [r7, #0]
 800e76c:	f012 faa3 	bl	8020cb6 <memcpy>
	}
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e780:	f001 fc8c 	bl	801009c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e78a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e78c:	e011      	b.n	800e7b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e792:	2b00      	cmp	r3, #0
 800e794:	d012      	beq.n	800e7bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	3324      	adds	r3, #36	; 0x24
 800e79a:	4618      	mov	r0, r3
 800e79c:	f000 fd42 	bl	800f224 <xTaskRemoveFromEventList>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d001      	beq.n	800e7aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e7a6:	f000 fe47 	bl	800f438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	dce9      	bgt.n	800e78e <prvUnlockQueue+0x16>
 800e7ba:	e000      	b.n	800e7be <prvUnlockQueue+0x46>
					break;
 800e7bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	22ff      	movs	r2, #255	; 0xff
 800e7c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e7c6:	f001 fc9d 	bl	8010104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e7ca:	f001 fc67 	bl	801009c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7d6:	e011      	b.n	800e7fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	691b      	ldr	r3, [r3, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d012      	beq.n	800e806 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	3310      	adds	r3, #16
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 fd1d 	bl	800f224 <xTaskRemoveFromEventList>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d001      	beq.n	800e7f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e7f0:	f000 fe22 	bl	800f438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e7f4:	7bbb      	ldrb	r3, [r7, #14]
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e800:	2b00      	cmp	r3, #0
 800e802:	dce9      	bgt.n	800e7d8 <prvUnlockQueue+0x60>
 800e804:	e000      	b.n	800e808 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e806:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	22ff      	movs	r2, #255	; 0xff
 800e80c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e810:	f001 fc78 	bl	8010104 <vPortExitCritical>
}
 800e814:	bf00      	nop
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e824:	f001 fc3a 	bl	801009c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e830:	2301      	movs	r3, #1
 800e832:	60fb      	str	r3, [r7, #12]
 800e834:	e001      	b.n	800e83a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e836:	2300      	movs	r3, #0
 800e838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e83a:	f001 fc63 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800e83e:	68fb      	ldr	r3, [r7, #12]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e850:	f001 fc24 	bl	801009c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d102      	bne.n	800e866 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e860:	2301      	movs	r3, #1
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	e001      	b.n	800e86a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e866:	2300      	movs	r3, #0
 800e868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e86a:	f001 fc4b 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800e86e:	68fb      	ldr	r3, [r7, #12]
}
 800e870:	4618      	mov	r0, r3
 800e872:	3710      	adds	r7, #16
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e878:	b480      	push	{r7}
 800e87a:	b085      	sub	sp, #20
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e882:	2300      	movs	r3, #0
 800e884:	60fb      	str	r3, [r7, #12]
 800e886:	e014      	b.n	800e8b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e888:	4a0f      	ldr	r2, [pc, #60]	; (800e8c8 <vQueueAddToRegistry+0x50>)
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10b      	bne.n	800e8ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e894:	490c      	ldr	r1, [pc, #48]	; (800e8c8 <vQueueAddToRegistry+0x50>)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e89e:	4a0a      	ldr	r2, [pc, #40]	; (800e8c8 <vQueueAddToRegistry+0x50>)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	4413      	add	r3, r2
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e8aa:	e006      	b.n	800e8ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	60fb      	str	r3, [r7, #12]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b07      	cmp	r3, #7
 800e8b6:	d9e7      	bls.n	800e888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e8b8:	bf00      	nop
 800e8ba:	bf00      	nop
 800e8bc:	3714      	adds	r7, #20
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	2000c6d0 	.word	0x2000c6d0

0800e8cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e8dc:	f001 fbde 	bl	801009c <vPortEnterCritical>
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8e6:	b25b      	sxtb	r3, r3
 800e8e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8ec:	d103      	bne.n	800e8f6 <vQueueWaitForMessageRestricted+0x2a>
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8fc:	b25b      	sxtb	r3, r3
 800e8fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e902:	d103      	bne.n	800e90c <vQueueWaitForMessageRestricted+0x40>
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e90c:	f001 fbfa 	bl	8010104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e914:	2b00      	cmp	r3, #0
 800e916:	d106      	bne.n	800e926 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	3324      	adds	r3, #36	; 0x24
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	68b9      	ldr	r1, [r7, #8]
 800e920:	4618      	mov	r0, r3
 800e922:	f000 fc51 	bl	800f1c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e926:	6978      	ldr	r0, [r7, #20]
 800e928:	f7ff ff26 	bl	800e778 <prvUnlockQueue>
	}
 800e92c:	bf00      	nop
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08e      	sub	sp, #56	; 0x38
 800e938:	af04      	add	r7, sp, #16
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
 800e940:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10c      	bne.n	800e962 <xTaskCreateStatic+0x2e>
	__asm volatile
 800e948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94c:	b672      	cpsid	i
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	b662      	cpsie	i
 800e95c:	623b      	str	r3, [r7, #32]
}
 800e95e:	bf00      	nop
 800e960:	e7fe      	b.n	800e960 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10c      	bne.n	800e982 <xTaskCreateStatic+0x4e>
	__asm volatile
 800e968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96c:	b672      	cpsid	i
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	b662      	cpsie	i
 800e97c:	61fb      	str	r3, [r7, #28]
}
 800e97e:	bf00      	nop
 800e980:	e7fe      	b.n	800e980 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e982:	235c      	movs	r3, #92	; 0x5c
 800e984:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	2b5c      	cmp	r3, #92	; 0x5c
 800e98a:	d00c      	beq.n	800e9a6 <xTaskCreateStatic+0x72>
	__asm volatile
 800e98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e990:	b672      	cpsid	i
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	b662      	cpsie	i
 800e9a0:	61bb      	str	r3, [r7, #24]
}
 800e9a2:	bf00      	nop
 800e9a4:	e7fe      	b.n	800e9a4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e9a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d01e      	beq.n	800e9ec <xTaskCreateStatic+0xb8>
 800e9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d01b      	beq.n	800e9ec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	9303      	str	r3, [sp, #12]
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	9302      	str	r3, [sp, #8]
 800e9ce:	f107 0314 	add.w	r3, r7, #20
 800e9d2:	9301      	str	r3, [sp, #4]
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	68b9      	ldr	r1, [r7, #8]
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f000 f850 	bl	800ea84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e9e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9e6:	f000 f8df 	bl	800eba8 <prvAddNewTaskToReadyList>
 800e9ea:	e001      	b.n	800e9f0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e9f0:	697b      	ldr	r3, [r7, #20]
	}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3728      	adds	r7, #40	; 0x28
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b08c      	sub	sp, #48	; 0x30
 800e9fe:	af04      	add	r7, sp, #16
 800ea00:	60f8      	str	r0, [r7, #12]
 800ea02:	60b9      	str	r1, [r7, #8]
 800ea04:	603b      	str	r3, [r7, #0]
 800ea06:	4613      	mov	r3, r2
 800ea08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ea0a:	88fb      	ldrh	r3, [r7, #6]
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f001 fc70 	bl	80102f4 <pvPortMalloc>
 800ea14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00e      	beq.n	800ea3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ea1c:	205c      	movs	r0, #92	; 0x5c
 800ea1e:	f001 fc69 	bl	80102f4 <pvPortMalloc>
 800ea22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	697a      	ldr	r2, [r7, #20]
 800ea2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ea30:	e005      	b.n	800ea3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ea32:	6978      	ldr	r0, [r7, #20]
 800ea34:	f001 fd28 	bl	8010488 <vPortFree>
 800ea38:	e001      	b.n	800ea3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d017      	beq.n	800ea74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ea4c:	88fa      	ldrh	r2, [r7, #6]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9303      	str	r3, [sp, #12]
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	9302      	str	r3, [sp, #8]
 800ea56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68b9      	ldr	r1, [r7, #8]
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f000 f80e 	bl	800ea84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea68:	69f8      	ldr	r0, [r7, #28]
 800ea6a:	f000 f89d 	bl	800eba8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	61bb      	str	r3, [r7, #24]
 800ea72:	e002      	b.n	800ea7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ea74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ea7a:	69bb      	ldr	r3, [r7, #24]
	}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3720      	adds	r7, #32
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
 800ea90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	21a5      	movs	r1, #165	; 0xa5
 800ea9e:	f012 f83d 	bl	8020b1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaa6:	6879      	ldr	r1, [r7, #4]
 800eaa8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800eaac:	440b      	add	r3, r1
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4413      	add	r3, r2
 800eab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	f023 0307 	bic.w	r3, r3, #7
 800eaba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	f003 0307 	and.w	r3, r3, #7
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00c      	beq.n	800eae0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaca:	b672      	cpsid	i
 800eacc:	f383 8811 	msr	BASEPRI, r3
 800ead0:	f3bf 8f6f 	isb	sy
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	b662      	cpsie	i
 800eada:	617b      	str	r3, [r7, #20]
}
 800eadc:	bf00      	nop
 800eade:	e7fe      	b.n	800eade <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d01f      	beq.n	800eb26 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eae6:	2300      	movs	r3, #0
 800eae8:	61fb      	str	r3, [r7, #28]
 800eaea:	e012      	b.n	800eb12 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	7819      	ldrb	r1, [r3, #0]
 800eaf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	4413      	add	r3, r2
 800eafa:	3334      	adds	r3, #52	; 0x34
 800eafc:	460a      	mov	r2, r1
 800eafe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	4413      	add	r3, r2
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d006      	beq.n	800eb1a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	61fb      	str	r3, [r7, #28]
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	2b0f      	cmp	r3, #15
 800eb16:	d9e9      	bls.n	800eaec <prvInitialiseNewTask+0x68>
 800eb18:	e000      	b.n	800eb1c <prvInitialiseNewTask+0x98>
			{
				break;
 800eb1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eb24:	e003      	b.n	800eb2e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb30:	2b37      	cmp	r3, #55	; 0x37
 800eb32:	d901      	bls.n	800eb38 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eb34:	2337      	movs	r3, #55	; 0x37
 800eb36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	2200      	movs	r2, #0
 800eb48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7ff f952 	bl	800ddf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb56:	3318      	adds	r3, #24
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7ff f94d 	bl	800ddf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	2200      	movs	r2, #0
 800eb78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb82:	683a      	ldr	r2, [r7, #0]
 800eb84:	68f9      	ldr	r1, [r7, #12]
 800eb86:	69b8      	ldr	r0, [r7, #24]
 800eb88:	f001 f97a 	bl	800fe80 <pxPortInitialiseStack>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d002      	beq.n	800eb9e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb9e:	bf00      	nop
 800eba0:	3720      	adds	r7, #32
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
	...

0800eba8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ebb0:	f001 fa74 	bl	801009c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ebb4:	4b2d      	ldr	r3, [pc, #180]	; (800ec6c <prvAddNewTaskToReadyList+0xc4>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	4a2c      	ldr	r2, [pc, #176]	; (800ec6c <prvAddNewTaskToReadyList+0xc4>)
 800ebbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ebbe:	4b2c      	ldr	r3, [pc, #176]	; (800ec70 <prvAddNewTaskToReadyList+0xc8>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d109      	bne.n	800ebda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ebc6:	4a2a      	ldr	r2, [pc, #168]	; (800ec70 <prvAddNewTaskToReadyList+0xc8>)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ebcc:	4b27      	ldr	r3, [pc, #156]	; (800ec6c <prvAddNewTaskToReadyList+0xc4>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d110      	bne.n	800ebf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ebd4:	f000 fc54 	bl	800f480 <prvInitialiseTaskLists>
 800ebd8:	e00d      	b.n	800ebf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ebda:	4b26      	ldr	r3, [pc, #152]	; (800ec74 <prvAddNewTaskToReadyList+0xcc>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d109      	bne.n	800ebf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ebe2:	4b23      	ldr	r3, [pc, #140]	; (800ec70 <prvAddNewTaskToReadyList+0xc8>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d802      	bhi.n	800ebf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ebf0:	4a1f      	ldr	r2, [pc, #124]	; (800ec70 <prvAddNewTaskToReadyList+0xc8>)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ebf6:	4b20      	ldr	r3, [pc, #128]	; (800ec78 <prvAddNewTaskToReadyList+0xd0>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	4a1e      	ldr	r2, [pc, #120]	; (800ec78 <prvAddNewTaskToReadyList+0xd0>)
 800ebfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ec00:	4b1d      	ldr	r3, [pc, #116]	; (800ec78 <prvAddNewTaskToReadyList+0xd0>)
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec0c:	4b1b      	ldr	r3, [pc, #108]	; (800ec7c <prvAddNewTaskToReadyList+0xd4>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d903      	bls.n	800ec1c <prvAddNewTaskToReadyList+0x74>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec18:	4a18      	ldr	r2, [pc, #96]	; (800ec7c <prvAddNewTaskToReadyList+0xd4>)
 800ec1a:	6013      	str	r3, [r2, #0]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec20:	4613      	mov	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4413      	add	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4a15      	ldr	r2, [pc, #84]	; (800ec80 <prvAddNewTaskToReadyList+0xd8>)
 800ec2a:	441a      	add	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3304      	adds	r3, #4
 800ec30:	4619      	mov	r1, r3
 800ec32:	4610      	mov	r0, r2
 800ec34:	f7ff f8ed 	bl	800de12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec38:	f001 fa64 	bl	8010104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec3c:	4b0d      	ldr	r3, [pc, #52]	; (800ec74 <prvAddNewTaskToReadyList+0xcc>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00e      	beq.n	800ec62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec44:	4b0a      	ldr	r3, [pc, #40]	; (800ec70 <prvAddNewTaskToReadyList+0xc8>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d207      	bcs.n	800ec62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ec52:	4b0c      	ldr	r3, [pc, #48]	; (800ec84 <prvAddNewTaskToReadyList+0xdc>)
 800ec54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec62:	bf00      	nop
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	2000cbe4 	.word	0x2000cbe4
 800ec70:	2000c710 	.word	0x2000c710
 800ec74:	2000cbf0 	.word	0x2000cbf0
 800ec78:	2000cc00 	.word	0x2000cc00
 800ec7c:	2000cbec 	.word	0x2000cbec
 800ec80:	2000c714 	.word	0x2000c714
 800ec84:	e000ed04 	.word	0xe000ed04

0800ec88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ec90:	2300      	movs	r3, #0
 800ec92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d019      	beq.n	800ecce <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ec9a:	4b14      	ldr	r3, [pc, #80]	; (800ecec <vTaskDelay+0x64>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d00c      	beq.n	800ecbc <vTaskDelay+0x34>
	__asm volatile
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	b672      	cpsid	i
 800eca8:	f383 8811 	msr	BASEPRI, r3
 800ecac:	f3bf 8f6f 	isb	sy
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	b662      	cpsie	i
 800ecb6:	60bb      	str	r3, [r7, #8]
}
 800ecb8:	bf00      	nop
 800ecba:	e7fe      	b.n	800ecba <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ecbc:	f000 f884 	bl	800edc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 fd2c 	bl	800f720 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ecc8:	f000 f88c 	bl	800ede4 <xTaskResumeAll>
 800eccc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d107      	bne.n	800ece4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ecd4:	4b06      	ldr	r3, [pc, #24]	; (800ecf0 <vTaskDelay+0x68>)
 800ecd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ece4:	bf00      	nop
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	2000cc0c 	.word	0x2000cc0c
 800ecf0:	e000ed04 	.word	0xe000ed04

0800ecf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b08a      	sub	sp, #40	; 0x28
 800ecf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed02:	463a      	mov	r2, r7
 800ed04:	1d39      	adds	r1, r7, #4
 800ed06:	f107 0308 	add.w	r3, r7, #8
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7ff f820 	bl	800dd50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed10:	6839      	ldr	r1, [r7, #0]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	9202      	str	r2, [sp, #8]
 800ed18:	9301      	str	r3, [sp, #4]
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	9300      	str	r3, [sp, #0]
 800ed1e:	2300      	movs	r3, #0
 800ed20:	460a      	mov	r2, r1
 800ed22:	4923      	ldr	r1, [pc, #140]	; (800edb0 <vTaskStartScheduler+0xbc>)
 800ed24:	4823      	ldr	r0, [pc, #140]	; (800edb4 <vTaskStartScheduler+0xc0>)
 800ed26:	f7ff fe05 	bl	800e934 <xTaskCreateStatic>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	4a22      	ldr	r2, [pc, #136]	; (800edb8 <vTaskStartScheduler+0xc4>)
 800ed2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed30:	4b21      	ldr	r3, [pc, #132]	; (800edb8 <vTaskStartScheduler+0xc4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	617b      	str	r3, [r7, #20]
 800ed3c:	e001      	b.n	800ed42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d102      	bne.n	800ed4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed48:	f000 fd3e 	bl	800f7c8 <xTimerCreateTimerTask>
 800ed4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d118      	bne.n	800ed86 <vTaskStartScheduler+0x92>
	__asm volatile
 800ed54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed58:	b672      	cpsid	i
 800ed5a:	f383 8811 	msr	BASEPRI, r3
 800ed5e:	f3bf 8f6f 	isb	sy
 800ed62:	f3bf 8f4f 	dsb	sy
 800ed66:	b662      	cpsie	i
 800ed68:	613b      	str	r3, [r7, #16]
}
 800ed6a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed6c:	4b13      	ldr	r3, [pc, #76]	; (800edbc <vTaskStartScheduler+0xc8>)
 800ed6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed74:	4b12      	ldr	r3, [pc, #72]	; (800edc0 <vTaskStartScheduler+0xcc>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed7a:	4b12      	ldr	r3, [pc, #72]	; (800edc4 <vTaskStartScheduler+0xd0>)
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed80:	f001 f90e 	bl	800ffa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed84:	e010      	b.n	800eda8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed8c:	d10c      	bne.n	800eda8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800ed8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed92:	b672      	cpsid	i
 800ed94:	f383 8811 	msr	BASEPRI, r3
 800ed98:	f3bf 8f6f 	isb	sy
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	b662      	cpsie	i
 800eda2:	60fb      	str	r3, [r7, #12]
}
 800eda4:	bf00      	nop
 800eda6:	e7fe      	b.n	800eda6 <vTaskStartScheduler+0xb2>
}
 800eda8:	bf00      	nop
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	08024234 	.word	0x08024234
 800edb4:	0800f451 	.word	0x0800f451
 800edb8:	2000cc08 	.word	0x2000cc08
 800edbc:	2000cc04 	.word	0x2000cc04
 800edc0:	2000cbf0 	.word	0x2000cbf0
 800edc4:	2000cbe8 	.word	0x2000cbe8

0800edc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800edc8:	b480      	push	{r7}
 800edca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800edcc:	4b04      	ldr	r3, [pc, #16]	; (800ede0 <vTaskSuspendAll+0x18>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3301      	adds	r3, #1
 800edd2:	4a03      	ldr	r2, [pc, #12]	; (800ede0 <vTaskSuspendAll+0x18>)
 800edd4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800edd6:	bf00      	nop
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	2000cc0c 	.word	0x2000cc0c

0800ede4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edf2:	4b43      	ldr	r3, [pc, #268]	; (800ef00 <xTaskResumeAll+0x11c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d10c      	bne.n	800ee14 <xTaskResumeAll+0x30>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	b672      	cpsid	i
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	b662      	cpsie	i
 800ee0e:	603b      	str	r3, [r7, #0]
}
 800ee10:	bf00      	nop
 800ee12:	e7fe      	b.n	800ee12 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee14:	f001 f942 	bl	801009c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee18:	4b39      	ldr	r3, [pc, #228]	; (800ef00 <xTaskResumeAll+0x11c>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	4a38      	ldr	r2, [pc, #224]	; (800ef00 <xTaskResumeAll+0x11c>)
 800ee20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee22:	4b37      	ldr	r3, [pc, #220]	; (800ef00 <xTaskResumeAll+0x11c>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d162      	bne.n	800eef0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee2a:	4b36      	ldr	r3, [pc, #216]	; (800ef04 <xTaskResumeAll+0x120>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d05e      	beq.n	800eef0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee32:	e02f      	b.n	800ee94 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee34:	4b34      	ldr	r3, [pc, #208]	; (800ef08 <xTaskResumeAll+0x124>)
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3318      	adds	r3, #24
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff f843 	bl	800decc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	3304      	adds	r3, #4
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7ff f83e 	bl	800decc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee54:	4b2d      	ldr	r3, [pc, #180]	; (800ef0c <xTaskResumeAll+0x128>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d903      	bls.n	800ee64 <xTaskResumeAll+0x80>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee60:	4a2a      	ldr	r2, [pc, #168]	; (800ef0c <xTaskResumeAll+0x128>)
 800ee62:	6013      	str	r3, [r2, #0]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee68:	4613      	mov	r3, r2
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	4413      	add	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4a27      	ldr	r2, [pc, #156]	; (800ef10 <xTaskResumeAll+0x12c>)
 800ee72:	441a      	add	r2, r3
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	3304      	adds	r3, #4
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f7fe ffc9 	bl	800de12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee84:	4b23      	ldr	r3, [pc, #140]	; (800ef14 <xTaskResumeAll+0x130>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d302      	bcc.n	800ee94 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ee8e:	4b22      	ldr	r3, [pc, #136]	; (800ef18 <xTaskResumeAll+0x134>)
 800ee90:	2201      	movs	r2, #1
 800ee92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee94:	4b1c      	ldr	r3, [pc, #112]	; (800ef08 <xTaskResumeAll+0x124>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1cb      	bne.n	800ee34 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eea2:	f000 fb8d 	bl	800f5c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800eea6:	4b1d      	ldr	r3, [pc, #116]	; (800ef1c <xTaskResumeAll+0x138>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d010      	beq.n	800eed4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eeb2:	f000 f847 	bl	800ef44 <xTaskIncrementTick>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800eebc:	4b16      	ldr	r3, [pc, #88]	; (800ef18 <xTaskResumeAll+0x134>)
 800eebe:	2201      	movs	r2, #1
 800eec0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d1f1      	bne.n	800eeb2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800eece:	4b13      	ldr	r3, [pc, #76]	; (800ef1c <xTaskResumeAll+0x138>)
 800eed0:	2200      	movs	r2, #0
 800eed2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eed4:	4b10      	ldr	r3, [pc, #64]	; (800ef18 <xTaskResumeAll+0x134>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d009      	beq.n	800eef0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eedc:	2301      	movs	r3, #1
 800eede:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eee0:	4b0f      	ldr	r3, [pc, #60]	; (800ef20 <xTaskResumeAll+0x13c>)
 800eee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee6:	601a      	str	r2, [r3, #0]
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eef0:	f001 f908 	bl	8010104 <vPortExitCritical>

	return xAlreadyYielded;
 800eef4:	68bb      	ldr	r3, [r7, #8]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	2000cc0c 	.word	0x2000cc0c
 800ef04:	2000cbe4 	.word	0x2000cbe4
 800ef08:	2000cba4 	.word	0x2000cba4
 800ef0c:	2000cbec 	.word	0x2000cbec
 800ef10:	2000c714 	.word	0x2000c714
 800ef14:	2000c710 	.word	0x2000c710
 800ef18:	2000cbf8 	.word	0x2000cbf8
 800ef1c:	2000cbf4 	.word	0x2000cbf4
 800ef20:	e000ed04 	.word	0xe000ed04

0800ef24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef2a:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <xTaskGetTickCount+0x1c>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef30:	687b      	ldr	r3, [r7, #4]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	2000cbe8 	.word	0x2000cbe8

0800ef44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b086      	sub	sp, #24
 800ef48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef4e:	4b50      	ldr	r3, [pc, #320]	; (800f090 <xTaskIncrementTick+0x14c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f040 808b 	bne.w	800f06e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef58:	4b4e      	ldr	r3, [pc, #312]	; (800f094 <xTaskIncrementTick+0x150>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef60:	4a4c      	ldr	r2, [pc, #304]	; (800f094 <xTaskIncrementTick+0x150>)
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d122      	bne.n	800efb2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef6c:	4b4a      	ldr	r3, [pc, #296]	; (800f098 <xTaskIncrementTick+0x154>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00c      	beq.n	800ef90 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ef76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7a:	b672      	cpsid	i
 800ef7c:	f383 8811 	msr	BASEPRI, r3
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	b662      	cpsie	i
 800ef8a:	603b      	str	r3, [r7, #0]
}
 800ef8c:	bf00      	nop
 800ef8e:	e7fe      	b.n	800ef8e <xTaskIncrementTick+0x4a>
 800ef90:	4b41      	ldr	r3, [pc, #260]	; (800f098 <xTaskIncrementTick+0x154>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	60fb      	str	r3, [r7, #12]
 800ef96:	4b41      	ldr	r3, [pc, #260]	; (800f09c <xTaskIncrementTick+0x158>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a3f      	ldr	r2, [pc, #252]	; (800f098 <xTaskIncrementTick+0x154>)
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	4a3f      	ldr	r2, [pc, #252]	; (800f09c <xTaskIncrementTick+0x158>)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6013      	str	r3, [r2, #0]
 800efa4:	4b3e      	ldr	r3, [pc, #248]	; (800f0a0 <xTaskIncrementTick+0x15c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	3301      	adds	r3, #1
 800efaa:	4a3d      	ldr	r2, [pc, #244]	; (800f0a0 <xTaskIncrementTick+0x15c>)
 800efac:	6013      	str	r3, [r2, #0]
 800efae:	f000 fb07 	bl	800f5c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800efb2:	4b3c      	ldr	r3, [pc, #240]	; (800f0a4 <xTaskIncrementTick+0x160>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	693a      	ldr	r2, [r7, #16]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d349      	bcc.n	800f050 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efbc:	4b36      	ldr	r3, [pc, #216]	; (800f098 <xTaskIncrementTick+0x154>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d104      	bne.n	800efd0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efc6:	4b37      	ldr	r3, [pc, #220]	; (800f0a4 <xTaskIncrementTick+0x160>)
 800efc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efcc:	601a      	str	r2, [r3, #0]
					break;
 800efce:	e03f      	b.n	800f050 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efd0:	4b31      	ldr	r3, [pc, #196]	; (800f098 <xTaskIncrementTick+0x154>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800efe0:	693a      	ldr	r2, [r7, #16]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d203      	bcs.n	800eff0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800efe8:	4a2e      	ldr	r2, [pc, #184]	; (800f0a4 <xTaskIncrementTick+0x160>)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800efee:	e02f      	b.n	800f050 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	3304      	adds	r3, #4
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fe ff69 	bl	800decc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effe:	2b00      	cmp	r3, #0
 800f000:	d004      	beq.n	800f00c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	3318      	adds	r3, #24
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe ff60 	bl	800decc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f010:	4b25      	ldr	r3, [pc, #148]	; (800f0a8 <xTaskIncrementTick+0x164>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	429a      	cmp	r2, r3
 800f016:	d903      	bls.n	800f020 <xTaskIncrementTick+0xdc>
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f01c:	4a22      	ldr	r2, [pc, #136]	; (800f0a8 <xTaskIncrementTick+0x164>)
 800f01e:	6013      	str	r3, [r2, #0]
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f024:	4613      	mov	r3, r2
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	4413      	add	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4a1f      	ldr	r2, [pc, #124]	; (800f0ac <xTaskIncrementTick+0x168>)
 800f02e:	441a      	add	r2, r3
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	3304      	adds	r3, #4
 800f034:	4619      	mov	r1, r3
 800f036:	4610      	mov	r0, r2
 800f038:	f7fe feeb 	bl	800de12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f040:	4b1b      	ldr	r3, [pc, #108]	; (800f0b0 <xTaskIncrementTick+0x16c>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f046:	429a      	cmp	r2, r3
 800f048:	d3b8      	bcc.n	800efbc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f04a:	2301      	movs	r3, #1
 800f04c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f04e:	e7b5      	b.n	800efbc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f050:	4b17      	ldr	r3, [pc, #92]	; (800f0b0 <xTaskIncrementTick+0x16c>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f056:	4915      	ldr	r1, [pc, #84]	; (800f0ac <xTaskIncrementTick+0x168>)
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	440b      	add	r3, r1
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d907      	bls.n	800f078 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f068:	2301      	movs	r3, #1
 800f06a:	617b      	str	r3, [r7, #20]
 800f06c:	e004      	b.n	800f078 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f06e:	4b11      	ldr	r3, [pc, #68]	; (800f0b4 <xTaskIncrementTick+0x170>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	3301      	adds	r3, #1
 800f074:	4a0f      	ldr	r2, [pc, #60]	; (800f0b4 <xTaskIncrementTick+0x170>)
 800f076:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f078:	4b0f      	ldr	r3, [pc, #60]	; (800f0b8 <xTaskIncrementTick+0x174>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d001      	beq.n	800f084 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f084:	697b      	ldr	r3, [r7, #20]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	2000cc0c 	.word	0x2000cc0c
 800f094:	2000cbe8 	.word	0x2000cbe8
 800f098:	2000cb9c 	.word	0x2000cb9c
 800f09c:	2000cba0 	.word	0x2000cba0
 800f0a0:	2000cbfc 	.word	0x2000cbfc
 800f0a4:	2000cc04 	.word	0x2000cc04
 800f0a8:	2000cbec 	.word	0x2000cbec
 800f0ac:	2000c714 	.word	0x2000c714
 800f0b0:	2000c710 	.word	0x2000c710
 800f0b4:	2000cbf4 	.word	0x2000cbf4
 800f0b8:	2000cbf8 	.word	0x2000cbf8

0800f0bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f0c2:	4b29      	ldr	r3, [pc, #164]	; (800f168 <vTaskSwitchContext+0xac>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d003      	beq.n	800f0d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f0ca:	4b28      	ldr	r3, [pc, #160]	; (800f16c <vTaskSwitchContext+0xb0>)
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f0d0:	e043      	b.n	800f15a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800f0d2:	4b26      	ldr	r3, [pc, #152]	; (800f16c <vTaskSwitchContext+0xb0>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0d8:	4b25      	ldr	r3, [pc, #148]	; (800f170 <vTaskSwitchContext+0xb4>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	60fb      	str	r3, [r7, #12]
 800f0de:	e012      	b.n	800f106 <vTaskSwitchContext+0x4a>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10c      	bne.n	800f100 <vTaskSwitchContext+0x44>
	__asm volatile
 800f0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ea:	b672      	cpsid	i
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	b662      	cpsie	i
 800f0fa:	607b      	str	r3, [r7, #4]
}
 800f0fc:	bf00      	nop
 800f0fe:	e7fe      	b.n	800f0fe <vTaskSwitchContext+0x42>
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	3b01      	subs	r3, #1
 800f104:	60fb      	str	r3, [r7, #12]
 800f106:	491b      	ldr	r1, [pc, #108]	; (800f174 <vTaskSwitchContext+0xb8>)
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	4613      	mov	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4413      	add	r3, r2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	440b      	add	r3, r1
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d0e2      	beq.n	800f0e0 <vTaskSwitchContext+0x24>
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	4613      	mov	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	4a13      	ldr	r2, [pc, #76]	; (800f174 <vTaskSwitchContext+0xb8>)
 800f126:	4413      	add	r3, r2
 800f128:	60bb      	str	r3, [r7, #8]
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	685a      	ldr	r2, [r3, #4]
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	605a      	str	r2, [r3, #4]
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	685a      	ldr	r2, [r3, #4]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	3308      	adds	r3, #8
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d104      	bne.n	800f14a <vTaskSwitchContext+0x8e>
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	685a      	ldr	r2, [r3, #4]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	605a      	str	r2, [r3, #4]
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	4a09      	ldr	r2, [pc, #36]	; (800f178 <vTaskSwitchContext+0xbc>)
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	4a06      	ldr	r2, [pc, #24]	; (800f170 <vTaskSwitchContext+0xb4>)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6013      	str	r3, [r2, #0]
}
 800f15a:	bf00      	nop
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	2000cc0c 	.word	0x2000cc0c
 800f16c:	2000cbf8 	.word	0x2000cbf8
 800f170:	2000cbec 	.word	0x2000cbec
 800f174:	2000c714 	.word	0x2000c714
 800f178:	2000c710 	.word	0x2000c710

0800f17c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10c      	bne.n	800f1a6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f190:	b672      	cpsid	i
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	b662      	cpsie	i
 800f1a0:	60fb      	str	r3, [r7, #12]
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1a6:	4b07      	ldr	r3, [pc, #28]	; (800f1c4 <vTaskPlaceOnEventList+0x48>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3318      	adds	r3, #24
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7fe fe53 	bl	800de5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f1b4:	2101      	movs	r1, #1
 800f1b6:	6838      	ldr	r0, [r7, #0]
 800f1b8:	f000 fab2 	bl	800f720 <prvAddCurrentTaskToDelayedList>
}
 800f1bc:	bf00      	nop
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	2000c710 	.word	0x2000c710

0800f1c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10c      	bne.n	800f1f4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1de:	b672      	cpsid	i
 800f1e0:	f383 8811 	msr	BASEPRI, r3
 800f1e4:	f3bf 8f6f 	isb	sy
 800f1e8:	f3bf 8f4f 	dsb	sy
 800f1ec:	b662      	cpsie	i
 800f1ee:	617b      	str	r3, [r7, #20]
}
 800f1f0:	bf00      	nop
 800f1f2:	e7fe      	b.n	800f1f2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1f4:	4b0a      	ldr	r3, [pc, #40]	; (800f220 <vTaskPlaceOnEventListRestricted+0x58>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3318      	adds	r3, #24
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f7fe fe08 	bl	800de12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f20c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f20e:	6879      	ldr	r1, [r7, #4]
 800f210:	68b8      	ldr	r0, [r7, #8]
 800f212:	f000 fa85 	bl	800f720 <prvAddCurrentTaskToDelayedList>
	}
 800f216:	bf00      	nop
 800f218:	3718      	adds	r7, #24
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	2000c710 	.word	0x2000c710

0800f224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d10c      	bne.n	800f254 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23e:	b672      	cpsid	i
 800f240:	f383 8811 	msr	BASEPRI, r3
 800f244:	f3bf 8f6f 	isb	sy
 800f248:	f3bf 8f4f 	dsb	sy
 800f24c:	b662      	cpsie	i
 800f24e:	60fb      	str	r3, [r7, #12]
}
 800f250:	bf00      	nop
 800f252:	e7fe      	b.n	800f252 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	3318      	adds	r3, #24
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fe fe37 	bl	800decc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f25e:	4b1e      	ldr	r3, [pc, #120]	; (800f2d8 <xTaskRemoveFromEventList+0xb4>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d11d      	bne.n	800f2a2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	3304      	adds	r3, #4
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fe fe2e 	bl	800decc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f274:	4b19      	ldr	r3, [pc, #100]	; (800f2dc <xTaskRemoveFromEventList+0xb8>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d903      	bls.n	800f284 <xTaskRemoveFromEventList+0x60>
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f280:	4a16      	ldr	r2, [pc, #88]	; (800f2dc <xTaskRemoveFromEventList+0xb8>)
 800f282:	6013      	str	r3, [r2, #0]
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f288:	4613      	mov	r3, r2
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	4413      	add	r3, r2
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	4a13      	ldr	r2, [pc, #76]	; (800f2e0 <xTaskRemoveFromEventList+0xbc>)
 800f292:	441a      	add	r2, r3
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	3304      	adds	r3, #4
 800f298:	4619      	mov	r1, r3
 800f29a:	4610      	mov	r0, r2
 800f29c:	f7fe fdb9 	bl	800de12 <vListInsertEnd>
 800f2a0:	e005      	b.n	800f2ae <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	3318      	adds	r3, #24
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	480e      	ldr	r0, [pc, #56]	; (800f2e4 <xTaskRemoveFromEventList+0xc0>)
 800f2aa:	f7fe fdb2 	bl	800de12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b2:	4b0d      	ldr	r3, [pc, #52]	; (800f2e8 <xTaskRemoveFromEventList+0xc4>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d905      	bls.n	800f2c8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f2c0:	4b0a      	ldr	r3, [pc, #40]	; (800f2ec <xTaskRemoveFromEventList+0xc8>)
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	601a      	str	r2, [r3, #0]
 800f2c6:	e001      	b.n	800f2cc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f2cc:	697b      	ldr	r3, [r7, #20]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	2000cc0c 	.word	0x2000cc0c
 800f2dc:	2000cbec 	.word	0x2000cbec
 800f2e0:	2000c714 	.word	0x2000c714
 800f2e4:	2000cba4 	.word	0x2000cba4
 800f2e8:	2000c710 	.word	0x2000c710
 800f2ec:	2000cbf8 	.word	0x2000cbf8

0800f2f0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10c      	bne.n	800f318 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	b672      	cpsid	i
 800f304:	f383 8811 	msr	BASEPRI, r3
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	b662      	cpsie	i
 800f312:	60fb      	str	r3, [r7, #12]
}
 800f314:	bf00      	nop
 800f316:	e7fe      	b.n	800f316 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800f318:	f000 fec0 	bl	801009c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f31c:	4b06      	ldr	r3, [pc, #24]	; (800f338 <vTaskSetTimeOutState+0x48>)
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f324:	4b05      	ldr	r3, [pc, #20]	; (800f33c <vTaskSetTimeOutState+0x4c>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f32c:	f000 feea 	bl	8010104 <vPortExitCritical>
}
 800f330:	bf00      	nop
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	2000cbfc 	.word	0x2000cbfc
 800f33c:	2000cbe8 	.word	0x2000cbe8

0800f340 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f340:	b480      	push	{r7}
 800f342:	b083      	sub	sp, #12
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f348:	4b06      	ldr	r3, [pc, #24]	; (800f364 <vTaskInternalSetTimeOutState+0x24>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f350:	4b05      	ldr	r3, [pc, #20]	; (800f368 <vTaskInternalSetTimeOutState+0x28>)
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	605a      	str	r2, [r3, #4]
}
 800f358:	bf00      	nop
 800f35a:	370c      	adds	r7, #12
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr
 800f364:	2000cbfc 	.word	0x2000cbfc
 800f368:	2000cbe8 	.word	0x2000cbe8

0800f36c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d10c      	bne.n	800f396 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f380:	b672      	cpsid	i
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	b662      	cpsie	i
 800f390:	613b      	str	r3, [r7, #16]
}
 800f392:	bf00      	nop
 800f394:	e7fe      	b.n	800f394 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d10c      	bne.n	800f3b6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a0:	b672      	cpsid	i
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	b662      	cpsie	i
 800f3b0:	60fb      	str	r3, [r7, #12]
}
 800f3b2:	bf00      	nop
 800f3b4:	e7fe      	b.n	800f3b4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f3b6:	f000 fe71 	bl	801009c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f3ba:	4b1d      	ldr	r3, [pc, #116]	; (800f430 <xTaskCheckForTimeOut+0xc4>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	69ba      	ldr	r2, [r7, #24]
 800f3c6:	1ad3      	subs	r3, r2, r3
 800f3c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3d2:	d102      	bne.n	800f3da <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	61fb      	str	r3, [r7, #28]
 800f3d8:	e023      	b.n	800f422 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	4b15      	ldr	r3, [pc, #84]	; (800f434 <xTaskCheckForTimeOut+0xc8>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d007      	beq.n	800f3f6 <xTaskCheckForTimeOut+0x8a>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	69ba      	ldr	r2, [r7, #24]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d302      	bcc.n	800f3f6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	61fb      	str	r3, [r7, #28]
 800f3f4:	e015      	b.n	800f422 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d20b      	bcs.n	800f418 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	1ad2      	subs	r2, r2, r3
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff ff97 	bl	800f340 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f412:	2300      	movs	r3, #0
 800f414:	61fb      	str	r3, [r7, #28]
 800f416:	e004      	b.n	800f422 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2200      	movs	r2, #0
 800f41c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f41e:	2301      	movs	r3, #1
 800f420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f422:	f000 fe6f 	bl	8010104 <vPortExitCritical>

	return xReturn;
 800f426:	69fb      	ldr	r3, [r7, #28]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3720      	adds	r7, #32
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	2000cbe8 	.word	0x2000cbe8
 800f434:	2000cbfc 	.word	0x2000cbfc

0800f438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f438:	b480      	push	{r7}
 800f43a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f43c:	4b03      	ldr	r3, [pc, #12]	; (800f44c <vTaskMissedYield+0x14>)
 800f43e:	2201      	movs	r2, #1
 800f440:	601a      	str	r2, [r3, #0]
}
 800f442:	bf00      	nop
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	2000cbf8 	.word	0x2000cbf8

0800f450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f458:	f000 f852 	bl	800f500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f45c:	4b06      	ldr	r3, [pc, #24]	; (800f478 <prvIdleTask+0x28>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d9f9      	bls.n	800f458 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f464:	4b05      	ldr	r3, [pc, #20]	; (800f47c <prvIdleTask+0x2c>)
 800f466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f46a:	601a      	str	r2, [r3, #0]
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f474:	e7f0      	b.n	800f458 <prvIdleTask+0x8>
 800f476:	bf00      	nop
 800f478:	2000c714 	.word	0x2000c714
 800f47c:	e000ed04 	.word	0xe000ed04

0800f480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f486:	2300      	movs	r3, #0
 800f488:	607b      	str	r3, [r7, #4]
 800f48a:	e00c      	b.n	800f4a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	4613      	mov	r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	4413      	add	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4a12      	ldr	r2, [pc, #72]	; (800f4e0 <prvInitialiseTaskLists+0x60>)
 800f498:	4413      	add	r3, r2
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fe fc8c 	bl	800ddb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	607b      	str	r3, [r7, #4]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b37      	cmp	r3, #55	; 0x37
 800f4aa:	d9ef      	bls.n	800f48c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f4ac:	480d      	ldr	r0, [pc, #52]	; (800f4e4 <prvInitialiseTaskLists+0x64>)
 800f4ae:	f7fe fc83 	bl	800ddb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f4b2:	480d      	ldr	r0, [pc, #52]	; (800f4e8 <prvInitialiseTaskLists+0x68>)
 800f4b4:	f7fe fc80 	bl	800ddb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f4b8:	480c      	ldr	r0, [pc, #48]	; (800f4ec <prvInitialiseTaskLists+0x6c>)
 800f4ba:	f7fe fc7d 	bl	800ddb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f4be:	480c      	ldr	r0, [pc, #48]	; (800f4f0 <prvInitialiseTaskLists+0x70>)
 800f4c0:	f7fe fc7a 	bl	800ddb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f4c4:	480b      	ldr	r0, [pc, #44]	; (800f4f4 <prvInitialiseTaskLists+0x74>)
 800f4c6:	f7fe fc77 	bl	800ddb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f4ca:	4b0b      	ldr	r3, [pc, #44]	; (800f4f8 <prvInitialiseTaskLists+0x78>)
 800f4cc:	4a05      	ldr	r2, [pc, #20]	; (800f4e4 <prvInitialiseTaskLists+0x64>)
 800f4ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f4d0:	4b0a      	ldr	r3, [pc, #40]	; (800f4fc <prvInitialiseTaskLists+0x7c>)
 800f4d2:	4a05      	ldr	r2, [pc, #20]	; (800f4e8 <prvInitialiseTaskLists+0x68>)
 800f4d4:	601a      	str	r2, [r3, #0]
}
 800f4d6:	bf00      	nop
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	2000c714 	.word	0x2000c714
 800f4e4:	2000cb74 	.word	0x2000cb74
 800f4e8:	2000cb88 	.word	0x2000cb88
 800f4ec:	2000cba4 	.word	0x2000cba4
 800f4f0:	2000cbb8 	.word	0x2000cbb8
 800f4f4:	2000cbd0 	.word	0x2000cbd0
 800f4f8:	2000cb9c 	.word	0x2000cb9c
 800f4fc:	2000cba0 	.word	0x2000cba0

0800f500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f506:	e019      	b.n	800f53c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f508:	f000 fdc8 	bl	801009c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f50c:	4b10      	ldr	r3, [pc, #64]	; (800f550 <prvCheckTasksWaitingTermination+0x50>)
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	3304      	adds	r3, #4
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fe fcd7 	bl	800decc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f51e:	4b0d      	ldr	r3, [pc, #52]	; (800f554 <prvCheckTasksWaitingTermination+0x54>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3b01      	subs	r3, #1
 800f524:	4a0b      	ldr	r2, [pc, #44]	; (800f554 <prvCheckTasksWaitingTermination+0x54>)
 800f526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f528:	4b0b      	ldr	r3, [pc, #44]	; (800f558 <prvCheckTasksWaitingTermination+0x58>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3b01      	subs	r3, #1
 800f52e:	4a0a      	ldr	r2, [pc, #40]	; (800f558 <prvCheckTasksWaitingTermination+0x58>)
 800f530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f532:	f000 fde7 	bl	8010104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f810 	bl	800f55c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f53c:	4b06      	ldr	r3, [pc, #24]	; (800f558 <prvCheckTasksWaitingTermination+0x58>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1e1      	bne.n	800f508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f544:	bf00      	nop
 800f546:	bf00      	nop
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	2000cbb8 	.word	0x2000cbb8
 800f554:	2000cbe4 	.word	0x2000cbe4
 800f558:	2000cbcc 	.word	0x2000cbcc

0800f55c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d108      	bne.n	800f580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f572:	4618      	mov	r0, r3
 800f574:	f000 ff88 	bl	8010488 <vPortFree>
				vPortFree( pxTCB );
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 ff85 	bl	8010488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f57e:	e01a      	b.n	800f5b6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f586:	2b01      	cmp	r3, #1
 800f588:	d103      	bne.n	800f592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 ff7c 	bl	8010488 <vPortFree>
	}
 800f590:	e011      	b.n	800f5b6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f598:	2b02      	cmp	r3, #2
 800f59a:	d00c      	beq.n	800f5b6 <prvDeleteTCB+0x5a>
	__asm volatile
 800f59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a0:	b672      	cpsid	i
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	b662      	cpsie	i
 800f5b0:	60fb      	str	r3, [r7, #12]
}
 800f5b2:	bf00      	nop
 800f5b4:	e7fe      	b.n	800f5b4 <prvDeleteTCB+0x58>
	}
 800f5b6:	bf00      	nop
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
	...

0800f5c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5c6:	4b0c      	ldr	r3, [pc, #48]	; (800f5f8 <prvResetNextTaskUnblockTime+0x38>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d104      	bne.n	800f5da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f5d0:	4b0a      	ldr	r3, [pc, #40]	; (800f5fc <prvResetNextTaskUnblockTime+0x3c>)
 800f5d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f5d8:	e008      	b.n	800f5ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5da:	4b07      	ldr	r3, [pc, #28]	; (800f5f8 <prvResetNextTaskUnblockTime+0x38>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	4a04      	ldr	r2, [pc, #16]	; (800f5fc <prvResetNextTaskUnblockTime+0x3c>)
 800f5ea:	6013      	str	r3, [r2, #0]
}
 800f5ec:	bf00      	nop
 800f5ee:	370c      	adds	r7, #12
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr
 800f5f8:	2000cb9c 	.word	0x2000cb9c
 800f5fc:	2000cc04 	.word	0x2000cc04

0800f600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f606:	4b0b      	ldr	r3, [pc, #44]	; (800f634 <xTaskGetSchedulerState+0x34>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d102      	bne.n	800f614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f60e:	2301      	movs	r3, #1
 800f610:	607b      	str	r3, [r7, #4]
 800f612:	e008      	b.n	800f626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f614:	4b08      	ldr	r3, [pc, #32]	; (800f638 <xTaskGetSchedulerState+0x38>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d102      	bne.n	800f622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f61c:	2302      	movs	r3, #2
 800f61e:	607b      	str	r3, [r7, #4]
 800f620:	e001      	b.n	800f626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f622:	2300      	movs	r3, #0
 800f624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f626:	687b      	ldr	r3, [r7, #4]
	}
 800f628:	4618      	mov	r0, r3
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	2000cbf0 	.word	0x2000cbf0
 800f638:	2000cc0c 	.word	0x2000cc0c

0800f63c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f648:	2300      	movs	r3, #0
 800f64a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d05a      	beq.n	800f708 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f652:	4b30      	ldr	r3, [pc, #192]	; (800f714 <xTaskPriorityDisinherit+0xd8>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	693a      	ldr	r2, [r7, #16]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d00c      	beq.n	800f676 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800f65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f660:	b672      	cpsid	i
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	b662      	cpsie	i
 800f670:	60fb      	str	r3, [r7, #12]
}
 800f672:	bf00      	nop
 800f674:	e7fe      	b.n	800f674 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d10c      	bne.n	800f698 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800f67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f682:	b672      	cpsid	i
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	b662      	cpsie	i
 800f692:	60bb      	str	r3, [r7, #8]
}
 800f694:	bf00      	nop
 800f696:	e7fe      	b.n	800f696 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f69c:	1e5a      	subs	r2, r3, #1
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d02c      	beq.n	800f708 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d128      	bne.n	800f708 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	3304      	adds	r3, #4
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fe fc06 	bl	800decc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d8:	4b0f      	ldr	r3, [pc, #60]	; (800f718 <xTaskPriorityDisinherit+0xdc>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d903      	bls.n	800f6e8 <xTaskPriorityDisinherit+0xac>
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e4:	4a0c      	ldr	r2, [pc, #48]	; (800f718 <xTaskPriorityDisinherit+0xdc>)
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	4413      	add	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	4a09      	ldr	r2, [pc, #36]	; (800f71c <xTaskPriorityDisinherit+0xe0>)
 800f6f6:	441a      	add	r2, r3
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4610      	mov	r0, r2
 800f700:	f7fe fb87 	bl	800de12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f704:	2301      	movs	r3, #1
 800f706:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f708:	697b      	ldr	r3, [r7, #20]
	}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3718      	adds	r7, #24
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	2000c710 	.word	0x2000c710
 800f718:	2000cbec 	.word	0x2000cbec
 800f71c:	2000c714 	.word	0x2000c714

0800f720 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f72a:	4b21      	ldr	r3, [pc, #132]	; (800f7b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f730:	4b20      	ldr	r3, [pc, #128]	; (800f7b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	3304      	adds	r3, #4
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe fbc8 	bl	800decc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f742:	d10a      	bne.n	800f75a <prvAddCurrentTaskToDelayedList+0x3a>
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d007      	beq.n	800f75a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f74a:	4b1a      	ldr	r3, [pc, #104]	; (800f7b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3304      	adds	r3, #4
 800f750:	4619      	mov	r1, r3
 800f752:	4819      	ldr	r0, [pc, #100]	; (800f7b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f754:	f7fe fb5d 	bl	800de12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f758:	e026      	b.n	800f7a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4413      	add	r3, r2
 800f760:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f762:	4b14      	ldr	r3, [pc, #80]	; (800f7b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	68ba      	ldr	r2, [r7, #8]
 800f768:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d209      	bcs.n	800f786 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f772:	4b12      	ldr	r3, [pc, #72]	; (800f7bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800f774:	681a      	ldr	r2, [r3, #0]
 800f776:	4b0f      	ldr	r3, [pc, #60]	; (800f7b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	3304      	adds	r3, #4
 800f77c:	4619      	mov	r1, r3
 800f77e:	4610      	mov	r0, r2
 800f780:	f7fe fb6b 	bl	800de5a <vListInsert>
}
 800f784:	e010      	b.n	800f7a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f786:	4b0e      	ldr	r3, [pc, #56]	; (800f7c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	4b0a      	ldr	r3, [pc, #40]	; (800f7b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	3304      	adds	r3, #4
 800f790:	4619      	mov	r1, r3
 800f792:	4610      	mov	r0, r2
 800f794:	f7fe fb61 	bl	800de5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f798:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	68ba      	ldr	r2, [r7, #8]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d202      	bcs.n	800f7a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f7a2:	4a08      	ldr	r2, [pc, #32]	; (800f7c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	6013      	str	r3, [r2, #0]
}
 800f7a8:	bf00      	nop
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	2000cbe8 	.word	0x2000cbe8
 800f7b4:	2000c710 	.word	0x2000c710
 800f7b8:	2000cbd0 	.word	0x2000cbd0
 800f7bc:	2000cba0 	.word	0x2000cba0
 800f7c0:	2000cb9c 	.word	0x2000cb9c
 800f7c4:	2000cc04 	.word	0x2000cc04

0800f7c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08a      	sub	sp, #40	; 0x28
 800f7cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f7d2:	f000 fb15 	bl	800fe00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f7d6:	4b1d      	ldr	r3, [pc, #116]	; (800f84c <xTimerCreateTimerTask+0x84>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d021      	beq.n	800f822 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f7e6:	1d3a      	adds	r2, r7, #4
 800f7e8:	f107 0108 	add.w	r1, r7, #8
 800f7ec:	f107 030c 	add.w	r3, r7, #12
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fe fac7 	bl	800dd84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f7f6:	6879      	ldr	r1, [r7, #4]
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	9202      	str	r2, [sp, #8]
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	2302      	movs	r3, #2
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	2300      	movs	r3, #0
 800f806:	460a      	mov	r2, r1
 800f808:	4911      	ldr	r1, [pc, #68]	; (800f850 <xTimerCreateTimerTask+0x88>)
 800f80a:	4812      	ldr	r0, [pc, #72]	; (800f854 <xTimerCreateTimerTask+0x8c>)
 800f80c:	f7ff f892 	bl	800e934 <xTaskCreateStatic>
 800f810:	4603      	mov	r3, r0
 800f812:	4a11      	ldr	r2, [pc, #68]	; (800f858 <xTimerCreateTimerTask+0x90>)
 800f814:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f816:	4b10      	ldr	r3, [pc, #64]	; (800f858 <xTimerCreateTimerTask+0x90>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f81e:	2301      	movs	r3, #1
 800f820:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d10c      	bne.n	800f842 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800f828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82c:	b672      	cpsid	i
 800f82e:	f383 8811 	msr	BASEPRI, r3
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	b662      	cpsie	i
 800f83c:	613b      	str	r3, [r7, #16]
}
 800f83e:	bf00      	nop
 800f840:	e7fe      	b.n	800f840 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800f842:	697b      	ldr	r3, [r7, #20]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	2000cc40 	.word	0x2000cc40
 800f850:	0802423c 	.word	0x0802423c
 800f854:	0800f999 	.word	0x0800f999
 800f858:	2000cc44 	.word	0x2000cc44

0800f85c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08a      	sub	sp, #40	; 0x28
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f86a:	2300      	movs	r3, #0
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10c      	bne.n	800f88e <xTimerGenericCommand+0x32>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f878:	b672      	cpsid	i
 800f87a:	f383 8811 	msr	BASEPRI, r3
 800f87e:	f3bf 8f6f 	isb	sy
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	b662      	cpsie	i
 800f888:	623b      	str	r3, [r7, #32]
}
 800f88a:	bf00      	nop
 800f88c:	e7fe      	b.n	800f88c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f88e:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <xTimerGenericCommand+0x9c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d02a      	beq.n	800f8ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	2b05      	cmp	r3, #5
 800f8a6:	dc18      	bgt.n	800f8da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f8a8:	f7ff feaa 	bl	800f600 <xTaskGetSchedulerState>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d109      	bne.n	800f8c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f8b2:	4b11      	ldr	r3, [pc, #68]	; (800f8f8 <xTimerGenericCommand+0x9c>)
 800f8b4:	6818      	ldr	r0, [r3, #0]
 800f8b6:	f107 0110 	add.w	r1, r7, #16
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8be:	f7fe fc3f 	bl	800e140 <xQueueGenericSend>
 800f8c2:	6278      	str	r0, [r7, #36]	; 0x24
 800f8c4:	e012      	b.n	800f8ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f8c6:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <xTimerGenericCommand+0x9c>)
 800f8c8:	6818      	ldr	r0, [r3, #0]
 800f8ca:	f107 0110 	add.w	r1, r7, #16
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f7fe fc35 	bl	800e140 <xQueueGenericSend>
 800f8d6:	6278      	str	r0, [r7, #36]	; 0x24
 800f8d8:	e008      	b.n	800f8ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f8da:	4b07      	ldr	r3, [pc, #28]	; (800f8f8 <xTimerGenericCommand+0x9c>)
 800f8dc:	6818      	ldr	r0, [r3, #0]
 800f8de:	f107 0110 	add.w	r1, r7, #16
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	683a      	ldr	r2, [r7, #0]
 800f8e6:	f7fe fd31 	bl	800e34c <xQueueGenericSendFromISR>
 800f8ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3728      	adds	r7, #40	; 0x28
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	2000cc40 	.word	0x2000cc40

0800f8fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b088      	sub	sp, #32
 800f900:	af02      	add	r7, sp, #8
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f906:	4b23      	ldr	r3, [pc, #140]	; (800f994 <prvProcessExpiredTimer+0x98>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	3304      	adds	r3, #4
 800f914:	4618      	mov	r0, r3
 800f916:	f7fe fad9 	bl	800decc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f920:	f003 0304 	and.w	r3, r3, #4
 800f924:	2b00      	cmp	r3, #0
 800f926:	d024      	beq.n	800f972 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	699a      	ldr	r2, [r3, #24]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	18d1      	adds	r1, r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	683a      	ldr	r2, [r7, #0]
 800f934:	6978      	ldr	r0, [r7, #20]
 800f936:	f000 f8d3 	bl	800fae0 <prvInsertTimerInActiveList>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d021      	beq.n	800f984 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f940:	2300      	movs	r3, #0
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	2300      	movs	r3, #0
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	2100      	movs	r1, #0
 800f94a:	6978      	ldr	r0, [r7, #20]
 800f94c:	f7ff ff86 	bl	800f85c <xTimerGenericCommand>
 800f950:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d115      	bne.n	800f984 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800f958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95c:	b672      	cpsid	i
 800f95e:	f383 8811 	msr	BASEPRI, r3
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	f3bf 8f4f 	dsb	sy
 800f96a:	b662      	cpsie	i
 800f96c:	60fb      	str	r3, [r7, #12]
}
 800f96e:	bf00      	nop
 800f970:	e7fe      	b.n	800f970 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f978:	f023 0301 	bic.w	r3, r3, #1
 800f97c:	b2da      	uxtb	r2, r3
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	6a1b      	ldr	r3, [r3, #32]
 800f988:	6978      	ldr	r0, [r7, #20]
 800f98a:	4798      	blx	r3
}
 800f98c:	bf00      	nop
 800f98e:	3718      	adds	r7, #24
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	2000cc38 	.word	0x2000cc38

0800f998 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9a0:	f107 0308 	add.w	r3, r7, #8
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f000 f857 	bl	800fa58 <prvGetNextExpireTime>
 800f9aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f000 f803 	bl	800f9bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f9b6:	f000 f8d5 	bl	800fb64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f9ba:	e7f1      	b.n	800f9a0 <prvTimerTask+0x8>

0800f9bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f9c6:	f7ff f9ff 	bl	800edc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9ca:	f107 0308 	add.w	r3, r7, #8
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f000 f866 	bl	800faa0 <prvSampleTimeNow>
 800f9d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d130      	bne.n	800fa3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10a      	bne.n	800f9f8 <prvProcessTimerOrBlockTask+0x3c>
 800f9e2:	687a      	ldr	r2, [r7, #4]
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d806      	bhi.n	800f9f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f9ea:	f7ff f9fb 	bl	800ede4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f9ee:	68f9      	ldr	r1, [r7, #12]
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7ff ff83 	bl	800f8fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f9f6:	e024      	b.n	800fa42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d008      	beq.n	800fa10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f9fe:	4b13      	ldr	r3, [pc, #76]	; (800fa4c <prvProcessTimerOrBlockTask+0x90>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d101      	bne.n	800fa0c <prvProcessTimerOrBlockTask+0x50>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e000      	b.n	800fa0e <prvProcessTimerOrBlockTask+0x52>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fa10:	4b0f      	ldr	r3, [pc, #60]	; (800fa50 <prvProcessTimerOrBlockTask+0x94>)
 800fa12:	6818      	ldr	r0, [r3, #0]
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	683a      	ldr	r2, [r7, #0]
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	f7fe ff55 	bl	800e8cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa22:	f7ff f9df 	bl	800ede4 <xTaskResumeAll>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10a      	bne.n	800fa42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fa2c:	4b09      	ldr	r3, [pc, #36]	; (800fa54 <prvProcessTimerOrBlockTask+0x98>)
 800fa2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	f3bf 8f4f 	dsb	sy
 800fa38:	f3bf 8f6f 	isb	sy
}
 800fa3c:	e001      	b.n	800fa42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fa3e:	f7ff f9d1 	bl	800ede4 <xTaskResumeAll>
}
 800fa42:	bf00      	nop
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	2000cc3c 	.word	0x2000cc3c
 800fa50:	2000cc40 	.word	0x2000cc40
 800fa54:	e000ed04 	.word	0xe000ed04

0800fa58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa60:	4b0e      	ldr	r3, [pc, #56]	; (800fa9c <prvGetNextExpireTime+0x44>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d101      	bne.n	800fa6e <prvGetNextExpireTime+0x16>
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	e000      	b.n	800fa70 <prvGetNextExpireTime+0x18>
 800fa6e:	2200      	movs	r2, #0
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d105      	bne.n	800fa88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa7c:	4b07      	ldr	r3, [pc, #28]	; (800fa9c <prvGetNextExpireTime+0x44>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	60fb      	str	r3, [r7, #12]
 800fa86:	e001      	b.n	800fa8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fa88:	2300      	movs	r3, #0
 800fa8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	2000cc38 	.word	0x2000cc38

0800faa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800faa8:	f7ff fa3c 	bl	800ef24 <xTaskGetTickCount>
 800faac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800faae:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <prvSampleTimeNow+0x3c>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d205      	bcs.n	800fac4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fab8:	f000 f93c 	bl	800fd34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2201      	movs	r2, #1
 800fac0:	601a      	str	r2, [r3, #0]
 800fac2:	e002      	b.n	800faca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800faca:	4a04      	ldr	r2, [pc, #16]	; (800fadc <prvSampleTimeNow+0x3c>)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fad0:	68fb      	ldr	r3, [r7, #12]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	2000cc48 	.word	0x2000cc48

0800fae0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
 800faec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800faee:	2300      	movs	r3, #0
 800faf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	68ba      	ldr	r2, [r7, #8]
 800faf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fafe:	68ba      	ldr	r2, [r7, #8]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d812      	bhi.n	800fb2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	1ad2      	subs	r2, r2, r3
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	699b      	ldr	r3, [r3, #24]
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d302      	bcc.n	800fb1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fb14:	2301      	movs	r3, #1
 800fb16:	617b      	str	r3, [r7, #20]
 800fb18:	e01b      	b.n	800fb52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fb1a:	4b10      	ldr	r3, [pc, #64]	; (800fb5c <prvInsertTimerInActiveList+0x7c>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3304      	adds	r3, #4
 800fb22:	4619      	mov	r1, r3
 800fb24:	4610      	mov	r0, r2
 800fb26:	f7fe f998 	bl	800de5a <vListInsert>
 800fb2a:	e012      	b.n	800fb52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d206      	bcs.n	800fb42 <prvInsertTimerInActiveList+0x62>
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d302      	bcc.n	800fb42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	617b      	str	r3, [r7, #20]
 800fb40:	e007      	b.n	800fb52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb42:	4b07      	ldr	r3, [pc, #28]	; (800fb60 <prvInsertTimerInActiveList+0x80>)
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	3304      	adds	r3, #4
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7fe f984 	bl	800de5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fb52:	697b      	ldr	r3, [r7, #20]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3718      	adds	r7, #24
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	2000cc3c 	.word	0x2000cc3c
 800fb60:	2000cc38 	.word	0x2000cc38

0800fb64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b08e      	sub	sp, #56	; 0x38
 800fb68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb6a:	e0d0      	b.n	800fd0e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	da1a      	bge.n	800fba8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fb72:	1d3b      	adds	r3, r7, #4
 800fb74:	3304      	adds	r3, #4
 800fb76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d10c      	bne.n	800fb98 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800fb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb82:	b672      	cpsid	i
 800fb84:	f383 8811 	msr	BASEPRI, r3
 800fb88:	f3bf 8f6f 	isb	sy
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	b662      	cpsie	i
 800fb92:	61fb      	str	r3, [r7, #28]
}
 800fb94:	bf00      	nop
 800fb96:	e7fe      	b.n	800fb96 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb9e:	6850      	ldr	r0, [r2, #4]
 800fba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba2:	6892      	ldr	r2, [r2, #8]
 800fba4:	4611      	mov	r1, r2
 800fba6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f2c0 80af 	blt.w	800fd0e <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb6:	695b      	ldr	r3, [r3, #20]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d004      	beq.n	800fbc6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbbe:	3304      	adds	r3, #4
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fe f983 	bl	800decc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbc6:	463b      	mov	r3, r7
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff ff69 	bl	800faa0 <prvSampleTimeNow>
 800fbce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b09      	cmp	r3, #9
 800fbd4:	f200 809a 	bhi.w	800fd0c <prvProcessReceivedCommands+0x1a8>
 800fbd8:	a201      	add	r2, pc, #4	; (adr r2, 800fbe0 <prvProcessReceivedCommands+0x7c>)
 800fbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbde:	bf00      	nop
 800fbe0:	0800fc09 	.word	0x0800fc09
 800fbe4:	0800fc09 	.word	0x0800fc09
 800fbe8:	0800fc09 	.word	0x0800fc09
 800fbec:	0800fc81 	.word	0x0800fc81
 800fbf0:	0800fc95 	.word	0x0800fc95
 800fbf4:	0800fce3 	.word	0x0800fce3
 800fbf8:	0800fc09 	.word	0x0800fc09
 800fbfc:	0800fc09 	.word	0x0800fc09
 800fc00:	0800fc81 	.word	0x0800fc81
 800fc04:	0800fc95 	.word	0x0800fc95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc0e:	f043 0301 	orr.w	r3, r3, #1
 800fc12:	b2da      	uxtb	r2, r3
 800fc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1e:	699b      	ldr	r3, [r3, #24]
 800fc20:	18d1      	adds	r1, r2, r3
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc28:	f7ff ff5a 	bl	800fae0 <prvInsertTimerInActiveList>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d06d      	beq.n	800fd0e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc34:	6a1b      	ldr	r3, [r3, #32]
 800fc36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc40:	f003 0304 	and.w	r3, r3, #4
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d062      	beq.n	800fd0e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	441a      	add	r2, r3
 800fc50:	2300      	movs	r3, #0
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	2300      	movs	r3, #0
 800fc56:	2100      	movs	r1, #0
 800fc58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc5a:	f7ff fdff 	bl	800f85c <xTimerGenericCommand>
 800fc5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fc60:	6a3b      	ldr	r3, [r7, #32]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d153      	bne.n	800fd0e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800fc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6a:	b672      	cpsid	i
 800fc6c:	f383 8811 	msr	BASEPRI, r3
 800fc70:	f3bf 8f6f 	isb	sy
 800fc74:	f3bf 8f4f 	dsb	sy
 800fc78:	b662      	cpsie	i
 800fc7a:	61bb      	str	r3, [r7, #24]
}
 800fc7c:	bf00      	nop
 800fc7e:	e7fe      	b.n	800fc7e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc86:	f023 0301 	bic.w	r3, r3, #1
 800fc8a:	b2da      	uxtb	r2, r3
 800fc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fc92:	e03c      	b.n	800fd0e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc9a:	f043 0301 	orr.w	r3, r3, #1
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fca6:	68ba      	ldr	r2, [r7, #8]
 800fca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcae:	699b      	ldr	r3, [r3, #24]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10c      	bne.n	800fcce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	b672      	cpsid	i
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	b662      	cpsie	i
 800fcc8:	617b      	str	r3, [r7, #20]
}
 800fcca:	bf00      	nop
 800fccc:	e7fe      	b.n	800fccc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd0:	699a      	ldr	r2, [r3, #24]
 800fcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd4:	18d1      	adds	r1, r2, r3
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcdc:	f7ff ff00 	bl	800fae0 <prvInsertTimerInActiveList>
					break;
 800fce0:	e015      	b.n	800fd0e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fce8:	f003 0302 	and.w	r3, r3, #2
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d103      	bne.n	800fcf8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800fcf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcf2:	f000 fbc9 	bl	8010488 <vPortFree>
 800fcf6:	e00a      	b.n	800fd0e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcfe:	f023 0301 	bic.w	r3, r3, #1
 800fd02:	b2da      	uxtb	r2, r3
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fd0a:	e000      	b.n	800fd0e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800fd0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd0e:	4b08      	ldr	r3, [pc, #32]	; (800fd30 <prvProcessReceivedCommands+0x1cc>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	1d39      	adds	r1, r7, #4
 800fd14:	2200      	movs	r2, #0
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe fbb8 	bl	800e48c <xQueueReceive>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f47f af24 	bne.w	800fb6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fd24:	bf00      	nop
 800fd26:	bf00      	nop
 800fd28:	3730      	adds	r7, #48	; 0x30
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	2000cc40 	.word	0x2000cc40

0800fd34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b088      	sub	sp, #32
 800fd38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd3a:	e04a      	b.n	800fdd2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd3c:	4b2e      	ldr	r3, [pc, #184]	; (800fdf8 <prvSwitchTimerLists+0xc4>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd46:	4b2c      	ldr	r3, [pc, #176]	; (800fdf8 <prvSwitchTimerLists+0xc4>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fe f8b9 	bl	800decc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6a1b      	ldr	r3, [r3, #32]
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd68:	f003 0304 	and.w	r3, r3, #4
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d030      	beq.n	800fdd2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	699b      	ldr	r3, [r3, #24]
 800fd74:	693a      	ldr	r2, [r7, #16]
 800fd76:	4413      	add	r3, r2
 800fd78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d90e      	bls.n	800fda0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	68ba      	ldr	r2, [r7, #8]
 800fd86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd8e:	4b1a      	ldr	r3, [pc, #104]	; (800fdf8 <prvSwitchTimerLists+0xc4>)
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	3304      	adds	r3, #4
 800fd96:	4619      	mov	r1, r3
 800fd98:	4610      	mov	r0, r2
 800fd9a:	f7fe f85e 	bl	800de5a <vListInsert>
 800fd9e:	e018      	b.n	800fdd2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fda0:	2300      	movs	r3, #0
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	2300      	movs	r3, #0
 800fda6:	693a      	ldr	r2, [r7, #16]
 800fda8:	2100      	movs	r1, #0
 800fdaa:	68f8      	ldr	r0, [r7, #12]
 800fdac:	f7ff fd56 	bl	800f85c <xTimerGenericCommand>
 800fdb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10c      	bne.n	800fdd2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800fdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbc:	b672      	cpsid	i
 800fdbe:	f383 8811 	msr	BASEPRI, r3
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	f3bf 8f4f 	dsb	sy
 800fdca:	b662      	cpsie	i
 800fdcc:	603b      	str	r3, [r7, #0]
}
 800fdce:	bf00      	nop
 800fdd0:	e7fe      	b.n	800fdd0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdd2:	4b09      	ldr	r3, [pc, #36]	; (800fdf8 <prvSwitchTimerLists+0xc4>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1af      	bne.n	800fd3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fddc:	4b06      	ldr	r3, [pc, #24]	; (800fdf8 <prvSwitchTimerLists+0xc4>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fde2:	4b06      	ldr	r3, [pc, #24]	; (800fdfc <prvSwitchTimerLists+0xc8>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a04      	ldr	r2, [pc, #16]	; (800fdf8 <prvSwitchTimerLists+0xc4>)
 800fde8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fdea:	4a04      	ldr	r2, [pc, #16]	; (800fdfc <prvSwitchTimerLists+0xc8>)
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	6013      	str	r3, [r2, #0]
}
 800fdf0:	bf00      	nop
 800fdf2:	3718      	adds	r7, #24
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}
 800fdf8:	2000cc38 	.word	0x2000cc38
 800fdfc:	2000cc3c 	.word	0x2000cc3c

0800fe00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fe06:	f000 f949 	bl	801009c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fe0a:	4b15      	ldr	r3, [pc, #84]	; (800fe60 <prvCheckForValidListAndQueue+0x60>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d120      	bne.n	800fe54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fe12:	4814      	ldr	r0, [pc, #80]	; (800fe64 <prvCheckForValidListAndQueue+0x64>)
 800fe14:	f7fd ffd0 	bl	800ddb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fe18:	4813      	ldr	r0, [pc, #76]	; (800fe68 <prvCheckForValidListAndQueue+0x68>)
 800fe1a:	f7fd ffcd 	bl	800ddb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fe1e:	4b13      	ldr	r3, [pc, #76]	; (800fe6c <prvCheckForValidListAndQueue+0x6c>)
 800fe20:	4a10      	ldr	r2, [pc, #64]	; (800fe64 <prvCheckForValidListAndQueue+0x64>)
 800fe22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fe24:	4b12      	ldr	r3, [pc, #72]	; (800fe70 <prvCheckForValidListAndQueue+0x70>)
 800fe26:	4a10      	ldr	r2, [pc, #64]	; (800fe68 <prvCheckForValidListAndQueue+0x68>)
 800fe28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	4b11      	ldr	r3, [pc, #68]	; (800fe74 <prvCheckForValidListAndQueue+0x74>)
 800fe30:	4a11      	ldr	r2, [pc, #68]	; (800fe78 <prvCheckForValidListAndQueue+0x78>)
 800fe32:	2110      	movs	r1, #16
 800fe34:	200a      	movs	r0, #10
 800fe36:	f7fe f8dd 	bl	800dff4 <xQueueGenericCreateStatic>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	4a08      	ldr	r2, [pc, #32]	; (800fe60 <prvCheckForValidListAndQueue+0x60>)
 800fe3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe40:	4b07      	ldr	r3, [pc, #28]	; (800fe60 <prvCheckForValidListAndQueue+0x60>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d005      	beq.n	800fe54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fe48:	4b05      	ldr	r3, [pc, #20]	; (800fe60 <prvCheckForValidListAndQueue+0x60>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	490b      	ldr	r1, [pc, #44]	; (800fe7c <prvCheckForValidListAndQueue+0x7c>)
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fe fd12 	bl	800e878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fe54:	f000 f956 	bl	8010104 <vPortExitCritical>
}
 800fe58:	bf00      	nop
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	2000cc40 	.word	0x2000cc40
 800fe64:	2000cc10 	.word	0x2000cc10
 800fe68:	2000cc24 	.word	0x2000cc24
 800fe6c:	2000cc38 	.word	0x2000cc38
 800fe70:	2000cc3c 	.word	0x2000cc3c
 800fe74:	2000ccec 	.word	0x2000ccec
 800fe78:	2000cc4c 	.word	0x2000cc4c
 800fe7c:	08024244 	.word	0x08024244

0800fe80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3b04      	subs	r3, #4
 800fe90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fe98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3b04      	subs	r3, #4
 800fe9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	f023 0201 	bic.w	r2, r3, #1
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	3b04      	subs	r3, #4
 800feae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800feb0:	4a0c      	ldr	r2, [pc, #48]	; (800fee4 <pxPortInitialiseStack+0x64>)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	3b14      	subs	r3, #20
 800feba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	3b04      	subs	r3, #4
 800fec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f06f 0202 	mvn.w	r2, #2
 800fece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	3b20      	subs	r3, #32
 800fed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fed6:	68fb      	ldr	r3, [r7, #12]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3714      	adds	r7, #20
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	0800fee9 	.word	0x0800fee9

0800fee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fef2:	4b14      	ldr	r3, [pc, #80]	; (800ff44 <prvTaskExitError+0x5c>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fefa:	d00c      	beq.n	800ff16 <prvTaskExitError+0x2e>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff00:	b672      	cpsid	i
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	b662      	cpsie	i
 800ff10:	60fb      	str	r3, [r7, #12]
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <prvTaskExitError+0x2c>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1a:	b672      	cpsid	i
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	b662      	cpsie	i
 800ff2a:	60bb      	str	r3, [r7, #8]
}
 800ff2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ff2e:	bf00      	nop
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d0fc      	beq.n	800ff30 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ff36:	bf00      	nop
 800ff38:	bf00      	nop
 800ff3a:	3714      	adds	r7, #20
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr
 800ff44:	2000009c 	.word	0x2000009c
	...

0800ff50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff50:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <pxCurrentTCBConst2>)
 800ff52:	6819      	ldr	r1, [r3, #0]
 800ff54:	6808      	ldr	r0, [r1, #0]
 800ff56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5a:	f380 8809 	msr	PSP, r0
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f04f 0000 	mov.w	r0, #0
 800ff66:	f380 8811 	msr	BASEPRI, r0
 800ff6a:	4770      	bx	lr
 800ff6c:	f3af 8000 	nop.w

0800ff70 <pxCurrentTCBConst2>:
 800ff70:	2000c710 	.word	0x2000c710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ff74:	bf00      	nop
 800ff76:	bf00      	nop

0800ff78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ff78:	4808      	ldr	r0, [pc, #32]	; (800ff9c <prvPortStartFirstTask+0x24>)
 800ff7a:	6800      	ldr	r0, [r0, #0]
 800ff7c:	6800      	ldr	r0, [r0, #0]
 800ff7e:	f380 8808 	msr	MSP, r0
 800ff82:	f04f 0000 	mov.w	r0, #0
 800ff86:	f380 8814 	msr	CONTROL, r0
 800ff8a:	b662      	cpsie	i
 800ff8c:	b661      	cpsie	f
 800ff8e:	f3bf 8f4f 	dsb	sy
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	df00      	svc	0
 800ff98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff9a:	bf00      	nop
 800ff9c:	e000ed08 	.word	0xe000ed08

0800ffa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ffa6:	4b37      	ldr	r3, [pc, #220]	; (8010084 <xPortStartScheduler+0xe4>)
 800ffa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	22ff      	movs	r2, #255	; 0xff
 800ffb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	4b2f      	ldr	r3, [pc, #188]	; (8010088 <xPortStartScheduler+0xe8>)
 800ffcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ffce:	4b2f      	ldr	r3, [pc, #188]	; (801008c <xPortStartScheduler+0xec>)
 800ffd0:	2207      	movs	r2, #7
 800ffd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffd4:	e009      	b.n	800ffea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ffd6:	4b2d      	ldr	r3, [pc, #180]	; (801008c <xPortStartScheduler+0xec>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	3b01      	subs	r3, #1
 800ffdc:	4a2b      	ldr	r2, [pc, #172]	; (801008c <xPortStartScheduler+0xec>)
 800ffde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffea:	78fb      	ldrb	r3, [r7, #3]
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fff2:	2b80      	cmp	r3, #128	; 0x80
 800fff4:	d0ef      	beq.n	800ffd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fff6:	4b25      	ldr	r3, [pc, #148]	; (801008c <xPortStartScheduler+0xec>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f1c3 0307 	rsb	r3, r3, #7
 800fffe:	2b04      	cmp	r3, #4
 8010000:	d00c      	beq.n	801001c <xPortStartScheduler+0x7c>
	__asm volatile
 8010002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010006:	b672      	cpsid	i
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	b662      	cpsie	i
 8010016:	60bb      	str	r3, [r7, #8]
}
 8010018:	bf00      	nop
 801001a:	e7fe      	b.n	801001a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801001c:	4b1b      	ldr	r3, [pc, #108]	; (801008c <xPortStartScheduler+0xec>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	021b      	lsls	r3, r3, #8
 8010022:	4a1a      	ldr	r2, [pc, #104]	; (801008c <xPortStartScheduler+0xec>)
 8010024:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010026:	4b19      	ldr	r3, [pc, #100]	; (801008c <xPortStartScheduler+0xec>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801002e:	4a17      	ldr	r2, [pc, #92]	; (801008c <xPortStartScheduler+0xec>)
 8010030:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	b2da      	uxtb	r2, r3
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801003a:	4b15      	ldr	r3, [pc, #84]	; (8010090 <xPortStartScheduler+0xf0>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a14      	ldr	r2, [pc, #80]	; (8010090 <xPortStartScheduler+0xf0>)
 8010040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010044:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010046:	4b12      	ldr	r3, [pc, #72]	; (8010090 <xPortStartScheduler+0xf0>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a11      	ldr	r2, [pc, #68]	; (8010090 <xPortStartScheduler+0xf0>)
 801004c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010050:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010052:	f000 f8dd 	bl	8010210 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010056:	4b0f      	ldr	r3, [pc, #60]	; (8010094 <xPortStartScheduler+0xf4>)
 8010058:	2200      	movs	r2, #0
 801005a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801005c:	f000 f8fc 	bl	8010258 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010060:	4b0d      	ldr	r3, [pc, #52]	; (8010098 <xPortStartScheduler+0xf8>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a0c      	ldr	r2, [pc, #48]	; (8010098 <xPortStartScheduler+0xf8>)
 8010066:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801006a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801006c:	f7ff ff84 	bl	800ff78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010070:	f7ff f824 	bl	800f0bc <vTaskSwitchContext>
	prvTaskExitError();
 8010074:	f7ff ff38 	bl	800fee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010078:	2300      	movs	r3, #0
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	e000e400 	.word	0xe000e400
 8010088:	2000cd3c 	.word	0x2000cd3c
 801008c:	2000cd40 	.word	0x2000cd40
 8010090:	e000ed20 	.word	0xe000ed20
 8010094:	2000009c 	.word	0x2000009c
 8010098:	e000ef34 	.word	0xe000ef34

0801009c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
	__asm volatile
 80100a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a6:	b672      	cpsid	i
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	b662      	cpsie	i
 80100b6:	607b      	str	r3, [r7, #4]
}
 80100b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80100ba:	4b10      	ldr	r3, [pc, #64]	; (80100fc <vPortEnterCritical+0x60>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	3301      	adds	r3, #1
 80100c0:	4a0e      	ldr	r2, [pc, #56]	; (80100fc <vPortEnterCritical+0x60>)
 80100c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80100c4:	4b0d      	ldr	r3, [pc, #52]	; (80100fc <vPortEnterCritical+0x60>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d111      	bne.n	80100f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80100cc:	4b0c      	ldr	r3, [pc, #48]	; (8010100 <vPortEnterCritical+0x64>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00c      	beq.n	80100f0 <vPortEnterCritical+0x54>
	__asm volatile
 80100d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100da:	b672      	cpsid	i
 80100dc:	f383 8811 	msr	BASEPRI, r3
 80100e0:	f3bf 8f6f 	isb	sy
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	b662      	cpsie	i
 80100ea:	603b      	str	r3, [r7, #0]
}
 80100ec:	bf00      	nop
 80100ee:	e7fe      	b.n	80100ee <vPortEnterCritical+0x52>
	}
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	2000009c 	.word	0x2000009c
 8010100:	e000ed04 	.word	0xe000ed04

08010104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801010a:	4b13      	ldr	r3, [pc, #76]	; (8010158 <vPortExitCritical+0x54>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d10c      	bne.n	801012c <vPortExitCritical+0x28>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010116:	b672      	cpsid	i
 8010118:	f383 8811 	msr	BASEPRI, r3
 801011c:	f3bf 8f6f 	isb	sy
 8010120:	f3bf 8f4f 	dsb	sy
 8010124:	b662      	cpsie	i
 8010126:	607b      	str	r3, [r7, #4]
}
 8010128:	bf00      	nop
 801012a:	e7fe      	b.n	801012a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801012c:	4b0a      	ldr	r3, [pc, #40]	; (8010158 <vPortExitCritical+0x54>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3b01      	subs	r3, #1
 8010132:	4a09      	ldr	r2, [pc, #36]	; (8010158 <vPortExitCritical+0x54>)
 8010134:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010136:	4b08      	ldr	r3, [pc, #32]	; (8010158 <vPortExitCritical+0x54>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d105      	bne.n	801014a <vPortExitCritical+0x46>
 801013e:	2300      	movs	r3, #0
 8010140:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	f383 8811 	msr	BASEPRI, r3
}
 8010148:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801014a:	bf00      	nop
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	2000009c 	.word	0x2000009c
 801015c:	00000000 	.word	0x00000000

08010160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010160:	f3ef 8009 	mrs	r0, PSP
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	4b15      	ldr	r3, [pc, #84]	; (80101c0 <pxCurrentTCBConst>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	f01e 0f10 	tst.w	lr, #16
 8010170:	bf08      	it	eq
 8010172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017a:	6010      	str	r0, [r2, #0]
 801017c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010184:	b672      	cpsid	i
 8010186:	f380 8811 	msr	BASEPRI, r0
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	b662      	cpsie	i
 8010194:	f7fe ff92 	bl	800f0bc <vTaskSwitchContext>
 8010198:	f04f 0000 	mov.w	r0, #0
 801019c:	f380 8811 	msr	BASEPRI, r0
 80101a0:	bc09      	pop	{r0, r3}
 80101a2:	6819      	ldr	r1, [r3, #0]
 80101a4:	6808      	ldr	r0, [r1, #0]
 80101a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101aa:	f01e 0f10 	tst.w	lr, #16
 80101ae:	bf08      	it	eq
 80101b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80101b4:	f380 8809 	msr	PSP, r0
 80101b8:	f3bf 8f6f 	isb	sy
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop

080101c0 <pxCurrentTCBConst>:
 80101c0:	2000c710 	.word	0x2000c710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop

080101c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	b672      	cpsid	i
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	b662      	cpsie	i
 80101e2:	607b      	str	r3, [r7, #4]
}
 80101e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80101e6:	f7fe fead 	bl	800ef44 <xTaskIncrementTick>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d003      	beq.n	80101f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80101f0:	4b06      	ldr	r3, [pc, #24]	; (801020c <SysTick_Handler+0x44>)
 80101f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101f6:	601a      	str	r2, [r3, #0]
 80101f8:	2300      	movs	r3, #0
 80101fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	f383 8811 	msr	BASEPRI, r3
}
 8010202:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010204:	bf00      	nop
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	e000ed04 	.word	0xe000ed04

08010210 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010210:	b480      	push	{r7}
 8010212:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010214:	4b0b      	ldr	r3, [pc, #44]	; (8010244 <vPortSetupTimerInterrupt+0x34>)
 8010216:	2200      	movs	r2, #0
 8010218:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801021a:	4b0b      	ldr	r3, [pc, #44]	; (8010248 <vPortSetupTimerInterrupt+0x38>)
 801021c:	2200      	movs	r2, #0
 801021e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010220:	4b0a      	ldr	r3, [pc, #40]	; (801024c <vPortSetupTimerInterrupt+0x3c>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4a0a      	ldr	r2, [pc, #40]	; (8010250 <vPortSetupTimerInterrupt+0x40>)
 8010226:	fba2 2303 	umull	r2, r3, r2, r3
 801022a:	099b      	lsrs	r3, r3, #6
 801022c:	4a09      	ldr	r2, [pc, #36]	; (8010254 <vPortSetupTimerInterrupt+0x44>)
 801022e:	3b01      	subs	r3, #1
 8010230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010232:	4b04      	ldr	r3, [pc, #16]	; (8010244 <vPortSetupTimerInterrupt+0x34>)
 8010234:	2207      	movs	r2, #7
 8010236:	601a      	str	r2, [r3, #0]
}
 8010238:	bf00      	nop
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr
 8010242:	bf00      	nop
 8010244:	e000e010 	.word	0xe000e010
 8010248:	e000e018 	.word	0xe000e018
 801024c:	20000004 	.word	0x20000004
 8010250:	10624dd3 	.word	0x10624dd3
 8010254:	e000e014 	.word	0xe000e014

08010258 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010258:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010268 <vPortEnableVFP+0x10>
 801025c:	6801      	ldr	r1, [r0, #0]
 801025e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010262:	6001      	str	r1, [r0, #0]
 8010264:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010266:	bf00      	nop
 8010268:	e000ed88 	.word	0xe000ed88

0801026c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801026c:	b480      	push	{r7}
 801026e:	b085      	sub	sp, #20
 8010270:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010272:	f3ef 8305 	mrs	r3, IPSR
 8010276:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2b0f      	cmp	r3, #15
 801027c:	d916      	bls.n	80102ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801027e:	4a19      	ldr	r2, [pc, #100]	; (80102e4 <vPortValidateInterruptPriority+0x78>)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	4413      	add	r3, r2
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010288:	4b17      	ldr	r3, [pc, #92]	; (80102e8 <vPortValidateInterruptPriority+0x7c>)
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	7afa      	ldrb	r2, [r7, #11]
 801028e:	429a      	cmp	r2, r3
 8010290:	d20c      	bcs.n	80102ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010296:	b672      	cpsid	i
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	b662      	cpsie	i
 80102a6:	607b      	str	r3, [r7, #4]
}
 80102a8:	bf00      	nop
 80102aa:	e7fe      	b.n	80102aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80102ac:	4b0f      	ldr	r3, [pc, #60]	; (80102ec <vPortValidateInterruptPriority+0x80>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80102b4:	4b0e      	ldr	r3, [pc, #56]	; (80102f0 <vPortValidateInterruptPriority+0x84>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d90c      	bls.n	80102d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80102bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c0:	b672      	cpsid	i
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	b662      	cpsie	i
 80102d0:	603b      	str	r3, [r7, #0]
}
 80102d2:	bf00      	nop
 80102d4:	e7fe      	b.n	80102d4 <vPortValidateInterruptPriority+0x68>
	}
 80102d6:	bf00      	nop
 80102d8:	3714      	adds	r7, #20
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	e000e3f0 	.word	0xe000e3f0
 80102e8:	2000cd3c 	.word	0x2000cd3c
 80102ec:	e000ed0c 	.word	0xe000ed0c
 80102f0:	2000cd40 	.word	0x2000cd40

080102f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b08a      	sub	sp, #40	; 0x28
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80102fc:	2300      	movs	r3, #0
 80102fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010300:	f7fe fd62 	bl	800edc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010304:	4b5b      	ldr	r3, [pc, #364]	; (8010474 <pvPortMalloc+0x180>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d101      	bne.n	8010310 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801030c:	f000 f91a 	bl	8010544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010310:	4b59      	ldr	r3, [pc, #356]	; (8010478 <pvPortMalloc+0x184>)
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4013      	ands	r3, r2
 8010318:	2b00      	cmp	r3, #0
 801031a:	f040 8092 	bne.w	8010442 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d01f      	beq.n	8010364 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010324:	2208      	movs	r2, #8
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4413      	add	r3, r2
 801032a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f003 0307 	and.w	r3, r3, #7
 8010332:	2b00      	cmp	r3, #0
 8010334:	d016      	beq.n	8010364 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f023 0307 	bic.w	r3, r3, #7
 801033c:	3308      	adds	r3, #8
 801033e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f003 0307 	and.w	r3, r3, #7
 8010346:	2b00      	cmp	r3, #0
 8010348:	d00c      	beq.n	8010364 <pvPortMalloc+0x70>
	__asm volatile
 801034a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034e:	b672      	cpsid	i
 8010350:	f383 8811 	msr	BASEPRI, r3
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	b662      	cpsie	i
 801035e:	617b      	str	r3, [r7, #20]
}
 8010360:	bf00      	nop
 8010362:	e7fe      	b.n	8010362 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d06b      	beq.n	8010442 <pvPortMalloc+0x14e>
 801036a:	4b44      	ldr	r3, [pc, #272]	; (801047c <pvPortMalloc+0x188>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	429a      	cmp	r2, r3
 8010372:	d866      	bhi.n	8010442 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010374:	4b42      	ldr	r3, [pc, #264]	; (8010480 <pvPortMalloc+0x18c>)
 8010376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010378:	4b41      	ldr	r3, [pc, #260]	; (8010480 <pvPortMalloc+0x18c>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801037e:	e004      	b.n	801038a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	687a      	ldr	r2, [r7, #4]
 8010390:	429a      	cmp	r2, r3
 8010392:	d903      	bls.n	801039c <pvPortMalloc+0xa8>
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1f1      	bne.n	8010380 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801039c:	4b35      	ldr	r3, [pc, #212]	; (8010474 <pvPortMalloc+0x180>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d04d      	beq.n	8010442 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80103a6:	6a3b      	ldr	r3, [r7, #32]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	2208      	movs	r2, #8
 80103ac:	4413      	add	r3, r2
 80103ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	6a3b      	ldr	r3, [r7, #32]
 80103b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80103b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ba:	685a      	ldr	r2, [r3, #4]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	1ad2      	subs	r2, r2, r3
 80103c0:	2308      	movs	r3, #8
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d921      	bls.n	801040c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80103c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4413      	add	r3, r2
 80103ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	f003 0307 	and.w	r3, r3, #7
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00c      	beq.n	80103f4 <pvPortMalloc+0x100>
	__asm volatile
 80103da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103de:	b672      	cpsid	i
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	b662      	cpsie	i
 80103ee:	613b      	str	r3, [r7, #16]
}
 80103f0:	bf00      	nop
 80103f2:	e7fe      	b.n	80103f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80103f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f6:	685a      	ldr	r2, [r3, #4]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	1ad2      	subs	r2, r2, r3
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010406:	69b8      	ldr	r0, [r7, #24]
 8010408:	f000 f8fe 	bl	8010608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801040c:	4b1b      	ldr	r3, [pc, #108]	; (801047c <pvPortMalloc+0x188>)
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	1ad3      	subs	r3, r2, r3
 8010416:	4a19      	ldr	r2, [pc, #100]	; (801047c <pvPortMalloc+0x188>)
 8010418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801041a:	4b18      	ldr	r3, [pc, #96]	; (801047c <pvPortMalloc+0x188>)
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	4b19      	ldr	r3, [pc, #100]	; (8010484 <pvPortMalloc+0x190>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	429a      	cmp	r2, r3
 8010424:	d203      	bcs.n	801042e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010426:	4b15      	ldr	r3, [pc, #84]	; (801047c <pvPortMalloc+0x188>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4a16      	ldr	r2, [pc, #88]	; (8010484 <pvPortMalloc+0x190>)
 801042c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010430:	685a      	ldr	r2, [r3, #4]
 8010432:	4b11      	ldr	r3, [pc, #68]	; (8010478 <pvPortMalloc+0x184>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	431a      	orrs	r2, r3
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801043c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043e:	2200      	movs	r2, #0
 8010440:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010442:	f7fe fccf 	bl	800ede4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	f003 0307 	and.w	r3, r3, #7
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00c      	beq.n	801046a <pvPortMalloc+0x176>
	__asm volatile
 8010450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010454:	b672      	cpsid	i
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	b662      	cpsie	i
 8010464:	60fb      	str	r3, [r7, #12]
}
 8010466:	bf00      	nop
 8010468:	e7fe      	b.n	8010468 <pvPortMalloc+0x174>
	return pvReturn;
 801046a:	69fb      	ldr	r3, [r7, #28]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3728      	adds	r7, #40	; 0x28
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	2001094c 	.word	0x2001094c
 8010478:	20010958 	.word	0x20010958
 801047c:	20010950 	.word	0x20010950
 8010480:	20010944 	.word	0x20010944
 8010484:	20010954 	.word	0x20010954

08010488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d04c      	beq.n	8010534 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801049a:	2308      	movs	r3, #8
 801049c:	425b      	negs	r3, r3
 801049e:	697a      	ldr	r2, [r7, #20]
 80104a0:	4413      	add	r3, r2
 80104a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	685a      	ldr	r2, [r3, #4]
 80104ac:	4b23      	ldr	r3, [pc, #140]	; (801053c <vPortFree+0xb4>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4013      	ands	r3, r2
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d10c      	bne.n	80104d0 <vPortFree+0x48>
	__asm volatile
 80104b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ba:	b672      	cpsid	i
 80104bc:	f383 8811 	msr	BASEPRI, r3
 80104c0:	f3bf 8f6f 	isb	sy
 80104c4:	f3bf 8f4f 	dsb	sy
 80104c8:	b662      	cpsie	i
 80104ca:	60fb      	str	r3, [r7, #12]
}
 80104cc:	bf00      	nop
 80104ce:	e7fe      	b.n	80104ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00c      	beq.n	80104f2 <vPortFree+0x6a>
	__asm volatile
 80104d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104dc:	b672      	cpsid	i
 80104de:	f383 8811 	msr	BASEPRI, r3
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	f3bf 8f4f 	dsb	sy
 80104ea:	b662      	cpsie	i
 80104ec:	60bb      	str	r3, [r7, #8]
}
 80104ee:	bf00      	nop
 80104f0:	e7fe      	b.n	80104f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	4b11      	ldr	r3, [pc, #68]	; (801053c <vPortFree+0xb4>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4013      	ands	r3, r2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d019      	beq.n	8010534 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d115      	bne.n	8010534 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	685a      	ldr	r2, [r3, #4]
 801050c:	4b0b      	ldr	r3, [pc, #44]	; (801053c <vPortFree+0xb4>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	43db      	mvns	r3, r3
 8010512:	401a      	ands	r2, r3
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010518:	f7fe fc56 	bl	800edc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	685a      	ldr	r2, [r3, #4]
 8010520:	4b07      	ldr	r3, [pc, #28]	; (8010540 <vPortFree+0xb8>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4413      	add	r3, r2
 8010526:	4a06      	ldr	r2, [pc, #24]	; (8010540 <vPortFree+0xb8>)
 8010528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801052a:	6938      	ldr	r0, [r7, #16]
 801052c:	f000 f86c 	bl	8010608 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010530:	f7fe fc58 	bl	800ede4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010534:	bf00      	nop
 8010536:	3718      	adds	r7, #24
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	20010958 	.word	0x20010958
 8010540:	20010950 	.word	0x20010950

08010544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801054a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801054e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010550:	4b27      	ldr	r3, [pc, #156]	; (80105f0 <prvHeapInit+0xac>)
 8010552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f003 0307 	and.w	r3, r3, #7
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00c      	beq.n	8010578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3307      	adds	r3, #7
 8010562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f023 0307 	bic.w	r3, r3, #7
 801056a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	4a1f      	ldr	r2, [pc, #124]	; (80105f0 <prvHeapInit+0xac>)
 8010574:	4413      	add	r3, r2
 8010576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801057c:	4a1d      	ldr	r2, [pc, #116]	; (80105f4 <prvHeapInit+0xb0>)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010582:	4b1c      	ldr	r3, [pc, #112]	; (80105f4 <prvHeapInit+0xb0>)
 8010584:	2200      	movs	r2, #0
 8010586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	4413      	add	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010590:	2208      	movs	r2, #8
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	1a9b      	subs	r3, r3, r2
 8010596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f023 0307 	bic.w	r3, r3, #7
 801059e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4a15      	ldr	r2, [pc, #84]	; (80105f8 <prvHeapInit+0xb4>)
 80105a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80105a6:	4b14      	ldr	r3, [pc, #80]	; (80105f8 <prvHeapInit+0xb4>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2200      	movs	r2, #0
 80105ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80105ae:	4b12      	ldr	r3, [pc, #72]	; (80105f8 <prvHeapInit+0xb4>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2200      	movs	r2, #0
 80105b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80105c4:	4b0c      	ldr	r3, [pc, #48]	; (80105f8 <prvHeapInit+0xb4>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	4a0a      	ldr	r2, [pc, #40]	; (80105fc <prvHeapInit+0xb8>)
 80105d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	4a09      	ldr	r2, [pc, #36]	; (8010600 <prvHeapInit+0xbc>)
 80105da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80105dc:	4b09      	ldr	r3, [pc, #36]	; (8010604 <prvHeapInit+0xc0>)
 80105de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80105e2:	601a      	str	r2, [r3, #0]
}
 80105e4:	bf00      	nop
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	2000cd44 	.word	0x2000cd44
 80105f4:	20010944 	.word	0x20010944
 80105f8:	2001094c 	.word	0x2001094c
 80105fc:	20010954 	.word	0x20010954
 8010600:	20010950 	.word	0x20010950
 8010604:	20010958 	.word	0x20010958

08010608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010608:	b480      	push	{r7}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010610:	4b28      	ldr	r3, [pc, #160]	; (80106b4 <prvInsertBlockIntoFreeList+0xac>)
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e002      	b.n	801061c <prvInsertBlockIntoFreeList+0x14>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	60fb      	str	r3, [r7, #12]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	687a      	ldr	r2, [r7, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	d8f7      	bhi.n	8010616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	4413      	add	r3, r2
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	429a      	cmp	r2, r3
 8010636:	d108      	bne.n	801064a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	441a      	add	r2, r3
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	441a      	add	r2, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	429a      	cmp	r2, r3
 801065c:	d118      	bne.n	8010690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	429a      	cmp	r2, r3
 8010668:	d00d      	beq.n	8010686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	685a      	ldr	r2, [r3, #4]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	441a      	add	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	601a      	str	r2, [r3, #0]
 8010684:	e008      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010686:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <prvInsertBlockIntoFreeList+0xb0>)
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	e003      	b.n	8010698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	429a      	cmp	r2, r3
 801069e:	d002      	beq.n	80106a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106a6:	bf00      	nop
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	20010944 	.word	0x20010944
 80106b8:	2001094c 	.word	0x2001094c

080106bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80106c0:	2200      	movs	r2, #0
 80106c2:	4912      	ldr	r1, [pc, #72]	; (801070c <MX_USB_DEVICE_Init+0x50>)
 80106c4:	4812      	ldr	r0, [pc, #72]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106c6:	f7fb fee1 	bl	800c48c <USBD_Init>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80106d0:	f7f2 fe71 	bl	80033b6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80106d4:	490f      	ldr	r1, [pc, #60]	; (8010714 <MX_USB_DEVICE_Init+0x58>)
 80106d6:	480e      	ldr	r0, [pc, #56]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106d8:	f7fb ff08 	bl	800c4ec <USBD_RegisterClass>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80106e2:	f7f2 fe68 	bl	80033b6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80106e6:	490c      	ldr	r1, [pc, #48]	; (8010718 <MX_USB_DEVICE_Init+0x5c>)
 80106e8:	4809      	ldr	r0, [pc, #36]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106ea:	f7fb fe3f 	bl	800c36c <USBD_CDC_RegisterInterface>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d001      	beq.n	80106f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80106f4:	f7f2 fe5f 	bl	80033b6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80106f8:	4805      	ldr	r0, [pc, #20]	; (8010710 <MX_USB_DEVICE_Init+0x54>)
 80106fa:	f7fb ff2d 	bl	800c558 <USBD_Start>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010704:	f7f2 fe57 	bl	80033b6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010708:	bf00      	nop
 801070a:	bd80      	pop	{r7, pc}
 801070c:	200000b4 	.word	0x200000b4
 8010710:	2001095c 	.word	0x2001095c
 8010714:	2000001c 	.word	0x2000001c
 8010718:	200000a0 	.word	0x200000a0

0801071c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010720:	2200      	movs	r2, #0
 8010722:	4905      	ldr	r1, [pc, #20]	; (8010738 <CDC_Init_FS+0x1c>)
 8010724:	4805      	ldr	r0, [pc, #20]	; (801073c <CDC_Init_FS+0x20>)
 8010726:	f7fb fe3b 	bl	800c3a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801072a:	4905      	ldr	r1, [pc, #20]	; (8010740 <CDC_Init_FS+0x24>)
 801072c:	4803      	ldr	r0, [pc, #12]	; (801073c <CDC_Init_FS+0x20>)
 801072e:	f7fb fe59 	bl	800c3e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010734:	4618      	mov	r0, r3
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20011438 	.word	0x20011438
 801073c:	2001095c 	.word	0x2001095c
 8010740:	20010c38 	.word	0x20010c38

08010744 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010744:	b480      	push	{r7}
 8010746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010748:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801074a:	4618      	mov	r0, r3
 801074c:	46bd      	mov	sp, r7
 801074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010752:	4770      	bx	lr

08010754 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	4603      	mov	r3, r0
 801075c:	6039      	str	r1, [r7, #0]
 801075e:	71fb      	strb	r3, [r7, #7]
 8010760:	4613      	mov	r3, r2
 8010762:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010764:	79fb      	ldrb	r3, [r7, #7]
 8010766:	2b23      	cmp	r3, #35	; 0x23
 8010768:	d84a      	bhi.n	8010800 <CDC_Control_FS+0xac>
 801076a:	a201      	add	r2, pc, #4	; (adr r2, 8010770 <CDC_Control_FS+0x1c>)
 801076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010770:	08010801 	.word	0x08010801
 8010774:	08010801 	.word	0x08010801
 8010778:	08010801 	.word	0x08010801
 801077c:	08010801 	.word	0x08010801
 8010780:	08010801 	.word	0x08010801
 8010784:	08010801 	.word	0x08010801
 8010788:	08010801 	.word	0x08010801
 801078c:	08010801 	.word	0x08010801
 8010790:	08010801 	.word	0x08010801
 8010794:	08010801 	.word	0x08010801
 8010798:	08010801 	.word	0x08010801
 801079c:	08010801 	.word	0x08010801
 80107a0:	08010801 	.word	0x08010801
 80107a4:	08010801 	.word	0x08010801
 80107a8:	08010801 	.word	0x08010801
 80107ac:	08010801 	.word	0x08010801
 80107b0:	08010801 	.word	0x08010801
 80107b4:	08010801 	.word	0x08010801
 80107b8:	08010801 	.word	0x08010801
 80107bc:	08010801 	.word	0x08010801
 80107c0:	08010801 	.word	0x08010801
 80107c4:	08010801 	.word	0x08010801
 80107c8:	08010801 	.word	0x08010801
 80107cc:	08010801 	.word	0x08010801
 80107d0:	08010801 	.word	0x08010801
 80107d4:	08010801 	.word	0x08010801
 80107d8:	08010801 	.word	0x08010801
 80107dc:	08010801 	.word	0x08010801
 80107e0:	08010801 	.word	0x08010801
 80107e4:	08010801 	.word	0x08010801
 80107e8:	08010801 	.word	0x08010801
 80107ec:	08010801 	.word	0x08010801
 80107f0:	08010801 	.word	0x08010801
 80107f4:	08010801 	.word	0x08010801
 80107f8:	08010801 	.word	0x08010801
 80107fc:	08010801 	.word	0x08010801
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010800:	bf00      	nop
  }

  return (USBD_OK);
 8010802:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801081a:	6879      	ldr	r1, [r7, #4]
 801081c:	4805      	ldr	r0, [pc, #20]	; (8010834 <CDC_Receive_FS+0x24>)
 801081e:	f7fb fde1 	bl	800c3e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010822:	4804      	ldr	r0, [pc, #16]	; (8010834 <CDC_Receive_FS+0x24>)
 8010824:	f7fb fdfc 	bl	800c420 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010828:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801082a:	4618      	mov	r0, r3
 801082c:	3708      	adds	r7, #8
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}
 8010832:	bf00      	nop
 8010834:	2001095c 	.word	0x2001095c

08010838 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010838:	b480      	push	{r7}
 801083a:	b087      	sub	sp, #28
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	4613      	mov	r3, r2
 8010844:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801084a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801084e:	4618      	mov	r0, r3
 8010850:	371c      	adds	r7, #28
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr
	...

0801085c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	6039      	str	r1, [r7, #0]
 8010866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2212      	movs	r2, #18
 801086c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801086e:	4b03      	ldr	r3, [pc, #12]	; (801087c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010870:	4618      	mov	r0, r3
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	200000d4 	.word	0x200000d4

08010880 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010880:	b480      	push	{r7}
 8010882:	b083      	sub	sp, #12
 8010884:	af00      	add	r7, sp, #0
 8010886:	4603      	mov	r3, r0
 8010888:	6039      	str	r1, [r7, #0]
 801088a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2204      	movs	r2, #4
 8010890:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010892:	4b03      	ldr	r3, [pc, #12]	; (80108a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010894:	4618      	mov	r0, r3
 8010896:	370c      	adds	r7, #12
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr
 80108a0:	200000f4 	.word	0x200000f4

080108a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	4603      	mov	r3, r0
 80108ac:	6039      	str	r1, [r7, #0]
 80108ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d105      	bne.n	80108c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	4907      	ldr	r1, [pc, #28]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80108ba:	4808      	ldr	r0, [pc, #32]	; (80108dc <USBD_FS_ProductStrDescriptor+0x38>)
 80108bc:	f7fd f822 	bl	800d904 <USBD_GetString>
 80108c0:	e004      	b.n	80108cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	4904      	ldr	r1, [pc, #16]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80108c6:	4805      	ldr	r0, [pc, #20]	; (80108dc <USBD_FS_ProductStrDescriptor+0x38>)
 80108c8:	f7fd f81c 	bl	800d904 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108cc:	4b02      	ldr	r3, [pc, #8]	; (80108d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	20011c38 	.word	0x20011c38
 80108dc:	0802424c 	.word	0x0802424c

080108e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	4603      	mov	r3, r0
 80108e8:	6039      	str	r1, [r7, #0]
 80108ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	4904      	ldr	r1, [pc, #16]	; (8010900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80108f0:	4804      	ldr	r0, [pc, #16]	; (8010904 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80108f2:	f7fd f807 	bl	800d904 <USBD_GetString>
  return USBD_StrDesc;
 80108f6:	4b02      	ldr	r3, [pc, #8]	; (8010900 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	20011c38 	.word	0x20011c38
 8010904:	08024264 	.word	0x08024264

08010908 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	4603      	mov	r3, r0
 8010910:	6039      	str	r1, [r7, #0]
 8010912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	221a      	movs	r2, #26
 8010918:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801091a:	f000 f855 	bl	80109c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801091e:	4b02      	ldr	r3, [pc, #8]	; (8010928 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010920:	4618      	mov	r0, r3
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	200000f8 	.word	0x200000f8

0801092c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	4603      	mov	r3, r0
 8010934:	6039      	str	r1, [r7, #0]
 8010936:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010938:	79fb      	ldrb	r3, [r7, #7]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d105      	bne.n	801094a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801093e:	683a      	ldr	r2, [r7, #0]
 8010940:	4907      	ldr	r1, [pc, #28]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010942:	4808      	ldr	r0, [pc, #32]	; (8010964 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010944:	f7fc ffde 	bl	800d904 <USBD_GetString>
 8010948:	e004      	b.n	8010954 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801094a:	683a      	ldr	r2, [r7, #0]
 801094c:	4904      	ldr	r1, [pc, #16]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x34>)
 801094e:	4805      	ldr	r0, [pc, #20]	; (8010964 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010950:	f7fc ffd8 	bl	800d904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010954:	4b02      	ldr	r3, [pc, #8]	; (8010960 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010956:	4618      	mov	r0, r3
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	20011c38 	.word	0x20011c38
 8010964:	08024278 	.word	0x08024278

08010968 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	4603      	mov	r3, r0
 8010970:	6039      	str	r1, [r7, #0]
 8010972:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010974:	79fb      	ldrb	r3, [r7, #7]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d105      	bne.n	8010986 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801097a:	683a      	ldr	r2, [r7, #0]
 801097c:	4907      	ldr	r1, [pc, #28]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801097e:	4808      	ldr	r0, [pc, #32]	; (80109a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010980:	f7fc ffc0 	bl	800d904 <USBD_GetString>
 8010984:	e004      	b.n	8010990 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	4904      	ldr	r1, [pc, #16]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801098a:	4805      	ldr	r0, [pc, #20]	; (80109a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801098c:	f7fc ffba 	bl	800d904 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010990:	4b02      	ldr	r3, [pc, #8]	; (801099c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010992:	4618      	mov	r0, r3
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20011c38 	.word	0x20011c38
 80109a0:	08024284 	.word	0x08024284

080109a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	4603      	mov	r3, r0
 80109ac:	6039      	str	r1, [r7, #0]
 80109ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	220c      	movs	r2, #12
 80109b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80109b6:	4b03      	ldr	r3, [pc, #12]	; (80109c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr
 80109c4:	200000e8 	.word	0x200000e8

080109c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80109ce:	4b0f      	ldr	r3, [pc, #60]	; (8010a0c <Get_SerialNum+0x44>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80109d4:	4b0e      	ldr	r3, [pc, #56]	; (8010a10 <Get_SerialNum+0x48>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80109da:	4b0e      	ldr	r3, [pc, #56]	; (8010a14 <Get_SerialNum+0x4c>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4413      	add	r3, r2
 80109e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d009      	beq.n	8010a02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80109ee:	2208      	movs	r2, #8
 80109f0:	4909      	ldr	r1, [pc, #36]	; (8010a18 <Get_SerialNum+0x50>)
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f000 f814 	bl	8010a20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80109f8:	2204      	movs	r2, #4
 80109fa:	4908      	ldr	r1, [pc, #32]	; (8010a1c <Get_SerialNum+0x54>)
 80109fc:	68b8      	ldr	r0, [r7, #8]
 80109fe:	f000 f80f 	bl	8010a20 <IntToUnicode>
  }
}
 8010a02:	bf00      	nop
 8010a04:	3710      	adds	r7, #16
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	1ff0f420 	.word	0x1ff0f420
 8010a10:	1ff0f424 	.word	0x1ff0f424
 8010a14:	1ff0f428 	.word	0x1ff0f428
 8010a18:	200000fa 	.word	0x200000fa
 8010a1c:	2000010a 	.word	0x2000010a

08010a20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b087      	sub	sp, #28
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010a32:	2300      	movs	r3, #0
 8010a34:	75fb      	strb	r3, [r7, #23]
 8010a36:	e027      	b.n	8010a88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	0f1b      	lsrs	r3, r3, #28
 8010a3c:	2b09      	cmp	r3, #9
 8010a3e:	d80b      	bhi.n	8010a58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	0f1b      	lsrs	r3, r3, #28
 8010a44:	b2da      	uxtb	r2, r3
 8010a46:	7dfb      	ldrb	r3, [r7, #23]
 8010a48:	005b      	lsls	r3, r3, #1
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	440b      	add	r3, r1
 8010a50:	3230      	adds	r2, #48	; 0x30
 8010a52:	b2d2      	uxtb	r2, r2
 8010a54:	701a      	strb	r2, [r3, #0]
 8010a56:	e00a      	b.n	8010a6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	0f1b      	lsrs	r3, r3, #28
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	4619      	mov	r1, r3
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	440b      	add	r3, r1
 8010a68:	3237      	adds	r2, #55	; 0x37
 8010a6a:	b2d2      	uxtb	r2, r2
 8010a6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	011b      	lsls	r3, r3, #4
 8010a72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a74:	7dfb      	ldrb	r3, [r7, #23]
 8010a76:	005b      	lsls	r3, r3, #1
 8010a78:	3301      	adds	r3, #1
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
 8010a84:	3301      	adds	r3, #1
 8010a86:	75fb      	strb	r3, [r7, #23]
 8010a88:	7dfa      	ldrb	r2, [r7, #23]
 8010a8a:	79fb      	ldrb	r3, [r7, #7]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d3d3      	bcc.n	8010a38 <IntToUnicode+0x18>
  }
}
 8010a90:	bf00      	nop
 8010a92:	bf00      	nop
 8010a94:	371c      	adds	r7, #28
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
	...

08010aa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b0ae      	sub	sp, #184	; 0xb8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010aa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010aac:	2200      	movs	r2, #0
 8010aae:	601a      	str	r2, [r3, #0]
 8010ab0:	605a      	str	r2, [r3, #4]
 8010ab2:	609a      	str	r2, [r3, #8]
 8010ab4:	60da      	str	r2, [r3, #12]
 8010ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010ab8:	f107 0314 	add.w	r3, r7, #20
 8010abc:	2290      	movs	r2, #144	; 0x90
 8010abe:	2100      	movs	r1, #0
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f010 f82b 	bl	8020b1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ace:	d151      	bne.n	8010b74 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010ad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010ad4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010adc:	f107 0314 	add.w	r3, r7, #20
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7f6 ff97 	bl	8007a14 <HAL_RCCEx_PeriphCLKConfig>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d001      	beq.n	8010af0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8010aec:	f7f2 fc63 	bl	80033b6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010af0:	4b22      	ldr	r3, [pc, #136]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af4:	4a21      	ldr	r2, [pc, #132]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010af6:	f043 0301 	orr.w	r3, r3, #1
 8010afa:	6313      	str	r3, [r2, #48]	; 0x30
 8010afc:	4b1f      	ldr	r3, [pc, #124]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	613b      	str	r3, [r7, #16]
 8010b06:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010b08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b10:	2302      	movs	r3, #2
 8010b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b16:	2300      	movs	r3, #0
 8010b18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010b22:	230a      	movs	r3, #10
 8010b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010b28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	4814      	ldr	r0, [pc, #80]	; (8010b80 <HAL_PCD_MspInit+0xe0>)
 8010b30:	f7f4 fd82 	bl	8005638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010b34:	4b11      	ldr	r3, [pc, #68]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b38:	4a10      	ldr	r2, [pc, #64]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b3e:	6353      	str	r3, [r2, #52]	; 0x34
 8010b40:	4b0e      	ldr	r3, [pc, #56]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b48:	60fb      	str	r3, [r7, #12]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	4b0b      	ldr	r3, [pc, #44]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b50:	4a0a      	ldr	r2, [pc, #40]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010b56:	6453      	str	r3, [r2, #68]	; 0x44
 8010b58:	4b08      	ldr	r3, [pc, #32]	; (8010b7c <HAL_PCD_MspInit+0xdc>)
 8010b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b60:	60bb      	str	r3, [r7, #8]
 8010b62:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010b64:	2200      	movs	r2, #0
 8010b66:	2105      	movs	r1, #5
 8010b68:	2043      	movs	r0, #67	; 0x43
 8010b6a:	f7f4 f925 	bl	8004db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010b6e:	2043      	movs	r0, #67	; 0x43
 8010b70:	f7f4 f93e 	bl	8004df0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010b74:	bf00      	nop
 8010b76:	37b8      	adds	r7, #184	; 0xb8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	40023800 	.word	0x40023800
 8010b80:	40020000 	.word	0x40020000

08010b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	f7fb fd29 	bl	800c5f2 <USBD_LL_SetupStage>
}
 8010ba0:	bf00      	nop
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010bba:	78fa      	ldrb	r2, [r7, #3]
 8010bbc:	6879      	ldr	r1, [r7, #4]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	00db      	lsls	r3, r3, #3
 8010bc2:	4413      	add	r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	440b      	add	r3, r1
 8010bc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	78fb      	ldrb	r3, [r7, #3]
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	f7fb fd63 	bl	800c69c <USBD_LL_DataOutStage>
}
 8010bd6:	bf00      	nop
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b082      	sub	sp, #8
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	460b      	mov	r3, r1
 8010be8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8010bf0:	78fa      	ldrb	r2, [r7, #3]
 8010bf2:	6879      	ldr	r1, [r7, #4]
 8010bf4:	4613      	mov	r3, r2
 8010bf6:	00db      	lsls	r3, r3, #3
 8010bf8:	4413      	add	r3, r2
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	440b      	add	r3, r1
 8010bfe:	334c      	adds	r3, #76	; 0x4c
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	78fb      	ldrb	r3, [r7, #3]
 8010c04:	4619      	mov	r1, r3
 8010c06:	f7fb fdfc 	bl	800c802 <USBD_LL_DataInStage>
}
 8010c0a:	bf00      	nop
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b082      	sub	sp, #8
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fb ff30 	bl	800ca86 <USBD_LL_SOF>
}
 8010c26:	bf00      	nop
 8010c28:	3708      	adds	r7, #8
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b084      	sub	sp, #16
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010c36:	2301      	movs	r3, #1
 8010c38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d102      	bne.n	8010c48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010c42:	2300      	movs	r3, #0
 8010c44:	73fb      	strb	r3, [r7, #15]
 8010c46:	e008      	b.n	8010c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	d102      	bne.n	8010c56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010c50:	2301      	movs	r3, #1
 8010c52:	73fb      	strb	r3, [r7, #15]
 8010c54:	e001      	b.n	8010c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010c56:	f7f2 fbae 	bl	80033b6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010c60:	7bfa      	ldrb	r2, [r7, #15]
 8010c62:	4611      	mov	r1, r2
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fb fed0 	bl	800ca0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7fb fe78 	bl	800c966 <USBD_LL_Reset>
}
 8010c76:	bf00      	nop
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
	...

08010c80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fb fecb 	bl	800ca2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	6812      	ldr	r2, [r2, #0]
 8010ca2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ca6:	f043 0301 	orr.w	r3, r3, #1
 8010caa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6a1b      	ldr	r3, [r3, #32]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d005      	beq.n	8010cc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010cb4:	4b04      	ldr	r3, [pc, #16]	; (8010cc8 <HAL_PCD_SuspendCallback+0x48>)
 8010cb6:	691b      	ldr	r3, [r3, #16]
 8010cb8:	4a03      	ldr	r2, [pc, #12]	; (8010cc8 <HAL_PCD_SuspendCallback+0x48>)
 8010cba:	f043 0306 	orr.w	r3, r3, #6
 8010cbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010cc0:	bf00      	nop
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	e000ed00 	.word	0xe000ed00

08010ccc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fb febb 	bl	800ca56 <USBD_LL_Resume>
}
 8010ce0:	bf00      	nop
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010cfa:	78fa      	ldrb	r2, [r7, #3]
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fb ff13 	bl	800cb2a <USBD_LL_IsoOUTIncomplete>
}
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	460b      	mov	r3, r1
 8010d16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010d1e:	78fa      	ldrb	r2, [r7, #3]
 8010d20:	4611      	mov	r1, r2
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fb fecf 	bl	800cac6 <USBD_LL_IsoINIncomplete>
}
 8010d28:	bf00      	nop
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fb ff25 	bl	800cb8e <USBD_LL_DevConnected>
}
 8010d44:	bf00      	nop
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7fb ff22 	bl	800cba4 <USBD_LL_DevDisconnected>
}
 8010d60:	bf00      	nop
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b082      	sub	sp, #8
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d13c      	bne.n	8010df2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010d78:	4a20      	ldr	r2, [pc, #128]	; (8010dfc <USBD_LL_Init+0x94>)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4a1e      	ldr	r2, [pc, #120]	; (8010dfc <USBD_LL_Init+0x94>)
 8010d84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d88:	4b1c      	ldr	r3, [pc, #112]	; (8010dfc <USBD_LL_Init+0x94>)
 8010d8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010d8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010d90:	4b1a      	ldr	r3, [pc, #104]	; (8010dfc <USBD_LL_Init+0x94>)
 8010d92:	2206      	movs	r2, #6
 8010d94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d96:	4b19      	ldr	r3, [pc, #100]	; (8010dfc <USBD_LL_Init+0x94>)
 8010d98:	2202      	movs	r2, #2
 8010d9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d9c:	4b17      	ldr	r3, [pc, #92]	; (8010dfc <USBD_LL_Init+0x94>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010da2:	4b16      	ldr	r3, [pc, #88]	; (8010dfc <USBD_LL_Init+0x94>)
 8010da4:	2202      	movs	r2, #2
 8010da6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010da8:	4b14      	ldr	r3, [pc, #80]	; (8010dfc <USBD_LL_Init+0x94>)
 8010daa:	2200      	movs	r2, #0
 8010dac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010dae:	4b13      	ldr	r3, [pc, #76]	; (8010dfc <USBD_LL_Init+0x94>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010db4:	4b11      	ldr	r3, [pc, #68]	; (8010dfc <USBD_LL_Init+0x94>)
 8010db6:	2200      	movs	r2, #0
 8010db8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010dba:	4b10      	ldr	r3, [pc, #64]	; (8010dfc <USBD_LL_Init+0x94>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010dc0:	4b0e      	ldr	r3, [pc, #56]	; (8010dfc <USBD_LL_Init+0x94>)
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010dc6:	480d      	ldr	r0, [pc, #52]	; (8010dfc <USBD_LL_Init+0x94>)
 8010dc8:	f7f4 fe15 	bl	80059f6 <HAL_PCD_Init>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010dd2:	f7f2 faf0 	bl	80033b6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010dd6:	2180      	movs	r1, #128	; 0x80
 8010dd8:	4808      	ldr	r0, [pc, #32]	; (8010dfc <USBD_LL_Init+0x94>)
 8010dda:	f7f6 f890 	bl	8006efe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010dde:	2240      	movs	r2, #64	; 0x40
 8010de0:	2100      	movs	r1, #0
 8010de2:	4806      	ldr	r0, [pc, #24]	; (8010dfc <USBD_LL_Init+0x94>)
 8010de4:	f7f6 f844 	bl	8006e70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010de8:	2280      	movs	r2, #128	; 0x80
 8010dea:	2101      	movs	r1, #1
 8010dec:	4803      	ldr	r0, [pc, #12]	; (8010dfc <USBD_LL_Init+0x94>)
 8010dee:	f7f6 f83f 	bl	8006e70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	20011e38 	.word	0x20011e38

08010e00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7f4 ff11 	bl	8005c3e <HAL_PCD_Start>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e20:	7bfb      	ldrb	r3, [r7, #15]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f000 f97e 	bl	8011124 <USBD_Get_USB_Status>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b084      	sub	sp, #16
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	4608      	mov	r0, r1
 8010e40:	4611      	mov	r1, r2
 8010e42:	461a      	mov	r2, r3
 8010e44:	4603      	mov	r3, r0
 8010e46:	70fb      	strb	r3, [r7, #3]
 8010e48:	460b      	mov	r3, r1
 8010e4a:	70bb      	strb	r3, [r7, #2]
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e50:	2300      	movs	r3, #0
 8010e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e54:	2300      	movs	r3, #0
 8010e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010e5e:	78bb      	ldrb	r3, [r7, #2]
 8010e60:	883a      	ldrh	r2, [r7, #0]
 8010e62:	78f9      	ldrb	r1, [r7, #3]
 8010e64:	f7f5 fbfe 	bl	8006664 <HAL_PCD_EP_Open>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e6c:	7bfb      	ldrb	r3, [r7, #15]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f000 f958 	bl	8011124 <USBD_Get_USB_Status>
 8010e74:	4603      	mov	r3, r0
 8010e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3710      	adds	r7, #16
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e82:	b580      	push	{r7, lr}
 8010e84:	b084      	sub	sp, #16
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
 8010e8a:	460b      	mov	r3, r1
 8010e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e92:	2300      	movs	r3, #0
 8010e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e9c:	78fa      	ldrb	r2, [r7, #3]
 8010e9e:	4611      	mov	r1, r2
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7f5 fc47 	bl	8006734 <HAL_PCD_EP_Close>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010eaa:	7bfb      	ldrb	r3, [r7, #15]
 8010eac:	4618      	mov	r0, r3
 8010eae:	f000 f939 	bl	8011124 <USBD_Get_USB_Status>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3710      	adds	r7, #16
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010eda:	78fa      	ldrb	r2, [r7, #3]
 8010edc:	4611      	mov	r1, r2
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7f5 fd1f 	bl	8006922 <HAL_PCD_EP_SetStall>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ee8:	7bfb      	ldrb	r3, [r7, #15]
 8010eea:	4618      	mov	r0, r3
 8010eec:	f000 f91a 	bl	8011124 <USBD_Get_USB_Status>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3710      	adds	r7, #16
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b084      	sub	sp, #16
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
 8010f06:	460b      	mov	r3, r1
 8010f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f18:	78fa      	ldrb	r2, [r7, #3]
 8010f1a:	4611      	mov	r1, r2
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7f5 fd64 	bl	80069ea <HAL_PCD_EP_ClrStall>
 8010f22:	4603      	mov	r3, r0
 8010f24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f26:	7bfb      	ldrb	r3, [r7, #15]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f000 f8fb 	bl	8011124 <USBD_Get_USB_Status>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f32:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3710      	adds	r7, #16
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b085      	sub	sp, #20
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	460b      	mov	r3, r1
 8010f46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	da0b      	bge.n	8010f70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f58:	78fb      	ldrb	r3, [r7, #3]
 8010f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f5e:	68f9      	ldr	r1, [r7, #12]
 8010f60:	4613      	mov	r3, r2
 8010f62:	00db      	lsls	r3, r3, #3
 8010f64:	4413      	add	r3, r2
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	440b      	add	r3, r1
 8010f6a:	333e      	adds	r3, #62	; 0x3e
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	e00b      	b.n	8010f88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f70:	78fb      	ldrb	r3, [r7, #3]
 8010f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f76:	68f9      	ldr	r1, [r7, #12]
 8010f78:	4613      	mov	r3, r2
 8010f7a:	00db      	lsls	r3, r3, #3
 8010f7c:	4413      	add	r3, r2
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	440b      	add	r3, r1
 8010f82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010f86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3714      	adds	r7, #20
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010fae:	78fa      	ldrb	r2, [r7, #3]
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7f5 fb31 	bl	800661a <HAL_PCD_SetAddress>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fbc:	7bfb      	ldrb	r3, [r7, #15]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f000 f8b0 	bl	8011124 <USBD_Get_USB_Status>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b086      	sub	sp, #24
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	60f8      	str	r0, [r7, #12]
 8010fda:	607a      	str	r2, [r7, #4]
 8010fdc:	603b      	str	r3, [r7, #0]
 8010fde:	460b      	mov	r3, r1
 8010fe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010ff0:	7af9      	ldrb	r1, [r7, #11]
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	f7f5 fc4a 	bl	800688e <HAL_PCD_EP_Transmit>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ffe:	7dfb      	ldrb	r3, [r7, #23]
 8011000:	4618      	mov	r0, r3
 8011002:	f000 f88f 	bl	8011124 <USBD_Get_USB_Status>
 8011006:	4603      	mov	r3, r0
 8011008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801100a:	7dbb      	ldrb	r3, [r7, #22]
}
 801100c:	4618      	mov	r0, r3
 801100e:	3718      	adds	r7, #24
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b086      	sub	sp, #24
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	607a      	str	r2, [r7, #4]
 801101e:	603b      	str	r3, [r7, #0]
 8011020:	460b      	mov	r3, r1
 8011022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011024:	2300      	movs	r3, #0
 8011026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011028:	2300      	movs	r3, #0
 801102a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011032:	7af9      	ldrb	r1, [r7, #11]
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	f7f5 fbc6 	bl	80067c8 <HAL_PCD_EP_Receive>
 801103c:	4603      	mov	r3, r0
 801103e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011040:	7dfb      	ldrb	r3, [r7, #23]
 8011042:	4618      	mov	r0, r3
 8011044:	f000 f86e 	bl	8011124 <USBD_Get_USB_Status>
 8011048:	4603      	mov	r3, r0
 801104a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801104c:	7dbb      	ldrb	r3, [r7, #22]
}
 801104e:	4618      	mov	r0, r3
 8011050:	3718      	adds	r7, #24
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}

08011056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b082      	sub	sp, #8
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
 801105e:	460b      	mov	r3, r1
 8011060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011068:	78fa      	ldrb	r2, [r7, #3]
 801106a:	4611      	mov	r1, r2
 801106c:	4618      	mov	r0, r3
 801106e:	f7f5 fbf6 	bl	800685e <HAL_PCD_EP_GetRxCount>
 8011072:	4603      	mov	r3, r0
}
 8011074:	4618      	mov	r0, r3
 8011076:	3708      	adds	r7, #8
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	460b      	mov	r3, r1
 8011086:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011088:	78fb      	ldrb	r3, [r7, #3]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <HAL_PCDEx_LPM_Callback+0x18>
 801108e:	2b01      	cmp	r3, #1
 8011090:	d01f      	beq.n	80110d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011092:	e03b      	b.n	801110c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6a1b      	ldr	r3, [r3, #32]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d007      	beq.n	80110ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801109c:	f000 f83c 	bl	8011118 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80110a0:	4b1c      	ldr	r3, [pc, #112]	; (8011114 <HAL_PCDEx_LPM_Callback+0x98>)
 80110a2:	691b      	ldr	r3, [r3, #16]
 80110a4:	4a1b      	ldr	r2, [pc, #108]	; (8011114 <HAL_PCDEx_LPM_Callback+0x98>)
 80110a6:	f023 0306 	bic.w	r3, r3, #6
 80110aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	6812      	ldr	r2, [r2, #0]
 80110ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80110be:	f023 0301 	bic.w	r3, r3, #1
 80110c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fb fcc3 	bl	800ca56 <USBD_LL_Resume>
    break;
 80110d0:	e01c      	b.n	801110c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	6812      	ldr	r2, [r2, #0]
 80110e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80110e4:	f043 0301 	orr.w	r3, r3, #1
 80110e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fb fc9a 	bl	800ca2a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6a1b      	ldr	r3, [r3, #32]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d005      	beq.n	801110a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80110fe:	4b05      	ldr	r3, [pc, #20]	; (8011114 <HAL_PCDEx_LPM_Callback+0x98>)
 8011100:	691b      	ldr	r3, [r3, #16]
 8011102:	4a04      	ldr	r2, [pc, #16]	; (8011114 <HAL_PCDEx_LPM_Callback+0x98>)
 8011104:	f043 0306 	orr.w	r3, r3, #6
 8011108:	6113      	str	r3, [r2, #16]
    break;
 801110a:	bf00      	nop
}
 801110c:	bf00      	nop
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	e000ed00 	.word	0xe000ed00

08011118 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801111c:	f7f2 f8cc 	bl	80032b8 <SystemClock_Config>
}
 8011120:	bf00      	nop
 8011122:	bd80      	pop	{r7, pc}

08011124 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011124:	b480      	push	{r7}
 8011126:	b085      	sub	sp, #20
 8011128:	af00      	add	r7, sp, #0
 801112a:	4603      	mov	r3, r0
 801112c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801112e:	2300      	movs	r3, #0
 8011130:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011132:	79fb      	ldrb	r3, [r7, #7]
 8011134:	2b03      	cmp	r3, #3
 8011136:	d817      	bhi.n	8011168 <USBD_Get_USB_Status+0x44>
 8011138:	a201      	add	r2, pc, #4	; (adr r2, 8011140 <USBD_Get_USB_Status+0x1c>)
 801113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801113e:	bf00      	nop
 8011140:	08011151 	.word	0x08011151
 8011144:	08011157 	.word	0x08011157
 8011148:	0801115d 	.word	0x0801115d
 801114c:	08011163 	.word	0x08011163
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	73fb      	strb	r3, [r7, #15]
    break;
 8011154:	e00b      	b.n	801116e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011156:	2303      	movs	r3, #3
 8011158:	73fb      	strb	r3, [r7, #15]
    break;
 801115a:	e008      	b.n	801116e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801115c:	2301      	movs	r3, #1
 801115e:	73fb      	strb	r3, [r7, #15]
    break;
 8011160:	e005      	b.n	801116e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011162:	2303      	movs	r3, #3
 8011164:	73fb      	strb	r3, [r7, #15]
    break;
 8011166:	e002      	b.n	801116e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011168:	2303      	movs	r3, #3
 801116a:	73fb      	strb	r3, [r7, #15]
    break;
 801116c:	bf00      	nop
  }
  return usb_status;
 801116e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011170:	4618      	mov	r0, r3
 8011172:	3714      	adds	r7, #20
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 801117c:	4b04      	ldr	r3, [pc, #16]	; (8011190 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	b10a      	cbz	r2, 8011186 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 8011182:	4803      	ldr	r0, [pc, #12]	; (8011190 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 8011184:	4770      	bx	lr
 8011186:	4a03      	ldr	r2, [pc, #12]	; (8011194 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 8011188:	4801      	ldr	r0, [pc, #4]	; (8011190 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 801118a:	6812      	ldr	r2, [r2, #0]
 801118c:	601a      	str	r2, [r3, #0]
 801118e:	4770      	bx	lr
 8011190:	2000011c 	.word	0x2000011c
 8011194:	200008f4 	.word	0x200008f4

08011198 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011198:	4b04      	ldr	r3, [pc, #16]	; (80111ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801119a:	4805      	ldr	r0, [pc, #20]	; (80111b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4905      	ldr	r1, [pc, #20]	; (80111b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 80111a0:	4a05      	ldr	r2, [pc, #20]	; (80111b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 80111a2:	6003      	str	r3, [r0, #0]
 80111a4:	600b      	str	r3, [r1, #0]
 80111a6:	6013      	str	r3, [r2, #0]
 80111a8:	4770      	bx	lr
 80111aa:	bf00      	nop
 80111ac:	200008f4 	.word	0x200008f4
 80111b0:	20000138 	.word	0x20000138
 80111b4:	20000144 	.word	0x20000144
 80111b8:	2000011c 	.word	0x2000011c

080111bc <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 80111bc:	f006 b894 	b.w	80172e8 <custom_test_msgs__srv__AddThreeInts_Request__init>

080111c0 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 80111c0:	f006 b896 	b.w	80172f0 <custom_test_msgs__srv__AddThreeInts_Request__fini>

080111c4 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 80111c4:	f006 b896 	b.w	80172f4 <custom_test_msgs__srv__AddThreeInts_Response__init>

080111c8 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 80111c8:	f006 b898 	b.w	80172fc <custom_test_msgs__srv__AddThreeInts_Response__fini>

080111cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80111cc:	4b04      	ldr	r3, [pc, #16]	; (80111e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	b10a      	cbz	r2, 80111d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 80111d2:	4803      	ldr	r0, [pc, #12]	; (80111e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80111d4:	4770      	bx	lr
 80111d6:	4a03      	ldr	r2, [pc, #12]	; (80111e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 80111d8:	4801      	ldr	r0, [pc, #4]	; (80111e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80111da:	6812      	ldr	r2, [r2, #0]
 80111dc:	601a      	str	r2, [r3, #0]
 80111de:	4770      	bx	lr
 80111e0:	20000204 	.word	0x20000204
 80111e4:	200008f8 	.word	0x200008f8

080111e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 80111e8:	4b04      	ldr	r3, [pc, #16]	; (80111fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	b10a      	cbz	r2, 80111f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 80111ee:	4803      	ldr	r0, [pc, #12]	; (80111fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80111f0:	4770      	bx	lr
 80111f2:	4a03      	ldr	r2, [pc, #12]	; (8011200 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 80111f4:	4801      	ldr	r0, [pc, #4]	; (80111fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 80111f6:	6812      	ldr	r2, [r2, #0]
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	4770      	bx	lr
 80111fc:	2000024c 	.word	0x2000024c
 8011200:	200008f8 	.word	0x200008f8

08011204 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011204:	4b13      	ldr	r3, [pc, #76]	; (8011254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	b132      	cbz	r2, 8011218 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	689a      	ldr	r2, [r3, #8]
 801120e:	b152      	cbz	r2, 8011226 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8011210:	68da      	ldr	r2, [r3, #12]
 8011212:	b182      	cbz	r2, 8011236 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8011214:	480f      	ldr	r0, [pc, #60]	; (8011254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011216:	4770      	bx	lr
 8011218:	4a0f      	ldr	r2, [pc, #60]	; (8011258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801121a:	6812      	ldr	r2, [r2, #0]
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	689a      	ldr	r2, [r3, #8]
 8011222:	2a00      	cmp	r2, #0
 8011224:	d1f4      	bne.n	8011210 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8011226:	4a0d      	ldr	r2, [pc, #52]	; (801125c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8011228:	6811      	ldr	r1, [r2, #0]
 801122a:	b179      	cbz	r1, 801124c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 801122c:	6852      	ldr	r2, [r2, #4]
 801122e:	609a      	str	r2, [r3, #8]
 8011230:	68da      	ldr	r2, [r3, #12]
 8011232:	2a00      	cmp	r2, #0
 8011234:	d1ee      	bne.n	8011214 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 8011236:	4a0a      	ldr	r2, [pc, #40]	; (8011260 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 8011238:	6811      	ldr	r1, [r2, #0]
 801123a:	b119      	cbz	r1, 8011244 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 801123c:	6852      	ldr	r2, [r2, #4]
 801123e:	4805      	ldr	r0, [pc, #20]	; (8011254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011240:	60da      	str	r2, [r3, #12]
 8011242:	4770      	bx	lr
 8011244:	4904      	ldr	r1, [pc, #16]	; (8011258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8011246:	6809      	ldr	r1, [r1, #0]
 8011248:	6011      	str	r1, [r2, #0]
 801124a:	e7f7      	b.n	801123c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 801124c:	4902      	ldr	r1, [pc, #8]	; (8011258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801124e:	6809      	ldr	r1, [r1, #0]
 8011250:	6011      	str	r1, [r2, #0]
 8011252:	e7eb      	b.n	801122c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8011254:	20000268 	.word	0x20000268
 8011258:	200008f8 	.word	0x200008f8
 801125c:	20000204 	.word	0x20000204
 8011260:	2000024c 	.word	0x2000024c

08011264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011264:	4800      	ldr	r0, [pc, #0]	; (8011268 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8011266:	4770      	bx	lr
 8011268:	20000290 	.word	0x20000290

0801126c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 801126c:	4800      	ldr	r0, [pc, #0]	; (8011270 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 801126e:	4770      	bx	lr
 8011270:	2000029c 	.word	0x2000029c

08011274 <_AddThreeInts_Response__max_serialized_size>:
 8011274:	2108      	movs	r1, #8
 8011276:	2000      	movs	r0, #0
 8011278:	b508      	push	{r3, lr}
 801127a:	f001 fee9 	bl	8013050 <ucdr_alignment>
 801127e:	3008      	adds	r0, #8
 8011280:	bd08      	pop	{r3, pc}
 8011282:	bf00      	nop

08011284 <_AddThreeInts_Response__cdr_deserialize>:
 8011284:	b109      	cbz	r1, 801128a <_AddThreeInts_Response__cdr_deserialize+0x6>
 8011286:	f001 bc2f 	b.w	8012ae8 <ucdr_deserialize_int64_t>
 801128a:	4608      	mov	r0, r1
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop

08011290 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 8011290:	b1b8      	cbz	r0, 80112c2 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 8011292:	b538      	push	{r3, r4, r5, lr}
 8011294:	460d      	mov	r5, r1
 8011296:	2108      	movs	r1, #8
 8011298:	4628      	mov	r0, r5
 801129a:	f001 fed9 	bl	8013050 <ucdr_alignment>
 801129e:	f105 0308 	add.w	r3, r5, #8
 80112a2:	2108      	movs	r1, #8
 80112a4:	f1c5 0508 	rsb	r5, r5, #8
 80112a8:	181c      	adds	r4, r3, r0
 80112aa:	4620      	mov	r0, r4
 80112ac:	f001 fed0 	bl	8013050 <ucdr_alignment>
 80112b0:	2108      	movs	r1, #8
 80112b2:	4408      	add	r0, r1
 80112b4:	4404      	add	r4, r0
 80112b6:	4620      	mov	r0, r4
 80112b8:	f001 feca 	bl	8013050 <ucdr_alignment>
 80112bc:	4428      	add	r0, r5
 80112be:	4420      	add	r0, r4
 80112c0:	bd38      	pop	{r3, r4, r5, pc}
 80112c2:	4770      	bx	lr

080112c4 <_AddThreeInts_Response__get_serialized_size>:
 80112c4:	b130      	cbz	r0, 80112d4 <_AddThreeInts_Response__get_serialized_size+0x10>
 80112c6:	2108      	movs	r1, #8
 80112c8:	2000      	movs	r0, #0
 80112ca:	b508      	push	{r3, lr}
 80112cc:	f001 fec0 	bl	8013050 <ucdr_alignment>
 80112d0:	3008      	adds	r0, #8
 80112d2:	bd08      	pop	{r3, pc}
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop

080112d8 <_AddThreeInts_Request__cdr_deserialize>:
 80112d8:	b538      	push	{r3, r4, r5, lr}
 80112da:	460c      	mov	r4, r1
 80112dc:	b171      	cbz	r1, 80112fc <_AddThreeInts_Request__cdr_deserialize+0x24>
 80112de:	4605      	mov	r5, r0
 80112e0:	f001 fc02 	bl	8012ae8 <ucdr_deserialize_int64_t>
 80112e4:	f104 0108 	add.w	r1, r4, #8
 80112e8:	4628      	mov	r0, r5
 80112ea:	f001 fbfd 	bl	8012ae8 <ucdr_deserialize_int64_t>
 80112ee:	f104 0110 	add.w	r1, r4, #16
 80112f2:	4628      	mov	r0, r5
 80112f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112f8:	f001 bbf6 	b.w	8012ae8 <ucdr_deserialize_int64_t>
 80112fc:	4608      	mov	r0, r1
 80112fe:	bd38      	pop	{r3, r4, r5, pc}

08011300 <_AddThreeInts_Request__cdr_serialize>:
 8011300:	b198      	cbz	r0, 801132a <_AddThreeInts_Request__cdr_serialize+0x2a>
 8011302:	b570      	push	{r4, r5, r6, lr}
 8011304:	460d      	mov	r5, r1
 8011306:	4604      	mov	r4, r0
 8011308:	e9d0 2300 	ldrd	r2, r3, [r0]
 801130c:	4608      	mov	r0, r1
 801130e:	f001 fb1b 	bl	8012948 <ucdr_serialize_int64_t>
 8011312:	4628      	mov	r0, r5
 8011314:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011318:	f001 fb16 	bl	8012948 <ucdr_serialize_int64_t>
 801131c:	4628      	mov	r0, r5
 801131e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011326:	f001 bb0f 	b.w	8012948 <ucdr_serialize_int64_t>
 801132a:	4770      	bx	lr

0801132c <_AddThreeInts_Response__cdr_serialize>:
 801132c:	b120      	cbz	r0, 8011338 <_AddThreeInts_Response__cdr_serialize+0xc>
 801132e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011332:	4608      	mov	r0, r1
 8011334:	f001 bb08 	b.w	8012948 <ucdr_serialize_int64_t>
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop

0801133c <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 801133c:	b138      	cbz	r0, 801134e <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 801133e:	b508      	push	{r3, lr}
 8011340:	460b      	mov	r3, r1
 8011342:	2108      	movs	r1, #8
 8011344:	4618      	mov	r0, r3
 8011346:	f001 fe83 	bl	8013050 <ucdr_alignment>
 801134a:	3008      	adds	r0, #8
 801134c:	bd08      	pop	{r3, pc}
 801134e:	4770      	bx	lr

08011350 <_AddThreeInts_Request__get_serialized_size>:
 8011350:	b190      	cbz	r0, 8011378 <_AddThreeInts_Request__get_serialized_size+0x28>
 8011352:	2108      	movs	r1, #8
 8011354:	2000      	movs	r0, #0
 8011356:	b510      	push	{r4, lr}
 8011358:	f001 fe7a 	bl	8013050 <ucdr_alignment>
 801135c:	2108      	movs	r1, #8
 801135e:	1844      	adds	r4, r0, r1
 8011360:	4620      	mov	r0, r4
 8011362:	f001 fe75 	bl	8013050 <ucdr_alignment>
 8011366:	2108      	movs	r1, #8
 8011368:	4408      	add	r0, r1
 801136a:	4404      	add	r4, r0
 801136c:	4620      	mov	r0, r4
 801136e:	f001 fe6f 	bl	8013050 <ucdr_alignment>
 8011372:	3008      	adds	r0, #8
 8011374:	4420      	add	r0, r4
 8011376:	bd10      	pop	{r4, pc}
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop

0801137c <_AddThreeInts_Request__max_serialized_size>:
 801137c:	b538      	push	{r3, r4, r5, lr}
 801137e:	2108      	movs	r1, #8
 8011380:	2000      	movs	r0, #0
 8011382:	f001 fe65 	bl	8013050 <ucdr_alignment>
 8011386:	2108      	movs	r1, #8
 8011388:	1845      	adds	r5, r0, r1
 801138a:	4628      	mov	r0, r5
 801138c:	f001 fe60 	bl	8013050 <ucdr_alignment>
 8011390:	2108      	movs	r1, #8
 8011392:	1844      	adds	r4, r0, r1
 8011394:	442c      	add	r4, r5
 8011396:	4620      	mov	r0, r4
 8011398:	f001 fe5a 	bl	8013050 <ucdr_alignment>
 801139c:	3008      	adds	r0, #8
 801139e:	4420      	add	r0, r4
 80113a0:	bd38      	pop	{r3, r4, r5, pc}
 80113a2:	bf00      	nop

080113a4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80113a4:	4800      	ldr	r0, [pc, #0]	; (80113a8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 80113a6:	4770      	bx	lr
 80113a8:	20000284 	.word	0x20000284

080113ac <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80113ac:	4b04      	ldr	r3, [pc, #16]	; (80113c0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	b10a      	cbz	r2, 80113b6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 80113b2:	4803      	ldr	r0, [pc, #12]	; (80113c0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80113b4:	4770      	bx	lr
 80113b6:	4a03      	ldr	r2, [pc, #12]	; (80113c4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 80113b8:	4801      	ldr	r0, [pc, #4]	; (80113c0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80113ba:	6812      	ldr	r2, [r2, #0]
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	4770      	bx	lr
 80113c0:	200002e8 	.word	0x200002e8
 80113c4:	200008f4 	.word	0x200008f4

080113c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80113c8:	4a02      	ldr	r2, [pc, #8]	; (80113d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 80113ca:	4b03      	ldr	r3, [pc, #12]	; (80113d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 80113cc:	6812      	ldr	r2, [r2, #0]
 80113ce:	601a      	str	r2, [r3, #0]
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	200008f4 	.word	0x200008f4
 80113d8:	200002e8 	.word	0x200002e8

080113dc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80113dc:	4b04      	ldr	r3, [pc, #16]	; (80113f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	b10a      	cbz	r2, 80113e6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 80113e2:	4803      	ldr	r0, [pc, #12]	; (80113f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80113e4:	4770      	bx	lr
 80113e6:	4a03      	ldr	r2, [pc, #12]	; (80113f4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 80113e8:	4801      	ldr	r0, [pc, #4]	; (80113f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 80113ea:	6812      	ldr	r2, [r2, #0]
 80113ec:	601a      	str	r2, [r3, #0]
 80113ee:	4770      	bx	lr
 80113f0:	200002fc 	.word	0x200002fc
 80113f4:	200008f4 	.word	0x200008f4

080113f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80113f8:	4a02      	ldr	r2, [pc, #8]	; (8011404 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 80113fa:	4b03      	ldr	r3, [pc, #12]	; (8011408 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 80113fc:	6812      	ldr	r2, [r2, #0]
 80113fe:	601a      	str	r2, [r3, #0]
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	200008f4 	.word	0x200008f4
 8011408:	200002fc 	.word	0x200002fc

0801140c <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 801140c:	f005 bf78 	b.w	8017300 <drive_msgs__msg__Omni__init>

08011410 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 8011410:	f005 bf88 	b.w	8017324 <drive_msgs__msg__Omni__fini>

08011414 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011414:	4b04      	ldr	r3, [pc, #16]	; (8011428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	b10a      	cbz	r2, 801141e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 801141a:	4803      	ldr	r0, [pc, #12]	; (8011428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 801141c:	4770      	bx	lr
 801141e:	4a03      	ldr	r2, [pc, #12]	; (801142c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011420:	4801      	ldr	r0, [pc, #4]	; (8011428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011422:	6812      	ldr	r2, [r2, #0]
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	4770      	bx	lr
 8011428:	20000434 	.word	0x20000434
 801142c:	200008f8 	.word	0x200008f8

08011430 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 8011430:	f005 bf7c 	b.w	801732c <drive_msgs__msg__OmniEnc__init>

08011434 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 8011434:	f005 bf8c 	b.w	8017350 <drive_msgs__msg__OmniEnc__fini>

08011438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011438:	4b04      	ldr	r3, [pc, #16]	; (801144c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	b10a      	cbz	r2, 8011442 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 801143e:	4803      	ldr	r0, [pc, #12]	; (801144c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011440:	4770      	bx	lr
 8011442:	4a03      	ldr	r2, [pc, #12]	; (8011450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011444:	4801      	ldr	r0, [pc, #4]	; (801144c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011446:	6812      	ldr	r2, [r2, #0]
 8011448:	601a      	str	r2, [r3, #0]
 801144a:	4770      	bx	lr
 801144c:	20000620 	.word	0x20000620
 8011450:	200008f8 	.word	0x200008f8

08011454 <_Omni__cdr_serialize>:
 8011454:	b330      	cbz	r0, 80114a4 <_Omni__cdr_serialize+0x50>
 8011456:	b570      	push	{r4, r5, r6, lr}
 8011458:	6806      	ldr	r6, [r0, #0]
 801145a:	4604      	mov	r4, r0
 801145c:	460d      	mov	r5, r1
 801145e:	b1f6      	cbz	r6, 801149e <_Omni__cdr_serialize+0x4a>
 8011460:	4630      	mov	r0, r6
 8011462:	f7ee ff4d 	bl	8000300 <strlen>
 8011466:	1c42      	adds	r2, r0, #1
 8011468:	4631      	mov	r1, r6
 801146a:	6060      	str	r0, [r4, #4]
 801146c:	4628      	mov	r0, r5
 801146e:	f001 fe5f 	bl	8013130 <ucdr_serialize_sequence_char>
 8011472:	4628      	mov	r0, r5
 8011474:	ed94 0b04 	vldr	d0, [r4, #16]
 8011478:	f001 fbfc 	bl	8012c74 <ucdr_serialize_double>
 801147c:	4628      	mov	r0, r5
 801147e:	ed94 0b06 	vldr	d0, [r4, #24]
 8011482:	f001 fbf7 	bl	8012c74 <ucdr_serialize_double>
 8011486:	4628      	mov	r0, r5
 8011488:	ed94 0b08 	vldr	d0, [r4, #32]
 801148c:	f001 fbf2 	bl	8012c74 <ucdr_serialize_double>
 8011490:	4628      	mov	r0, r5
 8011492:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801149a:	f001 bbeb 	b.w	8012c74 <ucdr_serialize_double>
 801149e:	4632      	mov	r2, r6
 80114a0:	4630      	mov	r0, r6
 80114a2:	e7e1      	b.n	8011468 <_Omni__cdr_serialize+0x14>
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop

080114a8 <get_serialized_size_drive_msgs__msg__Omni>:
 80114a8:	b570      	push	{r4, r5, r6, lr}
 80114aa:	4604      	mov	r4, r0
 80114ac:	b310      	cbz	r0, 80114f4 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 80114ae:	460d      	mov	r5, r1
 80114b0:	2104      	movs	r1, #4
 80114b2:	4628      	mov	r0, r5
 80114b4:	f001 fdcc 	bl	8013050 <ucdr_alignment>
 80114b8:	6866      	ldr	r6, [r4, #4]
 80114ba:	1d6b      	adds	r3, r5, #5
 80114bc:	2108      	movs	r1, #8
 80114be:	f1c5 0508 	rsb	r5, r5, #8
 80114c2:	4433      	add	r3, r6
 80114c4:	181e      	adds	r6, r3, r0
 80114c6:	4630      	mov	r0, r6
 80114c8:	f001 fdc2 	bl	8013050 <ucdr_alignment>
 80114cc:	2108      	movs	r1, #8
 80114ce:	1844      	adds	r4, r0, r1
 80114d0:	4426      	add	r6, r4
 80114d2:	4630      	mov	r0, r6
 80114d4:	f001 fdbc 	bl	8013050 <ucdr_alignment>
 80114d8:	2108      	movs	r1, #8
 80114da:	1844      	adds	r4, r0, r1
 80114dc:	4434      	add	r4, r6
 80114de:	4620      	mov	r0, r4
 80114e0:	f001 fdb6 	bl	8013050 <ucdr_alignment>
 80114e4:	2108      	movs	r1, #8
 80114e6:	4408      	add	r0, r1
 80114e8:	4404      	add	r4, r0
 80114ea:	4620      	mov	r0, r4
 80114ec:	f001 fdb0 	bl	8013050 <ucdr_alignment>
 80114f0:	4428      	add	r0, r5
 80114f2:	4420      	add	r0, r4
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
 80114f6:	bf00      	nop

080114f8 <_Omni__cdr_deserialize>:
 80114f8:	b570      	push	{r4, r5, r6, lr}
 80114fa:	460c      	mov	r4, r1
 80114fc:	b082      	sub	sp, #8
 80114fe:	b329      	cbz	r1, 801154c <_Omni__cdr_deserialize+0x54>
 8011500:	688e      	ldr	r6, [r1, #8]
 8011502:	ab01      	add	r3, sp, #4
 8011504:	6809      	ldr	r1, [r1, #0]
 8011506:	4605      	mov	r5, r0
 8011508:	4632      	mov	r2, r6
 801150a:	f001 fe23 	bl	8013154 <ucdr_deserialize_sequence_char>
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	b9c0      	cbnz	r0, 8011544 <_Omni__cdr_deserialize+0x4c>
 8011512:	429e      	cmp	r6, r3
 8011514:	d31d      	bcc.n	8011552 <_Omni__cdr_deserialize+0x5a>
 8011516:	f104 0110 	add.w	r1, r4, #16
 801151a:	4628      	mov	r0, r5
 801151c:	f001 fc7a 	bl	8012e14 <ucdr_deserialize_double>
 8011520:	f104 0118 	add.w	r1, r4, #24
 8011524:	4628      	mov	r0, r5
 8011526:	f001 fc75 	bl	8012e14 <ucdr_deserialize_double>
 801152a:	f104 0120 	add.w	r1, r4, #32
 801152e:	4628      	mov	r0, r5
 8011530:	f001 fc70 	bl	8012e14 <ucdr_deserialize_double>
 8011534:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011538:	4628      	mov	r0, r5
 801153a:	b002      	add	sp, #8
 801153c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011540:	f001 bc68 	b.w	8012e14 <ucdr_deserialize_double>
 8011544:	b103      	cbz	r3, 8011548 <_Omni__cdr_deserialize+0x50>
 8011546:	3b01      	subs	r3, #1
 8011548:	6063      	str	r3, [r4, #4]
 801154a:	e7e4      	b.n	8011516 <_Omni__cdr_deserialize+0x1e>
 801154c:	4608      	mov	r0, r1
 801154e:	b002      	add	sp, #8
 8011550:	bd70      	pop	{r4, r5, r6, pc}
 8011552:	2101      	movs	r1, #1
 8011554:	75a8      	strb	r0, [r5, #22]
 8011556:	7569      	strb	r1, [r5, #21]
 8011558:	6060      	str	r0, [r4, #4]
 801155a:	4628      	mov	r0, r5
 801155c:	f001 fd90 	bl	8013080 <ucdr_align_to>
 8011560:	9901      	ldr	r1, [sp, #4]
 8011562:	4628      	mov	r0, r5
 8011564:	f001 fdc4 	bl	80130f0 <ucdr_advance_buffer>
 8011568:	e7d5      	b.n	8011516 <_Omni__cdr_deserialize+0x1e>
 801156a:	bf00      	nop

0801156c <_Omni__max_serialized_size>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	2108      	movs	r1, #8
 8011570:	2000      	movs	r0, #0
 8011572:	f001 fd6d 	bl	8013050 <ucdr_alignment>
 8011576:	2108      	movs	r1, #8
 8011578:	1845      	adds	r5, r0, r1
 801157a:	4628      	mov	r0, r5
 801157c:	f001 fd68 	bl	8013050 <ucdr_alignment>
 8011580:	2108      	movs	r1, #8
 8011582:	1844      	adds	r4, r0, r1
 8011584:	442c      	add	r4, r5
 8011586:	4620      	mov	r0, r4
 8011588:	f001 fd62 	bl	8013050 <ucdr_alignment>
 801158c:	2108      	movs	r1, #8
 801158e:	4408      	add	r0, r1
 8011590:	4404      	add	r4, r0
 8011592:	4620      	mov	r0, r4
 8011594:	f001 fd5c 	bl	8013050 <ucdr_alignment>
 8011598:	3008      	adds	r0, #8
 801159a:	4420      	add	r0, r4
 801159c:	bd38      	pop	{r3, r4, r5, pc}
 801159e:	bf00      	nop

080115a0 <_Omni__get_serialized_size>:
 80115a0:	b538      	push	{r3, r4, r5, lr}
 80115a2:	4604      	mov	r4, r0
 80115a4:	b1f0      	cbz	r0, 80115e4 <_Omni__get_serialized_size+0x44>
 80115a6:	2104      	movs	r1, #4
 80115a8:	2000      	movs	r0, #0
 80115aa:	f001 fd51 	bl	8013050 <ucdr_alignment>
 80115ae:	6863      	ldr	r3, [r4, #4]
 80115b0:	2108      	movs	r1, #8
 80115b2:	3305      	adds	r3, #5
 80115b4:	181d      	adds	r5, r3, r0
 80115b6:	4628      	mov	r0, r5
 80115b8:	f001 fd4a 	bl	8013050 <ucdr_alignment>
 80115bc:	2108      	movs	r1, #8
 80115be:	1844      	adds	r4, r0, r1
 80115c0:	4425      	add	r5, r4
 80115c2:	4628      	mov	r0, r5
 80115c4:	f001 fd44 	bl	8013050 <ucdr_alignment>
 80115c8:	2108      	movs	r1, #8
 80115ca:	1844      	adds	r4, r0, r1
 80115cc:	442c      	add	r4, r5
 80115ce:	4620      	mov	r0, r4
 80115d0:	f001 fd3e 	bl	8013050 <ucdr_alignment>
 80115d4:	2108      	movs	r1, #8
 80115d6:	4408      	add	r0, r1
 80115d8:	4404      	add	r4, r0
 80115da:	4620      	mov	r0, r4
 80115dc:	f001 fd38 	bl	8013050 <ucdr_alignment>
 80115e0:	3008      	adds	r0, #8
 80115e2:	4420      	add	r0, r4
 80115e4:	bd38      	pop	{r3, r4, r5, pc}
 80115e6:	bf00      	nop

080115e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80115e8:	4800      	ldr	r0, [pc, #0]	; (80115ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 80115ea:	4770      	bx	lr
 80115ec:	2000062c 	.word	0x2000062c

080115f0 <_OmniEnc__cdr_serialize>:
 80115f0:	b3a8      	cbz	r0, 801165e <_OmniEnc__cdr_serialize+0x6e>
 80115f2:	b570      	push	{r4, r5, r6, lr}
 80115f4:	6806      	ldr	r6, [r0, #0]
 80115f6:	4604      	mov	r4, r0
 80115f8:	460d      	mov	r5, r1
 80115fa:	b36e      	cbz	r6, 8011658 <_OmniEnc__cdr_serialize+0x68>
 80115fc:	4630      	mov	r0, r6
 80115fe:	f7ee fe7f 	bl	8000300 <strlen>
 8011602:	1c42      	adds	r2, r0, #1
 8011604:	4631      	mov	r1, r6
 8011606:	6060      	str	r0, [r4, #4]
 8011608:	4628      	mov	r0, r5
 801160a:	f001 fd91 	bl	8013130 <ucdr_serialize_sequence_char>
 801160e:	4628      	mov	r0, r5
 8011610:	ed94 0b04 	vldr	d0, [r4, #16]
 8011614:	f001 fb2e 	bl	8012c74 <ucdr_serialize_double>
 8011618:	4628      	mov	r0, r5
 801161a:	ed94 0b06 	vldr	d0, [r4, #24]
 801161e:	f001 fb29 	bl	8012c74 <ucdr_serialize_double>
 8011622:	4628      	mov	r0, r5
 8011624:	ed94 0b08 	vldr	d0, [r4, #32]
 8011628:	f001 fb24 	bl	8012c74 <ucdr_serialize_double>
 801162c:	4628      	mov	r0, r5
 801162e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011632:	f001 fb1f 	bl	8012c74 <ucdr_serialize_double>
 8011636:	4628      	mov	r0, r5
 8011638:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 801163c:	f001 fb1a 	bl	8012c74 <ucdr_serialize_double>
 8011640:	4628      	mov	r0, r5
 8011642:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 8011646:	f001 fb15 	bl	8012c74 <ucdr_serialize_double>
 801164a:	4628      	mov	r0, r5
 801164c:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8011650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011654:	f001 bb0e 	b.w	8012c74 <ucdr_serialize_double>
 8011658:	4632      	mov	r2, r6
 801165a:	4630      	mov	r0, r6
 801165c:	e7d2      	b.n	8011604 <_OmniEnc__cdr_serialize+0x14>
 801165e:	4770      	bx	lr

08011660 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 8011660:	b570      	push	{r4, r5, r6, lr}
 8011662:	460c      	mov	r4, r1
 8011664:	4605      	mov	r5, r0
 8011666:	2104      	movs	r1, #4
 8011668:	4620      	mov	r0, r4
 801166a:	f001 fcf1 	bl	8013050 <ucdr_alignment>
 801166e:	686b      	ldr	r3, [r5, #4]
 8011670:	2108      	movs	r1, #8
 8011672:	4423      	add	r3, r4
 8011674:	f1c4 0408 	rsb	r4, r4, #8
 8011678:	3305      	adds	r3, #5
 801167a:	18c6      	adds	r6, r0, r3
 801167c:	4630      	mov	r0, r6
 801167e:	f001 fce7 	bl	8013050 <ucdr_alignment>
 8011682:	2108      	movs	r1, #8
 8011684:	1845      	adds	r5, r0, r1
 8011686:	442e      	add	r6, r5
 8011688:	4630      	mov	r0, r6
 801168a:	f001 fce1 	bl	8013050 <ucdr_alignment>
 801168e:	2108      	movs	r1, #8
 8011690:	1845      	adds	r5, r0, r1
 8011692:	4435      	add	r5, r6
 8011694:	4628      	mov	r0, r5
 8011696:	f001 fcdb 	bl	8013050 <ucdr_alignment>
 801169a:	2108      	movs	r1, #8
 801169c:	4408      	add	r0, r1
 801169e:	4405      	add	r5, r0
 80116a0:	4628      	mov	r0, r5
 80116a2:	f001 fcd5 	bl	8013050 <ucdr_alignment>
 80116a6:	2108      	movs	r1, #8
 80116a8:	4408      	add	r0, r1
 80116aa:	1946      	adds	r6, r0, r5
 80116ac:	4630      	mov	r0, r6
 80116ae:	f001 fccf 	bl	8013050 <ucdr_alignment>
 80116b2:	2108      	movs	r1, #8
 80116b4:	1845      	adds	r5, r0, r1
 80116b6:	4435      	add	r5, r6
 80116b8:	4628      	mov	r0, r5
 80116ba:	f001 fcc9 	bl	8013050 <ucdr_alignment>
 80116be:	2108      	movs	r1, #8
 80116c0:	4408      	add	r0, r1
 80116c2:	4405      	add	r5, r0
 80116c4:	4628      	mov	r0, r5
 80116c6:	f001 fcc3 	bl	8013050 <ucdr_alignment>
 80116ca:	4420      	add	r0, r4
 80116cc:	4428      	add	r0, r5
 80116ce:	bd70      	pop	{r4, r5, r6, pc}

080116d0 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 80116d0:	b108      	cbz	r0, 80116d6 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 80116d2:	f7ff bfc5 	b.w	8011660 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 80116d6:	4770      	bx	lr

080116d8 <_OmniEnc__get_serialized_size>:
 80116d8:	b110      	cbz	r0, 80116e0 <_OmniEnc__get_serialized_size+0x8>
 80116da:	2100      	movs	r1, #0
 80116dc:	f7ff bfc0 	b.w	8011660 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop

080116e4 <_OmniEnc__cdr_deserialize>:
 80116e4:	b570      	push	{r4, r5, r6, lr}
 80116e6:	460c      	mov	r4, r1
 80116e8:	b082      	sub	sp, #8
 80116ea:	b3a1      	cbz	r1, 8011756 <_OmniEnc__cdr_deserialize+0x72>
 80116ec:	688e      	ldr	r6, [r1, #8]
 80116ee:	ab01      	add	r3, sp, #4
 80116f0:	6809      	ldr	r1, [r1, #0]
 80116f2:	4605      	mov	r5, r0
 80116f4:	4632      	mov	r2, r6
 80116f6:	f001 fd2d 	bl	8013154 <ucdr_deserialize_sequence_char>
 80116fa:	9b01      	ldr	r3, [sp, #4]
 80116fc:	bb38      	cbnz	r0, 801174e <_OmniEnc__cdr_deserialize+0x6a>
 80116fe:	429e      	cmp	r6, r3
 8011700:	d32c      	bcc.n	801175c <_OmniEnc__cdr_deserialize+0x78>
 8011702:	f104 0110 	add.w	r1, r4, #16
 8011706:	4628      	mov	r0, r5
 8011708:	f001 fb84 	bl	8012e14 <ucdr_deserialize_double>
 801170c:	f104 0118 	add.w	r1, r4, #24
 8011710:	4628      	mov	r0, r5
 8011712:	f001 fb7f 	bl	8012e14 <ucdr_deserialize_double>
 8011716:	f104 0120 	add.w	r1, r4, #32
 801171a:	4628      	mov	r0, r5
 801171c:	f001 fb7a 	bl	8012e14 <ucdr_deserialize_double>
 8011720:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011724:	4628      	mov	r0, r5
 8011726:	f001 fb75 	bl	8012e14 <ucdr_deserialize_double>
 801172a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801172e:	4628      	mov	r0, r5
 8011730:	f001 fb70 	bl	8012e14 <ucdr_deserialize_double>
 8011734:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011738:	4628      	mov	r0, r5
 801173a:	f001 fb6b 	bl	8012e14 <ucdr_deserialize_double>
 801173e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011742:	4628      	mov	r0, r5
 8011744:	b002      	add	sp, #8
 8011746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801174a:	f001 bb63 	b.w	8012e14 <ucdr_deserialize_double>
 801174e:	b103      	cbz	r3, 8011752 <_OmniEnc__cdr_deserialize+0x6e>
 8011750:	3b01      	subs	r3, #1
 8011752:	6063      	str	r3, [r4, #4]
 8011754:	e7d5      	b.n	8011702 <_OmniEnc__cdr_deserialize+0x1e>
 8011756:	4608      	mov	r0, r1
 8011758:	b002      	add	sp, #8
 801175a:	bd70      	pop	{r4, r5, r6, pc}
 801175c:	2101      	movs	r1, #1
 801175e:	75a8      	strb	r0, [r5, #22]
 8011760:	7569      	strb	r1, [r5, #21]
 8011762:	6060      	str	r0, [r4, #4]
 8011764:	4628      	mov	r0, r5
 8011766:	f001 fc8b 	bl	8013080 <ucdr_align_to>
 801176a:	9901      	ldr	r1, [sp, #4]
 801176c:	4628      	mov	r0, r5
 801176e:	f001 fcbf 	bl	80130f0 <ucdr_advance_buffer>
 8011772:	e7c6      	b.n	8011702 <_OmniEnc__cdr_deserialize+0x1e>

08011774 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	460c      	mov	r4, r1
 8011778:	4603      	mov	r3, r0
 801177a:	2200      	movs	r2, #0
 801177c:	2108      	movs	r1, #8
 801177e:	f104 0508 	add.w	r5, r4, #8
 8011782:	4620      	mov	r0, r4
 8011784:	701a      	strb	r2, [r3, #0]
 8011786:	f1c4 0408 	rsb	r4, r4, #8
 801178a:	f001 fc61 	bl	8013050 <ucdr_alignment>
 801178e:	4405      	add	r5, r0
 8011790:	2108      	movs	r1, #8
 8011792:	4628      	mov	r0, r5
 8011794:	f001 fc5c 	bl	8013050 <ucdr_alignment>
 8011798:	2108      	movs	r1, #8
 801179a:	1846      	adds	r6, r0, r1
 801179c:	442e      	add	r6, r5
 801179e:	4630      	mov	r0, r6
 80117a0:	f001 fc56 	bl	8013050 <ucdr_alignment>
 80117a4:	2108      	movs	r1, #8
 80117a6:	1845      	adds	r5, r0, r1
 80117a8:	442e      	add	r6, r5
 80117aa:	4630      	mov	r0, r6
 80117ac:	f001 fc50 	bl	8013050 <ucdr_alignment>
 80117b0:	2108      	movs	r1, #8
 80117b2:	4408      	add	r0, r1
 80117b4:	4406      	add	r6, r0
 80117b6:	4630      	mov	r0, r6
 80117b8:	f001 fc4a 	bl	8013050 <ucdr_alignment>
 80117bc:	2108      	movs	r1, #8
 80117be:	1845      	adds	r5, r0, r1
 80117c0:	4435      	add	r5, r6
 80117c2:	4628      	mov	r0, r5
 80117c4:	f001 fc44 	bl	8013050 <ucdr_alignment>
 80117c8:	2108      	movs	r1, #8
 80117ca:	4408      	add	r0, r1
 80117cc:	4405      	add	r5, r0
 80117ce:	4628      	mov	r0, r5
 80117d0:	f001 fc3e 	bl	8013050 <ucdr_alignment>
 80117d4:	4420      	add	r0, r4
 80117d6:	4428      	add	r0, r5
 80117d8:	bd70      	pop	{r4, r5, r6, pc}
 80117da:	bf00      	nop

080117dc <_OmniEnc__max_serialized_size>:
 80117dc:	b500      	push	{lr}
 80117de:	b083      	sub	sp, #12
 80117e0:	2100      	movs	r1, #0
 80117e2:	f10d 0007 	add.w	r0, sp, #7
 80117e6:	f7ff ffc5 	bl	8011774 <max_serialized_size_drive_msgs__msg__OmniEnc>
 80117ea:	b003      	add	sp, #12
 80117ec:	f85d fb04 	ldr.w	pc, [sp], #4

080117f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 80117f0:	4800      	ldr	r0, [pc, #0]	; (80117f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 80117f2:	4770      	bx	lr
 80117f4:	20000654 	.word	0x20000654

080117f8 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 80117f8:	4b04      	ldr	r3, [pc, #16]	; (801180c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	b10a      	cbz	r2, 8011802 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 80117fe:	4803      	ldr	r0, [pc, #12]	; (801180c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011800:	4770      	bx	lr
 8011802:	4a03      	ldr	r2, [pc, #12]	; (8011810 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011804:	4801      	ldr	r0, [pc, #4]	; (801180c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011806:	6812      	ldr	r2, [r2, #0]
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	4770      	bx	lr
 801180c:	20000684 	.word	0x20000684
 8011810:	200008f4 	.word	0x200008f4

08011814 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011814:	4a02      	ldr	r2, [pc, #8]	; (8011820 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 8011816:	4b03      	ldr	r3, [pc, #12]	; (8011824 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 8011818:	6812      	ldr	r2, [r2, #0]
 801181a:	601a      	str	r2, [r3, #0]
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	200008f4 	.word	0x200008f4
 8011824:	20000684 	.word	0x20000684

08011828 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 8011828:	f005 bd96 	b.w	8017358 <manip_msgs__msg__Cmd__init>

0801182c <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 801182c:	f005 bd98 	b.w	8017360 <manip_msgs__msg__Cmd__fini>

08011830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011830:	4b04      	ldr	r3, [pc, #16]	; (8011844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	b10a      	cbz	r2, 801183a <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011836:	4803      	ldr	r0, [pc, #12]	; (8011844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011838:	4770      	bx	lr
 801183a:	4a03      	ldr	r2, [pc, #12]	; (8011848 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 801183c:	4801      	ldr	r0, [pc, #4]	; (8011844 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 801183e:	6812      	ldr	r2, [r2, #0]
 8011840:	601a      	str	r2, [r3, #0]
 8011842:	4770      	bx	lr
 8011844:	200008ac 	.word	0x200008ac
 8011848:	200008f8 	.word	0x200008f8

0801184c <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 801184c:	b570      	push	{r4, r5, r6, lr}
 801184e:	2108      	movs	r1, #8
 8011850:	4604      	mov	r4, r0
 8011852:	f001 fbfd 	bl	8013050 <ucdr_alignment>
 8011856:	2108      	movs	r1, #8
 8011858:	1866      	adds	r6, r4, r1
 801185a:	f1c4 0408 	rsb	r4, r4, #8
 801185e:	1985      	adds	r5, r0, r6
 8011860:	4628      	mov	r0, r5
 8011862:	f001 fbf5 	bl	8013050 <ucdr_alignment>
 8011866:	2108      	movs	r1, #8
 8011868:	1846      	adds	r6, r0, r1
 801186a:	442e      	add	r6, r5
 801186c:	4630      	mov	r0, r6
 801186e:	f001 fbef 	bl	8013050 <ucdr_alignment>
 8011872:	2108      	movs	r1, #8
 8011874:	1845      	adds	r5, r0, r1
 8011876:	442e      	add	r6, r5
 8011878:	4630      	mov	r0, r6
 801187a:	f001 fbe9 	bl	8013050 <ucdr_alignment>
 801187e:	2108      	movs	r1, #8
 8011880:	1845      	adds	r5, r0, r1
 8011882:	4435      	add	r5, r6
 8011884:	4628      	mov	r0, r5
 8011886:	f001 fbe3 	bl	8013050 <ucdr_alignment>
 801188a:	2108      	movs	r1, #8
 801188c:	4408      	add	r0, r1
 801188e:	4405      	add	r5, r0
 8011890:	4628      	mov	r0, r5
 8011892:	f001 fbdd 	bl	8013050 <ucdr_alignment>
 8011896:	2108      	movs	r1, #8
 8011898:	4408      	add	r0, r1
 801189a:	1946      	adds	r6, r0, r5
 801189c:	4630      	mov	r0, r6
 801189e:	f001 fbd7 	bl	8013050 <ucdr_alignment>
 80118a2:	2108      	movs	r1, #8
 80118a4:	1845      	adds	r5, r0, r1
 80118a6:	4435      	add	r5, r6
 80118a8:	4628      	mov	r0, r5
 80118aa:	f001 fbd1 	bl	8013050 <ucdr_alignment>
 80118ae:	2108      	movs	r1, #8
 80118b0:	4408      	add	r0, r1
 80118b2:	4405      	add	r5, r0
 80118b4:	4628      	mov	r0, r5
 80118b6:	f001 fbcb 	bl	8013050 <ucdr_alignment>
 80118ba:	4420      	add	r0, r4
 80118bc:	4428      	add	r0, r5
 80118be:	bd70      	pop	{r4, r5, r6, pc}

080118c0 <get_serialized_size_manip_msgs__msg__Cmd>:
 80118c0:	b110      	cbz	r0, 80118c8 <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 80118c2:	4608      	mov	r0, r1
 80118c4:	f7ff bfc2 	b.w	801184c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop

080118cc <_Cmd__get_serialized_size>:
 80118cc:	b110      	cbz	r0, 80118d4 <_Cmd__get_serialized_size+0x8>
 80118ce:	2000      	movs	r0, #0
 80118d0:	f7ff bfbc 	b.w	801184c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 80118d4:	4770      	bx	lr
 80118d6:	bf00      	nop

080118d8 <_Cmd__cdr_deserialize>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	460c      	mov	r4, r1
 80118dc:	b361      	cbz	r1, 8011938 <_Cmd__cdr_deserialize+0x60>
 80118de:	4605      	mov	r5, r0
 80118e0:	f001 f902 	bl	8012ae8 <ucdr_deserialize_int64_t>
 80118e4:	f104 0108 	add.w	r1, r4, #8
 80118e8:	4628      	mov	r0, r5
 80118ea:	f001 f8fd 	bl	8012ae8 <ucdr_deserialize_int64_t>
 80118ee:	f104 0110 	add.w	r1, r4, #16
 80118f2:	4628      	mov	r0, r5
 80118f4:	f001 f8f8 	bl	8012ae8 <ucdr_deserialize_int64_t>
 80118f8:	f104 0118 	add.w	r1, r4, #24
 80118fc:	4628      	mov	r0, r5
 80118fe:	f001 f8f3 	bl	8012ae8 <ucdr_deserialize_int64_t>
 8011902:	f104 0120 	add.w	r1, r4, #32
 8011906:	4628      	mov	r0, r5
 8011908:	f001 f8ee 	bl	8012ae8 <ucdr_deserialize_int64_t>
 801190c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011910:	4628      	mov	r0, r5
 8011912:	f001 f8e9 	bl	8012ae8 <ucdr_deserialize_int64_t>
 8011916:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801191a:	4628      	mov	r0, r5
 801191c:	f001 f8e4 	bl	8012ae8 <ucdr_deserialize_int64_t>
 8011920:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011924:	4628      	mov	r0, r5
 8011926:	f001 f8df 	bl	8012ae8 <ucdr_deserialize_int64_t>
 801192a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 801192e:	4628      	mov	r0, r5
 8011930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011934:	f001 b8d8 	b.w	8012ae8 <ucdr_deserialize_int64_t>
 8011938:	4608      	mov	r0, r1
 801193a:	bd38      	pop	{r3, r4, r5, pc}

0801193c <_Cmd__cdr_serialize>:
 801193c:	b388      	cbz	r0, 80119a2 <_Cmd__cdr_serialize+0x66>
 801193e:	b570      	push	{r4, r5, r6, lr}
 8011940:	460d      	mov	r5, r1
 8011942:	4604      	mov	r4, r0
 8011944:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011948:	4608      	mov	r0, r1
 801194a:	f000 fffd 	bl	8012948 <ucdr_serialize_int64_t>
 801194e:	4628      	mov	r0, r5
 8011950:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011954:	f000 fff8 	bl	8012948 <ucdr_serialize_int64_t>
 8011958:	4628      	mov	r0, r5
 801195a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801195e:	f000 fff3 	bl	8012948 <ucdr_serialize_int64_t>
 8011962:	4628      	mov	r0, r5
 8011964:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011968:	f000 ffee 	bl	8012948 <ucdr_serialize_int64_t>
 801196c:	4628      	mov	r0, r5
 801196e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011972:	f000 ffe9 	bl	8012948 <ucdr_serialize_int64_t>
 8011976:	4628      	mov	r0, r5
 8011978:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801197c:	f000 ffe4 	bl	8012948 <ucdr_serialize_int64_t>
 8011980:	4628      	mov	r0, r5
 8011982:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011986:	f000 ffdf 	bl	8012948 <ucdr_serialize_int64_t>
 801198a:	4628      	mov	r0, r5
 801198c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011990:	f000 ffda 	bl	8012948 <ucdr_serialize_int64_t>
 8011994:	4628      	mov	r0, r5
 8011996:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
 801199a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801199e:	f000 bfd3 	b.w	8012948 <ucdr_serialize_int64_t>
 80119a2:	4770      	bx	lr

080119a4 <max_serialized_size_manip_msgs__msg__Cmd>:
 80119a4:	b570      	push	{r4, r5, r6, lr}
 80119a6:	460c      	mov	r4, r1
 80119a8:	2301      	movs	r3, #1
 80119aa:	2108      	movs	r1, #8
 80119ac:	f104 0608 	add.w	r6, r4, #8
 80119b0:	7003      	strb	r3, [r0, #0]
 80119b2:	4620      	mov	r0, r4
 80119b4:	f1c4 0408 	rsb	r4, r4, #8
 80119b8:	f001 fb4a 	bl	8013050 <ucdr_alignment>
 80119bc:	1985      	adds	r5, r0, r6
 80119be:	2108      	movs	r1, #8
 80119c0:	4628      	mov	r0, r5
 80119c2:	f001 fb45 	bl	8013050 <ucdr_alignment>
 80119c6:	2108      	movs	r1, #8
 80119c8:	1846      	adds	r6, r0, r1
 80119ca:	442e      	add	r6, r5
 80119cc:	4630      	mov	r0, r6
 80119ce:	f001 fb3f 	bl	8013050 <ucdr_alignment>
 80119d2:	2108      	movs	r1, #8
 80119d4:	1845      	adds	r5, r0, r1
 80119d6:	442e      	add	r6, r5
 80119d8:	4630      	mov	r0, r6
 80119da:	f001 fb39 	bl	8013050 <ucdr_alignment>
 80119de:	2108      	movs	r1, #8
 80119e0:	1845      	adds	r5, r0, r1
 80119e2:	4435      	add	r5, r6
 80119e4:	4628      	mov	r0, r5
 80119e6:	f001 fb33 	bl	8013050 <ucdr_alignment>
 80119ea:	2108      	movs	r1, #8
 80119ec:	4408      	add	r0, r1
 80119ee:	4405      	add	r5, r0
 80119f0:	4628      	mov	r0, r5
 80119f2:	f001 fb2d 	bl	8013050 <ucdr_alignment>
 80119f6:	2108      	movs	r1, #8
 80119f8:	4408      	add	r0, r1
 80119fa:	1946      	adds	r6, r0, r5
 80119fc:	4630      	mov	r0, r6
 80119fe:	f001 fb27 	bl	8013050 <ucdr_alignment>
 8011a02:	2108      	movs	r1, #8
 8011a04:	1845      	adds	r5, r0, r1
 8011a06:	4435      	add	r5, r6
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f001 fb21 	bl	8013050 <ucdr_alignment>
 8011a0e:	2108      	movs	r1, #8
 8011a10:	4408      	add	r0, r1
 8011a12:	4405      	add	r5, r0
 8011a14:	4628      	mov	r0, r5
 8011a16:	f001 fb1b 	bl	8013050 <ucdr_alignment>
 8011a1a:	4420      	add	r0, r4
 8011a1c:	4428      	add	r0, r5
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}

08011a20 <_Cmd__max_serialized_size>:
 8011a20:	b500      	push	{lr}
 8011a22:	b083      	sub	sp, #12
 8011a24:	2100      	movs	r1, #0
 8011a26:	f10d 0007 	add.w	r0, sp, #7
 8011a2a:	f7ff ffbb 	bl	80119a4 <max_serialized_size_manip_msgs__msg__Cmd>
 8011a2e:	b003      	add	sp, #12
 8011a30:	f85d fb04 	ldr.w	pc, [sp], #4

08011a34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011a34:	4800      	ldr	r0, [pc, #0]	; (8011a38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 8011a36:	4770      	bx	lr
 8011a38:	200008b8 	.word	0x200008b8

08011a3c <ucdr_serialize_bool>:
 8011a3c:	b538      	push	{r3, r4, r5, lr}
 8011a3e:	460d      	mov	r5, r1
 8011a40:	2101      	movs	r1, #1
 8011a42:	4604      	mov	r4, r0
 8011a44:	f001 fab8 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011a48:	b148      	cbz	r0, 8011a5e <ucdr_serialize_bool+0x22>
 8011a4a:	68a3      	ldr	r3, [r4, #8]
 8011a4c:	2101      	movs	r1, #1
 8011a4e:	701d      	strb	r5, [r3, #0]
 8011a50:	68a2      	ldr	r2, [r4, #8]
 8011a52:	6923      	ldr	r3, [r4, #16]
 8011a54:	440a      	add	r2, r1
 8011a56:	7561      	strb	r1, [r4, #21]
 8011a58:	440b      	add	r3, r1
 8011a5a:	60a2      	str	r2, [r4, #8]
 8011a5c:	6123      	str	r3, [r4, #16]
 8011a5e:	7da0      	ldrb	r0, [r4, #22]
 8011a60:	f080 0001 	eor.w	r0, r0, #1
 8011a64:	bd38      	pop	{r3, r4, r5, pc}
 8011a66:	bf00      	nop

08011a68 <ucdr_deserialize_bool>:
 8011a68:	b538      	push	{r3, r4, r5, lr}
 8011a6a:	460d      	mov	r5, r1
 8011a6c:	2101      	movs	r1, #1
 8011a6e:	4604      	mov	r4, r0
 8011a70:	f001 faa2 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011a74:	b160      	cbz	r0, 8011a90 <ucdr_deserialize_bool+0x28>
 8011a76:	68a2      	ldr	r2, [r4, #8]
 8011a78:	2101      	movs	r1, #1
 8011a7a:	6923      	ldr	r3, [r4, #16]
 8011a7c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011a80:	440b      	add	r3, r1
 8011a82:	3800      	subs	r0, #0
 8011a84:	bf18      	it	ne
 8011a86:	2001      	movne	r0, #1
 8011a88:	7028      	strb	r0, [r5, #0]
 8011a8a:	60a2      	str	r2, [r4, #8]
 8011a8c:	6123      	str	r3, [r4, #16]
 8011a8e:	7561      	strb	r1, [r4, #21]
 8011a90:	7da0      	ldrb	r0, [r4, #22]
 8011a92:	f080 0001 	eor.w	r0, r0, #1
 8011a96:	bd38      	pop	{r3, r4, r5, pc}

08011a98 <ucdr_serialize_uint8_t>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	460d      	mov	r5, r1
 8011a9c:	2101      	movs	r1, #1
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	f001 fa8a 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011aa4:	b148      	cbz	r0, 8011aba <ucdr_serialize_uint8_t+0x22>
 8011aa6:	68a3      	ldr	r3, [r4, #8]
 8011aa8:	2101      	movs	r1, #1
 8011aaa:	701d      	strb	r5, [r3, #0]
 8011aac:	68a2      	ldr	r2, [r4, #8]
 8011aae:	6923      	ldr	r3, [r4, #16]
 8011ab0:	440a      	add	r2, r1
 8011ab2:	7561      	strb	r1, [r4, #21]
 8011ab4:	440b      	add	r3, r1
 8011ab6:	60a2      	str	r2, [r4, #8]
 8011ab8:	6123      	str	r3, [r4, #16]
 8011aba:	7da0      	ldrb	r0, [r4, #22]
 8011abc:	f080 0001 	eor.w	r0, r0, #1
 8011ac0:	bd38      	pop	{r3, r4, r5, pc}
 8011ac2:	bf00      	nop

08011ac4 <ucdr_deserialize_uint8_t>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	460d      	mov	r5, r1
 8011ac8:	2101      	movs	r1, #1
 8011aca:	4604      	mov	r4, r0
 8011acc:	f001 fa74 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011ad0:	b150      	cbz	r0, 8011ae8 <ucdr_deserialize_uint8_t+0x24>
 8011ad2:	68a3      	ldr	r3, [r4, #8]
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	702b      	strb	r3, [r5, #0]
 8011ada:	68a2      	ldr	r2, [r4, #8]
 8011adc:	6923      	ldr	r3, [r4, #16]
 8011ade:	440a      	add	r2, r1
 8011ae0:	7561      	strb	r1, [r4, #21]
 8011ae2:	440b      	add	r3, r1
 8011ae4:	60a2      	str	r2, [r4, #8]
 8011ae6:	6123      	str	r3, [r4, #16]
 8011ae8:	7da0      	ldrb	r0, [r4, #22]
 8011aea:	f080 0001 	eor.w	r0, r0, #1
 8011aee:	bd38      	pop	{r3, r4, r5, pc}

08011af0 <ucdr_serialize_uint16_t>:
 8011af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af4:	460b      	mov	r3, r1
 8011af6:	b082      	sub	sp, #8
 8011af8:	4604      	mov	r4, r0
 8011afa:	2102      	movs	r1, #2
 8011afc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011b00:	f001 faae 	bl	8013060 <ucdr_buffer_alignment>
 8011b04:	4601      	mov	r1, r0
 8011b06:	4620      	mov	r0, r4
 8011b08:	7d67      	ldrb	r7, [r4, #21]
 8011b0a:	f001 faf1 	bl	80130f0 <ucdr_advance_buffer>
 8011b0e:	2102      	movs	r1, #2
 8011b10:	4620      	mov	r0, r4
 8011b12:	f001 fa45 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8011b16:	bb78      	cbnz	r0, 8011b78 <ucdr_serialize_uint16_t+0x88>
 8011b18:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011b1c:	42ab      	cmp	r3, r5
 8011b1e:	d926      	bls.n	8011b6e <ucdr_serialize_uint16_t+0x7e>
 8011b20:	1b5e      	subs	r6, r3, r5
 8011b22:	60a3      	str	r3, [r4, #8]
 8011b24:	6923      	ldr	r3, [r4, #16]
 8011b26:	4620      	mov	r0, r4
 8011b28:	f1c6 0802 	rsb	r8, r6, #2
 8011b2c:	4433      	add	r3, r6
 8011b2e:	4641      	mov	r1, r8
 8011b30:	6123      	str	r3, [r4, #16]
 8011b32:	f001 fa41 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011b36:	2800      	cmp	r0, #0
 8011b38:	d03b      	beq.n	8011bb2 <ucdr_serialize_uint16_t+0xc2>
 8011b3a:	7d23      	ldrb	r3, [r4, #20]
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d04a      	beq.n	8011bd6 <ucdr_serialize_uint16_t+0xe6>
 8011b40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b44:	702b      	strb	r3, [r5, #0]
 8011b46:	2e00      	cmp	r6, #0
 8011b48:	d040      	beq.n	8011bcc <ucdr_serialize_uint16_t+0xdc>
 8011b4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b4e:	706b      	strb	r3, [r5, #1]
 8011b50:	6923      	ldr	r3, [r4, #16]
 8011b52:	2102      	movs	r1, #2
 8011b54:	68a2      	ldr	r2, [r4, #8]
 8011b56:	3302      	adds	r3, #2
 8011b58:	7da0      	ldrb	r0, [r4, #22]
 8011b5a:	4442      	add	r2, r8
 8011b5c:	7561      	strb	r1, [r4, #21]
 8011b5e:	1b9e      	subs	r6, r3, r6
 8011b60:	f080 0001 	eor.w	r0, r0, #1
 8011b64:	60a2      	str	r2, [r4, #8]
 8011b66:	6126      	str	r6, [r4, #16]
 8011b68:	b002      	add	sp, #8
 8011b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b6e:	2102      	movs	r1, #2
 8011b70:	4620      	mov	r0, r4
 8011b72:	f001 fa21 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011b76:	b190      	cbz	r0, 8011b9e <ucdr_serialize_uint16_t+0xae>
 8011b78:	7d23      	ldrb	r3, [r4, #20]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	68a3      	ldr	r3, [r4, #8]
 8011b7e:	d014      	beq.n	8011baa <ucdr_serialize_uint16_t+0xba>
 8011b80:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011b84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b88:	7019      	strb	r1, [r3, #0]
 8011b8a:	68a3      	ldr	r3, [r4, #8]
 8011b8c:	705a      	strb	r2, [r3, #1]
 8011b8e:	2102      	movs	r1, #2
 8011b90:	68a2      	ldr	r2, [r4, #8]
 8011b92:	6923      	ldr	r3, [r4, #16]
 8011b94:	440a      	add	r2, r1
 8011b96:	7561      	strb	r1, [r4, #21]
 8011b98:	440b      	add	r3, r1
 8011b9a:	60a2      	str	r2, [r4, #8]
 8011b9c:	6123      	str	r3, [r4, #16]
 8011b9e:	7da0      	ldrb	r0, [r4, #22]
 8011ba0:	f080 0001 	eor.w	r0, r0, #1
 8011ba4:	b002      	add	sp, #8
 8011ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011baa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011bae:	801a      	strh	r2, [r3, #0]
 8011bb0:	e7ed      	b.n	8011b8e <ucdr_serialize_uint16_t+0x9e>
 8011bb2:	68a2      	ldr	r2, [r4, #8]
 8011bb4:	6923      	ldr	r3, [r4, #16]
 8011bb6:	7da0      	ldrb	r0, [r4, #22]
 8011bb8:	1b92      	subs	r2, r2, r6
 8011bba:	1b9b      	subs	r3, r3, r6
 8011bbc:	7567      	strb	r7, [r4, #21]
 8011bbe:	f080 0001 	eor.w	r0, r0, #1
 8011bc2:	60a2      	str	r2, [r4, #8]
 8011bc4:	6123      	str	r3, [r4, #16]
 8011bc6:	b002      	add	sp, #8
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bcc:	68a3      	ldr	r3, [r4, #8]
 8011bce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011bd2:	701a      	strb	r2, [r3, #0]
 8011bd4:	e7bc      	b.n	8011b50 <ucdr_serialize_uint16_t+0x60>
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	f10d 0506 	add.w	r5, sp, #6
 8011bdc:	4632      	mov	r2, r6
 8011bde:	4629      	mov	r1, r5
 8011be0:	f00f f869 	bl	8020cb6 <memcpy>
 8011be4:	4642      	mov	r2, r8
 8011be6:	19a9      	adds	r1, r5, r6
 8011be8:	68a0      	ldr	r0, [r4, #8]
 8011bea:	f00f f864 	bl	8020cb6 <memcpy>
 8011bee:	e7af      	b.n	8011b50 <ucdr_serialize_uint16_t+0x60>

08011bf0 <ucdr_serialize_endian_uint16_t>:
 8011bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	460d      	mov	r5, r1
 8011bfa:	2102      	movs	r1, #2
 8011bfc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011c00:	f001 fa2e 	bl	8013060 <ucdr_buffer_alignment>
 8011c04:	4601      	mov	r1, r0
 8011c06:	4620      	mov	r0, r4
 8011c08:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011c0c:	f001 fa70 	bl	80130f0 <ucdr_advance_buffer>
 8011c10:	2102      	movs	r1, #2
 8011c12:	4620      	mov	r0, r4
 8011c14:	f001 f9c4 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8011c18:	bb70      	cbnz	r0, 8011c78 <ucdr_serialize_endian_uint16_t+0x88>
 8011c1a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011c1e:	42be      	cmp	r6, r7
 8011c20:	d925      	bls.n	8011c6e <ucdr_serialize_endian_uint16_t+0x7e>
 8011c22:	6923      	ldr	r3, [r4, #16]
 8011c24:	4620      	mov	r0, r4
 8011c26:	60a6      	str	r6, [r4, #8]
 8011c28:	1bf6      	subs	r6, r6, r7
 8011c2a:	4433      	add	r3, r6
 8011c2c:	f1c6 0902 	rsb	r9, r6, #2
 8011c30:	6123      	str	r3, [r4, #16]
 8011c32:	4649      	mov	r1, r9
 8011c34:	f001 f9c0 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	d039      	beq.n	8011cb0 <ucdr_serialize_endian_uint16_t+0xc0>
 8011c3c:	2d01      	cmp	r5, #1
 8011c3e:	d04a      	beq.n	8011cd6 <ucdr_serialize_endian_uint16_t+0xe6>
 8011c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c44:	703b      	strb	r3, [r7, #0]
 8011c46:	2e00      	cmp	r6, #0
 8011c48:	d040      	beq.n	8011ccc <ucdr_serialize_endian_uint16_t+0xdc>
 8011c4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011c4e:	707b      	strb	r3, [r7, #1]
 8011c50:	6923      	ldr	r3, [r4, #16]
 8011c52:	2102      	movs	r1, #2
 8011c54:	68a2      	ldr	r2, [r4, #8]
 8011c56:	7da0      	ldrb	r0, [r4, #22]
 8011c58:	3302      	adds	r3, #2
 8011c5a:	444a      	add	r2, r9
 8011c5c:	7561      	strb	r1, [r4, #21]
 8011c5e:	1b9b      	subs	r3, r3, r6
 8011c60:	f080 0001 	eor.w	r0, r0, #1
 8011c64:	60a2      	str	r2, [r4, #8]
 8011c66:	6123      	str	r3, [r4, #16]
 8011c68:	b003      	add	sp, #12
 8011c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c6e:	2102      	movs	r1, #2
 8011c70:	4620      	mov	r0, r4
 8011c72:	f001 f9a1 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011c76:	b188      	cbz	r0, 8011c9c <ucdr_serialize_endian_uint16_t+0xac>
 8011c78:	2d01      	cmp	r5, #1
 8011c7a:	68a3      	ldr	r3, [r4, #8]
 8011c7c:	d014      	beq.n	8011ca8 <ucdr_serialize_endian_uint16_t+0xb8>
 8011c7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011c82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c86:	7019      	strb	r1, [r3, #0]
 8011c88:	68a3      	ldr	r3, [r4, #8]
 8011c8a:	705a      	strb	r2, [r3, #1]
 8011c8c:	2102      	movs	r1, #2
 8011c8e:	68a2      	ldr	r2, [r4, #8]
 8011c90:	6923      	ldr	r3, [r4, #16]
 8011c92:	440a      	add	r2, r1
 8011c94:	7561      	strb	r1, [r4, #21]
 8011c96:	440b      	add	r3, r1
 8011c98:	60a2      	str	r2, [r4, #8]
 8011c9a:	6123      	str	r3, [r4, #16]
 8011c9c:	7da0      	ldrb	r0, [r4, #22]
 8011c9e:	f080 0001 	eor.w	r0, r0, #1
 8011ca2:	b003      	add	sp, #12
 8011ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ca8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011cac:	801a      	strh	r2, [r3, #0]
 8011cae:	e7ed      	b.n	8011c8c <ucdr_serialize_endian_uint16_t+0x9c>
 8011cb0:	68a2      	ldr	r2, [r4, #8]
 8011cb2:	6923      	ldr	r3, [r4, #16]
 8011cb4:	7da0      	ldrb	r0, [r4, #22]
 8011cb6:	1b92      	subs	r2, r2, r6
 8011cb8:	1b9b      	subs	r3, r3, r6
 8011cba:	f884 8015 	strb.w	r8, [r4, #21]
 8011cbe:	f080 0001 	eor.w	r0, r0, #1
 8011cc2:	60a2      	str	r2, [r4, #8]
 8011cc4:	6123      	str	r3, [r4, #16]
 8011cc6:	b003      	add	sp, #12
 8011cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ccc:	68a3      	ldr	r3, [r4, #8]
 8011cce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011cd2:	701a      	strb	r2, [r3, #0]
 8011cd4:	e7bc      	b.n	8011c50 <ucdr_serialize_endian_uint16_t+0x60>
 8011cd6:	f10d 0506 	add.w	r5, sp, #6
 8011cda:	4632      	mov	r2, r6
 8011cdc:	4638      	mov	r0, r7
 8011cde:	4629      	mov	r1, r5
 8011ce0:	f00e ffe9 	bl	8020cb6 <memcpy>
 8011ce4:	464a      	mov	r2, r9
 8011ce6:	19a9      	adds	r1, r5, r6
 8011ce8:	68a0      	ldr	r0, [r4, #8]
 8011cea:	f00e ffe4 	bl	8020cb6 <memcpy>
 8011cee:	e7af      	b.n	8011c50 <ucdr_serialize_endian_uint16_t+0x60>

08011cf0 <ucdr_deserialize_uint16_t>:
 8011cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	460d      	mov	r5, r1
 8011cf8:	2102      	movs	r1, #2
 8011cfa:	f001 f9b1 	bl	8013060 <ucdr_buffer_alignment>
 8011cfe:	4601      	mov	r1, r0
 8011d00:	4620      	mov	r0, r4
 8011d02:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011d06:	f001 f9f3 	bl	80130f0 <ucdr_advance_buffer>
 8011d0a:	2102      	movs	r1, #2
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	f001 f947 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8011d12:	bb60      	cbnz	r0, 8011d6e <ucdr_deserialize_uint16_t+0x7e>
 8011d14:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011d18:	42be      	cmp	r6, r7
 8011d1a:	d923      	bls.n	8011d64 <ucdr_deserialize_uint16_t+0x74>
 8011d1c:	6923      	ldr	r3, [r4, #16]
 8011d1e:	4620      	mov	r0, r4
 8011d20:	60a6      	str	r6, [r4, #8]
 8011d22:	1bf6      	subs	r6, r6, r7
 8011d24:	4433      	add	r3, r6
 8011d26:	f1c6 0902 	rsb	r9, r6, #2
 8011d2a:	6123      	str	r3, [r4, #16]
 8011d2c:	4649      	mov	r1, r9
 8011d2e:	f001 f943 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d034      	beq.n	8011da0 <ucdr_deserialize_uint16_t+0xb0>
 8011d36:	7d23      	ldrb	r3, [r4, #20]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d042      	beq.n	8011dc2 <ucdr_deserialize_uint16_t+0xd2>
 8011d3c:	787b      	ldrb	r3, [r7, #1]
 8011d3e:	702b      	strb	r3, [r5, #0]
 8011d40:	2e00      	cmp	r6, #0
 8011d42:	d03a      	beq.n	8011dba <ucdr_deserialize_uint16_t+0xca>
 8011d44:	783b      	ldrb	r3, [r7, #0]
 8011d46:	706b      	strb	r3, [r5, #1]
 8011d48:	6923      	ldr	r3, [r4, #16]
 8011d4a:	2102      	movs	r1, #2
 8011d4c:	68a2      	ldr	r2, [r4, #8]
 8011d4e:	3302      	adds	r3, #2
 8011d50:	7da0      	ldrb	r0, [r4, #22]
 8011d52:	444a      	add	r2, r9
 8011d54:	7561      	strb	r1, [r4, #21]
 8011d56:	1b9b      	subs	r3, r3, r6
 8011d58:	f080 0001 	eor.w	r0, r0, #1
 8011d5c:	60a2      	str	r2, [r4, #8]
 8011d5e:	6123      	str	r3, [r4, #16]
 8011d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d64:	2102      	movs	r1, #2
 8011d66:	4620      	mov	r0, r4
 8011d68:	f001 f926 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011d6c:	b180      	cbz	r0, 8011d90 <ucdr_deserialize_uint16_t+0xa0>
 8011d6e:	7d23      	ldrb	r3, [r4, #20]
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	68a3      	ldr	r3, [r4, #8]
 8011d74:	d011      	beq.n	8011d9a <ucdr_deserialize_uint16_t+0xaa>
 8011d76:	785b      	ldrb	r3, [r3, #1]
 8011d78:	702b      	strb	r3, [r5, #0]
 8011d7a:	68a3      	ldr	r3, [r4, #8]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	706b      	strb	r3, [r5, #1]
 8011d80:	2102      	movs	r1, #2
 8011d82:	68a2      	ldr	r2, [r4, #8]
 8011d84:	6923      	ldr	r3, [r4, #16]
 8011d86:	440a      	add	r2, r1
 8011d88:	7561      	strb	r1, [r4, #21]
 8011d8a:	440b      	add	r3, r1
 8011d8c:	60a2      	str	r2, [r4, #8]
 8011d8e:	6123      	str	r3, [r4, #16]
 8011d90:	7da0      	ldrb	r0, [r4, #22]
 8011d92:	f080 0001 	eor.w	r0, r0, #1
 8011d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d9a:	881b      	ldrh	r3, [r3, #0]
 8011d9c:	802b      	strh	r3, [r5, #0]
 8011d9e:	e7ef      	b.n	8011d80 <ucdr_deserialize_uint16_t+0x90>
 8011da0:	68a2      	ldr	r2, [r4, #8]
 8011da2:	6923      	ldr	r3, [r4, #16]
 8011da4:	1b92      	subs	r2, r2, r6
 8011da6:	7da0      	ldrb	r0, [r4, #22]
 8011da8:	1b9b      	subs	r3, r3, r6
 8011daa:	f884 8015 	strb.w	r8, [r4, #21]
 8011dae:	f080 0001 	eor.w	r0, r0, #1
 8011db2:	60a2      	str	r2, [r4, #8]
 8011db4:	6123      	str	r3, [r4, #16]
 8011db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dba:	68a3      	ldr	r3, [r4, #8]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	706b      	strb	r3, [r5, #1]
 8011dc0:	e7c2      	b.n	8011d48 <ucdr_deserialize_uint16_t+0x58>
 8011dc2:	4639      	mov	r1, r7
 8011dc4:	4632      	mov	r2, r6
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	f00e ff75 	bl	8020cb6 <memcpy>
 8011dcc:	464a      	mov	r2, r9
 8011dce:	19a8      	adds	r0, r5, r6
 8011dd0:	68a1      	ldr	r1, [r4, #8]
 8011dd2:	f00e ff70 	bl	8020cb6 <memcpy>
 8011dd6:	e7b7      	b.n	8011d48 <ucdr_deserialize_uint16_t+0x58>

08011dd8 <ucdr_deserialize_endian_uint16_t>:
 8011dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ddc:	4604      	mov	r4, r0
 8011dde:	460e      	mov	r6, r1
 8011de0:	2102      	movs	r1, #2
 8011de2:	4615      	mov	r5, r2
 8011de4:	f001 f93c 	bl	8013060 <ucdr_buffer_alignment>
 8011de8:	4601      	mov	r1, r0
 8011dea:	4620      	mov	r0, r4
 8011dec:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011df0:	f001 f97e 	bl	80130f0 <ucdr_advance_buffer>
 8011df4:	2102      	movs	r1, #2
 8011df6:	4620      	mov	r0, r4
 8011df8:	f001 f8d2 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8011dfc:	bb70      	cbnz	r0, 8011e5c <ucdr_deserialize_endian_uint16_t+0x84>
 8011dfe:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8011e02:	454f      	cmp	r7, r9
 8011e04:	d925      	bls.n	8011e52 <ucdr_deserialize_endian_uint16_t+0x7a>
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	4620      	mov	r0, r4
 8011e0a:	60a7      	str	r7, [r4, #8]
 8011e0c:	eba7 0709 	sub.w	r7, r7, r9
 8011e10:	443b      	add	r3, r7
 8011e12:	f1c7 0a02 	rsb	sl, r7, #2
 8011e16:	6123      	str	r3, [r4, #16]
 8011e18:	4651      	mov	r1, sl
 8011e1a:	f001 f8cd 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d034      	beq.n	8011e8c <ucdr_deserialize_endian_uint16_t+0xb4>
 8011e22:	2e01      	cmp	r6, #1
 8011e24:	d043      	beq.n	8011eae <ucdr_deserialize_endian_uint16_t+0xd6>
 8011e26:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011e2a:	702b      	strb	r3, [r5, #0]
 8011e2c:	2f00      	cmp	r7, #0
 8011e2e:	d03a      	beq.n	8011ea6 <ucdr_deserialize_endian_uint16_t+0xce>
 8011e30:	f899 3000 	ldrb.w	r3, [r9]
 8011e34:	706b      	strb	r3, [r5, #1]
 8011e36:	6923      	ldr	r3, [r4, #16]
 8011e38:	2102      	movs	r1, #2
 8011e3a:	68a2      	ldr	r2, [r4, #8]
 8011e3c:	3302      	adds	r3, #2
 8011e3e:	7da0      	ldrb	r0, [r4, #22]
 8011e40:	4452      	add	r2, sl
 8011e42:	7561      	strb	r1, [r4, #21]
 8011e44:	1bdb      	subs	r3, r3, r7
 8011e46:	f080 0001 	eor.w	r0, r0, #1
 8011e4a:	60a2      	str	r2, [r4, #8]
 8011e4c:	6123      	str	r3, [r4, #16]
 8011e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e52:	2102      	movs	r1, #2
 8011e54:	4620      	mov	r0, r4
 8011e56:	f001 f8af 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011e5a:	b178      	cbz	r0, 8011e7c <ucdr_deserialize_endian_uint16_t+0xa4>
 8011e5c:	2e01      	cmp	r6, #1
 8011e5e:	68a3      	ldr	r3, [r4, #8]
 8011e60:	d011      	beq.n	8011e86 <ucdr_deserialize_endian_uint16_t+0xae>
 8011e62:	785b      	ldrb	r3, [r3, #1]
 8011e64:	702b      	strb	r3, [r5, #0]
 8011e66:	68a3      	ldr	r3, [r4, #8]
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	706b      	strb	r3, [r5, #1]
 8011e6c:	2102      	movs	r1, #2
 8011e6e:	68a2      	ldr	r2, [r4, #8]
 8011e70:	6923      	ldr	r3, [r4, #16]
 8011e72:	440a      	add	r2, r1
 8011e74:	7561      	strb	r1, [r4, #21]
 8011e76:	440b      	add	r3, r1
 8011e78:	60a2      	str	r2, [r4, #8]
 8011e7a:	6123      	str	r3, [r4, #16]
 8011e7c:	7da0      	ldrb	r0, [r4, #22]
 8011e7e:	f080 0001 	eor.w	r0, r0, #1
 8011e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e86:	881b      	ldrh	r3, [r3, #0]
 8011e88:	802b      	strh	r3, [r5, #0]
 8011e8a:	e7ef      	b.n	8011e6c <ucdr_deserialize_endian_uint16_t+0x94>
 8011e8c:	68a2      	ldr	r2, [r4, #8]
 8011e8e:	6923      	ldr	r3, [r4, #16]
 8011e90:	1bd2      	subs	r2, r2, r7
 8011e92:	7da0      	ldrb	r0, [r4, #22]
 8011e94:	1bdb      	subs	r3, r3, r7
 8011e96:	f884 8015 	strb.w	r8, [r4, #21]
 8011e9a:	f080 0001 	eor.w	r0, r0, #1
 8011e9e:	60a2      	str	r2, [r4, #8]
 8011ea0:	6123      	str	r3, [r4, #16]
 8011ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea6:	68a3      	ldr	r3, [r4, #8]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	706b      	strb	r3, [r5, #1]
 8011eac:	e7c3      	b.n	8011e36 <ucdr_deserialize_endian_uint16_t+0x5e>
 8011eae:	4649      	mov	r1, r9
 8011eb0:	463a      	mov	r2, r7
 8011eb2:	4628      	mov	r0, r5
 8011eb4:	f00e feff 	bl	8020cb6 <memcpy>
 8011eb8:	4652      	mov	r2, sl
 8011eba:	19e8      	adds	r0, r5, r7
 8011ebc:	68a1      	ldr	r1, [r4, #8]
 8011ebe:	f00e fefa 	bl	8020cb6 <memcpy>
 8011ec2:	e7b8      	b.n	8011e36 <ucdr_deserialize_endian_uint16_t+0x5e>

08011ec4 <ucdr_serialize_uint32_t>:
 8011ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec8:	b082      	sub	sp, #8
 8011eca:	4604      	mov	r4, r0
 8011ecc:	9101      	str	r1, [sp, #4]
 8011ece:	2104      	movs	r1, #4
 8011ed0:	f001 f8c6 	bl	8013060 <ucdr_buffer_alignment>
 8011ed4:	4601      	mov	r1, r0
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	7d67      	ldrb	r7, [r4, #21]
 8011eda:	f001 f909 	bl	80130f0 <ucdr_advance_buffer>
 8011ede:	2104      	movs	r1, #4
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f001 f85d 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	d139      	bne.n	8011f5e <ucdr_serialize_uint32_t+0x9a>
 8011eea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011eee:	42ab      	cmp	r3, r5
 8011ef0:	d930      	bls.n	8011f54 <ucdr_serialize_uint32_t+0x90>
 8011ef2:	1b5e      	subs	r6, r3, r5
 8011ef4:	60a3      	str	r3, [r4, #8]
 8011ef6:	6923      	ldr	r3, [r4, #16]
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f1c6 0804 	rsb	r8, r6, #4
 8011efe:	4433      	add	r3, r6
 8011f00:	4641      	mov	r1, r8
 8011f02:	6123      	str	r3, [r4, #16]
 8011f04:	f001 f858 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011f08:	2800      	cmp	r0, #0
 8011f0a:	d04c      	beq.n	8011fa6 <ucdr_serialize_uint32_t+0xe2>
 8011f0c:	7d23      	ldrb	r3, [r4, #20]
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d063      	beq.n	8011fda <ucdr_serialize_uint32_t+0x116>
 8011f12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f16:	702b      	strb	r3, [r5, #0]
 8011f18:	2e00      	cmp	r6, #0
 8011f1a:	d051      	beq.n	8011fc0 <ucdr_serialize_uint32_t+0xfc>
 8011f1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f20:	2e01      	cmp	r6, #1
 8011f22:	706b      	strb	r3, [r5, #1]
 8011f24:	d050      	beq.n	8011fc8 <ucdr_serialize_uint32_t+0x104>
 8011f26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f2a:	2e02      	cmp	r6, #2
 8011f2c:	70ab      	strb	r3, [r5, #2]
 8011f2e:	d04f      	beq.n	8011fd0 <ucdr_serialize_uint32_t+0x10c>
 8011f30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f34:	70eb      	strb	r3, [r5, #3]
 8011f36:	6923      	ldr	r3, [r4, #16]
 8011f38:	2104      	movs	r1, #4
 8011f3a:	68a2      	ldr	r2, [r4, #8]
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	7da0      	ldrb	r0, [r4, #22]
 8011f40:	4442      	add	r2, r8
 8011f42:	7561      	strb	r1, [r4, #21]
 8011f44:	1b9e      	subs	r6, r3, r6
 8011f46:	f080 0001 	eor.w	r0, r0, #1
 8011f4a:	60a2      	str	r2, [r4, #8]
 8011f4c:	6126      	str	r6, [r4, #16]
 8011f4e:	b002      	add	sp, #8
 8011f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f54:	2104      	movs	r1, #4
 8011f56:	4620      	mov	r0, r4
 8011f58:	f001 f82e 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8011f5c:	b1d0      	cbz	r0, 8011f94 <ucdr_serialize_uint32_t+0xd0>
 8011f5e:	7d23      	ldrb	r3, [r4, #20]
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	68a3      	ldr	r3, [r4, #8]
 8011f64:	d01c      	beq.n	8011fa0 <ucdr_serialize_uint32_t+0xdc>
 8011f66:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011f6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f6e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011f72:	7018      	strb	r0, [r3, #0]
 8011f74:	68a3      	ldr	r3, [r4, #8]
 8011f76:	705a      	strb	r2, [r3, #1]
 8011f78:	68a3      	ldr	r3, [r4, #8]
 8011f7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f7e:	7099      	strb	r1, [r3, #2]
 8011f80:	68a3      	ldr	r3, [r4, #8]
 8011f82:	70da      	strb	r2, [r3, #3]
 8011f84:	2104      	movs	r1, #4
 8011f86:	68a2      	ldr	r2, [r4, #8]
 8011f88:	6923      	ldr	r3, [r4, #16]
 8011f8a:	440a      	add	r2, r1
 8011f8c:	7561      	strb	r1, [r4, #21]
 8011f8e:	440b      	add	r3, r1
 8011f90:	60a2      	str	r2, [r4, #8]
 8011f92:	6123      	str	r3, [r4, #16]
 8011f94:	7da0      	ldrb	r0, [r4, #22]
 8011f96:	f080 0001 	eor.w	r0, r0, #1
 8011f9a:	b002      	add	sp, #8
 8011f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fa0:	9a01      	ldr	r2, [sp, #4]
 8011fa2:	601a      	str	r2, [r3, #0]
 8011fa4:	e7ee      	b.n	8011f84 <ucdr_serialize_uint32_t+0xc0>
 8011fa6:	68a2      	ldr	r2, [r4, #8]
 8011fa8:	6923      	ldr	r3, [r4, #16]
 8011faa:	7da0      	ldrb	r0, [r4, #22]
 8011fac:	1b92      	subs	r2, r2, r6
 8011fae:	1b9b      	subs	r3, r3, r6
 8011fb0:	7567      	strb	r7, [r4, #21]
 8011fb2:	f080 0001 	eor.w	r0, r0, #1
 8011fb6:	60a2      	str	r2, [r4, #8]
 8011fb8:	6123      	str	r3, [r4, #16]
 8011fba:	b002      	add	sp, #8
 8011fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fc0:	68a3      	ldr	r3, [r4, #8]
 8011fc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011fc6:	701a      	strb	r2, [r3, #0]
 8011fc8:	68a3      	ldr	r3, [r4, #8]
 8011fca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011fce:	701a      	strb	r2, [r3, #0]
 8011fd0:	68a3      	ldr	r3, [r4, #8]
 8011fd2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011fd6:	701a      	strb	r2, [r3, #0]
 8011fd8:	e7ad      	b.n	8011f36 <ucdr_serialize_uint32_t+0x72>
 8011fda:	4628      	mov	r0, r5
 8011fdc:	ad01      	add	r5, sp, #4
 8011fde:	4632      	mov	r2, r6
 8011fe0:	4629      	mov	r1, r5
 8011fe2:	f00e fe68 	bl	8020cb6 <memcpy>
 8011fe6:	4642      	mov	r2, r8
 8011fe8:	19a9      	adds	r1, r5, r6
 8011fea:	68a0      	ldr	r0, [r4, #8]
 8011fec:	f00e fe63 	bl	8020cb6 <memcpy>
 8011ff0:	e7a1      	b.n	8011f36 <ucdr_serialize_uint32_t+0x72>
 8011ff2:	bf00      	nop

08011ff4 <ucdr_serialize_endian_uint32_t>:
 8011ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	460d      	mov	r5, r1
 8011ffe:	2104      	movs	r1, #4
 8012000:	9201      	str	r2, [sp, #4]
 8012002:	f001 f82d 	bl	8013060 <ucdr_buffer_alignment>
 8012006:	4601      	mov	r1, r0
 8012008:	4620      	mov	r0, r4
 801200a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801200e:	f001 f86f 	bl	80130f0 <ucdr_advance_buffer>
 8012012:	2104      	movs	r1, #4
 8012014:	4620      	mov	r0, r4
 8012016:	f000 ffc3 	bl	8012fa0 <ucdr_check_buffer_available_for>
 801201a:	2800      	cmp	r0, #0
 801201c:	d138      	bne.n	8012090 <ucdr_serialize_endian_uint32_t+0x9c>
 801201e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012022:	42b7      	cmp	r7, r6
 8012024:	d92f      	bls.n	8012086 <ucdr_serialize_endian_uint32_t+0x92>
 8012026:	6923      	ldr	r3, [r4, #16]
 8012028:	4620      	mov	r0, r4
 801202a:	60a7      	str	r7, [r4, #8]
 801202c:	1bbf      	subs	r7, r7, r6
 801202e:	443b      	add	r3, r7
 8012030:	f1c7 0904 	rsb	r9, r7, #4
 8012034:	6123      	str	r3, [r4, #16]
 8012036:	4649      	mov	r1, r9
 8012038:	f000 ffbe 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 801203c:	2800      	cmp	r0, #0
 801203e:	d04a      	beq.n	80120d6 <ucdr_serialize_endian_uint32_t+0xe2>
 8012040:	2d01      	cmp	r5, #1
 8012042:	d063      	beq.n	801210c <ucdr_serialize_endian_uint32_t+0x118>
 8012044:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012048:	7033      	strb	r3, [r6, #0]
 801204a:	2f00      	cmp	r7, #0
 801204c:	d051      	beq.n	80120f2 <ucdr_serialize_endian_uint32_t+0xfe>
 801204e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012052:	2f01      	cmp	r7, #1
 8012054:	7073      	strb	r3, [r6, #1]
 8012056:	d050      	beq.n	80120fa <ucdr_serialize_endian_uint32_t+0x106>
 8012058:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801205c:	2f02      	cmp	r7, #2
 801205e:	70b3      	strb	r3, [r6, #2]
 8012060:	d04f      	beq.n	8012102 <ucdr_serialize_endian_uint32_t+0x10e>
 8012062:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012066:	70f3      	strb	r3, [r6, #3]
 8012068:	6923      	ldr	r3, [r4, #16]
 801206a:	2104      	movs	r1, #4
 801206c:	68a2      	ldr	r2, [r4, #8]
 801206e:	7da0      	ldrb	r0, [r4, #22]
 8012070:	3304      	adds	r3, #4
 8012072:	444a      	add	r2, r9
 8012074:	7561      	strb	r1, [r4, #21]
 8012076:	1bdb      	subs	r3, r3, r7
 8012078:	f080 0001 	eor.w	r0, r0, #1
 801207c:	60a2      	str	r2, [r4, #8]
 801207e:	6123      	str	r3, [r4, #16]
 8012080:	b003      	add	sp, #12
 8012082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012086:	2104      	movs	r1, #4
 8012088:	4620      	mov	r0, r4
 801208a:	f000 ff95 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 801208e:	b1c8      	cbz	r0, 80120c4 <ucdr_serialize_endian_uint32_t+0xd0>
 8012090:	2d01      	cmp	r5, #1
 8012092:	68a3      	ldr	r3, [r4, #8]
 8012094:	d01c      	beq.n	80120d0 <ucdr_serialize_endian_uint32_t+0xdc>
 8012096:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801209a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801209e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80120a2:	7018      	strb	r0, [r3, #0]
 80120a4:	68a3      	ldr	r3, [r4, #8]
 80120a6:	705a      	strb	r2, [r3, #1]
 80120a8:	68a3      	ldr	r3, [r4, #8]
 80120aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80120ae:	7099      	strb	r1, [r3, #2]
 80120b0:	68a3      	ldr	r3, [r4, #8]
 80120b2:	70da      	strb	r2, [r3, #3]
 80120b4:	2104      	movs	r1, #4
 80120b6:	68a2      	ldr	r2, [r4, #8]
 80120b8:	6923      	ldr	r3, [r4, #16]
 80120ba:	440a      	add	r2, r1
 80120bc:	7561      	strb	r1, [r4, #21]
 80120be:	440b      	add	r3, r1
 80120c0:	60a2      	str	r2, [r4, #8]
 80120c2:	6123      	str	r3, [r4, #16]
 80120c4:	7da0      	ldrb	r0, [r4, #22]
 80120c6:	f080 0001 	eor.w	r0, r0, #1
 80120ca:	b003      	add	sp, #12
 80120cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120d0:	9a01      	ldr	r2, [sp, #4]
 80120d2:	601a      	str	r2, [r3, #0]
 80120d4:	e7ee      	b.n	80120b4 <ucdr_serialize_endian_uint32_t+0xc0>
 80120d6:	68a2      	ldr	r2, [r4, #8]
 80120d8:	6923      	ldr	r3, [r4, #16]
 80120da:	7da0      	ldrb	r0, [r4, #22]
 80120dc:	1bd2      	subs	r2, r2, r7
 80120de:	1bdb      	subs	r3, r3, r7
 80120e0:	f884 8015 	strb.w	r8, [r4, #21]
 80120e4:	f080 0001 	eor.w	r0, r0, #1
 80120e8:	60a2      	str	r2, [r4, #8]
 80120ea:	6123      	str	r3, [r4, #16]
 80120ec:	b003      	add	sp, #12
 80120ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120f2:	68a3      	ldr	r3, [r4, #8]
 80120f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120f8:	701a      	strb	r2, [r3, #0]
 80120fa:	68a3      	ldr	r3, [r4, #8]
 80120fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012100:	701a      	strb	r2, [r3, #0]
 8012102:	68a3      	ldr	r3, [r4, #8]
 8012104:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012108:	701a      	strb	r2, [r3, #0]
 801210a:	e7ad      	b.n	8012068 <ucdr_serialize_endian_uint32_t+0x74>
 801210c:	ad01      	add	r5, sp, #4
 801210e:	463a      	mov	r2, r7
 8012110:	4630      	mov	r0, r6
 8012112:	4629      	mov	r1, r5
 8012114:	f00e fdcf 	bl	8020cb6 <memcpy>
 8012118:	464a      	mov	r2, r9
 801211a:	19e9      	adds	r1, r5, r7
 801211c:	68a0      	ldr	r0, [r4, #8]
 801211e:	f00e fdca 	bl	8020cb6 <memcpy>
 8012122:	e7a1      	b.n	8012068 <ucdr_serialize_endian_uint32_t+0x74>

08012124 <ucdr_deserialize_uint32_t>:
 8012124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012128:	4604      	mov	r4, r0
 801212a:	460d      	mov	r5, r1
 801212c:	2104      	movs	r1, #4
 801212e:	f000 ff97 	bl	8013060 <ucdr_buffer_alignment>
 8012132:	4601      	mov	r1, r0
 8012134:	4620      	mov	r0, r4
 8012136:	f894 8015 	ldrb.w	r8, [r4, #21]
 801213a:	f000 ffd9 	bl	80130f0 <ucdr_advance_buffer>
 801213e:	2104      	movs	r1, #4
 8012140:	4620      	mov	r0, r4
 8012142:	f000 ff2d 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012146:	2800      	cmp	r0, #0
 8012148:	d138      	bne.n	80121bc <ucdr_deserialize_uint32_t+0x98>
 801214a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801214e:	42b7      	cmp	r7, r6
 8012150:	d92f      	bls.n	80121b2 <ucdr_deserialize_uint32_t+0x8e>
 8012152:	6923      	ldr	r3, [r4, #16]
 8012154:	4620      	mov	r0, r4
 8012156:	60a7      	str	r7, [r4, #8]
 8012158:	1bbf      	subs	r7, r7, r6
 801215a:	443b      	add	r3, r7
 801215c:	f1c7 0904 	rsb	r9, r7, #4
 8012160:	6123      	str	r3, [r4, #16]
 8012162:	4649      	mov	r1, r9
 8012164:	f000 ff28 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012168:	2800      	cmp	r0, #0
 801216a:	d046      	beq.n	80121fa <ucdr_deserialize_uint32_t+0xd6>
 801216c:	7d23      	ldrb	r3, [r4, #20]
 801216e:	2b01      	cmp	r3, #1
 8012170:	d05c      	beq.n	801222c <ucdr_deserialize_uint32_t+0x108>
 8012172:	78f3      	ldrb	r3, [r6, #3]
 8012174:	702b      	strb	r3, [r5, #0]
 8012176:	2f00      	cmp	r7, #0
 8012178:	d04c      	beq.n	8012214 <ucdr_deserialize_uint32_t+0xf0>
 801217a:	78b3      	ldrb	r3, [r6, #2]
 801217c:	2f01      	cmp	r7, #1
 801217e:	706b      	strb	r3, [r5, #1]
 8012180:	f105 0302 	add.w	r3, r5, #2
 8012184:	d04a      	beq.n	801221c <ucdr_deserialize_uint32_t+0xf8>
 8012186:	7873      	ldrb	r3, [r6, #1]
 8012188:	2f02      	cmp	r7, #2
 801218a:	70ab      	strb	r3, [r5, #2]
 801218c:	f105 0303 	add.w	r3, r5, #3
 8012190:	d048      	beq.n	8012224 <ucdr_deserialize_uint32_t+0x100>
 8012192:	7833      	ldrb	r3, [r6, #0]
 8012194:	70eb      	strb	r3, [r5, #3]
 8012196:	6923      	ldr	r3, [r4, #16]
 8012198:	2104      	movs	r1, #4
 801219a:	68a2      	ldr	r2, [r4, #8]
 801219c:	3304      	adds	r3, #4
 801219e:	7da0      	ldrb	r0, [r4, #22]
 80121a0:	444a      	add	r2, r9
 80121a2:	7561      	strb	r1, [r4, #21]
 80121a4:	1bdb      	subs	r3, r3, r7
 80121a6:	f080 0001 	eor.w	r0, r0, #1
 80121aa:	60a2      	str	r2, [r4, #8]
 80121ac:	6123      	str	r3, [r4, #16]
 80121ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121b2:	2104      	movs	r1, #4
 80121b4:	4620      	mov	r0, r4
 80121b6:	f000 feff 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 80121ba:	b1b0      	cbz	r0, 80121ea <ucdr_deserialize_uint32_t+0xc6>
 80121bc:	7d23      	ldrb	r3, [r4, #20]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	68a3      	ldr	r3, [r4, #8]
 80121c2:	d017      	beq.n	80121f4 <ucdr_deserialize_uint32_t+0xd0>
 80121c4:	78db      	ldrb	r3, [r3, #3]
 80121c6:	702b      	strb	r3, [r5, #0]
 80121c8:	68a3      	ldr	r3, [r4, #8]
 80121ca:	789b      	ldrb	r3, [r3, #2]
 80121cc:	706b      	strb	r3, [r5, #1]
 80121ce:	68a3      	ldr	r3, [r4, #8]
 80121d0:	785b      	ldrb	r3, [r3, #1]
 80121d2:	70ab      	strb	r3, [r5, #2]
 80121d4:	68a3      	ldr	r3, [r4, #8]
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	70eb      	strb	r3, [r5, #3]
 80121da:	2104      	movs	r1, #4
 80121dc:	68a2      	ldr	r2, [r4, #8]
 80121de:	6923      	ldr	r3, [r4, #16]
 80121e0:	440a      	add	r2, r1
 80121e2:	7561      	strb	r1, [r4, #21]
 80121e4:	440b      	add	r3, r1
 80121e6:	60a2      	str	r2, [r4, #8]
 80121e8:	6123      	str	r3, [r4, #16]
 80121ea:	7da0      	ldrb	r0, [r4, #22]
 80121ec:	f080 0001 	eor.w	r0, r0, #1
 80121f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	602b      	str	r3, [r5, #0]
 80121f8:	e7ef      	b.n	80121da <ucdr_deserialize_uint32_t+0xb6>
 80121fa:	68a2      	ldr	r2, [r4, #8]
 80121fc:	6923      	ldr	r3, [r4, #16]
 80121fe:	1bd2      	subs	r2, r2, r7
 8012200:	7da0      	ldrb	r0, [r4, #22]
 8012202:	1bdb      	subs	r3, r3, r7
 8012204:	f884 8015 	strb.w	r8, [r4, #21]
 8012208:	f080 0001 	eor.w	r0, r0, #1
 801220c:	60a2      	str	r2, [r4, #8]
 801220e:	6123      	str	r3, [r4, #16]
 8012210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012214:	68a3      	ldr	r3, [r4, #8]
 8012216:	789b      	ldrb	r3, [r3, #2]
 8012218:	706b      	strb	r3, [r5, #1]
 801221a:	1cab      	adds	r3, r5, #2
 801221c:	68a2      	ldr	r2, [r4, #8]
 801221e:	7852      	ldrb	r2, [r2, #1]
 8012220:	f803 2b01 	strb.w	r2, [r3], #1
 8012224:	68a2      	ldr	r2, [r4, #8]
 8012226:	7812      	ldrb	r2, [r2, #0]
 8012228:	701a      	strb	r2, [r3, #0]
 801222a:	e7b4      	b.n	8012196 <ucdr_deserialize_uint32_t+0x72>
 801222c:	4631      	mov	r1, r6
 801222e:	463a      	mov	r2, r7
 8012230:	4628      	mov	r0, r5
 8012232:	f00e fd40 	bl	8020cb6 <memcpy>
 8012236:	464a      	mov	r2, r9
 8012238:	19e8      	adds	r0, r5, r7
 801223a:	68a1      	ldr	r1, [r4, #8]
 801223c:	f00e fd3b 	bl	8020cb6 <memcpy>
 8012240:	e7a9      	b.n	8012196 <ucdr_deserialize_uint32_t+0x72>
 8012242:	bf00      	nop

08012244 <ucdr_deserialize_endian_uint32_t>:
 8012244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012248:	4604      	mov	r4, r0
 801224a:	460e      	mov	r6, r1
 801224c:	2104      	movs	r1, #4
 801224e:	4615      	mov	r5, r2
 8012250:	f000 ff06 	bl	8013060 <ucdr_buffer_alignment>
 8012254:	4601      	mov	r1, r0
 8012256:	4620      	mov	r0, r4
 8012258:	f894 8015 	ldrb.w	r8, [r4, #21]
 801225c:	f000 ff48 	bl	80130f0 <ucdr_advance_buffer>
 8012260:	2104      	movs	r1, #4
 8012262:	4620      	mov	r0, r4
 8012264:	f000 fe9c 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012268:	2800      	cmp	r0, #0
 801226a:	d13c      	bne.n	80122e6 <ucdr_deserialize_endian_uint32_t+0xa2>
 801226c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012270:	42bb      	cmp	r3, r7
 8012272:	d933      	bls.n	80122dc <ucdr_deserialize_endian_uint32_t+0x98>
 8012274:	eba3 0907 	sub.w	r9, r3, r7
 8012278:	60a3      	str	r3, [r4, #8]
 801227a:	6923      	ldr	r3, [r4, #16]
 801227c:	4620      	mov	r0, r4
 801227e:	f1c9 0a04 	rsb	sl, r9, #4
 8012282:	444b      	add	r3, r9
 8012284:	4651      	mov	r1, sl
 8012286:	6123      	str	r3, [r4, #16]
 8012288:	f000 fe96 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 801228c:	2800      	cmp	r0, #0
 801228e:	d048      	beq.n	8012322 <ucdr_deserialize_endian_uint32_t+0xde>
 8012290:	2e01      	cmp	r6, #1
 8012292:	d061      	beq.n	8012358 <ucdr_deserialize_endian_uint32_t+0x114>
 8012294:	78fb      	ldrb	r3, [r7, #3]
 8012296:	702b      	strb	r3, [r5, #0]
 8012298:	f1b9 0f00 	cmp.w	r9, #0
 801229c:	d050      	beq.n	8012340 <ucdr_deserialize_endian_uint32_t+0xfc>
 801229e:	78bb      	ldrb	r3, [r7, #2]
 80122a0:	f1b9 0f01 	cmp.w	r9, #1
 80122a4:	706b      	strb	r3, [r5, #1]
 80122a6:	f105 0302 	add.w	r3, r5, #2
 80122aa:	d04d      	beq.n	8012348 <ucdr_deserialize_endian_uint32_t+0x104>
 80122ac:	787b      	ldrb	r3, [r7, #1]
 80122ae:	f1b9 0f02 	cmp.w	r9, #2
 80122b2:	70ab      	strb	r3, [r5, #2]
 80122b4:	f105 0303 	add.w	r3, r5, #3
 80122b8:	d04a      	beq.n	8012350 <ucdr_deserialize_endian_uint32_t+0x10c>
 80122ba:	783b      	ldrb	r3, [r7, #0]
 80122bc:	70eb      	strb	r3, [r5, #3]
 80122be:	6923      	ldr	r3, [r4, #16]
 80122c0:	2104      	movs	r1, #4
 80122c2:	68a2      	ldr	r2, [r4, #8]
 80122c4:	3304      	adds	r3, #4
 80122c6:	7da0      	ldrb	r0, [r4, #22]
 80122c8:	4452      	add	r2, sl
 80122ca:	7561      	strb	r1, [r4, #21]
 80122cc:	eba3 0309 	sub.w	r3, r3, r9
 80122d0:	f080 0001 	eor.w	r0, r0, #1
 80122d4:	60a2      	str	r2, [r4, #8]
 80122d6:	6123      	str	r3, [r4, #16]
 80122d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122dc:	2104      	movs	r1, #4
 80122de:	4620      	mov	r0, r4
 80122e0:	f000 fe6a 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 80122e4:	b1a8      	cbz	r0, 8012312 <ucdr_deserialize_endian_uint32_t+0xce>
 80122e6:	2e01      	cmp	r6, #1
 80122e8:	68a3      	ldr	r3, [r4, #8]
 80122ea:	d017      	beq.n	801231c <ucdr_deserialize_endian_uint32_t+0xd8>
 80122ec:	78db      	ldrb	r3, [r3, #3]
 80122ee:	702b      	strb	r3, [r5, #0]
 80122f0:	68a3      	ldr	r3, [r4, #8]
 80122f2:	789b      	ldrb	r3, [r3, #2]
 80122f4:	706b      	strb	r3, [r5, #1]
 80122f6:	68a3      	ldr	r3, [r4, #8]
 80122f8:	785b      	ldrb	r3, [r3, #1]
 80122fa:	70ab      	strb	r3, [r5, #2]
 80122fc:	68a3      	ldr	r3, [r4, #8]
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	70eb      	strb	r3, [r5, #3]
 8012302:	2104      	movs	r1, #4
 8012304:	68a2      	ldr	r2, [r4, #8]
 8012306:	6923      	ldr	r3, [r4, #16]
 8012308:	440a      	add	r2, r1
 801230a:	7561      	strb	r1, [r4, #21]
 801230c:	440b      	add	r3, r1
 801230e:	60a2      	str	r2, [r4, #8]
 8012310:	6123      	str	r3, [r4, #16]
 8012312:	7da0      	ldrb	r0, [r4, #22]
 8012314:	f080 0001 	eor.w	r0, r0, #1
 8012318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	602b      	str	r3, [r5, #0]
 8012320:	e7ef      	b.n	8012302 <ucdr_deserialize_endian_uint32_t+0xbe>
 8012322:	68a2      	ldr	r2, [r4, #8]
 8012324:	6923      	ldr	r3, [r4, #16]
 8012326:	eba2 0209 	sub.w	r2, r2, r9
 801232a:	7da0      	ldrb	r0, [r4, #22]
 801232c:	eba3 0309 	sub.w	r3, r3, r9
 8012330:	f884 8015 	strb.w	r8, [r4, #21]
 8012334:	f080 0001 	eor.w	r0, r0, #1
 8012338:	60a2      	str	r2, [r4, #8]
 801233a:	6123      	str	r3, [r4, #16]
 801233c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012340:	68a3      	ldr	r3, [r4, #8]
 8012342:	789b      	ldrb	r3, [r3, #2]
 8012344:	706b      	strb	r3, [r5, #1]
 8012346:	1cab      	adds	r3, r5, #2
 8012348:	68a2      	ldr	r2, [r4, #8]
 801234a:	7852      	ldrb	r2, [r2, #1]
 801234c:	f803 2b01 	strb.w	r2, [r3], #1
 8012350:	68a2      	ldr	r2, [r4, #8]
 8012352:	7812      	ldrb	r2, [r2, #0]
 8012354:	701a      	strb	r2, [r3, #0]
 8012356:	e7b2      	b.n	80122be <ucdr_deserialize_endian_uint32_t+0x7a>
 8012358:	4639      	mov	r1, r7
 801235a:	464a      	mov	r2, r9
 801235c:	4628      	mov	r0, r5
 801235e:	f00e fcaa 	bl	8020cb6 <memcpy>
 8012362:	4652      	mov	r2, sl
 8012364:	eb05 0009 	add.w	r0, r5, r9
 8012368:	68a1      	ldr	r1, [r4, #8]
 801236a:	f00e fca4 	bl	8020cb6 <memcpy>
 801236e:	e7a6      	b.n	80122be <ucdr_deserialize_endian_uint32_t+0x7a>

08012370 <ucdr_serialize_uint64_t>:
 8012370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012374:	4604      	mov	r4, r0
 8012376:	b082      	sub	sp, #8
 8012378:	2108      	movs	r1, #8
 801237a:	e9cd 2300 	strd	r2, r3, [sp]
 801237e:	f000 fe6f 	bl	8013060 <ucdr_buffer_alignment>
 8012382:	4601      	mov	r1, r0
 8012384:	4620      	mov	r0, r4
 8012386:	7d67      	ldrb	r7, [r4, #21]
 8012388:	f000 feb2 	bl	80130f0 <ucdr_advance_buffer>
 801238c:	2108      	movs	r1, #8
 801238e:	4620      	mov	r0, r4
 8012390:	f000 fe06 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012394:	2800      	cmp	r0, #0
 8012396:	d14e      	bne.n	8012436 <ucdr_serialize_uint64_t+0xc6>
 8012398:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801239c:	42ab      	cmp	r3, r5
 801239e:	d945      	bls.n	801242c <ucdr_serialize_uint64_t+0xbc>
 80123a0:	1b5e      	subs	r6, r3, r5
 80123a2:	60a3      	str	r3, [r4, #8]
 80123a4:	6923      	ldr	r3, [r4, #16]
 80123a6:	4620      	mov	r0, r4
 80123a8:	f1c6 0808 	rsb	r8, r6, #8
 80123ac:	4433      	add	r3, r6
 80123ae:	4641      	mov	r1, r8
 80123b0:	6123      	str	r3, [r4, #16]
 80123b2:	f000 fe01 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 80123b6:	2800      	cmp	r0, #0
 80123b8:	d074      	beq.n	80124a4 <ucdr_serialize_uint64_t+0x134>
 80123ba:	7d23      	ldrb	r3, [r4, #20]
 80123bc:	2b01      	cmp	r3, #1
 80123be:	f000 809b 	beq.w	80124f8 <ucdr_serialize_uint64_t+0x188>
 80123c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80123c6:	702b      	strb	r3, [r5, #0]
 80123c8:	2e00      	cmp	r6, #0
 80123ca:	d078      	beq.n	80124be <ucdr_serialize_uint64_t+0x14e>
 80123cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80123d0:	2e01      	cmp	r6, #1
 80123d2:	706b      	strb	r3, [r5, #1]
 80123d4:	d077      	beq.n	80124c6 <ucdr_serialize_uint64_t+0x156>
 80123d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80123da:	2e02      	cmp	r6, #2
 80123dc:	70ab      	strb	r3, [r5, #2]
 80123de:	d076      	beq.n	80124ce <ucdr_serialize_uint64_t+0x15e>
 80123e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80123e4:	2e03      	cmp	r6, #3
 80123e6:	70eb      	strb	r3, [r5, #3]
 80123e8:	d075      	beq.n	80124d6 <ucdr_serialize_uint64_t+0x166>
 80123ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80123ee:	2e04      	cmp	r6, #4
 80123f0:	712b      	strb	r3, [r5, #4]
 80123f2:	d074      	beq.n	80124de <ucdr_serialize_uint64_t+0x16e>
 80123f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80123f8:	2e05      	cmp	r6, #5
 80123fa:	716b      	strb	r3, [r5, #5]
 80123fc:	d073      	beq.n	80124e6 <ucdr_serialize_uint64_t+0x176>
 80123fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012402:	2e06      	cmp	r6, #6
 8012404:	71ab      	strb	r3, [r5, #6]
 8012406:	d072      	beq.n	80124ee <ucdr_serialize_uint64_t+0x17e>
 8012408:	f89d 3000 	ldrb.w	r3, [sp]
 801240c:	71eb      	strb	r3, [r5, #7]
 801240e:	6923      	ldr	r3, [r4, #16]
 8012410:	2108      	movs	r1, #8
 8012412:	68a2      	ldr	r2, [r4, #8]
 8012414:	3308      	adds	r3, #8
 8012416:	7da0      	ldrb	r0, [r4, #22]
 8012418:	4442      	add	r2, r8
 801241a:	7561      	strb	r1, [r4, #21]
 801241c:	1b9e      	subs	r6, r3, r6
 801241e:	f080 0001 	eor.w	r0, r0, #1
 8012422:	60a2      	str	r2, [r4, #8]
 8012424:	6126      	str	r6, [r4, #16]
 8012426:	b002      	add	sp, #8
 8012428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801242c:	2108      	movs	r1, #8
 801242e:	4620      	mov	r0, r4
 8012430:	f000 fdc2 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012434:	b350      	cbz	r0, 801248c <ucdr_serialize_uint64_t+0x11c>
 8012436:	7d23      	ldrb	r3, [r4, #20]
 8012438:	2b01      	cmp	r3, #1
 801243a:	d02d      	beq.n	8012498 <ucdr_serialize_uint64_t+0x128>
 801243c:	68a3      	ldr	r3, [r4, #8]
 801243e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012442:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012446:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801244a:	7018      	strb	r0, [r3, #0]
 801244c:	68a3      	ldr	r3, [r4, #8]
 801244e:	705a      	strb	r2, [r3, #1]
 8012450:	68a3      	ldr	r3, [r4, #8]
 8012452:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012456:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801245a:	7099      	strb	r1, [r3, #2]
 801245c:	68a3      	ldr	r3, [r4, #8]
 801245e:	70da      	strb	r2, [r3, #3]
 8012460:	68a3      	ldr	r3, [r4, #8]
 8012462:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012466:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801246a:	7118      	strb	r0, [r3, #4]
 801246c:	68a3      	ldr	r3, [r4, #8]
 801246e:	715a      	strb	r2, [r3, #5]
 8012470:	68a3      	ldr	r3, [r4, #8]
 8012472:	f89d 2000 	ldrb.w	r2, [sp]
 8012476:	7199      	strb	r1, [r3, #6]
 8012478:	68a3      	ldr	r3, [r4, #8]
 801247a:	71da      	strb	r2, [r3, #7]
 801247c:	2108      	movs	r1, #8
 801247e:	68a2      	ldr	r2, [r4, #8]
 8012480:	6923      	ldr	r3, [r4, #16]
 8012482:	440a      	add	r2, r1
 8012484:	7561      	strb	r1, [r4, #21]
 8012486:	440b      	add	r3, r1
 8012488:	60a2      	str	r2, [r4, #8]
 801248a:	6123      	str	r3, [r4, #16]
 801248c:	7da0      	ldrb	r0, [r4, #22]
 801248e:	f080 0001 	eor.w	r0, r0, #1
 8012492:	b002      	add	sp, #8
 8012494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012498:	466b      	mov	r3, sp
 801249a:	68a2      	ldr	r2, [r4, #8]
 801249c:	cb03      	ldmia	r3!, {r0, r1}
 801249e:	6010      	str	r0, [r2, #0]
 80124a0:	6051      	str	r1, [r2, #4]
 80124a2:	e7eb      	b.n	801247c <ucdr_serialize_uint64_t+0x10c>
 80124a4:	68a2      	ldr	r2, [r4, #8]
 80124a6:	6923      	ldr	r3, [r4, #16]
 80124a8:	7da0      	ldrb	r0, [r4, #22]
 80124aa:	1b92      	subs	r2, r2, r6
 80124ac:	1b9b      	subs	r3, r3, r6
 80124ae:	7567      	strb	r7, [r4, #21]
 80124b0:	f080 0001 	eor.w	r0, r0, #1
 80124b4:	60a2      	str	r2, [r4, #8]
 80124b6:	6123      	str	r3, [r4, #16]
 80124b8:	b002      	add	sp, #8
 80124ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124be:	68a3      	ldr	r3, [r4, #8]
 80124c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80124c4:	701a      	strb	r2, [r3, #0]
 80124c6:	68a3      	ldr	r3, [r4, #8]
 80124c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80124cc:	701a      	strb	r2, [r3, #0]
 80124ce:	68a3      	ldr	r3, [r4, #8]
 80124d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80124d4:	701a      	strb	r2, [r3, #0]
 80124d6:	68a3      	ldr	r3, [r4, #8]
 80124d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80124dc:	701a      	strb	r2, [r3, #0]
 80124de:	68a3      	ldr	r3, [r4, #8]
 80124e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80124e4:	701a      	strb	r2, [r3, #0]
 80124e6:	68a3      	ldr	r3, [r4, #8]
 80124e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80124ec:	701a      	strb	r2, [r3, #0]
 80124ee:	68a3      	ldr	r3, [r4, #8]
 80124f0:	f89d 2000 	ldrb.w	r2, [sp]
 80124f4:	701a      	strb	r2, [r3, #0]
 80124f6:	e78a      	b.n	801240e <ucdr_serialize_uint64_t+0x9e>
 80124f8:	4628      	mov	r0, r5
 80124fa:	466d      	mov	r5, sp
 80124fc:	4632      	mov	r2, r6
 80124fe:	4629      	mov	r1, r5
 8012500:	f00e fbd9 	bl	8020cb6 <memcpy>
 8012504:	4642      	mov	r2, r8
 8012506:	19a9      	adds	r1, r5, r6
 8012508:	68a0      	ldr	r0, [r4, #8]
 801250a:	f00e fbd4 	bl	8020cb6 <memcpy>
 801250e:	e77e      	b.n	801240e <ucdr_serialize_uint64_t+0x9e>

08012510 <ucdr_serialize_int16_t>:
 8012510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012514:	460b      	mov	r3, r1
 8012516:	b082      	sub	sp, #8
 8012518:	4604      	mov	r4, r0
 801251a:	2102      	movs	r1, #2
 801251c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012520:	f000 fd9e 	bl	8013060 <ucdr_buffer_alignment>
 8012524:	4601      	mov	r1, r0
 8012526:	4620      	mov	r0, r4
 8012528:	7d67      	ldrb	r7, [r4, #21]
 801252a:	f000 fde1 	bl	80130f0 <ucdr_advance_buffer>
 801252e:	2102      	movs	r1, #2
 8012530:	4620      	mov	r0, r4
 8012532:	f000 fd35 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012536:	bb78      	cbnz	r0, 8012598 <ucdr_serialize_int16_t+0x88>
 8012538:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801253c:	42ab      	cmp	r3, r5
 801253e:	d926      	bls.n	801258e <ucdr_serialize_int16_t+0x7e>
 8012540:	1b5e      	subs	r6, r3, r5
 8012542:	60a3      	str	r3, [r4, #8]
 8012544:	6923      	ldr	r3, [r4, #16]
 8012546:	4620      	mov	r0, r4
 8012548:	f1c6 0802 	rsb	r8, r6, #2
 801254c:	4433      	add	r3, r6
 801254e:	4641      	mov	r1, r8
 8012550:	6123      	str	r3, [r4, #16]
 8012552:	f000 fd31 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012556:	2800      	cmp	r0, #0
 8012558:	d03b      	beq.n	80125d2 <ucdr_serialize_int16_t+0xc2>
 801255a:	7d23      	ldrb	r3, [r4, #20]
 801255c:	2b01      	cmp	r3, #1
 801255e:	d04a      	beq.n	80125f6 <ucdr_serialize_int16_t+0xe6>
 8012560:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012564:	702b      	strb	r3, [r5, #0]
 8012566:	2e00      	cmp	r6, #0
 8012568:	d040      	beq.n	80125ec <ucdr_serialize_int16_t+0xdc>
 801256a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801256e:	706b      	strb	r3, [r5, #1]
 8012570:	6923      	ldr	r3, [r4, #16]
 8012572:	2102      	movs	r1, #2
 8012574:	68a2      	ldr	r2, [r4, #8]
 8012576:	3302      	adds	r3, #2
 8012578:	7da0      	ldrb	r0, [r4, #22]
 801257a:	4442      	add	r2, r8
 801257c:	7561      	strb	r1, [r4, #21]
 801257e:	1b9e      	subs	r6, r3, r6
 8012580:	f080 0001 	eor.w	r0, r0, #1
 8012584:	60a2      	str	r2, [r4, #8]
 8012586:	6126      	str	r6, [r4, #16]
 8012588:	b002      	add	sp, #8
 801258a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801258e:	2102      	movs	r1, #2
 8012590:	4620      	mov	r0, r4
 8012592:	f000 fd11 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012596:	b190      	cbz	r0, 80125be <ucdr_serialize_int16_t+0xae>
 8012598:	7d23      	ldrb	r3, [r4, #20]
 801259a:	2b01      	cmp	r3, #1
 801259c:	68a3      	ldr	r3, [r4, #8]
 801259e:	d014      	beq.n	80125ca <ucdr_serialize_int16_t+0xba>
 80125a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80125a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125a8:	7019      	strb	r1, [r3, #0]
 80125aa:	68a3      	ldr	r3, [r4, #8]
 80125ac:	705a      	strb	r2, [r3, #1]
 80125ae:	2102      	movs	r1, #2
 80125b0:	68a2      	ldr	r2, [r4, #8]
 80125b2:	6923      	ldr	r3, [r4, #16]
 80125b4:	440a      	add	r2, r1
 80125b6:	7561      	strb	r1, [r4, #21]
 80125b8:	440b      	add	r3, r1
 80125ba:	60a2      	str	r2, [r4, #8]
 80125bc:	6123      	str	r3, [r4, #16]
 80125be:	7da0      	ldrb	r0, [r4, #22]
 80125c0:	f080 0001 	eor.w	r0, r0, #1
 80125c4:	b002      	add	sp, #8
 80125c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80125ce:	801a      	strh	r2, [r3, #0]
 80125d0:	e7ed      	b.n	80125ae <ucdr_serialize_int16_t+0x9e>
 80125d2:	68a2      	ldr	r2, [r4, #8]
 80125d4:	6923      	ldr	r3, [r4, #16]
 80125d6:	7da0      	ldrb	r0, [r4, #22]
 80125d8:	1b92      	subs	r2, r2, r6
 80125da:	1b9b      	subs	r3, r3, r6
 80125dc:	7567      	strb	r7, [r4, #21]
 80125de:	f080 0001 	eor.w	r0, r0, #1
 80125e2:	60a2      	str	r2, [r4, #8]
 80125e4:	6123      	str	r3, [r4, #16]
 80125e6:	b002      	add	sp, #8
 80125e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ec:	68a3      	ldr	r3, [r4, #8]
 80125ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125f2:	701a      	strb	r2, [r3, #0]
 80125f4:	e7bc      	b.n	8012570 <ucdr_serialize_int16_t+0x60>
 80125f6:	4628      	mov	r0, r5
 80125f8:	f10d 0506 	add.w	r5, sp, #6
 80125fc:	4632      	mov	r2, r6
 80125fe:	4629      	mov	r1, r5
 8012600:	f00e fb59 	bl	8020cb6 <memcpy>
 8012604:	4642      	mov	r2, r8
 8012606:	19a9      	adds	r1, r5, r6
 8012608:	68a0      	ldr	r0, [r4, #8]
 801260a:	f00e fb54 	bl	8020cb6 <memcpy>
 801260e:	e7af      	b.n	8012570 <ucdr_serialize_int16_t+0x60>

08012610 <ucdr_deserialize_int16_t>:
 8012610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012614:	4604      	mov	r4, r0
 8012616:	460d      	mov	r5, r1
 8012618:	2102      	movs	r1, #2
 801261a:	f000 fd21 	bl	8013060 <ucdr_buffer_alignment>
 801261e:	4601      	mov	r1, r0
 8012620:	4620      	mov	r0, r4
 8012622:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012626:	f000 fd63 	bl	80130f0 <ucdr_advance_buffer>
 801262a:	2102      	movs	r1, #2
 801262c:	4620      	mov	r0, r4
 801262e:	f000 fcb7 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012632:	bb60      	cbnz	r0, 801268e <ucdr_deserialize_int16_t+0x7e>
 8012634:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012638:	42be      	cmp	r6, r7
 801263a:	d923      	bls.n	8012684 <ucdr_deserialize_int16_t+0x74>
 801263c:	6923      	ldr	r3, [r4, #16]
 801263e:	4620      	mov	r0, r4
 8012640:	60a6      	str	r6, [r4, #8]
 8012642:	1bf6      	subs	r6, r6, r7
 8012644:	4433      	add	r3, r6
 8012646:	f1c6 0902 	rsb	r9, r6, #2
 801264a:	6123      	str	r3, [r4, #16]
 801264c:	4649      	mov	r1, r9
 801264e:	f000 fcb3 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012652:	2800      	cmp	r0, #0
 8012654:	d034      	beq.n	80126c0 <ucdr_deserialize_int16_t+0xb0>
 8012656:	7d23      	ldrb	r3, [r4, #20]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d042      	beq.n	80126e2 <ucdr_deserialize_int16_t+0xd2>
 801265c:	787b      	ldrb	r3, [r7, #1]
 801265e:	702b      	strb	r3, [r5, #0]
 8012660:	2e00      	cmp	r6, #0
 8012662:	d03a      	beq.n	80126da <ucdr_deserialize_int16_t+0xca>
 8012664:	783b      	ldrb	r3, [r7, #0]
 8012666:	706b      	strb	r3, [r5, #1]
 8012668:	6923      	ldr	r3, [r4, #16]
 801266a:	2102      	movs	r1, #2
 801266c:	68a2      	ldr	r2, [r4, #8]
 801266e:	3302      	adds	r3, #2
 8012670:	7da0      	ldrb	r0, [r4, #22]
 8012672:	444a      	add	r2, r9
 8012674:	7561      	strb	r1, [r4, #21]
 8012676:	1b9b      	subs	r3, r3, r6
 8012678:	f080 0001 	eor.w	r0, r0, #1
 801267c:	60a2      	str	r2, [r4, #8]
 801267e:	6123      	str	r3, [r4, #16]
 8012680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012684:	2102      	movs	r1, #2
 8012686:	4620      	mov	r0, r4
 8012688:	f000 fc96 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 801268c:	b180      	cbz	r0, 80126b0 <ucdr_deserialize_int16_t+0xa0>
 801268e:	7d23      	ldrb	r3, [r4, #20]
 8012690:	2b01      	cmp	r3, #1
 8012692:	68a3      	ldr	r3, [r4, #8]
 8012694:	d011      	beq.n	80126ba <ucdr_deserialize_int16_t+0xaa>
 8012696:	785b      	ldrb	r3, [r3, #1]
 8012698:	702b      	strb	r3, [r5, #0]
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	706b      	strb	r3, [r5, #1]
 80126a0:	2102      	movs	r1, #2
 80126a2:	68a2      	ldr	r2, [r4, #8]
 80126a4:	6923      	ldr	r3, [r4, #16]
 80126a6:	440a      	add	r2, r1
 80126a8:	7561      	strb	r1, [r4, #21]
 80126aa:	440b      	add	r3, r1
 80126ac:	60a2      	str	r2, [r4, #8]
 80126ae:	6123      	str	r3, [r4, #16]
 80126b0:	7da0      	ldrb	r0, [r4, #22]
 80126b2:	f080 0001 	eor.w	r0, r0, #1
 80126b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	802b      	strh	r3, [r5, #0]
 80126be:	e7ef      	b.n	80126a0 <ucdr_deserialize_int16_t+0x90>
 80126c0:	68a2      	ldr	r2, [r4, #8]
 80126c2:	6923      	ldr	r3, [r4, #16]
 80126c4:	1b92      	subs	r2, r2, r6
 80126c6:	7da0      	ldrb	r0, [r4, #22]
 80126c8:	1b9b      	subs	r3, r3, r6
 80126ca:	f884 8015 	strb.w	r8, [r4, #21]
 80126ce:	f080 0001 	eor.w	r0, r0, #1
 80126d2:	60a2      	str	r2, [r4, #8]
 80126d4:	6123      	str	r3, [r4, #16]
 80126d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126da:	68a3      	ldr	r3, [r4, #8]
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	706b      	strb	r3, [r5, #1]
 80126e0:	e7c2      	b.n	8012668 <ucdr_deserialize_int16_t+0x58>
 80126e2:	4639      	mov	r1, r7
 80126e4:	4632      	mov	r2, r6
 80126e6:	4628      	mov	r0, r5
 80126e8:	f00e fae5 	bl	8020cb6 <memcpy>
 80126ec:	464a      	mov	r2, r9
 80126ee:	19a8      	adds	r0, r5, r6
 80126f0:	68a1      	ldr	r1, [r4, #8]
 80126f2:	f00e fae0 	bl	8020cb6 <memcpy>
 80126f6:	e7b7      	b.n	8012668 <ucdr_deserialize_int16_t+0x58>

080126f8 <ucdr_serialize_int32_t>:
 80126f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126fc:	b082      	sub	sp, #8
 80126fe:	4604      	mov	r4, r0
 8012700:	9101      	str	r1, [sp, #4]
 8012702:	2104      	movs	r1, #4
 8012704:	f000 fcac 	bl	8013060 <ucdr_buffer_alignment>
 8012708:	4601      	mov	r1, r0
 801270a:	4620      	mov	r0, r4
 801270c:	7d67      	ldrb	r7, [r4, #21]
 801270e:	f000 fcef 	bl	80130f0 <ucdr_advance_buffer>
 8012712:	2104      	movs	r1, #4
 8012714:	4620      	mov	r0, r4
 8012716:	f000 fc43 	bl	8012fa0 <ucdr_check_buffer_available_for>
 801271a:	2800      	cmp	r0, #0
 801271c:	d139      	bne.n	8012792 <ucdr_serialize_int32_t+0x9a>
 801271e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012722:	42ab      	cmp	r3, r5
 8012724:	d930      	bls.n	8012788 <ucdr_serialize_int32_t+0x90>
 8012726:	1b5e      	subs	r6, r3, r5
 8012728:	60a3      	str	r3, [r4, #8]
 801272a:	6923      	ldr	r3, [r4, #16]
 801272c:	4620      	mov	r0, r4
 801272e:	f1c6 0804 	rsb	r8, r6, #4
 8012732:	4433      	add	r3, r6
 8012734:	4641      	mov	r1, r8
 8012736:	6123      	str	r3, [r4, #16]
 8012738:	f000 fc3e 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 801273c:	2800      	cmp	r0, #0
 801273e:	d04c      	beq.n	80127da <ucdr_serialize_int32_t+0xe2>
 8012740:	7d23      	ldrb	r3, [r4, #20]
 8012742:	2b01      	cmp	r3, #1
 8012744:	d063      	beq.n	801280e <ucdr_serialize_int32_t+0x116>
 8012746:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801274a:	702b      	strb	r3, [r5, #0]
 801274c:	2e00      	cmp	r6, #0
 801274e:	d051      	beq.n	80127f4 <ucdr_serialize_int32_t+0xfc>
 8012750:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012754:	2e01      	cmp	r6, #1
 8012756:	706b      	strb	r3, [r5, #1]
 8012758:	d050      	beq.n	80127fc <ucdr_serialize_int32_t+0x104>
 801275a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801275e:	2e02      	cmp	r6, #2
 8012760:	70ab      	strb	r3, [r5, #2]
 8012762:	d04f      	beq.n	8012804 <ucdr_serialize_int32_t+0x10c>
 8012764:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012768:	70eb      	strb	r3, [r5, #3]
 801276a:	6923      	ldr	r3, [r4, #16]
 801276c:	2104      	movs	r1, #4
 801276e:	68a2      	ldr	r2, [r4, #8]
 8012770:	3304      	adds	r3, #4
 8012772:	7da0      	ldrb	r0, [r4, #22]
 8012774:	4442      	add	r2, r8
 8012776:	7561      	strb	r1, [r4, #21]
 8012778:	1b9e      	subs	r6, r3, r6
 801277a:	f080 0001 	eor.w	r0, r0, #1
 801277e:	60a2      	str	r2, [r4, #8]
 8012780:	6126      	str	r6, [r4, #16]
 8012782:	b002      	add	sp, #8
 8012784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012788:	2104      	movs	r1, #4
 801278a:	4620      	mov	r0, r4
 801278c:	f000 fc14 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012790:	b1d0      	cbz	r0, 80127c8 <ucdr_serialize_int32_t+0xd0>
 8012792:	7d23      	ldrb	r3, [r4, #20]
 8012794:	2b01      	cmp	r3, #1
 8012796:	68a3      	ldr	r3, [r4, #8]
 8012798:	d01c      	beq.n	80127d4 <ucdr_serialize_int32_t+0xdc>
 801279a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801279e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80127a2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80127a6:	7018      	strb	r0, [r3, #0]
 80127a8:	68a3      	ldr	r3, [r4, #8]
 80127aa:	705a      	strb	r2, [r3, #1]
 80127ac:	68a3      	ldr	r3, [r4, #8]
 80127ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80127b2:	7099      	strb	r1, [r3, #2]
 80127b4:	68a3      	ldr	r3, [r4, #8]
 80127b6:	70da      	strb	r2, [r3, #3]
 80127b8:	2104      	movs	r1, #4
 80127ba:	68a2      	ldr	r2, [r4, #8]
 80127bc:	6923      	ldr	r3, [r4, #16]
 80127be:	440a      	add	r2, r1
 80127c0:	7561      	strb	r1, [r4, #21]
 80127c2:	440b      	add	r3, r1
 80127c4:	60a2      	str	r2, [r4, #8]
 80127c6:	6123      	str	r3, [r4, #16]
 80127c8:	7da0      	ldrb	r0, [r4, #22]
 80127ca:	f080 0001 	eor.w	r0, r0, #1
 80127ce:	b002      	add	sp, #8
 80127d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127d4:	9a01      	ldr	r2, [sp, #4]
 80127d6:	601a      	str	r2, [r3, #0]
 80127d8:	e7ee      	b.n	80127b8 <ucdr_serialize_int32_t+0xc0>
 80127da:	68a2      	ldr	r2, [r4, #8]
 80127dc:	6923      	ldr	r3, [r4, #16]
 80127de:	7da0      	ldrb	r0, [r4, #22]
 80127e0:	1b92      	subs	r2, r2, r6
 80127e2:	1b9b      	subs	r3, r3, r6
 80127e4:	7567      	strb	r7, [r4, #21]
 80127e6:	f080 0001 	eor.w	r0, r0, #1
 80127ea:	60a2      	str	r2, [r4, #8]
 80127ec:	6123      	str	r3, [r4, #16]
 80127ee:	b002      	add	sp, #8
 80127f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f4:	68a3      	ldr	r3, [r4, #8]
 80127f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80127fa:	701a      	strb	r2, [r3, #0]
 80127fc:	68a3      	ldr	r3, [r4, #8]
 80127fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012802:	701a      	strb	r2, [r3, #0]
 8012804:	68a3      	ldr	r3, [r4, #8]
 8012806:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801280a:	701a      	strb	r2, [r3, #0]
 801280c:	e7ad      	b.n	801276a <ucdr_serialize_int32_t+0x72>
 801280e:	4628      	mov	r0, r5
 8012810:	ad01      	add	r5, sp, #4
 8012812:	4632      	mov	r2, r6
 8012814:	4629      	mov	r1, r5
 8012816:	f00e fa4e 	bl	8020cb6 <memcpy>
 801281a:	4642      	mov	r2, r8
 801281c:	19a9      	adds	r1, r5, r6
 801281e:	68a0      	ldr	r0, [r4, #8]
 8012820:	f00e fa49 	bl	8020cb6 <memcpy>
 8012824:	e7a1      	b.n	801276a <ucdr_serialize_int32_t+0x72>
 8012826:	bf00      	nop

08012828 <ucdr_deserialize_int32_t>:
 8012828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801282c:	4604      	mov	r4, r0
 801282e:	460d      	mov	r5, r1
 8012830:	2104      	movs	r1, #4
 8012832:	f000 fc15 	bl	8013060 <ucdr_buffer_alignment>
 8012836:	4601      	mov	r1, r0
 8012838:	4620      	mov	r0, r4
 801283a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801283e:	f000 fc57 	bl	80130f0 <ucdr_advance_buffer>
 8012842:	2104      	movs	r1, #4
 8012844:	4620      	mov	r0, r4
 8012846:	f000 fbab 	bl	8012fa0 <ucdr_check_buffer_available_for>
 801284a:	2800      	cmp	r0, #0
 801284c:	d138      	bne.n	80128c0 <ucdr_deserialize_int32_t+0x98>
 801284e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012852:	42b7      	cmp	r7, r6
 8012854:	d92f      	bls.n	80128b6 <ucdr_deserialize_int32_t+0x8e>
 8012856:	6923      	ldr	r3, [r4, #16]
 8012858:	4620      	mov	r0, r4
 801285a:	60a7      	str	r7, [r4, #8]
 801285c:	1bbf      	subs	r7, r7, r6
 801285e:	443b      	add	r3, r7
 8012860:	f1c7 0904 	rsb	r9, r7, #4
 8012864:	6123      	str	r3, [r4, #16]
 8012866:	4649      	mov	r1, r9
 8012868:	f000 fba6 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 801286c:	2800      	cmp	r0, #0
 801286e:	d046      	beq.n	80128fe <ucdr_deserialize_int32_t+0xd6>
 8012870:	7d23      	ldrb	r3, [r4, #20]
 8012872:	2b01      	cmp	r3, #1
 8012874:	d05c      	beq.n	8012930 <ucdr_deserialize_int32_t+0x108>
 8012876:	78f3      	ldrb	r3, [r6, #3]
 8012878:	702b      	strb	r3, [r5, #0]
 801287a:	2f00      	cmp	r7, #0
 801287c:	d04c      	beq.n	8012918 <ucdr_deserialize_int32_t+0xf0>
 801287e:	78b3      	ldrb	r3, [r6, #2]
 8012880:	2f01      	cmp	r7, #1
 8012882:	706b      	strb	r3, [r5, #1]
 8012884:	f105 0302 	add.w	r3, r5, #2
 8012888:	d04a      	beq.n	8012920 <ucdr_deserialize_int32_t+0xf8>
 801288a:	7873      	ldrb	r3, [r6, #1]
 801288c:	2f02      	cmp	r7, #2
 801288e:	70ab      	strb	r3, [r5, #2]
 8012890:	f105 0303 	add.w	r3, r5, #3
 8012894:	d048      	beq.n	8012928 <ucdr_deserialize_int32_t+0x100>
 8012896:	7833      	ldrb	r3, [r6, #0]
 8012898:	70eb      	strb	r3, [r5, #3]
 801289a:	6923      	ldr	r3, [r4, #16]
 801289c:	2104      	movs	r1, #4
 801289e:	68a2      	ldr	r2, [r4, #8]
 80128a0:	3304      	adds	r3, #4
 80128a2:	7da0      	ldrb	r0, [r4, #22]
 80128a4:	444a      	add	r2, r9
 80128a6:	7561      	strb	r1, [r4, #21]
 80128a8:	1bdb      	subs	r3, r3, r7
 80128aa:	f080 0001 	eor.w	r0, r0, #1
 80128ae:	60a2      	str	r2, [r4, #8]
 80128b0:	6123      	str	r3, [r4, #16]
 80128b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128b6:	2104      	movs	r1, #4
 80128b8:	4620      	mov	r0, r4
 80128ba:	f000 fb7d 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 80128be:	b1b0      	cbz	r0, 80128ee <ucdr_deserialize_int32_t+0xc6>
 80128c0:	7d23      	ldrb	r3, [r4, #20]
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	68a3      	ldr	r3, [r4, #8]
 80128c6:	d017      	beq.n	80128f8 <ucdr_deserialize_int32_t+0xd0>
 80128c8:	78db      	ldrb	r3, [r3, #3]
 80128ca:	702b      	strb	r3, [r5, #0]
 80128cc:	68a3      	ldr	r3, [r4, #8]
 80128ce:	789b      	ldrb	r3, [r3, #2]
 80128d0:	706b      	strb	r3, [r5, #1]
 80128d2:	68a3      	ldr	r3, [r4, #8]
 80128d4:	785b      	ldrb	r3, [r3, #1]
 80128d6:	70ab      	strb	r3, [r5, #2]
 80128d8:	68a3      	ldr	r3, [r4, #8]
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	70eb      	strb	r3, [r5, #3]
 80128de:	2104      	movs	r1, #4
 80128e0:	68a2      	ldr	r2, [r4, #8]
 80128e2:	6923      	ldr	r3, [r4, #16]
 80128e4:	440a      	add	r2, r1
 80128e6:	7561      	strb	r1, [r4, #21]
 80128e8:	440b      	add	r3, r1
 80128ea:	60a2      	str	r2, [r4, #8]
 80128ec:	6123      	str	r3, [r4, #16]
 80128ee:	7da0      	ldrb	r0, [r4, #22]
 80128f0:	f080 0001 	eor.w	r0, r0, #1
 80128f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	602b      	str	r3, [r5, #0]
 80128fc:	e7ef      	b.n	80128de <ucdr_deserialize_int32_t+0xb6>
 80128fe:	68a2      	ldr	r2, [r4, #8]
 8012900:	6923      	ldr	r3, [r4, #16]
 8012902:	1bd2      	subs	r2, r2, r7
 8012904:	7da0      	ldrb	r0, [r4, #22]
 8012906:	1bdb      	subs	r3, r3, r7
 8012908:	f884 8015 	strb.w	r8, [r4, #21]
 801290c:	f080 0001 	eor.w	r0, r0, #1
 8012910:	60a2      	str	r2, [r4, #8]
 8012912:	6123      	str	r3, [r4, #16]
 8012914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012918:	68a3      	ldr	r3, [r4, #8]
 801291a:	789b      	ldrb	r3, [r3, #2]
 801291c:	706b      	strb	r3, [r5, #1]
 801291e:	1cab      	adds	r3, r5, #2
 8012920:	68a2      	ldr	r2, [r4, #8]
 8012922:	7852      	ldrb	r2, [r2, #1]
 8012924:	f803 2b01 	strb.w	r2, [r3], #1
 8012928:	68a2      	ldr	r2, [r4, #8]
 801292a:	7812      	ldrb	r2, [r2, #0]
 801292c:	701a      	strb	r2, [r3, #0]
 801292e:	e7b4      	b.n	801289a <ucdr_deserialize_int32_t+0x72>
 8012930:	4631      	mov	r1, r6
 8012932:	463a      	mov	r2, r7
 8012934:	4628      	mov	r0, r5
 8012936:	f00e f9be 	bl	8020cb6 <memcpy>
 801293a:	464a      	mov	r2, r9
 801293c:	19e8      	adds	r0, r5, r7
 801293e:	68a1      	ldr	r1, [r4, #8]
 8012940:	f00e f9b9 	bl	8020cb6 <memcpy>
 8012944:	e7a9      	b.n	801289a <ucdr_deserialize_int32_t+0x72>
 8012946:	bf00      	nop

08012948 <ucdr_serialize_int64_t>:
 8012948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801294c:	4604      	mov	r4, r0
 801294e:	b082      	sub	sp, #8
 8012950:	2108      	movs	r1, #8
 8012952:	e9cd 2300 	strd	r2, r3, [sp]
 8012956:	f000 fb83 	bl	8013060 <ucdr_buffer_alignment>
 801295a:	4601      	mov	r1, r0
 801295c:	4620      	mov	r0, r4
 801295e:	7d67      	ldrb	r7, [r4, #21]
 8012960:	f000 fbc6 	bl	80130f0 <ucdr_advance_buffer>
 8012964:	2108      	movs	r1, #8
 8012966:	4620      	mov	r0, r4
 8012968:	f000 fb1a 	bl	8012fa0 <ucdr_check_buffer_available_for>
 801296c:	2800      	cmp	r0, #0
 801296e:	d14e      	bne.n	8012a0e <ucdr_serialize_int64_t+0xc6>
 8012970:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012974:	42ab      	cmp	r3, r5
 8012976:	d945      	bls.n	8012a04 <ucdr_serialize_int64_t+0xbc>
 8012978:	1b5e      	subs	r6, r3, r5
 801297a:	60a3      	str	r3, [r4, #8]
 801297c:	6923      	ldr	r3, [r4, #16]
 801297e:	4620      	mov	r0, r4
 8012980:	f1c6 0808 	rsb	r8, r6, #8
 8012984:	4433      	add	r3, r6
 8012986:	4641      	mov	r1, r8
 8012988:	6123      	str	r3, [r4, #16]
 801298a:	f000 fb15 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 801298e:	2800      	cmp	r0, #0
 8012990:	d074      	beq.n	8012a7c <ucdr_serialize_int64_t+0x134>
 8012992:	7d23      	ldrb	r3, [r4, #20]
 8012994:	2b01      	cmp	r3, #1
 8012996:	f000 809b 	beq.w	8012ad0 <ucdr_serialize_int64_t+0x188>
 801299a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801299e:	702b      	strb	r3, [r5, #0]
 80129a0:	2e00      	cmp	r6, #0
 80129a2:	d078      	beq.n	8012a96 <ucdr_serialize_int64_t+0x14e>
 80129a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80129a8:	2e01      	cmp	r6, #1
 80129aa:	706b      	strb	r3, [r5, #1]
 80129ac:	d077      	beq.n	8012a9e <ucdr_serialize_int64_t+0x156>
 80129ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129b2:	2e02      	cmp	r6, #2
 80129b4:	70ab      	strb	r3, [r5, #2]
 80129b6:	d076      	beq.n	8012aa6 <ucdr_serialize_int64_t+0x15e>
 80129b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129bc:	2e03      	cmp	r6, #3
 80129be:	70eb      	strb	r3, [r5, #3]
 80129c0:	d075      	beq.n	8012aae <ucdr_serialize_int64_t+0x166>
 80129c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80129c6:	2e04      	cmp	r6, #4
 80129c8:	712b      	strb	r3, [r5, #4]
 80129ca:	d074      	beq.n	8012ab6 <ucdr_serialize_int64_t+0x16e>
 80129cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80129d0:	2e05      	cmp	r6, #5
 80129d2:	716b      	strb	r3, [r5, #5]
 80129d4:	d073      	beq.n	8012abe <ucdr_serialize_int64_t+0x176>
 80129d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80129da:	2e06      	cmp	r6, #6
 80129dc:	71ab      	strb	r3, [r5, #6]
 80129de:	d072      	beq.n	8012ac6 <ucdr_serialize_int64_t+0x17e>
 80129e0:	f89d 3000 	ldrb.w	r3, [sp]
 80129e4:	71eb      	strb	r3, [r5, #7]
 80129e6:	6923      	ldr	r3, [r4, #16]
 80129e8:	2108      	movs	r1, #8
 80129ea:	68a2      	ldr	r2, [r4, #8]
 80129ec:	3308      	adds	r3, #8
 80129ee:	7da0      	ldrb	r0, [r4, #22]
 80129f0:	4442      	add	r2, r8
 80129f2:	7561      	strb	r1, [r4, #21]
 80129f4:	1b9e      	subs	r6, r3, r6
 80129f6:	f080 0001 	eor.w	r0, r0, #1
 80129fa:	60a2      	str	r2, [r4, #8]
 80129fc:	6126      	str	r6, [r4, #16]
 80129fe:	b002      	add	sp, #8
 8012a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a04:	2108      	movs	r1, #8
 8012a06:	4620      	mov	r0, r4
 8012a08:	f000 fad6 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012a0c:	b350      	cbz	r0, 8012a64 <ucdr_serialize_int64_t+0x11c>
 8012a0e:	7d23      	ldrb	r3, [r4, #20]
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d02d      	beq.n	8012a70 <ucdr_serialize_int64_t+0x128>
 8012a14:	68a3      	ldr	r3, [r4, #8]
 8012a16:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012a1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012a22:	7018      	strb	r0, [r3, #0]
 8012a24:	68a3      	ldr	r3, [r4, #8]
 8012a26:	705a      	strb	r2, [r3, #1]
 8012a28:	68a3      	ldr	r3, [r4, #8]
 8012a2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012a32:	7099      	strb	r1, [r3, #2]
 8012a34:	68a3      	ldr	r3, [r4, #8]
 8012a36:	70da      	strb	r2, [r3, #3]
 8012a38:	68a3      	ldr	r3, [r4, #8]
 8012a3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a3e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012a42:	7118      	strb	r0, [r3, #4]
 8012a44:	68a3      	ldr	r3, [r4, #8]
 8012a46:	715a      	strb	r2, [r3, #5]
 8012a48:	68a3      	ldr	r3, [r4, #8]
 8012a4a:	f89d 2000 	ldrb.w	r2, [sp]
 8012a4e:	7199      	strb	r1, [r3, #6]
 8012a50:	68a3      	ldr	r3, [r4, #8]
 8012a52:	71da      	strb	r2, [r3, #7]
 8012a54:	2108      	movs	r1, #8
 8012a56:	68a2      	ldr	r2, [r4, #8]
 8012a58:	6923      	ldr	r3, [r4, #16]
 8012a5a:	440a      	add	r2, r1
 8012a5c:	7561      	strb	r1, [r4, #21]
 8012a5e:	440b      	add	r3, r1
 8012a60:	60a2      	str	r2, [r4, #8]
 8012a62:	6123      	str	r3, [r4, #16]
 8012a64:	7da0      	ldrb	r0, [r4, #22]
 8012a66:	f080 0001 	eor.w	r0, r0, #1
 8012a6a:	b002      	add	sp, #8
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	466b      	mov	r3, sp
 8012a72:	68a2      	ldr	r2, [r4, #8]
 8012a74:	cb03      	ldmia	r3!, {r0, r1}
 8012a76:	6010      	str	r0, [r2, #0]
 8012a78:	6051      	str	r1, [r2, #4]
 8012a7a:	e7eb      	b.n	8012a54 <ucdr_serialize_int64_t+0x10c>
 8012a7c:	68a2      	ldr	r2, [r4, #8]
 8012a7e:	6923      	ldr	r3, [r4, #16]
 8012a80:	7da0      	ldrb	r0, [r4, #22]
 8012a82:	1b92      	subs	r2, r2, r6
 8012a84:	1b9b      	subs	r3, r3, r6
 8012a86:	7567      	strb	r7, [r4, #21]
 8012a88:	f080 0001 	eor.w	r0, r0, #1
 8012a8c:	60a2      	str	r2, [r4, #8]
 8012a8e:	6123      	str	r3, [r4, #16]
 8012a90:	b002      	add	sp, #8
 8012a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a96:	68a3      	ldr	r3, [r4, #8]
 8012a98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a9c:	701a      	strb	r2, [r3, #0]
 8012a9e:	68a3      	ldr	r3, [r4, #8]
 8012aa0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012aa4:	701a      	strb	r2, [r3, #0]
 8012aa6:	68a3      	ldr	r3, [r4, #8]
 8012aa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012aac:	701a      	strb	r2, [r3, #0]
 8012aae:	68a3      	ldr	r3, [r4, #8]
 8012ab0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012ab4:	701a      	strb	r2, [r3, #0]
 8012ab6:	68a3      	ldr	r3, [r4, #8]
 8012ab8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012abc:	701a      	strb	r2, [r3, #0]
 8012abe:	68a3      	ldr	r3, [r4, #8]
 8012ac0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012ac4:	701a      	strb	r2, [r3, #0]
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	f89d 2000 	ldrb.w	r2, [sp]
 8012acc:	701a      	strb	r2, [r3, #0]
 8012ace:	e78a      	b.n	80129e6 <ucdr_serialize_int64_t+0x9e>
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	466d      	mov	r5, sp
 8012ad4:	4632      	mov	r2, r6
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	f00e f8ed 	bl	8020cb6 <memcpy>
 8012adc:	4642      	mov	r2, r8
 8012ade:	19a9      	adds	r1, r5, r6
 8012ae0:	68a0      	ldr	r0, [r4, #8]
 8012ae2:	f00e f8e8 	bl	8020cb6 <memcpy>
 8012ae6:	e77e      	b.n	80129e6 <ucdr_serialize_int64_t+0x9e>

08012ae8 <ucdr_deserialize_int64_t>:
 8012ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012aec:	4604      	mov	r4, r0
 8012aee:	460d      	mov	r5, r1
 8012af0:	2108      	movs	r1, #8
 8012af2:	f000 fab5 	bl	8013060 <ucdr_buffer_alignment>
 8012af6:	4601      	mov	r1, r0
 8012af8:	4620      	mov	r0, r4
 8012afa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012afe:	f000 faf7 	bl	80130f0 <ucdr_advance_buffer>
 8012b02:	2108      	movs	r1, #8
 8012b04:	4620      	mov	r0, r4
 8012b06:	f000 fa4b 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d151      	bne.n	8012bb2 <ucdr_deserialize_int64_t+0xca>
 8012b0e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012b12:	42be      	cmp	r6, r7
 8012b14:	d948      	bls.n	8012ba8 <ucdr_deserialize_int64_t+0xc0>
 8012b16:	6923      	ldr	r3, [r4, #16]
 8012b18:	4620      	mov	r0, r4
 8012b1a:	60a6      	str	r6, [r4, #8]
 8012b1c:	1bf6      	subs	r6, r6, r7
 8012b1e:	4433      	add	r3, r6
 8012b20:	f1c6 0908 	rsb	r9, r6, #8
 8012b24:	6123      	str	r3, [r4, #16]
 8012b26:	4649      	mov	r1, r9
 8012b28:	f000 fa46 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	d06d      	beq.n	8012c0c <ucdr_deserialize_int64_t+0x124>
 8012b30:	7d23      	ldrb	r3, [r4, #20]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	f000 8093 	beq.w	8012c5e <ucdr_deserialize_int64_t+0x176>
 8012b38:	79fb      	ldrb	r3, [r7, #7]
 8012b3a:	702b      	strb	r3, [r5, #0]
 8012b3c:	2e00      	cmp	r6, #0
 8012b3e:	d072      	beq.n	8012c26 <ucdr_deserialize_int64_t+0x13e>
 8012b40:	79bb      	ldrb	r3, [r7, #6]
 8012b42:	2e01      	cmp	r6, #1
 8012b44:	706b      	strb	r3, [r5, #1]
 8012b46:	f105 0302 	add.w	r3, r5, #2
 8012b4a:	d070      	beq.n	8012c2e <ucdr_deserialize_int64_t+0x146>
 8012b4c:	797b      	ldrb	r3, [r7, #5]
 8012b4e:	2e02      	cmp	r6, #2
 8012b50:	70ab      	strb	r3, [r5, #2]
 8012b52:	f105 0303 	add.w	r3, r5, #3
 8012b56:	d06e      	beq.n	8012c36 <ucdr_deserialize_int64_t+0x14e>
 8012b58:	793b      	ldrb	r3, [r7, #4]
 8012b5a:	2e03      	cmp	r6, #3
 8012b5c:	70eb      	strb	r3, [r5, #3]
 8012b5e:	f105 0304 	add.w	r3, r5, #4
 8012b62:	d06c      	beq.n	8012c3e <ucdr_deserialize_int64_t+0x156>
 8012b64:	78fb      	ldrb	r3, [r7, #3]
 8012b66:	2e04      	cmp	r6, #4
 8012b68:	712b      	strb	r3, [r5, #4]
 8012b6a:	f105 0305 	add.w	r3, r5, #5
 8012b6e:	d06a      	beq.n	8012c46 <ucdr_deserialize_int64_t+0x15e>
 8012b70:	78bb      	ldrb	r3, [r7, #2]
 8012b72:	2e05      	cmp	r6, #5
 8012b74:	716b      	strb	r3, [r5, #5]
 8012b76:	f105 0306 	add.w	r3, r5, #6
 8012b7a:	d068      	beq.n	8012c4e <ucdr_deserialize_int64_t+0x166>
 8012b7c:	787b      	ldrb	r3, [r7, #1]
 8012b7e:	2e06      	cmp	r6, #6
 8012b80:	71ab      	strb	r3, [r5, #6]
 8012b82:	f105 0307 	add.w	r3, r5, #7
 8012b86:	d066      	beq.n	8012c56 <ucdr_deserialize_int64_t+0x16e>
 8012b88:	783b      	ldrb	r3, [r7, #0]
 8012b8a:	71eb      	strb	r3, [r5, #7]
 8012b8c:	6923      	ldr	r3, [r4, #16]
 8012b8e:	2108      	movs	r1, #8
 8012b90:	68a2      	ldr	r2, [r4, #8]
 8012b92:	3308      	adds	r3, #8
 8012b94:	7da0      	ldrb	r0, [r4, #22]
 8012b96:	444a      	add	r2, r9
 8012b98:	7561      	strb	r1, [r4, #21]
 8012b9a:	1b9e      	subs	r6, r3, r6
 8012b9c:	f080 0001 	eor.w	r0, r0, #1
 8012ba0:	60a2      	str	r2, [r4, #8]
 8012ba2:	6126      	str	r6, [r4, #16]
 8012ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ba8:	2108      	movs	r1, #8
 8012baa:	4620      	mov	r0, r4
 8012bac:	f000 fa04 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012bb0:	b310      	cbz	r0, 8012bf8 <ucdr_deserialize_int64_t+0x110>
 8012bb2:	7d23      	ldrb	r3, [r4, #20]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	68a3      	ldr	r3, [r4, #8]
 8012bb8:	d023      	beq.n	8012c02 <ucdr_deserialize_int64_t+0x11a>
 8012bba:	79db      	ldrb	r3, [r3, #7]
 8012bbc:	702b      	strb	r3, [r5, #0]
 8012bbe:	68a3      	ldr	r3, [r4, #8]
 8012bc0:	799b      	ldrb	r3, [r3, #6]
 8012bc2:	706b      	strb	r3, [r5, #1]
 8012bc4:	68a3      	ldr	r3, [r4, #8]
 8012bc6:	795b      	ldrb	r3, [r3, #5]
 8012bc8:	70ab      	strb	r3, [r5, #2]
 8012bca:	68a3      	ldr	r3, [r4, #8]
 8012bcc:	791b      	ldrb	r3, [r3, #4]
 8012bce:	70eb      	strb	r3, [r5, #3]
 8012bd0:	68a3      	ldr	r3, [r4, #8]
 8012bd2:	78db      	ldrb	r3, [r3, #3]
 8012bd4:	712b      	strb	r3, [r5, #4]
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	789b      	ldrb	r3, [r3, #2]
 8012bda:	716b      	strb	r3, [r5, #5]
 8012bdc:	68a3      	ldr	r3, [r4, #8]
 8012bde:	785b      	ldrb	r3, [r3, #1]
 8012be0:	71ab      	strb	r3, [r5, #6]
 8012be2:	68a3      	ldr	r3, [r4, #8]
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	71eb      	strb	r3, [r5, #7]
 8012be8:	2108      	movs	r1, #8
 8012bea:	68a2      	ldr	r2, [r4, #8]
 8012bec:	6923      	ldr	r3, [r4, #16]
 8012bee:	440a      	add	r2, r1
 8012bf0:	7561      	strb	r1, [r4, #21]
 8012bf2:	440b      	add	r3, r1
 8012bf4:	60a2      	str	r2, [r4, #8]
 8012bf6:	6123      	str	r3, [r4, #16]
 8012bf8:	7da0      	ldrb	r0, [r4, #22]
 8012bfa:	f080 0001 	eor.w	r0, r0, #1
 8012bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	685b      	ldr	r3, [r3, #4]
 8012c06:	602a      	str	r2, [r5, #0]
 8012c08:	606b      	str	r3, [r5, #4]
 8012c0a:	e7ed      	b.n	8012be8 <ucdr_deserialize_int64_t+0x100>
 8012c0c:	68a2      	ldr	r2, [r4, #8]
 8012c0e:	6923      	ldr	r3, [r4, #16]
 8012c10:	1b92      	subs	r2, r2, r6
 8012c12:	7da0      	ldrb	r0, [r4, #22]
 8012c14:	1b9b      	subs	r3, r3, r6
 8012c16:	f884 8015 	strb.w	r8, [r4, #21]
 8012c1a:	f080 0001 	eor.w	r0, r0, #1
 8012c1e:	60a2      	str	r2, [r4, #8]
 8012c20:	6123      	str	r3, [r4, #16]
 8012c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c26:	68a3      	ldr	r3, [r4, #8]
 8012c28:	799b      	ldrb	r3, [r3, #6]
 8012c2a:	706b      	strb	r3, [r5, #1]
 8012c2c:	1cab      	adds	r3, r5, #2
 8012c2e:	68a2      	ldr	r2, [r4, #8]
 8012c30:	7952      	ldrb	r2, [r2, #5]
 8012c32:	f803 2b01 	strb.w	r2, [r3], #1
 8012c36:	68a2      	ldr	r2, [r4, #8]
 8012c38:	7912      	ldrb	r2, [r2, #4]
 8012c3a:	f803 2b01 	strb.w	r2, [r3], #1
 8012c3e:	68a2      	ldr	r2, [r4, #8]
 8012c40:	78d2      	ldrb	r2, [r2, #3]
 8012c42:	f803 2b01 	strb.w	r2, [r3], #1
 8012c46:	68a2      	ldr	r2, [r4, #8]
 8012c48:	7892      	ldrb	r2, [r2, #2]
 8012c4a:	f803 2b01 	strb.w	r2, [r3], #1
 8012c4e:	68a2      	ldr	r2, [r4, #8]
 8012c50:	7852      	ldrb	r2, [r2, #1]
 8012c52:	f803 2b01 	strb.w	r2, [r3], #1
 8012c56:	68a2      	ldr	r2, [r4, #8]
 8012c58:	7812      	ldrb	r2, [r2, #0]
 8012c5a:	701a      	strb	r2, [r3, #0]
 8012c5c:	e796      	b.n	8012b8c <ucdr_deserialize_int64_t+0xa4>
 8012c5e:	4639      	mov	r1, r7
 8012c60:	4632      	mov	r2, r6
 8012c62:	4628      	mov	r0, r5
 8012c64:	f00e f827 	bl	8020cb6 <memcpy>
 8012c68:	464a      	mov	r2, r9
 8012c6a:	19a8      	adds	r0, r5, r6
 8012c6c:	68a1      	ldr	r1, [r4, #8]
 8012c6e:	f00e f822 	bl	8020cb6 <memcpy>
 8012c72:	e78b      	b.n	8012b8c <ucdr_deserialize_int64_t+0xa4>

08012c74 <ucdr_serialize_double>:
 8012c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c78:	4604      	mov	r4, r0
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	2108      	movs	r1, #8
 8012c7e:	ed8d 0b00 	vstr	d0, [sp]
 8012c82:	f000 f9ed 	bl	8013060 <ucdr_buffer_alignment>
 8012c86:	4601      	mov	r1, r0
 8012c88:	4620      	mov	r0, r4
 8012c8a:	7d67      	ldrb	r7, [r4, #21]
 8012c8c:	f000 fa30 	bl	80130f0 <ucdr_advance_buffer>
 8012c90:	2108      	movs	r1, #8
 8012c92:	4620      	mov	r0, r4
 8012c94:	f000 f984 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	d14e      	bne.n	8012d3a <ucdr_serialize_double+0xc6>
 8012c9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012ca0:	42ab      	cmp	r3, r5
 8012ca2:	d945      	bls.n	8012d30 <ucdr_serialize_double+0xbc>
 8012ca4:	1b5e      	subs	r6, r3, r5
 8012ca6:	60a3      	str	r3, [r4, #8]
 8012ca8:	6923      	ldr	r3, [r4, #16]
 8012caa:	4620      	mov	r0, r4
 8012cac:	f1c6 0808 	rsb	r8, r6, #8
 8012cb0:	4433      	add	r3, r6
 8012cb2:	4641      	mov	r1, r8
 8012cb4:	6123      	str	r3, [r4, #16]
 8012cb6:	f000 f97f 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	d074      	beq.n	8012da8 <ucdr_serialize_double+0x134>
 8012cbe:	7d23      	ldrb	r3, [r4, #20]
 8012cc0:	2b01      	cmp	r3, #1
 8012cc2:	f000 809b 	beq.w	8012dfc <ucdr_serialize_double+0x188>
 8012cc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012cca:	702b      	strb	r3, [r5, #0]
 8012ccc:	2e00      	cmp	r6, #0
 8012cce:	d078      	beq.n	8012dc2 <ucdr_serialize_double+0x14e>
 8012cd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012cd4:	2e01      	cmp	r6, #1
 8012cd6:	706b      	strb	r3, [r5, #1]
 8012cd8:	d077      	beq.n	8012dca <ucdr_serialize_double+0x156>
 8012cda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012cde:	2e02      	cmp	r6, #2
 8012ce0:	70ab      	strb	r3, [r5, #2]
 8012ce2:	d076      	beq.n	8012dd2 <ucdr_serialize_double+0x15e>
 8012ce4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ce8:	2e03      	cmp	r6, #3
 8012cea:	70eb      	strb	r3, [r5, #3]
 8012cec:	d075      	beq.n	8012dda <ucdr_serialize_double+0x166>
 8012cee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012cf2:	2e04      	cmp	r6, #4
 8012cf4:	712b      	strb	r3, [r5, #4]
 8012cf6:	d074      	beq.n	8012de2 <ucdr_serialize_double+0x16e>
 8012cf8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012cfc:	2e05      	cmp	r6, #5
 8012cfe:	716b      	strb	r3, [r5, #5]
 8012d00:	d073      	beq.n	8012dea <ucdr_serialize_double+0x176>
 8012d02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012d06:	2e06      	cmp	r6, #6
 8012d08:	71ab      	strb	r3, [r5, #6]
 8012d0a:	d072      	beq.n	8012df2 <ucdr_serialize_double+0x17e>
 8012d0c:	f89d 3000 	ldrb.w	r3, [sp]
 8012d10:	71eb      	strb	r3, [r5, #7]
 8012d12:	6923      	ldr	r3, [r4, #16]
 8012d14:	2108      	movs	r1, #8
 8012d16:	68a2      	ldr	r2, [r4, #8]
 8012d18:	3308      	adds	r3, #8
 8012d1a:	7da0      	ldrb	r0, [r4, #22]
 8012d1c:	4442      	add	r2, r8
 8012d1e:	7561      	strb	r1, [r4, #21]
 8012d20:	1b9e      	subs	r6, r3, r6
 8012d22:	f080 0001 	eor.w	r0, r0, #1
 8012d26:	60a2      	str	r2, [r4, #8]
 8012d28:	6126      	str	r6, [r4, #16]
 8012d2a:	b002      	add	sp, #8
 8012d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d30:	2108      	movs	r1, #8
 8012d32:	4620      	mov	r0, r4
 8012d34:	f000 f940 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012d38:	b350      	cbz	r0, 8012d90 <ucdr_serialize_double+0x11c>
 8012d3a:	7d23      	ldrb	r3, [r4, #20]
 8012d3c:	2b01      	cmp	r3, #1
 8012d3e:	d02d      	beq.n	8012d9c <ucdr_serialize_double+0x128>
 8012d40:	68a3      	ldr	r3, [r4, #8]
 8012d42:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012d46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d4a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012d4e:	7018      	strb	r0, [r3, #0]
 8012d50:	68a3      	ldr	r3, [r4, #8]
 8012d52:	705a      	strb	r2, [r3, #1]
 8012d54:	68a3      	ldr	r3, [r4, #8]
 8012d56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d5a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012d5e:	7099      	strb	r1, [r3, #2]
 8012d60:	68a3      	ldr	r3, [r4, #8]
 8012d62:	70da      	strb	r2, [r3, #3]
 8012d64:	68a3      	ldr	r3, [r4, #8]
 8012d66:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012d6a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012d6e:	7118      	strb	r0, [r3, #4]
 8012d70:	68a3      	ldr	r3, [r4, #8]
 8012d72:	715a      	strb	r2, [r3, #5]
 8012d74:	68a3      	ldr	r3, [r4, #8]
 8012d76:	f89d 2000 	ldrb.w	r2, [sp]
 8012d7a:	7199      	strb	r1, [r3, #6]
 8012d7c:	68a3      	ldr	r3, [r4, #8]
 8012d7e:	71da      	strb	r2, [r3, #7]
 8012d80:	2108      	movs	r1, #8
 8012d82:	68a2      	ldr	r2, [r4, #8]
 8012d84:	6923      	ldr	r3, [r4, #16]
 8012d86:	440a      	add	r2, r1
 8012d88:	7561      	strb	r1, [r4, #21]
 8012d8a:	440b      	add	r3, r1
 8012d8c:	60a2      	str	r2, [r4, #8]
 8012d8e:	6123      	str	r3, [r4, #16]
 8012d90:	7da0      	ldrb	r0, [r4, #22]
 8012d92:	f080 0001 	eor.w	r0, r0, #1
 8012d96:	b002      	add	sp, #8
 8012d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d9c:	466b      	mov	r3, sp
 8012d9e:	68a2      	ldr	r2, [r4, #8]
 8012da0:	cb03      	ldmia	r3!, {r0, r1}
 8012da2:	6010      	str	r0, [r2, #0]
 8012da4:	6051      	str	r1, [r2, #4]
 8012da6:	e7eb      	b.n	8012d80 <ucdr_serialize_double+0x10c>
 8012da8:	68a2      	ldr	r2, [r4, #8]
 8012daa:	6923      	ldr	r3, [r4, #16]
 8012dac:	7da0      	ldrb	r0, [r4, #22]
 8012dae:	1b92      	subs	r2, r2, r6
 8012db0:	1b9b      	subs	r3, r3, r6
 8012db2:	7567      	strb	r7, [r4, #21]
 8012db4:	f080 0001 	eor.w	r0, r0, #1
 8012db8:	60a2      	str	r2, [r4, #8]
 8012dba:	6123      	str	r3, [r4, #16]
 8012dbc:	b002      	add	sp, #8
 8012dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc2:	68a3      	ldr	r3, [r4, #8]
 8012dc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dc8:	701a      	strb	r2, [r3, #0]
 8012dca:	68a3      	ldr	r3, [r4, #8]
 8012dcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012dd0:	701a      	strb	r2, [r3, #0]
 8012dd2:	68a3      	ldr	r3, [r4, #8]
 8012dd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012dd8:	701a      	strb	r2, [r3, #0]
 8012dda:	68a3      	ldr	r3, [r4, #8]
 8012ddc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012de0:	701a      	strb	r2, [r3, #0]
 8012de2:	68a3      	ldr	r3, [r4, #8]
 8012de4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012de8:	701a      	strb	r2, [r3, #0]
 8012dea:	68a3      	ldr	r3, [r4, #8]
 8012dec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012df0:	701a      	strb	r2, [r3, #0]
 8012df2:	68a3      	ldr	r3, [r4, #8]
 8012df4:	f89d 2000 	ldrb.w	r2, [sp]
 8012df8:	701a      	strb	r2, [r3, #0]
 8012dfa:	e78a      	b.n	8012d12 <ucdr_serialize_double+0x9e>
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	466d      	mov	r5, sp
 8012e00:	4632      	mov	r2, r6
 8012e02:	4629      	mov	r1, r5
 8012e04:	f00d ff57 	bl	8020cb6 <memcpy>
 8012e08:	4642      	mov	r2, r8
 8012e0a:	19a9      	adds	r1, r5, r6
 8012e0c:	68a0      	ldr	r0, [r4, #8]
 8012e0e:	f00d ff52 	bl	8020cb6 <memcpy>
 8012e12:	e77e      	b.n	8012d12 <ucdr_serialize_double+0x9e>

08012e14 <ucdr_deserialize_double>:
 8012e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e18:	4604      	mov	r4, r0
 8012e1a:	460d      	mov	r5, r1
 8012e1c:	2108      	movs	r1, #8
 8012e1e:	f000 f91f 	bl	8013060 <ucdr_buffer_alignment>
 8012e22:	4601      	mov	r1, r0
 8012e24:	4620      	mov	r0, r4
 8012e26:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e2a:	f000 f961 	bl	80130f0 <ucdr_advance_buffer>
 8012e2e:	2108      	movs	r1, #8
 8012e30:	4620      	mov	r0, r4
 8012e32:	f000 f8b5 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8012e36:	2800      	cmp	r0, #0
 8012e38:	d151      	bne.n	8012ede <ucdr_deserialize_double+0xca>
 8012e3a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e3e:	42be      	cmp	r6, r7
 8012e40:	d948      	bls.n	8012ed4 <ucdr_deserialize_double+0xc0>
 8012e42:	6923      	ldr	r3, [r4, #16]
 8012e44:	4620      	mov	r0, r4
 8012e46:	60a6      	str	r6, [r4, #8]
 8012e48:	1bf6      	subs	r6, r6, r7
 8012e4a:	4433      	add	r3, r6
 8012e4c:	f1c6 0908 	rsb	r9, r6, #8
 8012e50:	6123      	str	r3, [r4, #16]
 8012e52:	4649      	mov	r1, r9
 8012e54:	f000 f8b0 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	d06d      	beq.n	8012f38 <ucdr_deserialize_double+0x124>
 8012e5c:	7d23      	ldrb	r3, [r4, #20]
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	f000 8093 	beq.w	8012f8a <ucdr_deserialize_double+0x176>
 8012e64:	79fb      	ldrb	r3, [r7, #7]
 8012e66:	702b      	strb	r3, [r5, #0]
 8012e68:	2e00      	cmp	r6, #0
 8012e6a:	d072      	beq.n	8012f52 <ucdr_deserialize_double+0x13e>
 8012e6c:	79bb      	ldrb	r3, [r7, #6]
 8012e6e:	2e01      	cmp	r6, #1
 8012e70:	706b      	strb	r3, [r5, #1]
 8012e72:	f105 0302 	add.w	r3, r5, #2
 8012e76:	d070      	beq.n	8012f5a <ucdr_deserialize_double+0x146>
 8012e78:	797b      	ldrb	r3, [r7, #5]
 8012e7a:	2e02      	cmp	r6, #2
 8012e7c:	70ab      	strb	r3, [r5, #2]
 8012e7e:	f105 0303 	add.w	r3, r5, #3
 8012e82:	d06e      	beq.n	8012f62 <ucdr_deserialize_double+0x14e>
 8012e84:	793b      	ldrb	r3, [r7, #4]
 8012e86:	2e03      	cmp	r6, #3
 8012e88:	70eb      	strb	r3, [r5, #3]
 8012e8a:	f105 0304 	add.w	r3, r5, #4
 8012e8e:	d06c      	beq.n	8012f6a <ucdr_deserialize_double+0x156>
 8012e90:	78fb      	ldrb	r3, [r7, #3]
 8012e92:	2e04      	cmp	r6, #4
 8012e94:	712b      	strb	r3, [r5, #4]
 8012e96:	f105 0305 	add.w	r3, r5, #5
 8012e9a:	d06a      	beq.n	8012f72 <ucdr_deserialize_double+0x15e>
 8012e9c:	78bb      	ldrb	r3, [r7, #2]
 8012e9e:	2e05      	cmp	r6, #5
 8012ea0:	716b      	strb	r3, [r5, #5]
 8012ea2:	f105 0306 	add.w	r3, r5, #6
 8012ea6:	d068      	beq.n	8012f7a <ucdr_deserialize_double+0x166>
 8012ea8:	787b      	ldrb	r3, [r7, #1]
 8012eaa:	2e06      	cmp	r6, #6
 8012eac:	71ab      	strb	r3, [r5, #6]
 8012eae:	f105 0307 	add.w	r3, r5, #7
 8012eb2:	d066      	beq.n	8012f82 <ucdr_deserialize_double+0x16e>
 8012eb4:	783b      	ldrb	r3, [r7, #0]
 8012eb6:	71eb      	strb	r3, [r5, #7]
 8012eb8:	6923      	ldr	r3, [r4, #16]
 8012eba:	2108      	movs	r1, #8
 8012ebc:	68a2      	ldr	r2, [r4, #8]
 8012ebe:	3308      	adds	r3, #8
 8012ec0:	7da0      	ldrb	r0, [r4, #22]
 8012ec2:	444a      	add	r2, r9
 8012ec4:	7561      	strb	r1, [r4, #21]
 8012ec6:	1b9e      	subs	r6, r3, r6
 8012ec8:	f080 0001 	eor.w	r0, r0, #1
 8012ecc:	60a2      	str	r2, [r4, #8]
 8012ece:	6126      	str	r6, [r4, #16]
 8012ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ed4:	2108      	movs	r1, #8
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f000 f86e 	bl	8012fb8 <ucdr_check_final_buffer_behavior>
 8012edc:	b310      	cbz	r0, 8012f24 <ucdr_deserialize_double+0x110>
 8012ede:	7d23      	ldrb	r3, [r4, #20]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	68a3      	ldr	r3, [r4, #8]
 8012ee4:	d023      	beq.n	8012f2e <ucdr_deserialize_double+0x11a>
 8012ee6:	79db      	ldrb	r3, [r3, #7]
 8012ee8:	702b      	strb	r3, [r5, #0]
 8012eea:	68a3      	ldr	r3, [r4, #8]
 8012eec:	799b      	ldrb	r3, [r3, #6]
 8012eee:	706b      	strb	r3, [r5, #1]
 8012ef0:	68a3      	ldr	r3, [r4, #8]
 8012ef2:	795b      	ldrb	r3, [r3, #5]
 8012ef4:	70ab      	strb	r3, [r5, #2]
 8012ef6:	68a3      	ldr	r3, [r4, #8]
 8012ef8:	791b      	ldrb	r3, [r3, #4]
 8012efa:	70eb      	strb	r3, [r5, #3]
 8012efc:	68a3      	ldr	r3, [r4, #8]
 8012efe:	78db      	ldrb	r3, [r3, #3]
 8012f00:	712b      	strb	r3, [r5, #4]
 8012f02:	68a3      	ldr	r3, [r4, #8]
 8012f04:	789b      	ldrb	r3, [r3, #2]
 8012f06:	716b      	strb	r3, [r5, #5]
 8012f08:	68a3      	ldr	r3, [r4, #8]
 8012f0a:	785b      	ldrb	r3, [r3, #1]
 8012f0c:	71ab      	strb	r3, [r5, #6]
 8012f0e:	68a3      	ldr	r3, [r4, #8]
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	71eb      	strb	r3, [r5, #7]
 8012f14:	2108      	movs	r1, #8
 8012f16:	68a2      	ldr	r2, [r4, #8]
 8012f18:	6923      	ldr	r3, [r4, #16]
 8012f1a:	440a      	add	r2, r1
 8012f1c:	7561      	strb	r1, [r4, #21]
 8012f1e:	440b      	add	r3, r1
 8012f20:	60a2      	str	r2, [r4, #8]
 8012f22:	6123      	str	r3, [r4, #16]
 8012f24:	7da0      	ldrb	r0, [r4, #22]
 8012f26:	f080 0001 	eor.w	r0, r0, #1
 8012f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	602a      	str	r2, [r5, #0]
 8012f34:	606b      	str	r3, [r5, #4]
 8012f36:	e7ed      	b.n	8012f14 <ucdr_deserialize_double+0x100>
 8012f38:	68a2      	ldr	r2, [r4, #8]
 8012f3a:	6923      	ldr	r3, [r4, #16]
 8012f3c:	1b92      	subs	r2, r2, r6
 8012f3e:	7da0      	ldrb	r0, [r4, #22]
 8012f40:	1b9b      	subs	r3, r3, r6
 8012f42:	f884 8015 	strb.w	r8, [r4, #21]
 8012f46:	f080 0001 	eor.w	r0, r0, #1
 8012f4a:	60a2      	str	r2, [r4, #8]
 8012f4c:	6123      	str	r3, [r4, #16]
 8012f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f52:	68a3      	ldr	r3, [r4, #8]
 8012f54:	799b      	ldrb	r3, [r3, #6]
 8012f56:	706b      	strb	r3, [r5, #1]
 8012f58:	1cab      	adds	r3, r5, #2
 8012f5a:	68a2      	ldr	r2, [r4, #8]
 8012f5c:	7952      	ldrb	r2, [r2, #5]
 8012f5e:	f803 2b01 	strb.w	r2, [r3], #1
 8012f62:	68a2      	ldr	r2, [r4, #8]
 8012f64:	7912      	ldrb	r2, [r2, #4]
 8012f66:	f803 2b01 	strb.w	r2, [r3], #1
 8012f6a:	68a2      	ldr	r2, [r4, #8]
 8012f6c:	78d2      	ldrb	r2, [r2, #3]
 8012f6e:	f803 2b01 	strb.w	r2, [r3], #1
 8012f72:	68a2      	ldr	r2, [r4, #8]
 8012f74:	7892      	ldrb	r2, [r2, #2]
 8012f76:	f803 2b01 	strb.w	r2, [r3], #1
 8012f7a:	68a2      	ldr	r2, [r4, #8]
 8012f7c:	7852      	ldrb	r2, [r2, #1]
 8012f7e:	f803 2b01 	strb.w	r2, [r3], #1
 8012f82:	68a2      	ldr	r2, [r4, #8]
 8012f84:	7812      	ldrb	r2, [r2, #0]
 8012f86:	701a      	strb	r2, [r3, #0]
 8012f88:	e796      	b.n	8012eb8 <ucdr_deserialize_double+0xa4>
 8012f8a:	4639      	mov	r1, r7
 8012f8c:	4632      	mov	r2, r6
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f00d fe91 	bl	8020cb6 <memcpy>
 8012f94:	464a      	mov	r2, r9
 8012f96:	19a8      	adds	r0, r5, r6
 8012f98:	68a1      	ldr	r1, [r4, #8]
 8012f9a:	f00d fe8c 	bl	8020cb6 <memcpy>
 8012f9e:	e78b      	b.n	8012eb8 <ucdr_deserialize_double+0xa4>

08012fa0 <ucdr_check_buffer_available_for>:
 8012fa0:	7d83      	ldrb	r3, [r0, #22]
 8012fa2:	b93b      	cbnz	r3, 8012fb4 <ucdr_check_buffer_available_for+0x14>
 8012fa4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012fa8:	4419      	add	r1, r3
 8012faa:	4288      	cmp	r0, r1
 8012fac:	bf34      	ite	cc
 8012fae:	2000      	movcc	r0, #0
 8012fb0:	2001      	movcs	r0, #1
 8012fb2:	4770      	bx	lr
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	4770      	bx	lr

08012fb8 <ucdr_check_final_buffer_behavior>:
 8012fb8:	7d83      	ldrb	r3, [r0, #22]
 8012fba:	b943      	cbnz	r3, 8012fce <ucdr_check_final_buffer_behavior+0x16>
 8012fbc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012fc0:	b510      	push	{r4, lr}
 8012fc2:	4291      	cmp	r1, r2
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	d205      	bcs.n	8012fd4 <ucdr_check_final_buffer_behavior+0x1c>
 8012fc8:	2301      	movs	r3, #1
 8012fca:	4618      	mov	r0, r3
 8012fcc:	bd10      	pop	{r4, pc}
 8012fce:	2300      	movs	r3, #0
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	4770      	bx	lr
 8012fd4:	6982      	ldr	r2, [r0, #24]
 8012fd6:	b13a      	cbz	r2, 8012fe8 <ucdr_check_final_buffer_behavior+0x30>
 8012fd8:	69c1      	ldr	r1, [r0, #28]
 8012fda:	4790      	blx	r2
 8012fdc:	f080 0301 	eor.w	r3, r0, #1
 8012fe0:	75a0      	strb	r0, [r4, #22]
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	bd10      	pop	{r4, pc}
 8012fe8:	2001      	movs	r0, #1
 8012fea:	75a0      	strb	r0, [r4, #22]
 8012fec:	e7fa      	b.n	8012fe4 <ucdr_check_final_buffer_behavior+0x2c>
 8012fee:	bf00      	nop

08012ff0 <ucdr_set_on_full_buffer_callback>:
 8012ff0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012ff4:	4770      	bx	lr
 8012ff6:	bf00      	nop

08012ff8 <ucdr_init_buffer_origin_offset_endian>:
 8012ff8:	b410      	push	{r4}
 8012ffa:	9c01      	ldr	r4, [sp, #4]
 8012ffc:	440a      	add	r2, r1
 8012ffe:	6001      	str	r1, [r0, #0]
 8013000:	6042      	str	r2, [r0, #4]
 8013002:	190a      	adds	r2, r1, r4
 8013004:	441c      	add	r4, r3
 8013006:	6082      	str	r2, [r0, #8]
 8013008:	2200      	movs	r2, #0
 801300a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801300e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013012:	7542      	strb	r2, [r0, #21]
 8013014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013018:	7582      	strb	r2, [r0, #22]
 801301a:	7503      	strb	r3, [r0, #20]
 801301c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop

08013024 <ucdr_init_buffer_origin_offset>:
 8013024:	b510      	push	{r4, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	9c04      	ldr	r4, [sp, #16]
 801302a:	9400      	str	r4, [sp, #0]
 801302c:	2401      	movs	r4, #1
 801302e:	9401      	str	r4, [sp, #4]
 8013030:	f7ff ffe2 	bl	8012ff8 <ucdr_init_buffer_origin_offset_endian>
 8013034:	b002      	add	sp, #8
 8013036:	bd10      	pop	{r4, pc}

08013038 <ucdr_init_buffer_origin>:
 8013038:	b510      	push	{r4, lr}
 801303a:	2400      	movs	r4, #0
 801303c:	b082      	sub	sp, #8
 801303e:	9400      	str	r4, [sp, #0]
 8013040:	f7ff fff0 	bl	8013024 <ucdr_init_buffer_origin_offset>
 8013044:	b002      	add	sp, #8
 8013046:	bd10      	pop	{r4, pc}

08013048 <ucdr_init_buffer>:
 8013048:	2300      	movs	r3, #0
 801304a:	f7ff bff5 	b.w	8013038 <ucdr_init_buffer_origin>
 801304e:	bf00      	nop

08013050 <ucdr_alignment>:
 8013050:	fbb0 f2f1 	udiv	r2, r0, r1
 8013054:	fb02 0011 	mls	r0, r2, r1, r0
 8013058:	1e4b      	subs	r3, r1, #1
 801305a:	1a08      	subs	r0, r1, r0
 801305c:	4018      	ands	r0, r3
 801305e:	4770      	bx	lr

08013060 <ucdr_buffer_alignment>:
 8013060:	7d43      	ldrb	r3, [r0, #21]
 8013062:	428b      	cmp	r3, r1
 8013064:	d209      	bcs.n	801307a <ucdr_buffer_alignment+0x1a>
 8013066:	6903      	ldr	r3, [r0, #16]
 8013068:	1e4a      	subs	r2, r1, #1
 801306a:	fbb3 f0f1 	udiv	r0, r3, r1
 801306e:	fb01 3010 	mls	r0, r1, r0, r3
 8013072:	1a09      	subs	r1, r1, r0
 8013074:	ea01 0002 	and.w	r0, r1, r2
 8013078:	4770      	bx	lr
 801307a:	2000      	movs	r0, #0
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop

08013080 <ucdr_align_to>:
 8013080:	b538      	push	{r3, r4, r5, lr}
 8013082:	4604      	mov	r4, r0
 8013084:	460d      	mov	r5, r1
 8013086:	f7ff ffeb 	bl	8013060 <ucdr_buffer_alignment>
 801308a:	68a3      	ldr	r3, [r4, #8]
 801308c:	7565      	strb	r5, [r4, #21]
 801308e:	181a      	adds	r2, r3, r0
 8013090:	6923      	ldr	r3, [r4, #16]
 8013092:	4418      	add	r0, r3
 8013094:	6863      	ldr	r3, [r4, #4]
 8013096:	4293      	cmp	r3, r2
 8013098:	6120      	str	r0, [r4, #16]
 801309a:	bf28      	it	cs
 801309c:	4613      	movcs	r3, r2
 801309e:	60a3      	str	r3, [r4, #8]
 80130a0:	bd38      	pop	{r3, r4, r5, pc}
 80130a2:	bf00      	nop

080130a4 <ucdr_buffer_length>:
 80130a4:	6882      	ldr	r2, [r0, #8]
 80130a6:	6800      	ldr	r0, [r0, #0]
 80130a8:	1a10      	subs	r0, r2, r0
 80130aa:	4770      	bx	lr

080130ac <ucdr_buffer_remaining>:
 80130ac:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80130b0:	1a10      	subs	r0, r2, r0
 80130b2:	4770      	bx	lr

080130b4 <ucdr_check_final_buffer_behavior_array>:
 80130b4:	b538      	push	{r3, r4, r5, lr}
 80130b6:	7d83      	ldrb	r3, [r0, #22]
 80130b8:	b9a3      	cbnz	r3, 80130e4 <ucdr_check_final_buffer_behavior_array+0x30>
 80130ba:	4604      	mov	r4, r0
 80130bc:	460d      	mov	r5, r1
 80130be:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d300      	bcc.n	80130c8 <ucdr_check_final_buffer_behavior_array+0x14>
 80130c6:	b931      	cbnz	r1, 80130d6 <ucdr_check_final_buffer_behavior_array+0x22>
 80130c8:	4620      	mov	r0, r4
 80130ca:	f7ff ffef 	bl	80130ac <ucdr_buffer_remaining>
 80130ce:	42a8      	cmp	r0, r5
 80130d0:	bf28      	it	cs
 80130d2:	4628      	movcs	r0, r5
 80130d4:	bd38      	pop	{r3, r4, r5, pc}
 80130d6:	6983      	ldr	r3, [r0, #24]
 80130d8:	b133      	cbz	r3, 80130e8 <ucdr_check_final_buffer_behavior_array+0x34>
 80130da:	69c1      	ldr	r1, [r0, #28]
 80130dc:	4798      	blx	r3
 80130de:	75a0      	strb	r0, [r4, #22]
 80130e0:	2800      	cmp	r0, #0
 80130e2:	d0f1      	beq.n	80130c8 <ucdr_check_final_buffer_behavior_array+0x14>
 80130e4:	2000      	movs	r0, #0
 80130e6:	bd38      	pop	{r3, r4, r5, pc}
 80130e8:	2301      	movs	r3, #1
 80130ea:	7583      	strb	r3, [r0, #22]
 80130ec:	e7fa      	b.n	80130e4 <ucdr_check_final_buffer_behavior_array+0x30>
 80130ee:	bf00      	nop

080130f0 <ucdr_advance_buffer>:
 80130f0:	b538      	push	{r3, r4, r5, lr}
 80130f2:	4604      	mov	r4, r0
 80130f4:	460d      	mov	r5, r1
 80130f6:	f7ff ff53 	bl	8012fa0 <ucdr_check_buffer_available_for>
 80130fa:	b178      	cbz	r0, 801311c <ucdr_advance_buffer+0x2c>
 80130fc:	6923      	ldr	r3, [r4, #16]
 80130fe:	68a2      	ldr	r2, [r4, #8]
 8013100:	442b      	add	r3, r5
 8013102:	442a      	add	r2, r5
 8013104:	6123      	str	r3, [r4, #16]
 8013106:	2301      	movs	r3, #1
 8013108:	60a2      	str	r2, [r4, #8]
 801310a:	7563      	strb	r3, [r4, #21]
 801310c:	bd38      	pop	{r3, r4, r5, pc}
 801310e:	68a2      	ldr	r2, [r4, #8]
 8013110:	1a2d      	subs	r5, r5, r0
 8013112:	6923      	ldr	r3, [r4, #16]
 8013114:	4402      	add	r2, r0
 8013116:	4418      	add	r0, r3
 8013118:	60a2      	str	r2, [r4, #8]
 801311a:	6120      	str	r0, [r4, #16]
 801311c:	4629      	mov	r1, r5
 801311e:	2201      	movs	r2, #1
 8013120:	4620      	mov	r0, r4
 8013122:	f7ff ffc7 	bl	80130b4 <ucdr_check_final_buffer_behavior_array>
 8013126:	2800      	cmp	r0, #0
 8013128:	d1f1      	bne.n	801310e <ucdr_advance_buffer+0x1e>
 801312a:	2301      	movs	r3, #1
 801312c:	7563      	strb	r3, [r4, #21]
 801312e:	bd38      	pop	{r3, r4, r5, pc}

08013130 <ucdr_serialize_sequence_char>:
 8013130:	b570      	push	{r4, r5, r6, lr}
 8013132:	4615      	mov	r5, r2
 8013134:	460e      	mov	r6, r1
 8013136:	7d01      	ldrb	r1, [r0, #20]
 8013138:	4604      	mov	r4, r0
 801313a:	f7fe ff5b 	bl	8011ff4 <ucdr_serialize_endian_uint32_t>
 801313e:	b90d      	cbnz	r5, 8013144 <ucdr_serialize_sequence_char+0x14>
 8013140:	2001      	movs	r0, #1
 8013142:	bd70      	pop	{r4, r5, r6, pc}
 8013144:	462b      	mov	r3, r5
 8013146:	4632      	mov	r2, r6
 8013148:	7d21      	ldrb	r1, [r4, #20]
 801314a:	4620      	mov	r0, r4
 801314c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013150:	f004 b908 	b.w	8017364 <ucdr_serialize_endian_array_char>

08013154 <ucdr_deserialize_sequence_char>:
 8013154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013158:	461d      	mov	r5, r3
 801315a:	4616      	mov	r6, r2
 801315c:	460f      	mov	r7, r1
 801315e:	461a      	mov	r2, r3
 8013160:	7d01      	ldrb	r1, [r0, #20]
 8013162:	4604      	mov	r4, r0
 8013164:	f7ff f86e 	bl	8012244 <ucdr_deserialize_endian_uint32_t>
 8013168:	682b      	ldr	r3, [r5, #0]
 801316a:	429e      	cmp	r6, r3
 801316c:	d201      	bcs.n	8013172 <ucdr_deserialize_sequence_char+0x1e>
 801316e:	2201      	movs	r2, #1
 8013170:	75a2      	strb	r2, [r4, #22]
 8013172:	b913      	cbnz	r3, 801317a <ucdr_deserialize_sequence_char+0x26>
 8013174:	2001      	movs	r0, #1
 8013176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801317a:	463a      	mov	r2, r7
 801317c:	7d21      	ldrb	r1, [r4, #20]
 801317e:	4620      	mov	r0, r4
 8013180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013184:	f004 b920 	b.w	80173c8 <ucdr_deserialize_endian_array_char>

08013188 <ucdr_serialize_sequence_uint8_t>:
 8013188:	b570      	push	{r4, r5, r6, lr}
 801318a:	4615      	mov	r5, r2
 801318c:	460e      	mov	r6, r1
 801318e:	7d01      	ldrb	r1, [r0, #20]
 8013190:	4604      	mov	r4, r0
 8013192:	f7fe ff2f 	bl	8011ff4 <ucdr_serialize_endian_uint32_t>
 8013196:	b90d      	cbnz	r5, 801319c <ucdr_serialize_sequence_uint8_t+0x14>
 8013198:	2001      	movs	r0, #1
 801319a:	bd70      	pop	{r4, r5, r6, pc}
 801319c:	462b      	mov	r3, r5
 801319e:	4632      	mov	r2, r6
 80131a0:	7d21      	ldrb	r1, [r4, #20]
 80131a2:	4620      	mov	r0, r4
 80131a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131a8:	f004 b974 	b.w	8017494 <ucdr_serialize_endian_array_uint8_t>

080131ac <ucdr_deserialize_sequence_uint8_t>:
 80131ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131b0:	461d      	mov	r5, r3
 80131b2:	4616      	mov	r6, r2
 80131b4:	460f      	mov	r7, r1
 80131b6:	461a      	mov	r2, r3
 80131b8:	7d01      	ldrb	r1, [r0, #20]
 80131ba:	4604      	mov	r4, r0
 80131bc:	f7ff f842 	bl	8012244 <ucdr_deserialize_endian_uint32_t>
 80131c0:	682b      	ldr	r3, [r5, #0]
 80131c2:	429e      	cmp	r6, r3
 80131c4:	d201      	bcs.n	80131ca <ucdr_deserialize_sequence_uint8_t+0x1e>
 80131c6:	2201      	movs	r2, #1
 80131c8:	75a2      	strb	r2, [r4, #22]
 80131ca:	b913      	cbnz	r3, 80131d2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80131cc:	2001      	movs	r0, #1
 80131ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d2:	463a      	mov	r2, r7
 80131d4:	7d21      	ldrb	r1, [r4, #20]
 80131d6:	4620      	mov	r0, r4
 80131d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131dc:	f004 b9c0 	b.w	8017560 <ucdr_deserialize_endian_array_uint8_t>

080131e0 <rcl_get_zero_initialized_init_options>:
 80131e0:	2000      	movs	r0, #0
 80131e2:	4770      	bx	lr

080131e4 <rcl_init_options_init>:
 80131e4:	b084      	sub	sp, #16
 80131e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131e8:	b097      	sub	sp, #92	; 0x5c
 80131ea:	ae1d      	add	r6, sp, #116	; 0x74
 80131ec:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80131f0:	2800      	cmp	r0, #0
 80131f2:	d058      	beq.n	80132a6 <rcl_init_options_init+0xc2>
 80131f4:	6803      	ldr	r3, [r0, #0]
 80131f6:	4605      	mov	r5, r0
 80131f8:	b133      	cbz	r3, 8013208 <rcl_init_options_init+0x24>
 80131fa:	2464      	movs	r4, #100	; 0x64
 80131fc:	4620      	mov	r0, r4
 80131fe:	b017      	add	sp, #92	; 0x5c
 8013200:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013204:	b004      	add	sp, #16
 8013206:	4770      	bx	lr
 8013208:	4630      	mov	r0, r6
 801320a:	f001 fdf3 	bl	8014df4 <rcutils_allocator_is_valid>
 801320e:	2800      	cmp	r0, #0
 8013210:	d049      	beq.n	80132a6 <rcl_init_options_init+0xc2>
 8013212:	46b4      	mov	ip, r6
 8013214:	ac11      	add	r4, sp, #68	; 0x44
 8013216:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801321a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801321c:	f8dc 3000 	ldr.w	r3, [ip]
 8013220:	2050      	movs	r0, #80	; 0x50
 8013222:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013224:	6023      	str	r3, [r4, #0]
 8013226:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013228:	4798      	blx	r3
 801322a:	4604      	mov	r4, r0
 801322c:	6028      	str	r0, [r5, #0]
 801322e:	2800      	cmp	r0, #0
 8013230:	d03b      	beq.n	80132aa <rcl_init_options_init+0xc6>
 8013232:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013236:	4686      	mov	lr, r0
 8013238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801323c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013240:	f8dc 3000 	ldr.w	r3, [ip]
 8013244:	a802      	add	r0, sp, #8
 8013246:	f8ce 3000 	str.w	r3, [lr]
 801324a:	f001 fff1 	bl	8015230 <rmw_get_zero_initialized_init_options>
 801324e:	f10d 0e08 	add.w	lr, sp, #8
 8013252:	f104 0c18 	add.w	ip, r4, #24
 8013256:	682f      	ldr	r7, [r5, #0]
 8013258:	ac20      	add	r4, sp, #128	; 0x80
 801325a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801325e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013262:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013266:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801326a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801326e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013272:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013276:	e88c 0003 	stmia.w	ip, {r0, r1}
 801327a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801327e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013282:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8013286:	f107 0018 	add.w	r0, r7, #24
 801328a:	f002 f8f9 	bl	8015480 <rmw_init_options_init>
 801328e:	4604      	mov	r4, r0
 8013290:	2800      	cmp	r0, #0
 8013292:	d0b3      	beq.n	80131fc <rcl_init_options_init+0x18>
 8013294:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013296:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013298:	6828      	ldr	r0, [r5, #0]
 801329a:	4798      	blx	r3
 801329c:	4620      	mov	r0, r4
 801329e:	f007 ff8d 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 80132a2:	4604      	mov	r4, r0
 80132a4:	e7aa      	b.n	80131fc <rcl_init_options_init+0x18>
 80132a6:	240b      	movs	r4, #11
 80132a8:	e7a8      	b.n	80131fc <rcl_init_options_init+0x18>
 80132aa:	240a      	movs	r4, #10
 80132ac:	e7a6      	b.n	80131fc <rcl_init_options_init+0x18>
 80132ae:	bf00      	nop

080132b0 <rcl_init_options_fini>:
 80132b0:	b530      	push	{r4, r5, lr}
 80132b2:	b087      	sub	sp, #28
 80132b4:	b1f0      	cbz	r0, 80132f4 <rcl_init_options_fini+0x44>
 80132b6:	6803      	ldr	r3, [r0, #0]
 80132b8:	4604      	mov	r4, r0
 80132ba:	b1db      	cbz	r3, 80132f4 <rcl_init_options_fini+0x44>
 80132bc:	469c      	mov	ip, r3
 80132be:	f10d 0e04 	add.w	lr, sp, #4
 80132c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80132ca:	f8dc 3000 	ldr.w	r3, [ip]
 80132ce:	a801      	add	r0, sp, #4
 80132d0:	f8ce 3000 	str.w	r3, [lr]
 80132d4:	f001 fd8e 	bl	8014df4 <rcutils_allocator_is_valid>
 80132d8:	b160      	cbz	r0, 80132f4 <rcl_init_options_fini+0x44>
 80132da:	6820      	ldr	r0, [r4, #0]
 80132dc:	3018      	adds	r0, #24
 80132de:	f002 f989 	bl	80155f4 <rmw_init_options_fini>
 80132e2:	4605      	mov	r5, r0
 80132e4:	b950      	cbnz	r0, 80132fc <rcl_init_options_fini+0x4c>
 80132e6:	6820      	ldr	r0, [r4, #0]
 80132e8:	9b02      	ldr	r3, [sp, #8]
 80132ea:	9905      	ldr	r1, [sp, #20]
 80132ec:	4798      	blx	r3
 80132ee:	4628      	mov	r0, r5
 80132f0:	b007      	add	sp, #28
 80132f2:	bd30      	pop	{r4, r5, pc}
 80132f4:	250b      	movs	r5, #11
 80132f6:	4628      	mov	r0, r5
 80132f8:	b007      	add	sp, #28
 80132fa:	bd30      	pop	{r4, r5, pc}
 80132fc:	f007 ff5e 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 8013300:	4605      	mov	r5, r0
 8013302:	e7f8      	b.n	80132f6 <rcl_init_options_fini+0x46>

08013304 <rcl_init_options_copy>:
 8013304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013308:	b094      	sub	sp, #80	; 0x50
 801330a:	2800      	cmp	r0, #0
 801330c:	d05b      	beq.n	80133c6 <rcl_init_options_copy+0xc2>
 801330e:	4604      	mov	r4, r0
 8013310:	6800      	ldr	r0, [r0, #0]
 8013312:	2800      	cmp	r0, #0
 8013314:	d057      	beq.n	80133c6 <rcl_init_options_copy+0xc2>
 8013316:	460e      	mov	r6, r1
 8013318:	f001 fd6c 	bl	8014df4 <rcutils_allocator_is_valid>
 801331c:	2e00      	cmp	r6, #0
 801331e:	d052      	beq.n	80133c6 <rcl_init_options_copy+0xc2>
 8013320:	f080 0001 	eor.w	r0, r0, #1
 8013324:	b2c0      	uxtb	r0, r0
 8013326:	2800      	cmp	r0, #0
 8013328:	d14d      	bne.n	80133c6 <rcl_init_options_copy+0xc2>
 801332a:	6833      	ldr	r3, [r6, #0]
 801332c:	b123      	cbz	r3, 8013338 <rcl_init_options_copy+0x34>
 801332e:	2464      	movs	r4, #100	; 0x64
 8013330:	4620      	mov	r0, r4
 8013332:	b014      	add	sp, #80	; 0x50
 8013334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013338:	6827      	ldr	r7, [r4, #0]
 801333a:	ad0f      	add	r5, sp, #60	; 0x3c
 801333c:	46bc      	mov	ip, r7
 801333e:	f8d7 8000 	ldr.w	r8, [r7]
 8013342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013348:	f8dc 3000 	ldr.w	r3, [ip]
 801334c:	2050      	movs	r0, #80	; 0x50
 801334e:	4619      	mov	r1, r3
 8013350:	602b      	str	r3, [r5, #0]
 8013352:	47c0      	blx	r8
 8013354:	4605      	mov	r5, r0
 8013356:	6030      	str	r0, [r6, #0]
 8013358:	b3d0      	cbz	r0, 80133d0 <rcl_init_options_copy+0xcc>
 801335a:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 801335e:	4686      	mov	lr, r0
 8013360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013364:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013368:	f8dc 3000 	ldr.w	r3, [ip]
 801336c:	4668      	mov	r0, sp
 801336e:	f8ce 3000 	str.w	r3, [lr]
 8013372:	f001 ff5d 	bl	8015230 <rmw_get_zero_initialized_init_options>
 8013376:	46ee      	mov	lr, sp
 8013378:	f105 0c18 	add.w	ip, r5, #24
 801337c:	6824      	ldr	r4, [r4, #0]
 801337e:	6835      	ldr	r5, [r6, #0]
 8013380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013388:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801338c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013390:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013398:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801339c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80133a0:	f104 0018 	add.w	r0, r4, #24
 80133a4:	f105 0118 	add.w	r1, r5, #24
 80133a8:	f002 f8d2 	bl	8015550 <rmw_init_options_copy>
 80133ac:	4604      	mov	r4, r0
 80133ae:	2800      	cmp	r0, #0
 80133b0:	d0be      	beq.n	8013330 <rcl_init_options_copy+0x2c>
 80133b2:	f001 fd45 	bl	8014e40 <rcutils_get_error_string>
 80133b6:	f001 fd5b 	bl	8014e70 <rcutils_reset_error>
 80133ba:	4630      	mov	r0, r6
 80133bc:	f7ff ff78 	bl	80132b0 <rcl_init_options_fini>
 80133c0:	b140      	cbz	r0, 80133d4 <rcl_init_options_copy+0xd0>
 80133c2:	4604      	mov	r4, r0
 80133c4:	e7b4      	b.n	8013330 <rcl_init_options_copy+0x2c>
 80133c6:	240b      	movs	r4, #11
 80133c8:	4620      	mov	r0, r4
 80133ca:	b014      	add	sp, #80	; 0x50
 80133cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133d0:	240a      	movs	r4, #10
 80133d2:	e7ad      	b.n	8013330 <rcl_init_options_copy+0x2c>
 80133d4:	4620      	mov	r0, r4
 80133d6:	b014      	add	sp, #80	; 0x50
 80133d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133dc:	f007 beee 	b.w	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>

080133e0 <rcl_init_options_set_domain_id>:
 80133e0:	b120      	cbz	r0, 80133ec <rcl_init_options_set_domain_id+0xc>
 80133e2:	6803      	ldr	r3, [r0, #0]
 80133e4:	b113      	cbz	r3, 80133ec <rcl_init_options_set_domain_id+0xc>
 80133e6:	2000      	movs	r0, #0
 80133e8:	6259      	str	r1, [r3, #36]	; 0x24
 80133ea:	4770      	bx	lr
 80133ec:	200b      	movs	r0, #11
 80133ee:	4770      	bx	lr

080133f0 <rcl_get_zero_initialized_node>:
 80133f0:	4a03      	ldr	r2, [pc, #12]	; (8013400 <rcl_get_zero_initialized_node+0x10>)
 80133f2:	4603      	mov	r3, r0
 80133f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80133fc:	4618      	mov	r0, r3
 80133fe:	4770      	bx	lr
 8013400:	08024bc8 	.word	0x08024bc8

08013404 <rcl_node_init>:
 8013404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013408:	b0a9      	sub	sp, #164	; 0xa4
 801340a:	4604      	mov	r4, r0
 801340c:	460e      	mov	r6, r1
 801340e:	4615      	mov	r5, r2
 8013410:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8013414:	a823      	add	r0, sp, #140	; 0x8c
 8013416:	461f      	mov	r7, r3
 8013418:	f007 ffe0 	bl	801b3dc <rcl_guard_condition_get_default_options>
 801341c:	f1b8 0f00 	cmp.w	r8, #0
 8013420:	f000 80f3 	beq.w	801360a <rcl_node_init+0x206>
 8013424:	4640      	mov	r0, r8
 8013426:	f001 fce5 	bl	8014df4 <rcutils_allocator_is_valid>
 801342a:	2d00      	cmp	r5, #0
 801342c:	bf18      	it	ne
 801342e:	2c00      	cmpne	r4, #0
 8013430:	f080 0001 	eor.w	r0, r0, #1
 8013434:	bf0c      	ite	eq
 8013436:	f04f 0c01 	moveq.w	ip, #1
 801343a:	f04f 0c00 	movne.w	ip, #0
 801343e:	2e00      	cmp	r6, #0
 8013440:	bf08      	it	eq
 8013442:	f04c 0c01 	orreq.w	ip, ip, #1
 8013446:	ea4c 0c00 	orr.w	ip, ip, r0
 801344a:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 801344e:	f040 80dc 	bne.w	801360a <rcl_node_init+0x206>
 8013452:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013456:	f1ba 0f00 	cmp.w	sl, #0
 801345a:	f040 80fc 	bne.w	8013656 <rcl_node_init+0x252>
 801345e:	2f00      	cmp	r7, #0
 8013460:	f000 80d3 	beq.w	801360a <rcl_node_init+0x206>
 8013464:	4638      	mov	r0, r7
 8013466:	f007 fec7 	bl	801b1f8 <rcl_context_is_valid>
 801346a:	4683      	mov	fp, r0
 801346c:	2800      	cmp	r0, #0
 801346e:	f000 80d2 	beq.w	8013616 <rcl_node_init+0x212>
 8013472:	4652      	mov	r2, sl
 8013474:	4630      	mov	r0, r6
 8013476:	a922      	add	r1, sp, #136	; 0x88
 8013478:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 801347c:	f001 ff8a 	bl	8015394 <rmw_validate_node_name>
 8013480:	4682      	mov	sl, r0
 8013482:	2800      	cmp	r0, #0
 8013484:	f040 80c3 	bne.w	801360e <rcl_node_init+0x20a>
 8013488:	9822      	ldr	r0, [sp, #136]	; 0x88
 801348a:	2800      	cmp	r0, #0
 801348c:	f040 80f1 	bne.w	8013672 <rcl_node_init+0x26e>
 8013490:	4628      	mov	r0, r5
 8013492:	f7ec ff35 	bl	8000300 <strlen>
 8013496:	2800      	cmp	r0, #0
 8013498:	f040 80c0 	bne.w	801361c <rcl_node_init+0x218>
 801349c:	4d79      	ldr	r5, [pc, #484]	; (8013684 <rcl_node_init+0x280>)
 801349e:	a922      	add	r1, sp, #136	; 0x88
 80134a0:	2200      	movs	r2, #0
 80134a2:	4628      	mov	r0, r5
 80134a4:	f001 ff58 	bl	8015358 <rmw_validate_namespace>
 80134a8:	4682      	mov	sl, r0
 80134aa:	2800      	cmp	r0, #0
 80134ac:	f040 80af 	bne.w	801360e <rcl_node_init+0x20a>
 80134b0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80134b2:	2800      	cmp	r0, #0
 80134b4:	f040 80d5 	bne.w	8013662 <rcl_node_init+0x25e>
 80134b8:	f8d8 3000 	ldr.w	r3, [r8]
 80134bc:	2078      	movs	r0, #120	; 0x78
 80134be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80134c2:	4798      	blx	r3
 80134c4:	4682      	mov	sl, r0
 80134c6:	6060      	str	r0, [r4, #4]
 80134c8:	2800      	cmp	r0, #0
 80134ca:	f000 80cf 	beq.w	801366c <rcl_node_init+0x268>
 80134ce:	2200      	movs	r2, #0
 80134d0:	2300      	movs	r3, #0
 80134d2:	a808      	add	r0, sp, #32
 80134d4:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 80134d8:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 80134dc:	f000 f902 	bl	80136e4 <rcl_node_get_default_options>
 80134e0:	a908      	add	r1, sp, #32
 80134e2:	4650      	mov	r0, sl
 80134e4:	2268      	movs	r2, #104	; 0x68
 80134e6:	f00d fbe6 	bl	8020cb6 <memcpy>
 80134ea:	6861      	ldr	r1, [r4, #4]
 80134ec:	4640      	mov	r0, r8
 80134ee:	6027      	str	r7, [r4, #0]
 80134f0:	f000 f906 	bl	8013700 <rcl_node_options_copy>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	d158      	bne.n	80135aa <rcl_node_init+0x1a6>
 80134f8:	4628      	mov	r0, r5
 80134fa:	f7ec ff01 	bl	8000300 <strlen>
 80134fe:	4428      	add	r0, r5
 8013500:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013504:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013508:	2b2f      	cmp	r3, #47	; 0x2f
 801350a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801350e:	9300      	str	r3, [sp, #0]
 8013510:	bf0c      	ite	eq
 8013512:	4b5d      	ldreq	r3, [pc, #372]	; (8013688 <rcl_node_init+0x284>)
 8013514:	4b5d      	ldrne	r3, [pc, #372]	; (801368c <rcl_node_init+0x288>)
 8013516:	9302      	str	r3, [sp, #8]
 8013518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801351c:	9301      	str	r3, [sp, #4]
 801351e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013522:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013526:	f001 fcbf 	bl	8014ea8 <rcutils_format_string_limit>
 801352a:	6823      	ldr	r3, [r4, #0]
 801352c:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8013530:	4631      	mov	r1, r6
 8013532:	6818      	ldr	r0, [r3, #0]
 8013534:	462a      	mov	r2, r5
 8013536:	6866      	ldr	r6, [r4, #4]
 8013538:	3028      	adds	r0, #40	; 0x28
 801353a:	f002 fa87 	bl	8015a4c <rmw_create_node>
 801353e:	6863      	ldr	r3, [r4, #4]
 8013540:	66b0      	str	r0, [r6, #104]	; 0x68
 8013542:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013544:	2800      	cmp	r0, #0
 8013546:	d032      	beq.n	80135ae <rcl_node_init+0x1aa>
 8013548:	f002 fb10 	bl	8015b6c <rmw_node_get_graph_guard_condition>
 801354c:	4682      	mov	sl, r0
 801354e:	b360      	cbz	r0, 80135aa <rcl_node_init+0x1a6>
 8013550:	f8d8 3000 	ldr.w	r3, [r8]
 8013554:	2008      	movs	r0, #8
 8013556:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801355a:	6866      	ldr	r6, [r4, #4]
 801355c:	4798      	blx	r3
 801355e:	6863      	ldr	r3, [r4, #4]
 8013560:	66f0      	str	r0, [r6, #108]	; 0x6c
 8013562:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8013566:	f1bb 0f00 	cmp.w	fp, #0
 801356a:	d020      	beq.n	80135ae <rcl_node_init+0x1aa>
 801356c:	a806      	add	r0, sp, #24
 801356e:	ae23      	add	r6, sp, #140	; 0x8c
 8013570:	f007 fea8 	bl	801b2c4 <rcl_get_zero_initialized_guard_condition>
 8013574:	a806      	add	r0, sp, #24
 8013576:	6863      	ldr	r3, [r4, #4]
 8013578:	46c4      	mov	ip, r8
 801357a:	c803      	ldmia	r0, {r0, r1}
 801357c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8013580:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013584:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013588:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801358a:	f8dc 3000 	ldr.w	r3, [ip]
 801358e:	6033      	str	r3, [r6, #0]
 8013590:	ab28      	add	r3, sp, #160	; 0xa0
 8013592:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013596:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801359a:	4651      	mov	r1, sl
 801359c:	463a      	mov	r2, r7
 801359e:	4670      	mov	r0, lr
 80135a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80135a2:	f007 fe99 	bl	801b2d8 <rcl_guard_condition_init_from_rmw>
 80135a6:	4682      	mov	sl, r0
 80135a8:	b328      	cbz	r0, 80135f6 <rcl_node_init+0x1f2>
 80135aa:	6863      	ldr	r3, [r4, #4]
 80135ac:	b1f3      	cbz	r3, 80135ec <rcl_node_init+0x1e8>
 80135ae:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80135b0:	b128      	cbz	r0, 80135be <rcl_node_init+0x1ba>
 80135b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80135b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80135ba:	4798      	blx	r3
 80135bc:	6863      	ldr	r3, [r4, #4]
 80135be:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80135c0:	b110      	cbz	r0, 80135c8 <rcl_node_init+0x1c4>
 80135c2:	f002 fa55 	bl	8015a70 <rmw_destroy_node>
 80135c6:	6863      	ldr	r3, [r4, #4]
 80135c8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80135ca:	b148      	cbz	r0, 80135e0 <rcl_node_init+0x1dc>
 80135cc:	f007 fee0 	bl	801b390 <rcl_guard_condition_fini>
 80135d0:	6863      	ldr	r3, [r4, #4]
 80135d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80135d6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80135d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80135dc:	4798      	blx	r3
 80135de:	6863      	ldr	r3, [r4, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80135e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80135ea:	4798      	blx	r3
 80135ec:	2300      	movs	r3, #0
 80135ee:	f04f 0a01 	mov.w	sl, #1
 80135f2:	e9c4 3300 	strd	r3, r3, [r4]
 80135f6:	f1b9 0f00 	cmp.w	r9, #0
 80135fa:	d008      	beq.n	801360e <rcl_node_init+0x20a>
 80135fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013600:	4628      	mov	r0, r5
 8013602:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013606:	4798      	blx	r3
 8013608:	e001      	b.n	801360e <rcl_node_init+0x20a>
 801360a:	f04f 0a0b 	mov.w	sl, #11
 801360e:	4650      	mov	r0, sl
 8013610:	b029      	add	sp, #164	; 0xa4
 8013612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013616:	f04f 0a65 	mov.w	sl, #101	; 0x65
 801361a:	e7f8      	b.n	801360e <rcl_node_init+0x20a>
 801361c:	782b      	ldrb	r3, [r5, #0]
 801361e:	2b2f      	cmp	r3, #47	; 0x2f
 8013620:	f43f af3d 	beq.w	801349e <rcl_node_init+0x9a>
 8013624:	9503      	str	r5, [sp, #12]
 8013626:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	4b18      	ldr	r3, [pc, #96]	; (8013690 <rcl_node_init+0x28c>)
 801362e:	9302      	str	r3, [sp, #8]
 8013630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013634:	9301      	str	r3, [sp, #4]
 8013636:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801363a:	f001 fc35 	bl	8014ea8 <rcutils_format_string_limit>
 801363e:	4605      	mov	r5, r0
 8013640:	b1e0      	cbz	r0, 801367c <rcl_node_init+0x278>
 8013642:	2200      	movs	r2, #0
 8013644:	a922      	add	r1, sp, #136	; 0x88
 8013646:	9222      	str	r2, [sp, #136]	; 0x88
 8013648:	f001 fe86 	bl	8015358 <rmw_validate_namespace>
 801364c:	4682      	mov	sl, r0
 801364e:	2800      	cmp	r0, #0
 8013650:	d1d4      	bne.n	80135fc <rcl_node_init+0x1f8>
 8013652:	46d9      	mov	r9, fp
 8013654:	e72c      	b.n	80134b0 <rcl_node_init+0xac>
 8013656:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801365a:	4650      	mov	r0, sl
 801365c:	b029      	add	sp, #164	; 0xa4
 801365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013662:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8013666:	f001 fe89 	bl	801537c <rmw_namespace_validation_result_string>
 801366a:	e7c4      	b.n	80135f6 <rcl_node_init+0x1f2>
 801366c:	f04f 0a0a 	mov.w	sl, #10
 8013670:	e7c1      	b.n	80135f6 <rcl_node_init+0x1f2>
 8013672:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8013676:	f001 fee1 	bl	801543c <rmw_node_name_validation_result_string>
 801367a:	e7c8      	b.n	801360e <rcl_node_init+0x20a>
 801367c:	f04f 0a0a 	mov.w	sl, #10
 8013680:	e7c5      	b.n	801360e <rcl_node_init+0x20a>
 8013682:	bf00      	nop
 8013684:	08024bb0 	.word	0x08024bb0
 8013688:	08024bb8 	.word	0x08024bb8
 801368c:	08024bc0 	.word	0x08024bc0
 8013690:	08024bb4 	.word	0x08024bb4

08013694 <rcl_node_is_valid>:
 8013694:	b130      	cbz	r0, 80136a4 <rcl_node_is_valid+0x10>
 8013696:	6843      	ldr	r3, [r0, #4]
 8013698:	b123      	cbz	r3, 80136a4 <rcl_node_is_valid+0x10>
 801369a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801369c:	b113      	cbz	r3, 80136a4 <rcl_node_is_valid+0x10>
 801369e:	6800      	ldr	r0, [r0, #0]
 80136a0:	f007 bdaa 	b.w	801b1f8 <rcl_context_is_valid>
 80136a4:	2000      	movs	r0, #0
 80136a6:	4770      	bx	lr

080136a8 <rcl_node_get_name>:
 80136a8:	b120      	cbz	r0, 80136b4 <rcl_node_get_name+0xc>
 80136aa:	6840      	ldr	r0, [r0, #4]
 80136ac:	b110      	cbz	r0, 80136b4 <rcl_node_get_name+0xc>
 80136ae:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80136b0:	b100      	cbz	r0, 80136b4 <rcl_node_get_name+0xc>
 80136b2:	6880      	ldr	r0, [r0, #8]
 80136b4:	4770      	bx	lr
 80136b6:	bf00      	nop

080136b8 <rcl_node_get_namespace>:
 80136b8:	b120      	cbz	r0, 80136c4 <rcl_node_get_namespace+0xc>
 80136ba:	6840      	ldr	r0, [r0, #4]
 80136bc:	b110      	cbz	r0, 80136c4 <rcl_node_get_namespace+0xc>
 80136be:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80136c0:	b100      	cbz	r0, 80136c4 <rcl_node_get_namespace+0xc>
 80136c2:	68c0      	ldr	r0, [r0, #12]
 80136c4:	4770      	bx	lr
 80136c6:	bf00      	nop

080136c8 <rcl_node_get_options>:
 80136c8:	b128      	cbz	r0, 80136d6 <rcl_node_get_options+0xe>
 80136ca:	6840      	ldr	r0, [r0, #4]
 80136cc:	b118      	cbz	r0, 80136d6 <rcl_node_get_options+0xe>
 80136ce:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	bf08      	it	eq
 80136d4:	2000      	moveq	r0, #0
 80136d6:	4770      	bx	lr

080136d8 <rcl_node_get_rmw_handle>:
 80136d8:	b110      	cbz	r0, 80136e0 <rcl_node_get_rmw_handle+0x8>
 80136da:	6840      	ldr	r0, [r0, #4]
 80136dc:	b100      	cbz	r0, 80136e0 <rcl_node_get_rmw_handle+0x8>
 80136de:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80136e0:	4770      	bx	lr
 80136e2:	bf00      	nop

080136e4 <rcl_node_get_default_options>:
 80136e4:	b510      	push	{r4, lr}
 80136e6:	4604      	mov	r4, r0
 80136e8:	2268      	movs	r2, #104	; 0x68
 80136ea:	2100      	movs	r1, #0
 80136ec:	f00d fa16 	bl	8020b1c <memset>
 80136f0:	4620      	mov	r0, r4
 80136f2:	f001 fb71 	bl	8014dd8 <rcutils_get_default_allocator>
 80136f6:	2301      	movs	r3, #1
 80136f8:	4620      	mov	r0, r4
 80136fa:	7523      	strb	r3, [r4, #20]
 80136fc:	bd10      	pop	{r4, pc}
 80136fe:	bf00      	nop

08013700 <rcl_node_options_copy>:
 8013700:	2800      	cmp	r0, #0
 8013702:	bf18      	it	ne
 8013704:	4288      	cmpne	r0, r1
 8013706:	d01b      	beq.n	8013740 <rcl_node_options_copy+0x40>
 8013708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370a:	fab1 f681 	clz	r6, r1
 801370e:	460c      	mov	r4, r1
 8013710:	0976      	lsrs	r6, r6, #5
 8013712:	b199      	cbz	r1, 801373c <rcl_node_options_copy+0x3c>
 8013714:	4605      	mov	r5, r0
 8013716:	8a87      	ldrh	r7, [r0, #20]
 8013718:	4684      	mov	ip, r0
 801371a:	468e      	mov	lr, r1
 801371c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801371e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013722:	682b      	ldr	r3, [r5, #0]
 8013724:	2250      	movs	r2, #80	; 0x50
 8013726:	f10c 0118 	add.w	r1, ip, #24
 801372a:	f104 0018 	add.w	r0, r4, #24
 801372e:	f8ce 3000 	str.w	r3, [lr]
 8013732:	82a7      	strh	r7, [r4, #20]
 8013734:	f00d fabf 	bl	8020cb6 <memcpy>
 8013738:	4630      	mov	r0, r6
 801373a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801373c:	200b      	movs	r0, #11
 801373e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013740:	200b      	movs	r0, #11
 8013742:	4770      	bx	lr

08013744 <rcl_get_zero_initialized_publisher>:
 8013744:	4b01      	ldr	r3, [pc, #4]	; (801374c <rcl_get_zero_initialized_publisher+0x8>)
 8013746:	6818      	ldr	r0, [r3, #0]
 8013748:	4770      	bx	lr
 801374a:	bf00      	nop
 801374c:	08024bd0 	.word	0x08024bd0

08013750 <rcl_publisher_init>:
 8013750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013754:	b088      	sub	sp, #32
 8013756:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013758:	2e00      	cmp	r6, #0
 801375a:	d06b      	beq.n	8013834 <rcl_publisher_init+0xe4>
 801375c:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8013760:	4605      	mov	r5, r0
 8013762:	460f      	mov	r7, r1
 8013764:	4690      	mov	r8, r2
 8013766:	4650      	mov	r0, sl
 8013768:	4699      	mov	r9, r3
 801376a:	f001 fb43 	bl	8014df4 <rcutils_allocator_is_valid>
 801376e:	f080 0401 	eor.w	r4, r0, #1
 8013772:	b2e4      	uxtb	r4, r4
 8013774:	2c00      	cmp	r4, #0
 8013776:	d15d      	bne.n	8013834 <rcl_publisher_init+0xe4>
 8013778:	2d00      	cmp	r5, #0
 801377a:	d05b      	beq.n	8013834 <rcl_publisher_init+0xe4>
 801377c:	682b      	ldr	r3, [r5, #0]
 801377e:	b123      	cbz	r3, 801378a <rcl_publisher_init+0x3a>
 8013780:	2464      	movs	r4, #100	; 0x64
 8013782:	4620      	mov	r0, r4
 8013784:	b008      	add	sp, #32
 8013786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801378a:	4638      	mov	r0, r7
 801378c:	f7ff ff82 	bl	8013694 <rcl_node_is_valid>
 8013790:	2800      	cmp	r0, #0
 8013792:	d054      	beq.n	801383e <rcl_publisher_init+0xee>
 8013794:	f1b8 0f00 	cmp.w	r8, #0
 8013798:	d04c      	beq.n	8013834 <rcl_publisher_init+0xe4>
 801379a:	fab9 f389 	clz	r3, r9
 801379e:	095b      	lsrs	r3, r3, #5
 80137a0:	f1b9 0f00 	cmp.w	r9, #0
 80137a4:	d046      	beq.n	8013834 <rcl_publisher_init+0xe4>
 80137a6:	aa07      	add	r2, sp, #28
 80137a8:	9307      	str	r3, [sp, #28]
 80137aa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80137ae:	f106 0358 	add.w	r3, r6, #88	; 0x58
 80137b2:	9205      	str	r2, [sp, #20]
 80137b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80137b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80137bc:	4649      	mov	r1, r9
 80137be:	4638      	mov	r0, r7
 80137c0:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80137c4:	f007 ff54 	bl	801b670 <rcl_node_resolve_name>
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d14f      	bne.n	801386c <rcl_publisher_init+0x11c>
 80137cc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80137ce:	20c8      	movs	r0, #200	; 0xc8
 80137d0:	6e31      	ldr	r1, [r6, #96]	; 0x60
 80137d2:	4798      	blx	r3
 80137d4:	6028      	str	r0, [r5, #0]
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d050      	beq.n	801387c <rcl_publisher_init+0x12c>
 80137da:	4638      	mov	r0, r7
 80137dc:	f7ff ff7c 	bl	80136d8 <rcl_node_get_rmw_handle>
 80137e0:	f106 0364 	add.w	r3, r6, #100	; 0x64
 80137e4:	4641      	mov	r1, r8
 80137e6:	9a07      	ldr	r2, [sp, #28]
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	4633      	mov	r3, r6
 80137ec:	682c      	ldr	r4, [r5, #0]
 80137ee:	f002 fa27 	bl	8015c40 <rmw_create_publisher>
 80137f2:	682b      	ldr	r3, [r5, #0]
 80137f4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80137f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80137fc:	b370      	cbz	r0, 801385c <rcl_publisher_init+0x10c>
 80137fe:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8013802:	f002 fb01 	bl	8015e08 <rmw_publisher_get_actual_qos>
 8013806:	682b      	ldr	r3, [r5, #0]
 8013808:	4604      	mov	r4, r0
 801380a:	b9d0      	cbnz	r0, 8013842 <rcl_publisher_init+0xf2>
 801380c:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8013810:	4631      	mov	r1, r6
 8013812:	4618      	mov	r0, r3
 8013814:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8013818:	2270      	movs	r2, #112	; 0x70
 801381a:	f00d fa4c 	bl	8020cb6 <memcpy>
 801381e:	683a      	ldr	r2, [r7, #0]
 8013820:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8013824:	9807      	ldr	r0, [sp, #28]
 8013826:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013828:	6e31      	ldr	r1, [r6, #96]	; 0x60
 801382a:	4798      	blx	r3
 801382c:	4620      	mov	r0, r4
 801382e:	b008      	add	sp, #32
 8013830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013834:	240b      	movs	r4, #11
 8013836:	4620      	mov	r0, r4
 8013838:	b008      	add	sp, #32
 801383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801383e:	24c8      	movs	r4, #200	; 0xc8
 8013840:	e79f      	b.n	8013782 <rcl_publisher_init+0x32>
 8013842:	b1cb      	cbz	r3, 8013878 <rcl_publisher_init+0x128>
 8013844:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013848:	b142      	cbz	r2, 801385c <rcl_publisher_init+0x10c>
 801384a:	4638      	mov	r0, r7
 801384c:	f7ff ff44 	bl	80136d8 <rcl_node_get_rmw_handle>
 8013850:	682b      	ldr	r3, [r5, #0]
 8013852:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8013856:	f002 faeb 	bl	8015e30 <rmw_destroy_publisher>
 801385a:	682b      	ldr	r3, [r5, #0]
 801385c:	4618      	mov	r0, r3
 801385e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8013860:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013862:	2401      	movs	r4, #1
 8013864:	4790      	blx	r2
 8013866:	2300      	movs	r3, #0
 8013868:	602b      	str	r3, [r5, #0]
 801386a:	e7db      	b.n	8013824 <rcl_publisher_init+0xd4>
 801386c:	2867      	cmp	r0, #103	; 0x67
 801386e:	d007      	beq.n	8013880 <rcl_publisher_init+0x130>
 8013870:	2869      	cmp	r0, #105	; 0x69
 8013872:	d005      	beq.n	8013880 <rcl_publisher_init+0x130>
 8013874:	280a      	cmp	r0, #10
 8013876:	d001      	beq.n	801387c <rcl_publisher_init+0x12c>
 8013878:	2401      	movs	r4, #1
 801387a:	e7d3      	b.n	8013824 <rcl_publisher_init+0xd4>
 801387c:	240a      	movs	r4, #10
 801387e:	e7d1      	b.n	8013824 <rcl_publisher_init+0xd4>
 8013880:	2467      	movs	r4, #103	; 0x67
 8013882:	e7cf      	b.n	8013824 <rcl_publisher_init+0xd4>

08013884 <rcl_publisher_get_default_options>:
 8013884:	b570      	push	{r4, r5, r6, lr}
 8013886:	4d14      	ldr	r5, [pc, #80]	; (80138d8 <rcl_publisher_get_default_options+0x54>)
 8013888:	b088      	sub	sp, #32
 801388a:	4604      	mov	r4, r0
 801388c:	2250      	movs	r2, #80	; 0x50
 801388e:	4913      	ldr	r1, [pc, #76]	; (80138dc <rcl_publisher_get_default_options+0x58>)
 8013890:	4628      	mov	r0, r5
 8013892:	f00d fa10 	bl	8020cb6 <memcpy>
 8013896:	a802      	add	r0, sp, #8
 8013898:	f001 fa9e 	bl	8014dd8 <rcutils_get_default_allocator>
 801389c:	f10d 0c08 	add.w	ip, sp, #8
 80138a0:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80138a4:	466e      	mov	r6, sp
 80138a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138ae:	f8dc 3000 	ldr.w	r3, [ip]
 80138b2:	4630      	mov	r0, r6
 80138b4:	f8ce 3000 	str.w	r3, [lr]
 80138b8:	f001 fcca 	bl	8015250 <rmw_get_default_publisher_options>
 80138bc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80138c0:	2270      	movs	r2, #112	; 0x70
 80138c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80138c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80138ca:	4629      	mov	r1, r5
 80138cc:	4620      	mov	r0, r4
 80138ce:	f00d f9f2 	bl	8020cb6 <memcpy>
 80138d2:	4620      	mov	r0, r4
 80138d4:	b008      	add	sp, #32
 80138d6:	bd70      	pop	{r4, r5, r6, pc}
 80138d8:	20012340 	.word	0x20012340
 80138dc:	08024bd8 	.word	0x08024bd8

080138e0 <rcl_publish>:
 80138e0:	b1f8      	cbz	r0, 8013922 <rcl_publish+0x42>
 80138e2:	6803      	ldr	r3, [r0, #0]
 80138e4:	b570      	push	{r4, r5, r6, lr}
 80138e6:	4604      	mov	r4, r0
 80138e8:	b1b3      	cbz	r3, 8013918 <rcl_publish+0x38>
 80138ea:	4616      	mov	r6, r2
 80138ec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80138f0:	b192      	cbz	r2, 8013918 <rcl_publish+0x38>
 80138f2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80138f6:	460d      	mov	r5, r1
 80138f8:	f007 fc7e 	bl	801b1f8 <rcl_context_is_valid>
 80138fc:	b160      	cbz	r0, 8013918 <rcl_publish+0x38>
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013904:	b140      	cbz	r0, 8013918 <rcl_publish+0x38>
 8013906:	b155      	cbz	r5, 801391e <rcl_publish+0x3e>
 8013908:	4632      	mov	r2, r6
 801390a:	4629      	mov	r1, r5
 801390c:	f002 f938 	bl	8015b80 <rmw_publish>
 8013910:	3800      	subs	r0, #0
 8013912:	bf18      	it	ne
 8013914:	2001      	movne	r0, #1
 8013916:	bd70      	pop	{r4, r5, r6, pc}
 8013918:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801391c:	bd70      	pop	{r4, r5, r6, pc}
 801391e:	200b      	movs	r0, #11
 8013920:	bd70      	pop	{r4, r5, r6, pc}
 8013922:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013926:	4770      	bx	lr

08013928 <rcl_publisher_is_valid>:
 8013928:	b1a0      	cbz	r0, 8013954 <rcl_publisher_is_valid+0x2c>
 801392a:	6803      	ldr	r3, [r0, #0]
 801392c:	b510      	push	{r4, lr}
 801392e:	4604      	mov	r4, r0
 8013930:	b173      	cbz	r3, 8013950 <rcl_publisher_is_valid+0x28>
 8013932:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013936:	b15a      	cbz	r2, 8013950 <rcl_publisher_is_valid+0x28>
 8013938:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 801393c:	f007 fc5c 	bl	801b1f8 <rcl_context_is_valid>
 8013940:	b130      	cbz	r0, 8013950 <rcl_publisher_is_valid+0x28>
 8013942:	6823      	ldr	r3, [r4, #0]
 8013944:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013948:	3800      	subs	r0, #0
 801394a:	bf18      	it	ne
 801394c:	2001      	movne	r0, #1
 801394e:	bd10      	pop	{r4, pc}
 8013950:	2000      	movs	r0, #0
 8013952:	bd10      	pop	{r4, pc}
 8013954:	2000      	movs	r0, #0
 8013956:	4770      	bx	lr

08013958 <rcl_publisher_is_valid_except_context>:
 8013958:	b130      	cbz	r0, 8013968 <rcl_publisher_is_valid_except_context+0x10>
 801395a:	6800      	ldr	r0, [r0, #0]
 801395c:	b120      	cbz	r0, 8013968 <rcl_publisher_is_valid_except_context+0x10>
 801395e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013962:	3800      	subs	r0, #0
 8013964:	bf18      	it	ne
 8013966:	2001      	movne	r0, #1
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop

0801396c <rcl_get_zero_initialized_service>:
 801396c:	4b01      	ldr	r3, [pc, #4]	; (8013974 <rcl_get_zero_initialized_service+0x8>)
 801396e:	6818      	ldr	r0, [r3, #0]
 8013970:	4770      	bx	lr
 8013972:	bf00      	nop
 8013974:	08024c28 	.word	0x08024c28

08013978 <rcl_service_init>:
 8013978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801397c:	b088      	sub	sp, #32
 801397e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013980:	b1ff      	cbz	r7, 80139c2 <rcl_service_init+0x4a>
 8013982:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013986:	4605      	mov	r5, r0
 8013988:	460e      	mov	r6, r1
 801398a:	4691      	mov	r9, r2
 801398c:	4650      	mov	r0, sl
 801398e:	4698      	mov	r8, r3
 8013990:	f001 fa30 	bl	8014df4 <rcutils_allocator_is_valid>
 8013994:	f080 0401 	eor.w	r4, r0, #1
 8013998:	b2e4      	uxtb	r4, r4
 801399a:	b994      	cbnz	r4, 80139c2 <rcl_service_init+0x4a>
 801399c:	b18d      	cbz	r5, 80139c2 <rcl_service_init+0x4a>
 801399e:	4630      	mov	r0, r6
 80139a0:	f7ff fe78 	bl	8013694 <rcl_node_is_valid>
 80139a4:	2800      	cmp	r0, #0
 80139a6:	d05d      	beq.n	8013a64 <rcl_service_init+0xec>
 80139a8:	f1b8 0f00 	cmp.w	r8, #0
 80139ac:	d009      	beq.n	80139c2 <rcl_service_init+0x4a>
 80139ae:	f1b9 0f00 	cmp.w	r9, #0
 80139b2:	d006      	beq.n	80139c2 <rcl_service_init+0x4a>
 80139b4:	682b      	ldr	r3, [r5, #0]
 80139b6:	b14b      	cbz	r3, 80139cc <rcl_service_init+0x54>
 80139b8:	2464      	movs	r4, #100	; 0x64
 80139ba:	4620      	mov	r0, r4
 80139bc:	b008      	add	sp, #32
 80139be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139c2:	240b      	movs	r4, #11
 80139c4:	4620      	mov	r0, r4
 80139c6:	b008      	add	sp, #32
 80139c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139cc:	aa07      	add	r2, sp, #28
 80139ce:	9304      	str	r3, [sp, #16]
 80139d0:	9307      	str	r3, [sp, #28]
 80139d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80139d6:	9205      	str	r2, [sp, #20]
 80139d8:	2201      	movs	r2, #1
 80139da:	9203      	str	r2, [sp, #12]
 80139dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80139e0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80139e4:	4641      	mov	r1, r8
 80139e6:	4630      	mov	r0, r6
 80139e8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80139ec:	f007 fe40 	bl	801b670 <rcl_node_resolve_name>
 80139f0:	2800      	cmp	r0, #0
 80139f2:	d146      	bne.n	8013a82 <rcl_service_init+0x10a>
 80139f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139f6:	f44f 7088 	mov.w	r0, #272	; 0x110
 80139fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80139fc:	4798      	blx	r3
 80139fe:	6028      	str	r0, [r5, #0]
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d046      	beq.n	8013a92 <rcl_service_init+0x11a>
 8013a04:	4630      	mov	r0, r6
 8013a06:	f7ff fe67 	bl	80136d8 <rcl_node_get_rmw_handle>
 8013a0a:	463b      	mov	r3, r7
 8013a0c:	4649      	mov	r1, r9
 8013a0e:	9a07      	ldr	r2, [sp, #28]
 8013a10:	682c      	ldr	r4, [r5, #0]
 8013a12:	f002 fbb1 	bl	8016178 <rmw_create_service>
 8013a16:	682b      	ldr	r3, [r5, #0]
 8013a18:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8013a1c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013a20:	b338      	cbz	r0, 8013a72 <rcl_service_init+0xfa>
 8013a22:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8013a26:	f002 fcd9 	bl	80163dc <rmw_service_request_subscription_get_actual_qos>
 8013a2a:	bb00      	cbnz	r0, 8013a6e <rcl_service_init+0xf6>
 8013a2c:	682b      	ldr	r3, [r5, #0]
 8013a2e:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8013a32:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013a36:	f002 fcbd 	bl	80163b4 <rmw_service_response_publisher_get_actual_qos>
 8013a3a:	4604      	mov	r4, r0
 8013a3c:	b9b8      	cbnz	r0, 8013a6e <rcl_service_init+0xf6>
 8013a3e:	6828      	ldr	r0, [r5, #0]
 8013a40:	2268      	movs	r2, #104	; 0x68
 8013a42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013a46:	4639      	mov	r1, r7
 8013a48:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013a4c:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8013a50:	f00d f931 	bl	8020cb6 <memcpy>
 8013a54:	9807      	ldr	r0, [sp, #28]
 8013a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013a5a:	4798      	blx	r3
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	b008      	add	sp, #32
 8013a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a64:	24c8      	movs	r4, #200	; 0xc8
 8013a66:	4620      	mov	r0, r4
 8013a68:	b008      	add	sp, #32
 8013a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a6e:	682b      	ldr	r3, [r5, #0]
 8013a70:	b16b      	cbz	r3, 8013a8e <rcl_service_init+0x116>
 8013a72:	4618      	mov	r0, r3
 8013a74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013a76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013a78:	2401      	movs	r4, #1
 8013a7a:	4790      	blx	r2
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	602b      	str	r3, [r5, #0]
 8013a80:	e7e8      	b.n	8013a54 <rcl_service_init+0xdc>
 8013a82:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d905      	bls.n	8013a96 <rcl_service_init+0x11e>
 8013a8a:	280a      	cmp	r0, #10
 8013a8c:	d001      	beq.n	8013a92 <rcl_service_init+0x11a>
 8013a8e:	2401      	movs	r4, #1
 8013a90:	e7e0      	b.n	8013a54 <rcl_service_init+0xdc>
 8013a92:	240a      	movs	r4, #10
 8013a94:	e7de      	b.n	8013a54 <rcl_service_init+0xdc>
 8013a96:	2468      	movs	r4, #104	; 0x68
 8013a98:	e7dc      	b.n	8013a54 <rcl_service_init+0xdc>
 8013a9a:	bf00      	nop

08013a9c <rcl_service_get_default_options>:
 8013a9c:	b530      	push	{r4, r5, lr}
 8013a9e:	4d0f      	ldr	r5, [pc, #60]	; (8013adc <rcl_service_get_default_options+0x40>)
 8013aa0:	b087      	sub	sp, #28
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	2250      	movs	r2, #80	; 0x50
 8013aa6:	490e      	ldr	r1, [pc, #56]	; (8013ae0 <rcl_service_get_default_options+0x44>)
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	f00d f904 	bl	8020cb6 <memcpy>
 8013aae:	4668      	mov	r0, sp
 8013ab0:	f001 f992 	bl	8014dd8 <rcutils_get_default_allocator>
 8013ab4:	46ec      	mov	ip, sp
 8013ab6:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013aba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013abe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013ac2:	f8dc 3000 	ldr.w	r3, [ip]
 8013ac6:	2268      	movs	r2, #104	; 0x68
 8013ac8:	4629      	mov	r1, r5
 8013aca:	4620      	mov	r0, r4
 8013acc:	f8ce 3000 	str.w	r3, [lr]
 8013ad0:	f00d f8f1 	bl	8020cb6 <memcpy>
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	b007      	add	sp, #28
 8013ad8:	bd30      	pop	{r4, r5, pc}
 8013ada:	bf00      	nop
 8013adc:	200123b0 	.word	0x200123b0
 8013ae0:	08024c30 	.word	0x08024c30

08013ae4 <rcl_service_get_rmw_handle>:
 8013ae4:	b118      	cbz	r0, 8013aee <rcl_service_get_rmw_handle+0xa>
 8013ae6:	6800      	ldr	r0, [r0, #0]
 8013ae8:	b108      	cbz	r0, 8013aee <rcl_service_get_rmw_handle+0xa>
 8013aea:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013aee:	4770      	bx	lr

08013af0 <rcl_take_request>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	468e      	mov	lr, r1
 8013af4:	b08c      	sub	sp, #48	; 0x30
 8013af6:	460c      	mov	r4, r1
 8013af8:	4616      	mov	r6, r2
 8013afa:	f10d 0c18 	add.w	ip, sp, #24
 8013afe:	4605      	mov	r5, r0
 8013b00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013b0c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b10:	b30d      	cbz	r5, 8013b56 <rcl_take_request+0x66>
 8013b12:	682b      	ldr	r3, [r5, #0]
 8013b14:	b1fb      	cbz	r3, 8013b56 <rcl_take_request+0x66>
 8013b16:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8013b1a:	b1e0      	cbz	r0, 8013b56 <rcl_take_request+0x66>
 8013b1c:	b336      	cbz	r6, 8013b6c <rcl_take_request+0x7c>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	4632      	mov	r2, r6
 8013b22:	a902      	add	r1, sp, #8
 8013b24:	f88d 3007 	strb.w	r3, [sp, #7]
 8013b28:	f10d 0307 	add.w	r3, sp, #7
 8013b2c:	f002 fa22 	bl	8015f74 <rmw_take_request>
 8013b30:	4605      	mov	r5, r0
 8013b32:	b198      	cbz	r0, 8013b5c <rcl_take_request+0x6c>
 8013b34:	280a      	cmp	r0, #10
 8013b36:	bf18      	it	ne
 8013b38:	2501      	movne	r5, #1
 8013b3a:	f10d 0e18 	add.w	lr, sp, #24
 8013b3e:	46a4      	mov	ip, r4
 8013b40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013b4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b50:	4628      	mov	r0, r5
 8013b52:	b00c      	add	sp, #48	; 0x30
 8013b54:	bd70      	pop	{r4, r5, r6, pc}
 8013b56:	f44f 7516 	mov.w	r5, #600	; 0x258
 8013b5a:	e7ee      	b.n	8013b3a <rcl_take_request+0x4a>
 8013b5c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013b60:	f240 2359 	movw	r3, #601	; 0x259
 8013b64:	2a00      	cmp	r2, #0
 8013b66:	bf08      	it	eq
 8013b68:	461d      	moveq	r5, r3
 8013b6a:	e7e6      	b.n	8013b3a <rcl_take_request+0x4a>
 8013b6c:	250b      	movs	r5, #11
 8013b6e:	e7e4      	b.n	8013b3a <rcl_take_request+0x4a>

08013b70 <rcl_send_response>:
 8013b70:	b170      	cbz	r0, 8013b90 <rcl_send_response+0x20>
 8013b72:	6800      	ldr	r0, [r0, #0]
 8013b74:	b160      	cbz	r0, 8013b90 <rcl_send_response+0x20>
 8013b76:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013b7a:	b148      	cbz	r0, 8013b90 <rcl_send_response+0x20>
 8013b7c:	b169      	cbz	r1, 8013b9a <rcl_send_response+0x2a>
 8013b7e:	b510      	push	{r4, lr}
 8013b80:	b14a      	cbz	r2, 8013b96 <rcl_send_response+0x26>
 8013b82:	f002 fa55 	bl	8016030 <rmw_send_response>
 8013b86:	b110      	cbz	r0, 8013b8e <rcl_send_response+0x1e>
 8013b88:	2802      	cmp	r0, #2
 8013b8a:	bf18      	it	ne
 8013b8c:	2001      	movne	r0, #1
 8013b8e:	bd10      	pop	{r4, pc}
 8013b90:	f44f 7016 	mov.w	r0, #600	; 0x258
 8013b94:	4770      	bx	lr
 8013b96:	200b      	movs	r0, #11
 8013b98:	bd10      	pop	{r4, pc}
 8013b9a:	200b      	movs	r0, #11
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop

08013ba0 <rcl_service_is_valid>:
 8013ba0:	b130      	cbz	r0, 8013bb0 <rcl_service_is_valid+0x10>
 8013ba2:	6800      	ldr	r0, [r0, #0]
 8013ba4:	b120      	cbz	r0, 8013bb0 <rcl_service_is_valid+0x10>
 8013ba6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8013baa:	3800      	subs	r0, #0
 8013bac:	bf18      	it	ne
 8013bae:	2001      	movne	r0, #1
 8013bb0:	4770      	bx	lr
 8013bb2:	bf00      	nop

08013bb4 <rcl_get_zero_initialized_subscription>:
 8013bb4:	4b01      	ldr	r3, [pc, #4]	; (8013bbc <rcl_get_zero_initialized_subscription+0x8>)
 8013bb6:	6818      	ldr	r0, [r3, #0]
 8013bb8:	4770      	bx	lr
 8013bba:	bf00      	nop
 8013bbc:	08024c80 	.word	0x08024c80

08013bc0 <rcl_subscription_init>:
 8013bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bc4:	b088      	sub	sp, #32
 8013bc6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013bc8:	b1ff      	cbz	r7, 8013c0a <rcl_subscription_init+0x4a>
 8013bca:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013bce:	4605      	mov	r5, r0
 8013bd0:	460e      	mov	r6, r1
 8013bd2:	4691      	mov	r9, r2
 8013bd4:	4650      	mov	r0, sl
 8013bd6:	4698      	mov	r8, r3
 8013bd8:	f001 f90c 	bl	8014df4 <rcutils_allocator_is_valid>
 8013bdc:	f080 0401 	eor.w	r4, r0, #1
 8013be0:	b2e4      	uxtb	r4, r4
 8013be2:	b994      	cbnz	r4, 8013c0a <rcl_subscription_init+0x4a>
 8013be4:	b18d      	cbz	r5, 8013c0a <rcl_subscription_init+0x4a>
 8013be6:	4630      	mov	r0, r6
 8013be8:	f7ff fd54 	bl	8013694 <rcl_node_is_valid>
 8013bec:	2800      	cmp	r0, #0
 8013bee:	d055      	beq.n	8013c9c <rcl_subscription_init+0xdc>
 8013bf0:	f1b9 0f00 	cmp.w	r9, #0
 8013bf4:	d009      	beq.n	8013c0a <rcl_subscription_init+0x4a>
 8013bf6:	f1b8 0f00 	cmp.w	r8, #0
 8013bfa:	d006      	beq.n	8013c0a <rcl_subscription_init+0x4a>
 8013bfc:	682b      	ldr	r3, [r5, #0]
 8013bfe:	b14b      	cbz	r3, 8013c14 <rcl_subscription_init+0x54>
 8013c00:	2464      	movs	r4, #100	; 0x64
 8013c02:	4620      	mov	r0, r4
 8013c04:	b008      	add	sp, #32
 8013c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c0a:	240b      	movs	r4, #11
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	b008      	add	sp, #32
 8013c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c14:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013c18:	aa07      	add	r2, sp, #28
 8013c1a:	9307      	str	r3, [sp, #28]
 8013c1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013c20:	9205      	str	r2, [sp, #20]
 8013c22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013c26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c2a:	4641      	mov	r1, r8
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013c32:	f007 fd1d 	bl	801b670 <rcl_node_resolve_name>
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d15f      	bne.n	8013cfa <rcl_subscription_init+0x13a>
 8013c3a:	21c8      	movs	r1, #200	; 0xc8
 8013c3c:	2001      	movs	r0, #1
 8013c3e:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8013c42:	4798      	blx	r3
 8013c44:	6028      	str	r0, [r5, #0]
 8013c46:	2800      	cmp	r0, #0
 8013c48:	d05f      	beq.n	8013d0a <rcl_subscription_init+0x14a>
 8013c4a:	4630      	mov	r0, r6
 8013c4c:	f7ff fd44 	bl	80136d8 <rcl_node_get_rmw_handle>
 8013c50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013c54:	4649      	mov	r1, r9
 8013c56:	9a07      	ldr	r2, [sp, #28]
 8013c58:	9300      	str	r3, [sp, #0]
 8013c5a:	463b      	mov	r3, r7
 8013c5c:	682c      	ldr	r4, [r5, #0]
 8013c5e:	f002 fbd1 	bl	8016404 <rmw_create_subscription>
 8013c62:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8013c66:	682c      	ldr	r4, [r5, #0]
 8013c68:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8013c6c:	b348      	cbz	r0, 8013cc2 <rcl_subscription_init+0x102>
 8013c6e:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8013c72:	f002 fcbd 	bl	80165f0 <rmw_subscription_get_actual_qos>
 8013c76:	4604      	mov	r4, r0
 8013c78:	b9a8      	cbnz	r0, 8013ca6 <rcl_subscription_init+0xe6>
 8013c7a:	6828      	ldr	r0, [r5, #0]
 8013c7c:	2270      	movs	r2, #112	; 0x70
 8013c7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013c82:	4639      	mov	r1, r7
 8013c84:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8013c88:	f00d f815 	bl	8020cb6 <memcpy>
 8013c8c:	9807      	ldr	r0, [sp, #28]
 8013c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013c92:	4798      	blx	r3
 8013c94:	4620      	mov	r0, r4
 8013c96:	b008      	add	sp, #32
 8013c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c9c:	24c8      	movs	r4, #200	; 0xc8
 8013c9e:	4620      	mov	r0, r4
 8013ca0:	b008      	add	sp, #32
 8013ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ca6:	682c      	ldr	r4, [r5, #0]
 8013ca8:	b36c      	cbz	r4, 8013d06 <rcl_subscription_init+0x146>
 8013caa:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8013cae:	b14b      	cbz	r3, 8013cc4 <rcl_subscription_init+0x104>
 8013cb0:	4630      	mov	r0, r6
 8013cb2:	f7ff fd11 	bl	80136d8 <rcl_node_get_rmw_handle>
 8013cb6:	682b      	ldr	r3, [r5, #0]
 8013cb8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8013cbc:	f002 fcac 	bl	8016618 <rmw_destroy_subscription>
 8013cc0:	682c      	ldr	r4, [r5, #0]
 8013cc2:	b194      	cbz	r4, 8013cea <rcl_subscription_init+0x12a>
 8013cc4:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f001 f893 	bl	8014df4 <rcutils_allocator_is_valid>
 8013cce:	b158      	cbz	r0, 8013ce8 <rcl_subscription_init+0x128>
 8013cd0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013cd2:	b148      	cbz	r0, 8013ce8 <rcl_subscription_init+0x128>
 8013cd4:	4631      	mov	r1, r6
 8013cd6:	f001 fac3 	bl	8015260 <rmw_subscription_content_filter_options_fini>
 8013cda:	4606      	mov	r6, r0
 8013cdc:	b9c8      	cbnz	r0, 8013d12 <rcl_subscription_init+0x152>
 8013cde:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013ce0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8013ce2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8013ce4:	4798      	blx	r3
 8013ce6:	66e6      	str	r6, [r4, #108]	; 0x6c
 8013ce8:	682c      	ldr	r4, [r5, #0]
 8013cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cec:	4620      	mov	r0, r4
 8013cee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013cf0:	2401      	movs	r4, #1
 8013cf2:	4798      	blx	r3
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	602b      	str	r3, [r5, #0]
 8013cf8:	e7c8      	b.n	8013c8c <rcl_subscription_init+0xcc>
 8013cfa:	2867      	cmp	r0, #103	; 0x67
 8013cfc:	d007      	beq.n	8013d0e <rcl_subscription_init+0x14e>
 8013cfe:	2869      	cmp	r0, #105	; 0x69
 8013d00:	d005      	beq.n	8013d0e <rcl_subscription_init+0x14e>
 8013d02:	280a      	cmp	r0, #10
 8013d04:	d001      	beq.n	8013d0a <rcl_subscription_init+0x14a>
 8013d06:	2401      	movs	r4, #1
 8013d08:	e7c0      	b.n	8013c8c <rcl_subscription_init+0xcc>
 8013d0a:	240a      	movs	r4, #10
 8013d0c:	e7be      	b.n	8013c8c <rcl_subscription_init+0xcc>
 8013d0e:	2467      	movs	r4, #103	; 0x67
 8013d10:	e7bc      	b.n	8013c8c <rcl_subscription_init+0xcc>
 8013d12:	f007 fa53 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 8013d16:	682c      	ldr	r4, [r5, #0]
 8013d18:	e7e7      	b.n	8013cea <rcl_subscription_init+0x12a>
 8013d1a:	bf00      	nop

08013d1c <rcl_subscription_get_default_options>:
 8013d1c:	b570      	push	{r4, r5, r6, lr}
 8013d1e:	4d14      	ldr	r5, [pc, #80]	; (8013d70 <rcl_subscription_get_default_options+0x54>)
 8013d20:	b08a      	sub	sp, #40	; 0x28
 8013d22:	4604      	mov	r4, r0
 8013d24:	2250      	movs	r2, #80	; 0x50
 8013d26:	4913      	ldr	r1, [pc, #76]	; (8013d74 <rcl_subscription_get_default_options+0x58>)
 8013d28:	4628      	mov	r0, r5
 8013d2a:	f00c ffc4 	bl	8020cb6 <memcpy>
 8013d2e:	a804      	add	r0, sp, #16
 8013d30:	f001 f852 	bl	8014dd8 <rcutils_get_default_allocator>
 8013d34:	f10d 0c10 	add.w	ip, sp, #16
 8013d38:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013d3c:	466e      	mov	r6, sp
 8013d3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d46:	f8dc 3000 	ldr.w	r3, [ip]
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	f8ce 3000 	str.w	r3, [lr]
 8013d50:	f001 faa0 	bl	8015294 <rmw_get_default_subscription_options>
 8013d54:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013d58:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013d5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013d60:	2270      	movs	r2, #112	; 0x70
 8013d62:	4629      	mov	r1, r5
 8013d64:	4620      	mov	r0, r4
 8013d66:	f00c ffa6 	bl	8020cb6 <memcpy>
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	b00a      	add	sp, #40	; 0x28
 8013d6e:	bd70      	pop	{r4, r5, r6, pc}
 8013d70:	20012418 	.word	0x20012418
 8013d74:	08024c88 	.word	0x08024c88

08013d78 <rcl_take>:
 8013d78:	2800      	cmp	r0, #0
 8013d7a:	d049      	beq.n	8013e10 <rcl_take+0x98>
 8013d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d80:	4615      	mov	r5, r2
 8013d82:	6802      	ldr	r2, [r0, #0]
 8013d84:	b0a4      	sub	sp, #144	; 0x90
 8013d86:	4604      	mov	r4, r0
 8013d88:	2a00      	cmp	r2, #0
 8013d8a:	d039      	beq.n	8013e00 <rcl_take+0x88>
 8013d8c:	461f      	mov	r7, r3
 8013d8e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8013d92:	b3ab      	cbz	r3, 8013e00 <rcl_take+0x88>
 8013d94:	460e      	mov	r6, r1
 8013d96:	2900      	cmp	r1, #0
 8013d98:	d038      	beq.n	8013e0c <rcl_take+0x94>
 8013d9a:	2d00      	cmp	r5, #0
 8013d9c:	d03c      	beq.n	8013e18 <rcl_take+0xa0>
 8013d9e:	a802      	add	r0, sp, #8
 8013da0:	f04f 0800 	mov.w	r8, #0
 8013da4:	f001 fa7c 	bl	80152a0 <rmw_get_zero_initialized_message_info>
 8013da8:	f10d 0c08 	add.w	ip, sp, #8
 8013dac:	46ae      	mov	lr, r5
 8013dae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013db2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013db6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013dba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013dbe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013dc2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013dc6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013dca:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013dce:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8013dd2:	462b      	mov	r3, r5
 8013dd4:	6820      	ldr	r0, [r4, #0]
 8013dd6:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8013dda:	4631      	mov	r1, r6
 8013ddc:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013de0:	9700      	str	r7, [sp, #0]
 8013de2:	f002 fc7b 	bl	80166dc <rmw_take_with_info>
 8013de6:	4603      	mov	r3, r0
 8013de8:	b9c0      	cbnz	r0, 8013e1c <rcl_take+0xa4>
 8013dea:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 8013dee:	f240 1291 	movw	r2, #401	; 0x191
 8013df2:	2900      	cmp	r1, #0
 8013df4:	bf08      	it	eq
 8013df6:	4613      	moveq	r3, r2
 8013df8:	4618      	mov	r0, r3
 8013dfa:	b024      	add	sp, #144	; 0x90
 8013dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e00:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013e04:	4618      	mov	r0, r3
 8013e06:	b024      	add	sp, #144	; 0x90
 8013e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e0c:	230b      	movs	r3, #11
 8013e0e:	e7f3      	b.n	8013df8 <rcl_take+0x80>
 8013e10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013e14:	4618      	mov	r0, r3
 8013e16:	4770      	bx	lr
 8013e18:	ad14      	add	r5, sp, #80	; 0x50
 8013e1a:	e7c0      	b.n	8013d9e <rcl_take+0x26>
 8013e1c:	f007 f9ce 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 8013e20:	4603      	mov	r3, r0
 8013e22:	e7e9      	b.n	8013df8 <rcl_take+0x80>

08013e24 <rcl_subscription_get_rmw_handle>:
 8013e24:	b118      	cbz	r0, 8013e2e <rcl_subscription_get_rmw_handle+0xa>
 8013e26:	6800      	ldr	r0, [r0, #0]
 8013e28:	b108      	cbz	r0, 8013e2e <rcl_subscription_get_rmw_handle+0xa>
 8013e2a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013e2e:	4770      	bx	lr

08013e30 <rcl_subscription_is_valid>:
 8013e30:	b130      	cbz	r0, 8013e40 <rcl_subscription_is_valid+0x10>
 8013e32:	6800      	ldr	r0, [r0, #0]
 8013e34:	b120      	cbz	r0, 8013e40 <rcl_subscription_is_valid+0x10>
 8013e36:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8013e3a:	3800      	subs	r0, #0
 8013e3c:	bf18      	it	ne
 8013e3e:	2001      	movne	r0, #1
 8013e40:	4770      	bx	lr
 8013e42:	bf00      	nop

08013e44 <_rclc_check_for_new_data>:
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d046      	beq.n	8013ed6 <_rclc_check_for_new_data+0x92>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	b530      	push	{r4, r5, lr}
 8013e4c:	7802      	ldrb	r2, [r0, #0]
 8013e4e:	b085      	sub	sp, #20
 8013e50:	2a0a      	cmp	r2, #10
 8013e52:	d842      	bhi.n	8013eda <_rclc_check_for_new_data+0x96>
 8013e54:	e8df f002 	tbb	[pc, r2]
 8013e58:	14181212 	.word	0x14181212
 8013e5c:	06060614 	.word	0x06060614
 8013e60:	2e1a      	.short	0x2e1a
 8013e62:	16          	.byte	0x16
 8013e63:	00          	.byte	0x00
 8013e64:	6a0a      	ldr	r2, [r1, #32]
 8013e66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013e68:	2000      	movs	r0, #0
 8013e6a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8013e6e:	1a12      	subs	r2, r2, r0
 8013e70:	bf18      	it	ne
 8013e72:	2201      	movne	r2, #1
 8013e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8013e78:	b005      	add	sp, #20
 8013e7a:	bd30      	pop	{r4, r5, pc}
 8013e7c:	680a      	ldr	r2, [r1, #0]
 8013e7e:	e7f2      	b.n	8013e66 <_rclc_check_for_new_data+0x22>
 8013e80:	698a      	ldr	r2, [r1, #24]
 8013e82:	e7f0      	b.n	8013e66 <_rclc_check_for_new_data+0x22>
 8013e84:	688a      	ldr	r2, [r1, #8]
 8013e86:	e7ee      	b.n	8013e66 <_rclc_check_for_new_data+0x22>
 8013e88:	690a      	ldr	r2, [r1, #16]
 8013e8a:	e7ec      	b.n	8013e66 <_rclc_check_for_new_data+0x22>
 8013e8c:	685c      	ldr	r4, [r3, #4]
 8013e8e:	4608      	mov	r0, r1
 8013e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e9c:	f104 0110 	add.w	r1, r4, #16
 8013ea0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013ea4:	9500      	str	r5, [sp, #0]
 8013ea6:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8013eaa:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8013eae:	f008 ff4b 	bl	801cd48 <rcl_action_client_wait_set_get_entities_ready>
 8013eb2:	e7e1      	b.n	8013e78 <_rclc_check_for_new_data+0x34>
 8013eb4:	685c      	ldr	r4, [r3, #4]
 8013eb6:	4608      	mov	r0, r1
 8013eb8:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8013ebc:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8013ec0:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8013ec4:	e9cd 2100 	strd	r2, r1, [sp]
 8013ec8:	f104 0220 	add.w	r2, r4, #32
 8013ecc:	f104 0110 	add.w	r1, r4, #16
 8013ed0:	f009 f952 	bl	801d178 <rcl_action_server_wait_set_get_entities_ready>
 8013ed4:	e7d0      	b.n	8013e78 <_rclc_check_for_new_data+0x34>
 8013ed6:	200b      	movs	r0, #11
 8013ed8:	4770      	bx	lr
 8013eda:	2001      	movs	r0, #1
 8013edc:	e7cc      	b.n	8013e78 <_rclc_check_for_new_data+0x34>
 8013ede:	bf00      	nop

08013ee0 <_rclc_take_new_data>:
 8013ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ee2:	b09b      	sub	sp, #108	; 0x6c
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	f000 8088 	beq.w	8013ffa <_rclc_take_new_data+0x11a>
 8013eea:	7803      	ldrb	r3, [r0, #0]
 8013eec:	4604      	mov	r4, r0
 8013eee:	2b0a      	cmp	r3, #10
 8013ef0:	f200 8167 	bhi.w	80141c2 <_rclc_take_new_data+0x2e2>
 8013ef4:	e8df f003 	tbb	[pc, r3]
 8013ef8:	44152d2d 	.word	0x44152d2d
 8013efc:	19191944 	.word	0x19191944
 8013f00:	065a      	.short	0x065a
 8013f02:	15          	.byte	0x15
 8013f03:	00          	.byte	0x00
 8013f04:	6840      	ldr	r0, [r0, #4]
 8013f06:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	f040 80b2 	bne.w	8014074 <_rclc_take_new_data+0x194>
 8013f10:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f040 80e4 	bne.w	80140e2 <_rclc_take_new_data+0x202>
 8013f1a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d16f      	bne.n	8014002 <_rclc_take_new_data+0x122>
 8013f22:	2500      	movs	r5, #0
 8013f24:	4628      	mov	r0, r5
 8013f26:	b01b      	add	sp, #108	; 0x6c
 8013f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f2a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8013f2c:	6a0b      	ldr	r3, [r1, #32]
 8013f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0f5      	beq.n	8013f22 <_rclc_take_new_data+0x42>
 8013f36:	6882      	ldr	r2, [r0, #8]
 8013f38:	f100 0110 	add.w	r1, r0, #16
 8013f3c:	6840      	ldr	r0, [r0, #4]
 8013f3e:	f7ff fdd7 	bl	8013af0 <rcl_take_request>
 8013f42:	4605      	mov	r5, r0
 8013f44:	2800      	cmp	r0, #0
 8013f46:	d0ec      	beq.n	8013f22 <_rclc_take_new_data+0x42>
 8013f48:	f240 2359 	movw	r3, #601	; 0x259
 8013f4c:	4298      	cmp	r0, r3
 8013f4e:	d013      	beq.n	8013f78 <_rclc_take_new_data+0x98>
 8013f50:	e029      	b.n	8013fa6 <_rclc_take_new_data+0xc6>
 8013f52:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8013f54:	680b      	ldr	r3, [r1, #0]
 8013f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d0e1      	beq.n	8013f22 <_rclc_take_new_data+0x42>
 8013f5e:	2300      	movs	r3, #0
 8013f60:	aa0a      	add	r2, sp, #40	; 0x28
 8013f62:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8013f66:	f7ff ff07 	bl	8013d78 <rcl_take>
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	d0d9      	beq.n	8013f24 <_rclc_take_new_data+0x44>
 8013f70:	f240 1391 	movw	r3, #401	; 0x191
 8013f74:	4298      	cmp	r0, r3
 8013f76:	d116      	bne.n	8013fa6 <_rclc_take_new_data+0xc6>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8013f7e:	e7d1      	b.n	8013f24 <_rclc_take_new_data+0x44>
 8013f80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8013f82:	698b      	ldr	r3, [r1, #24]
 8013f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d0ca      	beq.n	8013f22 <_rclc_take_new_data+0x42>
 8013f8c:	6882      	ldr	r2, [r0, #8]
 8013f8e:	f100 0110 	add.w	r1, r0, #16
 8013f92:	6840      	ldr	r0, [r0, #4]
 8013f94:	f007 f8c0 	bl	801b118 <rcl_take_response>
 8013f98:	4605      	mov	r5, r0
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d0c1      	beq.n	8013f22 <_rclc_take_new_data+0x42>
 8013f9e:	f240 13f5 	movw	r3, #501	; 0x1f5
 8013fa2:	4298      	cmp	r0, r3
 8013fa4:	d0be      	beq.n	8013f24 <_rclc_take_new_data+0x44>
 8013fa6:	f000 ff63 	bl	8014e70 <rcutils_reset_error>
 8013faa:	e7bb      	b.n	8013f24 <_rclc_take_new_data+0x44>
 8013fac:	6840      	ldr	r0, [r0, #4]
 8013fae:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d17d      	bne.n	80140b2 <_rclc_take_new_data+0x1d2>
 8013fb6:	69c3      	ldr	r3, [r0, #28]
 8013fb8:	b11b      	cbz	r3, 8013fc2 <_rclc_take_new_data+0xe2>
 8013fba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d144      	bne.n	801404c <_rclc_take_new_data+0x16c>
 8013fc2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	f040 80ac 	bne.w	8014124 <_rclc_take_new_data+0x244>
 8013fcc:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d0a6      	beq.n	8013f22 <_rclc_take_new_data+0x42>
 8013fd4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8013fd6:	a90a      	add	r1, sp, #40	; 0x28
 8013fd8:	3010      	adds	r0, #16
 8013fda:	f008 fd8d 	bl	801caf8 <rcl_action_take_result_response>
 8013fde:	4605      	mov	r5, r0
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	d1e0      	bne.n	8013fa6 <_rclc_take_new_data+0xc6>
 8013fe4:	6860      	ldr	r0, [r4, #4]
 8013fe6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013fea:	f009 f9f5 	bl	801d3d8 <rclc_action_find_handle_by_result_request_sequence_number>
 8013fee:	2800      	cmp	r0, #0
 8013ff0:	d098      	beq.n	8013f24 <_rclc_take_new_data+0x44>
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8013ff8:	e794      	b.n	8013f24 <_rclc_take_new_data+0x44>
 8013ffa:	250b      	movs	r5, #11
 8013ffc:	4628      	mov	r0, r5
 8013ffe:	b01b      	add	sp, #108	; 0x6c
 8014000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014002:	ae04      	add	r6, sp, #16
 8014004:	3010      	adds	r0, #16
 8014006:	aa0a      	add	r2, sp, #40	; 0x28
 8014008:	4631      	mov	r1, r6
 801400a:	f008 ffe9 	bl	801cfe0 <rcl_action_take_cancel_request>
 801400e:	4605      	mov	r5, r0
 8014010:	2800      	cmp	r0, #0
 8014012:	d1c8      	bne.n	8013fa6 <_rclc_take_new_data+0xc6>
 8014014:	a90a      	add	r1, sp, #40	; 0x28
 8014016:	6860      	ldr	r0, [r4, #4]
 8014018:	f009 f99e 	bl	801d358 <rclc_action_find_goal_handle_by_uuid>
 801401c:	4607      	mov	r7, r0
 801401e:	2800      	cmp	r0, #0
 8014020:	f000 80bb 	beq.w	801419a <_rclc_take_new_data+0x2ba>
 8014024:	2101      	movs	r1, #1
 8014026:	f990 0008 	ldrsb.w	r0, [r0, #8]
 801402a:	f009 f91f 	bl	801d26c <rcl_action_transition_goal_state>
 801402e:	2803      	cmp	r0, #3
 8014030:	4684      	mov	ip, r0
 8014032:	f040 80a7 	bne.w	8014184 <_rclc_take_new_data+0x2a4>
 8014036:	f107 0458 	add.w	r4, r7, #88	; 0x58
 801403a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801403c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801403e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014042:	e884 0003 	stmia.w	r4, {r0, r1}
 8014046:	f887 c008 	strb.w	ip, [r7, #8]
 801404a:	e76b      	b.n	8013f24 <_rclc_take_new_data+0x44>
 801404c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801404e:	3010      	adds	r0, #16
 8014050:	f008 fdd2 	bl	801cbf8 <rcl_action_take_feedback>
 8014054:	4605      	mov	r5, r0
 8014056:	2800      	cmp	r0, #0
 8014058:	d1a5      	bne.n	8013fa6 <_rclc_take_new_data+0xc6>
 801405a:	6860      	ldr	r0, [r4, #4]
 801405c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801405e:	f009 f97b 	bl	801d358 <rclc_action_find_goal_handle_by_uuid>
 8014062:	4603      	mov	r3, r0
 8014064:	2800      	cmp	r0, #0
 8014066:	f000 80a3 	beq.w	80141b0 <_rclc_take_new_data+0x2d0>
 801406a:	2201      	movs	r2, #1
 801406c:	6860      	ldr	r0, [r4, #4]
 801406e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8014072:	e7a6      	b.n	8013fc2 <_rclc_take_new_data+0xe2>
 8014074:	f009 f94a 	bl	801d30c <rclc_action_take_goal_handle>
 8014078:	4606      	mov	r6, r0
 801407a:	6860      	ldr	r0, [r4, #4]
 801407c:	2e00      	cmp	r6, #0
 801407e:	f43f af47 	beq.w	8013f10 <_rclc_take_new_data+0x30>
 8014082:	6070      	str	r0, [r6, #4]
 8014084:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8014088:	69f2      	ldr	r2, [r6, #28]
 801408a:	3010      	adds	r0, #16
 801408c:	f008 fef2 	bl	801ce74 <rcl_action_take_goal_request>
 8014090:	4605      	mov	r5, r0
 8014092:	2800      	cmp	r0, #0
 8014094:	f040 808e 	bne.w	80141b4 <_rclc_take_new_data+0x2d4>
 8014098:	69f7      	ldr	r7, [r6, #28]
 801409a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801409c:	7235      	strb	r5, [r6, #8]
 801409e:	f8c6 0009 	str.w	r0, [r6, #9]
 80140a2:	f8c6 100d 	str.w	r1, [r6, #13]
 80140a6:	6860      	ldr	r0, [r4, #4]
 80140a8:	f8c6 2011 	str.w	r2, [r6, #17]
 80140ac:	f8c6 3015 	str.w	r3, [r6, #21]
 80140b0:	e72e      	b.n	8013f10 <_rclc_take_new_data+0x30>
 80140b2:	aa04      	add	r2, sp, #16
 80140b4:	a90a      	add	r1, sp, #40	; 0x28
 80140b6:	3010      	adds	r0, #16
 80140b8:	f008 fca6 	bl	801ca08 <rcl_action_take_goal_response>
 80140bc:	4605      	mov	r5, r0
 80140be:	2800      	cmp	r0, #0
 80140c0:	f47f af71 	bne.w	8013fa6 <_rclc_take_new_data+0xc6>
 80140c4:	6860      	ldr	r0, [r4, #4]
 80140c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80140ca:	f009 f973 	bl	801d3b4 <rclc_action_find_handle_by_goal_request_sequence_number>
 80140ce:	b130      	cbz	r0, 80140de <_rclc_take_new_data+0x1fe>
 80140d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80140d4:	2201      	movs	r2, #1
 80140d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80140da:	f880 2020 	strb.w	r2, [r0, #32]
 80140de:	6860      	ldr	r0, [r4, #4]
 80140e0:	e769      	b.n	8013fb6 <_rclc_take_new_data+0xd6>
 80140e2:	3010      	adds	r0, #16
 80140e4:	aa04      	add	r2, sp, #16
 80140e6:	a90a      	add	r1, sp, #40	; 0x28
 80140e8:	f008 ff3a 	bl	801cf60 <rcl_action_take_result_request>
 80140ec:	4605      	mov	r5, r0
 80140ee:	2800      	cmp	r0, #0
 80140f0:	f47f af59 	bne.w	8013fa6 <_rclc_take_new_data+0xc6>
 80140f4:	a904      	add	r1, sp, #16
 80140f6:	6860      	ldr	r0, [r4, #4]
 80140f8:	f009 f92e 	bl	801d358 <rclc_action_find_goal_handle_by_uuid>
 80140fc:	4607      	mov	r7, r0
 80140fe:	b160      	cbz	r0, 801411a <_rclc_take_new_data+0x23a>
 8014100:	ad0a      	add	r5, sp, #40	; 0x28
 8014102:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8014106:	f04f 0c02 	mov.w	ip, #2
 801410a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801410c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801410e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014112:	e886 0003 	stmia.w	r6, {r0, r1}
 8014116:	f887 c008 	strb.w	ip, [r7, #8]
 801411a:	6860      	ldr	r0, [r4, #4]
 801411c:	2300      	movs	r3, #0
 801411e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8014122:	e6fa      	b.n	8013f1a <_rclc_take_new_data+0x3a>
 8014124:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014128:	a90a      	add	r1, sp, #40	; 0x28
 801412a:	3010      	adds	r0, #16
 801412c:	f008 fd24 	bl	801cb78 <rcl_action_take_cancel_response>
 8014130:	4605      	mov	r5, r0
 8014132:	2800      	cmp	r0, #0
 8014134:	f47f af37 	bne.w	8013fa6 <_rclc_take_new_data+0xc6>
 8014138:	6860      	ldr	r0, [r4, #4]
 801413a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801413e:	f009 f95d 	bl	801d3fc <rclc_action_find_handle_by_cancel_request_sequence_number>
 8014142:	4606      	mov	r6, r0
 8014144:	6860      	ldr	r0, [r4, #4]
 8014146:	2e00      	cmp	r6, #0
 8014148:	f43f af40 	beq.w	8013fcc <_rclc_take_new_data+0xec>
 801414c:	2701      	movs	r7, #1
 801414e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014150:	84b7      	strh	r7, [r6, #36]	; 0x24
 8014152:	2b00      	cmp	r3, #0
 8014154:	f43f af3a 	beq.w	8013fcc <_rclc_take_new_data+0xec>
 8014158:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801415a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801415e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8014162:	f009 f8f9 	bl	801d358 <rclc_action_find_goal_handle_by_uuid>
 8014166:	b138      	cbz	r0, 8014178 <_rclc_take_new_data+0x298>
 8014168:	6860      	ldr	r0, [r4, #4]
 801416a:	3501      	adds	r5, #1
 801416c:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8014170:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014172:	42ab      	cmp	r3, r5
 8014174:	d8f0      	bhi.n	8014158 <_rclc_take_new_data+0x278>
 8014176:	e729      	b.n	8013fcc <_rclc_take_new_data+0xec>
 8014178:	6860      	ldr	r0, [r4, #4]
 801417a:	3501      	adds	r5, #1
 801417c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801417e:	42ab      	cmp	r3, r5
 8014180:	d8ea      	bhi.n	8014158 <_rclc_take_new_data+0x278>
 8014182:	e723      	b.n	8013fcc <_rclc_take_new_data+0xec>
 8014184:	ab06      	add	r3, sp, #24
 8014186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014188:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801418c:	2103      	movs	r1, #3
 801418e:	6860      	ldr	r0, [r4, #4]
 8014190:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014194:	f009 f9a8 	bl	801d4e8 <rclc_action_server_goal_cancel_reject>
 8014198:	e6c4      	b.n	8013f24 <_rclc_take_new_data+0x44>
 801419a:	ab06      	add	r3, sp, #24
 801419c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801419e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80141a2:	2102      	movs	r1, #2
 80141a4:	6860      	ldr	r0, [r4, #4]
 80141a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80141aa:	f009 f99d 	bl	801d4e8 <rclc_action_server_goal_cancel_reject>
 80141ae:	e6b9      	b.n	8013f24 <_rclc_take_new_data+0x44>
 80141b0:	6860      	ldr	r0, [r4, #4]
 80141b2:	e706      	b.n	8013fc2 <_rclc_take_new_data+0xe2>
 80141b4:	4631      	mov	r1, r6
 80141b6:	6860      	ldr	r0, [r4, #4]
 80141b8:	f009 f8b8 	bl	801d32c <rclc_action_remove_used_goal_handle>
 80141bc:	f000 fe58 	bl	8014e70 <rcutils_reset_error>
 80141c0:	e6b0      	b.n	8013f24 <_rclc_take_new_data+0x44>
 80141c2:	2501      	movs	r5, #1
 80141c4:	e6ae      	b.n	8013f24 <_rclc_take_new_data+0x44>
 80141c6:	bf00      	nop

080141c8 <_rclc_execute.part.0>:
 80141c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ca:	7803      	ldrb	r3, [r0, #0]
 80141cc:	b085      	sub	sp, #20
 80141ce:	4604      	mov	r4, r0
 80141d0:	2b0a      	cmp	r3, #10
 80141d2:	f200 8139 	bhi.w	8014448 <_rclc_execute.part.0+0x280>
 80141d6:	e8df f003 	tbb	[pc, r3]
 80141da:	4268      	.short	0x4268
 80141dc:	06a75b4d 	.word	0x06a75b4d
 80141e0:	721d0606 	.word	0x721d0606
 80141e4:	62          	.byte	0x62
 80141e5:	00          	.byte	0x00
 80141e6:	2b06      	cmp	r3, #6
 80141e8:	f000 8126 	beq.w	8014438 <_rclc_execute.part.0+0x270>
 80141ec:	2b07      	cmp	r3, #7
 80141ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80141f0:	f040 811c 	bne.w	801442c <_rclc_execute.part.0+0x264>
 80141f4:	f104 0510 	add.w	r5, r4, #16
 80141f8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 80141fc:	6880      	ldr	r0, [r0, #8]
 80141fe:	4798      	blx	r3
 8014200:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8014202:	4629      	mov	r1, r5
 8014204:	6860      	ldr	r0, [r4, #4]
 8014206:	f7ff fcb3 	bl	8013b70 <rcl_send_response>
 801420a:	4604      	mov	r4, r0
 801420c:	b378      	cbz	r0, 801426e <_rclc_execute.part.0+0xa6>
 801420e:	f000 fe2f 	bl	8014e70 <rcutils_reset_error>
 8014212:	e02c      	b.n	801426e <_rclc_execute.part.0+0xa6>
 8014214:	6840      	ldr	r0, [r0, #4]
 8014216:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 801421a:	2b00      	cmp	r3, #0
 801421c:	f000 808e 	beq.w	801433c <_rclc_execute.part.0+0x174>
 8014220:	2600      	movs	r6, #0
 8014222:	2701      	movs	r7, #1
 8014224:	e004      	b.n	8014230 <_rclc_execute.part.0+0x68>
 8014226:	f009 f84b 	bl	801d2c0 <rclc_action_send_result_request>
 801422a:	b998      	cbnz	r0, 8014254 <_rclc_execute.part.0+0x8c>
 801422c:	722f      	strb	r7, [r5, #8]
 801422e:	6860      	ldr	r0, [r4, #4]
 8014230:	f009 f8f6 	bl	801d420 <rclc_action_find_first_handle_with_goal_response>
 8014234:	4605      	mov	r5, r0
 8014236:	2800      	cmp	r0, #0
 8014238:	d07f      	beq.n	801433a <_rclc_execute.part.0+0x172>
 801423a:	6863      	ldr	r3, [r4, #4]
 801423c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801423e:	699b      	ldr	r3, [r3, #24]
 8014240:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 8014244:	f885 6020 	strb.w	r6, [r5, #32]
 8014248:	4798      	blx	r3
 801424a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 801424e:	4628      	mov	r0, r5
 8014250:	2b00      	cmp	r3, #0
 8014252:	d1e8      	bne.n	8014226 <_rclc_execute.part.0+0x5e>
 8014254:	6860      	ldr	r0, [r4, #4]
 8014256:	4629      	mov	r1, r5
 8014258:	f009 f868 	bl	801d32c <rclc_action_remove_used_goal_handle>
 801425c:	e7e7      	b.n	801422e <_rclc_execute.part.0+0x66>
 801425e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8014262:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8014266:	b100      	cbz	r0, 801426a <_rclc_execute.part.0+0xa2>
 8014268:	68a0      	ldr	r0, [r4, #8]
 801426a:	2400      	movs	r4, #0
 801426c:	4798      	blx	r3
 801426e:	4620      	mov	r0, r4
 8014270:	b005      	add	sp, #20
 8014272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014274:	6840      	ldr	r0, [r0, #4]
 8014276:	f007 fc7d 	bl	801bb74 <rcl_timer_call>
 801427a:	f240 3321 	movw	r3, #801	; 0x321
 801427e:	4604      	mov	r4, r0
 8014280:	4298      	cmp	r0, r3
 8014282:	d001      	beq.n	8014288 <_rclc_execute.part.0+0xc0>
 8014284:	2800      	cmp	r0, #0
 8014286:	d1c2      	bne.n	801420e <_rclc_execute.part.0+0x46>
 8014288:	2400      	movs	r4, #0
 801428a:	4620      	mov	r0, r4
 801428c:	b005      	add	sp, #20
 801428e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014290:	2400      	movs	r4, #0
 8014292:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014294:	6880      	ldr	r0, [r0, #8]
 8014296:	4798      	blx	r3
 8014298:	4620      	mov	r0, r4
 801429a:	b005      	add	sp, #20
 801429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801429e:	2400      	movs	r4, #0
 80142a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80142a2:	4798      	blx	r3
 80142a4:	4620      	mov	r0, r4
 80142a6:	b005      	add	sp, #20
 80142a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142aa:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80142ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80142b0:	b100      	cbz	r0, 80142b4 <_rclc_execute.part.0+0xec>
 80142b2:	68a0      	ldr	r0, [r4, #8]
 80142b4:	2400      	movs	r4, #0
 80142b6:	4798      	blx	r3
 80142b8:	4620      	mov	r0, r4
 80142ba:	b005      	add	sp, #20
 80142bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142be:	6840      	ldr	r0, [r0, #4]
 80142c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80142c4:	bb3b      	cbnz	r3, 8014316 <_rclc_execute.part.0+0x14e>
 80142c6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d07d      	beq.n	80143ca <_rclc_execute.part.0+0x202>
 80142ce:	f640 0634 	movw	r6, #2100	; 0x834
 80142d2:	2701      	movs	r7, #1
 80142d4:	e007      	b.n	80142e6 <_rclc_execute.part.0+0x11e>
 80142d6:	4628      	mov	r0, r5
 80142d8:	f009 f8ba 	bl	801d450 <rclc_action_server_response_goal_request>
 80142dc:	4629      	mov	r1, r5
 80142de:	6860      	ldr	r0, [r4, #4]
 80142e0:	f009 f824 	bl	801d32c <rclc_action_remove_used_goal_handle>
 80142e4:	6860      	ldr	r0, [r4, #4]
 80142e6:	2100      	movs	r1, #0
 80142e8:	f009 f84c 	bl	801d384 <rclc_action_find_first_handle_by_status>
 80142ec:	4605      	mov	r5, r0
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d068      	beq.n	80143c4 <_rclc_execute.part.0+0x1fc>
 80142f2:	6863      	ldr	r3, [r4, #4]
 80142f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80142f6:	699b      	ldr	r3, [r3, #24]
 80142f8:	4798      	blx	r3
 80142fa:	42b0      	cmp	r0, r6
 80142fc:	f04f 0100 	mov.w	r1, #0
 8014300:	d1e9      	bne.n	80142d6 <_rclc_execute.part.0+0x10e>
 8014302:	2101      	movs	r1, #1
 8014304:	4628      	mov	r0, r5
 8014306:	f009 f8a3 	bl	801d450 <rclc_action_server_response_goal_request>
 801430a:	722f      	strb	r7, [r5, #8]
 801430c:	e7ea      	b.n	80142e4 <_rclc_execute.part.0+0x11c>
 801430e:	6848      	ldr	r0, [r1, #4]
 8014310:	f009 f80c 	bl	801d32c <rclc_action_remove_used_goal_handle>
 8014314:	6860      	ldr	r0, [r4, #4]
 8014316:	f009 f841 	bl	801d39c <rclc_action_find_first_terminated_handle>
 801431a:	4601      	mov	r1, r0
 801431c:	2800      	cmp	r0, #0
 801431e:	d1f6      	bne.n	801430e <_rclc_execute.part.0+0x146>
 8014320:	6860      	ldr	r0, [r4, #4]
 8014322:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8014326:	e7ce      	b.n	80142c6 <_rclc_execute.part.0+0xfe>
 8014328:	2400      	movs	r4, #0
 801432a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801432c:	f100 0110 	add.w	r1, r0, #16
 8014330:	6880      	ldr	r0, [r0, #8]
 8014332:	4798      	blx	r3
 8014334:	4620      	mov	r0, r4
 8014336:	b005      	add	sp, #20
 8014338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801433a:	6860      	ldr	r0, [r4, #4]
 801433c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014340:	b18b      	cbz	r3, 8014366 <_rclc_execute.part.0+0x19e>
 8014342:	68c5      	ldr	r5, [r0, #12]
 8014344:	b32d      	cbz	r5, 8014392 <_rclc_execute.part.0+0x1ca>
 8014346:	2600      	movs	r6, #0
 8014348:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 801434c:	b143      	cbz	r3, 8014360 <_rclc_execute.part.0+0x198>
 801434e:	69c3      	ldr	r3, [r0, #28]
 8014350:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 8014354:	b123      	cbz	r3, 8014360 <_rclc_execute.part.0+0x198>
 8014356:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014358:	4628      	mov	r0, r5
 801435a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801435c:	4798      	blx	r3
 801435e:	6860      	ldr	r0, [r4, #4]
 8014360:	682d      	ldr	r5, [r5, #0]
 8014362:	2d00      	cmp	r5, #0
 8014364:	d1f0      	bne.n	8014348 <_rclc_execute.part.0+0x180>
 8014366:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801436a:	b193      	cbz	r3, 8014392 <_rclc_execute.part.0+0x1ca>
 801436c:	68c5      	ldr	r5, [r0, #12]
 801436e:	b185      	cbz	r5, 8014392 <_rclc_execute.part.0+0x1ca>
 8014370:	2600      	movs	r6, #0
 8014372:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8014376:	b14b      	cbz	r3, 801438c <_rclc_execute.part.0+0x1c4>
 8014378:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801437a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 801437e:	b12b      	cbz	r3, 801438c <_rclc_execute.part.0+0x1c4>
 8014380:	4628      	mov	r0, r5
 8014382:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8014386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014388:	4798      	blx	r3
 801438a:	6860      	ldr	r0, [r4, #4]
 801438c:	682d      	ldr	r5, [r5, #0]
 801438e:	2d00      	cmp	r5, #0
 8014390:	d1ef      	bne.n	8014372 <_rclc_execute.part.0+0x1aa>
 8014392:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8014396:	2b00      	cmp	r3, #0
 8014398:	f43f af76 	beq.w	8014288 <_rclc_execute.part.0+0xc0>
 801439c:	2700      	movs	r7, #0
 801439e:	e00b      	b.n	80143b8 <_rclc_execute.part.0+0x1f0>
 80143a0:	6863      	ldr	r3, [r4, #4]
 80143a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80143a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80143a6:	6a1e      	ldr	r6, [r3, #32]
 80143a8:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 80143ac:	47b0      	blx	r6
 80143ae:	6860      	ldr	r0, [r4, #4]
 80143b0:	4629      	mov	r1, r5
 80143b2:	f008 ffbb 	bl	801d32c <rclc_action_remove_used_goal_handle>
 80143b6:	6860      	ldr	r0, [r4, #4]
 80143b8:	f009 f83e 	bl	801d438 <rclc_action_find_first_handle_with_result_response>
 80143bc:	4605      	mov	r5, r0
 80143be:	2800      	cmp	r0, #0
 80143c0:	d1ee      	bne.n	80143a0 <_rclc_execute.part.0+0x1d8>
 80143c2:	e761      	b.n	8014288 <_rclc_execute.part.0+0xc0>
 80143c4:	6860      	ldr	r0, [r4, #4]
 80143c6:	f880 5020 	strb.w	r5, [r0, #32]
 80143ca:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	f43f af5a 	beq.w	8014288 <_rclc_execute.part.0+0xc0>
 80143d4:	68c5      	ldr	r5, [r0, #12]
 80143d6:	b1b5      	cbz	r5, 8014406 <_rclc_execute.part.0+0x23e>
 80143d8:	2602      	movs	r6, #2
 80143da:	e001      	b.n	80143e0 <_rclc_execute.part.0+0x218>
 80143dc:	682d      	ldr	r5, [r5, #0]
 80143de:	b195      	cbz	r5, 8014406 <_rclc_execute.part.0+0x23e>
 80143e0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80143e4:	2b03      	cmp	r3, #3
 80143e6:	d1f9      	bne.n	80143dc <_rclc_execute.part.0+0x214>
 80143e8:	69c3      	ldr	r3, [r0, #28]
 80143ea:	4628      	mov	r0, r5
 80143ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80143ee:	4798      	blx	r3
 80143f0:	4603      	mov	r3, r0
 80143f2:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80143f6:	4628      	mov	r0, r5
 80143f8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80143fc:	b143      	cbz	r3, 8014410 <_rclc_execute.part.0+0x248>
 80143fe:	f009 f847 	bl	801d490 <rclc_action_server_goal_cancel_accept>
 8014402:	6860      	ldr	r0, [r4, #4]
 8014404:	e7ea      	b.n	80143dc <_rclc_execute.part.0+0x214>
 8014406:	2300      	movs	r3, #0
 8014408:	461c      	mov	r4, r3
 801440a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 801440e:	e72e      	b.n	801426e <_rclc_execute.part.0+0xa6>
 8014410:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014412:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8014416:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801441a:	2101      	movs	r1, #1
 801441c:	6860      	ldr	r0, [r4, #4]
 801441e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014422:	f009 f861 	bl	801d4e8 <rclc_action_server_goal_cancel_reject>
 8014426:	722e      	strb	r6, [r5, #8]
 8014428:	6860      	ldr	r0, [r4, #4]
 801442a:	e7d7      	b.n	80143dc <_rclc_execute.part.0+0x214>
 801442c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801442e:	f104 0510 	add.w	r5, r4, #16
 8014432:	6880      	ldr	r0, [r0, #8]
 8014434:	4798      	blx	r3
 8014436:	e6e3      	b.n	8014200 <_rclc_execute.part.0+0x38>
 8014438:	f100 0510 	add.w	r5, r0, #16
 801443c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801443e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014440:	4629      	mov	r1, r5
 8014442:	6880      	ldr	r0, [r0, #8]
 8014444:	4798      	blx	r3
 8014446:	e6db      	b.n	8014200 <_rclc_execute.part.0+0x38>
 8014448:	2401      	movs	r4, #1
 801444a:	e710      	b.n	801426e <_rclc_execute.part.0+0xa6>

0801444c <rclc_executor_trigger_any>:
 801444c:	2800      	cmp	r0, #0
 801444e:	d03d      	beq.n	80144cc <rclc_executor_trigger_any+0x80>
 8014450:	2900      	cmp	r1, #0
 8014452:	d03c      	beq.n	80144ce <rclc_executor_trigger_any+0x82>
 8014454:	4603      	mov	r3, r0
 8014456:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 801445a:	2200      	movs	r2, #0
 801445c:	2800      	cmp	r0, #0
 801445e:	d035      	beq.n	80144cc <rclc_executor_trigger_any+0x80>
 8014460:	b430      	push	{r4, r5}
 8014462:	f893 c000 	ldrb.w	ip, [r3]
 8014466:	f1bc 0f08 	cmp.w	ip, #8
 801446a:	d11d      	bne.n	80144a8 <rclc_executor_trigger_any+0x5c>
 801446c:	685c      	ldr	r4, [r3, #4]
 801446e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8014470:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8014474:	d105      	bne.n	8014482 <rclc_executor_trigger_any+0x36>
 8014476:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801447a:	b910      	cbnz	r0, 8014482 <rclc_executor_trigger_any+0x36>
 801447c:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8014480:	b128      	cbz	r0, 801448e <rclc_executor_trigger_any+0x42>
 8014482:	bc30      	pop	{r4, r5}
 8014484:	4770      	bx	lr
 8014486:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 801448a:	2800      	cmp	r0, #0
 801448c:	d1f9      	bne.n	8014482 <rclc_executor_trigger_any+0x36>
 801448e:	3201      	adds	r2, #1
 8014490:	3340      	adds	r3, #64	; 0x40
 8014492:	4291      	cmp	r1, r2
 8014494:	d017      	beq.n	80144c6 <rclc_executor_trigger_any+0x7a>
 8014496:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 801449a:	2800      	cmp	r0, #0
 801449c:	d0f1      	beq.n	8014482 <rclc_executor_trigger_any+0x36>
 801449e:	f893 c000 	ldrb.w	ip, [r3]
 80144a2:	f1bc 0f08 	cmp.w	ip, #8
 80144a6:	d0e1      	beq.n	801446c <rclc_executor_trigger_any+0x20>
 80144a8:	f1bc 0f09 	cmp.w	ip, #9
 80144ac:	d1eb      	bne.n	8014486 <rclc_executor_trigger_any+0x3a>
 80144ae:	685c      	ldr	r4, [r3, #4]
 80144b0:	6a25      	ldr	r5, [r4, #32]
 80144b2:	2d00      	cmp	r5, #0
 80144b4:	d1e5      	bne.n	8014482 <rclc_executor_trigger_any+0x36>
 80144b6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d1e1      	bne.n	8014482 <rclc_executor_trigger_any+0x36>
 80144be:	3201      	adds	r2, #1
 80144c0:	3340      	adds	r3, #64	; 0x40
 80144c2:	4291      	cmp	r1, r2
 80144c4:	d1e7      	bne.n	8014496 <rclc_executor_trigger_any+0x4a>
 80144c6:	2000      	movs	r0, #0
 80144c8:	bc30      	pop	{r4, r5}
 80144ca:	4770      	bx	lr
 80144cc:	4770      	bx	lr
 80144ce:	4608      	mov	r0, r1
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop

080144d4 <rclc_executor_get_zero_initialized_executor>:
 80144d4:	b510      	push	{r4, lr}
 80144d6:	4604      	mov	r4, r0
 80144d8:	2288      	movs	r2, #136	; 0x88
 80144da:	4902      	ldr	r1, [pc, #8]	; (80144e4 <rclc_executor_get_zero_initialized_executor+0x10>)
 80144dc:	f00c fbeb 	bl	8020cb6 <memcpy>
 80144e0:	4620      	mov	r0, r4
 80144e2:	bd10      	pop	{r4, pc}
 80144e4:	08024cd8 	.word	0x08024cd8

080144e8 <rclc_executor_init>:
 80144e8:	2900      	cmp	r1, #0
 80144ea:	d06a      	beq.n	80145c2 <rclc_executor_init+0xda>
 80144ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144f0:	4605      	mov	r5, r0
 80144f2:	b0b0      	sub	sp, #192	; 0xc0
 80144f4:	2800      	cmp	r0, #0
 80144f6:	d05c      	beq.n	80145b2 <rclc_executor_init+0xca>
 80144f8:	4616      	mov	r6, r2
 80144fa:	4618      	mov	r0, r3
 80144fc:	4688      	mov	r8, r1
 80144fe:	461f      	mov	r7, r3
 8014500:	f000 fc78 	bl	8014df4 <rcutils_allocator_is_valid>
 8014504:	2e00      	cmp	r6, #0
 8014506:	d054      	beq.n	80145b2 <rclc_executor_init+0xca>
 8014508:	f080 0401 	eor.w	r4, r0, #1
 801450c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8014510:	d14f      	bne.n	80145b2 <rclc_executor_init+0xca>
 8014512:	2288      	movs	r2, #136	; 0x88
 8014514:	4930      	ldr	r1, [pc, #192]	; (80145d8 <rclc_executor_init+0xf0>)
 8014516:	a80e      	add	r0, sp, #56	; 0x38
 8014518:	f00c fbcd 	bl	8020cb6 <memcpy>
 801451c:	a90e      	add	r1, sp, #56	; 0x38
 801451e:	2288      	movs	r2, #136	; 0x88
 8014520:	4628      	mov	r0, r5
 8014522:	f00c fbc8 	bl	8020cb6 <memcpy>
 8014526:	4668      	mov	r0, sp
 8014528:	f8c5 8000 	str.w	r8, [r5]
 801452c:	60ae      	str	r6, [r5, #8]
 801452e:	f007 fc97 	bl	801be60 <rcl_get_zero_initialized_wait_set>
 8014532:	46ec      	mov	ip, sp
 8014534:	f105 0e14 	add.w	lr, r5, #20
 8014538:	f8d7 8000 	ldr.w	r8, [r7]
 801453c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014540:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014544:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014548:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801454c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014550:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80145d0 <rclc_executor_init+0xe8>
 8014554:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014558:	f8dc 3000 	ldr.w	r3, [ip]
 801455c:	01b0      	lsls	r0, r6, #6
 801455e:	6939      	ldr	r1, [r7, #16]
 8014560:	f8ce 3000 	str.w	r3, [lr]
 8014564:	612f      	str	r7, [r5, #16]
 8014566:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 801456a:	47c0      	blx	r8
 801456c:	6068      	str	r0, [r5, #4]
 801456e:	b908      	cbnz	r0, 8014574 <rclc_executor_init+0x8c>
 8014570:	e029      	b.n	80145c6 <rclc_executor_init+0xde>
 8014572:	6868      	ldr	r0, [r5, #4]
 8014574:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014578:	3401      	adds	r4, #1
 801457a:	4631      	mov	r1, r6
 801457c:	f000 fac0 	bl	8014b00 <rclc_executor_handle_init>
 8014580:	42a6      	cmp	r6, r4
 8014582:	d8f6      	bhi.n	8014572 <rclc_executor_init+0x8a>
 8014584:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014588:	f000 faae 	bl	8014ae8 <rclc_executor_handle_counters_zero_init>
 801458c:	4a13      	ldr	r2, [pc, #76]	; (80145dc <rclc_executor_init+0xf4>)
 801458e:	2300      	movs	r3, #0
 8014590:	6868      	ldr	r0, [r5, #4]
 8014592:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8014596:	b168      	cbz	r0, 80145b4 <rclc_executor_init+0xcc>
 8014598:	68ab      	ldr	r3, [r5, #8]
 801459a:	b173      	cbz	r3, 80145ba <rclc_executor_init+0xd2>
 801459c:	692a      	ldr	r2, [r5, #16]
 801459e:	fab2 f382 	clz	r3, r2
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	b14a      	cbz	r2, 80145ba <rclc_executor_init+0xd2>
 80145a6:	4618      	mov	r0, r3
 80145a8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 80145ac:	b030      	add	sp, #192	; 0xc0
 80145ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b2:	200b      	movs	r0, #11
 80145b4:	b030      	add	sp, #192	; 0xc0
 80145b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ba:	2000      	movs	r0, #0
 80145bc:	b030      	add	sp, #192	; 0xc0
 80145be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145c2:	200b      	movs	r0, #11
 80145c4:	4770      	bx	lr
 80145c6:	200a      	movs	r0, #10
 80145c8:	e7f4      	b.n	80145b4 <rclc_executor_init+0xcc>
 80145ca:	bf00      	nop
 80145cc:	f3af 8000 	nop.w
 80145d0:	3b9aca00 	.word	0x3b9aca00
 80145d4:	00000000 	.word	0x00000000
 80145d8:	08024cd8 	.word	0x08024cd8
 80145dc:	0801444d 	.word	0x0801444d

080145e0 <rclc_executor_add_subscription>:
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	bf18      	it	ne
 80145e4:	2a00      	cmpne	r2, #0
 80145e6:	b570      	push	{r4, r5, r6, lr}
 80145e8:	4604      	mov	r4, r0
 80145ea:	bf0c      	ite	eq
 80145ec:	2001      	moveq	r0, #1
 80145ee:	2000      	movne	r0, #0
 80145f0:	f89d c010 	ldrb.w	ip, [sp, #16]
 80145f4:	2900      	cmp	r1, #0
 80145f6:	bf08      	it	eq
 80145f8:	f040 0001 	orreq.w	r0, r0, #1
 80145fc:	bb28      	cbnz	r0, 801464a <rclc_executor_add_subscription+0x6a>
 80145fe:	fab4 f584 	clz	r5, r4
 8014602:	096d      	lsrs	r5, r5, #5
 8014604:	b30c      	cbz	r4, 801464a <rclc_executor_add_subscription+0x6a>
 8014606:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 801460a:	4286      	cmp	r6, r0
 801460c:	d301      	bcc.n	8014612 <rclc_executor_add_subscription+0x32>
 801460e:	2001      	movs	r0, #1
 8014610:	bd70      	pop	{r4, r5, r6, pc}
 8014612:	6860      	ldr	r0, [r4, #4]
 8014614:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014618:	f800 500e 	strb.w	r5, [r0, lr]
 801461c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014620:	3601      	adds	r6, #1
 8014622:	6303      	str	r3, [r0, #48]	; 0x30
 8014624:	2301      	movs	r3, #1
 8014626:	62c5      	str	r5, [r0, #44]	; 0x2c
 8014628:	f104 0514 	add.w	r5, r4, #20
 801462c:	f880 c001 	strb.w	ip, [r0, #1]
 8014630:	8703      	strh	r3, [r0, #56]	; 0x38
 8014632:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014636:	4628      	mov	r0, r5
 8014638:	60e6      	str	r6, [r4, #12]
 801463a:	f007 fc25 	bl	801be88 <rcl_wait_set_is_valid>
 801463e:	b930      	cbnz	r0, 801464e <rclc_executor_add_subscription+0x6e>
 8014640:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014642:	2000      	movs	r0, #0
 8014644:	3301      	adds	r3, #1
 8014646:	64a3      	str	r3, [r4, #72]	; 0x48
 8014648:	bd70      	pop	{r4, r5, r6, pc}
 801464a:	200b      	movs	r0, #11
 801464c:	bd70      	pop	{r4, r5, r6, pc}
 801464e:	4628      	mov	r0, r5
 8014650:	f007 fc20 	bl	801be94 <rcl_wait_set_fini>
 8014654:	2800      	cmp	r0, #0
 8014656:	d0f3      	beq.n	8014640 <rclc_executor_add_subscription+0x60>
 8014658:	bd70      	pop	{r4, r5, r6, pc}
 801465a:	bf00      	nop

0801465c <rclc_executor_add_service>:
 801465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801465e:	9d06      	ldr	r5, [sp, #24]
 8014660:	4604      	mov	r4, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	bf18      	it	ne
 8014666:	2d00      	cmpne	r5, #0
 8014668:	bf0c      	ite	eq
 801466a:	2001      	moveq	r0, #1
 801466c:	2000      	movne	r0, #0
 801466e:	2a00      	cmp	r2, #0
 8014670:	bf08      	it	eq
 8014672:	f040 0001 	orreq.w	r0, r0, #1
 8014676:	2900      	cmp	r1, #0
 8014678:	bf08      	it	eq
 801467a:	f040 0001 	orreq.w	r0, r0, #1
 801467e:	bb40      	cbnz	r0, 80146d2 <rclc_executor_add_service+0x76>
 8014680:	fab4 f684 	clz	r6, r4
 8014684:	0976      	lsrs	r6, r6, #5
 8014686:	b324      	cbz	r4, 80146d2 <rclc_executor_add_service+0x76>
 8014688:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 801468c:	42b8      	cmp	r0, r7
 801468e:	d301      	bcc.n	8014694 <rclc_executor_add_service+0x38>
 8014690:	2001      	movs	r0, #1
 8014692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014694:	6867      	ldr	r7, [r4, #4]
 8014696:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 801469a:	f100 0c01 	add.w	ip, r0, #1
 801469e:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 80146a2:	6283      	str	r3, [r0, #40]	; 0x28
 80146a4:	2305      	movs	r3, #5
 80146a6:	6305      	str	r5, [r0, #48]	; 0x30
 80146a8:	f104 0514 	add.w	r5, r4, #20
 80146ac:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80146b0:	f827 300e 	strh.w	r3, [r7, lr]
 80146b4:	2301      	movs	r3, #1
 80146b6:	62c6      	str	r6, [r0, #44]	; 0x2c
 80146b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80146bc:	4628      	mov	r0, r5
 80146be:	f8c4 c00c 	str.w	ip, [r4, #12]
 80146c2:	f007 fbe1 	bl	801be88 <rcl_wait_set_is_valid>
 80146c6:	b930      	cbnz	r0, 80146d6 <rclc_executor_add_service+0x7a>
 80146c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80146ca:	2000      	movs	r0, #0
 80146cc:	3301      	adds	r3, #1
 80146ce:	6563      	str	r3, [r4, #84]	; 0x54
 80146d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146d2:	200b      	movs	r0, #11
 80146d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146d6:	4628      	mov	r0, r5
 80146d8:	f007 fbdc 	bl	801be94 <rcl_wait_set_fini>
 80146dc:	2800      	cmp	r0, #0
 80146de:	d0f3      	beq.n	80146c8 <rclc_executor_add_service+0x6c>
 80146e0:	e7d7      	b.n	8014692 <rclc_executor_add_service+0x36>
 80146e2:	bf00      	nop

080146e4 <rclc_executor_prepare>:
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d044      	beq.n	8014772 <rclc_executor_prepare+0x8e>
 80146e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ea:	f100 0514 	add.w	r5, r0, #20
 80146ee:	b09b      	sub	sp, #108	; 0x6c
 80146f0:	4604      	mov	r4, r0
 80146f2:	4628      	mov	r0, r5
 80146f4:	f007 fbc8 	bl	801be88 <rcl_wait_set_is_valid>
 80146f8:	b110      	cbz	r0, 8014700 <rclc_executor_prepare+0x1c>
 80146fa:	2000      	movs	r0, #0
 80146fc:	b01b      	add	sp, #108	; 0x6c
 80146fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014700:	4628      	mov	r0, r5
 8014702:	f007 fbc7 	bl	801be94 <rcl_wait_set_fini>
 8014706:	2800      	cmp	r0, #0
 8014708:	d130      	bne.n	801476c <rclc_executor_prepare+0x88>
 801470a:	a80c      	add	r0, sp, #48	; 0x30
 801470c:	ae04      	add	r6, sp, #16
 801470e:	f007 fba7 	bl	801be60 <rcl_get_zero_initialized_wait_set>
 8014712:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014716:	46ae      	mov	lr, r5
 8014718:	6927      	ldr	r7, [r4, #16]
 801471a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801471e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014726:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801472a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801472e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014732:	f8dc 3000 	ldr.w	r3, [ip]
 8014736:	f8ce 3000 	str.w	r3, [lr]
 801473a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801473c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	4628      	mov	r0, r5
 8014742:	6822      	ldr	r2, [r4, #0]
 8014744:	6033      	str	r3, [r6, #0]
 8014746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014748:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801474a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801474e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8014752:	e9cd 2100 	strd	r2, r1, [sp]
 8014756:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8014758:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801475a:	f007 fe9b 	bl	801c494 <rcl_wait_set_init>
 801475e:	2800      	cmp	r0, #0
 8014760:	d0cc      	beq.n	80146fc <rclc_executor_prepare+0x18>
 8014762:	900b      	str	r0, [sp, #44]	; 0x2c
 8014764:	f000 fb84 	bl	8014e70 <rcutils_reset_error>
 8014768:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801476a:	e7c7      	b.n	80146fc <rclc_executor_prepare+0x18>
 801476c:	f000 fb80 	bl	8014e70 <rcutils_reset_error>
 8014770:	e7cb      	b.n	801470a <rclc_executor_prepare+0x26>
 8014772:	200b      	movs	r0, #11
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop

08014778 <rclc_executor_spin_some.part.0>:
 8014778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477c:	4605      	mov	r5, r0
 801477e:	4691      	mov	r9, r2
 8014780:	4698      	mov	r8, r3
 8014782:	f7ff ffaf 	bl	80146e4 <rclc_executor_prepare>
 8014786:	f105 0614 	add.w	r6, r5, #20
 801478a:	4630      	mov	r0, r6
 801478c:	f007 fc4e 	bl	801c02c <rcl_wait_set_clear>
 8014790:	4607      	mov	r7, r0
 8014792:	2800      	cmp	r0, #0
 8014794:	f040 80a8 	bne.w	80148e8 <rclc_executor_spin_some.part.0+0x170>
 8014798:	68ab      	ldr	r3, [r5, #8]
 801479a:	b30b      	cbz	r3, 80147e0 <rclc_executor_spin_some.part.0+0x68>
 801479c:	4604      	mov	r4, r0
 801479e:	6869      	ldr	r1, [r5, #4]
 80147a0:	01a2      	lsls	r2, r4, #6
 80147a2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 80147a6:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 80147aa:	b1cb      	cbz	r3, 80147e0 <rclc_executor_spin_some.part.0+0x68>
 80147ac:	5c8b      	ldrb	r3, [r1, r2]
 80147ae:	2b0a      	cmp	r3, #10
 80147b0:	f200 80de 	bhi.w	8014970 <rclc_executor_spin_some.part.0+0x1f8>
 80147b4:	e8df f003 	tbb	[pc, r3]
 80147b8:	8da99d9d 	.word	0x8da99d9d
 80147bc:	0606068d 	.word	0x0606068d
 80147c0:	c1ce      	.short	0xc1ce
 80147c2:	b5          	.byte	0xb5
 80147c3:	00          	.byte	0x00
 80147c4:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80147c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80147cc:	4630      	mov	r0, r6
 80147ce:	f007 ff7d 	bl	801c6cc <rcl_wait_set_add_service>
 80147d2:	2800      	cmp	r0, #0
 80147d4:	f040 8087 	bne.w	80148e6 <rclc_executor_spin_some.part.0+0x16e>
 80147d8:	3401      	adds	r4, #1
 80147da:	68ab      	ldr	r3, [r5, #8]
 80147dc:	429c      	cmp	r4, r3
 80147de:	d3de      	bcc.n	801479e <rclc_executor_spin_some.part.0+0x26>
 80147e0:	4643      	mov	r3, r8
 80147e2:	464a      	mov	r2, r9
 80147e4:	4630      	mov	r0, r6
 80147e6:	f007 ff9f 	bl	801c728 <rcl_wait>
 80147ea:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	f000 80c6 	beq.w	8014980 <rclc_executor_spin_some.part.0+0x208>
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	f040 80bb 	bne.w	8014970 <rclc_executor_spin_some.part.0+0x1f8>
 80147fa:	68ab      	ldr	r3, [r5, #8]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	f000 8159 	beq.w	8014ab4 <rclc_executor_spin_some.part.0+0x33c>
 8014802:	2400      	movs	r4, #0
 8014804:	f240 1991 	movw	r9, #401	; 0x191
 8014808:	46a0      	mov	r8, r4
 801480a:	e00a      	b.n	8014822 <rclc_executor_spin_some.part.0+0xaa>
 801480c:	f7ff fb1a 	bl	8013e44 <_rclc_check_for_new_data>
 8014810:	4604      	mov	r4, r0
 8014812:	b110      	cbz	r0, 801481a <rclc_executor_spin_some.part.0+0xa2>
 8014814:	4548      	cmp	r0, r9
 8014816:	f040 80b1 	bne.w	801497c <rclc_executor_spin_some.part.0+0x204>
 801481a:	68ab      	ldr	r3, [r5, #8]
 801481c:	4598      	cmp	r8, r3
 801481e:	f080 8126 	bcs.w	8014a6e <rclc_executor_spin_some.part.0+0x2f6>
 8014822:	686a      	ldr	r2, [r5, #4]
 8014824:	4631      	mov	r1, r6
 8014826:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801482a:	f108 0801 	add.w	r8, r8, #1
 801482e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014832:	f1bc 0f00 	cmp.w	ip, #0
 8014836:	d1e9      	bne.n	801480c <rclc_executor_spin_some.part.0+0x94>
 8014838:	4619      	mov	r1, r3
 801483a:	4610      	mov	r0, r2
 801483c:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014840:	4798      	blx	r3
 8014842:	2800      	cmp	r0, #0
 8014844:	f000 809a 	beq.w	801497c <rclc_executor_spin_some.part.0+0x204>
 8014848:	68ab      	ldr	r3, [r5, #8]
 801484a:	2b00      	cmp	r3, #0
 801484c:	f000 8096 	beq.w	801497c <rclc_executor_spin_some.part.0+0x204>
 8014850:	f04f 0800 	mov.w	r8, #0
 8014854:	f240 1991 	movw	r9, #401	; 0x191
 8014858:	e009      	b.n	801486e <rclc_executor_spin_some.part.0+0xf6>
 801485a:	f7ff fb41 	bl	8013ee0 <_rclc_take_new_data>
 801485e:	4604      	mov	r4, r0
 8014860:	b110      	cbz	r0, 8014868 <rclc_executor_spin_some.part.0+0xf0>
 8014862:	4548      	cmp	r0, r9
 8014864:	f040 808a 	bne.w	801497c <rclc_executor_spin_some.part.0+0x204>
 8014868:	68ab      	ldr	r3, [r5, #8]
 801486a:	4598      	cmp	r8, r3
 801486c:	d209      	bcs.n	8014882 <rclc_executor_spin_some.part.0+0x10a>
 801486e:	6868      	ldr	r0, [r5, #4]
 8014870:	4631      	mov	r1, r6
 8014872:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014876:	f108 0801 	add.w	r8, r8, #1
 801487a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 801487e:	2a00      	cmp	r2, #0
 8014880:	d1eb      	bne.n	801485a <rclc_executor_spin_some.part.0+0xe2>
 8014882:	2b00      	cmp	r3, #0
 8014884:	d07a      	beq.n	801497c <rclc_executor_spin_some.part.0+0x204>
 8014886:	2600      	movs	r6, #0
 8014888:	e00e      	b.n	80148a8 <rclc_executor_spin_some.part.0+0x130>
 801488a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801488e:	2a08      	cmp	r2, #8
 8014890:	f000 80fc 	beq.w	8014a8c <rclc_executor_spin_some.part.0+0x314>
 8014894:	2a09      	cmp	r2, #9
 8014896:	f000 80ee 	beq.w	8014a76 <rclc_executor_spin_some.part.0+0x2fe>
 801489a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 801489e:	b98a      	cbnz	r2, 80148c4 <rclc_executor_spin_some.part.0+0x14c>
 80148a0:	3601      	adds	r6, #1
 80148a2:	429e      	cmp	r6, r3
 80148a4:	d267      	bcs.n	8014976 <rclc_executor_spin_some.part.0+0x1fe>
 80148a6:	2400      	movs	r4, #0
 80148a8:	686a      	ldr	r2, [r5, #4]
 80148aa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 80148ae:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 80148b2:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 80148b6:	2900      	cmp	r1, #0
 80148b8:	d060      	beq.n	801497c <rclc_executor_spin_some.part.0+0x204>
 80148ba:	7841      	ldrb	r1, [r0, #1]
 80148bc:	2900      	cmp	r1, #0
 80148be:	d0e4      	beq.n	801488a <rclc_executor_spin_some.part.0+0x112>
 80148c0:	2901      	cmp	r1, #1
 80148c2:	d1ed      	bne.n	80148a0 <rclc_executor_spin_some.part.0+0x128>
 80148c4:	f7ff fc80 	bl	80141c8 <_rclc_execute.part.0>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	f040 80b5 	bne.w	8014a38 <rclc_executor_spin_some.part.0+0x2c0>
 80148ce:	68ab      	ldr	r3, [r5, #8]
 80148d0:	e7e6      	b.n	80148a0 <rclc_executor_spin_some.part.0+0x128>
 80148d2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80148d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80148da:	4630      	mov	r0, r6
 80148dc:	f007 feca 	bl	801c674 <rcl_wait_set_add_client>
 80148e0:	2800      	cmp	r0, #0
 80148e2:	f43f af79 	beq.w	80147d8 <rclc_executor_spin_some.part.0+0x60>
 80148e6:	4607      	mov	r7, r0
 80148e8:	f000 fac2 	bl	8014e70 <rcutils_reset_error>
 80148ec:	4638      	mov	r0, r7
 80148ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80148f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80148fa:	4630      	mov	r0, r6
 80148fc:	f007 fb6a 	bl	801bfd4 <rcl_wait_set_add_subscription>
 8014900:	2800      	cmp	r0, #0
 8014902:	f43f af69 	beq.w	80147d8 <rclc_executor_spin_some.part.0+0x60>
 8014906:	4607      	mov	r7, r0
 8014908:	e7ee      	b.n	80148e8 <rclc_executor_spin_some.part.0+0x170>
 801490a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 801490e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014912:	4630      	mov	r0, r6
 8014914:	f007 fe7e 	bl	801c614 <rcl_wait_set_add_timer>
 8014918:	2800      	cmp	r0, #0
 801491a:	f43f af5d 	beq.w	80147d8 <rclc_executor_spin_some.part.0+0x60>
 801491e:	4607      	mov	r7, r0
 8014920:	e7e2      	b.n	80148e8 <rclc_executor_spin_some.part.0+0x170>
 8014922:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014926:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801492a:	4630      	mov	r0, r6
 801492c:	f007 fe46 	bl	801c5bc <rcl_wait_set_add_guard_condition>
 8014930:	2800      	cmp	r0, #0
 8014932:	f43f af51 	beq.w	80147d8 <rclc_executor_spin_some.part.0+0x60>
 8014936:	4607      	mov	r7, r0
 8014938:	e7d6      	b.n	80148e8 <rclc_executor_spin_some.part.0+0x170>
 801493a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801493e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014942:	4630      	mov	r0, r6
 8014944:	3110      	adds	r1, #16
 8014946:	f008 fbc3 	bl	801d0d0 <rcl_action_wait_set_add_action_server>
 801494a:	2800      	cmp	r0, #0
 801494c:	f43f af44 	beq.w	80147d8 <rclc_executor_spin_some.part.0+0x60>
 8014950:	4607      	mov	r7, r0
 8014952:	e7c9      	b.n	80148e8 <rclc_executor_spin_some.part.0+0x170>
 8014954:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014958:	2300      	movs	r3, #0
 801495a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 801495e:	4630      	mov	r0, r6
 8014960:	3110      	adds	r1, #16
 8014962:	f008 f98d 	bl	801cc80 <rcl_action_wait_set_add_action_client>
 8014966:	2800      	cmp	r0, #0
 8014968:	f43f af36 	beq.w	80147d8 <rclc_executor_spin_some.part.0+0x60>
 801496c:	4607      	mov	r7, r0
 801496e:	e7bb      	b.n	80148e8 <rclc_executor_spin_some.part.0+0x170>
 8014970:	2701      	movs	r7, #1
 8014972:	f000 fa7d 	bl	8014e70 <rcutils_reset_error>
 8014976:	4638      	mov	r0, r7
 8014978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801497c:	4627      	mov	r7, r4
 801497e:	e7fa      	b.n	8014976 <rclc_executor_spin_some.part.0+0x1fe>
 8014980:	68ab      	ldr	r3, [r5, #8]
 8014982:	2b00      	cmp	r3, #0
 8014984:	f000 8093 	beq.w	8014aae <rclc_executor_spin_some.part.0+0x336>
 8014988:	2400      	movs	r4, #0
 801498a:	f240 1991 	movw	r9, #401	; 0x191
 801498e:	46a0      	mov	r8, r4
 8014990:	e008      	b.n	80149a4 <rclc_executor_spin_some.part.0+0x22c>
 8014992:	f7ff fa57 	bl	8013e44 <_rclc_check_for_new_data>
 8014996:	4604      	mov	r4, r0
 8014998:	b108      	cbz	r0, 801499e <rclc_executor_spin_some.part.0+0x226>
 801499a:	4548      	cmp	r0, r9
 801499c:	d1ee      	bne.n	801497c <rclc_executor_spin_some.part.0+0x204>
 801499e:	68ab      	ldr	r3, [r5, #8]
 80149a0:	4598      	cmp	r8, r3
 80149a2:	d266      	bcs.n	8014a72 <rclc_executor_spin_some.part.0+0x2fa>
 80149a4:	686a      	ldr	r2, [r5, #4]
 80149a6:	4631      	mov	r1, r6
 80149a8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80149ac:	f108 0801 	add.w	r8, r8, #1
 80149b0:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 80149b4:	f1bc 0f00 	cmp.w	ip, #0
 80149b8:	d1eb      	bne.n	8014992 <rclc_executor_spin_some.part.0+0x21a>
 80149ba:	4619      	mov	r1, r3
 80149bc:	4610      	mov	r0, r2
 80149be:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 80149c2:	4798      	blx	r3
 80149c4:	2800      	cmp	r0, #0
 80149c6:	d0d9      	beq.n	801497c <rclc_executor_spin_some.part.0+0x204>
 80149c8:	68ab      	ldr	r3, [r5, #8]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d0d6      	beq.n	801497c <rclc_executor_spin_some.part.0+0x204>
 80149ce:	f04f 0a00 	mov.w	sl, #0
 80149d2:	f240 1891 	movw	r8, #401	; 0x191
 80149d6:	f240 2959 	movw	r9, #601	; 0x259
 80149da:	e00e      	b.n	80149fa <rclc_executor_spin_some.part.0+0x282>
 80149dc:	f813 300b 	ldrb.w	r3, [r3, fp]
 80149e0:	2b08      	cmp	r3, #8
 80149e2:	d034      	beq.n	8014a4e <rclc_executor_spin_some.part.0+0x2d6>
 80149e4:	2b09      	cmp	r3, #9
 80149e6:	d029      	beq.n	8014a3c <rclc_executor_spin_some.part.0+0x2c4>
 80149e8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80149ec:	bb03      	cbnz	r3, 8014a30 <rclc_executor_spin_some.part.0+0x2b8>
 80149ee:	f10a 0a01 	add.w	sl, sl, #1
 80149f2:	68ab      	ldr	r3, [r5, #8]
 80149f4:	459a      	cmp	sl, r3
 80149f6:	d2be      	bcs.n	8014976 <rclc_executor_spin_some.part.0+0x1fe>
 80149f8:	2400      	movs	r4, #0
 80149fa:	6868      	ldr	r0, [r5, #4]
 80149fc:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8014a00:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8014a04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d0b7      	beq.n	801497c <rclc_executor_spin_some.part.0+0x204>
 8014a0c:	4631      	mov	r1, r6
 8014a0e:	f7ff fa67 	bl	8013ee0 <_rclc_take_new_data>
 8014a12:	2800      	cmp	r0, #0
 8014a14:	bf18      	it	ne
 8014a16:	4540      	cmpne	r0, r8
 8014a18:	d001      	beq.n	8014a1e <rclc_executor_spin_some.part.0+0x2a6>
 8014a1a:	4548      	cmp	r0, r9
 8014a1c:	d10c      	bne.n	8014a38 <rclc_executor_spin_some.part.0+0x2c0>
 8014a1e:	686b      	ldr	r3, [r5, #4]
 8014a20:	eb13 000b 	adds.w	r0, r3, fp
 8014a24:	d021      	beq.n	8014a6a <rclc_executor_spin_some.part.0+0x2f2>
 8014a26:	7842      	ldrb	r2, [r0, #1]
 8014a28:	2a00      	cmp	r2, #0
 8014a2a:	d0d7      	beq.n	80149dc <rclc_executor_spin_some.part.0+0x264>
 8014a2c:	2a01      	cmp	r2, #1
 8014a2e:	d1de      	bne.n	80149ee <rclc_executor_spin_some.part.0+0x276>
 8014a30:	f7ff fbca 	bl	80141c8 <_rclc_execute.part.0>
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d0da      	beq.n	80149ee <rclc_executor_spin_some.part.0+0x276>
 8014a38:	4607      	mov	r7, r0
 8014a3a:	e79c      	b.n	8014976 <rclc_executor_spin_some.part.0+0x1fe>
 8014a3c:	6843      	ldr	r3, [r0, #4]
 8014a3e:	6a1a      	ldr	r2, [r3, #32]
 8014a40:	2a00      	cmp	r2, #0
 8014a42:	d1f5      	bne.n	8014a30 <rclc_executor_spin_some.part.0+0x2b8>
 8014a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d0d0      	beq.n	80149ee <rclc_executor_spin_some.part.0+0x276>
 8014a4c:	e7f0      	b.n	8014a30 <rclc_executor_spin_some.part.0+0x2b8>
 8014a4e:	6843      	ldr	r3, [r0, #4]
 8014a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014a52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8014a56:	d1eb      	bne.n	8014a30 <rclc_executor_spin_some.part.0+0x2b8>
 8014a58:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014a5c:	2a00      	cmp	r2, #0
 8014a5e:	d1e7      	bne.n	8014a30 <rclc_executor_spin_some.part.0+0x2b8>
 8014a60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d0c2      	beq.n	80149ee <rclc_executor_spin_some.part.0+0x276>
 8014a68:	e7e2      	b.n	8014a30 <rclc_executor_spin_some.part.0+0x2b8>
 8014a6a:	270b      	movs	r7, #11
 8014a6c:	e783      	b.n	8014976 <rclc_executor_spin_some.part.0+0x1fe>
 8014a6e:	686a      	ldr	r2, [r5, #4]
 8014a70:	e6e2      	b.n	8014838 <rclc_executor_spin_some.part.0+0xc0>
 8014a72:	686a      	ldr	r2, [r5, #4]
 8014a74:	e7a1      	b.n	80149ba <rclc_executor_spin_some.part.0+0x242>
 8014a76:	6842      	ldr	r2, [r0, #4]
 8014a78:	6a11      	ldr	r1, [r2, #32]
 8014a7a:	2900      	cmp	r1, #0
 8014a7c:	f47f af22 	bne.w	80148c4 <rclc_executor_spin_some.part.0+0x14c>
 8014a80:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8014a84:	2a00      	cmp	r2, #0
 8014a86:	f43f af0b 	beq.w	80148a0 <rclc_executor_spin_some.part.0+0x128>
 8014a8a:	e71b      	b.n	80148c4 <rclc_executor_spin_some.part.0+0x14c>
 8014a8c:	6842      	ldr	r2, [r0, #4]
 8014a8e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8014a90:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8014a94:	f47f af16 	bne.w	80148c4 <rclc_executor_spin_some.part.0+0x14c>
 8014a98:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8014a9c:	2900      	cmp	r1, #0
 8014a9e:	f47f af11 	bne.w	80148c4 <rclc_executor_spin_some.part.0+0x14c>
 8014aa2:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8014aa6:	2a00      	cmp	r2, #0
 8014aa8:	f43f aefa 	beq.w	80148a0 <rclc_executor_spin_some.part.0+0x128>
 8014aac:	e70a      	b.n	80148c4 <rclc_executor_spin_some.part.0+0x14c>
 8014aae:	686a      	ldr	r2, [r5, #4]
 8014ab0:	461c      	mov	r4, r3
 8014ab2:	e782      	b.n	80149ba <rclc_executor_spin_some.part.0+0x242>
 8014ab4:	686a      	ldr	r2, [r5, #4]
 8014ab6:	461c      	mov	r4, r3
 8014ab8:	e6be      	b.n	8014838 <rclc_executor_spin_some.part.0+0xc0>
 8014aba:	bf00      	nop

08014abc <rclc_executor_spin_some>:
 8014abc:	b190      	cbz	r0, 8014ae4 <rclc_executor_spin_some+0x28>
 8014abe:	b570      	push	{r4, r5, r6, lr}
 8014ac0:	4604      	mov	r4, r0
 8014ac2:	6800      	ldr	r0, [r0, #0]
 8014ac4:	4616      	mov	r6, r2
 8014ac6:	461d      	mov	r5, r3
 8014ac8:	f006 fb96 	bl	801b1f8 <rcl_context_is_valid>
 8014acc:	b130      	cbz	r0, 8014adc <rclc_executor_spin_some+0x20>
 8014ace:	4632      	mov	r2, r6
 8014ad0:	462b      	mov	r3, r5
 8014ad2:	4620      	mov	r0, r4
 8014ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ad8:	f7ff be4e 	b.w	8014778 <rclc_executor_spin_some.part.0>
 8014adc:	f000 f9c8 	bl	8014e70 <rcutils_reset_error>
 8014ae0:	2001      	movs	r0, #1
 8014ae2:	bd70      	pop	{r4, r5, r6, pc}
 8014ae4:	200b      	movs	r0, #11
 8014ae6:	4770      	bx	lr

08014ae8 <rclc_executor_handle_counters_zero_init>:
 8014ae8:	b130      	cbz	r0, 8014af8 <rclc_executor_handle_counters_zero_init+0x10>
 8014aea:	2220      	movs	r2, #32
 8014aec:	2100      	movs	r1, #0
 8014aee:	b508      	push	{r3, lr}
 8014af0:	f00c f814 	bl	8020b1c <memset>
 8014af4:	2000      	movs	r0, #0
 8014af6:	bd08      	pop	{r3, pc}
 8014af8:	200b      	movs	r0, #11
 8014afa:	4770      	bx	lr
 8014afc:	0000      	movs	r0, r0
	...

08014b00 <rclc_executor_handle_init>:
 8014b00:	4603      	mov	r3, r0
 8014b02:	b178      	cbz	r0, 8014b24 <rclc_executor_handle_init+0x24>
 8014b04:	2200      	movs	r2, #0
 8014b06:	f04f 0c0b 	mov.w	ip, #11
 8014b0a:	6341      	str	r1, [r0, #52]	; 0x34
 8014b0c:	4610      	mov	r0, r2
 8014b0e:	f8a3 c000 	strh.w	ip, [r3]
 8014b12:	631a      	str	r2, [r3, #48]	; 0x30
 8014b14:	871a      	strh	r2, [r3, #56]	; 0x38
 8014b16:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8014b28 <rclc_executor_handle_init+0x28>
 8014b1a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8014b1e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8014b22:	4770      	bx	lr
 8014b24:	200b      	movs	r0, #11
 8014b26:	4770      	bx	lr
	...

08014b30 <rclc_support_init_with_options>:
 8014b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b34:	b083      	sub	sp, #12
 8014b36:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	bf18      	it	ne
 8014b3c:	2f00      	cmpne	r7, #0
 8014b3e:	d027      	beq.n	8014b90 <rclc_support_init_with_options+0x60>
 8014b40:	4604      	mov	r4, r0
 8014b42:	b328      	cbz	r0, 8014b90 <rclc_support_init_with_options+0x60>
 8014b44:	46e9      	mov	r9, sp
 8014b46:	461d      	mov	r5, r3
 8014b48:	460e      	mov	r6, r1
 8014b4a:	4690      	mov	r8, r2
 8014b4c:	4648      	mov	r0, r9
 8014b4e:	f006 fb49 	bl	801b1e4 <rcl_get_zero_initialized_context>
 8014b52:	462a      	mov	r2, r5
 8014b54:	4623      	mov	r3, r4
 8014b56:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014b5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8014b5e:	4641      	mov	r1, r8
 8014b60:	4630      	mov	r0, r6
 8014b62:	f006 fc5d 	bl	801b420 <rcl_init>
 8014b66:	4605      	mov	r5, r0
 8014b68:	b960      	cbnz	r0, 8014b84 <rclc_support_init_with_options+0x54>
 8014b6a:	463a      	mov	r2, r7
 8014b6c:	f104 010c 	add.w	r1, r4, #12
 8014b70:	2003      	movs	r0, #3
 8014b72:	60a7      	str	r7, [r4, #8]
 8014b74:	f006 ff6a 	bl	801ba4c <rcl_clock_init>
 8014b78:	4605      	mov	r5, r0
 8014b7a:	b918      	cbnz	r0, 8014b84 <rclc_support_init_with_options+0x54>
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	b003      	add	sp, #12
 8014b80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b84:	f000 f974 	bl	8014e70 <rcutils_reset_error>
 8014b88:	4628      	mov	r0, r5
 8014b8a:	b003      	add	sp, #12
 8014b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b90:	250b      	movs	r5, #11
 8014b92:	4628      	mov	r0, r5
 8014b94:	b003      	add	sp, #12
 8014b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b9a:	bf00      	nop

08014b9c <rclc_node_init_with_options>:
 8014b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ba0:	b087      	sub	sp, #28
 8014ba2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014ba4:	2e00      	cmp	r6, #0
 8014ba6:	bf18      	it	ne
 8014ba8:	2b00      	cmpne	r3, #0
 8014baa:	bf0c      	ite	eq
 8014bac:	f04f 0c01 	moveq.w	ip, #1
 8014bb0:	f04f 0c00 	movne.w	ip, #0
 8014bb4:	2a00      	cmp	r2, #0
 8014bb6:	bf08      	it	eq
 8014bb8:	f04c 0c01 	orreq.w	ip, ip, #1
 8014bbc:	2900      	cmp	r1, #0
 8014bbe:	bf08      	it	eq
 8014bc0:	f04c 0c01 	orreq.w	ip, ip, #1
 8014bc4:	f1bc 0f00 	cmp.w	ip, #0
 8014bc8:	d118      	bne.n	8014bfc <rclc_node_init_with_options+0x60>
 8014bca:	4604      	mov	r4, r0
 8014bcc:	b1b0      	cbz	r0, 8014bfc <rclc_node_init_with_options+0x60>
 8014bce:	f10d 0910 	add.w	r9, sp, #16
 8014bd2:	460d      	mov	r5, r1
 8014bd4:	4698      	mov	r8, r3
 8014bd6:	4617      	mov	r7, r2
 8014bd8:	4648      	mov	r0, r9
 8014bda:	f7fe fc09 	bl	80133f0 <rcl_get_zero_initialized_node>
 8014bde:	9600      	str	r6, [sp, #0]
 8014be0:	4643      	mov	r3, r8
 8014be2:	463a      	mov	r2, r7
 8014be4:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014be8:	e884 0003 	stmia.w	r4, {r0, r1}
 8014bec:	4629      	mov	r1, r5
 8014bee:	4620      	mov	r0, r4
 8014bf0:	f7fe fc08 	bl	8013404 <rcl_node_init>
 8014bf4:	b930      	cbnz	r0, 8014c04 <rclc_node_init_with_options+0x68>
 8014bf6:	b007      	add	sp, #28
 8014bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bfc:	200b      	movs	r0, #11
 8014bfe:	b007      	add	sp, #28
 8014c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c04:	9003      	str	r0, [sp, #12]
 8014c06:	f000 f933 	bl	8014e70 <rcutils_reset_error>
 8014c0a:	9803      	ldr	r0, [sp, #12]
 8014c0c:	b007      	add	sp, #28
 8014c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c12:	bf00      	nop

08014c14 <rclc_publisher_init_default>:
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	bf18      	it	ne
 8014c18:	2a00      	cmpne	r2, #0
 8014c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1e:	4616      	mov	r6, r2
 8014c20:	bf0c      	ite	eq
 8014c22:	2201      	moveq	r2, #1
 8014c24:	2200      	movne	r2, #0
 8014c26:	b0a0      	sub	sp, #128	; 0x80
 8014c28:	2900      	cmp	r1, #0
 8014c2a:	bf08      	it	eq
 8014c2c:	f042 0201 	orreq.w	r2, r2, #1
 8014c30:	bb1a      	cbnz	r2, 8014c7a <rclc_publisher_init_default+0x66>
 8014c32:	4604      	mov	r4, r0
 8014c34:	b308      	cbz	r0, 8014c7a <rclc_publisher_init_default+0x66>
 8014c36:	f10d 0810 	add.w	r8, sp, #16
 8014c3a:	461f      	mov	r7, r3
 8014c3c:	460d      	mov	r5, r1
 8014c3e:	f7fe fd81 	bl	8013744 <rcl_get_zero_initialized_publisher>
 8014c42:	6020      	str	r0, [r4, #0]
 8014c44:	4640      	mov	r0, r8
 8014c46:	f7fe fe1d 	bl	8013884 <rcl_publisher_get_default_options>
 8014c4a:	2250      	movs	r2, #80	; 0x50
 8014c4c:	490d      	ldr	r1, [pc, #52]	; (8014c84 <rclc_publisher_init_default+0x70>)
 8014c4e:	4640      	mov	r0, r8
 8014c50:	f00c f831 	bl	8020cb6 <memcpy>
 8014c54:	463b      	mov	r3, r7
 8014c56:	4632      	mov	r2, r6
 8014c58:	4629      	mov	r1, r5
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	f8cd 8000 	str.w	r8, [sp]
 8014c60:	f7fe fd76 	bl	8013750 <rcl_publisher_init>
 8014c64:	b910      	cbnz	r0, 8014c6c <rclc_publisher_init_default+0x58>
 8014c66:	b020      	add	sp, #128	; 0x80
 8014c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c6c:	9003      	str	r0, [sp, #12]
 8014c6e:	f000 f8ff 	bl	8014e70 <rcutils_reset_error>
 8014c72:	9803      	ldr	r0, [sp, #12]
 8014c74:	b020      	add	sp, #128	; 0x80
 8014c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c7a:	200b      	movs	r0, #11
 8014c7c:	b020      	add	sp, #128	; 0x80
 8014c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c82:	bf00      	nop
 8014c84:	08024d60 	.word	0x08024d60

08014c88 <rclc_service_init_default>:
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	bf18      	it	ne
 8014c8c:	2a00      	cmpne	r2, #0
 8014c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c92:	4616      	mov	r6, r2
 8014c94:	bf0c      	ite	eq
 8014c96:	2201      	moveq	r2, #1
 8014c98:	2200      	movne	r2, #0
 8014c9a:	b09e      	sub	sp, #120	; 0x78
 8014c9c:	2900      	cmp	r1, #0
 8014c9e:	bf08      	it	eq
 8014ca0:	f042 0201 	orreq.w	r2, r2, #1
 8014ca4:	bb1a      	cbnz	r2, 8014cee <rclc_service_init_default+0x66>
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	b308      	cbz	r0, 8014cee <rclc_service_init_default+0x66>
 8014caa:	f10d 0810 	add.w	r8, sp, #16
 8014cae:	461f      	mov	r7, r3
 8014cb0:	460d      	mov	r5, r1
 8014cb2:	f7fe fe5b 	bl	801396c <rcl_get_zero_initialized_service>
 8014cb6:	6020      	str	r0, [r4, #0]
 8014cb8:	4640      	mov	r0, r8
 8014cba:	f7fe feef 	bl	8013a9c <rcl_service_get_default_options>
 8014cbe:	2250      	movs	r2, #80	; 0x50
 8014cc0:	490d      	ldr	r1, [pc, #52]	; (8014cf8 <rclc_service_init_default+0x70>)
 8014cc2:	4640      	mov	r0, r8
 8014cc4:	f00b fff7 	bl	8020cb6 <memcpy>
 8014cc8:	463b      	mov	r3, r7
 8014cca:	4632      	mov	r2, r6
 8014ccc:	4629      	mov	r1, r5
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f8cd 8000 	str.w	r8, [sp]
 8014cd4:	f7fe fe50 	bl	8013978 <rcl_service_init>
 8014cd8:	b910      	cbnz	r0, 8014ce0 <rclc_service_init_default+0x58>
 8014cda:	b01e      	add	sp, #120	; 0x78
 8014cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce0:	9003      	str	r0, [sp, #12]
 8014ce2:	f000 f8c5 	bl	8014e70 <rcutils_reset_error>
 8014ce6:	9803      	ldr	r0, [sp, #12]
 8014ce8:	b01e      	add	sp, #120	; 0x78
 8014cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cee:	200b      	movs	r0, #11
 8014cf0:	b01e      	add	sp, #120	; 0x78
 8014cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cf6:	bf00      	nop
 8014cf8:	08024db0 	.word	0x08024db0

08014cfc <rclc_subscription_init_default>:
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	bf18      	it	ne
 8014d00:	2a00      	cmpne	r2, #0
 8014d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d06:	4616      	mov	r6, r2
 8014d08:	bf0c      	ite	eq
 8014d0a:	2201      	moveq	r2, #1
 8014d0c:	2200      	movne	r2, #0
 8014d0e:	b0a0      	sub	sp, #128	; 0x80
 8014d10:	2900      	cmp	r1, #0
 8014d12:	bf08      	it	eq
 8014d14:	f042 0201 	orreq.w	r2, r2, #1
 8014d18:	bb1a      	cbnz	r2, 8014d62 <rclc_subscription_init_default+0x66>
 8014d1a:	4604      	mov	r4, r0
 8014d1c:	b308      	cbz	r0, 8014d62 <rclc_subscription_init_default+0x66>
 8014d1e:	f10d 0810 	add.w	r8, sp, #16
 8014d22:	461f      	mov	r7, r3
 8014d24:	460d      	mov	r5, r1
 8014d26:	f7fe ff45 	bl	8013bb4 <rcl_get_zero_initialized_subscription>
 8014d2a:	6020      	str	r0, [r4, #0]
 8014d2c:	4640      	mov	r0, r8
 8014d2e:	f7fe fff5 	bl	8013d1c <rcl_subscription_get_default_options>
 8014d32:	2250      	movs	r2, #80	; 0x50
 8014d34:	490d      	ldr	r1, [pc, #52]	; (8014d6c <rclc_subscription_init_default+0x70>)
 8014d36:	4640      	mov	r0, r8
 8014d38:	f00b ffbd 	bl	8020cb6 <memcpy>
 8014d3c:	463b      	mov	r3, r7
 8014d3e:	4632      	mov	r2, r6
 8014d40:	4629      	mov	r1, r5
 8014d42:	4620      	mov	r0, r4
 8014d44:	f8cd 8000 	str.w	r8, [sp]
 8014d48:	f7fe ff3a 	bl	8013bc0 <rcl_subscription_init>
 8014d4c:	b910      	cbnz	r0, 8014d54 <rclc_subscription_init_default+0x58>
 8014d4e:	b020      	add	sp, #128	; 0x80
 8014d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d54:	9003      	str	r0, [sp, #12]
 8014d56:	f000 f88b 	bl	8014e70 <rcutils_reset_error>
 8014d5a:	9803      	ldr	r0, [sp, #12]
 8014d5c:	b020      	add	sp, #128	; 0x80
 8014d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d62:	200b      	movs	r0, #11
 8014d64:	b020      	add	sp, #128	; 0x80
 8014d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d6a:	bf00      	nop
 8014d6c:	08024e00 	.word	0x08024e00

08014d70 <__default_zero_allocate>:
 8014d70:	f00a ba78 	b.w	801f264 <calloc>

08014d74 <__default_reallocate>:
 8014d74:	f00a bc16 	b.w	801f5a4 <realloc>

08014d78 <__default_deallocate>:
 8014d78:	f00a baf4 	b.w	801f364 <free>

08014d7c <__default_allocate>:
 8014d7c:	f00a baea 	b.w	801f354 <malloc>

08014d80 <rcutils_get_zero_initialized_allocator>:
 8014d80:	b510      	push	{r4, lr}
 8014d82:	4c05      	ldr	r4, [pc, #20]	; (8014d98 <rcutils_get_zero_initialized_allocator+0x18>)
 8014d84:	4686      	mov	lr, r0
 8014d86:	4684      	mov	ip, r0
 8014d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d8e:	6823      	ldr	r3, [r4, #0]
 8014d90:	4670      	mov	r0, lr
 8014d92:	f8cc 3000 	str.w	r3, [ip]
 8014d96:	bd10      	pop	{r4, pc}
 8014d98:	08024e50 	.word	0x08024e50

08014d9c <rcutils_set_default_allocator>:
 8014d9c:	b1a8      	cbz	r0, 8014dca <rcutils_set_default_allocator+0x2e>
 8014d9e:	6802      	ldr	r2, [r0, #0]
 8014da0:	b1a2      	cbz	r2, 8014dcc <rcutils_set_default_allocator+0x30>
 8014da2:	6841      	ldr	r1, [r0, #4]
 8014da4:	b1a1      	cbz	r1, 8014dd0 <rcutils_set_default_allocator+0x34>
 8014da6:	b410      	push	{r4}
 8014da8:	68c4      	ldr	r4, [r0, #12]
 8014daa:	b164      	cbz	r4, 8014dc6 <rcutils_set_default_allocator+0x2a>
 8014dac:	6880      	ldr	r0, [r0, #8]
 8014dae:	b138      	cbz	r0, 8014dc0 <rcutils_set_default_allocator+0x24>
 8014db0:	4b08      	ldr	r3, [pc, #32]	; (8014dd4 <rcutils_set_default_allocator+0x38>)
 8014db2:	601a      	str	r2, [r3, #0]
 8014db4:	2200      	movs	r2, #0
 8014db6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8014dba:	2001      	movs	r0, #1
 8014dbc:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8014dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dc4:	4770      	bx	lr
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	e7fa      	b.n	8014dc0 <rcutils_set_default_allocator+0x24>
 8014dca:	4770      	bx	lr
 8014dcc:	4610      	mov	r0, r2
 8014dce:	4770      	bx	lr
 8014dd0:	4608      	mov	r0, r1
 8014dd2:	4770      	bx	lr
 8014dd4:	200008e0 	.word	0x200008e0

08014dd8 <rcutils_get_default_allocator>:
 8014dd8:	b510      	push	{r4, lr}
 8014dda:	4c05      	ldr	r4, [pc, #20]	; (8014df0 <rcutils_get_default_allocator+0x18>)
 8014ddc:	4686      	mov	lr, r0
 8014dde:	4684      	mov	ip, r0
 8014de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014de2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014de6:	6823      	ldr	r3, [r4, #0]
 8014de8:	4670      	mov	r0, lr
 8014dea:	f8cc 3000 	str.w	r3, [ip]
 8014dee:	bd10      	pop	{r4, pc}
 8014df0:	200008e0 	.word	0x200008e0

08014df4 <rcutils_allocator_is_valid>:
 8014df4:	b158      	cbz	r0, 8014e0e <rcutils_allocator_is_valid+0x1a>
 8014df6:	6803      	ldr	r3, [r0, #0]
 8014df8:	b143      	cbz	r3, 8014e0c <rcutils_allocator_is_valid+0x18>
 8014dfa:	6843      	ldr	r3, [r0, #4]
 8014dfc:	b133      	cbz	r3, 8014e0c <rcutils_allocator_is_valid+0x18>
 8014dfe:	68c3      	ldr	r3, [r0, #12]
 8014e00:	b123      	cbz	r3, 8014e0c <rcutils_allocator_is_valid+0x18>
 8014e02:	6880      	ldr	r0, [r0, #8]
 8014e04:	3800      	subs	r0, #0
 8014e06:	bf18      	it	ne
 8014e08:	2001      	movne	r0, #1
 8014e0a:	4770      	bx	lr
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	4770      	bx	lr

08014e10 <rcutils_get_env>:
 8014e10:	b168      	cbz	r0, 8014e2e <rcutils_get_env+0x1e>
 8014e12:	b510      	push	{r4, lr}
 8014e14:	460c      	mov	r4, r1
 8014e16:	b129      	cbz	r1, 8014e24 <rcutils_get_env+0x14>
 8014e18:	f00a fa54 	bl	801f2c4 <getenv>
 8014e1c:	b120      	cbz	r0, 8014e28 <rcutils_get_env+0x18>
 8014e1e:	6020      	str	r0, [r4, #0]
 8014e20:	2000      	movs	r0, #0
 8014e22:	bd10      	pop	{r4, pc}
 8014e24:	4803      	ldr	r0, [pc, #12]	; (8014e34 <rcutils_get_env+0x24>)
 8014e26:	bd10      	pop	{r4, pc}
 8014e28:	4b03      	ldr	r3, [pc, #12]	; (8014e38 <rcutils_get_env+0x28>)
 8014e2a:	6023      	str	r3, [r4, #0]
 8014e2c:	bd10      	pop	{r4, pc}
 8014e2e:	4803      	ldr	r0, [pc, #12]	; (8014e3c <rcutils_get_env+0x2c>)
 8014e30:	4770      	bx	lr
 8014e32:	bf00      	nop
 8014e34:	08024e80 	.word	0x08024e80
 8014e38:	08025238 	.word	0x08025238
 8014e3c:	08024e64 	.word	0x08024e64

08014e40 <rcutils_get_error_string>:
 8014e40:	4b06      	ldr	r3, [pc, #24]	; (8014e5c <rcutils_get_error_string+0x1c>)
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	b13b      	cbz	r3, 8014e56 <rcutils_get_error_string+0x16>
 8014e46:	4b06      	ldr	r3, [pc, #24]	; (8014e60 <rcutils_get_error_string+0x20>)
 8014e48:	781a      	ldrb	r2, [r3, #0]
 8014e4a:	b90a      	cbnz	r2, 8014e50 <rcutils_get_error_string+0x10>
 8014e4c:	2201      	movs	r2, #1
 8014e4e:	701a      	strb	r2, [r3, #0]
 8014e50:	4b04      	ldr	r3, [pc, #16]	; (8014e64 <rcutils_get_error_string+0x24>)
 8014e52:	7818      	ldrb	r0, [r3, #0]
 8014e54:	4770      	bx	lr
 8014e56:	4b04      	ldr	r3, [pc, #16]	; (8014e68 <rcutils_get_error_string+0x28>)
 8014e58:	7818      	ldrb	r0, [r3, #0]
 8014e5a:	4770      	bx	lr
 8014e5c:	20012488 	.word	0x20012488
 8014e60:	200124a1 	.word	0x200124a1
 8014e64:	200124a0 	.word	0x200124a0
 8014e68:	08024500 	.word	0x08024500
 8014e6c:	00000000 	.word	0x00000000

08014e70 <rcutils_reset_error>:
 8014e70:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8014e90 <rcutils_reset_error+0x20>
 8014e74:	2300      	movs	r3, #0
 8014e76:	4a08      	ldr	r2, [pc, #32]	; (8014e98 <rcutils_reset_error+0x28>)
 8014e78:	4808      	ldr	r0, [pc, #32]	; (8014e9c <rcutils_reset_error+0x2c>)
 8014e7a:	8013      	strh	r3, [r2, #0]
 8014e7c:	4908      	ldr	r1, [pc, #32]	; (8014ea0 <rcutils_reset_error+0x30>)
 8014e7e:	7003      	strb	r3, [r0, #0]
 8014e80:	700b      	strb	r3, [r1, #0]
 8014e82:	ed82 7b02 	vstr	d7, [r2, #8]
 8014e86:	4a07      	ldr	r2, [pc, #28]	; (8014ea4 <rcutils_reset_error+0x34>)
 8014e88:	7013      	strb	r3, [r2, #0]
 8014e8a:	4770      	bx	lr
 8014e8c:	f3af 8000 	nop.w
	...
 8014e98:	20012490 	.word	0x20012490
 8014e9c:	200124a1 	.word	0x200124a1
 8014ea0:	200124a0 	.word	0x200124a0
 8014ea4:	20012488 	.word	0x20012488

08014ea8 <rcutils_format_string_limit>:
 8014ea8:	b40f      	push	{r0, r1, r2, r3}
 8014eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eac:	b083      	sub	sp, #12
 8014eae:	ac08      	add	r4, sp, #32
 8014eb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014eb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014eb6:	b326      	cbz	r6, 8014f02 <rcutils_format_string_limit+0x5a>
 8014eb8:	a808      	add	r0, sp, #32
 8014eba:	f7ff ff9b 	bl	8014df4 <rcutils_allocator_is_valid>
 8014ebe:	b300      	cbz	r0, 8014f02 <rcutils_format_string_limit+0x5a>
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	ab0f      	add	r3, sp, #60	; 0x3c
 8014ec4:	4632      	mov	r2, r6
 8014ec6:	4608      	mov	r0, r1
 8014ec8:	e9cd 3300 	strd	r3, r3, [sp]
 8014ecc:	f000 f906 	bl	80150dc <rcutils_vsnprintf>
 8014ed0:	1c43      	adds	r3, r0, #1
 8014ed2:	4605      	mov	r5, r0
 8014ed4:	d015      	beq.n	8014f02 <rcutils_format_string_limit+0x5a>
 8014ed6:	1c47      	adds	r7, r0, #1
 8014ed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014eda:	429f      	cmp	r7, r3
 8014edc:	d901      	bls.n	8014ee2 <rcutils_format_string_limit+0x3a>
 8014ede:	1e5d      	subs	r5, r3, #1
 8014ee0:	461f      	mov	r7, r3
 8014ee2:	9b08      	ldr	r3, [sp, #32]
 8014ee4:	4638      	mov	r0, r7
 8014ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ee8:	4798      	blx	r3
 8014eea:	4604      	mov	r4, r0
 8014eec:	b148      	cbz	r0, 8014f02 <rcutils_format_string_limit+0x5a>
 8014eee:	4632      	mov	r2, r6
 8014ef0:	4639      	mov	r1, r7
 8014ef2:	9b01      	ldr	r3, [sp, #4]
 8014ef4:	f000 f8f2 	bl	80150dc <rcutils_vsnprintf>
 8014ef8:	2800      	cmp	r0, #0
 8014efa:	db09      	blt.n	8014f10 <rcutils_format_string_limit+0x68>
 8014efc:	2300      	movs	r3, #0
 8014efe:	5563      	strb	r3, [r4, r5]
 8014f00:	e000      	b.n	8014f04 <rcutils_format_string_limit+0x5c>
 8014f02:	2400      	movs	r4, #0
 8014f04:	4620      	mov	r0, r4
 8014f06:	b003      	add	sp, #12
 8014f08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014f0c:	b004      	add	sp, #16
 8014f0e:	4770      	bx	lr
 8014f10:	4620      	mov	r0, r4
 8014f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014f16:	2400      	movs	r4, #0
 8014f18:	4798      	blx	r3
 8014f1a:	e7f3      	b.n	8014f04 <rcutils_format_string_limit+0x5c>

08014f1c <rcutils_repl_str>:
 8014f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f20:	ed2d 8b02 	vpush	{d8}
 8014f24:	b087      	sub	sp, #28
 8014f26:	2600      	movs	r6, #0
 8014f28:	4680      	mov	r8, r0
 8014f2a:	468a      	mov	sl, r1
 8014f2c:	9000      	str	r0, [sp, #0]
 8014f2e:	4608      	mov	r0, r1
 8014f30:	ee08 2a10 	vmov	s16, r2
 8014f34:	4699      	mov	r9, r3
 8014f36:	2510      	movs	r5, #16
 8014f38:	f7eb f9e2 	bl	8000300 <strlen>
 8014f3c:	4637      	mov	r7, r6
 8014f3e:	46b3      	mov	fp, r6
 8014f40:	9001      	str	r0, [sp, #4]
 8014f42:	e01e      	b.n	8014f82 <rcutils_repl_str+0x66>
 8014f44:	f10b 0b01 	add.w	fp, fp, #1
 8014f48:	9b01      	ldr	r3, [sp, #4]
 8014f4a:	455e      	cmp	r6, fp
 8014f4c:	eb04 0803 	add.w	r8, r4, r3
 8014f50:	d211      	bcs.n	8014f76 <rcutils_repl_str+0x5a>
 8014f52:	442e      	add	r6, r5
 8014f54:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014f58:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014f60:	00b1      	lsls	r1, r6, #2
 8014f62:	4798      	blx	r3
 8014f64:	2800      	cmp	r0, #0
 8014f66:	f000 8088 	beq.w	801507a <rcutils_repl_str+0x15e>
 8014f6a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014f6e:	4607      	mov	r7, r0
 8014f70:	bf28      	it	cs
 8014f72:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8014f76:	9a00      	ldr	r2, [sp, #0]
 8014f78:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8014f7c:	1aa4      	subs	r4, r4, r2
 8014f7e:	f843 4c04 	str.w	r4, [r3, #-4]
 8014f82:	4651      	mov	r1, sl
 8014f84:	4640      	mov	r0, r8
 8014f86:	f00b fdf0 	bl	8020b6a <strstr>
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	4638      	mov	r0, r7
 8014f8e:	2c00      	cmp	r4, #0
 8014f90:	d1d8      	bne.n	8014f44 <rcutils_repl_str+0x28>
 8014f92:	4640      	mov	r0, r8
 8014f94:	f7eb f9b4 	bl	8000300 <strlen>
 8014f98:	9b00      	ldr	r3, [sp, #0]
 8014f9a:	eba8 0803 	sub.w	r8, r8, r3
 8014f9e:	eb08 0400 	add.w	r4, r8, r0
 8014fa2:	9402      	str	r4, [sp, #8]
 8014fa4:	f1bb 0f00 	cmp.w	fp, #0
 8014fa8:	d045      	beq.n	8015036 <rcutils_repl_str+0x11a>
 8014faa:	ee18 0a10 	vmov	r0, s16
 8014fae:	f7eb f9a7 	bl	8000300 <strlen>
 8014fb2:	9a01      	ldr	r2, [sp, #4]
 8014fb4:	4606      	mov	r6, r0
 8014fb6:	f8d9 3000 	ldr.w	r3, [r9]
 8014fba:	1a82      	subs	r2, r0, r2
 8014fbc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014fc0:	fb0b 4202 	mla	r2, fp, r2, r4
 8014fc4:	1c50      	adds	r0, r2, #1
 8014fc6:	9205      	str	r2, [sp, #20]
 8014fc8:	4798      	blx	r3
 8014fca:	4682      	mov	sl, r0
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d054      	beq.n	801507a <rcutils_repl_str+0x15e>
 8014fd0:	683a      	ldr	r2, [r7, #0]
 8014fd2:	463d      	mov	r5, r7
 8014fd4:	9900      	ldr	r1, [sp, #0]
 8014fd6:	2401      	movs	r4, #1
 8014fd8:	f00b fe6d 	bl	8020cb6 <memcpy>
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8014fe2:	eb0a 0803 	add.w	r8, sl, r3
 8014fe6:	ee18 7a10 	vmov	r7, s16
 8014fea:	f8dd a000 	ldr.w	sl, [sp]
 8014fee:	f8cd 9000 	str.w	r9, [sp]
 8014ff2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014ff6:	4632      	mov	r2, r6
 8014ff8:	4639      	mov	r1, r7
 8014ffa:	4640      	mov	r0, r8
 8014ffc:	44b0      	add	r8, r6
 8014ffe:	f00b fe5a 	bl	8020cb6 <memcpy>
 8015002:	f855 2b04 	ldr.w	r2, [r5], #4
 8015006:	45a3      	cmp	fp, r4
 8015008:	444a      	add	r2, r9
 801500a:	eb0a 0102 	add.w	r1, sl, r2
 801500e:	d02a      	beq.n	8015066 <rcutils_repl_str+0x14a>
 8015010:	6828      	ldr	r0, [r5, #0]
 8015012:	1a82      	subs	r2, r0, r2
 8015014:	4640      	mov	r0, r8
 8015016:	4490      	add	r8, r2
 8015018:	f00b fe4d 	bl	8020cb6 <memcpy>
 801501c:	1c62      	adds	r2, r4, #1
 801501e:	45a3      	cmp	fp, r4
 8015020:	4614      	mov	r4, r2
 8015022:	d8e8      	bhi.n	8014ff6 <rcutils_repl_str+0xda>
 8015024:	f8dd 9000 	ldr.w	r9, [sp]
 8015028:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801502c:	2300      	movs	r3, #0
 801502e:	9a05      	ldr	r2, [sp, #20]
 8015030:	f80a 3002 	strb.w	r3, [sl, r2]
 8015034:	e00b      	b.n	801504e <rcutils_repl_str+0x132>
 8015036:	4620      	mov	r0, r4
 8015038:	f8d9 3000 	ldr.w	r3, [r9]
 801503c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015040:	3001      	adds	r0, #1
 8015042:	4798      	blx	r3
 8015044:	4682      	mov	sl, r0
 8015046:	b110      	cbz	r0, 801504e <rcutils_repl_str+0x132>
 8015048:	9900      	ldr	r1, [sp, #0]
 801504a:	f00b fe2c 	bl	8020ca6 <strcpy>
 801504e:	4638      	mov	r0, r7
 8015050:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015054:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015058:	4798      	blx	r3
 801505a:	4650      	mov	r0, sl
 801505c:	b007      	add	sp, #28
 801505e:	ecbd 8b02 	vpop	{d8}
 8015062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015066:	9b02      	ldr	r3, [sp, #8]
 8015068:	4640      	mov	r0, r8
 801506a:	f8dd 9000 	ldr.w	r9, [sp]
 801506e:	1a9a      	subs	r2, r3, r2
 8015070:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015074:	f00b fe1f 	bl	8020cb6 <memcpy>
 8015078:	e7d8      	b.n	801502c <rcutils_repl_str+0x110>
 801507a:	f04f 0a00 	mov.w	sl, #0
 801507e:	e7e6      	b.n	801504e <rcutils_repl_str+0x132>

08015080 <rcutils_snprintf>:
 8015080:	b40c      	push	{r2, r3}
 8015082:	b530      	push	{r4, r5, lr}
 8015084:	b083      	sub	sp, #12
 8015086:	ab06      	add	r3, sp, #24
 8015088:	f853 2b04 	ldr.w	r2, [r3], #4
 801508c:	9301      	str	r3, [sp, #4]
 801508e:	b1e2      	cbz	r2, 80150ca <rcutils_snprintf+0x4a>
 8015090:	fab0 f480 	clz	r4, r0
 8015094:	fab1 f581 	clz	r5, r1
 8015098:	ea50 0c01 	orrs.w	ip, r0, r1
 801509c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80150a0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80150a4:	d008      	beq.n	80150b8 <rcutils_snprintf+0x38>
 80150a6:	b984      	cbnz	r4, 80150ca <rcutils_snprintf+0x4a>
 80150a8:	b97d      	cbnz	r5, 80150ca <rcutils_snprintf+0x4a>
 80150aa:	f00b fc69 	bl	8020980 <vsniprintf>
 80150ae:	b003      	add	sp, #12
 80150b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80150b4:	b002      	add	sp, #8
 80150b6:	4770      	bx	lr
 80150b8:	4661      	mov	r1, ip
 80150ba:	4660      	mov	r0, ip
 80150bc:	f00b fc60 	bl	8020980 <vsniprintf>
 80150c0:	b003      	add	sp, #12
 80150c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80150c6:	b002      	add	sp, #8
 80150c8:	4770      	bx	lr
 80150ca:	f00b fdbf 	bl	8020c4c <__errno>
 80150ce:	2216      	movs	r2, #22
 80150d0:	4603      	mov	r3, r0
 80150d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150d6:	601a      	str	r2, [r3, #0]
 80150d8:	e7e9      	b.n	80150ae <rcutils_snprintf+0x2e>
 80150da:	bf00      	nop

080150dc <rcutils_vsnprintf>:
 80150dc:	b570      	push	{r4, r5, r6, lr}
 80150de:	b1b2      	cbz	r2, 801510e <rcutils_vsnprintf+0x32>
 80150e0:	fab0 f480 	clz	r4, r0
 80150e4:	fab1 f581 	clz	r5, r1
 80150e8:	ea50 0c01 	orrs.w	ip, r0, r1
 80150ec:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80150f0:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80150f4:	d005      	beq.n	8015102 <rcutils_vsnprintf+0x26>
 80150f6:	b954      	cbnz	r4, 801510e <rcutils_vsnprintf+0x32>
 80150f8:	b94d      	cbnz	r5, 801510e <rcutils_vsnprintf+0x32>
 80150fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150fe:	f00b bc3f 	b.w	8020980 <vsniprintf>
 8015102:	4661      	mov	r1, ip
 8015104:	4660      	mov	r0, ip
 8015106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801510a:	f00b bc39 	b.w	8020980 <vsniprintf>
 801510e:	f00b fd9d 	bl	8020c4c <__errno>
 8015112:	2316      	movs	r3, #22
 8015114:	6003      	str	r3, [r0, #0]
 8015116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801511a:	bd70      	pop	{r4, r5, r6, pc}

0801511c <rcutils_strdup>:
 801511c:	b084      	sub	sp, #16
 801511e:	b570      	push	{r4, r5, r6, lr}
 8015120:	b082      	sub	sp, #8
 8015122:	4605      	mov	r5, r0
 8015124:	ac07      	add	r4, sp, #28
 8015126:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801512a:	b1b0      	cbz	r0, 801515a <rcutils_strdup+0x3e>
 801512c:	f7eb f8e8 	bl	8000300 <strlen>
 8015130:	1c42      	adds	r2, r0, #1
 8015132:	9b07      	ldr	r3, [sp, #28]
 8015134:	4606      	mov	r6, r0
 8015136:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015138:	4610      	mov	r0, r2
 801513a:	9201      	str	r2, [sp, #4]
 801513c:	4798      	blx	r3
 801513e:	4604      	mov	r4, r0
 8015140:	b128      	cbz	r0, 801514e <rcutils_strdup+0x32>
 8015142:	9a01      	ldr	r2, [sp, #4]
 8015144:	4629      	mov	r1, r5
 8015146:	f00b fdb6 	bl	8020cb6 <memcpy>
 801514a:	2300      	movs	r3, #0
 801514c:	55a3      	strb	r3, [r4, r6]
 801514e:	4620      	mov	r0, r4
 8015150:	b002      	add	sp, #8
 8015152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015156:	b004      	add	sp, #16
 8015158:	4770      	bx	lr
 801515a:	4604      	mov	r4, r0
 801515c:	e7f7      	b.n	801514e <rcutils_strdup+0x32>
 801515e:	bf00      	nop

08015160 <rcutils_strndup>:
 8015160:	b082      	sub	sp, #8
 8015162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015164:	ac06      	add	r4, sp, #24
 8015166:	4605      	mov	r5, r0
 8015168:	e884 000c 	stmia.w	r4, {r2, r3}
 801516c:	b188      	cbz	r0, 8015192 <rcutils_strndup+0x32>
 801516e:	1c4f      	adds	r7, r1, #1
 8015170:	460e      	mov	r6, r1
 8015172:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015174:	4638      	mov	r0, r7
 8015176:	4790      	blx	r2
 8015178:	4604      	mov	r4, r0
 801517a:	b128      	cbz	r0, 8015188 <rcutils_strndup+0x28>
 801517c:	463a      	mov	r2, r7
 801517e:	4629      	mov	r1, r5
 8015180:	f00b fd99 	bl	8020cb6 <memcpy>
 8015184:	2300      	movs	r3, #0
 8015186:	55a3      	strb	r3, [r4, r6]
 8015188:	4620      	mov	r0, r4
 801518a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801518e:	b002      	add	sp, #8
 8015190:	4770      	bx	lr
 8015192:	4604      	mov	r4, r0
 8015194:	e7f8      	b.n	8015188 <rcutils_strndup+0x28>
 8015196:	bf00      	nop

08015198 <rcutils_system_time_now>:
 8015198:	b300      	cbz	r0, 80151dc <rcutils_system_time_now+0x44>
 801519a:	b570      	push	{r4, r5, r6, lr}
 801519c:	b084      	sub	sp, #16
 801519e:	4604      	mov	r4, r0
 80151a0:	2001      	movs	r0, #1
 80151a2:	4669      	mov	r1, sp
 80151a4:	f7ee f9f8 	bl	8003598 <clock_gettime>
 80151a8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80151ac:	2900      	cmp	r1, #0
 80151ae:	db12      	blt.n	80151d6 <rcutils_system_time_now+0x3e>
 80151b0:	ea53 0201 	orrs.w	r2, r3, r1
 80151b4:	9d02      	ldr	r5, [sp, #8]
 80151b6:	d101      	bne.n	80151bc <rcutils_system_time_now+0x24>
 80151b8:	2d00      	cmp	r5, #0
 80151ba:	db0c      	blt.n	80151d6 <rcutils_system_time_now+0x3e>
 80151bc:	4e08      	ldr	r6, [pc, #32]	; (80151e0 <rcutils_system_time_now+0x48>)
 80151be:	2000      	movs	r0, #0
 80151c0:	fba3 3206 	umull	r3, r2, r3, r6
 80151c4:	195b      	adds	r3, r3, r5
 80151c6:	fb06 2201 	mla	r2, r6, r1, r2
 80151ca:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80151ce:	e9c4 3200 	strd	r3, r2, [r4]
 80151d2:	b004      	add	sp, #16
 80151d4:	bd70      	pop	{r4, r5, r6, pc}
 80151d6:	2002      	movs	r0, #2
 80151d8:	b004      	add	sp, #16
 80151da:	bd70      	pop	{r4, r5, r6, pc}
 80151dc:	200b      	movs	r0, #11
 80151de:	4770      	bx	lr
 80151e0:	3b9aca00 	.word	0x3b9aca00

080151e4 <rcutils_steady_time_now>:
 80151e4:	b300      	cbz	r0, 8015228 <rcutils_steady_time_now+0x44>
 80151e6:	b570      	push	{r4, r5, r6, lr}
 80151e8:	b084      	sub	sp, #16
 80151ea:	4604      	mov	r4, r0
 80151ec:	2000      	movs	r0, #0
 80151ee:	4669      	mov	r1, sp
 80151f0:	f7ee f9d2 	bl	8003598 <clock_gettime>
 80151f4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80151f8:	2900      	cmp	r1, #0
 80151fa:	db12      	blt.n	8015222 <rcutils_steady_time_now+0x3e>
 80151fc:	ea53 0201 	orrs.w	r2, r3, r1
 8015200:	9d02      	ldr	r5, [sp, #8]
 8015202:	d101      	bne.n	8015208 <rcutils_steady_time_now+0x24>
 8015204:	2d00      	cmp	r5, #0
 8015206:	db0c      	blt.n	8015222 <rcutils_steady_time_now+0x3e>
 8015208:	4e08      	ldr	r6, [pc, #32]	; (801522c <rcutils_steady_time_now+0x48>)
 801520a:	2000      	movs	r0, #0
 801520c:	fba3 3206 	umull	r3, r2, r3, r6
 8015210:	195b      	adds	r3, r3, r5
 8015212:	fb06 2201 	mla	r2, r6, r1, r2
 8015216:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801521a:	e9c4 3200 	strd	r3, r2, [r4]
 801521e:	b004      	add	sp, #16
 8015220:	bd70      	pop	{r4, r5, r6, pc}
 8015222:	2002      	movs	r0, #2
 8015224:	b004      	add	sp, #16
 8015226:	bd70      	pop	{r4, r5, r6, pc}
 8015228:	200b      	movs	r0, #11
 801522a:	4770      	bx	lr
 801522c:	3b9aca00 	.word	0x3b9aca00

08015230 <rmw_get_zero_initialized_init_options>:
 8015230:	b510      	push	{r4, lr}
 8015232:	4604      	mov	r4, r0
 8015234:	2238      	movs	r2, #56	; 0x38
 8015236:	2100      	movs	r1, #0
 8015238:	f00b fc70 	bl	8020b1c <memset>
 801523c:	f104 0010 	add.w	r0, r4, #16
 8015240:	f000 f80a 	bl	8015258 <rmw_get_default_security_options>
 8015244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015248:	4620      	mov	r0, r4
 801524a:	60e3      	str	r3, [r4, #12]
 801524c:	bd10      	pop	{r4, pc}
 801524e:	bf00      	nop

08015250 <rmw_get_default_publisher_options>:
 8015250:	2200      	movs	r2, #0
 8015252:	6002      	str	r2, [r0, #0]
 8015254:	7102      	strb	r2, [r0, #4]
 8015256:	4770      	bx	lr

08015258 <rmw_get_default_security_options>:
 8015258:	2200      	movs	r2, #0
 801525a:	7002      	strb	r2, [r0, #0]
 801525c:	6042      	str	r2, [r0, #4]
 801525e:	4770      	bx	lr

08015260 <rmw_subscription_content_filter_options_fini>:
 8015260:	b1b0      	cbz	r0, 8015290 <rmw_subscription_content_filter_options_fini+0x30>
 8015262:	b538      	push	{r3, r4, r5, lr}
 8015264:	4604      	mov	r4, r0
 8015266:	4608      	mov	r0, r1
 8015268:	460d      	mov	r5, r1
 801526a:	f7ff fdc3 	bl	8014df4 <rcutils_allocator_is_valid>
 801526e:	b168      	cbz	r0, 801528c <rmw_subscription_content_filter_options_fini+0x2c>
 8015270:	6820      	ldr	r0, [r4, #0]
 8015272:	b120      	cbz	r0, 801527e <rmw_subscription_content_filter_options_fini+0x1e>
 8015274:	686b      	ldr	r3, [r5, #4]
 8015276:	6929      	ldr	r1, [r5, #16]
 8015278:	4798      	blx	r3
 801527a:	2300      	movs	r3, #0
 801527c:	6023      	str	r3, [r4, #0]
 801527e:	1d20      	adds	r0, r4, #4
 8015280:	f008 fa06 	bl	801d690 <rcutils_string_array_fini>
 8015284:	3800      	subs	r0, #0
 8015286:	bf18      	it	ne
 8015288:	2001      	movne	r0, #1
 801528a:	bd38      	pop	{r3, r4, r5, pc}
 801528c:	200b      	movs	r0, #11
 801528e:	bd38      	pop	{r3, r4, r5, pc}
 8015290:	200b      	movs	r0, #11
 8015292:	4770      	bx	lr

08015294 <rmw_get_default_subscription_options>:
 8015294:	2200      	movs	r2, #0
 8015296:	e9c0 2200 	strd	r2, r2, [r0]
 801529a:	6082      	str	r2, [r0, #8]
 801529c:	4770      	bx	lr
 801529e:	bf00      	nop

080152a0 <rmw_get_zero_initialized_message_info>:
 80152a0:	b510      	push	{r4, lr}
 80152a2:	4604      	mov	r4, r0
 80152a4:	2240      	movs	r2, #64	; 0x40
 80152a6:	2100      	movs	r1, #0
 80152a8:	f00b fc38 	bl	8020b1c <memset>
 80152ac:	4620      	mov	r0, r4
 80152ae:	bd10      	pop	{r4, pc}

080152b0 <rmw_validate_namespace_with_size>:
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d043      	beq.n	801533c <rmw_validate_namespace_with_size+0x8c>
 80152b4:	b570      	push	{r4, r5, r6, lr}
 80152b6:	4614      	mov	r4, r2
 80152b8:	b0c2      	sub	sp, #264	; 0x108
 80152ba:	b32a      	cbz	r2, 8015308 <rmw_validate_namespace_with_size+0x58>
 80152bc:	2901      	cmp	r1, #1
 80152be:	460d      	mov	r5, r1
 80152c0:	461e      	mov	r6, r3
 80152c2:	d102      	bne.n	80152ca <rmw_validate_namespace_with_size+0x1a>
 80152c4:	7803      	ldrb	r3, [r0, #0]
 80152c6:	2b2f      	cmp	r3, #47	; 0x2f
 80152c8:	d012      	beq.n	80152f0 <rmw_validate_namespace_with_size+0x40>
 80152ca:	aa01      	add	r2, sp, #4
 80152cc:	4669      	mov	r1, sp
 80152ce:	f008 fbd3 	bl	801da78 <rmw_validate_full_topic_name>
 80152d2:	b980      	cbnz	r0, 80152f6 <rmw_validate_namespace_with_size+0x46>
 80152d4:	9a00      	ldr	r2, [sp, #0]
 80152d6:	b14a      	cbz	r2, 80152ec <rmw_validate_namespace_with_size+0x3c>
 80152d8:	2a07      	cmp	r2, #7
 80152da:	d007      	beq.n	80152ec <rmw_validate_namespace_with_size+0x3c>
 80152dc:	1e53      	subs	r3, r2, #1
 80152de:	2b05      	cmp	r3, #5
 80152e0:	d82e      	bhi.n	8015340 <rmw_validate_namespace_with_size+0x90>
 80152e2:	e8df f003 	tbb	[pc, r3]
 80152e6:	1f1c      	.short	0x1f1c
 80152e8:	14282522 	.word	0x14282522
 80152ec:	2df5      	cmp	r5, #245	; 0xf5
 80152ee:	d804      	bhi.n	80152fa <rmw_validate_namespace_with_size+0x4a>
 80152f0:	2300      	movs	r3, #0
 80152f2:	4618      	mov	r0, r3
 80152f4:	6023      	str	r3, [r4, #0]
 80152f6:	b042      	add	sp, #264	; 0x108
 80152f8:	bd70      	pop	{r4, r5, r6, pc}
 80152fa:	2307      	movs	r3, #7
 80152fc:	6023      	str	r3, [r4, #0]
 80152fe:	2e00      	cmp	r6, #0
 8015300:	d0f9      	beq.n	80152f6 <rmw_validate_namespace_with_size+0x46>
 8015302:	23f4      	movs	r3, #244	; 0xf4
 8015304:	6033      	str	r3, [r6, #0]
 8015306:	e7f6      	b.n	80152f6 <rmw_validate_namespace_with_size+0x46>
 8015308:	200b      	movs	r0, #11
 801530a:	b042      	add	sp, #264	; 0x108
 801530c:	bd70      	pop	{r4, r5, r6, pc}
 801530e:	2306      	movs	r3, #6
 8015310:	6023      	str	r3, [r4, #0]
 8015312:	2e00      	cmp	r6, #0
 8015314:	d0ef      	beq.n	80152f6 <rmw_validate_namespace_with_size+0x46>
 8015316:	9b01      	ldr	r3, [sp, #4]
 8015318:	6033      	str	r3, [r6, #0]
 801531a:	b042      	add	sp, #264	; 0x108
 801531c:	bd70      	pop	{r4, r5, r6, pc}
 801531e:	2301      	movs	r3, #1
 8015320:	6023      	str	r3, [r4, #0]
 8015322:	e7f6      	b.n	8015312 <rmw_validate_namespace_with_size+0x62>
 8015324:	2302      	movs	r3, #2
 8015326:	6023      	str	r3, [r4, #0]
 8015328:	e7f3      	b.n	8015312 <rmw_validate_namespace_with_size+0x62>
 801532a:	2303      	movs	r3, #3
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	e7f0      	b.n	8015312 <rmw_validate_namespace_with_size+0x62>
 8015330:	2304      	movs	r3, #4
 8015332:	6023      	str	r3, [r4, #0]
 8015334:	e7ed      	b.n	8015312 <rmw_validate_namespace_with_size+0x62>
 8015336:	2305      	movs	r3, #5
 8015338:	6023      	str	r3, [r4, #0]
 801533a:	e7ea      	b.n	8015312 <rmw_validate_namespace_with_size+0x62>
 801533c:	200b      	movs	r0, #11
 801533e:	4770      	bx	lr
 8015340:	4613      	mov	r3, r2
 8015342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015346:	4a03      	ldr	r2, [pc, #12]	; (8015354 <rmw_validate_namespace_with_size+0xa4>)
 8015348:	a802      	add	r0, sp, #8
 801534a:	f7ff fe99 	bl	8015080 <rcutils_snprintf>
 801534e:	2001      	movs	r0, #1
 8015350:	e7d1      	b.n	80152f6 <rmw_validate_namespace_with_size+0x46>
 8015352:	bf00      	nop
 8015354:	08024e9c 	.word	0x08024e9c

08015358 <rmw_validate_namespace>:
 8015358:	b168      	cbz	r0, 8015376 <rmw_validate_namespace+0x1e>
 801535a:	b570      	push	{r4, r5, r6, lr}
 801535c:	460d      	mov	r5, r1
 801535e:	4616      	mov	r6, r2
 8015360:	4604      	mov	r4, r0
 8015362:	f7ea ffcd 	bl	8000300 <strlen>
 8015366:	4633      	mov	r3, r6
 8015368:	4601      	mov	r1, r0
 801536a:	462a      	mov	r2, r5
 801536c:	4620      	mov	r0, r4
 801536e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015372:	f7ff bf9d 	b.w	80152b0 <rmw_validate_namespace_with_size>
 8015376:	200b      	movs	r0, #11
 8015378:	4770      	bx	lr
 801537a:	bf00      	nop

0801537c <rmw_namespace_validation_result_string>:
 801537c:	2807      	cmp	r0, #7
 801537e:	d803      	bhi.n	8015388 <rmw_namespace_validation_result_string+0xc>
 8015380:	4b02      	ldr	r3, [pc, #8]	; (801538c <rmw_namespace_validation_result_string+0x10>)
 8015382:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015386:	4770      	bx	lr
 8015388:	4801      	ldr	r0, [pc, #4]	; (8015390 <rmw_namespace_validation_result_string+0x14>)
 801538a:	4770      	bx	lr
 801538c:	08025094 	.word	0x08025094
 8015390:	08024eec 	.word	0x08024eec

08015394 <rmw_validate_node_name>:
 8015394:	2800      	cmp	r0, #0
 8015396:	d042      	beq.n	801541e <rmw_validate_node_name+0x8a>
 8015398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801539c:	460d      	mov	r5, r1
 801539e:	2900      	cmp	r1, #0
 80153a0:	d03f      	beq.n	8015422 <rmw_validate_node_name+0x8e>
 80153a2:	4604      	mov	r4, r0
 80153a4:	4616      	mov	r6, r2
 80153a6:	f7ea ffab 	bl	8000300 <strlen>
 80153aa:	b310      	cbz	r0, 80153f2 <rmw_validate_node_name+0x5e>
 80153ac:	1e63      	subs	r3, r4, #1
 80153ae:	f1c4 0101 	rsb	r1, r4, #1
 80153b2:	eb03 0800 	add.w	r8, r3, r0
 80153b6:	18cf      	adds	r7, r1, r3
 80153b8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80153bc:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80153c0:	f02e 0c20 	bic.w	ip, lr, #32
 80153c4:	2a09      	cmp	r2, #9
 80153c6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80153ca:	d905      	bls.n	80153d8 <rmw_validate_node_name+0x44>
 80153cc:	f1bc 0f19 	cmp.w	ip, #25
 80153d0:	d902      	bls.n	80153d8 <rmw_validate_node_name+0x44>
 80153d2:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80153d6:	d114      	bne.n	8015402 <rmw_validate_node_name+0x6e>
 80153d8:	4598      	cmp	r8, r3
 80153da:	d1ec      	bne.n	80153b6 <rmw_validate_node_name+0x22>
 80153dc:	7822      	ldrb	r2, [r4, #0]
 80153de:	4b16      	ldr	r3, [pc, #88]	; (8015438 <rmw_validate_node_name+0xa4>)
 80153e0:	5cd3      	ldrb	r3, [r2, r3]
 80153e2:	f013 0304 	ands.w	r3, r3, #4
 80153e6:	d113      	bne.n	8015410 <rmw_validate_node_name+0x7c>
 80153e8:	28ff      	cmp	r0, #255	; 0xff
 80153ea:	d81c      	bhi.n	8015426 <rmw_validate_node_name+0x92>
 80153ec:	4618      	mov	r0, r3
 80153ee:	602b      	str	r3, [r5, #0]
 80153f0:	e00c      	b.n	801540c <rmw_validate_node_name+0x78>
 80153f2:	2301      	movs	r3, #1
 80153f4:	602b      	str	r3, [r5, #0]
 80153f6:	b17e      	cbz	r6, 8015418 <rmw_validate_node_name+0x84>
 80153f8:	2300      	movs	r3, #0
 80153fa:	4618      	mov	r0, r3
 80153fc:	6033      	str	r3, [r6, #0]
 80153fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015402:	2302      	movs	r3, #2
 8015404:	602b      	str	r3, [r5, #0]
 8015406:	b13e      	cbz	r6, 8015418 <rmw_validate_node_name+0x84>
 8015408:	2000      	movs	r0, #0
 801540a:	6037      	str	r7, [r6, #0]
 801540c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015410:	2303      	movs	r3, #3
 8015412:	602b      	str	r3, [r5, #0]
 8015414:	2e00      	cmp	r6, #0
 8015416:	d1ef      	bne.n	80153f8 <rmw_validate_node_name+0x64>
 8015418:	2000      	movs	r0, #0
 801541a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801541e:	200b      	movs	r0, #11
 8015420:	4770      	bx	lr
 8015422:	200b      	movs	r0, #11
 8015424:	e7f2      	b.n	801540c <rmw_validate_node_name+0x78>
 8015426:	2204      	movs	r2, #4
 8015428:	602a      	str	r2, [r5, #0]
 801542a:	2e00      	cmp	r6, #0
 801542c:	d0f4      	beq.n	8015418 <rmw_validate_node_name+0x84>
 801542e:	22fe      	movs	r2, #254	; 0xfe
 8015430:	4618      	mov	r0, r3
 8015432:	6032      	str	r2, [r6, #0]
 8015434:	e7ea      	b.n	801540c <rmw_validate_node_name+0x78>
 8015436:	bf00      	nop
 8015438:	080258cc 	.word	0x080258cc

0801543c <rmw_node_name_validation_result_string>:
 801543c:	2804      	cmp	r0, #4
 801543e:	d803      	bhi.n	8015448 <rmw_node_name_validation_result_string+0xc>
 8015440:	4b02      	ldr	r3, [pc, #8]	; (801544c <rmw_node_name_validation_result_string+0x10>)
 8015442:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015446:	4770      	bx	lr
 8015448:	4801      	ldr	r0, [pc, #4]	; (8015450 <rmw_node_name_validation_result_string+0x14>)
 801544a:	4770      	bx	lr
 801544c:	080251a0 	.word	0x080251a0
 8015450:	080250b4 	.word	0x080250b4

08015454 <rmw_uros_set_custom_transport>:
 8015454:	b470      	push	{r4, r5, r6}
 8015456:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 801545a:	b162      	cbz	r2, 8015476 <rmw_uros_set_custom_transport+0x22>
 801545c:	b15b      	cbz	r3, 8015476 <rmw_uros_set_custom_transport+0x22>
 801545e:	b155      	cbz	r5, 8015476 <rmw_uros_set_custom_transport+0x22>
 8015460:	b14e      	cbz	r6, 8015476 <rmw_uros_set_custom_transport+0x22>
 8015462:	4c06      	ldr	r4, [pc, #24]	; (801547c <rmw_uros_set_custom_transport+0x28>)
 8015464:	7020      	strb	r0, [r4, #0]
 8015466:	2000      	movs	r0, #0
 8015468:	6166      	str	r6, [r4, #20]
 801546a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801546e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015472:	bc70      	pop	{r4, r5, r6}
 8015474:	4770      	bx	lr
 8015476:	200b      	movs	r0, #11
 8015478:	bc70      	pop	{r4, r5, r6}
 801547a:	4770      	bx	lr
 801547c:	200124a4 	.word	0x200124a4

08015480 <rmw_init_options_init>:
 8015480:	b084      	sub	sp, #16
 8015482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015484:	b083      	sub	sp, #12
 8015486:	ad09      	add	r5, sp, #36	; 0x24
 8015488:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801548c:	b130      	cbz	r0, 801549c <rmw_init_options_init+0x1c>
 801548e:	4604      	mov	r4, r0
 8015490:	4628      	mov	r0, r5
 8015492:	f7ff fcaf 	bl	8014df4 <rcutils_allocator_is_valid>
 8015496:	b108      	cbz	r0, 801549c <rmw_init_options_init+0x1c>
 8015498:	68a6      	ldr	r6, [r4, #8]
 801549a:	b12e      	cbz	r6, 80154a8 <rmw_init_options_init+0x28>
 801549c:	200b      	movs	r0, #11
 801549e:	b003      	add	sp, #12
 80154a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80154a4:	b004      	add	sp, #16
 80154a6:	4770      	bx	lr
 80154a8:	2200      	movs	r2, #0
 80154aa:	2300      	movs	r3, #0
 80154ac:	f104 0c20 	add.w	ip, r4, #32
 80154b0:	f8df e098 	ldr.w	lr, [pc, #152]	; 801554c <rmw_init_options_init+0xcc>
 80154b4:	466f      	mov	r7, sp
 80154b6:	e9c4 2300 	strd	r2, r3, [r4]
 80154ba:	4b20      	ldr	r3, [pc, #128]	; (801553c <rmw_init_options_init+0xbc>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	60a3      	str	r3, [r4, #8]
 80154c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154c6:	682b      	ldr	r3, [r5, #0]
 80154c8:	4638      	mov	r0, r7
 80154ca:	f8cc 3000 	str.w	r3, [ip]
 80154ce:	f8c4 e01c 	str.w	lr, [r4, #28]
 80154d2:	60e6      	str	r6, [r4, #12]
 80154d4:	f7ff fec0 	bl	8015258 <rmw_get_default_security_options>
 80154d8:	f104 0310 	add.w	r3, r4, #16
 80154dc:	2203      	movs	r2, #3
 80154de:	e897 0003 	ldmia.w	r7, {r0, r1}
 80154e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80154e6:	4816      	ldr	r0, [pc, #88]	; (8015540 <rmw_init_options_init+0xc0>)
 80154e8:	4916      	ldr	r1, [pc, #88]	; (8015544 <rmw_init_options_init+0xc4>)
 80154ea:	7626      	strb	r6, [r4, #24]
 80154ec:	f001 fa62 	bl	80169b4 <rmw_uxrce_init_init_options_impl_memory>
 80154f0:	4813      	ldr	r0, [pc, #76]	; (8015540 <rmw_init_options_init+0xc0>)
 80154f2:	f008 fc25 	bl	801dd40 <get_memory>
 80154f6:	b1f0      	cbz	r0, 8015536 <rmw_init_options_init+0xb6>
 80154f8:	4a13      	ldr	r2, [pc, #76]	; (8015548 <rmw_init_options_init+0xc8>)
 80154fa:	6883      	ldr	r3, [r0, #8]
 80154fc:	6851      	ldr	r1, [r2, #4]
 80154fe:	6363      	str	r3, [r4, #52]	; 0x34
 8015500:	7810      	ldrb	r0, [r2, #0]
 8015502:	6159      	str	r1, [r3, #20]
 8015504:	68d1      	ldr	r1, [r2, #12]
 8015506:	7418      	strb	r0, [r3, #16]
 8015508:	61d9      	str	r1, [r3, #28]
 801550a:	6911      	ldr	r1, [r2, #16]
 801550c:	6219      	str	r1, [r3, #32]
 801550e:	6951      	ldr	r1, [r2, #20]
 8015510:	6892      	ldr	r2, [r2, #8]
 8015512:	6259      	str	r1, [r3, #36]	; 0x24
 8015514:	619a      	str	r2, [r3, #24]
 8015516:	f004 fb65 	bl	8019be4 <uxr_nanos>
 801551a:	f009 ffd7 	bl	801f4cc <srand>
 801551e:	f00a f803 	bl	801f528 <rand>
 8015522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015524:	6298      	str	r0, [r3, #40]	; 0x28
 8015526:	2800      	cmp	r0, #0
 8015528:	d0f9      	beq.n	801551e <rmw_init_options_init+0x9e>
 801552a:	2000      	movs	r0, #0
 801552c:	b003      	add	sp, #12
 801552e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015532:	b004      	add	sp, #16
 8015534:	4770      	bx	lr
 8015536:	2001      	movs	r0, #1
 8015538:	e7b1      	b.n	801549e <rmw_init_options_init+0x1e>
 801553a:	bf00      	nop
 801553c:	08025824 	.word	0x08025824
 8015540:	20016efc 	.word	0x20016efc
 8015544:	20012798 	.word	0x20012798
 8015548:	200124a4 	.word	0x200124a4
 801554c:	08024bb0 	.word	0x08024bb0

08015550 <rmw_init_options_copy>:
 8015550:	2800      	cmp	r0, #0
 8015552:	d047      	beq.n	80155e4 <rmw_init_options_copy+0x94>
 8015554:	b570      	push	{r4, r5, r6, lr}
 8015556:	460d      	mov	r5, r1
 8015558:	b149      	cbz	r1, 801556e <rmw_init_options_copy+0x1e>
 801555a:	4604      	mov	r4, r0
 801555c:	6880      	ldr	r0, [r0, #8]
 801555e:	b120      	cbz	r0, 801556a <rmw_init_options_copy+0x1a>
 8015560:	4b22      	ldr	r3, [pc, #136]	; (80155ec <rmw_init_options_copy+0x9c>)
 8015562:	6819      	ldr	r1, [r3, #0]
 8015564:	f7ea fe6c 	bl	8000240 <strcmp>
 8015568:	bba8      	cbnz	r0, 80155d6 <rmw_init_options_copy+0x86>
 801556a:	68ab      	ldr	r3, [r5, #8]
 801556c:	b11b      	cbz	r3, 8015576 <rmw_init_options_copy+0x26>
 801556e:	f04f 0c0b 	mov.w	ip, #11
 8015572:	4660      	mov	r0, ip
 8015574:	bd70      	pop	{r4, r5, r6, pc}
 8015576:	4623      	mov	r3, r4
 8015578:	462a      	mov	r2, r5
 801557a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801557e:	f8d3 e000 	ldr.w	lr, [r3]
 8015582:	3310      	adds	r3, #16
 8015584:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8015588:	3210      	adds	r2, #16
 801558a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801558e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015592:	42b3      	cmp	r3, r6
 8015594:	f842 ec10 	str.w	lr, [r2, #-16]
 8015598:	f842 cc0c 	str.w	ip, [r2, #-12]
 801559c:	f842 0c08 	str.w	r0, [r2, #-8]
 80155a0:	f842 1c04 	str.w	r1, [r2, #-4]
 80155a4:	d1eb      	bne.n	801557e <rmw_init_options_copy+0x2e>
 80155a6:	6819      	ldr	r1, [r3, #0]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	4811      	ldr	r0, [pc, #68]	; (80155f0 <rmw_init_options_copy+0xa0>)
 80155ac:	6011      	str	r1, [r2, #0]
 80155ae:	6053      	str	r3, [r2, #4]
 80155b0:	f008 fbc6 	bl	801dd40 <get_memory>
 80155b4:	b198      	cbz	r0, 80155de <rmw_init_options_copy+0x8e>
 80155b6:	6883      	ldr	r3, [r0, #8]
 80155b8:	f04f 0c00 	mov.w	ip, #0
 80155bc:	636b      	str	r3, [r5, #52]	; 0x34
 80155be:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80155c0:	f103 0410 	add.w	r4, r3, #16
 80155c4:	3510      	adds	r5, #16
 80155c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80155ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80155d2:	4660      	mov	r0, ip
 80155d4:	bd70      	pop	{r4, r5, r6, pc}
 80155d6:	f04f 0c0c 	mov.w	ip, #12
 80155da:	4660      	mov	r0, ip
 80155dc:	bd70      	pop	{r4, r5, r6, pc}
 80155de:	f04f 0c01 	mov.w	ip, #1
 80155e2:	e7c6      	b.n	8015572 <rmw_init_options_copy+0x22>
 80155e4:	f04f 0c0b 	mov.w	ip, #11
 80155e8:	4660      	mov	r0, ip
 80155ea:	4770      	bx	lr
 80155ec:	08025824 	.word	0x08025824
 80155f0:	20016efc 	.word	0x20016efc

080155f4 <rmw_init_options_fini>:
 80155f4:	b510      	push	{r4, lr}
 80155f6:	b08e      	sub	sp, #56	; 0x38
 80155f8:	b388      	cbz	r0, 801565e <rmw_init_options_fini+0x6a>
 80155fa:	4604      	mov	r4, r0
 80155fc:	3020      	adds	r0, #32
 80155fe:	f7ff fbf9 	bl	8014df4 <rcutils_allocator_is_valid>
 8015602:	b360      	cbz	r0, 801565e <rmw_init_options_fini+0x6a>
 8015604:	68a0      	ldr	r0, [r4, #8]
 8015606:	b120      	cbz	r0, 8015612 <rmw_init_options_fini+0x1e>
 8015608:	4b1a      	ldr	r3, [pc, #104]	; (8015674 <rmw_init_options_fini+0x80>)
 801560a:	6819      	ldr	r1, [r3, #0]
 801560c:	f7ea fe18 	bl	8000240 <strcmp>
 8015610:	bb68      	cbnz	r0, 801566e <rmw_init_options_fini+0x7a>
 8015612:	4b19      	ldr	r3, [pc, #100]	; (8015678 <rmw_init_options_fini+0x84>)
 8015614:	6819      	ldr	r1, [r3, #0]
 8015616:	b331      	cbz	r1, 8015666 <rmw_init_options_fini+0x72>
 8015618:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801561a:	e001      	b.n	8015620 <rmw_init_options_fini+0x2c>
 801561c:	6849      	ldr	r1, [r1, #4]
 801561e:	b311      	cbz	r1, 8015666 <rmw_init_options_fini+0x72>
 8015620:	688b      	ldr	r3, [r1, #8]
 8015622:	429a      	cmp	r2, r3
 8015624:	d1fa      	bne.n	801561c <rmw_init_options_fini+0x28>
 8015626:	4814      	ldr	r0, [pc, #80]	; (8015678 <rmw_init_options_fini+0x84>)
 8015628:	f008 fb9a 	bl	801dd60 <put_memory>
 801562c:	4668      	mov	r0, sp
 801562e:	f7ff fdff 	bl	8015230 <rmw_get_zero_initialized_init_options>
 8015632:	46ee      	mov	lr, sp
 8015634:	46a4      	mov	ip, r4
 8015636:	2400      	movs	r4, #0
 8015638:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801563c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015640:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015644:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015648:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801564c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015650:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015654:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015658:	4620      	mov	r0, r4
 801565a:	b00e      	add	sp, #56	; 0x38
 801565c:	bd10      	pop	{r4, pc}
 801565e:	240b      	movs	r4, #11
 8015660:	4620      	mov	r0, r4
 8015662:	b00e      	add	sp, #56	; 0x38
 8015664:	bd10      	pop	{r4, pc}
 8015666:	2401      	movs	r4, #1
 8015668:	4620      	mov	r0, r4
 801566a:	b00e      	add	sp, #56	; 0x38
 801566c:	bd10      	pop	{r4, pc}
 801566e:	240c      	movs	r4, #12
 8015670:	e7f2      	b.n	8015658 <rmw_init_options_fini+0x64>
 8015672:	bf00      	nop
 8015674:	08025824 	.word	0x08025824
 8015678:	20016efc 	.word	0x20016efc

0801567c <rmw_init>:
 801567c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015680:	b083      	sub	sp, #12
 8015682:	2800      	cmp	r0, #0
 8015684:	f000 80d3 	beq.w	801582e <rmw_init+0x1b2>
 8015688:	460e      	mov	r6, r1
 801568a:	2900      	cmp	r1, #0
 801568c:	f000 80cf 	beq.w	801582e <rmw_init+0x1b2>
 8015690:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015692:	4605      	mov	r5, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	f000 80ca 	beq.w	801582e <rmw_init+0x1b2>
 801569a:	4b78      	ldr	r3, [pc, #480]	; (801587c <rmw_init+0x200>)
 801569c:	6880      	ldr	r0, [r0, #8]
 801569e:	681f      	ldr	r7, [r3, #0]
 80156a0:	b128      	cbz	r0, 80156ae <rmw_init+0x32>
 80156a2:	4639      	mov	r1, r7
 80156a4:	f7ea fdcc 	bl	8000240 <strcmp>
 80156a8:	2800      	cmp	r0, #0
 80156aa:	f040 80ca 	bne.w	8015842 <rmw_init+0x1c6>
 80156ae:	4c74      	ldr	r4, [pc, #464]	; (8015880 <rmw_init+0x204>)
 80156b0:	f04f 0800 	mov.w	r8, #0
 80156b4:	4973      	ldr	r1, [pc, #460]	; (8015884 <rmw_init+0x208>)
 80156b6:	4874      	ldr	r0, [pc, #464]	; (8015888 <rmw_init+0x20c>)
 80156b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80156bc:	60b7      	str	r7, [r6, #8]
 80156be:	e9c6 2300 	strd	r2, r3, [r6]
 80156c2:	68eb      	ldr	r3, [r5, #12]
 80156c4:	2201      	movs	r2, #1
 80156c6:	64b3      	str	r3, [r6, #72]	; 0x48
 80156c8:	f001 f914 	bl	80168f4 <rmw_uxrce_init_session_memory>
 80156cc:	4620      	mov	r0, r4
 80156ce:	2204      	movs	r2, #4
 80156d0:	496e      	ldr	r1, [pc, #440]	; (801588c <rmw_init+0x210>)
 80156d2:	f001 f94f 	bl	8016974 <rmw_uxrce_init_static_input_buffer_memory>
 80156d6:	486c      	ldr	r0, [pc, #432]	; (8015888 <rmw_init+0x20c>)
 80156d8:	f884 800d 	strb.w	r8, [r4, #13]
 80156dc:	f008 fb30 	bl	801dd40 <get_memory>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	f000 80a9 	beq.w	8015838 <rmw_init+0x1bc>
 80156e6:	6884      	ldr	r4, [r0, #8]
 80156e8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80156ea:	f104 0910 	add.w	r9, r4, #16
 80156ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80156f0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80156f4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80156f8:	9101      	str	r1, [sp, #4]
 80156fa:	4661      	mov	r1, ip
 80156fc:	6a00      	ldr	r0, [r0, #32]
 80156fe:	9000      	str	r0, [sp, #0]
 8015700:	4648      	mov	r0, r9
 8015702:	f002 fa19 	bl	8017b38 <uxr_set_custom_transport_callbacks>
 8015706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801570a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801570e:	4960      	ldr	r1, [pc, #384]	; (8015890 <rmw_init+0x214>)
 8015710:	4860      	ldr	r0, [pc, #384]	; (8015894 <rmw_init+0x218>)
 8015712:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015716:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801571a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801571e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8015722:	2201      	movs	r2, #1
 8015724:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015728:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801572c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015730:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8015734:	64f4      	str	r4, [r6, #76]	; 0x4c
 8015736:	f001 f8bd 	bl	80168b4 <rmw_uxrce_init_node_memory>
 801573a:	2205      	movs	r2, #5
 801573c:	4956      	ldr	r1, [pc, #344]	; (8015898 <rmw_init+0x21c>)
 801573e:	4857      	ldr	r0, [pc, #348]	; (801589c <rmw_init+0x220>)
 8015740:	f001 f898 	bl	8016874 <rmw_uxrce_init_subscription_memory>
 8015744:	220a      	movs	r2, #10
 8015746:	4956      	ldr	r1, [pc, #344]	; (80158a0 <rmw_init+0x224>)
 8015748:	4856      	ldr	r0, [pc, #344]	; (80158a4 <rmw_init+0x228>)
 801574a:	f001 f873 	bl	8016834 <rmw_uxrce_init_publisher_memory>
 801574e:	2201      	movs	r2, #1
 8015750:	4955      	ldr	r1, [pc, #340]	; (80158a8 <rmw_init+0x22c>)
 8015752:	4856      	ldr	r0, [pc, #344]	; (80158ac <rmw_init+0x230>)
 8015754:	f001 f82e 	bl	80167b4 <rmw_uxrce_init_service_memory>
 8015758:	2201      	movs	r2, #1
 801575a:	4955      	ldr	r1, [pc, #340]	; (80158b0 <rmw_init+0x234>)
 801575c:	4855      	ldr	r0, [pc, #340]	; (80158b4 <rmw_init+0x238>)
 801575e:	f001 f849 	bl	80167f4 <rmw_uxrce_init_client_memory>
 8015762:	220f      	movs	r2, #15
 8015764:	4954      	ldr	r1, [pc, #336]	; (80158b8 <rmw_init+0x23c>)
 8015766:	4855      	ldr	r0, [pc, #340]	; (80158bc <rmw_init+0x240>)
 8015768:	f001 f8e4 	bl	8016934 <rmw_uxrce_init_topic_memory>
 801576c:	2203      	movs	r2, #3
 801576e:	4954      	ldr	r1, [pc, #336]	; (80158c0 <rmw_init+0x244>)
 8015770:	4854      	ldr	r0, [pc, #336]	; (80158c4 <rmw_init+0x248>)
 8015772:	f001 f91f 	bl	80169b4 <rmw_uxrce_init_init_options_impl_memory>
 8015776:	2204      	movs	r2, #4
 8015778:	4953      	ldr	r1, [pc, #332]	; (80158c8 <rmw_init+0x24c>)
 801577a:	4854      	ldr	r0, [pc, #336]	; (80158cc <rmw_init+0x250>)
 801577c:	f001 f93a 	bl	80169f4 <rmw_uxrce_init_wait_set_memory>
 8015780:	4953      	ldr	r1, [pc, #332]	; (80158d0 <rmw_init+0x254>)
 8015782:	4854      	ldr	r0, [pc, #336]	; (80158d4 <rmw_init+0x258>)
 8015784:	2204      	movs	r2, #4
 8015786:	f001 f955 	bl	8016a34 <rmw_uxrce_init_guard_condition_memory>
 801578a:	4642      	mov	r2, r8
 801578c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801578e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015790:	f000 fff8 	bl	8016784 <rmw_uxrce_transport_init>
 8015794:	4607      	mov	r7, r0
 8015796:	2800      	cmp	r0, #0
 8015798:	d158      	bne.n	801584c <rmw_init+0x1d0>
 801579a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801579c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80157a0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80157a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80157a6:	4628      	mov	r0, r5
 80157a8:	f002 fbf6 	bl	8017f98 <uxr_init_session>
 80157ac:	4622      	mov	r2, r4
 80157ae:	494a      	ldr	r1, [pc, #296]	; (80158d8 <rmw_init+0x25c>)
 80157b0:	4628      	mov	r0, r5
 80157b2:	f002 fc15 	bl	8017fe0 <uxr_set_topic_callback>
 80157b6:	463a      	mov	r2, r7
 80157b8:	4948      	ldr	r1, [pc, #288]	; (80158dc <rmw_init+0x260>)
 80157ba:	4628      	mov	r0, r5
 80157bc:	f002 fc0c 	bl	8017fd8 <uxr_set_status_callback>
 80157c0:	463a      	mov	r2, r7
 80157c2:	4947      	ldr	r1, [pc, #284]	; (80158e0 <rmw_init+0x264>)
 80157c4:	4628      	mov	r0, r5
 80157c6:	f002 fc0f 	bl	8017fe8 <uxr_set_request_callback>
 80157ca:	463a      	mov	r2, r7
 80157cc:	4945      	ldr	r1, [pc, #276]	; (80158e4 <rmw_init+0x268>)
 80157ce:	4628      	mov	r0, r5
 80157d0:	f002 fc0e 	bl	8017ff0 <uxr_set_reply_callback>
 80157d4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80157d8:	2304      	movs	r3, #4
 80157da:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80157de:	0092      	lsls	r2, r2, #2
 80157e0:	4628      	mov	r0, r5
 80157e2:	f002 fc45 	bl	8018070 <uxr_create_input_reliable_stream>
 80157e6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80157ea:	2304      	movs	r3, #4
 80157ec:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80157f0:	0092      	lsls	r2, r2, #2
 80157f2:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80157f6:	4628      	mov	r0, r5
 80157f8:	f002 fc10 	bl	801801c <uxr_create_output_reliable_stream>
 80157fc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015800:	4628      	mov	r0, r5
 8015802:	f002 fc2f 	bl	8018064 <uxr_create_input_best_effort_stream>
 8015806:	f241 3194 	movw	r1, #5012	; 0x1394
 801580a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801580e:	4628      	mov	r0, r5
 8015810:	4421      	add	r1, r4
 8015812:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015816:	f002 fbef 	bl	8017ff8 <uxr_create_output_best_effort_stream>
 801581a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801581e:	4628      	mov	r0, r5
 8015820:	f003 f978 	bl	8018b14 <uxr_create_session>
 8015824:	b1f8      	cbz	r0, 8015866 <rmw_init+0x1ea>
 8015826:	4638      	mov	r0, r7
 8015828:	b003      	add	sp, #12
 801582a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801582e:	270b      	movs	r7, #11
 8015830:	4638      	mov	r0, r7
 8015832:	b003      	add	sp, #12
 8015834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015838:	2701      	movs	r7, #1
 801583a:	4638      	mov	r0, r7
 801583c:	b003      	add	sp, #12
 801583e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015842:	270c      	movs	r7, #12
 8015844:	4638      	mov	r0, r7
 8015846:	b003      	add	sp, #12
 8015848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801584c:	4648      	mov	r0, r9
 801584e:	f002 f9b1 	bl	8017bb4 <uxr_close_custom_transport>
 8015852:	4621      	mov	r1, r4
 8015854:	480c      	ldr	r0, [pc, #48]	; (8015888 <rmw_init+0x20c>)
 8015856:	f008 fa83 	bl	801dd60 <put_memory>
 801585a:	4638      	mov	r0, r7
 801585c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015860:	b003      	add	sp, #12
 8015862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015866:	4648      	mov	r0, r9
 8015868:	f002 f9a4 	bl	8017bb4 <uxr_close_custom_transport>
 801586c:	4621      	mov	r1, r4
 801586e:	4806      	ldr	r0, [pc, #24]	; (8015888 <rmw_init+0x20c>)
 8015870:	f008 fa76 	bl	801dd60 <put_memory>
 8015874:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015876:	2701      	movs	r7, #1
 8015878:	e7d5      	b.n	8015826 <rmw_init+0x1aa>
 801587a:	bf00      	nop
 801587c:	08025824 	.word	0x08025824
 8015880:	20016f4c 	.word	0x20016f4c
 8015884:	200131f8 	.word	0x200131f8
 8015888:	20016f3c 	.word	0x20016f3c
 801588c:	200147a0 	.word	0x200147a0
 8015890:	2001281c 	.word	0x2001281c
 8015894:	20016f0c 	.word	0x20016f0c
 8015898:	200168a0 	.word	0x200168a0
 801589c:	20016f5c 	.word	0x20016f5c
 80158a0:	200128c0 	.word	0x200128c0
 80158a4:	20016f1c 	.word	0x20016f1c
 80158a8:	20013130 	.word	0x20013130
 80158ac:	20016f2c 	.word	0x20016f2c
 80158b0:	20012650 	.word	0x20012650
 80158b4:	2001263c 	.word	0x2001263c
 80158b8:	20016cd8 	.word	0x20016cd8
 80158bc:	20016f6c 	.word	0x20016f6c
 80158c0:	20012798 	.word	0x20012798
 80158c4:	20016efc 	.word	0x20016efc
 80158c8:	20016e7c 	.word	0x20016e7c
 80158cc:	20016f7c 	.word	0x20016f7c
 80158d0:	20012718 	.word	0x20012718
 80158d4:	20016eec 	.word	0x20016eec
 80158d8:	0801db79 	.word	0x0801db79
 80158dc:	0801db71 	.word	0x0801db71
 80158e0:	0801dc11 	.word	0x0801dc11
 80158e4:	0801dcad 	.word	0x0801dcad

080158e8 <rmw_context_fini>:
 80158e8:	4b17      	ldr	r3, [pc, #92]	; (8015948 <rmw_context_fini+0x60>)
 80158ea:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80158ec:	b570      	push	{r4, r5, r6, lr}
 80158ee:	681c      	ldr	r4, [r3, #0]
 80158f0:	4605      	mov	r5, r0
 80158f2:	b334      	cbz	r4, 8015942 <rmw_context_fini+0x5a>
 80158f4:	2600      	movs	r6, #0
 80158f6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80158fa:	6902      	ldr	r2, [r0, #16]
 80158fc:	428a      	cmp	r2, r1
 80158fe:	d018      	beq.n	8015932 <rmw_context_fini+0x4a>
 8015900:	2c00      	cmp	r4, #0
 8015902:	d1f8      	bne.n	80158f6 <rmw_context_fini+0xe>
 8015904:	b189      	cbz	r1, 801592a <rmw_context_fini+0x42>
 8015906:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801590a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801590e:	789b      	ldrb	r3, [r3, #2]
 8015910:	2b01      	cmp	r3, #1
 8015912:	bf14      	ite	ne
 8015914:	210a      	movne	r1, #10
 8015916:	2100      	moveq	r1, #0
 8015918:	f003 f8d4 	bl	8018ac4 <uxr_delete_session_retries>
 801591c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801591e:	f001 f8a9 	bl	8016a74 <rmw_uxrce_fini_session_memory>
 8015922:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015924:	3010      	adds	r0, #16
 8015926:	f002 f945 	bl	8017bb4 <uxr_close_custom_transport>
 801592a:	2300      	movs	r3, #0
 801592c:	4630      	mov	r0, r6
 801592e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015930:	bd70      	pop	{r4, r5, r6, pc}
 8015932:	3018      	adds	r0, #24
 8015934:	f000 f89c 	bl	8015a70 <rmw_destroy_node>
 8015938:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 801593a:	4606      	mov	r6, r0
 801593c:	2c00      	cmp	r4, #0
 801593e:	d1da      	bne.n	80158f6 <rmw_context_fini+0xe>
 8015940:	e7e0      	b.n	8015904 <rmw_context_fini+0x1c>
 8015942:	4626      	mov	r6, r4
 8015944:	e7de      	b.n	8015904 <rmw_context_fini+0x1c>
 8015946:	bf00      	nop
 8015948:	20016f0c 	.word	0x20016f0c

0801594c <create_node>:
 801594c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015950:	b083      	sub	sp, #12
 8015952:	2b00      	cmp	r3, #0
 8015954:	d064      	beq.n	8015a20 <create_node+0xd4>
 8015956:	4606      	mov	r6, r0
 8015958:	4838      	ldr	r0, [pc, #224]	; (8015a3c <create_node+0xf0>)
 801595a:	460f      	mov	r7, r1
 801595c:	4690      	mov	r8, r2
 801595e:	461d      	mov	r5, r3
 8015960:	f008 f9ee 	bl	801dd40 <get_memory>
 8015964:	2800      	cmp	r0, #0
 8015966:	d05b      	beq.n	8015a20 <create_node+0xd4>
 8015968:	6884      	ldr	r4, [r0, #8]
 801596a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801596c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015970:	f104 0518 	add.w	r5, r4, #24
 8015974:	6123      	str	r3, [r4, #16]
 8015976:	f008 fa4b 	bl	801de10 <rmw_get_implementation_identifier>
 801597a:	f8c4 9020 	str.w	r9, [r4, #32]
 801597e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015982:	4630      	mov	r0, r6
 8015984:	f7ea fcbc 	bl	8000300 <strlen>
 8015988:	1c42      	adds	r2, r0, #1
 801598a:	2a3c      	cmp	r2, #60	; 0x3c
 801598c:	d840      	bhi.n	8015a10 <create_node+0xc4>
 801598e:	4648      	mov	r0, r9
 8015990:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015994:	4631      	mov	r1, r6
 8015996:	f00b f98e 	bl	8020cb6 <memcpy>
 801599a:	4638      	mov	r0, r7
 801599c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80159a0:	f7ea fcae 	bl	8000300 <strlen>
 80159a4:	1c42      	adds	r2, r0, #1
 80159a6:	2a3c      	cmp	r2, #60	; 0x3c
 80159a8:	d832      	bhi.n	8015a10 <create_node+0xc4>
 80159aa:	4639      	mov	r1, r7
 80159ac:	4648      	mov	r0, r9
 80159ae:	f00b f982 	bl	8020cb6 <memcpy>
 80159b2:	6923      	ldr	r3, [r4, #16]
 80159b4:	2101      	movs	r1, #1
 80159b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80159ba:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 80159be:	1842      	adds	r2, r0, r1
 80159c0:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 80159c4:	f002 f8fa 	bl	8017bbc <uxr_object_id>
 80159c8:	6160      	str	r0, [r4, #20]
 80159ca:	783b      	ldrb	r3, [r7, #0]
 80159cc:	2b2f      	cmp	r3, #47	; 0x2f
 80159ce:	d12c      	bne.n	8015a2a <create_node+0xde>
 80159d0:	787b      	ldrb	r3, [r7, #1]
 80159d2:	bb53      	cbnz	r3, 8015a2a <create_node+0xde>
 80159d4:	4633      	mov	r3, r6
 80159d6:	4a1a      	ldr	r2, [pc, #104]	; (8015a40 <create_node+0xf4>)
 80159d8:	213c      	movs	r1, #60	; 0x3c
 80159da:	481a      	ldr	r0, [pc, #104]	; (8015a44 <create_node+0xf8>)
 80159dc:	f00a ff0e 	bl	80207fc <sniprintf>
 80159e0:	6920      	ldr	r0, [r4, #16]
 80159e2:	2106      	movs	r1, #6
 80159e4:	fa1f f388 	uxth.w	r3, r8
 80159e8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80159ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80159f0:	9101      	str	r1, [sp, #4]
 80159f2:	4914      	ldr	r1, [pc, #80]	; (8015a44 <create_node+0xf8>)
 80159f4:	9100      	str	r1, [sp, #0]
 80159f6:	6811      	ldr	r1, [r2, #0]
 80159f8:	6962      	ldr	r2, [r4, #20]
 80159fa:	f001 fe31 	bl	8017660 <uxr_buffer_create_participant_bin>
 80159fe:	4602      	mov	r2, r0
 8015a00:	6920      	ldr	r0, [r4, #16]
 8015a02:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015a06:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015a0a:	f001 f9b7 	bl	8016d7c <run_xrce_session>
 8015a0e:	b918      	cbnz	r0, 8015a18 <create_node+0xcc>
 8015a10:	4628      	mov	r0, r5
 8015a12:	2500      	movs	r5, #0
 8015a14:	f001 f834 	bl	8016a80 <rmw_uxrce_fini_node_memory>
 8015a18:	4628      	mov	r0, r5
 8015a1a:	b003      	add	sp, #12
 8015a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a20:	2500      	movs	r5, #0
 8015a22:	4628      	mov	r0, r5
 8015a24:	b003      	add	sp, #12
 8015a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a2a:	463b      	mov	r3, r7
 8015a2c:	4a06      	ldr	r2, [pc, #24]	; (8015a48 <create_node+0xfc>)
 8015a2e:	213c      	movs	r1, #60	; 0x3c
 8015a30:	9600      	str	r6, [sp, #0]
 8015a32:	4804      	ldr	r0, [pc, #16]	; (8015a44 <create_node+0xf8>)
 8015a34:	f00a fee2 	bl	80207fc <sniprintf>
 8015a38:	e7d2      	b.n	80159e0 <create_node+0x94>
 8015a3a:	bf00      	nop
 8015a3c:	20016f0c 	.word	0x20016f0c
 8015a40:	080251c4 	.word	0x080251c4
 8015a44:	200124c0 	.word	0x200124c0
 8015a48:	08024bc0 	.word	0x08024bc0

08015a4c <rmw_create_node>:
 8015a4c:	468c      	mov	ip, r1
 8015a4e:	4611      	mov	r1, r2
 8015a50:	f1bc 0f00 	cmp.w	ip, #0
 8015a54:	d00a      	beq.n	8015a6c <rmw_create_node+0x20>
 8015a56:	f89c 3000 	ldrb.w	r3, [ip]
 8015a5a:	b13b      	cbz	r3, 8015a6c <rmw_create_node+0x20>
 8015a5c:	b132      	cbz	r2, 8015a6c <rmw_create_node+0x20>
 8015a5e:	7813      	ldrb	r3, [r2, #0]
 8015a60:	b123      	cbz	r3, 8015a6c <rmw_create_node+0x20>
 8015a62:	4603      	mov	r3, r0
 8015a64:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015a66:	4660      	mov	r0, ip
 8015a68:	f7ff bf70 	b.w	801594c <create_node>
 8015a6c:	2000      	movs	r0, #0
 8015a6e:	4770      	bx	lr

08015a70 <rmw_destroy_node>:
 8015a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a72:	b328      	cbz	r0, 8015ac0 <rmw_destroy_node+0x50>
 8015a74:	4607      	mov	r7, r0
 8015a76:	6800      	ldr	r0, [r0, #0]
 8015a78:	b120      	cbz	r0, 8015a84 <rmw_destroy_node+0x14>
 8015a7a:	4b37      	ldr	r3, [pc, #220]	; (8015b58 <rmw_destroy_node+0xe8>)
 8015a7c:	6819      	ldr	r1, [r3, #0]
 8015a7e:	f7ea fbdf 	bl	8000240 <strcmp>
 8015a82:	b9e8      	cbnz	r0, 8015ac0 <rmw_destroy_node+0x50>
 8015a84:	687d      	ldr	r5, [r7, #4]
 8015a86:	b1dd      	cbz	r5, 8015ac0 <rmw_destroy_node+0x50>
 8015a88:	4b34      	ldr	r3, [pc, #208]	; (8015b5c <rmw_destroy_node+0xec>)
 8015a8a:	681c      	ldr	r4, [r3, #0]
 8015a8c:	2c00      	cmp	r4, #0
 8015a8e:	d060      	beq.n	8015b52 <rmw_destroy_node+0xe2>
 8015a90:	2600      	movs	r6, #0
 8015a92:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015a96:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015a9a:	429d      	cmp	r5, r3
 8015a9c:	d013      	beq.n	8015ac6 <rmw_destroy_node+0x56>
 8015a9e:	2c00      	cmp	r4, #0
 8015aa0:	d1f7      	bne.n	8015a92 <rmw_destroy_node+0x22>
 8015aa2:	4b2f      	ldr	r3, [pc, #188]	; (8015b60 <rmw_destroy_node+0xf0>)
 8015aa4:	681c      	ldr	r4, [r3, #0]
 8015aa6:	b1c4      	cbz	r4, 8015ada <rmw_destroy_node+0x6a>
 8015aa8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015aac:	6a0b      	ldr	r3, [r1, #32]
 8015aae:	429d      	cmp	r5, r3
 8015ab0:	d1f9      	bne.n	8015aa6 <rmw_destroy_node+0x36>
 8015ab2:	317c      	adds	r1, #124	; 0x7c
 8015ab4:	4638      	mov	r0, r7
 8015ab6:	f000 fdaf 	bl	8016618 <rmw_destroy_subscription>
 8015aba:	2801      	cmp	r0, #1
 8015abc:	4606      	mov	r6, r0
 8015abe:	d1f2      	bne.n	8015aa6 <rmw_destroy_node+0x36>
 8015ac0:	2601      	movs	r6, #1
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ac6:	3184      	adds	r1, #132	; 0x84
 8015ac8:	4638      	mov	r0, r7
 8015aca:	f000 f9b1 	bl	8015e30 <rmw_destroy_publisher>
 8015ace:	2801      	cmp	r0, #1
 8015ad0:	4606      	mov	r6, r0
 8015ad2:	d0f5      	beq.n	8015ac0 <rmw_destroy_node+0x50>
 8015ad4:	2c00      	cmp	r4, #0
 8015ad6:	d1dc      	bne.n	8015a92 <rmw_destroy_node+0x22>
 8015ad8:	e7e3      	b.n	8015aa2 <rmw_destroy_node+0x32>
 8015ada:	4b22      	ldr	r3, [pc, #136]	; (8015b64 <rmw_destroy_node+0xf4>)
 8015adc:	681c      	ldr	r4, [r3, #0]
 8015ade:	b16c      	cbz	r4, 8015afc <rmw_destroy_node+0x8c>
 8015ae0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015ae4:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015ae6:	429d      	cmp	r5, r3
 8015ae8:	d1f9      	bne.n	8015ade <rmw_destroy_node+0x6e>
 8015aea:	317c      	adds	r1, #124	; 0x7c
 8015aec:	4638      	mov	r0, r7
 8015aee:	f000 fc1d 	bl	801632c <rmw_destroy_service>
 8015af2:	2801      	cmp	r0, #1
 8015af4:	4606      	mov	r6, r0
 8015af6:	d0e3      	beq.n	8015ac0 <rmw_destroy_node+0x50>
 8015af8:	2c00      	cmp	r4, #0
 8015afa:	d1f1      	bne.n	8015ae0 <rmw_destroy_node+0x70>
 8015afc:	4b1a      	ldr	r3, [pc, #104]	; (8015b68 <rmw_destroy_node+0xf8>)
 8015afe:	681c      	ldr	r4, [r3, #0]
 8015b00:	b16c      	cbz	r4, 8015b1e <rmw_destroy_node+0xae>
 8015b02:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015b06:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015b08:	429d      	cmp	r5, r3
 8015b0a:	d1f9      	bne.n	8015b00 <rmw_destroy_node+0x90>
 8015b0c:	317c      	adds	r1, #124	; 0x7c
 8015b0e:	4638      	mov	r0, r7
 8015b10:	f008 f93a 	bl	801dd88 <rmw_destroy_client>
 8015b14:	2801      	cmp	r0, #1
 8015b16:	4606      	mov	r6, r0
 8015b18:	d0d2      	beq.n	8015ac0 <rmw_destroy_node+0x50>
 8015b1a:	2c00      	cmp	r4, #0
 8015b1c:	d1f1      	bne.n	8015b02 <rmw_destroy_node+0x92>
 8015b1e:	6928      	ldr	r0, [r5, #16]
 8015b20:	696a      	ldr	r2, [r5, #20]
 8015b22:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015b26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b2a:	6819      	ldr	r1, [r3, #0]
 8015b2c:	f001 fd4c 	bl	80175c8 <uxr_buffer_delete_entity>
 8015b30:	4602      	mov	r2, r0
 8015b32:	6928      	ldr	r0, [r5, #16]
 8015b34:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015b38:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015b3c:	f001 f91e 	bl	8016d7c <run_xrce_session>
 8015b40:	4603      	mov	r3, r0
 8015b42:	4638      	mov	r0, r7
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	bf08      	it	eq
 8015b48:	2602      	moveq	r6, #2
 8015b4a:	f000 ff99 	bl	8016a80 <rmw_uxrce_fini_node_memory>
 8015b4e:	4630      	mov	r0, r6
 8015b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b52:	4626      	mov	r6, r4
 8015b54:	e7a5      	b.n	8015aa2 <rmw_destroy_node+0x32>
 8015b56:	bf00      	nop
 8015b58:	08025824 	.word	0x08025824
 8015b5c:	20016f1c 	.word	0x20016f1c
 8015b60:	20016f5c 	.word	0x20016f5c
 8015b64:	20016f2c 	.word	0x20016f2c
 8015b68:	2001263c 	.word	0x2001263c

08015b6c <rmw_node_get_graph_guard_condition>:
 8015b6c:	6843      	ldr	r3, [r0, #4]
 8015b6e:	6918      	ldr	r0, [r3, #16]
 8015b70:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015b74:	4770      	bx	lr
 8015b76:	bf00      	nop

08015b78 <flush_session>:
 8015b78:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8015b7a:	f002 be59 	b.w	8018830 <uxr_run_session_until_confirm_delivery>
 8015b7e:	bf00      	nop

08015b80 <rmw_publish>:
 8015b80:	2800      	cmp	r0, #0
 8015b82:	d053      	beq.n	8015c2c <rmw_publish+0xac>
 8015b84:	b570      	push	{r4, r5, r6, lr}
 8015b86:	460d      	mov	r5, r1
 8015b88:	b08e      	sub	sp, #56	; 0x38
 8015b8a:	2900      	cmp	r1, #0
 8015b8c:	d04b      	beq.n	8015c26 <rmw_publish+0xa6>
 8015b8e:	4604      	mov	r4, r0
 8015b90:	6800      	ldr	r0, [r0, #0]
 8015b92:	f001 fa05 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8015b96:	2800      	cmp	r0, #0
 8015b98:	d045      	beq.n	8015c26 <rmw_publish+0xa6>
 8015b9a:	6866      	ldr	r6, [r4, #4]
 8015b9c:	2e00      	cmp	r6, #0
 8015b9e:	d042      	beq.n	8015c26 <rmw_publish+0xa6>
 8015ba0:	69b4      	ldr	r4, [r6, #24]
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	6923      	ldr	r3, [r4, #16]
 8015ba6:	4798      	blx	r3
 8015ba8:	69f3      	ldr	r3, [r6, #28]
 8015baa:	9005      	str	r0, [sp, #20]
 8015bac:	b113      	cbz	r3, 8015bb4 <rmw_publish+0x34>
 8015bae:	a805      	add	r0, sp, #20
 8015bb0:	4798      	blx	r3
 8015bb2:	9805      	ldr	r0, [sp, #20]
 8015bb4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015bb8:	691b      	ldr	r3, [r3, #16]
 8015bba:	9000      	str	r0, [sp, #0]
 8015bbc:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015bc0:	6972      	ldr	r2, [r6, #20]
 8015bc2:	ab06      	add	r3, sp, #24
 8015bc4:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015bc6:	f004 f8ad 	bl	8019d24 <uxr_prepare_output_stream>
 8015bca:	b1d8      	cbz	r0, 8015c04 <rmw_publish+0x84>
 8015bcc:	68a3      	ldr	r3, [r4, #8]
 8015bce:	a906      	add	r1, sp, #24
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	4798      	blx	r3
 8015bd4:	6a33      	ldr	r3, [r6, #32]
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	b10b      	cbz	r3, 8015bde <rmw_publish+0x5e>
 8015bda:	a806      	add	r0, sp, #24
 8015bdc:	4798      	blx	r3
 8015bde:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8015be2:	2b01      	cmp	r3, #1
 8015be4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015be8:	d022      	beq.n	8015c30 <rmw_publish+0xb0>
 8015bea:	6918      	ldr	r0, [r3, #16]
 8015bec:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8015bee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015bf2:	f002 fe1d 	bl	8018830 <uxr_run_session_until_confirm_delivery>
 8015bf6:	4020      	ands	r0, r4
 8015bf8:	b2c4      	uxtb	r4, r0
 8015bfa:	f084 0001 	eor.w	r0, r4, #1
 8015bfe:	b2c0      	uxtb	r0, r0
 8015c00:	b00e      	add	sp, #56	; 0x38
 8015c02:	bd70      	pop	{r4, r5, r6, pc}
 8015c04:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015c08:	6918      	ldr	r0, [r3, #16]
 8015c0a:	9b05      	ldr	r3, [sp, #20]
 8015c0c:	9602      	str	r6, [sp, #8]
 8015c0e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	4b09      	ldr	r3, [pc, #36]	; (8015c3c <rmw_publish+0xbc>)
 8015c16:	9301      	str	r3, [sp, #4]
 8015c18:	ab06      	add	r3, sp, #24
 8015c1a:	6972      	ldr	r2, [r6, #20]
 8015c1c:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8015c1e:	f004 f8b1 	bl	8019d84 <uxr_prepare_output_stream_fragmented>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d1d2      	bne.n	8015bcc <rmw_publish+0x4c>
 8015c26:	2001      	movs	r0, #1
 8015c28:	b00e      	add	sp, #56	; 0x38
 8015c2a:	bd70      	pop	{r4, r5, r6, pc}
 8015c2c:	2001      	movs	r0, #1
 8015c2e:	4770      	bx	lr
 8015c30:	6918      	ldr	r0, [r3, #16]
 8015c32:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c36:	f002 fa41 	bl	80180bc <uxr_flash_output_streams>
 8015c3a:	e7de      	b.n	8015bfa <rmw_publish+0x7a>
 8015c3c:	08015b79 	.word	0x08015b79

08015c40 <rmw_create_publisher>:
 8015c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c44:	b087      	sub	sp, #28
 8015c46:	2800      	cmp	r0, #0
 8015c48:	f000 80d2 	beq.w	8015df0 <rmw_create_publisher+0x1b0>
 8015c4c:	460e      	mov	r6, r1
 8015c4e:	2900      	cmp	r1, #0
 8015c50:	f000 80ce 	beq.w	8015df0 <rmw_create_publisher+0x1b0>
 8015c54:	4604      	mov	r4, r0
 8015c56:	6800      	ldr	r0, [r0, #0]
 8015c58:	4615      	mov	r5, r2
 8015c5a:	461f      	mov	r7, r3
 8015c5c:	f001 f9a0 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8015c60:	f080 0001 	eor.w	r0, r0, #1
 8015c64:	b2c0      	uxtb	r0, r0
 8015c66:	2800      	cmp	r0, #0
 8015c68:	f040 80c2 	bne.w	8015df0 <rmw_create_publisher+0x1b0>
 8015c6c:	2d00      	cmp	r5, #0
 8015c6e:	f000 80bf 	beq.w	8015df0 <rmw_create_publisher+0x1b0>
 8015c72:	782b      	ldrb	r3, [r5, #0]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	f000 80bb 	beq.w	8015df0 <rmw_create_publisher+0x1b0>
 8015c7a:	2f00      	cmp	r7, #0
 8015c7c:	f000 80b8 	beq.w	8015df0 <rmw_create_publisher+0x1b0>
 8015c80:	485e      	ldr	r0, [pc, #376]	; (8015dfc <rmw_create_publisher+0x1bc>)
 8015c82:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015c86:	f008 f85b 	bl	801dd40 <get_memory>
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	f000 80b0 	beq.w	8015df0 <rmw_create_publisher+0x1b0>
 8015c90:	6884      	ldr	r4, [r0, #8]
 8015c92:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8015c96:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8015c9a:	f008 f8b9 	bl	801de10 <rmw_get_implementation_identifier>
 8015c9e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8015ca2:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	f7ea fb2a 	bl	8000300 <strlen>
 8015cac:	3001      	adds	r0, #1
 8015cae:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8015cb2:	283c      	cmp	r0, #60	; 0x3c
 8015cb4:	f200 808f 	bhi.w	8015dd6 <rmw_create_publisher+0x196>
 8015cb8:	462b      	mov	r3, r5
 8015cba:	4a51      	ldr	r2, [pc, #324]	; (8015e00 <rmw_create_publisher+0x1c0>)
 8015cbc:	213c      	movs	r1, #60	; 0x3c
 8015cbe:	4650      	mov	r0, sl
 8015cc0:	f00a fd9c 	bl	80207fc <sniprintf>
 8015cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015cc8:	4639      	mov	r1, r7
 8015cca:	2250      	movs	r2, #80	; 0x50
 8015ccc:	67e3      	str	r3, [r4, #124]	; 0x7c
 8015cce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015cd2:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8015cd6:	f00a ffee 	bl	8020cb6 <memcpy>
 8015cda:	7a3b      	ldrb	r3, [r7, #8]
 8015cdc:	4630      	mov	r0, r6
 8015cde:	4949      	ldr	r1, [pc, #292]	; (8015e04 <rmw_create_publisher+0x1c4>)
 8015ce0:	2b02      	cmp	r3, #2
 8015ce2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ce6:	bf0c      	ite	eq
 8015ce8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8015cec:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8015cf0:	67a3      	str	r3, [r4, #120]	; 0x78
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015cf8:	f001 f960 	bl	8016fbc <get_message_typesupport_handle>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	d06a      	beq.n	8015dd6 <rmw_create_publisher+0x196>
 8015d00:	6842      	ldr	r2, [r0, #4]
 8015d02:	61a2      	str	r2, [r4, #24]
 8015d04:	2a00      	cmp	r2, #0
 8015d06:	d066      	beq.n	8015dd6 <rmw_create_publisher+0x196>
 8015d08:	4629      	mov	r1, r5
 8015d0a:	463b      	mov	r3, r7
 8015d0c:	4648      	mov	r0, r9
 8015d0e:	f008 f8af 	bl	801de70 <create_topic>
 8015d12:	6260      	str	r0, [r4, #36]	; 0x24
 8015d14:	2800      	cmp	r0, #0
 8015d16:	d062      	beq.n	8015dde <rmw_create_publisher+0x19e>
 8015d18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d1c:	2103      	movs	r1, #3
 8015d1e:	2506      	movs	r5, #6
 8015d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d24:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8015d28:	1c42      	adds	r2, r0, #1
 8015d2a:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8015d2e:	f001 ff45 	bl	8017bbc <uxr_object_id>
 8015d32:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015d36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d3a:	6120      	str	r0, [r4, #16]
 8015d3c:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8015d40:	6910      	ldr	r0, [r2, #16]
 8015d42:	9500      	str	r5, [sp, #0]
 8015d44:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015d48:	6819      	ldr	r1, [r3, #0]
 8015d4a:	6922      	ldr	r2, [r4, #16]
 8015d4c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015d50:	f001 fcee 	bl	8017730 <uxr_buffer_create_publisher_bin>
 8015d54:	4602      	mov	r2, r0
 8015d56:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015d5a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015d5e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015d62:	f001 f80b 	bl	8016d7c <run_xrce_session>
 8015d66:	b3b0      	cbz	r0, 8015dd6 <rmw_create_publisher+0x196>
 8015d68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d6c:	2105      	movs	r1, #5
 8015d6e:	f10d 0a10 	add.w	sl, sp, #16
 8015d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d76:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8015d7a:	1c42      	adds	r2, r0, #1
 8015d7c:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8015d80:	f001 ff1c 	bl	8017bbc <uxr_object_id>
 8015d84:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8015d88:	4639      	mov	r1, r7
 8015d8a:	6160      	str	r0, [r4, #20]
 8015d8c:	691e      	ldr	r6, [r3, #16]
 8015d8e:	4650      	mov	r0, sl
 8015d90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d94:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8015d98:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8015d9c:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8015da0:	f001 f808 	bl	8016db4 <convert_qos_profile>
 8015da4:	9503      	str	r5, [sp, #12]
 8015da6:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8015daa:	9001      	str	r0, [sp, #4]
 8015dac:	4630      	mov	r0, r6
 8015dae:	f8ad 1008 	strh.w	r1, [sp, #8]
 8015db2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015db6:	9300      	str	r3, [sp, #0]
 8015db8:	6839      	ldr	r1, [r7, #0]
 8015dba:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8015dbe:	f001 fd17 	bl	80177f0 <uxr_buffer_create_datawriter_bin>
 8015dc2:	4602      	mov	r2, r0
 8015dc4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8015dc8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015dcc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015dd0:	f000 ffd4 	bl	8016d7c <run_xrce_session>
 8015dd4:	b970      	cbnz	r0, 8015df4 <rmw_create_publisher+0x1b4>
 8015dd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015dd8:	b108      	cbz	r0, 8015dde <rmw_create_publisher+0x19e>
 8015dda:	f000 fec1 	bl	8016b60 <rmw_uxrce_fini_topic_memory>
 8015dde:	4640      	mov	r0, r8
 8015de0:	f04f 0800 	mov.w	r8, #0
 8015de4:	f000 fe64 	bl	8016ab0 <rmw_uxrce_fini_publisher_memory>
 8015de8:	4640      	mov	r0, r8
 8015dea:	b007      	add	sp, #28
 8015dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015df0:	f04f 0800 	mov.w	r8, #0
 8015df4:	4640      	mov	r0, r8
 8015df6:	b007      	add	sp, #28
 8015df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfc:	20016f1c 	.word	0x20016f1c
 8015e00:	080251c4 	.word	0x080251c4
 8015e04:	0802446c 	.word	0x0802446c

08015e08 <rmw_publisher_get_actual_qos>:
 8015e08:	b178      	cbz	r0, 8015e2a <rmw_publisher_get_actual_qos+0x22>
 8015e0a:	b510      	push	{r4, lr}
 8015e0c:	fab1 f481 	clz	r4, r1
 8015e10:	0964      	lsrs	r4, r4, #5
 8015e12:	b141      	cbz	r1, 8015e26 <rmw_publisher_get_actual_qos+0x1e>
 8015e14:	6843      	ldr	r3, [r0, #4]
 8015e16:	2250      	movs	r2, #80	; 0x50
 8015e18:	4608      	mov	r0, r1
 8015e1a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8015e1e:	f00a ff4a 	bl	8020cb6 <memcpy>
 8015e22:	4620      	mov	r0, r4
 8015e24:	bd10      	pop	{r4, pc}
 8015e26:	200b      	movs	r0, #11
 8015e28:	bd10      	pop	{r4, pc}
 8015e2a:	200b      	movs	r0, #11
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop

08015e30 <rmw_destroy_publisher>:
 8015e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e34:	b128      	cbz	r0, 8015e42 <rmw_destroy_publisher+0x12>
 8015e36:	4604      	mov	r4, r0
 8015e38:	6800      	ldr	r0, [r0, #0]
 8015e3a:	460d      	mov	r5, r1
 8015e3c:	f001 f8b0 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8015e40:	b918      	cbnz	r0, 8015e4a <rmw_destroy_publisher+0x1a>
 8015e42:	2401      	movs	r4, #1
 8015e44:	4620      	mov	r0, r4
 8015e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e4a:	6863      	ldr	r3, [r4, #4]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d0f8      	beq.n	8015e42 <rmw_destroy_publisher+0x12>
 8015e50:	fab5 f485 	clz	r4, r5
 8015e54:	0964      	lsrs	r4, r4, #5
 8015e56:	2d00      	cmp	r5, #0
 8015e58:	d0f3      	beq.n	8015e42 <rmw_destroy_publisher+0x12>
 8015e5a:	6828      	ldr	r0, [r5, #0]
 8015e5c:	f001 f8a0 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d0ee      	beq.n	8015e42 <rmw_destroy_publisher+0x12>
 8015e64:	686e      	ldr	r6, [r5, #4]
 8015e66:	2e00      	cmp	r6, #0
 8015e68:	d0eb      	beq.n	8015e42 <rmw_destroy_publisher+0x12>
 8015e6a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8015e6c:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8015e70:	f008 f84e 	bl	801df10 <destroy_topic>
 8015e74:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e78:	6972      	ldr	r2, [r6, #20]
 8015e7a:	6918      	ldr	r0, [r3, #16]
 8015e7c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015e80:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e84:	6819      	ldr	r1, [r3, #0]
 8015e86:	f001 fb9f 	bl	80175c8 <uxr_buffer_delete_entity>
 8015e8a:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8015e8e:	4680      	mov	r8, r0
 8015e90:	6932      	ldr	r2, [r6, #16]
 8015e92:	6918      	ldr	r0, [r3, #16]
 8015e94:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015e98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e9c:	6819      	ldr	r1, [r3, #0]
 8015e9e:	f001 fb93 	bl	80175c8 <uxr_buffer_delete_entity>
 8015ea2:	4606      	mov	r6, r0
 8015ea4:	6938      	ldr	r0, [r7, #16]
 8015ea6:	4642      	mov	r2, r8
 8015ea8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015eac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015eb0:	f000 ff64 	bl	8016d7c <run_xrce_session>
 8015eb4:	693f      	ldr	r7, [r7, #16]
 8015eb6:	4632      	mov	r2, r6
 8015eb8:	4606      	mov	r6, r0
 8015eba:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8015ebe:	4638      	mov	r0, r7
 8015ec0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8015ec4:	f000 ff5a 	bl	8016d7c <run_xrce_session>
 8015ec8:	b126      	cbz	r6, 8015ed4 <rmw_destroy_publisher+0xa4>
 8015eca:	b118      	cbz	r0, 8015ed4 <rmw_destroy_publisher+0xa4>
 8015ecc:	4628      	mov	r0, r5
 8015ece:	f000 fdef 	bl	8016ab0 <rmw_uxrce_fini_publisher_memory>
 8015ed2:	e7b7      	b.n	8015e44 <rmw_destroy_publisher+0x14>
 8015ed4:	2402      	movs	r4, #2
 8015ed6:	e7f9      	b.n	8015ecc <rmw_destroy_publisher+0x9c>

08015ed8 <rmw_send_request>:
 8015ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015edc:	4604      	mov	r4, r0
 8015ede:	6800      	ldr	r0, [r0, #0]
 8015ee0:	b08b      	sub	sp, #44	; 0x2c
 8015ee2:	460e      	mov	r6, r1
 8015ee4:	4615      	mov	r5, r2
 8015ee6:	b128      	cbz	r0, 8015ef4 <rmw_send_request+0x1c>
 8015ee8:	4b21      	ldr	r3, [pc, #132]	; (8015f70 <rmw_send_request+0x98>)
 8015eea:	6819      	ldr	r1, [r3, #0]
 8015eec:	f7ea f9a8 	bl	8000240 <strcmp>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d139      	bne.n	8015f68 <rmw_send_request+0x90>
 8015ef4:	6864      	ldr	r4, [r4, #4]
 8015ef6:	2700      	movs	r7, #0
 8015ef8:	6963      	ldr	r3, [r4, #20]
 8015efa:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8015efe:	689b      	ldr	r3, [r3, #8]
 8015f00:	4798      	blx	r3
 8015f02:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015f06:	4630      	mov	r0, r6
 8015f08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015f0c:	4798      	blx	r3
 8015f0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015f12:	9000      	str	r0, [sp, #0]
 8015f14:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015f18:	6922      	ldr	r2, [r4, #16]
 8015f1a:	ab02      	add	r3, sp, #8
 8015f1c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8015f1e:	f003 ff01 	bl	8019d24 <uxr_prepare_output_stream>
 8015f22:	e9c5 0700 	strd	r0, r7, [r5]
 8015f26:	b198      	cbz	r0, 8015f50 <rmw_send_request+0x78>
 8015f28:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015f2c:	a902      	add	r1, sp, #8
 8015f2e:	4630      	mov	r0, r6
 8015f30:	4798      	blx	r3
 8015f32:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8015f36:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015f3a:	2b01      	cmp	r3, #1
 8015f3c:	d00c      	beq.n	8015f58 <rmw_send_request+0x80>
 8015f3e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8015f40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015f44:	f002 fc74 	bl	8018830 <uxr_run_session_until_confirm_delivery>
 8015f48:	4638      	mov	r0, r7
 8015f4a:	b00b      	add	sp, #44	; 0x2c
 8015f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f50:	2001      	movs	r0, #1
 8015f52:	b00b      	add	sp, #44	; 0x2c
 8015f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f58:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015f5c:	f002 f8ae 	bl	80180bc <uxr_flash_output_streams>
 8015f60:	4638      	mov	r0, r7
 8015f62:	b00b      	add	sp, #44	; 0x2c
 8015f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f68:	200c      	movs	r0, #12
 8015f6a:	b00b      	add	sp, #44	; 0x2c
 8015f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f70:	08025824 	.word	0x08025824

08015f74 <rmw_take_request>:
 8015f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f78:	4605      	mov	r5, r0
 8015f7a:	6800      	ldr	r0, [r0, #0]
 8015f7c:	b089      	sub	sp, #36	; 0x24
 8015f7e:	460c      	mov	r4, r1
 8015f80:	4690      	mov	r8, r2
 8015f82:	461e      	mov	r6, r3
 8015f84:	b128      	cbz	r0, 8015f92 <rmw_take_request+0x1e>
 8015f86:	4b28      	ldr	r3, [pc, #160]	; (8016028 <rmw_take_request+0xb4>)
 8015f88:	6819      	ldr	r1, [r3, #0]
 8015f8a:	f7ea f959 	bl	8000240 <strcmp>
 8015f8e:	2800      	cmp	r0, #0
 8015f90:	d146      	bne.n	8016020 <rmw_take_request+0xac>
 8015f92:	b10e      	cbz	r6, 8015f98 <rmw_take_request+0x24>
 8015f94:	2300      	movs	r3, #0
 8015f96:	7033      	strb	r3, [r6, #0]
 8015f98:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015f9c:	f000 fe70 	bl	8016c80 <rmw_uxrce_clean_expired_static_input_buffer>
 8015fa0:	4648      	mov	r0, r9
 8015fa2:	f000 fe43 	bl	8016c2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015fa6:	4607      	mov	r7, r0
 8015fa8:	b3b0      	cbz	r0, 8016018 <rmw_take_request+0xa4>
 8015faa:	6885      	ldr	r5, [r0, #8]
 8015fac:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8015fb0:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8015fb4:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8015fb8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8015fbc:	7423      	strb	r3, [r4, #16]
 8015fbe:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8015fc2:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8015fc6:	f8a4 2011 	strh.w	r2, [r4, #17]
 8015fca:	74e3      	strb	r3, [r4, #19]
 8015fcc:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8015fd0:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8015fd4:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8015fd8:	6161      	str	r1, [r4, #20]
 8015fda:	61a2      	str	r2, [r4, #24]
 8015fdc:	61e3      	str	r3, [r4, #28]
 8015fde:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015fe2:	689b      	ldr	r3, [r3, #8]
 8015fe4:	4798      	blx	r3
 8015fe6:	6844      	ldr	r4, [r0, #4]
 8015fe8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015fec:	f105 0110 	add.w	r1, r5, #16
 8015ff0:	4668      	mov	r0, sp
 8015ff2:	f7fd f829 	bl	8013048 <ucdr_init_buffer>
 8015ff6:	4641      	mov	r1, r8
 8015ff8:	68e3      	ldr	r3, [r4, #12]
 8015ffa:	4668      	mov	r0, sp
 8015ffc:	4798      	blx	r3
 8015ffe:	4639      	mov	r1, r7
 8016000:	4604      	mov	r4, r0
 8016002:	480a      	ldr	r0, [pc, #40]	; (801602c <rmw_take_request+0xb8>)
 8016004:	f007 feac 	bl	801dd60 <put_memory>
 8016008:	b106      	cbz	r6, 801600c <rmw_take_request+0x98>
 801600a:	7034      	strb	r4, [r6, #0]
 801600c:	f084 0001 	eor.w	r0, r4, #1
 8016010:	b2c0      	uxtb	r0, r0
 8016012:	b009      	add	sp, #36	; 0x24
 8016014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016018:	2001      	movs	r0, #1
 801601a:	b009      	add	sp, #36	; 0x24
 801601c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016020:	200c      	movs	r0, #12
 8016022:	b009      	add	sp, #36	; 0x24
 8016024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016028:	08025824 	.word	0x08025824
 801602c:	20016f4c 	.word	0x20016f4c

08016030 <rmw_send_response>:
 8016030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016032:	4605      	mov	r5, r0
 8016034:	6800      	ldr	r0, [r0, #0]
 8016036:	b091      	sub	sp, #68	; 0x44
 8016038:	460c      	mov	r4, r1
 801603a:	4616      	mov	r6, r2
 801603c:	b128      	cbz	r0, 801604a <rmw_send_response+0x1a>
 801603e:	4b29      	ldr	r3, [pc, #164]	; (80160e4 <rmw_send_response+0xb4>)
 8016040:	6819      	ldr	r1, [r3, #0]
 8016042:	f7ea f8fd 	bl	8000240 <strcmp>
 8016046:	2800      	cmp	r0, #0
 8016048:	d141      	bne.n	80160ce <rmw_send_response+0x9e>
 801604a:	686d      	ldr	r5, [r5, #4]
 801604c:	68a1      	ldr	r1, [r4, #8]
 801604e:	6860      	ldr	r0, [r4, #4]
 8016050:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8016052:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8016056:	9307      	str	r3, [sp, #28]
 8016058:	4623      	mov	r3, r4
 801605a:	9206      	str	r2, [sp, #24]
 801605c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016060:	789b      	ldrb	r3, [r3, #2]
 8016062:	f88d 2017 	strb.w	r2, [sp, #23]
 8016066:	f88d 3016 	strb.w	r3, [sp, #22]
 801606a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801606e:	68e2      	ldr	r2, [r4, #12]
 8016070:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016074:	ab02      	add	r3, sp, #8
 8016076:	696c      	ldr	r4, [r5, #20]
 8016078:	c307      	stmia	r3!, {r0, r1, r2}
 801607a:	68e3      	ldr	r3, [r4, #12]
 801607c:	4798      	blx	r3
 801607e:	6844      	ldr	r4, [r0, #4]
 8016080:	4630      	mov	r0, r6
 8016082:	6923      	ldr	r3, [r4, #16]
 8016084:	4798      	blx	r3
 8016086:	f100 0318 	add.w	r3, r0, #24
 801608a:	6938      	ldr	r0, [r7, #16]
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	ab08      	add	r3, sp, #32
 8016090:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016094:	692a      	ldr	r2, [r5, #16]
 8016096:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8016098:	f003 fe44 	bl	8019d24 <uxr_prepare_output_stream>
 801609c:	b910      	cbnz	r0, 80160a4 <rmw_send_response+0x74>
 801609e:	2001      	movs	r0, #1
 80160a0:	b011      	add	sp, #68	; 0x44
 80160a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160a4:	a902      	add	r1, sp, #8
 80160a6:	a808      	add	r0, sp, #32
 80160a8:	f004 ffa8 	bl	801affc <uxr_serialize_SampleIdentity>
 80160ac:	68a3      	ldr	r3, [r4, #8]
 80160ae:	a908      	add	r1, sp, #32
 80160b0:	4630      	mov	r0, r6
 80160b2:	4798      	blx	r3
 80160b4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80160b8:	6938      	ldr	r0, [r7, #16]
 80160ba:	2b01      	cmp	r3, #1
 80160bc:	d00a      	beq.n	80160d4 <rmw_send_response+0xa4>
 80160be:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80160c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160c4:	f002 fbb4 	bl	8018830 <uxr_run_session_until_confirm_delivery>
 80160c8:	2000      	movs	r0, #0
 80160ca:	b011      	add	sp, #68	; 0x44
 80160cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ce:	200c      	movs	r0, #12
 80160d0:	b011      	add	sp, #68	; 0x44
 80160d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160d8:	f001 fff0 	bl	80180bc <uxr_flash_output_streams>
 80160dc:	2000      	movs	r0, #0
 80160de:	b011      	add	sp, #68	; 0x44
 80160e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160e2:	bf00      	nop
 80160e4:	08025824 	.word	0x08025824

080160e8 <rmw_take_response>:
 80160e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ec:	4604      	mov	r4, r0
 80160ee:	6800      	ldr	r0, [r0, #0]
 80160f0:	b088      	sub	sp, #32
 80160f2:	460f      	mov	r7, r1
 80160f4:	4690      	mov	r8, r2
 80160f6:	461d      	mov	r5, r3
 80160f8:	b120      	cbz	r0, 8016104 <rmw_take_response+0x1c>
 80160fa:	4b1d      	ldr	r3, [pc, #116]	; (8016170 <rmw_take_response+0x88>)
 80160fc:	6819      	ldr	r1, [r3, #0]
 80160fe:	f7ea f89f 	bl	8000240 <strcmp>
 8016102:	bb68      	cbnz	r0, 8016160 <rmw_take_response+0x78>
 8016104:	b10d      	cbz	r5, 801610a <rmw_take_response+0x22>
 8016106:	2300      	movs	r3, #0
 8016108:	702b      	strb	r3, [r5, #0]
 801610a:	6864      	ldr	r4, [r4, #4]
 801610c:	f000 fdb8 	bl	8016c80 <rmw_uxrce_clean_expired_static_input_buffer>
 8016110:	4620      	mov	r0, r4
 8016112:	f000 fd8b 	bl	8016c2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016116:	4606      	mov	r6, r0
 8016118:	b330      	cbz	r0, 8016168 <rmw_take_response+0x80>
 801611a:	6963      	ldr	r3, [r4, #20]
 801611c:	6884      	ldr	r4, [r0, #8]
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8016124:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016128:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801612c:	4798      	blx	r3
 801612e:	6847      	ldr	r7, [r0, #4]
 8016130:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8016134:	f104 0110 	add.w	r1, r4, #16
 8016138:	4668      	mov	r0, sp
 801613a:	f7fc ff85 	bl	8013048 <ucdr_init_buffer>
 801613e:	4641      	mov	r1, r8
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	4668      	mov	r0, sp
 8016144:	4798      	blx	r3
 8016146:	4631      	mov	r1, r6
 8016148:	4604      	mov	r4, r0
 801614a:	480a      	ldr	r0, [pc, #40]	; (8016174 <rmw_take_response+0x8c>)
 801614c:	f007 fe08 	bl	801dd60 <put_memory>
 8016150:	b105      	cbz	r5, 8016154 <rmw_take_response+0x6c>
 8016152:	702c      	strb	r4, [r5, #0]
 8016154:	f084 0001 	eor.w	r0, r4, #1
 8016158:	b2c0      	uxtb	r0, r0
 801615a:	b008      	add	sp, #32
 801615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016160:	200c      	movs	r0, #12
 8016162:	b008      	add	sp, #32
 8016164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016168:	2001      	movs	r0, #1
 801616a:	b008      	add	sp, #32
 801616c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016170:	08025824 	.word	0x08025824
 8016174:	20016f4c 	.word	0x20016f4c

08016178 <rmw_create_service>:
 8016178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801617c:	b091      	sub	sp, #68	; 0x44
 801617e:	2900      	cmp	r1, #0
 8016180:	f000 80bb 	beq.w	80162fa <rmw_create_service+0x182>
 8016184:	4606      	mov	r6, r0
 8016186:	2800      	cmp	r0, #0
 8016188:	f000 80b7 	beq.w	80162fa <rmw_create_service+0x182>
 801618c:	4614      	mov	r4, r2
 801618e:	6800      	ldr	r0, [r0, #0]
 8016190:	4689      	mov	r9, r1
 8016192:	461d      	mov	r5, r3
 8016194:	f000 ff04 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8016198:	2c00      	cmp	r4, #0
 801619a:	f000 80ae 	beq.w	80162fa <rmw_create_service+0x182>
 801619e:	f080 0001 	eor.w	r0, r0, #1
 80161a2:	b2c0      	uxtb	r0, r0
 80161a4:	2800      	cmp	r0, #0
 80161a6:	f040 80a8 	bne.w	80162fa <rmw_create_service+0x182>
 80161aa:	7823      	ldrb	r3, [r4, #0]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	f000 80a4 	beq.w	80162fa <rmw_create_service+0x182>
 80161b2:	2d00      	cmp	r5, #0
 80161b4:	f000 80a1 	beq.w	80162fa <rmw_create_service+0x182>
 80161b8:	4856      	ldr	r0, [pc, #344]	; (8016314 <rmw_create_service+0x19c>)
 80161ba:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80161be:	f007 fdbf 	bl	801dd40 <get_memory>
 80161c2:	4606      	mov	r6, r0
 80161c4:	2800      	cmp	r0, #0
 80161c6:	f000 8099 	beq.w	80162fc <rmw_create_service+0x184>
 80161ca:	6887      	ldr	r7, [r0, #8]
 80161cc:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 80161d0:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80161d4:	f007 fe1c 	bl	801de10 <rmw_get_implementation_identifier>
 80161d8:	67f8      	str	r0, [r7, #124]	; 0x7c
 80161da:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80161de:	4620      	mov	r0, r4
 80161e0:	f7ea f88e 	bl	8000300 <strlen>
 80161e4:	1c42      	adds	r2, r0, #1
 80161e6:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 80161ea:	2a3c      	cmp	r2, #60	; 0x3c
 80161ec:	f200 808a 	bhi.w	8016304 <rmw_create_service+0x18c>
 80161f0:	4621      	mov	r1, r4
 80161f2:	4650      	mov	r0, sl
 80161f4:	f00a fd5f 	bl	8020cb6 <memcpy>
 80161f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80161fc:	4629      	mov	r1, r5
 80161fe:	2250      	movs	r2, #80	; 0x50
 8016200:	f107 0020 	add.w	r0, r7, #32
 8016204:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8016208:	677b      	str	r3, [r7, #116]	; 0x74
 801620a:	f00a fd54 	bl	8020cb6 <memcpy>
 801620e:	4648      	mov	r0, r9
 8016210:	4941      	ldr	r1, [pc, #260]	; (8016318 <rmw_create_service+0x1a0>)
 8016212:	f000 fedf 	bl	8016fd4 <get_service_typesupport_handle>
 8016216:	2800      	cmp	r0, #0
 8016218:	d074      	beq.n	8016304 <rmw_create_service+0x18c>
 801621a:	6843      	ldr	r3, [r0, #4]
 801621c:	617b      	str	r3, [r7, #20]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d070      	beq.n	8016304 <rmw_create_service+0x18c>
 8016222:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016226:	2108      	movs	r1, #8
 8016228:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8016320 <rmw_create_service+0x1a8>
 801622c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016230:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8016324 <rmw_create_service+0x1ac>
 8016234:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8016238:	1c42      	adds	r2, r0, #1
 801623a:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 801623e:	f001 fcbd 	bl	8017bbc <uxr_object_id>
 8016242:	2364      	movs	r3, #100	; 0x64
 8016244:	6138      	str	r0, [r7, #16]
 8016246:	4652      	mov	r2, sl
 8016248:	4649      	mov	r1, r9
 801624a:	6978      	ldr	r0, [r7, #20]
 801624c:	f000 fdfc 	bl	8016e48 <generate_service_types>
 8016250:	2800      	cmp	r0, #0
 8016252:	d057      	beq.n	8016304 <rmw_create_service+0x18c>
 8016254:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8016328 <rmw_create_service+0x1b0>
 8016258:	233c      	movs	r3, #60	; 0x3c
 801625a:	4a30      	ldr	r2, [pc, #192]	; (801631c <rmw_create_service+0x1a4>)
 801625c:	4620      	mov	r0, r4
 801625e:	4659      	mov	r1, fp
 8016260:	f000 fdc0 	bl	8016de4 <generate_service_topics>
 8016264:	2800      	cmp	r0, #0
 8016266:	d04d      	beq.n	8016304 <rmw_create_service+0x18c>
 8016268:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801626c:	a80c      	add	r0, sp, #48	; 0x30
 801626e:	4629      	mov	r1, r5
 8016270:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8016274:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016278:	f000 fd9c 	bl	8016db4 <convert_qos_profile>
 801627c:	4a27      	ldr	r2, [pc, #156]	; (801631c <rmw_create_service+0x1a4>)
 801627e:	a80c      	add	r0, sp, #48	; 0x30
 8016280:	9400      	str	r4, [sp, #0]
 8016282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016284:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016288:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801628c:	c803      	ldmia	r0, {r0, r1}
 801628e:	9a08      	ldr	r2, [sp, #32]
 8016290:	9005      	str	r0, [sp, #20]
 8016292:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016296:	2306      	movs	r3, #6
 8016298:	f8ad 1018 	strh.w	r1, [sp, #24]
 801629c:	9307      	str	r3, [sp, #28]
 801629e:	6811      	ldr	r1, [r2, #0]
 80162a0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80162a4:	693a      	ldr	r2, [r7, #16]
 80162a6:	f001 fb91 	bl	80179cc <uxr_buffer_create_replier_bin>
 80162aa:	4602      	mov	r2, r0
 80162ac:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80162b0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80162b4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80162b8:	f000 fd60 	bl	8016d7c <run_xrce_session>
 80162bc:	b310      	cbz	r0, 8016304 <rmw_create_service+0x18c>
 80162be:	7a2b      	ldrb	r3, [r5, #8]
 80162c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162c4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80162c8:	2b02      	cmp	r3, #2
 80162ca:	920e      	str	r2, [sp, #56]	; 0x38
 80162cc:	f04f 0200 	mov.w	r2, #0
 80162d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80162d2:	bf0c      	ite	eq
 80162d4:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 80162d8:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 80162dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80162e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80162e2:	ab0e      	add	r3, sp, #56	; 0x38
 80162e4:	673a      	str	r2, [r7, #112]	; 0x70
 80162e6:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 80162ea:	9300      	str	r3, [sp, #0]
 80162ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162ee:	6811      	ldr	r1, [r2, #0]
 80162f0:	693a      	ldr	r2, [r7, #16]
 80162f2:	f001 fc93 	bl	8017c1c <uxr_buffer_request_data>
 80162f6:	8338      	strh	r0, [r7, #24]
 80162f8:	e000      	b.n	80162fc <rmw_create_service+0x184>
 80162fa:	2600      	movs	r6, #0
 80162fc:	4630      	mov	r0, r6
 80162fe:	b011      	add	sp, #68	; 0x44
 8016300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016304:	4630      	mov	r0, r6
 8016306:	2600      	movs	r6, #0
 8016308:	f000 fbfe 	bl	8016b08 <rmw_uxrce_fini_service_memory>
 801630c:	4630      	mov	r0, r6
 801630e:	b011      	add	sp, #68	; 0x44
 8016310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016314:	20016f2c 	.word	0x20016f2c
 8016318:	0802446c 	.word	0x0802446c
 801631c:	2001259c 	.word	0x2001259c
 8016320:	200125d8 	.word	0x200125d8
 8016324:	20012538 	.word	0x20012538
 8016328:	200124fc 	.word	0x200124fc

0801632c <rmw_destroy_service>:
 801632c:	b570      	push	{r4, r5, r6, lr}
 801632e:	b128      	cbz	r0, 801633c <rmw_destroy_service+0x10>
 8016330:	4604      	mov	r4, r0
 8016332:	6800      	ldr	r0, [r0, #0]
 8016334:	460d      	mov	r5, r1
 8016336:	f000 fe33 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 801633a:	b910      	cbnz	r0, 8016342 <rmw_destroy_service+0x16>
 801633c:	2401      	movs	r4, #1
 801633e:	4620      	mov	r0, r4
 8016340:	bd70      	pop	{r4, r5, r6, pc}
 8016342:	6863      	ldr	r3, [r4, #4]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d0f9      	beq.n	801633c <rmw_destroy_service+0x10>
 8016348:	2d00      	cmp	r5, #0
 801634a:	d0f7      	beq.n	801633c <rmw_destroy_service+0x10>
 801634c:	6828      	ldr	r0, [r5, #0]
 801634e:	f000 fe27 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8016352:	2800      	cmp	r0, #0
 8016354:	d0f2      	beq.n	801633c <rmw_destroy_service+0x10>
 8016356:	686e      	ldr	r6, [r5, #4]
 8016358:	2e00      	cmp	r6, #0
 801635a:	d0ef      	beq.n	801633c <rmw_destroy_service+0x10>
 801635c:	6864      	ldr	r4, [r4, #4]
 801635e:	6932      	ldr	r2, [r6, #16]
 8016360:	6920      	ldr	r0, [r4, #16]
 8016362:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016366:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801636a:	6819      	ldr	r1, [r3, #0]
 801636c:	f001 fc90 	bl	8017c90 <uxr_buffer_cancel_data>
 8016370:	4602      	mov	r2, r0
 8016372:	6920      	ldr	r0, [r4, #16]
 8016374:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016378:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801637c:	f000 fcfe 	bl	8016d7c <run_xrce_session>
 8016380:	6920      	ldr	r0, [r4, #16]
 8016382:	6932      	ldr	r2, [r6, #16]
 8016384:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016388:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801638c:	6819      	ldr	r1, [r3, #0]
 801638e:	f001 f91b 	bl	80175c8 <uxr_buffer_delete_entity>
 8016392:	4602      	mov	r2, r0
 8016394:	6920      	ldr	r0, [r4, #16]
 8016396:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801639a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801639e:	f000 fced 	bl	8016d7c <run_xrce_session>
 80163a2:	4603      	mov	r3, r0
 80163a4:	4628      	mov	r0, r5
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	bf14      	ite	ne
 80163aa:	2400      	movne	r4, #0
 80163ac:	2402      	moveq	r4, #2
 80163ae:	f000 fbab 	bl	8016b08 <rmw_uxrce_fini_service_memory>
 80163b2:	e7c4      	b.n	801633e <rmw_destroy_service+0x12>

080163b4 <rmw_service_response_publisher_get_actual_qos>:
 80163b4:	b181      	cbz	r1, 80163d8 <rmw_service_response_publisher_get_actual_qos+0x24>
 80163b6:	4603      	mov	r3, r0
 80163b8:	b510      	push	{r4, lr}
 80163ba:	fab0 f480 	clz	r4, r0
 80163be:	0964      	lsrs	r4, r4, #5
 80163c0:	b140      	cbz	r0, 80163d4 <rmw_service_response_publisher_get_actual_qos+0x20>
 80163c2:	685b      	ldr	r3, [r3, #4]
 80163c4:	4608      	mov	r0, r1
 80163c6:	2250      	movs	r2, #80	; 0x50
 80163c8:	f103 0120 	add.w	r1, r3, #32
 80163cc:	f00a fc73 	bl	8020cb6 <memcpy>
 80163d0:	4620      	mov	r0, r4
 80163d2:	bd10      	pop	{r4, pc}
 80163d4:	200b      	movs	r0, #11
 80163d6:	bd10      	pop	{r4, pc}
 80163d8:	200b      	movs	r0, #11
 80163da:	4770      	bx	lr

080163dc <rmw_service_request_subscription_get_actual_qos>:
 80163dc:	b178      	cbz	r0, 80163fe <rmw_service_request_subscription_get_actual_qos+0x22>
 80163de:	b510      	push	{r4, lr}
 80163e0:	fab1 f481 	clz	r4, r1
 80163e4:	0964      	lsrs	r4, r4, #5
 80163e6:	b141      	cbz	r1, 80163fa <rmw_service_request_subscription_get_actual_qos+0x1e>
 80163e8:	6843      	ldr	r3, [r0, #4]
 80163ea:	2250      	movs	r2, #80	; 0x50
 80163ec:	4608      	mov	r0, r1
 80163ee:	f103 0120 	add.w	r1, r3, #32
 80163f2:	f00a fc60 	bl	8020cb6 <memcpy>
 80163f6:	4620      	mov	r0, r4
 80163f8:	bd10      	pop	{r4, pc}
 80163fa:	200b      	movs	r0, #11
 80163fc:	bd10      	pop	{r4, pc}
 80163fe:	200b      	movs	r0, #11
 8016400:	4770      	bx	lr
 8016402:	bf00      	nop

08016404 <rmw_create_subscription>:
 8016404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016408:	b08d      	sub	sp, #52	; 0x34
 801640a:	2900      	cmp	r1, #0
 801640c:	f000 80d8 	beq.w	80165c0 <rmw_create_subscription+0x1bc>
 8016410:	4604      	mov	r4, r0
 8016412:	2800      	cmp	r0, #0
 8016414:	f000 80d4 	beq.w	80165c0 <rmw_create_subscription+0x1bc>
 8016418:	6800      	ldr	r0, [r0, #0]
 801641a:	460e      	mov	r6, r1
 801641c:	4615      	mov	r5, r2
 801641e:	461f      	mov	r7, r3
 8016420:	f000 fdbe 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8016424:	f080 0001 	eor.w	r0, r0, #1
 8016428:	b2c0      	uxtb	r0, r0
 801642a:	2800      	cmp	r0, #0
 801642c:	f040 80c8 	bne.w	80165c0 <rmw_create_subscription+0x1bc>
 8016430:	2d00      	cmp	r5, #0
 8016432:	f000 80c5 	beq.w	80165c0 <rmw_create_subscription+0x1bc>
 8016436:	782b      	ldrb	r3, [r5, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	f000 80c1 	beq.w	80165c0 <rmw_create_subscription+0x1bc>
 801643e:	2f00      	cmp	r7, #0
 8016440:	f000 80be 	beq.w	80165c0 <rmw_create_subscription+0x1bc>
 8016444:	4867      	ldr	r0, [pc, #412]	; (80165e4 <rmw_create_subscription+0x1e0>)
 8016446:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801644a:	f007 fc79 	bl	801dd40 <get_memory>
 801644e:	4604      	mov	r4, r0
 8016450:	2800      	cmp	r0, #0
 8016452:	f000 80b6 	beq.w	80165c2 <rmw_create_subscription+0x1be>
 8016456:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801645a:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 801645e:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8016462:	f007 fcd5 	bl	801de10 <rmw_get_implementation_identifier>
 8016466:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801646a:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 801646e:	4628      	mov	r0, r5
 8016470:	f7e9 ff46 	bl	8000300 <strlen>
 8016474:	3001      	adds	r0, #1
 8016476:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801647a:	283c      	cmp	r0, #60	; 0x3c
 801647c:	f200 80a5 	bhi.w	80165ca <rmw_create_subscription+0x1c6>
 8016480:	462b      	mov	r3, r5
 8016482:	4a59      	ldr	r2, [pc, #356]	; (80165e8 <rmw_create_subscription+0x1e4>)
 8016484:	213c      	movs	r1, #60	; 0x3c
 8016486:	4650      	mov	r0, sl
 8016488:	f00a f9b8 	bl	80207fc <sniprintf>
 801648c:	4639      	mov	r1, r7
 801648e:	2250      	movs	r2, #80	; 0x50
 8016490:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8016494:	f8c8 9020 	str.w	r9, [r8, #32]
 8016498:	f00a fc0d 	bl	8020cb6 <memcpy>
 801649c:	4630      	mov	r0, r6
 801649e:	4953      	ldr	r1, [pc, #332]	; (80165ec <rmw_create_subscription+0x1e8>)
 80164a0:	f000 fd8c 	bl	8016fbc <get_message_typesupport_handle>
 80164a4:	2800      	cmp	r0, #0
 80164a6:	f000 8090 	beq.w	80165ca <rmw_create_subscription+0x1c6>
 80164aa:	6842      	ldr	r2, [r0, #4]
 80164ac:	f8c8 2018 	str.w	r2, [r8, #24]
 80164b0:	2a00      	cmp	r2, #0
 80164b2:	f000 808a 	beq.w	80165ca <rmw_create_subscription+0x1c6>
 80164b6:	4629      	mov	r1, r5
 80164b8:	463b      	mov	r3, r7
 80164ba:	4648      	mov	r0, r9
 80164bc:	f007 fcd8 	bl	801de70 <create_topic>
 80164c0:	f8c8 001c 	str.w	r0, [r8, #28]
 80164c4:	2800      	cmp	r0, #0
 80164c6:	f000 8085 	beq.w	80165d4 <rmw_create_subscription+0x1d0>
 80164ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80164ce:	2104      	movs	r1, #4
 80164d0:	2506      	movs	r5, #6
 80164d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164d6:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80164da:	1c42      	adds	r2, r0, #1
 80164dc:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80164e0:	f001 fb6c 	bl	8017bbc <uxr_object_id>
 80164e4:	f8c8 0010 	str.w	r0, [r8, #16]
 80164e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80164ec:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80164f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80164f4:	9500      	str	r5, [sp, #0]
 80164f6:	6819      	ldr	r1, [r3, #0]
 80164f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80164fc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016500:	f001 f946 	bl	8017790 <uxr_buffer_create_subscriber_bin>
 8016504:	4602      	mov	r2, r0
 8016506:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801650a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801650e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016512:	f000 fc33 	bl	8016d7c <run_xrce_session>
 8016516:	2800      	cmp	r0, #0
 8016518:	d057      	beq.n	80165ca <rmw_create_subscription+0x1c6>
 801651a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801651e:	4629      	mov	r1, r5
 8016520:	ae08      	add	r6, sp, #32
 8016522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016526:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801652a:	1c42      	adds	r2, r0, #1
 801652c:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8016530:	f001 fb44 	bl	8017bbc <uxr_object_id>
 8016534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016538:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801653c:	4639      	mov	r1, r7
 801653e:	f8c8 0014 	str.w	r0, [r8, #20]
 8016542:	4630      	mov	r0, r6
 8016544:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8016548:	9305      	str	r3, [sp, #20]
 801654a:	f000 fc33 	bl	8016db4 <convert_qos_profile>
 801654e:	9503      	str	r5, [sp, #12]
 8016550:	9b05      	ldr	r3, [sp, #20]
 8016552:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016556:	9001      	str	r0, [sp, #4]
 8016558:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801655c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016560:	691b      	ldr	r3, [r3, #16]
 8016562:	9300      	str	r3, [sp, #0]
 8016564:	f8db 1000 	ldr.w	r1, [fp]
 8016568:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801656c:	f001 f9b6 	bl	80178dc <uxr_buffer_create_datareader_bin>
 8016570:	4602      	mov	r2, r0
 8016572:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016576:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801657a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801657e:	f000 fbfd 	bl	8016d7c <run_xrce_session>
 8016582:	b310      	cbz	r0, 80165ca <rmw_create_subscription+0x1c6>
 8016584:	7a3b      	ldrb	r3, [r7, #8]
 8016586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801658a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801658e:	2b02      	cmp	r3, #2
 8016590:	920a      	str	r2, [sp, #40]	; 0x28
 8016592:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016596:	f04f 0200 	mov.w	r2, #0
 801659a:	bf08      	it	eq
 801659c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80165a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80165a4:	bf18      	it	ne
 80165a6:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 80165aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80165ac:	9307      	str	r3, [sp, #28]
 80165ae:	ab0a      	add	r3, sp, #40	; 0x28
 80165b0:	9300      	str	r3, [sp, #0]
 80165b2:	9b07      	ldr	r3, [sp, #28]
 80165b4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80165b8:	6809      	ldr	r1, [r1, #0]
 80165ba:	f001 fb2f 	bl	8017c1c <uxr_buffer_request_data>
 80165be:	e000      	b.n	80165c2 <rmw_create_subscription+0x1be>
 80165c0:	2400      	movs	r4, #0
 80165c2:	4620      	mov	r0, r4
 80165c4:	b00d      	add	sp, #52	; 0x34
 80165c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ca:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80165ce:	b108      	cbz	r0, 80165d4 <rmw_create_subscription+0x1d0>
 80165d0:	f000 fac6 	bl	8016b60 <rmw_uxrce_fini_topic_memory>
 80165d4:	4620      	mov	r0, r4
 80165d6:	2400      	movs	r4, #0
 80165d8:	f000 fa80 	bl	8016adc <rmw_uxrce_fini_subscription_memory>
 80165dc:	4620      	mov	r0, r4
 80165de:	b00d      	add	sp, #52	; 0x34
 80165e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165e4:	20016f5c 	.word	0x20016f5c
 80165e8:	080251c4 	.word	0x080251c4
 80165ec:	0802446c 	.word	0x0802446c

080165f0 <rmw_subscription_get_actual_qos>:
 80165f0:	b178      	cbz	r0, 8016612 <rmw_subscription_get_actual_qos+0x22>
 80165f2:	b510      	push	{r4, lr}
 80165f4:	fab1 f481 	clz	r4, r1
 80165f8:	0964      	lsrs	r4, r4, #5
 80165fa:	b141      	cbz	r1, 801660e <rmw_subscription_get_actual_qos+0x1e>
 80165fc:	6843      	ldr	r3, [r0, #4]
 80165fe:	2250      	movs	r2, #80	; 0x50
 8016600:	4608      	mov	r0, r1
 8016602:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016606:	f00a fb56 	bl	8020cb6 <memcpy>
 801660a:	4620      	mov	r0, r4
 801660c:	bd10      	pop	{r4, pc}
 801660e:	200b      	movs	r0, #11
 8016610:	bd10      	pop	{r4, pc}
 8016612:	200b      	movs	r0, #11
 8016614:	4770      	bx	lr
 8016616:	bf00      	nop

08016618 <rmw_destroy_subscription>:
 8016618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801661c:	b128      	cbz	r0, 801662a <rmw_destroy_subscription+0x12>
 801661e:	4604      	mov	r4, r0
 8016620:	6800      	ldr	r0, [r0, #0]
 8016622:	460d      	mov	r5, r1
 8016624:	f000 fcbc 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8016628:	b918      	cbnz	r0, 8016632 <rmw_destroy_subscription+0x1a>
 801662a:	2401      	movs	r4, #1
 801662c:	4620      	mov	r0, r4
 801662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016632:	6863      	ldr	r3, [r4, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d0f8      	beq.n	801662a <rmw_destroy_subscription+0x12>
 8016638:	fab5 f485 	clz	r4, r5
 801663c:	0964      	lsrs	r4, r4, #5
 801663e:	2d00      	cmp	r5, #0
 8016640:	d0f3      	beq.n	801662a <rmw_destroy_subscription+0x12>
 8016642:	6828      	ldr	r0, [r5, #0]
 8016644:	f000 fcac 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 8016648:	2800      	cmp	r0, #0
 801664a:	d0ee      	beq.n	801662a <rmw_destroy_subscription+0x12>
 801664c:	686e      	ldr	r6, [r5, #4]
 801664e:	2e00      	cmp	r6, #0
 8016650:	d0eb      	beq.n	801662a <rmw_destroy_subscription+0x12>
 8016652:	6a37      	ldr	r7, [r6, #32]
 8016654:	6972      	ldr	r2, [r6, #20]
 8016656:	6938      	ldr	r0, [r7, #16]
 8016658:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801665c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016660:	6819      	ldr	r1, [r3, #0]
 8016662:	f001 fb15 	bl	8017c90 <uxr_buffer_cancel_data>
 8016666:	4602      	mov	r2, r0
 8016668:	6938      	ldr	r0, [r7, #16]
 801666a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801666e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016672:	f000 fb83 	bl	8016d7c <run_xrce_session>
 8016676:	69f0      	ldr	r0, [r6, #28]
 8016678:	f007 fc4a 	bl	801df10 <destroy_topic>
 801667c:	6a33      	ldr	r3, [r6, #32]
 801667e:	6972      	ldr	r2, [r6, #20]
 8016680:	6918      	ldr	r0, [r3, #16]
 8016682:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016686:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801668a:	6819      	ldr	r1, [r3, #0]
 801668c:	f000 ff9c 	bl	80175c8 <uxr_buffer_delete_entity>
 8016690:	6a33      	ldr	r3, [r6, #32]
 8016692:	4680      	mov	r8, r0
 8016694:	6932      	ldr	r2, [r6, #16]
 8016696:	6918      	ldr	r0, [r3, #16]
 8016698:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801669c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80166a0:	6819      	ldr	r1, [r3, #0]
 80166a2:	f000 ff91 	bl	80175c8 <uxr_buffer_delete_entity>
 80166a6:	4606      	mov	r6, r0
 80166a8:	6938      	ldr	r0, [r7, #16]
 80166aa:	4642      	mov	r2, r8
 80166ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80166b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80166b4:	f000 fb62 	bl	8016d7c <run_xrce_session>
 80166b8:	693f      	ldr	r7, [r7, #16]
 80166ba:	4632      	mov	r2, r6
 80166bc:	4606      	mov	r6, r0
 80166be:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80166c2:	4638      	mov	r0, r7
 80166c4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80166c8:	f000 fb58 	bl	8016d7c <run_xrce_session>
 80166cc:	b126      	cbz	r6, 80166d8 <rmw_destroy_subscription+0xc0>
 80166ce:	b118      	cbz	r0, 80166d8 <rmw_destroy_subscription+0xc0>
 80166d0:	4628      	mov	r0, r5
 80166d2:	f000 fa03 	bl	8016adc <rmw_uxrce_fini_subscription_memory>
 80166d6:	e7a9      	b.n	801662c <rmw_destroy_subscription+0x14>
 80166d8:	2402      	movs	r4, #2
 80166da:	e7f9      	b.n	80166d0 <rmw_destroy_subscription+0xb8>

080166dc <rmw_take_with_info>:
 80166dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166de:	4604      	mov	r4, r0
 80166e0:	6800      	ldr	r0, [r0, #0]
 80166e2:	b089      	sub	sp, #36	; 0x24
 80166e4:	460f      	mov	r7, r1
 80166e6:	4615      	mov	r5, r2
 80166e8:	b128      	cbz	r0, 80166f6 <rmw_take_with_info+0x1a>
 80166ea:	4b24      	ldr	r3, [pc, #144]	; (801677c <rmw_take_with_info+0xa0>)
 80166ec:	6819      	ldr	r1, [r3, #0]
 80166ee:	f7e9 fda7 	bl	8000240 <strcmp>
 80166f2:	2800      	cmp	r0, #0
 80166f4:	d13e      	bne.n	8016774 <rmw_take_with_info+0x98>
 80166f6:	b305      	cbz	r5, 801673a <rmw_take_with_info+0x5e>
 80166f8:	2300      	movs	r3, #0
 80166fa:	6864      	ldr	r4, [r4, #4]
 80166fc:	702b      	strb	r3, [r5, #0]
 80166fe:	f000 fabf 	bl	8016c80 <rmw_uxrce_clean_expired_static_input_buffer>
 8016702:	4620      	mov	r0, r4
 8016704:	f000 fa92 	bl	8016c2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016708:	4606      	mov	r6, r0
 801670a:	b1f0      	cbz	r0, 801674a <rmw_take_with_info+0x6e>
 801670c:	6881      	ldr	r1, [r0, #8]
 801670e:	4668      	mov	r0, sp
 8016710:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016714:	3110      	adds	r1, #16
 8016716:	f7fc fc97 	bl	8013048 <ucdr_init_buffer>
 801671a:	69a3      	ldr	r3, [r4, #24]
 801671c:	4639      	mov	r1, r7
 801671e:	4668      	mov	r0, sp
 8016720:	68db      	ldr	r3, [r3, #12]
 8016722:	4798      	blx	r3
 8016724:	4604      	mov	r4, r0
 8016726:	4631      	mov	r1, r6
 8016728:	4815      	ldr	r0, [pc, #84]	; (8016780 <rmw_take_with_info+0xa4>)
 801672a:	f007 fb19 	bl	801dd60 <put_memory>
 801672e:	702c      	strb	r4, [r5, #0]
 8016730:	f084 0001 	eor.w	r0, r4, #1
 8016734:	b2c0      	uxtb	r0, r0
 8016736:	b009      	add	sp, #36	; 0x24
 8016738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801673a:	6864      	ldr	r4, [r4, #4]
 801673c:	f000 faa0 	bl	8016c80 <rmw_uxrce_clean_expired_static_input_buffer>
 8016740:	4620      	mov	r0, r4
 8016742:	f000 fa73 	bl	8016c2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8016746:	4605      	mov	r5, r0
 8016748:	b910      	cbnz	r0, 8016750 <rmw_take_with_info+0x74>
 801674a:	2001      	movs	r0, #1
 801674c:	b009      	add	sp, #36	; 0x24
 801674e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016750:	68a9      	ldr	r1, [r5, #8]
 8016752:	4668      	mov	r0, sp
 8016754:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016758:	3110      	adds	r1, #16
 801675a:	f7fc fc75 	bl	8013048 <ucdr_init_buffer>
 801675e:	69a3      	ldr	r3, [r4, #24]
 8016760:	4639      	mov	r1, r7
 8016762:	4668      	mov	r0, sp
 8016764:	68db      	ldr	r3, [r3, #12]
 8016766:	4798      	blx	r3
 8016768:	4629      	mov	r1, r5
 801676a:	4604      	mov	r4, r0
 801676c:	4804      	ldr	r0, [pc, #16]	; (8016780 <rmw_take_with_info+0xa4>)
 801676e:	f007 faf7 	bl	801dd60 <put_memory>
 8016772:	e7dd      	b.n	8016730 <rmw_take_with_info+0x54>
 8016774:	200c      	movs	r0, #12
 8016776:	b009      	add	sp, #36	; 0x24
 8016778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801677a:	bf00      	nop
 801677c:	08025824 	.word	0x08025824
 8016780:	20016f4c 	.word	0x20016f4c

08016784 <rmw_uxrce_transport_init>:
 8016784:	b508      	push	{r3, lr}
 8016786:	b108      	cbz	r0, 801678c <rmw_uxrce_transport_init+0x8>
 8016788:	f100 0210 	add.w	r2, r0, #16
 801678c:	b139      	cbz	r1, 801679e <rmw_uxrce_transport_init+0x1a>
 801678e:	6949      	ldr	r1, [r1, #20]
 8016790:	4610      	mov	r0, r2
 8016792:	f001 f9db 	bl	8017b4c <uxr_init_custom_transport>
 8016796:	f080 0001 	eor.w	r0, r0, #1
 801679a:	b2c0      	uxtb	r0, r0
 801679c:	bd08      	pop	{r3, pc}
 801679e:	4b04      	ldr	r3, [pc, #16]	; (80167b0 <rmw_uxrce_transport_init+0x2c>)
 80167a0:	4610      	mov	r0, r2
 80167a2:	6859      	ldr	r1, [r3, #4]
 80167a4:	f001 f9d2 	bl	8017b4c <uxr_init_custom_transport>
 80167a8:	f080 0001 	eor.w	r0, r0, #1
 80167ac:	b2c0      	uxtb	r0, r0
 80167ae:	bd08      	pop	{r3, pc}
 80167b0:	200124a4 	.word	0x200124a4

080167b4 <rmw_uxrce_init_service_memory>:
 80167b4:	b1e2      	cbz	r2, 80167f0 <rmw_uxrce_init_service_memory+0x3c>
 80167b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167ba:	7b05      	ldrb	r5, [r0, #12]
 80167bc:	4606      	mov	r6, r0
 80167be:	b9ad      	cbnz	r5, 80167ec <rmw_uxrce_init_service_memory+0x38>
 80167c0:	23c8      	movs	r3, #200	; 0xc8
 80167c2:	4617      	mov	r7, r2
 80167c4:	460c      	mov	r4, r1
 80167c6:	46a8      	mov	r8, r5
 80167c8:	6083      	str	r3, [r0, #8]
 80167ca:	f240 1301 	movw	r3, #257	; 0x101
 80167ce:	e9c0 5500 	strd	r5, r5, [r0]
 80167d2:	8183      	strh	r3, [r0, #12]
 80167d4:	3501      	adds	r5, #1
 80167d6:	4621      	mov	r1, r4
 80167d8:	4630      	mov	r0, r6
 80167da:	f007 fac1 	bl	801dd60 <put_memory>
 80167de:	42af      	cmp	r7, r5
 80167e0:	60a4      	str	r4, [r4, #8]
 80167e2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80167e6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80167ea:	d1f3      	bne.n	80167d4 <rmw_uxrce_init_service_memory+0x20>
 80167ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167f0:	4770      	bx	lr
 80167f2:	bf00      	nop

080167f4 <rmw_uxrce_init_client_memory>:
 80167f4:	b1e2      	cbz	r2, 8016830 <rmw_uxrce_init_client_memory+0x3c>
 80167f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167fa:	7b05      	ldrb	r5, [r0, #12]
 80167fc:	4606      	mov	r6, r0
 80167fe:	b9ad      	cbnz	r5, 801682c <rmw_uxrce_init_client_memory+0x38>
 8016800:	23c8      	movs	r3, #200	; 0xc8
 8016802:	4617      	mov	r7, r2
 8016804:	460c      	mov	r4, r1
 8016806:	46a8      	mov	r8, r5
 8016808:	6083      	str	r3, [r0, #8]
 801680a:	f240 1301 	movw	r3, #257	; 0x101
 801680e:	e9c0 5500 	strd	r5, r5, [r0]
 8016812:	8183      	strh	r3, [r0, #12]
 8016814:	3501      	adds	r5, #1
 8016816:	4621      	mov	r1, r4
 8016818:	4630      	mov	r0, r6
 801681a:	f007 faa1 	bl	801dd60 <put_memory>
 801681e:	42af      	cmp	r7, r5
 8016820:	60a4      	str	r4, [r4, #8]
 8016822:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016826:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801682a:	d1f3      	bne.n	8016814 <rmw_uxrce_init_client_memory+0x20>
 801682c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016830:	4770      	bx	lr
 8016832:	bf00      	nop

08016834 <rmw_uxrce_init_publisher_memory>:
 8016834:	b1e2      	cbz	r2, 8016870 <rmw_uxrce_init_publisher_memory+0x3c>
 8016836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801683a:	7b05      	ldrb	r5, [r0, #12]
 801683c:	4606      	mov	r6, r0
 801683e:	b9ad      	cbnz	r5, 801686c <rmw_uxrce_init_publisher_memory+0x38>
 8016840:	23d8      	movs	r3, #216	; 0xd8
 8016842:	4617      	mov	r7, r2
 8016844:	460c      	mov	r4, r1
 8016846:	46a8      	mov	r8, r5
 8016848:	6083      	str	r3, [r0, #8]
 801684a:	f240 1301 	movw	r3, #257	; 0x101
 801684e:	e9c0 5500 	strd	r5, r5, [r0]
 8016852:	8183      	strh	r3, [r0, #12]
 8016854:	3501      	adds	r5, #1
 8016856:	4621      	mov	r1, r4
 8016858:	4630      	mov	r0, r6
 801685a:	f007 fa81 	bl	801dd60 <put_memory>
 801685e:	42af      	cmp	r7, r5
 8016860:	60a4      	str	r4, [r4, #8]
 8016862:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016866:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801686a:	d1f3      	bne.n	8016854 <rmw_uxrce_init_publisher_memory+0x20>
 801686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016870:	4770      	bx	lr
 8016872:	bf00      	nop

08016874 <rmw_uxrce_init_subscription_memory>:
 8016874:	b1e2      	cbz	r2, 80168b0 <rmw_uxrce_init_subscription_memory+0x3c>
 8016876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801687a:	7b05      	ldrb	r5, [r0, #12]
 801687c:	4606      	mov	r6, r0
 801687e:	b9ad      	cbnz	r5, 80168ac <rmw_uxrce_init_subscription_memory+0x38>
 8016880:	23d8      	movs	r3, #216	; 0xd8
 8016882:	4617      	mov	r7, r2
 8016884:	460c      	mov	r4, r1
 8016886:	46a8      	mov	r8, r5
 8016888:	6083      	str	r3, [r0, #8]
 801688a:	f240 1301 	movw	r3, #257	; 0x101
 801688e:	e9c0 5500 	strd	r5, r5, [r0]
 8016892:	8183      	strh	r3, [r0, #12]
 8016894:	3501      	adds	r5, #1
 8016896:	4621      	mov	r1, r4
 8016898:	4630      	mov	r0, r6
 801689a:	f007 fa61 	bl	801dd60 <put_memory>
 801689e:	42af      	cmp	r7, r5
 80168a0:	60a4      	str	r4, [r4, #8]
 80168a2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80168a6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80168aa:	d1f3      	bne.n	8016894 <rmw_uxrce_init_subscription_memory+0x20>
 80168ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168b0:	4770      	bx	lr
 80168b2:	bf00      	nop

080168b4 <rmw_uxrce_init_node_memory>:
 80168b4:	b1e2      	cbz	r2, 80168f0 <rmw_uxrce_init_node_memory+0x3c>
 80168b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ba:	7b05      	ldrb	r5, [r0, #12]
 80168bc:	4606      	mov	r6, r0
 80168be:	b9ad      	cbnz	r5, 80168ec <rmw_uxrce_init_node_memory+0x38>
 80168c0:	23a4      	movs	r3, #164	; 0xa4
 80168c2:	4617      	mov	r7, r2
 80168c4:	460c      	mov	r4, r1
 80168c6:	46a8      	mov	r8, r5
 80168c8:	6083      	str	r3, [r0, #8]
 80168ca:	f240 1301 	movw	r3, #257	; 0x101
 80168ce:	e9c0 5500 	strd	r5, r5, [r0]
 80168d2:	8183      	strh	r3, [r0, #12]
 80168d4:	3501      	adds	r5, #1
 80168d6:	4621      	mov	r1, r4
 80168d8:	4630      	mov	r0, r6
 80168da:	f007 fa41 	bl	801dd60 <put_memory>
 80168de:	42af      	cmp	r7, r5
 80168e0:	60a4      	str	r4, [r4, #8]
 80168e2:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 80168e6:	f804 8c98 	strb.w	r8, [r4, #-152]
 80168ea:	d1f3      	bne.n	80168d4 <rmw_uxrce_init_node_memory+0x20>
 80168ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168f0:	4770      	bx	lr
 80168f2:	bf00      	nop

080168f4 <rmw_uxrce_init_session_memory>:
 80168f4:	b1ea      	cbz	r2, 8016932 <rmw_uxrce_init_session_memory+0x3e>
 80168f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168fa:	7b05      	ldrb	r5, [r0, #12]
 80168fc:	4606      	mov	r6, r0
 80168fe:	b9b5      	cbnz	r5, 801692e <rmw_uxrce_init_session_memory+0x3a>
 8016900:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8016904:	f240 1301 	movw	r3, #257	; 0x101
 8016908:	4617      	mov	r7, r2
 801690a:	460c      	mov	r4, r1
 801690c:	46a9      	mov	r9, r5
 801690e:	f8c0 8008 	str.w	r8, [r0, #8]
 8016912:	8183      	strh	r3, [r0, #12]
 8016914:	e9c0 5500 	strd	r5, r5, [r0]
 8016918:	3501      	adds	r5, #1
 801691a:	4621      	mov	r1, r4
 801691c:	4630      	mov	r0, r6
 801691e:	f007 fa1f 	bl	801dd60 <put_memory>
 8016922:	42af      	cmp	r7, r5
 8016924:	60a4      	str	r4, [r4, #8]
 8016926:	f884 900c 	strb.w	r9, [r4, #12]
 801692a:	4444      	add	r4, r8
 801692c:	d1f4      	bne.n	8016918 <rmw_uxrce_init_session_memory+0x24>
 801692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016932:	4770      	bx	lr

08016934 <rmw_uxrce_init_topic_memory>:
 8016934:	b1e2      	cbz	r2, 8016970 <rmw_uxrce_init_topic_memory+0x3c>
 8016936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801693a:	7b05      	ldrb	r5, [r0, #12]
 801693c:	4606      	mov	r6, r0
 801693e:	b9ad      	cbnz	r5, 801696c <rmw_uxrce_init_topic_memory+0x38>
 8016940:	231c      	movs	r3, #28
 8016942:	4617      	mov	r7, r2
 8016944:	460c      	mov	r4, r1
 8016946:	46a8      	mov	r8, r5
 8016948:	6083      	str	r3, [r0, #8]
 801694a:	f240 1301 	movw	r3, #257	; 0x101
 801694e:	e9c0 5500 	strd	r5, r5, [r0]
 8016952:	8183      	strh	r3, [r0, #12]
 8016954:	3501      	adds	r5, #1
 8016956:	4621      	mov	r1, r4
 8016958:	4630      	mov	r0, r6
 801695a:	f007 fa01 	bl	801dd60 <put_memory>
 801695e:	42af      	cmp	r7, r5
 8016960:	60a4      	str	r4, [r4, #8]
 8016962:	f104 041c 	add.w	r4, r4, #28
 8016966:	f804 8c10 	strb.w	r8, [r4, #-16]
 801696a:	d1f3      	bne.n	8016954 <rmw_uxrce_init_topic_memory+0x20>
 801696c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016970:	4770      	bx	lr
 8016972:	bf00      	nop

08016974 <rmw_uxrce_init_static_input_buffer_memory>:
 8016974:	b1ea      	cbz	r2, 80169b2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801697a:	7b05      	ldrb	r5, [r0, #12]
 801697c:	4606      	mov	r6, r0
 801697e:	b9b5      	cbnz	r5, 80169ae <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016980:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8016984:	4617      	mov	r7, r2
 8016986:	460c      	mov	r4, r1
 8016988:	46a8      	mov	r8, r5
 801698a:	6083      	str	r3, [r0, #8]
 801698c:	f240 1301 	movw	r3, #257	; 0x101
 8016990:	e9c0 5500 	strd	r5, r5, [r0]
 8016994:	8183      	strh	r3, [r0, #12]
 8016996:	3501      	adds	r5, #1
 8016998:	4621      	mov	r1, r4
 801699a:	4630      	mov	r0, r6
 801699c:	f007 f9e0 	bl	801dd60 <put_memory>
 80169a0:	42af      	cmp	r7, r5
 80169a2:	60a4      	str	r4, [r4, #8]
 80169a4:	f884 800c 	strb.w	r8, [r4, #12]
 80169a8:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80169ac:	d1f3      	bne.n	8016996 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80169ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169b2:	4770      	bx	lr

080169b4 <rmw_uxrce_init_init_options_impl_memory>:
 80169b4:	b1e2      	cbz	r2, 80169f0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80169b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ba:	7b05      	ldrb	r5, [r0, #12]
 80169bc:	4606      	mov	r6, r0
 80169be:	b9ad      	cbnz	r5, 80169ec <rmw_uxrce_init_init_options_impl_memory+0x38>
 80169c0:	232c      	movs	r3, #44	; 0x2c
 80169c2:	4617      	mov	r7, r2
 80169c4:	460c      	mov	r4, r1
 80169c6:	46a8      	mov	r8, r5
 80169c8:	6083      	str	r3, [r0, #8]
 80169ca:	f240 1301 	movw	r3, #257	; 0x101
 80169ce:	e9c0 5500 	strd	r5, r5, [r0]
 80169d2:	8183      	strh	r3, [r0, #12]
 80169d4:	3501      	adds	r5, #1
 80169d6:	4621      	mov	r1, r4
 80169d8:	4630      	mov	r0, r6
 80169da:	f007 f9c1 	bl	801dd60 <put_memory>
 80169de:	42af      	cmp	r7, r5
 80169e0:	60a4      	str	r4, [r4, #8]
 80169e2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 80169e6:	f804 8c20 	strb.w	r8, [r4, #-32]
 80169ea:	d1f3      	bne.n	80169d4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 80169ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169f0:	4770      	bx	lr
 80169f2:	bf00      	nop

080169f4 <rmw_uxrce_init_wait_set_memory>:
 80169f4:	b1e2      	cbz	r2, 8016a30 <rmw_uxrce_init_wait_set_memory+0x3c>
 80169f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169fa:	7b05      	ldrb	r5, [r0, #12]
 80169fc:	4606      	mov	r6, r0
 80169fe:	b9ad      	cbnz	r5, 8016a2c <rmw_uxrce_init_wait_set_memory+0x38>
 8016a00:	231c      	movs	r3, #28
 8016a02:	4617      	mov	r7, r2
 8016a04:	460c      	mov	r4, r1
 8016a06:	46a8      	mov	r8, r5
 8016a08:	6083      	str	r3, [r0, #8]
 8016a0a:	f240 1301 	movw	r3, #257	; 0x101
 8016a0e:	e9c0 5500 	strd	r5, r5, [r0]
 8016a12:	8183      	strh	r3, [r0, #12]
 8016a14:	3501      	adds	r5, #1
 8016a16:	4621      	mov	r1, r4
 8016a18:	4630      	mov	r0, r6
 8016a1a:	f007 f9a1 	bl	801dd60 <put_memory>
 8016a1e:	42af      	cmp	r7, r5
 8016a20:	60a4      	str	r4, [r4, #8]
 8016a22:	f104 041c 	add.w	r4, r4, #28
 8016a26:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016a2a:	d1f3      	bne.n	8016a14 <rmw_uxrce_init_wait_set_memory+0x20>
 8016a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a30:	4770      	bx	lr
 8016a32:	bf00      	nop

08016a34 <rmw_uxrce_init_guard_condition_memory>:
 8016a34:	b1e2      	cbz	r2, 8016a70 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8016a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a3a:	7b05      	ldrb	r5, [r0, #12]
 8016a3c:	4606      	mov	r6, r0
 8016a3e:	b9ad      	cbnz	r5, 8016a6c <rmw_uxrce_init_guard_condition_memory+0x38>
 8016a40:	2320      	movs	r3, #32
 8016a42:	4617      	mov	r7, r2
 8016a44:	460c      	mov	r4, r1
 8016a46:	46a8      	mov	r8, r5
 8016a48:	6083      	str	r3, [r0, #8]
 8016a4a:	f240 1301 	movw	r3, #257	; 0x101
 8016a4e:	e9c0 5500 	strd	r5, r5, [r0]
 8016a52:	8183      	strh	r3, [r0, #12]
 8016a54:	3501      	adds	r5, #1
 8016a56:	4621      	mov	r1, r4
 8016a58:	4630      	mov	r0, r6
 8016a5a:	f007 f981 	bl	801dd60 <put_memory>
 8016a5e:	42af      	cmp	r7, r5
 8016a60:	60a4      	str	r4, [r4, #8]
 8016a62:	f104 0420 	add.w	r4, r4, #32
 8016a66:	f804 8c14 	strb.w	r8, [r4, #-20]
 8016a6a:	d1f3      	bne.n	8016a54 <rmw_uxrce_init_guard_condition_memory+0x20>
 8016a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a70:	4770      	bx	lr
 8016a72:	bf00      	nop

08016a74 <rmw_uxrce_fini_session_memory>:
 8016a74:	4601      	mov	r1, r0
 8016a76:	4801      	ldr	r0, [pc, #4]	; (8016a7c <rmw_uxrce_fini_session_memory+0x8>)
 8016a78:	f007 b972 	b.w	801dd60 <put_memory>
 8016a7c:	20016f3c 	.word	0x20016f3c

08016a80 <rmw_uxrce_fini_node_memory>:
 8016a80:	b538      	push	{r3, r4, r5, lr}
 8016a82:	4604      	mov	r4, r0
 8016a84:	6800      	ldr	r0, [r0, #0]
 8016a86:	b128      	cbz	r0, 8016a94 <rmw_uxrce_fini_node_memory+0x14>
 8016a88:	4b07      	ldr	r3, [pc, #28]	; (8016aa8 <rmw_uxrce_fini_node_memory+0x28>)
 8016a8a:	6819      	ldr	r1, [r3, #0]
 8016a8c:	f7e9 fbd8 	bl	8000240 <strcmp>
 8016a90:	b940      	cbnz	r0, 8016aa4 <rmw_uxrce_fini_node_memory+0x24>
 8016a92:	6020      	str	r0, [r4, #0]
 8016a94:	6861      	ldr	r1, [r4, #4]
 8016a96:	b129      	cbz	r1, 8016aa4 <rmw_uxrce_fini_node_memory+0x24>
 8016a98:	2500      	movs	r5, #0
 8016a9a:	4804      	ldr	r0, [pc, #16]	; (8016aac <rmw_uxrce_fini_node_memory+0x2c>)
 8016a9c:	610d      	str	r5, [r1, #16]
 8016a9e:	f007 f95f 	bl	801dd60 <put_memory>
 8016aa2:	6065      	str	r5, [r4, #4]
 8016aa4:	bd38      	pop	{r3, r4, r5, pc}
 8016aa6:	bf00      	nop
 8016aa8:	08025824 	.word	0x08025824
 8016aac:	20016f0c 	.word	0x20016f0c

08016ab0 <rmw_uxrce_fini_publisher_memory>:
 8016ab0:	b510      	push	{r4, lr}
 8016ab2:	4604      	mov	r4, r0
 8016ab4:	6800      	ldr	r0, [r0, #0]
 8016ab6:	b128      	cbz	r0, 8016ac4 <rmw_uxrce_fini_publisher_memory+0x14>
 8016ab8:	4b06      	ldr	r3, [pc, #24]	; (8016ad4 <rmw_uxrce_fini_publisher_memory+0x24>)
 8016aba:	6819      	ldr	r1, [r3, #0]
 8016abc:	f7e9 fbc0 	bl	8000240 <strcmp>
 8016ac0:	b938      	cbnz	r0, 8016ad2 <rmw_uxrce_fini_publisher_memory+0x22>
 8016ac2:	6020      	str	r0, [r4, #0]
 8016ac4:	6861      	ldr	r1, [r4, #4]
 8016ac6:	b121      	cbz	r1, 8016ad2 <rmw_uxrce_fini_publisher_memory+0x22>
 8016ac8:	4803      	ldr	r0, [pc, #12]	; (8016ad8 <rmw_uxrce_fini_publisher_memory+0x28>)
 8016aca:	f007 f949 	bl	801dd60 <put_memory>
 8016ace:	2300      	movs	r3, #0
 8016ad0:	6063      	str	r3, [r4, #4]
 8016ad2:	bd10      	pop	{r4, pc}
 8016ad4:	08025824 	.word	0x08025824
 8016ad8:	20016f1c 	.word	0x20016f1c

08016adc <rmw_uxrce_fini_subscription_memory>:
 8016adc:	b510      	push	{r4, lr}
 8016ade:	4604      	mov	r4, r0
 8016ae0:	6800      	ldr	r0, [r0, #0]
 8016ae2:	b128      	cbz	r0, 8016af0 <rmw_uxrce_fini_subscription_memory+0x14>
 8016ae4:	4b06      	ldr	r3, [pc, #24]	; (8016b00 <rmw_uxrce_fini_subscription_memory+0x24>)
 8016ae6:	6819      	ldr	r1, [r3, #0]
 8016ae8:	f7e9 fbaa 	bl	8000240 <strcmp>
 8016aec:	b938      	cbnz	r0, 8016afe <rmw_uxrce_fini_subscription_memory+0x22>
 8016aee:	6020      	str	r0, [r4, #0]
 8016af0:	6861      	ldr	r1, [r4, #4]
 8016af2:	b121      	cbz	r1, 8016afe <rmw_uxrce_fini_subscription_memory+0x22>
 8016af4:	4803      	ldr	r0, [pc, #12]	; (8016b04 <rmw_uxrce_fini_subscription_memory+0x28>)
 8016af6:	f007 f933 	bl	801dd60 <put_memory>
 8016afa:	2300      	movs	r3, #0
 8016afc:	6063      	str	r3, [r4, #4]
 8016afe:	bd10      	pop	{r4, pc}
 8016b00:	08025824 	.word	0x08025824
 8016b04:	20016f5c 	.word	0x20016f5c

08016b08 <rmw_uxrce_fini_service_memory>:
 8016b08:	b510      	push	{r4, lr}
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	6800      	ldr	r0, [r0, #0]
 8016b0e:	b128      	cbz	r0, 8016b1c <rmw_uxrce_fini_service_memory+0x14>
 8016b10:	4b06      	ldr	r3, [pc, #24]	; (8016b2c <rmw_uxrce_fini_service_memory+0x24>)
 8016b12:	6819      	ldr	r1, [r3, #0]
 8016b14:	f7e9 fb94 	bl	8000240 <strcmp>
 8016b18:	b938      	cbnz	r0, 8016b2a <rmw_uxrce_fini_service_memory+0x22>
 8016b1a:	6020      	str	r0, [r4, #0]
 8016b1c:	6861      	ldr	r1, [r4, #4]
 8016b1e:	b121      	cbz	r1, 8016b2a <rmw_uxrce_fini_service_memory+0x22>
 8016b20:	4803      	ldr	r0, [pc, #12]	; (8016b30 <rmw_uxrce_fini_service_memory+0x28>)
 8016b22:	f007 f91d 	bl	801dd60 <put_memory>
 8016b26:	2300      	movs	r3, #0
 8016b28:	6063      	str	r3, [r4, #4]
 8016b2a:	bd10      	pop	{r4, pc}
 8016b2c:	08025824 	.word	0x08025824
 8016b30:	20016f2c 	.word	0x20016f2c

08016b34 <rmw_uxrce_fini_client_memory>:
 8016b34:	b510      	push	{r4, lr}
 8016b36:	4604      	mov	r4, r0
 8016b38:	6800      	ldr	r0, [r0, #0]
 8016b3a:	b128      	cbz	r0, 8016b48 <rmw_uxrce_fini_client_memory+0x14>
 8016b3c:	4b06      	ldr	r3, [pc, #24]	; (8016b58 <rmw_uxrce_fini_client_memory+0x24>)
 8016b3e:	6819      	ldr	r1, [r3, #0]
 8016b40:	f7e9 fb7e 	bl	8000240 <strcmp>
 8016b44:	b938      	cbnz	r0, 8016b56 <rmw_uxrce_fini_client_memory+0x22>
 8016b46:	6020      	str	r0, [r4, #0]
 8016b48:	6861      	ldr	r1, [r4, #4]
 8016b4a:	b121      	cbz	r1, 8016b56 <rmw_uxrce_fini_client_memory+0x22>
 8016b4c:	4803      	ldr	r0, [pc, #12]	; (8016b5c <rmw_uxrce_fini_client_memory+0x28>)
 8016b4e:	f007 f907 	bl	801dd60 <put_memory>
 8016b52:	2300      	movs	r3, #0
 8016b54:	6063      	str	r3, [r4, #4]
 8016b56:	bd10      	pop	{r4, pc}
 8016b58:	08025824 	.word	0x08025824
 8016b5c:	2001263c 	.word	0x2001263c

08016b60 <rmw_uxrce_fini_topic_memory>:
 8016b60:	b510      	push	{r4, lr}
 8016b62:	4604      	mov	r4, r0
 8016b64:	4803      	ldr	r0, [pc, #12]	; (8016b74 <rmw_uxrce_fini_topic_memory+0x14>)
 8016b66:	4621      	mov	r1, r4
 8016b68:	f007 f8fa 	bl	801dd60 <put_memory>
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	61a3      	str	r3, [r4, #24]
 8016b70:	bd10      	pop	{r4, pc}
 8016b72:	bf00      	nop
 8016b74:	20016f6c 	.word	0x20016f6c

08016b78 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8016b78:	b082      	sub	sp, #8
 8016b7a:	492b      	ldr	r1, [pc, #172]	; (8016c28 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016b7c:	b530      	push	{r4, r5, lr}
 8016b7e:	680d      	ldr	r5, [r1, #0]
 8016b80:	ac03      	add	r4, sp, #12
 8016b82:	e884 000c 	stmia.w	r4, {r2, r3}
 8016b86:	461c      	mov	r4, r3
 8016b88:	2d00      	cmp	r5, #0
 8016b8a:	d04b      	beq.n	8016c24 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8016b8c:	462b      	mov	r3, r5
 8016b8e:	2100      	movs	r1, #0
 8016b90:	689a      	ldr	r2, [r3, #8]
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8016b98:	4290      	cmp	r0, r2
 8016b9a:	bf08      	it	eq
 8016b9c:	3101      	addeq	r1, #1
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d1f6      	bne.n	8016b90 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8016ba2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016ba6:	2b02      	cmp	r3, #2
 8016ba8:	d029      	beq.n	8016bfe <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8016baa:	d820      	bhi.n	8016bee <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8016bac:	428c      	cmp	r4, r1
 8016bae:	d828      	bhi.n	8016c02 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016bb0:	fab4 f284 	clz	r2, r4
 8016bb4:	0952      	lsrs	r2, r2, #5
 8016bb6:	b324      	cbz	r4, 8016c02 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8016bb8:	b1dd      	cbz	r5, 8016bf2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8016bba:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8016bbe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8016bc2:	e001      	b.n	8016bc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8016bc4:	686d      	ldr	r5, [r5, #4]
 8016bc6:	b1ad      	cbz	r5, 8016bf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016bc8:	68ab      	ldr	r3, [r5, #8]
 8016bca:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8016bce:	4288      	cmp	r0, r1
 8016bd0:	d1f8      	bne.n	8016bc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016bd2:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8016bd6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8016bda:	4561      	cmp	r1, ip
 8016bdc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016be0:	eb73 0e04 	sbcs.w	lr, r3, r4
 8016be4:	daee      	bge.n	8016bc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016be6:	468c      	mov	ip, r1
 8016be8:	461c      	mov	r4, r3
 8016bea:	462a      	mov	r2, r5
 8016bec:	e7ea      	b.n	8016bc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8016bee:	2b03      	cmp	r3, #3
 8016bf0:	d0dc      	beq.n	8016bac <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	4610      	mov	r0, r2
 8016bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016bfa:	b002      	add	sp, #8
 8016bfc:	4770      	bx	lr
 8016bfe:	428c      	cmp	r4, r1
 8016c00:	d905      	bls.n	8016c0e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8016c02:	4809      	ldr	r0, [pc, #36]	; (8016c28 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c08:	b002      	add	sp, #8
 8016c0a:	f007 b899 	b.w	801dd40 <get_memory>
 8016c0e:	fab4 f284 	clz	r2, r4
 8016c12:	0952      	lsrs	r2, r2, #5
 8016c14:	2c00      	cmp	r4, #0
 8016c16:	d1ed      	bne.n	8016bf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8016c18:	4803      	ldr	r0, [pc, #12]	; (8016c28 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8016c1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c1e:	b002      	add	sp, #8
 8016c20:	f007 b88e 	b.w	801dd40 <get_memory>
 8016c24:	4629      	mov	r1, r5
 8016c26:	e7bc      	b.n	8016ba2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8016c28:	20016f4c 	.word	0x20016f4c

08016c2c <rmw_uxrce_find_static_input_buffer_by_owner>:
 8016c2c:	4b12      	ldr	r3, [pc, #72]	; (8016c78 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	b530      	push	{r4, r5, lr}
 8016c32:	b1f3      	cbz	r3, 8016c72 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8016c34:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8016c38:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8016c3c:	2400      	movs	r4, #0
 8016c3e:	e001      	b.n	8016c44 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	b1a3      	cbz	r3, 8016c6e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8016c44:	689a      	ldr	r2, [r3, #8]
 8016c46:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8016c4a:	4288      	cmp	r0, r1
 8016c4c:	d1f8      	bne.n	8016c40 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016c4e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8016c52:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8016c56:	4571      	cmp	r1, lr
 8016c58:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8016c5c:	eb72 050c 	sbcs.w	r5, r2, ip
 8016c60:	daee      	bge.n	8016c40 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8016c62:	461c      	mov	r4, r3
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	468e      	mov	lr, r1
 8016c68:	4694      	mov	ip, r2
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1ea      	bne.n	8016c44 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8016c6e:	4620      	mov	r0, r4
 8016c70:	bd30      	pop	{r4, r5, pc}
 8016c72:	461c      	mov	r4, r3
 8016c74:	4620      	mov	r0, r4
 8016c76:	bd30      	pop	{r4, r5, pc}
 8016c78:	20016f4c 	.word	0x20016f4c
 8016c7c:	00000000 	.word	0x00000000

08016c80 <rmw_uxrce_clean_expired_static_input_buffer>:
 8016c80:	4b3d      	ldr	r3, [pc, #244]	; (8016d78 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c86:	681f      	ldr	r7, [r3, #0]
 8016c88:	ed2d 8b06 	vpush	{d8-d10}
 8016c8c:	b08d      	sub	sp, #52	; 0x34
 8016c8e:	f007 fae3 	bl	801e258 <rmw_uros_epoch_nanos>
 8016c92:	2f00      	cmp	r7, #0
 8016c94:	d05d      	beq.n	8016d52 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016c96:	46b8      	mov	r8, r7
 8016c98:	4681      	mov	r9, r0
 8016c9a:	468a      	mov	sl, r1
 8016c9c:	ac04      	add	r4, sp, #16
 8016c9e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016ca2:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016ca6:	2b04      	cmp	r3, #4
 8016ca8:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8016d60 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8016cac:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8016d68 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8016cb0:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8016d70 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8016cb4:	d03f      	beq.n	8016d36 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016cb6:	2b05      	cmp	r3, #5
 8016cb8:	d044      	beq.n	8016d44 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8016cba:	2b03      	cmp	r3, #3
 8016cbc:	d03b      	beq.n	8016d36 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8016cbe:	ed8d 8b04 	vstr	d8, [sp, #16]
 8016cc2:	ed8d ab06 	vstr	d10, [sp, #24]
 8016cc6:	ab08      	add	r3, sp, #32
 8016cc8:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016ccc:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8016cd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016cd2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016cd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016cda:	f006 fe45 	bl	801d968 <rmw_time_equal>
 8016cde:	b118      	cbz	r0, 8016ce8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8016ce0:	ed8d 9b04 	vstr	d9, [sp, #16]
 8016ce4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8016ce8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8016cec:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8016cf0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8016cf4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8016cf8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016cfc:	f006 fe8a 	bl	801da14 <rmw_time_total_nsec>
 8016d00:	1830      	adds	r0, r6, r0
 8016d02:	eb47 0101 	adc.w	r1, r7, r1
 8016d06:	4548      	cmp	r0, r9
 8016d08:	eb71 030a 	sbcs.w	r3, r1, sl
 8016d0c:	db05      	blt.n	8016d1a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8016d0e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8016d12:	4591      	cmp	r9, r2
 8016d14:	eb7a 0303 	sbcs.w	r3, sl, r3
 8016d18:	da03      	bge.n	8016d22 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8016d1a:	4641      	mov	r1, r8
 8016d1c:	4816      	ldr	r0, [pc, #88]	; (8016d78 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8016d1e:	f007 f81f 	bl	801dd60 <put_memory>
 8016d22:	f1bb 0f00 	cmp.w	fp, #0
 8016d26:	d014      	beq.n	8016d52 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8016d28:	46d8      	mov	r8, fp
 8016d2a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016d2e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8016d32:	2b04      	cmp	r3, #4
 8016d34:	d1bf      	bne.n	8016cb6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8016d36:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016d3a:	3340      	adds	r3, #64	; 0x40
 8016d3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016d42:	e7c0      	b.n	8016cc6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016d44:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8016d48:	3348      	adds	r3, #72	; 0x48
 8016d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016d50:	e7b9      	b.n	8016cc6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8016d52:	b00d      	add	sp, #52	; 0x34
 8016d54:	ecbd 8b06 	vpop	{d8-d10}
 8016d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d5c:	f3af 8000 	nop.w
	...
 8016d68:	00000001 	.word	0x00000001
 8016d6c:	00000000 	.word	0x00000000
 8016d70:	0000001e 	.word	0x0000001e
 8016d74:	00000000 	.word	0x00000000
 8016d78:	20016f4c 	.word	0x20016f4c

08016d7c <run_xrce_session>:
 8016d7c:	b510      	push	{r4, lr}
 8016d7e:	788c      	ldrb	r4, [r1, #2]
 8016d80:	b086      	sub	sp, #24
 8016d82:	2c01      	cmp	r4, #1
 8016d84:	f8ad 200e 	strh.w	r2, [sp, #14]
 8016d88:	d00c      	beq.n	8016da4 <run_xrce_session+0x28>
 8016d8a:	2401      	movs	r4, #1
 8016d8c:	4619      	mov	r1, r3
 8016d8e:	f10d 020e 	add.w	r2, sp, #14
 8016d92:	f10d 0317 	add.w	r3, sp, #23
 8016d96:	9400      	str	r4, [sp, #0]
 8016d98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016d9c:	f001 fd6c 	bl	8018878 <uxr_run_session_until_all_status>
 8016da0:	b006      	add	sp, #24
 8016da2:	bd10      	pop	{r4, pc}
 8016da4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016da8:	f001 f988 	bl	80180bc <uxr_flash_output_streams>
 8016dac:	4620      	mov	r0, r4
 8016dae:	b006      	add	sp, #24
 8016db0:	bd10      	pop	{r4, pc}
 8016db2:	bf00      	nop

08016db4 <convert_qos_profile>:
 8016db4:	7a4a      	ldrb	r2, [r1, #9]
 8016db6:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016dba:	2a02      	cmp	r2, #2
 8016dbc:	bf18      	it	ne
 8016dbe:	2200      	movne	r2, #0
 8016dc0:	7002      	strb	r2, [r0, #0]
 8016dc2:	f1ac 0202 	sub.w	r2, ip, #2
 8016dc6:	fab2 f282 	clz	r2, r2
 8016dca:	0952      	lsrs	r2, r2, #5
 8016dcc:	7042      	strb	r2, [r0, #1]
 8016dce:	780a      	ldrb	r2, [r1, #0]
 8016dd0:	8889      	ldrh	r1, [r1, #4]
 8016dd2:	f1a2 0202 	sub.w	r2, r2, #2
 8016dd6:	8081      	strh	r1, [r0, #4]
 8016dd8:	fab2 f282 	clz	r2, r2
 8016ddc:	0952      	lsrs	r2, r2, #5
 8016dde:	7082      	strb	r2, [r0, #2]
 8016de0:	4770      	bx	lr
 8016de2:	bf00      	nop

08016de4 <generate_service_topics>:
 8016de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016de6:	461d      	mov	r5, r3
 8016de8:	b083      	sub	sp, #12
 8016dea:	4606      	mov	r6, r0
 8016dec:	4c11      	ldr	r4, [pc, #68]	; (8016e34 <generate_service_topics+0x50>)
 8016dee:	4608      	mov	r0, r1
 8016df0:	4b11      	ldr	r3, [pc, #68]	; (8016e38 <generate_service_topics+0x54>)
 8016df2:	4617      	mov	r7, r2
 8016df4:	4629      	mov	r1, r5
 8016df6:	4a11      	ldr	r2, [pc, #68]	; (8016e3c <generate_service_topics+0x58>)
 8016df8:	9401      	str	r4, [sp, #4]
 8016dfa:	9600      	str	r6, [sp, #0]
 8016dfc:	f009 fcfe 	bl	80207fc <sniprintf>
 8016e00:	4a0f      	ldr	r2, [pc, #60]	; (8016e40 <generate_service_topics+0x5c>)
 8016e02:	4604      	mov	r4, r0
 8016e04:	4b0f      	ldr	r3, [pc, #60]	; (8016e44 <generate_service_topics+0x60>)
 8016e06:	9201      	str	r2, [sp, #4]
 8016e08:	4638      	mov	r0, r7
 8016e0a:	4a0c      	ldr	r2, [pc, #48]	; (8016e3c <generate_service_topics+0x58>)
 8016e0c:	4629      	mov	r1, r5
 8016e0e:	9600      	str	r6, [sp, #0]
 8016e10:	f009 fcf4 	bl	80207fc <sniprintf>
 8016e14:	2c00      	cmp	r4, #0
 8016e16:	bfa8      	it	ge
 8016e18:	42a5      	cmpge	r5, r4
 8016e1a:	bfcc      	ite	gt
 8016e1c:	2401      	movgt	r4, #1
 8016e1e:	2400      	movle	r4, #0
 8016e20:	dd05      	ble.n	8016e2e <generate_service_topics+0x4a>
 8016e22:	2800      	cmp	r0, #0
 8016e24:	bfa8      	it	ge
 8016e26:	4285      	cmpge	r5, r0
 8016e28:	bfcc      	ite	gt
 8016e2a:	2401      	movgt	r4, #1
 8016e2c:	2400      	movle	r4, #0
 8016e2e:	4620      	mov	r0, r4
 8016e30:	b003      	add	sp, #12
 8016e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e34:	080251e0 	.word	0x080251e0
 8016e38:	080251dc 	.word	0x080251dc
 8016e3c:	080251c0 	.word	0x080251c0
 8016e40:	080251d4 	.word	0x080251d4
 8016e44:	080251d0 	.word	0x080251d0

08016e48 <generate_service_types>:
 8016e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e4c:	4606      	mov	r6, r0
 8016e4e:	b087      	sub	sp, #28
 8016e50:	461c      	mov	r4, r3
 8016e52:	6883      	ldr	r3, [r0, #8]
 8016e54:	460d      	mov	r5, r1
 8016e56:	4617      	mov	r7, r2
 8016e58:	4798      	blx	r3
 8016e5a:	68f3      	ldr	r3, [r6, #12]
 8016e5c:	4606      	mov	r6, r0
 8016e5e:	4798      	blx	r3
 8016e60:	2300      	movs	r3, #0
 8016e62:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8016e66:	6872      	ldr	r2, [r6, #4]
 8016e68:	702b      	strb	r3, [r5, #0]
 8016e6a:	6813      	ldr	r3, [r2, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d03f      	beq.n	8016ef0 <generate_service_types+0xa8>
 8016e70:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016f04 <generate_service_types+0xbc>
 8016e74:	4649      	mov	r1, r9
 8016e76:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8016f0c <generate_service_types+0xc4>
 8016e7a:	4628      	mov	r0, r5
 8016e7c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8016f10 <generate_service_types+0xc8>
 8016e80:	f8cd 8014 	str.w	r8, [sp, #20]
 8016e84:	6852      	ldr	r2, [r2, #4]
 8016e86:	9100      	str	r1, [sp, #0]
 8016e88:	4621      	mov	r1, r4
 8016e8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8016e8e:	f8cd a004 	str.w	sl, [sp, #4]
 8016e92:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8016e96:	4a1a      	ldr	r2, [pc, #104]	; (8016f00 <generate_service_types+0xb8>)
 8016e98:	f009 fcb0 	bl	80207fc <sniprintf>
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	42a0      	cmp	r0, r4
 8016ea0:	ea6f 0600 	mvn.w	r6, r0
 8016ea4:	703b      	strb	r3, [r7, #0]
 8016ea6:	f8db 3000 	ldr.w	r3, [fp]
 8016eaa:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8016eae:	bfac      	ite	ge
 8016eb0:	2500      	movge	r5, #0
 8016eb2:	2501      	movlt	r5, #1
 8016eb4:	b30b      	cbz	r3, 8016efa <generate_service_types+0xb2>
 8016eb6:	4a13      	ldr	r2, [pc, #76]	; (8016f04 <generate_service_types+0xbc>)
 8016eb8:	f8cd 8014 	str.w	r8, [sp, #20]
 8016ebc:	402e      	ands	r6, r5
 8016ebe:	f8db 1004 	ldr.w	r1, [fp, #4]
 8016ec2:	4638      	mov	r0, r7
 8016ec4:	9104      	str	r1, [sp, #16]
 8016ec6:	4621      	mov	r1, r4
 8016ec8:	e9cd 2a00 	strd	r2, sl, [sp]
 8016ecc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8016ed0:	4a0b      	ldr	r2, [pc, #44]	; (8016f00 <generate_service_types+0xb8>)
 8016ed2:	f009 fc93 	bl	80207fc <sniprintf>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	bfb4      	ite	lt
 8016eda:	2600      	movlt	r6, #0
 8016edc:	f006 0601 	andge.w	r6, r6, #1
 8016ee0:	42a0      	cmp	r0, r4
 8016ee2:	bfac      	ite	ge
 8016ee4:	2000      	movge	r0, #0
 8016ee6:	f006 0001 	andlt.w	r0, r6, #1
 8016eea:	b007      	add	sp, #28
 8016eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ef0:	4b05      	ldr	r3, [pc, #20]	; (8016f08 <generate_service_types+0xc0>)
 8016ef2:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8016f04 <generate_service_types+0xbc>
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	e7bd      	b.n	8016e76 <generate_service_types+0x2e>
 8016efa:	4b03      	ldr	r3, [pc, #12]	; (8016f08 <generate_service_types+0xc0>)
 8016efc:	461a      	mov	r2, r3
 8016efe:	e7db      	b.n	8016eb8 <generate_service_types+0x70>
 8016f00:	080251b8 	.word	0x080251b8
 8016f04:	080251b4 	.word	0x080251b4
 8016f08:	08025238 	.word	0x08025238
 8016f0c:	080251c8 	.word	0x080251c8
 8016f10:	080251cc 	.word	0x080251cc

08016f14 <generate_type_name>:
 8016f14:	2300      	movs	r3, #0
 8016f16:	b530      	push	{r4, r5, lr}
 8016f18:	700b      	strb	r3, [r1, #0]
 8016f1a:	b087      	sub	sp, #28
 8016f1c:	6803      	ldr	r3, [r0, #0]
 8016f1e:	4614      	mov	r4, r2
 8016f20:	b1bb      	cbz	r3, 8016f52 <generate_type_name+0x3e>
 8016f22:	4a0e      	ldr	r2, [pc, #56]	; (8016f5c <generate_type_name+0x48>)
 8016f24:	4615      	mov	r5, r2
 8016f26:	9500      	str	r5, [sp, #0]
 8016f28:	9203      	str	r2, [sp, #12]
 8016f2a:	4d0d      	ldr	r5, [pc, #52]	; (8016f60 <generate_type_name+0x4c>)
 8016f2c:	6842      	ldr	r2, [r0, #4]
 8016f2e:	4608      	mov	r0, r1
 8016f30:	490c      	ldr	r1, [pc, #48]	; (8016f64 <generate_type_name+0x50>)
 8016f32:	9204      	str	r2, [sp, #16]
 8016f34:	9105      	str	r1, [sp, #20]
 8016f36:	9102      	str	r1, [sp, #8]
 8016f38:	4621      	mov	r1, r4
 8016f3a:	4a0b      	ldr	r2, [pc, #44]	; (8016f68 <generate_type_name+0x54>)
 8016f3c:	9501      	str	r5, [sp, #4]
 8016f3e:	f009 fc5d 	bl	80207fc <sniprintf>
 8016f42:	2800      	cmp	r0, #0
 8016f44:	bfa8      	it	ge
 8016f46:	4284      	cmpge	r4, r0
 8016f48:	bfcc      	ite	gt
 8016f4a:	2001      	movgt	r0, #1
 8016f4c:	2000      	movle	r0, #0
 8016f4e:	b007      	add	sp, #28
 8016f50:	bd30      	pop	{r4, r5, pc}
 8016f52:	4b06      	ldr	r3, [pc, #24]	; (8016f6c <generate_type_name+0x58>)
 8016f54:	4a01      	ldr	r2, [pc, #4]	; (8016f5c <generate_type_name+0x48>)
 8016f56:	461d      	mov	r5, r3
 8016f58:	e7e5      	b.n	8016f26 <generate_type_name+0x12>
 8016f5a:	bf00      	nop
 8016f5c:	080251b4 	.word	0x080251b4
 8016f60:	080251cc 	.word	0x080251cc
 8016f64:	080251c8 	.word	0x080251c8
 8016f68:	080251b8 	.word	0x080251b8
 8016f6c:	08025238 	.word	0x08025238

08016f70 <generate_topic_name>:
 8016f70:	b530      	push	{r4, r5, lr}
 8016f72:	4614      	mov	r4, r2
 8016f74:	b083      	sub	sp, #12
 8016f76:	4605      	mov	r5, r0
 8016f78:	4b07      	ldr	r3, [pc, #28]	; (8016f98 <generate_topic_name+0x28>)
 8016f7a:	4a08      	ldr	r2, [pc, #32]	; (8016f9c <generate_topic_name+0x2c>)
 8016f7c:	4608      	mov	r0, r1
 8016f7e:	9500      	str	r5, [sp, #0]
 8016f80:	4621      	mov	r1, r4
 8016f82:	f009 fc3b 	bl	80207fc <sniprintf>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	bfa8      	it	ge
 8016f8a:	4284      	cmpge	r4, r0
 8016f8c:	bfcc      	ite	gt
 8016f8e:	2001      	movgt	r0, #1
 8016f90:	2000      	movle	r0, #0
 8016f92:	b003      	add	sp, #12
 8016f94:	bd30      	pop	{r4, r5, pc}
 8016f96:	bf00      	nop
 8016f98:	080251e8 	.word	0x080251e8
 8016f9c:	08024bb8 	.word	0x08024bb8

08016fa0 <is_uxrce_rmw_identifier_valid>:
 8016fa0:	b510      	push	{r4, lr}
 8016fa2:	4604      	mov	r4, r0
 8016fa4:	b140      	cbz	r0, 8016fb8 <is_uxrce_rmw_identifier_valid+0x18>
 8016fa6:	f006 ff33 	bl	801de10 <rmw_get_implementation_identifier>
 8016faa:	4601      	mov	r1, r0
 8016fac:	4620      	mov	r0, r4
 8016fae:	f7e9 f947 	bl	8000240 <strcmp>
 8016fb2:	fab0 f080 	clz	r0, r0
 8016fb6:	0940      	lsrs	r0, r0, #5
 8016fb8:	bd10      	pop	{r4, pc}
 8016fba:	bf00      	nop

08016fbc <get_message_typesupport_handle>:
 8016fbc:	6883      	ldr	r3, [r0, #8]
 8016fbe:	4718      	bx	r3

08016fc0 <get_message_typesupport_handle_function>:
 8016fc0:	b510      	push	{r4, lr}
 8016fc2:	4604      	mov	r4, r0
 8016fc4:	6800      	ldr	r0, [r0, #0]
 8016fc6:	f7e9 f93b 	bl	8000240 <strcmp>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	bf0c      	ite	eq
 8016fce:	4620      	moveq	r0, r4
 8016fd0:	2000      	movne	r0, #0
 8016fd2:	bd10      	pop	{r4, pc}

08016fd4 <get_service_typesupport_handle>:
 8016fd4:	6883      	ldr	r3, [r0, #8]
 8016fd6:	4718      	bx	r3

08016fd8 <get_service_typesupport_handle_function>:
 8016fd8:	b510      	push	{r4, lr}
 8016fda:	4604      	mov	r4, r0
 8016fdc:	6800      	ldr	r0, [r0, #0]
 8016fde:	f7e9 f92f 	bl	8000240 <strcmp>
 8016fe2:	2800      	cmp	r0, #0
 8016fe4:	bf0c      	ite	eq
 8016fe6:	4620      	moveq	r0, r4
 8016fe8:	2000      	movne	r0, #0
 8016fea:	bd10      	pop	{r4, pc}

08016fec <rosidl_runtime_c__String__init>:
 8016fec:	b510      	push	{r4, lr}
 8016fee:	4604      	mov	r4, r0
 8016ff0:	b086      	sub	sp, #24
 8016ff2:	b170      	cbz	r0, 8017012 <rosidl_runtime_c__String__init+0x26>
 8016ff4:	a801      	add	r0, sp, #4
 8016ff6:	f7fd feef 	bl	8014dd8 <rcutils_get_default_allocator>
 8016ffa:	9b01      	ldr	r3, [sp, #4]
 8016ffc:	9905      	ldr	r1, [sp, #20]
 8016ffe:	2001      	movs	r0, #1
 8017000:	4798      	blx	r3
 8017002:	6020      	str	r0, [r4, #0]
 8017004:	b128      	cbz	r0, 8017012 <rosidl_runtime_c__String__init+0x26>
 8017006:	2100      	movs	r1, #0
 8017008:	2201      	movs	r2, #1
 801700a:	7001      	strb	r1, [r0, #0]
 801700c:	4610      	mov	r0, r2
 801700e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8017012:	b006      	add	sp, #24
 8017014:	bd10      	pop	{r4, pc}
 8017016:	bf00      	nop

08017018 <rosidl_runtime_c__String__fini>:
 8017018:	b320      	cbz	r0, 8017064 <rosidl_runtime_c__String__fini+0x4c>
 801701a:	6803      	ldr	r3, [r0, #0]
 801701c:	b510      	push	{r4, lr}
 801701e:	4604      	mov	r4, r0
 8017020:	b086      	sub	sp, #24
 8017022:	b173      	cbz	r3, 8017042 <rosidl_runtime_c__String__fini+0x2a>
 8017024:	6883      	ldr	r3, [r0, #8]
 8017026:	b1f3      	cbz	r3, 8017066 <rosidl_runtime_c__String__fini+0x4e>
 8017028:	a801      	add	r0, sp, #4
 801702a:	f7fd fed5 	bl	8014dd8 <rcutils_get_default_allocator>
 801702e:	9b02      	ldr	r3, [sp, #8]
 8017030:	9905      	ldr	r1, [sp, #20]
 8017032:	6820      	ldr	r0, [r4, #0]
 8017034:	4798      	blx	r3
 8017036:	2300      	movs	r3, #0
 8017038:	e9c4 3300 	strd	r3, r3, [r4]
 801703c:	60a3      	str	r3, [r4, #8]
 801703e:	b006      	add	sp, #24
 8017040:	bd10      	pop	{r4, pc}
 8017042:	6843      	ldr	r3, [r0, #4]
 8017044:	b9db      	cbnz	r3, 801707e <rosidl_runtime_c__String__fini+0x66>
 8017046:	6883      	ldr	r3, [r0, #8]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d0f8      	beq.n	801703e <rosidl_runtime_c__String__fini+0x26>
 801704c:	4b12      	ldr	r3, [pc, #72]	; (8017098 <rosidl_runtime_c__String__fini+0x80>)
 801704e:	2251      	movs	r2, #81	; 0x51
 8017050:	2101      	movs	r1, #1
 8017052:	4812      	ldr	r0, [pc, #72]	; (801709c <rosidl_runtime_c__String__fini+0x84>)
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	68db      	ldr	r3, [r3, #12]
 8017058:	f009 faa6 	bl	80205a8 <fwrite>
 801705c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017060:	f008 f91e 	bl	801f2a0 <exit>
 8017064:	4770      	bx	lr
 8017066:	4b0c      	ldr	r3, [pc, #48]	; (8017098 <rosidl_runtime_c__String__fini+0x80>)
 8017068:	224c      	movs	r2, #76	; 0x4c
 801706a:	2101      	movs	r1, #1
 801706c:	480c      	ldr	r0, [pc, #48]	; (80170a0 <rosidl_runtime_c__String__fini+0x88>)
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	68db      	ldr	r3, [r3, #12]
 8017072:	f009 fa99 	bl	80205a8 <fwrite>
 8017076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801707a:	f008 f911 	bl	801f2a0 <exit>
 801707e:	4b06      	ldr	r3, [pc, #24]	; (8017098 <rosidl_runtime_c__String__fini+0x80>)
 8017080:	224e      	movs	r2, #78	; 0x4e
 8017082:	2101      	movs	r1, #1
 8017084:	4807      	ldr	r0, [pc, #28]	; (80170a4 <rosidl_runtime_c__String__fini+0x8c>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	f009 fa8d 	bl	80205a8 <fwrite>
 801708e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017092:	f008 f905 	bl	801f2a0 <exit>
 8017096:	bf00      	nop
 8017098:	200009d8 	.word	0x200009d8
 801709c:	0802528c 	.word	0x0802528c
 80170a0:	080251ec 	.word	0x080251ec
 80170a4:	0802523c 	.word	0x0802523c

080170a8 <rosidl_runtime_c__String__assignn>:
 80170a8:	2900      	cmp	r1, #0
 80170aa:	bf18      	it	ne
 80170ac:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 80170b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170b4:	bf0c      	ite	eq
 80170b6:	2401      	moveq	r4, #1
 80170b8:	2400      	movne	r4, #0
 80170ba:	b087      	sub	sp, #28
 80170bc:	2800      	cmp	r0, #0
 80170be:	bf08      	it	eq
 80170c0:	f044 0401 	orreq.w	r4, r4, #1
 80170c4:	b124      	cbz	r4, 80170d0 <rosidl_runtime_c__String__assignn+0x28>
 80170c6:	2400      	movs	r4, #0
 80170c8:	4620      	mov	r0, r4
 80170ca:	b007      	add	sp, #28
 80170cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170d0:	4616      	mov	r6, r2
 80170d2:	4605      	mov	r5, r0
 80170d4:	a801      	add	r0, sp, #4
 80170d6:	460f      	mov	r7, r1
 80170d8:	f106 0901 	add.w	r9, r6, #1
 80170dc:	f7fd fe7c 	bl	8014dd8 <rcutils_get_default_allocator>
 80170e0:	9b03      	ldr	r3, [sp, #12]
 80170e2:	9a05      	ldr	r2, [sp, #20]
 80170e4:	4649      	mov	r1, r9
 80170e6:	6828      	ldr	r0, [r5, #0]
 80170e8:	4798      	blx	r3
 80170ea:	4680      	mov	r8, r0
 80170ec:	2800      	cmp	r0, #0
 80170ee:	d0eb      	beq.n	80170c8 <rosidl_runtime_c__String__assignn+0x20>
 80170f0:	4639      	mov	r1, r7
 80170f2:	4632      	mov	r2, r6
 80170f4:	f009 fddf 	bl	8020cb6 <memcpy>
 80170f8:	f808 4006 	strb.w	r4, [r8, r6]
 80170fc:	2401      	movs	r4, #1
 80170fe:	f8c5 9008 	str.w	r9, [r5, #8]
 8017102:	4620      	mov	r0, r4
 8017104:	e9c5 8600 	strd	r8, r6, [r5]
 8017108:	b007      	add	sp, #28
 801710a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801710e:	bf00      	nop

08017110 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017114:	6805      	ldr	r5, [r0, #0]
 8017116:	4604      	mov	r4, r0
 8017118:	460e      	mov	r6, r1
 801711a:	4628      	mov	r0, r5
 801711c:	f7e9 f890 	bl	8000240 <strcmp>
 8017120:	b1c8      	cbz	r0, 8017156 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017122:	4b11      	ldr	r3, [pc, #68]	; (8017168 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	429d      	cmp	r5, r3
 8017128:	d112      	bne.n	8017150 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801712a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801712e:	f8d8 4000 	ldr.w	r4, [r8]
 8017132:	b16c      	cbz	r4, 8017150 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017134:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017138:	2700      	movs	r7, #0
 801713a:	3d04      	subs	r5, #4
 801713c:	4631      	mov	r1, r6
 801713e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017142:	f7e9 f87d 	bl	8000240 <strcmp>
 8017146:	00bb      	lsls	r3, r7, #2
 8017148:	b140      	cbz	r0, 801715c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801714a:	3701      	adds	r7, #1
 801714c:	42bc      	cmp	r4, r7
 801714e:	d1f5      	bne.n	801713c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017150:	2000      	movs	r0, #0
 8017152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017156:	4620      	mov	r0, r4
 8017158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801715c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017164:	58d3      	ldr	r3, [r2, r3]
 8017166:	4718      	bx	r3
 8017168:	200008f4 	.word	0x200008f4

0801716c <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 801716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017170:	6805      	ldr	r5, [r0, #0]
 8017172:	4604      	mov	r4, r0
 8017174:	460e      	mov	r6, r1
 8017176:	4628      	mov	r0, r5
 8017178:	f7e9 f862 	bl	8000240 <strcmp>
 801717c:	b1c8      	cbz	r0, 80171b2 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801717e:	4b11      	ldr	r3, [pc, #68]	; (80171c4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	429d      	cmp	r5, r3
 8017184:	d112      	bne.n	80171ac <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017186:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801718a:	f8d8 4000 	ldr.w	r4, [r8]
 801718e:	b16c      	cbz	r4, 80171ac <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017190:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017194:	2700      	movs	r7, #0
 8017196:	3d04      	subs	r5, #4
 8017198:	4631      	mov	r1, r6
 801719a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801719e:	f7e9 f84f 	bl	8000240 <strcmp>
 80171a2:	00bb      	lsls	r3, r7, #2
 80171a4:	b140      	cbz	r0, 80171b8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80171a6:	3701      	adds	r7, #1
 80171a8:	42bc      	cmp	r4, r7
 80171aa:	d1f5      	bne.n	8017198 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80171ac:	2000      	movs	r0, #0
 80171ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171b2:	4620      	mov	r0, r4
 80171b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80171bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171c0:	58d3      	ldr	r3, [r2, r3]
 80171c2:	4718      	bx	r3
 80171c4:	200008f4 	.word	0x200008f4

080171c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80171c8:	4b04      	ldr	r3, [pc, #16]	; (80171dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80171ca:	681a      	ldr	r2, [r3, #0]
 80171cc:	b10a      	cbz	r2, 80171d2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80171ce:	4803      	ldr	r0, [pc, #12]	; (80171dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80171d0:	4770      	bx	lr
 80171d2:	4a03      	ldr	r2, [pc, #12]	; (80171e0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80171d4:	4801      	ldr	r0, [pc, #4]	; (80171dc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80171d6:	6812      	ldr	r2, [r2, #0]
 80171d8:	601a      	str	r2, [r3, #0]
 80171da:	4770      	bx	lr
 80171dc:	20000904 	.word	0x20000904
 80171e0:	200008f4 	.word	0x200008f4

080171e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80171e4:	4a02      	ldr	r2, [pc, #8]	; (80171f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 80171e6:	4b03      	ldr	r3, [pc, #12]	; (80171f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 80171e8:	6812      	ldr	r2, [r2, #0]
 80171ea:	601a      	str	r2, [r3, #0]
 80171ec:	4770      	bx	lr
 80171ee:	bf00      	nop
 80171f0:	200008f4 	.word	0x200008f4
 80171f4:	20000904 	.word	0x20000904

080171f8 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 80171f8:	f007 b83c 	b.w	801e274 <std_msgs__msg__String__init>

080171fc <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 80171fc:	f007 b84c 	b.w	801e298 <std_msgs__msg__String__fini>

08017200 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017200:	4b04      	ldr	r3, [pc, #16]	; (8017214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	b10a      	cbz	r2, 801720a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8017206:	4803      	ldr	r0, [pc, #12]	; (8017214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017208:	4770      	bx	lr
 801720a:	4a03      	ldr	r2, [pc, #12]	; (8017218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 801720c:	4801      	ldr	r0, [pc, #4]	; (8017214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801720e:	6812      	ldr	r2, [r2, #0]
 8017210:	601a      	str	r2, [r3, #0]
 8017212:	4770      	bx	lr
 8017214:	2000094c 	.word	0x2000094c
 8017218:	200008f8 	.word	0x200008f8

0801721c <_String__max_serialized_size>:
 801721c:	2000      	movs	r0, #0
 801721e:	4770      	bx	lr

08017220 <_String__cdr_serialize>:
 8017220:	b1c8      	cbz	r0, 8017256 <_String__cdr_serialize+0x36>
 8017222:	b570      	push	{r4, r5, r6, lr}
 8017224:	6806      	ldr	r6, [r0, #0]
 8017226:	4604      	mov	r4, r0
 8017228:	460d      	mov	r5, r1
 801722a:	b15e      	cbz	r6, 8017244 <_String__cdr_serialize+0x24>
 801722c:	4630      	mov	r0, r6
 801722e:	f7e9 f867 	bl	8000300 <strlen>
 8017232:	4603      	mov	r3, r0
 8017234:	1c42      	adds	r2, r0, #1
 8017236:	4631      	mov	r1, r6
 8017238:	4628      	mov	r0, r5
 801723a:	6063      	str	r3, [r4, #4]
 801723c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017240:	f7fb bf76 	b.w	8013130 <ucdr_serialize_sequence_char>
 8017244:	4633      	mov	r3, r6
 8017246:	4632      	mov	r2, r6
 8017248:	4631      	mov	r1, r6
 801724a:	4628      	mov	r0, r5
 801724c:	6063      	str	r3, [r4, #4]
 801724e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017252:	f7fb bf6d 	b.w	8013130 <ucdr_serialize_sequence_char>
 8017256:	4770      	bx	lr

08017258 <get_serialized_size_std_msgs__msg__String>:
 8017258:	b510      	push	{r4, lr}
 801725a:	4604      	mov	r4, r0
 801725c:	b130      	cbz	r0, 801726c <get_serialized_size_std_msgs__msg__String+0x14>
 801725e:	4608      	mov	r0, r1
 8017260:	2104      	movs	r1, #4
 8017262:	f7fb fef5 	bl	8013050 <ucdr_alignment>
 8017266:	6863      	ldr	r3, [r4, #4]
 8017268:	3305      	adds	r3, #5
 801726a:	4418      	add	r0, r3
 801726c:	bd10      	pop	{r4, pc}
 801726e:	bf00      	nop

08017270 <_String__cdr_deserialize>:
 8017270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017272:	460c      	mov	r4, r1
 8017274:	b083      	sub	sp, #12
 8017276:	b1a1      	cbz	r1, 80172a2 <_String__cdr_deserialize+0x32>
 8017278:	688f      	ldr	r7, [r1, #8]
 801727a:	ab01      	add	r3, sp, #4
 801727c:	6809      	ldr	r1, [r1, #0]
 801727e:	4606      	mov	r6, r0
 8017280:	463a      	mov	r2, r7
 8017282:	f7fb ff67 	bl	8013154 <ucdr_deserialize_sequence_char>
 8017286:	9b01      	ldr	r3, [sp, #4]
 8017288:	4605      	mov	r5, r0
 801728a:	b920      	cbnz	r0, 8017296 <_String__cdr_deserialize+0x26>
 801728c:	429f      	cmp	r7, r3
 801728e:	d30c      	bcc.n	80172aa <_String__cdr_deserialize+0x3a>
 8017290:	4628      	mov	r0, r5
 8017292:	b003      	add	sp, #12
 8017294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017296:	b103      	cbz	r3, 801729a <_String__cdr_deserialize+0x2a>
 8017298:	3b01      	subs	r3, #1
 801729a:	4628      	mov	r0, r5
 801729c:	6063      	str	r3, [r4, #4]
 801729e:	b003      	add	sp, #12
 80172a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172a2:	460d      	mov	r5, r1
 80172a4:	4628      	mov	r0, r5
 80172a6:	b003      	add	sp, #12
 80172a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172aa:	2101      	movs	r1, #1
 80172ac:	4630      	mov	r0, r6
 80172ae:	75b5      	strb	r5, [r6, #22]
 80172b0:	7571      	strb	r1, [r6, #21]
 80172b2:	6065      	str	r5, [r4, #4]
 80172b4:	f7fb fee4 	bl	8013080 <ucdr_align_to>
 80172b8:	4630      	mov	r0, r6
 80172ba:	9901      	ldr	r1, [sp, #4]
 80172bc:	f7fb ff18 	bl	80130f0 <ucdr_advance_buffer>
 80172c0:	4628      	mov	r0, r5
 80172c2:	b003      	add	sp, #12
 80172c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172c6:	bf00      	nop

080172c8 <_String__get_serialized_size>:
 80172c8:	b510      	push	{r4, lr}
 80172ca:	4604      	mov	r4, r0
 80172cc:	b130      	cbz	r0, 80172dc <_String__get_serialized_size+0x14>
 80172ce:	2104      	movs	r1, #4
 80172d0:	2000      	movs	r0, #0
 80172d2:	f7fb febd 	bl	8013050 <ucdr_alignment>
 80172d6:	6863      	ldr	r3, [r4, #4]
 80172d8:	3305      	adds	r3, #5
 80172da:	4418      	add	r0, r3
 80172dc:	bd10      	pop	{r4, pc}
 80172de:	bf00      	nop

080172e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 80172e0:	4800      	ldr	r0, [pc, #0]	; (80172e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 80172e2:	4770      	bx	lr
 80172e4:	20000958 	.word	0x20000958

080172e8 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 80172e8:	3800      	subs	r0, #0
 80172ea:	bf18      	it	ne
 80172ec:	2001      	movne	r0, #1
 80172ee:	4770      	bx	lr

080172f0 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 80172f0:	4770      	bx	lr
 80172f2:	bf00      	nop

080172f4 <custom_test_msgs__srv__AddThreeInts_Response__init>:
 80172f4:	3800      	subs	r0, #0
 80172f6:	bf18      	it	ne
 80172f8:	2001      	movne	r0, #1
 80172fa:	4770      	bx	lr

080172fc <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 80172fc:	4770      	bx	lr
 80172fe:	bf00      	nop

08017300 <drive_msgs__msg__Omni__init>:
 8017300:	b538      	push	{r3, r4, r5, lr}
 8017302:	4604      	mov	r4, r0
 8017304:	b128      	cbz	r0, 8017312 <drive_msgs__msg__Omni__init+0x12>
 8017306:	f7ff fe71 	bl	8016fec <rosidl_runtime_c__String__init>
 801730a:	4605      	mov	r5, r0
 801730c:	b120      	cbz	r0, 8017318 <drive_msgs__msg__Omni__init+0x18>
 801730e:	4628      	mov	r0, r5
 8017310:	bd38      	pop	{r3, r4, r5, pc}
 8017312:	4605      	mov	r5, r0
 8017314:	4628      	mov	r0, r5
 8017316:	bd38      	pop	{r3, r4, r5, pc}
 8017318:	4620      	mov	r0, r4
 801731a:	f7ff fe7d 	bl	8017018 <rosidl_runtime_c__String__fini>
 801731e:	4628      	mov	r0, r5
 8017320:	bd38      	pop	{r3, r4, r5, pc}
 8017322:	bf00      	nop

08017324 <drive_msgs__msg__Omni__fini>:
 8017324:	b108      	cbz	r0, 801732a <drive_msgs__msg__Omni__fini+0x6>
 8017326:	f7ff be77 	b.w	8017018 <rosidl_runtime_c__String__fini>
 801732a:	4770      	bx	lr

0801732c <drive_msgs__msg__OmniEnc__init>:
 801732c:	b538      	push	{r3, r4, r5, lr}
 801732e:	4604      	mov	r4, r0
 8017330:	b128      	cbz	r0, 801733e <drive_msgs__msg__OmniEnc__init+0x12>
 8017332:	f7ff fe5b 	bl	8016fec <rosidl_runtime_c__String__init>
 8017336:	4605      	mov	r5, r0
 8017338:	b120      	cbz	r0, 8017344 <drive_msgs__msg__OmniEnc__init+0x18>
 801733a:	4628      	mov	r0, r5
 801733c:	bd38      	pop	{r3, r4, r5, pc}
 801733e:	4605      	mov	r5, r0
 8017340:	4628      	mov	r0, r5
 8017342:	bd38      	pop	{r3, r4, r5, pc}
 8017344:	4620      	mov	r0, r4
 8017346:	f7ff fe67 	bl	8017018 <rosidl_runtime_c__String__fini>
 801734a:	4628      	mov	r0, r5
 801734c:	bd38      	pop	{r3, r4, r5, pc}
 801734e:	bf00      	nop

08017350 <drive_msgs__msg__OmniEnc__fini>:
 8017350:	b108      	cbz	r0, 8017356 <drive_msgs__msg__OmniEnc__fini+0x6>
 8017352:	f7ff be61 	b.w	8017018 <rosidl_runtime_c__String__fini>
 8017356:	4770      	bx	lr

08017358 <manip_msgs__msg__Cmd__init>:
 8017358:	3800      	subs	r0, #0
 801735a:	bf18      	it	ne
 801735c:	2001      	movne	r0, #1
 801735e:	4770      	bx	lr

08017360 <manip_msgs__msg__Cmd__fini>:
 8017360:	4770      	bx	lr
 8017362:	bf00      	nop

08017364 <ucdr_serialize_endian_array_char>:
 8017364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017368:	4619      	mov	r1, r3
 801736a:	461f      	mov	r7, r3
 801736c:	4605      	mov	r5, r0
 801736e:	4690      	mov	r8, r2
 8017370:	f7fb fe16 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8017374:	b9e0      	cbnz	r0, 80173b0 <ucdr_serialize_endian_array_char+0x4c>
 8017376:	463e      	mov	r6, r7
 8017378:	e00b      	b.n	8017392 <ucdr_serialize_endian_array_char+0x2e>
 801737a:	4441      	add	r1, r8
 801737c:	68a8      	ldr	r0, [r5, #8]
 801737e:	4622      	mov	r2, r4
 8017380:	1b36      	subs	r6, r6, r4
 8017382:	f009 fc98 	bl	8020cb6 <memcpy>
 8017386:	68ab      	ldr	r3, [r5, #8]
 8017388:	6928      	ldr	r0, [r5, #16]
 801738a:	4423      	add	r3, r4
 801738c:	4420      	add	r0, r4
 801738e:	60ab      	str	r3, [r5, #8]
 8017390:	6128      	str	r0, [r5, #16]
 8017392:	4631      	mov	r1, r6
 8017394:	2201      	movs	r2, #1
 8017396:	4628      	mov	r0, r5
 8017398:	f7fb fe8c 	bl	80130b4 <ucdr_check_final_buffer_behavior_array>
 801739c:	1bb9      	subs	r1, r7, r6
 801739e:	4604      	mov	r4, r0
 80173a0:	2800      	cmp	r0, #0
 80173a2:	d1ea      	bne.n	801737a <ucdr_serialize_endian_array_char+0x16>
 80173a4:	2301      	movs	r3, #1
 80173a6:	7da8      	ldrb	r0, [r5, #22]
 80173a8:	756b      	strb	r3, [r5, #21]
 80173aa:	4058      	eors	r0, r3
 80173ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173b0:	463a      	mov	r2, r7
 80173b2:	4641      	mov	r1, r8
 80173b4:	68a8      	ldr	r0, [r5, #8]
 80173b6:	f009 fc7e 	bl	8020cb6 <memcpy>
 80173ba:	68aa      	ldr	r2, [r5, #8]
 80173bc:	692b      	ldr	r3, [r5, #16]
 80173be:	443a      	add	r2, r7
 80173c0:	443b      	add	r3, r7
 80173c2:	60aa      	str	r2, [r5, #8]
 80173c4:	612b      	str	r3, [r5, #16]
 80173c6:	e7ed      	b.n	80173a4 <ucdr_serialize_endian_array_char+0x40>

080173c8 <ucdr_deserialize_endian_array_char>:
 80173c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173cc:	4619      	mov	r1, r3
 80173ce:	461f      	mov	r7, r3
 80173d0:	4605      	mov	r5, r0
 80173d2:	4690      	mov	r8, r2
 80173d4:	f7fb fde4 	bl	8012fa0 <ucdr_check_buffer_available_for>
 80173d8:	b9e8      	cbnz	r0, 8017416 <ucdr_deserialize_endian_array_char+0x4e>
 80173da:	463e      	mov	r6, r7
 80173dc:	e00c      	b.n	80173f8 <ucdr_deserialize_endian_array_char+0x30>
 80173de:	eb08 0003 	add.w	r0, r8, r3
 80173e2:	68a9      	ldr	r1, [r5, #8]
 80173e4:	4622      	mov	r2, r4
 80173e6:	1b36      	subs	r6, r6, r4
 80173e8:	f009 fc65 	bl	8020cb6 <memcpy>
 80173ec:	68ab      	ldr	r3, [r5, #8]
 80173ee:	6928      	ldr	r0, [r5, #16]
 80173f0:	4423      	add	r3, r4
 80173f2:	4420      	add	r0, r4
 80173f4:	60ab      	str	r3, [r5, #8]
 80173f6:	6128      	str	r0, [r5, #16]
 80173f8:	4631      	mov	r1, r6
 80173fa:	2201      	movs	r2, #1
 80173fc:	4628      	mov	r0, r5
 80173fe:	f7fb fe59 	bl	80130b4 <ucdr_check_final_buffer_behavior_array>
 8017402:	1bbb      	subs	r3, r7, r6
 8017404:	4604      	mov	r4, r0
 8017406:	2800      	cmp	r0, #0
 8017408:	d1e9      	bne.n	80173de <ucdr_deserialize_endian_array_char+0x16>
 801740a:	2301      	movs	r3, #1
 801740c:	7da8      	ldrb	r0, [r5, #22]
 801740e:	756b      	strb	r3, [r5, #21]
 8017410:	4058      	eors	r0, r3
 8017412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017416:	463a      	mov	r2, r7
 8017418:	68a9      	ldr	r1, [r5, #8]
 801741a:	4640      	mov	r0, r8
 801741c:	f009 fc4b 	bl	8020cb6 <memcpy>
 8017420:	68aa      	ldr	r2, [r5, #8]
 8017422:	692b      	ldr	r3, [r5, #16]
 8017424:	443a      	add	r2, r7
 8017426:	443b      	add	r3, r7
 8017428:	60aa      	str	r2, [r5, #8]
 801742a:	612b      	str	r3, [r5, #16]
 801742c:	e7ed      	b.n	801740a <ucdr_deserialize_endian_array_char+0x42>
 801742e:	bf00      	nop

08017430 <ucdr_serialize_array_uint8_t>:
 8017430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017434:	4688      	mov	r8, r1
 8017436:	4611      	mov	r1, r2
 8017438:	4617      	mov	r7, r2
 801743a:	4605      	mov	r5, r0
 801743c:	f7fb fdb0 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8017440:	b9e0      	cbnz	r0, 801747c <ucdr_serialize_array_uint8_t+0x4c>
 8017442:	463e      	mov	r6, r7
 8017444:	e00b      	b.n	801745e <ucdr_serialize_array_uint8_t+0x2e>
 8017446:	4441      	add	r1, r8
 8017448:	68a8      	ldr	r0, [r5, #8]
 801744a:	4622      	mov	r2, r4
 801744c:	1b36      	subs	r6, r6, r4
 801744e:	f009 fc32 	bl	8020cb6 <memcpy>
 8017452:	68ab      	ldr	r3, [r5, #8]
 8017454:	6928      	ldr	r0, [r5, #16]
 8017456:	4423      	add	r3, r4
 8017458:	4420      	add	r0, r4
 801745a:	60ab      	str	r3, [r5, #8]
 801745c:	6128      	str	r0, [r5, #16]
 801745e:	4631      	mov	r1, r6
 8017460:	2201      	movs	r2, #1
 8017462:	4628      	mov	r0, r5
 8017464:	f7fb fe26 	bl	80130b4 <ucdr_check_final_buffer_behavior_array>
 8017468:	1bb9      	subs	r1, r7, r6
 801746a:	4604      	mov	r4, r0
 801746c:	2800      	cmp	r0, #0
 801746e:	d1ea      	bne.n	8017446 <ucdr_serialize_array_uint8_t+0x16>
 8017470:	2301      	movs	r3, #1
 8017472:	7da8      	ldrb	r0, [r5, #22]
 8017474:	756b      	strb	r3, [r5, #21]
 8017476:	4058      	eors	r0, r3
 8017478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801747c:	463a      	mov	r2, r7
 801747e:	4641      	mov	r1, r8
 8017480:	68a8      	ldr	r0, [r5, #8]
 8017482:	f009 fc18 	bl	8020cb6 <memcpy>
 8017486:	68aa      	ldr	r2, [r5, #8]
 8017488:	692b      	ldr	r3, [r5, #16]
 801748a:	443a      	add	r2, r7
 801748c:	443b      	add	r3, r7
 801748e:	60aa      	str	r2, [r5, #8]
 8017490:	612b      	str	r3, [r5, #16]
 8017492:	e7ed      	b.n	8017470 <ucdr_serialize_array_uint8_t+0x40>

08017494 <ucdr_serialize_endian_array_uint8_t>:
 8017494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017498:	4619      	mov	r1, r3
 801749a:	461f      	mov	r7, r3
 801749c:	4605      	mov	r5, r0
 801749e:	4690      	mov	r8, r2
 80174a0:	f7fb fd7e 	bl	8012fa0 <ucdr_check_buffer_available_for>
 80174a4:	b9e0      	cbnz	r0, 80174e0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80174a6:	463e      	mov	r6, r7
 80174a8:	e00b      	b.n	80174c2 <ucdr_serialize_endian_array_uint8_t+0x2e>
 80174aa:	4441      	add	r1, r8
 80174ac:	68a8      	ldr	r0, [r5, #8]
 80174ae:	4622      	mov	r2, r4
 80174b0:	1b36      	subs	r6, r6, r4
 80174b2:	f009 fc00 	bl	8020cb6 <memcpy>
 80174b6:	68ab      	ldr	r3, [r5, #8]
 80174b8:	6928      	ldr	r0, [r5, #16]
 80174ba:	4423      	add	r3, r4
 80174bc:	4420      	add	r0, r4
 80174be:	60ab      	str	r3, [r5, #8]
 80174c0:	6128      	str	r0, [r5, #16]
 80174c2:	4631      	mov	r1, r6
 80174c4:	2201      	movs	r2, #1
 80174c6:	4628      	mov	r0, r5
 80174c8:	f7fb fdf4 	bl	80130b4 <ucdr_check_final_buffer_behavior_array>
 80174cc:	1bb9      	subs	r1, r7, r6
 80174ce:	4604      	mov	r4, r0
 80174d0:	2800      	cmp	r0, #0
 80174d2:	d1ea      	bne.n	80174aa <ucdr_serialize_endian_array_uint8_t+0x16>
 80174d4:	2301      	movs	r3, #1
 80174d6:	7da8      	ldrb	r0, [r5, #22]
 80174d8:	756b      	strb	r3, [r5, #21]
 80174da:	4058      	eors	r0, r3
 80174dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174e0:	463a      	mov	r2, r7
 80174e2:	4641      	mov	r1, r8
 80174e4:	68a8      	ldr	r0, [r5, #8]
 80174e6:	f009 fbe6 	bl	8020cb6 <memcpy>
 80174ea:	68aa      	ldr	r2, [r5, #8]
 80174ec:	692b      	ldr	r3, [r5, #16]
 80174ee:	443a      	add	r2, r7
 80174f0:	443b      	add	r3, r7
 80174f2:	60aa      	str	r2, [r5, #8]
 80174f4:	612b      	str	r3, [r5, #16]
 80174f6:	e7ed      	b.n	80174d4 <ucdr_serialize_endian_array_uint8_t+0x40>

080174f8 <ucdr_deserialize_array_uint8_t>:
 80174f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174fc:	4688      	mov	r8, r1
 80174fe:	4611      	mov	r1, r2
 8017500:	4617      	mov	r7, r2
 8017502:	4605      	mov	r5, r0
 8017504:	f7fb fd4c 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8017508:	b9e8      	cbnz	r0, 8017546 <ucdr_deserialize_array_uint8_t+0x4e>
 801750a:	463e      	mov	r6, r7
 801750c:	e00c      	b.n	8017528 <ucdr_deserialize_array_uint8_t+0x30>
 801750e:	eb08 0003 	add.w	r0, r8, r3
 8017512:	68a9      	ldr	r1, [r5, #8]
 8017514:	4622      	mov	r2, r4
 8017516:	1b36      	subs	r6, r6, r4
 8017518:	f009 fbcd 	bl	8020cb6 <memcpy>
 801751c:	68ab      	ldr	r3, [r5, #8]
 801751e:	6928      	ldr	r0, [r5, #16]
 8017520:	4423      	add	r3, r4
 8017522:	4420      	add	r0, r4
 8017524:	60ab      	str	r3, [r5, #8]
 8017526:	6128      	str	r0, [r5, #16]
 8017528:	4631      	mov	r1, r6
 801752a:	2201      	movs	r2, #1
 801752c:	4628      	mov	r0, r5
 801752e:	f7fb fdc1 	bl	80130b4 <ucdr_check_final_buffer_behavior_array>
 8017532:	1bbb      	subs	r3, r7, r6
 8017534:	4604      	mov	r4, r0
 8017536:	2800      	cmp	r0, #0
 8017538:	d1e9      	bne.n	801750e <ucdr_deserialize_array_uint8_t+0x16>
 801753a:	2301      	movs	r3, #1
 801753c:	7da8      	ldrb	r0, [r5, #22]
 801753e:	756b      	strb	r3, [r5, #21]
 8017540:	4058      	eors	r0, r3
 8017542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017546:	463a      	mov	r2, r7
 8017548:	68a9      	ldr	r1, [r5, #8]
 801754a:	4640      	mov	r0, r8
 801754c:	f009 fbb3 	bl	8020cb6 <memcpy>
 8017550:	68aa      	ldr	r2, [r5, #8]
 8017552:	692b      	ldr	r3, [r5, #16]
 8017554:	443a      	add	r2, r7
 8017556:	443b      	add	r3, r7
 8017558:	60aa      	str	r2, [r5, #8]
 801755a:	612b      	str	r3, [r5, #16]
 801755c:	e7ed      	b.n	801753a <ucdr_deserialize_array_uint8_t+0x42>
 801755e:	bf00      	nop

08017560 <ucdr_deserialize_endian_array_uint8_t>:
 8017560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017564:	4619      	mov	r1, r3
 8017566:	461f      	mov	r7, r3
 8017568:	4605      	mov	r5, r0
 801756a:	4690      	mov	r8, r2
 801756c:	f7fb fd18 	bl	8012fa0 <ucdr_check_buffer_available_for>
 8017570:	b9e8      	cbnz	r0, 80175ae <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8017572:	463e      	mov	r6, r7
 8017574:	e00c      	b.n	8017590 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8017576:	eb08 0003 	add.w	r0, r8, r3
 801757a:	68a9      	ldr	r1, [r5, #8]
 801757c:	4622      	mov	r2, r4
 801757e:	1b36      	subs	r6, r6, r4
 8017580:	f009 fb99 	bl	8020cb6 <memcpy>
 8017584:	68ab      	ldr	r3, [r5, #8]
 8017586:	6928      	ldr	r0, [r5, #16]
 8017588:	4423      	add	r3, r4
 801758a:	4420      	add	r0, r4
 801758c:	60ab      	str	r3, [r5, #8]
 801758e:	6128      	str	r0, [r5, #16]
 8017590:	4631      	mov	r1, r6
 8017592:	2201      	movs	r2, #1
 8017594:	4628      	mov	r0, r5
 8017596:	f7fb fd8d 	bl	80130b4 <ucdr_check_final_buffer_behavior_array>
 801759a:	1bbb      	subs	r3, r7, r6
 801759c:	4604      	mov	r4, r0
 801759e:	2800      	cmp	r0, #0
 80175a0:	d1e9      	bne.n	8017576 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80175a2:	2301      	movs	r3, #1
 80175a4:	7da8      	ldrb	r0, [r5, #22]
 80175a6:	756b      	strb	r3, [r5, #21]
 80175a8:	4058      	eors	r0, r3
 80175aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ae:	463a      	mov	r2, r7
 80175b0:	68a9      	ldr	r1, [r5, #8]
 80175b2:	4640      	mov	r0, r8
 80175b4:	f009 fb7f 	bl	8020cb6 <memcpy>
 80175b8:	68aa      	ldr	r2, [r5, #8]
 80175ba:	692b      	ldr	r3, [r5, #16]
 80175bc:	443a      	add	r2, r7
 80175be:	443b      	add	r3, r7
 80175c0:	60aa      	str	r2, [r5, #8]
 80175c2:	612b      	str	r3, [r5, #16]
 80175c4:	e7ed      	b.n	80175a2 <ucdr_deserialize_endian_array_uint8_t+0x42>
 80175c6:	bf00      	nop

080175c8 <uxr_buffer_delete_entity>:
 80175c8:	b510      	push	{r4, lr}
 80175ca:	2300      	movs	r3, #0
 80175cc:	b08e      	sub	sp, #56	; 0x38
 80175ce:	4604      	mov	r4, r0
 80175d0:	9103      	str	r1, [sp, #12]
 80175d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80175d6:	2303      	movs	r3, #3
 80175d8:	2204      	movs	r2, #4
 80175da:	9300      	str	r3, [sp, #0]
 80175dc:	ab06      	add	r3, sp, #24
 80175de:	f001 fb77 	bl	8018cd0 <uxr_prepare_stream_to_write_submessage>
 80175e2:	b918      	cbnz	r0, 80175ec <uxr_buffer_delete_entity+0x24>
 80175e4:	4604      	mov	r4, r0
 80175e6:	4620      	mov	r0, r4
 80175e8:	b00e      	add	sp, #56	; 0x38
 80175ea:	bd10      	pop	{r4, pc}
 80175ec:	9902      	ldr	r1, [sp, #8]
 80175ee:	aa05      	add	r2, sp, #20
 80175f0:	4620      	mov	r0, r4
 80175f2:	f001 fca9 	bl	8018f48 <uxr_init_base_object_request>
 80175f6:	4604      	mov	r4, r0
 80175f8:	a905      	add	r1, sp, #20
 80175fa:	a806      	add	r0, sp, #24
 80175fc:	f003 fbae 	bl	801ad5c <uxr_serialize_DELETE_Payload>
 8017600:	4620      	mov	r0, r4
 8017602:	b00e      	add	sp, #56	; 0x38
 8017604:	bd10      	pop	{r4, pc}
 8017606:	bf00      	nop

08017608 <uxr_common_create_entity>:
 8017608:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801760c:	b510      	push	{r4, lr}
 801760e:	f1bc 0f01 	cmp.w	ip, #1
 8017612:	b08c      	sub	sp, #48	; 0x30
 8017614:	4604      	mov	r4, r0
 8017616:	9202      	str	r2, [sp, #8]
 8017618:	bf0c      	ite	eq
 801761a:	f003 0201 	andeq.w	r2, r3, #1
 801761e:	2200      	movne	r2, #0
 8017620:	330e      	adds	r3, #14
 8017622:	9103      	str	r1, [sp, #12]
 8017624:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8017628:	441a      	add	r2, r3
 801762a:	ab04      	add	r3, sp, #16
 801762c:	9101      	str	r1, [sp, #4]
 801762e:	2101      	movs	r1, #1
 8017630:	b292      	uxth	r2, r2
 8017632:	9100      	str	r1, [sp, #0]
 8017634:	9903      	ldr	r1, [sp, #12]
 8017636:	f001 fb4b 	bl	8018cd0 <uxr_prepare_stream_to_write_submessage>
 801763a:	b918      	cbnz	r0, 8017644 <uxr_common_create_entity+0x3c>
 801763c:	4604      	mov	r4, r0
 801763e:	4620      	mov	r0, r4
 8017640:	b00c      	add	sp, #48	; 0x30
 8017642:	bd10      	pop	{r4, pc}
 8017644:	9902      	ldr	r1, [sp, #8]
 8017646:	4620      	mov	r0, r4
 8017648:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801764a:	f001 fc7d 	bl	8018f48 <uxr_init_base_object_request>
 801764e:	4604      	mov	r4, r0
 8017650:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017652:	a804      	add	r0, sp, #16
 8017654:	f003 fadc 	bl	801ac10 <uxr_serialize_CREATE_Payload>
 8017658:	4620      	mov	r0, r4
 801765a:	b00c      	add	sp, #48	; 0x30
 801765c:	bd10      	pop	{r4, pc}
 801765e:	bf00      	nop

08017660 <uxr_buffer_create_participant_bin>:
 8017660:	b570      	push	{r4, r5, r6, lr}
 8017662:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8017666:	4605      	mov	r5, r0
 8017668:	ac11      	add	r4, sp, #68	; 0x44
 801766a:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801766e:	2303      	movs	r3, #3
 8017670:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8017674:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017678:	7223      	strb	r3, [r4, #8]
 801767a:	2300      	movs	r3, #0
 801767c:	2201      	movs	r2, #1
 801767e:	f88d 3014 	strb.w	r3, [sp, #20]
 8017682:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8017684:	7122      	strb	r2, [r4, #4]
 8017686:	b1cb      	cbz	r3, 80176bc <uxr_buffer_create_participant_bin+0x5c>
 8017688:	f88d 201c 	strb.w	r2, [sp, #28]
 801768c:	9308      	str	r3, [sp, #32]
 801768e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017692:	a915      	add	r1, sp, #84	; 0x54
 8017694:	a809      	add	r0, sp, #36	; 0x24
 8017696:	f7fb fcd7 	bl	8013048 <ucdr_init_buffer>
 801769a:	a905      	add	r1, sp, #20
 801769c:	a809      	add	r0, sp, #36	; 0x24
 801769e:	f002 fe6d 	bl	801a37c <uxr_serialize_OBJK_DomainParticipant_Binary>
 80176a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176a4:	9600      	str	r6, [sp, #0]
 80176a6:	4628      	mov	r0, r5
 80176a8:	9401      	str	r4, [sp, #4]
 80176aa:	60e3      	str	r3, [r4, #12]
 80176ac:	b29b      	uxth	r3, r3
 80176ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80176b2:	f7ff ffa9 	bl	8017608 <uxr_common_create_entity>
 80176b6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80176ba:	bd70      	pop	{r4, r5, r6, pc}
 80176bc:	f88d 301c 	strb.w	r3, [sp, #28]
 80176c0:	e7e5      	b.n	801768e <uxr_buffer_create_participant_bin+0x2e>
 80176c2:	bf00      	nop

080176c4 <uxr_buffer_create_topic_bin>:
 80176c4:	b570      	push	{r4, r5, r6, lr}
 80176c6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80176ca:	4605      	mov	r5, r0
 80176cc:	4618      	mov	r0, r3
 80176ce:	9105      	str	r1, [sp, #20]
 80176d0:	a997      	add	r1, sp, #604	; 0x25c
 80176d2:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 80176d6:	ac13      	add	r4, sp, #76	; 0x4c
 80176d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80176dc:	2302      	movs	r3, #2
 80176de:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80176e2:	f000 fa8d 	bl	8017c00 <uxr_object_id_to_raw>
 80176e6:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 80176e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80176ec:	a917      	add	r1, sp, #92	; 0x5c
 80176ee:	a80b      	add	r0, sp, #44	; 0x2c
 80176f0:	9306      	str	r3, [sp, #24]
 80176f2:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80176f4:	930a      	str	r3, [sp, #40]	; 0x28
 80176f6:	2303      	movs	r3, #3
 80176f8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80176fc:	2301      	movs	r3, #1
 80176fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017702:	2300      	movs	r3, #0
 8017704:	f88d 301c 	strb.w	r3, [sp, #28]
 8017708:	f7fb fc9e 	bl	8013048 <ucdr_init_buffer>
 801770c:	a906      	add	r1, sp, #24
 801770e:	a80b      	add	r0, sp, #44	; 0x2c
 8017710:	f002 fe56 	bl	801a3c0 <uxr_serialize_OBJK_Topic_Binary>
 8017714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017716:	4628      	mov	r0, r5
 8017718:	9600      	str	r6, [sp, #0]
 801771a:	9316      	str	r3, [sp, #88]	; 0x58
 801771c:	b29b      	uxth	r3, r3
 801771e:	9401      	str	r4, [sp, #4]
 8017720:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017724:	f7ff ff70 	bl	8017608 <uxr_common_create_entity>
 8017728:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 801772c:	bd70      	pop	{r4, r5, r6, pc}
 801772e:	bf00      	nop

08017730 <uxr_buffer_create_publisher_bin>:
 8017730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017732:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8017736:	2603      	movs	r6, #3
 8017738:	4605      	mov	r5, r0
 801773a:	4618      	mov	r0, r3
 801773c:	9105      	str	r1, [sp, #20]
 801773e:	a992      	add	r1, sp, #584	; 0x248
 8017740:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8017744:	ac0e      	add	r4, sp, #56	; 0x38
 8017746:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801774a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801774e:	f000 fa57 	bl	8017c00 <uxr_object_id_to_raw>
 8017752:	2300      	movs	r3, #0
 8017754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017758:	a912      	add	r1, sp, #72	; 0x48
 801775a:	a806      	add	r0, sp, #24
 801775c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017760:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017764:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8017768:	f7fb fc6e 	bl	8013048 <ucdr_init_buffer>
 801776c:	a993      	add	r1, sp, #588	; 0x24c
 801776e:	a806      	add	r0, sp, #24
 8017770:	f002 feda 	bl	801a528 <uxr_serialize_OBJK_Publisher_Binary>
 8017774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017776:	4628      	mov	r0, r5
 8017778:	9700      	str	r7, [sp, #0]
 801777a:	9311      	str	r3, [sp, #68]	; 0x44
 801777c:	b29b      	uxth	r3, r3
 801777e:	9401      	str	r4, [sp, #4]
 8017780:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017784:	f7ff ff40 	bl	8017608 <uxr_common_create_entity>
 8017788:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801778c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801778e:	bf00      	nop

08017790 <uxr_buffer_create_subscriber_bin>:
 8017790:	b570      	push	{r4, r5, r6, lr}
 8017792:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8017796:	4605      	mov	r5, r0
 8017798:	4618      	mov	r0, r3
 801779a:	9105      	str	r1, [sp, #20]
 801779c:	a992      	add	r1, sp, #584	; 0x248
 801779e:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 80177a2:	ac0e      	add	r4, sp, #56	; 0x38
 80177a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80177a8:	2304      	movs	r3, #4
 80177aa:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80177ae:	f000 fa27 	bl	8017c00 <uxr_object_id_to_raw>
 80177b2:	2300      	movs	r3, #0
 80177b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80177b8:	a912      	add	r1, sp, #72	; 0x48
 80177ba:	a806      	add	r0, sp, #24
 80177bc:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80177c0:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80177c4:	2303      	movs	r3, #3
 80177c6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80177ca:	f7fb fc3d 	bl	8013048 <ucdr_init_buffer>
 80177ce:	a993      	add	r1, sp, #588	; 0x24c
 80177d0:	a806      	add	r0, sp, #24
 80177d2:	f002 ff59 	bl	801a688 <uxr_serialize_OBJK_Subscriber_Binary>
 80177d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177d8:	4628      	mov	r0, r5
 80177da:	9600      	str	r6, [sp, #0]
 80177dc:	9311      	str	r3, [sp, #68]	; 0x44
 80177de:	b29b      	uxth	r3, r3
 80177e0:	9401      	str	r4, [sp, #4]
 80177e2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80177e6:	f7ff ff0f 	bl	8017608 <uxr_common_create_entity>
 80177ea:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 80177ee:	bd70      	pop	{r4, r5, r6, pc}

080177f0 <uxr_buffer_create_datawriter_bin>:
 80177f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177f4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80177f8:	4606      	mov	r6, r0
 80177fa:	4618      	mov	r0, r3
 80177fc:	2703      	movs	r7, #3
 80177fe:	ac1d      	add	r4, sp, #116	; 0x74
 8017800:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8017804:	9105      	str	r1, [sp, #20]
 8017806:	a9a1      	add	r1, sp, #644	; 0x284
 8017808:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 801780c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017810:	2305      	movs	r3, #5
 8017812:	7123      	strb	r3, [r4, #4]
 8017814:	f000 f9f4 	bl	8017c00 <uxr_object_id_to_raw>
 8017818:	a90e      	add	r1, sp, #56	; 0x38
 801781a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801781c:	7227      	strb	r7, [r4, #8]
 801781e:	f000 f9ef 	bl	8017c00 <uxr_object_id_to_raw>
 8017822:	2300      	movs	r3, #0
 8017824:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017828:	3d00      	subs	r5, #0
 801782a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 801782e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017832:	bf18      	it	ne
 8017834:	2501      	movne	r5, #1
 8017836:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801783a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801783e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017842:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017846:	2301      	movs	r3, #1
 8017848:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801784c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017850:	bb8a      	cbnz	r2, 80178b6 <uxr_buffer_create_datawriter_bin+0xc6>
 8017852:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017856:	f04f 0c13 	mov.w	ip, #19
 801785a:	250b      	movs	r5, #11
 801785c:	2221      	movs	r2, #33	; 0x21
 801785e:	2111      	movs	r1, #17
 8017860:	2009      	movs	r0, #9
 8017862:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017866:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 801786a:	b923      	cbnz	r3, 8017876 <uxr_buffer_create_datawriter_bin+0x86>
 801786c:	4672      	mov	r2, lr
 801786e:	4661      	mov	r1, ip
 8017870:	4628      	mov	r0, r5
 8017872:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017876:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 801787a:	2b01      	cmp	r3, #1
 801787c:	d025      	beq.n	80178ca <uxr_buffer_create_datawriter_bin+0xda>
 801787e:	2b03      	cmp	r3, #3
 8017880:	d029      	beq.n	80178d6 <uxr_buffer_create_datawriter_bin+0xe6>
 8017882:	b32b      	cbz	r3, 80178d0 <uxr_buffer_create_datawriter_bin+0xe0>
 8017884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017888:	a921      	add	r1, sp, #132	; 0x84
 801788a:	a806      	add	r0, sp, #24
 801788c:	f7fb fbdc 	bl	8013048 <ucdr_init_buffer>
 8017890:	a90e      	add	r1, sp, #56	; 0x38
 8017892:	a806      	add	r0, sp, #24
 8017894:	f002 ffaa 	bl	801a7ec <uxr_serialize_OBJK_DataWriter_Binary>
 8017898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801789a:	f8cd 8000 	str.w	r8, [sp]
 801789e:	4630      	mov	r0, r6
 80178a0:	9401      	str	r4, [sp, #4]
 80178a2:	60e3      	str	r3, [r4, #12]
 80178a4:	b29b      	uxth	r3, r3
 80178a6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80178aa:	f7ff fead 	bl	8017608 <uxr_common_create_entity>
 80178ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80178b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80178ba:	f04f 0c12 	mov.w	ip, #18
 80178be:	250a      	movs	r5, #10
 80178c0:	2220      	movs	r2, #32
 80178c2:	2110      	movs	r1, #16
 80178c4:	2008      	movs	r0, #8
 80178c6:	2702      	movs	r7, #2
 80178c8:	e7cd      	b.n	8017866 <uxr_buffer_create_datawriter_bin+0x76>
 80178ca:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80178ce:	e7d9      	b.n	8017884 <uxr_buffer_create_datawriter_bin+0x94>
 80178d0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80178d4:	e7d6      	b.n	8017884 <uxr_buffer_create_datawriter_bin+0x94>
 80178d6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80178da:	e7d3      	b.n	8017884 <uxr_buffer_create_datawriter_bin+0x94>

080178dc <uxr_buffer_create_datareader_bin>:
 80178dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178e0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80178e4:	4606      	mov	r6, r0
 80178e6:	4618      	mov	r0, r3
 80178e8:	2703      	movs	r7, #3
 80178ea:	ac1f      	add	r4, sp, #124	; 0x7c
 80178ec:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 80178f0:	9105      	str	r1, [sp, #20]
 80178f2:	a9a3      	add	r1, sp, #652	; 0x28c
 80178f4:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 80178f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80178fc:	2306      	movs	r3, #6
 80178fe:	7123      	strb	r3, [r4, #4]
 8017900:	f000 f97e 	bl	8017c00 <uxr_object_id_to_raw>
 8017904:	a90e      	add	r1, sp, #56	; 0x38
 8017906:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8017908:	7227      	strb	r7, [r4, #8]
 801790a:	f000 f979 	bl	8017c00 <uxr_object_id_to_raw>
 801790e:	2300      	movs	r3, #0
 8017910:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017914:	3d00      	subs	r5, #0
 8017916:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 801791a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 801791e:	bf18      	it	ne
 8017920:	2501      	movne	r5, #1
 8017922:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017926:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801792a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801792e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017932:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017936:	2301      	movs	r3, #1
 8017938:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801793c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017940:	bb8a      	cbnz	r2, 80179a6 <uxr_buffer_create_datareader_bin+0xca>
 8017942:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017946:	f04f 0c13 	mov.w	ip, #19
 801794a:	250b      	movs	r5, #11
 801794c:	2221      	movs	r2, #33	; 0x21
 801794e:	2111      	movs	r1, #17
 8017950:	2009      	movs	r0, #9
 8017952:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017956:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 801795a:	b923      	cbnz	r3, 8017966 <uxr_buffer_create_datareader_bin+0x8a>
 801795c:	4672      	mov	r2, lr
 801795e:	4661      	mov	r1, ip
 8017960:	4628      	mov	r0, r5
 8017962:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017966:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 801796a:	2b01      	cmp	r3, #1
 801796c:	d025      	beq.n	80179ba <uxr_buffer_create_datareader_bin+0xde>
 801796e:	2b03      	cmp	r3, #3
 8017970:	d029      	beq.n	80179c6 <uxr_buffer_create_datareader_bin+0xea>
 8017972:	b32b      	cbz	r3, 80179c0 <uxr_buffer_create_datareader_bin+0xe4>
 8017974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017978:	a923      	add	r1, sp, #140	; 0x8c
 801797a:	a806      	add	r0, sp, #24
 801797c:	f7fb fb64 	bl	8013048 <ucdr_init_buffer>
 8017980:	a90e      	add	r1, sp, #56	; 0x38
 8017982:	a806      	add	r0, sp, #24
 8017984:	f002 fef6 	bl	801a774 <uxr_serialize_OBJK_DataReader_Binary>
 8017988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801798a:	f8cd 8000 	str.w	r8, [sp]
 801798e:	4630      	mov	r0, r6
 8017990:	9401      	str	r4, [sp, #4]
 8017992:	60e3      	str	r3, [r4, #12]
 8017994:	b29b      	uxth	r3, r3
 8017996:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801799a:	f7ff fe35 	bl	8017608 <uxr_common_create_entity>
 801799e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80179a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80179aa:	f04f 0c12 	mov.w	ip, #18
 80179ae:	250a      	movs	r5, #10
 80179b0:	2220      	movs	r2, #32
 80179b2:	2110      	movs	r1, #16
 80179b4:	2008      	movs	r0, #8
 80179b6:	2702      	movs	r7, #2
 80179b8:	e7cd      	b.n	8017956 <uxr_buffer_create_datareader_bin+0x7a>
 80179ba:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80179be:	e7d9      	b.n	8017974 <uxr_buffer_create_datareader_bin+0x98>
 80179c0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80179c4:	e7d6      	b.n	8017974 <uxr_buffer_create_datareader_bin+0x98>
 80179c6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80179ca:	e7d3      	b.n	8017974 <uxr_buffer_create_datareader_bin+0x98>

080179cc <uxr_buffer_create_replier_bin>:
 80179cc:	b570      	push	{r4, r5, r6, lr}
 80179ce:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80179d2:	4605      	mov	r5, r0
 80179d4:	4618      	mov	r0, r3
 80179d6:	9105      	str	r1, [sp, #20]
 80179d8:	a999      	add	r1, sp, #612	; 0x264
 80179da:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 80179de:	ac15      	add	r4, sp, #84	; 0x54
 80179e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80179e4:	2308      	movs	r3, #8
 80179e6:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80179ea:	f000 f909 	bl	8017c00 <uxr_object_id_to_raw>
 80179ee:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 80179f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80179f4:	a919      	add	r1, sp, #100	; 0x64
 80179f6:	a80d      	add	r0, sp, #52	; 0x34
 80179f8:	9306      	str	r3, [sp, #24]
 80179fa:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 80179fc:	9307      	str	r3, [sp, #28]
 80179fe:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8017a00:	9308      	str	r3, [sp, #32]
 8017a02:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8017a04:	930c      	str	r3, [sp, #48]	; 0x30
 8017a06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a08:	930a      	str	r3, [sp, #40]	; 0x28
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8017a10:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017a14:	2303      	movs	r3, #3
 8017a16:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8017a1a:	f7fb fb15 	bl	8013048 <ucdr_init_buffer>
 8017a1e:	a906      	add	r1, sp, #24
 8017a20:	a80d      	add	r0, sp, #52	; 0x34
 8017a22:	f002 ff0f 	bl	801a844 <uxr_serialize_OBJK_Replier_Binary>
 8017a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a28:	4628      	mov	r0, r5
 8017a2a:	9600      	str	r6, [sp, #0]
 8017a2c:	9318      	str	r3, [sp, #96]	; 0x60
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	9401      	str	r4, [sp, #4]
 8017a32:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017a36:	f7ff fde7 	bl	8017608 <uxr_common_create_entity>
 8017a3a:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8017a3e:	bd70      	pop	{r4, r5, r6, pc}

08017a40 <get_custom_error>:
 8017a40:	4b01      	ldr	r3, [pc, #4]	; (8017a48 <get_custom_error+0x8>)
 8017a42:	7818      	ldrb	r0, [r3, #0]
 8017a44:	4770      	bx	lr
 8017a46:	bf00      	nop
 8017a48:	20016f8c 	.word	0x20016f8c

08017a4c <recv_custom_msg>:
 8017a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a50:	4693      	mov	fp, r2
 8017a52:	b089      	sub	sp, #36	; 0x24
 8017a54:	2200      	movs	r2, #0
 8017a56:	4604      	mov	r4, r0
 8017a58:	468a      	mov	sl, r1
 8017a5a:	9305      	str	r3, [sp, #20]
 8017a5c:	f88d 201e 	strb.w	r2, [sp, #30]
 8017a60:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8017a64:	b322      	cbz	r2, 8017ab0 <recv_custom_msg+0x64>
 8017a66:	f200 2902 	addw	r9, r0, #514	; 0x202
 8017a6a:	f10d 081f 	add.w	r8, sp, #31
 8017a6e:	af05      	add	r7, sp, #20
 8017a70:	f10d 061e 	add.w	r6, sp, #30
 8017a74:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017a78:	e002      	b.n	8017a80 <recv_custom_msg+0x34>
 8017a7a:	9b05      	ldr	r3, [sp, #20]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	dd0f      	ble.n	8017aa0 <recv_custom_msg+0x54>
 8017a80:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8017a84:	4623      	mov	r3, r4
 8017a86:	4622      	mov	r2, r4
 8017a88:	4648      	mov	r0, r9
 8017a8a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017a8e:	e9cd 5600 	strd	r5, r6, [sp]
 8017a92:	f001 fc6f 	bl	8019374 <uxr_read_framed_msg>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d0ef      	beq.n	8017a7a <recv_custom_msg+0x2e>
 8017a9a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017a9e:	b1b3      	cbz	r3, 8017ace <recv_custom_msg+0x82>
 8017aa0:	4b0f      	ldr	r3, [pc, #60]	; (8017ae0 <recv_custom_msg+0x94>)
 8017aa2:	2000      	movs	r0, #0
 8017aa4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017aa8:	701a      	strb	r2, [r3, #0]
 8017aaa:	b009      	add	sp, #36	; 0x24
 8017aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab0:	f10d 021f 	add.w	r2, sp, #31
 8017ab4:	4601      	mov	r1, r0
 8017ab6:	9200      	str	r2, [sp, #0]
 8017ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017abc:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8017ac0:	47a8      	blx	r5
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	d0ec      	beq.n	8017aa0 <recv_custom_msg+0x54>
 8017ac6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d1e8      	bne.n	8017aa0 <recv_custom_msg+0x54>
 8017ace:	f8cb 0000 	str.w	r0, [fp]
 8017ad2:	2001      	movs	r0, #1
 8017ad4:	f8ca 4000 	str.w	r4, [sl]
 8017ad8:	b009      	add	sp, #36	; 0x24
 8017ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ade:	bf00      	nop
 8017ae0:	20016f8c 	.word	0x20016f8c

08017ae4 <send_custom_msg>:
 8017ae4:	b530      	push	{r4, r5, lr}
 8017ae6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8017aea:	b087      	sub	sp, #28
 8017aec:	4614      	mov	r4, r2
 8017aee:	b995      	cbnz	r5, 8017b16 <send_custom_msg+0x32>
 8017af0:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8017af4:	f10d 0317 	add.w	r3, sp, #23
 8017af8:	47a8      	blx	r5
 8017afa:	1e03      	subs	r3, r0, #0
 8017afc:	bf18      	it	ne
 8017afe:	2301      	movne	r3, #1
 8017b00:	42a0      	cmp	r0, r4
 8017b02:	bf18      	it	ne
 8017b04:	2300      	movne	r3, #0
 8017b06:	b91b      	cbnz	r3, 8017b10 <send_custom_msg+0x2c>
 8017b08:	4a0a      	ldr	r2, [pc, #40]	; (8017b34 <send_custom_msg+0x50>)
 8017b0a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8017b0e:	7011      	strb	r1, [r2, #0]
 8017b10:	4618      	mov	r0, r3
 8017b12:	b007      	add	sp, #28
 8017b14:	bd30      	pop	{r4, r5, pc}
 8017b16:	460b      	mov	r3, r1
 8017b18:	2200      	movs	r2, #0
 8017b1a:	f10d 0117 	add.w	r1, sp, #23
 8017b1e:	9400      	str	r4, [sp, #0]
 8017b20:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017b24:	4602      	mov	r2, r0
 8017b26:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8017b2a:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017b2e:	f001 fa43 	bl	8018fb8 <uxr_write_framed_msg>
 8017b32:	e7e2      	b.n	8017afa <send_custom_msg+0x16>
 8017b34:	20016f8c 	.word	0x20016f8c

08017b38 <uxr_set_custom_transport_callbacks>:
 8017b38:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8017b3c:	9901      	ldr	r1, [sp, #4]
 8017b3e:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017b42:	9b00      	ldr	r3, [sp, #0]
 8017b44:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8017b48:	4770      	bx	lr
 8017b4a:	bf00      	nop

08017b4c <uxr_init_custom_transport>:
 8017b4c:	b538      	push	{r3, r4, r5, lr}
 8017b4e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8017b52:	b303      	cbz	r3, 8017b96 <uxr_init_custom_transport+0x4a>
 8017b54:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8017b58:	4604      	mov	r4, r0
 8017b5a:	b1e2      	cbz	r2, 8017b96 <uxr_init_custom_transport+0x4a>
 8017b5c:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8017b60:	b1ca      	cbz	r2, 8017b96 <uxr_init_custom_transport+0x4a>
 8017b62:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8017b66:	b1b2      	cbz	r2, 8017b96 <uxr_init_custom_transport+0x4a>
 8017b68:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8017b6c:	4798      	blx	r3
 8017b6e:	4605      	mov	r5, r0
 8017b70:	b188      	cbz	r0, 8017b96 <uxr_init_custom_transport+0x4a>
 8017b72:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8017b76:	b98b      	cbnz	r3, 8017b9c <uxr_init_custom_transport+0x50>
 8017b78:	4b0b      	ldr	r3, [pc, #44]	; (8017ba8 <uxr_init_custom_transport+0x5c>)
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	490b      	ldr	r1, [pc, #44]	; (8017bac <uxr_init_custom_transport+0x60>)
 8017b7e:	4a0c      	ldr	r2, [pc, #48]	; (8017bb0 <uxr_init_custom_transport+0x64>)
 8017b80:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8017b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b88:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8017b8c:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8017b90:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8017b94:	bd38      	pop	{r3, r4, r5, pc}
 8017b96:	2500      	movs	r5, #0
 8017b98:	4628      	mov	r0, r5
 8017b9a:	bd38      	pop	{r3, r4, r5, pc}
 8017b9c:	2100      	movs	r1, #0
 8017b9e:	f204 2002 	addw	r0, r4, #514	; 0x202
 8017ba2:	f001 fa03 	bl	8018fac <uxr_init_framing_io>
 8017ba6:	e7e7      	b.n	8017b78 <uxr_init_custom_transport+0x2c>
 8017ba8:	08017a4d 	.word	0x08017a4d
 8017bac:	08017ae5 	.word	0x08017ae5
 8017bb0:	08017a41 	.word	0x08017a41

08017bb4 <uxr_close_custom_transport>:
 8017bb4:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8017bb8:	4718      	bx	r3
 8017bba:	bf00      	nop

08017bbc <uxr_object_id>:
 8017bbc:	b082      	sub	sp, #8
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	f88d 1006 	strb.w	r1, [sp, #6]
 8017bc4:	f360 030f 	bfi	r3, r0, #0, #16
 8017bc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017bcc:	f362 431f 	bfi	r3, r2, #16, #16
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	b002      	add	sp, #8
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop

08017bd8 <uxr_object_id_from_raw>:
 8017bd8:	7843      	ldrb	r3, [r0, #1]
 8017bda:	b082      	sub	sp, #8
 8017bdc:	7801      	ldrb	r1, [r0, #0]
 8017bde:	2000      	movs	r0, #0
 8017be0:	091a      	lsrs	r2, r3, #4
 8017be2:	f003 030f 	and.w	r3, r3, #15
 8017be6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017bea:	f88d 3006 	strb.w	r3, [sp, #6]
 8017bee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017bf2:	f362 000f 	bfi	r0, r2, #0, #16
 8017bf6:	f363 401f 	bfi	r0, r3, #16, #16
 8017bfa:	b002      	add	sp, #8
 8017bfc:	4770      	bx	lr
 8017bfe:	bf00      	nop

08017c00 <uxr_object_id_to_raw>:
 8017c00:	4602      	mov	r2, r0
 8017c02:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8017c06:	b082      	sub	sp, #8
 8017c08:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8017c0c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8017c10:	f881 c000 	strb.w	ip, [r1]
 8017c14:	7048      	strb	r0, [r1, #1]
 8017c16:	b002      	add	sp, #8
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop

08017c1c <uxr_buffer_request_data>:
 8017c1c:	b530      	push	{r4, r5, lr}
 8017c1e:	b095      	sub	sp, #84	; 0x54
 8017c20:	4604      	mov	r4, r0
 8017c22:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8017c24:	9303      	str	r3, [sp, #12]
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	f88d 301c 	strb.w	r3, [sp, #28]
 8017c2c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017c30:	f04f 0200 	mov.w	r2, #0
 8017c34:	bf14      	ite	ne
 8017c36:	2101      	movne	r1, #1
 8017c38:	4611      	moveq	r1, r2
 8017c3a:	f88d 201d 	strb.w	r2, [sp, #29]
 8017c3e:	f88d 201e 	strb.w	r2, [sp, #30]
 8017c42:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017c46:	d021      	beq.n	8017c8c <uxr_buffer_request_data+0x70>
 8017c48:	686b      	ldr	r3, [r5, #4]
 8017c4a:	2210      	movs	r2, #16
 8017c4c:	6829      	ldr	r1, [r5, #0]
 8017c4e:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017c52:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8017c56:	2308      	movs	r3, #8
 8017c58:	2100      	movs	r1, #0
 8017c5a:	4620      	mov	r0, r4
 8017c5c:	e9cd 3100 	strd	r3, r1, [sp]
 8017c60:	ab0c      	add	r3, sp, #48	; 0x30
 8017c62:	9905      	ldr	r1, [sp, #20]
 8017c64:	f001 f834 	bl	8018cd0 <uxr_prepare_stream_to_write_submessage>
 8017c68:	b918      	cbnz	r0, 8017c72 <uxr_buffer_request_data+0x56>
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	b015      	add	sp, #84	; 0x54
 8017c70:	bd30      	pop	{r4, r5, pc}
 8017c72:	9904      	ldr	r1, [sp, #16]
 8017c74:	aa06      	add	r2, sp, #24
 8017c76:	4620      	mov	r0, r4
 8017c78:	f001 f966 	bl	8018f48 <uxr_init_base_object_request>
 8017c7c:	4604      	mov	r4, r0
 8017c7e:	a906      	add	r1, sp, #24
 8017c80:	a80c      	add	r0, sp, #48	; 0x30
 8017c82:	f003 f915 	bl	801aeb0 <uxr_serialize_READ_DATA_Payload>
 8017c86:	4620      	mov	r0, r4
 8017c88:	b015      	add	sp, #84	; 0x54
 8017c8a:	bd30      	pop	{r4, r5, pc}
 8017c8c:	2208      	movs	r2, #8
 8017c8e:	e7e2      	b.n	8017c56 <uxr_buffer_request_data+0x3a>

08017c90 <uxr_buffer_cancel_data>:
 8017c90:	b510      	push	{r4, lr}
 8017c92:	2300      	movs	r3, #0
 8017c94:	b094      	sub	sp, #80	; 0x50
 8017c96:	4604      	mov	r4, r0
 8017c98:	9205      	str	r2, [sp, #20]
 8017c9a:	9301      	str	r3, [sp, #4]
 8017c9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017ca0:	f88d 301e 	strb.w	r3, [sp, #30]
 8017ca4:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8017ca8:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8017cac:	2308      	movs	r3, #8
 8017cae:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017cb2:	2201      	movs	r2, #1
 8017cb4:	9300      	str	r3, [sp, #0]
 8017cb6:	ab0c      	add	r3, sp, #48	; 0x30
 8017cb8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8017cbc:	2210      	movs	r2, #16
 8017cbe:	f001 f807 	bl	8018cd0 <uxr_prepare_stream_to_write_submessage>
 8017cc2:	b918      	cbnz	r0, 8017ccc <uxr_buffer_cancel_data+0x3c>
 8017cc4:	4604      	mov	r4, r0
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	b014      	add	sp, #80	; 0x50
 8017cca:	bd10      	pop	{r4, pc}
 8017ccc:	9905      	ldr	r1, [sp, #20]
 8017cce:	aa06      	add	r2, sp, #24
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f001 f939 	bl	8018f48 <uxr_init_base_object_request>
 8017cd6:	4604      	mov	r4, r0
 8017cd8:	a906      	add	r1, sp, #24
 8017cda:	a80c      	add	r0, sp, #48	; 0x30
 8017cdc:	f003 f8e8 	bl	801aeb0 <uxr_serialize_READ_DATA_Payload>
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	b014      	add	sp, #80	; 0x50
 8017ce4:	bd10      	pop	{r4, pc}
 8017ce6:	bf00      	nop

08017ce8 <read_submessage_format>:
 8017ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017cec:	b095      	sub	sp, #84	; 0x54
 8017cee:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8017cf2:	b113      	cbz	r3, 8017cfa <read_submessage_format+0x12>
 8017cf4:	b015      	add	sp, #84	; 0x54
 8017cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017cfa:	4606      	mov	r6, r0
 8017cfc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017cfe:	460c      	mov	r4, r1
 8017d00:	4615      	mov	r5, r2
 8017d02:	9004      	str	r0, [sp, #16]
 8017d04:	4699      	mov	r9, r3
 8017d06:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017d08:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8017d0c:	9005      	str	r0, [sp, #20]
 8017d0e:	a80c      	add	r0, sp, #48	; 0x30
 8017d10:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017d14:	1a52      	subs	r2, r2, r1
 8017d16:	f7fb f997 	bl	8013048 <ucdr_init_buffer>
 8017d1a:	a80c      	add	r0, sp, #48	; 0x30
 8017d1c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017d20:	f7fb f966 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 8017d24:	69e2      	ldr	r2, [r4, #28]
 8017d26:	b19a      	cbz	r2, 8017d50 <read_submessage_format+0x68>
 8017d28:	f1b8 0f07 	cmp.w	r8, #7
 8017d2c:	f882 9014 	strb.w	r9, [r2, #20]
 8017d30:	d040      	beq.n	8017db4 <read_submessage_format+0xcc>
 8017d32:	f1b8 0f08 	cmp.w	r8, #8
 8017d36:	d02e      	beq.n	8017d96 <read_submessage_format+0xae>
 8017d38:	f1b8 0f06 	cmp.w	r8, #6
 8017d3c:	d011      	beq.n	8017d62 <read_submessage_format+0x7a>
 8017d3e:	2301      	movs	r3, #1
 8017d40:	7513      	strb	r3, [r2, #20]
 8017d42:	4629      	mov	r1, r5
 8017d44:	4620      	mov	r0, r4
 8017d46:	f7fb f9d3 	bl	80130f0 <ucdr_advance_buffer>
 8017d4a:	b015      	add	sp, #84	; 0x54
 8017d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d50:	f1b8 0f07 	cmp.w	r8, #7
 8017d54:	d02e      	beq.n	8017db4 <read_submessage_format+0xcc>
 8017d56:	f1b8 0f08 	cmp.w	r8, #8
 8017d5a:	d01c      	beq.n	8017d96 <read_submessage_format+0xae>
 8017d5c:	f1b8 0f06 	cmp.w	r8, #6
 8017d60:	d1ef      	bne.n	8017d42 <read_submessage_format+0x5a>
 8017d62:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8017d66:	f1b8 0f00 	cmp.w	r8, #0
 8017d6a:	d011      	beq.n	8017d90 <read_submessage_format+0xa8>
 8017d6c:	ab0c      	add	r3, sp, #48	; 0x30
 8017d6e:	9501      	str	r5, [sp, #4]
 8017d70:	463a      	mov	r2, r7
 8017d72:	4630      	mov	r0, r6
 8017d74:	9300      	str	r3, [sp, #0]
 8017d76:	2306      	movs	r3, #6
 8017d78:	f88d 3016 	strb.w	r3, [sp, #22]
 8017d7c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8017d80:	9302      	str	r3, [sp, #8]
 8017d82:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017d86:	47c0      	blx	r8
 8017d88:	2301      	movs	r3, #1
 8017d8a:	69e2      	ldr	r2, [r4, #28]
 8017d8c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8017d90:	2a00      	cmp	r2, #0
 8017d92:	d1d4      	bne.n	8017d3e <read_submessage_format+0x56>
 8017d94:	e7d5      	b.n	8017d42 <read_submessage_format+0x5a>
 8017d96:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d0f8      	beq.n	8017d90 <read_submessage_format+0xa8>
 8017d9e:	a80c      	add	r0, sp, #48	; 0x30
 8017da0:	a906      	add	r1, sp, #24
 8017da2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017da6:	f003 f94f 	bl	801b048 <uxr_deserialize_SampleIdentity>
 8017daa:	b9a0      	cbnz	r0, 8017dd6 <read_submessage_format+0xee>
 8017dac:	69e2      	ldr	r2, [r4, #28]
 8017dae:	2a00      	cmp	r2, #0
 8017db0:	d1c5      	bne.n	8017d3e <read_submessage_format+0x56>
 8017db2:	e7c6      	b.n	8017d42 <read_submessage_format+0x5a>
 8017db4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8017db8:	b13b      	cbz	r3, 8017dca <read_submessage_format+0xe2>
 8017dba:	a906      	add	r1, sp, #24
 8017dbc:	a80c      	add	r0, sp, #48	; 0x30
 8017dbe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017dc2:	f002 fe15 	bl	801a9f0 <uxr_deserialize_BaseObjectRequest>
 8017dc6:	bb60      	cbnz	r0, 8017e22 <read_submessage_format+0x13a>
 8017dc8:	69e2      	ldr	r2, [r4, #28]
 8017dca:	68a3      	ldr	r3, [r4, #8]
 8017dcc:	442b      	add	r3, r5
 8017dce:	60a3      	str	r3, [r4, #8]
 8017dd0:	2a00      	cmp	r2, #0
 8017dd2:	d1b4      	bne.n	8017d3e <read_submessage_format+0x56>
 8017dd4:	e7b5      	b.n	8017d42 <read_submessage_format+0x5a>
 8017dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017dd8:	a80c      	add	r0, sp, #48	; 0x30
 8017dda:	eba8 0803 	sub.w	r8, r8, r3
 8017dde:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017de2:	44a8      	add	r8, r5
 8017de4:	1a52      	subs	r2, r2, r1
 8017de6:	f7fb f92f 	bl	8013048 <ucdr_init_buffer>
 8017dea:	a80c      	add	r0, sp, #48	; 0x30
 8017dec:	fa1f f888 	uxth.w	r8, r8
 8017df0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017df4:	f7fb f8fc 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 8017df8:	ab0c      	add	r3, sp, #48	; 0x30
 8017dfa:	2108      	movs	r1, #8
 8017dfc:	f8cd 8004 	str.w	r8, [sp, #4]
 8017e00:	9300      	str	r3, [sp, #0]
 8017e02:	463a      	mov	r2, r7
 8017e04:	f88d 1016 	strb.w	r1, [sp, #22]
 8017e08:	ab06      	add	r3, sp, #24
 8017e0a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8017e0e:	4630      	mov	r0, r6
 8017e10:	9102      	str	r1, [sp, #8]
 8017e12:	9905      	ldr	r1, [sp, #20]
 8017e14:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8017e18:	47b8      	blx	r7
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8017e20:	e7c4      	b.n	8017dac <read_submessage_format+0xc4>
 8017e22:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e28:	a80c      	add	r0, sp, #48	; 0x30
 8017e2a:	1a52      	subs	r2, r2, r1
 8017e2c:	eba8 0803 	sub.w	r8, r8, r3
 8017e30:	f7fb f90a 	bl	8013048 <ucdr_init_buffer>
 8017e34:	a80c      	add	r0, sp, #48	; 0x30
 8017e36:	44a8      	add	r8, r5
 8017e38:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017e3c:	f7fb f8d8 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 8017e40:	ab0c      	add	r3, sp, #48	; 0x30
 8017e42:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8017e46:	fa1f f888 	uxth.w	r8, r8
 8017e4a:	9300      	str	r3, [sp, #0]
 8017e4c:	463a      	mov	r2, r7
 8017e4e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017e52:	4630      	mov	r0, r6
 8017e54:	f8cd 8004 	str.w	r8, [sp, #4]
 8017e58:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017e5c:	2107      	movs	r1, #7
 8017e5e:	f88d 1016 	strb.w	r1, [sp, #22]
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8017e68:	9102      	str	r1, [sp, #8]
 8017e6a:	9905      	ldr	r1, [sp, #20]
 8017e6c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8017e70:	47b8      	blx	r7
 8017e72:	2301      	movs	r3, #1
 8017e74:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8017e78:	e7a6      	b.n	8017dc8 <read_submessage_format+0xe0>
 8017e7a:	bf00      	nop

08017e7c <on_get_fragmentation_info>:
 8017e7c:	b500      	push	{lr}
 8017e7e:	b08b      	sub	sp, #44	; 0x2c
 8017e80:	4601      	mov	r1, r0
 8017e82:	2204      	movs	r2, #4
 8017e84:	a802      	add	r0, sp, #8
 8017e86:	f7fb f8df 	bl	8013048 <ucdr_init_buffer>
 8017e8a:	f10d 0305 	add.w	r3, sp, #5
 8017e8e:	f10d 0206 	add.w	r2, sp, #6
 8017e92:	a901      	add	r1, sp, #4
 8017e94:	a802      	add	r0, sp, #8
 8017e96:	f001 fe5d 	bl	8019b54 <uxr_read_submessage_header>
 8017e9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017e9e:	2b0d      	cmp	r3, #13
 8017ea0:	d003      	beq.n	8017eaa <on_get_fragmentation_info+0x2e>
 8017ea2:	2000      	movs	r0, #0
 8017ea4:	b00b      	add	sp, #44	; 0x2c
 8017ea6:	f85d fb04 	ldr.w	pc, [sp], #4
 8017eaa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017eae:	f013 0f02 	tst.w	r3, #2
 8017eb2:	bf14      	ite	ne
 8017eb4:	2002      	movne	r0, #2
 8017eb6:	2001      	moveq	r0, #1
 8017eb8:	b00b      	add	sp, #44	; 0x2c
 8017eba:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ebe:	bf00      	nop

08017ec0 <read_submessage_get_info>:
 8017ec0:	b570      	push	{r4, r5, r6, lr}
 8017ec2:	2500      	movs	r5, #0
 8017ec4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8017ec8:	460e      	mov	r6, r1
 8017eca:	4604      	mov	r4, r0
 8017ecc:	f44f 7224 	mov.w	r2, #656	; 0x290
 8017ed0:	4629      	mov	r1, r5
 8017ed2:	a810      	add	r0, sp, #64	; 0x40
 8017ed4:	9503      	str	r5, [sp, #12]
 8017ed6:	9504      	str	r5, [sp, #16]
 8017ed8:	f008 fe20 	bl	8020b1c <memset>
 8017edc:	a903      	add	r1, sp, #12
 8017ede:	4630      	mov	r0, r6
 8017ee0:	f002 ff26 	bl	801ad30 <uxr_deserialize_GET_INFO_Payload>
 8017ee4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017eee:	f001 f823 	bl	8018f38 <uxr_session_header_offset>
 8017ef2:	462b      	mov	r3, r5
 8017ef4:	220c      	movs	r2, #12
 8017ef6:	a905      	add	r1, sp, #20
 8017ef8:	9000      	str	r0, [sp, #0]
 8017efa:	a808      	add	r0, sp, #32
 8017efc:	f7fb f892 	bl	8013024 <ucdr_init_buffer_origin_offset>
 8017f00:	a910      	add	r1, sp, #64	; 0x40
 8017f02:	a808      	add	r0, sp, #32
 8017f04:	f002 ff88 	bl	801ae18 <uxr_serialize_INFO_Payload>
 8017f08:	9b08      	ldr	r3, [sp, #32]
 8017f0a:	462a      	mov	r2, r5
 8017f0c:	4629      	mov	r1, r5
 8017f0e:	4620      	mov	r0, r4
 8017f10:	f000 ffbe 	bl	8018e90 <uxr_stamp_session_header>
 8017f14:	a808      	add	r0, sp, #32
 8017f16:	f7fb f8c5 	bl	80130a4 <ucdr_buffer_length>
 8017f1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017f1c:	4602      	mov	r2, r0
 8017f1e:	a905      	add	r1, sp, #20
 8017f20:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017f24:	47a0      	blx	r4
 8017f26:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8017f2a:	bd70      	pop	{r4, r5, r6, pc}

08017f2c <write_submessage_acknack.isra.0>:
 8017f2c:	b570      	push	{r4, r5, r6, lr}
 8017f2e:	b092      	sub	sp, #72	; 0x48
 8017f30:	4605      	mov	r5, r0
 8017f32:	460e      	mov	r6, r1
 8017f34:	4614      	mov	r4, r2
 8017f36:	f000 ffff 	bl	8018f38 <uxr_session_header_offset>
 8017f3a:	a905      	add	r1, sp, #20
 8017f3c:	9000      	str	r0, [sp, #0]
 8017f3e:	2300      	movs	r3, #0
 8017f40:	a80a      	add	r0, sp, #40	; 0x28
 8017f42:	2211      	movs	r2, #17
 8017f44:	f7fb f86e 	bl	8013024 <ucdr_init_buffer_origin_offset>
 8017f48:	2218      	movs	r2, #24
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	210a      	movs	r1, #10
 8017f4e:	fb02 5404 	mla	r4, r2, r4, r5
 8017f52:	a80a      	add	r0, sp, #40	; 0x28
 8017f54:	2205      	movs	r2, #5
 8017f56:	3450      	adds	r4, #80	; 0x50
 8017f58:	f001 fde2 	bl	8019b20 <uxr_buffer_submessage_header>
 8017f5c:	a903      	add	r1, sp, #12
 8017f5e:	4620      	mov	r0, r4
 8017f60:	f006 fb50 	bl	801e604 <uxr_compute_acknack>
 8017f64:	ba40      	rev16	r0, r0
 8017f66:	a903      	add	r1, sp, #12
 8017f68:	f88d 6010 	strb.w	r6, [sp, #16]
 8017f6c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017f70:	a80a      	add	r0, sp, #40	; 0x28
 8017f72:	f002 ffc3 	bl	801aefc <uxr_serialize_ACKNACK_Payload>
 8017f76:	2200      	movs	r2, #0
 8017f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f7a:	4628      	mov	r0, r5
 8017f7c:	4611      	mov	r1, r2
 8017f7e:	f000 ff87 	bl	8018e90 <uxr_stamp_session_header>
 8017f82:	a80a      	add	r0, sp, #40	; 0x28
 8017f84:	f7fb f88e 	bl	80130a4 <ucdr_buffer_length>
 8017f88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8017f8a:	4602      	mov	r2, r0
 8017f8c:	a905      	add	r1, sp, #20
 8017f8e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8017f92:	47a0      	blx	r4
 8017f94:	b012      	add	sp, #72	; 0x48
 8017f96:	bd70      	pop	{r4, r5, r6, pc}

08017f98 <uxr_init_session>:
 8017f98:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8017fd0 <uxr_init_session+0x38>
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	b510      	push	{r4, lr}
 8017fa0:	4604      	mov	r4, r0
 8017fa2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8017fa6:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8017faa:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8017fae:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8017fb2:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8017fb6:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8017fba:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8017fbe:	2181      	movs	r1, #129	; 0x81
 8017fc0:	f000 feca 	bl	8018d58 <uxr_init_session_info>
 8017fc4:	f104 0008 	add.w	r0, r4, #8
 8017fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fcc:	f001 bcc4 	b.w	8019958 <uxr_init_stream_storage>
	...

08017fd8 <uxr_set_status_callback>:
 8017fd8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8017fdc:	4770      	bx	lr
 8017fde:	bf00      	nop

08017fe0 <uxr_set_topic_callback>:
 8017fe0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop

08017fe8 <uxr_set_request_callback>:
 8017fe8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8017fec:	4770      	bx	lr
 8017fee:	bf00      	nop

08017ff0 <uxr_set_reply_callback>:
 8017ff0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8017ff4:	4770      	bx	lr
 8017ff6:	bf00      	nop

08017ff8 <uxr_create_output_best_effort_stream>:
 8017ff8:	b510      	push	{r4, lr}
 8017ffa:	4604      	mov	r4, r0
 8017ffc:	b084      	sub	sp, #16
 8017ffe:	e9cd 2100 	strd	r2, r1, [sp]
 8018002:	f000 ff99 	bl	8018f38 <uxr_session_header_offset>
 8018006:	4603      	mov	r3, r0
 8018008:	f104 0008 	add.w	r0, r4, #8
 801800c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018010:	b004      	add	sp, #16
 8018012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018016:	f001 bce5 	b.w	80199e4 <uxr_add_output_best_effort_buffer>
 801801a:	bf00      	nop

0801801c <uxr_create_output_reliable_stream>:
 801801c:	b530      	push	{r4, r5, lr}
 801801e:	b089      	sub	sp, #36	; 0x24
 8018020:	4604      	mov	r4, r0
 8018022:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018026:	9303      	str	r3, [sp, #12]
 8018028:	f000 ff86 	bl	8018f38 <uxr_session_header_offset>
 801802c:	4605      	mov	r5, r0
 801802e:	9905      	ldr	r1, [sp, #20]
 8018030:	f104 0008 	add.w	r0, r4, #8
 8018034:	9500      	str	r5, [sp, #0]
 8018036:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801803a:	f001 fce7 	bl	8019a0c <uxr_add_output_reliable_buffer>
 801803e:	2200      	movs	r2, #0
 8018040:	fa5f fc80 	uxtb.w	ip, r0
 8018044:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018048:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801804c:	0e03      	lsrs	r3, r0, #24
 801804e:	f36c 0207 	bfi	r2, ip, #0, #8
 8018052:	f364 220f 	bfi	r2, r4, #8, #8
 8018056:	f361 4217 	bfi	r2, r1, #16, #8
 801805a:	f363 621f 	bfi	r2, r3, #24, #8
 801805e:	4610      	mov	r0, r2
 8018060:	b009      	add	sp, #36	; 0x24
 8018062:	bd30      	pop	{r4, r5, pc}

08018064 <uxr_create_input_best_effort_stream>:
 8018064:	b082      	sub	sp, #8
 8018066:	3008      	adds	r0, #8
 8018068:	b002      	add	sp, #8
 801806a:	f001 bce9 	b.w	8019a40 <uxr_add_input_best_effort_buffer>
 801806e:	bf00      	nop

08018070 <uxr_create_input_reliable_stream>:
 8018070:	b510      	push	{r4, lr}
 8018072:	4c0c      	ldr	r4, [pc, #48]	; (80180a4 <uxr_create_input_reliable_stream+0x34>)
 8018074:	b084      	sub	sp, #16
 8018076:	3008      	adds	r0, #8
 8018078:	9400      	str	r4, [sp, #0]
 801807a:	f001 fcf7 	bl	8019a6c <uxr_add_input_reliable_buffer>
 801807e:	2200      	movs	r2, #0
 8018080:	fa5f fe80 	uxtb.w	lr, r0
 8018084:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018088:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801808c:	0e03      	lsrs	r3, r0, #24
 801808e:	f36e 0207 	bfi	r2, lr, #0, #8
 8018092:	f36c 220f 	bfi	r2, ip, #8, #8
 8018096:	f361 4217 	bfi	r2, r1, #16, #8
 801809a:	f363 621f 	bfi	r2, r3, #24, #8
 801809e:	4610      	mov	r0, r2
 80180a0:	b004      	add	sp, #16
 80180a2:	bd10      	pop	{r4, pc}
 80180a4:	08017e7d 	.word	0x08017e7d

080180a8 <uxr_epoch_nanos>:
 80180a8:	b510      	push	{r4, lr}
 80180aa:	4604      	mov	r4, r0
 80180ac:	f001 fd9a 	bl	8019be4 <uxr_nanos>
 80180b0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80180b4:	1ac0      	subs	r0, r0, r3
 80180b6:	eb61 0102 	sbc.w	r1, r1, r2
 80180ba:	bd10      	pop	{r4, pc}

080180bc <uxr_flash_output_streams>:
 80180bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180c0:	7e03      	ldrb	r3, [r0, #24]
 80180c2:	b084      	sub	sp, #16
 80180c4:	4604      	mov	r4, r0
 80180c6:	b1fb      	cbz	r3, 8018108 <uxr_flash_output_streams+0x4c>
 80180c8:	f04f 0900 	mov.w	r9, #0
 80180cc:	f10d 0802 	add.w	r8, sp, #2
 80180d0:	af03      	add	r7, sp, #12
 80180d2:	ae02      	add	r6, sp, #8
 80180d4:	4648      	mov	r0, r9
 80180d6:	2201      	movs	r2, #1
 80180d8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80180dc:	4611      	mov	r1, r2
 80180de:	3508      	adds	r5, #8
 80180e0:	f001 fbe0 	bl	80198a4 <uxr_stream_id>
 80180e4:	4684      	mov	ip, r0
 80180e6:	4643      	mov	r3, r8
 80180e8:	463a      	mov	r2, r7
 80180ea:	4631      	mov	r1, r6
 80180ec:	4628      	mov	r0, r5
 80180ee:	f8cd c004 	str.w	ip, [sp, #4]
 80180f2:	f006 fb11 	bl	801e718 <uxr_prepare_best_effort_buffer_to_send>
 80180f6:	2800      	cmp	r0, #0
 80180f8:	d13d      	bne.n	8018176 <uxr_flash_output_streams+0xba>
 80180fa:	f109 0901 	add.w	r9, r9, #1
 80180fe:	7e23      	ldrb	r3, [r4, #24]
 8018100:	fa5f f089 	uxtb.w	r0, r9
 8018104:	4283      	cmp	r3, r0
 8018106:	d8e6      	bhi.n	80180d6 <uxr_flash_output_streams+0x1a>
 8018108:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801810c:	b383      	cbz	r3, 8018170 <uxr_flash_output_streams+0xb4>
 801810e:	f04f 0900 	mov.w	r9, #0
 8018112:	f10d 0802 	add.w	r8, sp, #2
 8018116:	af03      	add	r7, sp, #12
 8018118:	ae02      	add	r6, sp, #8
 801811a:	4648      	mov	r0, r9
 801811c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8018120:	2201      	movs	r2, #1
 8018122:	2102      	movs	r1, #2
 8018124:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018128:	f001 fbbc 	bl	80198a4 <uxr_stream_id>
 801812c:	9001      	str	r0, [sp, #4]
 801812e:	3520      	adds	r5, #32
 8018130:	e00c      	b.n	801814c <uxr_flash_output_streams+0x90>
 8018132:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018136:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801813a:	9b02      	ldr	r3, [sp, #8]
 801813c:	f000 fea8 	bl	8018e90 <uxr_stamp_session_header>
 8018140:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018142:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018146:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801814a:	47d0      	blx	sl
 801814c:	4643      	mov	r3, r8
 801814e:	463a      	mov	r2, r7
 8018150:	4631      	mov	r1, r6
 8018152:	4628      	mov	r0, r5
 8018154:	f006 fd04 	bl	801eb60 <uxr_prepare_next_reliable_buffer_to_send>
 8018158:	4603      	mov	r3, r0
 801815a:	4620      	mov	r0, r4
 801815c:	2b00      	cmp	r3, #0
 801815e:	d1e8      	bne.n	8018132 <uxr_flash_output_streams+0x76>
 8018160:	f109 0901 	add.w	r9, r9, #1
 8018164:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018168:	fa5f f089 	uxtb.w	r0, r9
 801816c:	4283      	cmp	r3, r0
 801816e:	d8d5      	bhi.n	801811c <uxr_flash_output_streams+0x60>
 8018170:	b004      	add	sp, #16
 8018172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018176:	9b02      	ldr	r3, [sp, #8]
 8018178:	4620      	mov	r0, r4
 801817a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801817e:	f109 0901 	add.w	r9, r9, #1
 8018182:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018186:	f000 fe83 	bl	8018e90 <uxr_stamp_session_header>
 801818a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801818c:	9a03      	ldr	r2, [sp, #12]
 801818e:	685d      	ldr	r5, [r3, #4]
 8018190:	6818      	ldr	r0, [r3, #0]
 8018192:	9902      	ldr	r1, [sp, #8]
 8018194:	47a8      	blx	r5
 8018196:	7e23      	ldrb	r3, [r4, #24]
 8018198:	fa5f f089 	uxtb.w	r0, r9
 801819c:	4283      	cmp	r3, r0
 801819e:	d89a      	bhi.n	80180d6 <uxr_flash_output_streams+0x1a>
 80181a0:	e7b2      	b.n	8018108 <uxr_flash_output_streams+0x4c>
 80181a2:	bf00      	nop

080181a4 <read_submessage_info>:
 80181a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181a8:	460d      	mov	r5, r1
 80181aa:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80181ae:	4606      	mov	r6, r0
 80181b0:	4669      	mov	r1, sp
 80181b2:	4628      	mov	r0, r5
 80181b4:	f002 fcce 	bl	801ab54 <uxr_deserialize_BaseObjectReply>
 80181b8:	4604      	mov	r4, r0
 80181ba:	a902      	add	r1, sp, #8
 80181bc:	4628      	mov	r0, r5
 80181be:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80181c2:	f7f9 fc51 	bl	8011a68 <ucdr_deserialize_bool>
 80181c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80181ca:	4004      	ands	r4, r0
 80181cc:	b2e4      	uxtb	r4, r4
 80181ce:	b95b      	cbnz	r3, 80181e8 <read_submessage_info+0x44>
 80181d0:	a987      	add	r1, sp, #540	; 0x21c
 80181d2:	4628      	mov	r0, r5
 80181d4:	f7f9 fc48 	bl	8011a68 <ucdr_deserialize_bool>
 80181d8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80181dc:	4680      	mov	r8, r0
 80181de:	b94b      	cbnz	r3, 80181f4 <read_submessage_info+0x50>
 80181e0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80181e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e8:	a903      	add	r1, sp, #12
 80181ea:	4628      	mov	r0, r5
 80181ec:	f002 fb5e 	bl	801a8ac <uxr_deserialize_ObjectVariant>
 80181f0:	4004      	ands	r4, r0
 80181f2:	e7ed      	b.n	80181d0 <read_submessage_info+0x2c>
 80181f4:	a988      	add	r1, sp, #544	; 0x220
 80181f6:	4628      	mov	r0, r5
 80181f8:	f7f9 fc64 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 80181fc:	ea14 0f08 	tst.w	r4, r8
 8018200:	d0ee      	beq.n	80181e0 <read_submessage_info+0x3c>
 8018202:	2800      	cmp	r0, #0
 8018204:	d0ec      	beq.n	80181e0 <read_submessage_info+0x3c>
 8018206:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801820a:	2b0d      	cmp	r3, #13
 801820c:	d1e8      	bne.n	80181e0 <read_submessage_info+0x3c>
 801820e:	a98a      	add	r1, sp, #552	; 0x228
 8018210:	4628      	mov	r0, r5
 8018212:	f7fa f9fd 	bl	8012610 <ucdr_deserialize_int16_t>
 8018216:	b138      	cbz	r0, 8018228 <read_submessage_info+0x84>
 8018218:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801821c:	2b00      	cmp	r3, #0
 801821e:	dd06      	ble.n	801822e <read_submessage_info+0x8a>
 8018220:	2f00      	cmp	r7, #0
 8018222:	bf14      	ite	ne
 8018224:	2001      	movne	r0, #1
 8018226:	2002      	moveq	r0, #2
 8018228:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 801822c:	e7d8      	b.n	80181e0 <read_submessage_info+0x3c>
 801822e:	2000      	movs	r0, #0
 8018230:	e7fa      	b.n	8018228 <read_submessage_info+0x84>
 8018232:	bf00      	nop

08018234 <read_submessage_list>:
 8018234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018238:	4604      	mov	r4, r0
 801823a:	b097      	sub	sp, #92	; 0x5c
 801823c:	460d      	mov	r5, r1
 801823e:	4ec1      	ldr	r6, [pc, #772]	; (8018544 <read_submessage_list+0x310>)
 8018240:	9209      	str	r2, [sp, #36]	; 0x24
 8018242:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8018246:	aa0c      	add	r2, sp, #48	; 0x30
 8018248:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801824c:	4628      	mov	r0, r5
 801824e:	f001 fc81 	bl	8019b54 <uxr_read_submessage_header>
 8018252:	2800      	cmp	r0, #0
 8018254:	f000 8142 	beq.w	80184dc <read_submessage_list+0x2a8>
 8018258:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 801825c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8018260:	3b02      	subs	r3, #2
 8018262:	2b0d      	cmp	r3, #13
 8018264:	d8ed      	bhi.n	8018242 <read_submessage_list+0xe>
 8018266:	a101      	add	r1, pc, #4	; (adr r1, 801826c <read_submessage_list+0x38>)
 8018268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801826c:	080184d3 	.word	0x080184d3
 8018270:	08018243 	.word	0x08018243
 8018274:	080184c3 	.word	0x080184c3
 8018278:	08018461 	.word	0x08018461
 801827c:	08018457 	.word	0x08018457
 8018280:	08018243 	.word	0x08018243
 8018284:	08018243 	.word	0x08018243
 8018288:	080183ad 	.word	0x080183ad
 801828c:	0801833f 	.word	0x0801833f
 8018290:	080182ff 	.word	0x080182ff
 8018294:	08018243 	.word	0x08018243
 8018298:	08018243 	.word	0x08018243
 801829c:	08018243 	.word	0x08018243
 80182a0:	080182a5 	.word	0x080182a5
 80182a4:	a910      	add	r1, sp, #64	; 0x40
 80182a6:	4628      	mov	r0, r5
 80182a8:	f002 fe7c 	bl	801afa4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80182ac:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 80182b0:	f1b8 0f00 	cmp.w	r8, #0
 80182b4:	f000 811a 	beq.w	80184ec <read_submessage_list+0x2b8>
 80182b8:	f001 fc94 	bl	8019be4 <uxr_nanos>
 80182bc:	4602      	mov	r2, r0
 80182be:	460b      	mov	r3, r1
 80182c0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80182c4:	2100      	movs	r1, #0
 80182c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80182c8:	9006      	str	r0, [sp, #24]
 80182ca:	468c      	mov	ip, r1
 80182cc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80182ce:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80182d2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80182d4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80182d8:	468c      	mov	ip, r1
 80182da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80182dc:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80182e0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80182e4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 80182e8:	fbc7 0106 	smlal	r0, r1, r7, r6
 80182ec:	e9cd 0100 	strd	r0, r1, [sp]
 80182f0:	4620      	mov	r0, r4
 80182f2:	47c0      	blx	r8
 80182f4:	f04f 0301 	mov.w	r3, #1
 80182f8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80182fc:	e7a1      	b.n	8018242 <read_submessage_list+0xe>
 80182fe:	a910      	add	r1, sp, #64	; 0x40
 8018300:	4628      	mov	r0, r5
 8018302:	f002 fe3b 	bl	801af7c <uxr_deserialize_HEARTBEAT_Payload>
 8018306:	2100      	movs	r1, #0
 8018308:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801830c:	f001 faf8 	bl	8019900 <uxr_stream_id_from_raw>
 8018310:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018314:	900f      	str	r0, [sp, #60]	; 0x3c
 8018316:	f104 0008 	add.w	r0, r4, #8
 801831a:	4641      	mov	r1, r8
 801831c:	f001 fbde 	bl	8019adc <uxr_get_input_reliable_stream>
 8018320:	2800      	cmp	r0, #0
 8018322:	d08e      	beq.n	8018242 <read_submessage_list+0xe>
 8018324:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8018328:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801832c:	f006 f95e 	bl	801e5ec <uxr_process_heartbeat>
 8018330:	4642      	mov	r2, r8
 8018332:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8018336:	4620      	mov	r0, r4
 8018338:	f7ff fdf8 	bl	8017f2c <write_submessage_acknack.isra.0>
 801833c:	e781      	b.n	8018242 <read_submessage_list+0xe>
 801833e:	a910      	add	r1, sp, #64	; 0x40
 8018340:	4628      	mov	r0, r5
 8018342:	f002 fdf3 	bl	801af2c <uxr_deserialize_ACKNACK_Payload>
 8018346:	2100      	movs	r1, #0
 8018348:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801834c:	f001 fad8 	bl	8019900 <uxr_stream_id_from_raw>
 8018350:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8018354:	900d      	str	r0, [sp, #52]	; 0x34
 8018356:	f104 0008 	add.w	r0, r4, #8
 801835a:	f001 fba9 	bl	8019ab0 <uxr_get_output_reliable_stream>
 801835e:	4680      	mov	r8, r0
 8018360:	2800      	cmp	r0, #0
 8018362:	f43f af6e 	beq.w	8018242 <read_submessage_list+0xe>
 8018366:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801836a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801836e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8018372:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018376:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801837a:	b289      	uxth	r1, r1
 801837c:	f006 fc98 	bl	801ecb0 <uxr_process_acknack>
 8018380:	4640      	mov	r0, r8
 8018382:	f006 fc59 	bl	801ec38 <uxr_begin_output_nack_buffer_it>
 8018386:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 801838a:	e005      	b.n	8018398 <read_submessage_list+0x164>
 801838c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801838e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8018392:	e9d3 0900 	ldrd	r0, r9, [r3]
 8018396:	47c8      	blx	r9
 8018398:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 801839c:	aa0f      	add	r2, sp, #60	; 0x3c
 801839e:	4651      	mov	r1, sl
 80183a0:	4640      	mov	r0, r8
 80183a2:	f006 fc4b 	bl	801ec3c <uxr_next_reliable_nack_buffer_to_send>
 80183a6:	2800      	cmp	r0, #0
 80183a8:	d1f0      	bne.n	801838c <read_submessage_list+0x158>
 80183aa:	e74a      	b.n	8018242 <read_submessage_list+0xe>
 80183ac:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80183b0:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80183b4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 80183b8:	4628      	mov	r0, r5
 80183ba:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80183be:	4651      	mov	r1, sl
 80183c0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80183c4:	f1a8 0804 	sub.w	r8, r8, #4
 80183c8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80183cc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80183d0:	fa1f f888 	uxth.w	r8, r8
 80183d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80183d8:	f009 090e 	and.w	r9, r9, #14
 80183dc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80183e0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80183e4:	f002 fb04 	bl	801a9f0 <uxr_deserialize_BaseObjectRequest>
 80183e8:	4650      	mov	r0, sl
 80183ea:	a90f      	add	r1, sp, #60	; 0x3c
 80183ec:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80183f0:	f000 fdca 	bl	8018f88 <uxr_parse_base_object_request>
 80183f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80183f6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80183fa:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80183fe:	9110      	str	r1, [sp, #64]	; 0x40
 8018400:	f1bb 0f00 	cmp.w	fp, #0
 8018404:	d006      	beq.n	8018414 <read_submessage_list+0x1e0>
 8018406:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801840a:	4652      	mov	r2, sl
 801840c:	4620      	mov	r0, r4
 801840e:	9300      	str	r3, [sp, #0]
 8018410:	2300      	movs	r3, #0
 8018412:	47d8      	blx	fp
 8018414:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018416:	b182      	cbz	r2, 801843a <read_submessage_list+0x206>
 8018418:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801841a:	f04f 0c00 	mov.w	ip, #0
 801841e:	3902      	subs	r1, #2
 8018420:	e003      	b.n	801842a <read_submessage_list+0x1f6>
 8018422:	f10c 0c01 	add.w	ip, ip, #1
 8018426:	4594      	cmp	ip, r2
 8018428:	d007      	beq.n	801843a <read_submessage_list+0x206>
 801842a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801842e:	4553      	cmp	r3, sl
 8018430:	d1f7      	bne.n	8018422 <read_submessage_list+0x1ee>
 8018432:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8018434:	2200      	movs	r2, #0
 8018436:	f803 200c 	strb.w	r2, [r3, ip]
 801843a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801843e:	464b      	mov	r3, r9
 8018440:	4642      	mov	r2, r8
 8018442:	4620      	mov	r0, r4
 8018444:	9102      	str	r1, [sp, #8]
 8018446:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018448:	9101      	str	r1, [sp, #4]
 801844a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801844c:	9100      	str	r1, [sp, #0]
 801844e:	4629      	mov	r1, r5
 8018450:	f7ff fc4a 	bl	8017ce8 <read_submessage_format>
 8018454:	e6f5      	b.n	8018242 <read_submessage_list+0xe>
 8018456:	4629      	mov	r1, r5
 8018458:	4620      	mov	r0, r4
 801845a:	f7ff fea3 	bl	80181a4 <read_submessage_info>
 801845e:	e6f0      	b.n	8018242 <read_submessage_list+0xe>
 8018460:	2a00      	cmp	r2, #0
 8018462:	d03e      	beq.n	80184e2 <read_submessage_list+0x2ae>
 8018464:	a910      	add	r1, sp, #64	; 0x40
 8018466:	4628      	mov	r0, r5
 8018468:	f002 fcb8 	bl	801addc <uxr_deserialize_STATUS_Payload>
 801846c:	a90e      	add	r1, sp, #56	; 0x38
 801846e:	aa0d      	add	r2, sp, #52	; 0x34
 8018470:	a810      	add	r0, sp, #64	; 0x40
 8018472:	f000 fd89 	bl	8018f88 <uxr_parse_base_object_request>
 8018476:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018478:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 801847c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8018480:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8018484:	910f      	str	r1, [sp, #60]	; 0x3c
 8018486:	f1ba 0f00 	cmp.w	sl, #0
 801848a:	d006      	beq.n	801849a <read_submessage_list+0x266>
 801848c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018490:	4642      	mov	r2, r8
 8018492:	4620      	mov	r0, r4
 8018494:	9300      	str	r3, [sp, #0]
 8018496:	464b      	mov	r3, r9
 8018498:	47d0      	blx	sl
 801849a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801849c:	2a00      	cmp	r2, #0
 801849e:	f43f aed0 	beq.w	8018242 <read_submessage_list+0xe>
 80184a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80184a4:	2100      	movs	r1, #0
 80184a6:	3802      	subs	r0, #2
 80184a8:	e003      	b.n	80184b2 <read_submessage_list+0x27e>
 80184aa:	3101      	adds	r1, #1
 80184ac:	4291      	cmp	r1, r2
 80184ae:	f43f aec8 	beq.w	8018242 <read_submessage_list+0xe>
 80184b2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80184b6:	4543      	cmp	r3, r8
 80184b8:	d1f7      	bne.n	80184aa <read_submessage_list+0x276>
 80184ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80184bc:	f803 9001 	strb.w	r9, [r3, r1]
 80184c0:	e6bf      	b.n	8018242 <read_submessage_list+0xe>
 80184c2:	2a00      	cmp	r2, #0
 80184c4:	f47f aebd 	bne.w	8018242 <read_submessage_list+0xe>
 80184c8:	4629      	mov	r1, r5
 80184ca:	4620      	mov	r0, r4
 80184cc:	f000 fca0 	bl	8018e10 <uxr_read_create_session_status>
 80184d0:	e6b7      	b.n	8018242 <read_submessage_list+0xe>
 80184d2:	4629      	mov	r1, r5
 80184d4:	4620      	mov	r0, r4
 80184d6:	f7ff fcf3 	bl	8017ec0 <read_submessage_get_info>
 80184da:	e6b2      	b.n	8018242 <read_submessage_list+0xe>
 80184dc:	b017      	add	sp, #92	; 0x5c
 80184de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184e2:	4629      	mov	r1, r5
 80184e4:	4620      	mov	r0, r4
 80184e6:	f000 fca1 	bl	8018e2c <uxr_read_delete_session_status>
 80184ea:	e6aa      	b.n	8018242 <read_submessage_list+0xe>
 80184ec:	f001 fb7a 	bl	8019be4 <uxr_nanos>
 80184f0:	4642      	mov	r2, r8
 80184f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80184f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184f6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80184fa:	1818      	adds	r0, r3, r0
 80184fc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80184fe:	eb42 0101 	adc.w	r1, r2, r1
 8018502:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018504:	4642      	mov	r2, r8
 8018506:	fbc7 3206 	smlal	r3, r2, r7, r6
 801850a:	469c      	mov	ip, r3
 801850c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8018510:	fbc3 7806 	smlal	r7, r8, r3, r6
 8018514:	4643      	mov	r3, r8
 8018516:	eb1c 0c07 	adds.w	ip, ip, r7
 801851a:	eb42 0203 	adc.w	r2, r2, r3
 801851e:	ebb0 030c 	subs.w	r3, r0, ip
 8018522:	eb61 0202 	sbc.w	r2, r1, r2
 8018526:	2a00      	cmp	r2, #0
 8018528:	db08      	blt.n	801853c <read_submessage_list+0x308>
 801852a:	085b      	lsrs	r3, r3, #1
 801852c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8018530:	1052      	asrs	r2, r2, #1
 8018532:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8018536:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 801853a:	e6db      	b.n	80182f4 <read_submessage_list+0xc0>
 801853c:	3301      	adds	r3, #1
 801853e:	f142 0200 	adc.w	r2, r2, #0
 8018542:	e7f2      	b.n	801852a <read_submessage_list+0x2f6>
 8018544:	3b9aca00 	.word	0x3b9aca00

08018548 <listen_message_reliably>:
 8018548:	1e0b      	subs	r3, r1, #0
 801854a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801854e:	bfb8      	it	lt
 8018550:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8018554:	b09d      	sub	sp, #116	; 0x74
 8018556:	4680      	mov	r8, r0
 8018558:	9305      	str	r3, [sp, #20]
 801855a:	f001 fb27 	bl	8019bac <uxr_millis>
 801855e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8018562:	4681      	mov	r9, r0
 8018564:	2a00      	cmp	r2, #0
 8018566:	f000 809a 	beq.w	801869e <listen_message_reliably+0x156>
 801856a:	2600      	movs	r6, #0
 801856c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018570:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8018574:	460f      	mov	r7, r1
 8018576:	4630      	mov	r0, r6
 8018578:	9303      	str	r3, [sp, #12]
 801857a:	e00e      	b.n	801859a <listen_message_reliably+0x52>
 801857c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801857e:	3601      	adds	r6, #1
 8018580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018582:	455a      	cmp	r2, fp
 8018584:	9903      	ldr	r1, [sp, #12]
 8018586:	b2f0      	uxtb	r0, r6
 8018588:	eb73 0101 	sbcs.w	r1, r3, r1
 801858c:	da01      	bge.n	8018592 <listen_message_reliably+0x4a>
 801858e:	4693      	mov	fp, r2
 8018590:	9303      	str	r3, [sp, #12]
 8018592:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8018596:	4283      	cmp	r3, r0
 8018598:	d95f      	bls.n	801865a <listen_message_reliably+0x112>
 801859a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801859e:	2102      	movs	r1, #2
 80185a0:	2201      	movs	r2, #1
 80185a2:	00e4      	lsls	r4, r4, #3
 80185a4:	f001 f97e 	bl	80198a4 <uxr_stream_id>
 80185a8:	4601      	mov	r1, r0
 80185aa:	f104 0520 	add.w	r5, r4, #32
 80185ae:	463b      	mov	r3, r7
 80185b0:	464a      	mov	r2, r9
 80185b2:	9109      	str	r1, [sp, #36]	; 0x24
 80185b4:	4445      	add	r5, r8
 80185b6:	4628      	mov	r0, r5
 80185b8:	f006 fb12 	bl	801ebe0 <uxr_update_output_stream_heartbeat_timestamp>
 80185bc:	eb08 0304 	add.w	r3, r8, r4
 80185c0:	2800      	cmp	r0, #0
 80185c2:	d0db      	beq.n	801857c <listen_message_reliably+0x34>
 80185c4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80185c8:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80185cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80185d0:	4640      	mov	r0, r8
 80185d2:	3501      	adds	r5, #1
 80185d4:	4444      	add	r4, r8
 80185d6:	9304      	str	r3, [sp, #16]
 80185d8:	f000 fcae 	bl	8018f38 <uxr_session_header_offset>
 80185dc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80185e0:	2300      	movs	r3, #0
 80185e2:	2211      	movs	r2, #17
 80185e4:	a90c      	add	r1, sp, #48	; 0x30
 80185e6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80185ea:	9000      	str	r0, [sp, #0]
 80185ec:	4650      	mov	r0, sl
 80185ee:	3601      	adds	r6, #1
 80185f0:	f7fa fd18 	bl	8013024 <ucdr_init_buffer_origin_offset>
 80185f4:	2300      	movs	r3, #0
 80185f6:	2205      	movs	r2, #5
 80185f8:	210b      	movs	r1, #11
 80185fa:	4650      	mov	r0, sl
 80185fc:	f001 fa90 	bl	8019b20 <uxr_buffer_submessage_header>
 8018600:	2101      	movs	r1, #1
 8018602:	8968      	ldrh	r0, [r5, #10]
 8018604:	f006 fbb0 	bl	801ed68 <uxr_seq_num_add>
 8018608:	892b      	ldrh	r3, [r5, #8]
 801860a:	4602      	mov	r2, r0
 801860c:	a90a      	add	r1, sp, #40	; 0x28
 801860e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018612:	4650      	mov	r0, sl
 8018614:	9b04      	ldr	r3, [sp, #16]
 8018616:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801861a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801861e:	f002 fc99 	bl	801af54 <uxr_serialize_HEARTBEAT_Payload>
 8018622:	2200      	movs	r2, #0
 8018624:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018626:	4640      	mov	r0, r8
 8018628:	4611      	mov	r1, r2
 801862a:	f000 fc31 	bl	8018e90 <uxr_stamp_session_header>
 801862e:	4650      	mov	r0, sl
 8018630:	f7fa fd38 	bl	80130a4 <ucdr_buffer_length>
 8018634:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8018638:	4602      	mov	r2, r0
 801863a:	a90c      	add	r1, sp, #48	; 0x30
 801863c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018640:	47a8      	blx	r5
 8018642:	9903      	ldr	r1, [sp, #12]
 8018644:	b2f0      	uxtb	r0, r6
 8018646:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801864a:	455a      	cmp	r2, fp
 801864c:	eb73 0101 	sbcs.w	r1, r3, r1
 8018650:	db9d      	blt.n	801858e <listen_message_reliably+0x46>
 8018652:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8018656:	4283      	cmp	r3, r0
 8018658:	d89f      	bhi.n	801859a <listen_message_reliably+0x52>
 801865a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801865e:	9a03      	ldr	r2, [sp, #12]
 8018660:	429a      	cmp	r2, r3
 8018662:	bf08      	it	eq
 8018664:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8018668:	d019      	beq.n	801869e <listen_message_reliably+0x156>
 801866a:	ebab 0309 	sub.w	r3, fp, r9
 801866e:	2b00      	cmp	r3, #0
 8018670:	9d05      	ldr	r5, [sp, #20]
 8018672:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8018676:	aa08      	add	r2, sp, #32
 8018678:	bf08      	it	eq
 801867a:	2301      	moveq	r3, #1
 801867c:	a907      	add	r1, sp, #28
 801867e:	6884      	ldr	r4, [r0, #8]
 8018680:	429d      	cmp	r5, r3
 8018682:	6800      	ldr	r0, [r0, #0]
 8018684:	bfa8      	it	ge
 8018686:	461d      	movge	r5, r3
 8018688:	462b      	mov	r3, r5
 801868a:	47a0      	blx	r4
 801868c:	b948      	cbnz	r0, 80186a2 <listen_message_reliably+0x15a>
 801868e:	9b05      	ldr	r3, [sp, #20]
 8018690:	1b5b      	subs	r3, r3, r5
 8018692:	2b00      	cmp	r3, #0
 8018694:	9305      	str	r3, [sp, #20]
 8018696:	f73f af60 	bgt.w	801855a <listen_message_reliably+0x12>
 801869a:	4604      	mov	r4, r0
 801869c:	e012      	b.n	80186c4 <listen_message_reliably+0x17c>
 801869e:	9b05      	ldr	r3, [sp, #20]
 80186a0:	e7e5      	b.n	801866e <listen_message_reliably+0x126>
 80186a2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80186a6:	4604      	mov	r4, r0
 80186a8:	2500      	movs	r5, #0
 80186aa:	a80c      	add	r0, sp, #48	; 0x30
 80186ac:	f7fa fccc 	bl	8013048 <ucdr_init_buffer>
 80186b0:	f10d 031a 	add.w	r3, sp, #26
 80186b4:	aa06      	add	r2, sp, #24
 80186b6:	a90c      	add	r1, sp, #48	; 0x30
 80186b8:	4640      	mov	r0, r8
 80186ba:	f88d 5018 	strb.w	r5, [sp, #24]
 80186be:	f000 fbfb 	bl	8018eb8 <uxr_read_session_header>
 80186c2:	b918      	cbnz	r0, 80186cc <listen_message_reliably+0x184>
 80186c4:	4620      	mov	r0, r4
 80186c6:	b01d      	add	sp, #116	; 0x74
 80186c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186cc:	4629      	mov	r1, r5
 80186ce:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80186d2:	f001 f915 	bl	8019900 <uxr_stream_id_from_raw>
 80186d6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80186da:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80186de:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80186e2:	2e01      	cmp	r6, #1
 80186e4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80186e8:	d04b      	beq.n	8018782 <listen_message_reliably+0x23a>
 80186ea:	2e02      	cmp	r6, #2
 80186ec:	d00f      	beq.n	801870e <listen_message_reliably+0x1c6>
 80186ee:	2e00      	cmp	r6, #0
 80186f0:	d1e8      	bne.n	80186c4 <listen_message_reliably+0x17c>
 80186f2:	4631      	mov	r1, r6
 80186f4:	4630      	mov	r0, r6
 80186f6:	f001 f903 	bl	8019900 <uxr_stream_id_from_raw>
 80186fa:	4602      	mov	r2, r0
 80186fc:	a90c      	add	r1, sp, #48	; 0x30
 80186fe:	4640      	mov	r0, r8
 8018700:	920a      	str	r2, [sp, #40]	; 0x28
 8018702:	f7ff fd97 	bl	8018234 <read_submessage_list>
 8018706:	4620      	mov	r0, r4
 8018708:	b01d      	add	sp, #116	; 0x74
 801870a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801870e:	4629      	mov	r1, r5
 8018710:	f108 0008 	add.w	r0, r8, #8
 8018714:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8018718:	f001 f9e0 	bl	8019adc <uxr_get_input_reliable_stream>
 801871c:	4607      	mov	r7, r0
 801871e:	b338      	cbz	r0, 8018770 <listen_message_reliably+0x228>
 8018720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018722:	a80c      	add	r0, sp, #48	; 0x30
 8018724:	9203      	str	r2, [sp, #12]
 8018726:	f7fa fcc1 	bl	80130ac <ucdr_buffer_remaining>
 801872a:	4603      	mov	r3, r0
 801872c:	f10d 0019 	add.w	r0, sp, #25
 8018730:	9a03      	ldr	r2, [sp, #12]
 8018732:	4651      	mov	r1, sl
 8018734:	9000      	str	r0, [sp, #0]
 8018736:	4638      	mov	r0, r7
 8018738:	f005 fe5c 	bl	801e3f4 <uxr_receive_reliable_message>
 801873c:	b1c0      	cbz	r0, 8018770 <listen_message_reliably+0x228>
 801873e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018742:	b393      	cbz	r3, 80187aa <listen_message_reliably+0x262>
 8018744:	ae14      	add	r6, sp, #80	; 0x50
 8018746:	f04f 0a02 	mov.w	sl, #2
 801874a:	e00a      	b.n	8018762 <listen_message_reliably+0x21a>
 801874c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8018750:	4631      	mov	r1, r6
 8018752:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8018756:	4640      	mov	r0, r8
 8018758:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801875c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801875e:	f7ff fd69 	bl	8018234 <read_submessage_list>
 8018762:	2204      	movs	r2, #4
 8018764:	4631      	mov	r1, r6
 8018766:	4638      	mov	r0, r7
 8018768:	f005 fec6 	bl	801e4f8 <uxr_next_input_reliable_buffer_available>
 801876c:	2800      	cmp	r0, #0
 801876e:	d1ed      	bne.n	801874c <listen_message_reliably+0x204>
 8018770:	4640      	mov	r0, r8
 8018772:	462a      	mov	r2, r5
 8018774:	4649      	mov	r1, r9
 8018776:	f7ff fbd9 	bl	8017f2c <write_submessage_acknack.isra.0>
 801877a:	4620      	mov	r0, r4
 801877c:	b01d      	add	sp, #116	; 0x74
 801877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018782:	4629      	mov	r1, r5
 8018784:	f108 0008 	add.w	r0, r8, #8
 8018788:	f001 f99e 	bl	8019ac8 <uxr_get_input_best_effort_stream>
 801878c:	2800      	cmp	r0, #0
 801878e:	d099      	beq.n	80186c4 <listen_message_reliably+0x17c>
 8018790:	4651      	mov	r1, sl
 8018792:	f005 fda5 	bl	801e2e0 <uxr_receive_best_effort_message>
 8018796:	2800      	cmp	r0, #0
 8018798:	d094      	beq.n	80186c4 <listen_message_reliably+0x17c>
 801879a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801879e:	a90c      	add	r1, sp, #48	; 0x30
 80187a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187a2:	4640      	mov	r0, r8
 80187a4:	f7ff fd46 	bl	8018234 <read_submessage_list>
 80187a8:	e78c      	b.n	80186c4 <listen_message_reliably+0x17c>
 80187aa:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80187ae:	a90c      	add	r1, sp, #48	; 0x30
 80187b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187b2:	4640      	mov	r0, r8
 80187b4:	f7ff fd3e 	bl	8018234 <read_submessage_list>
 80187b8:	e7c4      	b.n	8018744 <listen_message_reliably+0x1fc>
 80187ba:	bf00      	nop

080187bc <uxr_run_session_timeout>:
 80187bc:	b570      	push	{r4, r5, r6, lr}
 80187be:	4604      	mov	r4, r0
 80187c0:	460d      	mov	r5, r1
 80187c2:	f001 f9f3 	bl	8019bac <uxr_millis>
 80187c6:	4606      	mov	r6, r0
 80187c8:	4620      	mov	r0, r4
 80187ca:	f7ff fc77 	bl	80180bc <uxr_flash_output_streams>
 80187ce:	4629      	mov	r1, r5
 80187d0:	4620      	mov	r0, r4
 80187d2:	f7ff feb9 	bl	8018548 <listen_message_reliably>
 80187d6:	f001 f9e9 	bl	8019bac <uxr_millis>
 80187da:	1b83      	subs	r3, r0, r6
 80187dc:	1ae9      	subs	r1, r5, r3
 80187de:	2900      	cmp	r1, #0
 80187e0:	dcf6      	bgt.n	80187d0 <uxr_run_session_timeout+0x14>
 80187e2:	f104 0008 	add.w	r0, r4, #8
 80187e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187ea:	f001 b983 	b.w	8019af4 <uxr_output_streams_confirmed>
 80187ee:	bf00      	nop

080187f0 <uxr_run_session_until_data>:
 80187f0:	b570      	push	{r4, r5, r6, lr}
 80187f2:	4604      	mov	r4, r0
 80187f4:	460d      	mov	r5, r1
 80187f6:	f001 f9d9 	bl	8019bac <uxr_millis>
 80187fa:	4606      	mov	r6, r0
 80187fc:	4620      	mov	r0, r4
 80187fe:	f7ff fc5d 	bl	80180bc <uxr_flash_output_streams>
 8018802:	2300      	movs	r3, #0
 8018804:	4629      	mov	r1, r5
 8018806:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801880a:	e005      	b.n	8018818 <uxr_run_session_until_data+0x28>
 801880c:	f001 f9ce 	bl	8019bac <uxr_millis>
 8018810:	1b83      	subs	r3, r0, r6
 8018812:	1ae9      	subs	r1, r5, r3
 8018814:	2900      	cmp	r1, #0
 8018816:	dd07      	ble.n	8018828 <uxr_run_session_until_data+0x38>
 8018818:	4620      	mov	r0, r4
 801881a:	f7ff fe95 	bl	8018548 <listen_message_reliably>
 801881e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018822:	2800      	cmp	r0, #0
 8018824:	d0f2      	beq.n	801880c <uxr_run_session_until_data+0x1c>
 8018826:	bd70      	pop	{r4, r5, r6, pc}
 8018828:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801882c:	bd70      	pop	{r4, r5, r6, pc}
 801882e:	bf00      	nop

08018830 <uxr_run_session_until_confirm_delivery>:
 8018830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018834:	4606      	mov	r6, r0
 8018836:	460d      	mov	r5, r1
 8018838:	f001 f9b8 	bl	8019bac <uxr_millis>
 801883c:	4607      	mov	r7, r0
 801883e:	4630      	mov	r0, r6
 8018840:	f106 0808 	add.w	r8, r6, #8
 8018844:	f7ff fc3a 	bl	80180bc <uxr_flash_output_streams>
 8018848:	2d00      	cmp	r5, #0
 801884a:	db10      	blt.n	801886e <uxr_run_session_until_confirm_delivery+0x3e>
 801884c:	462c      	mov	r4, r5
 801884e:	e006      	b.n	801885e <uxr_run_session_until_confirm_delivery+0x2e>
 8018850:	f7ff fe7a 	bl	8018548 <listen_message_reliably>
 8018854:	f001 f9aa 	bl	8019bac <uxr_millis>
 8018858:	1bc3      	subs	r3, r0, r7
 801885a:	1aec      	subs	r4, r5, r3
 801885c:	d407      	bmi.n	801886e <uxr_run_session_until_confirm_delivery+0x3e>
 801885e:	4640      	mov	r0, r8
 8018860:	f001 f948 	bl	8019af4 <uxr_output_streams_confirmed>
 8018864:	4603      	mov	r3, r0
 8018866:	4621      	mov	r1, r4
 8018868:	4630      	mov	r0, r6
 801886a:	2b00      	cmp	r3, #0
 801886c:	d0f0      	beq.n	8018850 <uxr_run_session_until_confirm_delivery+0x20>
 801886e:	4640      	mov	r0, r8
 8018870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018874:	f001 b93e 	b.w	8019af4 <uxr_output_streams_confirmed>

08018878 <uxr_run_session_until_all_status>:
 8018878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801887c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018880:	4606      	mov	r6, r0
 8018882:	4688      	mov	r8, r1
 8018884:	4692      	mov	sl, r2
 8018886:	461f      	mov	r7, r3
 8018888:	f7ff fc18 	bl	80180bc <uxr_flash_output_streams>
 801888c:	f1bb 0f00 	cmp.w	fp, #0
 8018890:	d004      	beq.n	801889c <uxr_run_session_until_all_status+0x24>
 8018892:	465a      	mov	r2, fp
 8018894:	21ff      	movs	r1, #255	; 0xff
 8018896:	4638      	mov	r0, r7
 8018898:	f008 f940 	bl	8020b1c <memset>
 801889c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80188a0:	1e7d      	subs	r5, r7, #1
 80188a2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 80188a6:	f001 f981 	bl	8019bac <uxr_millis>
 80188aa:	4641      	mov	r1, r8
 80188ac:	4681      	mov	r9, r0
 80188ae:	4630      	mov	r0, r6
 80188b0:	f7ff fe4a 	bl	8018548 <listen_message_reliably>
 80188b4:	f001 f97a 	bl	8019bac <uxr_millis>
 80188b8:	eba0 0009 	sub.w	r0, r0, r9
 80188bc:	eba8 0100 	sub.w	r1, r8, r0
 80188c0:	f1bb 0f00 	cmp.w	fp, #0
 80188c4:	d029      	beq.n	801891a <uxr_run_session_until_all_status+0xa2>
 80188c6:	46ae      	mov	lr, r5
 80188c8:	f04f 0c00 	mov.w	ip, #0
 80188cc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80188d0:	2cff      	cmp	r4, #255	; 0xff
 80188d2:	d015      	beq.n	8018900 <uxr_run_session_until_all_status+0x88>
 80188d4:	f10c 0c01 	add.w	ip, ip, #1
 80188d8:	45e3      	cmp	fp, ip
 80188da:	d8f7      	bhi.n	80188cc <uxr_run_session_until_all_status+0x54>
 80188dc:	2300      	movs	r3, #0
 80188de:	67f3      	str	r3, [r6, #124]	; 0x7c
 80188e0:	e000      	b.n	80188e4 <uxr_run_session_until_all_status+0x6c>
 80188e2:	b158      	cbz	r0, 80188fc <uxr_run_session_until_all_status+0x84>
 80188e4:	462b      	mov	r3, r5
 80188e6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80188ea:	3302      	adds	r3, #2
 80188ec:	2801      	cmp	r0, #1
 80188ee:	eba3 0307 	sub.w	r3, r3, r7
 80188f2:	bf8c      	ite	hi
 80188f4:	2000      	movhi	r0, #0
 80188f6:	2001      	movls	r0, #1
 80188f8:	459b      	cmp	fp, r3
 80188fa:	d8f2      	bhi.n	80188e2 <uxr_run_session_until_all_status+0x6a>
 80188fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018900:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018904:	f10c 0c01 	add.w	ip, ip, #1
 8018908:	45dc      	cmp	ip, fp
 801890a:	d201      	bcs.n	8018910 <uxr_run_session_until_all_status+0x98>
 801890c:	2b00      	cmp	r3, #0
 801890e:	d0dd      	beq.n	80188cc <uxr_run_session_until_all_status+0x54>
 8018910:	2900      	cmp	r1, #0
 8018912:	dde3      	ble.n	80188dc <uxr_run_session_until_all_status+0x64>
 8018914:	2b00      	cmp	r3, #0
 8018916:	d1ca      	bne.n	80188ae <uxr_run_session_until_all_status+0x36>
 8018918:	e7e0      	b.n	80188dc <uxr_run_session_until_all_status+0x64>
 801891a:	2001      	movs	r0, #1
 801891c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018924 <wait_session_status>:
 8018924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018928:	4604      	mov	r4, r0
 801892a:	b09d      	sub	sp, #116	; 0x74
 801892c:	20ff      	movs	r0, #255	; 0xff
 801892e:	9303      	str	r3, [sp, #12]
 8018930:	7160      	strb	r0, [r4, #5]
 8018932:	2b00      	cmp	r3, #0
 8018934:	f000 80b6 	beq.w	8018aa4 <wait_session_status+0x180>
 8018938:	4689      	mov	r9, r1
 801893a:	4692      	mov	sl, r2
 801893c:	f04f 0b00 	mov.w	fp, #0
 8018940:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018942:	4652      	mov	r2, sl
 8018944:	4649      	mov	r1, r9
 8018946:	e9d3 0500 	ldrd	r0, r5, [r3]
 801894a:	47a8      	blx	r5
 801894c:	f001 f92e 	bl	8019bac <uxr_millis>
 8018950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018954:	4605      	mov	r5, r0
 8018956:	e009      	b.n	801896c <wait_session_status+0x48>
 8018958:	f001 f928 	bl	8019bac <uxr_millis>
 801895c:	1b40      	subs	r0, r0, r5
 801895e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018962:	2b00      	cmp	r3, #0
 8018964:	dd40      	ble.n	80189e8 <wait_session_status+0xc4>
 8018966:	7960      	ldrb	r0, [r4, #5]
 8018968:	28ff      	cmp	r0, #255	; 0xff
 801896a:	d145      	bne.n	80189f8 <wait_session_status+0xd4>
 801896c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801896e:	a908      	add	r1, sp, #32
 8018970:	6896      	ldr	r6, [r2, #8]
 8018972:	6810      	ldr	r0, [r2, #0]
 8018974:	aa09      	add	r2, sp, #36	; 0x24
 8018976:	47b0      	blx	r6
 8018978:	2800      	cmp	r0, #0
 801897a:	d0ed      	beq.n	8018958 <wait_session_status+0x34>
 801897c:	a80c      	add	r0, sp, #48	; 0x30
 801897e:	2600      	movs	r6, #0
 8018980:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018984:	f7fa fb60 	bl	8013048 <ucdr_init_buffer>
 8018988:	f10d 031e 	add.w	r3, sp, #30
 801898c:	aa07      	add	r2, sp, #28
 801898e:	a90c      	add	r1, sp, #48	; 0x30
 8018990:	4620      	mov	r0, r4
 8018992:	f88d 601c 	strb.w	r6, [sp, #28]
 8018996:	f000 fa8f 	bl	8018eb8 <uxr_read_session_header>
 801899a:	2800      	cmp	r0, #0
 801899c:	d0dc      	beq.n	8018958 <wait_session_status+0x34>
 801899e:	4631      	mov	r1, r6
 80189a0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80189a4:	f000 ffac 	bl	8019900 <uxr_stream_id_from_raw>
 80189a8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80189ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80189b0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80189b4:	2f01      	cmp	r7, #1
 80189b6:	9302      	str	r3, [sp, #8]
 80189b8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80189bc:	d05c      	beq.n	8018a78 <wait_session_status+0x154>
 80189be:	2f02      	cmp	r7, #2
 80189c0:	d020      	beq.n	8018a04 <wait_session_status+0xe0>
 80189c2:	2f00      	cmp	r7, #0
 80189c4:	d1c8      	bne.n	8018958 <wait_session_status+0x34>
 80189c6:	4639      	mov	r1, r7
 80189c8:	4638      	mov	r0, r7
 80189ca:	f000 ff99 	bl	8019900 <uxr_stream_id_from_raw>
 80189ce:	a90c      	add	r1, sp, #48	; 0x30
 80189d0:	4602      	mov	r2, r0
 80189d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80189d4:	4620      	mov	r0, r4
 80189d6:	f7ff fc2d 	bl	8018234 <read_submessage_list>
 80189da:	f001 f8e7 	bl	8019bac <uxr_millis>
 80189de:	1b40      	subs	r0, r0, r5
 80189e0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	dcbe      	bgt.n	8018966 <wait_session_status+0x42>
 80189e8:	f10b 0b01 	add.w	fp, fp, #1
 80189ec:	9b03      	ldr	r3, [sp, #12]
 80189ee:	7960      	ldrb	r0, [r4, #5]
 80189f0:	455b      	cmp	r3, fp
 80189f2:	d001      	beq.n	80189f8 <wait_session_status+0xd4>
 80189f4:	28ff      	cmp	r0, #255	; 0xff
 80189f6:	d0a3      	beq.n	8018940 <wait_session_status+0x1c>
 80189f8:	38ff      	subs	r0, #255	; 0xff
 80189fa:	bf18      	it	ne
 80189fc:	2001      	movne	r0, #1
 80189fe:	b01d      	add	sp, #116	; 0x74
 8018a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a04:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8018a08:	4631      	mov	r1, r6
 8018a0a:	f104 0008 	add.w	r0, r4, #8
 8018a0e:	9304      	str	r3, [sp, #16]
 8018a10:	f001 f864 	bl	8019adc <uxr_get_input_reliable_stream>
 8018a14:	4680      	mov	r8, r0
 8018a16:	b348      	cbz	r0, 8018a6c <wait_session_status+0x148>
 8018a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a1a:	a80c      	add	r0, sp, #48	; 0x30
 8018a1c:	9205      	str	r2, [sp, #20]
 8018a1e:	f7fa fb45 	bl	80130ac <ucdr_buffer_remaining>
 8018a22:	4603      	mov	r3, r0
 8018a24:	f10d 001d 	add.w	r0, sp, #29
 8018a28:	9a05      	ldr	r2, [sp, #20]
 8018a2a:	9000      	str	r0, [sp, #0]
 8018a2c:	4640      	mov	r0, r8
 8018a2e:	9902      	ldr	r1, [sp, #8]
 8018a30:	f005 fce0 	bl	801e3f4 <uxr_receive_reliable_message>
 8018a34:	b1d0      	cbz	r0, 8018a6c <wait_session_status+0x148>
 8018a36:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d03a      	beq.n	8018ab4 <wait_session_status+0x190>
 8018a3e:	9f04      	ldr	r7, [sp, #16]
 8018a40:	e00a      	b.n	8018a58 <wait_session_status+0x134>
 8018a42:	f04f 0302 	mov.w	r3, #2
 8018a46:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8018a4a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8018a4e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8018a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a54:	f7ff fbee 	bl	8018234 <read_submessage_list>
 8018a58:	a914      	add	r1, sp, #80	; 0x50
 8018a5a:	2204      	movs	r2, #4
 8018a5c:	4640      	mov	r0, r8
 8018a5e:	f005 fd4b 	bl	801e4f8 <uxr_next_input_reliable_buffer_available>
 8018a62:	4603      	mov	r3, r0
 8018a64:	a914      	add	r1, sp, #80	; 0x50
 8018a66:	4620      	mov	r0, r4
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d1ea      	bne.n	8018a42 <wait_session_status+0x11e>
 8018a6c:	4632      	mov	r2, r6
 8018a6e:	9904      	ldr	r1, [sp, #16]
 8018a70:	4620      	mov	r0, r4
 8018a72:	f7ff fa5b 	bl	8017f2c <write_submessage_acknack.isra.0>
 8018a76:	e76f      	b.n	8018958 <wait_session_status+0x34>
 8018a78:	4631      	mov	r1, r6
 8018a7a:	f104 0008 	add.w	r0, r4, #8
 8018a7e:	f001 f823 	bl	8019ac8 <uxr_get_input_best_effort_stream>
 8018a82:	2800      	cmp	r0, #0
 8018a84:	f43f af68 	beq.w	8018958 <wait_session_status+0x34>
 8018a88:	9902      	ldr	r1, [sp, #8]
 8018a8a:	f005 fc29 	bl	801e2e0 <uxr_receive_best_effort_message>
 8018a8e:	2800      	cmp	r0, #0
 8018a90:	f43f af62 	beq.w	8018958 <wait_session_status+0x34>
 8018a94:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018a98:	a90c      	add	r1, sp, #48	; 0x30
 8018a9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	f7ff fbc9 	bl	8018234 <read_submessage_list>
 8018aa2:	e759      	b.n	8018958 <wait_session_status+0x34>
 8018aa4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018aa6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8018aaa:	47a0      	blx	r4
 8018aac:	2001      	movs	r0, #1
 8018aae:	b01d      	add	sp, #116	; 0x74
 8018ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8018ab8:	a90c      	add	r1, sp, #48	; 0x30
 8018aba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018abc:	4620      	mov	r0, r4
 8018abe:	f7ff fbb9 	bl	8018234 <read_submessage_list>
 8018ac2:	e7bc      	b.n	8018a3e <wait_session_status+0x11a>

08018ac4 <uxr_delete_session_retries>:
 8018ac4:	b530      	push	{r4, r5, lr}
 8018ac6:	b08f      	sub	sp, #60	; 0x3c
 8018ac8:	4604      	mov	r4, r0
 8018aca:	460d      	mov	r5, r1
 8018acc:	f000 fa34 	bl	8018f38 <uxr_session_header_offset>
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	2210      	movs	r2, #16
 8018ad4:	a902      	add	r1, sp, #8
 8018ad6:	9000      	str	r0, [sp, #0]
 8018ad8:	a806      	add	r0, sp, #24
 8018ada:	f7fa faa3 	bl	8013024 <ucdr_init_buffer_origin_offset>
 8018ade:	a906      	add	r1, sp, #24
 8018ae0:	4620      	mov	r0, r4
 8018ae2:	f000 f979 	bl	8018dd8 <uxr_buffer_delete_session>
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	9b06      	ldr	r3, [sp, #24]
 8018aea:	4620      	mov	r0, r4
 8018aec:	4611      	mov	r1, r2
 8018aee:	f000 f9cf 	bl	8018e90 <uxr_stamp_session_header>
 8018af2:	a806      	add	r0, sp, #24
 8018af4:	f7fa fad6 	bl	80130a4 <ucdr_buffer_length>
 8018af8:	462b      	mov	r3, r5
 8018afa:	4602      	mov	r2, r0
 8018afc:	a902      	add	r1, sp, #8
 8018afe:	4620      	mov	r0, r4
 8018b00:	f7ff ff10 	bl	8018924 <wait_session_status>
 8018b04:	b118      	cbz	r0, 8018b0e <uxr_delete_session_retries+0x4a>
 8018b06:	7960      	ldrb	r0, [r4, #5]
 8018b08:	fab0 f080 	clz	r0, r0
 8018b0c:	0940      	lsrs	r0, r0, #5
 8018b0e:	b00f      	add	sp, #60	; 0x3c
 8018b10:	bd30      	pop	{r4, r5, pc}
 8018b12:	bf00      	nop

08018b14 <uxr_create_session>:
 8018b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b18:	f100 0b08 	add.w	fp, r0, #8
 8018b1c:	4604      	mov	r4, r0
 8018b1e:	b0ab      	sub	sp, #172	; 0xac
 8018b20:	4658      	mov	r0, fp
 8018b22:	465e      	mov	r6, fp
 8018b24:	f000 ff22 	bl	801996c <uxr_reset_stream_storage>
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f000 fa05 	bl	8018f38 <uxr_session_header_offset>
 8018b2e:	2300      	movs	r3, #0
 8018b30:	221c      	movs	r2, #28
 8018b32:	a90b      	add	r1, sp, #44	; 0x2c
 8018b34:	9000      	str	r0, [sp, #0]
 8018b36:	a812      	add	r0, sp, #72	; 0x48
 8018b38:	f7fa fa74 	bl	8013024 <ucdr_init_buffer_origin_offset>
 8018b3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018b3e:	a912      	add	r1, sp, #72	; 0x48
 8018b40:	4620      	mov	r0, r4
 8018b42:	8a1a      	ldrh	r2, [r3, #16]
 8018b44:	3a04      	subs	r2, #4
 8018b46:	b292      	uxth	r2, r2
 8018b48:	f000 f91c 	bl	8018d84 <uxr_buffer_create_session>
 8018b4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f000 f98a 	bl	8018e68 <uxr_stamp_create_session_header>
 8018b54:	a812      	add	r0, sp, #72	; 0x48
 8018b56:	f7fa faa5 	bl	80130a4 <ucdr_buffer_length>
 8018b5a:	23ff      	movs	r3, #255	; 0xff
 8018b5c:	4681      	mov	r9, r0
 8018b5e:	7163      	strb	r3, [r4, #5]
 8018b60:	230a      	movs	r3, #10
 8018b62:	9303      	str	r3, [sp, #12]
 8018b64:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018b66:	464a      	mov	r2, r9
 8018b68:	a90b      	add	r1, sp, #44	; 0x2c
 8018b6a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018b6e:	47a8      	blx	r5
 8018b70:	f001 f81c 	bl	8019bac <uxr_millis>
 8018b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018b78:	4605      	mov	r5, r0
 8018b7a:	e009      	b.n	8018b90 <uxr_create_session+0x7c>
 8018b7c:	f001 f816 	bl	8019bac <uxr_millis>
 8018b80:	1b40      	subs	r0, r0, r5
 8018b82:	7962      	ldrb	r2, [r4, #5]
 8018b84:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	dd38      	ble.n	8018bfe <uxr_create_session+0xea>
 8018b8c:	2aff      	cmp	r2, #255	; 0xff
 8018b8e:	d13c      	bne.n	8018c0a <uxr_create_session+0xf6>
 8018b90:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018b92:	a907      	add	r1, sp, #28
 8018b94:	6897      	ldr	r7, [r2, #8]
 8018b96:	6810      	ldr	r0, [r2, #0]
 8018b98:	aa08      	add	r2, sp, #32
 8018b9a:	47b8      	blx	r7
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	d0ed      	beq.n	8018b7c <uxr_create_session+0x68>
 8018ba0:	a81a      	add	r0, sp, #104	; 0x68
 8018ba2:	2700      	movs	r7, #0
 8018ba4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018ba8:	f7fa fa4e 	bl	8013048 <ucdr_init_buffer>
 8018bac:	f10d 031a 	add.w	r3, sp, #26
 8018bb0:	aa06      	add	r2, sp, #24
 8018bb2:	a91a      	add	r1, sp, #104	; 0x68
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	f88d 7018 	strb.w	r7, [sp, #24]
 8018bba:	f000 f97d 	bl	8018eb8 <uxr_read_session_header>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	d0dc      	beq.n	8018b7c <uxr_create_session+0x68>
 8018bc2:	4639      	mov	r1, r7
 8018bc4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018bc8:	f000 fe9a 	bl	8019900 <uxr_stream_id_from_raw>
 8018bcc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018bd0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8018bd4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8018bd8:	2f01      	cmp	r7, #1
 8018bda:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018bde:	d053      	beq.n	8018c88 <uxr_create_session+0x174>
 8018be0:	2f02      	cmp	r7, #2
 8018be2:	d018      	beq.n	8018c16 <uxr_create_session+0x102>
 8018be4:	2f00      	cmp	r7, #0
 8018be6:	d1c9      	bne.n	8018b7c <uxr_create_session+0x68>
 8018be8:	4639      	mov	r1, r7
 8018bea:	4638      	mov	r0, r7
 8018bec:	f000 fe88 	bl	8019900 <uxr_stream_id_from_raw>
 8018bf0:	a91a      	add	r1, sp, #104	; 0x68
 8018bf2:	4602      	mov	r2, r0
 8018bf4:	900a      	str	r0, [sp, #40]	; 0x28
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	f7ff fb1c 	bl	8018234 <read_submessage_list>
 8018bfc:	e7be      	b.n	8018b7c <uxr_create_session+0x68>
 8018bfe:	9b03      	ldr	r3, [sp, #12]
 8018c00:	3b01      	subs	r3, #1
 8018c02:	9303      	str	r3, [sp, #12]
 8018c04:	d001      	beq.n	8018c0a <uxr_create_session+0xf6>
 8018c06:	2aff      	cmp	r2, #255	; 0xff
 8018c08:	d0ac      	beq.n	8018b64 <uxr_create_session+0x50>
 8018c0a:	2a00      	cmp	r2, #0
 8018c0c:	d051      	beq.n	8018cb2 <uxr_create_session+0x19e>
 8018c0e:	2000      	movs	r0, #0
 8018c10:	b02b      	add	sp, #172	; 0xac
 8018c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c16:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018c1a:	4641      	mov	r1, r8
 8018c1c:	4630      	mov	r0, r6
 8018c1e:	9304      	str	r3, [sp, #16]
 8018c20:	f000 ff5c 	bl	8019adc <uxr_get_input_reliable_stream>
 8018c24:	4682      	mov	sl, r0
 8018c26:	b348      	cbz	r0, 8018c7c <uxr_create_session+0x168>
 8018c28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8018c2a:	a81a      	add	r0, sp, #104	; 0x68
 8018c2c:	9205      	str	r2, [sp, #20]
 8018c2e:	f7fa fa3d 	bl	80130ac <ucdr_buffer_remaining>
 8018c32:	4603      	mov	r3, r0
 8018c34:	f10d 0019 	add.w	r0, sp, #25
 8018c38:	9a05      	ldr	r2, [sp, #20]
 8018c3a:	4659      	mov	r1, fp
 8018c3c:	9000      	str	r0, [sp, #0]
 8018c3e:	4650      	mov	r0, sl
 8018c40:	f005 fbd8 	bl	801e3f4 <uxr_receive_reliable_message>
 8018c44:	b1d0      	cbz	r0, 8018c7c <uxr_create_session+0x168>
 8018c46:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d038      	beq.n	8018cc0 <uxr_create_session+0x1ac>
 8018c4e:	9f04      	ldr	r7, [sp, #16]
 8018c50:	e00a      	b.n	8018c68 <uxr_create_session+0x154>
 8018c52:	f04f 0302 	mov.w	r3, #2
 8018c56:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8018c5a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8018c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c64:	f7ff fae6 	bl	8018234 <read_submessage_list>
 8018c68:	a922      	add	r1, sp, #136	; 0x88
 8018c6a:	2204      	movs	r2, #4
 8018c6c:	4650      	mov	r0, sl
 8018c6e:	f005 fc43 	bl	801e4f8 <uxr_next_input_reliable_buffer_available>
 8018c72:	4603      	mov	r3, r0
 8018c74:	a922      	add	r1, sp, #136	; 0x88
 8018c76:	4620      	mov	r0, r4
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d1ea      	bne.n	8018c52 <uxr_create_session+0x13e>
 8018c7c:	4642      	mov	r2, r8
 8018c7e:	9904      	ldr	r1, [sp, #16]
 8018c80:	4620      	mov	r0, r4
 8018c82:	f7ff f953 	bl	8017f2c <write_submessage_acknack.isra.0>
 8018c86:	e779      	b.n	8018b7c <uxr_create_session+0x68>
 8018c88:	4641      	mov	r1, r8
 8018c8a:	4630      	mov	r0, r6
 8018c8c:	f000 ff1c 	bl	8019ac8 <uxr_get_input_best_effort_stream>
 8018c90:	2800      	cmp	r0, #0
 8018c92:	f43f af73 	beq.w	8018b7c <uxr_create_session+0x68>
 8018c96:	4659      	mov	r1, fp
 8018c98:	f005 fb22 	bl	801e2e0 <uxr_receive_best_effort_message>
 8018c9c:	2800      	cmp	r0, #0
 8018c9e:	f43f af6d 	beq.w	8018b7c <uxr_create_session+0x68>
 8018ca2:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018ca6:	a91a      	add	r1, sp, #104	; 0x68
 8018ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018caa:	4620      	mov	r0, r4
 8018cac:	f7ff fac2 	bl	8018234 <read_submessage_list>
 8018cb0:	e764      	b.n	8018b7c <uxr_create_session+0x68>
 8018cb2:	4630      	mov	r0, r6
 8018cb4:	f000 fe5a 	bl	801996c <uxr_reset_stream_storage>
 8018cb8:	2001      	movs	r0, #1
 8018cba:	b02b      	add	sp, #172	; 0xac
 8018cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cc0:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8018cc4:	a91a      	add	r1, sp, #104	; 0x68
 8018cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018cc8:	4620      	mov	r0, r4
 8018cca:	f7ff fab3 	bl	8018234 <read_submessage_list>
 8018cce:	e7be      	b.n	8018c4e <uxr_create_session+0x13a>

08018cd0 <uxr_prepare_stream_to_write_submessage>:
 8018cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd4:	b082      	sub	sp, #8
 8018cd6:	4604      	mov	r4, r0
 8018cd8:	4610      	mov	r0, r2
 8018cda:	4615      	mov	r5, r2
 8018cdc:	461e      	mov	r6, r3
 8018cde:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8018ce2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8018ce6:	f105 0904 	add.w	r9, r5, #4
 8018cea:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8018cee:	9101      	str	r1, [sp, #4]
 8018cf0:	f000 ff56 	bl	8019ba0 <uxr_submessage_padding>
 8018cf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018cf8:	4481      	add	r9, r0
 8018cfa:	2b01      	cmp	r3, #1
 8018cfc:	d01d      	beq.n	8018d3a <uxr_prepare_stream_to_write_submessage+0x6a>
 8018cfe:	2b02      	cmp	r3, #2
 8018d00:	d116      	bne.n	8018d30 <uxr_prepare_stream_to_write_submessage+0x60>
 8018d02:	f104 0008 	add.w	r0, r4, #8
 8018d06:	4651      	mov	r1, sl
 8018d08:	f000 fed2 	bl	8019ab0 <uxr_get_output_reliable_stream>
 8018d0c:	4604      	mov	r4, r0
 8018d0e:	b158      	cbz	r0, 8018d28 <uxr_prepare_stream_to_write_submessage+0x58>
 8018d10:	4649      	mov	r1, r9
 8018d12:	4632      	mov	r2, r6
 8018d14:	f005 fdb6 	bl	801e884 <uxr_prepare_reliable_buffer_to_write>
 8018d18:	4604      	mov	r4, r0
 8018d1a:	b12c      	cbz	r4, 8018d28 <uxr_prepare_stream_to_write_submessage+0x58>
 8018d1c:	4643      	mov	r3, r8
 8018d1e:	b2aa      	uxth	r2, r5
 8018d20:	4639      	mov	r1, r7
 8018d22:	4630      	mov	r0, r6
 8018d24:	f000 fefc 	bl	8019b20 <uxr_buffer_submessage_header>
 8018d28:	4620      	mov	r0, r4
 8018d2a:	b002      	add	sp, #8
 8018d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d30:	2400      	movs	r4, #0
 8018d32:	4620      	mov	r0, r4
 8018d34:	b002      	add	sp, #8
 8018d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d3a:	f104 0008 	add.w	r0, r4, #8
 8018d3e:	4651      	mov	r1, sl
 8018d40:	f000 feae 	bl	8019aa0 <uxr_get_output_best_effort_stream>
 8018d44:	4604      	mov	r4, r0
 8018d46:	2800      	cmp	r0, #0
 8018d48:	d0ee      	beq.n	8018d28 <uxr_prepare_stream_to_write_submessage+0x58>
 8018d4a:	4649      	mov	r1, r9
 8018d4c:	4632      	mov	r2, r6
 8018d4e:	f005 fcc3 	bl	801e6d8 <uxr_prepare_best_effort_buffer_to_write>
 8018d52:	4604      	mov	r4, r0
 8018d54:	e7e1      	b.n	8018d1a <uxr_prepare_stream_to_write_submessage+0x4a>
 8018d56:	bf00      	nop

08018d58 <uxr_init_session_info>:
 8018d58:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8018d5c:	23ff      	movs	r3, #255	; 0xff
 8018d5e:	7102      	strb	r2, [r0, #4]
 8018d60:	f880 c001 	strb.w	ip, [r0, #1]
 8018d64:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8018d68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8018d6c:	7001      	strb	r1, [r0, #0]
 8018d6e:	f880 c002 	strb.w	ip, [r0, #2]
 8018d72:	7143      	strb	r3, [r0, #5]
 8018d74:	70c2      	strb	r2, [r0, #3]
 8018d76:	b500      	push	{lr}
 8018d78:	f04f 0e09 	mov.w	lr, #9
 8018d7c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8018d80:	f85d fb04 	ldr.w	pc, [sp], #4

08018d84 <uxr_buffer_create_session>:
 8018d84:	b530      	push	{r4, r5, lr}
 8018d86:	2300      	movs	r3, #0
 8018d88:	b089      	sub	sp, #36	; 0x24
 8018d8a:	4d12      	ldr	r5, [pc, #72]	; (8018dd4 <uxr_buffer_create_session+0x50>)
 8018d8c:	460c      	mov	r4, r1
 8018d8e:	9307      	str	r3, [sp, #28]
 8018d90:	4619      	mov	r1, r3
 8018d92:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018d96:	2201      	movs	r2, #1
 8018d98:	9301      	str	r3, [sp, #4]
 8018d9a:	80c2      	strh	r2, [r0, #6]
 8018d9c:	f88d 2004 	strb.w	r2, [sp, #4]
 8018da0:	682a      	ldr	r2, [r5, #0]
 8018da2:	9303      	str	r3, [sp, #12]
 8018da4:	9200      	str	r2, [sp, #0]
 8018da6:	88aa      	ldrh	r2, [r5, #4]
 8018da8:	9306      	str	r3, [sp, #24]
 8018daa:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018dae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8018db2:	9202      	str	r2, [sp, #8]
 8018db4:	7802      	ldrb	r2, [r0, #0]
 8018db6:	4620      	mov	r0, r4
 8018db8:	f88d 200c 	strb.w	r2, [sp, #12]
 8018dbc:	2210      	movs	r2, #16
 8018dbe:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8018dc2:	f000 fead 	bl	8019b20 <uxr_buffer_submessage_header>
 8018dc6:	4669      	mov	r1, sp
 8018dc8:	4620      	mov	r0, r4
 8018dca:	f001 ff1f 	bl	801ac0c <uxr_serialize_CREATE_CLIENT_Payload>
 8018dce:	b009      	add	sp, #36	; 0x24
 8018dd0:	bd30      	pop	{r4, r5, pc}
 8018dd2:	bf00      	nop
 8018dd4:	08024294 	.word	0x08024294

08018dd8 <uxr_buffer_delete_session>:
 8018dd8:	4a0c      	ldr	r2, [pc, #48]	; (8018e0c <uxr_buffer_delete_session+0x34>)
 8018dda:	2302      	movs	r3, #2
 8018ddc:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8018de0:	b510      	push	{r4, lr}
 8018de2:	460c      	mov	r4, r1
 8018de4:	b082      	sub	sp, #8
 8018de6:	8911      	ldrh	r1, [r2, #8]
 8018de8:	2204      	movs	r2, #4
 8018dea:	80c3      	strh	r3, [r0, #6]
 8018dec:	2300      	movs	r3, #0
 8018dee:	f8ad 1006 	strh.w	r1, [sp, #6]
 8018df2:	4620      	mov	r0, r4
 8018df4:	2103      	movs	r1, #3
 8018df6:	f8ad c004 	strh.w	ip, [sp, #4]
 8018dfa:	f000 fe91 	bl	8019b20 <uxr_buffer_submessage_header>
 8018dfe:	a901      	add	r1, sp, #4
 8018e00:	4620      	mov	r0, r4
 8018e02:	f001 ffab 	bl	801ad5c <uxr_serialize_DELETE_Payload>
 8018e06:	b002      	add	sp, #8
 8018e08:	bd10      	pop	{r4, pc}
 8018e0a:	bf00      	nop
 8018e0c:	08024294 	.word	0x08024294

08018e10 <uxr_read_create_session_status>:
 8018e10:	b510      	push	{r4, lr}
 8018e12:	460b      	mov	r3, r1
 8018e14:	b088      	sub	sp, #32
 8018e16:	4604      	mov	r4, r0
 8018e18:	a901      	add	r1, sp, #4
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	f001 ffae 	bl	801ad7c <uxr_deserialize_STATUS_AGENT_Payload>
 8018e20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018e24:	7163      	strb	r3, [r4, #5]
 8018e26:	b008      	add	sp, #32
 8018e28:	bd10      	pop	{r4, pc}
 8018e2a:	bf00      	nop

08018e2c <uxr_read_delete_session_status>:
 8018e2c:	b510      	push	{r4, lr}
 8018e2e:	b084      	sub	sp, #16
 8018e30:	4604      	mov	r4, r0
 8018e32:	4608      	mov	r0, r1
 8018e34:	a902      	add	r1, sp, #8
 8018e36:	f001 ffd1 	bl	801addc <uxr_deserialize_STATUS_Payload>
 8018e3a:	88e3      	ldrh	r3, [r4, #6]
 8018e3c:	2b02      	cmp	r3, #2
 8018e3e:	d001      	beq.n	8018e44 <uxr_read_delete_session_status+0x18>
 8018e40:	b004      	add	sp, #16
 8018e42:	bd10      	pop	{r4, pc}
 8018e44:	f10d 000a 	add.w	r0, sp, #10
 8018e48:	f7fe fec6 	bl	8017bd8 <uxr_object_id_from_raw>
 8018e4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8018e50:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8018e54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018e58:	b29b      	uxth	r3, r3
 8018e5a:	2b02      	cmp	r3, #2
 8018e5c:	d1f0      	bne.n	8018e40 <uxr_read_delete_session_status+0x14>
 8018e5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018e62:	7163      	strb	r3, [r4, #5]
 8018e64:	e7ec      	b.n	8018e40 <uxr_read_delete_session_status+0x14>
 8018e66:	bf00      	nop

08018e68 <uxr_stamp_create_session_header>:
 8018e68:	b510      	push	{r4, lr}
 8018e6a:	2208      	movs	r2, #8
 8018e6c:	b08a      	sub	sp, #40	; 0x28
 8018e6e:	4604      	mov	r4, r0
 8018e70:	eb0d 0002 	add.w	r0, sp, r2
 8018e74:	f7fa f8e8 	bl	8013048 <ucdr_init_buffer>
 8018e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	a802      	add	r0, sp, #8
 8018e80:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8018e84:	9400      	str	r4, [sp, #0]
 8018e86:	461a      	mov	r2, r3
 8018e88:	f001 f846 	bl	8019f18 <uxr_serialize_message_header>
 8018e8c:	b00a      	add	sp, #40	; 0x28
 8018e8e:	bd10      	pop	{r4, pc}

08018e90 <uxr_stamp_session_header>:
 8018e90:	b530      	push	{r4, r5, lr}
 8018e92:	b08d      	sub	sp, #52	; 0x34
 8018e94:	4604      	mov	r4, r0
 8018e96:	460d      	mov	r5, r1
 8018e98:	4619      	mov	r1, r3
 8018e9a:	a804      	add	r0, sp, #16
 8018e9c:	9203      	str	r2, [sp, #12]
 8018e9e:	2208      	movs	r2, #8
 8018ea0:	f7fa f8d2 	bl	8013048 <ucdr_init_buffer>
 8018ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ea8:	9b03      	ldr	r3, [sp, #12]
 8018eaa:	462a      	mov	r2, r5
 8018eac:	a804      	add	r0, sp, #16
 8018eae:	9400      	str	r4, [sp, #0]
 8018eb0:	f001 f832 	bl	8019f18 <uxr_serialize_message_header>
 8018eb4:	b00d      	add	sp, #52	; 0x34
 8018eb6:	bd30      	pop	{r4, r5, pc}

08018eb8 <uxr_read_session_header>:
 8018eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ebc:	4607      	mov	r7, r0
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	4608      	mov	r0, r1
 8018ec2:	460c      	mov	r4, r1
 8018ec4:	4615      	mov	r5, r2
 8018ec6:	461e      	mov	r6, r3
 8018ec8:	f7fa f8f0 	bl	80130ac <ucdr_buffer_remaining>
 8018ecc:	2808      	cmp	r0, #8
 8018ece:	d803      	bhi.n	8018ed8 <uxr_read_session_header+0x20>
 8018ed0:	2000      	movs	r0, #0
 8018ed2:	b004      	add	sp, #16
 8018ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ed8:	f10d 080c 	add.w	r8, sp, #12
 8018edc:	4633      	mov	r3, r6
 8018ede:	462a      	mov	r2, r5
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	f10d 010b 	add.w	r1, sp, #11
 8018ee6:	f8cd 8000 	str.w	r8, [sp]
 8018eea:	f001 f833 	bl	8019f54 <uxr_deserialize_message_header>
 8018eee:	783a      	ldrb	r2, [r7, #0]
 8018ef0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8018ef4:	4293      	cmp	r3, r2
 8018ef6:	d1eb      	bne.n	8018ed0 <uxr_read_session_header+0x18>
 8018ef8:	061b      	lsls	r3, r3, #24
 8018efa:	d41b      	bmi.n	8018f34 <uxr_read_session_header+0x7c>
 8018efc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8018f00:	787b      	ldrb	r3, [r7, #1]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d003      	beq.n	8018f0e <uxr_read_session_header+0x56>
 8018f06:	2001      	movs	r0, #1
 8018f08:	f080 0001 	eor.w	r0, r0, #1
 8018f0c:	e7e1      	b.n	8018ed2 <uxr_read_session_header+0x1a>
 8018f0e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8018f12:	1cb8      	adds	r0, r7, #2
 8018f14:	78bb      	ldrb	r3, [r7, #2]
 8018f16:	429a      	cmp	r2, r3
 8018f18:	d1f5      	bne.n	8018f06 <uxr_read_session_header+0x4e>
 8018f1a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8018f1e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8018f22:	429a      	cmp	r2, r3
 8018f24:	d1ef      	bne.n	8018f06 <uxr_read_session_header+0x4e>
 8018f26:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8018f2a:	7843      	ldrb	r3, [r0, #1]
 8018f2c:	429a      	cmp	r2, r3
 8018f2e:	d1ea      	bne.n	8018f06 <uxr_read_session_header+0x4e>
 8018f30:	2000      	movs	r0, #0
 8018f32:	e7e9      	b.n	8018f08 <uxr_read_session_header+0x50>
 8018f34:	2001      	movs	r0, #1
 8018f36:	e7cc      	b.n	8018ed2 <uxr_read_session_header+0x1a>

08018f38 <uxr_session_header_offset>:
 8018f38:	f990 3000 	ldrsb.w	r3, [r0]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	bfac      	ite	ge
 8018f40:	2008      	movge	r0, #8
 8018f42:	2004      	movlt	r0, #4
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop

08018f48 <uxr_init_base_object_request>:
 8018f48:	b510      	push	{r4, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8018f50:	9101      	str	r1, [sp, #4]
 8018f52:	88c3      	ldrh	r3, [r0, #6]
 8018f54:	f1a3 010a 	sub.w	r1, r3, #10
 8018f58:	b289      	uxth	r1, r1
 8018f5a:	42a1      	cmp	r1, r4
 8018f5c:	d80f      	bhi.n	8018f7e <uxr_init_base_object_request+0x36>
 8018f5e:	3301      	adds	r3, #1
 8018f60:	b29c      	uxth	r4, r3
 8018f62:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8018f66:	b2db      	uxtb	r3, r3
 8018f68:	80c4      	strh	r4, [r0, #6]
 8018f6a:	1c91      	adds	r1, r2, #2
 8018f6c:	9801      	ldr	r0, [sp, #4]
 8018f6e:	f882 c000 	strb.w	ip, [r2]
 8018f72:	7053      	strb	r3, [r2, #1]
 8018f74:	f7fe fe44 	bl	8017c00 <uxr_object_id_to_raw>
 8018f78:	4620      	mov	r0, r4
 8018f7a:	b002      	add	sp, #8
 8018f7c:	bd10      	pop	{r4, pc}
 8018f7e:	230a      	movs	r3, #10
 8018f80:	f04f 0c00 	mov.w	ip, #0
 8018f84:	461c      	mov	r4, r3
 8018f86:	e7ef      	b.n	8018f68 <uxr_init_base_object_request+0x20>

08018f88 <uxr_parse_base_object_request>:
 8018f88:	b570      	push	{r4, r5, r6, lr}
 8018f8a:	4604      	mov	r4, r0
 8018f8c:	3002      	adds	r0, #2
 8018f8e:	460d      	mov	r5, r1
 8018f90:	4616      	mov	r6, r2
 8018f92:	f7fe fe21 	bl	8017bd8 <uxr_object_id_from_raw>
 8018f96:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8018f9a:	8028      	strh	r0, [r5, #0]
 8018f9c:	806b      	strh	r3, [r5, #2]
 8018f9e:	7822      	ldrb	r2, [r4, #0]
 8018fa0:	7863      	ldrb	r3, [r4, #1]
 8018fa2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018fa6:	8033      	strh	r3, [r6, #0]
 8018fa8:	bd70      	pop	{r4, r5, r6, pc}
 8018faa:	bf00      	nop

08018fac <uxr_init_framing_io>:
 8018fac:	2300      	movs	r3, #0
 8018fae:	7041      	strb	r1, [r0, #1]
 8018fb0:	7003      	strb	r3, [r0, #0]
 8018fb2:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018fb4:	4770      	bx	lr
 8018fb6:	bf00      	nop

08018fb8 <uxr_write_framed_msg>:
 8018fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fbc:	4617      	mov	r7, r2
 8018fbe:	7842      	ldrb	r2, [r0, #1]
 8018fc0:	460e      	mov	r6, r1
 8018fc2:	b083      	sub	sp, #12
 8018fc4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8018fc8:	469b      	mov	fp, r3
 8018fca:	237e      	movs	r3, #126	; 0x7e
 8018fcc:	4604      	mov	r4, r0
 8018fce:	2901      	cmp	r1, #1
 8018fd0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8018fd4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018fd8:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8018fdc:	f240 8115 	bls.w	801920a <uxr_write_framed_msg+0x252>
 8018fe0:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8018fe4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8018fe8:	2202      	movs	r2, #2
 8018fea:	2901      	cmp	r1, #1
 8018fec:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018ff0:	d952      	bls.n	8019098 <uxr_write_framed_msg+0xe0>
 8018ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018ff4:	2103      	movs	r1, #3
 8018ff6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018ffa:	b2dd      	uxtb	r5, r3
 8018ffc:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019000:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019004:	2a01      	cmp	r2, #1
 8019006:	d95c      	bls.n	80190c2 <uxr_write_framed_msg+0x10a>
 8019008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801900a:	1862      	adds	r2, r4, r1
 801900c:	3101      	adds	r1, #1
 801900e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019012:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8019016:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801901a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801901e:	2a01      	cmp	r2, #1
 8019020:	d961      	bls.n	80190e6 <uxr_write_framed_msg+0x12e>
 8019022:	1c4a      	adds	r2, r1, #1
 8019024:	4421      	add	r1, r4
 8019026:	b2d2      	uxtb	r2, r2
 8019028:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801902c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019030:	2b00      	cmp	r3, #0
 8019032:	d06a      	beq.n	801910a <uxr_write_framed_msg+0x152>
 8019034:	f04f 0800 	mov.w	r8, #0
 8019038:	46c1      	mov	r9, r8
 801903a:	e016      	b.n	801906a <uxr_write_framed_msg+0xb2>
 801903c:	2a29      	cmp	r2, #41	; 0x29
 801903e:	d868      	bhi.n	8019112 <uxr_write_framed_msg+0x15a>
 8019040:	18a0      	adds	r0, r4, r2
 8019042:	3201      	adds	r2, #1
 8019044:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019048:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801904c:	ea88 0101 	eor.w	r1, r8, r1
 8019050:	4b7d      	ldr	r3, [pc, #500]	; (8019248 <uxr_write_framed_msg+0x290>)
 8019052:	f109 0901 	add.w	r9, r9, #1
 8019056:	b2c9      	uxtb	r1, r1
 8019058:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801905c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019062:	454b      	cmp	r3, r9
 8019064:	d969      	bls.n	801913a <uxr_write_framed_msg+0x182>
 8019066:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801906a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801906e:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8019072:	2801      	cmp	r0, #1
 8019074:	d8e2      	bhi.n	801903c <uxr_write_framed_msg+0x84>
 8019076:	1c50      	adds	r0, r2, #1
 8019078:	b2c0      	uxtb	r0, r0
 801907a:	2829      	cmp	r0, #41	; 0x29
 801907c:	d849      	bhi.n	8019112 <uxr_write_framed_msg+0x15a>
 801907e:	18a0      	adds	r0, r4, r2
 8019080:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019084:	3202      	adds	r2, #2
 8019086:	f081 0520 	eor.w	r5, r1, #32
 801908a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801908e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8019092:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019096:	e7d9      	b.n	801904c <uxr_write_framed_msg+0x94>
 8019098:	2104      	movs	r1, #4
 801909a:	f04f 0c03 	mov.w	ip, #3
 801909e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190a0:	4422      	add	r2, r4
 80190a2:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80190a6:	44a4      	add	ip, r4
 80190a8:	b2dd      	uxtb	r5, r3
 80190aa:	f080 0020 	eor.w	r0, r0, #32
 80190ae:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 80190b2:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80190b6:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80190ba:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80190be:	2a01      	cmp	r2, #1
 80190c0:	d8a2      	bhi.n	8019008 <uxr_write_framed_msg+0x50>
 80190c2:	1862      	adds	r2, r4, r1
 80190c4:	207d      	movs	r0, #125	; 0x7d
 80190c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190c8:	f085 0520 	eor.w	r5, r5, #32
 80190cc:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 80190d0:	3102      	adds	r1, #2
 80190d2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80190d6:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 80190da:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80190de:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80190e2:	2a01      	cmp	r2, #1
 80190e4:	d89d      	bhi.n	8019022 <uxr_write_framed_msg+0x6a>
 80190e6:	1c4d      	adds	r5, r1, #1
 80190e8:	1c8a      	adds	r2, r1, #2
 80190ea:	f080 0020 	eor.w	r0, r0, #32
 80190ee:	4421      	add	r1, r4
 80190f0:	fa54 f585 	uxtab	r5, r4, r5
 80190f4:	b2d2      	uxtb	r2, r2
 80190f6:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80190fa:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 80190fe:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8019102:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019106:	2b00      	cmp	r3, #0
 8019108:	d194      	bne.n	8019034 <uxr_write_framed_msg+0x7c>
 801910a:	4619      	mov	r1, r3
 801910c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019110:	e019      	b.n	8019146 <uxr_write_framed_msg+0x18e>
 8019112:	2500      	movs	r5, #0
 8019114:	e000      	b.n	8019118 <uxr_write_framed_msg+0x160>
 8019116:	b160      	cbz	r0, 8019132 <uxr_write_framed_msg+0x17a>
 8019118:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801911c:	1b52      	subs	r2, r2, r5
 801911e:	4653      	mov	r3, sl
 8019120:	4638      	mov	r0, r7
 8019122:	4421      	add	r1, r4
 8019124:	47b0      	blx	r6
 8019126:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801912a:	4405      	add	r5, r0
 801912c:	4295      	cmp	r5, r2
 801912e:	d3f2      	bcc.n	8019116 <uxr_write_framed_msg+0x15e>
 8019130:	d066      	beq.n	8019200 <uxr_write_framed_msg+0x248>
 8019132:	2000      	movs	r0, #0
 8019134:	b003      	add	sp, #12
 8019136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801913a:	fa5f f188 	uxtb.w	r1, r8
 801913e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019142:	f8ad 8004 	strh.w	r8, [sp, #4]
 8019146:	f04f 0900 	mov.w	r9, #0
 801914a:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801914e:	46c8      	mov	r8, r9
 8019150:	e013      	b.n	801917a <uxr_write_framed_msg+0x1c2>
 8019152:	2a29      	cmp	r2, #41	; 0x29
 8019154:	d824      	bhi.n	80191a0 <uxr_write_framed_msg+0x1e8>
 8019156:	18a3      	adds	r3, r4, r2
 8019158:	3201      	adds	r2, #1
 801915a:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801915e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019162:	f109 0901 	add.w	r9, r9, #1
 8019166:	f1b9 0f02 	cmp.w	r9, #2
 801916a:	d02d      	beq.n	80191c8 <uxr_write_framed_msg+0x210>
 801916c:	f109 0308 	add.w	r3, r9, #8
 8019170:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019174:	446b      	add	r3, sp
 8019176:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801917a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801917e:	2b01      	cmp	r3, #1
 8019180:	d8e7      	bhi.n	8019152 <uxr_write_framed_msg+0x19a>
 8019182:	1c53      	adds	r3, r2, #1
 8019184:	b2db      	uxtb	r3, r3
 8019186:	2b29      	cmp	r3, #41	; 0x29
 8019188:	d80a      	bhi.n	80191a0 <uxr_write_framed_msg+0x1e8>
 801918a:	18a3      	adds	r3, r4, r2
 801918c:	f081 0120 	eor.w	r1, r1, #32
 8019190:	3202      	adds	r2, #2
 8019192:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8019196:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801919a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801919e:	e7e0      	b.n	8019162 <uxr_write_framed_msg+0x1aa>
 80191a0:	2500      	movs	r5, #0
 80191a2:	e001      	b.n	80191a8 <uxr_write_framed_msg+0x1f0>
 80191a4:	2800      	cmp	r0, #0
 80191a6:	d0c4      	beq.n	8019132 <uxr_write_framed_msg+0x17a>
 80191a8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80191ac:	1b52      	subs	r2, r2, r5
 80191ae:	4653      	mov	r3, sl
 80191b0:	4638      	mov	r0, r7
 80191b2:	4421      	add	r1, r4
 80191b4:	47b0      	blx	r6
 80191b6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80191ba:	4405      	add	r5, r0
 80191bc:	4295      	cmp	r5, r2
 80191be:	d3f1      	bcc.n	80191a4 <uxr_write_framed_msg+0x1ec>
 80191c0:	d1b7      	bne.n	8019132 <uxr_write_framed_msg+0x17a>
 80191c2:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 80191c6:	e7d1      	b.n	801916c <uxr_write_framed_msg+0x1b4>
 80191c8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80191cc:	b19a      	cbz	r2, 80191f6 <uxr_write_framed_msg+0x23e>
 80191ce:	2500      	movs	r5, #0
 80191d0:	e001      	b.n	80191d6 <uxr_write_framed_msg+0x21e>
 80191d2:	2800      	cmp	r0, #0
 80191d4:	d0ad      	beq.n	8019132 <uxr_write_framed_msg+0x17a>
 80191d6:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80191da:	1b52      	subs	r2, r2, r5
 80191dc:	4653      	mov	r3, sl
 80191de:	4638      	mov	r0, r7
 80191e0:	4421      	add	r1, r4
 80191e2:	47b0      	blx	r6
 80191e4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80191e8:	4405      	add	r5, r0
 80191ea:	4295      	cmp	r5, r2
 80191ec:	d3f1      	bcc.n	80191d2 <uxr_write_framed_msg+0x21a>
 80191ee:	d1a0      	bne.n	8019132 <uxr_write_framed_msg+0x17a>
 80191f0:	2300      	movs	r3, #0
 80191f2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80191f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191f8:	b298      	uxth	r0, r3
 80191fa:	b003      	add	sp, #12
 80191fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019200:	f04f 0300 	mov.w	r3, #0
 8019204:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019208:	e72a      	b.n	8019060 <uxr_write_framed_msg+0xa8>
 801920a:	217d      	movs	r1, #125	; 0x7d
 801920c:	f082 0220 	eor.w	r2, r2, #32
 8019210:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8019214:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019218:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801921c:	2203      	movs	r2, #3
 801921e:	2901      	cmp	r1, #1
 8019220:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019224:	d803      	bhi.n	801922e <uxr_write_framed_msg+0x276>
 8019226:	2105      	movs	r1, #5
 8019228:	f04f 0c04 	mov.w	ip, #4
 801922c:	e737      	b.n	801909e <uxr_write_framed_msg+0xe6>
 801922e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019230:	2104      	movs	r1, #4
 8019232:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8019236:	b2dd      	uxtb	r5, r3
 8019238:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801923c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019240:	2a01      	cmp	r2, #1
 8019242:	f63f aee1 	bhi.w	8019008 <uxr_write_framed_msg+0x50>
 8019246:	e73c      	b.n	80190c2 <uxr_write_framed_msg+0x10a>
 8019248:	08025424 	.word	0x08025424

0801924c <uxr_framing_read_transport>:
 801924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019250:	4604      	mov	r4, r0
 8019252:	b085      	sub	sp, #20
 8019254:	4692      	mov	sl, r2
 8019256:	4689      	mov	r9, r1
 8019258:	461d      	mov	r5, r3
 801925a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801925c:	f000 fca6 	bl	8019bac <uxr_millis>
 8019260:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019264:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019268:	4680      	mov	r8, r0
 801926a:	42ba      	cmp	r2, r7
 801926c:	d05f      	beq.n	801932e <uxr_framing_read_transport+0xe2>
 801926e:	d817      	bhi.n	80192a0 <uxr_framing_read_transport+0x54>
 8019270:	3f01      	subs	r7, #1
 8019272:	1aba      	subs	r2, r7, r2
 8019274:	2700      	movs	r7, #0
 8019276:	b2d2      	uxtb	r2, r2
 8019278:	42b2      	cmp	r2, r6
 801927a:	d81a      	bhi.n	80192b2 <uxr_framing_read_transport+0x66>
 801927c:	19d3      	adds	r3, r2, r7
 801927e:	42b3      	cmp	r3, r6
 8019280:	d852      	bhi.n	8019328 <uxr_framing_read_transport+0xdc>
 8019282:	b9d2      	cbnz	r2, 80192ba <uxr_framing_read_transport+0x6e>
 8019284:	2600      	movs	r6, #0
 8019286:	f000 fc91 	bl	8019bac <uxr_millis>
 801928a:	682b      	ldr	r3, [r5, #0]
 801928c:	eba0 0008 	sub.w	r0, r0, r8
 8019290:	1a1b      	subs	r3, r3, r0
 8019292:	4630      	mov	r0, r6
 8019294:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019298:	602b      	str	r3, [r5, #0]
 801929a:	b005      	add	sp, #20
 801929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192a0:	2f00      	cmp	r7, #0
 80192a2:	d060      	beq.n	8019366 <uxr_framing_read_transport+0x11a>
 80192a4:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 80192a8:	3f01      	subs	r7, #1
 80192aa:	b2d2      	uxtb	r2, r2
 80192ac:	b2ff      	uxtb	r7, r7
 80192ae:	42b2      	cmp	r2, r6
 80192b0:	d9e4      	bls.n	801927c <uxr_framing_read_transport+0x30>
 80192b2:	b2f2      	uxtb	r2, r6
 80192b4:	2700      	movs	r7, #0
 80192b6:	2a00      	cmp	r2, #0
 80192b8:	d0e4      	beq.n	8019284 <uxr_framing_read_transport+0x38>
 80192ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192bc:	4650      	mov	r0, sl
 80192be:	9203      	str	r2, [sp, #12]
 80192c0:	9300      	str	r3, [sp, #0]
 80192c2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80192c6:	682b      	ldr	r3, [r5, #0]
 80192c8:	3102      	adds	r1, #2
 80192ca:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019370 <uxr_framing_read_transport+0x124>
 80192ce:	4421      	add	r1, r4
 80192d0:	47c8      	blx	r9
 80192d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80192d6:	4606      	mov	r6, r0
 80192d8:	4403      	add	r3, r0
 80192da:	0859      	lsrs	r1, r3, #1
 80192dc:	fbab 2101 	umull	r2, r1, fp, r1
 80192e0:	222a      	movs	r2, #42	; 0x2a
 80192e2:	0889      	lsrs	r1, r1, #2
 80192e4:	fb02 3111 	mls	r1, r2, r1, r3
 80192e8:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80192ec:	2800      	cmp	r0, #0
 80192ee:	d0c9      	beq.n	8019284 <uxr_framing_read_transport+0x38>
 80192f0:	9a03      	ldr	r2, [sp, #12]
 80192f2:	4290      	cmp	r0, r2
 80192f4:	d1c7      	bne.n	8019286 <uxr_framing_read_transport+0x3a>
 80192f6:	2f00      	cmp	r7, #0
 80192f8:	d0c5      	beq.n	8019286 <uxr_framing_read_transport+0x3a>
 80192fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192fc:	3102      	adds	r1, #2
 80192fe:	463a      	mov	r2, r7
 8019300:	4650      	mov	r0, sl
 8019302:	4421      	add	r1, r4
 8019304:	9300      	str	r3, [sp, #0]
 8019306:	2300      	movs	r3, #0
 8019308:	47c8      	blx	r9
 801930a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801930e:	4406      	add	r6, r0
 8019310:	1813      	adds	r3, r2, r0
 8019312:	085a      	lsrs	r2, r3, #1
 8019314:	fbab 1b02 	umull	r1, fp, fp, r2
 8019318:	222a      	movs	r2, #42	; 0x2a
 801931a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801931e:	fb02 331b 	mls	r3, r2, fp, r3
 8019322:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019326:	e7ae      	b.n	8019286 <uxr_framing_read_transport+0x3a>
 8019328:	1ab6      	subs	r6, r6, r2
 801932a:	b2f7      	uxtb	r7, r6
 801932c:	e7a9      	b.n	8019282 <uxr_framing_read_transport+0x36>
 801932e:	2300      	movs	r3, #0
 8019330:	2e28      	cmp	r6, #40	; 0x28
 8019332:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8019334:	d9bd      	bls.n	80192b2 <uxr_framing_read_transport+0x66>
 8019336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019338:	2229      	movs	r2, #41	; 0x29
 801933a:	1ca1      	adds	r1, r4, #2
 801933c:	4650      	mov	r0, sl
 801933e:	9300      	str	r3, [sp, #0]
 8019340:	682b      	ldr	r3, [r5, #0]
 8019342:	47c8      	blx	r9
 8019344:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019348:	4606      	mov	r6, r0
 801934a:	212a      	movs	r1, #42	; 0x2a
 801934c:	4403      	add	r3, r0
 801934e:	4808      	ldr	r0, [pc, #32]	; (8019370 <uxr_framing_read_transport+0x124>)
 8019350:	085a      	lsrs	r2, r3, #1
 8019352:	fba0 0202 	umull	r0, r2, r0, r2
 8019356:	0892      	lsrs	r2, r2, #2
 8019358:	fb01 3312 	mls	r3, r1, r2, r3
 801935c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019360:	2e00      	cmp	r6, #0
 8019362:	d08f      	beq.n	8019284 <uxr_framing_read_transport+0x38>
 8019364:	e78f      	b.n	8019286 <uxr_framing_read_transport+0x3a>
 8019366:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801936a:	b2d2      	uxtb	r2, r2
 801936c:	e784      	b.n	8019278 <uxr_framing_read_transport+0x2c>
 801936e:	bf00      	nop
 8019370:	30c30c31 	.word	0x30c30c31

08019374 <uxr_read_framed_msg>:
 8019374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019378:	461e      	mov	r6, r3
 801937a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801937e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8019382:	b083      	sub	sp, #12
 8019384:	4604      	mov	r4, r0
 8019386:	4688      	mov	r8, r1
 8019388:	429d      	cmp	r5, r3
 801938a:	4691      	mov	r9, r2
 801938c:	f000 818c 	beq.w	80196a8 <uxr_read_framed_msg+0x334>
 8019390:	7823      	ldrb	r3, [r4, #0]
 8019392:	4dc3      	ldr	r5, [pc, #780]	; (80196a0 <uxr_read_framed_msg+0x32c>)
 8019394:	4fc3      	ldr	r7, [pc, #780]	; (80196a4 <uxr_read_framed_msg+0x330>)
 8019396:	2b07      	cmp	r3, #7
 8019398:	d8fd      	bhi.n	8019396 <uxr_read_framed_msg+0x22>
 801939a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801939e:	011c      	.short	0x011c
 80193a0:	00d900fb 	.word	0x00d900fb
 80193a4:	008f00ba 	.word	0x008f00ba
 80193a8:	00320051 	.word	0x00320051
 80193ac:	0008      	.short	0x0008
 80193ae:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80193b2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80193b6:	4299      	cmp	r1, r3
 80193b8:	f000 814d 	beq.w	8019656 <uxr_read_framed_msg+0x2e2>
 80193bc:	18e2      	adds	r2, r4, r3
 80193be:	7892      	ldrb	r2, [r2, #2]
 80193c0:	2a7d      	cmp	r2, #125	; 0x7d
 80193c2:	f000 81b8 	beq.w	8019736 <uxr_read_framed_msg+0x3c2>
 80193c6:	3301      	adds	r3, #1
 80193c8:	212a      	movs	r1, #42	; 0x2a
 80193ca:	2a7e      	cmp	r2, #126	; 0x7e
 80193cc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80193d0:	fba5 c000 	umull	ip, r0, r5, r0
 80193d4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80193d8:	fb01 3310 	mls	r3, r1, r0, r3
 80193dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80193e0:	f000 8257 	beq.w	8019892 <uxr_read_framed_msg+0x51e>
 80193e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80193e6:	2000      	movs	r0, #0
 80193e8:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80193ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80193ee:	7020      	strb	r0, [r4, #0]
 80193f0:	b29b      	uxth	r3, r3
 80193f2:	4299      	cmp	r1, r3
 80193f4:	86a3      	strh	r3, [r4, #52]	; 0x34
 80193f6:	f000 8178 	beq.w	80196ea <uxr_read_framed_msg+0x376>
 80193fa:	2000      	movs	r0, #0
 80193fc:	b003      	add	sp, #12
 80193fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019402:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019406:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801940a:	4298      	cmp	r0, r3
 801940c:	f000 8132 	beq.w	8019674 <uxr_read_framed_msg+0x300>
 8019410:	18e2      	adds	r2, r4, r3
 8019412:	7891      	ldrb	r1, [r2, #2]
 8019414:	297d      	cmp	r1, #125	; 0x7d
 8019416:	f000 8170 	beq.w	80196fa <uxr_read_framed_msg+0x386>
 801941a:	3301      	adds	r3, #1
 801941c:	202a      	movs	r0, #42	; 0x2a
 801941e:	297e      	cmp	r1, #126	; 0x7e
 8019420:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019424:	fba5 c202 	umull	ip, r2, r5, r2
 8019428:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801942c:	fb00 3312 	mls	r3, r0, r2, r3
 8019430:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019434:	f000 821d 	beq.w	8019872 <uxr_read_framed_msg+0x4fe>
 8019438:	2307      	movs	r3, #7
 801943a:	86a1      	strh	r1, [r4, #52]	; 0x34
 801943c:	7023      	strb	r3, [r4, #0]
 801943e:	e7aa      	b.n	8019396 <uxr_read_framed_msg+0x22>
 8019440:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019442:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019446:	459e      	cmp	lr, r3
 8019448:	d827      	bhi.n	801949a <uxr_read_framed_msg+0x126>
 801944a:	e032      	b.n	80194b2 <uxr_read_framed_msg+0x13e>
 801944c:	fba5 b101 	umull	fp, r1, r5, r1
 8019450:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019454:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019458:	0889      	lsrs	r1, r1, #2
 801945a:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801945e:	fb0b 0111 	mls	r1, fp, r1, r0
 8019462:	f000 80d4 	beq.w	801960e <uxr_read_framed_msg+0x29a>
 8019466:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801946a:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801946e:	f000 80cb 	beq.w	8019608 <uxr_read_framed_msg+0x294>
 8019472:	f806 c003 	strb.w	ip, [r6, r3]
 8019476:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019478:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801947a:	ea80 010c 	eor.w	r1, r0, ip
 801947e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019482:	3301      	adds	r3, #1
 8019484:	b2c9      	uxtb	r1, r1
 8019486:	b29b      	uxth	r3, r3
 8019488:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801948c:	4573      	cmp	r3, lr
 801948e:	8663      	strh	r3, [r4, #50]	; 0x32
 8019490:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019494:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019496:	f080 811d 	bcs.w	80196d4 <uxr_read_framed_msg+0x360>
 801949a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801949e:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80194a2:	1c50      	adds	r0, r2, #1
 80194a4:	eb04 0c02 	add.w	ip, r4, r2
 80194a8:	4592      	cmp	sl, r2
 80194aa:	ea4f 0150 	mov.w	r1, r0, lsr #1
 80194ae:	d1cd      	bne.n	801944c <uxr_read_framed_msg+0xd8>
 80194b0:	459e      	cmp	lr, r3
 80194b2:	f040 8114 	bne.w	80196de <uxr_read_framed_msg+0x36a>
 80194b6:	2306      	movs	r3, #6
 80194b8:	7023      	strb	r3, [r4, #0]
 80194ba:	e76c      	b.n	8019396 <uxr_read_framed_msg+0x22>
 80194bc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80194c0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80194c4:	4298      	cmp	r0, r3
 80194c6:	f000 80c6 	beq.w	8019656 <uxr_read_framed_msg+0x2e2>
 80194ca:	18e2      	adds	r2, r4, r3
 80194cc:	7891      	ldrb	r1, [r2, #2]
 80194ce:	297d      	cmp	r1, #125	; 0x7d
 80194d0:	f000 8193 	beq.w	80197fa <uxr_read_framed_msg+0x486>
 80194d4:	3301      	adds	r3, #1
 80194d6:	202a      	movs	r0, #42	; 0x2a
 80194d8:	297e      	cmp	r1, #126	; 0x7e
 80194da:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80194de:	fba5 c202 	umull	ip, r2, r5, r2
 80194e2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80194e6:	fb00 3312 	mls	r3, r0, r2, r3
 80194ea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80194ee:	f000 81d0 	beq.w	8019892 <uxr_read_framed_msg+0x51e>
 80194f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80194f4:	2000      	movs	r0, #0
 80194f6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80194fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80194fc:	8660      	strh	r0, [r4, #50]	; 0x32
 80194fe:	b29b      	uxth	r3, r3
 8019500:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019502:	428b      	cmp	r3, r1
 8019504:	8623      	strh	r3, [r4, #48]	; 0x30
 8019506:	f240 80e2 	bls.w	80196ce <uxr_read_framed_msg+0x35a>
 801950a:	7020      	strb	r0, [r4, #0]
 801950c:	b003      	add	sp, #12
 801950e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019512:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019516:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801951a:	4298      	cmp	r0, r3
 801951c:	f000 80aa 	beq.w	8019674 <uxr_read_framed_msg+0x300>
 8019520:	18e2      	adds	r2, r4, r3
 8019522:	7891      	ldrb	r1, [r2, #2]
 8019524:	297d      	cmp	r1, #125	; 0x7d
 8019526:	f000 8186 	beq.w	8019836 <uxr_read_framed_msg+0x4c2>
 801952a:	3301      	adds	r3, #1
 801952c:	202a      	movs	r0, #42	; 0x2a
 801952e:	297e      	cmp	r1, #126	; 0x7e
 8019530:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019534:	fba5 c202 	umull	ip, r2, r5, r2
 8019538:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801953c:	fb00 3312 	mls	r3, r0, r2, r3
 8019540:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019544:	f000 8195 	beq.w	8019872 <uxr_read_framed_msg+0x4fe>
 8019548:	2304      	movs	r3, #4
 801954a:	8621      	strh	r1, [r4, #48]	; 0x30
 801954c:	7023      	strb	r3, [r4, #0]
 801954e:	e722      	b.n	8019396 <uxr_read_framed_msg+0x22>
 8019550:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019554:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019558:	4290      	cmp	r0, r2
 801955a:	f000 80b4 	beq.w	80196c6 <uxr_read_framed_msg+0x352>
 801955e:	18a3      	adds	r3, r4, r2
 8019560:	7899      	ldrb	r1, [r3, #2]
 8019562:	297d      	cmp	r1, #125	; 0x7d
 8019564:	f000 8107 	beq.w	8019776 <uxr_read_framed_msg+0x402>
 8019568:	3201      	adds	r2, #1
 801956a:	232a      	movs	r3, #42	; 0x2a
 801956c:	297e      	cmp	r1, #126	; 0x7e
 801956e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019572:	fba5 c000 	umull	ip, r0, r5, r0
 8019576:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801957a:	fb03 2210 	mls	r2, r3, r0, r2
 801957e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019582:	f000 818a 	beq.w	801989a <uxr_read_framed_msg+0x526>
 8019586:	7863      	ldrb	r3, [r4, #1]
 8019588:	428b      	cmp	r3, r1
 801958a:	bf0c      	ite	eq
 801958c:	2303      	moveq	r3, #3
 801958e:	2300      	movne	r3, #0
 8019590:	7023      	strb	r3, [r4, #0]
 8019592:	e700      	b.n	8019396 <uxr_read_framed_msg+0x22>
 8019594:	2300      	movs	r3, #0
 8019596:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801959a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801959e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80195a2:	4299      	cmp	r1, r3
 80195a4:	d06a      	beq.n	801967c <uxr_read_framed_msg+0x308>
 80195a6:	18e2      	adds	r2, r4, r3
 80195a8:	7890      	ldrb	r0, [r2, #2]
 80195aa:	287d      	cmp	r0, #125	; 0x7d
 80195ac:	f000 8100 	beq.w	80197b0 <uxr_read_framed_msg+0x43c>
 80195b0:	3301      	adds	r3, #1
 80195b2:	212a      	movs	r1, #42	; 0x2a
 80195b4:	287e      	cmp	r0, #126	; 0x7e
 80195b6:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80195ba:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80195be:	fba5 c202 	umull	ip, r2, r5, r2
 80195c2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80195c6:	fb01 3312 	mls	r3, r1, r2, r3
 80195ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195ce:	d055      	beq.n	801967c <uxr_read_framed_msg+0x308>
 80195d0:	2302      	movs	r3, #2
 80195d2:	7023      	strb	r3, [r4, #0]
 80195d4:	e6df      	b.n	8019396 <uxr_read_framed_msg+0x22>
 80195d6:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 80195da:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80195de:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80195e2:	1c5a      	adds	r2, r3, #1
 80195e4:	459c      	cmp	ip, r3
 80195e6:	eb04 0103 	add.w	r1, r4, r3
 80195ea:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80195ee:	f43f af04 	beq.w	80193fa <uxr_read_framed_msg+0x86>
 80195f2:	fba5 0303 	umull	r0, r3, r5, r3
 80195f6:	7889      	ldrb	r1, [r1, #2]
 80195f8:	089b      	lsrs	r3, r3, #2
 80195fa:	297e      	cmp	r1, #126	; 0x7e
 80195fc:	fb0e 2313 	mls	r3, lr, r3, r2
 8019600:	b2db      	uxtb	r3, r3
 8019602:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019606:	d1ec      	bne.n	80195e2 <uxr_read_framed_msg+0x26e>
 8019608:	2301      	movs	r3, #1
 801960a:	7023      	strb	r3, [r4, #0]
 801960c:	e6c3      	b.n	8019396 <uxr_read_framed_msg+0x22>
 801960e:	1c50      	adds	r0, r2, #1
 8019610:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019614:	3202      	adds	r2, #2
 8019616:	0841      	lsrs	r1, r0, #1
 8019618:	fba5 c101 	umull	ip, r1, r5, r1
 801961c:	0889      	lsrs	r1, r1, #2
 801961e:	fb0b 0111 	mls	r1, fp, r1, r0
 8019622:	1860      	adds	r0, r4, r1
 8019624:	b2c9      	uxtb	r1, r1
 8019626:	458a      	cmp	sl, r1
 8019628:	f43f af42 	beq.w	80194b0 <uxr_read_framed_msg+0x13c>
 801962c:	0851      	lsrs	r1, r2, #1
 801962e:	7880      	ldrb	r0, [r0, #2]
 8019630:	fba5 a101 	umull	sl, r1, r5, r1
 8019634:	287e      	cmp	r0, #126	; 0x7e
 8019636:	f080 0c20 	eor.w	ip, r0, #32
 801963a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801963e:	fb0b 2211 	mls	r2, fp, r1, r2
 8019642:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019646:	f47f af14 	bne.w	8019472 <uxr_read_framed_msg+0xfe>
 801964a:	459e      	cmp	lr, r3
 801964c:	f43f af33 	beq.w	80194b6 <uxr_read_framed_msg+0x142>
 8019650:	2301      	movs	r3, #1
 8019652:	7023      	strb	r3, [r4, #0]
 8019654:	e69f      	b.n	8019396 <uxr_read_framed_msg+0x22>
 8019656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019658:	9300      	str	r3, [sp, #0]
 801965a:	2301      	movs	r3, #1
 801965c:	9301      	str	r3, [sp, #4]
 801965e:	464a      	mov	r2, r9
 8019660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019662:	4641      	mov	r1, r8
 8019664:	4620      	mov	r0, r4
 8019666:	f7ff fdf1 	bl	801924c <uxr_framing_read_transport>
 801966a:	2800      	cmp	r0, #0
 801966c:	f43f aec5 	beq.w	80193fa <uxr_read_framed_msg+0x86>
 8019670:	7823      	ldrb	r3, [r4, #0]
 8019672:	e690      	b.n	8019396 <uxr_read_framed_msg+0x22>
 8019674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	2302      	movs	r3, #2
 801967a:	e7ef      	b.n	801965c <uxr_read_framed_msg+0x2e8>
 801967c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801967e:	464a      	mov	r2, r9
 8019680:	4641      	mov	r1, r8
 8019682:	4620      	mov	r0, r4
 8019684:	9300      	str	r3, [sp, #0]
 8019686:	2304      	movs	r3, #4
 8019688:	9301      	str	r3, [sp, #4]
 801968a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801968c:	f7ff fdde 	bl	801924c <uxr_framing_read_transport>
 8019690:	2800      	cmp	r0, #0
 8019692:	d1ed      	bne.n	8019670 <uxr_read_framed_msg+0x2fc>
 8019694:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019698:	2b7e      	cmp	r3, #126	; 0x7e
 801969a:	d0e9      	beq.n	8019670 <uxr_read_framed_msg+0x2fc>
 801969c:	e6ad      	b.n	80193fa <uxr_read_framed_msg+0x86>
 801969e:	bf00      	nop
 80196a0:	30c30c31 	.word	0x30c30c31
 80196a4:	08025424 	.word	0x08025424
 80196a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196aa:	9300      	str	r3, [sp, #0]
 80196ac:	2305      	movs	r3, #5
 80196ae:	9301      	str	r3, [sp, #4]
 80196b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196b2:	f7ff fdcb 	bl	801924c <uxr_framing_read_transport>
 80196b6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80196ba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80196be:	429a      	cmp	r2, r3
 80196c0:	f43f ae9b 	beq.w	80193fa <uxr_read_framed_msg+0x86>
 80196c4:	e664      	b.n	8019390 <uxr_read_framed_msg+0x1c>
 80196c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196c8:	9300      	str	r3, [sp, #0]
 80196ca:	2303      	movs	r3, #3
 80196cc:	e7c6      	b.n	801965c <uxr_read_framed_msg+0x2e8>
 80196ce:	2305      	movs	r3, #5
 80196d0:	7023      	strb	r3, [r4, #0]
 80196d2:	e660      	b.n	8019396 <uxr_read_framed_msg+0x22>
 80196d4:	f43f aeef 	beq.w	80194b6 <uxr_read_framed_msg+0x142>
 80196d8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80196dc:	d094      	beq.n	8019608 <uxr_read_framed_msg+0x294>
 80196de:	ebae 0303 	sub.w	r3, lr, r3
 80196e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80196e4:	3302      	adds	r3, #2
 80196e6:	9200      	str	r2, [sp, #0]
 80196e8:	e7b8      	b.n	801965c <uxr_read_framed_msg+0x2e8>
 80196ea:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80196ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80196f0:	7013      	strb	r3, [r2, #0]
 80196f2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80196f4:	b003      	add	sp, #12
 80196f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196fa:	1c59      	adds	r1, r3, #1
 80196fc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019700:	084a      	lsrs	r2, r1, #1
 8019702:	fba5 e202 	umull	lr, r2, r5, r2
 8019706:	0892      	lsrs	r2, r2, #2
 8019708:	fb0c 1212 	mls	r2, ip, r2, r1
 801970c:	b2d1      	uxtb	r1, r2
 801970e:	4288      	cmp	r0, r1
 8019710:	d0b0      	beq.n	8019674 <uxr_read_framed_msg+0x300>
 8019712:	3302      	adds	r3, #2
 8019714:	4422      	add	r2, r4
 8019716:	7891      	ldrb	r1, [r2, #2]
 8019718:	085a      	lsrs	r2, r3, #1
 801971a:	fba5 0202 	umull	r0, r2, r5, r2
 801971e:	297e      	cmp	r1, #126	; 0x7e
 8019720:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019724:	fb0c 3312 	mls	r3, ip, r2, r3
 8019728:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801972c:	f000 80a1 	beq.w	8019872 <uxr_read_framed_msg+0x4fe>
 8019730:	f081 0120 	eor.w	r1, r1, #32
 8019734:	e680      	b.n	8019438 <uxr_read_framed_msg+0xc4>
 8019736:	f103 0c01 	add.w	ip, r3, #1
 801973a:	202a      	movs	r0, #42	; 0x2a
 801973c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019740:	fba5 e202 	umull	lr, r2, r5, r2
 8019744:	0892      	lsrs	r2, r2, #2
 8019746:	fb00 c212 	mls	r2, r0, r2, ip
 801974a:	fa5f fc82 	uxtb.w	ip, r2
 801974e:	4561      	cmp	r1, ip
 8019750:	d081      	beq.n	8019656 <uxr_read_framed_msg+0x2e2>
 8019752:	3302      	adds	r3, #2
 8019754:	4422      	add	r2, r4
 8019756:	0859      	lsrs	r1, r3, #1
 8019758:	7892      	ldrb	r2, [r2, #2]
 801975a:	fba5 c101 	umull	ip, r1, r5, r1
 801975e:	2a7e      	cmp	r2, #126	; 0x7e
 8019760:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019764:	fb00 3311 	mls	r3, r0, r1, r3
 8019768:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801976c:	f000 8091 	beq.w	8019892 <uxr_read_framed_msg+0x51e>
 8019770:	f082 0220 	eor.w	r2, r2, #32
 8019774:	e636      	b.n	80193e4 <uxr_read_framed_msg+0x70>
 8019776:	1c51      	adds	r1, r2, #1
 8019778:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801977c:	084b      	lsrs	r3, r1, #1
 801977e:	fba5 e303 	umull	lr, r3, r5, r3
 8019782:	089b      	lsrs	r3, r3, #2
 8019784:	fb0c 1313 	mls	r3, ip, r3, r1
 8019788:	b2d9      	uxtb	r1, r3
 801978a:	4288      	cmp	r0, r1
 801978c:	d09b      	beq.n	80196c6 <uxr_read_framed_msg+0x352>
 801978e:	3202      	adds	r2, #2
 8019790:	4423      	add	r3, r4
 8019792:	0850      	lsrs	r0, r2, #1
 8019794:	789b      	ldrb	r3, [r3, #2]
 8019796:	fba5 1000 	umull	r1, r0, r5, r0
 801979a:	2b7e      	cmp	r3, #126	; 0x7e
 801979c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80197a0:	fb0c 2210 	mls	r2, ip, r0, r2
 80197a4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80197a8:	d077      	beq.n	801989a <uxr_read_framed_msg+0x526>
 80197aa:	f083 0120 	eor.w	r1, r3, #32
 80197ae:	e6ea      	b.n	8019586 <uxr_read_framed_msg+0x212>
 80197b0:	f103 0c01 	add.w	ip, r3, #1
 80197b4:	202a      	movs	r0, #42	; 0x2a
 80197b6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80197ba:	fba5 e202 	umull	lr, r2, r5, r2
 80197be:	0892      	lsrs	r2, r2, #2
 80197c0:	fb00 c212 	mls	r2, r0, r2, ip
 80197c4:	fa5f fc82 	uxtb.w	ip, r2
 80197c8:	4561      	cmp	r1, ip
 80197ca:	f43f af57 	beq.w	801967c <uxr_read_framed_msg+0x308>
 80197ce:	3302      	adds	r3, #2
 80197d0:	4422      	add	r2, r4
 80197d2:	7891      	ldrb	r1, [r2, #2]
 80197d4:	085a      	lsrs	r2, r3, #1
 80197d6:	fba5 c202 	umull	ip, r2, r5, r2
 80197da:	297e      	cmp	r1, #126	; 0x7e
 80197dc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80197e0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80197e4:	fb00 3312 	mls	r3, r0, r2, r3
 80197e8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80197ec:	f43f af46 	beq.w	801967c <uxr_read_framed_msg+0x308>
 80197f0:	f081 0120 	eor.w	r1, r1, #32
 80197f4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 80197f8:	e6ea      	b.n	80195d0 <uxr_read_framed_msg+0x25c>
 80197fa:	1c59      	adds	r1, r3, #1
 80197fc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019800:	084a      	lsrs	r2, r1, #1
 8019802:	fba5 e202 	umull	lr, r2, r5, r2
 8019806:	0892      	lsrs	r2, r2, #2
 8019808:	fb0c 1212 	mls	r2, ip, r2, r1
 801980c:	b2d1      	uxtb	r1, r2
 801980e:	4288      	cmp	r0, r1
 8019810:	f43f af21 	beq.w	8019656 <uxr_read_framed_msg+0x2e2>
 8019814:	3302      	adds	r3, #2
 8019816:	4422      	add	r2, r4
 8019818:	7891      	ldrb	r1, [r2, #2]
 801981a:	085a      	lsrs	r2, r3, #1
 801981c:	fba5 0202 	umull	r0, r2, r5, r2
 8019820:	297e      	cmp	r1, #126	; 0x7e
 8019822:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019826:	fb0c 3312 	mls	r3, ip, r2, r3
 801982a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801982e:	d030      	beq.n	8019892 <uxr_read_framed_msg+0x51e>
 8019830:	f081 0120 	eor.w	r1, r1, #32
 8019834:	e65d      	b.n	80194f2 <uxr_read_framed_msg+0x17e>
 8019836:	1c59      	adds	r1, r3, #1
 8019838:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801983c:	084a      	lsrs	r2, r1, #1
 801983e:	fba5 e202 	umull	lr, r2, r5, r2
 8019842:	0892      	lsrs	r2, r2, #2
 8019844:	fb0c 1212 	mls	r2, ip, r2, r1
 8019848:	b2d1      	uxtb	r1, r2
 801984a:	4288      	cmp	r0, r1
 801984c:	f43f af12 	beq.w	8019674 <uxr_read_framed_msg+0x300>
 8019850:	3302      	adds	r3, #2
 8019852:	4422      	add	r2, r4
 8019854:	7891      	ldrb	r1, [r2, #2]
 8019856:	085a      	lsrs	r2, r3, #1
 8019858:	fba5 0202 	umull	r0, r2, r5, r2
 801985c:	297e      	cmp	r1, #126	; 0x7e
 801985e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019862:	fb0c 3312 	mls	r3, ip, r2, r3
 8019866:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801986a:	d002      	beq.n	8019872 <uxr_read_framed_msg+0x4fe>
 801986c:	f081 0120 	eor.w	r1, r1, #32
 8019870:	e66a      	b.n	8019548 <uxr_read_framed_msg+0x1d4>
 8019872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019874:	9300      	str	r3, [sp, #0]
 8019876:	2302      	movs	r3, #2
 8019878:	9301      	str	r3, [sp, #4]
 801987a:	464a      	mov	r2, r9
 801987c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801987e:	4641      	mov	r1, r8
 8019880:	4620      	mov	r0, r4
 8019882:	f7ff fce3 	bl	801924c <uxr_framing_read_transport>
 8019886:	2800      	cmp	r0, #0
 8019888:	f47f aef2 	bne.w	8019670 <uxr_read_framed_msg+0x2fc>
 801988c:	2301      	movs	r3, #1
 801988e:	7023      	strb	r3, [r4, #0]
 8019890:	e581      	b.n	8019396 <uxr_read_framed_msg+0x22>
 8019892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019894:	9300      	str	r3, [sp, #0]
 8019896:	2301      	movs	r3, #1
 8019898:	e7ee      	b.n	8019878 <uxr_read_framed_msg+0x504>
 801989a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801989c:	9300      	str	r3, [sp, #0]
 801989e:	2303      	movs	r3, #3
 80198a0:	e7ea      	b.n	8019878 <uxr_read_framed_msg+0x504>
 80198a2:	bf00      	nop

080198a4 <uxr_stream_id>:
 80198a4:	2901      	cmp	r1, #1
 80198a6:	4684      	mov	ip, r0
 80198a8:	b500      	push	{lr}
 80198aa:	b083      	sub	sp, #12
 80198ac:	d01f      	beq.n	80198ee <uxr_stream_id+0x4a>
 80198ae:	2902      	cmp	r1, #2
 80198b0:	f04f 0e00 	mov.w	lr, #0
 80198b4:	d020      	beq.n	80198f8 <uxr_stream_id+0x54>
 80198b6:	2300      	movs	r3, #0
 80198b8:	2000      	movs	r0, #0
 80198ba:	f36e 0307 	bfi	r3, lr, #0, #8
 80198be:	f36c 230f 	bfi	r3, ip, #8, #8
 80198c2:	f361 4317 	bfi	r3, r1, #16, #8
 80198c6:	f362 631f 	bfi	r3, r2, #24, #8
 80198ca:	fa5f fc83 	uxtb.w	ip, r3
 80198ce:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80198d2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80198d6:	0e1b      	lsrs	r3, r3, #24
 80198d8:	f36c 0007 	bfi	r0, ip, #0, #8
 80198dc:	f361 200f 	bfi	r0, r1, #8, #8
 80198e0:	f362 4017 	bfi	r0, r2, #16, #8
 80198e4:	f363 601f 	bfi	r0, r3, #24, #8
 80198e8:	b003      	add	sp, #12
 80198ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80198ee:	f100 0e01 	add.w	lr, r0, #1
 80198f2:	fa5f fe8e 	uxtb.w	lr, lr
 80198f6:	e7de      	b.n	80198b6 <uxr_stream_id+0x12>
 80198f8:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 80198fc:	e7db      	b.n	80198b6 <uxr_stream_id+0x12>
 80198fe:	bf00      	nop

08019900 <uxr_stream_id_from_raw>:
 8019900:	b082      	sub	sp, #8
 8019902:	b130      	cbz	r0, 8019912 <uxr_stream_id_from_raw+0x12>
 8019904:	0603      	lsls	r3, r0, #24
 8019906:	d421      	bmi.n	801994c <uxr_stream_id_from_raw+0x4c>
 8019908:	1e42      	subs	r2, r0, #1
 801990a:	f04f 0c01 	mov.w	ip, #1
 801990e:	b2d2      	uxtb	r2, r2
 8019910:	e001      	b.n	8019916 <uxr_stream_id_from_raw+0x16>
 8019912:	4684      	mov	ip, r0
 8019914:	4602      	mov	r2, r0
 8019916:	2300      	movs	r3, #0
 8019918:	f360 0307 	bfi	r3, r0, #0, #8
 801991c:	2000      	movs	r0, #0
 801991e:	f362 230f 	bfi	r3, r2, #8, #8
 8019922:	f36c 4317 	bfi	r3, ip, #16, #8
 8019926:	f361 631f 	bfi	r3, r1, #24, #8
 801992a:	fa5f fc83 	uxtb.w	ip, r3
 801992e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019932:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019936:	0e1b      	lsrs	r3, r3, #24
 8019938:	f36c 0007 	bfi	r0, ip, #0, #8
 801993c:	f361 200f 	bfi	r0, r1, #8, #8
 8019940:	f362 4017 	bfi	r0, r2, #16, #8
 8019944:	f363 601f 	bfi	r0, r3, #24, #8
 8019948:	b002      	add	sp, #8
 801994a:	4770      	bx	lr
 801994c:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8019950:	f04f 0c02 	mov.w	ip, #2
 8019954:	e7df      	b.n	8019916 <uxr_stream_id_from_raw+0x16>
 8019956:	bf00      	nop

08019958 <uxr_init_stream_storage>:
 8019958:	2300      	movs	r3, #0
 801995a:	7403      	strb	r3, [r0, #16]
 801995c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019960:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019964:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8019968:	4770      	bx	lr
 801996a:	bf00      	nop

0801996c <uxr_reset_stream_storage>:
 801996c:	b570      	push	{r4, r5, r6, lr}
 801996e:	7c03      	ldrb	r3, [r0, #16]
 8019970:	4604      	mov	r4, r0
 8019972:	b14b      	cbz	r3, 8019988 <uxr_reset_stream_storage+0x1c>
 8019974:	4606      	mov	r6, r0
 8019976:	2500      	movs	r5, #0
 8019978:	4630      	mov	r0, r6
 801997a:	3501      	adds	r5, #1
 801997c:	f004 fea6 	bl	801e6cc <uxr_reset_output_best_effort_stream>
 8019980:	7c23      	ldrb	r3, [r4, #16]
 8019982:	3610      	adds	r6, #16
 8019984:	42ab      	cmp	r3, r5
 8019986:	d8f7      	bhi.n	8019978 <uxr_reset_stream_storage+0xc>
 8019988:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801998c:	b15b      	cbz	r3, 80199a6 <uxr_reset_stream_storage+0x3a>
 801998e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019992:	2500      	movs	r5, #0
 8019994:	4630      	mov	r0, r6
 8019996:	3501      	adds	r5, #1
 8019998:	f004 fc9e 	bl	801e2d8 <uxr_reset_input_best_effort_stream>
 801999c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80199a0:	3602      	adds	r6, #2
 80199a2:	42ab      	cmp	r3, r5
 80199a4:	d8f6      	bhi.n	8019994 <uxr_reset_stream_storage+0x28>
 80199a6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80199aa:	b15b      	cbz	r3, 80199c4 <uxr_reset_stream_storage+0x58>
 80199ac:	f104 0618 	add.w	r6, r4, #24
 80199b0:	2500      	movs	r5, #0
 80199b2:	4630      	mov	r0, r6
 80199b4:	3501      	adds	r5, #1
 80199b6:	f004 ff37 	bl	801e828 <uxr_reset_output_reliable_stream>
 80199ba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80199be:	3628      	adds	r6, #40	; 0x28
 80199c0:	42ab      	cmp	r3, r5
 80199c2:	d8f6      	bhi.n	80199b2 <uxr_reset_stream_storage+0x46>
 80199c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80199c8:	b15b      	cbz	r3, 80199e2 <uxr_reset_stream_storage+0x76>
 80199ca:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80199ce:	2500      	movs	r5, #0
 80199d0:	4630      	mov	r0, r6
 80199d2:	3501      	adds	r5, #1
 80199d4:	f004 fcec 	bl	801e3b0 <uxr_reset_input_reliable_stream>
 80199d8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80199dc:	3618      	adds	r6, #24
 80199de:	42ab      	cmp	r3, r5
 80199e0:	d8f6      	bhi.n	80199d0 <uxr_reset_stream_storage+0x64>
 80199e2:	bd70      	pop	{r4, r5, r6, pc}

080199e4 <uxr_add_output_best_effort_buffer>:
 80199e4:	b510      	push	{r4, lr}
 80199e6:	7c04      	ldrb	r4, [r0, #16]
 80199e8:	b082      	sub	sp, #8
 80199ea:	f104 0c01 	add.w	ip, r4, #1
 80199ee:	f880 c010 	strb.w	ip, [r0, #16]
 80199f2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80199f6:	f004 fe5f 	bl	801e6b8 <uxr_init_output_best_effort_stream>
 80199fa:	2201      	movs	r2, #1
 80199fc:	4620      	mov	r0, r4
 80199fe:	4611      	mov	r1, r2
 8019a00:	b002      	add	sp, #8
 8019a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a06:	f7ff bf4d 	b.w	80198a4 <uxr_stream_id>
 8019a0a:	bf00      	nop

08019a0c <uxr_add_output_reliable_buffer>:
 8019a0c:	b510      	push	{r4, lr}
 8019a0e:	b084      	sub	sp, #16
 8019a10:	4684      	mov	ip, r0
 8019a12:	2028      	movs	r0, #40	; 0x28
 8019a14:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8019a18:	9400      	str	r4, [sp, #0]
 8019a1a:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8019a1e:	fb00 c004 	mla	r0, r0, r4, ip
 8019a22:	f104 0e01 	add.w	lr, r4, #1
 8019a26:	3018      	adds	r0, #24
 8019a28:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8019a2c:	f004 fec4 	bl	801e7b8 <uxr_init_output_reliable_stream>
 8019a30:	2201      	movs	r2, #1
 8019a32:	2102      	movs	r1, #2
 8019a34:	4620      	mov	r0, r4
 8019a36:	b004      	add	sp, #16
 8019a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a3c:	f7ff bf32 	b.w	80198a4 <uxr_stream_id>

08019a40 <uxr_add_input_best_effort_buffer>:
 8019a40:	b510      	push	{r4, lr}
 8019a42:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8019a46:	b082      	sub	sp, #8
 8019a48:	1c62      	adds	r2, r4, #1
 8019a4a:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8019a4e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019a52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019a56:	f004 fc3b 	bl	801e2d0 <uxr_init_input_best_effort_stream>
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	2101      	movs	r1, #1
 8019a5e:	4620      	mov	r0, r4
 8019a60:	b002      	add	sp, #8
 8019a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a66:	f7ff bf1d 	b.w	80198a4 <uxr_stream_id>
 8019a6a:	bf00      	nop

08019a6c <uxr_add_input_reliable_buffer>:
 8019a6c:	b510      	push	{r4, lr}
 8019a6e:	b084      	sub	sp, #16
 8019a70:	4684      	mov	ip, r0
 8019a72:	2018      	movs	r0, #24
 8019a74:	9c06      	ldr	r4, [sp, #24]
 8019a76:	9400      	str	r4, [sp, #0]
 8019a78:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8019a7c:	fb00 c004 	mla	r0, r0, r4, ip
 8019a80:	f104 0e01 	add.w	lr, r4, #1
 8019a84:	3048      	adds	r0, #72	; 0x48
 8019a86:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8019a8a:	f004 fc6b 	bl	801e364 <uxr_init_input_reliable_stream>
 8019a8e:	2200      	movs	r2, #0
 8019a90:	2102      	movs	r1, #2
 8019a92:	4620      	mov	r0, r4
 8019a94:	b004      	add	sp, #16
 8019a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a9a:	f7ff bf03 	b.w	80198a4 <uxr_stream_id>
 8019a9e:	bf00      	nop

08019aa0 <uxr_get_output_best_effort_stream>:
 8019aa0:	7c03      	ldrb	r3, [r0, #16]
 8019aa2:	428b      	cmp	r3, r1
 8019aa4:	bf8c      	ite	hi
 8019aa6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8019aaa:	2000      	movls	r0, #0
 8019aac:	4770      	bx	lr
 8019aae:	bf00      	nop

08019ab0 <uxr_get_output_reliable_stream>:
 8019ab0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019ab4:	428b      	cmp	r3, r1
 8019ab6:	d904      	bls.n	8019ac2 <uxr_get_output_reliable_stream+0x12>
 8019ab8:	2328      	movs	r3, #40	; 0x28
 8019aba:	fb03 0001 	mla	r0, r3, r1, r0
 8019abe:	3018      	adds	r0, #24
 8019ac0:	4770      	bx	lr
 8019ac2:	2000      	movs	r0, #0
 8019ac4:	4770      	bx	lr
 8019ac6:	bf00      	nop

08019ac8 <uxr_get_input_best_effort_stream>:
 8019ac8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8019acc:	428b      	cmp	r3, r1
 8019ace:	d903      	bls.n	8019ad8 <uxr_get_input_best_effort_stream+0x10>
 8019ad0:	3121      	adds	r1, #33	; 0x21
 8019ad2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8019ad6:	4770      	bx	lr
 8019ad8:	2000      	movs	r0, #0
 8019ada:	4770      	bx	lr

08019adc <uxr_get_input_reliable_stream>:
 8019adc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8019ae0:	428b      	cmp	r3, r1
 8019ae2:	d904      	bls.n	8019aee <uxr_get_input_reliable_stream+0x12>
 8019ae4:	2318      	movs	r3, #24
 8019ae6:	fb03 0001 	mla	r0, r3, r1, r0
 8019aea:	3048      	adds	r0, #72	; 0x48
 8019aec:	4770      	bx	lr
 8019aee:	2000      	movs	r0, #0
 8019af0:	4770      	bx	lr
 8019af2:	bf00      	nop

08019af4 <uxr_output_streams_confirmed>:
 8019af4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8019af8:	b183      	cbz	r3, 8019b1c <uxr_output_streams_confirmed+0x28>
 8019afa:	b570      	push	{r4, r5, r6, lr}
 8019afc:	4606      	mov	r6, r0
 8019afe:	f100 0518 	add.w	r5, r0, #24
 8019b02:	2400      	movs	r4, #0
 8019b04:	e000      	b.n	8019b08 <uxr_output_streams_confirmed+0x14>
 8019b06:	b140      	cbz	r0, 8019b1a <uxr_output_streams_confirmed+0x26>
 8019b08:	4628      	mov	r0, r5
 8019b0a:	3401      	adds	r4, #1
 8019b0c:	f005 f900 	bl	801ed10 <uxr_is_output_up_to_date>
 8019b10:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8019b14:	3528      	adds	r5, #40	; 0x28
 8019b16:	42a3      	cmp	r3, r4
 8019b18:	d8f5      	bhi.n	8019b06 <uxr_output_streams_confirmed+0x12>
 8019b1a:	bd70      	pop	{r4, r5, r6, pc}
 8019b1c:	2001      	movs	r0, #1
 8019b1e:	4770      	bx	lr

08019b20 <uxr_buffer_submessage_header>:
 8019b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b22:	460e      	mov	r6, r1
 8019b24:	2104      	movs	r1, #4
 8019b26:	4604      	mov	r4, r0
 8019b28:	4615      	mov	r5, r2
 8019b2a:	461f      	mov	r7, r3
 8019b2c:	f7f9 faa8 	bl	8013080 <ucdr_align_to>
 8019b30:	2301      	movs	r3, #1
 8019b32:	4631      	mov	r1, r6
 8019b34:	4620      	mov	r0, r4
 8019b36:	ea47 0203 	orr.w	r2, r7, r3
 8019b3a:	7523      	strb	r3, [r4, #20]
 8019b3c:	462b      	mov	r3, r5
 8019b3e:	f000 fa29 	bl	8019f94 <uxr_serialize_submessage_header>
 8019b42:	4620      	mov	r0, r4
 8019b44:	f7f9 fab2 	bl	80130ac <ucdr_buffer_remaining>
 8019b48:	42a8      	cmp	r0, r5
 8019b4a:	bf34      	ite	cc
 8019b4c:	2000      	movcc	r0, #0
 8019b4e:	2001      	movcs	r0, #1
 8019b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b52:	bf00      	nop

08019b54 <uxr_read_submessage_header>:
 8019b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b58:	4604      	mov	r4, r0
 8019b5a:	460d      	mov	r5, r1
 8019b5c:	2104      	movs	r1, #4
 8019b5e:	4616      	mov	r6, r2
 8019b60:	4698      	mov	r8, r3
 8019b62:	f7f9 fa8d 	bl	8013080 <ucdr_align_to>
 8019b66:	4620      	mov	r0, r4
 8019b68:	f7f9 faa0 	bl	80130ac <ucdr_buffer_remaining>
 8019b6c:	2803      	cmp	r0, #3
 8019b6e:	bf8c      	ite	hi
 8019b70:	2701      	movhi	r7, #1
 8019b72:	2700      	movls	r7, #0
 8019b74:	d802      	bhi.n	8019b7c <uxr_read_submessage_header+0x28>
 8019b76:	4638      	mov	r0, r7
 8019b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b7c:	4633      	mov	r3, r6
 8019b7e:	4642      	mov	r2, r8
 8019b80:	4620      	mov	r0, r4
 8019b82:	4629      	mov	r1, r5
 8019b84:	f000 fa1a 	bl	8019fbc <uxr_deserialize_submessage_header>
 8019b88:	f898 3000 	ldrb.w	r3, [r8]
 8019b8c:	4638      	mov	r0, r7
 8019b8e:	f003 0201 	and.w	r2, r3, #1
 8019b92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8019b96:	f888 3000 	strb.w	r3, [r8]
 8019b9a:	7522      	strb	r2, [r4, #20]
 8019b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019ba0 <uxr_submessage_padding>:
 8019ba0:	f010 0003 	ands.w	r0, r0, #3
 8019ba4:	bf18      	it	ne
 8019ba6:	f1c0 0004 	rsbne	r0, r0, #4
 8019baa:	4770      	bx	lr

08019bac <uxr_millis>:
 8019bac:	b510      	push	{r4, lr}
 8019bae:	b084      	sub	sp, #16
 8019bb0:	2001      	movs	r0, #1
 8019bb2:	4669      	mov	r1, sp
 8019bb4:	f7e9 fcf0 	bl	8003598 <clock_gettime>
 8019bb8:	4908      	ldr	r1, [pc, #32]	; (8019bdc <uxr_millis+0x30>)
 8019bba:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8019bbe:	fba0 0301 	umull	r0, r3, r0, r1
 8019bc2:	1900      	adds	r0, r0, r4
 8019bc4:	fb01 3102 	mla	r1, r1, r2, r3
 8019bc8:	4a05      	ldr	r2, [pc, #20]	; (8019be0 <uxr_millis+0x34>)
 8019bca:	f04f 0300 	mov.w	r3, #0
 8019bce:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8019bd2:	f7e6 fd59 	bl	8000688 <__aeabi_ldivmod>
 8019bd6:	b004      	add	sp, #16
 8019bd8:	bd10      	pop	{r4, pc}
 8019bda:	bf00      	nop
 8019bdc:	3b9aca00 	.word	0x3b9aca00
 8019be0:	000f4240 	.word	0x000f4240

08019be4 <uxr_nanos>:
 8019be4:	b510      	push	{r4, lr}
 8019be6:	b084      	sub	sp, #16
 8019be8:	2001      	movs	r0, #1
 8019bea:	4669      	mov	r1, sp
 8019bec:	f7e9 fcd4 	bl	8003598 <clock_gettime>
 8019bf0:	4a06      	ldr	r2, [pc, #24]	; (8019c0c <uxr_nanos+0x28>)
 8019bf2:	9800      	ldr	r0, [sp, #0]
 8019bf4:	9902      	ldr	r1, [sp, #8]
 8019bf6:	fba0 0302 	umull	r0, r3, r0, r2
 8019bfa:	9c01      	ldr	r4, [sp, #4]
 8019bfc:	1840      	adds	r0, r0, r1
 8019bfe:	fb02 3304 	mla	r3, r2, r4, r3
 8019c02:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8019c06:	b004      	add	sp, #16
 8019c08:	bd10      	pop	{r4, pc}
 8019c0a:	bf00      	nop
 8019c0c:	3b9aca00 	.word	0x3b9aca00

08019c10 <on_full_output_buffer_fragmented>:
 8019c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c14:	460c      	mov	r4, r1
 8019c16:	b08a      	sub	sp, #40	; 0x28
 8019c18:	4606      	mov	r6, r0
 8019c1a:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8019c1e:	f104 0008 	add.w	r0, r4, #8
 8019c22:	f7ff ff45 	bl	8019ab0 <uxr_get_output_reliable_stream>
 8019c26:	4605      	mov	r5, r0
 8019c28:	f005 f87c 	bl	801ed24 <get_available_free_slots>
 8019c2c:	b968      	cbnz	r0, 8019c4a <on_full_output_buffer_fragmented+0x3a>
 8019c2e:	4620      	mov	r0, r4
 8019c30:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8019c34:	4798      	blx	r3
 8019c36:	b918      	cbnz	r0, 8019c40 <on_full_output_buffer_fragmented+0x30>
 8019c38:	2001      	movs	r0, #1
 8019c3a:	b00a      	add	sp, #40	; 0x28
 8019c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c40:	4628      	mov	r0, r5
 8019c42:	f005 f86f 	bl	801ed24 <get_available_free_slots>
 8019c46:	2800      	cmp	r0, #0
 8019c48:	d0f6      	beq.n	8019c38 <on_full_output_buffer_fragmented+0x28>
 8019c4a:	8929      	ldrh	r1, [r5, #8]
 8019c4c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8019c50:	89eb      	ldrh	r3, [r5, #14]
 8019c52:	7b28      	ldrb	r0, [r5, #12]
 8019c54:	686f      	ldr	r7, [r5, #4]
 8019c56:	1a12      	subs	r2, r2, r0
 8019c58:	fbb3 f0f1 	udiv	r0, r3, r1
 8019c5c:	fbb7 f7f1 	udiv	r7, r7, r1
 8019c60:	fb01 3110 	mls	r1, r1, r0, r3
 8019c64:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8019c68:	b289      	uxth	r1, r1
 8019c6a:	fb07 f101 	mul.w	r1, r7, r1
 8019c6e:	3f04      	subs	r7, #4
 8019c70:	443a      	add	r2, r7
 8019c72:	3104      	adds	r1, #4
 8019c74:	fa1f f882 	uxth.w	r8, r2
 8019c78:	463a      	mov	r2, r7
 8019c7a:	eba3 0308 	sub.w	r3, r3, r8
 8019c7e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8019c82:	682b      	ldr	r3, [r5, #0]
 8019c84:	4419      	add	r1, r3
 8019c86:	2300      	movs	r3, #0
 8019c88:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8019c8c:	9000      	str	r0, [sp, #0]
 8019c8e:	a802      	add	r0, sp, #8
 8019c90:	f7f9 f9c8 	bl	8013024 <ucdr_init_buffer_origin_offset>
 8019c94:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019c98:	f102 0308 	add.w	r3, r2, #8
 8019c9c:	42bb      	cmp	r3, r7
 8019c9e:	d927      	bls.n	8019cf0 <on_full_output_buffer_fragmented+0xe0>
 8019ca0:	4642      	mov	r2, r8
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	210d      	movs	r1, #13
 8019ca6:	a802      	add	r0, sp, #8
 8019ca8:	f7ff ff3a 	bl	8019b20 <uxr_buffer_submessage_header>
 8019cac:	8929      	ldrh	r1, [r5, #8]
 8019cae:	89eb      	ldrh	r3, [r5, #14]
 8019cb0:	686a      	ldr	r2, [r5, #4]
 8019cb2:	fbb3 f0f1 	udiv	r0, r3, r1
 8019cb6:	fbb2 f2f1 	udiv	r2, r2, r1
 8019cba:	fb01 3310 	mls	r3, r1, r0, r3
 8019cbe:	b29b      	uxth	r3, r3
 8019cc0:	fb02 f303 	mul.w	r3, r2, r3
 8019cc4:	682a      	ldr	r2, [r5, #0]
 8019cc6:	50d7      	str	r7, [r2, r3]
 8019cc8:	2101      	movs	r1, #1
 8019cca:	89e8      	ldrh	r0, [r5, #14]
 8019ccc:	f005 f84c 	bl	801ed68 <uxr_seq_num_add>
 8019cd0:	9904      	ldr	r1, [sp, #16]
 8019cd2:	9a03      	ldr	r2, [sp, #12]
 8019cd4:	81e8      	strh	r0, [r5, #14]
 8019cd6:	4630      	mov	r0, r6
 8019cd8:	1a52      	subs	r2, r2, r1
 8019cda:	f7f9 f9b5 	bl	8013048 <ucdr_init_buffer>
 8019cde:	4630      	mov	r0, r6
 8019ce0:	4622      	mov	r2, r4
 8019ce2:	490f      	ldr	r1, [pc, #60]	; (8019d20 <on_full_output_buffer_fragmented+0x110>)
 8019ce4:	f7f9 f984 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 8019ce8:	2000      	movs	r0, #0
 8019cea:	b00a      	add	sp, #40	; 0x28
 8019cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cf0:	b292      	uxth	r2, r2
 8019cf2:	2302      	movs	r3, #2
 8019cf4:	210d      	movs	r1, #13
 8019cf6:	a802      	add	r0, sp, #8
 8019cf8:	f7ff ff12 	bl	8019b20 <uxr_buffer_submessage_header>
 8019cfc:	8928      	ldrh	r0, [r5, #8]
 8019cfe:	89eb      	ldrh	r3, [r5, #14]
 8019d00:	6869      	ldr	r1, [r5, #4]
 8019d02:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8019d06:	fbb3 f7f0 	udiv	r7, r3, r0
 8019d0a:	fbb1 f1f0 	udiv	r1, r1, r0
 8019d0e:	fb00 3317 	mls	r3, r0, r7, r3
 8019d12:	3208      	adds	r2, #8
 8019d14:	b29b      	uxth	r3, r3
 8019d16:	fb01 f303 	mul.w	r3, r1, r3
 8019d1a:	6829      	ldr	r1, [r5, #0]
 8019d1c:	50ca      	str	r2, [r1, r3]
 8019d1e:	e7d3      	b.n	8019cc8 <on_full_output_buffer_fragmented+0xb8>
 8019d20:	08019c11 	.word	0x08019c11

08019d24 <uxr_prepare_output_stream>:
 8019d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d26:	b087      	sub	sp, #28
 8019d28:	2707      	movs	r7, #7
 8019d2a:	2500      	movs	r5, #0
 8019d2c:	461c      	mov	r4, r3
 8019d2e:	4606      	mov	r6, r0
 8019d30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8019d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019d36:	e9cd 7500 	strd	r7, r5, [sp]
 8019d3a:	3204      	adds	r2, #4
 8019d3c:	f7fe ffc8 	bl	8018cd0 <uxr_prepare_stream_to_write_submessage>
 8019d40:	f080 0201 	eor.w	r2, r0, #1
 8019d44:	b2d2      	uxtb	r2, r2
 8019d46:	75a2      	strb	r2, [r4, #22]
 8019d48:	b112      	cbz	r2, 8019d50 <uxr_prepare_output_stream+0x2c>
 8019d4a:	4628      	mov	r0, r5
 8019d4c:	b007      	add	sp, #28
 8019d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d50:	aa05      	add	r2, sp, #20
 8019d52:	9902      	ldr	r1, [sp, #8]
 8019d54:	4630      	mov	r0, r6
 8019d56:	f7ff f8f7 	bl	8018f48 <uxr_init_base_object_request>
 8019d5a:	a905      	add	r1, sp, #20
 8019d5c:	4605      	mov	r5, r0
 8019d5e:	4620      	mov	r0, r4
 8019d60:	f001 f8bc 	bl	801aedc <uxr_serialize_WRITE_DATA_Payload_Data>
 8019d64:	69a6      	ldr	r6, [r4, #24]
 8019d66:	69e7      	ldr	r7, [r4, #28]
 8019d68:	4620      	mov	r0, r4
 8019d6a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8019d6e:	1a52      	subs	r2, r2, r1
 8019d70:	f7f9 f96a 	bl	8013048 <ucdr_init_buffer>
 8019d74:	4620      	mov	r0, r4
 8019d76:	463a      	mov	r2, r7
 8019d78:	4631      	mov	r1, r6
 8019d7a:	f7f9 f939 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 8019d7e:	4628      	mov	r0, r5
 8019d80:	b007      	add	sp, #28
 8019d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d84 <uxr_prepare_output_stream_fragmented>:
 8019d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d88:	b091      	sub	sp, #68	; 0x44
 8019d8a:	4605      	mov	r5, r0
 8019d8c:	3008      	adds	r0, #8
 8019d8e:	461e      	mov	r6, r3
 8019d90:	9105      	str	r1, [sp, #20]
 8019d92:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019d96:	9204      	str	r2, [sp, #16]
 8019d98:	f7ff fe8a 	bl	8019ab0 <uxr_get_output_reliable_stream>
 8019d9c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8019da0:	2b01      	cmp	r3, #1
 8019da2:	f000 8093 	beq.w	8019ecc <uxr_prepare_output_stream_fragmented+0x148>
 8019da6:	4604      	mov	r4, r0
 8019da8:	2800      	cmp	r0, #0
 8019daa:	f000 808f 	beq.w	8019ecc <uxr_prepare_output_stream_fragmented+0x148>
 8019dae:	f004 ffb9 	bl	801ed24 <get_available_free_slots>
 8019db2:	2800      	cmp	r0, #0
 8019db4:	f000 8085 	beq.w	8019ec2 <uxr_prepare_output_stream_fragmented+0x13e>
 8019db8:	8923      	ldrh	r3, [r4, #8]
 8019dba:	89e7      	ldrh	r7, [r4, #14]
 8019dbc:	6862      	ldr	r2, [r4, #4]
 8019dbe:	fbb7 f9f3 	udiv	r9, r7, r3
 8019dc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8019dc6:	fb03 7919 	mls	r9, r3, r9, r7
 8019dca:	6823      	ldr	r3, [r4, #0]
 8019dcc:	f1a2 0b04 	sub.w	fp, r2, #4
 8019dd0:	9203      	str	r2, [sp, #12]
 8019dd2:	fa1f f989 	uxth.w	r9, r9
 8019dd6:	fb02 f909 	mul.w	r9, r2, r9
 8019dda:	f109 0904 	add.w	r9, r9, #4
 8019dde:	4499      	add	r9, r3
 8019de0:	7b23      	ldrb	r3, [r4, #12]
 8019de2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8019de6:	4543      	cmp	r3, r8
 8019de8:	d37c      	bcc.n	8019ee4 <uxr_prepare_output_stream_fragmented+0x160>
 8019dea:	f1ab 0a04 	sub.w	sl, fp, #4
 8019dee:	465a      	mov	r2, fp
 8019df0:	4649      	mov	r1, r9
 8019df2:	a808      	add	r0, sp, #32
 8019df4:	ebaa 0a03 	sub.w	sl, sl, r3
 8019df8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019dfa:	f8cd 8000 	str.w	r8, [sp]
 8019dfe:	3308      	adds	r3, #8
 8019e00:	fa1f fa8a 	uxth.w	sl, sl
 8019e04:	9302      	str	r3, [sp, #8]
 8019e06:	2300      	movs	r3, #0
 8019e08:	f7f9 f90c 	bl	8013024 <ucdr_init_buffer_origin_offset>
 8019e0c:	9b02      	ldr	r3, [sp, #8]
 8019e0e:	4652      	mov	r2, sl
 8019e10:	210d      	movs	r1, #13
 8019e12:	455b      	cmp	r3, fp
 8019e14:	bf34      	ite	cc
 8019e16:	2302      	movcc	r3, #2
 8019e18:	2300      	movcs	r3, #0
 8019e1a:	a808      	add	r0, sp, #32
 8019e1c:	f7ff fe80 	bl	8019b20 <uxr_buffer_submessage_header>
 8019e20:	8921      	ldrh	r1, [r4, #8]
 8019e22:	6863      	ldr	r3, [r4, #4]
 8019e24:	4638      	mov	r0, r7
 8019e26:	fbb7 f2f1 	udiv	r2, r7, r1
 8019e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e2e:	fb01 7212 	mls	r2, r1, r2, r7
 8019e32:	2101      	movs	r1, #1
 8019e34:	b292      	uxth	r2, r2
 8019e36:	fb02 f303 	mul.w	r3, r2, r3
 8019e3a:	6822      	ldr	r2, [r4, #0]
 8019e3c:	f842 b003 	str.w	fp, [r2, r3]
 8019e40:	f004 ff92 	bl	801ed68 <uxr_seq_num_add>
 8019e44:	9b03      	ldr	r3, [sp, #12]
 8019e46:	f108 0104 	add.w	r1, r8, #4
 8019e4a:	4607      	mov	r7, r0
 8019e4c:	f1a3 0208 	sub.w	r2, r3, #8
 8019e50:	4630      	mov	r0, r6
 8019e52:	4449      	add	r1, r9
 8019e54:	eba2 0208 	sub.w	r2, r2, r8
 8019e58:	f7f9 f8f6 	bl	8013048 <ucdr_init_buffer>
 8019e5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019e5e:	2107      	movs	r1, #7
 8019e60:	81e7      	strh	r7, [r4, #14]
 8019e62:	1d1a      	adds	r2, r3, #4
 8019e64:	2300      	movs	r3, #0
 8019e66:	4630      	mov	r0, r6
 8019e68:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8019e6c:	bf28      	it	cs
 8019e6e:	461a      	movcs	r2, r3
 8019e70:	b292      	uxth	r2, r2
 8019e72:	f7ff fe55 	bl	8019b20 <uxr_buffer_submessage_header>
 8019e76:	aa07      	add	r2, sp, #28
 8019e78:	9904      	ldr	r1, [sp, #16]
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f7ff f864 	bl	8018f48 <uxr_init_base_object_request>
 8019e80:	4604      	mov	r4, r0
 8019e82:	b320      	cbz	r0, 8019ece <uxr_prepare_output_stream_fragmented+0x14a>
 8019e84:	a907      	add	r1, sp, #28
 8019e86:	4630      	mov	r0, r6
 8019e88:	f001 f828 	bl	801aedc <uxr_serialize_WRITE_DATA_Payload_Data>
 8019e8c:	4630      	mov	r0, r6
 8019e8e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8019e92:	1a52      	subs	r2, r2, r1
 8019e94:	f7f9 f8d8 	bl	8013048 <ucdr_init_buffer>
 8019e98:	9b05      	ldr	r3, [sp, #20]
 8019e9a:	9a02      	ldr	r2, [sp, #8]
 8019e9c:	4630      	mov	r0, r6
 8019e9e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8019ea2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019ea4:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8019ea8:	462a      	mov	r2, r5
 8019eaa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8019eae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019eb0:	4918      	ldr	r1, [pc, #96]	; (8019f14 <uxr_prepare_output_stream_fragmented+0x190>)
 8019eb2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8019eb6:	f7f9 f89b 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 8019eba:	4620      	mov	r0, r4
 8019ebc:	b011      	add	sp, #68	; 0x44
 8019ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019ec4:	4628      	mov	r0, r5
 8019ec6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019ec8:	4798      	blx	r3
 8019eca:	b920      	cbnz	r0, 8019ed6 <uxr_prepare_output_stream_fragmented+0x152>
 8019ecc:	2400      	movs	r4, #0
 8019ece:	4620      	mov	r0, r4
 8019ed0:	b011      	add	sp, #68	; 0x44
 8019ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ed6:	4620      	mov	r0, r4
 8019ed8:	f004 ff24 	bl	801ed24 <get_available_free_slots>
 8019edc:	2800      	cmp	r0, #0
 8019ede:	f47f af6b 	bne.w	8019db8 <uxr_prepare_output_stream_fragmented+0x34>
 8019ee2:	e7f3      	b.n	8019ecc <uxr_prepare_output_stream_fragmented+0x148>
 8019ee4:	4638      	mov	r0, r7
 8019ee6:	2101      	movs	r1, #1
 8019ee8:	f004 ff3e 	bl	801ed68 <uxr_seq_num_add>
 8019eec:	8922      	ldrh	r2, [r4, #8]
 8019eee:	6863      	ldr	r3, [r4, #4]
 8019ef0:	4607      	mov	r7, r0
 8019ef2:	fbb3 f9f2 	udiv	r9, r3, r2
 8019ef6:	fbb0 f3f2 	udiv	r3, r0, r2
 8019efa:	fb02 0313 	mls	r3, r2, r3, r0
 8019efe:	b29b      	uxth	r3, r3
 8019f00:	fb03 f909 	mul.w	r9, r3, r9
 8019f04:	6823      	ldr	r3, [r4, #0]
 8019f06:	f109 0904 	add.w	r9, r9, #4
 8019f0a:	4499      	add	r9, r3
 8019f0c:	7b23      	ldrb	r3, [r4, #12]
 8019f0e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8019f12:	e76a      	b.n	8019dea <uxr_prepare_output_stream_fragmented+0x66>
 8019f14:	08019c11 	.word	0x08019c11

08019f18 <uxr_serialize_message_header>:
 8019f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f1a:	4616      	mov	r6, r2
 8019f1c:	b083      	sub	sp, #12
 8019f1e:	4604      	mov	r4, r0
 8019f20:	460d      	mov	r5, r1
 8019f22:	9301      	str	r3, [sp, #4]
 8019f24:	9f08      	ldr	r7, [sp, #32]
 8019f26:	f7f7 fdb7 	bl	8011a98 <ucdr_serialize_uint8_t>
 8019f2a:	4631      	mov	r1, r6
 8019f2c:	4620      	mov	r0, r4
 8019f2e:	f7f7 fdb3 	bl	8011a98 <ucdr_serialize_uint8_t>
 8019f32:	9a01      	ldr	r2, [sp, #4]
 8019f34:	2101      	movs	r1, #1
 8019f36:	4620      	mov	r0, r4
 8019f38:	f7f7 fe5a 	bl	8011bf0 <ucdr_serialize_endian_uint16_t>
 8019f3c:	062b      	lsls	r3, r5, #24
 8019f3e:	d501      	bpl.n	8019f44 <uxr_serialize_message_header+0x2c>
 8019f40:	b003      	add	sp, #12
 8019f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f44:	2204      	movs	r2, #4
 8019f46:	4639      	mov	r1, r7
 8019f48:	4620      	mov	r0, r4
 8019f4a:	b003      	add	sp, #12
 8019f4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019f50:	f7fd ba6e 	b.w	8017430 <ucdr_serialize_array_uint8_t>

08019f54 <uxr_deserialize_message_header>:
 8019f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f56:	4616      	mov	r6, r2
 8019f58:	b083      	sub	sp, #12
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	460d      	mov	r5, r1
 8019f5e:	9301      	str	r3, [sp, #4]
 8019f60:	9f08      	ldr	r7, [sp, #32]
 8019f62:	f7f7 fdaf 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 8019f66:	4631      	mov	r1, r6
 8019f68:	4620      	mov	r0, r4
 8019f6a:	f7f7 fdab 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 8019f6e:	9a01      	ldr	r2, [sp, #4]
 8019f70:	2101      	movs	r1, #1
 8019f72:	4620      	mov	r0, r4
 8019f74:	f7f7 ff30 	bl	8011dd8 <ucdr_deserialize_endian_uint16_t>
 8019f78:	f995 3000 	ldrsb.w	r3, [r5]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	da01      	bge.n	8019f84 <uxr_deserialize_message_header+0x30>
 8019f80:	b003      	add	sp, #12
 8019f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f84:	2204      	movs	r2, #4
 8019f86:	4639      	mov	r1, r7
 8019f88:	4620      	mov	r0, r4
 8019f8a:	b003      	add	sp, #12
 8019f8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019f90:	f7fd bab2 	b.w	80174f8 <ucdr_deserialize_array_uint8_t>

08019f94 <uxr_serialize_submessage_header>:
 8019f94:	b530      	push	{r4, r5, lr}
 8019f96:	4615      	mov	r5, r2
 8019f98:	b083      	sub	sp, #12
 8019f9a:	4604      	mov	r4, r0
 8019f9c:	9301      	str	r3, [sp, #4]
 8019f9e:	f7f7 fd7b 	bl	8011a98 <ucdr_serialize_uint8_t>
 8019fa2:	4629      	mov	r1, r5
 8019fa4:	4620      	mov	r0, r4
 8019fa6:	f7f7 fd77 	bl	8011a98 <ucdr_serialize_uint8_t>
 8019faa:	9a01      	ldr	r2, [sp, #4]
 8019fac:	2101      	movs	r1, #1
 8019fae:	4620      	mov	r0, r4
 8019fb0:	b003      	add	sp, #12
 8019fb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019fb6:	f7f7 be1b 	b.w	8011bf0 <ucdr_serialize_endian_uint16_t>
 8019fba:	bf00      	nop

08019fbc <uxr_deserialize_submessage_header>:
 8019fbc:	b530      	push	{r4, r5, lr}
 8019fbe:	4615      	mov	r5, r2
 8019fc0:	b083      	sub	sp, #12
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	9301      	str	r3, [sp, #4]
 8019fc6:	f7f7 fd7d 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 8019fca:	4629      	mov	r1, r5
 8019fcc:	4620      	mov	r0, r4
 8019fce:	f7f7 fd79 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 8019fd2:	9a01      	ldr	r2, [sp, #4]
 8019fd4:	2101      	movs	r1, #1
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	b003      	add	sp, #12
 8019fda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019fde:	f7f7 befb 	b.w	8011dd8 <ucdr_deserialize_endian_uint16_t>
 8019fe2:	bf00      	nop

08019fe4 <uxr_serialize_CLIENT_Representation>:
 8019fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fe8:	2204      	movs	r2, #4
 8019fea:	460e      	mov	r6, r1
 8019fec:	4605      	mov	r5, r0
 8019fee:	f7fd fa1f 	bl	8017430 <ucdr_serialize_array_uint8_t>
 8019ff2:	4607      	mov	r7, r0
 8019ff4:	2202      	movs	r2, #2
 8019ff6:	1d31      	adds	r1, r6, #4
 8019ff8:	4628      	mov	r0, r5
 8019ffa:	f7fd fa19 	bl	8017430 <ucdr_serialize_array_uint8_t>
 8019ffe:	4038      	ands	r0, r7
 801a000:	2202      	movs	r2, #2
 801a002:	1db1      	adds	r1, r6, #6
 801a004:	b2c7      	uxtb	r7, r0
 801a006:	4628      	mov	r0, r5
 801a008:	f7fd fa12 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a00c:	2204      	movs	r2, #4
 801a00e:	4007      	ands	r7, r0
 801a010:	f106 0108 	add.w	r1, r6, #8
 801a014:	4628      	mov	r0, r5
 801a016:	f7fd fa0b 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a01a:	4007      	ands	r7, r0
 801a01c:	7b31      	ldrb	r1, [r6, #12]
 801a01e:	4628      	mov	r0, r5
 801a020:	f7f7 fd3a 	bl	8011a98 <ucdr_serialize_uint8_t>
 801a024:	7b71      	ldrb	r1, [r6, #13]
 801a026:	4007      	ands	r7, r0
 801a028:	4628      	mov	r0, r5
 801a02a:	f7f7 fd07 	bl	8011a3c <ucdr_serialize_bool>
 801a02e:	7b73      	ldrb	r3, [r6, #13]
 801a030:	ea07 0800 	and.w	r8, r7, r0
 801a034:	b93b      	cbnz	r3, 801a046 <uxr_serialize_CLIENT_Representation+0x62>
 801a036:	8bb1      	ldrh	r1, [r6, #28]
 801a038:	4628      	mov	r0, r5
 801a03a:	f7f7 fd59 	bl	8011af0 <ucdr_serialize_uint16_t>
 801a03e:	ea08 0000 	and.w	r0, r8, r0
 801a042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a046:	6931      	ldr	r1, [r6, #16]
 801a048:	4628      	mov	r0, r5
 801a04a:	f7f7 ff3b 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801a04e:	6933      	ldr	r3, [r6, #16]
 801a050:	b1e3      	cbz	r3, 801a08c <uxr_serialize_CLIENT_Representation+0xa8>
 801a052:	b1c0      	cbz	r0, 801a086 <uxr_serialize_CLIENT_Representation+0xa2>
 801a054:	4637      	mov	r7, r6
 801a056:	f04f 0900 	mov.w	r9, #0
 801a05a:	e000      	b.n	801a05e <uxr_serialize_CLIENT_Representation+0x7a>
 801a05c:	b19c      	cbz	r4, 801a086 <uxr_serialize_CLIENT_Representation+0xa2>
 801a05e:	6979      	ldr	r1, [r7, #20]
 801a060:	4628      	mov	r0, r5
 801a062:	f004 f91d 	bl	801e2a0 <ucdr_serialize_string>
 801a066:	69b9      	ldr	r1, [r7, #24]
 801a068:	4604      	mov	r4, r0
 801a06a:	4628      	mov	r0, r5
 801a06c:	f004 f918 	bl	801e2a0 <ucdr_serialize_string>
 801a070:	f109 0901 	add.w	r9, r9, #1
 801a074:	6933      	ldr	r3, [r6, #16]
 801a076:	4004      	ands	r4, r0
 801a078:	3708      	adds	r7, #8
 801a07a:	4599      	cmp	r9, r3
 801a07c:	b2e4      	uxtb	r4, r4
 801a07e:	d3ed      	bcc.n	801a05c <uxr_serialize_CLIENT_Representation+0x78>
 801a080:	ea08 0804 	and.w	r8, r8, r4
 801a084:	e7d7      	b.n	801a036 <uxr_serialize_CLIENT_Representation+0x52>
 801a086:	f04f 0800 	mov.w	r8, #0
 801a08a:	e7d4      	b.n	801a036 <uxr_serialize_CLIENT_Representation+0x52>
 801a08c:	ea08 0800 	and.w	r8, r8, r0
 801a090:	e7d1      	b.n	801a036 <uxr_serialize_CLIENT_Representation+0x52>
 801a092:	bf00      	nop

0801a094 <uxr_deserialize_CLIENT_Representation>:
 801a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a098:	2204      	movs	r2, #4
 801a09a:	460c      	mov	r4, r1
 801a09c:	4605      	mov	r5, r0
 801a09e:	f7fd fa2b 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a0a2:	4607      	mov	r7, r0
 801a0a4:	2202      	movs	r2, #2
 801a0a6:	1d21      	adds	r1, r4, #4
 801a0a8:	4628      	mov	r0, r5
 801a0aa:	f7fd fa25 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a0ae:	4038      	ands	r0, r7
 801a0b0:	2202      	movs	r2, #2
 801a0b2:	1da1      	adds	r1, r4, #6
 801a0b4:	b2c6      	uxtb	r6, r0
 801a0b6:	4628      	mov	r0, r5
 801a0b8:	f7fd fa1e 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a0bc:	2204      	movs	r2, #4
 801a0be:	4006      	ands	r6, r0
 801a0c0:	f104 0108 	add.w	r1, r4, #8
 801a0c4:	4628      	mov	r0, r5
 801a0c6:	f7fd fa17 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a0ca:	4006      	ands	r6, r0
 801a0cc:	f104 010c 	add.w	r1, r4, #12
 801a0d0:	4628      	mov	r0, r5
 801a0d2:	f7f7 fcf7 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801a0d6:	f104 010d 	add.w	r1, r4, #13
 801a0da:	ea06 0700 	and.w	r7, r6, r0
 801a0de:	4628      	mov	r0, r5
 801a0e0:	f7f7 fcc2 	bl	8011a68 <ucdr_deserialize_bool>
 801a0e4:	7b63      	ldrb	r3, [r4, #13]
 801a0e6:	4007      	ands	r7, r0
 801a0e8:	b93b      	cbnz	r3, 801a0fa <uxr_deserialize_CLIENT_Representation+0x66>
 801a0ea:	f104 011c 	add.w	r1, r4, #28
 801a0ee:	4628      	mov	r0, r5
 801a0f0:	f7f7 fdfe 	bl	8011cf0 <ucdr_deserialize_uint16_t>
 801a0f4:	4038      	ands	r0, r7
 801a0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0fa:	f104 0110 	add.w	r1, r4, #16
 801a0fe:	4628      	mov	r0, r5
 801a100:	f7f8 f810 	bl	8012124 <ucdr_deserialize_uint32_t>
 801a104:	6923      	ldr	r3, [r4, #16]
 801a106:	2b01      	cmp	r3, #1
 801a108:	d903      	bls.n	801a112 <uxr_deserialize_CLIENT_Representation+0x7e>
 801a10a:	2301      	movs	r3, #1
 801a10c:	2700      	movs	r7, #0
 801a10e:	75ab      	strb	r3, [r5, #22]
 801a110:	e7eb      	b.n	801a0ea <uxr_deserialize_CLIENT_Representation+0x56>
 801a112:	b30b      	cbz	r3, 801a158 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a114:	b1f0      	cbz	r0, 801a154 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a116:	46a0      	mov	r8, r4
 801a118:	f04f 0900 	mov.w	r9, #0
 801a11c:	e000      	b.n	801a120 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a11e:	b1ce      	cbz	r6, 801a154 <uxr_deserialize_CLIENT_Representation+0xc0>
 801a120:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a124:	f108 0808 	add.w	r8, r8, #8
 801a128:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a12c:	4628      	mov	r0, r5
 801a12e:	f004 f8c7 	bl	801e2c0 <ucdr_deserialize_string>
 801a132:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a136:	4606      	mov	r6, r0
 801a138:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a13c:	4628      	mov	r0, r5
 801a13e:	f109 0901 	add.w	r9, r9, #1
 801a142:	f004 f8bd 	bl	801e2c0 <ucdr_deserialize_string>
 801a146:	6923      	ldr	r3, [r4, #16]
 801a148:	4006      	ands	r6, r0
 801a14a:	4599      	cmp	r9, r3
 801a14c:	b2f6      	uxtb	r6, r6
 801a14e:	d3e6      	bcc.n	801a11e <uxr_deserialize_CLIENT_Representation+0x8a>
 801a150:	4037      	ands	r7, r6
 801a152:	e7ca      	b.n	801a0ea <uxr_deserialize_CLIENT_Representation+0x56>
 801a154:	2700      	movs	r7, #0
 801a156:	e7c8      	b.n	801a0ea <uxr_deserialize_CLIENT_Representation+0x56>
 801a158:	4007      	ands	r7, r0
 801a15a:	e7c6      	b.n	801a0ea <uxr_deserialize_CLIENT_Representation+0x56>

0801a15c <uxr_serialize_AGENT_Representation>:
 801a15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a160:	2204      	movs	r2, #4
 801a162:	460f      	mov	r7, r1
 801a164:	4605      	mov	r5, r0
 801a166:	f7fd f963 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a16a:	4604      	mov	r4, r0
 801a16c:	2202      	movs	r2, #2
 801a16e:	1d39      	adds	r1, r7, #4
 801a170:	4628      	mov	r0, r5
 801a172:	f7fd f95d 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a176:	4020      	ands	r0, r4
 801a178:	2202      	movs	r2, #2
 801a17a:	1db9      	adds	r1, r7, #6
 801a17c:	b2c4      	uxtb	r4, r0
 801a17e:	4628      	mov	r0, r5
 801a180:	f7fd f956 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a184:	7a39      	ldrb	r1, [r7, #8]
 801a186:	4004      	ands	r4, r0
 801a188:	4628      	mov	r0, r5
 801a18a:	f7f7 fc57 	bl	8011a3c <ucdr_serialize_bool>
 801a18e:	7a3b      	ldrb	r3, [r7, #8]
 801a190:	ea00 0804 	and.w	r8, r0, r4
 801a194:	b913      	cbnz	r3, 801a19c <uxr_serialize_AGENT_Representation+0x40>
 801a196:	4640      	mov	r0, r8
 801a198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a19c:	68f9      	ldr	r1, [r7, #12]
 801a19e:	4628      	mov	r0, r5
 801a1a0:	f7f7 fe90 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	b303      	cbz	r3, 801a1ea <uxr_serialize_AGENT_Representation+0x8e>
 801a1a8:	b1d0      	cbz	r0, 801a1e0 <uxr_serialize_AGENT_Representation+0x84>
 801a1aa:	463e      	mov	r6, r7
 801a1ac:	f04f 0900 	mov.w	r9, #0
 801a1b0:	e000      	b.n	801a1b4 <uxr_serialize_AGENT_Representation+0x58>
 801a1b2:	b1ac      	cbz	r4, 801a1e0 <uxr_serialize_AGENT_Representation+0x84>
 801a1b4:	6931      	ldr	r1, [r6, #16]
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	f004 f872 	bl	801e2a0 <ucdr_serialize_string>
 801a1bc:	6971      	ldr	r1, [r6, #20]
 801a1be:	4604      	mov	r4, r0
 801a1c0:	4628      	mov	r0, r5
 801a1c2:	f004 f86d 	bl	801e2a0 <ucdr_serialize_string>
 801a1c6:	f109 0901 	add.w	r9, r9, #1
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	4004      	ands	r4, r0
 801a1ce:	3608      	adds	r6, #8
 801a1d0:	4599      	cmp	r9, r3
 801a1d2:	b2e4      	uxtb	r4, r4
 801a1d4:	d3ed      	bcc.n	801a1b2 <uxr_serialize_AGENT_Representation+0x56>
 801a1d6:	ea08 0804 	and.w	r8, r8, r4
 801a1da:	4640      	mov	r0, r8
 801a1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1e0:	f04f 0800 	mov.w	r8, #0
 801a1e4:	4640      	mov	r0, r8
 801a1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1ea:	ea08 0800 	and.w	r8, r8, r0
 801a1ee:	e7d2      	b.n	801a196 <uxr_serialize_AGENT_Representation+0x3a>

0801a1f0 <uxr_serialize_DATAWRITER_Representation>:
 801a1f0:	b570      	push	{r4, r5, r6, lr}
 801a1f2:	460d      	mov	r5, r1
 801a1f4:	7809      	ldrb	r1, [r1, #0]
 801a1f6:	4606      	mov	r6, r0
 801a1f8:	f7f7 fc4e 	bl	8011a98 <ucdr_serialize_uint8_t>
 801a1fc:	4604      	mov	r4, r0
 801a1fe:	b130      	cbz	r0, 801a20e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a200:	782b      	ldrb	r3, [r5, #0]
 801a202:	2b02      	cmp	r3, #2
 801a204:	d00c      	beq.n	801a220 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a206:	2b03      	cmp	r3, #3
 801a208:	d010      	beq.n	801a22c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a20a:	2b01      	cmp	r3, #1
 801a20c:	d008      	beq.n	801a220 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a20e:	2202      	movs	r2, #2
 801a210:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a214:	4630      	mov	r0, r6
 801a216:	f7fd f90b 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a21a:	4020      	ands	r0, r4
 801a21c:	b2c0      	uxtb	r0, r0
 801a21e:	bd70      	pop	{r4, r5, r6, pc}
 801a220:	6869      	ldr	r1, [r5, #4]
 801a222:	4630      	mov	r0, r6
 801a224:	f004 f83c 	bl	801e2a0 <ucdr_serialize_string>
 801a228:	4604      	mov	r4, r0
 801a22a:	e7f0      	b.n	801a20e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a22c:	4629      	mov	r1, r5
 801a22e:	4630      	mov	r0, r6
 801a230:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a234:	3104      	adds	r1, #4
 801a236:	f7f8 ffa7 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801a23a:	4604      	mov	r4, r0
 801a23c:	e7e7      	b.n	801a20e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a23e:	bf00      	nop

0801a240 <uxr_serialize_ObjectVariant.part.0>:
 801a240:	b570      	push	{r4, r5, r6, lr}
 801a242:	780b      	ldrb	r3, [r1, #0]
 801a244:	460c      	mov	r4, r1
 801a246:	4605      	mov	r5, r0
 801a248:	3b01      	subs	r3, #1
 801a24a:	2b0d      	cmp	r3, #13
 801a24c:	d854      	bhi.n	801a2f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a24e:	e8df f003 	tbb	[pc, r3]
 801a252:	0730      	.short	0x0730
 801a254:	07071b1b 	.word	0x07071b1b
 801a258:	0c530707 	.word	0x0c530707
 801a25c:	494e0c0c 	.word	0x494e0c0c
 801a260:	3104      	adds	r1, #4
 801a262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a266:	f7ff bfc3 	b.w	801a1f0 <uxr_serialize_DATAWRITER_Representation>
 801a26a:	7909      	ldrb	r1, [r1, #4]
 801a26c:	f7f7 fc14 	bl	8011a98 <ucdr_serialize_uint8_t>
 801a270:	b1e8      	cbz	r0, 801a2ae <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a272:	7923      	ldrb	r3, [r4, #4]
 801a274:	2b01      	cmp	r3, #1
 801a276:	d001      	beq.n	801a27c <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a278:	2b02      	cmp	r3, #2
 801a27a:	d13d      	bne.n	801a2f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a27c:	68a1      	ldr	r1, [r4, #8]
 801a27e:	4628      	mov	r0, r5
 801a280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a284:	f004 b80c 	b.w	801e2a0 <ucdr_serialize_string>
 801a288:	7909      	ldrb	r1, [r1, #4]
 801a28a:	f7f7 fc05 	bl	8011a98 <ucdr_serialize_uint8_t>
 801a28e:	4606      	mov	r6, r0
 801a290:	b120      	cbz	r0, 801a29c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a292:	7923      	ldrb	r3, [r4, #4]
 801a294:	2b02      	cmp	r3, #2
 801a296:	d039      	beq.n	801a30c <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a298:	2b03      	cmp	r3, #3
 801a29a:	d02f      	beq.n	801a2fc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a29c:	2202      	movs	r2, #2
 801a29e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801a2a2:	4628      	mov	r0, r5
 801a2a4:	f7fd f8c4 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a2a8:	4030      	ands	r0, r6
 801a2aa:	b2c0      	uxtb	r0, r0
 801a2ac:	bd70      	pop	{r4, r5, r6, pc}
 801a2ae:	2000      	movs	r0, #0
 801a2b0:	bd70      	pop	{r4, r5, r6, pc}
 801a2b2:	7909      	ldrb	r1, [r1, #4]
 801a2b4:	f7f7 fbf0 	bl	8011a98 <ucdr_serialize_uint8_t>
 801a2b8:	4606      	mov	r6, r0
 801a2ba:	b158      	cbz	r0, 801a2d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a2bc:	7923      	ldrb	r3, [r4, #4]
 801a2be:	2b02      	cmp	r3, #2
 801a2c0:	d003      	beq.n	801a2ca <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a2c2:	2b03      	cmp	r3, #3
 801a2c4:	d028      	beq.n	801a318 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a2c6:	2b01      	cmp	r3, #1
 801a2c8:	d104      	bne.n	801a2d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 801a2ca:	68a1      	ldr	r1, [r4, #8]
 801a2cc:	4628      	mov	r0, r5
 801a2ce:	f003 ffe7 	bl	801e2a0 <ucdr_serialize_string>
 801a2d2:	4606      	mov	r6, r0
 801a2d4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801a2d8:	4628      	mov	r0, r5
 801a2da:	f7f8 f919 	bl	8012510 <ucdr_serialize_int16_t>
 801a2de:	4030      	ands	r0, r6
 801a2e0:	b2c0      	uxtb	r0, r0
 801a2e2:	bd70      	pop	{r4, r5, r6, pc}
 801a2e4:	3104      	adds	r1, #4
 801a2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2ea:	f7ff be7b 	b.w	8019fe4 <uxr_serialize_CLIENT_Representation>
 801a2ee:	3104      	adds	r1, #4
 801a2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2f4:	f7ff bf32 	b.w	801a15c <uxr_serialize_AGENT_Representation>
 801a2f8:	2001      	movs	r0, #1
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}
 801a2fc:	68a2      	ldr	r2, [r4, #8]
 801a2fe:	f104 010c 	add.w	r1, r4, #12
 801a302:	4628      	mov	r0, r5
 801a304:	f7f8 ff40 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801a308:	4606      	mov	r6, r0
 801a30a:	e7c7      	b.n	801a29c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a30c:	68a1      	ldr	r1, [r4, #8]
 801a30e:	4628      	mov	r0, r5
 801a310:	f003 ffc6 	bl	801e2a0 <ucdr_serialize_string>
 801a314:	4606      	mov	r6, r0
 801a316:	e7c1      	b.n	801a29c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a318:	68a2      	ldr	r2, [r4, #8]
 801a31a:	f104 010c 	add.w	r1, r4, #12
 801a31e:	4628      	mov	r0, r5
 801a320:	f7f8 ff32 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801a324:	4606      	mov	r6, r0
 801a326:	e7d5      	b.n	801a2d4 <uxr_serialize_ObjectVariant.part.0+0x94>

0801a328 <uxr_deserialize_DATAWRITER_Representation>:
 801a328:	b570      	push	{r4, r5, r6, lr}
 801a32a:	4606      	mov	r6, r0
 801a32c:	460d      	mov	r5, r1
 801a32e:	f7f7 fbc9 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801a332:	4604      	mov	r4, r0
 801a334:	b130      	cbz	r0, 801a344 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a336:	782b      	ldrb	r3, [r5, #0]
 801a338:	2b02      	cmp	r3, #2
 801a33a:	d00c      	beq.n	801a356 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a33c:	2b03      	cmp	r3, #3
 801a33e:	d012      	beq.n	801a366 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a340:	2b01      	cmp	r3, #1
 801a342:	d008      	beq.n	801a356 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a344:	2202      	movs	r2, #2
 801a346:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a34a:	4630      	mov	r0, r6
 801a34c:	f7fd f8d4 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a350:	4020      	ands	r0, r4
 801a352:	b2c0      	uxtb	r0, r0
 801a354:	bd70      	pop	{r4, r5, r6, pc}
 801a356:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a35a:	6869      	ldr	r1, [r5, #4]
 801a35c:	4630      	mov	r0, r6
 801a35e:	f003 ffaf 	bl	801e2c0 <ucdr_deserialize_string>
 801a362:	4604      	mov	r4, r0
 801a364:	e7ee      	b.n	801a344 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a366:	1d2b      	adds	r3, r5, #4
 801a368:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a36c:	f105 0108 	add.w	r1, r5, #8
 801a370:	4630      	mov	r0, r6
 801a372:	f7f8 ff1b 	bl	80131ac <ucdr_deserialize_sequence_uint8_t>
 801a376:	4604      	mov	r4, r0
 801a378:	e7e4      	b.n	801a344 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a37a:	bf00      	nop

0801a37c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a37c:	b570      	push	{r4, r5, r6, lr}
 801a37e:	460d      	mov	r5, r1
 801a380:	7809      	ldrb	r1, [r1, #0]
 801a382:	4606      	mov	r6, r0
 801a384:	f7f7 fb5a 	bl	8011a3c <ucdr_serialize_bool>
 801a388:	782b      	ldrb	r3, [r5, #0]
 801a38a:	4604      	mov	r4, r0
 801a38c:	b94b      	cbnz	r3, 801a3a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a38e:	7a29      	ldrb	r1, [r5, #8]
 801a390:	4630      	mov	r0, r6
 801a392:	f7f7 fb53 	bl	8011a3c <ucdr_serialize_bool>
 801a396:	7a2b      	ldrb	r3, [r5, #8]
 801a398:	4004      	ands	r4, r0
 801a39a:	b2e4      	uxtb	r4, r4
 801a39c:	b943      	cbnz	r3, 801a3b0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a39e:	4620      	mov	r0, r4
 801a3a0:	bd70      	pop	{r4, r5, r6, pc}
 801a3a2:	6869      	ldr	r1, [r5, #4]
 801a3a4:	4630      	mov	r0, r6
 801a3a6:	f003 ff7b 	bl	801e2a0 <ucdr_serialize_string>
 801a3aa:	4004      	ands	r4, r0
 801a3ac:	b2e4      	uxtb	r4, r4
 801a3ae:	e7ee      	b.n	801a38e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a3b0:	68e9      	ldr	r1, [r5, #12]
 801a3b2:	4630      	mov	r0, r6
 801a3b4:	f003 ff74 	bl	801e2a0 <ucdr_serialize_string>
 801a3b8:	4004      	ands	r4, r0
 801a3ba:	4620      	mov	r0, r4
 801a3bc:	bd70      	pop	{r4, r5, r6, pc}
 801a3be:	bf00      	nop

0801a3c0 <uxr_serialize_OBJK_Topic_Binary>:
 801a3c0:	b570      	push	{r4, r5, r6, lr}
 801a3c2:	460d      	mov	r5, r1
 801a3c4:	4606      	mov	r6, r0
 801a3c6:	6809      	ldr	r1, [r1, #0]
 801a3c8:	f003 ff6a 	bl	801e2a0 <ucdr_serialize_string>
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	7929      	ldrb	r1, [r5, #4]
 801a3d0:	4630      	mov	r0, r6
 801a3d2:	f7f7 fb33 	bl	8011a3c <ucdr_serialize_bool>
 801a3d6:	792b      	ldrb	r3, [r5, #4]
 801a3d8:	4004      	ands	r4, r0
 801a3da:	b2e4      	uxtb	r4, r4
 801a3dc:	b943      	cbnz	r3, 801a3f0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a3de:	7b29      	ldrb	r1, [r5, #12]
 801a3e0:	4630      	mov	r0, r6
 801a3e2:	f7f7 fb2b 	bl	8011a3c <ucdr_serialize_bool>
 801a3e6:	7b2b      	ldrb	r3, [r5, #12]
 801a3e8:	4004      	ands	r4, r0
 801a3ea:	b93b      	cbnz	r3, 801a3fc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	bd70      	pop	{r4, r5, r6, pc}
 801a3f0:	68a9      	ldr	r1, [r5, #8]
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	f003 ff54 	bl	801e2a0 <ucdr_serialize_string>
 801a3f8:	4004      	ands	r4, r0
 801a3fa:	e7f0      	b.n	801a3de <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801a3fc:	6929      	ldr	r1, [r5, #16]
 801a3fe:	4630      	mov	r0, r6
 801a400:	f003 ff4e 	bl	801e2a0 <ucdr_serialize_string>
 801a404:	4004      	ands	r4, r0
 801a406:	b2e4      	uxtb	r4, r4
 801a408:	4620      	mov	r0, r4
 801a40a:	bd70      	pop	{r4, r5, r6, pc}

0801a40c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a410:	460c      	mov	r4, r1
 801a412:	7809      	ldrb	r1, [r1, #0]
 801a414:	4606      	mov	r6, r0
 801a416:	f7f7 fb11 	bl	8011a3c <ucdr_serialize_bool>
 801a41a:	7823      	ldrb	r3, [r4, #0]
 801a41c:	4605      	mov	r5, r0
 801a41e:	b96b      	cbnz	r3, 801a43c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801a420:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a424:	4630      	mov	r0, r6
 801a426:	f7f7 fb09 	bl	8011a3c <ucdr_serialize_bool>
 801a42a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a42e:	4005      	ands	r5, r0
 801a430:	b2ed      	uxtb	r5, r5
 801a432:	2b00      	cmp	r3, #0
 801a434:	d169      	bne.n	801a50a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801a436:	4628      	mov	r0, r5
 801a438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a43c:	6861      	ldr	r1, [r4, #4]
 801a43e:	4630      	mov	r0, r6
 801a440:	f7f7 fd40 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801a444:	6863      	ldr	r3, [r4, #4]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d06b      	beq.n	801a522 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801a44a:	2800      	cmp	r0, #0
 801a44c:	d067      	beq.n	801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a44e:	68a1      	ldr	r1, [r4, #8]
 801a450:	4630      	mov	r0, r6
 801a452:	f003 ff25 	bl	801e2a0 <ucdr_serialize_string>
 801a456:	6863      	ldr	r3, [r4, #4]
 801a458:	2b01      	cmp	r3, #1
 801a45a:	d953      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a45c:	2800      	cmp	r0, #0
 801a45e:	d05e      	beq.n	801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a460:	68e1      	ldr	r1, [r4, #12]
 801a462:	4630      	mov	r0, r6
 801a464:	f003 ff1c 	bl	801e2a0 <ucdr_serialize_string>
 801a468:	6863      	ldr	r3, [r4, #4]
 801a46a:	2b02      	cmp	r3, #2
 801a46c:	d94a      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a46e:	2800      	cmp	r0, #0
 801a470:	d055      	beq.n	801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a472:	6921      	ldr	r1, [r4, #16]
 801a474:	4630      	mov	r0, r6
 801a476:	f003 ff13 	bl	801e2a0 <ucdr_serialize_string>
 801a47a:	6863      	ldr	r3, [r4, #4]
 801a47c:	2b03      	cmp	r3, #3
 801a47e:	d941      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a480:	2800      	cmp	r0, #0
 801a482:	d04c      	beq.n	801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a484:	6961      	ldr	r1, [r4, #20]
 801a486:	4630      	mov	r0, r6
 801a488:	f003 ff0a 	bl	801e2a0 <ucdr_serialize_string>
 801a48c:	6863      	ldr	r3, [r4, #4]
 801a48e:	2b04      	cmp	r3, #4
 801a490:	d938      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a492:	2800      	cmp	r0, #0
 801a494:	d043      	beq.n	801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a496:	69a1      	ldr	r1, [r4, #24]
 801a498:	4630      	mov	r0, r6
 801a49a:	f003 ff01 	bl	801e2a0 <ucdr_serialize_string>
 801a49e:	6863      	ldr	r3, [r4, #4]
 801a4a0:	2b05      	cmp	r3, #5
 801a4a2:	d92f      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	d03a      	beq.n	801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4a8:	69e1      	ldr	r1, [r4, #28]
 801a4aa:	4630      	mov	r0, r6
 801a4ac:	f003 fef8 	bl	801e2a0 <ucdr_serialize_string>
 801a4b0:	6863      	ldr	r3, [r4, #4]
 801a4b2:	2b06      	cmp	r3, #6
 801a4b4:	d926      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a4b6:	b390      	cbz	r0, 801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4b8:	6a21      	ldr	r1, [r4, #32]
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	f003 fef0 	bl	801e2a0 <ucdr_serialize_string>
 801a4c0:	6863      	ldr	r3, [r4, #4]
 801a4c2:	2b07      	cmp	r3, #7
 801a4c4:	d91e      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a4c6:	b350      	cbz	r0, 801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a4ca:	4630      	mov	r0, r6
 801a4cc:	f003 fee8 	bl	801e2a0 <ucdr_serialize_string>
 801a4d0:	6863      	ldr	r3, [r4, #4]
 801a4d2:	2b08      	cmp	r3, #8
 801a4d4:	d916      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a4d6:	b310      	cbz	r0, 801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a4da:	4630      	mov	r0, r6
 801a4dc:	f003 fee0 	bl	801e2a0 <ucdr_serialize_string>
 801a4e0:	6863      	ldr	r3, [r4, #4]
 801a4e2:	2b09      	cmp	r3, #9
 801a4e4:	d90e      	bls.n	801a504 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801a4e6:	b1d0      	cbz	r0, 801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4e8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a4ec:	2709      	movs	r7, #9
 801a4ee:	e000      	b.n	801a4f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801a4f0:	b1a8      	cbz	r0, 801a51e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801a4f2:	f858 1b04 	ldr.w	r1, [r8], #4
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	f003 fed2 	bl	801e2a0 <ucdr_serialize_string>
 801a4fc:	3701      	adds	r7, #1
 801a4fe:	6862      	ldr	r2, [r4, #4]
 801a500:	4297      	cmp	r7, r2
 801a502:	d3f5      	bcc.n	801a4f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801a504:	4005      	ands	r5, r0
 801a506:	b2ed      	uxtb	r5, r5
 801a508:	e78a      	b.n	801a420 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a50a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a50c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a510:	4630      	mov	r0, r6
 801a512:	f7f8 fe39 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801a516:	4005      	ands	r5, r0
 801a518:	4628      	mov	r0, r5
 801a51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a51e:	2500      	movs	r5, #0
 801a520:	e77e      	b.n	801a420 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801a522:	4028      	ands	r0, r5
 801a524:	b2c5      	uxtb	r5, r0
 801a526:	e77b      	b.n	801a420 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801a528 <uxr_serialize_OBJK_Publisher_Binary>:
 801a528:	b570      	push	{r4, r5, r6, lr}
 801a52a:	460d      	mov	r5, r1
 801a52c:	7809      	ldrb	r1, [r1, #0]
 801a52e:	4606      	mov	r6, r0
 801a530:	f7f7 fa84 	bl	8011a3c <ucdr_serialize_bool>
 801a534:	782b      	ldrb	r3, [r5, #0]
 801a536:	4604      	mov	r4, r0
 801a538:	b94b      	cbnz	r3, 801a54e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801a53a:	7a29      	ldrb	r1, [r5, #8]
 801a53c:	4630      	mov	r0, r6
 801a53e:	f7f7 fa7d 	bl	8011a3c <ucdr_serialize_bool>
 801a542:	7a2b      	ldrb	r3, [r5, #8]
 801a544:	4004      	ands	r4, r0
 801a546:	b2e4      	uxtb	r4, r4
 801a548:	b943      	cbnz	r3, 801a55c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801a54a:	4620      	mov	r0, r4
 801a54c:	bd70      	pop	{r4, r5, r6, pc}
 801a54e:	6869      	ldr	r1, [r5, #4]
 801a550:	4630      	mov	r0, r6
 801a552:	f003 fea5 	bl	801e2a0 <ucdr_serialize_string>
 801a556:	4004      	ands	r4, r0
 801a558:	b2e4      	uxtb	r4, r4
 801a55a:	e7ee      	b.n	801a53a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801a55c:	f105 010c 	add.w	r1, r5, #12
 801a560:	4630      	mov	r0, r6
 801a562:	f7ff ff53 	bl	801a40c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801a566:	4004      	ands	r4, r0
 801a568:	4620      	mov	r0, r4
 801a56a:	bd70      	pop	{r4, r5, r6, pc}

0801a56c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801a56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a570:	460c      	mov	r4, r1
 801a572:	7809      	ldrb	r1, [r1, #0]
 801a574:	4606      	mov	r6, r0
 801a576:	f7f7 fa61 	bl	8011a3c <ucdr_serialize_bool>
 801a57a:	7823      	ldrb	r3, [r4, #0]
 801a57c:	4605      	mov	r5, r0
 801a57e:	b96b      	cbnz	r3, 801a59c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801a580:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801a584:	4630      	mov	r0, r6
 801a586:	f7f7 fa59 	bl	8011a3c <ucdr_serialize_bool>
 801a58a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801a58e:	4005      	ands	r5, r0
 801a590:	b2ed      	uxtb	r5, r5
 801a592:	2b00      	cmp	r3, #0
 801a594:	d169      	bne.n	801a66a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801a596:	4628      	mov	r0, r5
 801a598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a59c:	6861      	ldr	r1, [r4, #4]
 801a59e:	4630      	mov	r0, r6
 801a5a0:	f7f7 fc90 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801a5a4:	6863      	ldr	r3, [r4, #4]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d06b      	beq.n	801a682 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801a5aa:	2800      	cmp	r0, #0
 801a5ac:	d067      	beq.n	801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5ae:	68a1      	ldr	r1, [r4, #8]
 801a5b0:	4630      	mov	r0, r6
 801a5b2:	f003 fe75 	bl	801e2a0 <ucdr_serialize_string>
 801a5b6:	6863      	ldr	r3, [r4, #4]
 801a5b8:	2b01      	cmp	r3, #1
 801a5ba:	d953      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	d05e      	beq.n	801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5c0:	68e1      	ldr	r1, [r4, #12]
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	f003 fe6c 	bl	801e2a0 <ucdr_serialize_string>
 801a5c8:	6863      	ldr	r3, [r4, #4]
 801a5ca:	2b02      	cmp	r3, #2
 801a5cc:	d94a      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5ce:	2800      	cmp	r0, #0
 801a5d0:	d055      	beq.n	801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5d2:	6921      	ldr	r1, [r4, #16]
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	f003 fe63 	bl	801e2a0 <ucdr_serialize_string>
 801a5da:	6863      	ldr	r3, [r4, #4]
 801a5dc:	2b03      	cmp	r3, #3
 801a5de:	d941      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5e0:	2800      	cmp	r0, #0
 801a5e2:	d04c      	beq.n	801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5e4:	6961      	ldr	r1, [r4, #20]
 801a5e6:	4630      	mov	r0, r6
 801a5e8:	f003 fe5a 	bl	801e2a0 <ucdr_serialize_string>
 801a5ec:	6863      	ldr	r3, [r4, #4]
 801a5ee:	2b04      	cmp	r3, #4
 801a5f0:	d938      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a5f2:	2800      	cmp	r0, #0
 801a5f4:	d043      	beq.n	801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a5f6:	69a1      	ldr	r1, [r4, #24]
 801a5f8:	4630      	mov	r0, r6
 801a5fa:	f003 fe51 	bl	801e2a0 <ucdr_serialize_string>
 801a5fe:	6863      	ldr	r3, [r4, #4]
 801a600:	2b05      	cmp	r3, #5
 801a602:	d92f      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a604:	2800      	cmp	r0, #0
 801a606:	d03a      	beq.n	801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a608:	69e1      	ldr	r1, [r4, #28]
 801a60a:	4630      	mov	r0, r6
 801a60c:	f003 fe48 	bl	801e2a0 <ucdr_serialize_string>
 801a610:	6863      	ldr	r3, [r4, #4]
 801a612:	2b06      	cmp	r3, #6
 801a614:	d926      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a616:	b390      	cbz	r0, 801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a618:	6a21      	ldr	r1, [r4, #32]
 801a61a:	4630      	mov	r0, r6
 801a61c:	f003 fe40 	bl	801e2a0 <ucdr_serialize_string>
 801a620:	6863      	ldr	r3, [r4, #4]
 801a622:	2b07      	cmp	r3, #7
 801a624:	d91e      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a626:	b350      	cbz	r0, 801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a628:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a62a:	4630      	mov	r0, r6
 801a62c:	f003 fe38 	bl	801e2a0 <ucdr_serialize_string>
 801a630:	6863      	ldr	r3, [r4, #4]
 801a632:	2b08      	cmp	r3, #8
 801a634:	d916      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a636:	b310      	cbz	r0, 801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a638:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a63a:	4630      	mov	r0, r6
 801a63c:	f003 fe30 	bl	801e2a0 <ucdr_serialize_string>
 801a640:	6863      	ldr	r3, [r4, #4]
 801a642:	2b09      	cmp	r3, #9
 801a644:	d90e      	bls.n	801a664 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801a646:	b1d0      	cbz	r0, 801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a648:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801a64c:	2709      	movs	r7, #9
 801a64e:	e000      	b.n	801a652 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801a650:	b1a8      	cbz	r0, 801a67e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801a652:	f858 1b04 	ldr.w	r1, [r8], #4
 801a656:	4630      	mov	r0, r6
 801a658:	f003 fe22 	bl	801e2a0 <ucdr_serialize_string>
 801a65c:	3701      	adds	r7, #1
 801a65e:	6862      	ldr	r2, [r4, #4]
 801a660:	4297      	cmp	r7, r2
 801a662:	d3f5      	bcc.n	801a650 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801a664:	4005      	ands	r5, r0
 801a666:	b2ed      	uxtb	r5, r5
 801a668:	e78a      	b.n	801a580 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a66a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a66c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a670:	4630      	mov	r0, r6
 801a672:	f7f8 fd89 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801a676:	4005      	ands	r5, r0
 801a678:	4628      	mov	r0, r5
 801a67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a67e:	2500      	movs	r5, #0
 801a680:	e77e      	b.n	801a580 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801a682:	4028      	ands	r0, r5
 801a684:	b2c5      	uxtb	r5, r0
 801a686:	e77b      	b.n	801a580 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801a688 <uxr_serialize_OBJK_Subscriber_Binary>:
 801a688:	b570      	push	{r4, r5, r6, lr}
 801a68a:	460d      	mov	r5, r1
 801a68c:	7809      	ldrb	r1, [r1, #0]
 801a68e:	4606      	mov	r6, r0
 801a690:	f7f7 f9d4 	bl	8011a3c <ucdr_serialize_bool>
 801a694:	782b      	ldrb	r3, [r5, #0]
 801a696:	4604      	mov	r4, r0
 801a698:	b94b      	cbnz	r3, 801a6ae <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801a69a:	7a29      	ldrb	r1, [r5, #8]
 801a69c:	4630      	mov	r0, r6
 801a69e:	f7f7 f9cd 	bl	8011a3c <ucdr_serialize_bool>
 801a6a2:	7a2b      	ldrb	r3, [r5, #8]
 801a6a4:	4004      	ands	r4, r0
 801a6a6:	b2e4      	uxtb	r4, r4
 801a6a8:	b943      	cbnz	r3, 801a6bc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	bd70      	pop	{r4, r5, r6, pc}
 801a6ae:	6869      	ldr	r1, [r5, #4]
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	f003 fdf5 	bl	801e2a0 <ucdr_serialize_string>
 801a6b6:	4004      	ands	r4, r0
 801a6b8:	b2e4      	uxtb	r4, r4
 801a6ba:	e7ee      	b.n	801a69a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801a6bc:	f105 010c 	add.w	r1, r5, #12
 801a6c0:	4630      	mov	r0, r6
 801a6c2:	f7ff ff53 	bl	801a56c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801a6c6:	4004      	ands	r4, r0
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	bd70      	pop	{r4, r5, r6, pc}

0801a6cc <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801a6cc:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801a6d0:	4688      	mov	r8, r1
 801a6d2:	4681      	mov	r9, r0
 801a6d4:	8809      	ldrh	r1, [r1, #0]
 801a6d6:	f7f7 fa0b 	bl	8011af0 <ucdr_serialize_uint16_t>
 801a6da:	4606      	mov	r6, r0
 801a6dc:	f898 1002 	ldrb.w	r1, [r8, #2]
 801a6e0:	4648      	mov	r0, r9
 801a6e2:	f7f7 f9ab 	bl	8011a3c <ucdr_serialize_bool>
 801a6e6:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a6ea:	4006      	ands	r6, r0
 801a6ec:	b2f5      	uxtb	r5, r6
 801a6ee:	b9eb      	cbnz	r3, 801a72c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801a6f0:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a6f4:	4648      	mov	r0, r9
 801a6f6:	f7f7 f9a1 	bl	8011a3c <ucdr_serialize_bool>
 801a6fa:	f898 3006 	ldrb.w	r3, [r8, #6]
 801a6fe:	4005      	ands	r5, r0
 801a700:	bb7b      	cbnz	r3, 801a762 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801a702:	f898 100c 	ldrb.w	r1, [r8, #12]
 801a706:	4648      	mov	r0, r9
 801a708:	f7f7 f998 	bl	8011a3c <ucdr_serialize_bool>
 801a70c:	f898 300c 	ldrb.w	r3, [r8, #12]
 801a710:	4005      	ands	r5, r0
 801a712:	b9f3      	cbnz	r3, 801a752 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801a714:	f898 1014 	ldrb.w	r1, [r8, #20]
 801a718:	4648      	mov	r0, r9
 801a71a:	f7f7 f98f 	bl	8011a3c <ucdr_serialize_bool>
 801a71e:	f898 3014 	ldrb.w	r3, [r8, #20]
 801a722:	4005      	ands	r5, r0
 801a724:	b94b      	cbnz	r3, 801a73a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801a726:	4628      	mov	r0, r5
 801a728:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a72c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801a730:	4648      	mov	r0, r9
 801a732:	f7f7 f9dd 	bl	8011af0 <ucdr_serialize_uint16_t>
 801a736:	4005      	ands	r5, r0
 801a738:	e7da      	b.n	801a6f0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801a73a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a73e:	f108 011c 	add.w	r1, r8, #28
 801a742:	4648      	mov	r0, r9
 801a744:	f7f8 fd20 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801a748:	4028      	ands	r0, r5
 801a74a:	b2c5      	uxtb	r5, r0
 801a74c:	4628      	mov	r0, r5
 801a74e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801a752:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a756:	4648      	mov	r0, r9
 801a758:	f7f7 fbb4 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801a75c:	4028      	ands	r0, r5
 801a75e:	b2c5      	uxtb	r5, r0
 801a760:	e7d8      	b.n	801a714 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801a762:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a766:	4648      	mov	r0, r9
 801a768:	f7f7 fbac 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801a76c:	4028      	ands	r0, r5
 801a76e:	b2c5      	uxtb	r5, r0
 801a770:	e7c7      	b.n	801a702 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801a772:	bf00      	nop

0801a774 <uxr_serialize_OBJK_DataReader_Binary>:
 801a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a776:	2202      	movs	r2, #2
 801a778:	460c      	mov	r4, r1
 801a77a:	4606      	mov	r6, r0
 801a77c:	f7fc fe58 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a780:	4605      	mov	r5, r0
 801a782:	78a1      	ldrb	r1, [r4, #2]
 801a784:	4630      	mov	r0, r6
 801a786:	f7f7 f959 	bl	8011a3c <ucdr_serialize_bool>
 801a78a:	78a3      	ldrb	r3, [r4, #2]
 801a78c:	4005      	ands	r5, r0
 801a78e:	b2ed      	uxtb	r5, r5
 801a790:	b90b      	cbnz	r3, 801a796 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801a792:	4628      	mov	r0, r5
 801a794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a796:	f104 0108 	add.w	r1, r4, #8
 801a79a:	4630      	mov	r0, r6
 801a79c:	f7ff ff96 	bl	801a6cc <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a7a0:	4607      	mov	r7, r0
 801a7a2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801a7a6:	4630      	mov	r0, r6
 801a7a8:	f7f7 f948 	bl	8011a3c <ucdr_serialize_bool>
 801a7ac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801a7b0:	4038      	ands	r0, r7
 801a7b2:	b2c7      	uxtb	r7, r0
 801a7b4:	b95b      	cbnz	r3, 801a7ce <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801a7b6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801a7ba:	4630      	mov	r0, r6
 801a7bc:	f7f7 f93e 	bl	8011a3c <ucdr_serialize_bool>
 801a7c0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a7c4:	4007      	ands	r7, r0
 801a7c6:	b94b      	cbnz	r3, 801a7dc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801a7c8:	403d      	ands	r5, r7
 801a7ca:	4628      	mov	r0, r5
 801a7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7ce:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f7f7 fdcc 	bl	8012370 <ucdr_serialize_uint64_t>
 801a7d8:	4007      	ands	r7, r0
 801a7da:	e7ec      	b.n	801a7b6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801a7dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a7de:	4630      	mov	r0, r6
 801a7e0:	f003 fd5e 	bl	801e2a0 <ucdr_serialize_string>
 801a7e4:	4007      	ands	r7, r0
 801a7e6:	b2ff      	uxtb	r7, r7
 801a7e8:	e7ee      	b.n	801a7c8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801a7ea:	bf00      	nop

0801a7ec <uxr_serialize_OBJK_DataWriter_Binary>:
 801a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ee:	2202      	movs	r2, #2
 801a7f0:	460d      	mov	r5, r1
 801a7f2:	4606      	mov	r6, r0
 801a7f4:	f7fc fe1c 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801a7f8:	4604      	mov	r4, r0
 801a7fa:	78a9      	ldrb	r1, [r5, #2]
 801a7fc:	4630      	mov	r0, r6
 801a7fe:	f7f7 f91d 	bl	8011a3c <ucdr_serialize_bool>
 801a802:	78ab      	ldrb	r3, [r5, #2]
 801a804:	4004      	ands	r4, r0
 801a806:	b2e4      	uxtb	r4, r4
 801a808:	b90b      	cbnz	r3, 801a80e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801a80a:	4620      	mov	r0, r4
 801a80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a80e:	f105 0108 	add.w	r1, r5, #8
 801a812:	4630      	mov	r0, r6
 801a814:	f7ff ff5a 	bl	801a6cc <uxr_serialize_OBJK_Endpoint_QosBinary>
 801a818:	4607      	mov	r7, r0
 801a81a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801a81e:	4630      	mov	r0, r6
 801a820:	f7f7 f90c 	bl	8011a3c <ucdr_serialize_bool>
 801a824:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801a828:	4038      	ands	r0, r7
 801a82a:	b2c7      	uxtb	r7, r0
 801a82c:	b913      	cbnz	r3, 801a834 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801a82e:	403c      	ands	r4, r7
 801a830:	4620      	mov	r0, r4
 801a832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a834:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801a838:	4630      	mov	r0, r6
 801a83a:	f7f7 fd99 	bl	8012370 <ucdr_serialize_uint64_t>
 801a83e:	4007      	ands	r7, r0
 801a840:	e7f5      	b.n	801a82e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801a842:	bf00      	nop

0801a844 <uxr_serialize_OBJK_Replier_Binary>:
 801a844:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801a848:	460f      	mov	r7, r1
 801a84a:	4680      	mov	r8, r0
 801a84c:	6809      	ldr	r1, [r1, #0]
 801a84e:	f003 fd27 	bl	801e2a0 <ucdr_serialize_string>
 801a852:	4605      	mov	r5, r0
 801a854:	6879      	ldr	r1, [r7, #4]
 801a856:	4640      	mov	r0, r8
 801a858:	f003 fd22 	bl	801e2a0 <ucdr_serialize_string>
 801a85c:	4005      	ands	r5, r0
 801a85e:	68b9      	ldr	r1, [r7, #8]
 801a860:	4640      	mov	r0, r8
 801a862:	b2ec      	uxtb	r4, r5
 801a864:	f003 fd1c 	bl	801e2a0 <ucdr_serialize_string>
 801a868:	7b39      	ldrb	r1, [r7, #12]
 801a86a:	4004      	ands	r4, r0
 801a86c:	4640      	mov	r0, r8
 801a86e:	f7f7 f8e5 	bl	8011a3c <ucdr_serialize_bool>
 801a872:	7b3b      	ldrb	r3, [r7, #12]
 801a874:	4004      	ands	r4, r0
 801a876:	b94b      	cbnz	r3, 801a88c <uxr_serialize_OBJK_Replier_Binary+0x48>
 801a878:	7d39      	ldrb	r1, [r7, #20]
 801a87a:	4640      	mov	r0, r8
 801a87c:	f7f7 f8de 	bl	8011a3c <ucdr_serialize_bool>
 801a880:	7d3b      	ldrb	r3, [r7, #20]
 801a882:	4004      	ands	r4, r0
 801a884:	b943      	cbnz	r3, 801a898 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801a886:	4620      	mov	r0, r4
 801a888:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a88c:	6939      	ldr	r1, [r7, #16]
 801a88e:	4640      	mov	r0, r8
 801a890:	f003 fd06 	bl	801e2a0 <ucdr_serialize_string>
 801a894:	4004      	ands	r4, r0
 801a896:	e7ef      	b.n	801a878 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801a898:	69b9      	ldr	r1, [r7, #24]
 801a89a:	4640      	mov	r0, r8
 801a89c:	f003 fd00 	bl	801e2a0 <ucdr_serialize_string>
 801a8a0:	4004      	ands	r4, r0
 801a8a2:	b2e4      	uxtb	r4, r4
 801a8a4:	4620      	mov	r0, r4
 801a8a6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801a8aa:	bf00      	nop

0801a8ac <uxr_deserialize_ObjectVariant>:
 801a8ac:	b570      	push	{r4, r5, r6, lr}
 801a8ae:	4605      	mov	r5, r0
 801a8b0:	460e      	mov	r6, r1
 801a8b2:	f7f7 f907 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801a8b6:	b168      	cbz	r0, 801a8d4 <uxr_deserialize_ObjectVariant+0x28>
 801a8b8:	7833      	ldrb	r3, [r6, #0]
 801a8ba:	4604      	mov	r4, r0
 801a8bc:	3b01      	subs	r3, #1
 801a8be:	2b0d      	cmp	r3, #13
 801a8c0:	d809      	bhi.n	801a8d6 <uxr_deserialize_ObjectVariant+0x2a>
 801a8c2:	e8df f003 	tbb	[pc, r3]
 801a8c6:	0a41      	.short	0x0a41
 801a8c8:	0a0a2323 	.word	0x0a0a2323
 801a8cc:	10080a0a 	.word	0x10080a0a
 801a8d0:	565c1010 	.word	0x565c1010
 801a8d4:	2400      	movs	r4, #0
 801a8d6:	4620      	mov	r0, r4
 801a8d8:	bd70      	pop	{r4, r5, r6, pc}
 801a8da:	1d31      	adds	r1, r6, #4
 801a8dc:	4628      	mov	r0, r5
 801a8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8e2:	f7ff bd21 	b.w	801a328 <uxr_deserialize_DATAWRITER_Representation>
 801a8e6:	1d31      	adds	r1, r6, #4
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	f7f7 f8eb 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801a8ee:	2800      	cmp	r0, #0
 801a8f0:	d0f0      	beq.n	801a8d4 <uxr_deserialize_ObjectVariant+0x28>
 801a8f2:	7933      	ldrb	r3, [r6, #4]
 801a8f4:	2b01      	cmp	r3, #1
 801a8f6:	d001      	beq.n	801a8fc <uxr_deserialize_ObjectVariant+0x50>
 801a8f8:	2b02      	cmp	r3, #2
 801a8fa:	d1ec      	bne.n	801a8d6 <uxr_deserialize_ObjectVariant+0x2a>
 801a8fc:	68b1      	ldr	r1, [r6, #8]
 801a8fe:	4628      	mov	r0, r5
 801a900:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a908:	f003 bcda 	b.w	801e2c0 <ucdr_deserialize_string>
 801a90c:	1d31      	adds	r1, r6, #4
 801a90e:	4628      	mov	r0, r5
 801a910:	f7f7 f8d8 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801a914:	4604      	mov	r4, r0
 801a916:	b170      	cbz	r0, 801a936 <uxr_deserialize_ObjectVariant+0x8a>
 801a918:	7933      	ldrb	r3, [r6, #4]
 801a91a:	2b02      	cmp	r3, #2
 801a91c:	d04c      	beq.n	801a9b8 <uxr_deserialize_ObjectVariant+0x10c>
 801a91e:	2b03      	cmp	r3, #3
 801a920:	d109      	bne.n	801a936 <uxr_deserialize_ObjectVariant+0x8a>
 801a922:	f106 0308 	add.w	r3, r6, #8
 801a926:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a92a:	f106 010c 	add.w	r1, r6, #12
 801a92e:	4628      	mov	r0, r5
 801a930:	f7f8 fc3c 	bl	80131ac <ucdr_deserialize_sequence_uint8_t>
 801a934:	4604      	mov	r4, r0
 801a936:	2202      	movs	r2, #2
 801a938:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801a93c:	4628      	mov	r0, r5
 801a93e:	f7fc fddb 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a942:	4020      	ands	r0, r4
 801a944:	b2c4      	uxtb	r4, r0
 801a946:	e7c6      	b.n	801a8d6 <uxr_deserialize_ObjectVariant+0x2a>
 801a948:	1d31      	adds	r1, r6, #4
 801a94a:	4628      	mov	r0, r5
 801a94c:	f7f7 f8ba 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801a950:	4604      	mov	r4, r0
 801a952:	b130      	cbz	r0, 801a962 <uxr_deserialize_ObjectVariant+0xb6>
 801a954:	7933      	ldrb	r3, [r6, #4]
 801a956:	2b02      	cmp	r3, #2
 801a958:	d036      	beq.n	801a9c8 <uxr_deserialize_ObjectVariant+0x11c>
 801a95a:	2b03      	cmp	r3, #3
 801a95c:	d03c      	beq.n	801a9d8 <uxr_deserialize_ObjectVariant+0x12c>
 801a95e:	2b01      	cmp	r3, #1
 801a960:	d032      	beq.n	801a9c8 <uxr_deserialize_ObjectVariant+0x11c>
 801a962:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801a966:	4628      	mov	r0, r5
 801a968:	f7f7 fe52 	bl	8012610 <ucdr_deserialize_int16_t>
 801a96c:	4020      	ands	r0, r4
 801a96e:	b2c4      	uxtb	r4, r0
 801a970:	e7b1      	b.n	801a8d6 <uxr_deserialize_ObjectVariant+0x2a>
 801a972:	1d31      	adds	r1, r6, #4
 801a974:	4628      	mov	r0, r5
 801a976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a97a:	f7ff bb8b 	b.w	801a094 <uxr_deserialize_CLIENT_Representation>
 801a97e:	2204      	movs	r2, #4
 801a980:	4628      	mov	r0, r5
 801a982:	18b1      	adds	r1, r6, r2
 801a984:	f7fc fdb8 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a988:	4604      	mov	r4, r0
 801a98a:	2202      	movs	r2, #2
 801a98c:	f106 0108 	add.w	r1, r6, #8
 801a990:	4628      	mov	r0, r5
 801a992:	f7fc fdb1 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a996:	4004      	ands	r4, r0
 801a998:	2202      	movs	r2, #2
 801a99a:	f106 010a 	add.w	r1, r6, #10
 801a99e:	4628      	mov	r0, r5
 801a9a0:	b2e4      	uxtb	r4, r4
 801a9a2:	f7fc fda9 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	f106 010c 	add.w	r1, r6, #12
 801a9ac:	4628      	mov	r0, r5
 801a9ae:	401c      	ands	r4, r3
 801a9b0:	f7f7 f85a 	bl	8011a68 <ucdr_deserialize_bool>
 801a9b4:	4004      	ands	r4, r0
 801a9b6:	e78e      	b.n	801a8d6 <uxr_deserialize_ObjectVariant+0x2a>
 801a9b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a9bc:	68b1      	ldr	r1, [r6, #8]
 801a9be:	4628      	mov	r0, r5
 801a9c0:	f003 fc7e 	bl	801e2c0 <ucdr_deserialize_string>
 801a9c4:	4604      	mov	r4, r0
 801a9c6:	e7b6      	b.n	801a936 <uxr_deserialize_ObjectVariant+0x8a>
 801a9c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a9cc:	68b1      	ldr	r1, [r6, #8]
 801a9ce:	4628      	mov	r0, r5
 801a9d0:	f003 fc76 	bl	801e2c0 <ucdr_deserialize_string>
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	e7c4      	b.n	801a962 <uxr_deserialize_ObjectVariant+0xb6>
 801a9d8:	f106 0308 	add.w	r3, r6, #8
 801a9dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a9e0:	f106 010c 	add.w	r1, r6, #12
 801a9e4:	4628      	mov	r0, r5
 801a9e6:	f7f8 fbe1 	bl	80131ac <ucdr_deserialize_sequence_uint8_t>
 801a9ea:	4604      	mov	r4, r0
 801a9ec:	e7b9      	b.n	801a962 <uxr_deserialize_ObjectVariant+0xb6>
 801a9ee:	bf00      	nop

0801a9f0 <uxr_deserialize_BaseObjectRequest>:
 801a9f0:	b570      	push	{r4, r5, r6, lr}
 801a9f2:	2202      	movs	r2, #2
 801a9f4:	4605      	mov	r5, r0
 801a9f6:	460e      	mov	r6, r1
 801a9f8:	f7fc fd7e 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801a9fc:	2202      	movs	r2, #2
 801a9fe:	4604      	mov	r4, r0
 801aa00:	4628      	mov	r0, r5
 801aa02:	18b1      	adds	r1, r6, r2
 801aa04:	f7fc fd78 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801aa08:	4020      	ands	r0, r4
 801aa0a:	b2c0      	uxtb	r0, r0
 801aa0c:	bd70      	pop	{r4, r5, r6, pc}
 801aa0e:	bf00      	nop

0801aa10 <uxr_serialize_ActivityInfoVariant>:
 801aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa14:	460e      	mov	r6, r1
 801aa16:	7809      	ldrb	r1, [r1, #0]
 801aa18:	4680      	mov	r8, r0
 801aa1a:	f7f7 f83d 	bl	8011a98 <ucdr_serialize_uint8_t>
 801aa1e:	4607      	mov	r7, r0
 801aa20:	b138      	cbz	r0, 801aa32 <uxr_serialize_ActivityInfoVariant+0x22>
 801aa22:	7833      	ldrb	r3, [r6, #0]
 801aa24:	2b06      	cmp	r3, #6
 801aa26:	f000 8081 	beq.w	801ab2c <uxr_serialize_ActivityInfoVariant+0x11c>
 801aa2a:	2b0d      	cmp	r3, #13
 801aa2c:	d014      	beq.n	801aa58 <uxr_serialize_ActivityInfoVariant+0x48>
 801aa2e:	2b05      	cmp	r3, #5
 801aa30:	d002      	beq.n	801aa38 <uxr_serialize_ActivityInfoVariant+0x28>
 801aa32:	4638      	mov	r0, r7
 801aa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa38:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801aa3c:	4640      	mov	r0, r8
 801aa3e:	f7f7 fd67 	bl	8012510 <ucdr_serialize_int16_t>
 801aa42:	4607      	mov	r7, r0
 801aa44:	4640      	mov	r0, r8
 801aa46:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801aa4a:	f7f7 fc91 	bl	8012370 <ucdr_serialize_uint64_t>
 801aa4e:	4038      	ands	r0, r7
 801aa50:	b2c7      	uxtb	r7, r0
 801aa52:	4638      	mov	r0, r7
 801aa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa58:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801aa5c:	4640      	mov	r0, r8
 801aa5e:	f7f7 fd57 	bl	8012510 <ucdr_serialize_int16_t>
 801aa62:	68f1      	ldr	r1, [r6, #12]
 801aa64:	4607      	mov	r7, r0
 801aa66:	4640      	mov	r0, r8
 801aa68:	f7f7 fa2c 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801aa6c:	68f3      	ldr	r3, [r6, #12]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d0ed      	beq.n	801aa4e <uxr_serialize_ActivityInfoVariant+0x3e>
 801aa72:	b318      	cbz	r0, 801aabc <uxr_serialize_ActivityInfoVariant+0xac>
 801aa74:	f106 090c 	add.w	r9, r6, #12
 801aa78:	2400      	movs	r4, #0
 801aa7a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801aa7e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801aa82:	7c29      	ldrb	r1, [r5, #16]
 801aa84:	4640      	mov	r0, r8
 801aa86:	f7f7 f807 	bl	8011a98 <ucdr_serialize_uint8_t>
 801aa8a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801aa8e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801aa92:	2800      	cmp	r0, #0
 801aa94:	d051      	beq.n	801ab3a <uxr_serialize_ActivityInfoVariant+0x12a>
 801aa96:	7c2b      	ldrb	r3, [r5, #16]
 801aa98:	00c9      	lsls	r1, r1, #3
 801aa9a:	2b03      	cmp	r3, #3
 801aa9c:	d854      	bhi.n	801ab48 <uxr_serialize_ActivityInfoVariant+0x138>
 801aa9e:	e8df f003 	tbb	[pc, r3]
 801aaa2:	2133      	.short	0x2133
 801aaa4:	020f      	.short	0x020f
 801aaa6:	4449      	add	r1, r9
 801aaa8:	4640      	mov	r0, r8
 801aaaa:	6889      	ldr	r1, [r1, #8]
 801aaac:	f003 fbf8 	bl	801e2a0 <ucdr_serialize_string>
 801aab0:	3401      	adds	r4, #1
 801aab2:	68f2      	ldr	r2, [r6, #12]
 801aab4:	4294      	cmp	r4, r2
 801aab6:	d244      	bcs.n	801ab42 <uxr_serialize_ActivityInfoVariant+0x132>
 801aab8:	2800      	cmp	r0, #0
 801aaba:	d1de      	bne.n	801aa7a <uxr_serialize_ActivityInfoVariant+0x6a>
 801aabc:	2700      	movs	r7, #0
 801aabe:	e7b8      	b.n	801aa32 <uxr_serialize_ActivityInfoVariant+0x22>
 801aac0:	3108      	adds	r1, #8
 801aac2:	44a2      	add	sl, r4
 801aac4:	2210      	movs	r2, #16
 801aac6:	4640      	mov	r0, r8
 801aac8:	4449      	add	r1, r9
 801aaca:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801aace:	f7fc fcaf 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801aad2:	4605      	mov	r5, r0
 801aad4:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801aad8:	4640      	mov	r0, r8
 801aada:	f7f7 f9f3 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801aade:	4028      	ands	r0, r5
 801aae0:	b2c0      	uxtb	r0, r0
 801aae2:	e7e5      	b.n	801aab0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801aae4:	3108      	adds	r1, #8
 801aae6:	44a2      	add	sl, r4
 801aae8:	2204      	movs	r2, #4
 801aaea:	4640      	mov	r0, r8
 801aaec:	4449      	add	r1, r9
 801aaee:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801aaf2:	f7fc fc9d 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801aaf6:	4605      	mov	r5, r0
 801aaf8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801aafc:	4640      	mov	r0, r8
 801aafe:	f7f6 fff7 	bl	8011af0 <ucdr_serialize_uint16_t>
 801ab02:	4028      	ands	r0, r5
 801ab04:	b2c0      	uxtb	r0, r0
 801ab06:	e7d3      	b.n	801aab0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ab08:	3108      	adds	r1, #8
 801ab0a:	44a2      	add	sl, r4
 801ab0c:	2202      	movs	r2, #2
 801ab0e:	4640      	mov	r0, r8
 801ab10:	4449      	add	r1, r9
 801ab12:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801ab16:	f7fc fc8b 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801ab1a:	4605      	mov	r5, r0
 801ab1c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801ab20:	4640      	mov	r0, r8
 801ab22:	f7f6 ffb9 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ab26:	4028      	ands	r0, r5
 801ab28:	b2c0      	uxtb	r0, r0
 801ab2a:	e7c1      	b.n	801aab0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801ab2c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ab30:	4640      	mov	r0, r8
 801ab32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab36:	f7f7 bceb 	b.w	8012510 <ucdr_serialize_int16_t>
 801ab3a:	3401      	adds	r4, #1
 801ab3c:	68f2      	ldr	r2, [r6, #12]
 801ab3e:	42a2      	cmp	r2, r4
 801ab40:	d8bc      	bhi.n	801aabc <uxr_serialize_ActivityInfoVariant+0xac>
 801ab42:	4007      	ands	r7, r0
 801ab44:	b2ff      	uxtb	r7, r7
 801ab46:	e774      	b.n	801aa32 <uxr_serialize_ActivityInfoVariant+0x22>
 801ab48:	3401      	adds	r4, #1
 801ab4a:	68f3      	ldr	r3, [r6, #12]
 801ab4c:	3518      	adds	r5, #24
 801ab4e:	429c      	cmp	r4, r3
 801ab50:	d397      	bcc.n	801aa82 <uxr_serialize_ActivityInfoVariant+0x72>
 801ab52:	e76e      	b.n	801aa32 <uxr_serialize_ActivityInfoVariant+0x22>

0801ab54 <uxr_deserialize_BaseObjectReply>:
 801ab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab58:	2202      	movs	r2, #2
 801ab5a:	4606      	mov	r6, r0
 801ab5c:	460f      	mov	r7, r1
 801ab5e:	f7fc fccb 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801ab62:	2202      	movs	r2, #2
 801ab64:	4605      	mov	r5, r0
 801ab66:	4630      	mov	r0, r6
 801ab68:	18b9      	adds	r1, r7, r2
 801ab6a:	f7fc fcc5 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801ab6e:	4680      	mov	r8, r0
 801ab70:	1d39      	adds	r1, r7, #4
 801ab72:	4630      	mov	r0, r6
 801ab74:	f7f6 ffa6 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801ab78:	ea05 0508 	and.w	r5, r5, r8
 801ab7c:	4604      	mov	r4, r0
 801ab7e:	1d79      	adds	r1, r7, #5
 801ab80:	4630      	mov	r0, r6
 801ab82:	402c      	ands	r4, r5
 801ab84:	f7f6 ff9e 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801ab88:	4020      	ands	r0, r4
 801ab8a:	b2c0      	uxtb	r0, r0
 801ab8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ab90 <uxr_serialize_ReadSpecification>:
 801ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab92:	460e      	mov	r6, r1
 801ab94:	4607      	mov	r7, r0
 801ab96:	7809      	ldrb	r1, [r1, #0]
 801ab98:	f7f6 ff7e 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ab9c:	4604      	mov	r4, r0
 801ab9e:	7871      	ldrb	r1, [r6, #1]
 801aba0:	4638      	mov	r0, r7
 801aba2:	f7f6 ff79 	bl	8011a98 <ucdr_serialize_uint8_t>
 801aba6:	4004      	ands	r4, r0
 801aba8:	78b1      	ldrb	r1, [r6, #2]
 801abaa:	4638      	mov	r0, r7
 801abac:	f7f6 ff46 	bl	8011a3c <ucdr_serialize_bool>
 801abb0:	78b3      	ldrb	r3, [r6, #2]
 801abb2:	b2e4      	uxtb	r4, r4
 801abb4:	4004      	ands	r4, r0
 801abb6:	b943      	cbnz	r3, 801abca <uxr_serialize_ReadSpecification+0x3a>
 801abb8:	7a31      	ldrb	r1, [r6, #8]
 801abba:	4638      	mov	r0, r7
 801abbc:	f7f6 ff3e 	bl	8011a3c <ucdr_serialize_bool>
 801abc0:	7a33      	ldrb	r3, [r6, #8]
 801abc2:	4004      	ands	r4, r0
 801abc4:	b93b      	cbnz	r3, 801abd6 <uxr_serialize_ReadSpecification+0x46>
 801abc6:	4620      	mov	r0, r4
 801abc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abca:	6871      	ldr	r1, [r6, #4]
 801abcc:	4638      	mov	r0, r7
 801abce:	f003 fb67 	bl	801e2a0 <ucdr_serialize_string>
 801abd2:	4004      	ands	r4, r0
 801abd4:	e7f0      	b.n	801abb8 <uxr_serialize_ReadSpecification+0x28>
 801abd6:	8971      	ldrh	r1, [r6, #10]
 801abd8:	4638      	mov	r0, r7
 801abda:	f7f6 ff89 	bl	8011af0 <ucdr_serialize_uint16_t>
 801abde:	4605      	mov	r5, r0
 801abe0:	89b1      	ldrh	r1, [r6, #12]
 801abe2:	4638      	mov	r0, r7
 801abe4:	f7f6 ff84 	bl	8011af0 <ucdr_serialize_uint16_t>
 801abe8:	4005      	ands	r5, r0
 801abea:	89f1      	ldrh	r1, [r6, #14]
 801abec:	4638      	mov	r0, r7
 801abee:	b2ed      	uxtb	r5, r5
 801abf0:	f7f6 ff7e 	bl	8011af0 <ucdr_serialize_uint16_t>
 801abf4:	8a31      	ldrh	r1, [r6, #16]
 801abf6:	4025      	ands	r5, r4
 801abf8:	4604      	mov	r4, r0
 801abfa:	4638      	mov	r0, r7
 801abfc:	4025      	ands	r5, r4
 801abfe:	f7f6 ff77 	bl	8011af0 <ucdr_serialize_uint16_t>
 801ac02:	ea00 0405 	and.w	r4, r0, r5
 801ac06:	4620      	mov	r0, r4
 801ac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac0a:	bf00      	nop

0801ac0c <uxr_serialize_CREATE_CLIENT_Payload>:
 801ac0c:	f7ff b9ea 	b.w	8019fe4 <uxr_serialize_CLIENT_Representation>

0801ac10 <uxr_serialize_CREATE_Payload>:
 801ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac12:	2202      	movs	r2, #2
 801ac14:	4607      	mov	r7, r0
 801ac16:	460e      	mov	r6, r1
 801ac18:	f7fc fc0a 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801ac1c:	2202      	movs	r2, #2
 801ac1e:	4605      	mov	r5, r0
 801ac20:	4638      	mov	r0, r7
 801ac22:	18b1      	adds	r1, r6, r2
 801ac24:	f7fc fc04 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801ac28:	7931      	ldrb	r1, [r6, #4]
 801ac2a:	4604      	mov	r4, r0
 801ac2c:	4638      	mov	r0, r7
 801ac2e:	f7f6 ff33 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ac32:	b170      	cbz	r0, 801ac52 <uxr_serialize_CREATE_Payload+0x42>
 801ac34:	7933      	ldrb	r3, [r6, #4]
 801ac36:	402c      	ands	r4, r5
 801ac38:	3b01      	subs	r3, #1
 801ac3a:	b2e4      	uxtb	r4, r4
 801ac3c:	2b0d      	cmp	r3, #13
 801ac3e:	d809      	bhi.n	801ac54 <uxr_serialize_CREATE_Payload+0x44>
 801ac40:	e8df f003 	tbb	[pc, r3]
 801ac44:	23230a4c 	.word	0x23230a4c
 801ac48:	0a0a0a0a 	.word	0x0a0a0a0a
 801ac4c:	12121208 	.word	0x12121208
 801ac50:	3e45      	.short	0x3e45
 801ac52:	2400      	movs	r4, #0
 801ac54:	4620      	mov	r0, r4
 801ac56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac58:	f106 0108 	add.w	r1, r6, #8
 801ac5c:	4638      	mov	r0, r7
 801ac5e:	f7ff fac7 	bl	801a1f0 <uxr_serialize_DATAWRITER_Representation>
 801ac62:	4004      	ands	r4, r0
 801ac64:	4620      	mov	r0, r4
 801ac66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac68:	7a31      	ldrb	r1, [r6, #8]
 801ac6a:	4638      	mov	r0, r7
 801ac6c:	f7f6 ff14 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ac70:	2800      	cmp	r0, #0
 801ac72:	d0ee      	beq.n	801ac52 <uxr_serialize_CREATE_Payload+0x42>
 801ac74:	7a33      	ldrb	r3, [r6, #8]
 801ac76:	2b01      	cmp	r3, #1
 801ac78:	d001      	beq.n	801ac7e <uxr_serialize_CREATE_Payload+0x6e>
 801ac7a:	2b02      	cmp	r3, #2
 801ac7c:	d1ea      	bne.n	801ac54 <uxr_serialize_CREATE_Payload+0x44>
 801ac7e:	68f1      	ldr	r1, [r6, #12]
 801ac80:	4638      	mov	r0, r7
 801ac82:	f003 fb0d 	bl	801e2a0 <ucdr_serialize_string>
 801ac86:	4004      	ands	r4, r0
 801ac88:	e7e4      	b.n	801ac54 <uxr_serialize_CREATE_Payload+0x44>
 801ac8a:	7a31      	ldrb	r1, [r6, #8]
 801ac8c:	4638      	mov	r0, r7
 801ac8e:	f7f6 ff03 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ac92:	4605      	mov	r5, r0
 801ac94:	b158      	cbz	r0, 801acae <uxr_serialize_CREATE_Payload+0x9e>
 801ac96:	7a33      	ldrb	r3, [r6, #8]
 801ac98:	2b02      	cmp	r3, #2
 801ac9a:	d034      	beq.n	801ad06 <uxr_serialize_CREATE_Payload+0xf6>
 801ac9c:	2b03      	cmp	r3, #3
 801ac9e:	d106      	bne.n	801acae <uxr_serialize_CREATE_Payload+0x9e>
 801aca0:	68f2      	ldr	r2, [r6, #12]
 801aca2:	f106 0110 	add.w	r1, r6, #16
 801aca6:	4638      	mov	r0, r7
 801aca8:	f7f8 fa6e 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801acac:	4605      	mov	r5, r0
 801acae:	2202      	movs	r2, #2
 801acb0:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801acb4:	4638      	mov	r0, r7
 801acb6:	f7fc fbbb 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801acba:	4028      	ands	r0, r5
 801acbc:	4004      	ands	r4, r0
 801acbe:	e7c9      	b.n	801ac54 <uxr_serialize_CREATE_Payload+0x44>
 801acc0:	f106 0108 	add.w	r1, r6, #8
 801acc4:	4638      	mov	r0, r7
 801acc6:	f7ff f98d 	bl	8019fe4 <uxr_serialize_CLIENT_Representation>
 801acca:	4004      	ands	r4, r0
 801accc:	e7c2      	b.n	801ac54 <uxr_serialize_CREATE_Payload+0x44>
 801acce:	f106 0108 	add.w	r1, r6, #8
 801acd2:	4638      	mov	r0, r7
 801acd4:	f7ff fa42 	bl	801a15c <uxr_serialize_AGENT_Representation>
 801acd8:	4004      	ands	r4, r0
 801acda:	e7bb      	b.n	801ac54 <uxr_serialize_CREATE_Payload+0x44>
 801acdc:	7a31      	ldrb	r1, [r6, #8]
 801acde:	4638      	mov	r0, r7
 801ace0:	f7f6 feda 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ace4:	4605      	mov	r5, r0
 801ace6:	b130      	cbz	r0, 801acf6 <uxr_serialize_CREATE_Payload+0xe6>
 801ace8:	7a33      	ldrb	r3, [r6, #8]
 801acea:	2b02      	cmp	r3, #2
 801acec:	d011      	beq.n	801ad12 <uxr_serialize_CREATE_Payload+0x102>
 801acee:	2b03      	cmp	r3, #3
 801acf0:	d015      	beq.n	801ad1e <uxr_serialize_CREATE_Payload+0x10e>
 801acf2:	2b01      	cmp	r3, #1
 801acf4:	d00d      	beq.n	801ad12 <uxr_serialize_CREATE_Payload+0x102>
 801acf6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801acfa:	4638      	mov	r0, r7
 801acfc:	f7f7 fc08 	bl	8012510 <ucdr_serialize_int16_t>
 801ad00:	4028      	ands	r0, r5
 801ad02:	4004      	ands	r4, r0
 801ad04:	e7a6      	b.n	801ac54 <uxr_serialize_CREATE_Payload+0x44>
 801ad06:	68f1      	ldr	r1, [r6, #12]
 801ad08:	4638      	mov	r0, r7
 801ad0a:	f003 fac9 	bl	801e2a0 <ucdr_serialize_string>
 801ad0e:	4605      	mov	r5, r0
 801ad10:	e7cd      	b.n	801acae <uxr_serialize_CREATE_Payload+0x9e>
 801ad12:	68f1      	ldr	r1, [r6, #12]
 801ad14:	4638      	mov	r0, r7
 801ad16:	f003 fac3 	bl	801e2a0 <ucdr_serialize_string>
 801ad1a:	4605      	mov	r5, r0
 801ad1c:	e7eb      	b.n	801acf6 <uxr_serialize_CREATE_Payload+0xe6>
 801ad1e:	68f2      	ldr	r2, [r6, #12]
 801ad20:	f106 0110 	add.w	r1, r6, #16
 801ad24:	4638      	mov	r0, r7
 801ad26:	f7f8 fa2f 	bl	8013188 <ucdr_serialize_sequence_uint8_t>
 801ad2a:	4605      	mov	r5, r0
 801ad2c:	e7e3      	b.n	801acf6 <uxr_serialize_CREATE_Payload+0xe6>
 801ad2e:	bf00      	nop

0801ad30 <uxr_deserialize_GET_INFO_Payload>:
 801ad30:	b570      	push	{r4, r5, r6, lr}
 801ad32:	2202      	movs	r2, #2
 801ad34:	4605      	mov	r5, r0
 801ad36:	460e      	mov	r6, r1
 801ad38:	f7fc fbde 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801ad3c:	2202      	movs	r2, #2
 801ad3e:	4604      	mov	r4, r0
 801ad40:	4628      	mov	r0, r5
 801ad42:	18b1      	adds	r1, r6, r2
 801ad44:	f7fc fbd8 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	1d31      	adds	r1, r6, #4
 801ad4c:	4628      	mov	r0, r5
 801ad4e:	401c      	ands	r4, r3
 801ad50:	f7f7 f9e8 	bl	8012124 <ucdr_deserialize_uint32_t>
 801ad54:	b2e4      	uxtb	r4, r4
 801ad56:	4020      	ands	r0, r4
 801ad58:	bd70      	pop	{r4, r5, r6, pc}
 801ad5a:	bf00      	nop

0801ad5c <uxr_serialize_DELETE_Payload>:
 801ad5c:	b570      	push	{r4, r5, r6, lr}
 801ad5e:	2202      	movs	r2, #2
 801ad60:	4605      	mov	r5, r0
 801ad62:	460e      	mov	r6, r1
 801ad64:	f7fc fb64 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801ad68:	2202      	movs	r2, #2
 801ad6a:	4604      	mov	r4, r0
 801ad6c:	4628      	mov	r0, r5
 801ad6e:	18b1      	adds	r1, r6, r2
 801ad70:	f7fc fb5e 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801ad74:	4020      	ands	r0, r4
 801ad76:	b2c0      	uxtb	r0, r0
 801ad78:	bd70      	pop	{r4, r5, r6, pc}
 801ad7a:	bf00      	nop

0801ad7c <uxr_deserialize_STATUS_AGENT_Payload>:
 801ad7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad80:	460e      	mov	r6, r1
 801ad82:	4605      	mov	r5, r0
 801ad84:	f7f6 fe9e 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801ad88:	4604      	mov	r4, r0
 801ad8a:	1c71      	adds	r1, r6, #1
 801ad8c:	4628      	mov	r0, r5
 801ad8e:	f7f6 fe99 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801ad92:	2204      	movs	r2, #4
 801ad94:	4681      	mov	r9, r0
 801ad96:	4628      	mov	r0, r5
 801ad98:	18b1      	adds	r1, r6, r2
 801ad9a:	f7fc fbad 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801ad9e:	f106 0108 	add.w	r1, r6, #8
 801ada2:	4680      	mov	r8, r0
 801ada4:	2202      	movs	r2, #2
 801ada6:	4628      	mov	r0, r5
 801ada8:	f7fc fba6 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801adac:	ea04 0309 	and.w	r3, r4, r9
 801adb0:	4607      	mov	r7, r0
 801adb2:	2202      	movs	r2, #2
 801adb4:	b2db      	uxtb	r3, r3
 801adb6:	f106 010a 	add.w	r1, r6, #10
 801adba:	4628      	mov	r0, r5
 801adbc:	ea03 0408 	and.w	r4, r3, r8
 801adc0:	f7fc fb9a 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801adc4:	4603      	mov	r3, r0
 801adc6:	4628      	mov	r0, r5
 801adc8:	403c      	ands	r4, r7
 801adca:	f106 010c 	add.w	r1, r6, #12
 801adce:	461d      	mov	r5, r3
 801add0:	f7f6 fe4a 	bl	8011a68 <ucdr_deserialize_bool>
 801add4:	4025      	ands	r5, r4
 801add6:	4028      	ands	r0, r5
 801add8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801addc <uxr_deserialize_STATUS_Payload>:
 801addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ade0:	2202      	movs	r2, #2
 801ade2:	4606      	mov	r6, r0
 801ade4:	460f      	mov	r7, r1
 801ade6:	f7fc fb87 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801adea:	2202      	movs	r2, #2
 801adec:	4605      	mov	r5, r0
 801adee:	4630      	mov	r0, r6
 801adf0:	18b9      	adds	r1, r7, r2
 801adf2:	f7fc fb81 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801adf6:	4680      	mov	r8, r0
 801adf8:	1d39      	adds	r1, r7, #4
 801adfa:	4630      	mov	r0, r6
 801adfc:	f7f6 fe62 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801ae00:	ea05 0508 	and.w	r5, r5, r8
 801ae04:	4604      	mov	r4, r0
 801ae06:	1d79      	adds	r1, r7, #5
 801ae08:	4630      	mov	r0, r6
 801ae0a:	402c      	ands	r4, r5
 801ae0c:	f7f6 fe5a 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801ae10:	4020      	ands	r0, r4
 801ae12:	b2c0      	uxtb	r0, r0
 801ae14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ae18 <uxr_serialize_INFO_Payload>:
 801ae18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae1c:	2202      	movs	r2, #2
 801ae1e:	460c      	mov	r4, r1
 801ae20:	4605      	mov	r5, r0
 801ae22:	f7fc fb05 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801ae26:	2202      	movs	r2, #2
 801ae28:	4680      	mov	r8, r0
 801ae2a:	4628      	mov	r0, r5
 801ae2c:	18a1      	adds	r1, r4, r2
 801ae2e:	f7fc faff 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801ae32:	4607      	mov	r7, r0
 801ae34:	7921      	ldrb	r1, [r4, #4]
 801ae36:	4628      	mov	r0, r5
 801ae38:	f7f6 fe2e 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ae3c:	ea08 0807 	and.w	r8, r8, r7
 801ae40:	4606      	mov	r6, r0
 801ae42:	7961      	ldrb	r1, [r4, #5]
 801ae44:	4628      	mov	r0, r5
 801ae46:	ea06 0608 	and.w	r6, r6, r8
 801ae4a:	f7f6 fe25 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ae4e:	7a21      	ldrb	r1, [r4, #8]
 801ae50:	4030      	ands	r0, r6
 801ae52:	b2c7      	uxtb	r7, r0
 801ae54:	4628      	mov	r0, r5
 801ae56:	f7f6 fdf1 	bl	8011a3c <ucdr_serialize_bool>
 801ae5a:	7a23      	ldrb	r3, [r4, #8]
 801ae5c:	4606      	mov	r6, r0
 801ae5e:	b96b      	cbnz	r3, 801ae7c <uxr_serialize_INFO_Payload+0x64>
 801ae60:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801ae64:	4628      	mov	r0, r5
 801ae66:	f7f6 fde9 	bl	8011a3c <ucdr_serialize_bool>
 801ae6a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801ae6e:	4030      	ands	r0, r6
 801ae70:	b2c6      	uxtb	r6, r0
 801ae72:	b983      	cbnz	r3, 801ae96 <uxr_serialize_INFO_Payload+0x7e>
 801ae74:	ea06 0007 	and.w	r0, r6, r7
 801ae78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae7c:	7b21      	ldrb	r1, [r4, #12]
 801ae7e:	4628      	mov	r0, r5
 801ae80:	f7f6 fe0a 	bl	8011a98 <ucdr_serialize_uint8_t>
 801ae84:	b188      	cbz	r0, 801aeaa <uxr_serialize_INFO_Payload+0x92>
 801ae86:	f104 010c 	add.w	r1, r4, #12
 801ae8a:	4628      	mov	r0, r5
 801ae8c:	f7ff f9d8 	bl	801a240 <uxr_serialize_ObjectVariant.part.0>
 801ae90:	4030      	ands	r0, r6
 801ae92:	b2c6      	uxtb	r6, r0
 801ae94:	e7e4      	b.n	801ae60 <uxr_serialize_INFO_Payload+0x48>
 801ae96:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801ae9a:	4628      	mov	r0, r5
 801ae9c:	f7ff fdb8 	bl	801aa10 <uxr_serialize_ActivityInfoVariant>
 801aea0:	4006      	ands	r6, r0
 801aea2:	ea06 0007 	and.w	r0, r6, r7
 801aea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aeaa:	4606      	mov	r6, r0
 801aeac:	e7d8      	b.n	801ae60 <uxr_serialize_INFO_Payload+0x48>
 801aeae:	bf00      	nop

0801aeb0 <uxr_serialize_READ_DATA_Payload>:
 801aeb0:	b570      	push	{r4, r5, r6, lr}
 801aeb2:	2202      	movs	r2, #2
 801aeb4:	4605      	mov	r5, r0
 801aeb6:	460e      	mov	r6, r1
 801aeb8:	f7fc faba 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801aebc:	2202      	movs	r2, #2
 801aebe:	4604      	mov	r4, r0
 801aec0:	4628      	mov	r0, r5
 801aec2:	18b1      	adds	r1, r6, r2
 801aec4:	f7fc fab4 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801aec8:	4603      	mov	r3, r0
 801aeca:	1d31      	adds	r1, r6, #4
 801aecc:	4628      	mov	r0, r5
 801aece:	401c      	ands	r4, r3
 801aed0:	f7ff fe5e 	bl	801ab90 <uxr_serialize_ReadSpecification>
 801aed4:	b2e4      	uxtb	r4, r4
 801aed6:	4020      	ands	r0, r4
 801aed8:	bd70      	pop	{r4, r5, r6, pc}
 801aeda:	bf00      	nop

0801aedc <uxr_serialize_WRITE_DATA_Payload_Data>:
 801aedc:	b570      	push	{r4, r5, r6, lr}
 801aede:	2202      	movs	r2, #2
 801aee0:	4605      	mov	r5, r0
 801aee2:	460e      	mov	r6, r1
 801aee4:	f7fc faa4 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801aee8:	2202      	movs	r2, #2
 801aeea:	4604      	mov	r4, r0
 801aeec:	4628      	mov	r0, r5
 801aeee:	18b1      	adds	r1, r6, r2
 801aef0:	f7fc fa9e 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801aef4:	4020      	ands	r0, r4
 801aef6:	b2c0      	uxtb	r0, r0
 801aef8:	bd70      	pop	{r4, r5, r6, pc}
 801aefa:	bf00      	nop

0801aefc <uxr_serialize_ACKNACK_Payload>:
 801aefc:	b570      	push	{r4, r5, r6, lr}
 801aefe:	460c      	mov	r4, r1
 801af00:	4605      	mov	r5, r0
 801af02:	460e      	mov	r6, r1
 801af04:	f834 1b02 	ldrh.w	r1, [r4], #2
 801af08:	f7f6 fdf2 	bl	8011af0 <ucdr_serialize_uint16_t>
 801af0c:	2202      	movs	r2, #2
 801af0e:	4621      	mov	r1, r4
 801af10:	4604      	mov	r4, r0
 801af12:	4628      	mov	r0, r5
 801af14:	f7fc fa8c 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801af18:	4603      	mov	r3, r0
 801af1a:	7931      	ldrb	r1, [r6, #4]
 801af1c:	4628      	mov	r0, r5
 801af1e:	401c      	ands	r4, r3
 801af20:	f7f6 fdba 	bl	8011a98 <ucdr_serialize_uint8_t>
 801af24:	b2e4      	uxtb	r4, r4
 801af26:	4020      	ands	r0, r4
 801af28:	bd70      	pop	{r4, r5, r6, pc}
 801af2a:	bf00      	nop

0801af2c <uxr_deserialize_ACKNACK_Payload>:
 801af2c:	b570      	push	{r4, r5, r6, lr}
 801af2e:	460e      	mov	r6, r1
 801af30:	4605      	mov	r5, r0
 801af32:	f7f6 fedd 	bl	8011cf0 <ucdr_deserialize_uint16_t>
 801af36:	2202      	movs	r2, #2
 801af38:	4604      	mov	r4, r0
 801af3a:	4628      	mov	r0, r5
 801af3c:	18b1      	adds	r1, r6, r2
 801af3e:	f7fc fadb 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801af42:	4603      	mov	r3, r0
 801af44:	1d31      	adds	r1, r6, #4
 801af46:	4628      	mov	r0, r5
 801af48:	401c      	ands	r4, r3
 801af4a:	f7f6 fdbb 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801af4e:	b2e4      	uxtb	r4, r4
 801af50:	4020      	ands	r0, r4
 801af52:	bd70      	pop	{r4, r5, r6, pc}

0801af54 <uxr_serialize_HEARTBEAT_Payload>:
 801af54:	b570      	push	{r4, r5, r6, lr}
 801af56:	460d      	mov	r5, r1
 801af58:	4606      	mov	r6, r0
 801af5a:	8809      	ldrh	r1, [r1, #0]
 801af5c:	f7f6 fdc8 	bl	8011af0 <ucdr_serialize_uint16_t>
 801af60:	8869      	ldrh	r1, [r5, #2]
 801af62:	4604      	mov	r4, r0
 801af64:	4630      	mov	r0, r6
 801af66:	f7f6 fdc3 	bl	8011af0 <ucdr_serialize_uint16_t>
 801af6a:	4603      	mov	r3, r0
 801af6c:	7929      	ldrb	r1, [r5, #4]
 801af6e:	4630      	mov	r0, r6
 801af70:	401c      	ands	r4, r3
 801af72:	f7f6 fd91 	bl	8011a98 <ucdr_serialize_uint8_t>
 801af76:	b2e4      	uxtb	r4, r4
 801af78:	4020      	ands	r0, r4
 801af7a:	bd70      	pop	{r4, r5, r6, pc}

0801af7c <uxr_deserialize_HEARTBEAT_Payload>:
 801af7c:	b570      	push	{r4, r5, r6, lr}
 801af7e:	460e      	mov	r6, r1
 801af80:	4605      	mov	r5, r0
 801af82:	f7f6 feb5 	bl	8011cf0 <ucdr_deserialize_uint16_t>
 801af86:	4604      	mov	r4, r0
 801af88:	1cb1      	adds	r1, r6, #2
 801af8a:	4628      	mov	r0, r5
 801af8c:	f7f6 feb0 	bl	8011cf0 <ucdr_deserialize_uint16_t>
 801af90:	4603      	mov	r3, r0
 801af92:	1d31      	adds	r1, r6, #4
 801af94:	4628      	mov	r0, r5
 801af96:	401c      	ands	r4, r3
 801af98:	f7f6 fd94 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801af9c:	b2e4      	uxtb	r4, r4
 801af9e:	4020      	ands	r0, r4
 801afa0:	bd70      	pop	{r4, r5, r6, pc}
 801afa2:	bf00      	nop

0801afa4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801afa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afa8:	460e      	mov	r6, r1
 801afaa:	4605      	mov	r5, r0
 801afac:	f7f7 fc3c 	bl	8012828 <ucdr_deserialize_int32_t>
 801afb0:	4607      	mov	r7, r0
 801afb2:	1d31      	adds	r1, r6, #4
 801afb4:	4628      	mov	r0, r5
 801afb6:	f7f7 f8b5 	bl	8012124 <ucdr_deserialize_uint32_t>
 801afba:	4680      	mov	r8, r0
 801afbc:	f106 0108 	add.w	r1, r6, #8
 801afc0:	4628      	mov	r0, r5
 801afc2:	f7f7 fc31 	bl	8012828 <ucdr_deserialize_int32_t>
 801afc6:	ea07 0708 	and.w	r7, r7, r8
 801afca:	4604      	mov	r4, r0
 801afcc:	f106 010c 	add.w	r1, r6, #12
 801afd0:	4628      	mov	r0, r5
 801afd2:	403c      	ands	r4, r7
 801afd4:	f7f7 f8a6 	bl	8012124 <ucdr_deserialize_uint32_t>
 801afd8:	f106 0110 	add.w	r1, r6, #16
 801afdc:	4004      	ands	r4, r0
 801afde:	4628      	mov	r0, r5
 801afe0:	f7f7 fc22 	bl	8012828 <ucdr_deserialize_int32_t>
 801afe4:	4603      	mov	r3, r0
 801afe6:	b2e4      	uxtb	r4, r4
 801afe8:	4628      	mov	r0, r5
 801afea:	461d      	mov	r5, r3
 801afec:	f106 0114 	add.w	r1, r6, #20
 801aff0:	f7f7 f898 	bl	8012124 <ucdr_deserialize_uint32_t>
 801aff4:	402c      	ands	r4, r5
 801aff6:	4020      	ands	r0, r4
 801aff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801affc <uxr_serialize_SampleIdentity>:
 801affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b000:	4604      	mov	r4, r0
 801b002:	460d      	mov	r5, r1
 801b004:	220c      	movs	r2, #12
 801b006:	f7fc fa13 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801b00a:	2203      	movs	r2, #3
 801b00c:	f105 010c 	add.w	r1, r5, #12
 801b010:	4607      	mov	r7, r0
 801b012:	4620      	mov	r0, r4
 801b014:	f7fc fa0c 	bl	8017430 <ucdr_serialize_array_uint8_t>
 801b018:	7be9      	ldrb	r1, [r5, #15]
 801b01a:	4680      	mov	r8, r0
 801b01c:	4620      	mov	r0, r4
 801b01e:	f7f6 fd3b 	bl	8011a98 <ucdr_serialize_uint8_t>
 801b022:	6929      	ldr	r1, [r5, #16]
 801b024:	4606      	mov	r6, r0
 801b026:	4620      	mov	r0, r4
 801b028:	f7f7 fb66 	bl	80126f8 <ucdr_serialize_int32_t>
 801b02c:	ea07 0708 	and.w	r7, r7, r8
 801b030:	4603      	mov	r3, r0
 801b032:	4620      	mov	r0, r4
 801b034:	403e      	ands	r6, r7
 801b036:	6969      	ldr	r1, [r5, #20]
 801b038:	461c      	mov	r4, r3
 801b03a:	f7f6 ff43 	bl	8011ec4 <ucdr_serialize_uint32_t>
 801b03e:	4034      	ands	r4, r6
 801b040:	4020      	ands	r0, r4
 801b042:	b2c0      	uxtb	r0, r0
 801b044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b048 <uxr_deserialize_SampleIdentity>:
 801b048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b04c:	4604      	mov	r4, r0
 801b04e:	460d      	mov	r5, r1
 801b050:	220c      	movs	r2, #12
 801b052:	f7fc fa51 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801b056:	2203      	movs	r2, #3
 801b058:	f105 010c 	add.w	r1, r5, #12
 801b05c:	4607      	mov	r7, r0
 801b05e:	4620      	mov	r0, r4
 801b060:	f7fc fa4a 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801b064:	f105 010f 	add.w	r1, r5, #15
 801b068:	4680      	mov	r8, r0
 801b06a:	4620      	mov	r0, r4
 801b06c:	f7f6 fd2a 	bl	8011ac4 <ucdr_deserialize_uint8_t>
 801b070:	f105 0110 	add.w	r1, r5, #16
 801b074:	4606      	mov	r6, r0
 801b076:	4620      	mov	r0, r4
 801b078:	f7f7 fbd6 	bl	8012828 <ucdr_deserialize_int32_t>
 801b07c:	ea07 0708 	and.w	r7, r7, r8
 801b080:	4603      	mov	r3, r0
 801b082:	4620      	mov	r0, r4
 801b084:	403e      	ands	r6, r7
 801b086:	f105 0114 	add.w	r1, r5, #20
 801b08a:	461c      	mov	r4, r3
 801b08c:	f7f7 f84a 	bl	8012124 <ucdr_deserialize_uint32_t>
 801b090:	4034      	ands	r4, r6
 801b092:	4020      	ands	r0, r4
 801b094:	b2c0      	uxtb	r0, r0
 801b096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b09a:	bf00      	nop

0801b09c <rcl_client_get_rmw_handle>:
 801b09c:	b118      	cbz	r0, 801b0a6 <rcl_client_get_rmw_handle+0xa>
 801b09e:	6800      	ldr	r0, [r0, #0]
 801b0a0:	b108      	cbz	r0, 801b0a6 <rcl_client_get_rmw_handle+0xa>
 801b0a2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b0a6:	4770      	bx	lr

0801b0a8 <rcl_send_request>:
 801b0a8:	b570      	push	{r4, r5, r6, lr}
 801b0aa:	b082      	sub	sp, #8
 801b0ac:	b1f8      	cbz	r0, 801b0ee <rcl_send_request+0x46>
 801b0ae:	4604      	mov	r4, r0
 801b0b0:	6800      	ldr	r0, [r0, #0]
 801b0b2:	b1e0      	cbz	r0, 801b0ee <rcl_send_request+0x46>
 801b0b4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b0b8:	b1cb      	cbz	r3, 801b0ee <rcl_send_request+0x46>
 801b0ba:	460e      	mov	r6, r1
 801b0bc:	b1e1      	cbz	r1, 801b0f8 <rcl_send_request+0x50>
 801b0be:	4615      	mov	r5, r2
 801b0c0:	b1d2      	cbz	r2, 801b0f8 <rcl_send_request+0x50>
 801b0c2:	2105      	movs	r1, #5
 801b0c4:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b0c8:	f002 fa2e 	bl	801d528 <__atomic_load_8>
 801b0cc:	4602      	mov	r2, r0
 801b0ce:	460b      	mov	r3, r1
 801b0d0:	4631      	mov	r1, r6
 801b0d2:	e9c5 2300 	strd	r2, r3, [r5]
 801b0d6:	6823      	ldr	r3, [r4, #0]
 801b0d8:	462a      	mov	r2, r5
 801b0da:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b0de:	f7fa fefb 	bl	8015ed8 <rmw_send_request>
 801b0e2:	4606      	mov	r6, r0
 801b0e4:	b160      	cbz	r0, 801b100 <rcl_send_request+0x58>
 801b0e6:	2601      	movs	r6, #1
 801b0e8:	4630      	mov	r0, r6
 801b0ea:	b002      	add	sp, #8
 801b0ec:	bd70      	pop	{r4, r5, r6, pc}
 801b0ee:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b0f2:	4630      	mov	r0, r6
 801b0f4:	b002      	add	sp, #8
 801b0f6:	bd70      	pop	{r4, r5, r6, pc}
 801b0f8:	260b      	movs	r6, #11
 801b0fa:	4630      	mov	r0, r6
 801b0fc:	b002      	add	sp, #8
 801b0fe:	bd70      	pop	{r4, r5, r6, pc}
 801b100:	6820      	ldr	r0, [r4, #0]
 801b102:	2105      	movs	r1, #5
 801b104:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b108:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b10c:	9100      	str	r1, [sp, #0]
 801b10e:	f002 fa77 	bl	801d600 <__atomic_exchange_8>
 801b112:	4630      	mov	r0, r6
 801b114:	b002      	add	sp, #8
 801b116:	bd70      	pop	{r4, r5, r6, pc}

0801b118 <rcl_take_response>:
 801b118:	b570      	push	{r4, r5, r6, lr}
 801b11a:	468e      	mov	lr, r1
 801b11c:	b08c      	sub	sp, #48	; 0x30
 801b11e:	460c      	mov	r4, r1
 801b120:	4616      	mov	r6, r2
 801b122:	f10d 0c18 	add.w	ip, sp, #24
 801b126:	4605      	mov	r5, r0
 801b128:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b12c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b130:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b134:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b138:	b35d      	cbz	r5, 801b192 <rcl_take_response+0x7a>
 801b13a:	682b      	ldr	r3, [r5, #0]
 801b13c:	b34b      	cbz	r3, 801b192 <rcl_take_response+0x7a>
 801b13e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b142:	b330      	cbz	r0, 801b192 <rcl_take_response+0x7a>
 801b144:	b346      	cbz	r6, 801b198 <rcl_take_response+0x80>
 801b146:	2300      	movs	r3, #0
 801b148:	4632      	mov	r2, r6
 801b14a:	a902      	add	r1, sp, #8
 801b14c:	f88d 3007 	strb.w	r3, [sp, #7]
 801b150:	f10d 0307 	add.w	r3, sp, #7
 801b154:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b1a0 <rcl_take_response+0x88>
 801b158:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b15c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b160:	f7fa ffc2 	bl	80160e8 <rmw_take_response>
 801b164:	4605      	mov	r5, r0
 801b166:	b9c8      	cbnz	r0, 801b19c <rcl_take_response+0x84>
 801b168:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b16c:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b170:	2a00      	cmp	r2, #0
 801b172:	bf08      	it	eq
 801b174:	461d      	moveq	r5, r3
 801b176:	f10d 0e18 	add.w	lr, sp, #24
 801b17a:	46a4      	mov	ip, r4
 801b17c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b180:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b184:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b188:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b18c:	4628      	mov	r0, r5
 801b18e:	b00c      	add	sp, #48	; 0x30
 801b190:	bd70      	pop	{r4, r5, r6, pc}
 801b192:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b196:	e7ee      	b.n	801b176 <rcl_take_response+0x5e>
 801b198:	250b      	movs	r5, #11
 801b19a:	e7ec      	b.n	801b176 <rcl_take_response+0x5e>
 801b19c:	2501      	movs	r5, #1
 801b19e:	e7ea      	b.n	801b176 <rcl_take_response+0x5e>
	...

0801b1a8 <rcl_client_is_valid>:
 801b1a8:	b130      	cbz	r0, 801b1b8 <rcl_client_is_valid+0x10>
 801b1aa:	6800      	ldr	r0, [r0, #0]
 801b1ac:	b120      	cbz	r0, 801b1b8 <rcl_client_is_valid+0x10>
 801b1ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b1b2:	3800      	subs	r0, #0
 801b1b4:	bf18      	it	ne
 801b1b6:	2001      	movne	r0, #1
 801b1b8:	4770      	bx	lr
 801b1ba:	bf00      	nop

0801b1bc <rcl_convert_rmw_ret_to_rcl_ret>:
 801b1bc:	280b      	cmp	r0, #11
 801b1be:	dc0d      	bgt.n	801b1dc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b1c0:	2800      	cmp	r0, #0
 801b1c2:	db09      	blt.n	801b1d8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b1c4:	280b      	cmp	r0, #11
 801b1c6:	d807      	bhi.n	801b1d8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b1c8:	e8df f000 	tbb	[pc, r0]
 801b1cc:	07060607 	.word	0x07060607
 801b1d0:	06060606 	.word	0x06060606
 801b1d4:	07070606 	.word	0x07070606
 801b1d8:	2001      	movs	r0, #1
 801b1da:	4770      	bx	lr
 801b1dc:	28cb      	cmp	r0, #203	; 0xcb
 801b1de:	bf18      	it	ne
 801b1e0:	2001      	movne	r0, #1
 801b1e2:	4770      	bx	lr

0801b1e4 <rcl_get_zero_initialized_context>:
 801b1e4:	4a03      	ldr	r2, [pc, #12]	; (801b1f4 <rcl_get_zero_initialized_context+0x10>)
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b1ec:	e883 0003 	stmia.w	r3, {r0, r1}
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	4770      	bx	lr
 801b1f4:	08025624 	.word	0x08025624

0801b1f8 <rcl_context_is_valid>:
 801b1f8:	b118      	cbz	r0, 801b202 <rcl_context_is_valid+0xa>
 801b1fa:	6840      	ldr	r0, [r0, #4]
 801b1fc:	3800      	subs	r0, #0
 801b1fe:	bf18      	it	ne
 801b200:	2001      	movne	r0, #1
 801b202:	4770      	bx	lr

0801b204 <__cleanup_context>:
 801b204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b208:	4606      	mov	r6, r0
 801b20a:	2300      	movs	r3, #0
 801b20c:	6800      	ldr	r0, [r0, #0]
 801b20e:	6073      	str	r3, [r6, #4]
 801b210:	2800      	cmp	r0, #0
 801b212:	d049      	beq.n	801b2a8 <__cleanup_context+0xa4>
 801b214:	6947      	ldr	r7, [r0, #20]
 801b216:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b21a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b21e:	b137      	cbz	r7, 801b22e <__cleanup_context+0x2a>
 801b220:	3014      	adds	r0, #20
 801b222:	f7f8 f845 	bl	80132b0 <rcl_init_options_fini>
 801b226:	4607      	mov	r7, r0
 801b228:	2800      	cmp	r0, #0
 801b22a:	d144      	bne.n	801b2b6 <__cleanup_context+0xb2>
 801b22c:	6830      	ldr	r0, [r6, #0]
 801b22e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b230:	b143      	cbz	r3, 801b244 <__cleanup_context+0x40>
 801b232:	3028      	adds	r0, #40	; 0x28
 801b234:	f7fa fb58 	bl	80158e8 <rmw_context_fini>
 801b238:	b118      	cbz	r0, 801b242 <__cleanup_context+0x3e>
 801b23a:	2f00      	cmp	r7, #0
 801b23c:	d03e      	beq.n	801b2bc <__cleanup_context+0xb8>
 801b23e:	f7f9 fe17 	bl	8014e70 <rcutils_reset_error>
 801b242:	6830      	ldr	r0, [r6, #0]
 801b244:	6a03      	ldr	r3, [r0, #32]
 801b246:	b1db      	cbz	r3, 801b280 <__cleanup_context+0x7c>
 801b248:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b24c:	2a01      	cmp	r2, #1
 801b24e:	f17c 0100 	sbcs.w	r1, ip, #0
 801b252:	db11      	blt.n	801b278 <__cleanup_context+0x74>
 801b254:	2400      	movs	r4, #0
 801b256:	4625      	mov	r5, r4
 801b258:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b25c:	4649      	mov	r1, r9
 801b25e:	b1b8      	cbz	r0, 801b290 <__cleanup_context+0x8c>
 801b260:	47c0      	blx	r8
 801b262:	6833      	ldr	r3, [r6, #0]
 801b264:	3401      	adds	r4, #1
 801b266:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b26a:	f145 0500 	adc.w	r5, r5, #0
 801b26e:	6a1b      	ldr	r3, [r3, #32]
 801b270:	4294      	cmp	r4, r2
 801b272:	eb75 010c 	sbcs.w	r1, r5, ip
 801b276:	dbef      	blt.n	801b258 <__cleanup_context+0x54>
 801b278:	4618      	mov	r0, r3
 801b27a:	4649      	mov	r1, r9
 801b27c:	47c0      	blx	r8
 801b27e:	6830      	ldr	r0, [r6, #0]
 801b280:	4649      	mov	r1, r9
 801b282:	47c0      	blx	r8
 801b284:	2300      	movs	r3, #0
 801b286:	4638      	mov	r0, r7
 801b288:	e9c6 3300 	strd	r3, r3, [r6]
 801b28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b290:	3401      	adds	r4, #1
 801b292:	f145 0500 	adc.w	r5, r5, #0
 801b296:	4294      	cmp	r4, r2
 801b298:	eb75 010c 	sbcs.w	r1, r5, ip
 801b29c:	dbdc      	blt.n	801b258 <__cleanup_context+0x54>
 801b29e:	4618      	mov	r0, r3
 801b2a0:	4649      	mov	r1, r9
 801b2a2:	47c0      	blx	r8
 801b2a4:	6830      	ldr	r0, [r6, #0]
 801b2a6:	e7eb      	b.n	801b280 <__cleanup_context+0x7c>
 801b2a8:	4607      	mov	r7, r0
 801b2aa:	2300      	movs	r3, #0
 801b2ac:	4638      	mov	r0, r7
 801b2ae:	e9c6 3300 	strd	r3, r3, [r6]
 801b2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2b6:	f7f9 fddb 	bl	8014e70 <rcutils_reset_error>
 801b2ba:	e7b7      	b.n	801b22c <__cleanup_context+0x28>
 801b2bc:	f7ff ff7e 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 801b2c0:	4607      	mov	r7, r0
 801b2c2:	e7bc      	b.n	801b23e <__cleanup_context+0x3a>

0801b2c4 <rcl_get_zero_initialized_guard_condition>:
 801b2c4:	4a03      	ldr	r2, [pc, #12]	; (801b2d4 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b2c6:	4603      	mov	r3, r0
 801b2c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b2cc:	e883 0003 	stmia.w	r3, {r0, r1}
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	4770      	bx	lr
 801b2d4:	0802562c 	.word	0x0802562c

0801b2d8 <rcl_guard_condition_init_from_rmw>:
 801b2d8:	b082      	sub	sp, #8
 801b2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2de:	b086      	sub	sp, #24
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	460e      	mov	r6, r1
 801b2e4:	4615      	mov	r5, r2
 801b2e6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b2ea:	f10d 0e04 	add.w	lr, sp, #4
 801b2ee:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b2f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b2f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b2fa:	f8dc 3000 	ldr.w	r3, [ip]
 801b2fe:	a801      	add	r0, sp, #4
 801b300:	f8ce 3000 	str.w	r3, [lr]
 801b304:	f7f9 fd76 	bl	8014df4 <rcutils_allocator_is_valid>
 801b308:	f080 0301 	eor.w	r3, r0, #1
 801b30c:	b2db      	uxtb	r3, r3
 801b30e:	bb3b      	cbnz	r3, 801b360 <rcl_guard_condition_init_from_rmw+0x88>
 801b310:	b334      	cbz	r4, 801b360 <rcl_guard_condition_init_from_rmw+0x88>
 801b312:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b316:	f1b8 0f00 	cmp.w	r8, #0
 801b31a:	d11a      	bne.n	801b352 <rcl_guard_condition_init_from_rmw+0x7a>
 801b31c:	b305      	cbz	r5, 801b360 <rcl_guard_condition_init_from_rmw+0x88>
 801b31e:	4628      	mov	r0, r5
 801b320:	f7ff ff6a 	bl	801b1f8 <rcl_context_is_valid>
 801b324:	b1f0      	cbz	r0, 801b364 <rcl_guard_condition_init_from_rmw+0x8c>
 801b326:	9b01      	ldr	r3, [sp, #4]
 801b328:	201c      	movs	r0, #28
 801b32a:	9905      	ldr	r1, [sp, #20]
 801b32c:	4798      	blx	r3
 801b32e:	4607      	mov	r7, r0
 801b330:	6060      	str	r0, [r4, #4]
 801b332:	b320      	cbz	r0, 801b37e <rcl_guard_condition_init_from_rmw+0xa6>
 801b334:	b1c6      	cbz	r6, 801b368 <rcl_guard_condition_init_from_rmw+0x90>
 801b336:	6006      	str	r6, [r0, #0]
 801b338:	f880 8004 	strb.w	r8, [r0, #4]
 801b33c:	ac01      	add	r4, sp, #4
 801b33e:	f107 0c08 	add.w	ip, r7, #8
 801b342:	2500      	movs	r5, #0
 801b344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b346:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b34a:	6823      	ldr	r3, [r4, #0]
 801b34c:	f8cc 3000 	str.w	r3, [ip]
 801b350:	e000      	b.n	801b354 <rcl_guard_condition_init_from_rmw+0x7c>
 801b352:	2564      	movs	r5, #100	; 0x64
 801b354:	4628      	mov	r0, r5
 801b356:	b006      	add	sp, #24
 801b358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b35c:	b002      	add	sp, #8
 801b35e:	4770      	bx	lr
 801b360:	250b      	movs	r5, #11
 801b362:	e7f7      	b.n	801b354 <rcl_guard_condition_init_from_rmw+0x7c>
 801b364:	2565      	movs	r5, #101	; 0x65
 801b366:	e7f5      	b.n	801b354 <rcl_guard_condition_init_from_rmw+0x7c>
 801b368:	6828      	ldr	r0, [r5, #0]
 801b36a:	3028      	adds	r0, #40	; 0x28
 801b36c:	f002 fd56 	bl	801de1c <rmw_create_guard_condition>
 801b370:	6038      	str	r0, [r7, #0]
 801b372:	6867      	ldr	r7, [r4, #4]
 801b374:	683e      	ldr	r6, [r7, #0]
 801b376:	b126      	cbz	r6, 801b382 <rcl_guard_condition_init_from_rmw+0xaa>
 801b378:	2301      	movs	r3, #1
 801b37a:	713b      	strb	r3, [r7, #4]
 801b37c:	e7de      	b.n	801b33c <rcl_guard_condition_init_from_rmw+0x64>
 801b37e:	250a      	movs	r5, #10
 801b380:	e7e8      	b.n	801b354 <rcl_guard_condition_init_from_rmw+0x7c>
 801b382:	9b02      	ldr	r3, [sp, #8]
 801b384:	4638      	mov	r0, r7
 801b386:	9905      	ldr	r1, [sp, #20]
 801b388:	2501      	movs	r5, #1
 801b38a:	4798      	blx	r3
 801b38c:	6066      	str	r6, [r4, #4]
 801b38e:	e7e1      	b.n	801b354 <rcl_guard_condition_init_from_rmw+0x7c>

0801b390 <rcl_guard_condition_fini>:
 801b390:	b570      	push	{r4, r5, r6, lr}
 801b392:	b082      	sub	sp, #8
 801b394:	b1f0      	cbz	r0, 801b3d4 <rcl_guard_condition_fini+0x44>
 801b396:	6843      	ldr	r3, [r0, #4]
 801b398:	4604      	mov	r4, r0
 801b39a:	b163      	cbz	r3, 801b3b6 <rcl_guard_condition_fini+0x26>
 801b39c:	6818      	ldr	r0, [r3, #0]
 801b39e:	68de      	ldr	r6, [r3, #12]
 801b3a0:	6999      	ldr	r1, [r3, #24]
 801b3a2:	b160      	cbz	r0, 801b3be <rcl_guard_condition_fini+0x2e>
 801b3a4:	791d      	ldrb	r5, [r3, #4]
 801b3a6:	b965      	cbnz	r5, 801b3c2 <rcl_guard_condition_fini+0x32>
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	47b0      	blx	r6
 801b3ac:	2300      	movs	r3, #0
 801b3ae:	4628      	mov	r0, r5
 801b3b0:	6063      	str	r3, [r4, #4]
 801b3b2:	b002      	add	sp, #8
 801b3b4:	bd70      	pop	{r4, r5, r6, pc}
 801b3b6:	461d      	mov	r5, r3
 801b3b8:	4628      	mov	r0, r5
 801b3ba:	b002      	add	sp, #8
 801b3bc:	bd70      	pop	{r4, r5, r6, pc}
 801b3be:	4605      	mov	r5, r0
 801b3c0:	e7f2      	b.n	801b3a8 <rcl_guard_condition_fini+0x18>
 801b3c2:	9101      	str	r1, [sp, #4]
 801b3c4:	f002 fd40 	bl	801de48 <rmw_destroy_guard_condition>
 801b3c8:	1e05      	subs	r5, r0, #0
 801b3ca:	6863      	ldr	r3, [r4, #4]
 801b3cc:	9901      	ldr	r1, [sp, #4]
 801b3ce:	bf18      	it	ne
 801b3d0:	2501      	movne	r5, #1
 801b3d2:	e7e9      	b.n	801b3a8 <rcl_guard_condition_fini+0x18>
 801b3d4:	250b      	movs	r5, #11
 801b3d6:	4628      	mov	r0, r5
 801b3d8:	b002      	add	sp, #8
 801b3da:	bd70      	pop	{r4, r5, r6, pc}

0801b3dc <rcl_guard_condition_get_default_options>:
 801b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3de:	b087      	sub	sp, #28
 801b3e0:	4606      	mov	r6, r0
 801b3e2:	4c0b      	ldr	r4, [pc, #44]	; (801b410 <rcl_guard_condition_get_default_options+0x34>)
 801b3e4:	4668      	mov	r0, sp
 801b3e6:	f7f9 fcf7 	bl	8014dd8 <rcutils_get_default_allocator>
 801b3ea:	46ee      	mov	lr, sp
 801b3ec:	46a4      	mov	ip, r4
 801b3ee:	4625      	mov	r5, r4
 801b3f0:	4634      	mov	r4, r6
 801b3f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b3f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b3fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b3fc:	f8de 7000 	ldr.w	r7, [lr]
 801b400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b402:	4630      	mov	r0, r6
 801b404:	f8cc 7000 	str.w	r7, [ip]
 801b408:	6027      	str	r7, [r4, #0]
 801b40a:	b007      	add	sp, #28
 801b40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b40e:	bf00      	nop
 801b410:	20016f90 	.word	0x20016f90

0801b414 <rcl_guard_condition_get_rmw_handle>:
 801b414:	b110      	cbz	r0, 801b41c <rcl_guard_condition_get_rmw_handle+0x8>
 801b416:	6840      	ldr	r0, [r0, #4]
 801b418:	b100      	cbz	r0, 801b41c <rcl_guard_condition_get_rmw_handle+0x8>
 801b41a:	6800      	ldr	r0, [r0, #0]
 801b41c:	4770      	bx	lr
 801b41e:	bf00      	nop

0801b420 <rcl_init>:
 801b420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b424:	1e05      	subs	r5, r0, #0
 801b426:	b09e      	sub	sp, #120	; 0x78
 801b428:	460e      	mov	r6, r1
 801b42a:	4690      	mov	r8, r2
 801b42c:	461f      	mov	r7, r3
 801b42e:	f340 809f 	ble.w	801b570 <rcl_init+0x150>
 801b432:	2900      	cmp	r1, #0
 801b434:	f000 809f 	beq.w	801b576 <rcl_init+0x156>
 801b438:	f1a1 0e04 	sub.w	lr, r1, #4
 801b43c:	f04f 0c00 	mov.w	ip, #0
 801b440:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801b444:	f10c 0c01 	add.w	ip, ip, #1
 801b448:	2c00      	cmp	r4, #0
 801b44a:	f000 8094 	beq.w	801b576 <rcl_init+0x156>
 801b44e:	4565      	cmp	r5, ip
 801b450:	d1f6      	bne.n	801b440 <rcl_init+0x20>
 801b452:	f1b8 0f00 	cmp.w	r8, #0
 801b456:	f000 808e 	beq.w	801b576 <rcl_init+0x156>
 801b45a:	f8d8 4000 	ldr.w	r4, [r8]
 801b45e:	2c00      	cmp	r4, #0
 801b460:	f000 8089 	beq.w	801b576 <rcl_init+0x156>
 801b464:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801b468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b46a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b46e:	6823      	ldr	r3, [r4, #0]
 801b470:	a819      	add	r0, sp, #100	; 0x64
 801b472:	f8cc 3000 	str.w	r3, [ip]
 801b476:	f7f9 fcbd 	bl	8014df4 <rcutils_allocator_is_valid>
 801b47a:	f080 0001 	eor.w	r0, r0, #1
 801b47e:	b2c0      	uxtb	r0, r0
 801b480:	2800      	cmp	r0, #0
 801b482:	d178      	bne.n	801b576 <rcl_init+0x156>
 801b484:	2f00      	cmp	r7, #0
 801b486:	d076      	beq.n	801b576 <rcl_init+0x156>
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d178      	bne.n	801b580 <rcl_init+0x160>
 801b48e:	2178      	movs	r1, #120	; 0x78
 801b490:	2001      	movs	r0, #1
 801b492:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b496:	4798      	blx	r3
 801b498:	4604      	mov	r4, r0
 801b49a:	6038      	str	r0, [r7, #0]
 801b49c:	2800      	cmp	r0, #0
 801b49e:	f000 80b6 	beq.w	801b60e <rcl_init+0x1ee>
 801b4a2:	a802      	add	r0, sp, #8
 801b4a4:	f002 fa4c 	bl	801d940 <rmw_get_zero_initialized_context>
 801b4a8:	a902      	add	r1, sp, #8
 801b4aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801b4ae:	2250      	movs	r2, #80	; 0x50
 801b4b0:	f005 fc01 	bl	8020cb6 <memcpy>
 801b4b4:	ac19      	add	r4, sp, #100	; 0x64
 801b4b6:	f8d7 e000 	ldr.w	lr, [r7]
 801b4ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b4bc:	46f4      	mov	ip, lr
 801b4be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b4c2:	6823      	ldr	r3, [r4, #0]
 801b4c4:	f10e 0114 	add.w	r1, lr, #20
 801b4c8:	4640      	mov	r0, r8
 801b4ca:	f8cc 3000 	str.w	r3, [ip]
 801b4ce:	f7f7 ff19 	bl	8013304 <rcl_init_options_copy>
 801b4d2:	4604      	mov	r4, r0
 801b4d4:	2800      	cmp	r0, #0
 801b4d6:	d144      	bne.n	801b562 <rcl_init+0x142>
 801b4d8:	f8d7 9000 	ldr.w	r9, [r7]
 801b4dc:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801b4e0:	f8c9 0020 	str.w	r0, [r9, #32]
 801b4e4:	f8c9 5018 	str.w	r5, [r9, #24]
 801b4e8:	f8c9 801c 	str.w	r8, [r9, #28]
 801b4ec:	2d00      	cmp	r5, #0
 801b4ee:	d04e      	beq.n	801b58e <rcl_init+0x16e>
 801b4f0:	2e00      	cmp	r6, #0
 801b4f2:	d04c      	beq.n	801b58e <rcl_init+0x16e>
 801b4f4:	2104      	movs	r1, #4
 801b4f6:	4628      	mov	r0, r5
 801b4f8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801b4fc:	4798      	blx	r3
 801b4fe:	f8c9 0020 	str.w	r0, [r9, #32]
 801b502:	f8d7 9000 	ldr.w	r9, [r7]
 801b506:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801b50a:	46ca      	mov	sl, r9
 801b50c:	b343      	cbz	r3, 801b560 <rcl_init+0x140>
 801b50e:	2d01      	cmp	r5, #1
 801b510:	f178 0300 	sbcs.w	r3, r8, #0
 801b514:	db3b      	blt.n	801b58e <rcl_init+0x16e>
 801b516:	2400      	movs	r4, #0
 801b518:	3e04      	subs	r6, #4
 801b51a:	46a1      	mov	r9, r4
 801b51c:	e00b      	b.n	801b536 <rcl_init+0x116>
 801b51e:	6831      	ldr	r1, [r6, #0]
 801b520:	f005 fbc9 	bl	8020cb6 <memcpy>
 801b524:	3401      	adds	r4, #1
 801b526:	f149 0900 	adc.w	r9, r9, #0
 801b52a:	45c8      	cmp	r8, r9
 801b52c:	bf08      	it	eq
 801b52e:	42a5      	cmpeq	r5, r4
 801b530:	d02b      	beq.n	801b58a <rcl_init+0x16a>
 801b532:	f8d7 a000 	ldr.w	sl, [r7]
 801b536:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801b53a:	f7e4 fee1 	bl	8000300 <strlen>
 801b53e:	1c42      	adds	r2, r0, #1
 801b540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b542:	4610      	mov	r0, r2
 801b544:	991d      	ldr	r1, [sp, #116]	; 0x74
 801b546:	f8da a020 	ldr.w	sl, [sl, #32]
 801b54a:	9201      	str	r2, [sp, #4]
 801b54c:	4798      	blx	r3
 801b54e:	683b      	ldr	r3, [r7, #0]
 801b550:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801b554:	6a1b      	ldr	r3, [r3, #32]
 801b556:	9a01      	ldr	r2, [sp, #4]
 801b558:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b55c:	2800      	cmp	r0, #0
 801b55e:	d1de      	bne.n	801b51e <rcl_init+0xfe>
 801b560:	240a      	movs	r4, #10
 801b562:	4638      	mov	r0, r7
 801b564:	f7ff fe4e 	bl	801b204 <__cleanup_context>
 801b568:	4620      	mov	r0, r4
 801b56a:	b01e      	add	sp, #120	; 0x78
 801b56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b570:	2900      	cmp	r1, #0
 801b572:	f43f af6e 	beq.w	801b452 <rcl_init+0x32>
 801b576:	240b      	movs	r4, #11
 801b578:	4620      	mov	r0, r4
 801b57a:	b01e      	add	sp, #120	; 0x78
 801b57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b580:	2464      	movs	r4, #100	; 0x64
 801b582:	4620      	mov	r0, r4
 801b584:	b01e      	add	sp, #120	; 0x78
 801b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b58a:	f8d7 9000 	ldr.w	r9, [r7]
 801b58e:	4926      	ldr	r1, [pc, #152]	; (801b628 <rcl_init+0x208>)
 801b590:	680b      	ldr	r3, [r1, #0]
 801b592:	3301      	adds	r3, #1
 801b594:	d036      	beq.n	801b604 <rcl_init+0x1e4>
 801b596:	461a      	mov	r2, r3
 801b598:	2400      	movs	r4, #0
 801b59a:	600b      	str	r3, [r1, #0]
 801b59c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801b5a0:	607b      	str	r3, [r7, #4]
 801b5a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b5a4:	3301      	adds	r3, #1
 801b5a6:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801b5aa:	d034      	beq.n	801b616 <rcl_init+0x1f6>
 801b5ac:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801b5b0:	b93b      	cbnz	r3, 801b5c2 <rcl_init+0x1a2>
 801b5b2:	3030      	adds	r0, #48	; 0x30
 801b5b4:	f000 f83a 	bl	801b62c <rcl_get_localhost_only>
 801b5b8:	4604      	mov	r4, r0
 801b5ba:	2800      	cmp	r0, #0
 801b5bc:	d1d1      	bne.n	801b562 <rcl_init+0x142>
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	6958      	ldr	r0, [r3, #20]
 801b5c2:	aa18      	add	r2, sp, #96	; 0x60
 801b5c4:	a917      	add	r1, sp, #92	; 0x5c
 801b5c6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b5c8:	f000 fc38 	bl	801be3c <rcl_validate_enclave_name>
 801b5cc:	4604      	mov	r4, r0
 801b5ce:	2800      	cmp	r0, #0
 801b5d0:	d1c7      	bne.n	801b562 <rcl_init+0x142>
 801b5d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5d4:	b9eb      	cbnz	r3, 801b612 <rcl_init+0x1f2>
 801b5d6:	6839      	ldr	r1, [r7, #0]
 801b5d8:	694b      	ldr	r3, [r1, #20]
 801b5da:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801b5de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b5e0:	f000 f9c8 	bl	801b974 <rcl_get_security_options_from_environment>
 801b5e4:	4604      	mov	r4, r0
 801b5e6:	2800      	cmp	r0, #0
 801b5e8:	d1bb      	bne.n	801b562 <rcl_init+0x142>
 801b5ea:	6839      	ldr	r1, [r7, #0]
 801b5ec:	6948      	ldr	r0, [r1, #20]
 801b5ee:	3128      	adds	r1, #40	; 0x28
 801b5f0:	3018      	adds	r0, #24
 801b5f2:	f7fa f843 	bl	801567c <rmw_init>
 801b5f6:	4604      	mov	r4, r0
 801b5f8:	2800      	cmp	r0, #0
 801b5fa:	d0bd      	beq.n	801b578 <rcl_init+0x158>
 801b5fc:	f7ff fdde 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 801b600:	4604      	mov	r4, r0
 801b602:	e7ae      	b.n	801b562 <rcl_init+0x142>
 801b604:	2201      	movs	r2, #1
 801b606:	461c      	mov	r4, r3
 801b608:	600a      	str	r2, [r1, #0]
 801b60a:	4613      	mov	r3, r2
 801b60c:	e7c6      	b.n	801b59c <rcl_init+0x17c>
 801b60e:	240a      	movs	r4, #10
 801b610:	e7b2      	b.n	801b578 <rcl_init+0x158>
 801b612:	2401      	movs	r4, #1
 801b614:	e7a5      	b.n	801b562 <rcl_init+0x142>
 801b616:	3024      	adds	r0, #36	; 0x24
 801b618:	f003 fbc6 	bl	801eda8 <rcl_get_default_domain_id>
 801b61c:	4604      	mov	r4, r0
 801b61e:	2800      	cmp	r0, #0
 801b620:	d19f      	bne.n	801b562 <rcl_init+0x142>
 801b622:	683b      	ldr	r3, [r7, #0]
 801b624:	6958      	ldr	r0, [r3, #20]
 801b626:	e7c1      	b.n	801b5ac <rcl_init+0x18c>
 801b628:	20016fa4 	.word	0x20016fa4

0801b62c <rcl_get_localhost_only>:
 801b62c:	b510      	push	{r4, lr}
 801b62e:	2300      	movs	r3, #0
 801b630:	b082      	sub	sp, #8
 801b632:	9301      	str	r3, [sp, #4]
 801b634:	b1b8      	cbz	r0, 801b666 <rcl_get_localhost_only+0x3a>
 801b636:	4604      	mov	r4, r0
 801b638:	a901      	add	r1, sp, #4
 801b63a:	480c      	ldr	r0, [pc, #48]	; (801b66c <rcl_get_localhost_only+0x40>)
 801b63c:	f7f9 fbe8 	bl	8014e10 <rcutils_get_env>
 801b640:	b110      	cbz	r0, 801b648 <rcl_get_localhost_only+0x1c>
 801b642:	2001      	movs	r0, #1
 801b644:	b002      	add	sp, #8
 801b646:	bd10      	pop	{r4, pc}
 801b648:	9b01      	ldr	r3, [sp, #4]
 801b64a:	b113      	cbz	r3, 801b652 <rcl_get_localhost_only+0x26>
 801b64c:	781a      	ldrb	r2, [r3, #0]
 801b64e:	2a31      	cmp	r2, #49	; 0x31
 801b650:	d004      	beq.n	801b65c <rcl_get_localhost_only+0x30>
 801b652:	2302      	movs	r3, #2
 801b654:	2000      	movs	r0, #0
 801b656:	7023      	strb	r3, [r4, #0]
 801b658:	b002      	add	sp, #8
 801b65a:	bd10      	pop	{r4, pc}
 801b65c:	785b      	ldrb	r3, [r3, #1]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d1f7      	bne.n	801b652 <rcl_get_localhost_only+0x26>
 801b662:	2301      	movs	r3, #1
 801b664:	e7f6      	b.n	801b654 <rcl_get_localhost_only+0x28>
 801b666:	200b      	movs	r0, #11
 801b668:	b002      	add	sp, #8
 801b66a:	bd10      	pop	{r4, pc}
 801b66c:	08025634 	.word	0x08025634

0801b670 <rcl_node_resolve_name>:
 801b670:	b082      	sub	sp, #8
 801b672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b676:	b091      	sub	sp, #68	; 0x44
 801b678:	ac1a      	add	r4, sp, #104	; 0x68
 801b67a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801b67e:	e884 000c 	stmia.w	r4, {r2, r3}
 801b682:	2800      	cmp	r0, #0
 801b684:	d03d      	beq.n	801b702 <rcl_node_resolve_name+0x92>
 801b686:	460c      	mov	r4, r1
 801b688:	4605      	mov	r5, r0
 801b68a:	f7f8 f81d 	bl	80136c8 <rcl_node_get_options>
 801b68e:	2800      	cmp	r0, #0
 801b690:	d03a      	beq.n	801b708 <rcl_node_resolve_name+0x98>
 801b692:	4628      	mov	r0, r5
 801b694:	f7f8 f808 	bl	80136a8 <rcl_node_get_name>
 801b698:	4606      	mov	r6, r0
 801b69a:	4628      	mov	r0, r5
 801b69c:	ad0b      	add	r5, sp, #44	; 0x2c
 801b69e:	f7f8 f80b 	bl	80136b8 <rcl_node_get_namespace>
 801b6a2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801b6a6:	4607      	mov	r7, r0
 801b6a8:	46ac      	mov	ip, r5
 801b6aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b6ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b6b2:	f8de 3000 	ldr.w	r3, [lr]
 801b6b6:	f8cc 3000 	str.w	r3, [ip]
 801b6ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b6bc:	b30b      	cbz	r3, 801b702 <rcl_node_resolve_name+0x92>
 801b6be:	4689      	mov	r9, r1
 801b6c0:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801b6c4:	f002 f80e 	bl	801d6e4 <rcutils_get_zero_initialized_string_map>
 801b6c8:	ab10      	add	r3, sp, #64	; 0x40
 801b6ca:	9008      	str	r0, [sp, #32]
 801b6cc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801b6d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b6d4:	2100      	movs	r1, #0
 801b6d6:	a808      	add	r0, sp, #32
 801b6d8:	e895 000c 	ldmia.w	r5, {r2, r3}
 801b6dc:	f002 f878 	bl	801d7d0 <rcutils_string_map_init>
 801b6e0:	4683      	mov	fp, r0
 801b6e2:	b1a0      	cbz	r0, 801b70e <rcl_node_resolve_name+0x9e>
 801b6e4:	f7f9 fbac 	bl	8014e40 <rcutils_get_error_string>
 801b6e8:	f7f9 fbc2 	bl	8014e70 <rcutils_reset_error>
 801b6ec:	f1bb 0f0a 	cmp.w	fp, #10
 801b6f0:	bf18      	it	ne
 801b6f2:	f04f 0b01 	movne.w	fp, #1
 801b6f6:	4658      	mov	r0, fp
 801b6f8:	b011      	add	sp, #68	; 0x44
 801b6fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6fe:	b002      	add	sp, #8
 801b700:	4770      	bx	lr
 801b702:	f04f 0b0b 	mov.w	fp, #11
 801b706:	e7f6      	b.n	801b6f6 <rcl_node_resolve_name+0x86>
 801b708:	f04f 0b01 	mov.w	fp, #1
 801b70c:	e7f3      	b.n	801b6f6 <rcl_node_resolve_name+0x86>
 801b70e:	9009      	str	r0, [sp, #36]	; 0x24
 801b710:	9007      	str	r0, [sp, #28]
 801b712:	a808      	add	r0, sp, #32
 801b714:	f003 fcdc 	bl	801f0d0 <rcl_get_default_topic_name_substitutions>
 801b718:	4683      	mov	fp, r0
 801b71a:	b180      	cbz	r0, 801b73e <rcl_node_resolve_name+0xce>
 801b71c:	280a      	cmp	r0, #10
 801b71e:	a808      	add	r0, sp, #32
 801b720:	bf18      	it	ne
 801b722:	f04f 0b01 	movne.w	fp, #1
 801b726:	f002 f893 	bl	801d850 <rcutils_string_map_fini>
 801b72a:	4604      	mov	r4, r0
 801b72c:	2800      	cmp	r0, #0
 801b72e:	d15b      	bne.n	801b7e8 <rcl_node_resolve_name+0x178>
 801b730:	4651      	mov	r1, sl
 801b732:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b734:	47c8      	blx	r9
 801b736:	4651      	mov	r1, sl
 801b738:	4620      	mov	r0, r4
 801b73a:	47c8      	blx	r9
 801b73c:	e7db      	b.n	801b6f6 <rcl_node_resolve_name+0x86>
 801b73e:	ab09      	add	r3, sp, #36	; 0x24
 801b740:	46ec      	mov	ip, sp
 801b742:	9305      	str	r3, [sp, #20]
 801b744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b74a:	682b      	ldr	r3, [r5, #0]
 801b74c:	463a      	mov	r2, r7
 801b74e:	4631      	mov	r1, r6
 801b750:	4620      	mov	r0, r4
 801b752:	f8cc 3000 	str.w	r3, [ip]
 801b756:	ab08      	add	r3, sp, #32
 801b758:	f003 fb5a 	bl	801ee10 <rcl_expand_topic_name>
 801b75c:	4683      	mov	fp, r0
 801b75e:	b9d8      	cbnz	r0, 801b798 <rcl_node_resolve_name+0x128>
 801b760:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b762:	4602      	mov	r2, r0
 801b764:	9009      	str	r0, [sp, #36]	; 0x24
 801b766:	a90a      	add	r1, sp, #40	; 0x28
 801b768:	4620      	mov	r0, r4
 801b76a:	f002 f985 	bl	801da78 <rmw_validate_full_topic_name>
 801b76e:	bb50      	cbnz	r0, 801b7c6 <rcl_node_resolve_name+0x156>
 801b770:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b772:	2d00      	cmp	r5, #0
 801b774:	d140      	bne.n	801b7f8 <rcl_node_resolve_name+0x188>
 801b776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b778:	a808      	add	r0, sp, #32
 801b77a:	601c      	str	r4, [r3, #0]
 801b77c:	f002 f868 	bl	801d850 <rcutils_string_map_fini>
 801b780:	4683      	mov	fp, r0
 801b782:	2800      	cmp	r0, #0
 801b784:	d043      	beq.n	801b80e <rcl_node_resolve_name+0x19e>
 801b786:	f7f9 fb5b 	bl	8014e40 <rcutils_get_error_string>
 801b78a:	46a8      	mov	r8, r5
 801b78c:	f04f 0b01 	mov.w	fp, #1
 801b790:	462c      	mov	r4, r5
 801b792:	f7f9 fb6d 	bl	8014e70 <rcutils_reset_error>
 801b796:	e00a      	b.n	801b7ae <rcl_node_resolve_name+0x13e>
 801b798:	2867      	cmp	r0, #103	; 0x67
 801b79a:	bf14      	ite	ne
 801b79c:	f04f 0800 	movne.w	r8, #0
 801b7a0:	f008 0801 	andeq.w	r8, r8, #1
 801b7a4:	9c07      	ldr	r4, [sp, #28]
 801b7a6:	a808      	add	r0, sp, #32
 801b7a8:	f002 f852 	bl	801d850 <rcutils_string_map_fini>
 801b7ac:	bb50      	cbnz	r0, 801b804 <rcl_node_resolve_name+0x194>
 801b7ae:	4651      	mov	r1, sl
 801b7b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7b2:	47c8      	blx	r9
 801b7b4:	4651      	mov	r1, sl
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	47c8      	blx	r9
 801b7ba:	f1b8 0f00 	cmp.w	r8, #0
 801b7be:	bf18      	it	ne
 801b7c0:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801b7c4:	e797      	b.n	801b6f6 <rcl_node_resolve_name+0x86>
 801b7c6:	f7f9 fb3b 	bl	8014e40 <rcutils_get_error_string>
 801b7ca:	f7f9 fb51 	bl	8014e70 <rcutils_reset_error>
 801b7ce:	a808      	add	r0, sp, #32
 801b7d0:	f002 f83e 	bl	801d850 <rcutils_string_map_fini>
 801b7d4:	b998      	cbnz	r0, 801b7fe <rcl_node_resolve_name+0x18e>
 801b7d6:	4651      	mov	r1, sl
 801b7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7da:	47c8      	blx	r9
 801b7dc:	4651      	mov	r1, sl
 801b7de:	4620      	mov	r0, r4
 801b7e0:	f04f 0b01 	mov.w	fp, #1
 801b7e4:	47c8      	blx	r9
 801b7e6:	e786      	b.n	801b6f6 <rcl_node_resolve_name+0x86>
 801b7e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b7ec:	f7f9 fb28 	bl	8014e40 <rcutils_get_error_string>
 801b7f0:	f7f9 fb3e 	bl	8014e70 <rcutils_reset_error>
 801b7f4:	4644      	mov	r4, r8
 801b7f6:	e7da      	b.n	801b7ae <rcl_node_resolve_name+0x13e>
 801b7f8:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b7fc:	e7d3      	b.n	801b7a6 <rcl_node_resolve_name+0x136>
 801b7fe:	46d8      	mov	r8, fp
 801b800:	f04f 0b01 	mov.w	fp, #1
 801b804:	f7f9 fb1c 	bl	8014e40 <rcutils_get_error_string>
 801b808:	f7f9 fb32 	bl	8014e70 <rcutils_reset_error>
 801b80c:	e7cf      	b.n	801b7ae <rcl_node_resolve_name+0x13e>
 801b80e:	4651      	mov	r1, sl
 801b810:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b812:	47c8      	blx	r9
 801b814:	4651      	mov	r1, sl
 801b816:	4658      	mov	r0, fp
 801b818:	47c8      	blx	r9
 801b81a:	e76c      	b.n	801b6f6 <rcl_node_resolve_name+0x86>

0801b81c <exact_match_lookup>:
 801b81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b81e:	f102 0708 	add.w	r7, r2, #8
 801b822:	460b      	mov	r3, r1
 801b824:	b085      	sub	sp, #20
 801b826:	4614      	mov	r4, r2
 801b828:	4606      	mov	r6, r0
 801b82a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b82e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b832:	4618      	mov	r0, r3
 801b834:	4919      	ldr	r1, [pc, #100]	; (801b89c <exact_match_lookup+0x80>)
 801b836:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b83a:	f001 ff1b 	bl	801d674 <rcutils_join_path>
 801b83e:	7833      	ldrb	r3, [r6, #0]
 801b840:	4605      	mov	r5, r0
 801b842:	2b2f      	cmp	r3, #47	; 0x2f
 801b844:	d023      	beq.n	801b88e <exact_match_lookup+0x72>
 801b846:	f104 030c 	add.w	r3, r4, #12
 801b84a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b84e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b852:	1c70      	adds	r0, r6, #1
 801b854:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b858:	f001 ff12 	bl	801d680 <rcutils_to_native_path>
 801b85c:	4606      	mov	r6, r0
 801b85e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801b862:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b866:	4631      	mov	r1, r6
 801b868:	4628      	mov	r0, r5
 801b86a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b86e:	f001 ff01 	bl	801d674 <rcutils_join_path>
 801b872:	4603      	mov	r3, r0
 801b874:	4630      	mov	r0, r6
 801b876:	6862      	ldr	r2, [r4, #4]
 801b878:	461e      	mov	r6, r3
 801b87a:	6921      	ldr	r1, [r4, #16]
 801b87c:	4790      	blx	r2
 801b87e:	4628      	mov	r0, r5
 801b880:	4635      	mov	r5, r6
 801b882:	6863      	ldr	r3, [r4, #4]
 801b884:	6921      	ldr	r1, [r4, #16]
 801b886:	4798      	blx	r3
 801b888:	4628      	mov	r0, r5
 801b88a:	b005      	add	sp, #20
 801b88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b88e:	7873      	ldrb	r3, [r6, #1]
 801b890:	2b00      	cmp	r3, #0
 801b892:	d1d8      	bne.n	801b846 <exact_match_lookup+0x2a>
 801b894:	4628      	mov	r0, r5
 801b896:	b005      	add	sp, #20
 801b898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b89a:	bf00      	nop
 801b89c:	08025684 	.word	0x08025684

0801b8a0 <rcl_get_secure_root>:
 801b8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8a4:	b085      	sub	sp, #20
 801b8a6:	b168      	cbz	r0, 801b8c4 <rcl_get_secure_root+0x24>
 801b8a8:	4607      	mov	r7, r0
 801b8aa:	4608      	mov	r0, r1
 801b8ac:	460c      	mov	r4, r1
 801b8ae:	f7f9 faa1 	bl	8014df4 <rcutils_allocator_is_valid>
 801b8b2:	b138      	cbz	r0, 801b8c4 <rcl_get_secure_root+0x24>
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	482d      	ldr	r0, [pc, #180]	; (801b96c <rcl_get_secure_root+0xcc>)
 801b8b8:	a903      	add	r1, sp, #12
 801b8ba:	9303      	str	r3, [sp, #12]
 801b8bc:	f7f9 faa8 	bl	8014e10 <rcutils_get_env>
 801b8c0:	4605      	mov	r5, r0
 801b8c2:	b120      	cbz	r0, 801b8ce <rcl_get_secure_root+0x2e>
 801b8c4:	2500      	movs	r5, #0
 801b8c6:	4628      	mov	r0, r5
 801b8c8:	b005      	add	sp, #20
 801b8ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8ce:	9b03      	ldr	r3, [sp, #12]
 801b8d0:	781a      	ldrb	r2, [r3, #0]
 801b8d2:	2a00      	cmp	r2, #0
 801b8d4:	d0f6      	beq.n	801b8c4 <rcl_get_secure_root+0x24>
 801b8d6:	f104 090c 	add.w	r9, r4, #12
 801b8da:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b8de:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b8e8:	f7f9 fc18 	bl	801511c <rcutils_strdup>
 801b8ec:	4680      	mov	r8, r0
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	d0e8      	beq.n	801b8c4 <rcl_get_secure_root+0x24>
 801b8f2:	a903      	add	r1, sp, #12
 801b8f4:	481e      	ldr	r0, [pc, #120]	; (801b970 <rcl_get_secure_root+0xd0>)
 801b8f6:	9503      	str	r5, [sp, #12]
 801b8f8:	f7f9 fa8a 	bl	8014e10 <rcutils_get_env>
 801b8fc:	b160      	cbz	r0, 801b918 <rcl_get_secure_root+0x78>
 801b8fe:	2600      	movs	r6, #0
 801b900:	4630      	mov	r0, r6
 801b902:	6863      	ldr	r3, [r4, #4]
 801b904:	6921      	ldr	r1, [r4, #16]
 801b906:	4798      	blx	r3
 801b908:	4640      	mov	r0, r8
 801b90a:	6863      	ldr	r3, [r4, #4]
 801b90c:	6921      	ldr	r1, [r4, #16]
 801b90e:	4798      	blx	r3
 801b910:	4628      	mov	r0, r5
 801b912:	b005      	add	sp, #20
 801b914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b918:	9b03      	ldr	r3, [sp, #12]
 801b91a:	781e      	ldrb	r6, [r3, #0]
 801b91c:	b1f6      	cbz	r6, 801b95c <rcl_get_secure_root+0xbc>
 801b91e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b922:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b926:	4618      	mov	r0, r3
 801b928:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b92c:	f7f9 fbf6 	bl	801511c <rcutils_strdup>
 801b930:	4606      	mov	r6, r0
 801b932:	2800      	cmp	r0, #0
 801b934:	d0e3      	beq.n	801b8fe <rcl_get_secure_root+0x5e>
 801b936:	4622      	mov	r2, r4
 801b938:	4641      	mov	r1, r8
 801b93a:	f7ff ff6f 	bl	801b81c <exact_match_lookup>
 801b93e:	4605      	mov	r5, r0
 801b940:	2d00      	cmp	r5, #0
 801b942:	d0dd      	beq.n	801b900 <rcl_get_secure_root+0x60>
 801b944:	4628      	mov	r0, r5
 801b946:	f001 fe93 	bl	801d670 <rcutils_is_directory>
 801b94a:	4603      	mov	r3, r0
 801b94c:	2800      	cmp	r0, #0
 801b94e:	d1d7      	bne.n	801b900 <rcl_get_secure_root+0x60>
 801b950:	4628      	mov	r0, r5
 801b952:	6921      	ldr	r1, [r4, #16]
 801b954:	461d      	mov	r5, r3
 801b956:	6863      	ldr	r3, [r4, #4]
 801b958:	4798      	blx	r3
 801b95a:	e7d1      	b.n	801b900 <rcl_get_secure_root+0x60>
 801b95c:	4622      	mov	r2, r4
 801b95e:	4638      	mov	r0, r7
 801b960:	4641      	mov	r1, r8
 801b962:	f7ff ff5b 	bl	801b81c <exact_match_lookup>
 801b966:	4605      	mov	r5, r0
 801b968:	e7ea      	b.n	801b940 <rcl_get_secure_root+0xa0>
 801b96a:	bf00      	nop
 801b96c:	08025690 	.word	0x08025690
 801b970:	080256a8 	.word	0x080256a8

0801b974 <rcl_get_security_options_from_environment>:
 801b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b978:	b082      	sub	sp, #8
 801b97a:	2300      	movs	r3, #0
 801b97c:	4606      	mov	r6, r0
 801b97e:	460f      	mov	r7, r1
 801b980:	4821      	ldr	r0, [pc, #132]	; (801ba08 <rcl_get_security_options_from_environment+0x94>)
 801b982:	a901      	add	r1, sp, #4
 801b984:	4690      	mov	r8, r2
 801b986:	9301      	str	r3, [sp, #4]
 801b988:	f7f9 fa42 	bl	8014e10 <rcutils_get_env>
 801b98c:	b120      	cbz	r0, 801b998 <rcl_get_security_options_from_environment+0x24>
 801b98e:	2501      	movs	r5, #1
 801b990:	4628      	mov	r0, r5
 801b992:	b002      	add	sp, #8
 801b994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b998:	4604      	mov	r4, r0
 801b99a:	491c      	ldr	r1, [pc, #112]	; (801ba0c <rcl_get_security_options_from_environment+0x98>)
 801b99c:	9801      	ldr	r0, [sp, #4]
 801b99e:	f7e4 fc4f 	bl	8000240 <strcmp>
 801b9a2:	4605      	mov	r5, r0
 801b9a4:	b9f0      	cbnz	r0, 801b9e4 <rcl_get_security_options_from_environment+0x70>
 801b9a6:	9001      	str	r0, [sp, #4]
 801b9a8:	f1b8 0f00 	cmp.w	r8, #0
 801b9ac:	d021      	beq.n	801b9f2 <rcl_get_security_options_from_environment+0x7e>
 801b9ae:	a901      	add	r1, sp, #4
 801b9b0:	4817      	ldr	r0, [pc, #92]	; (801ba10 <rcl_get_security_options_from_environment+0x9c>)
 801b9b2:	f7f9 fa2d 	bl	8014e10 <rcutils_get_env>
 801b9b6:	2800      	cmp	r0, #0
 801b9b8:	d1e9      	bne.n	801b98e <rcl_get_security_options_from_environment+0x1a>
 801b9ba:	4916      	ldr	r1, [pc, #88]	; (801ba14 <rcl_get_security_options_from_environment+0xa0>)
 801b9bc:	9801      	ldr	r0, [sp, #4]
 801b9be:	f7e4 fc3f 	bl	8000240 <strcmp>
 801b9c2:	4603      	mov	r3, r0
 801b9c4:	4639      	mov	r1, r7
 801b9c6:	4630      	mov	r0, r6
 801b9c8:	fab3 f383 	clz	r3, r3
 801b9cc:	095b      	lsrs	r3, r3, #5
 801b9ce:	f888 3000 	strb.w	r3, [r8]
 801b9d2:	f7ff ff65 	bl	801b8a0 <rcl_get_secure_root>
 801b9d6:	b170      	cbz	r0, 801b9f6 <rcl_get_security_options_from_environment+0x82>
 801b9d8:	f8c8 0004 	str.w	r0, [r8, #4]
 801b9dc:	4628      	mov	r0, r5
 801b9de:	b002      	add	sp, #8
 801b9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9e4:	4625      	mov	r5, r4
 801b9e6:	f888 4000 	strb.w	r4, [r8]
 801b9ea:	4628      	mov	r0, r5
 801b9ec:	b002      	add	sp, #8
 801b9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9f2:	250b      	movs	r5, #11
 801b9f4:	e7cc      	b.n	801b990 <rcl_get_security_options_from_environment+0x1c>
 801b9f6:	f898 5000 	ldrb.w	r5, [r8]
 801b9fa:	f1a5 0501 	sub.w	r5, r5, #1
 801b9fe:	fab5 f585 	clz	r5, r5
 801ba02:	096d      	lsrs	r5, r5, #5
 801ba04:	e7c4      	b.n	801b990 <rcl_get_security_options_from_environment+0x1c>
 801ba06:	bf00      	nop
 801ba08:	08025648 	.word	0x08025648
 801ba0c:	0802565c 	.word	0x0802565c
 801ba10:	08025664 	.word	0x08025664
 801ba14:	0802567c 	.word	0x0802567c

0801ba18 <rcl_get_system_time>:
 801ba18:	4608      	mov	r0, r1
 801ba1a:	f7f9 bbbd 	b.w	8015198 <rcutils_system_time_now>
 801ba1e:	bf00      	nop

0801ba20 <rcl_get_steady_time>:
 801ba20:	4608      	mov	r0, r1
 801ba22:	f7f9 bbdf 	b.w	80151e4 <rcutils_steady_time_now>
 801ba26:	bf00      	nop

0801ba28 <rcl_get_ros_time>:
 801ba28:	7a03      	ldrb	r3, [r0, #8]
 801ba2a:	b510      	push	{r4, lr}
 801ba2c:	460c      	mov	r4, r1
 801ba2e:	b143      	cbz	r3, 801ba42 <rcl_get_ros_time+0x1a>
 801ba30:	2105      	movs	r1, #5
 801ba32:	f001 fd79 	bl	801d528 <__atomic_load_8>
 801ba36:	4602      	mov	r2, r0
 801ba38:	460b      	mov	r3, r1
 801ba3a:	2000      	movs	r0, #0
 801ba3c:	e9c4 2300 	strd	r2, r3, [r4]
 801ba40:	bd10      	pop	{r4, pc}
 801ba42:	4608      	mov	r0, r1
 801ba44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ba48:	f7f9 bba6 	b.w	8015198 <rcutils_system_time_now>

0801ba4c <rcl_clock_init>:
 801ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba4e:	4605      	mov	r5, r0
 801ba50:	4610      	mov	r0, r2
 801ba52:	4614      	mov	r4, r2
 801ba54:	460e      	mov	r6, r1
 801ba56:	f7f9 f9cd 	bl	8014df4 <rcutils_allocator_is_valid>
 801ba5a:	b128      	cbz	r0, 801ba68 <rcl_clock_init+0x1c>
 801ba5c:	2d03      	cmp	r5, #3
 801ba5e:	d803      	bhi.n	801ba68 <rcl_clock_init+0x1c>
 801ba60:	e8df f005 	tbb	[pc, r5]
 801ba64:	0659301f 	.word	0x0659301f
 801ba68:	f04f 0c0b 	mov.w	ip, #11
 801ba6c:	4660      	mov	r0, ip
 801ba6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba70:	2c00      	cmp	r4, #0
 801ba72:	d0f9      	beq.n	801ba68 <rcl_clock_init+0x1c>
 801ba74:	fab6 f386 	clz	r3, r6
 801ba78:	095b      	lsrs	r3, r3, #5
 801ba7a:	2e00      	cmp	r6, #0
 801ba7c:	d0f4      	beq.n	801ba68 <rcl_clock_init+0x1c>
 801ba7e:	6133      	str	r3, [r6, #16]
 801ba80:	469c      	mov	ip, r3
 801ba82:	f106 0514 	add.w	r5, r6, #20
 801ba86:	4f32      	ldr	r7, [pc, #200]	; (801bb50 <rcl_clock_init+0x104>)
 801ba88:	f04f 0e03 	mov.w	lr, #3
 801ba8c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801ba90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ba94:	6823      	ldr	r3, [r4, #0]
 801ba96:	4660      	mov	r0, ip
 801ba98:	602b      	str	r3, [r5, #0]
 801ba9a:	60f7      	str	r7, [r6, #12]
 801ba9c:	f886 e000 	strb.w	lr, [r6]
 801baa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baa2:	2e00      	cmp	r6, #0
 801baa4:	d0e0      	beq.n	801ba68 <rcl_clock_init+0x1c>
 801baa6:	2300      	movs	r3, #0
 801baa8:	f106 0514 	add.w	r5, r6, #20
 801baac:	7033      	strb	r3, [r6, #0]
 801baae:	469c      	mov	ip, r3
 801bab0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bab4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801bab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801baba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801babc:	6823      	ldr	r3, [r4, #0]
 801babe:	4660      	mov	r0, ip
 801bac0:	602b      	str	r3, [r5, #0]
 801bac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bac4:	2c00      	cmp	r4, #0
 801bac6:	d0cf      	beq.n	801ba68 <rcl_clock_init+0x1c>
 801bac8:	fab6 f586 	clz	r5, r6
 801bacc:	096d      	lsrs	r5, r5, #5
 801bace:	2e00      	cmp	r6, #0
 801bad0:	d0ca      	beq.n	801ba68 <rcl_clock_init+0x1c>
 801bad2:	46a6      	mov	lr, r4
 801bad4:	7035      	strb	r5, [r6, #0]
 801bad6:	f106 0c14 	add.w	ip, r6, #20
 801bada:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bade:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801bae2:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801bae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801baea:	f8de 3000 	ldr.w	r3, [lr]
 801baee:	2010      	movs	r0, #16
 801baf0:	f8cc 3000 	str.w	r3, [ip]
 801baf4:	6823      	ldr	r3, [r4, #0]
 801baf6:	6921      	ldr	r1, [r4, #16]
 801baf8:	4798      	blx	r3
 801bafa:	6130      	str	r0, [r6, #16]
 801bafc:	b320      	cbz	r0, 801bb48 <rcl_clock_init+0xfc>
 801bafe:	2200      	movs	r2, #0
 801bb00:	2300      	movs	r3, #0
 801bb02:	46ac      	mov	ip, r5
 801bb04:	7205      	strb	r5, [r0, #8]
 801bb06:	e9c0 2300 	strd	r2, r3, [r0]
 801bb0a:	4a12      	ldr	r2, [pc, #72]	; (801bb54 <rcl_clock_init+0x108>)
 801bb0c:	2301      	movs	r3, #1
 801bb0e:	4660      	mov	r0, ip
 801bb10:	60f2      	str	r2, [r6, #12]
 801bb12:	7033      	strb	r3, [r6, #0]
 801bb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb16:	2c00      	cmp	r4, #0
 801bb18:	d0a6      	beq.n	801ba68 <rcl_clock_init+0x1c>
 801bb1a:	fab6 f386 	clz	r3, r6
 801bb1e:	095b      	lsrs	r3, r3, #5
 801bb20:	2e00      	cmp	r6, #0
 801bb22:	d0a1      	beq.n	801ba68 <rcl_clock_init+0x1c>
 801bb24:	6133      	str	r3, [r6, #16]
 801bb26:	469c      	mov	ip, r3
 801bb28:	f106 0514 	add.w	r5, r6, #20
 801bb2c:	f8df e028 	ldr.w	lr, [pc, #40]	; 801bb58 <rcl_clock_init+0x10c>
 801bb30:	2702      	movs	r7, #2
 801bb32:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801bb36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb3a:	6823      	ldr	r3, [r4, #0]
 801bb3c:	4660      	mov	r0, ip
 801bb3e:	602b      	str	r3, [r5, #0]
 801bb40:	f8c6 e00c 	str.w	lr, [r6, #12]
 801bb44:	7037      	strb	r7, [r6, #0]
 801bb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb48:	f04f 0c0a 	mov.w	ip, #10
 801bb4c:	e78e      	b.n	801ba6c <rcl_clock_init+0x20>
 801bb4e:	bf00      	nop
 801bb50:	0801ba21 	.word	0x0801ba21
 801bb54:	0801ba29 	.word	0x0801ba29
 801bb58:	0801ba19 	.word	0x0801ba19

0801bb5c <rcl_clock_get_now>:
 801bb5c:	b140      	cbz	r0, 801bb70 <rcl_clock_get_now+0x14>
 801bb5e:	b139      	cbz	r1, 801bb70 <rcl_clock_get_now+0x14>
 801bb60:	7803      	ldrb	r3, [r0, #0]
 801bb62:	b11b      	cbz	r3, 801bb6c <rcl_clock_get_now+0x10>
 801bb64:	68c3      	ldr	r3, [r0, #12]
 801bb66:	b10b      	cbz	r3, 801bb6c <rcl_clock_get_now+0x10>
 801bb68:	6900      	ldr	r0, [r0, #16]
 801bb6a:	4718      	bx	r3
 801bb6c:	2001      	movs	r0, #1
 801bb6e:	4770      	bx	lr
 801bb70:	200b      	movs	r0, #11
 801bb72:	4770      	bx	lr

0801bb74 <rcl_timer_call>:
 801bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb78:	b087      	sub	sp, #28
 801bb7a:	2800      	cmp	r0, #0
 801bb7c:	d06c      	beq.n	801bc58 <rcl_timer_call+0xe4>
 801bb7e:	6803      	ldr	r3, [r0, #0]
 801bb80:	4604      	mov	r4, r0
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d062      	beq.n	801bc4c <rcl_timer_call+0xd8>
 801bb86:	f3bf 8f5b 	dmb	ish
 801bb8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bb8e:	f3bf 8f5b 	dmb	ish
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d14f      	bne.n	801bc36 <rcl_timer_call+0xc2>
 801bb96:	6803      	ldr	r3, [r0, #0]
 801bb98:	a904      	add	r1, sp, #16
 801bb9a:	6818      	ldr	r0, [r3, #0]
 801bb9c:	f7ff ffde 	bl	801bb5c <rcl_clock_get_now>
 801bba0:	4605      	mov	r5, r0
 801bba2:	2800      	cmp	r0, #0
 801bba4:	d149      	bne.n	801bc3a <rcl_timer_call+0xc6>
 801bba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	db49      	blt.n	801bc42 <rcl_timer_call+0xce>
 801bbae:	2605      	movs	r6, #5
 801bbb0:	6820      	ldr	r0, [r4, #0]
 801bbb2:	9600      	str	r6, [sp, #0]
 801bbb4:	3020      	adds	r0, #32
 801bbb6:	f001 fd23 	bl	801d600 <__atomic_exchange_8>
 801bbba:	6823      	ldr	r3, [r4, #0]
 801bbbc:	4680      	mov	r8, r0
 801bbbe:	f3bf 8f5b 	dmb	ish
 801bbc2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801bbc6:	f3bf 8f5b 	dmb	ish
 801bbca:	6820      	ldr	r0, [r4, #0]
 801bbcc:	4689      	mov	r9, r1
 801bbce:	4631      	mov	r1, r6
 801bbd0:	3028      	adds	r0, #40	; 0x28
 801bbd2:	f001 fca9 	bl	801d528 <__atomic_load_8>
 801bbd6:	460f      	mov	r7, r1
 801bbd8:	4631      	mov	r1, r6
 801bbda:	4606      	mov	r6, r0
 801bbdc:	6820      	ldr	r0, [r4, #0]
 801bbde:	3018      	adds	r0, #24
 801bbe0:	f001 fca2 	bl	801d528 <__atomic_load_8>
 801bbe4:	4602      	mov	r2, r0
 801bbe6:	9804      	ldr	r0, [sp, #16]
 801bbe8:	460b      	mov	r3, r1
 801bbea:	18b6      	adds	r6, r6, r2
 801bbec:	f8dd c014 	ldr.w	ip, [sp, #20]
 801bbf0:	4692      	mov	sl, r2
 801bbf2:	eb47 0701 	adc.w	r7, r7, r1
 801bbf6:	4286      	cmp	r6, r0
 801bbf8:	eb77 010c 	sbcs.w	r1, r7, ip
 801bbfc:	da04      	bge.n	801bc08 <rcl_timer_call+0x94>
 801bbfe:	ea53 0102 	orrs.w	r1, r3, r2
 801bc02:	d12e      	bne.n	801bc62 <rcl_timer_call+0xee>
 801bc04:	4606      	mov	r6, r0
 801bc06:	4667      	mov	r7, ip
 801bc08:	6820      	ldr	r0, [r4, #0]
 801bc0a:	2105      	movs	r1, #5
 801bc0c:	4632      	mov	r2, r6
 801bc0e:	463b      	mov	r3, r7
 801bc10:	3028      	adds	r0, #40	; 0x28
 801bc12:	9100      	str	r1, [sp, #0]
 801bc14:	f001 fcbe 	bl	801d594 <__atomic_store_8>
 801bc18:	f1bb 0f00 	cmp.w	fp, #0
 801bc1c:	d00d      	beq.n	801bc3a <rcl_timer_call+0xc6>
 801bc1e:	9a04      	ldr	r2, [sp, #16]
 801bc20:	4620      	mov	r0, r4
 801bc22:	9b05      	ldr	r3, [sp, #20]
 801bc24:	ebb2 0208 	subs.w	r2, r2, r8
 801bc28:	eb63 0309 	sbc.w	r3, r3, r9
 801bc2c:	47d8      	blx	fp
 801bc2e:	4628      	mov	r0, r5
 801bc30:	b007      	add	sp, #28
 801bc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc36:	f240 3521 	movw	r5, #801	; 0x321
 801bc3a:	4628      	mov	r0, r5
 801bc3c:	b007      	add	sp, #28
 801bc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc42:	2501      	movs	r5, #1
 801bc44:	4628      	mov	r0, r5
 801bc46:	b007      	add	sp, #28
 801bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc4c:	f44f 7548 	mov.w	r5, #800	; 0x320
 801bc50:	4628      	mov	r0, r5
 801bc52:	b007      	add	sp, #28
 801bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc58:	250b      	movs	r5, #11
 801bc5a:	4628      	mov	r0, r5
 801bc5c:	b007      	add	sp, #28
 801bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc62:	1b80      	subs	r0, r0, r6
 801bc64:	eb6c 0107 	sbc.w	r1, ip, r7
 801bc68:	3801      	subs	r0, #1
 801bc6a:	f161 0100 	sbc.w	r1, r1, #0
 801bc6e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801bc72:	f7e4 fd09 	bl	8000688 <__aeabi_ldivmod>
 801bc76:	9b02      	ldr	r3, [sp, #8]
 801bc78:	3001      	adds	r0, #1
 801bc7a:	f141 0100 	adc.w	r1, r1, #0
 801bc7e:	fb00 f303 	mul.w	r3, r0, r3
 801bc82:	fb01 330a 	mla	r3, r1, sl, r3
 801bc86:	fba0 0a0a 	umull	r0, sl, r0, sl
 801bc8a:	1986      	adds	r6, r0, r6
 801bc8c:	4453      	add	r3, sl
 801bc8e:	eb43 0707 	adc.w	r7, r3, r7
 801bc92:	e7b9      	b.n	801bc08 <rcl_timer_call+0x94>

0801bc94 <rcl_timer_is_ready>:
 801bc94:	b570      	push	{r4, r5, r6, lr}
 801bc96:	b082      	sub	sp, #8
 801bc98:	b380      	cbz	r0, 801bcfc <rcl_timer_is_ready+0x68>
 801bc9a:	6803      	ldr	r3, [r0, #0]
 801bc9c:	4604      	mov	r4, r0
 801bc9e:	b38b      	cbz	r3, 801bd04 <rcl_timer_is_ready+0x70>
 801bca0:	460d      	mov	r5, r1
 801bca2:	b359      	cbz	r1, 801bcfc <rcl_timer_is_ready+0x68>
 801bca4:	f3bf 8f5b 	dmb	ish
 801bca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bcac:	f3bf 8f5b 	dmb	ish
 801bcb0:	b953      	cbnz	r3, 801bcc8 <rcl_timer_is_ready+0x34>
 801bcb2:	6803      	ldr	r3, [r0, #0]
 801bcb4:	4669      	mov	r1, sp
 801bcb6:	6818      	ldr	r0, [r3, #0]
 801bcb8:	f7ff ff50 	bl	801bb5c <rcl_clock_get_now>
 801bcbc:	4606      	mov	r6, r0
 801bcbe:	b148      	cbz	r0, 801bcd4 <rcl_timer_is_ready+0x40>
 801bcc0:	f240 3321 	movw	r3, #801	; 0x321
 801bcc4:	4298      	cmp	r0, r3
 801bcc6:	d102      	bne.n	801bcce <rcl_timer_is_ready+0x3a>
 801bcc8:	2300      	movs	r3, #0
 801bcca:	461e      	mov	r6, r3
 801bccc:	702b      	strb	r3, [r5, #0]
 801bcce:	4630      	mov	r0, r6
 801bcd0:	b002      	add	sp, #8
 801bcd2:	bd70      	pop	{r4, r5, r6, pc}
 801bcd4:	6820      	ldr	r0, [r4, #0]
 801bcd6:	2105      	movs	r1, #5
 801bcd8:	3028      	adds	r0, #40	; 0x28
 801bcda:	f001 fc25 	bl	801d528 <__atomic_load_8>
 801bcde:	9b00      	ldr	r3, [sp, #0]
 801bce0:	1ac0      	subs	r0, r0, r3
 801bce2:	9b01      	ldr	r3, [sp, #4]
 801bce4:	eb61 0103 	sbc.w	r1, r1, r3
 801bce8:	2801      	cmp	r0, #1
 801bcea:	4630      	mov	r0, r6
 801bcec:	f171 0300 	sbcs.w	r3, r1, #0
 801bcf0:	bfb4      	ite	lt
 801bcf2:	2301      	movlt	r3, #1
 801bcf4:	2300      	movge	r3, #0
 801bcf6:	702b      	strb	r3, [r5, #0]
 801bcf8:	b002      	add	sp, #8
 801bcfa:	bd70      	pop	{r4, r5, r6, pc}
 801bcfc:	260b      	movs	r6, #11
 801bcfe:	4630      	mov	r0, r6
 801bd00:	b002      	add	sp, #8
 801bd02:	bd70      	pop	{r4, r5, r6, pc}
 801bd04:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bd08:	e7e1      	b.n	801bcce <rcl_timer_is_ready+0x3a>
 801bd0a:	bf00      	nop

0801bd0c <rcl_timer_get_time_until_next_call>:
 801bd0c:	b570      	push	{r4, r5, r6, lr}
 801bd0e:	b082      	sub	sp, #8
 801bd10:	b330      	cbz	r0, 801bd60 <rcl_timer_get_time_until_next_call+0x54>
 801bd12:	6803      	ldr	r3, [r0, #0]
 801bd14:	4604      	mov	r4, r0
 801bd16:	b33b      	cbz	r3, 801bd68 <rcl_timer_get_time_until_next_call+0x5c>
 801bd18:	460d      	mov	r5, r1
 801bd1a:	b309      	cbz	r1, 801bd60 <rcl_timer_get_time_until_next_call+0x54>
 801bd1c:	f3bf 8f5b 	dmb	ish
 801bd20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bd24:	f3bf 8f5b 	dmb	ish
 801bd28:	b9ab      	cbnz	r3, 801bd56 <rcl_timer_get_time_until_next_call+0x4a>
 801bd2a:	6803      	ldr	r3, [r0, #0]
 801bd2c:	4669      	mov	r1, sp
 801bd2e:	6818      	ldr	r0, [r3, #0]
 801bd30:	f7ff ff14 	bl	801bb5c <rcl_clock_get_now>
 801bd34:	4606      	mov	r6, r0
 801bd36:	b958      	cbnz	r0, 801bd50 <rcl_timer_get_time_until_next_call+0x44>
 801bd38:	6820      	ldr	r0, [r4, #0]
 801bd3a:	2105      	movs	r1, #5
 801bd3c:	3028      	adds	r0, #40	; 0x28
 801bd3e:	f001 fbf3 	bl	801d528 <__atomic_load_8>
 801bd42:	9b00      	ldr	r3, [sp, #0]
 801bd44:	1ac0      	subs	r0, r0, r3
 801bd46:	9b01      	ldr	r3, [sp, #4]
 801bd48:	eb61 0103 	sbc.w	r1, r1, r3
 801bd4c:	6028      	str	r0, [r5, #0]
 801bd4e:	6069      	str	r1, [r5, #4]
 801bd50:	4630      	mov	r0, r6
 801bd52:	b002      	add	sp, #8
 801bd54:	bd70      	pop	{r4, r5, r6, pc}
 801bd56:	f240 3621 	movw	r6, #801	; 0x321
 801bd5a:	4630      	mov	r0, r6
 801bd5c:	b002      	add	sp, #8
 801bd5e:	bd70      	pop	{r4, r5, r6, pc}
 801bd60:	260b      	movs	r6, #11
 801bd62:	4630      	mov	r0, r6
 801bd64:	b002      	add	sp, #8
 801bd66:	bd70      	pop	{r4, r5, r6, pc}
 801bd68:	f44f 7648 	mov.w	r6, #800	; 0x320
 801bd6c:	e7f0      	b.n	801bd50 <rcl_timer_get_time_until_next_call+0x44>
 801bd6e:	bf00      	nop

0801bd70 <rcl_timer_get_guard_condition>:
 801bd70:	b130      	cbz	r0, 801bd80 <rcl_timer_get_guard_condition+0x10>
 801bd72:	6800      	ldr	r0, [r0, #0]
 801bd74:	b120      	cbz	r0, 801bd80 <rcl_timer_get_guard_condition+0x10>
 801bd76:	68c3      	ldr	r3, [r0, #12]
 801bd78:	b10b      	cbz	r3, 801bd7e <rcl_timer_get_guard_condition+0xe>
 801bd7a:	3008      	adds	r0, #8
 801bd7c:	4770      	bx	lr
 801bd7e:	4618      	mov	r0, r3
 801bd80:	4770      	bx	lr
 801bd82:	bf00      	nop

0801bd84 <rcl_validate_enclave_name_with_size>:
 801bd84:	2800      	cmp	r0, #0
 801bd86:	d049      	beq.n	801be1c <rcl_validate_enclave_name_with_size+0x98>
 801bd88:	b570      	push	{r4, r5, r6, lr}
 801bd8a:	4615      	mov	r5, r2
 801bd8c:	b0c2      	sub	sp, #264	; 0x108
 801bd8e:	b19a      	cbz	r2, 801bdb8 <rcl_validate_enclave_name_with_size+0x34>
 801bd90:	461e      	mov	r6, r3
 801bd92:	466a      	mov	r2, sp
 801bd94:	ab01      	add	r3, sp, #4
 801bd96:	460c      	mov	r4, r1
 801bd98:	f7f9 fa8a 	bl	80152b0 <rmw_validate_namespace_with_size>
 801bd9c:	4684      	mov	ip, r0
 801bd9e:	b9b8      	cbnz	r0, 801bdd0 <rcl_validate_enclave_name_with_size+0x4c>
 801bda0:	9900      	ldr	r1, [sp, #0]
 801bda2:	b171      	cbz	r1, 801bdc2 <rcl_validate_enclave_name_with_size+0x3e>
 801bda4:	2907      	cmp	r1, #7
 801bda6:	d019      	beq.n	801bddc <rcl_validate_enclave_name_with_size+0x58>
 801bda8:	1e4b      	subs	r3, r1, #1
 801bdaa:	2b05      	cmp	r3, #5
 801bdac:	d83a      	bhi.n	801be24 <rcl_validate_enclave_name_with_size+0xa0>
 801bdae:	e8df f003 	tbb	[pc, r3]
 801bdb2:	2926      	.short	0x2926
 801bdb4:	1d322f2c 	.word	0x1d322f2c
 801bdb8:	f04f 0c0b 	mov.w	ip, #11
 801bdbc:	4660      	mov	r0, ip
 801bdbe:	b042      	add	sp, #264	; 0x108
 801bdc0:	bd70      	pop	{r4, r5, r6, pc}
 801bdc2:	2907      	cmp	r1, #7
 801bdc4:	d00a      	beq.n	801bddc <rcl_validate_enclave_name_with_size+0x58>
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	4660      	mov	r0, ip
 801bdca:	602b      	str	r3, [r5, #0]
 801bdcc:	b042      	add	sp, #264	; 0x108
 801bdce:	bd70      	pop	{r4, r5, r6, pc}
 801bdd0:	f7ff f9f4 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 801bdd4:	4684      	mov	ip, r0
 801bdd6:	4660      	mov	r0, ip
 801bdd8:	b042      	add	sp, #264	; 0x108
 801bdda:	bd70      	pop	{r4, r5, r6, pc}
 801bddc:	2cff      	cmp	r4, #255	; 0xff
 801bdde:	d9f2      	bls.n	801bdc6 <rcl_validate_enclave_name_with_size+0x42>
 801bde0:	6029      	str	r1, [r5, #0]
 801bde2:	2e00      	cmp	r6, #0
 801bde4:	d0ea      	beq.n	801bdbc <rcl_validate_enclave_name_with_size+0x38>
 801bde6:	23fe      	movs	r3, #254	; 0xfe
 801bde8:	6033      	str	r3, [r6, #0]
 801bdea:	e7e7      	b.n	801bdbc <rcl_validate_enclave_name_with_size+0x38>
 801bdec:	2306      	movs	r3, #6
 801bdee:	602b      	str	r3, [r5, #0]
 801bdf0:	2e00      	cmp	r6, #0
 801bdf2:	d0e3      	beq.n	801bdbc <rcl_validate_enclave_name_with_size+0x38>
 801bdf4:	9b01      	ldr	r3, [sp, #4]
 801bdf6:	4660      	mov	r0, ip
 801bdf8:	6033      	str	r3, [r6, #0]
 801bdfa:	b042      	add	sp, #264	; 0x108
 801bdfc:	bd70      	pop	{r4, r5, r6, pc}
 801bdfe:	2301      	movs	r3, #1
 801be00:	602b      	str	r3, [r5, #0]
 801be02:	e7f5      	b.n	801bdf0 <rcl_validate_enclave_name_with_size+0x6c>
 801be04:	2302      	movs	r3, #2
 801be06:	602b      	str	r3, [r5, #0]
 801be08:	e7f2      	b.n	801bdf0 <rcl_validate_enclave_name_with_size+0x6c>
 801be0a:	2303      	movs	r3, #3
 801be0c:	602b      	str	r3, [r5, #0]
 801be0e:	e7ef      	b.n	801bdf0 <rcl_validate_enclave_name_with_size+0x6c>
 801be10:	2304      	movs	r3, #4
 801be12:	602b      	str	r3, [r5, #0]
 801be14:	e7ec      	b.n	801bdf0 <rcl_validate_enclave_name_with_size+0x6c>
 801be16:	2305      	movs	r3, #5
 801be18:	602b      	str	r3, [r5, #0]
 801be1a:	e7e9      	b.n	801bdf0 <rcl_validate_enclave_name_with_size+0x6c>
 801be1c:	f04f 0c0b 	mov.w	ip, #11
 801be20:	4660      	mov	r0, ip
 801be22:	4770      	bx	lr
 801be24:	460b      	mov	r3, r1
 801be26:	4a04      	ldr	r2, [pc, #16]	; (801be38 <rcl_validate_enclave_name_with_size+0xb4>)
 801be28:	f44f 7180 	mov.w	r1, #256	; 0x100
 801be2c:	a802      	add	r0, sp, #8
 801be2e:	f7f9 f927 	bl	8015080 <rcutils_snprintf>
 801be32:	f04f 0c01 	mov.w	ip, #1
 801be36:	e7c1      	b.n	801bdbc <rcl_validate_enclave_name_with_size+0x38>
 801be38:	080256c8 	.word	0x080256c8

0801be3c <rcl_validate_enclave_name>:
 801be3c:	b168      	cbz	r0, 801be5a <rcl_validate_enclave_name+0x1e>
 801be3e:	b570      	push	{r4, r5, r6, lr}
 801be40:	460d      	mov	r5, r1
 801be42:	4616      	mov	r6, r2
 801be44:	4604      	mov	r4, r0
 801be46:	f7e4 fa5b 	bl	8000300 <strlen>
 801be4a:	4633      	mov	r3, r6
 801be4c:	4601      	mov	r1, r0
 801be4e:	462a      	mov	r2, r5
 801be50:	4620      	mov	r0, r4
 801be52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be56:	f7ff bf95 	b.w	801bd84 <rcl_validate_enclave_name_with_size>
 801be5a:	200b      	movs	r0, #11
 801be5c:	4770      	bx	lr
 801be5e:	bf00      	nop

0801be60 <rcl_get_zero_initialized_wait_set>:
 801be60:	b510      	push	{r4, lr}
 801be62:	4c08      	ldr	r4, [pc, #32]	; (801be84 <rcl_get_zero_initialized_wait_set+0x24>)
 801be64:	4686      	mov	lr, r0
 801be66:	4684      	mov	ip, r0
 801be68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be7a:	6823      	ldr	r3, [r4, #0]
 801be7c:	4670      	mov	r0, lr
 801be7e:	f8cc 3000 	str.w	r3, [ip]
 801be82:	bd10      	pop	{r4, pc}
 801be84:	08025728 	.word	0x08025728

0801be88 <rcl_wait_set_is_valid>:
 801be88:	b118      	cbz	r0, 801be92 <rcl_wait_set_is_valid+0xa>
 801be8a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801be8c:	3800      	subs	r0, #0
 801be8e:	bf18      	it	ne
 801be90:	2001      	movne	r0, #1
 801be92:	4770      	bx	lr

0801be94 <rcl_wait_set_fini>:
 801be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be98:	b082      	sub	sp, #8
 801be9a:	2800      	cmp	r0, #0
 801be9c:	f000 8095 	beq.w	801bfca <rcl_wait_set_fini+0x136>
 801bea0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801bea2:	4604      	mov	r4, r0
 801bea4:	2e00      	cmp	r6, #0
 801bea6:	f000 808c 	beq.w	801bfc2 <rcl_wait_set_fini+0x12e>
 801beaa:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801beac:	f002 f9c0 	bl	801e230 <rmw_destroy_wait_set>
 801beb0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801beb2:	1e06      	subs	r6, r0, #0
 801beb4:	bf18      	it	ne
 801beb6:	f44f 7661 	movne.w	r6, #900	; 0x384
 801beba:	2d00      	cmp	r5, #0
 801bebc:	f000 8081 	beq.w	801bfc2 <rcl_wait_set_fini+0x12e>
 801bec0:	2700      	movs	r7, #0
 801bec2:	6820      	ldr	r0, [r4, #0]
 801bec4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801bec8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801beca:	6067      	str	r7, [r4, #4]
 801becc:	602f      	str	r7, [r5, #0]
 801bece:	b120      	cbz	r0, 801beda <rcl_wait_set_fini+0x46>
 801bed0:	9101      	str	r1, [sp, #4]
 801bed2:	47c0      	blx	r8
 801bed4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bed6:	9901      	ldr	r1, [sp, #4]
 801bed8:	6027      	str	r7, [r4, #0]
 801beda:	68a8      	ldr	r0, [r5, #8]
 801bedc:	b120      	cbz	r0, 801bee8 <rcl_wait_set_fini+0x54>
 801bede:	47c0      	blx	r8
 801bee0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bee2:	2300      	movs	r3, #0
 801bee4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801bee8:	f04f 0800 	mov.w	r8, #0
 801beec:	68a0      	ldr	r0, [r4, #8]
 801beee:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801bef0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801bef2:	f8c4 800c 	str.w	r8, [r4, #12]
 801bef6:	f8c5 800c 	str.w	r8, [r5, #12]
 801befa:	b128      	cbz	r0, 801bf08 <rcl_wait_set_fini+0x74>
 801befc:	47b8      	blx	r7
 801befe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bf00:	f8c4 8008 	str.w	r8, [r4, #8]
 801bf04:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801bf06:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801bf08:	f04f 0800 	mov.w	r8, #0
 801bf0c:	6968      	ldr	r0, [r5, #20]
 801bf0e:	f8c5 8010 	str.w	r8, [r5, #16]
 801bf12:	b128      	cbz	r0, 801bf20 <rcl_wait_set_fini+0x8c>
 801bf14:	47b8      	blx	r7
 801bf16:	f8c5 8014 	str.w	r8, [r5, #20]
 801bf1a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bf1c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801bf1e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801bf20:	f04f 0800 	mov.w	r8, #0
 801bf24:	6920      	ldr	r0, [r4, #16]
 801bf26:	f8c4 8014 	str.w	r8, [r4, #20]
 801bf2a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801bf2e:	b128      	cbz	r0, 801bf3c <rcl_wait_set_fini+0xa8>
 801bf30:	47b8      	blx	r7
 801bf32:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bf34:	f8c4 8010 	str.w	r8, [r4, #16]
 801bf38:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801bf3a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801bf3c:	f04f 0800 	mov.w	r8, #0
 801bf40:	69a0      	ldr	r0, [r4, #24]
 801bf42:	f8c4 801c 	str.w	r8, [r4, #28]
 801bf46:	f8c5 8018 	str.w	r8, [r5, #24]
 801bf4a:	b128      	cbz	r0, 801bf58 <rcl_wait_set_fini+0xc4>
 801bf4c:	9101      	str	r1, [sp, #4]
 801bf4e:	47b8      	blx	r7
 801bf50:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bf52:	9901      	ldr	r1, [sp, #4]
 801bf54:	f8c4 8018 	str.w	r8, [r4, #24]
 801bf58:	6a28      	ldr	r0, [r5, #32]
 801bf5a:	b120      	cbz	r0, 801bf66 <rcl_wait_set_fini+0xd2>
 801bf5c:	47b8      	blx	r7
 801bf5e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bf60:	2300      	movs	r3, #0
 801bf62:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801bf66:	2700      	movs	r7, #0
 801bf68:	6a20      	ldr	r0, [r4, #32]
 801bf6a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801bf6e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801bf70:	6267      	str	r7, [r4, #36]	; 0x24
 801bf72:	626f      	str	r7, [r5, #36]	; 0x24
 801bf74:	b120      	cbz	r0, 801bf80 <rcl_wait_set_fini+0xec>
 801bf76:	9101      	str	r1, [sp, #4]
 801bf78:	47c0      	blx	r8
 801bf7a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bf7c:	9901      	ldr	r1, [sp, #4]
 801bf7e:	6227      	str	r7, [r4, #32]
 801bf80:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801bf82:	b120      	cbz	r0, 801bf8e <rcl_wait_set_fini+0xfa>
 801bf84:	47c0      	blx	r8
 801bf86:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bf88:	2300      	movs	r3, #0
 801bf8a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801bf8e:	2700      	movs	r7, #0
 801bf90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801bf92:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801bf96:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801bf98:	62e7      	str	r7, [r4, #44]	; 0x2c
 801bf9a:	632f      	str	r7, [r5, #48]	; 0x30
 801bf9c:	b120      	cbz	r0, 801bfa8 <rcl_wait_set_fini+0x114>
 801bf9e:	9101      	str	r1, [sp, #4]
 801bfa0:	47c0      	blx	r8
 801bfa2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bfa4:	9901      	ldr	r1, [sp, #4]
 801bfa6:	62a7      	str	r7, [r4, #40]	; 0x28
 801bfa8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801bfaa:	b120      	cbz	r0, 801bfb6 <rcl_wait_set_fini+0x122>
 801bfac:	47c0      	blx	r8
 801bfae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801bfb6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801bfb8:	4628      	mov	r0, r5
 801bfba:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801bfbc:	4798      	blx	r3
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	6323      	str	r3, [r4, #48]	; 0x30
 801bfc2:	4630      	mov	r0, r6
 801bfc4:	b002      	add	sp, #8
 801bfc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfca:	260b      	movs	r6, #11
 801bfcc:	4630      	mov	r0, r6
 801bfce:	b002      	add	sp, #8
 801bfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bfd4 <rcl_wait_set_add_subscription>:
 801bfd4:	b318      	cbz	r0, 801c01e <rcl_wait_set_add_subscription+0x4a>
 801bfd6:	b538      	push	{r3, r4, r5, lr}
 801bfd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801bfda:	4604      	mov	r4, r0
 801bfdc:	b30b      	cbz	r3, 801c022 <rcl_wait_set_add_subscription+0x4e>
 801bfde:	b319      	cbz	r1, 801c028 <rcl_wait_set_add_subscription+0x54>
 801bfe0:	681d      	ldr	r5, [r3, #0]
 801bfe2:	6840      	ldr	r0, [r0, #4]
 801bfe4:	4285      	cmp	r5, r0
 801bfe6:	d217      	bcs.n	801c018 <rcl_wait_set_add_subscription+0x44>
 801bfe8:	1c68      	adds	r0, r5, #1
 801bfea:	6018      	str	r0, [r3, #0]
 801bfec:	6823      	ldr	r3, [r4, #0]
 801bfee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801bff2:	b102      	cbz	r2, 801bff6 <rcl_wait_set_add_subscription+0x22>
 801bff4:	6015      	str	r5, [r2, #0]
 801bff6:	4608      	mov	r0, r1
 801bff8:	f7f7 ff14 	bl	8013e24 <rcl_subscription_get_rmw_handle>
 801bffc:	b150      	cbz	r0, 801c014 <rcl_wait_set_add_subscription+0x40>
 801bffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c000:	6842      	ldr	r2, [r0, #4]
 801c002:	2000      	movs	r0, #0
 801c004:	689b      	ldr	r3, [r3, #8]
 801c006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c00a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c00c:	6853      	ldr	r3, [r2, #4]
 801c00e:	3301      	adds	r3, #1
 801c010:	6053      	str	r3, [r2, #4]
 801c012:	bd38      	pop	{r3, r4, r5, pc}
 801c014:	2001      	movs	r0, #1
 801c016:	bd38      	pop	{r3, r4, r5, pc}
 801c018:	f240 3086 	movw	r0, #902	; 0x386
 801c01c:	bd38      	pop	{r3, r4, r5, pc}
 801c01e:	200b      	movs	r0, #11
 801c020:	4770      	bx	lr
 801c022:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c026:	bd38      	pop	{r3, r4, r5, pc}
 801c028:	200b      	movs	r0, #11
 801c02a:	bd38      	pop	{r3, r4, r5, pc}

0801c02c <rcl_wait_set_clear>:
 801c02c:	2800      	cmp	r0, #0
 801c02e:	d074      	beq.n	801c11a <rcl_wait_set_clear+0xee>
 801c030:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c032:	b510      	push	{r4, lr}
 801c034:	4604      	mov	r4, r0
 801c036:	2b00      	cmp	r3, #0
 801c038:	d071      	beq.n	801c11e <rcl_wait_set_clear+0xf2>
 801c03a:	6800      	ldr	r0, [r0, #0]
 801c03c:	b138      	cbz	r0, 801c04e <rcl_wait_set_clear+0x22>
 801c03e:	6862      	ldr	r2, [r4, #4]
 801c040:	2100      	movs	r1, #0
 801c042:	0092      	lsls	r2, r2, #2
 801c044:	f004 fd6a 	bl	8020b1c <memset>
 801c048:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c04a:	2200      	movs	r2, #0
 801c04c:	601a      	str	r2, [r3, #0]
 801c04e:	68a0      	ldr	r0, [r4, #8]
 801c050:	b138      	cbz	r0, 801c062 <rcl_wait_set_clear+0x36>
 801c052:	68e2      	ldr	r2, [r4, #12]
 801c054:	2100      	movs	r1, #0
 801c056:	0092      	lsls	r2, r2, #2
 801c058:	f004 fd60 	bl	8020b1c <memset>
 801c05c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c05e:	2200      	movs	r2, #0
 801c060:	60da      	str	r2, [r3, #12]
 801c062:	69a0      	ldr	r0, [r4, #24]
 801c064:	b138      	cbz	r0, 801c076 <rcl_wait_set_clear+0x4a>
 801c066:	69e2      	ldr	r2, [r4, #28]
 801c068:	2100      	movs	r1, #0
 801c06a:	0092      	lsls	r2, r2, #2
 801c06c:	f004 fd56 	bl	8020b1c <memset>
 801c070:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c072:	2200      	movs	r2, #0
 801c074:	619a      	str	r2, [r3, #24]
 801c076:	6a20      	ldr	r0, [r4, #32]
 801c078:	b138      	cbz	r0, 801c08a <rcl_wait_set_clear+0x5e>
 801c07a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c07c:	2100      	movs	r1, #0
 801c07e:	0092      	lsls	r2, r2, #2
 801c080:	f004 fd4c 	bl	8020b1c <memset>
 801c084:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c086:	2200      	movs	r2, #0
 801c088:	625a      	str	r2, [r3, #36]	; 0x24
 801c08a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c08c:	b138      	cbz	r0, 801c09e <rcl_wait_set_clear+0x72>
 801c08e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c090:	2100      	movs	r1, #0
 801c092:	0092      	lsls	r2, r2, #2
 801c094:	f004 fd42 	bl	8020b1c <memset>
 801c098:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c09a:	2200      	movs	r2, #0
 801c09c:	631a      	str	r2, [r3, #48]	; 0x30
 801c09e:	6920      	ldr	r0, [r4, #16]
 801c0a0:	b138      	cbz	r0, 801c0b2 <rcl_wait_set_clear+0x86>
 801c0a2:	6962      	ldr	r2, [r4, #20]
 801c0a4:	2100      	movs	r1, #0
 801c0a6:	0092      	lsls	r2, r2, #2
 801c0a8:	f004 fd38 	bl	8020b1c <memset>
 801c0ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	641a      	str	r2, [r3, #64]	; 0x40
 801c0b2:	6898      	ldr	r0, [r3, #8]
 801c0b4:	b138      	cbz	r0, 801c0c6 <rcl_wait_set_clear+0x9a>
 801c0b6:	685a      	ldr	r2, [r3, #4]
 801c0b8:	2100      	movs	r1, #0
 801c0ba:	0092      	lsls	r2, r2, #2
 801c0bc:	f004 fd2e 	bl	8020b1c <memset>
 801c0c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	605a      	str	r2, [r3, #4]
 801c0c6:	6958      	ldr	r0, [r3, #20]
 801c0c8:	b138      	cbz	r0, 801c0da <rcl_wait_set_clear+0xae>
 801c0ca:	691a      	ldr	r2, [r3, #16]
 801c0cc:	2100      	movs	r1, #0
 801c0ce:	0092      	lsls	r2, r2, #2
 801c0d0:	f004 fd24 	bl	8020b1c <memset>
 801c0d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	611a      	str	r2, [r3, #16]
 801c0da:	6a18      	ldr	r0, [r3, #32]
 801c0dc:	b138      	cbz	r0, 801c0ee <rcl_wait_set_clear+0xc2>
 801c0de:	69da      	ldr	r2, [r3, #28]
 801c0e0:	2100      	movs	r1, #0
 801c0e2:	0092      	lsls	r2, r2, #2
 801c0e4:	f004 fd1a 	bl	8020b1c <memset>
 801c0e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	61da      	str	r2, [r3, #28]
 801c0ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c0f0:	b138      	cbz	r0, 801c102 <rcl_wait_set_clear+0xd6>
 801c0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c0f4:	2100      	movs	r1, #0
 801c0f6:	0092      	lsls	r2, r2, #2
 801c0f8:	f004 fd10 	bl	8020b1c <memset>
 801c0fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c0fe:	2200      	movs	r2, #0
 801c100:	629a      	str	r2, [r3, #40]	; 0x28
 801c102:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c104:	b140      	cbz	r0, 801c118 <rcl_wait_set_clear+0xec>
 801c106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c108:	2100      	movs	r1, #0
 801c10a:	0092      	lsls	r2, r2, #2
 801c10c:	f004 fd06 	bl	8020b1c <memset>
 801c110:	2300      	movs	r3, #0
 801c112:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c114:	4618      	mov	r0, r3
 801c116:	6353      	str	r3, [r2, #52]	; 0x34
 801c118:	bd10      	pop	{r4, pc}
 801c11a:	200b      	movs	r0, #11
 801c11c:	4770      	bx	lr
 801c11e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c122:	bd10      	pop	{r4, pc}

0801c124 <rcl_wait_set_resize>:
 801c124:	2800      	cmp	r0, #0
 801c126:	f000 8180 	beq.w	801c42a <rcl_wait_set_resize+0x306>
 801c12a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c12e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c130:	b083      	sub	sp, #12
 801c132:	4605      	mov	r5, r0
 801c134:	2c00      	cmp	r4, #0
 801c136:	f000 817a 	beq.w	801c42e <rcl_wait_set_resize+0x30a>
 801c13a:	f04f 0900 	mov.w	r9, #0
 801c13e:	461f      	mov	r7, r3
 801c140:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c144:	4688      	mov	r8, r1
 801c146:	4616      	mov	r6, r2
 801c148:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c14c:	f8c0 9004 	str.w	r9, [r0, #4]
 801c150:	f8c4 9000 	str.w	r9, [r4]
 801c154:	2900      	cmp	r1, #0
 801c156:	f000 80bf 	beq.w	801c2d8 <rcl_wait_set_resize+0x1b4>
 801c15a:	008c      	lsls	r4, r1, #2
 801c15c:	4652      	mov	r2, sl
 801c15e:	6800      	ldr	r0, [r0, #0]
 801c160:	4621      	mov	r1, r4
 801c162:	9301      	str	r3, [sp, #4]
 801c164:	4798      	blx	r3
 801c166:	9b01      	ldr	r3, [sp, #4]
 801c168:	6028      	str	r0, [r5, #0]
 801c16a:	2800      	cmp	r0, #0
 801c16c:	f000 80f6 	beq.w	801c35c <rcl_wait_set_resize+0x238>
 801c170:	4622      	mov	r2, r4
 801c172:	4649      	mov	r1, r9
 801c174:	9301      	str	r3, [sp, #4]
 801c176:	f004 fcd1 	bl	8020b1c <memset>
 801c17a:	f8c5 8004 	str.w	r8, [r5, #4]
 801c17e:	4652      	mov	r2, sl
 801c180:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c184:	4621      	mov	r1, r4
 801c186:	9b01      	ldr	r3, [sp, #4]
 801c188:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c18c:	f8c8 9004 	str.w	r9, [r8, #4]
 801c190:	4798      	blx	r3
 801c192:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c194:	f8c8 0008 	str.w	r0, [r8, #8]
 801c198:	689b      	ldr	r3, [r3, #8]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	f000 814a 	beq.w	801c434 <rcl_wait_set_resize+0x310>
 801c1a0:	4622      	mov	r2, r4
 801c1a2:	4649      	mov	r1, r9
 801c1a4:	4618      	mov	r0, r3
 801c1a6:	f004 fcb9 	bl	8020b1c <memset>
 801c1aa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c1ac:	f04f 0800 	mov.w	r8, #0
 801c1b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c1b4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c1b8:	f8c5 800c 	str.w	r8, [r5, #12]
 801c1bc:	f8c4 800c 	str.w	r8, [r4, #12]
 801c1c0:	2e00      	cmp	r6, #0
 801c1c2:	f040 809b 	bne.w	801c2fc <rcl_wait_set_resize+0x1d8>
 801c1c6:	68a8      	ldr	r0, [r5, #8]
 801c1c8:	b128      	cbz	r0, 801c1d6 <rcl_wait_set_resize+0xb2>
 801c1ca:	4649      	mov	r1, r9
 801c1cc:	4790      	blx	r2
 801c1ce:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c1d0:	60ae      	str	r6, [r5, #8]
 801c1d2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c1d6:	f04f 0800 	mov.w	r8, #0
 801c1da:	19f6      	adds	r6, r6, r7
 801c1dc:	f8c4 8010 	str.w	r8, [r4, #16]
 801c1e0:	f040 80a2 	bne.w	801c328 <rcl_wait_set_resize+0x204>
 801c1e4:	6960      	ldr	r0, [r4, #20]
 801c1e6:	b130      	cbz	r0, 801c1f6 <rcl_wait_set_resize+0xd2>
 801c1e8:	4649      	mov	r1, r9
 801c1ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c1ec:	4798      	blx	r3
 801c1ee:	6166      	str	r6, [r4, #20]
 801c1f0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c1f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c1f6:	2600      	movs	r6, #0
 801c1f8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c1fc:	616e      	str	r6, [r5, #20]
 801c1fe:	6426      	str	r6, [r4, #64]	; 0x40
 801c200:	2f00      	cmp	r7, #0
 801c202:	f040 80af 	bne.w	801c364 <rcl_wait_set_resize+0x240>
 801c206:	6928      	ldr	r0, [r5, #16]
 801c208:	b138      	cbz	r0, 801c21a <rcl_wait_set_resize+0xf6>
 801c20a:	4649      	mov	r1, r9
 801c20c:	47d0      	blx	sl
 801c20e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c210:	612f      	str	r7, [r5, #16]
 801c212:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c216:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c21a:	2600      	movs	r6, #0
 801c21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c21e:	61ee      	str	r6, [r5, #28]
 801c220:	61a6      	str	r6, [r4, #24]
 801c222:	2b00      	cmp	r3, #0
 801c224:	f040 8093 	bne.w	801c34e <rcl_wait_set_resize+0x22a>
 801c228:	69a8      	ldr	r0, [r5, #24]
 801c22a:	b120      	cbz	r0, 801c236 <rcl_wait_set_resize+0x112>
 801c22c:	4649      	mov	r1, r9
 801c22e:	47d0      	blx	sl
 801c230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c232:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c234:	61ab      	str	r3, [r5, #24]
 801c236:	6a20      	ldr	r0, [r4, #32]
 801c238:	b128      	cbz	r0, 801c246 <rcl_wait_set_resize+0x122>
 801c23a:	4649      	mov	r1, r9
 801c23c:	47d0      	blx	sl
 801c23e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c240:	2300      	movs	r3, #0
 801c242:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c246:	2600      	movs	r6, #0
 801c248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c24a:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c24c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c250:	626e      	str	r6, [r5, #36]	; 0x24
 801c252:	6266      	str	r6, [r4, #36]	; 0x24
 801c254:	2b00      	cmp	r3, #0
 801c256:	f000 8098 	beq.w	801c38a <rcl_wait_set_resize+0x266>
 801c25a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c25e:	463a      	mov	r2, r7
 801c260:	6a28      	ldr	r0, [r5, #32]
 801c262:	4651      	mov	r1, sl
 801c264:	47c8      	blx	r9
 801c266:	6228      	str	r0, [r5, #32]
 801c268:	2800      	cmp	r0, #0
 801c26a:	d077      	beq.n	801c35c <rcl_wait_set_resize+0x238>
 801c26c:	4652      	mov	r2, sl
 801c26e:	4631      	mov	r1, r6
 801c270:	f004 fc54 	bl	8020b1c <memset>
 801c274:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c278:	463a      	mov	r2, r7
 801c27a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c27c:	4651      	mov	r1, sl
 801c27e:	626b      	str	r3, [r5, #36]	; 0x24
 801c280:	62a6      	str	r6, [r4, #40]	; 0x28
 801c282:	47c8      	blx	r9
 801c284:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c286:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c288:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c28a:	2c00      	cmp	r4, #0
 801c28c:	f000 80f2 	beq.w	801c474 <rcl_wait_set_resize+0x350>
 801c290:	4620      	mov	r0, r4
 801c292:	4652      	mov	r2, sl
 801c294:	4631      	mov	r1, r6
 801c296:	f004 fc41 	bl	8020b1c <memset>
 801c29a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c29c:	2600      	movs	r6, #0
 801c29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2a0:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c2a2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c2a6:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c2a8:	6326      	str	r6, [r4, #48]	; 0x30
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	f040 8097 	bne.w	801c3de <rcl_wait_set_resize+0x2ba>
 801c2b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c2b2:	b120      	cbz	r0, 801c2be <rcl_wait_set_resize+0x19a>
 801c2b4:	4639      	mov	r1, r7
 801c2b6:	47c0      	blx	r8
 801c2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c2bc:	62ab      	str	r3, [r5, #40]	; 0x28
 801c2be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c2c0:	2800      	cmp	r0, #0
 801c2c2:	d04c      	beq.n	801c35e <rcl_wait_set_resize+0x23a>
 801c2c4:	4639      	mov	r1, r7
 801c2c6:	47c0      	blx	r8
 801c2c8:	2300      	movs	r3, #0
 801c2ca:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c2d2:	b003      	add	sp, #12
 801c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2d8:	6800      	ldr	r0, [r0, #0]
 801c2da:	b120      	cbz	r0, 801c2e6 <rcl_wait_set_resize+0x1c2>
 801c2dc:	4651      	mov	r1, sl
 801c2de:	47d8      	blx	fp
 801c2e0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c2e2:	f8c5 8000 	str.w	r8, [r5]
 801c2e6:	68a0      	ldr	r0, [r4, #8]
 801c2e8:	2800      	cmp	r0, #0
 801c2ea:	f43f af5f 	beq.w	801c1ac <rcl_wait_set_resize+0x88>
 801c2ee:	4651      	mov	r1, sl
 801c2f0:	47d8      	blx	fp
 801c2f2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c2fa:	e757      	b.n	801c1ac <rcl_wait_set_resize+0x88>
 801c2fc:	00b4      	lsls	r4, r6, #2
 801c2fe:	464a      	mov	r2, r9
 801c300:	68a8      	ldr	r0, [r5, #8]
 801c302:	4621      	mov	r1, r4
 801c304:	4798      	blx	r3
 801c306:	60a8      	str	r0, [r5, #8]
 801c308:	b340      	cbz	r0, 801c35c <rcl_wait_set_resize+0x238>
 801c30a:	4622      	mov	r2, r4
 801c30c:	4641      	mov	r1, r8
 801c30e:	f004 fc05 	bl	8020b1c <memset>
 801c312:	f04f 0800 	mov.w	r8, #0
 801c316:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c318:	60ee      	str	r6, [r5, #12]
 801c31a:	19f6      	adds	r6, r6, r7
 801c31c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c320:	f8c4 8010 	str.w	r8, [r4, #16]
 801c324:	f43f af5e 	beq.w	801c1e4 <rcl_wait_set_resize+0xc0>
 801c328:	00b6      	lsls	r6, r6, #2
 801c32a:	464a      	mov	r2, r9
 801c32c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c32e:	6960      	ldr	r0, [r4, #20]
 801c330:	4631      	mov	r1, r6
 801c332:	4798      	blx	r3
 801c334:	4681      	mov	r9, r0
 801c336:	6160      	str	r0, [r4, #20]
 801c338:	2800      	cmp	r0, #0
 801c33a:	f000 8084 	beq.w	801c446 <rcl_wait_set_resize+0x322>
 801c33e:	4632      	mov	r2, r6
 801c340:	4641      	mov	r1, r8
 801c342:	f004 fbeb 	bl	8020b1c <memset>
 801c346:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c348:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c34c:	e753      	b.n	801c1f6 <rcl_wait_set_resize+0xd2>
 801c34e:	009c      	lsls	r4, r3, #2
 801c350:	464a      	mov	r2, r9
 801c352:	69a8      	ldr	r0, [r5, #24]
 801c354:	4621      	mov	r1, r4
 801c356:	47c0      	blx	r8
 801c358:	61a8      	str	r0, [r5, #24]
 801c35a:	bb40      	cbnz	r0, 801c3ae <rcl_wait_set_resize+0x28a>
 801c35c:	200a      	movs	r0, #10
 801c35e:	b003      	add	sp, #12
 801c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c364:	00bc      	lsls	r4, r7, #2
 801c366:	464a      	mov	r2, r9
 801c368:	6928      	ldr	r0, [r5, #16]
 801c36a:	4621      	mov	r1, r4
 801c36c:	47c0      	blx	r8
 801c36e:	6128      	str	r0, [r5, #16]
 801c370:	2800      	cmp	r0, #0
 801c372:	d0f3      	beq.n	801c35c <rcl_wait_set_resize+0x238>
 801c374:	4622      	mov	r2, r4
 801c376:	4631      	mov	r1, r6
 801c378:	f004 fbd0 	bl	8020b1c <memset>
 801c37c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c37e:	616f      	str	r7, [r5, #20]
 801c380:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c384:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c388:	e747      	b.n	801c21a <rcl_wait_set_resize+0xf6>
 801c38a:	6a28      	ldr	r0, [r5, #32]
 801c38c:	b120      	cbz	r0, 801c398 <rcl_wait_set_resize+0x274>
 801c38e:	4639      	mov	r1, r7
 801c390:	47c0      	blx	r8
 801c392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c394:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c396:	622b      	str	r3, [r5, #32]
 801c398:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c39a:	2800      	cmp	r0, #0
 801c39c:	f43f af7e 	beq.w	801c29c <rcl_wait_set_resize+0x178>
 801c3a0:	4639      	mov	r1, r7
 801c3a2:	47c0      	blx	r8
 801c3a4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c3ac:	e776      	b.n	801c29c <rcl_wait_set_resize+0x178>
 801c3ae:	4622      	mov	r2, r4
 801c3b0:	4631      	mov	r1, r6
 801c3b2:	f004 fbb3 	bl	8020b1c <memset>
 801c3b6:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c3ba:	464a      	mov	r2, r9
 801c3bc:	6a38      	ldr	r0, [r7, #32]
 801c3be:	4621      	mov	r1, r4
 801c3c0:	61eb      	str	r3, [r5, #28]
 801c3c2:	61fe      	str	r6, [r7, #28]
 801c3c4:	47c0      	blx	r8
 801c3c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c3c8:	6238      	str	r0, [r7, #32]
 801c3ca:	6a1f      	ldr	r7, [r3, #32]
 801c3cc:	2f00      	cmp	r7, #0
 801c3ce:	d04a      	beq.n	801c466 <rcl_wait_set_resize+0x342>
 801c3d0:	4622      	mov	r2, r4
 801c3d2:	4631      	mov	r1, r6
 801c3d4:	4638      	mov	r0, r7
 801c3d6:	f004 fba1 	bl	8020b1c <memset>
 801c3da:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c3dc:	e733      	b.n	801c246 <rcl_wait_set_resize+0x122>
 801c3de:	009c      	lsls	r4, r3, #2
 801c3e0:	463a      	mov	r2, r7
 801c3e2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c3e4:	4621      	mov	r1, r4
 801c3e6:	47c8      	blx	r9
 801c3e8:	62a8      	str	r0, [r5, #40]	; 0x28
 801c3ea:	2800      	cmp	r0, #0
 801c3ec:	d0b6      	beq.n	801c35c <rcl_wait_set_resize+0x238>
 801c3ee:	4622      	mov	r2, r4
 801c3f0:	4631      	mov	r1, r6
 801c3f2:	f004 fb93 	bl	8020b1c <memset>
 801c3f6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3fc:	463a      	mov	r2, r7
 801c3fe:	4621      	mov	r1, r4
 801c400:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801c404:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c406:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801c40a:	47c8      	blx	r9
 801c40c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c40e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c414:	2b00      	cmp	r3, #0
 801c416:	d034      	beq.n	801c482 <rcl_wait_set_resize+0x35e>
 801c418:	4622      	mov	r2, r4
 801c41a:	4631      	mov	r1, r6
 801c41c:	4618      	mov	r0, r3
 801c41e:	f004 fb7d 	bl	8020b1c <memset>
 801c422:	4630      	mov	r0, r6
 801c424:	b003      	add	sp, #12
 801c426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c42a:	200b      	movs	r0, #11
 801c42c:	4770      	bx	lr
 801c42e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c432:	e794      	b.n	801c35e <rcl_wait_set_resize+0x23a>
 801c434:	6828      	ldr	r0, [r5, #0]
 801c436:	4651      	mov	r1, sl
 801c438:	9301      	str	r3, [sp, #4]
 801c43a:	47d8      	blx	fp
 801c43c:	9b01      	ldr	r3, [sp, #4]
 801c43e:	200a      	movs	r0, #10
 801c440:	e9c5 3300 	strd	r3, r3, [r5]
 801c444:	e78b      	b.n	801c35e <rcl_wait_set_resize+0x23a>
 801c446:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c448:	68a8      	ldr	r0, [r5, #8]
 801c44a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c44e:	4798      	blx	r3
 801c450:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c452:	6928      	ldr	r0, [r5, #16]
 801c454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c456:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801c458:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801c45c:	4790      	blx	r2
 801c45e:	200a      	movs	r0, #10
 801c460:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801c464:	e77b      	b.n	801c35e <rcl_wait_set_resize+0x23a>
 801c466:	69a8      	ldr	r0, [r5, #24]
 801c468:	4649      	mov	r1, r9
 801c46a:	47d0      	blx	sl
 801c46c:	200a      	movs	r0, #10
 801c46e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801c472:	e774      	b.n	801c35e <rcl_wait_set_resize+0x23a>
 801c474:	6a28      	ldr	r0, [r5, #32]
 801c476:	4639      	mov	r1, r7
 801c478:	47c0      	blx	r8
 801c47a:	200a      	movs	r0, #10
 801c47c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801c480:	e76d      	b.n	801c35e <rcl_wait_set_resize+0x23a>
 801c482:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c484:	4639      	mov	r1, r7
 801c486:	9301      	str	r3, [sp, #4]
 801c488:	47c0      	blx	r8
 801c48a:	9b01      	ldr	r3, [sp, #4]
 801c48c:	200a      	movs	r0, #10
 801c48e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c492:	e764      	b.n	801c35e <rcl_wait_set_resize+0x23a>

0801c494 <rcl_wait_set_init>:
 801c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c498:	b085      	sub	sp, #20
 801c49a:	4605      	mov	r5, r0
 801c49c:	460e      	mov	r6, r1
 801c49e:	4617      	mov	r7, r2
 801c4a0:	a812      	add	r0, sp, #72	; 0x48
 801c4a2:	4698      	mov	r8, r3
 801c4a4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801c4a8:	f7f8 fca4 	bl	8014df4 <rcutils_allocator_is_valid>
 801c4ac:	2d00      	cmp	r5, #0
 801c4ae:	d072      	beq.n	801c596 <rcl_wait_set_init+0x102>
 801c4b0:	f080 0001 	eor.w	r0, r0, #1
 801c4b4:	b2c0      	uxtb	r0, r0
 801c4b6:	2800      	cmp	r0, #0
 801c4b8:	d16d      	bne.n	801c596 <rcl_wait_set_init+0x102>
 801c4ba:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801c4be:	f1ba 0f00 	cmp.w	sl, #0
 801c4c2:	d004      	beq.n	801c4ce <rcl_wait_set_init+0x3a>
 801c4c4:	2464      	movs	r4, #100	; 0x64
 801c4c6:	4620      	mov	r0, r4
 801c4c8:	b005      	add	sp, #20
 801c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ce:	f1b9 0f00 	cmp.w	r9, #0
 801c4d2:	d060      	beq.n	801c596 <rcl_wait_set_init+0x102>
 801c4d4:	4648      	mov	r0, r9
 801c4d6:	f7fe fe8f 	bl	801b1f8 <rcl_context_is_valid>
 801c4da:	2800      	cmp	r0, #0
 801c4dc:	d068      	beq.n	801c5b0 <rcl_wait_set_init+0x11c>
 801c4de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c4e0:	205c      	movs	r0, #92	; 0x5c
 801c4e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c4e4:	4798      	blx	r3
 801c4e6:	6328      	str	r0, [r5, #48]	; 0x30
 801c4e8:	2800      	cmp	r0, #0
 801c4ea:	d063      	beq.n	801c5b4 <rcl_wait_set_init+0x120>
 801c4ec:	225c      	movs	r2, #92	; 0x5c
 801c4ee:	4651      	mov	r1, sl
 801c4f0:	f004 fb14 	bl	8020b1c <memset>
 801c4f4:	ac12      	add	r4, sp, #72	; 0x48
 801c4f6:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801c4fa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c4fe:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801c502:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801c506:	eb03 0e02 	add.w	lr, r3, r2
 801c50a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c50c:	f8d9 9000 	ldr.w	r9, [r9]
 801c510:	449e      	add	lr, r3
 801c512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c514:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801c518:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801c51c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801c520:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801c524:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801c528:	44be      	add	lr, r7
 801c52a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c52e:	6823      	ldr	r3, [r4, #0]
 801c530:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801c534:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801c538:	f8cc 3000 	str.w	r3, [ip]
 801c53c:	f001 fe6e 	bl	801e21c <rmw_create_wait_set>
 801c540:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c542:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801c546:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c548:	b350      	cbz	r0, 801c5a0 <rcl_wait_set_init+0x10c>
 801c54a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c54c:	4643      	mov	r3, r8
 801c54e:	463a      	mov	r2, r7
 801c550:	4631      	mov	r1, r6
 801c552:	9402      	str	r4, [sp, #8]
 801c554:	4628      	mov	r0, r5
 801c556:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c558:	9401      	str	r4, [sp, #4]
 801c55a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c55c:	9400      	str	r4, [sp, #0]
 801c55e:	f7ff fde1 	bl	801c124 <rcl_wait_set_resize>
 801c562:	4604      	mov	r4, r0
 801c564:	2800      	cmp	r0, #0
 801c566:	d0ae      	beq.n	801c4c6 <rcl_wait_set_init+0x32>
 801c568:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c56a:	bb2b      	cbnz	r3, 801c5b8 <rcl_wait_set_init+0x124>
 801c56c:	2600      	movs	r6, #0
 801c56e:	4628      	mov	r0, r5
 801c570:	4633      	mov	r3, r6
 801c572:	4632      	mov	r2, r6
 801c574:	4631      	mov	r1, r6
 801c576:	9600      	str	r6, [sp, #0]
 801c578:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801c57c:	f7ff fdd2 	bl	801c124 <rcl_wait_set_resize>
 801c580:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c582:	2800      	cmp	r0, #0
 801c584:	d09f      	beq.n	801c4c6 <rcl_wait_set_init+0x32>
 801c586:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801c588:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801c58a:	4798      	blx	r3
 801c58c:	4620      	mov	r0, r4
 801c58e:	632e      	str	r6, [r5, #48]	; 0x30
 801c590:	b005      	add	sp, #20
 801c592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c596:	240b      	movs	r4, #11
 801c598:	4620      	mov	r0, r4
 801c59a:	b005      	add	sp, #20
 801c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5a0:	2401      	movs	r4, #1
 801c5a2:	f001 fe45 	bl	801e230 <rmw_destroy_wait_set>
 801c5a6:	2800      	cmp	r0, #0
 801c5a8:	bf18      	it	ne
 801c5aa:	f44f 7461 	movne.w	r4, #900	; 0x384
 801c5ae:	e7dd      	b.n	801c56c <rcl_wait_set_init+0xd8>
 801c5b0:	2465      	movs	r4, #101	; 0x65
 801c5b2:	e788      	b.n	801c4c6 <rcl_wait_set_init+0x32>
 801c5b4:	240a      	movs	r4, #10
 801c5b6:	e786      	b.n	801c4c6 <rcl_wait_set_init+0x32>
 801c5b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801c5ba:	e7f2      	b.n	801c5a2 <rcl_wait_set_init+0x10e>

0801c5bc <rcl_wait_set_add_guard_condition>:
 801c5bc:	b318      	cbz	r0, 801c606 <rcl_wait_set_add_guard_condition+0x4a>
 801c5be:	b538      	push	{r3, r4, r5, lr}
 801c5c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c5c2:	4604      	mov	r4, r0
 801c5c4:	b30b      	cbz	r3, 801c60a <rcl_wait_set_add_guard_condition+0x4e>
 801c5c6:	b319      	cbz	r1, 801c610 <rcl_wait_set_add_guard_condition+0x54>
 801c5c8:	68dd      	ldr	r5, [r3, #12]
 801c5ca:	68c0      	ldr	r0, [r0, #12]
 801c5cc:	4285      	cmp	r5, r0
 801c5ce:	d217      	bcs.n	801c600 <rcl_wait_set_add_guard_condition+0x44>
 801c5d0:	1c68      	adds	r0, r5, #1
 801c5d2:	60d8      	str	r0, [r3, #12]
 801c5d4:	68a3      	ldr	r3, [r4, #8]
 801c5d6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c5da:	b102      	cbz	r2, 801c5de <rcl_wait_set_add_guard_condition+0x22>
 801c5dc:	6015      	str	r5, [r2, #0]
 801c5de:	4608      	mov	r0, r1
 801c5e0:	f7fe ff18 	bl	801b414 <rcl_guard_condition_get_rmw_handle>
 801c5e4:	b150      	cbz	r0, 801c5fc <rcl_wait_set_add_guard_condition+0x40>
 801c5e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c5e8:	6842      	ldr	r2, [r0, #4]
 801c5ea:	2000      	movs	r0, #0
 801c5ec:	695b      	ldr	r3, [r3, #20]
 801c5ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c5f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c5f4:	6913      	ldr	r3, [r2, #16]
 801c5f6:	3301      	adds	r3, #1
 801c5f8:	6113      	str	r3, [r2, #16]
 801c5fa:	bd38      	pop	{r3, r4, r5, pc}
 801c5fc:	2001      	movs	r0, #1
 801c5fe:	bd38      	pop	{r3, r4, r5, pc}
 801c600:	f240 3086 	movw	r0, #902	; 0x386
 801c604:	bd38      	pop	{r3, r4, r5, pc}
 801c606:	200b      	movs	r0, #11
 801c608:	4770      	bx	lr
 801c60a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c60e:	bd38      	pop	{r3, r4, r5, pc}
 801c610:	200b      	movs	r0, #11
 801c612:	bd38      	pop	{r3, r4, r5, pc}

0801c614 <rcl_wait_set_add_timer>:
 801c614:	b328      	cbz	r0, 801c662 <rcl_wait_set_add_timer+0x4e>
 801c616:	b538      	push	{r3, r4, r5, lr}
 801c618:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c61a:	4604      	mov	r4, r0
 801c61c:	b31b      	cbz	r3, 801c666 <rcl_wait_set_add_timer+0x52>
 801c61e:	b329      	cbz	r1, 801c66c <rcl_wait_set_add_timer+0x58>
 801c620:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801c622:	6965      	ldr	r5, [r4, #20]
 801c624:	42a8      	cmp	r0, r5
 801c626:	d219      	bcs.n	801c65c <rcl_wait_set_add_timer+0x48>
 801c628:	1c45      	adds	r5, r0, #1
 801c62a:	641d      	str	r5, [r3, #64]	; 0x40
 801c62c:	6923      	ldr	r3, [r4, #16]
 801c62e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801c632:	b102      	cbz	r2, 801c636 <rcl_wait_set_add_timer+0x22>
 801c634:	6010      	str	r0, [r2, #0]
 801c636:	4608      	mov	r0, r1
 801c638:	f7ff fb9a 	bl	801bd70 <rcl_timer_get_guard_condition>
 801c63c:	b168      	cbz	r0, 801c65a <rcl_wait_set_add_timer+0x46>
 801c63e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c640:	68e3      	ldr	r3, [r4, #12]
 801c642:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801c644:	3b01      	subs	r3, #1
 801c646:	441d      	add	r5, r3
 801c648:	f7fe fee4 	bl	801b414 <rcl_guard_condition_get_rmw_handle>
 801c64c:	b180      	cbz	r0, 801c670 <rcl_wait_set_add_timer+0x5c>
 801c64e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c650:	6842      	ldr	r2, [r0, #4]
 801c652:	2000      	movs	r0, #0
 801c654:	695b      	ldr	r3, [r3, #20]
 801c656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c65a:	bd38      	pop	{r3, r4, r5, pc}
 801c65c:	f240 3086 	movw	r0, #902	; 0x386
 801c660:	bd38      	pop	{r3, r4, r5, pc}
 801c662:	200b      	movs	r0, #11
 801c664:	4770      	bx	lr
 801c666:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c66a:	bd38      	pop	{r3, r4, r5, pc}
 801c66c:	200b      	movs	r0, #11
 801c66e:	bd38      	pop	{r3, r4, r5, pc}
 801c670:	2001      	movs	r0, #1
 801c672:	bd38      	pop	{r3, r4, r5, pc}

0801c674 <rcl_wait_set_add_client>:
 801c674:	b318      	cbz	r0, 801c6be <rcl_wait_set_add_client+0x4a>
 801c676:	b538      	push	{r3, r4, r5, lr}
 801c678:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c67a:	4604      	mov	r4, r0
 801c67c:	b30b      	cbz	r3, 801c6c2 <rcl_wait_set_add_client+0x4e>
 801c67e:	b319      	cbz	r1, 801c6c8 <rcl_wait_set_add_client+0x54>
 801c680:	699d      	ldr	r5, [r3, #24]
 801c682:	69c0      	ldr	r0, [r0, #28]
 801c684:	4285      	cmp	r5, r0
 801c686:	d217      	bcs.n	801c6b8 <rcl_wait_set_add_client+0x44>
 801c688:	1c68      	adds	r0, r5, #1
 801c68a:	6198      	str	r0, [r3, #24]
 801c68c:	69a3      	ldr	r3, [r4, #24]
 801c68e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c692:	b102      	cbz	r2, 801c696 <rcl_wait_set_add_client+0x22>
 801c694:	6015      	str	r5, [r2, #0]
 801c696:	4608      	mov	r0, r1
 801c698:	f7fe fd00 	bl	801b09c <rcl_client_get_rmw_handle>
 801c69c:	b150      	cbz	r0, 801c6b4 <rcl_wait_set_add_client+0x40>
 801c69e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c6a0:	6842      	ldr	r2, [r0, #4]
 801c6a2:	2000      	movs	r0, #0
 801c6a4:	6a1b      	ldr	r3, [r3, #32]
 801c6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c6aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c6ac:	69d3      	ldr	r3, [r2, #28]
 801c6ae:	3301      	adds	r3, #1
 801c6b0:	61d3      	str	r3, [r2, #28]
 801c6b2:	bd38      	pop	{r3, r4, r5, pc}
 801c6b4:	2001      	movs	r0, #1
 801c6b6:	bd38      	pop	{r3, r4, r5, pc}
 801c6b8:	f240 3086 	movw	r0, #902	; 0x386
 801c6bc:	bd38      	pop	{r3, r4, r5, pc}
 801c6be:	200b      	movs	r0, #11
 801c6c0:	4770      	bx	lr
 801c6c2:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c6c6:	bd38      	pop	{r3, r4, r5, pc}
 801c6c8:	200b      	movs	r0, #11
 801c6ca:	bd38      	pop	{r3, r4, r5, pc}

0801c6cc <rcl_wait_set_add_service>:
 801c6cc:	b318      	cbz	r0, 801c716 <rcl_wait_set_add_service+0x4a>
 801c6ce:	b538      	push	{r3, r4, r5, lr}
 801c6d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c6d2:	4604      	mov	r4, r0
 801c6d4:	b30b      	cbz	r3, 801c71a <rcl_wait_set_add_service+0x4e>
 801c6d6:	b319      	cbz	r1, 801c720 <rcl_wait_set_add_service+0x54>
 801c6d8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c6da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c6dc:	4285      	cmp	r5, r0
 801c6de:	d217      	bcs.n	801c710 <rcl_wait_set_add_service+0x44>
 801c6e0:	1c68      	adds	r0, r5, #1
 801c6e2:	6258      	str	r0, [r3, #36]	; 0x24
 801c6e4:	6a23      	ldr	r3, [r4, #32]
 801c6e6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c6ea:	b102      	cbz	r2, 801c6ee <rcl_wait_set_add_service+0x22>
 801c6ec:	6015      	str	r5, [r2, #0]
 801c6ee:	4608      	mov	r0, r1
 801c6f0:	f7f7 f9f8 	bl	8013ae4 <rcl_service_get_rmw_handle>
 801c6f4:	b150      	cbz	r0, 801c70c <rcl_wait_set_add_service+0x40>
 801c6f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c6f8:	6842      	ldr	r2, [r0, #4]
 801c6fa:	2000      	movs	r0, #0
 801c6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c702:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c704:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801c706:	3301      	adds	r3, #1
 801c708:	6293      	str	r3, [r2, #40]	; 0x28
 801c70a:	bd38      	pop	{r3, r4, r5, pc}
 801c70c:	2001      	movs	r0, #1
 801c70e:	bd38      	pop	{r3, r4, r5, pc}
 801c710:	f240 3086 	movw	r0, #902	; 0x386
 801c714:	bd38      	pop	{r3, r4, r5, pc}
 801c716:	200b      	movs	r0, #11
 801c718:	4770      	bx	lr
 801c71a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c71e:	bd38      	pop	{r3, r4, r5, pc}
 801c720:	200b      	movs	r0, #11
 801c722:	bd38      	pop	{r3, r4, r5, pc}
 801c724:	0000      	movs	r0, r0
	...

0801c728 <rcl_wait>:
 801c728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c72c:	ed2d 8b02 	vpush	{d8}
 801c730:	b08d      	sub	sp, #52	; 0x34
 801c732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c736:	2800      	cmp	r0, #0
 801c738:	f000 814f 	beq.w	801c9da <rcl_wait+0x2b2>
 801c73c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c73e:	4605      	mov	r5, r0
 801c740:	2e00      	cmp	r6, #0
 801c742:	f000 811a 	beq.w	801c97a <rcl_wait+0x252>
 801c746:	6843      	ldr	r3, [r0, #4]
 801c748:	b983      	cbnz	r3, 801c76c <rcl_wait+0x44>
 801c74a:	68eb      	ldr	r3, [r5, #12]
 801c74c:	b973      	cbnz	r3, 801c76c <rcl_wait+0x44>
 801c74e:	696b      	ldr	r3, [r5, #20]
 801c750:	b963      	cbnz	r3, 801c76c <rcl_wait+0x44>
 801c752:	69eb      	ldr	r3, [r5, #28]
 801c754:	b953      	cbnz	r3, 801c76c <rcl_wait+0x44>
 801c756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c758:	b943      	cbnz	r3, 801c76c <rcl_wait+0x44>
 801c75a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801c75c:	b933      	cbnz	r3, 801c76c <rcl_wait+0x44>
 801c75e:	f240 3085 	movw	r0, #901	; 0x385
 801c762:	b00d      	add	sp, #52	; 0x34
 801c764:	ecbd 8b02 	vpop	{d8}
 801c768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c76c:	9b04      	ldr	r3, [sp, #16]
 801c76e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801c770:	2b01      	cmp	r3, #1
 801c772:	9b05      	ldr	r3, [sp, #20]
 801c774:	f173 0300 	sbcs.w	r3, r3, #0
 801c778:	f2c0 80f8 	blt.w	801c96c <rcl_wait+0x244>
 801c77c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801c780:	2a00      	cmp	r2, #0
 801c782:	f000 810f 	beq.w	801c9a4 <rcl_wait+0x27c>
 801c786:	2400      	movs	r4, #0
 801c788:	4613      	mov	r3, r2
 801c78a:	f240 3921 	movw	r9, #801	; 0x321
 801c78e:	4632      	mov	r2, r6
 801c790:	46a2      	mov	sl, r4
 801c792:	46a3      	mov	fp, r4
 801c794:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801c9f8 <rcl_wait+0x2d0>
 801c798:	e014      	b.n	801c7c4 <rcl_wait+0x9c>
 801c79a:	2800      	cmp	r0, #0
 801c79c:	d1e1      	bne.n	801c762 <rcl_wait+0x3a>
 801c79e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c7a2:	4542      	cmp	r2, r8
 801c7a4:	eb73 0107 	sbcs.w	r1, r3, r7
 801c7a8:	da03      	bge.n	801c7b2 <rcl_wait+0x8a>
 801c7aa:	4690      	mov	r8, r2
 801c7ac:	461f      	mov	r7, r3
 801c7ae:	f04f 0b01 	mov.w	fp, #1
 801c7b2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c7b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801c7b6:	3401      	adds	r4, #1
 801c7b8:	f14a 0a00 	adc.w	sl, sl, #0
 801c7bc:	429c      	cmp	r4, r3
 801c7be:	f17a 0100 	sbcs.w	r1, sl, #0
 801c7c2:	d228      	bcs.n	801c816 <rcl_wait+0xee>
 801c7c4:	6928      	ldr	r0, [r5, #16]
 801c7c6:	a908      	add	r1, sp, #32
 801c7c8:	00a6      	lsls	r6, r4, #2
 801c7ca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801c7ce:	2800      	cmp	r0, #0
 801c7d0:	d0f1      	beq.n	801c7b6 <rcl_wait+0x8e>
 801c7d2:	68eb      	ldr	r3, [r5, #12]
 801c7d4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801c7d8:	4423      	add	r3, r4
 801c7da:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801c7de:	f1be 0f00 	cmp.w	lr, #0
 801c7e2:	d006      	beq.n	801c7f2 <rcl_wait+0xca>
 801c7e4:	6913      	ldr	r3, [r2, #16]
 801c7e6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801c7ea:	3301      	adds	r3, #1
 801c7ec:	6113      	str	r3, [r2, #16]
 801c7ee:	692b      	ldr	r3, [r5, #16]
 801c7f0:	5998      	ldr	r0, [r3, r6]
 801c7f2:	ed8d 8b08 	vstr	d8, [sp, #32]
 801c7f6:	f7ff fa89 	bl	801bd0c <rcl_timer_get_time_until_next_call>
 801c7fa:	4548      	cmp	r0, r9
 801c7fc:	d1cd      	bne.n	801c79a <rcl_wait+0x72>
 801c7fe:	692b      	ldr	r3, [r5, #16]
 801c800:	2200      	movs	r2, #0
 801c802:	3401      	adds	r4, #1
 801c804:	519a      	str	r2, [r3, r6]
 801c806:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c808:	f14a 0a00 	adc.w	sl, sl, #0
 801c80c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801c80e:	429c      	cmp	r4, r3
 801c810:	f17a 0100 	sbcs.w	r1, sl, #0
 801c814:	d3d6      	bcc.n	801c7c4 <rcl_wait+0x9c>
 801c816:	4659      	mov	r1, fp
 801c818:	4616      	mov	r6, r2
 801c81a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c81e:	4313      	orrs	r3, r2
 801c820:	f040 80b4 	bne.w	801c98c <rcl_wait+0x264>
 801c824:	2300      	movs	r3, #0
 801c826:	2200      	movs	r2, #0
 801c828:	460c      	mov	r4, r1
 801c82a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801c82e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c832:	ab08      	add	r3, sp, #32
 801c834:	9302      	str	r3, [sp, #8]
 801c836:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801c83a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801c83c:	f106 0110 	add.w	r1, r6, #16
 801c840:	9300      	str	r3, [sp, #0]
 801c842:	1d30      	adds	r0, r6, #4
 801c844:	f106 031c 	add.w	r3, r6, #28
 801c848:	9201      	str	r2, [sp, #4]
 801c84a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801c84e:	f001 fb81 	bl	801df54 <rmw_wait>
 801c852:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c854:	4680      	mov	r8, r0
 801c856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c858:	b1e2      	cbz	r2, 801c894 <rcl_wait+0x16c>
 801c85a:	f04f 0900 	mov.w	r9, #0
 801c85e:	464f      	mov	r7, r9
 801c860:	692a      	ldr	r2, [r5, #16]
 801c862:	f10d 011f 	add.w	r1, sp, #31
 801c866:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801c86a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801c86e:	b160      	cbz	r0, 801c88a <rcl_wait+0x162>
 801c870:	f88d 701f 	strb.w	r7, [sp, #31]
 801c874:	f7ff fa0e 	bl	801bc94 <rcl_timer_is_ready>
 801c878:	2800      	cmp	r0, #0
 801c87a:	f47f af72 	bne.w	801c762 <rcl_wait+0x3a>
 801c87e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801c882:	b90b      	cbnz	r3, 801c888 <rcl_wait+0x160>
 801c884:	692a      	ldr	r2, [r5, #16]
 801c886:	5193      	str	r3, [r2, r6]
 801c888:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c88a:	f109 0901 	add.w	r9, r9, #1
 801c88e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c890:	454a      	cmp	r2, r9
 801c892:	d8e5      	bhi.n	801c860 <rcl_wait+0x138>
 801c894:	f038 0002 	bics.w	r0, r8, #2
 801c898:	d176      	bne.n	801c988 <rcl_wait+0x260>
 801c89a:	686f      	ldr	r7, [r5, #4]
 801c89c:	b17f      	cbz	r7, 801c8be <rcl_wait+0x196>
 801c89e:	4602      	mov	r2, r0
 801c8a0:	e002      	b.n	801c8a8 <rcl_wait+0x180>
 801c8a2:	3201      	adds	r2, #1
 801c8a4:	42ba      	cmp	r2, r7
 801c8a6:	d00a      	beq.n	801c8be <rcl_wait+0x196>
 801c8a8:	6899      	ldr	r1, [r3, #8]
 801c8aa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c8ae:	2900      	cmp	r1, #0
 801c8b0:	d1f7      	bne.n	801c8a2 <rcl_wait+0x17a>
 801c8b2:	682e      	ldr	r6, [r5, #0]
 801c8b4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801c8b8:	3201      	adds	r2, #1
 801c8ba:	42ba      	cmp	r2, r7
 801c8bc:	d1f4      	bne.n	801c8a8 <rcl_wait+0x180>
 801c8be:	68ef      	ldr	r7, [r5, #12]
 801c8c0:	b17f      	cbz	r7, 801c8e2 <rcl_wait+0x1ba>
 801c8c2:	2200      	movs	r2, #0
 801c8c4:	e002      	b.n	801c8cc <rcl_wait+0x1a4>
 801c8c6:	3201      	adds	r2, #1
 801c8c8:	42ba      	cmp	r2, r7
 801c8ca:	d00a      	beq.n	801c8e2 <rcl_wait+0x1ba>
 801c8cc:	6959      	ldr	r1, [r3, #20]
 801c8ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c8d2:	2900      	cmp	r1, #0
 801c8d4:	d1f7      	bne.n	801c8c6 <rcl_wait+0x19e>
 801c8d6:	68ae      	ldr	r6, [r5, #8]
 801c8d8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801c8dc:	3201      	adds	r2, #1
 801c8de:	42ba      	cmp	r2, r7
 801c8e0:	d1f4      	bne.n	801c8cc <rcl_wait+0x1a4>
 801c8e2:	69ef      	ldr	r7, [r5, #28]
 801c8e4:	b17f      	cbz	r7, 801c906 <rcl_wait+0x1de>
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	e002      	b.n	801c8f0 <rcl_wait+0x1c8>
 801c8ea:	3201      	adds	r2, #1
 801c8ec:	42ba      	cmp	r2, r7
 801c8ee:	d00a      	beq.n	801c906 <rcl_wait+0x1de>
 801c8f0:	6a19      	ldr	r1, [r3, #32]
 801c8f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c8f6:	2900      	cmp	r1, #0
 801c8f8:	d1f7      	bne.n	801c8ea <rcl_wait+0x1c2>
 801c8fa:	69ae      	ldr	r6, [r5, #24]
 801c8fc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801c900:	3201      	adds	r2, #1
 801c902:	42ba      	cmp	r2, r7
 801c904:	d1f4      	bne.n	801c8f0 <rcl_wait+0x1c8>
 801c906:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801c908:	b17f      	cbz	r7, 801c92a <rcl_wait+0x202>
 801c90a:	2200      	movs	r2, #0
 801c90c:	e002      	b.n	801c914 <rcl_wait+0x1ec>
 801c90e:	3201      	adds	r2, #1
 801c910:	42ba      	cmp	r2, r7
 801c912:	d00a      	beq.n	801c92a <rcl_wait+0x202>
 801c914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c916:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c91a:	2900      	cmp	r1, #0
 801c91c:	d1f7      	bne.n	801c90e <rcl_wait+0x1e6>
 801c91e:	6a2e      	ldr	r6, [r5, #32]
 801c920:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801c924:	3201      	adds	r2, #1
 801c926:	42ba      	cmp	r2, r7
 801c928:	d1f4      	bne.n	801c914 <rcl_wait+0x1ec>
 801c92a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801c92c:	b17f      	cbz	r7, 801c94e <rcl_wait+0x226>
 801c92e:	2200      	movs	r2, #0
 801c930:	e002      	b.n	801c938 <rcl_wait+0x210>
 801c932:	3201      	adds	r2, #1
 801c934:	42ba      	cmp	r2, r7
 801c936:	d00a      	beq.n	801c94e <rcl_wait+0x226>
 801c938:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801c93a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c93e:	2900      	cmp	r1, #0
 801c940:	d1f7      	bne.n	801c932 <rcl_wait+0x20a>
 801c942:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801c944:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801c948:	3201      	adds	r2, #1
 801c94a:	42ba      	cmp	r2, r7
 801c94c:	d1f4      	bne.n	801c938 <rcl_wait+0x210>
 801c94e:	f1b8 0f02 	cmp.w	r8, #2
 801c952:	f47f af06 	bne.w	801c762 <rcl_wait+0x3a>
 801c956:	f084 0301 	eor.w	r3, r4, #1
 801c95a:	b2db      	uxtb	r3, r3
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	bf18      	it	ne
 801c960:	2002      	movne	r0, #2
 801c962:	b00d      	add	sp, #52	; 0x34
 801c964:	ecbd 8b02 	vpop	{d8}
 801c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96c:	2a00      	cmp	r2, #0
 801c96e:	d03a      	beq.n	801c9e6 <rcl_wait+0x2be>
 801c970:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c974:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801c978:	e705      	b.n	801c786 <rcl_wait+0x5e>
 801c97a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c97e:	b00d      	add	sp, #52	; 0x34
 801c980:	ecbd 8b02 	vpop	{d8}
 801c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c988:	2001      	movs	r0, #1
 801c98a:	e6ea      	b.n	801c762 <rcl_wait+0x3a>
 801c98c:	9b04      	ldr	r3, [sp, #16]
 801c98e:	460c      	mov	r4, r1
 801c990:	2b01      	cmp	r3, #1
 801c992:	9b05      	ldr	r3, [sp, #20]
 801c994:	f173 0300 	sbcs.w	r3, r3, #0
 801c998:	bfa8      	it	ge
 801c99a:	f044 0401 	orrge.w	r4, r4, #1
 801c99e:	b914      	cbnz	r4, 801c9a6 <rcl_wait+0x27e>
 801c9a0:	4623      	mov	r3, r4
 801c9a2:	e747      	b.n	801c834 <rcl_wait+0x10c>
 801c9a4:	4611      	mov	r1, r2
 801c9a6:	2f00      	cmp	r7, #0
 801c9a8:	da02      	bge.n	801c9b0 <rcl_wait+0x288>
 801c9aa:	f04f 0800 	mov.w	r8, #0
 801c9ae:	4647      	mov	r7, r8
 801c9b0:	460c      	mov	r4, r1
 801c9b2:	4640      	mov	r0, r8
 801c9b4:	4639      	mov	r1, r7
 801c9b6:	a312      	add	r3, pc, #72	; (adr r3, 801ca00 <rcl_wait+0x2d8>)
 801c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9bc:	f7e3 fe64 	bl	8000688 <__aeabi_ldivmod>
 801c9c0:	a30f      	add	r3, pc, #60	; (adr r3, 801ca00 <rcl_wait+0x2d8>)
 801c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c9ca:	4640      	mov	r0, r8
 801c9cc:	4639      	mov	r1, r7
 801c9ce:	f7e3 fe5b 	bl	8000688 <__aeabi_ldivmod>
 801c9d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c9d6:	ab08      	add	r3, sp, #32
 801c9d8:	e72c      	b.n	801c834 <rcl_wait+0x10c>
 801c9da:	200b      	movs	r0, #11
 801c9dc:	b00d      	add	sp, #52	; 0x34
 801c9de:	ecbd 8b02 	vpop	{d8}
 801c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e6:	4611      	mov	r1, r2
 801c9e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c9ec:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801c9f0:	e713      	b.n	801c81a <rcl_wait+0xf2>
 801c9f2:	bf00      	nop
 801c9f4:	f3af 8000 	nop.w
 801c9f8:	ffffffff 	.word	0xffffffff
 801c9fc:	7fffffff 	.word	0x7fffffff
 801ca00:	3b9aca00 	.word	0x3b9aca00
 801ca04:	00000000 	.word	0x00000000

0801ca08 <rcl_action_take_goal_response>:
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	d039      	beq.n	801ca80 <rcl_action_take_goal_response+0x78>
 801ca0c:	b570      	push	{r4, r5, r6, lr}
 801ca0e:	4604      	mov	r4, r0
 801ca10:	6800      	ldr	r0, [r0, #0]
 801ca12:	b380      	cbz	r0, 801ca76 <rcl_action_take_goal_response+0x6e>
 801ca14:	460e      	mov	r6, r1
 801ca16:	4615      	mov	r5, r2
 801ca18:	f7fe fbc6 	bl	801b1a8 <rcl_client_is_valid>
 801ca1c:	b330      	cbz	r0, 801ca6c <rcl_action_take_goal_response+0x64>
 801ca1e:	6820      	ldr	r0, [r4, #0]
 801ca20:	3004      	adds	r0, #4
 801ca22:	f7fe fbc1 	bl	801b1a8 <rcl_client_is_valid>
 801ca26:	b308      	cbz	r0, 801ca6c <rcl_action_take_goal_response+0x64>
 801ca28:	6820      	ldr	r0, [r4, #0]
 801ca2a:	3008      	adds	r0, #8
 801ca2c:	f7fe fbbc 	bl	801b1a8 <rcl_client_is_valid>
 801ca30:	b1e0      	cbz	r0, 801ca6c <rcl_action_take_goal_response+0x64>
 801ca32:	6820      	ldr	r0, [r4, #0]
 801ca34:	300c      	adds	r0, #12
 801ca36:	f7f7 f9fb 	bl	8013e30 <rcl_subscription_is_valid>
 801ca3a:	b1b8      	cbz	r0, 801ca6c <rcl_action_take_goal_response+0x64>
 801ca3c:	6820      	ldr	r0, [r4, #0]
 801ca3e:	3010      	adds	r0, #16
 801ca40:	f7f7 f9f6 	bl	8013e30 <rcl_subscription_is_valid>
 801ca44:	b190      	cbz	r0, 801ca6c <rcl_action_take_goal_response+0x64>
 801ca46:	b1cd      	cbz	r5, 801ca7c <rcl_action_take_goal_response+0x74>
 801ca48:	b1c6      	cbz	r6, 801ca7c <rcl_action_take_goal_response+0x74>
 801ca4a:	462a      	mov	r2, r5
 801ca4c:	4631      	mov	r1, r6
 801ca4e:	6820      	ldr	r0, [r4, #0]
 801ca50:	f7fe fb62 	bl	801b118 <rcl_take_response>
 801ca54:	b148      	cbz	r0, 801ca6a <rcl_action_take_goal_response+0x62>
 801ca56:	280a      	cmp	r0, #10
 801ca58:	d007      	beq.n	801ca6a <rcl_action_take_goal_response+0x62>
 801ca5a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801ca5e:	f640 0337 	movw	r3, #2103	; 0x837
 801ca62:	4290      	cmp	r0, r2
 801ca64:	bf0c      	ite	eq
 801ca66:	4618      	moveq	r0, r3
 801ca68:	2001      	movne	r0, #1
 801ca6a:	bd70      	pop	{r4, r5, r6, pc}
 801ca6c:	f7f8 fa00 	bl	8014e70 <rcutils_reset_error>
 801ca70:	f640 0036 	movw	r0, #2102	; 0x836
 801ca74:	bd70      	pop	{r4, r5, r6, pc}
 801ca76:	f640 0036 	movw	r0, #2102	; 0x836
 801ca7a:	bd70      	pop	{r4, r5, r6, pc}
 801ca7c:	200b      	movs	r0, #11
 801ca7e:	bd70      	pop	{r4, r5, r6, pc}
 801ca80:	f640 0036 	movw	r0, #2102	; 0x836
 801ca84:	4770      	bx	lr
 801ca86:	bf00      	nop

0801ca88 <rcl_action_send_result_request>:
 801ca88:	b390      	cbz	r0, 801caf0 <rcl_action_send_result_request+0x68>
 801ca8a:	b570      	push	{r4, r5, r6, lr}
 801ca8c:	4604      	mov	r4, r0
 801ca8e:	6800      	ldr	r0, [r0, #0]
 801ca90:	b348      	cbz	r0, 801cae6 <rcl_action_send_result_request+0x5e>
 801ca92:	460e      	mov	r6, r1
 801ca94:	4615      	mov	r5, r2
 801ca96:	f7fe fb87 	bl	801b1a8 <rcl_client_is_valid>
 801ca9a:	b1f8      	cbz	r0, 801cadc <rcl_action_send_result_request+0x54>
 801ca9c:	6820      	ldr	r0, [r4, #0]
 801ca9e:	3004      	adds	r0, #4
 801caa0:	f7fe fb82 	bl	801b1a8 <rcl_client_is_valid>
 801caa4:	b1d0      	cbz	r0, 801cadc <rcl_action_send_result_request+0x54>
 801caa6:	6820      	ldr	r0, [r4, #0]
 801caa8:	3008      	adds	r0, #8
 801caaa:	f7fe fb7d 	bl	801b1a8 <rcl_client_is_valid>
 801caae:	b1a8      	cbz	r0, 801cadc <rcl_action_send_result_request+0x54>
 801cab0:	6820      	ldr	r0, [r4, #0]
 801cab2:	300c      	adds	r0, #12
 801cab4:	f7f7 f9bc 	bl	8013e30 <rcl_subscription_is_valid>
 801cab8:	b180      	cbz	r0, 801cadc <rcl_action_send_result_request+0x54>
 801caba:	6820      	ldr	r0, [r4, #0]
 801cabc:	3010      	adds	r0, #16
 801cabe:	f7f7 f9b7 	bl	8013e30 <rcl_subscription_is_valid>
 801cac2:	b158      	cbz	r0, 801cadc <rcl_action_send_result_request+0x54>
 801cac4:	b195      	cbz	r5, 801caec <rcl_action_send_result_request+0x64>
 801cac6:	b18e      	cbz	r6, 801caec <rcl_action_send_result_request+0x64>
 801cac8:	6820      	ldr	r0, [r4, #0]
 801caca:	462a      	mov	r2, r5
 801cacc:	4631      	mov	r1, r6
 801cace:	3008      	adds	r0, #8
 801cad0:	f7fe faea 	bl	801b0a8 <rcl_send_request>
 801cad4:	3800      	subs	r0, #0
 801cad6:	bf18      	it	ne
 801cad8:	2001      	movne	r0, #1
 801cada:	bd70      	pop	{r4, r5, r6, pc}
 801cadc:	f7f8 f9c8 	bl	8014e70 <rcutils_reset_error>
 801cae0:	f640 0036 	movw	r0, #2102	; 0x836
 801cae4:	bd70      	pop	{r4, r5, r6, pc}
 801cae6:	f640 0036 	movw	r0, #2102	; 0x836
 801caea:	bd70      	pop	{r4, r5, r6, pc}
 801caec:	200b      	movs	r0, #11
 801caee:	bd70      	pop	{r4, r5, r6, pc}
 801caf0:	f640 0036 	movw	r0, #2102	; 0x836
 801caf4:	4770      	bx	lr
 801caf6:	bf00      	nop

0801caf8 <rcl_action_take_result_response>:
 801caf8:	2800      	cmp	r0, #0
 801cafa:	d03a      	beq.n	801cb72 <rcl_action_take_result_response+0x7a>
 801cafc:	b570      	push	{r4, r5, r6, lr}
 801cafe:	4604      	mov	r4, r0
 801cb00:	6800      	ldr	r0, [r0, #0]
 801cb02:	b388      	cbz	r0, 801cb68 <rcl_action_take_result_response+0x70>
 801cb04:	460e      	mov	r6, r1
 801cb06:	4615      	mov	r5, r2
 801cb08:	f7fe fb4e 	bl	801b1a8 <rcl_client_is_valid>
 801cb0c:	b338      	cbz	r0, 801cb5e <rcl_action_take_result_response+0x66>
 801cb0e:	6820      	ldr	r0, [r4, #0]
 801cb10:	3004      	adds	r0, #4
 801cb12:	f7fe fb49 	bl	801b1a8 <rcl_client_is_valid>
 801cb16:	b310      	cbz	r0, 801cb5e <rcl_action_take_result_response+0x66>
 801cb18:	6820      	ldr	r0, [r4, #0]
 801cb1a:	3008      	adds	r0, #8
 801cb1c:	f7fe fb44 	bl	801b1a8 <rcl_client_is_valid>
 801cb20:	b1e8      	cbz	r0, 801cb5e <rcl_action_take_result_response+0x66>
 801cb22:	6820      	ldr	r0, [r4, #0]
 801cb24:	300c      	adds	r0, #12
 801cb26:	f7f7 f983 	bl	8013e30 <rcl_subscription_is_valid>
 801cb2a:	b1c0      	cbz	r0, 801cb5e <rcl_action_take_result_response+0x66>
 801cb2c:	6820      	ldr	r0, [r4, #0]
 801cb2e:	3010      	adds	r0, #16
 801cb30:	f7f7 f97e 	bl	8013e30 <rcl_subscription_is_valid>
 801cb34:	b198      	cbz	r0, 801cb5e <rcl_action_take_result_response+0x66>
 801cb36:	b1d5      	cbz	r5, 801cb6e <rcl_action_take_result_response+0x76>
 801cb38:	b1ce      	cbz	r6, 801cb6e <rcl_action_take_result_response+0x76>
 801cb3a:	6820      	ldr	r0, [r4, #0]
 801cb3c:	462a      	mov	r2, r5
 801cb3e:	4631      	mov	r1, r6
 801cb40:	3008      	adds	r0, #8
 801cb42:	f7fe fae9 	bl	801b118 <rcl_take_response>
 801cb46:	b148      	cbz	r0, 801cb5c <rcl_action_take_result_response+0x64>
 801cb48:	280a      	cmp	r0, #10
 801cb4a:	d007      	beq.n	801cb5c <rcl_action_take_result_response+0x64>
 801cb4c:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cb50:	f640 0337 	movw	r3, #2103	; 0x837
 801cb54:	4290      	cmp	r0, r2
 801cb56:	bf0c      	ite	eq
 801cb58:	4618      	moveq	r0, r3
 801cb5a:	2001      	movne	r0, #1
 801cb5c:	bd70      	pop	{r4, r5, r6, pc}
 801cb5e:	f7f8 f987 	bl	8014e70 <rcutils_reset_error>
 801cb62:	f640 0036 	movw	r0, #2102	; 0x836
 801cb66:	bd70      	pop	{r4, r5, r6, pc}
 801cb68:	f640 0036 	movw	r0, #2102	; 0x836
 801cb6c:	bd70      	pop	{r4, r5, r6, pc}
 801cb6e:	200b      	movs	r0, #11
 801cb70:	bd70      	pop	{r4, r5, r6, pc}
 801cb72:	f640 0036 	movw	r0, #2102	; 0x836
 801cb76:	4770      	bx	lr

0801cb78 <rcl_action_take_cancel_response>:
 801cb78:	2800      	cmp	r0, #0
 801cb7a:	d03a      	beq.n	801cbf2 <rcl_action_take_cancel_response+0x7a>
 801cb7c:	b570      	push	{r4, r5, r6, lr}
 801cb7e:	4604      	mov	r4, r0
 801cb80:	6800      	ldr	r0, [r0, #0]
 801cb82:	b388      	cbz	r0, 801cbe8 <rcl_action_take_cancel_response+0x70>
 801cb84:	460e      	mov	r6, r1
 801cb86:	4615      	mov	r5, r2
 801cb88:	f7fe fb0e 	bl	801b1a8 <rcl_client_is_valid>
 801cb8c:	b338      	cbz	r0, 801cbde <rcl_action_take_cancel_response+0x66>
 801cb8e:	6820      	ldr	r0, [r4, #0]
 801cb90:	3004      	adds	r0, #4
 801cb92:	f7fe fb09 	bl	801b1a8 <rcl_client_is_valid>
 801cb96:	b310      	cbz	r0, 801cbde <rcl_action_take_cancel_response+0x66>
 801cb98:	6820      	ldr	r0, [r4, #0]
 801cb9a:	3008      	adds	r0, #8
 801cb9c:	f7fe fb04 	bl	801b1a8 <rcl_client_is_valid>
 801cba0:	b1e8      	cbz	r0, 801cbde <rcl_action_take_cancel_response+0x66>
 801cba2:	6820      	ldr	r0, [r4, #0]
 801cba4:	300c      	adds	r0, #12
 801cba6:	f7f7 f943 	bl	8013e30 <rcl_subscription_is_valid>
 801cbaa:	b1c0      	cbz	r0, 801cbde <rcl_action_take_cancel_response+0x66>
 801cbac:	6820      	ldr	r0, [r4, #0]
 801cbae:	3010      	adds	r0, #16
 801cbb0:	f7f7 f93e 	bl	8013e30 <rcl_subscription_is_valid>
 801cbb4:	b198      	cbz	r0, 801cbde <rcl_action_take_cancel_response+0x66>
 801cbb6:	b1d5      	cbz	r5, 801cbee <rcl_action_take_cancel_response+0x76>
 801cbb8:	b1ce      	cbz	r6, 801cbee <rcl_action_take_cancel_response+0x76>
 801cbba:	6820      	ldr	r0, [r4, #0]
 801cbbc:	462a      	mov	r2, r5
 801cbbe:	4631      	mov	r1, r6
 801cbc0:	3004      	adds	r0, #4
 801cbc2:	f7fe faa9 	bl	801b118 <rcl_take_response>
 801cbc6:	b148      	cbz	r0, 801cbdc <rcl_action_take_cancel_response+0x64>
 801cbc8:	280a      	cmp	r0, #10
 801cbca:	d007      	beq.n	801cbdc <rcl_action_take_cancel_response+0x64>
 801cbcc:	f240 12f5 	movw	r2, #501	; 0x1f5
 801cbd0:	f640 0337 	movw	r3, #2103	; 0x837
 801cbd4:	4290      	cmp	r0, r2
 801cbd6:	bf0c      	ite	eq
 801cbd8:	4618      	moveq	r0, r3
 801cbda:	2001      	movne	r0, #1
 801cbdc:	bd70      	pop	{r4, r5, r6, pc}
 801cbde:	f7f8 f947 	bl	8014e70 <rcutils_reset_error>
 801cbe2:	f640 0036 	movw	r0, #2102	; 0x836
 801cbe6:	bd70      	pop	{r4, r5, r6, pc}
 801cbe8:	f640 0036 	movw	r0, #2102	; 0x836
 801cbec:	bd70      	pop	{r4, r5, r6, pc}
 801cbee:	200b      	movs	r0, #11
 801cbf0:	bd70      	pop	{r4, r5, r6, pc}
 801cbf2:	f640 0036 	movw	r0, #2102	; 0x836
 801cbf6:	4770      	bx	lr

0801cbf8 <rcl_action_take_feedback>:
 801cbf8:	2800      	cmp	r0, #0
 801cbfa:	d038      	beq.n	801cc6e <rcl_action_take_feedback+0x76>
 801cbfc:	b530      	push	{r4, r5, lr}
 801cbfe:	4604      	mov	r4, r0
 801cc00:	6800      	ldr	r0, [r0, #0]
 801cc02:	b091      	sub	sp, #68	; 0x44
 801cc04:	b378      	cbz	r0, 801cc66 <rcl_action_take_feedback+0x6e>
 801cc06:	460d      	mov	r5, r1
 801cc08:	f7fe face 	bl	801b1a8 <rcl_client_is_valid>
 801cc0c:	b328      	cbz	r0, 801cc5a <rcl_action_take_feedback+0x62>
 801cc0e:	6820      	ldr	r0, [r4, #0]
 801cc10:	3004      	adds	r0, #4
 801cc12:	f7fe fac9 	bl	801b1a8 <rcl_client_is_valid>
 801cc16:	b300      	cbz	r0, 801cc5a <rcl_action_take_feedback+0x62>
 801cc18:	6820      	ldr	r0, [r4, #0]
 801cc1a:	3008      	adds	r0, #8
 801cc1c:	f7fe fac4 	bl	801b1a8 <rcl_client_is_valid>
 801cc20:	b1d8      	cbz	r0, 801cc5a <rcl_action_take_feedback+0x62>
 801cc22:	6820      	ldr	r0, [r4, #0]
 801cc24:	300c      	adds	r0, #12
 801cc26:	f7f7 f903 	bl	8013e30 <rcl_subscription_is_valid>
 801cc2a:	b1b0      	cbz	r0, 801cc5a <rcl_action_take_feedback+0x62>
 801cc2c:	6820      	ldr	r0, [r4, #0]
 801cc2e:	3010      	adds	r0, #16
 801cc30:	f7f7 f8fe 	bl	8013e30 <rcl_subscription_is_valid>
 801cc34:	b188      	cbz	r0, 801cc5a <rcl_action_take_feedback+0x62>
 801cc36:	b1ed      	cbz	r5, 801cc74 <rcl_action_take_feedback+0x7c>
 801cc38:	6820      	ldr	r0, [r4, #0]
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	466a      	mov	r2, sp
 801cc3e:	4629      	mov	r1, r5
 801cc40:	300c      	adds	r0, #12
 801cc42:	f7f7 f899 	bl	8013d78 <rcl_take>
 801cc46:	b160      	cbz	r0, 801cc62 <rcl_action_take_feedback+0x6a>
 801cc48:	f240 1391 	movw	r3, #401	; 0x191
 801cc4c:	4298      	cmp	r0, r3
 801cc4e:	d014      	beq.n	801cc7a <rcl_action_take_feedback+0x82>
 801cc50:	280a      	cmp	r0, #10
 801cc52:	bf18      	it	ne
 801cc54:	2001      	movne	r0, #1
 801cc56:	b011      	add	sp, #68	; 0x44
 801cc58:	bd30      	pop	{r4, r5, pc}
 801cc5a:	f7f8 f909 	bl	8014e70 <rcutils_reset_error>
 801cc5e:	f640 0036 	movw	r0, #2102	; 0x836
 801cc62:	b011      	add	sp, #68	; 0x44
 801cc64:	bd30      	pop	{r4, r5, pc}
 801cc66:	f640 0036 	movw	r0, #2102	; 0x836
 801cc6a:	b011      	add	sp, #68	; 0x44
 801cc6c:	bd30      	pop	{r4, r5, pc}
 801cc6e:	f640 0036 	movw	r0, #2102	; 0x836
 801cc72:	4770      	bx	lr
 801cc74:	200b      	movs	r0, #11
 801cc76:	b011      	add	sp, #68	; 0x44
 801cc78:	bd30      	pop	{r4, r5, pc}
 801cc7a:	f640 0037 	movw	r0, #2103	; 0x837
 801cc7e:	e7f0      	b.n	801cc62 <rcl_action_take_feedback+0x6a>

0801cc80 <rcl_action_wait_set_add_action_client>:
 801cc80:	2800      	cmp	r0, #0
 801cc82:	d048      	beq.n	801cd16 <rcl_action_wait_set_add_action_client+0x96>
 801cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc86:	460c      	mov	r4, r1
 801cc88:	2900      	cmp	r1, #0
 801cc8a:	d03c      	beq.n	801cd06 <rcl_action_wait_set_add_action_client+0x86>
 801cc8c:	4605      	mov	r5, r0
 801cc8e:	6808      	ldr	r0, [r1, #0]
 801cc90:	2800      	cmp	r0, #0
 801cc92:	d038      	beq.n	801cd06 <rcl_action_wait_set_add_action_client+0x86>
 801cc94:	4617      	mov	r7, r2
 801cc96:	461e      	mov	r6, r3
 801cc98:	f7fe fa86 	bl	801b1a8 <rcl_client_is_valid>
 801cc9c:	b3b0      	cbz	r0, 801cd0c <rcl_action_wait_set_add_action_client+0x8c>
 801cc9e:	6820      	ldr	r0, [r4, #0]
 801cca0:	3004      	adds	r0, #4
 801cca2:	f7fe fa81 	bl	801b1a8 <rcl_client_is_valid>
 801cca6:	b388      	cbz	r0, 801cd0c <rcl_action_wait_set_add_action_client+0x8c>
 801cca8:	6820      	ldr	r0, [r4, #0]
 801ccaa:	3008      	adds	r0, #8
 801ccac:	f7fe fa7c 	bl	801b1a8 <rcl_client_is_valid>
 801ccb0:	b360      	cbz	r0, 801cd0c <rcl_action_wait_set_add_action_client+0x8c>
 801ccb2:	6820      	ldr	r0, [r4, #0]
 801ccb4:	300c      	adds	r0, #12
 801ccb6:	f7f7 f8bb 	bl	8013e30 <rcl_subscription_is_valid>
 801ccba:	b338      	cbz	r0, 801cd0c <rcl_action_wait_set_add_action_client+0x8c>
 801ccbc:	6820      	ldr	r0, [r4, #0]
 801ccbe:	3010      	adds	r0, #16
 801ccc0:	f7f7 f8b6 	bl	8013e30 <rcl_subscription_is_valid>
 801ccc4:	b310      	cbz	r0, 801cd0c <rcl_action_wait_set_add_action_client+0x8c>
 801ccc6:	6821      	ldr	r1, [r4, #0]
 801ccc8:	4628      	mov	r0, r5
 801ccca:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801ccce:	f7ff fcd1 	bl	801c674 <rcl_wait_set_add_client>
 801ccd2:	b9b8      	cbnz	r0, 801cd04 <rcl_action_wait_set_add_action_client+0x84>
 801ccd4:	6821      	ldr	r1, [r4, #0]
 801ccd6:	4628      	mov	r0, r5
 801ccd8:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801ccdc:	3104      	adds	r1, #4
 801ccde:	f7ff fcc9 	bl	801c674 <rcl_wait_set_add_client>
 801cce2:	b978      	cbnz	r0, 801cd04 <rcl_action_wait_set_add_action_client+0x84>
 801cce4:	6821      	ldr	r1, [r4, #0]
 801cce6:	4628      	mov	r0, r5
 801cce8:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801ccec:	3108      	adds	r1, #8
 801ccee:	f7ff fcc1 	bl	801c674 <rcl_wait_set_add_client>
 801ccf2:	b938      	cbnz	r0, 801cd04 <rcl_action_wait_set_add_action_client+0x84>
 801ccf4:	6821      	ldr	r1, [r4, #0]
 801ccf6:	4628      	mov	r0, r5
 801ccf8:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801ccfc:	310c      	adds	r1, #12
 801ccfe:	f7ff f969 	bl	801bfd4 <rcl_wait_set_add_subscription>
 801cd02:	b158      	cbz	r0, 801cd1c <rcl_action_wait_set_add_action_client+0x9c>
 801cd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd06:	f640 0036 	movw	r0, #2102	; 0x836
 801cd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd0c:	f7f8 f8b0 	bl	8014e70 <rcutils_reset_error>
 801cd10:	f640 0036 	movw	r0, #2102	; 0x836
 801cd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd16:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cd1a:	4770      	bx	lr
 801cd1c:	6821      	ldr	r1, [r4, #0]
 801cd1e:	4628      	mov	r0, r5
 801cd20:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801cd24:	3110      	adds	r1, #16
 801cd26:	f7ff f955 	bl	801bfd4 <rcl_wait_set_add_subscription>
 801cd2a:	2800      	cmp	r0, #0
 801cd2c:	d1ea      	bne.n	801cd04 <rcl_action_wait_set_add_action_client+0x84>
 801cd2e:	b11f      	cbz	r7, 801cd38 <rcl_action_wait_set_add_action_client+0xb8>
 801cd30:	6823      	ldr	r3, [r4, #0]
 801cd32:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801cd36:	603b      	str	r3, [r7, #0]
 801cd38:	2e00      	cmp	r6, #0
 801cd3a:	d0e3      	beq.n	801cd04 <rcl_action_wait_set_add_action_client+0x84>
 801cd3c:	6823      	ldr	r3, [r4, #0]
 801cd3e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801cd42:	6033      	str	r3, [r6, #0]
 801cd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd46:	bf00      	nop

0801cd48 <rcl_action_client_wait_set_get_entities_ready>:
 801cd48:	2800      	cmp	r0, #0
 801cd4a:	d050      	beq.n	801cdee <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801cd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd50:	460c      	mov	r4, r1
 801cd52:	2900      	cmp	r1, #0
 801cd54:	d03e      	beq.n	801cdd4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cd56:	4605      	mov	r5, r0
 801cd58:	6808      	ldr	r0, [r1, #0]
 801cd5a:	2800      	cmp	r0, #0
 801cd5c:	d03a      	beq.n	801cdd4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801cd5e:	4616      	mov	r6, r2
 801cd60:	461f      	mov	r7, r3
 801cd62:	f7fe fa21 	bl	801b1a8 <rcl_client_is_valid>
 801cd66:	2800      	cmp	r0, #0
 801cd68:	d038      	beq.n	801cddc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cd6a:	6820      	ldr	r0, [r4, #0]
 801cd6c:	3004      	adds	r0, #4
 801cd6e:	f7fe fa1b 	bl	801b1a8 <rcl_client_is_valid>
 801cd72:	2800      	cmp	r0, #0
 801cd74:	d032      	beq.n	801cddc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cd76:	6820      	ldr	r0, [r4, #0]
 801cd78:	3008      	adds	r0, #8
 801cd7a:	f7fe fa15 	bl	801b1a8 <rcl_client_is_valid>
 801cd7e:	b368      	cbz	r0, 801cddc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cd80:	6820      	ldr	r0, [r4, #0]
 801cd82:	300c      	adds	r0, #12
 801cd84:	f7f7 f854 	bl	8013e30 <rcl_subscription_is_valid>
 801cd88:	b340      	cbz	r0, 801cddc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cd8a:	6820      	ldr	r0, [r4, #0]
 801cd8c:	3010      	adds	r0, #16
 801cd8e:	f7f7 f84f 	bl	8013e30 <rcl_subscription_is_valid>
 801cd92:	b318      	cbz	r0, 801cddc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801cd94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cd98:	2a00      	cmp	r2, #0
 801cd9a:	bf18      	it	ne
 801cd9c:	2b00      	cmpne	r3, #0
 801cd9e:	9b08      	ldr	r3, [sp, #32]
 801cda0:	bf0c      	ite	eq
 801cda2:	2101      	moveq	r1, #1
 801cda4:	2100      	movne	r1, #0
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	bf08      	it	eq
 801cdaa:	f041 0101 	orreq.w	r1, r1, #1
 801cdae:	2f00      	cmp	r7, #0
 801cdb0:	bf08      	it	eq
 801cdb2:	f041 0101 	orreq.w	r1, r1, #1
 801cdb6:	b9b9      	cbnz	r1, 801cde8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801cdb8:	b1b6      	cbz	r6, 801cde8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801cdba:	6823      	ldr	r3, [r4, #0]
 801cdbc:	686c      	ldr	r4, [r5, #4]
 801cdbe:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801cdc2:	428a      	cmp	r2, r1
 801cdc4:	4610      	mov	r0, r2
 801cdc6:	bf38      	it	cc
 801cdc8:	4608      	movcc	r0, r1
 801cdca:	4284      	cmp	r4, r0
 801cdcc:	d812      	bhi.n	801cdf4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801cdce:	2001      	movs	r0, #1
 801cdd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdd4:	f640 0036 	movw	r0, #2102	; 0x836
 801cdd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cddc:	f7f8 f848 	bl	8014e70 <rcutils_reset_error>
 801cde0:	f640 0036 	movw	r0, #2102	; 0x836
 801cde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cde8:	200b      	movs	r0, #11
 801cdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdee:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cdf2:	4770      	bx	lr
 801cdf4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801cdf8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801cdfc:	45f0      	cmp	r8, lr
 801cdfe:	4640      	mov	r0, r8
 801ce00:	69ec      	ldr	r4, [r5, #28]
 801ce02:	bf38      	it	cc
 801ce04:	4670      	movcc	r0, lr
 801ce06:	4560      	cmp	r0, ip
 801ce08:	bf38      	it	cc
 801ce0a:	4660      	movcc	r0, ip
 801ce0c:	4284      	cmp	r4, r0
 801ce0e:	d9de      	bls.n	801cdce <rcl_action_client_wait_set_get_entities_ready+0x86>
 801ce10:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801ce14:	682d      	ldr	r5, [r5, #0]
 801ce16:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801ce1a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801ce1e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ce22:	1a18      	subs	r0, r3, r0
 801ce24:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801ce28:	f103 0c0c 	add.w	ip, r3, #12
 801ce2c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801ce30:	fab0 f080 	clz	r0, r0
 801ce34:	eba5 050c 	sub.w	r5, r5, ip
 801ce38:	0940      	lsrs	r0, r0, #5
 801ce3a:	fab5 f585 	clz	r5, r5
 801ce3e:	096d      	lsrs	r5, r5, #5
 801ce40:	7035      	strb	r5, [r6, #0]
 801ce42:	f103 0510 	add.w	r5, r3, #16
 801ce46:	1b64      	subs	r4, r4, r5
 801ce48:	9d08      	ldr	r5, [sp, #32]
 801ce4a:	fab4 f484 	clz	r4, r4
 801ce4e:	0964      	lsrs	r4, r4, #5
 801ce50:	703c      	strb	r4, [r7, #0]
 801ce52:	1d1c      	adds	r4, r3, #4
 801ce54:	3308      	adds	r3, #8
 801ce56:	7028      	strb	r0, [r5, #0]
 801ce58:	1b09      	subs	r1, r1, r4
 801ce5a:	2000      	movs	r0, #0
 801ce5c:	1ad3      	subs	r3, r2, r3
 801ce5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce60:	fab1 f181 	clz	r1, r1
 801ce64:	fab3 f383 	clz	r3, r3
 801ce68:	0949      	lsrs	r1, r1, #5
 801ce6a:	095b      	lsrs	r3, r3, #5
 801ce6c:	7011      	strb	r1, [r2, #0]
 801ce6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ce70:	7013      	strb	r3, [r2, #0]
 801ce72:	e7b1      	b.n	801cdd8 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801ce74 <rcl_action_take_goal_request>:
 801ce74:	2800      	cmp	r0, #0
 801ce76:	d039      	beq.n	801ceec <rcl_action_take_goal_request+0x78>
 801ce78:	b570      	push	{r4, r5, r6, lr}
 801ce7a:	4604      	mov	r4, r0
 801ce7c:	6800      	ldr	r0, [r0, #0]
 801ce7e:	b380      	cbz	r0, 801cee2 <rcl_action_take_goal_request+0x6e>
 801ce80:	460e      	mov	r6, r1
 801ce82:	4615      	mov	r5, r2
 801ce84:	f7f6 fe8c 	bl	8013ba0 <rcl_service_is_valid>
 801ce88:	b330      	cbz	r0, 801ced8 <rcl_action_take_goal_request+0x64>
 801ce8a:	6820      	ldr	r0, [r4, #0]
 801ce8c:	3004      	adds	r0, #4
 801ce8e:	f7f6 fe87 	bl	8013ba0 <rcl_service_is_valid>
 801ce92:	b308      	cbz	r0, 801ced8 <rcl_action_take_goal_request+0x64>
 801ce94:	6820      	ldr	r0, [r4, #0]
 801ce96:	3008      	adds	r0, #8
 801ce98:	f7f6 fe82 	bl	8013ba0 <rcl_service_is_valid>
 801ce9c:	b1e0      	cbz	r0, 801ced8 <rcl_action_take_goal_request+0x64>
 801ce9e:	6820      	ldr	r0, [r4, #0]
 801cea0:	300c      	adds	r0, #12
 801cea2:	f7f6 fd41 	bl	8013928 <rcl_publisher_is_valid>
 801cea6:	b1b8      	cbz	r0, 801ced8 <rcl_action_take_goal_request+0x64>
 801cea8:	6820      	ldr	r0, [r4, #0]
 801ceaa:	3010      	adds	r0, #16
 801ceac:	f7f6 fd3c 	bl	8013928 <rcl_publisher_is_valid>
 801ceb0:	b190      	cbz	r0, 801ced8 <rcl_action_take_goal_request+0x64>
 801ceb2:	b1cd      	cbz	r5, 801cee8 <rcl_action_take_goal_request+0x74>
 801ceb4:	b1c6      	cbz	r6, 801cee8 <rcl_action_take_goal_request+0x74>
 801ceb6:	462a      	mov	r2, r5
 801ceb8:	4631      	mov	r1, r6
 801ceba:	6820      	ldr	r0, [r4, #0]
 801cebc:	f7f6 fe18 	bl	8013af0 <rcl_take_request>
 801cec0:	b148      	cbz	r0, 801ced6 <rcl_action_take_goal_request+0x62>
 801cec2:	280a      	cmp	r0, #10
 801cec4:	d007      	beq.n	801ced6 <rcl_action_take_goal_request+0x62>
 801cec6:	f240 2259 	movw	r2, #601	; 0x259
 801ceca:	f640 0399 	movw	r3, #2201	; 0x899
 801cece:	4290      	cmp	r0, r2
 801ced0:	bf0c      	ite	eq
 801ced2:	4618      	moveq	r0, r3
 801ced4:	2001      	movne	r0, #1
 801ced6:	bd70      	pop	{r4, r5, r6, pc}
 801ced8:	f7f7 ffca 	bl	8014e70 <rcutils_reset_error>
 801cedc:	f640 0098 	movw	r0, #2200	; 0x898
 801cee0:	bd70      	pop	{r4, r5, r6, pc}
 801cee2:	f640 0098 	movw	r0, #2200	; 0x898
 801cee6:	bd70      	pop	{r4, r5, r6, pc}
 801cee8:	200b      	movs	r0, #11
 801ceea:	bd70      	pop	{r4, r5, r6, pc}
 801ceec:	f640 0098 	movw	r0, #2200	; 0x898
 801cef0:	4770      	bx	lr
 801cef2:	bf00      	nop

0801cef4 <rcl_action_send_goal_response>:
 801cef4:	b388      	cbz	r0, 801cf5a <rcl_action_send_goal_response+0x66>
 801cef6:	b570      	push	{r4, r5, r6, lr}
 801cef8:	4604      	mov	r4, r0
 801cefa:	6800      	ldr	r0, [r0, #0]
 801cefc:	b340      	cbz	r0, 801cf50 <rcl_action_send_goal_response+0x5c>
 801cefe:	460e      	mov	r6, r1
 801cf00:	4615      	mov	r5, r2
 801cf02:	f7f6 fe4d 	bl	8013ba0 <rcl_service_is_valid>
 801cf06:	b1f0      	cbz	r0, 801cf46 <rcl_action_send_goal_response+0x52>
 801cf08:	6820      	ldr	r0, [r4, #0]
 801cf0a:	3004      	adds	r0, #4
 801cf0c:	f7f6 fe48 	bl	8013ba0 <rcl_service_is_valid>
 801cf10:	b1c8      	cbz	r0, 801cf46 <rcl_action_send_goal_response+0x52>
 801cf12:	6820      	ldr	r0, [r4, #0]
 801cf14:	3008      	adds	r0, #8
 801cf16:	f7f6 fe43 	bl	8013ba0 <rcl_service_is_valid>
 801cf1a:	b1a0      	cbz	r0, 801cf46 <rcl_action_send_goal_response+0x52>
 801cf1c:	6820      	ldr	r0, [r4, #0]
 801cf1e:	300c      	adds	r0, #12
 801cf20:	f7f6 fd02 	bl	8013928 <rcl_publisher_is_valid>
 801cf24:	b178      	cbz	r0, 801cf46 <rcl_action_send_goal_response+0x52>
 801cf26:	6820      	ldr	r0, [r4, #0]
 801cf28:	3010      	adds	r0, #16
 801cf2a:	f7f6 fcfd 	bl	8013928 <rcl_publisher_is_valid>
 801cf2e:	b150      	cbz	r0, 801cf46 <rcl_action_send_goal_response+0x52>
 801cf30:	b18d      	cbz	r5, 801cf56 <rcl_action_send_goal_response+0x62>
 801cf32:	b186      	cbz	r6, 801cf56 <rcl_action_send_goal_response+0x62>
 801cf34:	462a      	mov	r2, r5
 801cf36:	4631      	mov	r1, r6
 801cf38:	6820      	ldr	r0, [r4, #0]
 801cf3a:	f7f6 fe19 	bl	8013b70 <rcl_send_response>
 801cf3e:	3800      	subs	r0, #0
 801cf40:	bf18      	it	ne
 801cf42:	2001      	movne	r0, #1
 801cf44:	bd70      	pop	{r4, r5, r6, pc}
 801cf46:	f7f7 ff93 	bl	8014e70 <rcutils_reset_error>
 801cf4a:	f640 0098 	movw	r0, #2200	; 0x898
 801cf4e:	bd70      	pop	{r4, r5, r6, pc}
 801cf50:	f640 0098 	movw	r0, #2200	; 0x898
 801cf54:	bd70      	pop	{r4, r5, r6, pc}
 801cf56:	200b      	movs	r0, #11
 801cf58:	bd70      	pop	{r4, r5, r6, pc}
 801cf5a:	f640 0098 	movw	r0, #2200	; 0x898
 801cf5e:	4770      	bx	lr

0801cf60 <rcl_action_take_result_request>:
 801cf60:	2800      	cmp	r0, #0
 801cf62:	d03a      	beq.n	801cfda <rcl_action_take_result_request+0x7a>
 801cf64:	b570      	push	{r4, r5, r6, lr}
 801cf66:	4604      	mov	r4, r0
 801cf68:	6800      	ldr	r0, [r0, #0]
 801cf6a:	b388      	cbz	r0, 801cfd0 <rcl_action_take_result_request+0x70>
 801cf6c:	460e      	mov	r6, r1
 801cf6e:	4615      	mov	r5, r2
 801cf70:	f7f6 fe16 	bl	8013ba0 <rcl_service_is_valid>
 801cf74:	b338      	cbz	r0, 801cfc6 <rcl_action_take_result_request+0x66>
 801cf76:	6820      	ldr	r0, [r4, #0]
 801cf78:	3004      	adds	r0, #4
 801cf7a:	f7f6 fe11 	bl	8013ba0 <rcl_service_is_valid>
 801cf7e:	b310      	cbz	r0, 801cfc6 <rcl_action_take_result_request+0x66>
 801cf80:	6820      	ldr	r0, [r4, #0]
 801cf82:	3008      	adds	r0, #8
 801cf84:	f7f6 fe0c 	bl	8013ba0 <rcl_service_is_valid>
 801cf88:	b1e8      	cbz	r0, 801cfc6 <rcl_action_take_result_request+0x66>
 801cf8a:	6820      	ldr	r0, [r4, #0]
 801cf8c:	300c      	adds	r0, #12
 801cf8e:	f7f6 fccb 	bl	8013928 <rcl_publisher_is_valid>
 801cf92:	b1c0      	cbz	r0, 801cfc6 <rcl_action_take_result_request+0x66>
 801cf94:	6820      	ldr	r0, [r4, #0]
 801cf96:	3010      	adds	r0, #16
 801cf98:	f7f6 fcc6 	bl	8013928 <rcl_publisher_is_valid>
 801cf9c:	b198      	cbz	r0, 801cfc6 <rcl_action_take_result_request+0x66>
 801cf9e:	b1d5      	cbz	r5, 801cfd6 <rcl_action_take_result_request+0x76>
 801cfa0:	b1ce      	cbz	r6, 801cfd6 <rcl_action_take_result_request+0x76>
 801cfa2:	6820      	ldr	r0, [r4, #0]
 801cfa4:	462a      	mov	r2, r5
 801cfa6:	4631      	mov	r1, r6
 801cfa8:	3008      	adds	r0, #8
 801cfaa:	f7f6 fda1 	bl	8013af0 <rcl_take_request>
 801cfae:	b148      	cbz	r0, 801cfc4 <rcl_action_take_result_request+0x64>
 801cfb0:	280a      	cmp	r0, #10
 801cfb2:	d007      	beq.n	801cfc4 <rcl_action_take_result_request+0x64>
 801cfb4:	f240 2259 	movw	r2, #601	; 0x259
 801cfb8:	f640 0399 	movw	r3, #2201	; 0x899
 801cfbc:	4290      	cmp	r0, r2
 801cfbe:	bf0c      	ite	eq
 801cfc0:	4618      	moveq	r0, r3
 801cfc2:	2001      	movne	r0, #1
 801cfc4:	bd70      	pop	{r4, r5, r6, pc}
 801cfc6:	f7f7 ff53 	bl	8014e70 <rcutils_reset_error>
 801cfca:	f640 0098 	movw	r0, #2200	; 0x898
 801cfce:	bd70      	pop	{r4, r5, r6, pc}
 801cfd0:	f640 0098 	movw	r0, #2200	; 0x898
 801cfd4:	bd70      	pop	{r4, r5, r6, pc}
 801cfd6:	200b      	movs	r0, #11
 801cfd8:	bd70      	pop	{r4, r5, r6, pc}
 801cfda:	f640 0098 	movw	r0, #2200	; 0x898
 801cfde:	4770      	bx	lr

0801cfe0 <rcl_action_take_cancel_request>:
 801cfe0:	2800      	cmp	r0, #0
 801cfe2:	d03a      	beq.n	801d05a <rcl_action_take_cancel_request+0x7a>
 801cfe4:	b570      	push	{r4, r5, r6, lr}
 801cfe6:	4604      	mov	r4, r0
 801cfe8:	6800      	ldr	r0, [r0, #0]
 801cfea:	b388      	cbz	r0, 801d050 <rcl_action_take_cancel_request+0x70>
 801cfec:	460e      	mov	r6, r1
 801cfee:	4615      	mov	r5, r2
 801cff0:	f7f6 fdd6 	bl	8013ba0 <rcl_service_is_valid>
 801cff4:	b338      	cbz	r0, 801d046 <rcl_action_take_cancel_request+0x66>
 801cff6:	6820      	ldr	r0, [r4, #0]
 801cff8:	3004      	adds	r0, #4
 801cffa:	f7f6 fdd1 	bl	8013ba0 <rcl_service_is_valid>
 801cffe:	b310      	cbz	r0, 801d046 <rcl_action_take_cancel_request+0x66>
 801d000:	6820      	ldr	r0, [r4, #0]
 801d002:	3008      	adds	r0, #8
 801d004:	f7f6 fdcc 	bl	8013ba0 <rcl_service_is_valid>
 801d008:	b1e8      	cbz	r0, 801d046 <rcl_action_take_cancel_request+0x66>
 801d00a:	6820      	ldr	r0, [r4, #0]
 801d00c:	300c      	adds	r0, #12
 801d00e:	f7f6 fc8b 	bl	8013928 <rcl_publisher_is_valid>
 801d012:	b1c0      	cbz	r0, 801d046 <rcl_action_take_cancel_request+0x66>
 801d014:	6820      	ldr	r0, [r4, #0]
 801d016:	3010      	adds	r0, #16
 801d018:	f7f6 fc86 	bl	8013928 <rcl_publisher_is_valid>
 801d01c:	b198      	cbz	r0, 801d046 <rcl_action_take_cancel_request+0x66>
 801d01e:	b1d5      	cbz	r5, 801d056 <rcl_action_take_cancel_request+0x76>
 801d020:	b1ce      	cbz	r6, 801d056 <rcl_action_take_cancel_request+0x76>
 801d022:	6820      	ldr	r0, [r4, #0]
 801d024:	462a      	mov	r2, r5
 801d026:	4631      	mov	r1, r6
 801d028:	3004      	adds	r0, #4
 801d02a:	f7f6 fd61 	bl	8013af0 <rcl_take_request>
 801d02e:	b148      	cbz	r0, 801d044 <rcl_action_take_cancel_request+0x64>
 801d030:	280a      	cmp	r0, #10
 801d032:	d007      	beq.n	801d044 <rcl_action_take_cancel_request+0x64>
 801d034:	f240 2259 	movw	r2, #601	; 0x259
 801d038:	f640 0399 	movw	r3, #2201	; 0x899
 801d03c:	4290      	cmp	r0, r2
 801d03e:	bf0c      	ite	eq
 801d040:	4618      	moveq	r0, r3
 801d042:	2001      	movne	r0, #1
 801d044:	bd70      	pop	{r4, r5, r6, pc}
 801d046:	f7f7 ff13 	bl	8014e70 <rcutils_reset_error>
 801d04a:	f640 0098 	movw	r0, #2200	; 0x898
 801d04e:	bd70      	pop	{r4, r5, r6, pc}
 801d050:	f640 0098 	movw	r0, #2200	; 0x898
 801d054:	bd70      	pop	{r4, r5, r6, pc}
 801d056:	200b      	movs	r0, #11
 801d058:	bd70      	pop	{r4, r5, r6, pc}
 801d05a:	f640 0098 	movw	r0, #2200	; 0x898
 801d05e:	4770      	bx	lr

0801d060 <rcl_action_send_cancel_response>:
 801d060:	b390      	cbz	r0, 801d0c8 <rcl_action_send_cancel_response+0x68>
 801d062:	b570      	push	{r4, r5, r6, lr}
 801d064:	4604      	mov	r4, r0
 801d066:	6800      	ldr	r0, [r0, #0]
 801d068:	b348      	cbz	r0, 801d0be <rcl_action_send_cancel_response+0x5e>
 801d06a:	460e      	mov	r6, r1
 801d06c:	4615      	mov	r5, r2
 801d06e:	f7f6 fd97 	bl	8013ba0 <rcl_service_is_valid>
 801d072:	b1f8      	cbz	r0, 801d0b4 <rcl_action_send_cancel_response+0x54>
 801d074:	6820      	ldr	r0, [r4, #0]
 801d076:	3004      	adds	r0, #4
 801d078:	f7f6 fd92 	bl	8013ba0 <rcl_service_is_valid>
 801d07c:	b1d0      	cbz	r0, 801d0b4 <rcl_action_send_cancel_response+0x54>
 801d07e:	6820      	ldr	r0, [r4, #0]
 801d080:	3008      	adds	r0, #8
 801d082:	f7f6 fd8d 	bl	8013ba0 <rcl_service_is_valid>
 801d086:	b1a8      	cbz	r0, 801d0b4 <rcl_action_send_cancel_response+0x54>
 801d088:	6820      	ldr	r0, [r4, #0]
 801d08a:	300c      	adds	r0, #12
 801d08c:	f7f6 fc4c 	bl	8013928 <rcl_publisher_is_valid>
 801d090:	b180      	cbz	r0, 801d0b4 <rcl_action_send_cancel_response+0x54>
 801d092:	6820      	ldr	r0, [r4, #0]
 801d094:	3010      	adds	r0, #16
 801d096:	f7f6 fc47 	bl	8013928 <rcl_publisher_is_valid>
 801d09a:	b158      	cbz	r0, 801d0b4 <rcl_action_send_cancel_response+0x54>
 801d09c:	b195      	cbz	r5, 801d0c4 <rcl_action_send_cancel_response+0x64>
 801d09e:	b18e      	cbz	r6, 801d0c4 <rcl_action_send_cancel_response+0x64>
 801d0a0:	6820      	ldr	r0, [r4, #0]
 801d0a2:	462a      	mov	r2, r5
 801d0a4:	4631      	mov	r1, r6
 801d0a6:	3004      	adds	r0, #4
 801d0a8:	f7f6 fd62 	bl	8013b70 <rcl_send_response>
 801d0ac:	3800      	subs	r0, #0
 801d0ae:	bf18      	it	ne
 801d0b0:	2001      	movne	r0, #1
 801d0b2:	bd70      	pop	{r4, r5, r6, pc}
 801d0b4:	f7f7 fedc 	bl	8014e70 <rcutils_reset_error>
 801d0b8:	f640 0098 	movw	r0, #2200	; 0x898
 801d0bc:	bd70      	pop	{r4, r5, r6, pc}
 801d0be:	f640 0098 	movw	r0, #2200	; 0x898
 801d0c2:	bd70      	pop	{r4, r5, r6, pc}
 801d0c4:	200b      	movs	r0, #11
 801d0c6:	bd70      	pop	{r4, r5, r6, pc}
 801d0c8:	f640 0098 	movw	r0, #2200	; 0x898
 801d0cc:	4770      	bx	lr
 801d0ce:	bf00      	nop

0801d0d0 <rcl_action_wait_set_add_action_server>:
 801d0d0:	2800      	cmp	r0, #0
 801d0d2:	d04d      	beq.n	801d170 <rcl_action_wait_set_add_action_server+0xa0>
 801d0d4:	b570      	push	{r4, r5, r6, lr}
 801d0d6:	460c      	mov	r4, r1
 801d0d8:	b159      	cbz	r1, 801d0f2 <rcl_action_wait_set_add_action_server+0x22>
 801d0da:	4605      	mov	r5, r0
 801d0dc:	6808      	ldr	r0, [r1, #0]
 801d0de:	b140      	cbz	r0, 801d0f2 <rcl_action_wait_set_add_action_server+0x22>
 801d0e0:	4616      	mov	r6, r2
 801d0e2:	f7f6 fd5d 	bl	8013ba0 <rcl_service_is_valid>
 801d0e6:	b120      	cbz	r0, 801d0f2 <rcl_action_wait_set_add_action_server+0x22>
 801d0e8:	6820      	ldr	r0, [r4, #0]
 801d0ea:	3004      	adds	r0, #4
 801d0ec:	f7f6 fd58 	bl	8013ba0 <rcl_service_is_valid>
 801d0f0:	b910      	cbnz	r0, 801d0f8 <rcl_action_wait_set_add_action_server+0x28>
 801d0f2:	f640 0098 	movw	r0, #2200	; 0x898
 801d0f6:	bd70      	pop	{r4, r5, r6, pc}
 801d0f8:	6820      	ldr	r0, [r4, #0]
 801d0fa:	3008      	adds	r0, #8
 801d0fc:	f7f6 fd50 	bl	8013ba0 <rcl_service_is_valid>
 801d100:	2800      	cmp	r0, #0
 801d102:	d0f6      	beq.n	801d0f2 <rcl_action_wait_set_add_action_server+0x22>
 801d104:	6820      	ldr	r0, [r4, #0]
 801d106:	300c      	adds	r0, #12
 801d108:	f7f6 fc26 	bl	8013958 <rcl_publisher_is_valid_except_context>
 801d10c:	2800      	cmp	r0, #0
 801d10e:	d0f0      	beq.n	801d0f2 <rcl_action_wait_set_add_action_server+0x22>
 801d110:	6820      	ldr	r0, [r4, #0]
 801d112:	3010      	adds	r0, #16
 801d114:	f7f6 fc20 	bl	8013958 <rcl_publisher_is_valid_except_context>
 801d118:	2800      	cmp	r0, #0
 801d11a:	d0ea      	beq.n	801d0f2 <rcl_action_wait_set_add_action_server+0x22>
 801d11c:	6821      	ldr	r1, [r4, #0]
 801d11e:	4628      	mov	r0, r5
 801d120:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d124:	f7ff fad2 	bl	801c6cc <rcl_wait_set_add_service>
 801d128:	2800      	cmp	r0, #0
 801d12a:	d1e4      	bne.n	801d0f6 <rcl_action_wait_set_add_action_server+0x26>
 801d12c:	6821      	ldr	r1, [r4, #0]
 801d12e:	4628      	mov	r0, r5
 801d130:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d134:	3104      	adds	r1, #4
 801d136:	f7ff fac9 	bl	801c6cc <rcl_wait_set_add_service>
 801d13a:	2800      	cmp	r0, #0
 801d13c:	d1db      	bne.n	801d0f6 <rcl_action_wait_set_add_action_server+0x26>
 801d13e:	6821      	ldr	r1, [r4, #0]
 801d140:	4628      	mov	r0, r5
 801d142:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d146:	3108      	adds	r1, #8
 801d148:	f7ff fac0 	bl	801c6cc <rcl_wait_set_add_service>
 801d14c:	2800      	cmp	r0, #0
 801d14e:	d1d2      	bne.n	801d0f6 <rcl_action_wait_set_add_action_server+0x26>
 801d150:	6821      	ldr	r1, [r4, #0]
 801d152:	4628      	mov	r0, r5
 801d154:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d158:	3114      	adds	r1, #20
 801d15a:	f7ff fa5b 	bl	801c614 <rcl_wait_set_add_timer>
 801d15e:	2800      	cmp	r0, #0
 801d160:	d1c9      	bne.n	801d0f6 <rcl_action_wait_set_add_action_server+0x26>
 801d162:	2e00      	cmp	r6, #0
 801d164:	d0c7      	beq.n	801d0f6 <rcl_action_wait_set_add_action_server+0x26>
 801d166:	6823      	ldr	r3, [r4, #0]
 801d168:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d16c:	6033      	str	r3, [r6, #0]
 801d16e:	bd70      	pop	{r4, r5, r6, pc}
 801d170:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d174:	4770      	bx	lr
 801d176:	bf00      	nop

0801d178 <rcl_action_server_wait_set_get_entities_ready>:
 801d178:	2800      	cmp	r0, #0
 801d17a:	d067      	beq.n	801d24c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d180:	460c      	mov	r4, r1
 801d182:	b161      	cbz	r1, 801d19e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d184:	4605      	mov	r5, r0
 801d186:	6808      	ldr	r0, [r1, #0]
 801d188:	b148      	cbz	r0, 801d19e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d18a:	4616      	mov	r6, r2
 801d18c:	4698      	mov	r8, r3
 801d18e:	f7f6 fd07 	bl	8013ba0 <rcl_service_is_valid>
 801d192:	b120      	cbz	r0, 801d19e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d194:	6820      	ldr	r0, [r4, #0]
 801d196:	3004      	adds	r0, #4
 801d198:	f7f6 fd02 	bl	8013ba0 <rcl_service_is_valid>
 801d19c:	b918      	cbnz	r0, 801d1a6 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d19e:	f640 0098 	movw	r0, #2200	; 0x898
 801d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1a6:	6820      	ldr	r0, [r4, #0]
 801d1a8:	3008      	adds	r0, #8
 801d1aa:	f7f6 fcf9 	bl	8013ba0 <rcl_service_is_valid>
 801d1ae:	2800      	cmp	r0, #0
 801d1b0:	d0f5      	beq.n	801d19e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d1b2:	6820      	ldr	r0, [r4, #0]
 801d1b4:	300c      	adds	r0, #12
 801d1b6:	f7f6 fbcf 	bl	8013958 <rcl_publisher_is_valid_except_context>
 801d1ba:	2800      	cmp	r0, #0
 801d1bc:	d0ef      	beq.n	801d19e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d1be:	6820      	ldr	r0, [r4, #0]
 801d1c0:	3010      	adds	r0, #16
 801d1c2:	f7f6 fbc9 	bl	8013958 <rcl_publisher_is_valid_except_context>
 801d1c6:	2800      	cmp	r0, #0
 801d1c8:	d0e9      	beq.n	801d19e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d1ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d1ce:	2a00      	cmp	r2, #0
 801d1d0:	bf18      	it	ne
 801d1d2:	2b00      	cmpne	r3, #0
 801d1d4:	bf0c      	ite	eq
 801d1d6:	2101      	moveq	r1, #1
 801d1d8:	2100      	movne	r1, #0
 801d1da:	f1b8 0f00 	cmp.w	r8, #0
 801d1de:	bf08      	it	eq
 801d1e0:	f041 0101 	orreq.w	r1, r1, #1
 801d1e4:	bba9      	cbnz	r1, 801d252 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d1e6:	b3a6      	cbz	r6, 801d252 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d1e8:	6821      	ldr	r1, [r4, #0]
 801d1ea:	2000      	movs	r0, #0
 801d1ec:	692c      	ldr	r4, [r5, #16]
 801d1ee:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d1f2:	6a2f      	ldr	r7, [r5, #32]
 801d1f4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d1f8:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d1fc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d200:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d204:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d208:	1a64      	subs	r4, r4, r1
 801d20a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d20e:	fab4 f484 	clz	r4, r4
 801d212:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d216:	0964      	lsrs	r4, r4, #5
 801d218:	7034      	strb	r4, [r6, #0]
 801d21a:	1d0c      	adds	r4, r1, #4
 801d21c:	1b2c      	subs	r4, r5, r4
 801d21e:	fab4 f484 	clz	r4, r4
 801d222:	0964      	lsrs	r4, r4, #5
 801d224:	f888 4000 	strb.w	r4, [r8]
 801d228:	f101 0408 	add.w	r4, r1, #8
 801d22c:	1b1b      	subs	r3, r3, r4
 801d22e:	9c06      	ldr	r4, [sp, #24]
 801d230:	fab3 f383 	clz	r3, r3
 801d234:	095b      	lsrs	r3, r3, #5
 801d236:	7023      	strb	r3, [r4, #0]
 801d238:	f101 0314 	add.w	r3, r1, #20
 801d23c:	1ad3      	subs	r3, r2, r3
 801d23e:	9a07      	ldr	r2, [sp, #28]
 801d240:	fab3 f383 	clz	r3, r3
 801d244:	095b      	lsrs	r3, r3, #5
 801d246:	7013      	strb	r3, [r2, #0]
 801d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d24c:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d250:	4770      	bx	lr
 801d252:	200b      	movs	r0, #11
 801d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d258 <_execute_event_handler>:
 801d258:	2002      	movs	r0, #2
 801d25a:	4770      	bx	lr

0801d25c <_cancel_goal_event_handler>:
 801d25c:	2003      	movs	r0, #3
 801d25e:	4770      	bx	lr

0801d260 <_succeed_event_handler>:
 801d260:	2004      	movs	r0, #4
 801d262:	4770      	bx	lr

0801d264 <_abort_event_handler>:
 801d264:	2006      	movs	r0, #6
 801d266:	4770      	bx	lr

0801d268 <_canceled_event_handler>:
 801d268:	2005      	movs	r0, #5
 801d26a:	4770      	bx	lr

0801d26c <rcl_action_transition_goal_state>:
 801d26c:	b2c2      	uxtb	r2, r0
 801d26e:	2a06      	cmp	r2, #6
 801d270:	d810      	bhi.n	801d294 <rcl_action_transition_goal_state+0x28>
 801d272:	2904      	cmp	r1, #4
 801d274:	d80e      	bhi.n	801d294 <rcl_action_transition_goal_state+0x28>
 801d276:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d27a:	b410      	push	{r4}
 801d27c:	1853      	adds	r3, r2, r1
 801d27e:	4c06      	ldr	r4, [pc, #24]	; (801d298 <rcl_action_transition_goal_state+0x2c>)
 801d280:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d284:	b113      	cbz	r3, 801d28c <rcl_action_transition_goal_state+0x20>
 801d286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d28a:	4718      	bx	r3
 801d28c:	2000      	movs	r0, #0
 801d28e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d292:	4770      	bx	lr
 801d294:	2000      	movs	r0, #0
 801d296:	4770      	bx	lr
 801d298:	0802575c 	.word	0x0802575c

0801d29c <rcl_action_get_zero_initialized_cancel_response>:
 801d29c:	b510      	push	{r4, lr}
 801d29e:	4c07      	ldr	r4, [pc, #28]	; (801d2bc <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d2a0:	4686      	mov	lr, r0
 801d2a2:	4684      	mov	ip, r0
 801d2a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d2a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d2aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d2ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d2b0:	6823      	ldr	r3, [r4, #0]
 801d2b2:	4670      	mov	r0, lr
 801d2b4:	f8cc 3000 	str.w	r3, [ip]
 801d2b8:	bd10      	pop	{r4, pc}
 801d2ba:	bf00      	nop
 801d2bc:	080257e8 	.word	0x080257e8

0801d2c0 <rclc_action_send_result_request>:
 801d2c0:	b1d0      	cbz	r0, 801d2f8 <rclc_action_send_result_request+0x38>
 801d2c2:	4684      	mov	ip, r0
 801d2c4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d2c8:	b500      	push	{lr}
 801d2ca:	b087      	sub	sp, #28
 801d2cc:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d2d0:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d2d4:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d2d8:	f10d 0e08 	add.w	lr, sp, #8
 801d2dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d2e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d2e4:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d2e8:	a902      	add	r1, sp, #8
 801d2ea:	3010      	adds	r0, #16
 801d2ec:	f7ff fbcc 	bl	801ca88 <rcl_action_send_result_request>
 801d2f0:	b920      	cbnz	r0, 801d2fc <rclc_action_send_result_request+0x3c>
 801d2f2:	b007      	add	sp, #28
 801d2f4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2f8:	200b      	movs	r0, #11
 801d2fa:	4770      	bx	lr
 801d2fc:	9001      	str	r0, [sp, #4]
 801d2fe:	f7f7 fdb7 	bl	8014e70 <rcutils_reset_error>
 801d302:	9801      	ldr	r0, [sp, #4]
 801d304:	b007      	add	sp, #28
 801d306:	f85d fb04 	ldr.w	pc, [sp], #4
 801d30a:	bf00      	nop

0801d30c <rclc_action_take_goal_handle>:
 801d30c:	b160      	cbz	r0, 801d328 <rclc_action_take_goal_handle+0x1c>
 801d30e:	6883      	ldr	r3, [r0, #8]
 801d310:	b143      	cbz	r3, 801d324 <rclc_action_take_goal_handle+0x18>
 801d312:	6819      	ldr	r1, [r3, #0]
 801d314:	2200      	movs	r2, #0
 801d316:	6081      	str	r1, [r0, #8]
 801d318:	721a      	strb	r2, [r3, #8]
 801d31a:	68c1      	ldr	r1, [r0, #12]
 801d31c:	621a      	str	r2, [r3, #32]
 801d31e:	849a      	strh	r2, [r3, #36]	; 0x24
 801d320:	6019      	str	r1, [r3, #0]
 801d322:	60c3      	str	r3, [r0, #12]
 801d324:	4618      	mov	r0, r3
 801d326:	4770      	bx	lr
 801d328:	4603      	mov	r3, r0
 801d32a:	e7fb      	b.n	801d324 <rclc_action_take_goal_handle+0x18>

0801d32c <rclc_action_remove_used_goal_handle>:
 801d32c:	b180      	cbz	r0, 801d350 <rclc_action_remove_used_goal_handle+0x24>
 801d32e:	b179      	cbz	r1, 801d350 <rclc_action_remove_used_goal_handle+0x24>
 801d330:	68c3      	ldr	r3, [r0, #12]
 801d332:	4299      	cmp	r1, r3
 801d334:	d00d      	beq.n	801d352 <rclc_action_remove_used_goal_handle+0x26>
 801d336:	b12b      	cbz	r3, 801d344 <rclc_action_remove_used_goal_handle+0x18>
 801d338:	681a      	ldr	r2, [r3, #0]
 801d33a:	4291      	cmp	r1, r2
 801d33c:	d003      	beq.n	801d346 <rclc_action_remove_used_goal_handle+0x1a>
 801d33e:	4613      	mov	r3, r2
 801d340:	2b00      	cmp	r3, #0
 801d342:	d1f9      	bne.n	801d338 <rclc_action_remove_used_goal_handle+0xc>
 801d344:	4770      	bx	lr
 801d346:	680a      	ldr	r2, [r1, #0]
 801d348:	601a      	str	r2, [r3, #0]
 801d34a:	6883      	ldr	r3, [r0, #8]
 801d34c:	600b      	str	r3, [r1, #0]
 801d34e:	6081      	str	r1, [r0, #8]
 801d350:	4770      	bx	lr
 801d352:	680b      	ldr	r3, [r1, #0]
 801d354:	60c3      	str	r3, [r0, #12]
 801d356:	e7f8      	b.n	801d34a <rclc_action_remove_used_goal_handle+0x1e>

0801d358 <rclc_action_find_goal_handle_by_uuid>:
 801d358:	b538      	push	{r3, r4, r5, lr}
 801d35a:	b181      	cbz	r1, 801d37e <rclc_action_find_goal_handle_by_uuid+0x26>
 801d35c:	b178      	cbz	r0, 801d37e <rclc_action_find_goal_handle_by_uuid+0x26>
 801d35e:	68c4      	ldr	r4, [r0, #12]
 801d360:	460d      	mov	r5, r1
 801d362:	b914      	cbnz	r4, 801d36a <rclc_action_find_goal_handle_by_uuid+0x12>
 801d364:	e009      	b.n	801d37a <rclc_action_find_goal_handle_by_uuid+0x22>
 801d366:	6824      	ldr	r4, [r4, #0]
 801d368:	b13c      	cbz	r4, 801d37a <rclc_action_find_goal_handle_by_uuid+0x22>
 801d36a:	f104 0009 	add.w	r0, r4, #9
 801d36e:	2210      	movs	r2, #16
 801d370:	4629      	mov	r1, r5
 801d372:	f003 fba9 	bl	8020ac8 <memcmp>
 801d376:	2800      	cmp	r0, #0
 801d378:	d1f5      	bne.n	801d366 <rclc_action_find_goal_handle_by_uuid+0xe>
 801d37a:	4620      	mov	r0, r4
 801d37c:	bd38      	pop	{r3, r4, r5, pc}
 801d37e:	2400      	movs	r4, #0
 801d380:	4620      	mov	r0, r4
 801d382:	bd38      	pop	{r3, r4, r5, pc}

0801d384 <rclc_action_find_first_handle_by_status>:
 801d384:	b140      	cbz	r0, 801d398 <rclc_action_find_first_handle_by_status+0x14>
 801d386:	68c0      	ldr	r0, [r0, #12]
 801d388:	b910      	cbnz	r0, 801d390 <rclc_action_find_first_handle_by_status+0xc>
 801d38a:	e005      	b.n	801d398 <rclc_action_find_first_handle_by_status+0x14>
 801d38c:	6800      	ldr	r0, [r0, #0]
 801d38e:	b118      	cbz	r0, 801d398 <rclc_action_find_first_handle_by_status+0x14>
 801d390:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d394:	428b      	cmp	r3, r1
 801d396:	d1f9      	bne.n	801d38c <rclc_action_find_first_handle_by_status+0x8>
 801d398:	4770      	bx	lr
 801d39a:	bf00      	nop

0801d39c <rclc_action_find_first_terminated_handle>:
 801d39c:	b140      	cbz	r0, 801d3b0 <rclc_action_find_first_terminated_handle+0x14>
 801d39e:	68c0      	ldr	r0, [r0, #12]
 801d3a0:	b910      	cbnz	r0, 801d3a8 <rclc_action_find_first_terminated_handle+0xc>
 801d3a2:	e005      	b.n	801d3b0 <rclc_action_find_first_terminated_handle+0x14>
 801d3a4:	6800      	ldr	r0, [r0, #0]
 801d3a6:	b118      	cbz	r0, 801d3b0 <rclc_action_find_first_terminated_handle+0x14>
 801d3a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d3ac:	2b03      	cmp	r3, #3
 801d3ae:	ddf9      	ble.n	801d3a4 <rclc_action_find_first_terminated_handle+0x8>
 801d3b0:	4770      	bx	lr
 801d3b2:	bf00      	nop

0801d3b4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d3b4:	b170      	cbz	r0, 801d3d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d3b6:	68c0      	ldr	r0, [r0, #12]
 801d3b8:	b160      	cbz	r0, 801d3d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d3ba:	b410      	push	{r4}
 801d3bc:	e001      	b.n	801d3c2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d3be:	6800      	ldr	r0, [r0, #0]
 801d3c0:	b128      	cbz	r0, 801d3ce <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d3c2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d3c6:	4299      	cmp	r1, r3
 801d3c8:	bf08      	it	eq
 801d3ca:	4294      	cmpeq	r4, r2
 801d3cc:	d1f7      	bne.n	801d3be <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3d2:	4770      	bx	lr
 801d3d4:	4770      	bx	lr
 801d3d6:	bf00      	nop

0801d3d8 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d3d8:	b170      	cbz	r0, 801d3f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d3da:	68c0      	ldr	r0, [r0, #12]
 801d3dc:	b160      	cbz	r0, 801d3f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d3de:	b410      	push	{r4}
 801d3e0:	e001      	b.n	801d3e6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d3e2:	6800      	ldr	r0, [r0, #0]
 801d3e4:	b128      	cbz	r0, 801d3f2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d3e6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d3ea:	4299      	cmp	r1, r3
 801d3ec:	bf08      	it	eq
 801d3ee:	4294      	cmpeq	r4, r2
 801d3f0:	d1f7      	bne.n	801d3e2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3f6:	4770      	bx	lr
 801d3f8:	4770      	bx	lr
 801d3fa:	bf00      	nop

0801d3fc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801d3fc:	b170      	cbz	r0, 801d41c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d3fe:	68c0      	ldr	r0, [r0, #12]
 801d400:	b160      	cbz	r0, 801d41c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801d402:	b410      	push	{r4}
 801d404:	e001      	b.n	801d40a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801d406:	6800      	ldr	r0, [r0, #0]
 801d408:	b128      	cbz	r0, 801d416 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801d40a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801d40e:	4299      	cmp	r1, r3
 801d410:	bf08      	it	eq
 801d412:	4294      	cmpeq	r4, r2
 801d414:	d1f7      	bne.n	801d406 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801d416:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d41a:	4770      	bx	lr
 801d41c:	4770      	bx	lr
 801d41e:	bf00      	nop

0801d420 <rclc_action_find_first_handle_with_goal_response>:
 801d420:	b140      	cbz	r0, 801d434 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d422:	68c0      	ldr	r0, [r0, #12]
 801d424:	b910      	cbnz	r0, 801d42c <rclc_action_find_first_handle_with_goal_response+0xc>
 801d426:	e005      	b.n	801d434 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d428:	6800      	ldr	r0, [r0, #0]
 801d42a:	b118      	cbz	r0, 801d434 <rclc_action_find_first_handle_with_goal_response+0x14>
 801d42c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d0f9      	beq.n	801d428 <rclc_action_find_first_handle_with_goal_response+0x8>
 801d434:	4770      	bx	lr
 801d436:	bf00      	nop

0801d438 <rclc_action_find_first_handle_with_result_response>:
 801d438:	b140      	cbz	r0, 801d44c <rclc_action_find_first_handle_with_result_response+0x14>
 801d43a:	68c0      	ldr	r0, [r0, #12]
 801d43c:	b910      	cbnz	r0, 801d444 <rclc_action_find_first_handle_with_result_response+0xc>
 801d43e:	e005      	b.n	801d44c <rclc_action_find_first_handle_with_result_response+0x14>
 801d440:	6800      	ldr	r0, [r0, #0]
 801d442:	b118      	cbz	r0, 801d44c <rclc_action_find_first_handle_with_result_response+0x14>
 801d444:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d0f9      	beq.n	801d440 <rclc_action_find_first_handle_with_result_response+0x8>
 801d44c:	4770      	bx	lr
 801d44e:	bf00      	nop

0801d450 <rclc_action_server_response_goal_request>:
 801d450:	b198      	cbz	r0, 801d47a <rclc_action_server_response_goal_request+0x2a>
 801d452:	2200      	movs	r2, #0
 801d454:	460b      	mov	r3, r1
 801d456:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d45a:	b510      	push	{r4, lr}
 801d45c:	6844      	ldr	r4, [r0, #4]
 801d45e:	b086      	sub	sp, #24
 801d460:	f104 0010 	add.w	r0, r4, #16
 801d464:	9205      	str	r2, [sp, #20]
 801d466:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801d46a:	aa03      	add	r2, sp, #12
 801d46c:	f88d 300c 	strb.w	r3, [sp, #12]
 801d470:	f7ff fd40 	bl	801cef4 <rcl_action_send_goal_response>
 801d474:	b918      	cbnz	r0, 801d47e <rclc_action_server_response_goal_request+0x2e>
 801d476:	b006      	add	sp, #24
 801d478:	bd10      	pop	{r4, pc}
 801d47a:	200b      	movs	r0, #11
 801d47c:	4770      	bx	lr
 801d47e:	9001      	str	r0, [sp, #4]
 801d480:	f7f7 fcf6 	bl	8014e70 <rcutils_reset_error>
 801d484:	9801      	ldr	r0, [sp, #4]
 801d486:	b006      	add	sp, #24
 801d488:	bd10      	pop	{r4, pc}
 801d48a:	bf00      	nop
 801d48c:	0000      	movs	r0, r0
	...

0801d490 <rclc_action_server_goal_cancel_accept>:
 801d490:	b310      	cbz	r0, 801d4d8 <rclc_action_server_goal_cancel_accept+0x48>
 801d492:	b510      	push	{r4, lr}
 801d494:	b090      	sub	sp, #64	; 0x40
 801d496:	4604      	mov	r4, r0
 801d498:	a806      	add	r0, sp, #24
 801d49a:	f7ff feff 	bl	801d29c <rcl_action_get_zero_initialized_cancel_response>
 801d49e:	2300      	movs	r3, #0
 801d4a0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801d4a4:	46ec      	mov	ip, sp
 801d4a6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801d4aa:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801d4ae:	f88d 3018 	strb.w	r3, [sp, #24]
 801d4b2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801d4b6:	f8cd d01c 	str.w	sp, [sp, #28]
 801d4ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d4be:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801d4e0 <rclc_action_server_goal_cancel_accept+0x50>
 801d4c2:	6860      	ldr	r0, [r4, #4]
 801d4c4:	aa06      	add	r2, sp, #24
 801d4c6:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801d4ca:	3010      	adds	r0, #16
 801d4cc:	ed8d 7b08 	vstr	d7, [sp, #32]
 801d4d0:	f7ff fdc6 	bl	801d060 <rcl_action_send_cancel_response>
 801d4d4:	b010      	add	sp, #64	; 0x40
 801d4d6:	bd10      	pop	{r4, pc}
 801d4d8:	200b      	movs	r0, #11
 801d4da:	4770      	bx	lr
 801d4dc:	f3af 8000 	nop.w
 801d4e0:	00000001 	.word	0x00000001
 801d4e4:	00000001 	.word	0x00000001

0801d4e8 <rclc_action_server_goal_cancel_reject>:
 801d4e8:	b082      	sub	sp, #8
 801d4ea:	b530      	push	{r4, r5, lr}
 801d4ec:	b08b      	sub	sp, #44	; 0x2c
 801d4ee:	ac0e      	add	r4, sp, #56	; 0x38
 801d4f0:	e884 000c 	stmia.w	r4, {r2, r3}
 801d4f4:	b188      	cbz	r0, 801d51a <rclc_action_server_goal_cancel_reject+0x32>
 801d4f6:	4604      	mov	r4, r0
 801d4f8:	a801      	add	r0, sp, #4
 801d4fa:	460d      	mov	r5, r1
 801d4fc:	f7ff fece 	bl	801d29c <rcl_action_get_zero_initialized_cancel_response>
 801d500:	aa01      	add	r2, sp, #4
 801d502:	a90e      	add	r1, sp, #56	; 0x38
 801d504:	f104 0010 	add.w	r0, r4, #16
 801d508:	f88d 5004 	strb.w	r5, [sp, #4]
 801d50c:	f7ff fda8 	bl	801d060 <rcl_action_send_cancel_response>
 801d510:	b00b      	add	sp, #44	; 0x2c
 801d512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d516:	b002      	add	sp, #8
 801d518:	4770      	bx	lr
 801d51a:	200b      	movs	r0, #11
 801d51c:	b00b      	add	sp, #44	; 0x2c
 801d51e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d522:	b002      	add	sp, #8
 801d524:	4770      	bx	lr
 801d526:	bf00      	nop

0801d528 <__atomic_load_8>:
 801d528:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801d52c:	4a16      	ldr	r2, [pc, #88]	; (801d588 <__atomic_load_8+0x60>)
 801d52e:	4b17      	ldr	r3, [pc, #92]	; (801d58c <__atomic_load_8+0x64>)
 801d530:	f04f 0c01 	mov.w	ip, #1
 801d534:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801d538:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801d53c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801d540:	fb02 f101 	mul.w	r1, r2, r1
 801d544:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801d548:	fba3 2301 	umull	r2, r3, r3, r1
 801d54c:	091b      	lsrs	r3, r3, #4
 801d54e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d552:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801d556:	b4d0      	push	{r4, r6, r7}
 801d558:	1ac9      	subs	r1, r1, r3
 801d55a:	4c0d      	ldr	r4, [pc, #52]	; (801d590 <__atomic_load_8+0x68>)
 801d55c:	1862      	adds	r2, r4, r1
 801d55e:	e8d2 3f4f 	ldrexb	r3, [r2]
 801d562:	e8c2 cf46 	strexb	r6, ip, [r2]
 801d566:	2e00      	cmp	r6, #0
 801d568:	d1f9      	bne.n	801d55e <__atomic_load_8+0x36>
 801d56a:	b2db      	uxtb	r3, r3
 801d56c:	f3bf 8f5b 	dmb	ish
 801d570:	2b00      	cmp	r3, #0
 801d572:	d1f4      	bne.n	801d55e <__atomic_load_8+0x36>
 801d574:	e9d0 6700 	ldrd	r6, r7, [r0]
 801d578:	f3bf 8f5b 	dmb	ish
 801d57c:	5463      	strb	r3, [r4, r1]
 801d57e:	4630      	mov	r0, r6
 801d580:	4639      	mov	r1, r7
 801d582:	bcd0      	pop	{r4, r6, r7}
 801d584:	4770      	bx	lr
 801d586:	bf00      	nop
 801d588:	27d4eb2d 	.word	0x27d4eb2d
 801d58c:	b21642c9 	.word	0xb21642c9
 801d590:	20016fa8 	.word	0x20016fa8

0801d594 <__atomic_store_8>:
 801d594:	b570      	push	{r4, r5, r6, lr}
 801d596:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801d59a:	4916      	ldr	r1, [pc, #88]	; (801d5f4 <__atomic_store_8+0x60>)
 801d59c:	4c16      	ldr	r4, [pc, #88]	; (801d5f8 <__atomic_store_8+0x64>)
 801d59e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801d5a2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801d5a6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801d5aa:	fb01 fe0e 	mul.w	lr, r1, lr
 801d5ae:	4913      	ldr	r1, [pc, #76]	; (801d5fc <__atomic_store_8+0x68>)
 801d5b0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801d5b4:	fba1 510e 	umull	r5, r1, r1, lr
 801d5b8:	f04f 0501 	mov.w	r5, #1
 801d5bc:	0909      	lsrs	r1, r1, #4
 801d5be:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801d5c2:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801d5c6:	ebae 0e01 	sub.w	lr, lr, r1
 801d5ca:	eb04 0c0e 	add.w	ip, r4, lr
 801d5ce:	e8dc 1f4f 	ldrexb	r1, [ip]
 801d5d2:	e8cc 5f46 	strexb	r6, r5, [ip]
 801d5d6:	2e00      	cmp	r6, #0
 801d5d8:	d1f9      	bne.n	801d5ce <__atomic_store_8+0x3a>
 801d5da:	b2c9      	uxtb	r1, r1
 801d5dc:	f3bf 8f5b 	dmb	ish
 801d5e0:	2900      	cmp	r1, #0
 801d5e2:	d1f4      	bne.n	801d5ce <__atomic_store_8+0x3a>
 801d5e4:	e9c0 2300 	strd	r2, r3, [r0]
 801d5e8:	f3bf 8f5b 	dmb	ish
 801d5ec:	f804 100e 	strb.w	r1, [r4, lr]
 801d5f0:	bd70      	pop	{r4, r5, r6, pc}
 801d5f2:	bf00      	nop
 801d5f4:	27d4eb2d 	.word	0x27d4eb2d
 801d5f8:	20016fa8 	.word	0x20016fa8
 801d5fc:	b21642c9 	.word	0xb21642c9

0801d600 <__atomic_exchange_8>:
 801d600:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801d604:	4917      	ldr	r1, [pc, #92]	; (801d664 <__atomic_exchange_8+0x64>)
 801d606:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801d60a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801d60e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801d612:	fb01 fc0c 	mul.w	ip, r1, ip
 801d616:	4914      	ldr	r1, [pc, #80]	; (801d668 <__atomic_exchange_8+0x68>)
 801d618:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801d61c:	b570      	push	{r4, r5, r6, lr}
 801d61e:	4686      	mov	lr, r0
 801d620:	fba1 010c 	umull	r0, r1, r1, ip
 801d624:	4d11      	ldr	r5, [pc, #68]	; (801d66c <__atomic_exchange_8+0x6c>)
 801d626:	f04f 0001 	mov.w	r0, #1
 801d62a:	0909      	lsrs	r1, r1, #4
 801d62c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801d630:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801d634:	ebac 0c01 	sub.w	ip, ip, r1
 801d638:	eb05 010c 	add.w	r1, r5, ip
 801d63c:	e8d1 4f4f 	ldrexb	r4, [r1]
 801d640:	e8c1 0f46 	strexb	r6, r0, [r1]
 801d644:	2e00      	cmp	r6, #0
 801d646:	d1f9      	bne.n	801d63c <__atomic_exchange_8+0x3c>
 801d648:	b2e4      	uxtb	r4, r4
 801d64a:	f3bf 8f5b 	dmb	ish
 801d64e:	2c00      	cmp	r4, #0
 801d650:	d1f4      	bne.n	801d63c <__atomic_exchange_8+0x3c>
 801d652:	e9de 0100 	ldrd	r0, r1, [lr]
 801d656:	e9ce 2300 	strd	r2, r3, [lr]
 801d65a:	f3bf 8f5b 	dmb	ish
 801d65e:	f805 400c 	strb.w	r4, [r5, ip]
 801d662:	bd70      	pop	{r4, r5, r6, pc}
 801d664:	27d4eb2d 	.word	0x27d4eb2d
 801d668:	b21642c9 	.word	0xb21642c9
 801d66c:	20016fa8 	.word	0x20016fa8

0801d670 <rcutils_is_directory>:
 801d670:	2000      	movs	r0, #0
 801d672:	4770      	bx	lr

0801d674 <rcutils_join_path>:
 801d674:	b082      	sub	sp, #8
 801d676:	2000      	movs	r0, #0
 801d678:	e88d 000c 	stmia.w	sp, {r2, r3}
 801d67c:	b002      	add	sp, #8
 801d67e:	4770      	bx	lr

0801d680 <rcutils_to_native_path>:
 801d680:	b084      	sub	sp, #16
 801d682:	2000      	movs	r0, #0
 801d684:	f10d 0c04 	add.w	ip, sp, #4
 801d688:	b004      	add	sp, #16
 801d68a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801d68e:	4770      	bx	lr

0801d690 <rcutils_string_array_fini>:
 801d690:	b328      	cbz	r0, 801d6de <rcutils_string_array_fini+0x4e>
 801d692:	b570      	push	{r4, r5, r6, lr}
 801d694:	4604      	mov	r4, r0
 801d696:	6840      	ldr	r0, [r0, #4]
 801d698:	b1e0      	cbz	r0, 801d6d4 <rcutils_string_array_fini+0x44>
 801d69a:	f104 0008 	add.w	r0, r4, #8
 801d69e:	f7f7 fba9 	bl	8014df4 <rcutils_allocator_is_valid>
 801d6a2:	b1c0      	cbz	r0, 801d6d6 <rcutils_string_array_fini+0x46>
 801d6a4:	6823      	ldr	r3, [r4, #0]
 801d6a6:	b1c3      	cbz	r3, 801d6da <rcutils_string_array_fini+0x4a>
 801d6a8:	2500      	movs	r5, #0
 801d6aa:	6860      	ldr	r0, [r4, #4]
 801d6ac:	462e      	mov	r6, r5
 801d6ae:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801d6b2:	68e3      	ldr	r3, [r4, #12]
 801d6b4:	69a1      	ldr	r1, [r4, #24]
 801d6b6:	4798      	blx	r3
 801d6b8:	e9d4 3000 	ldrd	r3, r0, [r4]
 801d6bc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801d6c0:	3501      	adds	r5, #1
 801d6c2:	429d      	cmp	r5, r3
 801d6c4:	d3f3      	bcc.n	801d6ae <rcutils_string_array_fini+0x1e>
 801d6c6:	68e3      	ldr	r3, [r4, #12]
 801d6c8:	69a1      	ldr	r1, [r4, #24]
 801d6ca:	4798      	blx	r3
 801d6cc:	2300      	movs	r3, #0
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	e9c4 3300 	strd	r3, r3, [r4]
 801d6d4:	bd70      	pop	{r4, r5, r6, pc}
 801d6d6:	200b      	movs	r0, #11
 801d6d8:	bd70      	pop	{r4, r5, r6, pc}
 801d6da:	6860      	ldr	r0, [r4, #4]
 801d6dc:	e7f3      	b.n	801d6c6 <rcutils_string_array_fini+0x36>
 801d6de:	200b      	movs	r0, #11
 801d6e0:	4770      	bx	lr
 801d6e2:	bf00      	nop

0801d6e4 <rcutils_get_zero_initialized_string_map>:
 801d6e4:	2000      	movs	r0, #0
 801d6e6:	4b01      	ldr	r3, [pc, #4]	; (801d6ec <rcutils_get_zero_initialized_string_map+0x8>)
 801d6e8:	6018      	str	r0, [r3, #0]
 801d6ea:	4770      	bx	lr
 801d6ec:	20016fc0 	.word	0x20016fc0

0801d6f0 <rcutils_string_map_reserve>:
 801d6f0:	2800      	cmp	r0, #0
 801d6f2:	d05e      	beq.n	801d7b2 <rcutils_string_map_reserve+0xc2>
 801d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6f8:	460c      	mov	r4, r1
 801d6fa:	6801      	ldr	r1, [r0, #0]
 801d6fc:	b082      	sub	sp, #8
 801d6fe:	4605      	mov	r5, r0
 801d700:	b129      	cbz	r1, 801d70e <rcutils_string_map_reserve+0x1e>
 801d702:	68cb      	ldr	r3, [r1, #12]
 801d704:	42a3      	cmp	r3, r4
 801d706:	d906      	bls.n	801d716 <rcutils_string_map_reserve+0x26>
 801d708:	461c      	mov	r4, r3
 801d70a:	2900      	cmp	r1, #0
 801d70c:	d1f9      	bne.n	801d702 <rcutils_string_map_reserve+0x12>
 801d70e:	201f      	movs	r0, #31
 801d710:	b002      	add	sp, #8
 801d712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d716:	688b      	ldr	r3, [r1, #8]
 801d718:	42a3      	cmp	r3, r4
 801d71a:	d046      	beq.n	801d7aa <rcutils_string_map_reserve+0xba>
 801d71c:	6a0e      	ldr	r6, [r1, #32]
 801d71e:	2c00      	cmp	r4, #0
 801d720:	d033      	beq.n	801d78a <rcutils_string_map_reserve+0x9a>
 801d722:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801d726:	d242      	bcs.n	801d7ae <rcutils_string_map_reserve+0xbe>
 801d728:	00a7      	lsls	r7, r4, #2
 801d72a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801d72e:	6808      	ldr	r0, [r1, #0]
 801d730:	4632      	mov	r2, r6
 801d732:	4639      	mov	r1, r7
 801d734:	47c0      	blx	r8
 801d736:	2800      	cmp	r0, #0
 801d738:	d039      	beq.n	801d7ae <rcutils_string_map_reserve+0xbe>
 801d73a:	682b      	ldr	r3, [r5, #0]
 801d73c:	4632      	mov	r2, r6
 801d73e:	4639      	mov	r1, r7
 801d740:	6018      	str	r0, [r3, #0]
 801d742:	6858      	ldr	r0, [r3, #4]
 801d744:	47c0      	blx	r8
 801d746:	2800      	cmp	r0, #0
 801d748:	d031      	beq.n	801d7ae <rcutils_string_map_reserve+0xbe>
 801d74a:	682d      	ldr	r5, [r5, #0]
 801d74c:	68ab      	ldr	r3, [r5, #8]
 801d74e:	6068      	str	r0, [r5, #4]
 801d750:	42a3      	cmp	r3, r4
 801d752:	d225      	bcs.n	801d7a0 <rcutils_string_map_reserve+0xb0>
 801d754:	682a      	ldr	r2, [r5, #0]
 801d756:	eb00 0c07 	add.w	ip, r0, r7
 801d75a:	0099      	lsls	r1, r3, #2
 801d75c:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801d760:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801d764:	45e6      	cmp	lr, ip
 801d766:	d203      	bcs.n	801d770 <rcutils_string_map_reserve+0x80>
 801d768:	eb02 0c07 	add.w	ip, r2, r7
 801d76c:	4566      	cmp	r6, ip
 801d76e:	d322      	bcc.n	801d7b6 <rcutils_string_map_reserve+0xc6>
 801d770:	1ae3      	subs	r3, r4, r3
 801d772:	4670      	mov	r0, lr
 801d774:	2100      	movs	r1, #0
 801d776:	009a      	lsls	r2, r3, #2
 801d778:	9201      	str	r2, [sp, #4]
 801d77a:	f003 f9cf 	bl	8020b1c <memset>
 801d77e:	9a01      	ldr	r2, [sp, #4]
 801d780:	2100      	movs	r1, #0
 801d782:	4630      	mov	r0, r6
 801d784:	f003 f9ca 	bl	8020b1c <memset>
 801d788:	e00a      	b.n	801d7a0 <rcutils_string_map_reserve+0xb0>
 801d78a:	694f      	ldr	r7, [r1, #20]
 801d78c:	6808      	ldr	r0, [r1, #0]
 801d78e:	4631      	mov	r1, r6
 801d790:	47b8      	blx	r7
 801d792:	682b      	ldr	r3, [r5, #0]
 801d794:	4631      	mov	r1, r6
 801d796:	6858      	ldr	r0, [r3, #4]
 801d798:	601c      	str	r4, [r3, #0]
 801d79a:	47b8      	blx	r7
 801d79c:	682d      	ldr	r5, [r5, #0]
 801d79e:	606c      	str	r4, [r5, #4]
 801d7a0:	2000      	movs	r0, #0
 801d7a2:	60ac      	str	r4, [r5, #8]
 801d7a4:	b002      	add	sp, #8
 801d7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7aa:	2000      	movs	r0, #0
 801d7ac:	e7b0      	b.n	801d710 <rcutils_string_map_reserve+0x20>
 801d7ae:	200a      	movs	r0, #10
 801d7b0:	e7ae      	b.n	801d710 <rcutils_string_map_reserve+0x20>
 801d7b2:	200b      	movs	r0, #11
 801d7b4:	4770      	bx	lr
 801d7b6:	1f0b      	subs	r3, r1, #4
 801d7b8:	4418      	add	r0, r3
 801d7ba:	4413      	add	r3, r2
 801d7bc:	3a04      	subs	r2, #4
 801d7be:	4417      	add	r7, r2
 801d7c0:	2200      	movs	r2, #0
 801d7c2:	f843 2f04 	str.w	r2, [r3, #4]!
 801d7c6:	42bb      	cmp	r3, r7
 801d7c8:	f840 2f04 	str.w	r2, [r0, #4]!
 801d7cc:	d1f9      	bne.n	801d7c2 <rcutils_string_map_reserve+0xd2>
 801d7ce:	e7e7      	b.n	801d7a0 <rcutils_string_map_reserve+0xb0>

0801d7d0 <rcutils_string_map_init>:
 801d7d0:	b082      	sub	sp, #8
 801d7d2:	b570      	push	{r4, r5, r6, lr}
 801d7d4:	ac04      	add	r4, sp, #16
 801d7d6:	e884 000c 	stmia.w	r4, {r2, r3}
 801d7da:	b380      	cbz	r0, 801d83e <rcutils_string_map_init+0x6e>
 801d7dc:	6806      	ldr	r6, [r0, #0]
 801d7de:	4604      	mov	r4, r0
 801d7e0:	b12e      	cbz	r6, 801d7ee <rcutils_string_map_init+0x1e>
 801d7e2:	251e      	movs	r5, #30
 801d7e4:	4628      	mov	r0, r5
 801d7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d7ea:	b002      	add	sp, #8
 801d7ec:	4770      	bx	lr
 801d7ee:	a804      	add	r0, sp, #16
 801d7f0:	460d      	mov	r5, r1
 801d7f2:	f7f7 faff 	bl	8014df4 <rcutils_allocator_is_valid>
 801d7f6:	b310      	cbz	r0, 801d83e <rcutils_string_map_init+0x6e>
 801d7f8:	9b04      	ldr	r3, [sp, #16]
 801d7fa:	2024      	movs	r0, #36	; 0x24
 801d7fc:	9908      	ldr	r1, [sp, #32]
 801d7fe:	4798      	blx	r3
 801d800:	6020      	str	r0, [r4, #0]
 801d802:	b310      	cbz	r0, 801d84a <rcutils_string_map_init+0x7a>
 801d804:	f10d 0e10 	add.w	lr, sp, #16
 801d808:	f100 0c10 	add.w	ip, r0, #16
 801d80c:	e9c0 6600 	strd	r6, r6, [r0]
 801d810:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801d814:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d818:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d81c:	f8de 3000 	ldr.w	r3, [lr]
 801d820:	4629      	mov	r1, r5
 801d822:	4620      	mov	r0, r4
 801d824:	f8cc 3000 	str.w	r3, [ip]
 801d828:	f7ff ff62 	bl	801d6f0 <rcutils_string_map_reserve>
 801d82c:	4605      	mov	r5, r0
 801d82e:	2800      	cmp	r0, #0
 801d830:	d0d8      	beq.n	801d7e4 <rcutils_string_map_init+0x14>
 801d832:	9b05      	ldr	r3, [sp, #20]
 801d834:	9908      	ldr	r1, [sp, #32]
 801d836:	6820      	ldr	r0, [r4, #0]
 801d838:	4798      	blx	r3
 801d83a:	6026      	str	r6, [r4, #0]
 801d83c:	e7d2      	b.n	801d7e4 <rcutils_string_map_init+0x14>
 801d83e:	250b      	movs	r5, #11
 801d840:	4628      	mov	r0, r5
 801d842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d846:	b002      	add	sp, #8
 801d848:	4770      	bx	lr
 801d84a:	250a      	movs	r5, #10
 801d84c:	e7ca      	b.n	801d7e4 <rcutils_string_map_init+0x14>
 801d84e:	bf00      	nop

0801d850 <rcutils_string_map_fini>:
 801d850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d854:	b082      	sub	sp, #8
 801d856:	2800      	cmp	r0, #0
 801d858:	d03a      	beq.n	801d8d0 <rcutils_string_map_fini+0x80>
 801d85a:	6804      	ldr	r4, [r0, #0]
 801d85c:	4606      	mov	r6, r0
 801d85e:	2c00      	cmp	r4, #0
 801d860:	d032      	beq.n	801d8c8 <rcutils_string_map_fini+0x78>
 801d862:	68a3      	ldr	r3, [r4, #8]
 801d864:	b32b      	cbz	r3, 801d8b2 <rcutils_string_map_fini+0x62>
 801d866:	2500      	movs	r5, #0
 801d868:	6822      	ldr	r2, [r4, #0]
 801d86a:	462f      	mov	r7, r5
 801d86c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801d870:	b1e0      	cbz	r0, 801d8ac <rcutils_string_map_fini+0x5c>
 801d872:	6a21      	ldr	r1, [r4, #32]
 801d874:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801d878:	9101      	str	r1, [sp, #4]
 801d87a:	47c0      	blx	r8
 801d87c:	9901      	ldr	r1, [sp, #4]
 801d87e:	e9d4 3200 	ldrd	r3, r2, [r4]
 801d882:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801d886:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801d88a:	47c0      	blx	r8
 801d88c:	68e3      	ldr	r3, [r4, #12]
 801d88e:	6862      	ldr	r2, [r4, #4]
 801d890:	3b01      	subs	r3, #1
 801d892:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801d896:	3501      	adds	r5, #1
 801d898:	60e3      	str	r3, [r4, #12]
 801d89a:	6834      	ldr	r4, [r6, #0]
 801d89c:	68a3      	ldr	r3, [r4, #8]
 801d89e:	429d      	cmp	r5, r3
 801d8a0:	d207      	bcs.n	801d8b2 <rcutils_string_map_fini+0x62>
 801d8a2:	6822      	ldr	r2, [r4, #0]
 801d8a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801d8a8:	2800      	cmp	r0, #0
 801d8aa:	d1e2      	bne.n	801d872 <rcutils_string_map_fini+0x22>
 801d8ac:	3501      	adds	r5, #1
 801d8ae:	429d      	cmp	r5, r3
 801d8b0:	d3dc      	bcc.n	801d86c <rcutils_string_map_fini+0x1c>
 801d8b2:	2100      	movs	r1, #0
 801d8b4:	4630      	mov	r0, r6
 801d8b6:	f7ff ff1b 	bl	801d6f0 <rcutils_string_map_reserve>
 801d8ba:	4604      	mov	r4, r0
 801d8bc:	b920      	cbnz	r0, 801d8c8 <rcutils_string_map_fini+0x78>
 801d8be:	6830      	ldr	r0, [r6, #0]
 801d8c0:	6943      	ldr	r3, [r0, #20]
 801d8c2:	6a01      	ldr	r1, [r0, #32]
 801d8c4:	4798      	blx	r3
 801d8c6:	6034      	str	r4, [r6, #0]
 801d8c8:	4620      	mov	r0, r4
 801d8ca:	b002      	add	sp, #8
 801d8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8d0:	240b      	movs	r4, #11
 801d8d2:	4620      	mov	r0, r4
 801d8d4:	b002      	add	sp, #8
 801d8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8da:	bf00      	nop

0801d8dc <rcutils_string_map_getn>:
 801d8dc:	b378      	cbz	r0, 801d93e <rcutils_string_map_getn+0x62>
 801d8de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e2:	f8d0 b000 	ldr.w	fp, [r0]
 801d8e6:	f1bb 0f00 	cmp.w	fp, #0
 801d8ea:	d01f      	beq.n	801d92c <rcutils_string_map_getn+0x50>
 801d8ec:	fab1 f481 	clz	r4, r1
 801d8f0:	4688      	mov	r8, r1
 801d8f2:	0964      	lsrs	r4, r4, #5
 801d8f4:	b1d1      	cbz	r1, 801d92c <rcutils_string_map_getn+0x50>
 801d8f6:	f8db 7008 	ldr.w	r7, [fp, #8]
 801d8fa:	f8db 6000 	ldr.w	r6, [fp]
 801d8fe:	b1af      	cbz	r7, 801d92c <rcutils_string_map_getn+0x50>
 801d900:	4691      	mov	r9, r2
 801d902:	3e04      	subs	r6, #4
 801d904:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801d908:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801d90c:	3401      	adds	r4, #1
 801d90e:	4628      	mov	r0, r5
 801d910:	b155      	cbz	r5, 801d928 <rcutils_string_map_getn+0x4c>
 801d912:	f7e2 fcf5 	bl	8000300 <strlen>
 801d916:	4602      	mov	r2, r0
 801d918:	4629      	mov	r1, r5
 801d91a:	4640      	mov	r0, r8
 801d91c:	454a      	cmp	r2, r9
 801d91e:	bf38      	it	cc
 801d920:	464a      	movcc	r2, r9
 801d922:	f003 f910 	bl	8020b46 <strncmp>
 801d926:	b120      	cbz	r0, 801d932 <rcutils_string_map_getn+0x56>
 801d928:	42a7      	cmp	r7, r4
 801d92a:	d1eb      	bne.n	801d904 <rcutils_string_map_getn+0x28>
 801d92c:	2000      	movs	r0, #0
 801d92e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d932:	f8db 3004 	ldr.w	r3, [fp, #4]
 801d936:	f853 000a 	ldr.w	r0, [r3, sl]
 801d93a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d93e:	4770      	bx	lr

0801d940 <rmw_get_zero_initialized_context>:
 801d940:	b510      	push	{r4, lr}
 801d942:	4604      	mov	r4, r0
 801d944:	3010      	adds	r0, #16
 801d946:	f7f7 fc73 	bl	8015230 <rmw_get_zero_initialized_init_options>
 801d94a:	2300      	movs	r3, #0
 801d94c:	4620      	mov	r0, r4
 801d94e:	60a3      	str	r3, [r4, #8]
 801d950:	64a3      	str	r3, [r4, #72]	; 0x48
 801d952:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d954:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801d960 <rmw_get_zero_initialized_context+0x20>
 801d958:	ed84 7b00 	vstr	d7, [r4]
 801d95c:	bd10      	pop	{r4, pc}
 801d95e:	bf00      	nop
	...

0801d968 <rmw_time_equal>:
 801d968:	b4f0      	push	{r4, r5, r6, r7}
 801d96a:	b084      	sub	sp, #16
 801d96c:	ac04      	add	r4, sp, #16
 801d96e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801d972:	4603      	mov	r3, r0
 801d974:	4925      	ldr	r1, [pc, #148]	; (801da0c <rmw_time_equal+0xa4>)
 801d976:	9d01      	ldr	r5, [sp, #4]
 801d978:	4610      	mov	r0, r2
 801d97a:	4299      	cmp	r1, r3
 801d97c:	f04f 0202 	mov.w	r2, #2
 801d980:	9e03      	ldr	r6, [sp, #12]
 801d982:	41aa      	sbcs	r2, r5
 801d984:	d330      	bcc.n	801d9e8 <rmw_time_equal+0x80>
 801d986:	4c22      	ldr	r4, [pc, #136]	; (801da10 <rmw_time_equal+0xa8>)
 801d988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d98c:	fba3 3204 	umull	r3, r2, r3, r4
 801d990:	fb04 2205 	mla	r2, r4, r5, r2
 801d994:	43dd      	mvns	r5, r3
 801d996:	1a8c      	subs	r4, r1, r2
 801d998:	4285      	cmp	r5, r0
 801d99a:	41b4      	sbcs	r4, r6
 801d99c:	d332      	bcc.n	801da04 <rmw_time_equal+0x9c>
 801d99e:	eb10 0c03 	adds.w	ip, r0, r3
 801d9a2:	eb42 0106 	adc.w	r1, r2, r6
 801d9a6:	4819      	ldr	r0, [pc, #100]	; (801da0c <rmw_time_equal+0xa4>)
 801d9a8:	2202      	movs	r2, #2
 801d9aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d9ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d9ae:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801d9b2:	4298      	cmp	r0, r3
 801d9b4:	41b2      	sbcs	r2, r6
 801d9b6:	d31c      	bcc.n	801d9f2 <rmw_time_equal+0x8a>
 801d9b8:	4c15      	ldr	r4, [pc, #84]	; (801da10 <rmw_time_equal+0xa8>)
 801d9ba:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d9be:	fba3 3204 	umull	r3, r2, r3, r4
 801d9c2:	fb04 2206 	mla	r2, r4, r6, r2
 801d9c6:	43de      	mvns	r6, r3
 801d9c8:	1a84      	subs	r4, r0, r2
 801d9ca:	42ae      	cmp	r6, r5
 801d9cc:	41bc      	sbcs	r4, r7
 801d9ce:	d315      	bcc.n	801d9fc <rmw_time_equal+0x94>
 801d9d0:	195b      	adds	r3, r3, r5
 801d9d2:	eb42 0207 	adc.w	r2, r2, r7
 801d9d6:	428a      	cmp	r2, r1
 801d9d8:	bf08      	it	eq
 801d9da:	4563      	cmpeq	r3, ip
 801d9dc:	bf0c      	ite	eq
 801d9de:	2001      	moveq	r0, #1
 801d9e0:	2000      	movne	r0, #0
 801d9e2:	b004      	add	sp, #16
 801d9e4:	bcf0      	pop	{r4, r5, r6, r7}
 801d9e6:	4770      	bx	lr
 801d9e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801d9ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d9f0:	e7d9      	b.n	801d9a6 <rmw_time_equal+0x3e>
 801d9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d9f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801d9fa:	e7ec      	b.n	801d9d6 <rmw_time_equal+0x6e>
 801d9fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801da00:	4602      	mov	r2, r0
 801da02:	e7e8      	b.n	801d9d6 <rmw_time_equal+0x6e>
 801da04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801da08:	e7cd      	b.n	801d9a6 <rmw_time_equal+0x3e>
 801da0a:	bf00      	nop
 801da0c:	25c17d04 	.word	0x25c17d04
 801da10:	3b9aca00 	.word	0x3b9aca00

0801da14 <rmw_time_total_nsec>:
 801da14:	b470      	push	{r4, r5, r6}
 801da16:	b085      	sub	sp, #20
 801da18:	ac04      	add	r4, sp, #16
 801da1a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801da1e:	4603      	mov	r3, r0
 801da20:	4913      	ldr	r1, [pc, #76]	; (801da70 <rmw_time_total_nsec+0x5c>)
 801da22:	9d01      	ldr	r5, [sp, #4]
 801da24:	4610      	mov	r0, r2
 801da26:	4299      	cmp	r1, r3
 801da28:	f04f 0202 	mov.w	r2, #2
 801da2c:	9e03      	ldr	r6, [sp, #12]
 801da2e:	41aa      	sbcs	r2, r5
 801da30:	d311      	bcc.n	801da56 <rmw_time_total_nsec+0x42>
 801da32:	4c10      	ldr	r4, [pc, #64]	; (801da74 <rmw_time_total_nsec+0x60>)
 801da34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801da38:	fba3 3204 	umull	r3, r2, r3, r4
 801da3c:	fb04 2205 	mla	r2, r4, r5, r2
 801da40:	43dd      	mvns	r5, r3
 801da42:	1a8c      	subs	r4, r1, r2
 801da44:	4285      	cmp	r5, r0
 801da46:	41b4      	sbcs	r4, r6
 801da48:	d30c      	bcc.n	801da64 <rmw_time_total_nsec+0x50>
 801da4a:	1818      	adds	r0, r3, r0
 801da4c:	eb42 0106 	adc.w	r1, r2, r6
 801da50:	b005      	add	sp, #20
 801da52:	bc70      	pop	{r4, r5, r6}
 801da54:	4770      	bx	lr
 801da56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801da5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801da5e:	b005      	add	sp, #20
 801da60:	bc70      	pop	{r4, r5, r6}
 801da62:	4770      	bx	lr
 801da64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801da68:	b005      	add	sp, #20
 801da6a:	bc70      	pop	{r4, r5, r6}
 801da6c:	4770      	bx	lr
 801da6e:	bf00      	nop
 801da70:	25c17d04 	.word	0x25c17d04
 801da74:	3b9aca00 	.word	0x3b9aca00

0801da78 <rmw_validate_full_topic_name>:
 801da78:	2800      	cmp	r0, #0
 801da7a:	d05d      	beq.n	801db38 <rmw_validate_full_topic_name+0xc0>
 801da7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da80:	460d      	mov	r5, r1
 801da82:	2900      	cmp	r1, #0
 801da84:	d05a      	beq.n	801db3c <rmw_validate_full_topic_name+0xc4>
 801da86:	4604      	mov	r4, r0
 801da88:	4616      	mov	r6, r2
 801da8a:	f7e2 fc39 	bl	8000300 <strlen>
 801da8e:	b150      	cbz	r0, 801daa6 <rmw_validate_full_topic_name+0x2e>
 801da90:	7823      	ldrb	r3, [r4, #0]
 801da92:	2b2f      	cmp	r3, #47	; 0x2f
 801da94:	d00e      	beq.n	801dab4 <rmw_validate_full_topic_name+0x3c>
 801da96:	2302      	movs	r3, #2
 801da98:	602b      	str	r3, [r5, #0]
 801da9a:	b146      	cbz	r6, 801daae <rmw_validate_full_topic_name+0x36>
 801da9c:	2300      	movs	r3, #0
 801da9e:	4618      	mov	r0, r3
 801daa0:	6033      	str	r3, [r6, #0]
 801daa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801daa6:	2301      	movs	r3, #1
 801daa8:	602b      	str	r3, [r5, #0]
 801daaa:	2e00      	cmp	r6, #0
 801daac:	d1f6      	bne.n	801da9c <rmw_validate_full_topic_name+0x24>
 801daae:	2000      	movs	r0, #0
 801dab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dab4:	1e43      	subs	r3, r0, #1
 801dab6:	5ce2      	ldrb	r2, [r4, r3]
 801dab8:	2a2f      	cmp	r2, #47	; 0x2f
 801daba:	d041      	beq.n	801db40 <rmw_validate_full_topic_name+0xc8>
 801dabc:	1e62      	subs	r2, r4, #1
 801dabe:	f1c4 0e01 	rsb	lr, r4, #1
 801dac2:	eb02 0800 	add.w	r8, r2, r0
 801dac6:	eb0e 0702 	add.w	r7, lr, r2
 801daca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801dace:	f023 0120 	bic.w	r1, r3, #32
 801dad2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801dad6:	3941      	subs	r1, #65	; 0x41
 801dad8:	2919      	cmp	r1, #25
 801dada:	d90f      	bls.n	801dafc <rmw_validate_full_topic_name+0x84>
 801dadc:	f1bc 0f0a 	cmp.w	ip, #10
 801dae0:	d90c      	bls.n	801dafc <rmw_validate_full_topic_name+0x84>
 801dae2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801dae6:	fab3 f383 	clz	r3, r3
 801daea:	095b      	lsrs	r3, r3, #5
 801daec:	b933      	cbnz	r3, 801dafc <rmw_validate_full_topic_name+0x84>
 801daee:	2204      	movs	r2, #4
 801daf0:	602a      	str	r2, [r5, #0]
 801daf2:	2e00      	cmp	r6, #0
 801daf4:	d0db      	beq.n	801daae <rmw_validate_full_topic_name+0x36>
 801daf6:	4618      	mov	r0, r3
 801daf8:	6037      	str	r7, [r6, #0]
 801dafa:	e7d2      	b.n	801daa2 <rmw_validate_full_topic_name+0x2a>
 801dafc:	4542      	cmp	r2, r8
 801dafe:	d1e2      	bne.n	801dac6 <rmw_validate_full_topic_name+0x4e>
 801db00:	2301      	movs	r3, #1
 801db02:	4f1a      	ldr	r7, [pc, #104]	; (801db6c <rmw_validate_full_topic_name+0xf4>)
 801db04:	e004      	b.n	801db10 <rmw_validate_full_topic_name+0x98>
 801db06:	4298      	cmp	r0, r3
 801db08:	f104 0401 	add.w	r4, r4, #1
 801db0c:	4613      	mov	r3, r2
 801db0e:	d91c      	bls.n	801db4a <rmw_validate_full_topic_name+0xd2>
 801db10:	4298      	cmp	r0, r3
 801db12:	f103 0201 	add.w	r2, r3, #1
 801db16:	d0f6      	beq.n	801db06 <rmw_validate_full_topic_name+0x8e>
 801db18:	7821      	ldrb	r1, [r4, #0]
 801db1a:	292f      	cmp	r1, #47	; 0x2f
 801db1c:	d1f3      	bne.n	801db06 <rmw_validate_full_topic_name+0x8e>
 801db1e:	7861      	ldrb	r1, [r4, #1]
 801db20:	292f      	cmp	r1, #47	; 0x2f
 801db22:	d01e      	beq.n	801db62 <rmw_validate_full_topic_name+0xea>
 801db24:	5dc9      	ldrb	r1, [r1, r7]
 801db26:	0749      	lsls	r1, r1, #29
 801db28:	d5ed      	bpl.n	801db06 <rmw_validate_full_topic_name+0x8e>
 801db2a:	2206      	movs	r2, #6
 801db2c:	602a      	str	r2, [r5, #0]
 801db2e:	2e00      	cmp	r6, #0
 801db30:	d0bd      	beq.n	801daae <rmw_validate_full_topic_name+0x36>
 801db32:	2000      	movs	r0, #0
 801db34:	6033      	str	r3, [r6, #0]
 801db36:	e7b4      	b.n	801daa2 <rmw_validate_full_topic_name+0x2a>
 801db38:	200b      	movs	r0, #11
 801db3a:	4770      	bx	lr
 801db3c:	200b      	movs	r0, #11
 801db3e:	e7b0      	b.n	801daa2 <rmw_validate_full_topic_name+0x2a>
 801db40:	2203      	movs	r2, #3
 801db42:	602a      	str	r2, [r5, #0]
 801db44:	2e00      	cmp	r6, #0
 801db46:	d1f4      	bne.n	801db32 <rmw_validate_full_topic_name+0xba>
 801db48:	e7b1      	b.n	801daae <rmw_validate_full_topic_name+0x36>
 801db4a:	28f7      	cmp	r0, #247	; 0xf7
 801db4c:	d803      	bhi.n	801db56 <rmw_validate_full_topic_name+0xde>
 801db4e:	2300      	movs	r3, #0
 801db50:	4618      	mov	r0, r3
 801db52:	602b      	str	r3, [r5, #0]
 801db54:	e7a5      	b.n	801daa2 <rmw_validate_full_topic_name+0x2a>
 801db56:	2307      	movs	r3, #7
 801db58:	602b      	str	r3, [r5, #0]
 801db5a:	2e00      	cmp	r6, #0
 801db5c:	d0a7      	beq.n	801daae <rmw_validate_full_topic_name+0x36>
 801db5e:	23f6      	movs	r3, #246	; 0xf6
 801db60:	e7e7      	b.n	801db32 <rmw_validate_full_topic_name+0xba>
 801db62:	2205      	movs	r2, #5
 801db64:	602a      	str	r2, [r5, #0]
 801db66:	2e00      	cmp	r6, #0
 801db68:	d1e3      	bne.n	801db32 <rmw_validate_full_topic_name+0xba>
 801db6a:	e7a0      	b.n	801daae <rmw_validate_full_topic_name+0x36>
 801db6c:	080258cc 	.word	0x080258cc

0801db70 <on_status>:
 801db70:	b082      	sub	sp, #8
 801db72:	b002      	add	sp, #8
 801db74:	4770      	bx	lr
 801db76:	bf00      	nop

0801db78 <on_topic>:
 801db78:	4a23      	ldr	r2, [pc, #140]	; (801dc08 <on_topic+0x90>)
 801db7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db7e:	6812      	ldr	r2, [r2, #0]
 801db80:	b094      	sub	sp, #80	; 0x50
 801db82:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801db84:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801db88:	9113      	str	r1, [sp, #76]	; 0x4c
 801db8a:	9312      	str	r3, [sp, #72]	; 0x48
 801db8c:	b3c2      	cbz	r2, 801dc00 <on_topic+0x88>
 801db8e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801db92:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801db96:	e001      	b.n	801db9c <on_topic+0x24>
 801db98:	6852      	ldr	r2, [r2, #4]
 801db9a:	b38a      	cbz	r2, 801dc00 <on_topic+0x88>
 801db9c:	6894      	ldr	r4, [r2, #8]
 801db9e:	8aa3      	ldrh	r3, [r4, #20]
 801dba0:	428b      	cmp	r3, r1
 801dba2:	d1f9      	bne.n	801db98 <on_topic+0x20>
 801dba4:	7da3      	ldrb	r3, [r4, #22]
 801dba6:	4283      	cmp	r3, r0
 801dba8:	d1f6      	bne.n	801db98 <on_topic+0x20>
 801dbaa:	2248      	movs	r2, #72	; 0x48
 801dbac:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801dbb0:	4668      	mov	r0, sp
 801dbb2:	f003 f880 	bl	8020cb6 <memcpy>
 801dbb6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801dbba:	4620      	mov	r0, r4
 801dbbc:	cb0c      	ldmia	r3, {r2, r3}
 801dbbe:	f7f8 ffdb 	bl	8016b78 <rmw_uxrce_get_static_input_buffer_for_entity>
 801dbc2:	4607      	mov	r7, r0
 801dbc4:	b1e0      	cbz	r0, 801dc00 <on_topic+0x88>
 801dbc6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801dbca:	462a      	mov	r2, r5
 801dbcc:	4630      	mov	r0, r6
 801dbce:	f108 0110 	add.w	r1, r8, #16
 801dbd2:	f7f9 fc91 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801dbd6:	b930      	cbnz	r0, 801dbe6 <on_topic+0x6e>
 801dbd8:	4639      	mov	r1, r7
 801dbda:	480c      	ldr	r0, [pc, #48]	; (801dc0c <on_topic+0x94>)
 801dbdc:	b014      	add	sp, #80	; 0x50
 801dbde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dbe2:	f000 b8bd 	b.w	801dd60 <put_memory>
 801dbe6:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801dbea:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801dbee:	f000 fb33 	bl	801e258 <rmw_uros_epoch_nanos>
 801dbf2:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801dbf6:	2305      	movs	r3, #5
 801dbf8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801dbfc:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801dc00:	b014      	add	sp, #80	; 0x50
 801dc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc06:	bf00      	nop
 801dc08:	20016f5c 	.word	0x20016f5c
 801dc0c:	20016f4c 	.word	0x20016f4c

0801dc10 <on_request>:
 801dc10:	4824      	ldr	r0, [pc, #144]	; (801dca4 <on_request+0x94>)
 801dc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc16:	6800      	ldr	r0, [r0, #0]
 801dc18:	b094      	sub	sp, #80	; 0x50
 801dc1a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801dc1c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801dc20:	9113      	str	r1, [sp, #76]	; 0x4c
 801dc22:	2800      	cmp	r0, #0
 801dc24:	d03b      	beq.n	801dc9e <on_request+0x8e>
 801dc26:	461d      	mov	r5, r3
 801dc28:	e001      	b.n	801dc2e <on_request+0x1e>
 801dc2a:	6840      	ldr	r0, [r0, #4]
 801dc2c:	b3b8      	cbz	r0, 801dc9e <on_request+0x8e>
 801dc2e:	6884      	ldr	r4, [r0, #8]
 801dc30:	8b21      	ldrh	r1, [r4, #24]
 801dc32:	4291      	cmp	r1, r2
 801dc34:	d1f9      	bne.n	801dc2a <on_request+0x1a>
 801dc36:	2248      	movs	r2, #72	; 0x48
 801dc38:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801dc3c:	4668      	mov	r0, sp
 801dc3e:	f003 f83a 	bl	8020cb6 <memcpy>
 801dc42:	f104 0320 	add.w	r3, r4, #32
 801dc46:	4620      	mov	r0, r4
 801dc48:	cb0c      	ldmia	r3, {r2, r3}
 801dc4a:	f7f8 ff95 	bl	8016b78 <rmw_uxrce_get_static_input_buffer_for_entity>
 801dc4e:	4680      	mov	r8, r0
 801dc50:	b328      	cbz	r0, 801dc9e <on_request+0x8e>
 801dc52:	4630      	mov	r0, r6
 801dc54:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801dc58:	463a      	mov	r2, r7
 801dc5a:	f106 0110 	add.w	r1, r6, #16
 801dc5e:	f7f9 fc4b 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801dc62:	b930      	cbnz	r0, 801dc72 <on_request+0x62>
 801dc64:	4641      	mov	r1, r8
 801dc66:	4810      	ldr	r0, [pc, #64]	; (801dca8 <on_request+0x98>)
 801dc68:	b014      	add	sp, #80	; 0x50
 801dc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc6e:	f000 b877 	b.w	801dd60 <put_memory>
 801dc72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801dc74:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801dc78:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801dc7c:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801dc80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dc84:	e895 0003 	ldmia.w	r5, {r0, r1}
 801dc88:	e88c 0003 	stmia.w	ip, {r0, r1}
 801dc8c:	f000 fae4 	bl	801e258 <rmw_uros_epoch_nanos>
 801dc90:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801dc94:	2303      	movs	r3, #3
 801dc96:	e942 0102 	strd	r0, r1, [r2, #-8]
 801dc9a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801dc9e:	b014      	add	sp, #80	; 0x50
 801dca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dca4:	20016f2c 	.word	0x20016f2c
 801dca8:	20016f4c 	.word	0x20016f4c

0801dcac <on_reply>:
 801dcac:	4822      	ldr	r0, [pc, #136]	; (801dd38 <on_reply+0x8c>)
 801dcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcb2:	6800      	ldr	r0, [r0, #0]
 801dcb4:	b094      	sub	sp, #80	; 0x50
 801dcb6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801dcb8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801dcbc:	9113      	str	r1, [sp, #76]	; 0x4c
 801dcbe:	b3b8      	cbz	r0, 801dd30 <on_reply+0x84>
 801dcc0:	461d      	mov	r5, r3
 801dcc2:	e001      	b.n	801dcc8 <on_reply+0x1c>
 801dcc4:	6840      	ldr	r0, [r0, #4]
 801dcc6:	b398      	cbz	r0, 801dd30 <on_reply+0x84>
 801dcc8:	6884      	ldr	r4, [r0, #8]
 801dcca:	8b21      	ldrh	r1, [r4, #24]
 801dccc:	4291      	cmp	r1, r2
 801dcce:	d1f9      	bne.n	801dcc4 <on_reply+0x18>
 801dcd0:	2248      	movs	r2, #72	; 0x48
 801dcd2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801dcd6:	4668      	mov	r0, sp
 801dcd8:	f002 ffed 	bl	8020cb6 <memcpy>
 801dcdc:	f104 0320 	add.w	r3, r4, #32
 801dce0:	4620      	mov	r0, r4
 801dce2:	cb0c      	ldmia	r3, {r2, r3}
 801dce4:	f7f8 ff48 	bl	8016b78 <rmw_uxrce_get_static_input_buffer_for_entity>
 801dce8:	4680      	mov	r8, r0
 801dcea:	b308      	cbz	r0, 801dd30 <on_reply+0x84>
 801dcec:	4630      	mov	r0, r6
 801dcee:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801dcf2:	463a      	mov	r2, r7
 801dcf4:	f106 0110 	add.w	r1, r6, #16
 801dcf8:	f7f9 fbfe 	bl	80174f8 <ucdr_deserialize_array_uint8_t>
 801dcfc:	b930      	cbnz	r0, 801dd0c <on_reply+0x60>
 801dcfe:	4641      	mov	r1, r8
 801dd00:	480e      	ldr	r0, [pc, #56]	; (801dd3c <on_reply+0x90>)
 801dd02:	b014      	add	sp, #80	; 0x50
 801dd04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dd08:	f000 b82a 	b.w	801dd60 <put_memory>
 801dd0c:	2200      	movs	r2, #0
 801dd0e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801dd12:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801dd16:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801dd1a:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801dd1e:	f000 fa9b 	bl	801e258 <rmw_uros_epoch_nanos>
 801dd22:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801dd26:	2304      	movs	r3, #4
 801dd28:	e942 0102 	strd	r0, r1, [r2, #-8]
 801dd2c:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801dd30:	b014      	add	sp, #80	; 0x50
 801dd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd36:	bf00      	nop
 801dd38:	2001263c 	.word	0x2001263c
 801dd3c:	20016f4c 	.word	0x20016f4c

0801dd40 <get_memory>:
 801dd40:	4603      	mov	r3, r0
 801dd42:	6840      	ldr	r0, [r0, #4]
 801dd44:	b158      	cbz	r0, 801dd5e <get_memory+0x1e>
 801dd46:	6842      	ldr	r2, [r0, #4]
 801dd48:	605a      	str	r2, [r3, #4]
 801dd4a:	b10a      	cbz	r2, 801dd50 <get_memory+0x10>
 801dd4c:	2100      	movs	r1, #0
 801dd4e:	6011      	str	r1, [r2, #0]
 801dd50:	681a      	ldr	r2, [r3, #0]
 801dd52:	6042      	str	r2, [r0, #4]
 801dd54:	b102      	cbz	r2, 801dd58 <get_memory+0x18>
 801dd56:	6010      	str	r0, [r2, #0]
 801dd58:	2200      	movs	r2, #0
 801dd5a:	6002      	str	r2, [r0, #0]
 801dd5c:	6018      	str	r0, [r3, #0]
 801dd5e:	4770      	bx	lr

0801dd60 <put_memory>:
 801dd60:	680b      	ldr	r3, [r1, #0]
 801dd62:	b10b      	cbz	r3, 801dd68 <put_memory+0x8>
 801dd64:	684a      	ldr	r2, [r1, #4]
 801dd66:	605a      	str	r2, [r3, #4]
 801dd68:	684a      	ldr	r2, [r1, #4]
 801dd6a:	b102      	cbz	r2, 801dd6e <put_memory+0xe>
 801dd6c:	6013      	str	r3, [r2, #0]
 801dd6e:	6803      	ldr	r3, [r0, #0]
 801dd70:	428b      	cmp	r3, r1
 801dd72:	6843      	ldr	r3, [r0, #4]
 801dd74:	bf08      	it	eq
 801dd76:	6002      	streq	r2, [r0, #0]
 801dd78:	604b      	str	r3, [r1, #4]
 801dd7a:	b103      	cbz	r3, 801dd7e <put_memory+0x1e>
 801dd7c:	6019      	str	r1, [r3, #0]
 801dd7e:	2300      	movs	r3, #0
 801dd80:	600b      	str	r3, [r1, #0]
 801dd82:	6041      	str	r1, [r0, #4]
 801dd84:	4770      	bx	lr
 801dd86:	bf00      	nop

0801dd88 <rmw_destroy_client>:
 801dd88:	b570      	push	{r4, r5, r6, lr}
 801dd8a:	b128      	cbz	r0, 801dd98 <rmw_destroy_client+0x10>
 801dd8c:	4604      	mov	r4, r0
 801dd8e:	6800      	ldr	r0, [r0, #0]
 801dd90:	460d      	mov	r5, r1
 801dd92:	f7f9 f905 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 801dd96:	b910      	cbnz	r0, 801dd9e <rmw_destroy_client+0x16>
 801dd98:	2401      	movs	r4, #1
 801dd9a:	4620      	mov	r0, r4
 801dd9c:	bd70      	pop	{r4, r5, r6, pc}
 801dd9e:	6863      	ldr	r3, [r4, #4]
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	d0f9      	beq.n	801dd98 <rmw_destroy_client+0x10>
 801dda4:	2d00      	cmp	r5, #0
 801dda6:	d0f7      	beq.n	801dd98 <rmw_destroy_client+0x10>
 801dda8:	6828      	ldr	r0, [r5, #0]
 801ddaa:	f7f9 f8f9 	bl	8016fa0 <is_uxrce_rmw_identifier_valid>
 801ddae:	2800      	cmp	r0, #0
 801ddb0:	d0f2      	beq.n	801dd98 <rmw_destroy_client+0x10>
 801ddb2:	686e      	ldr	r6, [r5, #4]
 801ddb4:	2e00      	cmp	r6, #0
 801ddb6:	d0ef      	beq.n	801dd98 <rmw_destroy_client+0x10>
 801ddb8:	6864      	ldr	r4, [r4, #4]
 801ddba:	6932      	ldr	r2, [r6, #16]
 801ddbc:	6920      	ldr	r0, [r4, #16]
 801ddbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801ddc2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ddc6:	6819      	ldr	r1, [r3, #0]
 801ddc8:	f7f9 ff62 	bl	8017c90 <uxr_buffer_cancel_data>
 801ddcc:	4602      	mov	r2, r0
 801ddce:	6920      	ldr	r0, [r4, #16]
 801ddd0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801ddd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801ddd8:	f7f8 ffd0 	bl	8016d7c <run_xrce_session>
 801dddc:	6920      	ldr	r0, [r4, #16]
 801ddde:	6932      	ldr	r2, [r6, #16]
 801dde0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801dde4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801dde8:	6819      	ldr	r1, [r3, #0]
 801ddea:	f7f9 fbed 	bl	80175c8 <uxr_buffer_delete_entity>
 801ddee:	4602      	mov	r2, r0
 801ddf0:	6920      	ldr	r0, [r4, #16]
 801ddf2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801ddf6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801ddfa:	f7f8 ffbf 	bl	8016d7c <run_xrce_session>
 801ddfe:	4603      	mov	r3, r0
 801de00:	4628      	mov	r0, r5
 801de02:	2b00      	cmp	r3, #0
 801de04:	bf14      	ite	ne
 801de06:	2400      	movne	r4, #0
 801de08:	2402      	moveq	r4, #2
 801de0a:	f7f8 fe93 	bl	8016b34 <rmw_uxrce_fini_client_memory>
 801de0e:	e7c4      	b.n	801dd9a <rmw_destroy_client+0x12>

0801de10 <rmw_get_implementation_identifier>:
 801de10:	4b01      	ldr	r3, [pc, #4]	; (801de18 <rmw_get_implementation_identifier+0x8>)
 801de12:	6818      	ldr	r0, [r3, #0]
 801de14:	4770      	bx	lr
 801de16:	bf00      	nop
 801de18:	08025824 	.word	0x08025824

0801de1c <rmw_create_guard_condition>:
 801de1c:	b538      	push	{r3, r4, r5, lr}
 801de1e:	4605      	mov	r5, r0
 801de20:	4808      	ldr	r0, [pc, #32]	; (801de44 <rmw_create_guard_condition+0x28>)
 801de22:	f7ff ff8d 	bl	801dd40 <get_memory>
 801de26:	4603      	mov	r3, r0
 801de28:	b148      	cbz	r0, 801de3e <rmw_create_guard_condition+0x22>
 801de2a:	6884      	ldr	r4, [r0, #8]
 801de2c:	2300      	movs	r3, #0
 801de2e:	61e5      	str	r5, [r4, #28]
 801de30:	7423      	strb	r3, [r4, #16]
 801de32:	f7ff ffed 	bl	801de10 <rmw_get_implementation_identifier>
 801de36:	f104 0314 	add.w	r3, r4, #20
 801de3a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801de3e:	4618      	mov	r0, r3
 801de40:	bd38      	pop	{r3, r4, r5, pc}
 801de42:	bf00      	nop
 801de44:	20016eec 	.word	0x20016eec

0801de48 <rmw_destroy_guard_condition>:
 801de48:	b508      	push	{r3, lr}
 801de4a:	4b08      	ldr	r3, [pc, #32]	; (801de6c <rmw_destroy_guard_condition+0x24>)
 801de4c:	6819      	ldr	r1, [r3, #0]
 801de4e:	b911      	cbnz	r1, 801de56 <rmw_destroy_guard_condition+0xe>
 801de50:	e00a      	b.n	801de68 <rmw_destroy_guard_condition+0x20>
 801de52:	6849      	ldr	r1, [r1, #4]
 801de54:	b141      	cbz	r1, 801de68 <rmw_destroy_guard_condition+0x20>
 801de56:	688b      	ldr	r3, [r1, #8]
 801de58:	3314      	adds	r3, #20
 801de5a:	4298      	cmp	r0, r3
 801de5c:	d1f9      	bne.n	801de52 <rmw_destroy_guard_condition+0xa>
 801de5e:	4803      	ldr	r0, [pc, #12]	; (801de6c <rmw_destroy_guard_condition+0x24>)
 801de60:	f7ff ff7e 	bl	801dd60 <put_memory>
 801de64:	2000      	movs	r0, #0
 801de66:	bd08      	pop	{r3, pc}
 801de68:	2001      	movs	r0, #1
 801de6a:	bd08      	pop	{r3, pc}
 801de6c:	20016eec 	.word	0x20016eec

0801de70 <create_topic>:
 801de70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de74:	4605      	mov	r5, r0
 801de76:	b084      	sub	sp, #16
 801de78:	4822      	ldr	r0, [pc, #136]	; (801df04 <create_topic+0x94>)
 801de7a:	460f      	mov	r7, r1
 801de7c:	4616      	mov	r6, r2
 801de7e:	f7ff ff5f 	bl	801dd40 <get_memory>
 801de82:	4604      	mov	r4, r0
 801de84:	2800      	cmp	r0, #0
 801de86:	d039      	beq.n	801defc <create_topic+0x8c>
 801de88:	692b      	ldr	r3, [r5, #16]
 801de8a:	2102      	movs	r1, #2
 801de8c:	6884      	ldr	r4, [r0, #8]
 801de8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801de92:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801df0c <create_topic+0x9c>
 801de96:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801de9a:	1c42      	adds	r2, r0, #1
 801de9c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801dea0:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801dea4:	f7f9 fe8a 	bl	8017bbc <uxr_object_id>
 801dea8:	223c      	movs	r2, #60	; 0x3c
 801deaa:	6120      	str	r0, [r4, #16]
 801deac:	4641      	mov	r1, r8
 801deae:	4638      	mov	r0, r7
 801deb0:	f7f9 f85e 	bl	8016f70 <generate_topic_name>
 801deb4:	b1f0      	cbz	r0, 801def4 <create_topic+0x84>
 801deb6:	4f14      	ldr	r7, [pc, #80]	; (801df08 <create_topic+0x98>)
 801deb8:	4630      	mov	r0, r6
 801deba:	2264      	movs	r2, #100	; 0x64
 801debc:	4639      	mov	r1, r7
 801debe:	f7f9 f829 	bl	8016f14 <generate_type_name>
 801dec2:	b1b8      	cbz	r0, 801def4 <create_topic+0x84>
 801dec4:	6928      	ldr	r0, [r5, #16]
 801dec6:	2106      	movs	r1, #6
 801dec8:	696b      	ldr	r3, [r5, #20]
 801deca:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801dece:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ded2:	f8cd 8000 	str.w	r8, [sp]
 801ded6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801deda:	6811      	ldr	r1, [r2, #0]
 801dedc:	6922      	ldr	r2, [r4, #16]
 801dede:	f7f9 fbf1 	bl	80176c4 <uxr_buffer_create_topic_bin>
 801dee2:	4602      	mov	r2, r0
 801dee4:	6928      	ldr	r0, [r5, #16]
 801dee6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801deea:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801deee:	f7f8 ff45 	bl	8016d7c <run_xrce_session>
 801def2:	b918      	cbnz	r0, 801defc <create_topic+0x8c>
 801def4:	4620      	mov	r0, r4
 801def6:	2400      	movs	r4, #0
 801def8:	f7f8 fe32 	bl	8016b60 <rmw_uxrce_fini_topic_memory>
 801defc:	4620      	mov	r0, r4
 801defe:	b004      	add	sp, #16
 801df00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df04:	20016f6c 	.word	0x20016f6c
 801df08:	20017000 	.word	0x20017000
 801df0c:	20016fc4 	.word	0x20016fc4

0801df10 <destroy_topic>:
 801df10:	b538      	push	{r3, r4, r5, lr}
 801df12:	6985      	ldr	r5, [r0, #24]
 801df14:	b1dd      	cbz	r5, 801df4e <destroy_topic+0x3e>
 801df16:	4604      	mov	r4, r0
 801df18:	6928      	ldr	r0, [r5, #16]
 801df1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801df1e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801df22:	6922      	ldr	r2, [r4, #16]
 801df24:	6819      	ldr	r1, [r3, #0]
 801df26:	f7f9 fb4f 	bl	80175c8 <uxr_buffer_delete_entity>
 801df2a:	4602      	mov	r2, r0
 801df2c:	6928      	ldr	r0, [r5, #16]
 801df2e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801df32:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801df36:	f7f8 ff21 	bl	8016d7c <run_xrce_session>
 801df3a:	4603      	mov	r3, r0
 801df3c:	4620      	mov	r0, r4
 801df3e:	2b00      	cmp	r3, #0
 801df40:	bf14      	ite	ne
 801df42:	2400      	movne	r4, #0
 801df44:	2402      	moveq	r4, #2
 801df46:	f7f8 fe0b 	bl	8016b60 <rmw_uxrce_fini_topic_memory>
 801df4a:	4620      	mov	r0, r4
 801df4c:	bd38      	pop	{r3, r4, r5, pc}
 801df4e:	2401      	movs	r4, #1
 801df50:	4620      	mov	r0, r4
 801df52:	bd38      	pop	{r3, r4, r5, pc}

0801df54 <rmw_wait>:
 801df54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801df58:	4698      	mov	r8, r3
 801df5a:	ea40 0301 	orr.w	r3, r0, r1
 801df5e:	b089      	sub	sp, #36	; 0x24
 801df60:	ea48 0303 	orr.w	r3, r8, r3
 801df64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801df66:	4313      	orrs	r3, r2
 801df68:	f000 8106 	beq.w	801e178 <rmw_wait+0x224>
 801df6c:	4605      	mov	r5, r0
 801df6e:	460e      	mov	r6, r1
 801df70:	4691      	mov	r9, r2
 801df72:	b16c      	cbz	r4, 801df90 <rmw_wait+0x3c>
 801df74:	4ba6      	ldr	r3, [pc, #664]	; (801e210 <rmw_wait+0x2bc>)
 801df76:	af04      	add	r7, sp, #16
 801df78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801df7a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801df7e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801df82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801df86:	f7ff fcef 	bl	801d968 <rmw_time_equal>
 801df8a:	2800      	cmp	r0, #0
 801df8c:	f000 810b 	beq.w	801e1a6 <rmw_wait+0x252>
 801df90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801df94:	f7f8 fe74 	bl	8016c80 <rmw_uxrce_clean_expired_static_input_buffer>
 801df98:	4b9e      	ldr	r3, [pc, #632]	; (801e214 <rmw_wait+0x2c0>)
 801df9a:	681c      	ldr	r4, [r3, #0]
 801df9c:	b14c      	cbz	r4, 801dfb2 <rmw_wait+0x5e>
 801df9e:	4623      	mov	r3, r4
 801dfa0:	2100      	movs	r1, #0
 801dfa2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801dfa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801dfaa:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d1f7      	bne.n	801dfa2 <rmw_wait+0x4e>
 801dfb2:	f1b9 0f00 	cmp.w	r9, #0
 801dfb6:	d011      	beq.n	801dfdc <rmw_wait+0x88>
 801dfb8:	f8d9 1000 	ldr.w	r1, [r9]
 801dfbc:	b171      	cbz	r1, 801dfdc <rmw_wait+0x88>
 801dfbe:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	2001      	movs	r0, #1
 801dfc6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801dfca:	3301      	adds	r3, #1
 801dfcc:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801dfce:	4299      	cmp	r1, r3
 801dfd0:	6912      	ldr	r2, [r2, #16]
 801dfd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801dfd6:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801dfda:	d1f4      	bne.n	801dfc6 <rmw_wait+0x72>
 801dfdc:	f1b8 0f00 	cmp.w	r8, #0
 801dfe0:	d011      	beq.n	801e006 <rmw_wait+0xb2>
 801dfe2:	f8d8 1000 	ldr.w	r1, [r8]
 801dfe6:	b171      	cbz	r1, 801e006 <rmw_wait+0xb2>
 801dfe8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801dfec:	2300      	movs	r3, #0
 801dfee:	2001      	movs	r0, #1
 801dff0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801dff4:	3301      	adds	r3, #1
 801dff6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801dff8:	4299      	cmp	r1, r3
 801dffa:	6912      	ldr	r2, [r2, #16]
 801dffc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e000:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e004:	d1f4      	bne.n	801dff0 <rmw_wait+0x9c>
 801e006:	b185      	cbz	r5, 801e02a <rmw_wait+0xd6>
 801e008:	6829      	ldr	r1, [r5, #0]
 801e00a:	b171      	cbz	r1, 801e02a <rmw_wait+0xd6>
 801e00c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e010:	2300      	movs	r3, #0
 801e012:	2001      	movs	r0, #1
 801e014:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e018:	3301      	adds	r3, #1
 801e01a:	6a12      	ldr	r2, [r2, #32]
 801e01c:	4299      	cmp	r1, r3
 801e01e:	6912      	ldr	r2, [r2, #16]
 801e020:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e024:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e028:	d1f4      	bne.n	801e014 <rmw_wait+0xc0>
 801e02a:	b344      	cbz	r4, 801e07e <rmw_wait+0x12a>
 801e02c:	4622      	mov	r2, r4
 801e02e:	2300      	movs	r3, #0
 801e030:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e034:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e038:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e03c:	440b      	add	r3, r1
 801e03e:	b2db      	uxtb	r3, r3
 801e040:	2a00      	cmp	r2, #0
 801e042:	d1f5      	bne.n	801e030 <rmw_wait+0xdc>
 801e044:	2b00      	cmp	r3, #0
 801e046:	d05f      	beq.n	801e108 <rmw_wait+0x1b4>
 801e048:	1c7a      	adds	r2, r7, #1
 801e04a:	d00d      	beq.n	801e068 <rmw_wait+0x114>
 801e04c:	ee07 7a90 	vmov	s15, r7
 801e050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e054:	ee07 3a90 	vmov	s15, r3
 801e058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e05c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e060:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e064:	ee17 7a90 	vmov	r7, s15
 801e068:	68a0      	ldr	r0, [r4, #8]
 801e06a:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801e06e:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801e072:	2b00      	cmp	r3, #0
 801e074:	f040 808d 	bne.w	801e192 <rmw_wait+0x23e>
 801e078:	6864      	ldr	r4, [r4, #4]
 801e07a:	2c00      	cmp	r4, #0
 801e07c:	d1f4      	bne.n	801e068 <rmw_wait+0x114>
 801e07e:	f1b9 0f00 	cmp.w	r9, #0
 801e082:	f000 80a1 	beq.w	801e1c8 <rmw_wait+0x274>
 801e086:	f8d9 7000 	ldr.w	r7, [r9]
 801e08a:	2f00      	cmp	r7, #0
 801e08c:	f000 80a4 	beq.w	801e1d8 <rmw_wait+0x284>
 801e090:	2400      	movs	r4, #0
 801e092:	4627      	mov	r7, r4
 801e094:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e098:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e09c:	f7f8 fdc6 	bl	8016c2c <rmw_uxrce_find_static_input_buffer_by_owner>
 801e0a0:	2800      	cmp	r0, #0
 801e0a2:	d03b      	beq.n	801e11c <rmw_wait+0x1c8>
 801e0a4:	3401      	adds	r4, #1
 801e0a6:	f8d9 3000 	ldr.w	r3, [r9]
 801e0aa:	2701      	movs	r7, #1
 801e0ac:	42a3      	cmp	r3, r4
 801e0ae:	d8f1      	bhi.n	801e094 <rmw_wait+0x140>
 801e0b0:	2701      	movs	r7, #1
 801e0b2:	f1b8 0f00 	cmp.w	r8, #0
 801e0b6:	d010      	beq.n	801e0da <rmw_wait+0x186>
 801e0b8:	f8d8 3000 	ldr.w	r3, [r8]
 801e0bc:	b16b      	cbz	r3, 801e0da <rmw_wait+0x186>
 801e0be:	2400      	movs	r4, #0
 801e0c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e0c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e0c8:	f7f8 fdb0 	bl	8016c2c <rmw_uxrce_find_static_input_buffer_by_owner>
 801e0cc:	b370      	cbz	r0, 801e12c <rmw_wait+0x1d8>
 801e0ce:	3401      	adds	r4, #1
 801e0d0:	f8d8 3000 	ldr.w	r3, [r8]
 801e0d4:	2701      	movs	r7, #1
 801e0d6:	42a3      	cmp	r3, r4
 801e0d8:	d8f2      	bhi.n	801e0c0 <rmw_wait+0x16c>
 801e0da:	2d00      	cmp	r5, #0
 801e0dc:	d035      	beq.n	801e14a <rmw_wait+0x1f6>
 801e0de:	682b      	ldr	r3, [r5, #0]
 801e0e0:	b39b      	cbz	r3, 801e14a <rmw_wait+0x1f6>
 801e0e2:	2400      	movs	r4, #0
 801e0e4:	686b      	ldr	r3, [r5, #4]
 801e0e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e0ea:	f7f8 fd9f 	bl	8016c2c <rmw_uxrce_find_static_input_buffer_by_owner>
 801e0ee:	b328      	cbz	r0, 801e13c <rmw_wait+0x1e8>
 801e0f0:	3401      	adds	r4, #1
 801e0f2:	682b      	ldr	r3, [r5, #0]
 801e0f4:	2701      	movs	r7, #1
 801e0f6:	42a3      	cmp	r3, r4
 801e0f8:	d8f4      	bhi.n	801e0e4 <rmw_wait+0x190>
 801e0fa:	2e00      	cmp	r6, #0
 801e0fc:	d03c      	beq.n	801e178 <rmw_wait+0x224>
 801e0fe:	6834      	ldr	r4, [r6, #0]
 801e100:	2c00      	cmp	r4, #0
 801e102:	d039      	beq.n	801e178 <rmw_wait+0x224>
 801e104:	2701      	movs	r7, #1
 801e106:	e023      	b.n	801e150 <rmw_wait+0x1fc>
 801e108:	68a0      	ldr	r0, [r4, #8]
 801e10a:	2100      	movs	r1, #0
 801e10c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e110:	f7fa fb54 	bl	80187bc <uxr_run_session_timeout>
 801e114:	6864      	ldr	r4, [r4, #4]
 801e116:	2c00      	cmp	r4, #0
 801e118:	d1f6      	bne.n	801e108 <rmw_wait+0x1b4>
 801e11a:	e7b0      	b.n	801e07e <rmw_wait+0x12a>
 801e11c:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e120:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e124:	3401      	adds	r4, #1
 801e126:	42a3      	cmp	r3, r4
 801e128:	d8b4      	bhi.n	801e094 <rmw_wait+0x140>
 801e12a:	e7c2      	b.n	801e0b2 <rmw_wait+0x15e>
 801e12c:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e130:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e134:	3401      	adds	r4, #1
 801e136:	429c      	cmp	r4, r3
 801e138:	d3c2      	bcc.n	801e0c0 <rmw_wait+0x16c>
 801e13a:	e7ce      	b.n	801e0da <rmw_wait+0x186>
 801e13c:	e9d5 3200 	ldrd	r3, r2, [r5]
 801e140:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e144:	3401      	adds	r4, #1
 801e146:	42a3      	cmp	r3, r4
 801e148:	d8cc      	bhi.n	801e0e4 <rmw_wait+0x190>
 801e14a:	b1a6      	cbz	r6, 801e176 <rmw_wait+0x222>
 801e14c:	6834      	ldr	r4, [r6, #0]
 801e14e:	b194      	cbz	r4, 801e176 <rmw_wait+0x222>
 801e150:	2300      	movs	r3, #0
 801e152:	461d      	mov	r5, r3
 801e154:	e004      	b.n	801e160 <rmw_wait+0x20c>
 801e156:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801e15a:	3301      	adds	r3, #1
 801e15c:	42a3      	cmp	r3, r4
 801e15e:	d00a      	beq.n	801e176 <rmw_wait+0x222>
 801e160:	6870      	ldr	r0, [r6, #4]
 801e162:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801e166:	7c0a      	ldrb	r2, [r1, #16]
 801e168:	2a00      	cmp	r2, #0
 801e16a:	d0f4      	beq.n	801e156 <rmw_wait+0x202>
 801e16c:	3301      	adds	r3, #1
 801e16e:	4617      	mov	r7, r2
 801e170:	740d      	strb	r5, [r1, #16]
 801e172:	42a3      	cmp	r3, r4
 801e174:	d1f4      	bne.n	801e160 <rmw_wait+0x20c>
 801e176:	b147      	cbz	r7, 801e18a <rmw_wait+0x236>
 801e178:	2000      	movs	r0, #0
 801e17a:	b009      	add	sp, #36	; 0x24
 801e17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e180:	b11e      	cbz	r6, 801e18a <rmw_wait+0x236>
 801e182:	6834      	ldr	r4, [r6, #0]
 801e184:	462f      	mov	r7, r5
 801e186:	2c00      	cmp	r4, #0
 801e188:	d1e2      	bne.n	801e150 <rmw_wait+0x1fc>
 801e18a:	2002      	movs	r0, #2
 801e18c:	b009      	add	sp, #36	; 0x24
 801e18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e192:	4639      	mov	r1, r7
 801e194:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e198:	f7fa fb2a 	bl	80187f0 <uxr_run_session_until_data>
 801e19c:	6864      	ldr	r4, [r4, #4]
 801e19e:	2c00      	cmp	r4, #0
 801e1a0:	f47f af62 	bne.w	801e068 <rmw_wait+0x114>
 801e1a4:	e76b      	b.n	801e07e <rmw_wait+0x12a>
 801e1a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e1aa:	f7ff fc33 	bl	801da14 <rmw_time_total_nsec>
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	4a19      	ldr	r2, [pc, #100]	; (801e218 <rmw_wait+0x2c4>)
 801e1b2:	f7e2 fab9 	bl	8000728 <__aeabi_uldivmod>
 801e1b6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801e1ba:	4607      	mov	r7, r0
 801e1bc:	f171 0300 	sbcs.w	r3, r1, #0
 801e1c0:	bfa8      	it	ge
 801e1c2:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801e1c6:	e6e5      	b.n	801df94 <rmw_wait+0x40>
 801e1c8:	f1b8 0f00 	cmp.w	r8, #0
 801e1cc:	d00f      	beq.n	801e1ee <rmw_wait+0x29a>
 801e1ce:	f8d8 3000 	ldr.w	r3, [r8]
 801e1d2:	b193      	cbz	r3, 801e1fa <rmw_wait+0x2a6>
 801e1d4:	464f      	mov	r7, r9
 801e1d6:	e772      	b.n	801e0be <rmw_wait+0x16a>
 801e1d8:	f1b8 0f00 	cmp.w	r8, #0
 801e1dc:	d007      	beq.n	801e1ee <rmw_wait+0x29a>
 801e1de:	f8d8 3000 	ldr.w	r3, [r8]
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	f47f af6b 	bne.w	801e0be <rmw_wait+0x16a>
 801e1e8:	b155      	cbz	r5, 801e200 <rmw_wait+0x2ac>
 801e1ea:	461f      	mov	r7, r3
 801e1ec:	e777      	b.n	801e0de <rmw_wait+0x18a>
 801e1ee:	2d00      	cmp	r5, #0
 801e1f0:	d0c6      	beq.n	801e180 <rmw_wait+0x22c>
 801e1f2:	682b      	ldr	r3, [r5, #0]
 801e1f4:	b143      	cbz	r3, 801e208 <rmw_wait+0x2b4>
 801e1f6:	4647      	mov	r7, r8
 801e1f8:	e773      	b.n	801e0e2 <rmw_wait+0x18e>
 801e1fa:	b10d      	cbz	r5, 801e200 <rmw_wait+0x2ac>
 801e1fc:	464f      	mov	r7, r9
 801e1fe:	e76e      	b.n	801e0de <rmw_wait+0x18a>
 801e200:	462f      	mov	r7, r5
 801e202:	2e00      	cmp	r6, #0
 801e204:	d1a2      	bne.n	801e14c <rmw_wait+0x1f8>
 801e206:	e7c0      	b.n	801e18a <rmw_wait+0x236>
 801e208:	4647      	mov	r7, r8
 801e20a:	2e00      	cmp	r6, #0
 801e20c:	d19e      	bne.n	801e14c <rmw_wait+0x1f8>
 801e20e:	e7bc      	b.n	801e18a <rmw_wait+0x236>
 801e210:	080242a0 	.word	0x080242a0
 801e214:	20016f3c 	.word	0x20016f3c
 801e218:	000f4240 	.word	0x000f4240

0801e21c <rmw_create_wait_set>:
 801e21c:	b508      	push	{r3, lr}
 801e21e:	4803      	ldr	r0, [pc, #12]	; (801e22c <rmw_create_wait_set+0x10>)
 801e220:	f7ff fd8e 	bl	801dd40 <get_memory>
 801e224:	b108      	cbz	r0, 801e22a <rmw_create_wait_set+0xe>
 801e226:	6880      	ldr	r0, [r0, #8]
 801e228:	3010      	adds	r0, #16
 801e22a:	bd08      	pop	{r3, pc}
 801e22c:	20016f7c 	.word	0x20016f7c

0801e230 <rmw_destroy_wait_set>:
 801e230:	b508      	push	{r3, lr}
 801e232:	4b08      	ldr	r3, [pc, #32]	; (801e254 <rmw_destroy_wait_set+0x24>)
 801e234:	6819      	ldr	r1, [r3, #0]
 801e236:	b911      	cbnz	r1, 801e23e <rmw_destroy_wait_set+0xe>
 801e238:	e00a      	b.n	801e250 <rmw_destroy_wait_set+0x20>
 801e23a:	6849      	ldr	r1, [r1, #4]
 801e23c:	b141      	cbz	r1, 801e250 <rmw_destroy_wait_set+0x20>
 801e23e:	688b      	ldr	r3, [r1, #8]
 801e240:	3310      	adds	r3, #16
 801e242:	4298      	cmp	r0, r3
 801e244:	d1f9      	bne.n	801e23a <rmw_destroy_wait_set+0xa>
 801e246:	4803      	ldr	r0, [pc, #12]	; (801e254 <rmw_destroy_wait_set+0x24>)
 801e248:	f7ff fd8a 	bl	801dd60 <put_memory>
 801e24c:	2000      	movs	r0, #0
 801e24e:	bd08      	pop	{r3, pc}
 801e250:	2001      	movs	r0, #1
 801e252:	bd08      	pop	{r3, pc}
 801e254:	20016f7c 	.word	0x20016f7c

0801e258 <rmw_uros_epoch_nanos>:
 801e258:	4b05      	ldr	r3, [pc, #20]	; (801e270 <rmw_uros_epoch_nanos+0x18>)
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	b123      	cbz	r3, 801e268 <rmw_uros_epoch_nanos+0x10>
 801e25e:	6898      	ldr	r0, [r3, #8]
 801e260:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e264:	f7f9 bf20 	b.w	80180a8 <uxr_epoch_nanos>
 801e268:	2000      	movs	r0, #0
 801e26a:	2100      	movs	r1, #0
 801e26c:	4770      	bx	lr
 801e26e:	bf00      	nop
 801e270:	20016f3c 	.word	0x20016f3c

0801e274 <std_msgs__msg__String__init>:
 801e274:	b538      	push	{r3, r4, r5, lr}
 801e276:	4604      	mov	r4, r0
 801e278:	b128      	cbz	r0, 801e286 <std_msgs__msg__String__init+0x12>
 801e27a:	f7f8 feb7 	bl	8016fec <rosidl_runtime_c__String__init>
 801e27e:	4605      	mov	r5, r0
 801e280:	b120      	cbz	r0, 801e28c <std_msgs__msg__String__init+0x18>
 801e282:	4628      	mov	r0, r5
 801e284:	bd38      	pop	{r3, r4, r5, pc}
 801e286:	4605      	mov	r5, r0
 801e288:	4628      	mov	r0, r5
 801e28a:	bd38      	pop	{r3, r4, r5, pc}
 801e28c:	4620      	mov	r0, r4
 801e28e:	f7f8 fec3 	bl	8017018 <rosidl_runtime_c__String__fini>
 801e292:	4628      	mov	r0, r5
 801e294:	bd38      	pop	{r3, r4, r5, pc}
 801e296:	bf00      	nop

0801e298 <std_msgs__msg__String__fini>:
 801e298:	b108      	cbz	r0, 801e29e <std_msgs__msg__String__fini+0x6>
 801e29a:	f7f8 bebd 	b.w	8017018 <rosidl_runtime_c__String__fini>
 801e29e:	4770      	bx	lr

0801e2a0 <ucdr_serialize_string>:
 801e2a0:	b510      	push	{r4, lr}
 801e2a2:	b082      	sub	sp, #8
 801e2a4:	4604      	mov	r4, r0
 801e2a6:	4608      	mov	r0, r1
 801e2a8:	9101      	str	r1, [sp, #4]
 801e2aa:	f7e2 f829 	bl	8000300 <strlen>
 801e2ae:	4602      	mov	r2, r0
 801e2b0:	9901      	ldr	r1, [sp, #4]
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	3201      	adds	r2, #1
 801e2b6:	b002      	add	sp, #8
 801e2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2bc:	f7f4 bf38 	b.w	8013130 <ucdr_serialize_sequence_char>

0801e2c0 <ucdr_deserialize_string>:
 801e2c0:	b500      	push	{lr}
 801e2c2:	b083      	sub	sp, #12
 801e2c4:	ab01      	add	r3, sp, #4
 801e2c6:	f7f4 ff45 	bl	8013154 <ucdr_deserialize_sequence_char>
 801e2ca:	b003      	add	sp, #12
 801e2cc:	f85d fb04 	ldr.w	pc, [sp], #4

0801e2d0 <uxr_init_input_best_effort_stream>:
 801e2d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e2d4:	8003      	strh	r3, [r0, #0]
 801e2d6:	4770      	bx	lr

0801e2d8 <uxr_reset_input_best_effort_stream>:
 801e2d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e2dc:	8003      	strh	r3, [r0, #0]
 801e2de:	4770      	bx	lr

0801e2e0 <uxr_receive_best_effort_message>:
 801e2e0:	b538      	push	{r3, r4, r5, lr}
 801e2e2:	4604      	mov	r4, r0
 801e2e4:	8800      	ldrh	r0, [r0, #0]
 801e2e6:	460d      	mov	r5, r1
 801e2e8:	f000 fd46 	bl	801ed78 <uxr_seq_num_cmp>
 801e2ec:	4603      	mov	r3, r0
 801e2ee:	0fc0      	lsrs	r0, r0, #31
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	bfb8      	it	lt
 801e2f4:	8025      	strhlt	r5, [r4, #0]
 801e2f6:	bd38      	pop	{r3, r4, r5, pc}

0801e2f8 <on_full_input_buffer>:
 801e2f8:	b570      	push	{r4, r5, r6, lr}
 801e2fa:	460c      	mov	r4, r1
 801e2fc:	4605      	mov	r5, r0
 801e2fe:	8908      	ldrh	r0, [r1, #8]
 801e300:	682b      	ldr	r3, [r5, #0]
 801e302:	7d26      	ldrb	r6, [r4, #20]
 801e304:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e308:	fbb2 f2f0 	udiv	r2, r2, r0
 801e30c:	eba3 0c01 	sub.w	ip, r3, r1
 801e310:	fbbc fcf2 	udiv	ip, ip, r2
 801e314:	f10c 0c01 	add.w	ip, ip, #1
 801e318:	fa1f f38c 	uxth.w	r3, ip
 801e31c:	fbb3 fcf0 	udiv	ip, r3, r0
 801e320:	fb00 331c 	mls	r3, r0, ip, r3
 801e324:	b29b      	uxth	r3, r3
 801e326:	fb02 f303 	mul.w	r3, r2, r3
 801e32a:	1d18      	adds	r0, r3, #4
 801e32c:	4408      	add	r0, r1
 801e32e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e332:	b116      	cbz	r6, 801e33a <on_full_input_buffer+0x42>
 801e334:	2600      	movs	r6, #0
 801e336:	f840 6c04 	str.w	r6, [r0, #-4]
 801e33a:	2a03      	cmp	r2, #3
 801e33c:	d801      	bhi.n	801e342 <on_full_input_buffer+0x4a>
 801e33e:	2001      	movs	r0, #1
 801e340:	bd70      	pop	{r4, r5, r6, pc}
 801e342:	3308      	adds	r3, #8
 801e344:	4628      	mov	r0, r5
 801e346:	3a04      	subs	r2, #4
 801e348:	4419      	add	r1, r3
 801e34a:	692b      	ldr	r3, [r5, #16]
 801e34c:	f7f4 fe74 	bl	8013038 <ucdr_init_buffer_origin>
 801e350:	4628      	mov	r0, r5
 801e352:	4622      	mov	r2, r4
 801e354:	4902      	ldr	r1, [pc, #8]	; (801e360 <on_full_input_buffer+0x68>)
 801e356:	f7f4 fe4b 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 801e35a:	2000      	movs	r0, #0
 801e35c:	bd70      	pop	{r4, r5, r6, pc}
 801e35e:	bf00      	nop
 801e360:	0801e2f9 	.word	0x0801e2f9

0801e364 <uxr_init_input_reliable_stream>:
 801e364:	b510      	push	{r4, lr}
 801e366:	e9c0 1200 	strd	r1, r2, [r0]
 801e36a:	2400      	movs	r4, #0
 801e36c:	9a02      	ldr	r2, [sp, #8]
 801e36e:	8103      	strh	r3, [r0, #8]
 801e370:	6102      	str	r2, [r0, #16]
 801e372:	7504      	strb	r4, [r0, #20]
 801e374:	b1c3      	cbz	r3, 801e3a8 <uxr_init_input_reliable_stream+0x44>
 801e376:	600c      	str	r4, [r1, #0]
 801e378:	8901      	ldrh	r1, [r0, #8]
 801e37a:	2901      	cmp	r1, #1
 801e37c:	d914      	bls.n	801e3a8 <uxr_init_input_reliable_stream+0x44>
 801e37e:	f04f 0c01 	mov.w	ip, #1
 801e382:	6843      	ldr	r3, [r0, #4]
 801e384:	f10c 0e01 	add.w	lr, ip, #1
 801e388:	fbbc f2f1 	udiv	r2, ip, r1
 801e38c:	fbb3 f3f1 	udiv	r3, r3, r1
 801e390:	fb01 c212 	mls	r2, r1, r2, ip
 801e394:	fa1f fc8e 	uxth.w	ip, lr
 801e398:	b292      	uxth	r2, r2
 801e39a:	fb02 f303 	mul.w	r3, r2, r3
 801e39e:	6802      	ldr	r2, [r0, #0]
 801e3a0:	50d4      	str	r4, [r2, r3]
 801e3a2:	8901      	ldrh	r1, [r0, #8]
 801e3a4:	4561      	cmp	r1, ip
 801e3a6:	d8ec      	bhi.n	801e382 <uxr_init_input_reliable_stream+0x1e>
 801e3a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e3ac:	60c3      	str	r3, [r0, #12]
 801e3ae:	bd10      	pop	{r4, pc}

0801e3b0 <uxr_reset_input_reliable_stream>:
 801e3b0:	8901      	ldrh	r1, [r0, #8]
 801e3b2:	b1d9      	cbz	r1, 801e3ec <uxr_reset_input_reliable_stream+0x3c>
 801e3b4:	b510      	push	{r4, lr}
 801e3b6:	f04f 0e00 	mov.w	lr, #0
 801e3ba:	46f4      	mov	ip, lr
 801e3bc:	4674      	mov	r4, lr
 801e3be:	6843      	ldr	r3, [r0, #4]
 801e3c0:	f10e 0e01 	add.w	lr, lr, #1
 801e3c4:	fbbc f2f1 	udiv	r2, ip, r1
 801e3c8:	fbb3 f3f1 	udiv	r3, r3, r1
 801e3cc:	fb01 c212 	mls	r2, r1, r2, ip
 801e3d0:	fa1f fc8e 	uxth.w	ip, lr
 801e3d4:	b292      	uxth	r2, r2
 801e3d6:	fb02 f303 	mul.w	r3, r2, r3
 801e3da:	6802      	ldr	r2, [r0, #0]
 801e3dc:	50d4      	str	r4, [r2, r3]
 801e3de:	8901      	ldrh	r1, [r0, #8]
 801e3e0:	4561      	cmp	r1, ip
 801e3e2:	d8ec      	bhi.n	801e3be <uxr_reset_input_reliable_stream+0xe>
 801e3e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e3e8:	60c3      	str	r3, [r0, #12]
 801e3ea:	bd10      	pop	{r4, pc}
 801e3ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e3f0:	60c3      	str	r3, [r0, #12]
 801e3f2:	4770      	bx	lr

0801e3f4 <uxr_receive_reliable_message>:
 801e3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e3f8:	4604      	mov	r4, r0
 801e3fa:	460d      	mov	r5, r1
 801e3fc:	8901      	ldrh	r1, [r0, #8]
 801e3fe:	4617      	mov	r7, r2
 801e400:	8980      	ldrh	r0, [r0, #12]
 801e402:	4698      	mov	r8, r3
 801e404:	f000 fcb0 	bl	801ed68 <uxr_seq_num_add>
 801e408:	4629      	mov	r1, r5
 801e40a:	4606      	mov	r6, r0
 801e40c:	89a0      	ldrh	r0, [r4, #12]
 801e40e:	f000 fcb3 	bl	801ed78 <uxr_seq_num_cmp>
 801e412:	2800      	cmp	r0, #0
 801e414:	db0a      	blt.n	801e42c <uxr_receive_reliable_message+0x38>
 801e416:	2600      	movs	r6, #0
 801e418:	4629      	mov	r1, r5
 801e41a:	89e0      	ldrh	r0, [r4, #14]
 801e41c:	f000 fcac 	bl	801ed78 <uxr_seq_num_cmp>
 801e420:	2800      	cmp	r0, #0
 801e422:	da00      	bge.n	801e426 <uxr_receive_reliable_message+0x32>
 801e424:	81e5      	strh	r5, [r4, #14]
 801e426:	4630      	mov	r0, r6
 801e428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e42c:	4630      	mov	r0, r6
 801e42e:	4629      	mov	r1, r5
 801e430:	f000 fca2 	bl	801ed78 <uxr_seq_num_cmp>
 801e434:	2800      	cmp	r0, #0
 801e436:	dbee      	blt.n	801e416 <uxr_receive_reliable_message+0x22>
 801e438:	6923      	ldr	r3, [r4, #16]
 801e43a:	4638      	mov	r0, r7
 801e43c:	4798      	blx	r3
 801e43e:	4681      	mov	r9, r0
 801e440:	2101      	movs	r1, #1
 801e442:	89a0      	ldrh	r0, [r4, #12]
 801e444:	f000 fc90 	bl	801ed68 <uxr_seq_num_add>
 801e448:	f1b9 0f00 	cmp.w	r9, #0
 801e44c:	bf08      	it	eq
 801e44e:	4285      	cmpeq	r5, r0
 801e450:	bf0c      	ite	eq
 801e452:	2601      	moveq	r6, #1
 801e454:	2600      	movne	r6, #0
 801e456:	d104      	bne.n	801e462 <uxr_receive_reliable_message+0x6e>
 801e458:	2300      	movs	r3, #0
 801e45a:	9a08      	ldr	r2, [sp, #32]
 801e45c:	81a0      	strh	r0, [r4, #12]
 801e45e:	7013      	strb	r3, [r2, #0]
 801e460:	e7da      	b.n	801e418 <uxr_receive_reliable_message+0x24>
 801e462:	8922      	ldrh	r2, [r4, #8]
 801e464:	6863      	ldr	r3, [r4, #4]
 801e466:	fbb5 f0f2 	udiv	r0, r5, r2
 801e46a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e46e:	fb02 5010 	mls	r0, r2, r0, r5
 801e472:	b280      	uxth	r0, r0
 801e474:	fb03 f000 	mul.w	r0, r3, r0
 801e478:	6823      	ldr	r3, [r4, #0]
 801e47a:	3004      	adds	r0, #4
 801e47c:	4418      	add	r0, r3
 801e47e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e482:	2b00      	cmp	r3, #0
 801e484:	d1c7      	bne.n	801e416 <uxr_receive_reliable_message+0x22>
 801e486:	4639      	mov	r1, r7
 801e488:	4642      	mov	r2, r8
 801e48a:	f002 fc14 	bl	8020cb6 <memcpy>
 801e48e:	8921      	ldrh	r1, [r4, #8]
 801e490:	6863      	ldr	r3, [r4, #4]
 801e492:	fbb5 f2f1 	udiv	r2, r5, r1
 801e496:	fbb3 f3f1 	udiv	r3, r3, r1
 801e49a:	fb01 5212 	mls	r2, r1, r2, r5
 801e49e:	b292      	uxth	r2, r2
 801e4a0:	fb02 f303 	mul.w	r3, r2, r3
 801e4a4:	6822      	ldr	r2, [r4, #0]
 801e4a6:	f842 8003 	str.w	r8, [r2, r3]
 801e4aa:	2301      	movs	r3, #1
 801e4ac:	9a08      	ldr	r2, [sp, #32]
 801e4ae:	7013      	strb	r3, [r2, #0]
 801e4b0:	f1b9 0f00 	cmp.w	r9, #0
 801e4b4:	d0af      	beq.n	801e416 <uxr_receive_reliable_message+0x22>
 801e4b6:	89a6      	ldrh	r6, [r4, #12]
 801e4b8:	2101      	movs	r1, #1
 801e4ba:	4630      	mov	r0, r6
 801e4bc:	f000 fc54 	bl	801ed68 <uxr_seq_num_add>
 801e4c0:	8921      	ldrh	r1, [r4, #8]
 801e4c2:	6863      	ldr	r3, [r4, #4]
 801e4c4:	4606      	mov	r6, r0
 801e4c6:	fbb0 f2f1 	udiv	r2, r0, r1
 801e4ca:	fbb3 f3f1 	udiv	r3, r3, r1
 801e4ce:	fb01 0212 	mls	r2, r1, r2, r0
 801e4d2:	6820      	ldr	r0, [r4, #0]
 801e4d4:	b292      	uxth	r2, r2
 801e4d6:	fb02 f303 	mul.w	r3, r2, r3
 801e4da:	3304      	adds	r3, #4
 801e4dc:	4418      	add	r0, r3
 801e4de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d097      	beq.n	801e416 <uxr_receive_reliable_message+0x22>
 801e4e6:	6923      	ldr	r3, [r4, #16]
 801e4e8:	4798      	blx	r3
 801e4ea:	2802      	cmp	r0, #2
 801e4ec:	d002      	beq.n	801e4f4 <uxr_receive_reliable_message+0x100>
 801e4ee:	2801      	cmp	r0, #1
 801e4f0:	d0e2      	beq.n	801e4b8 <uxr_receive_reliable_message+0xc4>
 801e4f2:	e790      	b.n	801e416 <uxr_receive_reliable_message+0x22>
 801e4f4:	2601      	movs	r6, #1
 801e4f6:	e78f      	b.n	801e418 <uxr_receive_reliable_message+0x24>

0801e4f8 <uxr_next_input_reliable_buffer_available>:
 801e4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e4fc:	4604      	mov	r4, r0
 801e4fe:	460f      	mov	r7, r1
 801e500:	8980      	ldrh	r0, [r0, #12]
 801e502:	2101      	movs	r1, #1
 801e504:	4690      	mov	r8, r2
 801e506:	f000 fc2f 	bl	801ed68 <uxr_seq_num_add>
 801e50a:	8922      	ldrh	r2, [r4, #8]
 801e50c:	6866      	ldr	r6, [r4, #4]
 801e50e:	fbb0 f3f2 	udiv	r3, r0, r2
 801e512:	fbb6 f6f2 	udiv	r6, r6, r2
 801e516:	fb02 0313 	mls	r3, r2, r3, r0
 801e51a:	b29b      	uxth	r3, r3
 801e51c:	fb03 f606 	mul.w	r6, r3, r6
 801e520:	6823      	ldr	r3, [r4, #0]
 801e522:	3604      	adds	r6, #4
 801e524:	441e      	add	r6, r3
 801e526:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e52a:	f1b9 0f00 	cmp.w	r9, #0
 801e52e:	d023      	beq.n	801e578 <uxr_next_input_reliable_buffer_available+0x80>
 801e530:	4605      	mov	r5, r0
 801e532:	6923      	ldr	r3, [r4, #16]
 801e534:	4630      	mov	r0, r6
 801e536:	4798      	blx	r3
 801e538:	4682      	mov	sl, r0
 801e53a:	b300      	cbz	r0, 801e57e <uxr_next_input_reliable_buffer_available+0x86>
 801e53c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e540:	2101      	movs	r1, #1
 801e542:	4650      	mov	r0, sl
 801e544:	f000 fc10 	bl	801ed68 <uxr_seq_num_add>
 801e548:	8921      	ldrh	r1, [r4, #8]
 801e54a:	4682      	mov	sl, r0
 801e54c:	6863      	ldr	r3, [r4, #4]
 801e54e:	6820      	ldr	r0, [r4, #0]
 801e550:	fbba f2f1 	udiv	r2, sl, r1
 801e554:	fbb3 f3f1 	udiv	r3, r3, r1
 801e558:	fb01 a212 	mls	r2, r1, r2, sl
 801e55c:	b292      	uxth	r2, r2
 801e55e:	fb02 f303 	mul.w	r3, r2, r3
 801e562:	3304      	adds	r3, #4
 801e564:	4418      	add	r0, r3
 801e566:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e56a:	b12b      	cbz	r3, 801e578 <uxr_next_input_reliable_buffer_available+0x80>
 801e56c:	6923      	ldr	r3, [r4, #16]
 801e56e:	4798      	blx	r3
 801e570:	2802      	cmp	r0, #2
 801e572:	d01b      	beq.n	801e5ac <uxr_next_input_reliable_buffer_available+0xb4>
 801e574:	2801      	cmp	r0, #1
 801e576:	d0e3      	beq.n	801e540 <uxr_next_input_reliable_buffer_available+0x48>
 801e578:	2000      	movs	r0, #0
 801e57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e57e:	464a      	mov	r2, r9
 801e580:	4631      	mov	r1, r6
 801e582:	4638      	mov	r0, r7
 801e584:	f7f4 fd60 	bl	8013048 <ucdr_init_buffer>
 801e588:	8921      	ldrh	r1, [r4, #8]
 801e58a:	6863      	ldr	r3, [r4, #4]
 801e58c:	2001      	movs	r0, #1
 801e58e:	fbb5 f2f1 	udiv	r2, r5, r1
 801e592:	fbb3 f3f1 	udiv	r3, r3, r1
 801e596:	fb01 5212 	mls	r2, r1, r2, r5
 801e59a:	b292      	uxth	r2, r2
 801e59c:	fb02 f303 	mul.w	r3, r2, r3
 801e5a0:	6822      	ldr	r2, [r4, #0]
 801e5a2:	f842 a003 	str.w	sl, [r2, r3]
 801e5a6:	81a5      	strh	r5, [r4, #12]
 801e5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5ac:	8920      	ldrh	r0, [r4, #8]
 801e5ae:	eb06 0108 	add.w	r1, r6, r8
 801e5b2:	6863      	ldr	r3, [r4, #4]
 801e5b4:	eba9 0208 	sub.w	r2, r9, r8
 801e5b8:	fbb5 f6f0 	udiv	r6, r5, r0
 801e5bc:	fbb3 f3f0 	udiv	r3, r3, r0
 801e5c0:	fb00 5516 	mls	r5, r0, r6, r5
 801e5c4:	2000      	movs	r0, #0
 801e5c6:	b2ad      	uxth	r5, r5
 801e5c8:	fb03 f505 	mul.w	r5, r3, r5
 801e5cc:	6823      	ldr	r3, [r4, #0]
 801e5ce:	5158      	str	r0, [r3, r5]
 801e5d0:	4638      	mov	r0, r7
 801e5d2:	f7f4 fd39 	bl	8013048 <ucdr_init_buffer>
 801e5d6:	4638      	mov	r0, r7
 801e5d8:	4622      	mov	r2, r4
 801e5da:	4903      	ldr	r1, [pc, #12]	; (801e5e8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801e5dc:	f7f4 fd08 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 801e5e0:	2001      	movs	r0, #1
 801e5e2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801e5e6:	e7c8      	b.n	801e57a <uxr_next_input_reliable_buffer_available+0x82>
 801e5e8:	0801e2f9 	.word	0x0801e2f9

0801e5ec <uxr_process_heartbeat>:
 801e5ec:	b538      	push	{r3, r4, r5, lr}
 801e5ee:	4611      	mov	r1, r2
 801e5f0:	4604      	mov	r4, r0
 801e5f2:	89c0      	ldrh	r0, [r0, #14]
 801e5f4:	4615      	mov	r5, r2
 801e5f6:	f000 fbbf 	bl	801ed78 <uxr_seq_num_cmp>
 801e5fa:	2800      	cmp	r0, #0
 801e5fc:	bfb8      	it	lt
 801e5fe:	81e5      	strhlt	r5, [r4, #14]
 801e600:	bd38      	pop	{r3, r4, r5, pc}
 801e602:	bf00      	nop

0801e604 <uxr_compute_acknack>:
 801e604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e608:	8903      	ldrh	r3, [r0, #8]
 801e60a:	4604      	mov	r4, r0
 801e60c:	460f      	mov	r7, r1
 801e60e:	8985      	ldrh	r5, [r0, #12]
 801e610:	b1db      	cbz	r3, 801e64a <uxr_compute_acknack+0x46>
 801e612:	4628      	mov	r0, r5
 801e614:	2601      	movs	r6, #1
 801e616:	e004      	b.n	801e622 <uxr_compute_acknack+0x1e>
 801e618:	4566      	cmp	r6, ip
 801e61a:	f106 0601 	add.w	r6, r6, #1
 801e61e:	d214      	bcs.n	801e64a <uxr_compute_acknack+0x46>
 801e620:	89a0      	ldrh	r0, [r4, #12]
 801e622:	b2b1      	uxth	r1, r6
 801e624:	f000 fba0 	bl	801ed68 <uxr_seq_num_add>
 801e628:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e62c:	fbb0 f2fc 	udiv	r2, r0, ip
 801e630:	e9d4 1300 	ldrd	r1, r3, [r4]
 801e634:	fb0c 0212 	mls	r2, ip, r2, r0
 801e638:	fbb3 f3fc 	udiv	r3, r3, ip
 801e63c:	b292      	uxth	r2, r2
 801e63e:	fb02 f303 	mul.w	r3, r2, r3
 801e642:	58cb      	ldr	r3, [r1, r3]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d1e7      	bne.n	801e618 <uxr_compute_acknack+0x14>
 801e648:	4605      	mov	r5, r0
 801e64a:	803d      	strh	r5, [r7, #0]
 801e64c:	2101      	movs	r1, #1
 801e64e:	89e6      	ldrh	r6, [r4, #14]
 801e650:	4628      	mov	r0, r5
 801e652:	f000 fb8d 	bl	801ed70 <uxr_seq_num_sub>
 801e656:	4601      	mov	r1, r0
 801e658:	4630      	mov	r0, r6
 801e65a:	f000 fb89 	bl	801ed70 <uxr_seq_num_sub>
 801e65e:	4606      	mov	r6, r0
 801e660:	b328      	cbz	r0, 801e6ae <uxr_compute_acknack+0xaa>
 801e662:	f04f 0900 	mov.w	r9, #0
 801e666:	f04f 0801 	mov.w	r8, #1
 801e66a:	464d      	mov	r5, r9
 801e66c:	fa1f f189 	uxth.w	r1, r9
 801e670:	8838      	ldrh	r0, [r7, #0]
 801e672:	f000 fb79 	bl	801ed68 <uxr_seq_num_add>
 801e676:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e67a:	6861      	ldr	r1, [r4, #4]
 801e67c:	fa08 fe09 	lsl.w	lr, r8, r9
 801e680:	6822      	ldr	r2, [r4, #0]
 801e682:	f109 0901 	add.w	r9, r9, #1
 801e686:	ea4e 0e05 	orr.w	lr, lr, r5
 801e68a:	fbb0 f3fc 	udiv	r3, r0, ip
 801e68e:	fbb1 f1fc 	udiv	r1, r1, ip
 801e692:	fb03 001c 	mls	r0, r3, ip, r0
 801e696:	b283      	uxth	r3, r0
 801e698:	fb01 f303 	mul.w	r3, r1, r3
 801e69c:	58d3      	ldr	r3, [r2, r3]
 801e69e:	b90b      	cbnz	r3, 801e6a4 <uxr_compute_acknack+0xa0>
 801e6a0:	fa1f f58e 	uxth.w	r5, lr
 801e6a4:	454e      	cmp	r6, r9
 801e6a6:	d1e1      	bne.n	801e66c <uxr_compute_acknack+0x68>
 801e6a8:	4628      	mov	r0, r5
 801e6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e6ae:	4605      	mov	r5, r0
 801e6b0:	4628      	mov	r0, r5
 801e6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e6b6:	bf00      	nop

0801e6b8 <uxr_init_output_best_effort_stream>:
 801e6b8:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801e6bc:	6001      	str	r1, [r0, #0]
 801e6be:	7303      	strb	r3, [r0, #12]
 801e6c0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801e6c4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801e6c8:	4770      	bx	lr
 801e6ca:	bf00      	nop

0801e6cc <uxr_reset_output_best_effort_stream>:
 801e6cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e6d0:	7b03      	ldrb	r3, [r0, #12]
 801e6d2:	81c2      	strh	r2, [r0, #14]
 801e6d4:	6043      	str	r3, [r0, #4]
 801e6d6:	4770      	bx	lr

0801e6d8 <uxr_prepare_best_effort_buffer_to_write>:
 801e6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6da:	4604      	mov	r4, r0
 801e6dc:	b083      	sub	sp, #12
 801e6de:	6840      	ldr	r0, [r0, #4]
 801e6e0:	460d      	mov	r5, r1
 801e6e2:	4616      	mov	r6, r2
 801e6e4:	f7fb fa5c 	bl	8019ba0 <uxr_submessage_padding>
 801e6e8:	6863      	ldr	r3, [r4, #4]
 801e6ea:	4418      	add	r0, r3
 801e6ec:	68a3      	ldr	r3, [r4, #8]
 801e6ee:	1942      	adds	r2, r0, r5
 801e6f0:	4293      	cmp	r3, r2
 801e6f2:	bf2c      	ite	cs
 801e6f4:	2701      	movcs	r7, #1
 801e6f6:	2700      	movcc	r7, #0
 801e6f8:	d202      	bcs.n	801e700 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801e6fa:	4638      	mov	r0, r7
 801e6fc:	b003      	add	sp, #12
 801e6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e700:	9000      	str	r0, [sp, #0]
 801e702:	2300      	movs	r3, #0
 801e704:	4630      	mov	r0, r6
 801e706:	6821      	ldr	r1, [r4, #0]
 801e708:	f7f4 fc8c 	bl	8013024 <ucdr_init_buffer_origin_offset>
 801e70c:	6861      	ldr	r1, [r4, #4]
 801e70e:	4638      	mov	r0, r7
 801e710:	4429      	add	r1, r5
 801e712:	6061      	str	r1, [r4, #4]
 801e714:	b003      	add	sp, #12
 801e716:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e718 <uxr_prepare_best_effort_buffer_to_send>:
 801e718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e71c:	4604      	mov	r4, r0
 801e71e:	461d      	mov	r5, r3
 801e720:	6840      	ldr	r0, [r0, #4]
 801e722:	7b23      	ldrb	r3, [r4, #12]
 801e724:	4298      	cmp	r0, r3
 801e726:	bf8c      	ite	hi
 801e728:	2601      	movhi	r6, #1
 801e72a:	2600      	movls	r6, #0
 801e72c:	d802      	bhi.n	801e734 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801e72e:	4630      	mov	r0, r6
 801e730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e734:	4688      	mov	r8, r1
 801e736:	89e0      	ldrh	r0, [r4, #14]
 801e738:	2101      	movs	r1, #1
 801e73a:	4617      	mov	r7, r2
 801e73c:	f000 fb14 	bl	801ed68 <uxr_seq_num_add>
 801e740:	6823      	ldr	r3, [r4, #0]
 801e742:	81e0      	strh	r0, [r4, #14]
 801e744:	8028      	strh	r0, [r5, #0]
 801e746:	4630      	mov	r0, r6
 801e748:	f8c8 3000 	str.w	r3, [r8]
 801e74c:	6863      	ldr	r3, [r4, #4]
 801e74e:	603b      	str	r3, [r7, #0]
 801e750:	7b23      	ldrb	r3, [r4, #12]
 801e752:	6063      	str	r3, [r4, #4]
 801e754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e758 <on_full_output_buffer>:
 801e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e75a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801e75e:	460c      	mov	r4, r1
 801e760:	6803      	ldr	r3, [r0, #0]
 801e762:	4605      	mov	r5, r0
 801e764:	7b26      	ldrb	r6, [r4, #12]
 801e766:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e76a:	fbb2 f2fc 	udiv	r2, r2, ip
 801e76e:	eba3 0e01 	sub.w	lr, r3, r1
 801e772:	6903      	ldr	r3, [r0, #16]
 801e774:	fbbe fef2 	udiv	lr, lr, r2
 801e778:	f10e 0e01 	add.w	lr, lr, #1
 801e77c:	fa1f fe8e 	uxth.w	lr, lr
 801e780:	fbbe f7fc 	udiv	r7, lr, ip
 801e784:	fb0c ec17 	mls	ip, ip, r7, lr
 801e788:	fa1f fc8c 	uxth.w	ip, ip
 801e78c:	fb02 fc0c 	mul.w	ip, r2, ip
 801e790:	f851 200c 	ldr.w	r2, [r1, ip]
 801e794:	44b4      	add	ip, r6
 801e796:	1b92      	subs	r2, r2, r6
 801e798:	f10c 0c08 	add.w	ip, ip, #8
 801e79c:	3a04      	subs	r2, #4
 801e79e:	4461      	add	r1, ip
 801e7a0:	f7f4 fc4a 	bl	8013038 <ucdr_init_buffer_origin>
 801e7a4:	4628      	mov	r0, r5
 801e7a6:	4622      	mov	r2, r4
 801e7a8:	4902      	ldr	r1, [pc, #8]	; (801e7b4 <on_full_output_buffer+0x5c>)
 801e7aa:	f7f4 fc21 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 801e7ae:	2000      	movs	r0, #0
 801e7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7b2:	bf00      	nop
 801e7b4:	0801e759 	.word	0x0801e759

0801e7b8 <uxr_init_output_reliable_stream>:
 801e7b8:	b530      	push	{r4, r5, lr}
 801e7ba:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801e7be:	8103      	strh	r3, [r0, #8]
 801e7c0:	7304      	strb	r4, [r0, #12]
 801e7c2:	e9c0 1200 	strd	r1, r2, [r0]
 801e7c6:	b1e3      	cbz	r3, 801e802 <uxr_init_output_reliable_stream+0x4a>
 801e7c8:	600c      	str	r4, [r1, #0]
 801e7ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e7ce:	f1bc 0f01 	cmp.w	ip, #1
 801e7d2:	d916      	bls.n	801e802 <uxr_init_output_reliable_stream+0x4a>
 801e7d4:	f04f 0e01 	mov.w	lr, #1
 801e7d8:	6843      	ldr	r3, [r0, #4]
 801e7da:	f10e 0501 	add.w	r5, lr, #1
 801e7de:	7b04      	ldrb	r4, [r0, #12]
 801e7e0:	6801      	ldr	r1, [r0, #0]
 801e7e2:	fbbe f2fc 	udiv	r2, lr, ip
 801e7e6:	fbb3 f3fc 	udiv	r3, r3, ip
 801e7ea:	fb0c e212 	mls	r2, ip, r2, lr
 801e7ee:	fa1f fe85 	uxth.w	lr, r5
 801e7f2:	b292      	uxth	r2, r2
 801e7f4:	fb02 f303 	mul.w	r3, r2, r3
 801e7f8:	50cc      	str	r4, [r1, r3]
 801e7fa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e7fe:	45f4      	cmp	ip, lr
 801e800:	d8ea      	bhi.n	801e7d8 <uxr_init_output_reliable_stream+0x20>
 801e802:	4b07      	ldr	r3, [pc, #28]	; (801e820 <uxr_init_output_reliable_stream+0x68>)
 801e804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e808:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e80c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801e810:	f8c0 300e 	str.w	r3, [r0, #14]
 801e814:	2300      	movs	r3, #0
 801e816:	8242      	strh	r2, [r0, #18]
 801e818:	8403      	strh	r3, [r0, #32]
 801e81a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801e81e:	bd30      	pop	{r4, r5, pc}
 801e820:	ffff0000 	.word	0xffff0000
 801e824:	00000000 	.word	0x00000000

0801e828 <uxr_reset_output_reliable_stream>:
 801e828:	8901      	ldrh	r1, [r0, #8]
 801e82a:	b510      	push	{r4, lr}
 801e82c:	b1b1      	cbz	r1, 801e85c <uxr_reset_output_reliable_stream+0x34>
 801e82e:	f04f 0e00 	mov.w	lr, #0
 801e832:	46f4      	mov	ip, lr
 801e834:	6843      	ldr	r3, [r0, #4]
 801e836:	f10e 0e01 	add.w	lr, lr, #1
 801e83a:	7b04      	ldrb	r4, [r0, #12]
 801e83c:	fbbc f2f1 	udiv	r2, ip, r1
 801e840:	fbb3 f3f1 	udiv	r3, r3, r1
 801e844:	fb01 c212 	mls	r2, r1, r2, ip
 801e848:	fa1f fc8e 	uxth.w	ip, lr
 801e84c:	b292      	uxth	r2, r2
 801e84e:	fb02 f303 	mul.w	r3, r2, r3
 801e852:	6802      	ldr	r2, [r0, #0]
 801e854:	50d4      	str	r4, [r2, r3]
 801e856:	8901      	ldrh	r1, [r0, #8]
 801e858:	4561      	cmp	r1, ip
 801e85a:	d8eb      	bhi.n	801e834 <uxr_reset_output_reliable_stream+0xc>
 801e85c:	4b08      	ldr	r3, [pc, #32]	; (801e880 <uxr_reset_output_reliable_stream+0x58>)
 801e85e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e862:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801e878 <uxr_reset_output_reliable_stream+0x50>
 801e866:	f8c0 300e 	str.w	r3, [r0, #14]
 801e86a:	2300      	movs	r3, #0
 801e86c:	8242      	strh	r2, [r0, #18]
 801e86e:	8403      	strh	r3, [r0, #32]
 801e870:	ed80 7b06 	vstr	d7, [r0, #24]
 801e874:	bd10      	pop	{r4, pc}
 801e876:	bf00      	nop
 801e878:	ffffffff 	.word	0xffffffff
 801e87c:	7fffffff 	.word	0x7fffffff
 801e880:	ffff0000 	.word	0xffff0000

0801e884 <uxr_prepare_reliable_buffer_to_write>:
 801e884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e888:	4604      	mov	r4, r0
 801e88a:	b091      	sub	sp, #68	; 0x44
 801e88c:	8900      	ldrh	r0, [r0, #8]
 801e88e:	468b      	mov	fp, r1
 801e890:	89e6      	ldrh	r6, [r4, #14]
 801e892:	9204      	str	r2, [sp, #16]
 801e894:	6865      	ldr	r5, [r4, #4]
 801e896:	6823      	ldr	r3, [r4, #0]
 801e898:	f894 900c 	ldrb.w	r9, [r4, #12]
 801e89c:	fbb6 f2f0 	udiv	r2, r6, r0
 801e8a0:	fbb5 f5f0 	udiv	r5, r5, r0
 801e8a4:	fb00 6212 	mls	r2, r0, r2, r6
 801e8a8:	1f2f      	subs	r7, r5, #4
 801e8aa:	b292      	uxth	r2, r2
 801e8ac:	fb05 3202 	mla	r2, r5, r2, r3
 801e8b0:	1d11      	adds	r1, r2, #4
 801e8b2:	f8d2 8000 	ldr.w	r8, [r2]
 801e8b6:	9103      	str	r1, [sp, #12]
 801e8b8:	2800      	cmp	r0, #0
 801e8ba:	f000 814a 	beq.w	801eb52 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801e8be:	f04f 0c00 	mov.w	ip, #0
 801e8c2:	46e2      	mov	sl, ip
 801e8c4:	4661      	mov	r1, ip
 801e8c6:	f10c 0c01 	add.w	ip, ip, #1
 801e8ca:	fbb1 f2f0 	udiv	r2, r1, r0
 801e8ce:	fb00 1212 	mls	r2, r0, r2, r1
 801e8d2:	fa1f f18c 	uxth.w	r1, ip
 801e8d6:	b292      	uxth	r2, r2
 801e8d8:	fb05 f202 	mul.w	r2, r5, r2
 801e8dc:	589a      	ldr	r2, [r3, r2]
 801e8de:	454a      	cmp	r2, r9
 801e8e0:	d103      	bne.n	801e8ea <uxr_prepare_reliable_buffer_to_write+0x66>
 801e8e2:	f10a 0a01 	add.w	sl, sl, #1
 801e8e6:	fa1f fa8a 	uxth.w	sl, sl
 801e8ea:	4281      	cmp	r1, r0
 801e8ec:	d3eb      	bcc.n	801e8c6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801e8ee:	4640      	mov	r0, r8
 801e8f0:	2104      	movs	r1, #4
 801e8f2:	f8cd a014 	str.w	sl, [sp, #20]
 801e8f6:	f7f4 fbab 	bl	8013050 <ucdr_alignment>
 801e8fa:	4480      	add	r8, r0
 801e8fc:	eb08 020b 	add.w	r2, r8, fp
 801e900:	42ba      	cmp	r2, r7
 801e902:	f240 80ca 	bls.w	801ea9a <uxr_prepare_reliable_buffer_to_write+0x216>
 801e906:	7b22      	ldrb	r2, [r4, #12]
 801e908:	445a      	add	r2, fp
 801e90a:	42ba      	cmp	r2, r7
 801e90c:	f240 80b2 	bls.w	801ea74 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801e910:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801e914:	b2bb      	uxth	r3, r7
 801e916:	eba2 0209 	sub.w	r2, r2, r9
 801e91a:	441a      	add	r2, r3
 801e91c:	b292      	uxth	r2, r2
 801e91e:	fb0a f902 	mul.w	r9, sl, r2
 801e922:	9205      	str	r2, [sp, #20]
 801e924:	45d9      	cmp	r9, fp
 801e926:	9206      	str	r2, [sp, #24]
 801e928:	f0c0 80b3 	bcc.w	801ea92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801e92c:	f108 0204 	add.w	r2, r8, #4
 801e930:	42ba      	cmp	r2, r7
 801e932:	f080 80da 	bcs.w	801eaea <uxr_prepare_reliable_buffer_to_write+0x266>
 801e936:	f1a3 0904 	sub.w	r9, r3, #4
 801e93a:	9b05      	ldr	r3, [sp, #20]
 801e93c:	eba9 0908 	sub.w	r9, r9, r8
 801e940:	fa1f f989 	uxth.w	r9, r9
 801e944:	ebab 0b09 	sub.w	fp, fp, r9
 801e948:	fbbb f2f3 	udiv	r2, fp, r3
 801e94c:	fb03 b312 	mls	r3, r3, r2, fp
 801e950:	2b00      	cmp	r3, #0
 801e952:	f040 80c4 	bne.w	801eade <uxr_prepare_reliable_buffer_to_write+0x25a>
 801e956:	b293      	uxth	r3, r2
 801e958:	4553      	cmp	r3, sl
 801e95a:	f200 809a 	bhi.w	801ea92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801e95e:	2b00      	cmp	r3, #0
 801e960:	f000 80f9 	beq.w	801eb56 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801e964:	f8cd 801c 	str.w	r8, [sp, #28]
 801e968:	f04f 0a00 	mov.w	sl, #0
 801e96c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e970:	f10d 0b20 	add.w	fp, sp, #32
 801e974:	9505      	str	r5, [sp, #20]
 801e976:	461d      	mov	r5, r3
 801e978:	e000      	b.n	801e97c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801e97a:	46c1      	mov	r9, r8
 801e97c:	8922      	ldrh	r2, [r4, #8]
 801e97e:	4658      	mov	r0, fp
 801e980:	6863      	ldr	r3, [r4, #4]
 801e982:	f10a 0a01 	add.w	sl, sl, #1
 801e986:	fbb6 f1f2 	udiv	r1, r6, r2
 801e98a:	fbb3 f3f2 	udiv	r3, r3, r2
 801e98e:	fb02 6111 	mls	r1, r2, r1, r6
 801e992:	463a      	mov	r2, r7
 801e994:	b289      	uxth	r1, r1
 801e996:	fb03 f101 	mul.w	r1, r3, r1
 801e99a:	6823      	ldr	r3, [r4, #0]
 801e99c:	3104      	adds	r1, #4
 801e99e:	4419      	add	r1, r3
 801e9a0:	2300      	movs	r3, #0
 801e9a2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801e9a6:	f8cd c000 	str.w	ip, [sp]
 801e9aa:	f7f4 fb3b 	bl	8013024 <ucdr_init_buffer_origin_offset>
 801e9ae:	464a      	mov	r2, r9
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	210d      	movs	r1, #13
 801e9b4:	4658      	mov	r0, fp
 801e9b6:	f7fb f8b3 	bl	8019b20 <uxr_buffer_submessage_header>
 801e9ba:	8921      	ldrh	r1, [r4, #8]
 801e9bc:	6863      	ldr	r3, [r4, #4]
 801e9be:	4630      	mov	r0, r6
 801e9c0:	fbb6 f2f1 	udiv	r2, r6, r1
 801e9c4:	fbb3 f3f1 	udiv	r3, r3, r1
 801e9c8:	fb01 6212 	mls	r2, r1, r2, r6
 801e9cc:	2101      	movs	r1, #1
 801e9ce:	b292      	uxth	r2, r2
 801e9d0:	fb02 f303 	mul.w	r3, r2, r3
 801e9d4:	6822      	ldr	r2, [r4, #0]
 801e9d6:	50d7      	str	r7, [r2, r3]
 801e9d8:	f000 f9c6 	bl	801ed68 <uxr_seq_num_add>
 801e9dc:	4606      	mov	r6, r0
 801e9de:	fa1f f38a 	uxth.w	r3, sl
 801e9e2:	429d      	cmp	r5, r3
 801e9e4:	d8c9      	bhi.n	801e97a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801e9e6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801e9ea:	9d05      	ldr	r5, [sp, #20]
 801e9ec:	8920      	ldrh	r0, [r4, #8]
 801e9ee:	463a      	mov	r2, r7
 801e9f0:	6863      	ldr	r3, [r4, #4]
 801e9f2:	fbb6 f1f0 	udiv	r1, r6, r0
 801e9f6:	fbb3 f3f0 	udiv	r3, r3, r0
 801e9fa:	fb00 6111 	mls	r1, r0, r1, r6
 801e9fe:	4658      	mov	r0, fp
 801ea00:	b289      	uxth	r1, r1
 801ea02:	fb01 f303 	mul.w	r3, r1, r3
 801ea06:	6821      	ldr	r1, [r4, #0]
 801ea08:	3304      	adds	r3, #4
 801ea0a:	4419      	add	r1, r3
 801ea0c:	2300      	movs	r3, #0
 801ea0e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801ea12:	9700      	str	r7, [sp, #0]
 801ea14:	f7f4 fb06 	bl	8013024 <ucdr_init_buffer_origin_offset>
 801ea18:	9f06      	ldr	r7, [sp, #24]
 801ea1a:	4658      	mov	r0, fp
 801ea1c:	2302      	movs	r3, #2
 801ea1e:	b2ba      	uxth	r2, r7
 801ea20:	210d      	movs	r1, #13
 801ea22:	f7fb f87d 	bl	8019b20 <uxr_buffer_submessage_header>
 801ea26:	f108 0104 	add.w	r1, r8, #4
 801ea2a:	9b03      	ldr	r3, [sp, #12]
 801ea2c:	f1a5 0208 	sub.w	r2, r5, #8
 801ea30:	8925      	ldrh	r5, [r4, #8]
 801ea32:	440b      	add	r3, r1
 801ea34:	eba2 0208 	sub.w	r2, r2, r8
 801ea38:	fbb6 f0f5 	udiv	r0, r6, r5
 801ea3c:	4619      	mov	r1, r3
 801ea3e:	6863      	ldr	r3, [r4, #4]
 801ea40:	fb05 6010 	mls	r0, r5, r0, r6
 801ea44:	fbb3 f3f5 	udiv	r3, r3, r5
 801ea48:	b280      	uxth	r0, r0
 801ea4a:	6825      	ldr	r5, [r4, #0]
 801ea4c:	fb00 f303 	mul.w	r3, r0, r3
 801ea50:	7b20      	ldrb	r0, [r4, #12]
 801ea52:	3004      	adds	r0, #4
 801ea54:	4438      	add	r0, r7
 801ea56:	50e8      	str	r0, [r5, r3]
 801ea58:	9d04      	ldr	r5, [sp, #16]
 801ea5a:	4628      	mov	r0, r5
 801ea5c:	f7f4 faf4 	bl	8013048 <ucdr_init_buffer>
 801ea60:	4628      	mov	r0, r5
 801ea62:	4622      	mov	r2, r4
 801ea64:	493d      	ldr	r1, [pc, #244]	; (801eb5c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ea66:	f7f4 fac3 	bl	8012ff0 <ucdr_set_on_full_buffer_callback>
 801ea6a:	2001      	movs	r0, #1
 801ea6c:	81e6      	strh	r6, [r4, #14]
 801ea6e:	b011      	add	sp, #68	; 0x44
 801ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea74:	2101      	movs	r1, #1
 801ea76:	89e0      	ldrh	r0, [r4, #14]
 801ea78:	f000 f976 	bl	801ed68 <uxr_seq_num_add>
 801ea7c:	4605      	mov	r5, r0
 801ea7e:	8921      	ldrh	r1, [r4, #8]
 801ea80:	8a60      	ldrh	r0, [r4, #18]
 801ea82:	f000 f971 	bl	801ed68 <uxr_seq_num_add>
 801ea86:	4601      	mov	r1, r0
 801ea88:	4628      	mov	r0, r5
 801ea8a:	f000 f975 	bl	801ed78 <uxr_seq_num_cmp>
 801ea8e:	2800      	cmp	r0, #0
 801ea90:	dd44      	ble.n	801eb1c <uxr_prepare_reliable_buffer_to_write+0x298>
 801ea92:	2000      	movs	r0, #0
 801ea94:	b011      	add	sp, #68	; 0x44
 801ea96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea9a:	8921      	ldrh	r1, [r4, #8]
 801ea9c:	8a60      	ldrh	r0, [r4, #18]
 801ea9e:	9205      	str	r2, [sp, #20]
 801eaa0:	f000 f962 	bl	801ed68 <uxr_seq_num_add>
 801eaa4:	4601      	mov	r1, r0
 801eaa6:	4630      	mov	r0, r6
 801eaa8:	f000 f966 	bl	801ed78 <uxr_seq_num_cmp>
 801eaac:	2800      	cmp	r0, #0
 801eaae:	9a05      	ldr	r2, [sp, #20]
 801eab0:	dcef      	bgt.n	801ea92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801eab2:	8925      	ldrh	r5, [r4, #8]
 801eab4:	e9d4 7300 	ldrd	r7, r3, [r4]
 801eab8:	fbb6 f4f5 	udiv	r4, r6, r5
 801eabc:	fbb3 f3f5 	udiv	r3, r3, r5
 801eac0:	fb05 6414 	mls	r4, r5, r4, r6
 801eac4:	b2a4      	uxth	r4, r4
 801eac6:	fb04 f303 	mul.w	r3, r4, r3
 801eaca:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801eace:	50fa      	str	r2, [r7, r3]
 801ead0:	2300      	movs	r3, #0
 801ead2:	f8cd 8000 	str.w	r8, [sp]
 801ead6:	f7f4 faa5 	bl	8013024 <ucdr_init_buffer_origin_offset>
 801eada:	2001      	movs	r0, #1
 801eadc:	e7da      	b.n	801ea94 <uxr_prepare_reliable_buffer_to_write+0x210>
 801eade:	3201      	adds	r2, #1
 801eae0:	9306      	str	r3, [sp, #24]
 801eae2:	b293      	uxth	r3, r2
 801eae4:	4553      	cmp	r3, sl
 801eae6:	d8d4      	bhi.n	801ea92 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801eae8:	e739      	b.n	801e95e <uxr_prepare_reliable_buffer_to_write+0xda>
 801eaea:	4630      	mov	r0, r6
 801eaec:	2101      	movs	r1, #1
 801eaee:	9307      	str	r3, [sp, #28]
 801eaf0:	f000 f93a 	bl	801ed68 <uxr_seq_num_add>
 801eaf4:	4606      	mov	r6, r0
 801eaf6:	8920      	ldrh	r0, [r4, #8]
 801eaf8:	6862      	ldr	r2, [r4, #4]
 801eafa:	fbb6 f1f0 	udiv	r1, r6, r0
 801eafe:	fbb2 f2f0 	udiv	r2, r2, r0
 801eb02:	fb00 6111 	mls	r1, r0, r1, r6
 801eb06:	b289      	uxth	r1, r1
 801eb08:	fb01 f202 	mul.w	r2, r1, r2
 801eb0c:	6821      	ldr	r1, [r4, #0]
 801eb0e:	3204      	adds	r2, #4
 801eb10:	188b      	adds	r3, r1, r2
 801eb12:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801eb16:	9303      	str	r3, [sp, #12]
 801eb18:	9b07      	ldr	r3, [sp, #28]
 801eb1a:	e70c      	b.n	801e936 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801eb1c:	8921      	ldrh	r1, [r4, #8]
 801eb1e:	6863      	ldr	r3, [r4, #4]
 801eb20:	9804      	ldr	r0, [sp, #16]
 801eb22:	fbb5 f2f1 	udiv	r2, r5, r1
 801eb26:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb2a:	fb01 5212 	mls	r2, r1, r2, r5
 801eb2e:	6821      	ldr	r1, [r4, #0]
 801eb30:	b292      	uxth	r2, r2
 801eb32:	fb02 f303 	mul.w	r3, r2, r3
 801eb36:	7b22      	ldrb	r2, [r4, #12]
 801eb38:	3304      	adds	r3, #4
 801eb3a:	445a      	add	r2, fp
 801eb3c:	4419      	add	r1, r3
 801eb3e:	f841 2c04 	str.w	r2, [r1, #-4]
 801eb42:	7b23      	ldrb	r3, [r4, #12]
 801eb44:	9300      	str	r3, [sp, #0]
 801eb46:	2300      	movs	r3, #0
 801eb48:	f7f4 fa6c 	bl	8013024 <ucdr_init_buffer_origin_offset>
 801eb4c:	2001      	movs	r0, #1
 801eb4e:	81e5      	strh	r5, [r4, #14]
 801eb50:	e7a0      	b.n	801ea94 <uxr_prepare_reliable_buffer_to_write+0x210>
 801eb52:	4682      	mov	sl, r0
 801eb54:	e6cb      	b.n	801e8ee <uxr_prepare_reliable_buffer_to_write+0x6a>
 801eb56:	f10d 0b20 	add.w	fp, sp, #32
 801eb5a:	e747      	b.n	801e9ec <uxr_prepare_reliable_buffer_to_write+0x168>
 801eb5c:	0801e759 	.word	0x0801e759

0801eb60 <uxr_prepare_next_reliable_buffer_to_send>:
 801eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb62:	4604      	mov	r4, r0
 801eb64:	461d      	mov	r5, r3
 801eb66:	460f      	mov	r7, r1
 801eb68:	8a00      	ldrh	r0, [r0, #16]
 801eb6a:	2101      	movs	r1, #1
 801eb6c:	4616      	mov	r6, r2
 801eb6e:	f000 f8fb 	bl	801ed68 <uxr_seq_num_add>
 801eb72:	8028      	strh	r0, [r5, #0]
 801eb74:	8922      	ldrh	r2, [r4, #8]
 801eb76:	6863      	ldr	r3, [r4, #4]
 801eb78:	fbb0 f1f2 	udiv	r1, r0, r2
 801eb7c:	fbb3 f3f2 	udiv	r3, r3, r2
 801eb80:	fb02 0c11 	mls	ip, r2, r1, r0
 801eb84:	89e1      	ldrh	r1, [r4, #14]
 801eb86:	fa1f fc8c 	uxth.w	ip, ip
 801eb8a:	fb0c fc03 	mul.w	ip, ip, r3
 801eb8e:	6823      	ldr	r3, [r4, #0]
 801eb90:	f10c 0c04 	add.w	ip, ip, #4
 801eb94:	4463      	add	r3, ip
 801eb96:	603b      	str	r3, [r7, #0]
 801eb98:	6823      	ldr	r3, [r4, #0]
 801eb9a:	449c      	add	ip, r3
 801eb9c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801eba0:	6033      	str	r3, [r6, #0]
 801eba2:	f000 f8e9 	bl	801ed78 <uxr_seq_num_cmp>
 801eba6:	2800      	cmp	r0, #0
 801eba8:	dd01      	ble.n	801ebae <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ebaa:	2000      	movs	r0, #0
 801ebac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ebae:	7b23      	ldrb	r3, [r4, #12]
 801ebb0:	6832      	ldr	r2, [r6, #0]
 801ebb2:	429a      	cmp	r2, r3
 801ebb4:	d9f9      	bls.n	801ebaa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ebb6:	8a61      	ldrh	r1, [r4, #18]
 801ebb8:	8a20      	ldrh	r0, [r4, #16]
 801ebba:	f000 f8d9 	bl	801ed70 <uxr_seq_num_sub>
 801ebbe:	8923      	ldrh	r3, [r4, #8]
 801ebc0:	4283      	cmp	r3, r0
 801ebc2:	d0f2      	beq.n	801ebaa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ebc4:	8828      	ldrh	r0, [r5, #0]
 801ebc6:	89e3      	ldrh	r3, [r4, #14]
 801ebc8:	8220      	strh	r0, [r4, #16]
 801ebca:	4298      	cmp	r0, r3
 801ebcc:	d001      	beq.n	801ebd2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801ebce:	2001      	movs	r0, #1
 801ebd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ebd2:	2101      	movs	r1, #1
 801ebd4:	f000 f8c8 	bl	801ed68 <uxr_seq_num_add>
 801ebd8:	4603      	mov	r3, r0
 801ebda:	2001      	movs	r0, #1
 801ebdc:	81e3      	strh	r3, [r4, #14]
 801ebde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ebe0 <uxr_update_output_stream_heartbeat_timestamp>:
 801ebe0:	b570      	push	{r4, r5, r6, lr}
 801ebe2:	8a01      	ldrh	r1, [r0, #16]
 801ebe4:	4604      	mov	r4, r0
 801ebe6:	8a40      	ldrh	r0, [r0, #18]
 801ebe8:	4615      	mov	r5, r2
 801ebea:	461e      	mov	r6, r3
 801ebec:	f000 f8c4 	bl	801ed78 <uxr_seq_num_cmp>
 801ebf0:	2800      	cmp	r0, #0
 801ebf2:	db07      	blt.n	801ec04 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ebf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ebf8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801ebfc:	2000      	movs	r0, #0
 801ebfe:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ec02:	bd70      	pop	{r4, r5, r6, pc}
 801ec04:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ec08:	b940      	cbnz	r0, 801ec1c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801ec0a:	2301      	movs	r3, #1
 801ec0c:	f884 3020 	strb.w	r3, [r4, #32]
 801ec10:	3564      	adds	r5, #100	; 0x64
 801ec12:	f146 0600 	adc.w	r6, r6, #0
 801ec16:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ec1a:	bd70      	pop	{r4, r5, r6, pc}
 801ec1c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ec20:	4295      	cmp	r5, r2
 801ec22:	eb76 0303 	sbcs.w	r3, r6, r3
 801ec26:	db04      	blt.n	801ec32 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801ec28:	1c43      	adds	r3, r0, #1
 801ec2a:	2001      	movs	r0, #1
 801ec2c:	f884 3020 	strb.w	r3, [r4, #32]
 801ec30:	e7ee      	b.n	801ec10 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ec32:	2000      	movs	r0, #0
 801ec34:	e7ec      	b.n	801ec10 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801ec36:	bf00      	nop

0801ec38 <uxr_begin_output_nack_buffer_it>:
 801ec38:	8a40      	ldrh	r0, [r0, #18]
 801ec3a:	4770      	bx	lr

0801ec3c <uxr_next_reliable_nack_buffer_to_send>:
 801ec3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec40:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801ec44:	b197      	cbz	r7, 801ec6c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801ec46:	4680      	mov	r8, r0
 801ec48:	460d      	mov	r5, r1
 801ec4a:	4616      	mov	r6, r2
 801ec4c:	461c      	mov	r4, r3
 801ec4e:	8818      	ldrh	r0, [r3, #0]
 801ec50:	2101      	movs	r1, #1
 801ec52:	f000 f889 	bl	801ed68 <uxr_seq_num_add>
 801ec56:	8020      	strh	r0, [r4, #0]
 801ec58:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801ec5c:	f000 f88c 	bl	801ed78 <uxr_seq_num_cmp>
 801ec60:	2800      	cmp	r0, #0
 801ec62:	dd06      	ble.n	801ec72 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801ec64:	2300      	movs	r3, #0
 801ec66:	461f      	mov	r7, r3
 801ec68:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801ec6c:	4638      	mov	r0, r7
 801ec6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec72:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801ec76:	8820      	ldrh	r0, [r4, #0]
 801ec78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ec7c:	fbb0 f3f2 	udiv	r3, r0, r2
 801ec80:	fbb1 fcf2 	udiv	ip, r1, r2
 801ec84:	fb02 0313 	mls	r3, r2, r3, r0
 801ec88:	b29b      	uxth	r3, r3
 801ec8a:	fb03 fc0c 	mul.w	ip, r3, ip
 801ec8e:	f8d8 3000 	ldr.w	r3, [r8]
 801ec92:	f10c 0c04 	add.w	ip, ip, #4
 801ec96:	4463      	add	r3, ip
 801ec98:	602b      	str	r3, [r5, #0]
 801ec9a:	f8d8 3000 	ldr.w	r3, [r8]
 801ec9e:	4463      	add	r3, ip
 801eca0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801eca4:	6033      	str	r3, [r6, #0]
 801eca6:	f898 200c 	ldrb.w	r2, [r8, #12]
 801ecaa:	429a      	cmp	r2, r3
 801ecac:	d0d0      	beq.n	801ec50 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801ecae:	e7dd      	b.n	801ec6c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801ecb0 <uxr_process_acknack>:
 801ecb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecb2:	4604      	mov	r4, r0
 801ecb4:	460e      	mov	r6, r1
 801ecb6:	4610      	mov	r0, r2
 801ecb8:	2101      	movs	r1, #1
 801ecba:	f000 f859 	bl	801ed70 <uxr_seq_num_sub>
 801ecbe:	8a61      	ldrh	r1, [r4, #18]
 801ecc0:	f000 f856 	bl	801ed70 <uxr_seq_num_sub>
 801ecc4:	b1c8      	cbz	r0, 801ecfa <uxr_process_acknack+0x4a>
 801ecc6:	4605      	mov	r5, r0
 801ecc8:	2700      	movs	r7, #0
 801ecca:	2101      	movs	r1, #1
 801eccc:	8a60      	ldrh	r0, [r4, #18]
 801ecce:	f000 f84b 	bl	801ed68 <uxr_seq_num_add>
 801ecd2:	8923      	ldrh	r3, [r4, #8]
 801ecd4:	6862      	ldr	r2, [r4, #4]
 801ecd6:	3701      	adds	r7, #1
 801ecd8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801ecdc:	6821      	ldr	r1, [r4, #0]
 801ecde:	42bd      	cmp	r5, r7
 801ece0:	8260      	strh	r0, [r4, #18]
 801ece2:	fbb0 fef3 	udiv	lr, r0, r3
 801ece6:	fbb2 f2f3 	udiv	r2, r2, r3
 801ecea:	fb03 031e 	mls	r3, r3, lr, r0
 801ecee:	b29b      	uxth	r3, r3
 801ecf0:	fb02 f303 	mul.w	r3, r2, r3
 801ecf4:	f841 c003 	str.w	ip, [r1, r3]
 801ecf8:	d1e7      	bne.n	801ecca <uxr_process_acknack+0x1a>
 801ecfa:	3e00      	subs	r6, #0
 801ecfc:	f04f 0300 	mov.w	r3, #0
 801ed00:	bf18      	it	ne
 801ed02:	2601      	movne	r6, #1
 801ed04:	f884 3020 	strb.w	r3, [r4, #32]
 801ed08:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801ed0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed0e:	bf00      	nop

0801ed10 <uxr_is_output_up_to_date>:
 801ed10:	8a01      	ldrh	r1, [r0, #16]
 801ed12:	8a40      	ldrh	r0, [r0, #18]
 801ed14:	b508      	push	{r3, lr}
 801ed16:	f000 f82f 	bl	801ed78 <uxr_seq_num_cmp>
 801ed1a:	fab0 f080 	clz	r0, r0
 801ed1e:	0940      	lsrs	r0, r0, #5
 801ed20:	bd08      	pop	{r3, pc}
 801ed22:	bf00      	nop

0801ed24 <get_available_free_slots>:
 801ed24:	8901      	ldrh	r1, [r0, #8]
 801ed26:	b1e1      	cbz	r1, 801ed62 <get_available_free_slots+0x3e>
 801ed28:	6843      	ldr	r3, [r0, #4]
 801ed2a:	f04f 0c00 	mov.w	ip, #0
 801ed2e:	b530      	push	{r4, r5, lr}
 801ed30:	fbb3 fef1 	udiv	lr, r3, r1
 801ed34:	6805      	ldr	r5, [r0, #0]
 801ed36:	4662      	mov	r2, ip
 801ed38:	7b04      	ldrb	r4, [r0, #12]
 801ed3a:	4660      	mov	r0, ip
 801ed3c:	f10c 0c01 	add.w	ip, ip, #1
 801ed40:	fbb2 f3f1 	udiv	r3, r2, r1
 801ed44:	fb01 2313 	mls	r3, r1, r3, r2
 801ed48:	fa1f f28c 	uxth.w	r2, ip
 801ed4c:	b29b      	uxth	r3, r3
 801ed4e:	fb0e f303 	mul.w	r3, lr, r3
 801ed52:	58eb      	ldr	r3, [r5, r3]
 801ed54:	429c      	cmp	r4, r3
 801ed56:	d101      	bne.n	801ed5c <get_available_free_slots+0x38>
 801ed58:	3001      	adds	r0, #1
 801ed5a:	b280      	uxth	r0, r0
 801ed5c:	428a      	cmp	r2, r1
 801ed5e:	d3ed      	bcc.n	801ed3c <get_available_free_slots+0x18>
 801ed60:	bd30      	pop	{r4, r5, pc}
 801ed62:	4608      	mov	r0, r1
 801ed64:	4770      	bx	lr
 801ed66:	bf00      	nop

0801ed68 <uxr_seq_num_add>:
 801ed68:	4408      	add	r0, r1
 801ed6a:	b280      	uxth	r0, r0
 801ed6c:	4770      	bx	lr
 801ed6e:	bf00      	nop

0801ed70 <uxr_seq_num_sub>:
 801ed70:	1a40      	subs	r0, r0, r1
 801ed72:	b280      	uxth	r0, r0
 801ed74:	4770      	bx	lr
 801ed76:	bf00      	nop

0801ed78 <uxr_seq_num_cmp>:
 801ed78:	4288      	cmp	r0, r1
 801ed7a:	d011      	beq.n	801eda0 <uxr_seq_num_cmp+0x28>
 801ed7c:	d309      	bcc.n	801ed92 <uxr_seq_num_cmp+0x1a>
 801ed7e:	4288      	cmp	r0, r1
 801ed80:	d910      	bls.n	801eda4 <uxr_seq_num_cmp+0x2c>
 801ed82:	1a40      	subs	r0, r0, r1
 801ed84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801ed88:	bfd4      	ite	le
 801ed8a:	2001      	movle	r0, #1
 801ed8c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801ed90:	4770      	bx	lr
 801ed92:	1a0b      	subs	r3, r1, r0
 801ed94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ed98:	daf1      	bge.n	801ed7e <uxr_seq_num_cmp+0x6>
 801ed9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ed9e:	4770      	bx	lr
 801eda0:	2000      	movs	r0, #0
 801eda2:	4770      	bx	lr
 801eda4:	2001      	movs	r0, #1
 801eda6:	4770      	bx	lr

0801eda8 <rcl_get_default_domain_id>:
 801eda8:	b530      	push	{r4, r5, lr}
 801edaa:	2300      	movs	r3, #0
 801edac:	b083      	sub	sp, #12
 801edae:	9300      	str	r3, [sp, #0]
 801edb0:	b1d0      	cbz	r0, 801ede8 <rcl_get_default_domain_id+0x40>
 801edb2:	4604      	mov	r4, r0
 801edb4:	4669      	mov	r1, sp
 801edb6:	4815      	ldr	r0, [pc, #84]	; (801ee0c <rcl_get_default_domain_id+0x64>)
 801edb8:	f7f6 f82a 	bl	8014e10 <rcutils_get_env>
 801edbc:	4602      	mov	r2, r0
 801edbe:	b110      	cbz	r0, 801edc6 <rcl_get_default_domain_id+0x1e>
 801edc0:	2001      	movs	r0, #1
 801edc2:	b003      	add	sp, #12
 801edc4:	bd30      	pop	{r4, r5, pc}
 801edc6:	9b00      	ldr	r3, [sp, #0]
 801edc8:	b18b      	cbz	r3, 801edee <rcl_get_default_domain_id+0x46>
 801edca:	7818      	ldrb	r0, [r3, #0]
 801edcc:	2800      	cmp	r0, #0
 801edce:	d0f8      	beq.n	801edc2 <rcl_get_default_domain_id+0x1a>
 801edd0:	a901      	add	r1, sp, #4
 801edd2:	4618      	mov	r0, r3
 801edd4:	9201      	str	r2, [sp, #4]
 801edd6:	f000 fc8f 	bl	801f6f8 <strtoul>
 801edda:	4605      	mov	r5, r0
 801eddc:	b150      	cbz	r0, 801edf4 <rcl_get_default_domain_id+0x4c>
 801edde:	1c43      	adds	r3, r0, #1
 801ede0:	d00d      	beq.n	801edfe <rcl_get_default_domain_id+0x56>
 801ede2:	2000      	movs	r0, #0
 801ede4:	6025      	str	r5, [r4, #0]
 801ede6:	e7ec      	b.n	801edc2 <rcl_get_default_domain_id+0x1a>
 801ede8:	200b      	movs	r0, #11
 801edea:	b003      	add	sp, #12
 801edec:	bd30      	pop	{r4, r5, pc}
 801edee:	4618      	mov	r0, r3
 801edf0:	b003      	add	sp, #12
 801edf2:	bd30      	pop	{r4, r5, pc}
 801edf4:	9b01      	ldr	r3, [sp, #4]
 801edf6:	781b      	ldrb	r3, [r3, #0]
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d0f2      	beq.n	801ede2 <rcl_get_default_domain_id+0x3a>
 801edfc:	e7e0      	b.n	801edc0 <rcl_get_default_domain_id+0x18>
 801edfe:	f001 ff25 	bl	8020c4c <__errno>
 801ee02:	6803      	ldr	r3, [r0, #0]
 801ee04:	2b22      	cmp	r3, #34	; 0x22
 801ee06:	d1ec      	bne.n	801ede2 <rcl_get_default_domain_id+0x3a>
 801ee08:	e7da      	b.n	801edc0 <rcl_get_default_domain_id+0x18>
 801ee0a:	bf00      	nop
 801ee0c:	08025828 	.word	0x08025828

0801ee10 <rcl_expand_topic_name>:
 801ee10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee14:	b08d      	sub	sp, #52	; 0x34
 801ee16:	4698      	mov	r8, r3
 801ee18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ee1a:	9207      	str	r2, [sp, #28]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	bf18      	it	ne
 801ee20:	f1b8 0f00 	cmpne.w	r8, #0
 801ee24:	bf0c      	ite	eq
 801ee26:	2301      	moveq	r3, #1
 801ee28:	2300      	movne	r3, #0
 801ee2a:	2a00      	cmp	r2, #0
 801ee2c:	bf08      	it	eq
 801ee2e:	f043 0301 	orreq.w	r3, r3, #1
 801ee32:	2900      	cmp	r1, #0
 801ee34:	bf08      	it	eq
 801ee36:	f043 0301 	orreq.w	r3, r3, #1
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d13d      	bne.n	801eeba <rcl_expand_topic_name+0xaa>
 801ee3e:	fab0 f280 	clz	r2, r0
 801ee42:	4604      	mov	r4, r0
 801ee44:	0952      	lsrs	r2, r2, #5
 801ee46:	2800      	cmp	r0, #0
 801ee48:	d037      	beq.n	801eeba <rcl_expand_topic_name+0xaa>
 801ee4a:	460f      	mov	r7, r1
 801ee4c:	a90b      	add	r1, sp, #44	; 0x2c
 801ee4e:	f000 f945 	bl	801f0dc <rcl_validate_topic_name>
 801ee52:	4605      	mov	r5, r0
 801ee54:	bb68      	cbnz	r0, 801eeb2 <rcl_expand_topic_name+0xa2>
 801ee56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	d137      	bne.n	801eecc <rcl_expand_topic_name+0xbc>
 801ee5c:	4602      	mov	r2, r0
 801ee5e:	a90b      	add	r1, sp, #44	; 0x2c
 801ee60:	4638      	mov	r0, r7
 801ee62:	f7f6 fa97 	bl	8015394 <rmw_validate_node_name>
 801ee66:	bb68      	cbnz	r0, 801eec4 <rcl_expand_topic_name+0xb4>
 801ee68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d133      	bne.n	801eed6 <rcl_expand_topic_name+0xc6>
 801ee6e:	462a      	mov	r2, r5
 801ee70:	a90b      	add	r1, sp, #44	; 0x2c
 801ee72:	9807      	ldr	r0, [sp, #28]
 801ee74:	f7f6 fa70 	bl	8015358 <rmw_validate_namespace>
 801ee78:	bb20      	cbnz	r0, 801eec4 <rcl_expand_topic_name+0xb4>
 801ee7a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801ee7c:	2d00      	cmp	r5, #0
 801ee7e:	f040 80a2 	bne.w	801efc6 <rcl_expand_topic_name+0x1b6>
 801ee82:	217b      	movs	r1, #123	; 0x7b
 801ee84:	4620      	mov	r0, r4
 801ee86:	f001 fe51 	bl	8020b2c <strchr>
 801ee8a:	7823      	ldrb	r3, [r4, #0]
 801ee8c:	4681      	mov	r9, r0
 801ee8e:	bb20      	cbnz	r0, 801eeda <rcl_expand_topic_name+0xca>
 801ee90:	2b2f      	cmp	r3, #47	; 0x2f
 801ee92:	d122      	bne.n	801eeda <rcl_expand_topic_name+0xca>
 801ee94:	ab19      	add	r3, sp, #100	; 0x64
 801ee96:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ee9a:	ab16      	add	r3, sp, #88	; 0x58
 801ee9c:	e88d 0003 	stmia.w	sp, {r0, r1}
 801eea0:	4620      	mov	r0, r4
 801eea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801eea4:	f7f6 f93a 	bl	801511c <rcutils_strdup>
 801eea8:	2800      	cmp	r0, #0
 801eeaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801eeac:	bf08      	it	eq
 801eeae:	250a      	moveq	r5, #10
 801eeb0:	6018      	str	r0, [r3, #0]
 801eeb2:	4628      	mov	r0, r5
 801eeb4:	b00d      	add	sp, #52	; 0x34
 801eeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeba:	250b      	movs	r5, #11
 801eebc:	4628      	mov	r0, r5
 801eebe:	b00d      	add	sp, #52	; 0x34
 801eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eec4:	f7fc f97a 	bl	801b1bc <rcl_convert_rmw_ret_to_rcl_ret>
 801eec8:	4605      	mov	r5, r0
 801eeca:	e7f2      	b.n	801eeb2 <rcl_expand_topic_name+0xa2>
 801eecc:	2567      	movs	r5, #103	; 0x67
 801eece:	4628      	mov	r0, r5
 801eed0:	b00d      	add	sp, #52	; 0x34
 801eed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eed6:	25c9      	movs	r5, #201	; 0xc9
 801eed8:	e7eb      	b.n	801eeb2 <rcl_expand_topic_name+0xa2>
 801eeda:	2b7e      	cmp	r3, #126	; 0x7e
 801eedc:	d075      	beq.n	801efca <rcl_expand_topic_name+0x1ba>
 801eede:	f1b9 0f00 	cmp.w	r9, #0
 801eee2:	f000 80c2 	beq.w	801f06a <rcl_expand_topic_name+0x25a>
 801eee6:	2300      	movs	r3, #0
 801eee8:	46a2      	mov	sl, r4
 801eeea:	461e      	mov	r6, r3
 801eeec:	9508      	str	r5, [sp, #32]
 801eeee:	4655      	mov	r5, sl
 801eef0:	9409      	str	r4, [sp, #36]	; 0x24
 801eef2:	46b2      	mov	sl, r6
 801eef4:	464c      	mov	r4, r9
 801eef6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801eefa:	2c00      	cmp	r4, #0
 801eefc:	f000 80ae 	beq.w	801f05c <rcl_expand_topic_name+0x24c>
 801ef00:	217d      	movs	r1, #125	; 0x7d
 801ef02:	4628      	mov	r0, r5
 801ef04:	f001 fe12 	bl	8020b2c <strchr>
 801ef08:	eba0 0904 	sub.w	r9, r0, r4
 801ef0c:	4621      	mov	r1, r4
 801ef0e:	4869      	ldr	r0, [pc, #420]	; (801f0b4 <rcl_expand_topic_name+0x2a4>)
 801ef10:	f109 0601 	add.w	r6, r9, #1
 801ef14:	4632      	mov	r2, r6
 801ef16:	f001 fe16 	bl	8020b46 <strncmp>
 801ef1a:	2800      	cmp	r0, #0
 801ef1c:	d051      	beq.n	801efc2 <rcl_expand_topic_name+0x1b2>
 801ef1e:	4632      	mov	r2, r6
 801ef20:	4621      	mov	r1, r4
 801ef22:	4865      	ldr	r0, [pc, #404]	; (801f0b8 <rcl_expand_topic_name+0x2a8>)
 801ef24:	f001 fe0f 	bl	8020b46 <strncmp>
 801ef28:	b128      	cbz	r0, 801ef36 <rcl_expand_topic_name+0x126>
 801ef2a:	4632      	mov	r2, r6
 801ef2c:	4621      	mov	r1, r4
 801ef2e:	4863      	ldr	r0, [pc, #396]	; (801f0bc <rcl_expand_topic_name+0x2ac>)
 801ef30:	f001 fe09 	bl	8020b46 <strncmp>
 801ef34:	bb38      	cbnz	r0, 801ef86 <rcl_expand_topic_name+0x176>
 801ef36:	46d9      	mov	r9, fp
 801ef38:	ab18      	add	r3, sp, #96	; 0x60
 801ef3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ef3e:	ab16      	add	r3, sp, #88	; 0x58
 801ef40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ef44:	4620      	mov	r0, r4
 801ef46:	4631      	mov	r1, r6
 801ef48:	cb0c      	ldmia	r3, {r2, r3}
 801ef4a:	f7f6 f909 	bl	8015160 <rcutils_strndup>
 801ef4e:	4604      	mov	r4, r0
 801ef50:	2800      	cmp	r0, #0
 801ef52:	f000 80a3 	beq.w	801f09c <rcl_expand_topic_name+0x28c>
 801ef56:	464a      	mov	r2, r9
 801ef58:	4628      	mov	r0, r5
 801ef5a:	ab16      	add	r3, sp, #88	; 0x58
 801ef5c:	4621      	mov	r1, r4
 801ef5e:	f7f5 ffdd 	bl	8014f1c <rcutils_repl_str>
 801ef62:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ef64:	4605      	mov	r5, r0
 801ef66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ef68:	4620      	mov	r0, r4
 801ef6a:	4798      	blx	r3
 801ef6c:	4650      	mov	r0, sl
 801ef6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ef70:	991a      	ldr	r1, [sp, #104]	; 0x68
 801ef72:	4798      	blx	r3
 801ef74:	2d00      	cmp	r5, #0
 801ef76:	d06c      	beq.n	801f052 <rcl_expand_topic_name+0x242>
 801ef78:	217b      	movs	r1, #123	; 0x7b
 801ef7a:	4628      	mov	r0, r5
 801ef7c:	f001 fdd6 	bl	8020b2c <strchr>
 801ef80:	46aa      	mov	sl, r5
 801ef82:	4604      	mov	r4, r0
 801ef84:	e7b9      	b.n	801eefa <rcl_expand_topic_name+0xea>
 801ef86:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801ef8a:	1c61      	adds	r1, r4, #1
 801ef8c:	4640      	mov	r0, r8
 801ef8e:	f7fe fca5 	bl	801d8dc <rcutils_string_map_getn>
 801ef92:	4681      	mov	r9, r0
 801ef94:	2800      	cmp	r0, #0
 801ef96:	d1cf      	bne.n	801ef38 <rcl_expand_topic_name+0x128>
 801ef98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ef9a:	aa18      	add	r2, sp, #96	; 0x60
 801ef9c:	2569      	movs	r5, #105	; 0x69
 801ef9e:	6018      	str	r0, [r3, #0]
 801efa0:	ab16      	add	r3, sp, #88	; 0x58
 801efa2:	ca07      	ldmia	r2, {r0, r1, r2}
 801efa4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801efa8:	4631      	mov	r1, r6
 801efaa:	4620      	mov	r0, r4
 801efac:	cb0c      	ldmia	r3, {r2, r3}
 801efae:	f7f6 f8d7 	bl	8015160 <rcutils_strndup>
 801efb2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801efb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801efb6:	4798      	blx	r3
 801efb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801efba:	991a      	ldr	r1, [sp, #104]	; 0x68
 801efbc:	4650      	mov	r0, sl
 801efbe:	4798      	blx	r3
 801efc0:	e777      	b.n	801eeb2 <rcl_expand_topic_name+0xa2>
 801efc2:	46b9      	mov	r9, r7
 801efc4:	e7b8      	b.n	801ef38 <rcl_expand_topic_name+0x128>
 801efc6:	25ca      	movs	r5, #202	; 0xca
 801efc8:	e773      	b.n	801eeb2 <rcl_expand_topic_name+0xa2>
 801efca:	9e07      	ldr	r6, [sp, #28]
 801efcc:	4630      	mov	r0, r6
 801efce:	f7e1 f997 	bl	8000300 <strlen>
 801efd2:	4a3b      	ldr	r2, [pc, #236]	; (801f0c0 <rcl_expand_topic_name+0x2b0>)
 801efd4:	4b3b      	ldr	r3, [pc, #236]	; (801f0c4 <rcl_expand_topic_name+0x2b4>)
 801efd6:	9603      	str	r6, [sp, #12]
 801efd8:	2801      	cmp	r0, #1
 801efda:	bf18      	it	ne
 801efdc:	4613      	movne	r3, r2
 801efde:	9704      	str	r7, [sp, #16]
 801efe0:	9302      	str	r3, [sp, #8]
 801efe2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801efe4:	9300      	str	r3, [sp, #0]
 801efe6:	1c63      	adds	r3, r4, #1
 801efe8:	9305      	str	r3, [sp, #20]
 801efea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801efee:	9301      	str	r3, [sp, #4]
 801eff0:	ab16      	add	r3, sp, #88	; 0x58
 801eff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801eff4:	f7f5 ff58 	bl	8014ea8 <rcutils_format_string_limit>
 801eff8:	4606      	mov	r6, r0
 801effa:	b350      	cbz	r0, 801f052 <rcl_expand_topic_name+0x242>
 801effc:	f1b9 0f00 	cmp.w	r9, #0
 801f000:	d005      	beq.n	801f00e <rcl_expand_topic_name+0x1fe>
 801f002:	217b      	movs	r1, #123	; 0x7b
 801f004:	46b2      	mov	sl, r6
 801f006:	f001 fd91 	bl	8020b2c <strchr>
 801f00a:	4681      	mov	r9, r0
 801f00c:	e76e      	b.n	801eeec <rcl_expand_topic_name+0xdc>
 801f00e:	7833      	ldrb	r3, [r6, #0]
 801f010:	2b2f      	cmp	r3, #47	; 0x2f
 801f012:	d01b      	beq.n	801f04c <rcl_expand_topic_name+0x23c>
 801f014:	9c07      	ldr	r4, [sp, #28]
 801f016:	4620      	mov	r0, r4
 801f018:	f7e1 f972 	bl	8000300 <strlen>
 801f01c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f020:	4a29      	ldr	r2, [pc, #164]	; (801f0c8 <rcl_expand_topic_name+0x2b8>)
 801f022:	9301      	str	r3, [sp, #4]
 801f024:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f026:	9604      	str	r6, [sp, #16]
 801f028:	9300      	str	r3, [sp, #0]
 801f02a:	4b28      	ldr	r3, [pc, #160]	; (801f0cc <rcl_expand_topic_name+0x2bc>)
 801f02c:	9403      	str	r4, [sp, #12]
 801f02e:	2801      	cmp	r0, #1
 801f030:	bf18      	it	ne
 801f032:	4613      	movne	r3, r2
 801f034:	9302      	str	r3, [sp, #8]
 801f036:	ab16      	add	r3, sp, #88	; 0x58
 801f038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f03a:	f7f5 ff35 	bl	8014ea8 <rcutils_format_string_limit>
 801f03e:	4603      	mov	r3, r0
 801f040:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f042:	4630      	mov	r0, r6
 801f044:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f046:	461e      	mov	r6, r3
 801f048:	4790      	blx	r2
 801f04a:	b116      	cbz	r6, 801f052 <rcl_expand_topic_name+0x242>
 801f04c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f04e:	601e      	str	r6, [r3, #0]
 801f050:	e72f      	b.n	801eeb2 <rcl_expand_topic_name+0xa2>
 801f052:	2300      	movs	r3, #0
 801f054:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f056:	250a      	movs	r5, #10
 801f058:	6013      	str	r3, [r2, #0]
 801f05a:	e72a      	b.n	801eeb2 <rcl_expand_topic_name+0xa2>
 801f05c:	4653      	mov	r3, sl
 801f05e:	4656      	mov	r6, sl
 801f060:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f064:	2b00      	cmp	r3, #0
 801f066:	d1d2      	bne.n	801f00e <rcl_expand_topic_name+0x1fe>
 801f068:	7823      	ldrb	r3, [r4, #0]
 801f06a:	2b2f      	cmp	r3, #47	; 0x2f
 801f06c:	d01e      	beq.n	801f0ac <rcl_expand_topic_name+0x29c>
 801f06e:	9e07      	ldr	r6, [sp, #28]
 801f070:	4630      	mov	r0, r6
 801f072:	f7e1 f945 	bl	8000300 <strlen>
 801f076:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f07c:	9603      	str	r6, [sp, #12]
 801f07e:	9404      	str	r4, [sp, #16]
 801f080:	e9cd 2300 	strd	r2, r3, [sp]
 801f084:	4a10      	ldr	r2, [pc, #64]	; (801f0c8 <rcl_expand_topic_name+0x2b8>)
 801f086:	4b11      	ldr	r3, [pc, #68]	; (801f0cc <rcl_expand_topic_name+0x2bc>)
 801f088:	2801      	cmp	r0, #1
 801f08a:	bf18      	it	ne
 801f08c:	4613      	movne	r3, r2
 801f08e:	9302      	str	r3, [sp, #8]
 801f090:	ab16      	add	r3, sp, #88	; 0x58
 801f092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f094:	f7f5 ff08 	bl	8014ea8 <rcutils_format_string_limit>
 801f098:	4606      	mov	r6, r0
 801f09a:	e7d6      	b.n	801f04a <rcl_expand_topic_name+0x23a>
 801f09c:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801f0a0:	4650      	mov	r0, sl
 801f0a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f0a4:	6014      	str	r4, [r2, #0]
 801f0a6:	250a      	movs	r5, #10
 801f0a8:	4798      	blx	r3
 801f0aa:	e702      	b.n	801eeb2 <rcl_expand_topic_name+0xa2>
 801f0ac:	2300      	movs	r3, #0
 801f0ae:	461e      	mov	r6, r3
 801f0b0:	e7cc      	b.n	801f04c <rcl_expand_topic_name+0x23c>
 801f0b2:	bf00      	nop
 801f0b4:	08025840 	.word	0x08025840
 801f0b8:	08025848 	.word	0x08025848
 801f0bc:	08025850 	.word	0x08025850
 801f0c0:	08025838 	.word	0x08025838
 801f0c4:	080251c0 	.word	0x080251c0
 801f0c8:	08024bc0 	.word	0x08024bc0
 801f0cc:	08024bb8 	.word	0x08024bb8

0801f0d0 <rcl_get_default_topic_name_substitutions>:
 801f0d0:	2800      	cmp	r0, #0
 801f0d2:	bf0c      	ite	eq
 801f0d4:	200b      	moveq	r0, #11
 801f0d6:	2000      	movne	r0, #0
 801f0d8:	4770      	bx	lr
 801f0da:	bf00      	nop

0801f0dc <rcl_validate_topic_name>:
 801f0dc:	2800      	cmp	r0, #0
 801f0de:	f000 8089 	beq.w	801f1f4 <rcl_validate_topic_name+0x118>
 801f0e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f0e6:	460e      	mov	r6, r1
 801f0e8:	2900      	cmp	r1, #0
 801f0ea:	f000 8085 	beq.w	801f1f8 <rcl_validate_topic_name+0x11c>
 801f0ee:	4604      	mov	r4, r0
 801f0f0:	4617      	mov	r7, r2
 801f0f2:	f7e1 f905 	bl	8000300 <strlen>
 801f0f6:	b1b0      	cbz	r0, 801f126 <rcl_validate_topic_name+0x4a>
 801f0f8:	f894 e000 	ldrb.w	lr, [r4]
 801f0fc:	f8df c160 	ldr.w	ip, [pc, #352]	; 801f260 <rcl_validate_topic_name+0x184>
 801f100:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f104:	f013 0304 	ands.w	r3, r3, #4
 801f108:	d139      	bne.n	801f17e <rcl_validate_topic_name+0xa2>
 801f10a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801f10e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f112:	2a2f      	cmp	r2, #47	; 0x2f
 801f114:	d10f      	bne.n	801f136 <rcl_validate_topic_name+0x5a>
 801f116:	2202      	movs	r2, #2
 801f118:	6032      	str	r2, [r6, #0]
 801f11a:	b3a7      	cbz	r7, 801f186 <rcl_validate_topic_name+0xaa>
 801f11c:	4618      	mov	r0, r3
 801f11e:	f8c7 8000 	str.w	r8, [r7]
 801f122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f126:	2301      	movs	r3, #1
 801f128:	6033      	str	r3, [r6, #0]
 801f12a:	b367      	cbz	r7, 801f186 <rcl_validate_topic_name+0xaa>
 801f12c:	2300      	movs	r3, #0
 801f12e:	4618      	mov	r0, r3
 801f130:	603b      	str	r3, [r7, #0]
 801f132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f136:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801f13a:	461d      	mov	r5, r3
 801f13c:	4619      	mov	r1, r3
 801f13e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f142:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801f146:	f1b9 0f09 	cmp.w	r9, #9
 801f14a:	d91f      	bls.n	801f18c <rcl_validate_topic_name+0xb0>
 801f14c:	f022 0920 	bic.w	r9, r2, #32
 801f150:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801f154:	f1b9 0f19 	cmp.w	r9, #25
 801f158:	d918      	bls.n	801f18c <rcl_validate_topic_name+0xb0>
 801f15a:	2a5f      	cmp	r2, #95	; 0x5f
 801f15c:	d024      	beq.n	801f1a8 <rcl_validate_topic_name+0xcc>
 801f15e:	2a2f      	cmp	r2, #47	; 0x2f
 801f160:	d058      	beq.n	801f214 <rcl_validate_topic_name+0x138>
 801f162:	2a7e      	cmp	r2, #126	; 0x7e
 801f164:	d04a      	beq.n	801f1fc <rcl_validate_topic_name+0x120>
 801f166:	2a7b      	cmp	r2, #123	; 0x7b
 801f168:	d05b      	beq.n	801f222 <rcl_validate_topic_name+0x146>
 801f16a:	2a7d      	cmp	r2, #125	; 0x7d
 801f16c:	d169      	bne.n	801f242 <rcl_validate_topic_name+0x166>
 801f16e:	2d00      	cmp	r5, #0
 801f170:	d15c      	bne.n	801f22c <rcl_validate_topic_name+0x150>
 801f172:	2305      	movs	r3, #5
 801f174:	6033      	str	r3, [r6, #0]
 801f176:	b137      	cbz	r7, 801f186 <rcl_validate_topic_name+0xaa>
 801f178:	2000      	movs	r0, #0
 801f17a:	6039      	str	r1, [r7, #0]
 801f17c:	e7d9      	b.n	801f132 <rcl_validate_topic_name+0x56>
 801f17e:	2304      	movs	r3, #4
 801f180:	6033      	str	r3, [r6, #0]
 801f182:	2f00      	cmp	r7, #0
 801f184:	d1d2      	bne.n	801f12c <rcl_validate_topic_name+0x50>
 801f186:	2000      	movs	r0, #0
 801f188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f18c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f190:	0752      	lsls	r2, r2, #29
 801f192:	d509      	bpl.n	801f1a8 <rcl_validate_topic_name+0xcc>
 801f194:	2900      	cmp	r1, #0
 801f196:	bf0c      	ite	eq
 801f198:	2200      	moveq	r2, #0
 801f19a:	f005 0201 	andne.w	r2, r5, #1
 801f19e:	b11a      	cbz	r2, 801f1a8 <rcl_validate_topic_name+0xcc>
 801f1a0:	1e4d      	subs	r5, r1, #1
 801f1a2:	429d      	cmp	r5, r3
 801f1a4:	d031      	beq.n	801f20a <rcl_validate_topic_name+0x12e>
 801f1a6:	4615      	mov	r5, r2
 801f1a8:	3101      	adds	r1, #1
 801f1aa:	4288      	cmp	r0, r1
 801f1ac:	d1c7      	bne.n	801f13e <rcl_validate_topic_name+0x62>
 801f1ae:	2d00      	cmp	r5, #0
 801f1b0:	d142      	bne.n	801f238 <rcl_validate_topic_name+0x15c>
 801f1b2:	4628      	mov	r0, r5
 801f1b4:	2301      	movs	r3, #1
 801f1b6:	e00c      	b.n	801f1d2 <rcl_validate_topic_name+0xf6>
 801f1b8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801f1bc:	d101      	bne.n	801f1c2 <rcl_validate_topic_name+0xe6>
 801f1be:	2801      	cmp	r0, #1
 801f1c0:	d047      	beq.n	801f252 <rcl_validate_topic_name+0x176>
 801f1c2:	1c5a      	adds	r2, r3, #1
 801f1c4:	428b      	cmp	r3, r1
 801f1c6:	f100 0001 	add.w	r0, r0, #1
 801f1ca:	f104 0401 	add.w	r4, r4, #1
 801f1ce:	4613      	mov	r3, r2
 801f1d0:	d22e      	bcs.n	801f230 <rcl_validate_topic_name+0x154>
 801f1d2:	4580      	cmp	r8, r0
 801f1d4:	d0f5      	beq.n	801f1c2 <rcl_validate_topic_name+0xe6>
 801f1d6:	7822      	ldrb	r2, [r4, #0]
 801f1d8:	2a2f      	cmp	r2, #47	; 0x2f
 801f1da:	d1ed      	bne.n	801f1b8 <rcl_validate_topic_name+0xdc>
 801f1dc:	7862      	ldrb	r2, [r4, #1]
 801f1de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f1e2:	0752      	lsls	r2, r2, #29
 801f1e4:	d5ed      	bpl.n	801f1c2 <rcl_validate_topic_name+0xe6>
 801f1e6:	2204      	movs	r2, #4
 801f1e8:	6032      	str	r2, [r6, #0]
 801f1ea:	2f00      	cmp	r7, #0
 801f1ec:	d0cb      	beq.n	801f186 <rcl_validate_topic_name+0xaa>
 801f1ee:	2000      	movs	r0, #0
 801f1f0:	603b      	str	r3, [r7, #0]
 801f1f2:	e79e      	b.n	801f132 <rcl_validate_topic_name+0x56>
 801f1f4:	200b      	movs	r0, #11
 801f1f6:	4770      	bx	lr
 801f1f8:	200b      	movs	r0, #11
 801f1fa:	e79a      	b.n	801f132 <rcl_validate_topic_name+0x56>
 801f1fc:	2900      	cmp	r1, #0
 801f1fe:	d0d3      	beq.n	801f1a8 <rcl_validate_topic_name+0xcc>
 801f200:	2306      	movs	r3, #6
 801f202:	6033      	str	r3, [r6, #0]
 801f204:	2f00      	cmp	r7, #0
 801f206:	d1b7      	bne.n	801f178 <rcl_validate_topic_name+0x9c>
 801f208:	e7bd      	b.n	801f186 <rcl_validate_topic_name+0xaa>
 801f20a:	2309      	movs	r3, #9
 801f20c:	6033      	str	r3, [r6, #0]
 801f20e:	2f00      	cmp	r7, #0
 801f210:	d1b2      	bne.n	801f178 <rcl_validate_topic_name+0x9c>
 801f212:	e7b8      	b.n	801f186 <rcl_validate_topic_name+0xaa>
 801f214:	2d00      	cmp	r5, #0
 801f216:	d0c7      	beq.n	801f1a8 <rcl_validate_topic_name+0xcc>
 801f218:	2308      	movs	r3, #8
 801f21a:	6033      	str	r3, [r6, #0]
 801f21c:	2f00      	cmp	r7, #0
 801f21e:	d1ab      	bne.n	801f178 <rcl_validate_topic_name+0x9c>
 801f220:	e7b1      	b.n	801f186 <rcl_validate_topic_name+0xaa>
 801f222:	2d00      	cmp	r5, #0
 801f224:	d1f8      	bne.n	801f218 <rcl_validate_topic_name+0x13c>
 801f226:	460b      	mov	r3, r1
 801f228:	2501      	movs	r5, #1
 801f22a:	e7bd      	b.n	801f1a8 <rcl_validate_topic_name+0xcc>
 801f22c:	2500      	movs	r5, #0
 801f22e:	e7bb      	b.n	801f1a8 <rcl_validate_topic_name+0xcc>
 801f230:	2300      	movs	r3, #0
 801f232:	4618      	mov	r0, r3
 801f234:	6033      	str	r3, [r6, #0]
 801f236:	e77c      	b.n	801f132 <rcl_validate_topic_name+0x56>
 801f238:	2205      	movs	r2, #5
 801f23a:	6032      	str	r2, [r6, #0]
 801f23c:	2f00      	cmp	r7, #0
 801f23e:	d1d6      	bne.n	801f1ee <rcl_validate_topic_name+0x112>
 801f240:	e7a1      	b.n	801f186 <rcl_validate_topic_name+0xaa>
 801f242:	2d00      	cmp	r5, #0
 801f244:	bf14      	ite	ne
 801f246:	2308      	movne	r3, #8
 801f248:	2303      	moveq	r3, #3
 801f24a:	6033      	str	r3, [r6, #0]
 801f24c:	2f00      	cmp	r7, #0
 801f24e:	d193      	bne.n	801f178 <rcl_validate_topic_name+0x9c>
 801f250:	e799      	b.n	801f186 <rcl_validate_topic_name+0xaa>
 801f252:	2307      	movs	r3, #7
 801f254:	6033      	str	r3, [r6, #0]
 801f256:	2f00      	cmp	r7, #0
 801f258:	d095      	beq.n	801f186 <rcl_validate_topic_name+0xaa>
 801f25a:	2301      	movs	r3, #1
 801f25c:	e7c7      	b.n	801f1ee <rcl_validate_topic_name+0x112>
 801f25e:	bf00      	nop
 801f260:	080258cc 	.word	0x080258cc

0801f264 <calloc>:
 801f264:	4b02      	ldr	r3, [pc, #8]	; (801f270 <calloc+0xc>)
 801f266:	460a      	mov	r2, r1
 801f268:	4601      	mov	r1, r0
 801f26a:	6818      	ldr	r0, [r3, #0]
 801f26c:	f000 b802 	b.w	801f274 <_calloc_r>
 801f270:	200009d8 	.word	0x200009d8

0801f274 <_calloc_r>:
 801f274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f276:	fba1 2402 	umull	r2, r4, r1, r2
 801f27a:	b94c      	cbnz	r4, 801f290 <_calloc_r+0x1c>
 801f27c:	4611      	mov	r1, r2
 801f27e:	9201      	str	r2, [sp, #4]
 801f280:	f000 f898 	bl	801f3b4 <_malloc_r>
 801f284:	9a01      	ldr	r2, [sp, #4]
 801f286:	4605      	mov	r5, r0
 801f288:	b930      	cbnz	r0, 801f298 <_calloc_r+0x24>
 801f28a:	4628      	mov	r0, r5
 801f28c:	b003      	add	sp, #12
 801f28e:	bd30      	pop	{r4, r5, pc}
 801f290:	220c      	movs	r2, #12
 801f292:	6002      	str	r2, [r0, #0]
 801f294:	2500      	movs	r5, #0
 801f296:	e7f8      	b.n	801f28a <_calloc_r+0x16>
 801f298:	4621      	mov	r1, r4
 801f29a:	f001 fc3f 	bl	8020b1c <memset>
 801f29e:	e7f4      	b.n	801f28a <_calloc_r+0x16>

0801f2a0 <exit>:
 801f2a0:	b508      	push	{r3, lr}
 801f2a2:	4b06      	ldr	r3, [pc, #24]	; (801f2bc <exit+0x1c>)
 801f2a4:	4604      	mov	r4, r0
 801f2a6:	b113      	cbz	r3, 801f2ae <exit+0xe>
 801f2a8:	2100      	movs	r1, #0
 801f2aa:	f3af 8000 	nop.w
 801f2ae:	4b04      	ldr	r3, [pc, #16]	; (801f2c0 <exit+0x20>)
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	b103      	cbz	r3, 801f2b6 <exit+0x16>
 801f2b4:	4798      	blx	r3
 801f2b6:	4620      	mov	r0, r4
 801f2b8:	f7e4 fb06 	bl	80038c8 <_exit>
 801f2bc:	00000000 	.word	0x00000000
 801f2c0:	200171a4 	.word	0x200171a4

0801f2c4 <getenv>:
 801f2c4:	b507      	push	{r0, r1, r2, lr}
 801f2c6:	4b04      	ldr	r3, [pc, #16]	; (801f2d8 <getenv+0x14>)
 801f2c8:	4601      	mov	r1, r0
 801f2ca:	aa01      	add	r2, sp, #4
 801f2cc:	6818      	ldr	r0, [r3, #0]
 801f2ce:	f000 f805 	bl	801f2dc <_findenv_r>
 801f2d2:	b003      	add	sp, #12
 801f2d4:	f85d fb04 	ldr.w	pc, [sp], #4
 801f2d8:	200009d8 	.word	0x200009d8

0801f2dc <_findenv_r>:
 801f2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f350 <_findenv_r+0x74>
 801f2e4:	4607      	mov	r7, r0
 801f2e6:	4689      	mov	r9, r1
 801f2e8:	4616      	mov	r6, r2
 801f2ea:	f002 fb0d 	bl	8021908 <__env_lock>
 801f2ee:	f8da 4000 	ldr.w	r4, [sl]
 801f2f2:	b134      	cbz	r4, 801f302 <_findenv_r+0x26>
 801f2f4:	464b      	mov	r3, r9
 801f2f6:	4698      	mov	r8, r3
 801f2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f2fc:	b13a      	cbz	r2, 801f30e <_findenv_r+0x32>
 801f2fe:	2a3d      	cmp	r2, #61	; 0x3d
 801f300:	d1f9      	bne.n	801f2f6 <_findenv_r+0x1a>
 801f302:	4638      	mov	r0, r7
 801f304:	f002 fb06 	bl	8021914 <__env_unlock>
 801f308:	2000      	movs	r0, #0
 801f30a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f30e:	eba8 0809 	sub.w	r8, r8, r9
 801f312:	46a3      	mov	fp, r4
 801f314:	f854 0b04 	ldr.w	r0, [r4], #4
 801f318:	2800      	cmp	r0, #0
 801f31a:	d0f2      	beq.n	801f302 <_findenv_r+0x26>
 801f31c:	4642      	mov	r2, r8
 801f31e:	4649      	mov	r1, r9
 801f320:	f001 fc11 	bl	8020b46 <strncmp>
 801f324:	2800      	cmp	r0, #0
 801f326:	d1f4      	bne.n	801f312 <_findenv_r+0x36>
 801f328:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f32c:	eb03 0508 	add.w	r5, r3, r8
 801f330:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f334:	2b3d      	cmp	r3, #61	; 0x3d
 801f336:	d1ec      	bne.n	801f312 <_findenv_r+0x36>
 801f338:	f8da 3000 	ldr.w	r3, [sl]
 801f33c:	ebab 0303 	sub.w	r3, fp, r3
 801f340:	109b      	asrs	r3, r3, #2
 801f342:	4638      	mov	r0, r7
 801f344:	6033      	str	r3, [r6, #0]
 801f346:	f002 fae5 	bl	8021914 <__env_unlock>
 801f34a:	1c68      	adds	r0, r5, #1
 801f34c:	e7dd      	b.n	801f30a <_findenv_r+0x2e>
 801f34e:	bf00      	nop
 801f350:	20000000 	.word	0x20000000

0801f354 <malloc>:
 801f354:	4b02      	ldr	r3, [pc, #8]	; (801f360 <malloc+0xc>)
 801f356:	4601      	mov	r1, r0
 801f358:	6818      	ldr	r0, [r3, #0]
 801f35a:	f000 b82b 	b.w	801f3b4 <_malloc_r>
 801f35e:	bf00      	nop
 801f360:	200009d8 	.word	0x200009d8

0801f364 <free>:
 801f364:	4b02      	ldr	r3, [pc, #8]	; (801f370 <free+0xc>)
 801f366:	4601      	mov	r1, r0
 801f368:	6818      	ldr	r0, [r3, #0]
 801f36a:	f002 bad9 	b.w	8021920 <_free_r>
 801f36e:	bf00      	nop
 801f370:	200009d8 	.word	0x200009d8

0801f374 <sbrk_aligned>:
 801f374:	b570      	push	{r4, r5, r6, lr}
 801f376:	4e0e      	ldr	r6, [pc, #56]	; (801f3b0 <sbrk_aligned+0x3c>)
 801f378:	460c      	mov	r4, r1
 801f37a:	6831      	ldr	r1, [r6, #0]
 801f37c:	4605      	mov	r5, r0
 801f37e:	b911      	cbnz	r1, 801f386 <sbrk_aligned+0x12>
 801f380:	f001 fc42 	bl	8020c08 <_sbrk_r>
 801f384:	6030      	str	r0, [r6, #0]
 801f386:	4621      	mov	r1, r4
 801f388:	4628      	mov	r0, r5
 801f38a:	f001 fc3d 	bl	8020c08 <_sbrk_r>
 801f38e:	1c43      	adds	r3, r0, #1
 801f390:	d00a      	beq.n	801f3a8 <sbrk_aligned+0x34>
 801f392:	1cc4      	adds	r4, r0, #3
 801f394:	f024 0403 	bic.w	r4, r4, #3
 801f398:	42a0      	cmp	r0, r4
 801f39a:	d007      	beq.n	801f3ac <sbrk_aligned+0x38>
 801f39c:	1a21      	subs	r1, r4, r0
 801f39e:	4628      	mov	r0, r5
 801f3a0:	f001 fc32 	bl	8020c08 <_sbrk_r>
 801f3a4:	3001      	adds	r0, #1
 801f3a6:	d101      	bne.n	801f3ac <sbrk_aligned+0x38>
 801f3a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	bd70      	pop	{r4, r5, r6, pc}
 801f3b0:	20017068 	.word	0x20017068

0801f3b4 <_malloc_r>:
 801f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f3b8:	1ccd      	adds	r5, r1, #3
 801f3ba:	f025 0503 	bic.w	r5, r5, #3
 801f3be:	3508      	adds	r5, #8
 801f3c0:	2d0c      	cmp	r5, #12
 801f3c2:	bf38      	it	cc
 801f3c4:	250c      	movcc	r5, #12
 801f3c6:	2d00      	cmp	r5, #0
 801f3c8:	4607      	mov	r7, r0
 801f3ca:	db01      	blt.n	801f3d0 <_malloc_r+0x1c>
 801f3cc:	42a9      	cmp	r1, r5
 801f3ce:	d905      	bls.n	801f3dc <_malloc_r+0x28>
 801f3d0:	230c      	movs	r3, #12
 801f3d2:	603b      	str	r3, [r7, #0]
 801f3d4:	2600      	movs	r6, #0
 801f3d6:	4630      	mov	r0, r6
 801f3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f3dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f4b0 <_malloc_r+0xfc>
 801f3e0:	f000 f868 	bl	801f4b4 <__malloc_lock>
 801f3e4:	f8d8 3000 	ldr.w	r3, [r8]
 801f3e8:	461c      	mov	r4, r3
 801f3ea:	bb5c      	cbnz	r4, 801f444 <_malloc_r+0x90>
 801f3ec:	4629      	mov	r1, r5
 801f3ee:	4638      	mov	r0, r7
 801f3f0:	f7ff ffc0 	bl	801f374 <sbrk_aligned>
 801f3f4:	1c43      	adds	r3, r0, #1
 801f3f6:	4604      	mov	r4, r0
 801f3f8:	d155      	bne.n	801f4a6 <_malloc_r+0xf2>
 801f3fa:	f8d8 4000 	ldr.w	r4, [r8]
 801f3fe:	4626      	mov	r6, r4
 801f400:	2e00      	cmp	r6, #0
 801f402:	d145      	bne.n	801f490 <_malloc_r+0xdc>
 801f404:	2c00      	cmp	r4, #0
 801f406:	d048      	beq.n	801f49a <_malloc_r+0xe6>
 801f408:	6823      	ldr	r3, [r4, #0]
 801f40a:	4631      	mov	r1, r6
 801f40c:	4638      	mov	r0, r7
 801f40e:	eb04 0903 	add.w	r9, r4, r3
 801f412:	f001 fbf9 	bl	8020c08 <_sbrk_r>
 801f416:	4581      	cmp	r9, r0
 801f418:	d13f      	bne.n	801f49a <_malloc_r+0xe6>
 801f41a:	6821      	ldr	r1, [r4, #0]
 801f41c:	1a6d      	subs	r5, r5, r1
 801f41e:	4629      	mov	r1, r5
 801f420:	4638      	mov	r0, r7
 801f422:	f7ff ffa7 	bl	801f374 <sbrk_aligned>
 801f426:	3001      	adds	r0, #1
 801f428:	d037      	beq.n	801f49a <_malloc_r+0xe6>
 801f42a:	6823      	ldr	r3, [r4, #0]
 801f42c:	442b      	add	r3, r5
 801f42e:	6023      	str	r3, [r4, #0]
 801f430:	f8d8 3000 	ldr.w	r3, [r8]
 801f434:	2b00      	cmp	r3, #0
 801f436:	d038      	beq.n	801f4aa <_malloc_r+0xf6>
 801f438:	685a      	ldr	r2, [r3, #4]
 801f43a:	42a2      	cmp	r2, r4
 801f43c:	d12b      	bne.n	801f496 <_malloc_r+0xe2>
 801f43e:	2200      	movs	r2, #0
 801f440:	605a      	str	r2, [r3, #4]
 801f442:	e00f      	b.n	801f464 <_malloc_r+0xb0>
 801f444:	6822      	ldr	r2, [r4, #0]
 801f446:	1b52      	subs	r2, r2, r5
 801f448:	d41f      	bmi.n	801f48a <_malloc_r+0xd6>
 801f44a:	2a0b      	cmp	r2, #11
 801f44c:	d917      	bls.n	801f47e <_malloc_r+0xca>
 801f44e:	1961      	adds	r1, r4, r5
 801f450:	42a3      	cmp	r3, r4
 801f452:	6025      	str	r5, [r4, #0]
 801f454:	bf18      	it	ne
 801f456:	6059      	strne	r1, [r3, #4]
 801f458:	6863      	ldr	r3, [r4, #4]
 801f45a:	bf08      	it	eq
 801f45c:	f8c8 1000 	streq.w	r1, [r8]
 801f460:	5162      	str	r2, [r4, r5]
 801f462:	604b      	str	r3, [r1, #4]
 801f464:	4638      	mov	r0, r7
 801f466:	f104 060b 	add.w	r6, r4, #11
 801f46a:	f000 f829 	bl	801f4c0 <__malloc_unlock>
 801f46e:	f026 0607 	bic.w	r6, r6, #7
 801f472:	1d23      	adds	r3, r4, #4
 801f474:	1af2      	subs	r2, r6, r3
 801f476:	d0ae      	beq.n	801f3d6 <_malloc_r+0x22>
 801f478:	1b9b      	subs	r3, r3, r6
 801f47a:	50a3      	str	r3, [r4, r2]
 801f47c:	e7ab      	b.n	801f3d6 <_malloc_r+0x22>
 801f47e:	42a3      	cmp	r3, r4
 801f480:	6862      	ldr	r2, [r4, #4]
 801f482:	d1dd      	bne.n	801f440 <_malloc_r+0x8c>
 801f484:	f8c8 2000 	str.w	r2, [r8]
 801f488:	e7ec      	b.n	801f464 <_malloc_r+0xb0>
 801f48a:	4623      	mov	r3, r4
 801f48c:	6864      	ldr	r4, [r4, #4]
 801f48e:	e7ac      	b.n	801f3ea <_malloc_r+0x36>
 801f490:	4634      	mov	r4, r6
 801f492:	6876      	ldr	r6, [r6, #4]
 801f494:	e7b4      	b.n	801f400 <_malloc_r+0x4c>
 801f496:	4613      	mov	r3, r2
 801f498:	e7cc      	b.n	801f434 <_malloc_r+0x80>
 801f49a:	230c      	movs	r3, #12
 801f49c:	603b      	str	r3, [r7, #0]
 801f49e:	4638      	mov	r0, r7
 801f4a0:	f000 f80e 	bl	801f4c0 <__malloc_unlock>
 801f4a4:	e797      	b.n	801f3d6 <_malloc_r+0x22>
 801f4a6:	6025      	str	r5, [r4, #0]
 801f4a8:	e7dc      	b.n	801f464 <_malloc_r+0xb0>
 801f4aa:	605b      	str	r3, [r3, #4]
 801f4ac:	deff      	udf	#255	; 0xff
 801f4ae:	bf00      	nop
 801f4b0:	20017064 	.word	0x20017064

0801f4b4 <__malloc_lock>:
 801f4b4:	4801      	ldr	r0, [pc, #4]	; (801f4bc <__malloc_lock+0x8>)
 801f4b6:	f001 bbf4 	b.w	8020ca2 <__retarget_lock_acquire_recursive>
 801f4ba:	bf00      	nop
 801f4bc:	200171ad 	.word	0x200171ad

0801f4c0 <__malloc_unlock>:
 801f4c0:	4801      	ldr	r0, [pc, #4]	; (801f4c8 <__malloc_unlock+0x8>)
 801f4c2:	f001 bbef 	b.w	8020ca4 <__retarget_lock_release_recursive>
 801f4c6:	bf00      	nop
 801f4c8:	200171ad 	.word	0x200171ad

0801f4cc <srand>:
 801f4cc:	b538      	push	{r3, r4, r5, lr}
 801f4ce:	4b10      	ldr	r3, [pc, #64]	; (801f510 <srand+0x44>)
 801f4d0:	681d      	ldr	r5, [r3, #0]
 801f4d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f4d4:	4604      	mov	r4, r0
 801f4d6:	b9b3      	cbnz	r3, 801f506 <srand+0x3a>
 801f4d8:	2018      	movs	r0, #24
 801f4da:	f7ff ff3b 	bl	801f354 <malloc>
 801f4de:	4602      	mov	r2, r0
 801f4e0:	6328      	str	r0, [r5, #48]	; 0x30
 801f4e2:	b920      	cbnz	r0, 801f4ee <srand+0x22>
 801f4e4:	4b0b      	ldr	r3, [pc, #44]	; (801f514 <srand+0x48>)
 801f4e6:	480c      	ldr	r0, [pc, #48]	; (801f518 <srand+0x4c>)
 801f4e8:	2146      	movs	r1, #70	; 0x46
 801f4ea:	f001 fbf9 	bl	8020ce0 <__assert_func>
 801f4ee:	490b      	ldr	r1, [pc, #44]	; (801f51c <srand+0x50>)
 801f4f0:	4b0b      	ldr	r3, [pc, #44]	; (801f520 <srand+0x54>)
 801f4f2:	e9c0 1300 	strd	r1, r3, [r0]
 801f4f6:	4b0b      	ldr	r3, [pc, #44]	; (801f524 <srand+0x58>)
 801f4f8:	6083      	str	r3, [r0, #8]
 801f4fa:	230b      	movs	r3, #11
 801f4fc:	8183      	strh	r3, [r0, #12]
 801f4fe:	2100      	movs	r1, #0
 801f500:	2001      	movs	r0, #1
 801f502:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f506:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f508:	2200      	movs	r2, #0
 801f50a:	611c      	str	r4, [r3, #16]
 801f50c:	615a      	str	r2, [r3, #20]
 801f50e:	bd38      	pop	{r3, r4, r5, pc}
 801f510:	200009d8 	.word	0x200009d8
 801f514:	0802585c 	.word	0x0802585c
 801f518:	08025873 	.word	0x08025873
 801f51c:	abcd330e 	.word	0xabcd330e
 801f520:	e66d1234 	.word	0xe66d1234
 801f524:	0005deec 	.word	0x0005deec

0801f528 <rand>:
 801f528:	4b16      	ldr	r3, [pc, #88]	; (801f584 <rand+0x5c>)
 801f52a:	b510      	push	{r4, lr}
 801f52c:	681c      	ldr	r4, [r3, #0]
 801f52e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f530:	b9b3      	cbnz	r3, 801f560 <rand+0x38>
 801f532:	2018      	movs	r0, #24
 801f534:	f7ff ff0e 	bl	801f354 <malloc>
 801f538:	4602      	mov	r2, r0
 801f53a:	6320      	str	r0, [r4, #48]	; 0x30
 801f53c:	b920      	cbnz	r0, 801f548 <rand+0x20>
 801f53e:	4b12      	ldr	r3, [pc, #72]	; (801f588 <rand+0x60>)
 801f540:	4812      	ldr	r0, [pc, #72]	; (801f58c <rand+0x64>)
 801f542:	2152      	movs	r1, #82	; 0x52
 801f544:	f001 fbcc 	bl	8020ce0 <__assert_func>
 801f548:	4911      	ldr	r1, [pc, #68]	; (801f590 <rand+0x68>)
 801f54a:	4b12      	ldr	r3, [pc, #72]	; (801f594 <rand+0x6c>)
 801f54c:	e9c0 1300 	strd	r1, r3, [r0]
 801f550:	4b11      	ldr	r3, [pc, #68]	; (801f598 <rand+0x70>)
 801f552:	6083      	str	r3, [r0, #8]
 801f554:	230b      	movs	r3, #11
 801f556:	8183      	strh	r3, [r0, #12]
 801f558:	2100      	movs	r1, #0
 801f55a:	2001      	movs	r0, #1
 801f55c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f560:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f562:	480e      	ldr	r0, [pc, #56]	; (801f59c <rand+0x74>)
 801f564:	690b      	ldr	r3, [r1, #16]
 801f566:	694c      	ldr	r4, [r1, #20]
 801f568:	4a0d      	ldr	r2, [pc, #52]	; (801f5a0 <rand+0x78>)
 801f56a:	4358      	muls	r0, r3
 801f56c:	fb02 0004 	mla	r0, r2, r4, r0
 801f570:	fba3 3202 	umull	r3, r2, r3, r2
 801f574:	3301      	adds	r3, #1
 801f576:	eb40 0002 	adc.w	r0, r0, r2
 801f57a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f57e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f582:	bd10      	pop	{r4, pc}
 801f584:	200009d8 	.word	0x200009d8
 801f588:	0802585c 	.word	0x0802585c
 801f58c:	08025873 	.word	0x08025873
 801f590:	abcd330e 	.word	0xabcd330e
 801f594:	e66d1234 	.word	0xe66d1234
 801f598:	0005deec 	.word	0x0005deec
 801f59c:	5851f42d 	.word	0x5851f42d
 801f5a0:	4c957f2d 	.word	0x4c957f2d

0801f5a4 <realloc>:
 801f5a4:	4b02      	ldr	r3, [pc, #8]	; (801f5b0 <realloc+0xc>)
 801f5a6:	460a      	mov	r2, r1
 801f5a8:	4601      	mov	r1, r0
 801f5aa:	6818      	ldr	r0, [r3, #0]
 801f5ac:	f000 b802 	b.w	801f5b4 <_realloc_r>
 801f5b0:	200009d8 	.word	0x200009d8

0801f5b4 <_realloc_r>:
 801f5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5b8:	4680      	mov	r8, r0
 801f5ba:	4614      	mov	r4, r2
 801f5bc:	460e      	mov	r6, r1
 801f5be:	b921      	cbnz	r1, 801f5ca <_realloc_r+0x16>
 801f5c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f5c4:	4611      	mov	r1, r2
 801f5c6:	f7ff bef5 	b.w	801f3b4 <_malloc_r>
 801f5ca:	b92a      	cbnz	r2, 801f5d8 <_realloc_r+0x24>
 801f5cc:	f002 f9a8 	bl	8021920 <_free_r>
 801f5d0:	4625      	mov	r5, r4
 801f5d2:	4628      	mov	r0, r5
 801f5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5d8:	f002 fe98 	bl	802230c <_malloc_usable_size_r>
 801f5dc:	4284      	cmp	r4, r0
 801f5de:	4607      	mov	r7, r0
 801f5e0:	d802      	bhi.n	801f5e8 <_realloc_r+0x34>
 801f5e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f5e6:	d812      	bhi.n	801f60e <_realloc_r+0x5a>
 801f5e8:	4621      	mov	r1, r4
 801f5ea:	4640      	mov	r0, r8
 801f5ec:	f7ff fee2 	bl	801f3b4 <_malloc_r>
 801f5f0:	4605      	mov	r5, r0
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	d0ed      	beq.n	801f5d2 <_realloc_r+0x1e>
 801f5f6:	42bc      	cmp	r4, r7
 801f5f8:	4622      	mov	r2, r4
 801f5fa:	4631      	mov	r1, r6
 801f5fc:	bf28      	it	cs
 801f5fe:	463a      	movcs	r2, r7
 801f600:	f001 fb59 	bl	8020cb6 <memcpy>
 801f604:	4631      	mov	r1, r6
 801f606:	4640      	mov	r0, r8
 801f608:	f002 f98a 	bl	8021920 <_free_r>
 801f60c:	e7e1      	b.n	801f5d2 <_realloc_r+0x1e>
 801f60e:	4635      	mov	r5, r6
 801f610:	e7df      	b.n	801f5d2 <_realloc_r+0x1e>
	...

0801f614 <_strtoul_l.constprop.0>:
 801f614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f618:	4f36      	ldr	r7, [pc, #216]	; (801f6f4 <_strtoul_l.constprop.0+0xe0>)
 801f61a:	4686      	mov	lr, r0
 801f61c:	460d      	mov	r5, r1
 801f61e:	4628      	mov	r0, r5
 801f620:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f624:	5d3e      	ldrb	r6, [r7, r4]
 801f626:	f016 0608 	ands.w	r6, r6, #8
 801f62a:	d1f8      	bne.n	801f61e <_strtoul_l.constprop.0+0xa>
 801f62c:	2c2d      	cmp	r4, #45	; 0x2d
 801f62e:	d130      	bne.n	801f692 <_strtoul_l.constprop.0+0x7e>
 801f630:	782c      	ldrb	r4, [r5, #0]
 801f632:	2601      	movs	r6, #1
 801f634:	1c85      	adds	r5, r0, #2
 801f636:	2b00      	cmp	r3, #0
 801f638:	d057      	beq.n	801f6ea <_strtoul_l.constprop.0+0xd6>
 801f63a:	2b10      	cmp	r3, #16
 801f63c:	d109      	bne.n	801f652 <_strtoul_l.constprop.0+0x3e>
 801f63e:	2c30      	cmp	r4, #48	; 0x30
 801f640:	d107      	bne.n	801f652 <_strtoul_l.constprop.0+0x3e>
 801f642:	7828      	ldrb	r0, [r5, #0]
 801f644:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f648:	2858      	cmp	r0, #88	; 0x58
 801f64a:	d149      	bne.n	801f6e0 <_strtoul_l.constprop.0+0xcc>
 801f64c:	786c      	ldrb	r4, [r5, #1]
 801f64e:	2310      	movs	r3, #16
 801f650:	3502      	adds	r5, #2
 801f652:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801f656:	2700      	movs	r7, #0
 801f658:	fbb8 f8f3 	udiv	r8, r8, r3
 801f65c:	fb03 f908 	mul.w	r9, r3, r8
 801f660:	ea6f 0909 	mvn.w	r9, r9
 801f664:	4638      	mov	r0, r7
 801f666:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f66a:	f1bc 0f09 	cmp.w	ip, #9
 801f66e:	d815      	bhi.n	801f69c <_strtoul_l.constprop.0+0x88>
 801f670:	4664      	mov	r4, ip
 801f672:	42a3      	cmp	r3, r4
 801f674:	dd23      	ble.n	801f6be <_strtoul_l.constprop.0+0xaa>
 801f676:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801f67a:	d007      	beq.n	801f68c <_strtoul_l.constprop.0+0x78>
 801f67c:	4580      	cmp	r8, r0
 801f67e:	d31b      	bcc.n	801f6b8 <_strtoul_l.constprop.0+0xa4>
 801f680:	d101      	bne.n	801f686 <_strtoul_l.constprop.0+0x72>
 801f682:	45a1      	cmp	r9, r4
 801f684:	db18      	blt.n	801f6b8 <_strtoul_l.constprop.0+0xa4>
 801f686:	fb00 4003 	mla	r0, r0, r3, r4
 801f68a:	2701      	movs	r7, #1
 801f68c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f690:	e7e9      	b.n	801f666 <_strtoul_l.constprop.0+0x52>
 801f692:	2c2b      	cmp	r4, #43	; 0x2b
 801f694:	bf04      	itt	eq
 801f696:	782c      	ldrbeq	r4, [r5, #0]
 801f698:	1c85      	addeq	r5, r0, #2
 801f69a:	e7cc      	b.n	801f636 <_strtoul_l.constprop.0+0x22>
 801f69c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f6a0:	f1bc 0f19 	cmp.w	ip, #25
 801f6a4:	d801      	bhi.n	801f6aa <_strtoul_l.constprop.0+0x96>
 801f6a6:	3c37      	subs	r4, #55	; 0x37
 801f6a8:	e7e3      	b.n	801f672 <_strtoul_l.constprop.0+0x5e>
 801f6aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f6ae:	f1bc 0f19 	cmp.w	ip, #25
 801f6b2:	d804      	bhi.n	801f6be <_strtoul_l.constprop.0+0xaa>
 801f6b4:	3c57      	subs	r4, #87	; 0x57
 801f6b6:	e7dc      	b.n	801f672 <_strtoul_l.constprop.0+0x5e>
 801f6b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801f6bc:	e7e6      	b.n	801f68c <_strtoul_l.constprop.0+0x78>
 801f6be:	1c7b      	adds	r3, r7, #1
 801f6c0:	d106      	bne.n	801f6d0 <_strtoul_l.constprop.0+0xbc>
 801f6c2:	2322      	movs	r3, #34	; 0x22
 801f6c4:	f8ce 3000 	str.w	r3, [lr]
 801f6c8:	4638      	mov	r0, r7
 801f6ca:	b932      	cbnz	r2, 801f6da <_strtoul_l.constprop.0+0xc6>
 801f6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6d0:	b106      	cbz	r6, 801f6d4 <_strtoul_l.constprop.0+0xc0>
 801f6d2:	4240      	negs	r0, r0
 801f6d4:	2a00      	cmp	r2, #0
 801f6d6:	d0f9      	beq.n	801f6cc <_strtoul_l.constprop.0+0xb8>
 801f6d8:	b107      	cbz	r7, 801f6dc <_strtoul_l.constprop.0+0xc8>
 801f6da:	1e69      	subs	r1, r5, #1
 801f6dc:	6011      	str	r1, [r2, #0]
 801f6de:	e7f5      	b.n	801f6cc <_strtoul_l.constprop.0+0xb8>
 801f6e0:	2430      	movs	r4, #48	; 0x30
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d1b5      	bne.n	801f652 <_strtoul_l.constprop.0+0x3e>
 801f6e6:	2308      	movs	r3, #8
 801f6e8:	e7b3      	b.n	801f652 <_strtoul_l.constprop.0+0x3e>
 801f6ea:	2c30      	cmp	r4, #48	; 0x30
 801f6ec:	d0a9      	beq.n	801f642 <_strtoul_l.constprop.0+0x2e>
 801f6ee:	230a      	movs	r3, #10
 801f6f0:	e7af      	b.n	801f652 <_strtoul_l.constprop.0+0x3e>
 801f6f2:	bf00      	nop
 801f6f4:	080258cc 	.word	0x080258cc

0801f6f8 <strtoul>:
 801f6f8:	4613      	mov	r3, r2
 801f6fa:	460a      	mov	r2, r1
 801f6fc:	4601      	mov	r1, r0
 801f6fe:	4802      	ldr	r0, [pc, #8]	; (801f708 <strtoul+0x10>)
 801f700:	6800      	ldr	r0, [r0, #0]
 801f702:	f7ff bf87 	b.w	801f614 <_strtoul_l.constprop.0>
 801f706:	bf00      	nop
 801f708:	200009d8 	.word	0x200009d8

0801f70c <__cvt>:
 801f70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f70e:	ed2d 8b02 	vpush	{d8}
 801f712:	eeb0 8b40 	vmov.f64	d8, d0
 801f716:	b085      	sub	sp, #20
 801f718:	4617      	mov	r7, r2
 801f71a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f71c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f71e:	ee18 2a90 	vmov	r2, s17
 801f722:	f025 0520 	bic.w	r5, r5, #32
 801f726:	2a00      	cmp	r2, #0
 801f728:	bfb6      	itet	lt
 801f72a:	222d      	movlt	r2, #45	; 0x2d
 801f72c:	2200      	movge	r2, #0
 801f72e:	eeb1 8b40 	vneglt.f64	d8, d0
 801f732:	2d46      	cmp	r5, #70	; 0x46
 801f734:	460c      	mov	r4, r1
 801f736:	701a      	strb	r2, [r3, #0]
 801f738:	d004      	beq.n	801f744 <__cvt+0x38>
 801f73a:	2d45      	cmp	r5, #69	; 0x45
 801f73c:	d100      	bne.n	801f740 <__cvt+0x34>
 801f73e:	3401      	adds	r4, #1
 801f740:	2102      	movs	r1, #2
 801f742:	e000      	b.n	801f746 <__cvt+0x3a>
 801f744:	2103      	movs	r1, #3
 801f746:	ab03      	add	r3, sp, #12
 801f748:	9301      	str	r3, [sp, #4]
 801f74a:	ab02      	add	r3, sp, #8
 801f74c:	9300      	str	r3, [sp, #0]
 801f74e:	4622      	mov	r2, r4
 801f750:	4633      	mov	r3, r6
 801f752:	eeb0 0b48 	vmov.f64	d0, d8
 801f756:	f001 fb6b 	bl	8020e30 <_dtoa_r>
 801f75a:	2d47      	cmp	r5, #71	; 0x47
 801f75c:	d101      	bne.n	801f762 <__cvt+0x56>
 801f75e:	07fb      	lsls	r3, r7, #31
 801f760:	d51a      	bpl.n	801f798 <__cvt+0x8c>
 801f762:	2d46      	cmp	r5, #70	; 0x46
 801f764:	eb00 0204 	add.w	r2, r0, r4
 801f768:	d10c      	bne.n	801f784 <__cvt+0x78>
 801f76a:	7803      	ldrb	r3, [r0, #0]
 801f76c:	2b30      	cmp	r3, #48	; 0x30
 801f76e:	d107      	bne.n	801f780 <__cvt+0x74>
 801f770:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f778:	bf1c      	itt	ne
 801f77a:	f1c4 0401 	rsbne	r4, r4, #1
 801f77e:	6034      	strne	r4, [r6, #0]
 801f780:	6833      	ldr	r3, [r6, #0]
 801f782:	441a      	add	r2, r3
 801f784:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f78c:	bf08      	it	eq
 801f78e:	9203      	streq	r2, [sp, #12]
 801f790:	2130      	movs	r1, #48	; 0x30
 801f792:	9b03      	ldr	r3, [sp, #12]
 801f794:	4293      	cmp	r3, r2
 801f796:	d307      	bcc.n	801f7a8 <__cvt+0x9c>
 801f798:	9b03      	ldr	r3, [sp, #12]
 801f79a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f79c:	1a1b      	subs	r3, r3, r0
 801f79e:	6013      	str	r3, [r2, #0]
 801f7a0:	b005      	add	sp, #20
 801f7a2:	ecbd 8b02 	vpop	{d8}
 801f7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7a8:	1c5c      	adds	r4, r3, #1
 801f7aa:	9403      	str	r4, [sp, #12]
 801f7ac:	7019      	strb	r1, [r3, #0]
 801f7ae:	e7f0      	b.n	801f792 <__cvt+0x86>

0801f7b0 <__exponent>:
 801f7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f7b2:	4603      	mov	r3, r0
 801f7b4:	2900      	cmp	r1, #0
 801f7b6:	bfb8      	it	lt
 801f7b8:	4249      	neglt	r1, r1
 801f7ba:	f803 2b02 	strb.w	r2, [r3], #2
 801f7be:	bfb4      	ite	lt
 801f7c0:	222d      	movlt	r2, #45	; 0x2d
 801f7c2:	222b      	movge	r2, #43	; 0x2b
 801f7c4:	2909      	cmp	r1, #9
 801f7c6:	7042      	strb	r2, [r0, #1]
 801f7c8:	dd2a      	ble.n	801f820 <__exponent+0x70>
 801f7ca:	f10d 0207 	add.w	r2, sp, #7
 801f7ce:	4617      	mov	r7, r2
 801f7d0:	260a      	movs	r6, #10
 801f7d2:	4694      	mov	ip, r2
 801f7d4:	fb91 f5f6 	sdiv	r5, r1, r6
 801f7d8:	fb06 1415 	mls	r4, r6, r5, r1
 801f7dc:	3430      	adds	r4, #48	; 0x30
 801f7de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801f7e2:	460c      	mov	r4, r1
 801f7e4:	2c63      	cmp	r4, #99	; 0x63
 801f7e6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801f7ea:	4629      	mov	r1, r5
 801f7ec:	dcf1      	bgt.n	801f7d2 <__exponent+0x22>
 801f7ee:	3130      	adds	r1, #48	; 0x30
 801f7f0:	f1ac 0402 	sub.w	r4, ip, #2
 801f7f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801f7f8:	1c41      	adds	r1, r0, #1
 801f7fa:	4622      	mov	r2, r4
 801f7fc:	42ba      	cmp	r2, r7
 801f7fe:	d30a      	bcc.n	801f816 <__exponent+0x66>
 801f800:	f10d 0209 	add.w	r2, sp, #9
 801f804:	eba2 020c 	sub.w	r2, r2, ip
 801f808:	42bc      	cmp	r4, r7
 801f80a:	bf88      	it	hi
 801f80c:	2200      	movhi	r2, #0
 801f80e:	4413      	add	r3, r2
 801f810:	1a18      	subs	r0, r3, r0
 801f812:	b003      	add	sp, #12
 801f814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f816:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f81a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801f81e:	e7ed      	b.n	801f7fc <__exponent+0x4c>
 801f820:	2330      	movs	r3, #48	; 0x30
 801f822:	3130      	adds	r1, #48	; 0x30
 801f824:	7083      	strb	r3, [r0, #2]
 801f826:	70c1      	strb	r1, [r0, #3]
 801f828:	1d03      	adds	r3, r0, #4
 801f82a:	e7f1      	b.n	801f810 <__exponent+0x60>
 801f82c:	0000      	movs	r0, r0
	...

0801f830 <_printf_float>:
 801f830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f834:	b08b      	sub	sp, #44	; 0x2c
 801f836:	460c      	mov	r4, r1
 801f838:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801f83c:	4616      	mov	r6, r2
 801f83e:	461f      	mov	r7, r3
 801f840:	4605      	mov	r5, r0
 801f842:	f001 f9a9 	bl	8020b98 <_localeconv_r>
 801f846:	f8d0 b000 	ldr.w	fp, [r0]
 801f84a:	4658      	mov	r0, fp
 801f84c:	f7e0 fd58 	bl	8000300 <strlen>
 801f850:	2300      	movs	r3, #0
 801f852:	9308      	str	r3, [sp, #32]
 801f854:	f8d8 3000 	ldr.w	r3, [r8]
 801f858:	f894 9018 	ldrb.w	r9, [r4, #24]
 801f85c:	6822      	ldr	r2, [r4, #0]
 801f85e:	3307      	adds	r3, #7
 801f860:	f023 0307 	bic.w	r3, r3, #7
 801f864:	f103 0108 	add.w	r1, r3, #8
 801f868:	f8c8 1000 	str.w	r1, [r8]
 801f86c:	ed93 0b00 	vldr	d0, [r3]
 801f870:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801fad0 <_printf_float+0x2a0>
 801f874:	eeb0 7bc0 	vabs.f64	d7, d0
 801f878:	eeb4 7b46 	vcmp.f64	d7, d6
 801f87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f880:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801f884:	4682      	mov	sl, r0
 801f886:	dd24      	ble.n	801f8d2 <_printf_float+0xa2>
 801f888:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f890:	d502      	bpl.n	801f898 <_printf_float+0x68>
 801f892:	232d      	movs	r3, #45	; 0x2d
 801f894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f898:	498f      	ldr	r1, [pc, #572]	; (801fad8 <_printf_float+0x2a8>)
 801f89a:	4b90      	ldr	r3, [pc, #576]	; (801fadc <_printf_float+0x2ac>)
 801f89c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801f8a0:	bf94      	ite	ls
 801f8a2:	4688      	movls	r8, r1
 801f8a4:	4698      	movhi	r8, r3
 801f8a6:	2303      	movs	r3, #3
 801f8a8:	6123      	str	r3, [r4, #16]
 801f8aa:	f022 0204 	bic.w	r2, r2, #4
 801f8ae:	2300      	movs	r3, #0
 801f8b0:	6022      	str	r2, [r4, #0]
 801f8b2:	9304      	str	r3, [sp, #16]
 801f8b4:	9700      	str	r7, [sp, #0]
 801f8b6:	4633      	mov	r3, r6
 801f8b8:	aa09      	add	r2, sp, #36	; 0x24
 801f8ba:	4621      	mov	r1, r4
 801f8bc:	4628      	mov	r0, r5
 801f8be:	f000 f9d1 	bl	801fc64 <_printf_common>
 801f8c2:	3001      	adds	r0, #1
 801f8c4:	f040 808a 	bne.w	801f9dc <_printf_float+0x1ac>
 801f8c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f8cc:	b00b      	add	sp, #44	; 0x2c
 801f8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8d2:	eeb4 0b40 	vcmp.f64	d0, d0
 801f8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8da:	d709      	bvc.n	801f8f0 <_printf_float+0xc0>
 801f8dc:	ee10 3a90 	vmov	r3, s1
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	bfbc      	itt	lt
 801f8e4:	232d      	movlt	r3, #45	; 0x2d
 801f8e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f8ea:	497d      	ldr	r1, [pc, #500]	; (801fae0 <_printf_float+0x2b0>)
 801f8ec:	4b7d      	ldr	r3, [pc, #500]	; (801fae4 <_printf_float+0x2b4>)
 801f8ee:	e7d5      	b.n	801f89c <_printf_float+0x6c>
 801f8f0:	6863      	ldr	r3, [r4, #4]
 801f8f2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801f8f6:	9104      	str	r1, [sp, #16]
 801f8f8:	1c59      	adds	r1, r3, #1
 801f8fa:	d13c      	bne.n	801f976 <_printf_float+0x146>
 801f8fc:	2306      	movs	r3, #6
 801f8fe:	6063      	str	r3, [r4, #4]
 801f900:	2300      	movs	r3, #0
 801f902:	9303      	str	r3, [sp, #12]
 801f904:	ab08      	add	r3, sp, #32
 801f906:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801f90a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f90e:	ab07      	add	r3, sp, #28
 801f910:	6861      	ldr	r1, [r4, #4]
 801f912:	9300      	str	r3, [sp, #0]
 801f914:	6022      	str	r2, [r4, #0]
 801f916:	f10d 031b 	add.w	r3, sp, #27
 801f91a:	4628      	mov	r0, r5
 801f91c:	f7ff fef6 	bl	801f70c <__cvt>
 801f920:	9b04      	ldr	r3, [sp, #16]
 801f922:	9907      	ldr	r1, [sp, #28]
 801f924:	2b47      	cmp	r3, #71	; 0x47
 801f926:	4680      	mov	r8, r0
 801f928:	d108      	bne.n	801f93c <_printf_float+0x10c>
 801f92a:	1cc8      	adds	r0, r1, #3
 801f92c:	db02      	blt.n	801f934 <_printf_float+0x104>
 801f92e:	6863      	ldr	r3, [r4, #4]
 801f930:	4299      	cmp	r1, r3
 801f932:	dd41      	ble.n	801f9b8 <_printf_float+0x188>
 801f934:	f1a9 0902 	sub.w	r9, r9, #2
 801f938:	fa5f f989 	uxtb.w	r9, r9
 801f93c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f940:	d820      	bhi.n	801f984 <_printf_float+0x154>
 801f942:	3901      	subs	r1, #1
 801f944:	464a      	mov	r2, r9
 801f946:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f94a:	9107      	str	r1, [sp, #28]
 801f94c:	f7ff ff30 	bl	801f7b0 <__exponent>
 801f950:	9a08      	ldr	r2, [sp, #32]
 801f952:	9004      	str	r0, [sp, #16]
 801f954:	1813      	adds	r3, r2, r0
 801f956:	2a01      	cmp	r2, #1
 801f958:	6123      	str	r3, [r4, #16]
 801f95a:	dc02      	bgt.n	801f962 <_printf_float+0x132>
 801f95c:	6822      	ldr	r2, [r4, #0]
 801f95e:	07d2      	lsls	r2, r2, #31
 801f960:	d501      	bpl.n	801f966 <_printf_float+0x136>
 801f962:	3301      	adds	r3, #1
 801f964:	6123      	str	r3, [r4, #16]
 801f966:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d0a2      	beq.n	801f8b4 <_printf_float+0x84>
 801f96e:	232d      	movs	r3, #45	; 0x2d
 801f970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f974:	e79e      	b.n	801f8b4 <_printf_float+0x84>
 801f976:	9904      	ldr	r1, [sp, #16]
 801f978:	2947      	cmp	r1, #71	; 0x47
 801f97a:	d1c1      	bne.n	801f900 <_printf_float+0xd0>
 801f97c:	2b00      	cmp	r3, #0
 801f97e:	d1bf      	bne.n	801f900 <_printf_float+0xd0>
 801f980:	2301      	movs	r3, #1
 801f982:	e7bc      	b.n	801f8fe <_printf_float+0xce>
 801f984:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801f988:	d118      	bne.n	801f9bc <_printf_float+0x18c>
 801f98a:	2900      	cmp	r1, #0
 801f98c:	6863      	ldr	r3, [r4, #4]
 801f98e:	dd0b      	ble.n	801f9a8 <_printf_float+0x178>
 801f990:	6121      	str	r1, [r4, #16]
 801f992:	b913      	cbnz	r3, 801f99a <_printf_float+0x16a>
 801f994:	6822      	ldr	r2, [r4, #0]
 801f996:	07d0      	lsls	r0, r2, #31
 801f998:	d502      	bpl.n	801f9a0 <_printf_float+0x170>
 801f99a:	3301      	adds	r3, #1
 801f99c:	440b      	add	r3, r1
 801f99e:	6123      	str	r3, [r4, #16]
 801f9a0:	2300      	movs	r3, #0
 801f9a2:	65a1      	str	r1, [r4, #88]	; 0x58
 801f9a4:	9304      	str	r3, [sp, #16]
 801f9a6:	e7de      	b.n	801f966 <_printf_float+0x136>
 801f9a8:	b913      	cbnz	r3, 801f9b0 <_printf_float+0x180>
 801f9aa:	6822      	ldr	r2, [r4, #0]
 801f9ac:	07d2      	lsls	r2, r2, #31
 801f9ae:	d501      	bpl.n	801f9b4 <_printf_float+0x184>
 801f9b0:	3302      	adds	r3, #2
 801f9b2:	e7f4      	b.n	801f99e <_printf_float+0x16e>
 801f9b4:	2301      	movs	r3, #1
 801f9b6:	e7f2      	b.n	801f99e <_printf_float+0x16e>
 801f9b8:	f04f 0967 	mov.w	r9, #103	; 0x67
 801f9bc:	9b08      	ldr	r3, [sp, #32]
 801f9be:	4299      	cmp	r1, r3
 801f9c0:	db05      	blt.n	801f9ce <_printf_float+0x19e>
 801f9c2:	6823      	ldr	r3, [r4, #0]
 801f9c4:	6121      	str	r1, [r4, #16]
 801f9c6:	07d8      	lsls	r0, r3, #31
 801f9c8:	d5ea      	bpl.n	801f9a0 <_printf_float+0x170>
 801f9ca:	1c4b      	adds	r3, r1, #1
 801f9cc:	e7e7      	b.n	801f99e <_printf_float+0x16e>
 801f9ce:	2900      	cmp	r1, #0
 801f9d0:	bfd4      	ite	le
 801f9d2:	f1c1 0202 	rsble	r2, r1, #2
 801f9d6:	2201      	movgt	r2, #1
 801f9d8:	4413      	add	r3, r2
 801f9da:	e7e0      	b.n	801f99e <_printf_float+0x16e>
 801f9dc:	6823      	ldr	r3, [r4, #0]
 801f9de:	055a      	lsls	r2, r3, #21
 801f9e0:	d407      	bmi.n	801f9f2 <_printf_float+0x1c2>
 801f9e2:	6923      	ldr	r3, [r4, #16]
 801f9e4:	4642      	mov	r2, r8
 801f9e6:	4631      	mov	r1, r6
 801f9e8:	4628      	mov	r0, r5
 801f9ea:	47b8      	blx	r7
 801f9ec:	3001      	adds	r0, #1
 801f9ee:	d12a      	bne.n	801fa46 <_printf_float+0x216>
 801f9f0:	e76a      	b.n	801f8c8 <_printf_float+0x98>
 801f9f2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f9f6:	f240 80e0 	bls.w	801fbba <_printf_float+0x38a>
 801f9fa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f9fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fa02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa06:	d133      	bne.n	801fa70 <_printf_float+0x240>
 801fa08:	4a37      	ldr	r2, [pc, #220]	; (801fae8 <_printf_float+0x2b8>)
 801fa0a:	2301      	movs	r3, #1
 801fa0c:	4631      	mov	r1, r6
 801fa0e:	4628      	mov	r0, r5
 801fa10:	47b8      	blx	r7
 801fa12:	3001      	adds	r0, #1
 801fa14:	f43f af58 	beq.w	801f8c8 <_printf_float+0x98>
 801fa18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fa1c:	429a      	cmp	r2, r3
 801fa1e:	db02      	blt.n	801fa26 <_printf_float+0x1f6>
 801fa20:	6823      	ldr	r3, [r4, #0]
 801fa22:	07d8      	lsls	r0, r3, #31
 801fa24:	d50f      	bpl.n	801fa46 <_printf_float+0x216>
 801fa26:	4653      	mov	r3, sl
 801fa28:	465a      	mov	r2, fp
 801fa2a:	4631      	mov	r1, r6
 801fa2c:	4628      	mov	r0, r5
 801fa2e:	47b8      	blx	r7
 801fa30:	3001      	adds	r0, #1
 801fa32:	f43f af49 	beq.w	801f8c8 <_printf_float+0x98>
 801fa36:	f04f 0800 	mov.w	r8, #0
 801fa3a:	f104 091a 	add.w	r9, r4, #26
 801fa3e:	9b08      	ldr	r3, [sp, #32]
 801fa40:	3b01      	subs	r3, #1
 801fa42:	4543      	cmp	r3, r8
 801fa44:	dc09      	bgt.n	801fa5a <_printf_float+0x22a>
 801fa46:	6823      	ldr	r3, [r4, #0]
 801fa48:	079b      	lsls	r3, r3, #30
 801fa4a:	f100 8106 	bmi.w	801fc5a <_printf_float+0x42a>
 801fa4e:	68e0      	ldr	r0, [r4, #12]
 801fa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa52:	4298      	cmp	r0, r3
 801fa54:	bfb8      	it	lt
 801fa56:	4618      	movlt	r0, r3
 801fa58:	e738      	b.n	801f8cc <_printf_float+0x9c>
 801fa5a:	2301      	movs	r3, #1
 801fa5c:	464a      	mov	r2, r9
 801fa5e:	4631      	mov	r1, r6
 801fa60:	4628      	mov	r0, r5
 801fa62:	47b8      	blx	r7
 801fa64:	3001      	adds	r0, #1
 801fa66:	f43f af2f 	beq.w	801f8c8 <_printf_float+0x98>
 801fa6a:	f108 0801 	add.w	r8, r8, #1
 801fa6e:	e7e6      	b.n	801fa3e <_printf_float+0x20e>
 801fa70:	9b07      	ldr	r3, [sp, #28]
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	dc3a      	bgt.n	801faec <_printf_float+0x2bc>
 801fa76:	4a1c      	ldr	r2, [pc, #112]	; (801fae8 <_printf_float+0x2b8>)
 801fa78:	2301      	movs	r3, #1
 801fa7a:	4631      	mov	r1, r6
 801fa7c:	4628      	mov	r0, r5
 801fa7e:	47b8      	blx	r7
 801fa80:	3001      	adds	r0, #1
 801fa82:	f43f af21 	beq.w	801f8c8 <_printf_float+0x98>
 801fa86:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fa8a:	4313      	orrs	r3, r2
 801fa8c:	d102      	bne.n	801fa94 <_printf_float+0x264>
 801fa8e:	6823      	ldr	r3, [r4, #0]
 801fa90:	07d9      	lsls	r1, r3, #31
 801fa92:	d5d8      	bpl.n	801fa46 <_printf_float+0x216>
 801fa94:	4653      	mov	r3, sl
 801fa96:	465a      	mov	r2, fp
 801fa98:	4631      	mov	r1, r6
 801fa9a:	4628      	mov	r0, r5
 801fa9c:	47b8      	blx	r7
 801fa9e:	3001      	adds	r0, #1
 801faa0:	f43f af12 	beq.w	801f8c8 <_printf_float+0x98>
 801faa4:	f04f 0900 	mov.w	r9, #0
 801faa8:	f104 0a1a 	add.w	sl, r4, #26
 801faac:	9b07      	ldr	r3, [sp, #28]
 801faae:	425b      	negs	r3, r3
 801fab0:	454b      	cmp	r3, r9
 801fab2:	dc01      	bgt.n	801fab8 <_printf_float+0x288>
 801fab4:	9b08      	ldr	r3, [sp, #32]
 801fab6:	e795      	b.n	801f9e4 <_printf_float+0x1b4>
 801fab8:	2301      	movs	r3, #1
 801faba:	4652      	mov	r2, sl
 801fabc:	4631      	mov	r1, r6
 801fabe:	4628      	mov	r0, r5
 801fac0:	47b8      	blx	r7
 801fac2:	3001      	adds	r0, #1
 801fac4:	f43f af00 	beq.w	801f8c8 <_printf_float+0x98>
 801fac8:	f109 0901 	add.w	r9, r9, #1
 801facc:	e7ee      	b.n	801faac <_printf_float+0x27c>
 801face:	bf00      	nop
 801fad0:	ffffffff 	.word	0xffffffff
 801fad4:	7fefffff 	.word	0x7fefffff
 801fad8:	080259cc 	.word	0x080259cc
 801fadc:	080259d0 	.word	0x080259d0
 801fae0:	080259d4 	.word	0x080259d4
 801fae4:	080259d8 	.word	0x080259d8
 801fae8:	080259dc 	.word	0x080259dc
 801faec:	9a08      	ldr	r2, [sp, #32]
 801faee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801faf0:	429a      	cmp	r2, r3
 801faf2:	bfa8      	it	ge
 801faf4:	461a      	movge	r2, r3
 801faf6:	2a00      	cmp	r2, #0
 801faf8:	4691      	mov	r9, r2
 801fafa:	dc38      	bgt.n	801fb6e <_printf_float+0x33e>
 801fafc:	2300      	movs	r3, #0
 801fafe:	9305      	str	r3, [sp, #20]
 801fb00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fb04:	f104 021a 	add.w	r2, r4, #26
 801fb08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fb0a:	9905      	ldr	r1, [sp, #20]
 801fb0c:	9304      	str	r3, [sp, #16]
 801fb0e:	eba3 0309 	sub.w	r3, r3, r9
 801fb12:	428b      	cmp	r3, r1
 801fb14:	dc33      	bgt.n	801fb7e <_printf_float+0x34e>
 801fb16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fb1a:	429a      	cmp	r2, r3
 801fb1c:	db3c      	blt.n	801fb98 <_printf_float+0x368>
 801fb1e:	6823      	ldr	r3, [r4, #0]
 801fb20:	07da      	lsls	r2, r3, #31
 801fb22:	d439      	bmi.n	801fb98 <_printf_float+0x368>
 801fb24:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801fb28:	eba2 0903 	sub.w	r9, r2, r3
 801fb2c:	9b04      	ldr	r3, [sp, #16]
 801fb2e:	1ad2      	subs	r2, r2, r3
 801fb30:	4591      	cmp	r9, r2
 801fb32:	bfa8      	it	ge
 801fb34:	4691      	movge	r9, r2
 801fb36:	f1b9 0f00 	cmp.w	r9, #0
 801fb3a:	dc35      	bgt.n	801fba8 <_printf_float+0x378>
 801fb3c:	f04f 0800 	mov.w	r8, #0
 801fb40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fb44:	f104 0a1a 	add.w	sl, r4, #26
 801fb48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801fb4c:	1a9b      	subs	r3, r3, r2
 801fb4e:	eba3 0309 	sub.w	r3, r3, r9
 801fb52:	4543      	cmp	r3, r8
 801fb54:	f77f af77 	ble.w	801fa46 <_printf_float+0x216>
 801fb58:	2301      	movs	r3, #1
 801fb5a:	4652      	mov	r2, sl
 801fb5c:	4631      	mov	r1, r6
 801fb5e:	4628      	mov	r0, r5
 801fb60:	47b8      	blx	r7
 801fb62:	3001      	adds	r0, #1
 801fb64:	f43f aeb0 	beq.w	801f8c8 <_printf_float+0x98>
 801fb68:	f108 0801 	add.w	r8, r8, #1
 801fb6c:	e7ec      	b.n	801fb48 <_printf_float+0x318>
 801fb6e:	4613      	mov	r3, r2
 801fb70:	4631      	mov	r1, r6
 801fb72:	4642      	mov	r2, r8
 801fb74:	4628      	mov	r0, r5
 801fb76:	47b8      	blx	r7
 801fb78:	3001      	adds	r0, #1
 801fb7a:	d1bf      	bne.n	801fafc <_printf_float+0x2cc>
 801fb7c:	e6a4      	b.n	801f8c8 <_printf_float+0x98>
 801fb7e:	2301      	movs	r3, #1
 801fb80:	4631      	mov	r1, r6
 801fb82:	4628      	mov	r0, r5
 801fb84:	9204      	str	r2, [sp, #16]
 801fb86:	47b8      	blx	r7
 801fb88:	3001      	adds	r0, #1
 801fb8a:	f43f ae9d 	beq.w	801f8c8 <_printf_float+0x98>
 801fb8e:	9b05      	ldr	r3, [sp, #20]
 801fb90:	9a04      	ldr	r2, [sp, #16]
 801fb92:	3301      	adds	r3, #1
 801fb94:	9305      	str	r3, [sp, #20]
 801fb96:	e7b7      	b.n	801fb08 <_printf_float+0x2d8>
 801fb98:	4653      	mov	r3, sl
 801fb9a:	465a      	mov	r2, fp
 801fb9c:	4631      	mov	r1, r6
 801fb9e:	4628      	mov	r0, r5
 801fba0:	47b8      	blx	r7
 801fba2:	3001      	adds	r0, #1
 801fba4:	d1be      	bne.n	801fb24 <_printf_float+0x2f4>
 801fba6:	e68f      	b.n	801f8c8 <_printf_float+0x98>
 801fba8:	9a04      	ldr	r2, [sp, #16]
 801fbaa:	464b      	mov	r3, r9
 801fbac:	4442      	add	r2, r8
 801fbae:	4631      	mov	r1, r6
 801fbb0:	4628      	mov	r0, r5
 801fbb2:	47b8      	blx	r7
 801fbb4:	3001      	adds	r0, #1
 801fbb6:	d1c1      	bne.n	801fb3c <_printf_float+0x30c>
 801fbb8:	e686      	b.n	801f8c8 <_printf_float+0x98>
 801fbba:	9a08      	ldr	r2, [sp, #32]
 801fbbc:	2a01      	cmp	r2, #1
 801fbbe:	dc01      	bgt.n	801fbc4 <_printf_float+0x394>
 801fbc0:	07db      	lsls	r3, r3, #31
 801fbc2:	d537      	bpl.n	801fc34 <_printf_float+0x404>
 801fbc4:	2301      	movs	r3, #1
 801fbc6:	4642      	mov	r2, r8
 801fbc8:	4631      	mov	r1, r6
 801fbca:	4628      	mov	r0, r5
 801fbcc:	47b8      	blx	r7
 801fbce:	3001      	adds	r0, #1
 801fbd0:	f43f ae7a 	beq.w	801f8c8 <_printf_float+0x98>
 801fbd4:	4653      	mov	r3, sl
 801fbd6:	465a      	mov	r2, fp
 801fbd8:	4631      	mov	r1, r6
 801fbda:	4628      	mov	r0, r5
 801fbdc:	47b8      	blx	r7
 801fbde:	3001      	adds	r0, #1
 801fbe0:	f43f ae72 	beq.w	801f8c8 <_printf_float+0x98>
 801fbe4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801fbe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbf0:	9b08      	ldr	r3, [sp, #32]
 801fbf2:	d01a      	beq.n	801fc2a <_printf_float+0x3fa>
 801fbf4:	3b01      	subs	r3, #1
 801fbf6:	f108 0201 	add.w	r2, r8, #1
 801fbfa:	4631      	mov	r1, r6
 801fbfc:	4628      	mov	r0, r5
 801fbfe:	47b8      	blx	r7
 801fc00:	3001      	adds	r0, #1
 801fc02:	d10e      	bne.n	801fc22 <_printf_float+0x3f2>
 801fc04:	e660      	b.n	801f8c8 <_printf_float+0x98>
 801fc06:	2301      	movs	r3, #1
 801fc08:	464a      	mov	r2, r9
 801fc0a:	4631      	mov	r1, r6
 801fc0c:	4628      	mov	r0, r5
 801fc0e:	47b8      	blx	r7
 801fc10:	3001      	adds	r0, #1
 801fc12:	f43f ae59 	beq.w	801f8c8 <_printf_float+0x98>
 801fc16:	f108 0801 	add.w	r8, r8, #1
 801fc1a:	9b08      	ldr	r3, [sp, #32]
 801fc1c:	3b01      	subs	r3, #1
 801fc1e:	4543      	cmp	r3, r8
 801fc20:	dcf1      	bgt.n	801fc06 <_printf_float+0x3d6>
 801fc22:	9b04      	ldr	r3, [sp, #16]
 801fc24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fc28:	e6dd      	b.n	801f9e6 <_printf_float+0x1b6>
 801fc2a:	f04f 0800 	mov.w	r8, #0
 801fc2e:	f104 091a 	add.w	r9, r4, #26
 801fc32:	e7f2      	b.n	801fc1a <_printf_float+0x3ea>
 801fc34:	2301      	movs	r3, #1
 801fc36:	4642      	mov	r2, r8
 801fc38:	e7df      	b.n	801fbfa <_printf_float+0x3ca>
 801fc3a:	2301      	movs	r3, #1
 801fc3c:	464a      	mov	r2, r9
 801fc3e:	4631      	mov	r1, r6
 801fc40:	4628      	mov	r0, r5
 801fc42:	47b8      	blx	r7
 801fc44:	3001      	adds	r0, #1
 801fc46:	f43f ae3f 	beq.w	801f8c8 <_printf_float+0x98>
 801fc4a:	f108 0801 	add.w	r8, r8, #1
 801fc4e:	68e3      	ldr	r3, [r4, #12]
 801fc50:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fc52:	1a5b      	subs	r3, r3, r1
 801fc54:	4543      	cmp	r3, r8
 801fc56:	dcf0      	bgt.n	801fc3a <_printf_float+0x40a>
 801fc58:	e6f9      	b.n	801fa4e <_printf_float+0x21e>
 801fc5a:	f04f 0800 	mov.w	r8, #0
 801fc5e:	f104 0919 	add.w	r9, r4, #25
 801fc62:	e7f4      	b.n	801fc4e <_printf_float+0x41e>

0801fc64 <_printf_common>:
 801fc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc68:	4616      	mov	r6, r2
 801fc6a:	4699      	mov	r9, r3
 801fc6c:	688a      	ldr	r2, [r1, #8]
 801fc6e:	690b      	ldr	r3, [r1, #16]
 801fc70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fc74:	4293      	cmp	r3, r2
 801fc76:	bfb8      	it	lt
 801fc78:	4613      	movlt	r3, r2
 801fc7a:	6033      	str	r3, [r6, #0]
 801fc7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fc80:	4607      	mov	r7, r0
 801fc82:	460c      	mov	r4, r1
 801fc84:	b10a      	cbz	r2, 801fc8a <_printf_common+0x26>
 801fc86:	3301      	adds	r3, #1
 801fc88:	6033      	str	r3, [r6, #0]
 801fc8a:	6823      	ldr	r3, [r4, #0]
 801fc8c:	0699      	lsls	r1, r3, #26
 801fc8e:	bf42      	ittt	mi
 801fc90:	6833      	ldrmi	r3, [r6, #0]
 801fc92:	3302      	addmi	r3, #2
 801fc94:	6033      	strmi	r3, [r6, #0]
 801fc96:	6825      	ldr	r5, [r4, #0]
 801fc98:	f015 0506 	ands.w	r5, r5, #6
 801fc9c:	d106      	bne.n	801fcac <_printf_common+0x48>
 801fc9e:	f104 0a19 	add.w	sl, r4, #25
 801fca2:	68e3      	ldr	r3, [r4, #12]
 801fca4:	6832      	ldr	r2, [r6, #0]
 801fca6:	1a9b      	subs	r3, r3, r2
 801fca8:	42ab      	cmp	r3, r5
 801fcaa:	dc26      	bgt.n	801fcfa <_printf_common+0x96>
 801fcac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fcb0:	1e13      	subs	r3, r2, #0
 801fcb2:	6822      	ldr	r2, [r4, #0]
 801fcb4:	bf18      	it	ne
 801fcb6:	2301      	movne	r3, #1
 801fcb8:	0692      	lsls	r2, r2, #26
 801fcba:	d42b      	bmi.n	801fd14 <_printf_common+0xb0>
 801fcbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fcc0:	4649      	mov	r1, r9
 801fcc2:	4638      	mov	r0, r7
 801fcc4:	47c0      	blx	r8
 801fcc6:	3001      	adds	r0, #1
 801fcc8:	d01e      	beq.n	801fd08 <_printf_common+0xa4>
 801fcca:	6823      	ldr	r3, [r4, #0]
 801fccc:	6922      	ldr	r2, [r4, #16]
 801fcce:	f003 0306 	and.w	r3, r3, #6
 801fcd2:	2b04      	cmp	r3, #4
 801fcd4:	bf02      	ittt	eq
 801fcd6:	68e5      	ldreq	r5, [r4, #12]
 801fcd8:	6833      	ldreq	r3, [r6, #0]
 801fcda:	1aed      	subeq	r5, r5, r3
 801fcdc:	68a3      	ldr	r3, [r4, #8]
 801fcde:	bf0c      	ite	eq
 801fce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fce4:	2500      	movne	r5, #0
 801fce6:	4293      	cmp	r3, r2
 801fce8:	bfc4      	itt	gt
 801fcea:	1a9b      	subgt	r3, r3, r2
 801fcec:	18ed      	addgt	r5, r5, r3
 801fcee:	2600      	movs	r6, #0
 801fcf0:	341a      	adds	r4, #26
 801fcf2:	42b5      	cmp	r5, r6
 801fcf4:	d11a      	bne.n	801fd2c <_printf_common+0xc8>
 801fcf6:	2000      	movs	r0, #0
 801fcf8:	e008      	b.n	801fd0c <_printf_common+0xa8>
 801fcfa:	2301      	movs	r3, #1
 801fcfc:	4652      	mov	r2, sl
 801fcfe:	4649      	mov	r1, r9
 801fd00:	4638      	mov	r0, r7
 801fd02:	47c0      	blx	r8
 801fd04:	3001      	adds	r0, #1
 801fd06:	d103      	bne.n	801fd10 <_printf_common+0xac>
 801fd08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd10:	3501      	adds	r5, #1
 801fd12:	e7c6      	b.n	801fca2 <_printf_common+0x3e>
 801fd14:	18e1      	adds	r1, r4, r3
 801fd16:	1c5a      	adds	r2, r3, #1
 801fd18:	2030      	movs	r0, #48	; 0x30
 801fd1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fd1e:	4422      	add	r2, r4
 801fd20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fd24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fd28:	3302      	adds	r3, #2
 801fd2a:	e7c7      	b.n	801fcbc <_printf_common+0x58>
 801fd2c:	2301      	movs	r3, #1
 801fd2e:	4622      	mov	r2, r4
 801fd30:	4649      	mov	r1, r9
 801fd32:	4638      	mov	r0, r7
 801fd34:	47c0      	blx	r8
 801fd36:	3001      	adds	r0, #1
 801fd38:	d0e6      	beq.n	801fd08 <_printf_common+0xa4>
 801fd3a:	3601      	adds	r6, #1
 801fd3c:	e7d9      	b.n	801fcf2 <_printf_common+0x8e>
	...

0801fd40 <_printf_i>:
 801fd40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fd44:	7e0f      	ldrb	r7, [r1, #24]
 801fd46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fd48:	2f78      	cmp	r7, #120	; 0x78
 801fd4a:	4691      	mov	r9, r2
 801fd4c:	4680      	mov	r8, r0
 801fd4e:	460c      	mov	r4, r1
 801fd50:	469a      	mov	sl, r3
 801fd52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fd56:	d807      	bhi.n	801fd68 <_printf_i+0x28>
 801fd58:	2f62      	cmp	r7, #98	; 0x62
 801fd5a:	d80a      	bhi.n	801fd72 <_printf_i+0x32>
 801fd5c:	2f00      	cmp	r7, #0
 801fd5e:	f000 80d4 	beq.w	801ff0a <_printf_i+0x1ca>
 801fd62:	2f58      	cmp	r7, #88	; 0x58
 801fd64:	f000 80c0 	beq.w	801fee8 <_printf_i+0x1a8>
 801fd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fd6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fd70:	e03a      	b.n	801fde8 <_printf_i+0xa8>
 801fd72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fd76:	2b15      	cmp	r3, #21
 801fd78:	d8f6      	bhi.n	801fd68 <_printf_i+0x28>
 801fd7a:	a101      	add	r1, pc, #4	; (adr r1, 801fd80 <_printf_i+0x40>)
 801fd7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fd80:	0801fdd9 	.word	0x0801fdd9
 801fd84:	0801fded 	.word	0x0801fded
 801fd88:	0801fd69 	.word	0x0801fd69
 801fd8c:	0801fd69 	.word	0x0801fd69
 801fd90:	0801fd69 	.word	0x0801fd69
 801fd94:	0801fd69 	.word	0x0801fd69
 801fd98:	0801fded 	.word	0x0801fded
 801fd9c:	0801fd69 	.word	0x0801fd69
 801fda0:	0801fd69 	.word	0x0801fd69
 801fda4:	0801fd69 	.word	0x0801fd69
 801fda8:	0801fd69 	.word	0x0801fd69
 801fdac:	0801fef1 	.word	0x0801fef1
 801fdb0:	0801fe19 	.word	0x0801fe19
 801fdb4:	0801feab 	.word	0x0801feab
 801fdb8:	0801fd69 	.word	0x0801fd69
 801fdbc:	0801fd69 	.word	0x0801fd69
 801fdc0:	0801ff13 	.word	0x0801ff13
 801fdc4:	0801fd69 	.word	0x0801fd69
 801fdc8:	0801fe19 	.word	0x0801fe19
 801fdcc:	0801fd69 	.word	0x0801fd69
 801fdd0:	0801fd69 	.word	0x0801fd69
 801fdd4:	0801feb3 	.word	0x0801feb3
 801fdd8:	682b      	ldr	r3, [r5, #0]
 801fdda:	1d1a      	adds	r2, r3, #4
 801fddc:	681b      	ldr	r3, [r3, #0]
 801fdde:	602a      	str	r2, [r5, #0]
 801fde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fde4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fde8:	2301      	movs	r3, #1
 801fdea:	e09f      	b.n	801ff2c <_printf_i+0x1ec>
 801fdec:	6820      	ldr	r0, [r4, #0]
 801fdee:	682b      	ldr	r3, [r5, #0]
 801fdf0:	0607      	lsls	r7, r0, #24
 801fdf2:	f103 0104 	add.w	r1, r3, #4
 801fdf6:	6029      	str	r1, [r5, #0]
 801fdf8:	d501      	bpl.n	801fdfe <_printf_i+0xbe>
 801fdfa:	681e      	ldr	r6, [r3, #0]
 801fdfc:	e003      	b.n	801fe06 <_printf_i+0xc6>
 801fdfe:	0646      	lsls	r6, r0, #25
 801fe00:	d5fb      	bpl.n	801fdfa <_printf_i+0xba>
 801fe02:	f9b3 6000 	ldrsh.w	r6, [r3]
 801fe06:	2e00      	cmp	r6, #0
 801fe08:	da03      	bge.n	801fe12 <_printf_i+0xd2>
 801fe0a:	232d      	movs	r3, #45	; 0x2d
 801fe0c:	4276      	negs	r6, r6
 801fe0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe12:	485a      	ldr	r0, [pc, #360]	; (801ff7c <_printf_i+0x23c>)
 801fe14:	230a      	movs	r3, #10
 801fe16:	e012      	b.n	801fe3e <_printf_i+0xfe>
 801fe18:	682b      	ldr	r3, [r5, #0]
 801fe1a:	6820      	ldr	r0, [r4, #0]
 801fe1c:	1d19      	adds	r1, r3, #4
 801fe1e:	6029      	str	r1, [r5, #0]
 801fe20:	0605      	lsls	r5, r0, #24
 801fe22:	d501      	bpl.n	801fe28 <_printf_i+0xe8>
 801fe24:	681e      	ldr	r6, [r3, #0]
 801fe26:	e002      	b.n	801fe2e <_printf_i+0xee>
 801fe28:	0641      	lsls	r1, r0, #25
 801fe2a:	d5fb      	bpl.n	801fe24 <_printf_i+0xe4>
 801fe2c:	881e      	ldrh	r6, [r3, #0]
 801fe2e:	4853      	ldr	r0, [pc, #332]	; (801ff7c <_printf_i+0x23c>)
 801fe30:	2f6f      	cmp	r7, #111	; 0x6f
 801fe32:	bf0c      	ite	eq
 801fe34:	2308      	moveq	r3, #8
 801fe36:	230a      	movne	r3, #10
 801fe38:	2100      	movs	r1, #0
 801fe3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fe3e:	6865      	ldr	r5, [r4, #4]
 801fe40:	60a5      	str	r5, [r4, #8]
 801fe42:	2d00      	cmp	r5, #0
 801fe44:	bfa2      	ittt	ge
 801fe46:	6821      	ldrge	r1, [r4, #0]
 801fe48:	f021 0104 	bicge.w	r1, r1, #4
 801fe4c:	6021      	strge	r1, [r4, #0]
 801fe4e:	b90e      	cbnz	r6, 801fe54 <_printf_i+0x114>
 801fe50:	2d00      	cmp	r5, #0
 801fe52:	d04b      	beq.n	801feec <_printf_i+0x1ac>
 801fe54:	4615      	mov	r5, r2
 801fe56:	fbb6 f1f3 	udiv	r1, r6, r3
 801fe5a:	fb03 6711 	mls	r7, r3, r1, r6
 801fe5e:	5dc7      	ldrb	r7, [r0, r7]
 801fe60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801fe64:	4637      	mov	r7, r6
 801fe66:	42bb      	cmp	r3, r7
 801fe68:	460e      	mov	r6, r1
 801fe6a:	d9f4      	bls.n	801fe56 <_printf_i+0x116>
 801fe6c:	2b08      	cmp	r3, #8
 801fe6e:	d10b      	bne.n	801fe88 <_printf_i+0x148>
 801fe70:	6823      	ldr	r3, [r4, #0]
 801fe72:	07de      	lsls	r6, r3, #31
 801fe74:	d508      	bpl.n	801fe88 <_printf_i+0x148>
 801fe76:	6923      	ldr	r3, [r4, #16]
 801fe78:	6861      	ldr	r1, [r4, #4]
 801fe7a:	4299      	cmp	r1, r3
 801fe7c:	bfde      	ittt	le
 801fe7e:	2330      	movle	r3, #48	; 0x30
 801fe80:	f805 3c01 	strble.w	r3, [r5, #-1]
 801fe84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801fe88:	1b52      	subs	r2, r2, r5
 801fe8a:	6122      	str	r2, [r4, #16]
 801fe8c:	f8cd a000 	str.w	sl, [sp]
 801fe90:	464b      	mov	r3, r9
 801fe92:	aa03      	add	r2, sp, #12
 801fe94:	4621      	mov	r1, r4
 801fe96:	4640      	mov	r0, r8
 801fe98:	f7ff fee4 	bl	801fc64 <_printf_common>
 801fe9c:	3001      	adds	r0, #1
 801fe9e:	d14a      	bne.n	801ff36 <_printf_i+0x1f6>
 801fea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fea4:	b004      	add	sp, #16
 801fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801feaa:	6823      	ldr	r3, [r4, #0]
 801feac:	f043 0320 	orr.w	r3, r3, #32
 801feb0:	6023      	str	r3, [r4, #0]
 801feb2:	4833      	ldr	r0, [pc, #204]	; (801ff80 <_printf_i+0x240>)
 801feb4:	2778      	movs	r7, #120	; 0x78
 801feb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801feba:	6823      	ldr	r3, [r4, #0]
 801febc:	6829      	ldr	r1, [r5, #0]
 801febe:	061f      	lsls	r7, r3, #24
 801fec0:	f851 6b04 	ldr.w	r6, [r1], #4
 801fec4:	d402      	bmi.n	801fecc <_printf_i+0x18c>
 801fec6:	065f      	lsls	r7, r3, #25
 801fec8:	bf48      	it	mi
 801feca:	b2b6      	uxthmi	r6, r6
 801fecc:	07df      	lsls	r7, r3, #31
 801fece:	bf48      	it	mi
 801fed0:	f043 0320 	orrmi.w	r3, r3, #32
 801fed4:	6029      	str	r1, [r5, #0]
 801fed6:	bf48      	it	mi
 801fed8:	6023      	strmi	r3, [r4, #0]
 801feda:	b91e      	cbnz	r6, 801fee4 <_printf_i+0x1a4>
 801fedc:	6823      	ldr	r3, [r4, #0]
 801fede:	f023 0320 	bic.w	r3, r3, #32
 801fee2:	6023      	str	r3, [r4, #0]
 801fee4:	2310      	movs	r3, #16
 801fee6:	e7a7      	b.n	801fe38 <_printf_i+0xf8>
 801fee8:	4824      	ldr	r0, [pc, #144]	; (801ff7c <_printf_i+0x23c>)
 801feea:	e7e4      	b.n	801feb6 <_printf_i+0x176>
 801feec:	4615      	mov	r5, r2
 801feee:	e7bd      	b.n	801fe6c <_printf_i+0x12c>
 801fef0:	682b      	ldr	r3, [r5, #0]
 801fef2:	6826      	ldr	r6, [r4, #0]
 801fef4:	6961      	ldr	r1, [r4, #20]
 801fef6:	1d18      	adds	r0, r3, #4
 801fef8:	6028      	str	r0, [r5, #0]
 801fefa:	0635      	lsls	r5, r6, #24
 801fefc:	681b      	ldr	r3, [r3, #0]
 801fefe:	d501      	bpl.n	801ff04 <_printf_i+0x1c4>
 801ff00:	6019      	str	r1, [r3, #0]
 801ff02:	e002      	b.n	801ff0a <_printf_i+0x1ca>
 801ff04:	0670      	lsls	r0, r6, #25
 801ff06:	d5fb      	bpl.n	801ff00 <_printf_i+0x1c0>
 801ff08:	8019      	strh	r1, [r3, #0]
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	6123      	str	r3, [r4, #16]
 801ff0e:	4615      	mov	r5, r2
 801ff10:	e7bc      	b.n	801fe8c <_printf_i+0x14c>
 801ff12:	682b      	ldr	r3, [r5, #0]
 801ff14:	1d1a      	adds	r2, r3, #4
 801ff16:	602a      	str	r2, [r5, #0]
 801ff18:	681d      	ldr	r5, [r3, #0]
 801ff1a:	6862      	ldr	r2, [r4, #4]
 801ff1c:	2100      	movs	r1, #0
 801ff1e:	4628      	mov	r0, r5
 801ff20:	f7e0 f99e 	bl	8000260 <memchr>
 801ff24:	b108      	cbz	r0, 801ff2a <_printf_i+0x1ea>
 801ff26:	1b40      	subs	r0, r0, r5
 801ff28:	6060      	str	r0, [r4, #4]
 801ff2a:	6863      	ldr	r3, [r4, #4]
 801ff2c:	6123      	str	r3, [r4, #16]
 801ff2e:	2300      	movs	r3, #0
 801ff30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ff34:	e7aa      	b.n	801fe8c <_printf_i+0x14c>
 801ff36:	6923      	ldr	r3, [r4, #16]
 801ff38:	462a      	mov	r2, r5
 801ff3a:	4649      	mov	r1, r9
 801ff3c:	4640      	mov	r0, r8
 801ff3e:	47d0      	blx	sl
 801ff40:	3001      	adds	r0, #1
 801ff42:	d0ad      	beq.n	801fea0 <_printf_i+0x160>
 801ff44:	6823      	ldr	r3, [r4, #0]
 801ff46:	079b      	lsls	r3, r3, #30
 801ff48:	d413      	bmi.n	801ff72 <_printf_i+0x232>
 801ff4a:	68e0      	ldr	r0, [r4, #12]
 801ff4c:	9b03      	ldr	r3, [sp, #12]
 801ff4e:	4298      	cmp	r0, r3
 801ff50:	bfb8      	it	lt
 801ff52:	4618      	movlt	r0, r3
 801ff54:	e7a6      	b.n	801fea4 <_printf_i+0x164>
 801ff56:	2301      	movs	r3, #1
 801ff58:	4632      	mov	r2, r6
 801ff5a:	4649      	mov	r1, r9
 801ff5c:	4640      	mov	r0, r8
 801ff5e:	47d0      	blx	sl
 801ff60:	3001      	adds	r0, #1
 801ff62:	d09d      	beq.n	801fea0 <_printf_i+0x160>
 801ff64:	3501      	adds	r5, #1
 801ff66:	68e3      	ldr	r3, [r4, #12]
 801ff68:	9903      	ldr	r1, [sp, #12]
 801ff6a:	1a5b      	subs	r3, r3, r1
 801ff6c:	42ab      	cmp	r3, r5
 801ff6e:	dcf2      	bgt.n	801ff56 <_printf_i+0x216>
 801ff70:	e7eb      	b.n	801ff4a <_printf_i+0x20a>
 801ff72:	2500      	movs	r5, #0
 801ff74:	f104 0619 	add.w	r6, r4, #25
 801ff78:	e7f5      	b.n	801ff66 <_printf_i+0x226>
 801ff7a:	bf00      	nop
 801ff7c:	080259de 	.word	0x080259de
 801ff80:	080259ef 	.word	0x080259ef

0801ff84 <_scanf_float>:
 801ff84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff88:	b087      	sub	sp, #28
 801ff8a:	4617      	mov	r7, r2
 801ff8c:	9303      	str	r3, [sp, #12]
 801ff8e:	688b      	ldr	r3, [r1, #8]
 801ff90:	1e5a      	subs	r2, r3, #1
 801ff92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ff96:	bf83      	ittte	hi
 801ff98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ff9c:	195b      	addhi	r3, r3, r5
 801ff9e:	9302      	strhi	r3, [sp, #8]
 801ffa0:	2300      	movls	r3, #0
 801ffa2:	bf86      	itte	hi
 801ffa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ffa8:	608b      	strhi	r3, [r1, #8]
 801ffaa:	9302      	strls	r3, [sp, #8]
 801ffac:	680b      	ldr	r3, [r1, #0]
 801ffae:	468b      	mov	fp, r1
 801ffb0:	2500      	movs	r5, #0
 801ffb2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ffb6:	f84b 3b1c 	str.w	r3, [fp], #28
 801ffba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ffbe:	4680      	mov	r8, r0
 801ffc0:	460c      	mov	r4, r1
 801ffc2:	465e      	mov	r6, fp
 801ffc4:	46aa      	mov	sl, r5
 801ffc6:	46a9      	mov	r9, r5
 801ffc8:	9501      	str	r5, [sp, #4]
 801ffca:	68a2      	ldr	r2, [r4, #8]
 801ffcc:	b152      	cbz	r2, 801ffe4 <_scanf_float+0x60>
 801ffce:	683b      	ldr	r3, [r7, #0]
 801ffd0:	781b      	ldrb	r3, [r3, #0]
 801ffd2:	2b4e      	cmp	r3, #78	; 0x4e
 801ffd4:	d864      	bhi.n	80200a0 <_scanf_float+0x11c>
 801ffd6:	2b40      	cmp	r3, #64	; 0x40
 801ffd8:	d83c      	bhi.n	8020054 <_scanf_float+0xd0>
 801ffda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ffde:	b2c8      	uxtb	r0, r1
 801ffe0:	280e      	cmp	r0, #14
 801ffe2:	d93a      	bls.n	802005a <_scanf_float+0xd6>
 801ffe4:	f1b9 0f00 	cmp.w	r9, #0
 801ffe8:	d003      	beq.n	801fff2 <_scanf_float+0x6e>
 801ffea:	6823      	ldr	r3, [r4, #0]
 801ffec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fff0:	6023      	str	r3, [r4, #0]
 801fff2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801fff6:	f1ba 0f01 	cmp.w	sl, #1
 801fffa:	f200 8113 	bhi.w	8020224 <_scanf_float+0x2a0>
 801fffe:	455e      	cmp	r6, fp
 8020000:	f200 8105 	bhi.w	802020e <_scanf_float+0x28a>
 8020004:	2501      	movs	r5, #1
 8020006:	4628      	mov	r0, r5
 8020008:	b007      	add	sp, #28
 802000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802000e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8020012:	2a0d      	cmp	r2, #13
 8020014:	d8e6      	bhi.n	801ffe4 <_scanf_float+0x60>
 8020016:	a101      	add	r1, pc, #4	; (adr r1, 802001c <_scanf_float+0x98>)
 8020018:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802001c:	0802015b 	.word	0x0802015b
 8020020:	0801ffe5 	.word	0x0801ffe5
 8020024:	0801ffe5 	.word	0x0801ffe5
 8020028:	0801ffe5 	.word	0x0801ffe5
 802002c:	080201bb 	.word	0x080201bb
 8020030:	08020193 	.word	0x08020193
 8020034:	0801ffe5 	.word	0x0801ffe5
 8020038:	0801ffe5 	.word	0x0801ffe5
 802003c:	08020169 	.word	0x08020169
 8020040:	0801ffe5 	.word	0x0801ffe5
 8020044:	0801ffe5 	.word	0x0801ffe5
 8020048:	0801ffe5 	.word	0x0801ffe5
 802004c:	0801ffe5 	.word	0x0801ffe5
 8020050:	08020121 	.word	0x08020121
 8020054:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8020058:	e7db      	b.n	8020012 <_scanf_float+0x8e>
 802005a:	290e      	cmp	r1, #14
 802005c:	d8c2      	bhi.n	801ffe4 <_scanf_float+0x60>
 802005e:	a001      	add	r0, pc, #4	; (adr r0, 8020064 <_scanf_float+0xe0>)
 8020060:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8020064:	08020113 	.word	0x08020113
 8020068:	0801ffe5 	.word	0x0801ffe5
 802006c:	08020113 	.word	0x08020113
 8020070:	080201a7 	.word	0x080201a7
 8020074:	0801ffe5 	.word	0x0801ffe5
 8020078:	080200c1 	.word	0x080200c1
 802007c:	080200fd 	.word	0x080200fd
 8020080:	080200fd 	.word	0x080200fd
 8020084:	080200fd 	.word	0x080200fd
 8020088:	080200fd 	.word	0x080200fd
 802008c:	080200fd 	.word	0x080200fd
 8020090:	080200fd 	.word	0x080200fd
 8020094:	080200fd 	.word	0x080200fd
 8020098:	080200fd 	.word	0x080200fd
 802009c:	080200fd 	.word	0x080200fd
 80200a0:	2b6e      	cmp	r3, #110	; 0x6e
 80200a2:	d809      	bhi.n	80200b8 <_scanf_float+0x134>
 80200a4:	2b60      	cmp	r3, #96	; 0x60
 80200a6:	d8b2      	bhi.n	802000e <_scanf_float+0x8a>
 80200a8:	2b54      	cmp	r3, #84	; 0x54
 80200aa:	d077      	beq.n	802019c <_scanf_float+0x218>
 80200ac:	2b59      	cmp	r3, #89	; 0x59
 80200ae:	d199      	bne.n	801ffe4 <_scanf_float+0x60>
 80200b0:	2d07      	cmp	r5, #7
 80200b2:	d197      	bne.n	801ffe4 <_scanf_float+0x60>
 80200b4:	2508      	movs	r5, #8
 80200b6:	e029      	b.n	802010c <_scanf_float+0x188>
 80200b8:	2b74      	cmp	r3, #116	; 0x74
 80200ba:	d06f      	beq.n	802019c <_scanf_float+0x218>
 80200bc:	2b79      	cmp	r3, #121	; 0x79
 80200be:	e7f6      	b.n	80200ae <_scanf_float+0x12a>
 80200c0:	6821      	ldr	r1, [r4, #0]
 80200c2:	05c8      	lsls	r0, r1, #23
 80200c4:	d51a      	bpl.n	80200fc <_scanf_float+0x178>
 80200c6:	9b02      	ldr	r3, [sp, #8]
 80200c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80200cc:	6021      	str	r1, [r4, #0]
 80200ce:	f109 0901 	add.w	r9, r9, #1
 80200d2:	b11b      	cbz	r3, 80200dc <_scanf_float+0x158>
 80200d4:	3b01      	subs	r3, #1
 80200d6:	3201      	adds	r2, #1
 80200d8:	9302      	str	r3, [sp, #8]
 80200da:	60a2      	str	r2, [r4, #8]
 80200dc:	68a3      	ldr	r3, [r4, #8]
 80200de:	3b01      	subs	r3, #1
 80200e0:	60a3      	str	r3, [r4, #8]
 80200e2:	6923      	ldr	r3, [r4, #16]
 80200e4:	3301      	adds	r3, #1
 80200e6:	6123      	str	r3, [r4, #16]
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	3b01      	subs	r3, #1
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	607b      	str	r3, [r7, #4]
 80200f0:	f340 8084 	ble.w	80201fc <_scanf_float+0x278>
 80200f4:	683b      	ldr	r3, [r7, #0]
 80200f6:	3301      	adds	r3, #1
 80200f8:	603b      	str	r3, [r7, #0]
 80200fa:	e766      	b.n	801ffca <_scanf_float+0x46>
 80200fc:	eb1a 0f05 	cmn.w	sl, r5
 8020100:	f47f af70 	bne.w	801ffe4 <_scanf_float+0x60>
 8020104:	6822      	ldr	r2, [r4, #0]
 8020106:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802010a:	6022      	str	r2, [r4, #0]
 802010c:	f806 3b01 	strb.w	r3, [r6], #1
 8020110:	e7e4      	b.n	80200dc <_scanf_float+0x158>
 8020112:	6822      	ldr	r2, [r4, #0]
 8020114:	0610      	lsls	r0, r2, #24
 8020116:	f57f af65 	bpl.w	801ffe4 <_scanf_float+0x60>
 802011a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802011e:	e7f4      	b.n	802010a <_scanf_float+0x186>
 8020120:	f1ba 0f00 	cmp.w	sl, #0
 8020124:	d10e      	bne.n	8020144 <_scanf_float+0x1c0>
 8020126:	f1b9 0f00 	cmp.w	r9, #0
 802012a:	d10e      	bne.n	802014a <_scanf_float+0x1c6>
 802012c:	6822      	ldr	r2, [r4, #0]
 802012e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020132:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020136:	d108      	bne.n	802014a <_scanf_float+0x1c6>
 8020138:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802013c:	6022      	str	r2, [r4, #0]
 802013e:	f04f 0a01 	mov.w	sl, #1
 8020142:	e7e3      	b.n	802010c <_scanf_float+0x188>
 8020144:	f1ba 0f02 	cmp.w	sl, #2
 8020148:	d055      	beq.n	80201f6 <_scanf_float+0x272>
 802014a:	2d01      	cmp	r5, #1
 802014c:	d002      	beq.n	8020154 <_scanf_float+0x1d0>
 802014e:	2d04      	cmp	r5, #4
 8020150:	f47f af48 	bne.w	801ffe4 <_scanf_float+0x60>
 8020154:	3501      	adds	r5, #1
 8020156:	b2ed      	uxtb	r5, r5
 8020158:	e7d8      	b.n	802010c <_scanf_float+0x188>
 802015a:	f1ba 0f01 	cmp.w	sl, #1
 802015e:	f47f af41 	bne.w	801ffe4 <_scanf_float+0x60>
 8020162:	f04f 0a02 	mov.w	sl, #2
 8020166:	e7d1      	b.n	802010c <_scanf_float+0x188>
 8020168:	b97d      	cbnz	r5, 802018a <_scanf_float+0x206>
 802016a:	f1b9 0f00 	cmp.w	r9, #0
 802016e:	f47f af3c 	bne.w	801ffea <_scanf_float+0x66>
 8020172:	6822      	ldr	r2, [r4, #0]
 8020174:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020178:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802017c:	f47f af39 	bne.w	801fff2 <_scanf_float+0x6e>
 8020180:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020184:	6022      	str	r2, [r4, #0]
 8020186:	2501      	movs	r5, #1
 8020188:	e7c0      	b.n	802010c <_scanf_float+0x188>
 802018a:	2d03      	cmp	r5, #3
 802018c:	d0e2      	beq.n	8020154 <_scanf_float+0x1d0>
 802018e:	2d05      	cmp	r5, #5
 8020190:	e7de      	b.n	8020150 <_scanf_float+0x1cc>
 8020192:	2d02      	cmp	r5, #2
 8020194:	f47f af26 	bne.w	801ffe4 <_scanf_float+0x60>
 8020198:	2503      	movs	r5, #3
 802019a:	e7b7      	b.n	802010c <_scanf_float+0x188>
 802019c:	2d06      	cmp	r5, #6
 802019e:	f47f af21 	bne.w	801ffe4 <_scanf_float+0x60>
 80201a2:	2507      	movs	r5, #7
 80201a4:	e7b2      	b.n	802010c <_scanf_float+0x188>
 80201a6:	6822      	ldr	r2, [r4, #0]
 80201a8:	0591      	lsls	r1, r2, #22
 80201aa:	f57f af1b 	bpl.w	801ffe4 <_scanf_float+0x60>
 80201ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80201b2:	6022      	str	r2, [r4, #0]
 80201b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80201b8:	e7a8      	b.n	802010c <_scanf_float+0x188>
 80201ba:	6822      	ldr	r2, [r4, #0]
 80201bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80201c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80201c4:	d006      	beq.n	80201d4 <_scanf_float+0x250>
 80201c6:	0550      	lsls	r0, r2, #21
 80201c8:	f57f af0c 	bpl.w	801ffe4 <_scanf_float+0x60>
 80201cc:	f1b9 0f00 	cmp.w	r9, #0
 80201d0:	f43f af0f 	beq.w	801fff2 <_scanf_float+0x6e>
 80201d4:	0591      	lsls	r1, r2, #22
 80201d6:	bf58      	it	pl
 80201d8:	9901      	ldrpl	r1, [sp, #4]
 80201da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80201de:	bf58      	it	pl
 80201e0:	eba9 0101 	subpl.w	r1, r9, r1
 80201e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80201e8:	bf58      	it	pl
 80201ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80201ee:	6022      	str	r2, [r4, #0]
 80201f0:	f04f 0900 	mov.w	r9, #0
 80201f4:	e78a      	b.n	802010c <_scanf_float+0x188>
 80201f6:	f04f 0a03 	mov.w	sl, #3
 80201fa:	e787      	b.n	802010c <_scanf_float+0x188>
 80201fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020200:	4639      	mov	r1, r7
 8020202:	4640      	mov	r0, r8
 8020204:	4798      	blx	r3
 8020206:	2800      	cmp	r0, #0
 8020208:	f43f aedf 	beq.w	801ffca <_scanf_float+0x46>
 802020c:	e6ea      	b.n	801ffe4 <_scanf_float+0x60>
 802020e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020212:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020216:	463a      	mov	r2, r7
 8020218:	4640      	mov	r0, r8
 802021a:	4798      	blx	r3
 802021c:	6923      	ldr	r3, [r4, #16]
 802021e:	3b01      	subs	r3, #1
 8020220:	6123      	str	r3, [r4, #16]
 8020222:	e6ec      	b.n	801fffe <_scanf_float+0x7a>
 8020224:	1e6b      	subs	r3, r5, #1
 8020226:	2b06      	cmp	r3, #6
 8020228:	d825      	bhi.n	8020276 <_scanf_float+0x2f2>
 802022a:	2d02      	cmp	r5, #2
 802022c:	d836      	bhi.n	802029c <_scanf_float+0x318>
 802022e:	455e      	cmp	r6, fp
 8020230:	f67f aee8 	bls.w	8020004 <_scanf_float+0x80>
 8020234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020238:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802023c:	463a      	mov	r2, r7
 802023e:	4640      	mov	r0, r8
 8020240:	4798      	blx	r3
 8020242:	6923      	ldr	r3, [r4, #16]
 8020244:	3b01      	subs	r3, #1
 8020246:	6123      	str	r3, [r4, #16]
 8020248:	e7f1      	b.n	802022e <_scanf_float+0x2aa>
 802024a:	9802      	ldr	r0, [sp, #8]
 802024c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020250:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8020254:	9002      	str	r0, [sp, #8]
 8020256:	463a      	mov	r2, r7
 8020258:	4640      	mov	r0, r8
 802025a:	4798      	blx	r3
 802025c:	6923      	ldr	r3, [r4, #16]
 802025e:	3b01      	subs	r3, #1
 8020260:	6123      	str	r3, [r4, #16]
 8020262:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020266:	fa5f fa8a 	uxtb.w	sl, sl
 802026a:	f1ba 0f02 	cmp.w	sl, #2
 802026e:	d1ec      	bne.n	802024a <_scanf_float+0x2c6>
 8020270:	3d03      	subs	r5, #3
 8020272:	b2ed      	uxtb	r5, r5
 8020274:	1b76      	subs	r6, r6, r5
 8020276:	6823      	ldr	r3, [r4, #0]
 8020278:	05da      	lsls	r2, r3, #23
 802027a:	d52f      	bpl.n	80202dc <_scanf_float+0x358>
 802027c:	055b      	lsls	r3, r3, #21
 802027e:	d510      	bpl.n	80202a2 <_scanf_float+0x31e>
 8020280:	455e      	cmp	r6, fp
 8020282:	f67f aebf 	bls.w	8020004 <_scanf_float+0x80>
 8020286:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802028a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802028e:	463a      	mov	r2, r7
 8020290:	4640      	mov	r0, r8
 8020292:	4798      	blx	r3
 8020294:	6923      	ldr	r3, [r4, #16]
 8020296:	3b01      	subs	r3, #1
 8020298:	6123      	str	r3, [r4, #16]
 802029a:	e7f1      	b.n	8020280 <_scanf_float+0x2fc>
 802029c:	46aa      	mov	sl, r5
 802029e:	9602      	str	r6, [sp, #8]
 80202a0:	e7df      	b.n	8020262 <_scanf_float+0x2de>
 80202a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80202a6:	6923      	ldr	r3, [r4, #16]
 80202a8:	2965      	cmp	r1, #101	; 0x65
 80202aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80202ae:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80202b2:	6123      	str	r3, [r4, #16]
 80202b4:	d00c      	beq.n	80202d0 <_scanf_float+0x34c>
 80202b6:	2945      	cmp	r1, #69	; 0x45
 80202b8:	d00a      	beq.n	80202d0 <_scanf_float+0x34c>
 80202ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80202be:	463a      	mov	r2, r7
 80202c0:	4640      	mov	r0, r8
 80202c2:	4798      	blx	r3
 80202c4:	6923      	ldr	r3, [r4, #16]
 80202c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80202ca:	3b01      	subs	r3, #1
 80202cc:	1eb5      	subs	r5, r6, #2
 80202ce:	6123      	str	r3, [r4, #16]
 80202d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80202d4:	463a      	mov	r2, r7
 80202d6:	4640      	mov	r0, r8
 80202d8:	4798      	blx	r3
 80202da:	462e      	mov	r6, r5
 80202dc:	6825      	ldr	r5, [r4, #0]
 80202de:	f015 0510 	ands.w	r5, r5, #16
 80202e2:	d14d      	bne.n	8020380 <_scanf_float+0x3fc>
 80202e4:	7035      	strb	r5, [r6, #0]
 80202e6:	6823      	ldr	r3, [r4, #0]
 80202e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80202ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80202f0:	d11a      	bne.n	8020328 <_scanf_float+0x3a4>
 80202f2:	9b01      	ldr	r3, [sp, #4]
 80202f4:	454b      	cmp	r3, r9
 80202f6:	eba3 0209 	sub.w	r2, r3, r9
 80202fa:	d122      	bne.n	8020342 <_scanf_float+0x3be>
 80202fc:	2200      	movs	r2, #0
 80202fe:	4659      	mov	r1, fp
 8020300:	4640      	mov	r0, r8
 8020302:	f002 fdd7 	bl	8022eb4 <_strtod_r>
 8020306:	9b03      	ldr	r3, [sp, #12]
 8020308:	6821      	ldr	r1, [r4, #0]
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	f011 0f02 	tst.w	r1, #2
 8020310:	f103 0204 	add.w	r2, r3, #4
 8020314:	d020      	beq.n	8020358 <_scanf_float+0x3d4>
 8020316:	9903      	ldr	r1, [sp, #12]
 8020318:	600a      	str	r2, [r1, #0]
 802031a:	681b      	ldr	r3, [r3, #0]
 802031c:	ed83 0b00 	vstr	d0, [r3]
 8020320:	68e3      	ldr	r3, [r4, #12]
 8020322:	3301      	adds	r3, #1
 8020324:	60e3      	str	r3, [r4, #12]
 8020326:	e66e      	b.n	8020006 <_scanf_float+0x82>
 8020328:	9b04      	ldr	r3, [sp, #16]
 802032a:	2b00      	cmp	r3, #0
 802032c:	d0e6      	beq.n	80202fc <_scanf_float+0x378>
 802032e:	9905      	ldr	r1, [sp, #20]
 8020330:	230a      	movs	r3, #10
 8020332:	462a      	mov	r2, r5
 8020334:	3101      	adds	r1, #1
 8020336:	4640      	mov	r0, r8
 8020338:	f002 fe44 	bl	8022fc4 <_strtol_r>
 802033c:	9b04      	ldr	r3, [sp, #16]
 802033e:	9e05      	ldr	r6, [sp, #20]
 8020340:	1ac2      	subs	r2, r0, r3
 8020342:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8020346:	429e      	cmp	r6, r3
 8020348:	bf28      	it	cs
 802034a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802034e:	490d      	ldr	r1, [pc, #52]	; (8020384 <_scanf_float+0x400>)
 8020350:	4630      	mov	r0, r6
 8020352:	f000 fa87 	bl	8020864 <siprintf>
 8020356:	e7d1      	b.n	80202fc <_scanf_float+0x378>
 8020358:	f011 0f04 	tst.w	r1, #4
 802035c:	9903      	ldr	r1, [sp, #12]
 802035e:	600a      	str	r2, [r1, #0]
 8020360:	d1db      	bne.n	802031a <_scanf_float+0x396>
 8020362:	eeb4 0b40 	vcmp.f64	d0, d0
 8020366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802036a:	681e      	ldr	r6, [r3, #0]
 802036c:	d705      	bvc.n	802037a <_scanf_float+0x3f6>
 802036e:	4806      	ldr	r0, [pc, #24]	; (8020388 <_scanf_float+0x404>)
 8020370:	f000 fcb0 	bl	8020cd4 <nanf>
 8020374:	ed86 0a00 	vstr	s0, [r6]
 8020378:	e7d2      	b.n	8020320 <_scanf_float+0x39c>
 802037a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802037e:	e7f9      	b.n	8020374 <_scanf_float+0x3f0>
 8020380:	2500      	movs	r5, #0
 8020382:	e640      	b.n	8020006 <_scanf_float+0x82>
 8020384:	08025a00 	.word	0x08025a00
 8020388:	08025a40 	.word	0x08025a40

0802038c <std>:
 802038c:	2300      	movs	r3, #0
 802038e:	b510      	push	{r4, lr}
 8020390:	4604      	mov	r4, r0
 8020392:	e9c0 3300 	strd	r3, r3, [r0]
 8020396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802039a:	6083      	str	r3, [r0, #8]
 802039c:	8181      	strh	r1, [r0, #12]
 802039e:	6643      	str	r3, [r0, #100]	; 0x64
 80203a0:	81c2      	strh	r2, [r0, #14]
 80203a2:	6183      	str	r3, [r0, #24]
 80203a4:	4619      	mov	r1, r3
 80203a6:	2208      	movs	r2, #8
 80203a8:	305c      	adds	r0, #92	; 0x5c
 80203aa:	f000 fbb7 	bl	8020b1c <memset>
 80203ae:	4b0d      	ldr	r3, [pc, #52]	; (80203e4 <std+0x58>)
 80203b0:	6263      	str	r3, [r4, #36]	; 0x24
 80203b2:	4b0d      	ldr	r3, [pc, #52]	; (80203e8 <std+0x5c>)
 80203b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80203b6:	4b0d      	ldr	r3, [pc, #52]	; (80203ec <std+0x60>)
 80203b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80203ba:	4b0d      	ldr	r3, [pc, #52]	; (80203f0 <std+0x64>)
 80203bc:	6323      	str	r3, [r4, #48]	; 0x30
 80203be:	4b0d      	ldr	r3, [pc, #52]	; (80203f4 <std+0x68>)
 80203c0:	6224      	str	r4, [r4, #32]
 80203c2:	429c      	cmp	r4, r3
 80203c4:	d006      	beq.n	80203d4 <std+0x48>
 80203c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80203ca:	4294      	cmp	r4, r2
 80203cc:	d002      	beq.n	80203d4 <std+0x48>
 80203ce:	33d0      	adds	r3, #208	; 0xd0
 80203d0:	429c      	cmp	r4, r3
 80203d2:	d105      	bne.n	80203e0 <std+0x54>
 80203d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80203d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203dc:	f000 bc60 	b.w	8020ca0 <__retarget_lock_init_recursive>
 80203e0:	bd10      	pop	{r4, pc}
 80203e2:	bf00      	nop
 80203e4:	080208a5 	.word	0x080208a5
 80203e8:	080208c7 	.word	0x080208c7
 80203ec:	080208ff 	.word	0x080208ff
 80203f0:	08020923 	.word	0x08020923
 80203f4:	2001706c 	.word	0x2001706c

080203f8 <stdio_exit_handler>:
 80203f8:	4a02      	ldr	r2, [pc, #8]	; (8020404 <stdio_exit_handler+0xc>)
 80203fa:	4903      	ldr	r1, [pc, #12]	; (8020408 <stdio_exit_handler+0x10>)
 80203fc:	4803      	ldr	r0, [pc, #12]	; (802040c <stdio_exit_handler+0x14>)
 80203fe:	f000 b869 	b.w	80204d4 <_fwalk_sglue>
 8020402:	bf00      	nop
 8020404:	20000980 	.word	0x20000980
 8020408:	0802360d 	.word	0x0802360d
 802040c:	2000098c 	.word	0x2000098c

08020410 <cleanup_stdio>:
 8020410:	6841      	ldr	r1, [r0, #4]
 8020412:	4b0c      	ldr	r3, [pc, #48]	; (8020444 <cleanup_stdio+0x34>)
 8020414:	4299      	cmp	r1, r3
 8020416:	b510      	push	{r4, lr}
 8020418:	4604      	mov	r4, r0
 802041a:	d001      	beq.n	8020420 <cleanup_stdio+0x10>
 802041c:	f003 f8f6 	bl	802360c <_fflush_r>
 8020420:	68a1      	ldr	r1, [r4, #8]
 8020422:	4b09      	ldr	r3, [pc, #36]	; (8020448 <cleanup_stdio+0x38>)
 8020424:	4299      	cmp	r1, r3
 8020426:	d002      	beq.n	802042e <cleanup_stdio+0x1e>
 8020428:	4620      	mov	r0, r4
 802042a:	f003 f8ef 	bl	802360c <_fflush_r>
 802042e:	68e1      	ldr	r1, [r4, #12]
 8020430:	4b06      	ldr	r3, [pc, #24]	; (802044c <cleanup_stdio+0x3c>)
 8020432:	4299      	cmp	r1, r3
 8020434:	d004      	beq.n	8020440 <cleanup_stdio+0x30>
 8020436:	4620      	mov	r0, r4
 8020438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802043c:	f003 b8e6 	b.w	802360c <_fflush_r>
 8020440:	bd10      	pop	{r4, pc}
 8020442:	bf00      	nop
 8020444:	2001706c 	.word	0x2001706c
 8020448:	200170d4 	.word	0x200170d4
 802044c:	2001713c 	.word	0x2001713c

08020450 <global_stdio_init.part.0>:
 8020450:	b510      	push	{r4, lr}
 8020452:	4b0b      	ldr	r3, [pc, #44]	; (8020480 <global_stdio_init.part.0+0x30>)
 8020454:	4c0b      	ldr	r4, [pc, #44]	; (8020484 <global_stdio_init.part.0+0x34>)
 8020456:	4a0c      	ldr	r2, [pc, #48]	; (8020488 <global_stdio_init.part.0+0x38>)
 8020458:	601a      	str	r2, [r3, #0]
 802045a:	4620      	mov	r0, r4
 802045c:	2200      	movs	r2, #0
 802045e:	2104      	movs	r1, #4
 8020460:	f7ff ff94 	bl	802038c <std>
 8020464:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020468:	2201      	movs	r2, #1
 802046a:	2109      	movs	r1, #9
 802046c:	f7ff ff8e 	bl	802038c <std>
 8020470:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8020474:	2202      	movs	r2, #2
 8020476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802047a:	2112      	movs	r1, #18
 802047c:	f7ff bf86 	b.w	802038c <std>
 8020480:	200171a4 	.word	0x200171a4
 8020484:	2001706c 	.word	0x2001706c
 8020488:	080203f9 	.word	0x080203f9

0802048c <__sfp_lock_acquire>:
 802048c:	4801      	ldr	r0, [pc, #4]	; (8020494 <__sfp_lock_acquire+0x8>)
 802048e:	f000 bc08 	b.w	8020ca2 <__retarget_lock_acquire_recursive>
 8020492:	bf00      	nop
 8020494:	200171ae 	.word	0x200171ae

08020498 <__sfp_lock_release>:
 8020498:	4801      	ldr	r0, [pc, #4]	; (80204a0 <__sfp_lock_release+0x8>)
 802049a:	f000 bc03 	b.w	8020ca4 <__retarget_lock_release_recursive>
 802049e:	bf00      	nop
 80204a0:	200171ae 	.word	0x200171ae

080204a4 <__sinit>:
 80204a4:	b510      	push	{r4, lr}
 80204a6:	4604      	mov	r4, r0
 80204a8:	f7ff fff0 	bl	802048c <__sfp_lock_acquire>
 80204ac:	6a23      	ldr	r3, [r4, #32]
 80204ae:	b11b      	cbz	r3, 80204b8 <__sinit+0x14>
 80204b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204b4:	f7ff bff0 	b.w	8020498 <__sfp_lock_release>
 80204b8:	4b04      	ldr	r3, [pc, #16]	; (80204cc <__sinit+0x28>)
 80204ba:	6223      	str	r3, [r4, #32]
 80204bc:	4b04      	ldr	r3, [pc, #16]	; (80204d0 <__sinit+0x2c>)
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d1f5      	bne.n	80204b0 <__sinit+0xc>
 80204c4:	f7ff ffc4 	bl	8020450 <global_stdio_init.part.0>
 80204c8:	e7f2      	b.n	80204b0 <__sinit+0xc>
 80204ca:	bf00      	nop
 80204cc:	08020411 	.word	0x08020411
 80204d0:	200171a4 	.word	0x200171a4

080204d4 <_fwalk_sglue>:
 80204d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204d8:	4607      	mov	r7, r0
 80204da:	4688      	mov	r8, r1
 80204dc:	4614      	mov	r4, r2
 80204de:	2600      	movs	r6, #0
 80204e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80204e4:	f1b9 0901 	subs.w	r9, r9, #1
 80204e8:	d505      	bpl.n	80204f6 <_fwalk_sglue+0x22>
 80204ea:	6824      	ldr	r4, [r4, #0]
 80204ec:	2c00      	cmp	r4, #0
 80204ee:	d1f7      	bne.n	80204e0 <_fwalk_sglue+0xc>
 80204f0:	4630      	mov	r0, r6
 80204f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80204f6:	89ab      	ldrh	r3, [r5, #12]
 80204f8:	2b01      	cmp	r3, #1
 80204fa:	d907      	bls.n	802050c <_fwalk_sglue+0x38>
 80204fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020500:	3301      	adds	r3, #1
 8020502:	d003      	beq.n	802050c <_fwalk_sglue+0x38>
 8020504:	4629      	mov	r1, r5
 8020506:	4638      	mov	r0, r7
 8020508:	47c0      	blx	r8
 802050a:	4306      	orrs	r6, r0
 802050c:	3568      	adds	r5, #104	; 0x68
 802050e:	e7e9      	b.n	80204e4 <_fwalk_sglue+0x10>

08020510 <_fwrite_r>:
 8020510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020514:	9c08      	ldr	r4, [sp, #32]
 8020516:	468a      	mov	sl, r1
 8020518:	4690      	mov	r8, r2
 802051a:	fb02 f903 	mul.w	r9, r2, r3
 802051e:	4606      	mov	r6, r0
 8020520:	b118      	cbz	r0, 802052a <_fwrite_r+0x1a>
 8020522:	6a03      	ldr	r3, [r0, #32]
 8020524:	b90b      	cbnz	r3, 802052a <_fwrite_r+0x1a>
 8020526:	f7ff ffbd 	bl	80204a4 <__sinit>
 802052a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802052c:	07dd      	lsls	r5, r3, #31
 802052e:	d405      	bmi.n	802053c <_fwrite_r+0x2c>
 8020530:	89a3      	ldrh	r3, [r4, #12]
 8020532:	0598      	lsls	r0, r3, #22
 8020534:	d402      	bmi.n	802053c <_fwrite_r+0x2c>
 8020536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020538:	f000 fbb3 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 802053c:	89a3      	ldrh	r3, [r4, #12]
 802053e:	0719      	lsls	r1, r3, #28
 8020540:	d516      	bpl.n	8020570 <_fwrite_r+0x60>
 8020542:	6923      	ldr	r3, [r4, #16]
 8020544:	b1a3      	cbz	r3, 8020570 <_fwrite_r+0x60>
 8020546:	2500      	movs	r5, #0
 8020548:	454d      	cmp	r5, r9
 802054a:	d01f      	beq.n	802058c <_fwrite_r+0x7c>
 802054c:	68a7      	ldr	r7, [r4, #8]
 802054e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8020552:	3f01      	subs	r7, #1
 8020554:	2f00      	cmp	r7, #0
 8020556:	60a7      	str	r7, [r4, #8]
 8020558:	da04      	bge.n	8020564 <_fwrite_r+0x54>
 802055a:	69a3      	ldr	r3, [r4, #24]
 802055c:	429f      	cmp	r7, r3
 802055e:	db0f      	blt.n	8020580 <_fwrite_r+0x70>
 8020560:	290a      	cmp	r1, #10
 8020562:	d00d      	beq.n	8020580 <_fwrite_r+0x70>
 8020564:	6823      	ldr	r3, [r4, #0]
 8020566:	1c5a      	adds	r2, r3, #1
 8020568:	6022      	str	r2, [r4, #0]
 802056a:	7019      	strb	r1, [r3, #0]
 802056c:	3501      	adds	r5, #1
 802056e:	e7eb      	b.n	8020548 <_fwrite_r+0x38>
 8020570:	4621      	mov	r1, r4
 8020572:	4630      	mov	r0, r6
 8020574:	f000 fa50 	bl	8020a18 <__swsetup_r>
 8020578:	2800      	cmp	r0, #0
 802057a:	d0e4      	beq.n	8020546 <_fwrite_r+0x36>
 802057c:	2500      	movs	r5, #0
 802057e:	e005      	b.n	802058c <_fwrite_r+0x7c>
 8020580:	4622      	mov	r2, r4
 8020582:	4630      	mov	r0, r6
 8020584:	f000 fa0a 	bl	802099c <__swbuf_r>
 8020588:	3001      	adds	r0, #1
 802058a:	d1ef      	bne.n	802056c <_fwrite_r+0x5c>
 802058c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802058e:	07da      	lsls	r2, r3, #31
 8020590:	d405      	bmi.n	802059e <_fwrite_r+0x8e>
 8020592:	89a3      	ldrh	r3, [r4, #12]
 8020594:	059b      	lsls	r3, r3, #22
 8020596:	d402      	bmi.n	802059e <_fwrite_r+0x8e>
 8020598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802059a:	f000 fb83 	bl	8020ca4 <__retarget_lock_release_recursive>
 802059e:	fbb5 f0f8 	udiv	r0, r5, r8
 80205a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080205a8 <fwrite>:
 80205a8:	b507      	push	{r0, r1, r2, lr}
 80205aa:	9300      	str	r3, [sp, #0]
 80205ac:	4613      	mov	r3, r2
 80205ae:	460a      	mov	r2, r1
 80205b0:	4601      	mov	r1, r0
 80205b2:	4803      	ldr	r0, [pc, #12]	; (80205c0 <fwrite+0x18>)
 80205b4:	6800      	ldr	r0, [r0, #0]
 80205b6:	f7ff ffab 	bl	8020510 <_fwrite_r>
 80205ba:	b003      	add	sp, #12
 80205bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80205c0:	200009d8 	.word	0x200009d8

080205c4 <iprintf>:
 80205c4:	b40f      	push	{r0, r1, r2, r3}
 80205c6:	b507      	push	{r0, r1, r2, lr}
 80205c8:	4906      	ldr	r1, [pc, #24]	; (80205e4 <iprintf+0x20>)
 80205ca:	ab04      	add	r3, sp, #16
 80205cc:	6808      	ldr	r0, [r1, #0]
 80205ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80205d2:	6881      	ldr	r1, [r0, #8]
 80205d4:	9301      	str	r3, [sp, #4]
 80205d6:	f002 fe79 	bl	80232cc <_vfiprintf_r>
 80205da:	b003      	add	sp, #12
 80205dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80205e0:	b004      	add	sp, #16
 80205e2:	4770      	bx	lr
 80205e4:	200009d8 	.word	0x200009d8

080205e8 <_puts_r>:
 80205e8:	6a03      	ldr	r3, [r0, #32]
 80205ea:	b570      	push	{r4, r5, r6, lr}
 80205ec:	6884      	ldr	r4, [r0, #8]
 80205ee:	4605      	mov	r5, r0
 80205f0:	460e      	mov	r6, r1
 80205f2:	b90b      	cbnz	r3, 80205f8 <_puts_r+0x10>
 80205f4:	f7ff ff56 	bl	80204a4 <__sinit>
 80205f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80205fa:	07db      	lsls	r3, r3, #31
 80205fc:	d405      	bmi.n	802060a <_puts_r+0x22>
 80205fe:	89a3      	ldrh	r3, [r4, #12]
 8020600:	0598      	lsls	r0, r3, #22
 8020602:	d402      	bmi.n	802060a <_puts_r+0x22>
 8020604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020606:	f000 fb4c 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 802060a:	89a3      	ldrh	r3, [r4, #12]
 802060c:	0719      	lsls	r1, r3, #28
 802060e:	d513      	bpl.n	8020638 <_puts_r+0x50>
 8020610:	6923      	ldr	r3, [r4, #16]
 8020612:	b18b      	cbz	r3, 8020638 <_puts_r+0x50>
 8020614:	3e01      	subs	r6, #1
 8020616:	68a3      	ldr	r3, [r4, #8]
 8020618:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802061c:	3b01      	subs	r3, #1
 802061e:	60a3      	str	r3, [r4, #8]
 8020620:	b9e9      	cbnz	r1, 802065e <_puts_r+0x76>
 8020622:	2b00      	cmp	r3, #0
 8020624:	da2e      	bge.n	8020684 <_puts_r+0x9c>
 8020626:	4622      	mov	r2, r4
 8020628:	210a      	movs	r1, #10
 802062a:	4628      	mov	r0, r5
 802062c:	f000 f9b6 	bl	802099c <__swbuf_r>
 8020630:	3001      	adds	r0, #1
 8020632:	d007      	beq.n	8020644 <_puts_r+0x5c>
 8020634:	250a      	movs	r5, #10
 8020636:	e007      	b.n	8020648 <_puts_r+0x60>
 8020638:	4621      	mov	r1, r4
 802063a:	4628      	mov	r0, r5
 802063c:	f000 f9ec 	bl	8020a18 <__swsetup_r>
 8020640:	2800      	cmp	r0, #0
 8020642:	d0e7      	beq.n	8020614 <_puts_r+0x2c>
 8020644:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802064a:	07da      	lsls	r2, r3, #31
 802064c:	d405      	bmi.n	802065a <_puts_r+0x72>
 802064e:	89a3      	ldrh	r3, [r4, #12]
 8020650:	059b      	lsls	r3, r3, #22
 8020652:	d402      	bmi.n	802065a <_puts_r+0x72>
 8020654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020656:	f000 fb25 	bl	8020ca4 <__retarget_lock_release_recursive>
 802065a:	4628      	mov	r0, r5
 802065c:	bd70      	pop	{r4, r5, r6, pc}
 802065e:	2b00      	cmp	r3, #0
 8020660:	da04      	bge.n	802066c <_puts_r+0x84>
 8020662:	69a2      	ldr	r2, [r4, #24]
 8020664:	429a      	cmp	r2, r3
 8020666:	dc06      	bgt.n	8020676 <_puts_r+0x8e>
 8020668:	290a      	cmp	r1, #10
 802066a:	d004      	beq.n	8020676 <_puts_r+0x8e>
 802066c:	6823      	ldr	r3, [r4, #0]
 802066e:	1c5a      	adds	r2, r3, #1
 8020670:	6022      	str	r2, [r4, #0]
 8020672:	7019      	strb	r1, [r3, #0]
 8020674:	e7cf      	b.n	8020616 <_puts_r+0x2e>
 8020676:	4622      	mov	r2, r4
 8020678:	4628      	mov	r0, r5
 802067a:	f000 f98f 	bl	802099c <__swbuf_r>
 802067e:	3001      	adds	r0, #1
 8020680:	d1c9      	bne.n	8020616 <_puts_r+0x2e>
 8020682:	e7df      	b.n	8020644 <_puts_r+0x5c>
 8020684:	6823      	ldr	r3, [r4, #0]
 8020686:	250a      	movs	r5, #10
 8020688:	1c5a      	adds	r2, r3, #1
 802068a:	6022      	str	r2, [r4, #0]
 802068c:	701d      	strb	r5, [r3, #0]
 802068e:	e7db      	b.n	8020648 <_puts_r+0x60>

08020690 <puts>:
 8020690:	4b02      	ldr	r3, [pc, #8]	; (802069c <puts+0xc>)
 8020692:	4601      	mov	r1, r0
 8020694:	6818      	ldr	r0, [r3, #0]
 8020696:	f7ff bfa7 	b.w	80205e8 <_puts_r>
 802069a:	bf00      	nop
 802069c:	200009d8 	.word	0x200009d8

080206a0 <setvbuf>:
 80206a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80206a4:	461d      	mov	r5, r3
 80206a6:	4b54      	ldr	r3, [pc, #336]	; (80207f8 <setvbuf+0x158>)
 80206a8:	681f      	ldr	r7, [r3, #0]
 80206aa:	4604      	mov	r4, r0
 80206ac:	460e      	mov	r6, r1
 80206ae:	4690      	mov	r8, r2
 80206b0:	b127      	cbz	r7, 80206bc <setvbuf+0x1c>
 80206b2:	6a3b      	ldr	r3, [r7, #32]
 80206b4:	b913      	cbnz	r3, 80206bc <setvbuf+0x1c>
 80206b6:	4638      	mov	r0, r7
 80206b8:	f7ff fef4 	bl	80204a4 <__sinit>
 80206bc:	f1b8 0f02 	cmp.w	r8, #2
 80206c0:	d006      	beq.n	80206d0 <setvbuf+0x30>
 80206c2:	f1b8 0f01 	cmp.w	r8, #1
 80206c6:	f200 8094 	bhi.w	80207f2 <setvbuf+0x152>
 80206ca:	2d00      	cmp	r5, #0
 80206cc:	f2c0 8091 	blt.w	80207f2 <setvbuf+0x152>
 80206d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80206d2:	07da      	lsls	r2, r3, #31
 80206d4:	d405      	bmi.n	80206e2 <setvbuf+0x42>
 80206d6:	89a3      	ldrh	r3, [r4, #12]
 80206d8:	059b      	lsls	r3, r3, #22
 80206da:	d402      	bmi.n	80206e2 <setvbuf+0x42>
 80206dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80206de:	f000 fae0 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 80206e2:	4621      	mov	r1, r4
 80206e4:	4638      	mov	r0, r7
 80206e6:	f002 ff91 	bl	802360c <_fflush_r>
 80206ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80206ec:	b141      	cbz	r1, 8020700 <setvbuf+0x60>
 80206ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80206f2:	4299      	cmp	r1, r3
 80206f4:	d002      	beq.n	80206fc <setvbuf+0x5c>
 80206f6:	4638      	mov	r0, r7
 80206f8:	f001 f912 	bl	8021920 <_free_r>
 80206fc:	2300      	movs	r3, #0
 80206fe:	6363      	str	r3, [r4, #52]	; 0x34
 8020700:	2300      	movs	r3, #0
 8020702:	61a3      	str	r3, [r4, #24]
 8020704:	6063      	str	r3, [r4, #4]
 8020706:	89a3      	ldrh	r3, [r4, #12]
 8020708:	0618      	lsls	r0, r3, #24
 802070a:	d503      	bpl.n	8020714 <setvbuf+0x74>
 802070c:	6921      	ldr	r1, [r4, #16]
 802070e:	4638      	mov	r0, r7
 8020710:	f001 f906 	bl	8021920 <_free_r>
 8020714:	89a3      	ldrh	r3, [r4, #12]
 8020716:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802071a:	f023 0303 	bic.w	r3, r3, #3
 802071e:	f1b8 0f02 	cmp.w	r8, #2
 8020722:	81a3      	strh	r3, [r4, #12]
 8020724:	d05f      	beq.n	80207e6 <setvbuf+0x146>
 8020726:	ab01      	add	r3, sp, #4
 8020728:	466a      	mov	r2, sp
 802072a:	4621      	mov	r1, r4
 802072c:	4638      	mov	r0, r7
 802072e:	f002 ffa7 	bl	8023680 <__swhatbuf_r>
 8020732:	89a3      	ldrh	r3, [r4, #12]
 8020734:	4318      	orrs	r0, r3
 8020736:	81a0      	strh	r0, [r4, #12]
 8020738:	bb2d      	cbnz	r5, 8020786 <setvbuf+0xe6>
 802073a:	9d00      	ldr	r5, [sp, #0]
 802073c:	4628      	mov	r0, r5
 802073e:	f7fe fe09 	bl	801f354 <malloc>
 8020742:	4606      	mov	r6, r0
 8020744:	2800      	cmp	r0, #0
 8020746:	d150      	bne.n	80207ea <setvbuf+0x14a>
 8020748:	f8dd 9000 	ldr.w	r9, [sp]
 802074c:	45a9      	cmp	r9, r5
 802074e:	d13e      	bne.n	80207ce <setvbuf+0x12e>
 8020750:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020754:	2200      	movs	r2, #0
 8020756:	60a2      	str	r2, [r4, #8]
 8020758:	f104 0247 	add.w	r2, r4, #71	; 0x47
 802075c:	6022      	str	r2, [r4, #0]
 802075e:	6122      	str	r2, [r4, #16]
 8020760:	2201      	movs	r2, #1
 8020762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020766:	6162      	str	r2, [r4, #20]
 8020768:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802076a:	f043 0302 	orr.w	r3, r3, #2
 802076e:	07d1      	lsls	r1, r2, #31
 8020770:	81a3      	strh	r3, [r4, #12]
 8020772:	d404      	bmi.n	802077e <setvbuf+0xde>
 8020774:	059b      	lsls	r3, r3, #22
 8020776:	d402      	bmi.n	802077e <setvbuf+0xde>
 8020778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802077a:	f000 fa93 	bl	8020ca4 <__retarget_lock_release_recursive>
 802077e:	4628      	mov	r0, r5
 8020780:	b003      	add	sp, #12
 8020782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020786:	2e00      	cmp	r6, #0
 8020788:	d0d8      	beq.n	802073c <setvbuf+0x9c>
 802078a:	6a3b      	ldr	r3, [r7, #32]
 802078c:	b913      	cbnz	r3, 8020794 <setvbuf+0xf4>
 802078e:	4638      	mov	r0, r7
 8020790:	f7ff fe88 	bl	80204a4 <__sinit>
 8020794:	f1b8 0f01 	cmp.w	r8, #1
 8020798:	bf08      	it	eq
 802079a:	89a3      	ldrheq	r3, [r4, #12]
 802079c:	6026      	str	r6, [r4, #0]
 802079e:	bf04      	itt	eq
 80207a0:	f043 0301 	orreq.w	r3, r3, #1
 80207a4:	81a3      	strheq	r3, [r4, #12]
 80207a6:	89a3      	ldrh	r3, [r4, #12]
 80207a8:	f013 0208 	ands.w	r2, r3, #8
 80207ac:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80207b0:	d01d      	beq.n	80207ee <setvbuf+0x14e>
 80207b2:	07da      	lsls	r2, r3, #31
 80207b4:	bf41      	itttt	mi
 80207b6:	2200      	movmi	r2, #0
 80207b8:	426d      	negmi	r5, r5
 80207ba:	60a2      	strmi	r2, [r4, #8]
 80207bc:	61a5      	strmi	r5, [r4, #24]
 80207be:	bf58      	it	pl
 80207c0:	60a5      	strpl	r5, [r4, #8]
 80207c2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80207c4:	f015 0501 	ands.w	r5, r5, #1
 80207c8:	d0d4      	beq.n	8020774 <setvbuf+0xd4>
 80207ca:	2500      	movs	r5, #0
 80207cc:	e7d7      	b.n	802077e <setvbuf+0xde>
 80207ce:	4648      	mov	r0, r9
 80207d0:	f7fe fdc0 	bl	801f354 <malloc>
 80207d4:	4606      	mov	r6, r0
 80207d6:	2800      	cmp	r0, #0
 80207d8:	d0ba      	beq.n	8020750 <setvbuf+0xb0>
 80207da:	89a3      	ldrh	r3, [r4, #12]
 80207dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80207e0:	81a3      	strh	r3, [r4, #12]
 80207e2:	464d      	mov	r5, r9
 80207e4:	e7d1      	b.n	802078a <setvbuf+0xea>
 80207e6:	2500      	movs	r5, #0
 80207e8:	e7b4      	b.n	8020754 <setvbuf+0xb4>
 80207ea:	46a9      	mov	r9, r5
 80207ec:	e7f5      	b.n	80207da <setvbuf+0x13a>
 80207ee:	60a2      	str	r2, [r4, #8]
 80207f0:	e7e7      	b.n	80207c2 <setvbuf+0x122>
 80207f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80207f6:	e7c2      	b.n	802077e <setvbuf+0xde>
 80207f8:	200009d8 	.word	0x200009d8

080207fc <sniprintf>:
 80207fc:	b40c      	push	{r2, r3}
 80207fe:	b530      	push	{r4, r5, lr}
 8020800:	4b17      	ldr	r3, [pc, #92]	; (8020860 <sniprintf+0x64>)
 8020802:	1e0c      	subs	r4, r1, #0
 8020804:	681d      	ldr	r5, [r3, #0]
 8020806:	b09d      	sub	sp, #116	; 0x74
 8020808:	da08      	bge.n	802081c <sniprintf+0x20>
 802080a:	238b      	movs	r3, #139	; 0x8b
 802080c:	602b      	str	r3, [r5, #0]
 802080e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020812:	b01d      	add	sp, #116	; 0x74
 8020814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020818:	b002      	add	sp, #8
 802081a:	4770      	bx	lr
 802081c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020820:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020824:	bf14      	ite	ne
 8020826:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 802082a:	4623      	moveq	r3, r4
 802082c:	9304      	str	r3, [sp, #16]
 802082e:	9307      	str	r3, [sp, #28]
 8020830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020834:	9002      	str	r0, [sp, #8]
 8020836:	9006      	str	r0, [sp, #24]
 8020838:	f8ad 3016 	strh.w	r3, [sp, #22]
 802083c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802083e:	ab21      	add	r3, sp, #132	; 0x84
 8020840:	a902      	add	r1, sp, #8
 8020842:	4628      	mov	r0, r5
 8020844:	9301      	str	r3, [sp, #4]
 8020846:	f002 fc19 	bl	802307c <_svfiprintf_r>
 802084a:	1c43      	adds	r3, r0, #1
 802084c:	bfbc      	itt	lt
 802084e:	238b      	movlt	r3, #139	; 0x8b
 8020850:	602b      	strlt	r3, [r5, #0]
 8020852:	2c00      	cmp	r4, #0
 8020854:	d0dd      	beq.n	8020812 <sniprintf+0x16>
 8020856:	9b02      	ldr	r3, [sp, #8]
 8020858:	2200      	movs	r2, #0
 802085a:	701a      	strb	r2, [r3, #0]
 802085c:	e7d9      	b.n	8020812 <sniprintf+0x16>
 802085e:	bf00      	nop
 8020860:	200009d8 	.word	0x200009d8

08020864 <siprintf>:
 8020864:	b40e      	push	{r1, r2, r3}
 8020866:	b500      	push	{lr}
 8020868:	b09c      	sub	sp, #112	; 0x70
 802086a:	ab1d      	add	r3, sp, #116	; 0x74
 802086c:	9002      	str	r0, [sp, #8]
 802086e:	9006      	str	r0, [sp, #24]
 8020870:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020874:	4809      	ldr	r0, [pc, #36]	; (802089c <siprintf+0x38>)
 8020876:	9107      	str	r1, [sp, #28]
 8020878:	9104      	str	r1, [sp, #16]
 802087a:	4909      	ldr	r1, [pc, #36]	; (80208a0 <siprintf+0x3c>)
 802087c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020880:	9105      	str	r1, [sp, #20]
 8020882:	6800      	ldr	r0, [r0, #0]
 8020884:	9301      	str	r3, [sp, #4]
 8020886:	a902      	add	r1, sp, #8
 8020888:	f002 fbf8 	bl	802307c <_svfiprintf_r>
 802088c:	9b02      	ldr	r3, [sp, #8]
 802088e:	2200      	movs	r2, #0
 8020890:	701a      	strb	r2, [r3, #0]
 8020892:	b01c      	add	sp, #112	; 0x70
 8020894:	f85d eb04 	ldr.w	lr, [sp], #4
 8020898:	b003      	add	sp, #12
 802089a:	4770      	bx	lr
 802089c:	200009d8 	.word	0x200009d8
 80208a0:	ffff0208 	.word	0xffff0208

080208a4 <__sread>:
 80208a4:	b510      	push	{r4, lr}
 80208a6:	460c      	mov	r4, r1
 80208a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208ac:	f000 f99a 	bl	8020be4 <_read_r>
 80208b0:	2800      	cmp	r0, #0
 80208b2:	bfab      	itete	ge
 80208b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80208b6:	89a3      	ldrhlt	r3, [r4, #12]
 80208b8:	181b      	addge	r3, r3, r0
 80208ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80208be:	bfac      	ite	ge
 80208c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80208c2:	81a3      	strhlt	r3, [r4, #12]
 80208c4:	bd10      	pop	{r4, pc}

080208c6 <__swrite>:
 80208c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208ca:	461f      	mov	r7, r3
 80208cc:	898b      	ldrh	r3, [r1, #12]
 80208ce:	05db      	lsls	r3, r3, #23
 80208d0:	4605      	mov	r5, r0
 80208d2:	460c      	mov	r4, r1
 80208d4:	4616      	mov	r6, r2
 80208d6:	d505      	bpl.n	80208e4 <__swrite+0x1e>
 80208d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80208dc:	2302      	movs	r3, #2
 80208de:	2200      	movs	r2, #0
 80208e0:	f000 f96e 	bl	8020bc0 <_lseek_r>
 80208e4:	89a3      	ldrh	r3, [r4, #12]
 80208e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80208ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80208ee:	81a3      	strh	r3, [r4, #12]
 80208f0:	4632      	mov	r2, r6
 80208f2:	463b      	mov	r3, r7
 80208f4:	4628      	mov	r0, r5
 80208f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80208fa:	f000 b995 	b.w	8020c28 <_write_r>

080208fe <__sseek>:
 80208fe:	b510      	push	{r4, lr}
 8020900:	460c      	mov	r4, r1
 8020902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020906:	f000 f95b 	bl	8020bc0 <_lseek_r>
 802090a:	1c43      	adds	r3, r0, #1
 802090c:	89a3      	ldrh	r3, [r4, #12]
 802090e:	bf15      	itete	ne
 8020910:	6560      	strne	r0, [r4, #84]	; 0x54
 8020912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802091a:	81a3      	strheq	r3, [r4, #12]
 802091c:	bf18      	it	ne
 802091e:	81a3      	strhne	r3, [r4, #12]
 8020920:	bd10      	pop	{r4, pc}

08020922 <__sclose>:
 8020922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020926:	f000 b93b 	b.w	8020ba0 <_close_r>

0802092a <_vsniprintf_r>:
 802092a:	b530      	push	{r4, r5, lr}
 802092c:	4614      	mov	r4, r2
 802092e:	2c00      	cmp	r4, #0
 8020930:	b09b      	sub	sp, #108	; 0x6c
 8020932:	4605      	mov	r5, r0
 8020934:	461a      	mov	r2, r3
 8020936:	da05      	bge.n	8020944 <_vsniprintf_r+0x1a>
 8020938:	238b      	movs	r3, #139	; 0x8b
 802093a:	6003      	str	r3, [r0, #0]
 802093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020940:	b01b      	add	sp, #108	; 0x6c
 8020942:	bd30      	pop	{r4, r5, pc}
 8020944:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020948:	f8ad 300c 	strh.w	r3, [sp, #12]
 802094c:	bf14      	ite	ne
 802094e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020952:	4623      	moveq	r3, r4
 8020954:	9302      	str	r3, [sp, #8]
 8020956:	9305      	str	r3, [sp, #20]
 8020958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802095c:	9100      	str	r1, [sp, #0]
 802095e:	9104      	str	r1, [sp, #16]
 8020960:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020964:	4669      	mov	r1, sp
 8020966:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020968:	f002 fb88 	bl	802307c <_svfiprintf_r>
 802096c:	1c43      	adds	r3, r0, #1
 802096e:	bfbc      	itt	lt
 8020970:	238b      	movlt	r3, #139	; 0x8b
 8020972:	602b      	strlt	r3, [r5, #0]
 8020974:	2c00      	cmp	r4, #0
 8020976:	d0e3      	beq.n	8020940 <_vsniprintf_r+0x16>
 8020978:	9b00      	ldr	r3, [sp, #0]
 802097a:	2200      	movs	r2, #0
 802097c:	701a      	strb	r2, [r3, #0]
 802097e:	e7df      	b.n	8020940 <_vsniprintf_r+0x16>

08020980 <vsniprintf>:
 8020980:	b507      	push	{r0, r1, r2, lr}
 8020982:	9300      	str	r3, [sp, #0]
 8020984:	4613      	mov	r3, r2
 8020986:	460a      	mov	r2, r1
 8020988:	4601      	mov	r1, r0
 802098a:	4803      	ldr	r0, [pc, #12]	; (8020998 <vsniprintf+0x18>)
 802098c:	6800      	ldr	r0, [r0, #0]
 802098e:	f7ff ffcc 	bl	802092a <_vsniprintf_r>
 8020992:	b003      	add	sp, #12
 8020994:	f85d fb04 	ldr.w	pc, [sp], #4
 8020998:	200009d8 	.word	0x200009d8

0802099c <__swbuf_r>:
 802099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802099e:	460e      	mov	r6, r1
 80209a0:	4614      	mov	r4, r2
 80209a2:	4605      	mov	r5, r0
 80209a4:	b118      	cbz	r0, 80209ae <__swbuf_r+0x12>
 80209a6:	6a03      	ldr	r3, [r0, #32]
 80209a8:	b90b      	cbnz	r3, 80209ae <__swbuf_r+0x12>
 80209aa:	f7ff fd7b 	bl	80204a4 <__sinit>
 80209ae:	69a3      	ldr	r3, [r4, #24]
 80209b0:	60a3      	str	r3, [r4, #8]
 80209b2:	89a3      	ldrh	r3, [r4, #12]
 80209b4:	071a      	lsls	r2, r3, #28
 80209b6:	d525      	bpl.n	8020a04 <__swbuf_r+0x68>
 80209b8:	6923      	ldr	r3, [r4, #16]
 80209ba:	b31b      	cbz	r3, 8020a04 <__swbuf_r+0x68>
 80209bc:	6823      	ldr	r3, [r4, #0]
 80209be:	6922      	ldr	r2, [r4, #16]
 80209c0:	1a98      	subs	r0, r3, r2
 80209c2:	6963      	ldr	r3, [r4, #20]
 80209c4:	b2f6      	uxtb	r6, r6
 80209c6:	4283      	cmp	r3, r0
 80209c8:	4637      	mov	r7, r6
 80209ca:	dc04      	bgt.n	80209d6 <__swbuf_r+0x3a>
 80209cc:	4621      	mov	r1, r4
 80209ce:	4628      	mov	r0, r5
 80209d0:	f002 fe1c 	bl	802360c <_fflush_r>
 80209d4:	b9e0      	cbnz	r0, 8020a10 <__swbuf_r+0x74>
 80209d6:	68a3      	ldr	r3, [r4, #8]
 80209d8:	3b01      	subs	r3, #1
 80209da:	60a3      	str	r3, [r4, #8]
 80209dc:	6823      	ldr	r3, [r4, #0]
 80209de:	1c5a      	adds	r2, r3, #1
 80209e0:	6022      	str	r2, [r4, #0]
 80209e2:	701e      	strb	r6, [r3, #0]
 80209e4:	6962      	ldr	r2, [r4, #20]
 80209e6:	1c43      	adds	r3, r0, #1
 80209e8:	429a      	cmp	r2, r3
 80209ea:	d004      	beq.n	80209f6 <__swbuf_r+0x5a>
 80209ec:	89a3      	ldrh	r3, [r4, #12]
 80209ee:	07db      	lsls	r3, r3, #31
 80209f0:	d506      	bpl.n	8020a00 <__swbuf_r+0x64>
 80209f2:	2e0a      	cmp	r6, #10
 80209f4:	d104      	bne.n	8020a00 <__swbuf_r+0x64>
 80209f6:	4621      	mov	r1, r4
 80209f8:	4628      	mov	r0, r5
 80209fa:	f002 fe07 	bl	802360c <_fflush_r>
 80209fe:	b938      	cbnz	r0, 8020a10 <__swbuf_r+0x74>
 8020a00:	4638      	mov	r0, r7
 8020a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a04:	4621      	mov	r1, r4
 8020a06:	4628      	mov	r0, r5
 8020a08:	f000 f806 	bl	8020a18 <__swsetup_r>
 8020a0c:	2800      	cmp	r0, #0
 8020a0e:	d0d5      	beq.n	80209bc <__swbuf_r+0x20>
 8020a10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020a14:	e7f4      	b.n	8020a00 <__swbuf_r+0x64>
	...

08020a18 <__swsetup_r>:
 8020a18:	b538      	push	{r3, r4, r5, lr}
 8020a1a:	4b2a      	ldr	r3, [pc, #168]	; (8020ac4 <__swsetup_r+0xac>)
 8020a1c:	4605      	mov	r5, r0
 8020a1e:	6818      	ldr	r0, [r3, #0]
 8020a20:	460c      	mov	r4, r1
 8020a22:	b118      	cbz	r0, 8020a2c <__swsetup_r+0x14>
 8020a24:	6a03      	ldr	r3, [r0, #32]
 8020a26:	b90b      	cbnz	r3, 8020a2c <__swsetup_r+0x14>
 8020a28:	f7ff fd3c 	bl	80204a4 <__sinit>
 8020a2c:	89a3      	ldrh	r3, [r4, #12]
 8020a2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020a32:	0718      	lsls	r0, r3, #28
 8020a34:	d422      	bmi.n	8020a7c <__swsetup_r+0x64>
 8020a36:	06d9      	lsls	r1, r3, #27
 8020a38:	d407      	bmi.n	8020a4a <__swsetup_r+0x32>
 8020a3a:	2309      	movs	r3, #9
 8020a3c:	602b      	str	r3, [r5, #0]
 8020a3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020a42:	81a3      	strh	r3, [r4, #12]
 8020a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a48:	e034      	b.n	8020ab4 <__swsetup_r+0x9c>
 8020a4a:	0758      	lsls	r0, r3, #29
 8020a4c:	d512      	bpl.n	8020a74 <__swsetup_r+0x5c>
 8020a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020a50:	b141      	cbz	r1, 8020a64 <__swsetup_r+0x4c>
 8020a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020a56:	4299      	cmp	r1, r3
 8020a58:	d002      	beq.n	8020a60 <__swsetup_r+0x48>
 8020a5a:	4628      	mov	r0, r5
 8020a5c:	f000 ff60 	bl	8021920 <_free_r>
 8020a60:	2300      	movs	r3, #0
 8020a62:	6363      	str	r3, [r4, #52]	; 0x34
 8020a64:	89a3      	ldrh	r3, [r4, #12]
 8020a66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020a6a:	81a3      	strh	r3, [r4, #12]
 8020a6c:	2300      	movs	r3, #0
 8020a6e:	6063      	str	r3, [r4, #4]
 8020a70:	6923      	ldr	r3, [r4, #16]
 8020a72:	6023      	str	r3, [r4, #0]
 8020a74:	89a3      	ldrh	r3, [r4, #12]
 8020a76:	f043 0308 	orr.w	r3, r3, #8
 8020a7a:	81a3      	strh	r3, [r4, #12]
 8020a7c:	6923      	ldr	r3, [r4, #16]
 8020a7e:	b94b      	cbnz	r3, 8020a94 <__swsetup_r+0x7c>
 8020a80:	89a3      	ldrh	r3, [r4, #12]
 8020a82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020a8a:	d003      	beq.n	8020a94 <__swsetup_r+0x7c>
 8020a8c:	4621      	mov	r1, r4
 8020a8e:	4628      	mov	r0, r5
 8020a90:	f002 fe1c 	bl	80236cc <__smakebuf_r>
 8020a94:	89a0      	ldrh	r0, [r4, #12]
 8020a96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020a9a:	f010 0301 	ands.w	r3, r0, #1
 8020a9e:	d00a      	beq.n	8020ab6 <__swsetup_r+0x9e>
 8020aa0:	2300      	movs	r3, #0
 8020aa2:	60a3      	str	r3, [r4, #8]
 8020aa4:	6963      	ldr	r3, [r4, #20]
 8020aa6:	425b      	negs	r3, r3
 8020aa8:	61a3      	str	r3, [r4, #24]
 8020aaa:	6923      	ldr	r3, [r4, #16]
 8020aac:	b943      	cbnz	r3, 8020ac0 <__swsetup_r+0xa8>
 8020aae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020ab2:	d1c4      	bne.n	8020a3e <__swsetup_r+0x26>
 8020ab4:	bd38      	pop	{r3, r4, r5, pc}
 8020ab6:	0781      	lsls	r1, r0, #30
 8020ab8:	bf58      	it	pl
 8020aba:	6963      	ldrpl	r3, [r4, #20]
 8020abc:	60a3      	str	r3, [r4, #8]
 8020abe:	e7f4      	b.n	8020aaa <__swsetup_r+0x92>
 8020ac0:	2000      	movs	r0, #0
 8020ac2:	e7f7      	b.n	8020ab4 <__swsetup_r+0x9c>
 8020ac4:	200009d8 	.word	0x200009d8

08020ac8 <memcmp>:
 8020ac8:	b510      	push	{r4, lr}
 8020aca:	3901      	subs	r1, #1
 8020acc:	4402      	add	r2, r0
 8020ace:	4290      	cmp	r0, r2
 8020ad0:	d101      	bne.n	8020ad6 <memcmp+0xe>
 8020ad2:	2000      	movs	r0, #0
 8020ad4:	e005      	b.n	8020ae2 <memcmp+0x1a>
 8020ad6:	7803      	ldrb	r3, [r0, #0]
 8020ad8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020adc:	42a3      	cmp	r3, r4
 8020ade:	d001      	beq.n	8020ae4 <memcmp+0x1c>
 8020ae0:	1b18      	subs	r0, r3, r4
 8020ae2:	bd10      	pop	{r4, pc}
 8020ae4:	3001      	adds	r0, #1
 8020ae6:	e7f2      	b.n	8020ace <memcmp+0x6>

08020ae8 <memmove>:
 8020ae8:	4288      	cmp	r0, r1
 8020aea:	b510      	push	{r4, lr}
 8020aec:	eb01 0402 	add.w	r4, r1, r2
 8020af0:	d902      	bls.n	8020af8 <memmove+0x10>
 8020af2:	4284      	cmp	r4, r0
 8020af4:	4623      	mov	r3, r4
 8020af6:	d807      	bhi.n	8020b08 <memmove+0x20>
 8020af8:	1e43      	subs	r3, r0, #1
 8020afa:	42a1      	cmp	r1, r4
 8020afc:	d008      	beq.n	8020b10 <memmove+0x28>
 8020afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020b02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020b06:	e7f8      	b.n	8020afa <memmove+0x12>
 8020b08:	4402      	add	r2, r0
 8020b0a:	4601      	mov	r1, r0
 8020b0c:	428a      	cmp	r2, r1
 8020b0e:	d100      	bne.n	8020b12 <memmove+0x2a>
 8020b10:	bd10      	pop	{r4, pc}
 8020b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020b16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020b1a:	e7f7      	b.n	8020b0c <memmove+0x24>

08020b1c <memset>:
 8020b1c:	4402      	add	r2, r0
 8020b1e:	4603      	mov	r3, r0
 8020b20:	4293      	cmp	r3, r2
 8020b22:	d100      	bne.n	8020b26 <memset+0xa>
 8020b24:	4770      	bx	lr
 8020b26:	f803 1b01 	strb.w	r1, [r3], #1
 8020b2a:	e7f9      	b.n	8020b20 <memset+0x4>

08020b2c <strchr>:
 8020b2c:	b2c9      	uxtb	r1, r1
 8020b2e:	4603      	mov	r3, r0
 8020b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b34:	b11a      	cbz	r2, 8020b3e <strchr+0x12>
 8020b36:	428a      	cmp	r2, r1
 8020b38:	d1f9      	bne.n	8020b2e <strchr+0x2>
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	4770      	bx	lr
 8020b3e:	2900      	cmp	r1, #0
 8020b40:	bf18      	it	ne
 8020b42:	2300      	movne	r3, #0
 8020b44:	e7f9      	b.n	8020b3a <strchr+0xe>

08020b46 <strncmp>:
 8020b46:	b510      	push	{r4, lr}
 8020b48:	b16a      	cbz	r2, 8020b66 <strncmp+0x20>
 8020b4a:	3901      	subs	r1, #1
 8020b4c:	1884      	adds	r4, r0, r2
 8020b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b52:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020b56:	429a      	cmp	r2, r3
 8020b58:	d103      	bne.n	8020b62 <strncmp+0x1c>
 8020b5a:	42a0      	cmp	r0, r4
 8020b5c:	d001      	beq.n	8020b62 <strncmp+0x1c>
 8020b5e:	2a00      	cmp	r2, #0
 8020b60:	d1f5      	bne.n	8020b4e <strncmp+0x8>
 8020b62:	1ad0      	subs	r0, r2, r3
 8020b64:	bd10      	pop	{r4, pc}
 8020b66:	4610      	mov	r0, r2
 8020b68:	e7fc      	b.n	8020b64 <strncmp+0x1e>

08020b6a <strstr>:
 8020b6a:	780a      	ldrb	r2, [r1, #0]
 8020b6c:	b570      	push	{r4, r5, r6, lr}
 8020b6e:	b96a      	cbnz	r2, 8020b8c <strstr+0x22>
 8020b70:	bd70      	pop	{r4, r5, r6, pc}
 8020b72:	429a      	cmp	r2, r3
 8020b74:	d109      	bne.n	8020b8a <strstr+0x20>
 8020b76:	460c      	mov	r4, r1
 8020b78:	4605      	mov	r5, r0
 8020b7a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d0f6      	beq.n	8020b70 <strstr+0x6>
 8020b82:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8020b86:	429e      	cmp	r6, r3
 8020b88:	d0f7      	beq.n	8020b7a <strstr+0x10>
 8020b8a:	3001      	adds	r0, #1
 8020b8c:	7803      	ldrb	r3, [r0, #0]
 8020b8e:	2b00      	cmp	r3, #0
 8020b90:	d1ef      	bne.n	8020b72 <strstr+0x8>
 8020b92:	4618      	mov	r0, r3
 8020b94:	e7ec      	b.n	8020b70 <strstr+0x6>
	...

08020b98 <_localeconv_r>:
 8020b98:	4800      	ldr	r0, [pc, #0]	; (8020b9c <_localeconv_r+0x4>)
 8020b9a:	4770      	bx	lr
 8020b9c:	20000acc 	.word	0x20000acc

08020ba0 <_close_r>:
 8020ba0:	b538      	push	{r3, r4, r5, lr}
 8020ba2:	4d06      	ldr	r5, [pc, #24]	; (8020bbc <_close_r+0x1c>)
 8020ba4:	2300      	movs	r3, #0
 8020ba6:	4604      	mov	r4, r0
 8020ba8:	4608      	mov	r0, r1
 8020baa:	602b      	str	r3, [r5, #0]
 8020bac:	f7e2 fecf 	bl	800394e <_close>
 8020bb0:	1c43      	adds	r3, r0, #1
 8020bb2:	d102      	bne.n	8020bba <_close_r+0x1a>
 8020bb4:	682b      	ldr	r3, [r5, #0]
 8020bb6:	b103      	cbz	r3, 8020bba <_close_r+0x1a>
 8020bb8:	6023      	str	r3, [r4, #0]
 8020bba:	bd38      	pop	{r3, r4, r5, pc}
 8020bbc:	200171a8 	.word	0x200171a8

08020bc0 <_lseek_r>:
 8020bc0:	b538      	push	{r3, r4, r5, lr}
 8020bc2:	4d07      	ldr	r5, [pc, #28]	; (8020be0 <_lseek_r+0x20>)
 8020bc4:	4604      	mov	r4, r0
 8020bc6:	4608      	mov	r0, r1
 8020bc8:	4611      	mov	r1, r2
 8020bca:	2200      	movs	r2, #0
 8020bcc:	602a      	str	r2, [r5, #0]
 8020bce:	461a      	mov	r2, r3
 8020bd0:	f7e2 fee4 	bl	800399c <_lseek>
 8020bd4:	1c43      	adds	r3, r0, #1
 8020bd6:	d102      	bne.n	8020bde <_lseek_r+0x1e>
 8020bd8:	682b      	ldr	r3, [r5, #0]
 8020bda:	b103      	cbz	r3, 8020bde <_lseek_r+0x1e>
 8020bdc:	6023      	str	r3, [r4, #0]
 8020bde:	bd38      	pop	{r3, r4, r5, pc}
 8020be0:	200171a8 	.word	0x200171a8

08020be4 <_read_r>:
 8020be4:	b538      	push	{r3, r4, r5, lr}
 8020be6:	4d07      	ldr	r5, [pc, #28]	; (8020c04 <_read_r+0x20>)
 8020be8:	4604      	mov	r4, r0
 8020bea:	4608      	mov	r0, r1
 8020bec:	4611      	mov	r1, r2
 8020bee:	2200      	movs	r2, #0
 8020bf0:	602a      	str	r2, [r5, #0]
 8020bf2:	461a      	mov	r2, r3
 8020bf4:	f7e2 fe72 	bl	80038dc <_read>
 8020bf8:	1c43      	adds	r3, r0, #1
 8020bfa:	d102      	bne.n	8020c02 <_read_r+0x1e>
 8020bfc:	682b      	ldr	r3, [r5, #0]
 8020bfe:	b103      	cbz	r3, 8020c02 <_read_r+0x1e>
 8020c00:	6023      	str	r3, [r4, #0]
 8020c02:	bd38      	pop	{r3, r4, r5, pc}
 8020c04:	200171a8 	.word	0x200171a8

08020c08 <_sbrk_r>:
 8020c08:	b538      	push	{r3, r4, r5, lr}
 8020c0a:	4d06      	ldr	r5, [pc, #24]	; (8020c24 <_sbrk_r+0x1c>)
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	4604      	mov	r4, r0
 8020c10:	4608      	mov	r0, r1
 8020c12:	602b      	str	r3, [r5, #0]
 8020c14:	f7e2 fed0 	bl	80039b8 <_sbrk>
 8020c18:	1c43      	adds	r3, r0, #1
 8020c1a:	d102      	bne.n	8020c22 <_sbrk_r+0x1a>
 8020c1c:	682b      	ldr	r3, [r5, #0]
 8020c1e:	b103      	cbz	r3, 8020c22 <_sbrk_r+0x1a>
 8020c20:	6023      	str	r3, [r4, #0]
 8020c22:	bd38      	pop	{r3, r4, r5, pc}
 8020c24:	200171a8 	.word	0x200171a8

08020c28 <_write_r>:
 8020c28:	b538      	push	{r3, r4, r5, lr}
 8020c2a:	4d07      	ldr	r5, [pc, #28]	; (8020c48 <_write_r+0x20>)
 8020c2c:	4604      	mov	r4, r0
 8020c2e:	4608      	mov	r0, r1
 8020c30:	4611      	mov	r1, r2
 8020c32:	2200      	movs	r2, #0
 8020c34:	602a      	str	r2, [r5, #0]
 8020c36:	461a      	mov	r2, r3
 8020c38:	f7e2 fe6d 	bl	8003916 <_write>
 8020c3c:	1c43      	adds	r3, r0, #1
 8020c3e:	d102      	bne.n	8020c46 <_write_r+0x1e>
 8020c40:	682b      	ldr	r3, [r5, #0]
 8020c42:	b103      	cbz	r3, 8020c46 <_write_r+0x1e>
 8020c44:	6023      	str	r3, [r4, #0]
 8020c46:	bd38      	pop	{r3, r4, r5, pc}
 8020c48:	200171a8 	.word	0x200171a8

08020c4c <__errno>:
 8020c4c:	4b01      	ldr	r3, [pc, #4]	; (8020c54 <__errno+0x8>)
 8020c4e:	6818      	ldr	r0, [r3, #0]
 8020c50:	4770      	bx	lr
 8020c52:	bf00      	nop
 8020c54:	200009d8 	.word	0x200009d8

08020c58 <__libc_init_array>:
 8020c58:	b570      	push	{r4, r5, r6, lr}
 8020c5a:	4d0d      	ldr	r5, [pc, #52]	; (8020c90 <__libc_init_array+0x38>)
 8020c5c:	4c0d      	ldr	r4, [pc, #52]	; (8020c94 <__libc_init_array+0x3c>)
 8020c5e:	1b64      	subs	r4, r4, r5
 8020c60:	10a4      	asrs	r4, r4, #2
 8020c62:	2600      	movs	r6, #0
 8020c64:	42a6      	cmp	r6, r4
 8020c66:	d109      	bne.n	8020c7c <__libc_init_array+0x24>
 8020c68:	4d0b      	ldr	r5, [pc, #44]	; (8020c98 <__libc_init_array+0x40>)
 8020c6a:	4c0c      	ldr	r4, [pc, #48]	; (8020c9c <__libc_init_array+0x44>)
 8020c6c:	f003 f954 	bl	8023f18 <_init>
 8020c70:	1b64      	subs	r4, r4, r5
 8020c72:	10a4      	asrs	r4, r4, #2
 8020c74:	2600      	movs	r6, #0
 8020c76:	42a6      	cmp	r6, r4
 8020c78:	d105      	bne.n	8020c86 <__libc_init_array+0x2e>
 8020c7a:	bd70      	pop	{r4, r5, r6, pc}
 8020c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c80:	4798      	blx	r3
 8020c82:	3601      	adds	r6, #1
 8020c84:	e7ee      	b.n	8020c64 <__libc_init_array+0xc>
 8020c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8020c8a:	4798      	blx	r3
 8020c8c:	3601      	adds	r6, #1
 8020c8e:	e7f2      	b.n	8020c76 <__libc_init_array+0x1e>
 8020c90:	08025ce4 	.word	0x08025ce4
 8020c94:	08025ce4 	.word	0x08025ce4
 8020c98:	08025ce4 	.word	0x08025ce4
 8020c9c:	08025cfc 	.word	0x08025cfc

08020ca0 <__retarget_lock_init_recursive>:
 8020ca0:	4770      	bx	lr

08020ca2 <__retarget_lock_acquire_recursive>:
 8020ca2:	4770      	bx	lr

08020ca4 <__retarget_lock_release_recursive>:
 8020ca4:	4770      	bx	lr

08020ca6 <strcpy>:
 8020ca6:	4603      	mov	r3, r0
 8020ca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020cac:	f803 2b01 	strb.w	r2, [r3], #1
 8020cb0:	2a00      	cmp	r2, #0
 8020cb2:	d1f9      	bne.n	8020ca8 <strcpy+0x2>
 8020cb4:	4770      	bx	lr

08020cb6 <memcpy>:
 8020cb6:	440a      	add	r2, r1
 8020cb8:	4291      	cmp	r1, r2
 8020cba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020cbe:	d100      	bne.n	8020cc2 <memcpy+0xc>
 8020cc0:	4770      	bx	lr
 8020cc2:	b510      	push	{r4, lr}
 8020cc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020ccc:	4291      	cmp	r1, r2
 8020cce:	d1f9      	bne.n	8020cc4 <memcpy+0xe>
 8020cd0:	bd10      	pop	{r4, pc}
	...

08020cd4 <nanf>:
 8020cd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020cdc <nanf+0x8>
 8020cd8:	4770      	bx	lr
 8020cda:	bf00      	nop
 8020cdc:	7fc00000 	.word	0x7fc00000

08020ce0 <__assert_func>:
 8020ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020ce2:	4614      	mov	r4, r2
 8020ce4:	461a      	mov	r2, r3
 8020ce6:	4b09      	ldr	r3, [pc, #36]	; (8020d0c <__assert_func+0x2c>)
 8020ce8:	681b      	ldr	r3, [r3, #0]
 8020cea:	4605      	mov	r5, r0
 8020cec:	68d8      	ldr	r0, [r3, #12]
 8020cee:	b14c      	cbz	r4, 8020d04 <__assert_func+0x24>
 8020cf0:	4b07      	ldr	r3, [pc, #28]	; (8020d10 <__assert_func+0x30>)
 8020cf2:	9100      	str	r1, [sp, #0]
 8020cf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020cf8:	4906      	ldr	r1, [pc, #24]	; (8020d14 <__assert_func+0x34>)
 8020cfa:	462b      	mov	r3, r5
 8020cfc:	f002 fcae 	bl	802365c <fiprintf>
 8020d00:	f002 fd4a 	bl	8023798 <abort>
 8020d04:	4b04      	ldr	r3, [pc, #16]	; (8020d18 <__assert_func+0x38>)
 8020d06:	461c      	mov	r4, r3
 8020d08:	e7f3      	b.n	8020cf2 <__assert_func+0x12>
 8020d0a:	bf00      	nop
 8020d0c:	200009d8 	.word	0x200009d8
 8020d10:	08025a05 	.word	0x08025a05
 8020d14:	08025a12 	.word	0x08025a12
 8020d18:	08025a40 	.word	0x08025a40

08020d1c <quorem>:
 8020d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d20:	6903      	ldr	r3, [r0, #16]
 8020d22:	690c      	ldr	r4, [r1, #16]
 8020d24:	42a3      	cmp	r3, r4
 8020d26:	4607      	mov	r7, r0
 8020d28:	db7e      	blt.n	8020e28 <quorem+0x10c>
 8020d2a:	3c01      	subs	r4, #1
 8020d2c:	f101 0814 	add.w	r8, r1, #20
 8020d30:	f100 0514 	add.w	r5, r0, #20
 8020d34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020d38:	9301      	str	r3, [sp, #4]
 8020d3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020d3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020d42:	3301      	adds	r3, #1
 8020d44:	429a      	cmp	r2, r3
 8020d46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020d4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020d4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8020d52:	d331      	bcc.n	8020db8 <quorem+0x9c>
 8020d54:	f04f 0e00 	mov.w	lr, #0
 8020d58:	4640      	mov	r0, r8
 8020d5a:	46ac      	mov	ip, r5
 8020d5c:	46f2      	mov	sl, lr
 8020d5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8020d62:	b293      	uxth	r3, r2
 8020d64:	fb06 e303 	mla	r3, r6, r3, lr
 8020d68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020d6c:	0c1a      	lsrs	r2, r3, #16
 8020d6e:	b29b      	uxth	r3, r3
 8020d70:	ebaa 0303 	sub.w	r3, sl, r3
 8020d74:	f8dc a000 	ldr.w	sl, [ip]
 8020d78:	fa13 f38a 	uxtah	r3, r3, sl
 8020d7c:	fb06 220e 	mla	r2, r6, lr, r2
 8020d80:	9300      	str	r3, [sp, #0]
 8020d82:	9b00      	ldr	r3, [sp, #0]
 8020d84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020d88:	b292      	uxth	r2, r2
 8020d8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020d8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020d92:	f8bd 3000 	ldrh.w	r3, [sp]
 8020d96:	4581      	cmp	r9, r0
 8020d98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020d9c:	f84c 3b04 	str.w	r3, [ip], #4
 8020da0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020da4:	d2db      	bcs.n	8020d5e <quorem+0x42>
 8020da6:	f855 300b 	ldr.w	r3, [r5, fp]
 8020daa:	b92b      	cbnz	r3, 8020db8 <quorem+0x9c>
 8020dac:	9b01      	ldr	r3, [sp, #4]
 8020dae:	3b04      	subs	r3, #4
 8020db0:	429d      	cmp	r5, r3
 8020db2:	461a      	mov	r2, r3
 8020db4:	d32c      	bcc.n	8020e10 <quorem+0xf4>
 8020db6:	613c      	str	r4, [r7, #16]
 8020db8:	4638      	mov	r0, r7
 8020dba:	f001 f8c3 	bl	8021f44 <__mcmp>
 8020dbe:	2800      	cmp	r0, #0
 8020dc0:	db22      	blt.n	8020e08 <quorem+0xec>
 8020dc2:	3601      	adds	r6, #1
 8020dc4:	4629      	mov	r1, r5
 8020dc6:	2000      	movs	r0, #0
 8020dc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8020dcc:	f8d1 c000 	ldr.w	ip, [r1]
 8020dd0:	b293      	uxth	r3, r2
 8020dd2:	1ac3      	subs	r3, r0, r3
 8020dd4:	0c12      	lsrs	r2, r2, #16
 8020dd6:	fa13 f38c 	uxtah	r3, r3, ip
 8020dda:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8020dde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020de2:	b29b      	uxth	r3, r3
 8020de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020de8:	45c1      	cmp	r9, r8
 8020dea:	f841 3b04 	str.w	r3, [r1], #4
 8020dee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8020df2:	d2e9      	bcs.n	8020dc8 <quorem+0xac>
 8020df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020df8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020dfc:	b922      	cbnz	r2, 8020e08 <quorem+0xec>
 8020dfe:	3b04      	subs	r3, #4
 8020e00:	429d      	cmp	r5, r3
 8020e02:	461a      	mov	r2, r3
 8020e04:	d30a      	bcc.n	8020e1c <quorem+0x100>
 8020e06:	613c      	str	r4, [r7, #16]
 8020e08:	4630      	mov	r0, r6
 8020e0a:	b003      	add	sp, #12
 8020e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e10:	6812      	ldr	r2, [r2, #0]
 8020e12:	3b04      	subs	r3, #4
 8020e14:	2a00      	cmp	r2, #0
 8020e16:	d1ce      	bne.n	8020db6 <quorem+0x9a>
 8020e18:	3c01      	subs	r4, #1
 8020e1a:	e7c9      	b.n	8020db0 <quorem+0x94>
 8020e1c:	6812      	ldr	r2, [r2, #0]
 8020e1e:	3b04      	subs	r3, #4
 8020e20:	2a00      	cmp	r2, #0
 8020e22:	d1f0      	bne.n	8020e06 <quorem+0xea>
 8020e24:	3c01      	subs	r4, #1
 8020e26:	e7eb      	b.n	8020e00 <quorem+0xe4>
 8020e28:	2000      	movs	r0, #0
 8020e2a:	e7ee      	b.n	8020e0a <quorem+0xee>
 8020e2c:	0000      	movs	r0, r0
	...

08020e30 <_dtoa_r>:
 8020e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e34:	ed2d 8b02 	vpush	{d8}
 8020e38:	69c5      	ldr	r5, [r0, #28]
 8020e3a:	b091      	sub	sp, #68	; 0x44
 8020e3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8020e40:	ec59 8b10 	vmov	r8, r9, d0
 8020e44:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020e46:	9106      	str	r1, [sp, #24]
 8020e48:	4606      	mov	r6, r0
 8020e4a:	9208      	str	r2, [sp, #32]
 8020e4c:	930c      	str	r3, [sp, #48]	; 0x30
 8020e4e:	b975      	cbnz	r5, 8020e6e <_dtoa_r+0x3e>
 8020e50:	2010      	movs	r0, #16
 8020e52:	f7fe fa7f 	bl	801f354 <malloc>
 8020e56:	4602      	mov	r2, r0
 8020e58:	61f0      	str	r0, [r6, #28]
 8020e5a:	b920      	cbnz	r0, 8020e66 <_dtoa_r+0x36>
 8020e5c:	4ba6      	ldr	r3, [pc, #664]	; (80210f8 <_dtoa_r+0x2c8>)
 8020e5e:	21ef      	movs	r1, #239	; 0xef
 8020e60:	48a6      	ldr	r0, [pc, #664]	; (80210fc <_dtoa_r+0x2cc>)
 8020e62:	f7ff ff3d 	bl	8020ce0 <__assert_func>
 8020e66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020e6a:	6005      	str	r5, [r0, #0]
 8020e6c:	60c5      	str	r5, [r0, #12]
 8020e6e:	69f3      	ldr	r3, [r6, #28]
 8020e70:	6819      	ldr	r1, [r3, #0]
 8020e72:	b151      	cbz	r1, 8020e8a <_dtoa_r+0x5a>
 8020e74:	685a      	ldr	r2, [r3, #4]
 8020e76:	604a      	str	r2, [r1, #4]
 8020e78:	2301      	movs	r3, #1
 8020e7a:	4093      	lsls	r3, r2
 8020e7c:	608b      	str	r3, [r1, #8]
 8020e7e:	4630      	mov	r0, r6
 8020e80:	f000 fdda 	bl	8021a38 <_Bfree>
 8020e84:	69f3      	ldr	r3, [r6, #28]
 8020e86:	2200      	movs	r2, #0
 8020e88:	601a      	str	r2, [r3, #0]
 8020e8a:	f1b9 0300 	subs.w	r3, r9, #0
 8020e8e:	bfbb      	ittet	lt
 8020e90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020e94:	9303      	strlt	r3, [sp, #12]
 8020e96:	2300      	movge	r3, #0
 8020e98:	2201      	movlt	r2, #1
 8020e9a:	bfac      	ite	ge
 8020e9c:	6023      	strge	r3, [r4, #0]
 8020e9e:	6022      	strlt	r2, [r4, #0]
 8020ea0:	4b97      	ldr	r3, [pc, #604]	; (8021100 <_dtoa_r+0x2d0>)
 8020ea2:	9c03      	ldr	r4, [sp, #12]
 8020ea4:	43a3      	bics	r3, r4
 8020ea6:	d11c      	bne.n	8020ee2 <_dtoa_r+0xb2>
 8020ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020eaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8020eae:	6013      	str	r3, [r2, #0]
 8020eb0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8020eb4:	ea53 0308 	orrs.w	r3, r3, r8
 8020eb8:	f000 84fb 	beq.w	80218b2 <_dtoa_r+0xa82>
 8020ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020ebe:	b963      	cbnz	r3, 8020eda <_dtoa_r+0xaa>
 8020ec0:	4b90      	ldr	r3, [pc, #576]	; (8021104 <_dtoa_r+0x2d4>)
 8020ec2:	e020      	b.n	8020f06 <_dtoa_r+0xd6>
 8020ec4:	4b90      	ldr	r3, [pc, #576]	; (8021108 <_dtoa_r+0x2d8>)
 8020ec6:	9301      	str	r3, [sp, #4]
 8020ec8:	3308      	adds	r3, #8
 8020eca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020ecc:	6013      	str	r3, [r2, #0]
 8020ece:	9801      	ldr	r0, [sp, #4]
 8020ed0:	b011      	add	sp, #68	; 0x44
 8020ed2:	ecbd 8b02 	vpop	{d8}
 8020ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020eda:	4b8a      	ldr	r3, [pc, #552]	; (8021104 <_dtoa_r+0x2d4>)
 8020edc:	9301      	str	r3, [sp, #4]
 8020ede:	3303      	adds	r3, #3
 8020ee0:	e7f3      	b.n	8020eca <_dtoa_r+0x9a>
 8020ee2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8020ee6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020eee:	d10c      	bne.n	8020f0a <_dtoa_r+0xda>
 8020ef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ef2:	2301      	movs	r3, #1
 8020ef4:	6013      	str	r3, [r2, #0]
 8020ef6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	f000 84d7 	beq.w	80218ac <_dtoa_r+0xa7c>
 8020efe:	4b83      	ldr	r3, [pc, #524]	; (802110c <_dtoa_r+0x2dc>)
 8020f00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8020f02:	6013      	str	r3, [r2, #0]
 8020f04:	3b01      	subs	r3, #1
 8020f06:	9301      	str	r3, [sp, #4]
 8020f08:	e7e1      	b.n	8020ece <_dtoa_r+0x9e>
 8020f0a:	aa0e      	add	r2, sp, #56	; 0x38
 8020f0c:	a90f      	add	r1, sp, #60	; 0x3c
 8020f0e:	4630      	mov	r0, r6
 8020f10:	eeb0 0b48 	vmov.f64	d0, d8
 8020f14:	f001 f92c 	bl	8022170 <__d2b>
 8020f18:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8020f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f1e:	4605      	mov	r5, r0
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d046      	beq.n	8020fb2 <_dtoa_r+0x182>
 8020f24:	eeb0 7b48 	vmov.f64	d7, d8
 8020f28:	ee18 1a90 	vmov	r1, s17
 8020f2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8020f30:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8020f34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8020f38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020f3c:	2000      	movs	r0, #0
 8020f3e:	ee07 1a90 	vmov	s15, r1
 8020f42:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8020f46:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80210e0 <_dtoa_r+0x2b0>
 8020f4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8020f4e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80210e8 <_dtoa_r+0x2b8>
 8020f52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8020f56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80210f0 <_dtoa_r+0x2c0>
 8020f5a:	ee07 3a90 	vmov	s15, r3
 8020f5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8020f62:	eeb0 7b46 	vmov.f64	d7, d6
 8020f66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8020f6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8020f6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8020f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f76:	ee16 ba90 	vmov	fp, s13
 8020f7a:	9009      	str	r0, [sp, #36]	; 0x24
 8020f7c:	d508      	bpl.n	8020f90 <_dtoa_r+0x160>
 8020f7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8020f82:	eeb4 6b47 	vcmp.f64	d6, d7
 8020f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f8a:	bf18      	it	ne
 8020f8c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8020f90:	f1bb 0f16 	cmp.w	fp, #22
 8020f94:	d82b      	bhi.n	8020fee <_dtoa_r+0x1be>
 8020f96:	495e      	ldr	r1, [pc, #376]	; (8021110 <_dtoa_r+0x2e0>)
 8020f98:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8020f9c:	ed91 7b00 	vldr	d7, [r1]
 8020fa0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8020fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fa8:	d501      	bpl.n	8020fae <_dtoa_r+0x17e>
 8020faa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8020fae:	2100      	movs	r1, #0
 8020fb0:	e01e      	b.n	8020ff0 <_dtoa_r+0x1c0>
 8020fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020fb4:	4413      	add	r3, r2
 8020fb6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8020fba:	2920      	cmp	r1, #32
 8020fbc:	bfc1      	itttt	gt
 8020fbe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8020fc2:	408c      	lslgt	r4, r1
 8020fc4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8020fc8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8020fcc:	bfd6      	itet	le
 8020fce:	f1c1 0120 	rsble	r1, r1, #32
 8020fd2:	4321      	orrgt	r1, r4
 8020fd4:	fa08 f101 	lslle.w	r1, r8, r1
 8020fd8:	ee07 1a90 	vmov	s15, r1
 8020fdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8020fe0:	3b01      	subs	r3, #1
 8020fe2:	ee17 1a90 	vmov	r1, s15
 8020fe6:	2001      	movs	r0, #1
 8020fe8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8020fec:	e7a7      	b.n	8020f3e <_dtoa_r+0x10e>
 8020fee:	2101      	movs	r1, #1
 8020ff0:	1ad2      	subs	r2, r2, r3
 8020ff2:	1e53      	subs	r3, r2, #1
 8020ff4:	9305      	str	r3, [sp, #20]
 8020ff6:	bf45      	ittet	mi
 8020ff8:	f1c2 0301 	rsbmi	r3, r2, #1
 8020ffc:	9304      	strmi	r3, [sp, #16]
 8020ffe:	2300      	movpl	r3, #0
 8021000:	2300      	movmi	r3, #0
 8021002:	bf4c      	ite	mi
 8021004:	9305      	strmi	r3, [sp, #20]
 8021006:	9304      	strpl	r3, [sp, #16]
 8021008:	f1bb 0f00 	cmp.w	fp, #0
 802100c:	910b      	str	r1, [sp, #44]	; 0x2c
 802100e:	db18      	blt.n	8021042 <_dtoa_r+0x212>
 8021010:	9b05      	ldr	r3, [sp, #20]
 8021012:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8021016:	445b      	add	r3, fp
 8021018:	9305      	str	r3, [sp, #20]
 802101a:	2300      	movs	r3, #0
 802101c:	9a06      	ldr	r2, [sp, #24]
 802101e:	2a09      	cmp	r2, #9
 8021020:	d848      	bhi.n	80210b4 <_dtoa_r+0x284>
 8021022:	2a05      	cmp	r2, #5
 8021024:	bfc4      	itt	gt
 8021026:	3a04      	subgt	r2, #4
 8021028:	9206      	strgt	r2, [sp, #24]
 802102a:	9a06      	ldr	r2, [sp, #24]
 802102c:	f1a2 0202 	sub.w	r2, r2, #2
 8021030:	bfcc      	ite	gt
 8021032:	2400      	movgt	r4, #0
 8021034:	2401      	movle	r4, #1
 8021036:	2a03      	cmp	r2, #3
 8021038:	d847      	bhi.n	80210ca <_dtoa_r+0x29a>
 802103a:	e8df f002 	tbb	[pc, r2]
 802103e:	2d0b      	.short	0x2d0b
 8021040:	392b      	.short	0x392b
 8021042:	9b04      	ldr	r3, [sp, #16]
 8021044:	2200      	movs	r2, #0
 8021046:	eba3 030b 	sub.w	r3, r3, fp
 802104a:	9304      	str	r3, [sp, #16]
 802104c:	920a      	str	r2, [sp, #40]	; 0x28
 802104e:	f1cb 0300 	rsb	r3, fp, #0
 8021052:	e7e3      	b.n	802101c <_dtoa_r+0x1ec>
 8021054:	2200      	movs	r2, #0
 8021056:	9207      	str	r2, [sp, #28]
 8021058:	9a08      	ldr	r2, [sp, #32]
 802105a:	2a00      	cmp	r2, #0
 802105c:	dc38      	bgt.n	80210d0 <_dtoa_r+0x2a0>
 802105e:	f04f 0a01 	mov.w	sl, #1
 8021062:	46d1      	mov	r9, sl
 8021064:	4652      	mov	r2, sl
 8021066:	f8cd a020 	str.w	sl, [sp, #32]
 802106a:	69f7      	ldr	r7, [r6, #28]
 802106c:	2100      	movs	r1, #0
 802106e:	2004      	movs	r0, #4
 8021070:	f100 0c14 	add.w	ip, r0, #20
 8021074:	4594      	cmp	ip, r2
 8021076:	d930      	bls.n	80210da <_dtoa_r+0x2aa>
 8021078:	6079      	str	r1, [r7, #4]
 802107a:	4630      	mov	r0, r6
 802107c:	930d      	str	r3, [sp, #52]	; 0x34
 802107e:	f000 fc9b 	bl	80219b8 <_Balloc>
 8021082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021084:	9001      	str	r0, [sp, #4]
 8021086:	4602      	mov	r2, r0
 8021088:	2800      	cmp	r0, #0
 802108a:	d145      	bne.n	8021118 <_dtoa_r+0x2e8>
 802108c:	4b21      	ldr	r3, [pc, #132]	; (8021114 <_dtoa_r+0x2e4>)
 802108e:	f240 11af 	movw	r1, #431	; 0x1af
 8021092:	e6e5      	b.n	8020e60 <_dtoa_r+0x30>
 8021094:	2201      	movs	r2, #1
 8021096:	e7de      	b.n	8021056 <_dtoa_r+0x226>
 8021098:	2200      	movs	r2, #0
 802109a:	9207      	str	r2, [sp, #28]
 802109c:	9a08      	ldr	r2, [sp, #32]
 802109e:	eb0b 0a02 	add.w	sl, fp, r2
 80210a2:	f10a 0901 	add.w	r9, sl, #1
 80210a6:	464a      	mov	r2, r9
 80210a8:	2a01      	cmp	r2, #1
 80210aa:	bfb8      	it	lt
 80210ac:	2201      	movlt	r2, #1
 80210ae:	e7dc      	b.n	802106a <_dtoa_r+0x23a>
 80210b0:	2201      	movs	r2, #1
 80210b2:	e7f2      	b.n	802109a <_dtoa_r+0x26a>
 80210b4:	2401      	movs	r4, #1
 80210b6:	2200      	movs	r2, #0
 80210b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80210bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80210c0:	2100      	movs	r1, #0
 80210c2:	46d1      	mov	r9, sl
 80210c4:	2212      	movs	r2, #18
 80210c6:	9108      	str	r1, [sp, #32]
 80210c8:	e7cf      	b.n	802106a <_dtoa_r+0x23a>
 80210ca:	2201      	movs	r2, #1
 80210cc:	9207      	str	r2, [sp, #28]
 80210ce:	e7f5      	b.n	80210bc <_dtoa_r+0x28c>
 80210d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80210d4:	46d1      	mov	r9, sl
 80210d6:	4652      	mov	r2, sl
 80210d8:	e7c7      	b.n	802106a <_dtoa_r+0x23a>
 80210da:	3101      	adds	r1, #1
 80210dc:	0040      	lsls	r0, r0, #1
 80210de:	e7c7      	b.n	8021070 <_dtoa_r+0x240>
 80210e0:	636f4361 	.word	0x636f4361
 80210e4:	3fd287a7 	.word	0x3fd287a7
 80210e8:	8b60c8b3 	.word	0x8b60c8b3
 80210ec:	3fc68a28 	.word	0x3fc68a28
 80210f0:	509f79fb 	.word	0x509f79fb
 80210f4:	3fd34413 	.word	0x3fd34413
 80210f8:	0802585c 	.word	0x0802585c
 80210fc:	08025a4e 	.word	0x08025a4e
 8021100:	7ff00000 	.word	0x7ff00000
 8021104:	08025a4a 	.word	0x08025a4a
 8021108:	08025a41 	.word	0x08025a41
 802110c:	080259dd 	.word	0x080259dd
 8021110:	08025b38 	.word	0x08025b38
 8021114:	08025aa6 	.word	0x08025aa6
 8021118:	69f2      	ldr	r2, [r6, #28]
 802111a:	9901      	ldr	r1, [sp, #4]
 802111c:	6011      	str	r1, [r2, #0]
 802111e:	f1b9 0f0e 	cmp.w	r9, #14
 8021122:	d86c      	bhi.n	80211fe <_dtoa_r+0x3ce>
 8021124:	2c00      	cmp	r4, #0
 8021126:	d06a      	beq.n	80211fe <_dtoa_r+0x3ce>
 8021128:	f1bb 0f00 	cmp.w	fp, #0
 802112c:	f340 80a0 	ble.w	8021270 <_dtoa_r+0x440>
 8021130:	4ac1      	ldr	r2, [pc, #772]	; (8021438 <_dtoa_r+0x608>)
 8021132:	f00b 010f 	and.w	r1, fp, #15
 8021136:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802113a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802113e:	ed92 7b00 	vldr	d7, [r2]
 8021142:	ea4f 122b 	mov.w	r2, fp, asr #4
 8021146:	f000 8087 	beq.w	8021258 <_dtoa_r+0x428>
 802114a:	49bc      	ldr	r1, [pc, #752]	; (802143c <_dtoa_r+0x60c>)
 802114c:	ed91 6b08 	vldr	d6, [r1, #32]
 8021150:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8021154:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021158:	f002 020f 	and.w	r2, r2, #15
 802115c:	2103      	movs	r1, #3
 802115e:	48b7      	ldr	r0, [pc, #732]	; (802143c <_dtoa_r+0x60c>)
 8021160:	2a00      	cmp	r2, #0
 8021162:	d17b      	bne.n	802125c <_dtoa_r+0x42c>
 8021164:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021168:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802116c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021172:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021176:	2a00      	cmp	r2, #0
 8021178:	f000 80a0 	beq.w	80212bc <_dtoa_r+0x48c>
 802117c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021180:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021188:	f140 8098 	bpl.w	80212bc <_dtoa_r+0x48c>
 802118c:	f1b9 0f00 	cmp.w	r9, #0
 8021190:	f000 8094 	beq.w	80212bc <_dtoa_r+0x48c>
 8021194:	f1ba 0f00 	cmp.w	sl, #0
 8021198:	dd2f      	ble.n	80211fa <_dtoa_r+0x3ca>
 802119a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802119e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80211a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80211a6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80211aa:	3101      	adds	r1, #1
 80211ac:	4654      	mov	r4, sl
 80211ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80211b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80211b6:	ee07 1a90 	vmov	s15, r1
 80211ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80211be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80211c2:	ee15 7a90 	vmov	r7, s11
 80211c6:	ec51 0b15 	vmov	r0, r1, d5
 80211ca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80211ce:	2c00      	cmp	r4, #0
 80211d0:	d177      	bne.n	80212c2 <_dtoa_r+0x492>
 80211d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80211d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80211da:	ec41 0b17 	vmov	d7, r0, r1
 80211de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80211e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211e6:	f300 826a 	bgt.w	80216be <_dtoa_r+0x88e>
 80211ea:	eeb1 7b47 	vneg.f64	d7, d7
 80211ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80211f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211f6:	f100 8260 	bmi.w	80216ba <_dtoa_r+0x88a>
 80211fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80211fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021200:	2a00      	cmp	r2, #0
 8021202:	f2c0 811d 	blt.w	8021440 <_dtoa_r+0x610>
 8021206:	f1bb 0f0e 	cmp.w	fp, #14
 802120a:	f300 8119 	bgt.w	8021440 <_dtoa_r+0x610>
 802120e:	4b8a      	ldr	r3, [pc, #552]	; (8021438 <_dtoa_r+0x608>)
 8021210:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021214:	ed93 6b00 	vldr	d6, [r3]
 8021218:	9b08      	ldr	r3, [sp, #32]
 802121a:	2b00      	cmp	r3, #0
 802121c:	f280 80b7 	bge.w	802138e <_dtoa_r+0x55e>
 8021220:	f1b9 0f00 	cmp.w	r9, #0
 8021224:	f300 80b3 	bgt.w	802138e <_dtoa_r+0x55e>
 8021228:	f040 8246 	bne.w	80216b8 <_dtoa_r+0x888>
 802122c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021230:	ee26 6b07 	vmul.f64	d6, d6, d7
 8021234:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021238:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021240:	464c      	mov	r4, r9
 8021242:	464f      	mov	r7, r9
 8021244:	f280 821c 	bge.w	8021680 <_dtoa_r+0x850>
 8021248:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802124c:	2331      	movs	r3, #49	; 0x31
 802124e:	f808 3b01 	strb.w	r3, [r8], #1
 8021252:	f10b 0b01 	add.w	fp, fp, #1
 8021256:	e218      	b.n	802168a <_dtoa_r+0x85a>
 8021258:	2102      	movs	r1, #2
 802125a:	e780      	b.n	802115e <_dtoa_r+0x32e>
 802125c:	07d4      	lsls	r4, r2, #31
 802125e:	d504      	bpl.n	802126a <_dtoa_r+0x43a>
 8021260:	ed90 6b00 	vldr	d6, [r0]
 8021264:	3101      	adds	r1, #1
 8021266:	ee27 7b06 	vmul.f64	d7, d7, d6
 802126a:	1052      	asrs	r2, r2, #1
 802126c:	3008      	adds	r0, #8
 802126e:	e777      	b.n	8021160 <_dtoa_r+0x330>
 8021270:	d022      	beq.n	80212b8 <_dtoa_r+0x488>
 8021272:	f1cb 0200 	rsb	r2, fp, #0
 8021276:	4970      	ldr	r1, [pc, #448]	; (8021438 <_dtoa_r+0x608>)
 8021278:	f002 000f 	and.w	r0, r2, #15
 802127c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021280:	ed91 7b00 	vldr	d7, [r1]
 8021284:	ee28 7b07 	vmul.f64	d7, d8, d7
 8021288:	ed8d 7b02 	vstr	d7, [sp, #8]
 802128c:	486b      	ldr	r0, [pc, #428]	; (802143c <_dtoa_r+0x60c>)
 802128e:	1112      	asrs	r2, r2, #4
 8021290:	2400      	movs	r4, #0
 8021292:	2102      	movs	r1, #2
 8021294:	b92a      	cbnz	r2, 80212a2 <_dtoa_r+0x472>
 8021296:	2c00      	cmp	r4, #0
 8021298:	f43f af6a 	beq.w	8021170 <_dtoa_r+0x340>
 802129c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80212a0:	e766      	b.n	8021170 <_dtoa_r+0x340>
 80212a2:	07d7      	lsls	r7, r2, #31
 80212a4:	d505      	bpl.n	80212b2 <_dtoa_r+0x482>
 80212a6:	ed90 6b00 	vldr	d6, [r0]
 80212aa:	3101      	adds	r1, #1
 80212ac:	2401      	movs	r4, #1
 80212ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80212b2:	1052      	asrs	r2, r2, #1
 80212b4:	3008      	adds	r0, #8
 80212b6:	e7ed      	b.n	8021294 <_dtoa_r+0x464>
 80212b8:	2102      	movs	r1, #2
 80212ba:	e759      	b.n	8021170 <_dtoa_r+0x340>
 80212bc:	465a      	mov	r2, fp
 80212be:	464c      	mov	r4, r9
 80212c0:	e775      	b.n	80211ae <_dtoa_r+0x37e>
 80212c2:	ec41 0b17 	vmov	d7, r0, r1
 80212c6:	495c      	ldr	r1, [pc, #368]	; (8021438 <_dtoa_r+0x608>)
 80212c8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80212cc:	ed11 4b02 	vldr	d4, [r1, #-8]
 80212d0:	9901      	ldr	r1, [sp, #4]
 80212d2:	440c      	add	r4, r1
 80212d4:	9907      	ldr	r1, [sp, #28]
 80212d6:	b351      	cbz	r1, 802132e <_dtoa_r+0x4fe>
 80212d8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80212dc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80212e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80212e4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80212e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80212ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80212f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80212f4:	ee14 1a90 	vmov	r1, s9
 80212f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80212fc:	3130      	adds	r1, #48	; 0x30
 80212fe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021302:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802130a:	f808 1b01 	strb.w	r1, [r8], #1
 802130e:	d439      	bmi.n	8021384 <_dtoa_r+0x554>
 8021310:	ee32 5b46 	vsub.f64	d5, d2, d6
 8021314:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802131c:	d472      	bmi.n	8021404 <_dtoa_r+0x5d4>
 802131e:	45a0      	cmp	r8, r4
 8021320:	f43f af6b 	beq.w	80211fa <_dtoa_r+0x3ca>
 8021324:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021328:	ee26 6b03 	vmul.f64	d6, d6, d3
 802132c:	e7e0      	b.n	80212f0 <_dtoa_r+0x4c0>
 802132e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021332:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021336:	4620      	mov	r0, r4
 8021338:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802133c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021340:	ee14 1a90 	vmov	r1, s9
 8021344:	3130      	adds	r1, #48	; 0x30
 8021346:	f808 1b01 	strb.w	r1, [r8], #1
 802134a:	45a0      	cmp	r8, r4
 802134c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021350:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021354:	d118      	bne.n	8021388 <_dtoa_r+0x558>
 8021356:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802135a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802135e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021366:	dc4d      	bgt.n	8021404 <_dtoa_r+0x5d4>
 8021368:	ee35 5b47 	vsub.f64	d5, d5, d7
 802136c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021374:	f57f af41 	bpl.w	80211fa <_dtoa_r+0x3ca>
 8021378:	4680      	mov	r8, r0
 802137a:	3801      	subs	r0, #1
 802137c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021380:	2b30      	cmp	r3, #48	; 0x30
 8021382:	d0f9      	beq.n	8021378 <_dtoa_r+0x548>
 8021384:	4693      	mov	fp, r2
 8021386:	e02a      	b.n	80213de <_dtoa_r+0x5ae>
 8021388:	ee26 6b03 	vmul.f64	d6, d6, d3
 802138c:	e7d6      	b.n	802133c <_dtoa_r+0x50c>
 802138e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021392:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8021396:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802139a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802139e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80213a2:	ee15 3a10 	vmov	r3, s10
 80213a6:	3330      	adds	r3, #48	; 0x30
 80213a8:	f808 3b01 	strb.w	r3, [r8], #1
 80213ac:	9b01      	ldr	r3, [sp, #4]
 80213ae:	eba8 0303 	sub.w	r3, r8, r3
 80213b2:	4599      	cmp	r9, r3
 80213b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80213b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80213bc:	d133      	bne.n	8021426 <_dtoa_r+0x5f6>
 80213be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80213c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80213c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213ca:	dc1a      	bgt.n	8021402 <_dtoa_r+0x5d2>
 80213cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80213d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213d4:	d103      	bne.n	80213de <_dtoa_r+0x5ae>
 80213d6:	ee15 3a10 	vmov	r3, s10
 80213da:	07d9      	lsls	r1, r3, #31
 80213dc:	d411      	bmi.n	8021402 <_dtoa_r+0x5d2>
 80213de:	4629      	mov	r1, r5
 80213e0:	4630      	mov	r0, r6
 80213e2:	f000 fb29 	bl	8021a38 <_Bfree>
 80213e6:	2300      	movs	r3, #0
 80213e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80213ea:	f888 3000 	strb.w	r3, [r8]
 80213ee:	f10b 0301 	add.w	r3, fp, #1
 80213f2:	6013      	str	r3, [r2, #0]
 80213f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	f43f ad69 	beq.w	8020ece <_dtoa_r+0x9e>
 80213fc:	f8c3 8000 	str.w	r8, [r3]
 8021400:	e565      	b.n	8020ece <_dtoa_r+0x9e>
 8021402:	465a      	mov	r2, fp
 8021404:	4643      	mov	r3, r8
 8021406:	4698      	mov	r8, r3
 8021408:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 802140c:	2939      	cmp	r1, #57	; 0x39
 802140e:	d106      	bne.n	802141e <_dtoa_r+0x5ee>
 8021410:	9901      	ldr	r1, [sp, #4]
 8021412:	4299      	cmp	r1, r3
 8021414:	d1f7      	bne.n	8021406 <_dtoa_r+0x5d6>
 8021416:	9801      	ldr	r0, [sp, #4]
 8021418:	2130      	movs	r1, #48	; 0x30
 802141a:	3201      	adds	r2, #1
 802141c:	7001      	strb	r1, [r0, #0]
 802141e:	7819      	ldrb	r1, [r3, #0]
 8021420:	3101      	adds	r1, #1
 8021422:	7019      	strb	r1, [r3, #0]
 8021424:	e7ae      	b.n	8021384 <_dtoa_r+0x554>
 8021426:	ee27 7b04 	vmul.f64	d7, d7, d4
 802142a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021432:	d1b2      	bne.n	802139a <_dtoa_r+0x56a>
 8021434:	e7d3      	b.n	80213de <_dtoa_r+0x5ae>
 8021436:	bf00      	nop
 8021438:	08025b38 	.word	0x08025b38
 802143c:	08025b10 	.word	0x08025b10
 8021440:	9907      	ldr	r1, [sp, #28]
 8021442:	2900      	cmp	r1, #0
 8021444:	f000 80d0 	beq.w	80215e8 <_dtoa_r+0x7b8>
 8021448:	9906      	ldr	r1, [sp, #24]
 802144a:	2901      	cmp	r1, #1
 802144c:	f300 80b4 	bgt.w	80215b8 <_dtoa_r+0x788>
 8021450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021452:	2900      	cmp	r1, #0
 8021454:	f000 80ac 	beq.w	80215b0 <_dtoa_r+0x780>
 8021458:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802145c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021460:	461c      	mov	r4, r3
 8021462:	9309      	str	r3, [sp, #36]	; 0x24
 8021464:	9b04      	ldr	r3, [sp, #16]
 8021466:	4413      	add	r3, r2
 8021468:	9304      	str	r3, [sp, #16]
 802146a:	9b05      	ldr	r3, [sp, #20]
 802146c:	2101      	movs	r1, #1
 802146e:	4413      	add	r3, r2
 8021470:	4630      	mov	r0, r6
 8021472:	9305      	str	r3, [sp, #20]
 8021474:	f000 fbe0 	bl	8021c38 <__i2b>
 8021478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802147a:	4607      	mov	r7, r0
 802147c:	f1b8 0f00 	cmp.w	r8, #0
 8021480:	d00d      	beq.n	802149e <_dtoa_r+0x66e>
 8021482:	9a05      	ldr	r2, [sp, #20]
 8021484:	2a00      	cmp	r2, #0
 8021486:	dd0a      	ble.n	802149e <_dtoa_r+0x66e>
 8021488:	4542      	cmp	r2, r8
 802148a:	9904      	ldr	r1, [sp, #16]
 802148c:	bfa8      	it	ge
 802148e:	4642      	movge	r2, r8
 8021490:	1a89      	subs	r1, r1, r2
 8021492:	9104      	str	r1, [sp, #16]
 8021494:	9905      	ldr	r1, [sp, #20]
 8021496:	eba8 0802 	sub.w	r8, r8, r2
 802149a:	1a8a      	subs	r2, r1, r2
 802149c:	9205      	str	r2, [sp, #20]
 802149e:	b303      	cbz	r3, 80214e2 <_dtoa_r+0x6b2>
 80214a0:	9a07      	ldr	r2, [sp, #28]
 80214a2:	2a00      	cmp	r2, #0
 80214a4:	f000 80a5 	beq.w	80215f2 <_dtoa_r+0x7c2>
 80214a8:	2c00      	cmp	r4, #0
 80214aa:	dd13      	ble.n	80214d4 <_dtoa_r+0x6a4>
 80214ac:	4639      	mov	r1, r7
 80214ae:	4622      	mov	r2, r4
 80214b0:	4630      	mov	r0, r6
 80214b2:	930d      	str	r3, [sp, #52]	; 0x34
 80214b4:	f000 fc80 	bl	8021db8 <__pow5mult>
 80214b8:	462a      	mov	r2, r5
 80214ba:	4601      	mov	r1, r0
 80214bc:	4607      	mov	r7, r0
 80214be:	4630      	mov	r0, r6
 80214c0:	f000 fbd0 	bl	8021c64 <__multiply>
 80214c4:	4629      	mov	r1, r5
 80214c6:	9009      	str	r0, [sp, #36]	; 0x24
 80214c8:	4630      	mov	r0, r6
 80214ca:	f000 fab5 	bl	8021a38 <_Bfree>
 80214ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80214d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214d2:	4615      	mov	r5, r2
 80214d4:	1b1a      	subs	r2, r3, r4
 80214d6:	d004      	beq.n	80214e2 <_dtoa_r+0x6b2>
 80214d8:	4629      	mov	r1, r5
 80214da:	4630      	mov	r0, r6
 80214dc:	f000 fc6c 	bl	8021db8 <__pow5mult>
 80214e0:	4605      	mov	r5, r0
 80214e2:	2101      	movs	r1, #1
 80214e4:	4630      	mov	r0, r6
 80214e6:	f000 fba7 	bl	8021c38 <__i2b>
 80214ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	4604      	mov	r4, r0
 80214f0:	f340 8081 	ble.w	80215f6 <_dtoa_r+0x7c6>
 80214f4:	461a      	mov	r2, r3
 80214f6:	4601      	mov	r1, r0
 80214f8:	4630      	mov	r0, r6
 80214fa:	f000 fc5d 	bl	8021db8 <__pow5mult>
 80214fe:	9b06      	ldr	r3, [sp, #24]
 8021500:	2b01      	cmp	r3, #1
 8021502:	4604      	mov	r4, r0
 8021504:	dd7a      	ble.n	80215fc <_dtoa_r+0x7cc>
 8021506:	2300      	movs	r3, #0
 8021508:	9309      	str	r3, [sp, #36]	; 0x24
 802150a:	6922      	ldr	r2, [r4, #16]
 802150c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021510:	6910      	ldr	r0, [r2, #16]
 8021512:	f000 fb43 	bl	8021b9c <__hi0bits>
 8021516:	f1c0 0020 	rsb	r0, r0, #32
 802151a:	9b05      	ldr	r3, [sp, #20]
 802151c:	4418      	add	r0, r3
 802151e:	f010 001f 	ands.w	r0, r0, #31
 8021522:	f000 8093 	beq.w	802164c <_dtoa_r+0x81c>
 8021526:	f1c0 0220 	rsb	r2, r0, #32
 802152a:	2a04      	cmp	r2, #4
 802152c:	f340 8085 	ble.w	802163a <_dtoa_r+0x80a>
 8021530:	9b04      	ldr	r3, [sp, #16]
 8021532:	f1c0 001c 	rsb	r0, r0, #28
 8021536:	4403      	add	r3, r0
 8021538:	9304      	str	r3, [sp, #16]
 802153a:	9b05      	ldr	r3, [sp, #20]
 802153c:	4480      	add	r8, r0
 802153e:	4403      	add	r3, r0
 8021540:	9305      	str	r3, [sp, #20]
 8021542:	9b04      	ldr	r3, [sp, #16]
 8021544:	2b00      	cmp	r3, #0
 8021546:	dd05      	ble.n	8021554 <_dtoa_r+0x724>
 8021548:	4629      	mov	r1, r5
 802154a:	461a      	mov	r2, r3
 802154c:	4630      	mov	r0, r6
 802154e:	f000 fc8d 	bl	8021e6c <__lshift>
 8021552:	4605      	mov	r5, r0
 8021554:	9b05      	ldr	r3, [sp, #20]
 8021556:	2b00      	cmp	r3, #0
 8021558:	dd05      	ble.n	8021566 <_dtoa_r+0x736>
 802155a:	4621      	mov	r1, r4
 802155c:	461a      	mov	r2, r3
 802155e:	4630      	mov	r0, r6
 8021560:	f000 fc84 	bl	8021e6c <__lshift>
 8021564:	4604      	mov	r4, r0
 8021566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021568:	2b00      	cmp	r3, #0
 802156a:	d071      	beq.n	8021650 <_dtoa_r+0x820>
 802156c:	4621      	mov	r1, r4
 802156e:	4628      	mov	r0, r5
 8021570:	f000 fce8 	bl	8021f44 <__mcmp>
 8021574:	2800      	cmp	r0, #0
 8021576:	da6b      	bge.n	8021650 <_dtoa_r+0x820>
 8021578:	2300      	movs	r3, #0
 802157a:	4629      	mov	r1, r5
 802157c:	220a      	movs	r2, #10
 802157e:	4630      	mov	r0, r6
 8021580:	f000 fa7c 	bl	8021a7c <__multadd>
 8021584:	9b07      	ldr	r3, [sp, #28]
 8021586:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802158a:	4605      	mov	r5, r0
 802158c:	2b00      	cmp	r3, #0
 802158e:	f000 8197 	beq.w	80218c0 <_dtoa_r+0xa90>
 8021592:	4639      	mov	r1, r7
 8021594:	2300      	movs	r3, #0
 8021596:	220a      	movs	r2, #10
 8021598:	4630      	mov	r0, r6
 802159a:	f000 fa6f 	bl	8021a7c <__multadd>
 802159e:	f1ba 0f00 	cmp.w	sl, #0
 80215a2:	4607      	mov	r7, r0
 80215a4:	f300 8093 	bgt.w	80216ce <_dtoa_r+0x89e>
 80215a8:	9b06      	ldr	r3, [sp, #24]
 80215aa:	2b02      	cmp	r3, #2
 80215ac:	dc57      	bgt.n	802165e <_dtoa_r+0x82e>
 80215ae:	e08e      	b.n	80216ce <_dtoa_r+0x89e>
 80215b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80215b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80215b6:	e751      	b.n	802145c <_dtoa_r+0x62c>
 80215b8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80215bc:	42a3      	cmp	r3, r4
 80215be:	bfbf      	itttt	lt
 80215c0:	1ae2      	sublt	r2, r4, r3
 80215c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80215c4:	189b      	addlt	r3, r3, r2
 80215c6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80215c8:	bfae      	itee	ge
 80215ca:	1b1c      	subge	r4, r3, r4
 80215cc:	4623      	movlt	r3, r4
 80215ce:	2400      	movlt	r4, #0
 80215d0:	f1b9 0f00 	cmp.w	r9, #0
 80215d4:	bfb5      	itete	lt
 80215d6:	9a04      	ldrlt	r2, [sp, #16]
 80215d8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80215dc:	eba2 0809 	sublt.w	r8, r2, r9
 80215e0:	464a      	movge	r2, r9
 80215e2:	bfb8      	it	lt
 80215e4:	2200      	movlt	r2, #0
 80215e6:	e73c      	b.n	8021462 <_dtoa_r+0x632>
 80215e8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80215ec:	9f07      	ldr	r7, [sp, #28]
 80215ee:	461c      	mov	r4, r3
 80215f0:	e744      	b.n	802147c <_dtoa_r+0x64c>
 80215f2:	461a      	mov	r2, r3
 80215f4:	e770      	b.n	80214d8 <_dtoa_r+0x6a8>
 80215f6:	9b06      	ldr	r3, [sp, #24]
 80215f8:	2b01      	cmp	r3, #1
 80215fa:	dc18      	bgt.n	802162e <_dtoa_r+0x7fe>
 80215fc:	9b02      	ldr	r3, [sp, #8]
 80215fe:	b9b3      	cbnz	r3, 802162e <_dtoa_r+0x7fe>
 8021600:	9b03      	ldr	r3, [sp, #12]
 8021602:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021606:	b9a2      	cbnz	r2, 8021632 <_dtoa_r+0x802>
 8021608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802160c:	0d12      	lsrs	r2, r2, #20
 802160e:	0512      	lsls	r2, r2, #20
 8021610:	b18a      	cbz	r2, 8021636 <_dtoa_r+0x806>
 8021612:	9b04      	ldr	r3, [sp, #16]
 8021614:	3301      	adds	r3, #1
 8021616:	9304      	str	r3, [sp, #16]
 8021618:	9b05      	ldr	r3, [sp, #20]
 802161a:	3301      	adds	r3, #1
 802161c:	9305      	str	r3, [sp, #20]
 802161e:	2301      	movs	r3, #1
 8021620:	9309      	str	r3, [sp, #36]	; 0x24
 8021622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021624:	2b00      	cmp	r3, #0
 8021626:	f47f af70 	bne.w	802150a <_dtoa_r+0x6da>
 802162a:	2001      	movs	r0, #1
 802162c:	e775      	b.n	802151a <_dtoa_r+0x6ea>
 802162e:	2300      	movs	r3, #0
 8021630:	e7f6      	b.n	8021620 <_dtoa_r+0x7f0>
 8021632:	9b02      	ldr	r3, [sp, #8]
 8021634:	e7f4      	b.n	8021620 <_dtoa_r+0x7f0>
 8021636:	9209      	str	r2, [sp, #36]	; 0x24
 8021638:	e7f3      	b.n	8021622 <_dtoa_r+0x7f2>
 802163a:	d082      	beq.n	8021542 <_dtoa_r+0x712>
 802163c:	9b04      	ldr	r3, [sp, #16]
 802163e:	321c      	adds	r2, #28
 8021640:	4413      	add	r3, r2
 8021642:	9304      	str	r3, [sp, #16]
 8021644:	9b05      	ldr	r3, [sp, #20]
 8021646:	4490      	add	r8, r2
 8021648:	4413      	add	r3, r2
 802164a:	e779      	b.n	8021540 <_dtoa_r+0x710>
 802164c:	4602      	mov	r2, r0
 802164e:	e7f5      	b.n	802163c <_dtoa_r+0x80c>
 8021650:	f1b9 0f00 	cmp.w	r9, #0
 8021654:	dc36      	bgt.n	80216c4 <_dtoa_r+0x894>
 8021656:	9b06      	ldr	r3, [sp, #24]
 8021658:	2b02      	cmp	r3, #2
 802165a:	dd33      	ble.n	80216c4 <_dtoa_r+0x894>
 802165c:	46ca      	mov	sl, r9
 802165e:	f1ba 0f00 	cmp.w	sl, #0
 8021662:	d10d      	bne.n	8021680 <_dtoa_r+0x850>
 8021664:	4621      	mov	r1, r4
 8021666:	4653      	mov	r3, sl
 8021668:	2205      	movs	r2, #5
 802166a:	4630      	mov	r0, r6
 802166c:	f000 fa06 	bl	8021a7c <__multadd>
 8021670:	4601      	mov	r1, r0
 8021672:	4604      	mov	r4, r0
 8021674:	4628      	mov	r0, r5
 8021676:	f000 fc65 	bl	8021f44 <__mcmp>
 802167a:	2800      	cmp	r0, #0
 802167c:	f73f ade4 	bgt.w	8021248 <_dtoa_r+0x418>
 8021680:	9b08      	ldr	r3, [sp, #32]
 8021682:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021686:	ea6f 0b03 	mvn.w	fp, r3
 802168a:	f04f 0900 	mov.w	r9, #0
 802168e:	4621      	mov	r1, r4
 8021690:	4630      	mov	r0, r6
 8021692:	f000 f9d1 	bl	8021a38 <_Bfree>
 8021696:	2f00      	cmp	r7, #0
 8021698:	f43f aea1 	beq.w	80213de <_dtoa_r+0x5ae>
 802169c:	f1b9 0f00 	cmp.w	r9, #0
 80216a0:	d005      	beq.n	80216ae <_dtoa_r+0x87e>
 80216a2:	45b9      	cmp	r9, r7
 80216a4:	d003      	beq.n	80216ae <_dtoa_r+0x87e>
 80216a6:	4649      	mov	r1, r9
 80216a8:	4630      	mov	r0, r6
 80216aa:	f000 f9c5 	bl	8021a38 <_Bfree>
 80216ae:	4639      	mov	r1, r7
 80216b0:	4630      	mov	r0, r6
 80216b2:	f000 f9c1 	bl	8021a38 <_Bfree>
 80216b6:	e692      	b.n	80213de <_dtoa_r+0x5ae>
 80216b8:	2400      	movs	r4, #0
 80216ba:	4627      	mov	r7, r4
 80216bc:	e7e0      	b.n	8021680 <_dtoa_r+0x850>
 80216be:	4693      	mov	fp, r2
 80216c0:	4627      	mov	r7, r4
 80216c2:	e5c1      	b.n	8021248 <_dtoa_r+0x418>
 80216c4:	9b07      	ldr	r3, [sp, #28]
 80216c6:	46ca      	mov	sl, r9
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	f000 8100 	beq.w	80218ce <_dtoa_r+0xa9e>
 80216ce:	f1b8 0f00 	cmp.w	r8, #0
 80216d2:	dd05      	ble.n	80216e0 <_dtoa_r+0x8b0>
 80216d4:	4639      	mov	r1, r7
 80216d6:	4642      	mov	r2, r8
 80216d8:	4630      	mov	r0, r6
 80216da:	f000 fbc7 	bl	8021e6c <__lshift>
 80216de:	4607      	mov	r7, r0
 80216e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d05d      	beq.n	80217a2 <_dtoa_r+0x972>
 80216e6:	6879      	ldr	r1, [r7, #4]
 80216e8:	4630      	mov	r0, r6
 80216ea:	f000 f965 	bl	80219b8 <_Balloc>
 80216ee:	4680      	mov	r8, r0
 80216f0:	b928      	cbnz	r0, 80216fe <_dtoa_r+0x8ce>
 80216f2:	4b82      	ldr	r3, [pc, #520]	; (80218fc <_dtoa_r+0xacc>)
 80216f4:	4602      	mov	r2, r0
 80216f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80216fa:	f7ff bbb1 	b.w	8020e60 <_dtoa_r+0x30>
 80216fe:	693a      	ldr	r2, [r7, #16]
 8021700:	3202      	adds	r2, #2
 8021702:	0092      	lsls	r2, r2, #2
 8021704:	f107 010c 	add.w	r1, r7, #12
 8021708:	300c      	adds	r0, #12
 802170a:	f7ff fad4 	bl	8020cb6 <memcpy>
 802170e:	2201      	movs	r2, #1
 8021710:	4641      	mov	r1, r8
 8021712:	4630      	mov	r0, r6
 8021714:	f000 fbaa 	bl	8021e6c <__lshift>
 8021718:	9b01      	ldr	r3, [sp, #4]
 802171a:	3301      	adds	r3, #1
 802171c:	9304      	str	r3, [sp, #16]
 802171e:	9b01      	ldr	r3, [sp, #4]
 8021720:	4453      	add	r3, sl
 8021722:	9308      	str	r3, [sp, #32]
 8021724:	9b02      	ldr	r3, [sp, #8]
 8021726:	f003 0301 	and.w	r3, r3, #1
 802172a:	46b9      	mov	r9, r7
 802172c:	9307      	str	r3, [sp, #28]
 802172e:	4607      	mov	r7, r0
 8021730:	9b04      	ldr	r3, [sp, #16]
 8021732:	4621      	mov	r1, r4
 8021734:	3b01      	subs	r3, #1
 8021736:	4628      	mov	r0, r5
 8021738:	9302      	str	r3, [sp, #8]
 802173a:	f7ff faef 	bl	8020d1c <quorem>
 802173e:	4603      	mov	r3, r0
 8021740:	3330      	adds	r3, #48	; 0x30
 8021742:	9005      	str	r0, [sp, #20]
 8021744:	4649      	mov	r1, r9
 8021746:	4628      	mov	r0, r5
 8021748:	9309      	str	r3, [sp, #36]	; 0x24
 802174a:	f000 fbfb 	bl	8021f44 <__mcmp>
 802174e:	463a      	mov	r2, r7
 8021750:	4682      	mov	sl, r0
 8021752:	4621      	mov	r1, r4
 8021754:	4630      	mov	r0, r6
 8021756:	f000 fc11 	bl	8021f7c <__mdiff>
 802175a:	68c2      	ldr	r2, [r0, #12]
 802175c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802175e:	4680      	mov	r8, r0
 8021760:	bb0a      	cbnz	r2, 80217a6 <_dtoa_r+0x976>
 8021762:	4601      	mov	r1, r0
 8021764:	4628      	mov	r0, r5
 8021766:	f000 fbed 	bl	8021f44 <__mcmp>
 802176a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802176c:	4602      	mov	r2, r0
 802176e:	4641      	mov	r1, r8
 8021770:	4630      	mov	r0, r6
 8021772:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8021776:	f000 f95f 	bl	8021a38 <_Bfree>
 802177a:	9b06      	ldr	r3, [sp, #24]
 802177c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802177e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021782:	ea43 0102 	orr.w	r1, r3, r2
 8021786:	9b07      	ldr	r3, [sp, #28]
 8021788:	4319      	orrs	r1, r3
 802178a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802178c:	d10d      	bne.n	80217aa <_dtoa_r+0x97a>
 802178e:	2b39      	cmp	r3, #57	; 0x39
 8021790:	d029      	beq.n	80217e6 <_dtoa_r+0x9b6>
 8021792:	f1ba 0f00 	cmp.w	sl, #0
 8021796:	dd01      	ble.n	802179c <_dtoa_r+0x96c>
 8021798:	9b05      	ldr	r3, [sp, #20]
 802179a:	3331      	adds	r3, #49	; 0x31
 802179c:	9a02      	ldr	r2, [sp, #8]
 802179e:	7013      	strb	r3, [r2, #0]
 80217a0:	e775      	b.n	802168e <_dtoa_r+0x85e>
 80217a2:	4638      	mov	r0, r7
 80217a4:	e7b8      	b.n	8021718 <_dtoa_r+0x8e8>
 80217a6:	2201      	movs	r2, #1
 80217a8:	e7e1      	b.n	802176e <_dtoa_r+0x93e>
 80217aa:	f1ba 0f00 	cmp.w	sl, #0
 80217ae:	db06      	blt.n	80217be <_dtoa_r+0x98e>
 80217b0:	9906      	ldr	r1, [sp, #24]
 80217b2:	ea41 0a0a 	orr.w	sl, r1, sl
 80217b6:	9907      	ldr	r1, [sp, #28]
 80217b8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80217bc:	d120      	bne.n	8021800 <_dtoa_r+0x9d0>
 80217be:	2a00      	cmp	r2, #0
 80217c0:	ddec      	ble.n	802179c <_dtoa_r+0x96c>
 80217c2:	4629      	mov	r1, r5
 80217c4:	2201      	movs	r2, #1
 80217c6:	4630      	mov	r0, r6
 80217c8:	9304      	str	r3, [sp, #16]
 80217ca:	f000 fb4f 	bl	8021e6c <__lshift>
 80217ce:	4621      	mov	r1, r4
 80217d0:	4605      	mov	r5, r0
 80217d2:	f000 fbb7 	bl	8021f44 <__mcmp>
 80217d6:	2800      	cmp	r0, #0
 80217d8:	9b04      	ldr	r3, [sp, #16]
 80217da:	dc02      	bgt.n	80217e2 <_dtoa_r+0x9b2>
 80217dc:	d1de      	bne.n	802179c <_dtoa_r+0x96c>
 80217de:	07da      	lsls	r2, r3, #31
 80217e0:	d5dc      	bpl.n	802179c <_dtoa_r+0x96c>
 80217e2:	2b39      	cmp	r3, #57	; 0x39
 80217e4:	d1d8      	bne.n	8021798 <_dtoa_r+0x968>
 80217e6:	9a02      	ldr	r2, [sp, #8]
 80217e8:	2339      	movs	r3, #57	; 0x39
 80217ea:	7013      	strb	r3, [r2, #0]
 80217ec:	4643      	mov	r3, r8
 80217ee:	4698      	mov	r8, r3
 80217f0:	3b01      	subs	r3, #1
 80217f2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80217f6:	2a39      	cmp	r2, #57	; 0x39
 80217f8:	d051      	beq.n	802189e <_dtoa_r+0xa6e>
 80217fa:	3201      	adds	r2, #1
 80217fc:	701a      	strb	r2, [r3, #0]
 80217fe:	e746      	b.n	802168e <_dtoa_r+0x85e>
 8021800:	2a00      	cmp	r2, #0
 8021802:	dd03      	ble.n	802180c <_dtoa_r+0x9dc>
 8021804:	2b39      	cmp	r3, #57	; 0x39
 8021806:	d0ee      	beq.n	80217e6 <_dtoa_r+0x9b6>
 8021808:	3301      	adds	r3, #1
 802180a:	e7c7      	b.n	802179c <_dtoa_r+0x96c>
 802180c:	9a04      	ldr	r2, [sp, #16]
 802180e:	9908      	ldr	r1, [sp, #32]
 8021810:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021814:	428a      	cmp	r2, r1
 8021816:	d02b      	beq.n	8021870 <_dtoa_r+0xa40>
 8021818:	4629      	mov	r1, r5
 802181a:	2300      	movs	r3, #0
 802181c:	220a      	movs	r2, #10
 802181e:	4630      	mov	r0, r6
 8021820:	f000 f92c 	bl	8021a7c <__multadd>
 8021824:	45b9      	cmp	r9, r7
 8021826:	4605      	mov	r5, r0
 8021828:	f04f 0300 	mov.w	r3, #0
 802182c:	f04f 020a 	mov.w	r2, #10
 8021830:	4649      	mov	r1, r9
 8021832:	4630      	mov	r0, r6
 8021834:	d107      	bne.n	8021846 <_dtoa_r+0xa16>
 8021836:	f000 f921 	bl	8021a7c <__multadd>
 802183a:	4681      	mov	r9, r0
 802183c:	4607      	mov	r7, r0
 802183e:	9b04      	ldr	r3, [sp, #16]
 8021840:	3301      	adds	r3, #1
 8021842:	9304      	str	r3, [sp, #16]
 8021844:	e774      	b.n	8021730 <_dtoa_r+0x900>
 8021846:	f000 f919 	bl	8021a7c <__multadd>
 802184a:	4639      	mov	r1, r7
 802184c:	4681      	mov	r9, r0
 802184e:	2300      	movs	r3, #0
 8021850:	220a      	movs	r2, #10
 8021852:	4630      	mov	r0, r6
 8021854:	f000 f912 	bl	8021a7c <__multadd>
 8021858:	4607      	mov	r7, r0
 802185a:	e7f0      	b.n	802183e <_dtoa_r+0xa0e>
 802185c:	f1ba 0f00 	cmp.w	sl, #0
 8021860:	9a01      	ldr	r2, [sp, #4]
 8021862:	bfcc      	ite	gt
 8021864:	46d0      	movgt	r8, sl
 8021866:	f04f 0801 	movle.w	r8, #1
 802186a:	4490      	add	r8, r2
 802186c:	f04f 0900 	mov.w	r9, #0
 8021870:	4629      	mov	r1, r5
 8021872:	2201      	movs	r2, #1
 8021874:	4630      	mov	r0, r6
 8021876:	9302      	str	r3, [sp, #8]
 8021878:	f000 faf8 	bl	8021e6c <__lshift>
 802187c:	4621      	mov	r1, r4
 802187e:	4605      	mov	r5, r0
 8021880:	f000 fb60 	bl	8021f44 <__mcmp>
 8021884:	2800      	cmp	r0, #0
 8021886:	dcb1      	bgt.n	80217ec <_dtoa_r+0x9bc>
 8021888:	d102      	bne.n	8021890 <_dtoa_r+0xa60>
 802188a:	9b02      	ldr	r3, [sp, #8]
 802188c:	07db      	lsls	r3, r3, #31
 802188e:	d4ad      	bmi.n	80217ec <_dtoa_r+0x9bc>
 8021890:	4643      	mov	r3, r8
 8021892:	4698      	mov	r8, r3
 8021894:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021898:	2a30      	cmp	r2, #48	; 0x30
 802189a:	d0fa      	beq.n	8021892 <_dtoa_r+0xa62>
 802189c:	e6f7      	b.n	802168e <_dtoa_r+0x85e>
 802189e:	9a01      	ldr	r2, [sp, #4]
 80218a0:	429a      	cmp	r2, r3
 80218a2:	d1a4      	bne.n	80217ee <_dtoa_r+0x9be>
 80218a4:	f10b 0b01 	add.w	fp, fp, #1
 80218a8:	2331      	movs	r3, #49	; 0x31
 80218aa:	e778      	b.n	802179e <_dtoa_r+0x96e>
 80218ac:	4b14      	ldr	r3, [pc, #80]	; (8021900 <_dtoa_r+0xad0>)
 80218ae:	f7ff bb2a 	b.w	8020f06 <_dtoa_r+0xd6>
 80218b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	f47f ab05 	bne.w	8020ec4 <_dtoa_r+0x94>
 80218ba:	4b12      	ldr	r3, [pc, #72]	; (8021904 <_dtoa_r+0xad4>)
 80218bc:	f7ff bb23 	b.w	8020f06 <_dtoa_r+0xd6>
 80218c0:	f1ba 0f00 	cmp.w	sl, #0
 80218c4:	dc03      	bgt.n	80218ce <_dtoa_r+0xa9e>
 80218c6:	9b06      	ldr	r3, [sp, #24]
 80218c8:	2b02      	cmp	r3, #2
 80218ca:	f73f aec8 	bgt.w	802165e <_dtoa_r+0x82e>
 80218ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80218d2:	4621      	mov	r1, r4
 80218d4:	4628      	mov	r0, r5
 80218d6:	f7ff fa21 	bl	8020d1c <quorem>
 80218da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80218de:	f808 3b01 	strb.w	r3, [r8], #1
 80218e2:	9a01      	ldr	r2, [sp, #4]
 80218e4:	eba8 0202 	sub.w	r2, r8, r2
 80218e8:	4592      	cmp	sl, r2
 80218ea:	ddb7      	ble.n	802185c <_dtoa_r+0xa2c>
 80218ec:	4629      	mov	r1, r5
 80218ee:	2300      	movs	r3, #0
 80218f0:	220a      	movs	r2, #10
 80218f2:	4630      	mov	r0, r6
 80218f4:	f000 f8c2 	bl	8021a7c <__multadd>
 80218f8:	4605      	mov	r5, r0
 80218fa:	e7ea      	b.n	80218d2 <_dtoa_r+0xaa2>
 80218fc:	08025aa6 	.word	0x08025aa6
 8021900:	080259dc 	.word	0x080259dc
 8021904:	08025a41 	.word	0x08025a41

08021908 <__env_lock>:
 8021908:	4801      	ldr	r0, [pc, #4]	; (8021910 <__env_lock+0x8>)
 802190a:	f7ff b9ca 	b.w	8020ca2 <__retarget_lock_acquire_recursive>
 802190e:	bf00      	nop
 8021910:	200171ac 	.word	0x200171ac

08021914 <__env_unlock>:
 8021914:	4801      	ldr	r0, [pc, #4]	; (802191c <__env_unlock+0x8>)
 8021916:	f7ff b9c5 	b.w	8020ca4 <__retarget_lock_release_recursive>
 802191a:	bf00      	nop
 802191c:	200171ac 	.word	0x200171ac

08021920 <_free_r>:
 8021920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021922:	2900      	cmp	r1, #0
 8021924:	d044      	beq.n	80219b0 <_free_r+0x90>
 8021926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802192a:	9001      	str	r0, [sp, #4]
 802192c:	2b00      	cmp	r3, #0
 802192e:	f1a1 0404 	sub.w	r4, r1, #4
 8021932:	bfb8      	it	lt
 8021934:	18e4      	addlt	r4, r4, r3
 8021936:	f7fd fdbd 	bl	801f4b4 <__malloc_lock>
 802193a:	4a1e      	ldr	r2, [pc, #120]	; (80219b4 <_free_r+0x94>)
 802193c:	9801      	ldr	r0, [sp, #4]
 802193e:	6813      	ldr	r3, [r2, #0]
 8021940:	b933      	cbnz	r3, 8021950 <_free_r+0x30>
 8021942:	6063      	str	r3, [r4, #4]
 8021944:	6014      	str	r4, [r2, #0]
 8021946:	b003      	add	sp, #12
 8021948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802194c:	f7fd bdb8 	b.w	801f4c0 <__malloc_unlock>
 8021950:	42a3      	cmp	r3, r4
 8021952:	d908      	bls.n	8021966 <_free_r+0x46>
 8021954:	6825      	ldr	r5, [r4, #0]
 8021956:	1961      	adds	r1, r4, r5
 8021958:	428b      	cmp	r3, r1
 802195a:	bf01      	itttt	eq
 802195c:	6819      	ldreq	r1, [r3, #0]
 802195e:	685b      	ldreq	r3, [r3, #4]
 8021960:	1949      	addeq	r1, r1, r5
 8021962:	6021      	streq	r1, [r4, #0]
 8021964:	e7ed      	b.n	8021942 <_free_r+0x22>
 8021966:	461a      	mov	r2, r3
 8021968:	685b      	ldr	r3, [r3, #4]
 802196a:	b10b      	cbz	r3, 8021970 <_free_r+0x50>
 802196c:	42a3      	cmp	r3, r4
 802196e:	d9fa      	bls.n	8021966 <_free_r+0x46>
 8021970:	6811      	ldr	r1, [r2, #0]
 8021972:	1855      	adds	r5, r2, r1
 8021974:	42a5      	cmp	r5, r4
 8021976:	d10b      	bne.n	8021990 <_free_r+0x70>
 8021978:	6824      	ldr	r4, [r4, #0]
 802197a:	4421      	add	r1, r4
 802197c:	1854      	adds	r4, r2, r1
 802197e:	42a3      	cmp	r3, r4
 8021980:	6011      	str	r1, [r2, #0]
 8021982:	d1e0      	bne.n	8021946 <_free_r+0x26>
 8021984:	681c      	ldr	r4, [r3, #0]
 8021986:	685b      	ldr	r3, [r3, #4]
 8021988:	6053      	str	r3, [r2, #4]
 802198a:	440c      	add	r4, r1
 802198c:	6014      	str	r4, [r2, #0]
 802198e:	e7da      	b.n	8021946 <_free_r+0x26>
 8021990:	d902      	bls.n	8021998 <_free_r+0x78>
 8021992:	230c      	movs	r3, #12
 8021994:	6003      	str	r3, [r0, #0]
 8021996:	e7d6      	b.n	8021946 <_free_r+0x26>
 8021998:	6825      	ldr	r5, [r4, #0]
 802199a:	1961      	adds	r1, r4, r5
 802199c:	428b      	cmp	r3, r1
 802199e:	bf04      	itt	eq
 80219a0:	6819      	ldreq	r1, [r3, #0]
 80219a2:	685b      	ldreq	r3, [r3, #4]
 80219a4:	6063      	str	r3, [r4, #4]
 80219a6:	bf04      	itt	eq
 80219a8:	1949      	addeq	r1, r1, r5
 80219aa:	6021      	streq	r1, [r4, #0]
 80219ac:	6054      	str	r4, [r2, #4]
 80219ae:	e7ca      	b.n	8021946 <_free_r+0x26>
 80219b0:	b003      	add	sp, #12
 80219b2:	bd30      	pop	{r4, r5, pc}
 80219b4:	20017064 	.word	0x20017064

080219b8 <_Balloc>:
 80219b8:	b570      	push	{r4, r5, r6, lr}
 80219ba:	69c6      	ldr	r6, [r0, #28]
 80219bc:	4604      	mov	r4, r0
 80219be:	460d      	mov	r5, r1
 80219c0:	b976      	cbnz	r6, 80219e0 <_Balloc+0x28>
 80219c2:	2010      	movs	r0, #16
 80219c4:	f7fd fcc6 	bl	801f354 <malloc>
 80219c8:	4602      	mov	r2, r0
 80219ca:	61e0      	str	r0, [r4, #28]
 80219cc:	b920      	cbnz	r0, 80219d8 <_Balloc+0x20>
 80219ce:	4b18      	ldr	r3, [pc, #96]	; (8021a30 <_Balloc+0x78>)
 80219d0:	4818      	ldr	r0, [pc, #96]	; (8021a34 <_Balloc+0x7c>)
 80219d2:	216b      	movs	r1, #107	; 0x6b
 80219d4:	f7ff f984 	bl	8020ce0 <__assert_func>
 80219d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80219dc:	6006      	str	r6, [r0, #0]
 80219de:	60c6      	str	r6, [r0, #12]
 80219e0:	69e6      	ldr	r6, [r4, #28]
 80219e2:	68f3      	ldr	r3, [r6, #12]
 80219e4:	b183      	cbz	r3, 8021a08 <_Balloc+0x50>
 80219e6:	69e3      	ldr	r3, [r4, #28]
 80219e8:	68db      	ldr	r3, [r3, #12]
 80219ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80219ee:	b9b8      	cbnz	r0, 8021a20 <_Balloc+0x68>
 80219f0:	2101      	movs	r1, #1
 80219f2:	fa01 f605 	lsl.w	r6, r1, r5
 80219f6:	1d72      	adds	r2, r6, #5
 80219f8:	0092      	lsls	r2, r2, #2
 80219fa:	4620      	mov	r0, r4
 80219fc:	f7fd fc3a 	bl	801f274 <_calloc_r>
 8021a00:	b160      	cbz	r0, 8021a1c <_Balloc+0x64>
 8021a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021a06:	e00e      	b.n	8021a26 <_Balloc+0x6e>
 8021a08:	2221      	movs	r2, #33	; 0x21
 8021a0a:	2104      	movs	r1, #4
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	f7fd fc31 	bl	801f274 <_calloc_r>
 8021a12:	69e3      	ldr	r3, [r4, #28]
 8021a14:	60f0      	str	r0, [r6, #12]
 8021a16:	68db      	ldr	r3, [r3, #12]
 8021a18:	2b00      	cmp	r3, #0
 8021a1a:	d1e4      	bne.n	80219e6 <_Balloc+0x2e>
 8021a1c:	2000      	movs	r0, #0
 8021a1e:	bd70      	pop	{r4, r5, r6, pc}
 8021a20:	6802      	ldr	r2, [r0, #0]
 8021a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021a26:	2300      	movs	r3, #0
 8021a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021a2c:	e7f7      	b.n	8021a1e <_Balloc+0x66>
 8021a2e:	bf00      	nop
 8021a30:	0802585c 	.word	0x0802585c
 8021a34:	08025ab7 	.word	0x08025ab7

08021a38 <_Bfree>:
 8021a38:	b570      	push	{r4, r5, r6, lr}
 8021a3a:	69c6      	ldr	r6, [r0, #28]
 8021a3c:	4605      	mov	r5, r0
 8021a3e:	460c      	mov	r4, r1
 8021a40:	b976      	cbnz	r6, 8021a60 <_Bfree+0x28>
 8021a42:	2010      	movs	r0, #16
 8021a44:	f7fd fc86 	bl	801f354 <malloc>
 8021a48:	4602      	mov	r2, r0
 8021a4a:	61e8      	str	r0, [r5, #28]
 8021a4c:	b920      	cbnz	r0, 8021a58 <_Bfree+0x20>
 8021a4e:	4b09      	ldr	r3, [pc, #36]	; (8021a74 <_Bfree+0x3c>)
 8021a50:	4809      	ldr	r0, [pc, #36]	; (8021a78 <_Bfree+0x40>)
 8021a52:	218f      	movs	r1, #143	; 0x8f
 8021a54:	f7ff f944 	bl	8020ce0 <__assert_func>
 8021a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021a5c:	6006      	str	r6, [r0, #0]
 8021a5e:	60c6      	str	r6, [r0, #12]
 8021a60:	b13c      	cbz	r4, 8021a72 <_Bfree+0x3a>
 8021a62:	69eb      	ldr	r3, [r5, #28]
 8021a64:	6862      	ldr	r2, [r4, #4]
 8021a66:	68db      	ldr	r3, [r3, #12]
 8021a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021a6c:	6021      	str	r1, [r4, #0]
 8021a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021a72:	bd70      	pop	{r4, r5, r6, pc}
 8021a74:	0802585c 	.word	0x0802585c
 8021a78:	08025ab7 	.word	0x08025ab7

08021a7c <__multadd>:
 8021a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a80:	690d      	ldr	r5, [r1, #16]
 8021a82:	4607      	mov	r7, r0
 8021a84:	460c      	mov	r4, r1
 8021a86:	461e      	mov	r6, r3
 8021a88:	f101 0c14 	add.w	ip, r1, #20
 8021a8c:	2000      	movs	r0, #0
 8021a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8021a92:	b299      	uxth	r1, r3
 8021a94:	fb02 6101 	mla	r1, r2, r1, r6
 8021a98:	0c1e      	lsrs	r6, r3, #16
 8021a9a:	0c0b      	lsrs	r3, r1, #16
 8021a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8021aa0:	b289      	uxth	r1, r1
 8021aa2:	3001      	adds	r0, #1
 8021aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021aa8:	4285      	cmp	r5, r0
 8021aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8021aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021ab2:	dcec      	bgt.n	8021a8e <__multadd+0x12>
 8021ab4:	b30e      	cbz	r6, 8021afa <__multadd+0x7e>
 8021ab6:	68a3      	ldr	r3, [r4, #8]
 8021ab8:	42ab      	cmp	r3, r5
 8021aba:	dc19      	bgt.n	8021af0 <__multadd+0x74>
 8021abc:	6861      	ldr	r1, [r4, #4]
 8021abe:	4638      	mov	r0, r7
 8021ac0:	3101      	adds	r1, #1
 8021ac2:	f7ff ff79 	bl	80219b8 <_Balloc>
 8021ac6:	4680      	mov	r8, r0
 8021ac8:	b928      	cbnz	r0, 8021ad6 <__multadd+0x5a>
 8021aca:	4602      	mov	r2, r0
 8021acc:	4b0c      	ldr	r3, [pc, #48]	; (8021b00 <__multadd+0x84>)
 8021ace:	480d      	ldr	r0, [pc, #52]	; (8021b04 <__multadd+0x88>)
 8021ad0:	21ba      	movs	r1, #186	; 0xba
 8021ad2:	f7ff f905 	bl	8020ce0 <__assert_func>
 8021ad6:	6922      	ldr	r2, [r4, #16]
 8021ad8:	3202      	adds	r2, #2
 8021ada:	f104 010c 	add.w	r1, r4, #12
 8021ade:	0092      	lsls	r2, r2, #2
 8021ae0:	300c      	adds	r0, #12
 8021ae2:	f7ff f8e8 	bl	8020cb6 <memcpy>
 8021ae6:	4621      	mov	r1, r4
 8021ae8:	4638      	mov	r0, r7
 8021aea:	f7ff ffa5 	bl	8021a38 <_Bfree>
 8021aee:	4644      	mov	r4, r8
 8021af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021af4:	3501      	adds	r5, #1
 8021af6:	615e      	str	r6, [r3, #20]
 8021af8:	6125      	str	r5, [r4, #16]
 8021afa:	4620      	mov	r0, r4
 8021afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b00:	08025aa6 	.word	0x08025aa6
 8021b04:	08025ab7 	.word	0x08025ab7

08021b08 <__s2b>:
 8021b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b0c:	460c      	mov	r4, r1
 8021b0e:	4615      	mov	r5, r2
 8021b10:	461f      	mov	r7, r3
 8021b12:	2209      	movs	r2, #9
 8021b14:	3308      	adds	r3, #8
 8021b16:	4606      	mov	r6, r0
 8021b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8021b1c:	2100      	movs	r1, #0
 8021b1e:	2201      	movs	r2, #1
 8021b20:	429a      	cmp	r2, r3
 8021b22:	db09      	blt.n	8021b38 <__s2b+0x30>
 8021b24:	4630      	mov	r0, r6
 8021b26:	f7ff ff47 	bl	80219b8 <_Balloc>
 8021b2a:	b940      	cbnz	r0, 8021b3e <__s2b+0x36>
 8021b2c:	4602      	mov	r2, r0
 8021b2e:	4b19      	ldr	r3, [pc, #100]	; (8021b94 <__s2b+0x8c>)
 8021b30:	4819      	ldr	r0, [pc, #100]	; (8021b98 <__s2b+0x90>)
 8021b32:	21d3      	movs	r1, #211	; 0xd3
 8021b34:	f7ff f8d4 	bl	8020ce0 <__assert_func>
 8021b38:	0052      	lsls	r2, r2, #1
 8021b3a:	3101      	adds	r1, #1
 8021b3c:	e7f0      	b.n	8021b20 <__s2b+0x18>
 8021b3e:	9b08      	ldr	r3, [sp, #32]
 8021b40:	6143      	str	r3, [r0, #20]
 8021b42:	2d09      	cmp	r5, #9
 8021b44:	f04f 0301 	mov.w	r3, #1
 8021b48:	6103      	str	r3, [r0, #16]
 8021b4a:	dd16      	ble.n	8021b7a <__s2b+0x72>
 8021b4c:	f104 0909 	add.w	r9, r4, #9
 8021b50:	46c8      	mov	r8, r9
 8021b52:	442c      	add	r4, r5
 8021b54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021b58:	4601      	mov	r1, r0
 8021b5a:	3b30      	subs	r3, #48	; 0x30
 8021b5c:	220a      	movs	r2, #10
 8021b5e:	4630      	mov	r0, r6
 8021b60:	f7ff ff8c 	bl	8021a7c <__multadd>
 8021b64:	45a0      	cmp	r8, r4
 8021b66:	d1f5      	bne.n	8021b54 <__s2b+0x4c>
 8021b68:	f1a5 0408 	sub.w	r4, r5, #8
 8021b6c:	444c      	add	r4, r9
 8021b6e:	1b2d      	subs	r5, r5, r4
 8021b70:	1963      	adds	r3, r4, r5
 8021b72:	42bb      	cmp	r3, r7
 8021b74:	db04      	blt.n	8021b80 <__s2b+0x78>
 8021b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b7a:	340a      	adds	r4, #10
 8021b7c:	2509      	movs	r5, #9
 8021b7e:	e7f6      	b.n	8021b6e <__s2b+0x66>
 8021b80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021b84:	4601      	mov	r1, r0
 8021b86:	3b30      	subs	r3, #48	; 0x30
 8021b88:	220a      	movs	r2, #10
 8021b8a:	4630      	mov	r0, r6
 8021b8c:	f7ff ff76 	bl	8021a7c <__multadd>
 8021b90:	e7ee      	b.n	8021b70 <__s2b+0x68>
 8021b92:	bf00      	nop
 8021b94:	08025aa6 	.word	0x08025aa6
 8021b98:	08025ab7 	.word	0x08025ab7

08021b9c <__hi0bits>:
 8021b9c:	0c03      	lsrs	r3, r0, #16
 8021b9e:	041b      	lsls	r3, r3, #16
 8021ba0:	b9d3      	cbnz	r3, 8021bd8 <__hi0bits+0x3c>
 8021ba2:	0400      	lsls	r0, r0, #16
 8021ba4:	2310      	movs	r3, #16
 8021ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021baa:	bf04      	itt	eq
 8021bac:	0200      	lsleq	r0, r0, #8
 8021bae:	3308      	addeq	r3, #8
 8021bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021bb4:	bf04      	itt	eq
 8021bb6:	0100      	lsleq	r0, r0, #4
 8021bb8:	3304      	addeq	r3, #4
 8021bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021bbe:	bf04      	itt	eq
 8021bc0:	0080      	lsleq	r0, r0, #2
 8021bc2:	3302      	addeq	r3, #2
 8021bc4:	2800      	cmp	r0, #0
 8021bc6:	db05      	blt.n	8021bd4 <__hi0bits+0x38>
 8021bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021bcc:	f103 0301 	add.w	r3, r3, #1
 8021bd0:	bf08      	it	eq
 8021bd2:	2320      	moveq	r3, #32
 8021bd4:	4618      	mov	r0, r3
 8021bd6:	4770      	bx	lr
 8021bd8:	2300      	movs	r3, #0
 8021bda:	e7e4      	b.n	8021ba6 <__hi0bits+0xa>

08021bdc <__lo0bits>:
 8021bdc:	6803      	ldr	r3, [r0, #0]
 8021bde:	f013 0207 	ands.w	r2, r3, #7
 8021be2:	d00c      	beq.n	8021bfe <__lo0bits+0x22>
 8021be4:	07d9      	lsls	r1, r3, #31
 8021be6:	d422      	bmi.n	8021c2e <__lo0bits+0x52>
 8021be8:	079a      	lsls	r2, r3, #30
 8021bea:	bf49      	itett	mi
 8021bec:	085b      	lsrmi	r3, r3, #1
 8021bee:	089b      	lsrpl	r3, r3, #2
 8021bf0:	6003      	strmi	r3, [r0, #0]
 8021bf2:	2201      	movmi	r2, #1
 8021bf4:	bf5c      	itt	pl
 8021bf6:	6003      	strpl	r3, [r0, #0]
 8021bf8:	2202      	movpl	r2, #2
 8021bfa:	4610      	mov	r0, r2
 8021bfc:	4770      	bx	lr
 8021bfe:	b299      	uxth	r1, r3
 8021c00:	b909      	cbnz	r1, 8021c06 <__lo0bits+0x2a>
 8021c02:	0c1b      	lsrs	r3, r3, #16
 8021c04:	2210      	movs	r2, #16
 8021c06:	b2d9      	uxtb	r1, r3
 8021c08:	b909      	cbnz	r1, 8021c0e <__lo0bits+0x32>
 8021c0a:	3208      	adds	r2, #8
 8021c0c:	0a1b      	lsrs	r3, r3, #8
 8021c0e:	0719      	lsls	r1, r3, #28
 8021c10:	bf04      	itt	eq
 8021c12:	091b      	lsreq	r3, r3, #4
 8021c14:	3204      	addeq	r2, #4
 8021c16:	0799      	lsls	r1, r3, #30
 8021c18:	bf04      	itt	eq
 8021c1a:	089b      	lsreq	r3, r3, #2
 8021c1c:	3202      	addeq	r2, #2
 8021c1e:	07d9      	lsls	r1, r3, #31
 8021c20:	d403      	bmi.n	8021c2a <__lo0bits+0x4e>
 8021c22:	085b      	lsrs	r3, r3, #1
 8021c24:	f102 0201 	add.w	r2, r2, #1
 8021c28:	d003      	beq.n	8021c32 <__lo0bits+0x56>
 8021c2a:	6003      	str	r3, [r0, #0]
 8021c2c:	e7e5      	b.n	8021bfa <__lo0bits+0x1e>
 8021c2e:	2200      	movs	r2, #0
 8021c30:	e7e3      	b.n	8021bfa <__lo0bits+0x1e>
 8021c32:	2220      	movs	r2, #32
 8021c34:	e7e1      	b.n	8021bfa <__lo0bits+0x1e>
	...

08021c38 <__i2b>:
 8021c38:	b510      	push	{r4, lr}
 8021c3a:	460c      	mov	r4, r1
 8021c3c:	2101      	movs	r1, #1
 8021c3e:	f7ff febb 	bl	80219b8 <_Balloc>
 8021c42:	4602      	mov	r2, r0
 8021c44:	b928      	cbnz	r0, 8021c52 <__i2b+0x1a>
 8021c46:	4b05      	ldr	r3, [pc, #20]	; (8021c5c <__i2b+0x24>)
 8021c48:	4805      	ldr	r0, [pc, #20]	; (8021c60 <__i2b+0x28>)
 8021c4a:	f240 1145 	movw	r1, #325	; 0x145
 8021c4e:	f7ff f847 	bl	8020ce0 <__assert_func>
 8021c52:	2301      	movs	r3, #1
 8021c54:	6144      	str	r4, [r0, #20]
 8021c56:	6103      	str	r3, [r0, #16]
 8021c58:	bd10      	pop	{r4, pc}
 8021c5a:	bf00      	nop
 8021c5c:	08025aa6 	.word	0x08025aa6
 8021c60:	08025ab7 	.word	0x08025ab7

08021c64 <__multiply>:
 8021c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c68:	4691      	mov	r9, r2
 8021c6a:	690a      	ldr	r2, [r1, #16]
 8021c6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021c70:	429a      	cmp	r2, r3
 8021c72:	bfb8      	it	lt
 8021c74:	460b      	movlt	r3, r1
 8021c76:	460c      	mov	r4, r1
 8021c78:	bfbc      	itt	lt
 8021c7a:	464c      	movlt	r4, r9
 8021c7c:	4699      	movlt	r9, r3
 8021c7e:	6927      	ldr	r7, [r4, #16]
 8021c80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021c84:	68a3      	ldr	r3, [r4, #8]
 8021c86:	6861      	ldr	r1, [r4, #4]
 8021c88:	eb07 060a 	add.w	r6, r7, sl
 8021c8c:	42b3      	cmp	r3, r6
 8021c8e:	b085      	sub	sp, #20
 8021c90:	bfb8      	it	lt
 8021c92:	3101      	addlt	r1, #1
 8021c94:	f7ff fe90 	bl	80219b8 <_Balloc>
 8021c98:	b930      	cbnz	r0, 8021ca8 <__multiply+0x44>
 8021c9a:	4602      	mov	r2, r0
 8021c9c:	4b44      	ldr	r3, [pc, #272]	; (8021db0 <__multiply+0x14c>)
 8021c9e:	4845      	ldr	r0, [pc, #276]	; (8021db4 <__multiply+0x150>)
 8021ca0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8021ca4:	f7ff f81c 	bl	8020ce0 <__assert_func>
 8021ca8:	f100 0514 	add.w	r5, r0, #20
 8021cac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021cb0:	462b      	mov	r3, r5
 8021cb2:	2200      	movs	r2, #0
 8021cb4:	4543      	cmp	r3, r8
 8021cb6:	d321      	bcc.n	8021cfc <__multiply+0x98>
 8021cb8:	f104 0314 	add.w	r3, r4, #20
 8021cbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021cc0:	f109 0314 	add.w	r3, r9, #20
 8021cc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021cc8:	9202      	str	r2, [sp, #8]
 8021cca:	1b3a      	subs	r2, r7, r4
 8021ccc:	3a15      	subs	r2, #21
 8021cce:	f022 0203 	bic.w	r2, r2, #3
 8021cd2:	3204      	adds	r2, #4
 8021cd4:	f104 0115 	add.w	r1, r4, #21
 8021cd8:	428f      	cmp	r7, r1
 8021cda:	bf38      	it	cc
 8021cdc:	2204      	movcc	r2, #4
 8021cde:	9201      	str	r2, [sp, #4]
 8021ce0:	9a02      	ldr	r2, [sp, #8]
 8021ce2:	9303      	str	r3, [sp, #12]
 8021ce4:	429a      	cmp	r2, r3
 8021ce6:	d80c      	bhi.n	8021d02 <__multiply+0x9e>
 8021ce8:	2e00      	cmp	r6, #0
 8021cea:	dd03      	ble.n	8021cf4 <__multiply+0x90>
 8021cec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d05b      	beq.n	8021dac <__multiply+0x148>
 8021cf4:	6106      	str	r6, [r0, #16]
 8021cf6:	b005      	add	sp, #20
 8021cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cfc:	f843 2b04 	str.w	r2, [r3], #4
 8021d00:	e7d8      	b.n	8021cb4 <__multiply+0x50>
 8021d02:	f8b3 a000 	ldrh.w	sl, [r3]
 8021d06:	f1ba 0f00 	cmp.w	sl, #0
 8021d0a:	d024      	beq.n	8021d56 <__multiply+0xf2>
 8021d0c:	f104 0e14 	add.w	lr, r4, #20
 8021d10:	46a9      	mov	r9, r5
 8021d12:	f04f 0c00 	mov.w	ip, #0
 8021d16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021d1a:	f8d9 1000 	ldr.w	r1, [r9]
 8021d1e:	fa1f fb82 	uxth.w	fp, r2
 8021d22:	b289      	uxth	r1, r1
 8021d24:	fb0a 110b 	mla	r1, sl, fp, r1
 8021d28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8021d30:	4461      	add	r1, ip
 8021d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021d36:	fb0a c20b 	mla	r2, sl, fp, ip
 8021d3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021d3e:	b289      	uxth	r1, r1
 8021d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021d44:	4577      	cmp	r7, lr
 8021d46:	f849 1b04 	str.w	r1, [r9], #4
 8021d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021d4e:	d8e2      	bhi.n	8021d16 <__multiply+0xb2>
 8021d50:	9a01      	ldr	r2, [sp, #4]
 8021d52:	f845 c002 	str.w	ip, [r5, r2]
 8021d56:	9a03      	ldr	r2, [sp, #12]
 8021d58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021d5c:	3304      	adds	r3, #4
 8021d5e:	f1b9 0f00 	cmp.w	r9, #0
 8021d62:	d021      	beq.n	8021da8 <__multiply+0x144>
 8021d64:	6829      	ldr	r1, [r5, #0]
 8021d66:	f104 0c14 	add.w	ip, r4, #20
 8021d6a:	46ae      	mov	lr, r5
 8021d6c:	f04f 0a00 	mov.w	sl, #0
 8021d70:	f8bc b000 	ldrh.w	fp, [ip]
 8021d74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021d78:	fb09 220b 	mla	r2, r9, fp, r2
 8021d7c:	4452      	add	r2, sl
 8021d7e:	b289      	uxth	r1, r1
 8021d80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021d84:	f84e 1b04 	str.w	r1, [lr], #4
 8021d88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8021d8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021d90:	f8be 1000 	ldrh.w	r1, [lr]
 8021d94:	fb09 110a 	mla	r1, r9, sl, r1
 8021d98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8021d9c:	4567      	cmp	r7, ip
 8021d9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021da2:	d8e5      	bhi.n	8021d70 <__multiply+0x10c>
 8021da4:	9a01      	ldr	r2, [sp, #4]
 8021da6:	50a9      	str	r1, [r5, r2]
 8021da8:	3504      	adds	r5, #4
 8021daa:	e799      	b.n	8021ce0 <__multiply+0x7c>
 8021dac:	3e01      	subs	r6, #1
 8021dae:	e79b      	b.n	8021ce8 <__multiply+0x84>
 8021db0:	08025aa6 	.word	0x08025aa6
 8021db4:	08025ab7 	.word	0x08025ab7

08021db8 <__pow5mult>:
 8021db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021dbc:	4615      	mov	r5, r2
 8021dbe:	f012 0203 	ands.w	r2, r2, #3
 8021dc2:	4606      	mov	r6, r0
 8021dc4:	460f      	mov	r7, r1
 8021dc6:	d007      	beq.n	8021dd8 <__pow5mult+0x20>
 8021dc8:	4c25      	ldr	r4, [pc, #148]	; (8021e60 <__pow5mult+0xa8>)
 8021dca:	3a01      	subs	r2, #1
 8021dcc:	2300      	movs	r3, #0
 8021dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021dd2:	f7ff fe53 	bl	8021a7c <__multadd>
 8021dd6:	4607      	mov	r7, r0
 8021dd8:	10ad      	asrs	r5, r5, #2
 8021dda:	d03d      	beq.n	8021e58 <__pow5mult+0xa0>
 8021ddc:	69f4      	ldr	r4, [r6, #28]
 8021dde:	b97c      	cbnz	r4, 8021e00 <__pow5mult+0x48>
 8021de0:	2010      	movs	r0, #16
 8021de2:	f7fd fab7 	bl	801f354 <malloc>
 8021de6:	4602      	mov	r2, r0
 8021de8:	61f0      	str	r0, [r6, #28]
 8021dea:	b928      	cbnz	r0, 8021df8 <__pow5mult+0x40>
 8021dec:	4b1d      	ldr	r3, [pc, #116]	; (8021e64 <__pow5mult+0xac>)
 8021dee:	481e      	ldr	r0, [pc, #120]	; (8021e68 <__pow5mult+0xb0>)
 8021df0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8021df4:	f7fe ff74 	bl	8020ce0 <__assert_func>
 8021df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021dfc:	6004      	str	r4, [r0, #0]
 8021dfe:	60c4      	str	r4, [r0, #12]
 8021e00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8021e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021e08:	b94c      	cbnz	r4, 8021e1e <__pow5mult+0x66>
 8021e0a:	f240 2171 	movw	r1, #625	; 0x271
 8021e0e:	4630      	mov	r0, r6
 8021e10:	f7ff ff12 	bl	8021c38 <__i2b>
 8021e14:	2300      	movs	r3, #0
 8021e16:	f8c8 0008 	str.w	r0, [r8, #8]
 8021e1a:	4604      	mov	r4, r0
 8021e1c:	6003      	str	r3, [r0, #0]
 8021e1e:	f04f 0900 	mov.w	r9, #0
 8021e22:	07eb      	lsls	r3, r5, #31
 8021e24:	d50a      	bpl.n	8021e3c <__pow5mult+0x84>
 8021e26:	4639      	mov	r1, r7
 8021e28:	4622      	mov	r2, r4
 8021e2a:	4630      	mov	r0, r6
 8021e2c:	f7ff ff1a 	bl	8021c64 <__multiply>
 8021e30:	4639      	mov	r1, r7
 8021e32:	4680      	mov	r8, r0
 8021e34:	4630      	mov	r0, r6
 8021e36:	f7ff fdff 	bl	8021a38 <_Bfree>
 8021e3a:	4647      	mov	r7, r8
 8021e3c:	106d      	asrs	r5, r5, #1
 8021e3e:	d00b      	beq.n	8021e58 <__pow5mult+0xa0>
 8021e40:	6820      	ldr	r0, [r4, #0]
 8021e42:	b938      	cbnz	r0, 8021e54 <__pow5mult+0x9c>
 8021e44:	4622      	mov	r2, r4
 8021e46:	4621      	mov	r1, r4
 8021e48:	4630      	mov	r0, r6
 8021e4a:	f7ff ff0b 	bl	8021c64 <__multiply>
 8021e4e:	6020      	str	r0, [r4, #0]
 8021e50:	f8c0 9000 	str.w	r9, [r0]
 8021e54:	4604      	mov	r4, r0
 8021e56:	e7e4      	b.n	8021e22 <__pow5mult+0x6a>
 8021e58:	4638      	mov	r0, r7
 8021e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e5e:	bf00      	nop
 8021e60:	08025c00 	.word	0x08025c00
 8021e64:	0802585c 	.word	0x0802585c
 8021e68:	08025ab7 	.word	0x08025ab7

08021e6c <__lshift>:
 8021e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e70:	460c      	mov	r4, r1
 8021e72:	6849      	ldr	r1, [r1, #4]
 8021e74:	6923      	ldr	r3, [r4, #16]
 8021e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021e7a:	68a3      	ldr	r3, [r4, #8]
 8021e7c:	4607      	mov	r7, r0
 8021e7e:	4691      	mov	r9, r2
 8021e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021e84:	f108 0601 	add.w	r6, r8, #1
 8021e88:	42b3      	cmp	r3, r6
 8021e8a:	db0b      	blt.n	8021ea4 <__lshift+0x38>
 8021e8c:	4638      	mov	r0, r7
 8021e8e:	f7ff fd93 	bl	80219b8 <_Balloc>
 8021e92:	4605      	mov	r5, r0
 8021e94:	b948      	cbnz	r0, 8021eaa <__lshift+0x3e>
 8021e96:	4602      	mov	r2, r0
 8021e98:	4b28      	ldr	r3, [pc, #160]	; (8021f3c <__lshift+0xd0>)
 8021e9a:	4829      	ldr	r0, [pc, #164]	; (8021f40 <__lshift+0xd4>)
 8021e9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8021ea0:	f7fe ff1e 	bl	8020ce0 <__assert_func>
 8021ea4:	3101      	adds	r1, #1
 8021ea6:	005b      	lsls	r3, r3, #1
 8021ea8:	e7ee      	b.n	8021e88 <__lshift+0x1c>
 8021eaa:	2300      	movs	r3, #0
 8021eac:	f100 0114 	add.w	r1, r0, #20
 8021eb0:	f100 0210 	add.w	r2, r0, #16
 8021eb4:	4618      	mov	r0, r3
 8021eb6:	4553      	cmp	r3, sl
 8021eb8:	db33      	blt.n	8021f22 <__lshift+0xb6>
 8021eba:	6920      	ldr	r0, [r4, #16]
 8021ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021ec0:	f104 0314 	add.w	r3, r4, #20
 8021ec4:	f019 091f 	ands.w	r9, r9, #31
 8021ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021ecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021ed0:	d02b      	beq.n	8021f2a <__lshift+0xbe>
 8021ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8021ed6:	468a      	mov	sl, r1
 8021ed8:	2200      	movs	r2, #0
 8021eda:	6818      	ldr	r0, [r3, #0]
 8021edc:	fa00 f009 	lsl.w	r0, r0, r9
 8021ee0:	4310      	orrs	r0, r2
 8021ee2:	f84a 0b04 	str.w	r0, [sl], #4
 8021ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8021eea:	459c      	cmp	ip, r3
 8021eec:	fa22 f20e 	lsr.w	r2, r2, lr
 8021ef0:	d8f3      	bhi.n	8021eda <__lshift+0x6e>
 8021ef2:	ebac 0304 	sub.w	r3, ip, r4
 8021ef6:	3b15      	subs	r3, #21
 8021ef8:	f023 0303 	bic.w	r3, r3, #3
 8021efc:	3304      	adds	r3, #4
 8021efe:	f104 0015 	add.w	r0, r4, #21
 8021f02:	4584      	cmp	ip, r0
 8021f04:	bf38      	it	cc
 8021f06:	2304      	movcc	r3, #4
 8021f08:	50ca      	str	r2, [r1, r3]
 8021f0a:	b10a      	cbz	r2, 8021f10 <__lshift+0xa4>
 8021f0c:	f108 0602 	add.w	r6, r8, #2
 8021f10:	3e01      	subs	r6, #1
 8021f12:	4638      	mov	r0, r7
 8021f14:	612e      	str	r6, [r5, #16]
 8021f16:	4621      	mov	r1, r4
 8021f18:	f7ff fd8e 	bl	8021a38 <_Bfree>
 8021f1c:	4628      	mov	r0, r5
 8021f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f22:	f842 0f04 	str.w	r0, [r2, #4]!
 8021f26:	3301      	adds	r3, #1
 8021f28:	e7c5      	b.n	8021eb6 <__lshift+0x4a>
 8021f2a:	3904      	subs	r1, #4
 8021f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f30:	f841 2f04 	str.w	r2, [r1, #4]!
 8021f34:	459c      	cmp	ip, r3
 8021f36:	d8f9      	bhi.n	8021f2c <__lshift+0xc0>
 8021f38:	e7ea      	b.n	8021f10 <__lshift+0xa4>
 8021f3a:	bf00      	nop
 8021f3c:	08025aa6 	.word	0x08025aa6
 8021f40:	08025ab7 	.word	0x08025ab7

08021f44 <__mcmp>:
 8021f44:	b530      	push	{r4, r5, lr}
 8021f46:	6902      	ldr	r2, [r0, #16]
 8021f48:	690c      	ldr	r4, [r1, #16]
 8021f4a:	1b12      	subs	r2, r2, r4
 8021f4c:	d10e      	bne.n	8021f6c <__mcmp+0x28>
 8021f4e:	f100 0314 	add.w	r3, r0, #20
 8021f52:	3114      	adds	r1, #20
 8021f54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021f58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021f5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021f60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021f64:	42a5      	cmp	r5, r4
 8021f66:	d003      	beq.n	8021f70 <__mcmp+0x2c>
 8021f68:	d305      	bcc.n	8021f76 <__mcmp+0x32>
 8021f6a:	2201      	movs	r2, #1
 8021f6c:	4610      	mov	r0, r2
 8021f6e:	bd30      	pop	{r4, r5, pc}
 8021f70:	4283      	cmp	r3, r0
 8021f72:	d3f3      	bcc.n	8021f5c <__mcmp+0x18>
 8021f74:	e7fa      	b.n	8021f6c <__mcmp+0x28>
 8021f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021f7a:	e7f7      	b.n	8021f6c <__mcmp+0x28>

08021f7c <__mdiff>:
 8021f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f80:	460c      	mov	r4, r1
 8021f82:	4606      	mov	r6, r0
 8021f84:	4611      	mov	r1, r2
 8021f86:	4620      	mov	r0, r4
 8021f88:	4690      	mov	r8, r2
 8021f8a:	f7ff ffdb 	bl	8021f44 <__mcmp>
 8021f8e:	1e05      	subs	r5, r0, #0
 8021f90:	d110      	bne.n	8021fb4 <__mdiff+0x38>
 8021f92:	4629      	mov	r1, r5
 8021f94:	4630      	mov	r0, r6
 8021f96:	f7ff fd0f 	bl	80219b8 <_Balloc>
 8021f9a:	b930      	cbnz	r0, 8021faa <__mdiff+0x2e>
 8021f9c:	4b3a      	ldr	r3, [pc, #232]	; (8022088 <__mdiff+0x10c>)
 8021f9e:	4602      	mov	r2, r0
 8021fa0:	f240 2137 	movw	r1, #567	; 0x237
 8021fa4:	4839      	ldr	r0, [pc, #228]	; (802208c <__mdiff+0x110>)
 8021fa6:	f7fe fe9b 	bl	8020ce0 <__assert_func>
 8021faa:	2301      	movs	r3, #1
 8021fac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fb4:	bfa4      	itt	ge
 8021fb6:	4643      	movge	r3, r8
 8021fb8:	46a0      	movge	r8, r4
 8021fba:	4630      	mov	r0, r6
 8021fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021fc0:	bfa6      	itte	ge
 8021fc2:	461c      	movge	r4, r3
 8021fc4:	2500      	movge	r5, #0
 8021fc6:	2501      	movlt	r5, #1
 8021fc8:	f7ff fcf6 	bl	80219b8 <_Balloc>
 8021fcc:	b920      	cbnz	r0, 8021fd8 <__mdiff+0x5c>
 8021fce:	4b2e      	ldr	r3, [pc, #184]	; (8022088 <__mdiff+0x10c>)
 8021fd0:	4602      	mov	r2, r0
 8021fd2:	f240 2145 	movw	r1, #581	; 0x245
 8021fd6:	e7e5      	b.n	8021fa4 <__mdiff+0x28>
 8021fd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8021fdc:	6926      	ldr	r6, [r4, #16]
 8021fde:	60c5      	str	r5, [r0, #12]
 8021fe0:	f104 0914 	add.w	r9, r4, #20
 8021fe4:	f108 0514 	add.w	r5, r8, #20
 8021fe8:	f100 0e14 	add.w	lr, r0, #20
 8021fec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8021ff0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8021ff4:	f108 0210 	add.w	r2, r8, #16
 8021ff8:	46f2      	mov	sl, lr
 8021ffa:	2100      	movs	r1, #0
 8021ffc:	f859 3b04 	ldr.w	r3, [r9], #4
 8022000:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022004:	fa11 f88b 	uxtah	r8, r1, fp
 8022008:	b299      	uxth	r1, r3
 802200a:	0c1b      	lsrs	r3, r3, #16
 802200c:	eba8 0801 	sub.w	r8, r8, r1
 8022010:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022014:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022018:	fa1f f888 	uxth.w	r8, r8
 802201c:	1419      	asrs	r1, r3, #16
 802201e:	454e      	cmp	r6, r9
 8022020:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022024:	f84a 3b04 	str.w	r3, [sl], #4
 8022028:	d8e8      	bhi.n	8021ffc <__mdiff+0x80>
 802202a:	1b33      	subs	r3, r6, r4
 802202c:	3b15      	subs	r3, #21
 802202e:	f023 0303 	bic.w	r3, r3, #3
 8022032:	3304      	adds	r3, #4
 8022034:	3415      	adds	r4, #21
 8022036:	42a6      	cmp	r6, r4
 8022038:	bf38      	it	cc
 802203a:	2304      	movcc	r3, #4
 802203c:	441d      	add	r5, r3
 802203e:	4473      	add	r3, lr
 8022040:	469e      	mov	lr, r3
 8022042:	462e      	mov	r6, r5
 8022044:	4566      	cmp	r6, ip
 8022046:	d30e      	bcc.n	8022066 <__mdiff+0xea>
 8022048:	f10c 0203 	add.w	r2, ip, #3
 802204c:	1b52      	subs	r2, r2, r5
 802204e:	f022 0203 	bic.w	r2, r2, #3
 8022052:	3d03      	subs	r5, #3
 8022054:	45ac      	cmp	ip, r5
 8022056:	bf38      	it	cc
 8022058:	2200      	movcc	r2, #0
 802205a:	4413      	add	r3, r2
 802205c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022060:	b17a      	cbz	r2, 8022082 <__mdiff+0x106>
 8022062:	6107      	str	r7, [r0, #16]
 8022064:	e7a4      	b.n	8021fb0 <__mdiff+0x34>
 8022066:	f856 8b04 	ldr.w	r8, [r6], #4
 802206a:	fa11 f288 	uxtah	r2, r1, r8
 802206e:	1414      	asrs	r4, r2, #16
 8022070:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022074:	b292      	uxth	r2, r2
 8022076:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802207a:	f84e 2b04 	str.w	r2, [lr], #4
 802207e:	1421      	asrs	r1, r4, #16
 8022080:	e7e0      	b.n	8022044 <__mdiff+0xc8>
 8022082:	3f01      	subs	r7, #1
 8022084:	e7ea      	b.n	802205c <__mdiff+0xe0>
 8022086:	bf00      	nop
 8022088:	08025aa6 	.word	0x08025aa6
 802208c:	08025ab7 	.word	0x08025ab7

08022090 <__ulp>:
 8022090:	b082      	sub	sp, #8
 8022092:	ed8d 0b00 	vstr	d0, [sp]
 8022096:	9a01      	ldr	r2, [sp, #4]
 8022098:	4b0f      	ldr	r3, [pc, #60]	; (80220d8 <__ulp+0x48>)
 802209a:	4013      	ands	r3, r2
 802209c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	dc08      	bgt.n	80220b6 <__ulp+0x26>
 80220a4:	425b      	negs	r3, r3
 80220a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80220aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80220ae:	da04      	bge.n	80220ba <__ulp+0x2a>
 80220b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80220b4:	4113      	asrs	r3, r2
 80220b6:	2200      	movs	r2, #0
 80220b8:	e008      	b.n	80220cc <__ulp+0x3c>
 80220ba:	f1a2 0314 	sub.w	r3, r2, #20
 80220be:	2b1e      	cmp	r3, #30
 80220c0:	bfda      	itte	le
 80220c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80220c6:	40da      	lsrle	r2, r3
 80220c8:	2201      	movgt	r2, #1
 80220ca:	2300      	movs	r3, #0
 80220cc:	4619      	mov	r1, r3
 80220ce:	4610      	mov	r0, r2
 80220d0:	ec41 0b10 	vmov	d0, r0, r1
 80220d4:	b002      	add	sp, #8
 80220d6:	4770      	bx	lr
 80220d8:	7ff00000 	.word	0x7ff00000

080220dc <__b2d>:
 80220dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220e0:	6906      	ldr	r6, [r0, #16]
 80220e2:	f100 0814 	add.w	r8, r0, #20
 80220e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80220ea:	1f37      	subs	r7, r6, #4
 80220ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80220f0:	4610      	mov	r0, r2
 80220f2:	f7ff fd53 	bl	8021b9c <__hi0bits>
 80220f6:	f1c0 0320 	rsb	r3, r0, #32
 80220fa:	280a      	cmp	r0, #10
 80220fc:	600b      	str	r3, [r1, #0]
 80220fe:	491b      	ldr	r1, [pc, #108]	; (802216c <__b2d+0x90>)
 8022100:	dc15      	bgt.n	802212e <__b2d+0x52>
 8022102:	f1c0 0c0b 	rsb	ip, r0, #11
 8022106:	fa22 f30c 	lsr.w	r3, r2, ip
 802210a:	45b8      	cmp	r8, r7
 802210c:	ea43 0501 	orr.w	r5, r3, r1
 8022110:	bf34      	ite	cc
 8022112:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8022116:	2300      	movcs	r3, #0
 8022118:	3015      	adds	r0, #21
 802211a:	fa02 f000 	lsl.w	r0, r2, r0
 802211e:	fa23 f30c 	lsr.w	r3, r3, ip
 8022122:	4303      	orrs	r3, r0
 8022124:	461c      	mov	r4, r3
 8022126:	ec45 4b10 	vmov	d0, r4, r5
 802212a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802212e:	45b8      	cmp	r8, r7
 8022130:	bf3a      	itte	cc
 8022132:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8022136:	f1a6 0708 	subcc.w	r7, r6, #8
 802213a:	2300      	movcs	r3, #0
 802213c:	380b      	subs	r0, #11
 802213e:	d012      	beq.n	8022166 <__b2d+0x8a>
 8022140:	f1c0 0120 	rsb	r1, r0, #32
 8022144:	fa23 f401 	lsr.w	r4, r3, r1
 8022148:	4082      	lsls	r2, r0
 802214a:	4322      	orrs	r2, r4
 802214c:	4547      	cmp	r7, r8
 802214e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8022152:	bf8c      	ite	hi
 8022154:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8022158:	2200      	movls	r2, #0
 802215a:	4083      	lsls	r3, r0
 802215c:	40ca      	lsrs	r2, r1
 802215e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022162:	4313      	orrs	r3, r2
 8022164:	e7de      	b.n	8022124 <__b2d+0x48>
 8022166:	ea42 0501 	orr.w	r5, r2, r1
 802216a:	e7db      	b.n	8022124 <__b2d+0x48>
 802216c:	3ff00000 	.word	0x3ff00000

08022170 <__d2b>:
 8022170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022174:	460f      	mov	r7, r1
 8022176:	2101      	movs	r1, #1
 8022178:	ec59 8b10 	vmov	r8, r9, d0
 802217c:	4616      	mov	r6, r2
 802217e:	f7ff fc1b 	bl	80219b8 <_Balloc>
 8022182:	4604      	mov	r4, r0
 8022184:	b930      	cbnz	r0, 8022194 <__d2b+0x24>
 8022186:	4602      	mov	r2, r0
 8022188:	4b24      	ldr	r3, [pc, #144]	; (802221c <__d2b+0xac>)
 802218a:	4825      	ldr	r0, [pc, #148]	; (8022220 <__d2b+0xb0>)
 802218c:	f240 310f 	movw	r1, #783	; 0x30f
 8022190:	f7fe fda6 	bl	8020ce0 <__assert_func>
 8022194:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802219c:	bb2d      	cbnz	r5, 80221ea <__d2b+0x7a>
 802219e:	9301      	str	r3, [sp, #4]
 80221a0:	f1b8 0300 	subs.w	r3, r8, #0
 80221a4:	d026      	beq.n	80221f4 <__d2b+0x84>
 80221a6:	4668      	mov	r0, sp
 80221a8:	9300      	str	r3, [sp, #0]
 80221aa:	f7ff fd17 	bl	8021bdc <__lo0bits>
 80221ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80221b2:	b1e8      	cbz	r0, 80221f0 <__d2b+0x80>
 80221b4:	f1c0 0320 	rsb	r3, r0, #32
 80221b8:	fa02 f303 	lsl.w	r3, r2, r3
 80221bc:	430b      	orrs	r3, r1
 80221be:	40c2      	lsrs	r2, r0
 80221c0:	6163      	str	r3, [r4, #20]
 80221c2:	9201      	str	r2, [sp, #4]
 80221c4:	9b01      	ldr	r3, [sp, #4]
 80221c6:	61a3      	str	r3, [r4, #24]
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	bf14      	ite	ne
 80221cc:	2202      	movne	r2, #2
 80221ce:	2201      	moveq	r2, #1
 80221d0:	6122      	str	r2, [r4, #16]
 80221d2:	b1bd      	cbz	r5, 8022204 <__d2b+0x94>
 80221d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80221d8:	4405      	add	r5, r0
 80221da:	603d      	str	r5, [r7, #0]
 80221dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80221e0:	6030      	str	r0, [r6, #0]
 80221e2:	4620      	mov	r0, r4
 80221e4:	b003      	add	sp, #12
 80221e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80221ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80221ee:	e7d6      	b.n	802219e <__d2b+0x2e>
 80221f0:	6161      	str	r1, [r4, #20]
 80221f2:	e7e7      	b.n	80221c4 <__d2b+0x54>
 80221f4:	a801      	add	r0, sp, #4
 80221f6:	f7ff fcf1 	bl	8021bdc <__lo0bits>
 80221fa:	9b01      	ldr	r3, [sp, #4]
 80221fc:	6163      	str	r3, [r4, #20]
 80221fe:	3020      	adds	r0, #32
 8022200:	2201      	movs	r2, #1
 8022202:	e7e5      	b.n	80221d0 <__d2b+0x60>
 8022204:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802220c:	6038      	str	r0, [r7, #0]
 802220e:	6918      	ldr	r0, [r3, #16]
 8022210:	f7ff fcc4 	bl	8021b9c <__hi0bits>
 8022214:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022218:	e7e2      	b.n	80221e0 <__d2b+0x70>
 802221a:	bf00      	nop
 802221c:	08025aa6 	.word	0x08025aa6
 8022220:	08025ab7 	.word	0x08025ab7

08022224 <__ratio>:
 8022224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022228:	4688      	mov	r8, r1
 802222a:	4669      	mov	r1, sp
 802222c:	4681      	mov	r9, r0
 802222e:	f7ff ff55 	bl	80220dc <__b2d>
 8022232:	a901      	add	r1, sp, #4
 8022234:	4640      	mov	r0, r8
 8022236:	ec55 4b10 	vmov	r4, r5, d0
 802223a:	ee10 aa10 	vmov	sl, s0
 802223e:	f7ff ff4d 	bl	80220dc <__b2d>
 8022242:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8022246:	f8d9 2010 	ldr.w	r2, [r9, #16]
 802224a:	1ad2      	subs	r2, r2, r3
 802224c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8022250:	1a5b      	subs	r3, r3, r1
 8022252:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8022256:	ec57 6b10 	vmov	r6, r7, d0
 802225a:	2b00      	cmp	r3, #0
 802225c:	bfd6      	itet	le
 802225e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022262:	462a      	movgt	r2, r5
 8022264:	463a      	movle	r2, r7
 8022266:	46ab      	mov	fp, r5
 8022268:	bfd6      	itet	le
 802226a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 802226e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8022272:	ee00 3a90 	vmovle	s1, r3
 8022276:	ec4b ab17 	vmov	d7, sl, fp
 802227a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 802227e:	b003      	add	sp, #12
 8022280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022284 <__copybits>:
 8022284:	3901      	subs	r1, #1
 8022286:	b570      	push	{r4, r5, r6, lr}
 8022288:	1149      	asrs	r1, r1, #5
 802228a:	6914      	ldr	r4, [r2, #16]
 802228c:	3101      	adds	r1, #1
 802228e:	f102 0314 	add.w	r3, r2, #20
 8022292:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022296:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802229a:	1f05      	subs	r5, r0, #4
 802229c:	42a3      	cmp	r3, r4
 802229e:	d30c      	bcc.n	80222ba <__copybits+0x36>
 80222a0:	1aa3      	subs	r3, r4, r2
 80222a2:	3b11      	subs	r3, #17
 80222a4:	f023 0303 	bic.w	r3, r3, #3
 80222a8:	3211      	adds	r2, #17
 80222aa:	42a2      	cmp	r2, r4
 80222ac:	bf88      	it	hi
 80222ae:	2300      	movhi	r3, #0
 80222b0:	4418      	add	r0, r3
 80222b2:	2300      	movs	r3, #0
 80222b4:	4288      	cmp	r0, r1
 80222b6:	d305      	bcc.n	80222c4 <__copybits+0x40>
 80222b8:	bd70      	pop	{r4, r5, r6, pc}
 80222ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80222be:	f845 6f04 	str.w	r6, [r5, #4]!
 80222c2:	e7eb      	b.n	802229c <__copybits+0x18>
 80222c4:	f840 3b04 	str.w	r3, [r0], #4
 80222c8:	e7f4      	b.n	80222b4 <__copybits+0x30>

080222ca <__any_on>:
 80222ca:	f100 0214 	add.w	r2, r0, #20
 80222ce:	6900      	ldr	r0, [r0, #16]
 80222d0:	114b      	asrs	r3, r1, #5
 80222d2:	4298      	cmp	r0, r3
 80222d4:	b510      	push	{r4, lr}
 80222d6:	db11      	blt.n	80222fc <__any_on+0x32>
 80222d8:	dd0a      	ble.n	80222f0 <__any_on+0x26>
 80222da:	f011 011f 	ands.w	r1, r1, #31
 80222de:	d007      	beq.n	80222f0 <__any_on+0x26>
 80222e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80222e4:	fa24 f001 	lsr.w	r0, r4, r1
 80222e8:	fa00 f101 	lsl.w	r1, r0, r1
 80222ec:	428c      	cmp	r4, r1
 80222ee:	d10b      	bne.n	8022308 <__any_on+0x3e>
 80222f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80222f4:	4293      	cmp	r3, r2
 80222f6:	d803      	bhi.n	8022300 <__any_on+0x36>
 80222f8:	2000      	movs	r0, #0
 80222fa:	bd10      	pop	{r4, pc}
 80222fc:	4603      	mov	r3, r0
 80222fe:	e7f7      	b.n	80222f0 <__any_on+0x26>
 8022300:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022304:	2900      	cmp	r1, #0
 8022306:	d0f5      	beq.n	80222f4 <__any_on+0x2a>
 8022308:	2001      	movs	r0, #1
 802230a:	e7f6      	b.n	80222fa <__any_on+0x30>

0802230c <_malloc_usable_size_r>:
 802230c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022310:	1f18      	subs	r0, r3, #4
 8022312:	2b00      	cmp	r3, #0
 8022314:	bfbc      	itt	lt
 8022316:	580b      	ldrlt	r3, [r1, r0]
 8022318:	18c0      	addlt	r0, r0, r3
 802231a:	4770      	bx	lr

0802231c <sulp>:
 802231c:	b570      	push	{r4, r5, r6, lr}
 802231e:	4604      	mov	r4, r0
 8022320:	460d      	mov	r5, r1
 8022322:	4616      	mov	r6, r2
 8022324:	ec45 4b10 	vmov	d0, r4, r5
 8022328:	f7ff feb2 	bl	8022090 <__ulp>
 802232c:	b17e      	cbz	r6, 802234e <sulp+0x32>
 802232e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8022332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022336:	2b00      	cmp	r3, #0
 8022338:	dd09      	ble.n	802234e <sulp+0x32>
 802233a:	051b      	lsls	r3, r3, #20
 802233c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8022340:	2000      	movs	r0, #0
 8022342:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8022346:	ec41 0b17 	vmov	d7, r0, r1
 802234a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802234e:	bd70      	pop	{r4, r5, r6, pc}

08022350 <_strtod_l>:
 8022350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022354:	ed2d 8b0e 	vpush	{d8-d14}
 8022358:	b097      	sub	sp, #92	; 0x5c
 802235a:	4604      	mov	r4, r0
 802235c:	920d      	str	r2, [sp, #52]	; 0x34
 802235e:	2200      	movs	r2, #0
 8022360:	9212      	str	r2, [sp, #72]	; 0x48
 8022362:	468a      	mov	sl, r1
 8022364:	f04f 0800 	mov.w	r8, #0
 8022368:	f04f 0900 	mov.w	r9, #0
 802236c:	460a      	mov	r2, r1
 802236e:	9211      	str	r2, [sp, #68]	; 0x44
 8022370:	7811      	ldrb	r1, [r2, #0]
 8022372:	292b      	cmp	r1, #43	; 0x2b
 8022374:	d04c      	beq.n	8022410 <_strtod_l+0xc0>
 8022376:	d839      	bhi.n	80223ec <_strtod_l+0x9c>
 8022378:	290d      	cmp	r1, #13
 802237a:	d833      	bhi.n	80223e4 <_strtod_l+0x94>
 802237c:	2908      	cmp	r1, #8
 802237e:	d833      	bhi.n	80223e8 <_strtod_l+0x98>
 8022380:	2900      	cmp	r1, #0
 8022382:	d03c      	beq.n	80223fe <_strtod_l+0xae>
 8022384:	2200      	movs	r2, #0
 8022386:	9208      	str	r2, [sp, #32]
 8022388:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802238a:	7832      	ldrb	r2, [r6, #0]
 802238c:	2a30      	cmp	r2, #48	; 0x30
 802238e:	f040 80b8 	bne.w	8022502 <_strtod_l+0x1b2>
 8022392:	7872      	ldrb	r2, [r6, #1]
 8022394:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8022398:	2a58      	cmp	r2, #88	; 0x58
 802239a:	d170      	bne.n	802247e <_strtod_l+0x12e>
 802239c:	9302      	str	r3, [sp, #8]
 802239e:	9b08      	ldr	r3, [sp, #32]
 80223a0:	9301      	str	r3, [sp, #4]
 80223a2:	ab12      	add	r3, sp, #72	; 0x48
 80223a4:	9300      	str	r3, [sp, #0]
 80223a6:	4a91      	ldr	r2, [pc, #580]	; (80225ec <_strtod_l+0x29c>)
 80223a8:	ab13      	add	r3, sp, #76	; 0x4c
 80223aa:	a911      	add	r1, sp, #68	; 0x44
 80223ac:	4620      	mov	r0, r4
 80223ae:	f001 fa61 	bl	8023874 <__gethex>
 80223b2:	f010 070f 	ands.w	r7, r0, #15
 80223b6:	4605      	mov	r5, r0
 80223b8:	d005      	beq.n	80223c6 <_strtod_l+0x76>
 80223ba:	2f06      	cmp	r7, #6
 80223bc:	d12a      	bne.n	8022414 <_strtod_l+0xc4>
 80223be:	3601      	adds	r6, #1
 80223c0:	2300      	movs	r3, #0
 80223c2:	9611      	str	r6, [sp, #68]	; 0x44
 80223c4:	9308      	str	r3, [sp, #32]
 80223c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80223c8:	2b00      	cmp	r3, #0
 80223ca:	f040 8555 	bne.w	8022e78 <_strtod_l+0xb28>
 80223ce:	9b08      	ldr	r3, [sp, #32]
 80223d0:	ec49 8b10 	vmov	d0, r8, r9
 80223d4:	b1cb      	cbz	r3, 802240a <_strtod_l+0xba>
 80223d6:	eeb1 0b40 	vneg.f64	d0, d0
 80223da:	b017      	add	sp, #92	; 0x5c
 80223dc:	ecbd 8b0e 	vpop	{d8-d14}
 80223e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223e4:	2920      	cmp	r1, #32
 80223e6:	d1cd      	bne.n	8022384 <_strtod_l+0x34>
 80223e8:	3201      	adds	r2, #1
 80223ea:	e7c0      	b.n	802236e <_strtod_l+0x1e>
 80223ec:	292d      	cmp	r1, #45	; 0x2d
 80223ee:	d1c9      	bne.n	8022384 <_strtod_l+0x34>
 80223f0:	2101      	movs	r1, #1
 80223f2:	9108      	str	r1, [sp, #32]
 80223f4:	1c51      	adds	r1, r2, #1
 80223f6:	9111      	str	r1, [sp, #68]	; 0x44
 80223f8:	7852      	ldrb	r2, [r2, #1]
 80223fa:	2a00      	cmp	r2, #0
 80223fc:	d1c4      	bne.n	8022388 <_strtod_l+0x38>
 80223fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022400:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8022404:	2b00      	cmp	r3, #0
 8022406:	f040 8535 	bne.w	8022e74 <_strtod_l+0xb24>
 802240a:	ec49 8b10 	vmov	d0, r8, r9
 802240e:	e7e4      	b.n	80223da <_strtod_l+0x8a>
 8022410:	2100      	movs	r1, #0
 8022412:	e7ee      	b.n	80223f2 <_strtod_l+0xa2>
 8022414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022416:	b13a      	cbz	r2, 8022428 <_strtod_l+0xd8>
 8022418:	2135      	movs	r1, #53	; 0x35
 802241a:	a814      	add	r0, sp, #80	; 0x50
 802241c:	f7ff ff32 	bl	8022284 <__copybits>
 8022420:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022422:	4620      	mov	r0, r4
 8022424:	f7ff fb08 	bl	8021a38 <_Bfree>
 8022428:	1e7b      	subs	r3, r7, #1
 802242a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802242c:	2b04      	cmp	r3, #4
 802242e:	d806      	bhi.n	802243e <_strtod_l+0xee>
 8022430:	e8df f003 	tbb	[pc, r3]
 8022434:	201d0314 	.word	0x201d0314
 8022438:	14          	.byte	0x14
 8022439:	00          	.byte	0x00
 802243a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 802243e:	05eb      	lsls	r3, r5, #23
 8022440:	bf48      	it	mi
 8022442:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8022446:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802244a:	0d1b      	lsrs	r3, r3, #20
 802244c:	051b      	lsls	r3, r3, #20
 802244e:	2b00      	cmp	r3, #0
 8022450:	d1b9      	bne.n	80223c6 <_strtod_l+0x76>
 8022452:	f7fe fbfb 	bl	8020c4c <__errno>
 8022456:	2322      	movs	r3, #34	; 0x22
 8022458:	6003      	str	r3, [r0, #0]
 802245a:	e7b4      	b.n	80223c6 <_strtod_l+0x76>
 802245c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8022460:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8022464:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8022468:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802246c:	e7e7      	b.n	802243e <_strtod_l+0xee>
 802246e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80225f4 <_strtod_l+0x2a4>
 8022472:	e7e4      	b.n	802243e <_strtod_l+0xee>
 8022474:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8022478:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802247c:	e7df      	b.n	802243e <_strtod_l+0xee>
 802247e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022480:	1c5a      	adds	r2, r3, #1
 8022482:	9211      	str	r2, [sp, #68]	; 0x44
 8022484:	785b      	ldrb	r3, [r3, #1]
 8022486:	2b30      	cmp	r3, #48	; 0x30
 8022488:	d0f9      	beq.n	802247e <_strtod_l+0x12e>
 802248a:	2b00      	cmp	r3, #0
 802248c:	d09b      	beq.n	80223c6 <_strtod_l+0x76>
 802248e:	2301      	movs	r3, #1
 8022490:	9306      	str	r3, [sp, #24]
 8022492:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022494:	9309      	str	r3, [sp, #36]	; 0x24
 8022496:	2300      	movs	r3, #0
 8022498:	9305      	str	r3, [sp, #20]
 802249a:	9307      	str	r3, [sp, #28]
 802249c:	461e      	mov	r6, r3
 802249e:	220a      	movs	r2, #10
 80224a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80224a2:	7805      	ldrb	r5, [r0, #0]
 80224a4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80224a8:	b2d9      	uxtb	r1, r3
 80224aa:	2909      	cmp	r1, #9
 80224ac:	d92b      	bls.n	8022506 <_strtod_l+0x1b6>
 80224ae:	4950      	ldr	r1, [pc, #320]	; (80225f0 <_strtod_l+0x2a0>)
 80224b0:	2201      	movs	r2, #1
 80224b2:	f7fe fb48 	bl	8020b46 <strncmp>
 80224b6:	2800      	cmp	r0, #0
 80224b8:	d035      	beq.n	8022526 <_strtod_l+0x1d6>
 80224ba:	2000      	movs	r0, #0
 80224bc:	462a      	mov	r2, r5
 80224be:	4633      	mov	r3, r6
 80224c0:	4683      	mov	fp, r0
 80224c2:	4601      	mov	r1, r0
 80224c4:	2a65      	cmp	r2, #101	; 0x65
 80224c6:	d001      	beq.n	80224cc <_strtod_l+0x17c>
 80224c8:	2a45      	cmp	r2, #69	; 0x45
 80224ca:	d118      	bne.n	80224fe <_strtod_l+0x1ae>
 80224cc:	b91b      	cbnz	r3, 80224d6 <_strtod_l+0x186>
 80224ce:	9b06      	ldr	r3, [sp, #24]
 80224d0:	4303      	orrs	r3, r0
 80224d2:	d094      	beq.n	80223fe <_strtod_l+0xae>
 80224d4:	2300      	movs	r3, #0
 80224d6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80224da:	f10a 0201 	add.w	r2, sl, #1
 80224de:	9211      	str	r2, [sp, #68]	; 0x44
 80224e0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80224e4:	2a2b      	cmp	r2, #43	; 0x2b
 80224e6:	d075      	beq.n	80225d4 <_strtod_l+0x284>
 80224e8:	2a2d      	cmp	r2, #45	; 0x2d
 80224ea:	d07b      	beq.n	80225e4 <_strtod_l+0x294>
 80224ec:	f04f 0e00 	mov.w	lr, #0
 80224f0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80224f4:	2d09      	cmp	r5, #9
 80224f6:	f240 8083 	bls.w	8022600 <_strtod_l+0x2b0>
 80224fa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80224fe:	2500      	movs	r5, #0
 8022500:	e09e      	b.n	8022640 <_strtod_l+0x2f0>
 8022502:	2300      	movs	r3, #0
 8022504:	e7c4      	b.n	8022490 <_strtod_l+0x140>
 8022506:	2e08      	cmp	r6, #8
 8022508:	bfd5      	itete	le
 802250a:	9907      	ldrle	r1, [sp, #28]
 802250c:	9905      	ldrgt	r1, [sp, #20]
 802250e:	fb02 3301 	mlale	r3, r2, r1, r3
 8022512:	fb02 3301 	mlagt	r3, r2, r1, r3
 8022516:	f100 0001 	add.w	r0, r0, #1
 802251a:	bfd4      	ite	le
 802251c:	9307      	strle	r3, [sp, #28]
 802251e:	9305      	strgt	r3, [sp, #20]
 8022520:	3601      	adds	r6, #1
 8022522:	9011      	str	r0, [sp, #68]	; 0x44
 8022524:	e7bc      	b.n	80224a0 <_strtod_l+0x150>
 8022526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022528:	1c5a      	adds	r2, r3, #1
 802252a:	9211      	str	r2, [sp, #68]	; 0x44
 802252c:	785a      	ldrb	r2, [r3, #1]
 802252e:	b3ae      	cbz	r6, 802259c <_strtod_l+0x24c>
 8022530:	4683      	mov	fp, r0
 8022532:	4633      	mov	r3, r6
 8022534:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8022538:	2909      	cmp	r1, #9
 802253a:	d912      	bls.n	8022562 <_strtod_l+0x212>
 802253c:	2101      	movs	r1, #1
 802253e:	e7c1      	b.n	80224c4 <_strtod_l+0x174>
 8022540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022542:	1c5a      	adds	r2, r3, #1
 8022544:	9211      	str	r2, [sp, #68]	; 0x44
 8022546:	785a      	ldrb	r2, [r3, #1]
 8022548:	3001      	adds	r0, #1
 802254a:	2a30      	cmp	r2, #48	; 0x30
 802254c:	d0f8      	beq.n	8022540 <_strtod_l+0x1f0>
 802254e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8022552:	2b08      	cmp	r3, #8
 8022554:	f200 8495 	bhi.w	8022e82 <_strtod_l+0xb32>
 8022558:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802255a:	9309      	str	r3, [sp, #36]	; 0x24
 802255c:	4683      	mov	fp, r0
 802255e:	2000      	movs	r0, #0
 8022560:	4603      	mov	r3, r0
 8022562:	3a30      	subs	r2, #48	; 0x30
 8022564:	f100 0101 	add.w	r1, r0, #1
 8022568:	d012      	beq.n	8022590 <_strtod_l+0x240>
 802256a:	448b      	add	fp, r1
 802256c:	eb00 0c03 	add.w	ip, r0, r3
 8022570:	4619      	mov	r1, r3
 8022572:	250a      	movs	r5, #10
 8022574:	4561      	cmp	r1, ip
 8022576:	d113      	bne.n	80225a0 <_strtod_l+0x250>
 8022578:	1819      	adds	r1, r3, r0
 802257a:	2908      	cmp	r1, #8
 802257c:	f103 0301 	add.w	r3, r3, #1
 8022580:	4403      	add	r3, r0
 8022582:	dc1b      	bgt.n	80225bc <_strtod_l+0x26c>
 8022584:	9807      	ldr	r0, [sp, #28]
 8022586:	210a      	movs	r1, #10
 8022588:	fb01 2200 	mla	r2, r1, r0, r2
 802258c:	9207      	str	r2, [sp, #28]
 802258e:	2100      	movs	r1, #0
 8022590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022592:	1c50      	adds	r0, r2, #1
 8022594:	9011      	str	r0, [sp, #68]	; 0x44
 8022596:	7852      	ldrb	r2, [r2, #1]
 8022598:	4608      	mov	r0, r1
 802259a:	e7cb      	b.n	8022534 <_strtod_l+0x1e4>
 802259c:	4630      	mov	r0, r6
 802259e:	e7d4      	b.n	802254a <_strtod_l+0x1fa>
 80225a0:	2908      	cmp	r1, #8
 80225a2:	f101 0101 	add.w	r1, r1, #1
 80225a6:	dc03      	bgt.n	80225b0 <_strtod_l+0x260>
 80225a8:	9f07      	ldr	r7, [sp, #28]
 80225aa:	436f      	muls	r7, r5
 80225ac:	9707      	str	r7, [sp, #28]
 80225ae:	e7e1      	b.n	8022574 <_strtod_l+0x224>
 80225b0:	2910      	cmp	r1, #16
 80225b2:	bfde      	ittt	le
 80225b4:	9f05      	ldrle	r7, [sp, #20]
 80225b6:	436f      	mulle	r7, r5
 80225b8:	9705      	strle	r7, [sp, #20]
 80225ba:	e7db      	b.n	8022574 <_strtod_l+0x224>
 80225bc:	2b10      	cmp	r3, #16
 80225be:	bfdf      	itttt	le
 80225c0:	9805      	ldrle	r0, [sp, #20]
 80225c2:	210a      	movle	r1, #10
 80225c4:	fb01 2200 	mlale	r2, r1, r0, r2
 80225c8:	9205      	strle	r2, [sp, #20]
 80225ca:	e7e0      	b.n	802258e <_strtod_l+0x23e>
 80225cc:	f04f 0b00 	mov.w	fp, #0
 80225d0:	2101      	movs	r1, #1
 80225d2:	e77c      	b.n	80224ce <_strtod_l+0x17e>
 80225d4:	f04f 0e00 	mov.w	lr, #0
 80225d8:	f10a 0202 	add.w	r2, sl, #2
 80225dc:	9211      	str	r2, [sp, #68]	; 0x44
 80225de:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80225e2:	e785      	b.n	80224f0 <_strtod_l+0x1a0>
 80225e4:	f04f 0e01 	mov.w	lr, #1
 80225e8:	e7f6      	b.n	80225d8 <_strtod_l+0x288>
 80225ea:	bf00      	nop
 80225ec:	08025c10 	.word	0x08025c10
 80225f0:	08025c0c 	.word	0x08025c0c
 80225f4:	7ff00000 	.word	0x7ff00000
 80225f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225fa:	1c55      	adds	r5, r2, #1
 80225fc:	9511      	str	r5, [sp, #68]	; 0x44
 80225fe:	7852      	ldrb	r2, [r2, #1]
 8022600:	2a30      	cmp	r2, #48	; 0x30
 8022602:	d0f9      	beq.n	80225f8 <_strtod_l+0x2a8>
 8022604:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8022608:	2d08      	cmp	r5, #8
 802260a:	f63f af78 	bhi.w	80224fe <_strtod_l+0x1ae>
 802260e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8022612:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022614:	920a      	str	r2, [sp, #40]	; 0x28
 8022616:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022618:	1c55      	adds	r5, r2, #1
 802261a:	9511      	str	r5, [sp, #68]	; 0x44
 802261c:	7852      	ldrb	r2, [r2, #1]
 802261e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8022622:	2f09      	cmp	r7, #9
 8022624:	d937      	bls.n	8022696 <_strtod_l+0x346>
 8022626:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022628:	1bed      	subs	r5, r5, r7
 802262a:	2d08      	cmp	r5, #8
 802262c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8022630:	dc02      	bgt.n	8022638 <_strtod_l+0x2e8>
 8022632:	4565      	cmp	r5, ip
 8022634:	bfa8      	it	ge
 8022636:	4665      	movge	r5, ip
 8022638:	f1be 0f00 	cmp.w	lr, #0
 802263c:	d000      	beq.n	8022640 <_strtod_l+0x2f0>
 802263e:	426d      	negs	r5, r5
 8022640:	2b00      	cmp	r3, #0
 8022642:	d14d      	bne.n	80226e0 <_strtod_l+0x390>
 8022644:	9b06      	ldr	r3, [sp, #24]
 8022646:	4303      	orrs	r3, r0
 8022648:	f47f aebd 	bne.w	80223c6 <_strtod_l+0x76>
 802264c:	2900      	cmp	r1, #0
 802264e:	f47f aed6 	bne.w	80223fe <_strtod_l+0xae>
 8022652:	2a69      	cmp	r2, #105	; 0x69
 8022654:	d027      	beq.n	80226a6 <_strtod_l+0x356>
 8022656:	dc24      	bgt.n	80226a2 <_strtod_l+0x352>
 8022658:	2a49      	cmp	r2, #73	; 0x49
 802265a:	d024      	beq.n	80226a6 <_strtod_l+0x356>
 802265c:	2a4e      	cmp	r2, #78	; 0x4e
 802265e:	f47f aece 	bne.w	80223fe <_strtod_l+0xae>
 8022662:	4995      	ldr	r1, [pc, #596]	; (80228b8 <_strtod_l+0x568>)
 8022664:	a811      	add	r0, sp, #68	; 0x44
 8022666:	f001 fb45 	bl	8023cf4 <__match>
 802266a:	2800      	cmp	r0, #0
 802266c:	f43f aec7 	beq.w	80223fe <_strtod_l+0xae>
 8022670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022672:	781b      	ldrb	r3, [r3, #0]
 8022674:	2b28      	cmp	r3, #40	; 0x28
 8022676:	d12d      	bne.n	80226d4 <_strtod_l+0x384>
 8022678:	4990      	ldr	r1, [pc, #576]	; (80228bc <_strtod_l+0x56c>)
 802267a:	aa14      	add	r2, sp, #80	; 0x50
 802267c:	a811      	add	r0, sp, #68	; 0x44
 802267e:	f001 fb4d 	bl	8023d1c <__hexnan>
 8022682:	2805      	cmp	r0, #5
 8022684:	d126      	bne.n	80226d4 <_strtod_l+0x384>
 8022686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022688:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802268c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8022690:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8022694:	e697      	b.n	80223c6 <_strtod_l+0x76>
 8022696:	250a      	movs	r5, #10
 8022698:	fb05 2c0c 	mla	ip, r5, ip, r2
 802269c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80226a0:	e7b9      	b.n	8022616 <_strtod_l+0x2c6>
 80226a2:	2a6e      	cmp	r2, #110	; 0x6e
 80226a4:	e7db      	b.n	802265e <_strtod_l+0x30e>
 80226a6:	4986      	ldr	r1, [pc, #536]	; (80228c0 <_strtod_l+0x570>)
 80226a8:	a811      	add	r0, sp, #68	; 0x44
 80226aa:	f001 fb23 	bl	8023cf4 <__match>
 80226ae:	2800      	cmp	r0, #0
 80226b0:	f43f aea5 	beq.w	80223fe <_strtod_l+0xae>
 80226b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226b6:	4983      	ldr	r1, [pc, #524]	; (80228c4 <_strtod_l+0x574>)
 80226b8:	3b01      	subs	r3, #1
 80226ba:	a811      	add	r0, sp, #68	; 0x44
 80226bc:	9311      	str	r3, [sp, #68]	; 0x44
 80226be:	f001 fb19 	bl	8023cf4 <__match>
 80226c2:	b910      	cbnz	r0, 80226ca <_strtod_l+0x37a>
 80226c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226c6:	3301      	adds	r3, #1
 80226c8:	9311      	str	r3, [sp, #68]	; 0x44
 80226ca:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80228d8 <_strtod_l+0x588>
 80226ce:	f04f 0800 	mov.w	r8, #0
 80226d2:	e678      	b.n	80223c6 <_strtod_l+0x76>
 80226d4:	487c      	ldr	r0, [pc, #496]	; (80228c8 <_strtod_l+0x578>)
 80226d6:	f001 f857 	bl	8023788 <nan>
 80226da:	ec59 8b10 	vmov	r8, r9, d0
 80226de:	e672      	b.n	80223c6 <_strtod_l+0x76>
 80226e0:	eddd 7a07 	vldr	s15, [sp, #28]
 80226e4:	eba5 020b 	sub.w	r2, r5, fp
 80226e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80226ec:	2e00      	cmp	r6, #0
 80226ee:	bf08      	it	eq
 80226f0:	461e      	moveq	r6, r3
 80226f2:	2b10      	cmp	r3, #16
 80226f4:	9206      	str	r2, [sp, #24]
 80226f6:	461a      	mov	r2, r3
 80226f8:	bfa8      	it	ge
 80226fa:	2210      	movge	r2, #16
 80226fc:	2b09      	cmp	r3, #9
 80226fe:	ec59 8b17 	vmov	r8, r9, d7
 8022702:	dd0c      	ble.n	802271e <_strtod_l+0x3ce>
 8022704:	4971      	ldr	r1, [pc, #452]	; (80228cc <_strtod_l+0x57c>)
 8022706:	eddd 6a05 	vldr	s13, [sp, #20]
 802270a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802270e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8022712:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8022716:	eea7 6b05 	vfma.f64	d6, d7, d5
 802271a:	ec59 8b16 	vmov	r8, r9, d6
 802271e:	2b0f      	cmp	r3, #15
 8022720:	dc37      	bgt.n	8022792 <_strtod_l+0x442>
 8022722:	9906      	ldr	r1, [sp, #24]
 8022724:	2900      	cmp	r1, #0
 8022726:	f43f ae4e 	beq.w	80223c6 <_strtod_l+0x76>
 802272a:	dd23      	ble.n	8022774 <_strtod_l+0x424>
 802272c:	2916      	cmp	r1, #22
 802272e:	dc0b      	bgt.n	8022748 <_strtod_l+0x3f8>
 8022730:	4b66      	ldr	r3, [pc, #408]	; (80228cc <_strtod_l+0x57c>)
 8022732:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8022736:	ed93 7b00 	vldr	d7, [r3]
 802273a:	ec49 8b16 	vmov	d6, r8, r9
 802273e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022742:	ec59 8b17 	vmov	r8, r9, d7
 8022746:	e63e      	b.n	80223c6 <_strtod_l+0x76>
 8022748:	9806      	ldr	r0, [sp, #24]
 802274a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 802274e:	4281      	cmp	r1, r0
 8022750:	db1f      	blt.n	8022792 <_strtod_l+0x442>
 8022752:	4a5e      	ldr	r2, [pc, #376]	; (80228cc <_strtod_l+0x57c>)
 8022754:	f1c3 030f 	rsb	r3, r3, #15
 8022758:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 802275c:	ed91 7b00 	vldr	d7, [r1]
 8022760:	ec49 8b16 	vmov	d6, r8, r9
 8022764:	1ac3      	subs	r3, r0, r3
 8022766:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802276a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802276e:	ed92 6b00 	vldr	d6, [r2]
 8022772:	e7e4      	b.n	802273e <_strtod_l+0x3ee>
 8022774:	9906      	ldr	r1, [sp, #24]
 8022776:	3116      	adds	r1, #22
 8022778:	db0b      	blt.n	8022792 <_strtod_l+0x442>
 802277a:	4b54      	ldr	r3, [pc, #336]	; (80228cc <_strtod_l+0x57c>)
 802277c:	ebab 0505 	sub.w	r5, fp, r5
 8022780:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8022784:	ed95 7b00 	vldr	d7, [r5]
 8022788:	ec49 8b16 	vmov	d6, r8, r9
 802278c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022790:	e7d7      	b.n	8022742 <_strtod_l+0x3f2>
 8022792:	9906      	ldr	r1, [sp, #24]
 8022794:	1a9a      	subs	r2, r3, r2
 8022796:	440a      	add	r2, r1
 8022798:	2a00      	cmp	r2, #0
 802279a:	dd6e      	ble.n	802287a <_strtod_l+0x52a>
 802279c:	f012 000f 	ands.w	r0, r2, #15
 80227a0:	d00a      	beq.n	80227b8 <_strtod_l+0x468>
 80227a2:	494a      	ldr	r1, [pc, #296]	; (80228cc <_strtod_l+0x57c>)
 80227a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80227a8:	ed91 7b00 	vldr	d7, [r1]
 80227ac:	ec49 8b16 	vmov	d6, r8, r9
 80227b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80227b4:	ec59 8b17 	vmov	r8, r9, d7
 80227b8:	f032 020f 	bics.w	r2, r2, #15
 80227bc:	d04e      	beq.n	802285c <_strtod_l+0x50c>
 80227be:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80227c2:	dd22      	ble.n	802280a <_strtod_l+0x4ba>
 80227c4:	2500      	movs	r5, #0
 80227c6:	462e      	mov	r6, r5
 80227c8:	9507      	str	r5, [sp, #28]
 80227ca:	462f      	mov	r7, r5
 80227cc:	2322      	movs	r3, #34	; 0x22
 80227ce:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80228d8 <_strtod_l+0x588>
 80227d2:	6023      	str	r3, [r4, #0]
 80227d4:	f04f 0800 	mov.w	r8, #0
 80227d8:	9b07      	ldr	r3, [sp, #28]
 80227da:	2b00      	cmp	r3, #0
 80227dc:	f43f adf3 	beq.w	80223c6 <_strtod_l+0x76>
 80227e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80227e2:	4620      	mov	r0, r4
 80227e4:	f7ff f928 	bl	8021a38 <_Bfree>
 80227e8:	4639      	mov	r1, r7
 80227ea:	4620      	mov	r0, r4
 80227ec:	f7ff f924 	bl	8021a38 <_Bfree>
 80227f0:	4631      	mov	r1, r6
 80227f2:	4620      	mov	r0, r4
 80227f4:	f7ff f920 	bl	8021a38 <_Bfree>
 80227f8:	9907      	ldr	r1, [sp, #28]
 80227fa:	4620      	mov	r0, r4
 80227fc:	f7ff f91c 	bl	8021a38 <_Bfree>
 8022800:	4629      	mov	r1, r5
 8022802:	4620      	mov	r0, r4
 8022804:	f7ff f918 	bl	8021a38 <_Bfree>
 8022808:	e5dd      	b.n	80223c6 <_strtod_l+0x76>
 802280a:	2000      	movs	r0, #0
 802280c:	ec49 8b17 	vmov	d7, r8, r9
 8022810:	4f2f      	ldr	r7, [pc, #188]	; (80228d0 <_strtod_l+0x580>)
 8022812:	1112      	asrs	r2, r2, #4
 8022814:	4601      	mov	r1, r0
 8022816:	2a01      	cmp	r2, #1
 8022818:	dc23      	bgt.n	8022862 <_strtod_l+0x512>
 802281a:	b108      	cbz	r0, 8022820 <_strtod_l+0x4d0>
 802281c:	ec59 8b17 	vmov	r8, r9, d7
 8022820:	4a2b      	ldr	r2, [pc, #172]	; (80228d0 <_strtod_l+0x580>)
 8022822:	482c      	ldr	r0, [pc, #176]	; (80228d4 <_strtod_l+0x584>)
 8022824:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8022828:	ed92 7b00 	vldr	d7, [r2]
 802282c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8022830:	ec49 8b16 	vmov	d6, r8, r9
 8022834:	4a28      	ldr	r2, [pc, #160]	; (80228d8 <_strtod_l+0x588>)
 8022836:	ee27 7b06 	vmul.f64	d7, d7, d6
 802283a:	ee17 1a90 	vmov	r1, s15
 802283e:	400a      	ands	r2, r1
 8022840:	4282      	cmp	r2, r0
 8022842:	ec59 8b17 	vmov	r8, r9, d7
 8022846:	d8bd      	bhi.n	80227c4 <_strtod_l+0x474>
 8022848:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 802284c:	4282      	cmp	r2, r0
 802284e:	bf86      	itte	hi
 8022850:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80228dc <_strtod_l+0x58c>
 8022854:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8022858:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 802285c:	2200      	movs	r2, #0
 802285e:	9205      	str	r2, [sp, #20]
 8022860:	e076      	b.n	8022950 <_strtod_l+0x600>
 8022862:	f012 0f01 	tst.w	r2, #1
 8022866:	d004      	beq.n	8022872 <_strtod_l+0x522>
 8022868:	ed97 6b00 	vldr	d6, [r7]
 802286c:	2001      	movs	r0, #1
 802286e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022872:	3101      	adds	r1, #1
 8022874:	1052      	asrs	r2, r2, #1
 8022876:	3708      	adds	r7, #8
 8022878:	e7cd      	b.n	8022816 <_strtod_l+0x4c6>
 802287a:	d0ef      	beq.n	802285c <_strtod_l+0x50c>
 802287c:	4252      	negs	r2, r2
 802287e:	f012 000f 	ands.w	r0, r2, #15
 8022882:	d00a      	beq.n	802289a <_strtod_l+0x54a>
 8022884:	4911      	ldr	r1, [pc, #68]	; (80228cc <_strtod_l+0x57c>)
 8022886:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 802288a:	ed91 7b00 	vldr	d7, [r1]
 802288e:	ec49 8b16 	vmov	d6, r8, r9
 8022892:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022896:	ec59 8b17 	vmov	r8, r9, d7
 802289a:	1112      	asrs	r2, r2, #4
 802289c:	d0de      	beq.n	802285c <_strtod_l+0x50c>
 802289e:	2a1f      	cmp	r2, #31
 80228a0:	dd1e      	ble.n	80228e0 <_strtod_l+0x590>
 80228a2:	2500      	movs	r5, #0
 80228a4:	462e      	mov	r6, r5
 80228a6:	9507      	str	r5, [sp, #28]
 80228a8:	462f      	mov	r7, r5
 80228aa:	2322      	movs	r3, #34	; 0x22
 80228ac:	f04f 0800 	mov.w	r8, #0
 80228b0:	f04f 0900 	mov.w	r9, #0
 80228b4:	6023      	str	r3, [r4, #0]
 80228b6:	e78f      	b.n	80227d8 <_strtod_l+0x488>
 80228b8:	080259d9 	.word	0x080259d9
 80228bc:	08025c24 	.word	0x08025c24
 80228c0:	080259d1 	.word	0x080259d1
 80228c4:	08025a44 	.word	0x08025a44
 80228c8:	08025a40 	.word	0x08025a40
 80228cc:	08025b38 	.word	0x08025b38
 80228d0:	08025b10 	.word	0x08025b10
 80228d4:	7ca00000 	.word	0x7ca00000
 80228d8:	7ff00000 	.word	0x7ff00000
 80228dc:	7fefffff 	.word	0x7fefffff
 80228e0:	f012 0110 	ands.w	r1, r2, #16
 80228e4:	bf18      	it	ne
 80228e6:	216a      	movne	r1, #106	; 0x6a
 80228e8:	9105      	str	r1, [sp, #20]
 80228ea:	ec49 8b17 	vmov	d7, r8, r9
 80228ee:	49be      	ldr	r1, [pc, #760]	; (8022be8 <_strtod_l+0x898>)
 80228f0:	2000      	movs	r0, #0
 80228f2:	07d7      	lsls	r7, r2, #31
 80228f4:	d504      	bpl.n	8022900 <_strtod_l+0x5b0>
 80228f6:	ed91 6b00 	vldr	d6, [r1]
 80228fa:	2001      	movs	r0, #1
 80228fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022900:	1052      	asrs	r2, r2, #1
 8022902:	f101 0108 	add.w	r1, r1, #8
 8022906:	d1f4      	bne.n	80228f2 <_strtod_l+0x5a2>
 8022908:	b108      	cbz	r0, 802290e <_strtod_l+0x5be>
 802290a:	ec59 8b17 	vmov	r8, r9, d7
 802290e:	9a05      	ldr	r2, [sp, #20]
 8022910:	b1ba      	cbz	r2, 8022942 <_strtod_l+0x5f2>
 8022912:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8022916:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 802291a:	2a00      	cmp	r2, #0
 802291c:	4648      	mov	r0, r9
 802291e:	dd10      	ble.n	8022942 <_strtod_l+0x5f2>
 8022920:	2a1f      	cmp	r2, #31
 8022922:	f340 812c 	ble.w	8022b7e <_strtod_l+0x82e>
 8022926:	2a34      	cmp	r2, #52	; 0x34
 8022928:	bfde      	ittt	le
 802292a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 802292e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8022932:	408a      	lslle	r2, r1
 8022934:	f04f 0800 	mov.w	r8, #0
 8022938:	bfcc      	ite	gt
 802293a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802293e:	ea02 0900 	andle.w	r9, r2, r0
 8022942:	ec49 8b17 	vmov	d7, r8, r9
 8022946:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802294e:	d0a8      	beq.n	80228a2 <_strtod_l+0x552>
 8022950:	9a07      	ldr	r2, [sp, #28]
 8022952:	9200      	str	r2, [sp, #0]
 8022954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022956:	4632      	mov	r2, r6
 8022958:	4620      	mov	r0, r4
 802295a:	f7ff f8d5 	bl	8021b08 <__s2b>
 802295e:	9007      	str	r0, [sp, #28]
 8022960:	2800      	cmp	r0, #0
 8022962:	f43f af2f 	beq.w	80227c4 <_strtod_l+0x474>
 8022966:	9a06      	ldr	r2, [sp, #24]
 8022968:	2a00      	cmp	r2, #0
 802296a:	ebab 0305 	sub.w	r3, fp, r5
 802296e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8022bc8 <_strtod_l+0x878>
 8022972:	bfa8      	it	ge
 8022974:	2300      	movge	r3, #0
 8022976:	ed9f ab96 	vldr	d10, [pc, #600]	; 8022bd0 <_strtod_l+0x880>
 802297a:	ed9f bb97 	vldr	d11, [pc, #604]	; 8022bd8 <_strtod_l+0x888>
 802297e:	9309      	str	r3, [sp, #36]	; 0x24
 8022980:	2500      	movs	r5, #0
 8022982:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022986:	930c      	str	r3, [sp, #48]	; 0x30
 8022988:	462e      	mov	r6, r5
 802298a:	9b07      	ldr	r3, [sp, #28]
 802298c:	4620      	mov	r0, r4
 802298e:	6859      	ldr	r1, [r3, #4]
 8022990:	f7ff f812 	bl	80219b8 <_Balloc>
 8022994:	4607      	mov	r7, r0
 8022996:	2800      	cmp	r0, #0
 8022998:	f43f af18 	beq.w	80227cc <_strtod_l+0x47c>
 802299c:	9b07      	ldr	r3, [sp, #28]
 802299e:	691a      	ldr	r2, [r3, #16]
 80229a0:	3202      	adds	r2, #2
 80229a2:	f103 010c 	add.w	r1, r3, #12
 80229a6:	0092      	lsls	r2, r2, #2
 80229a8:	300c      	adds	r0, #12
 80229aa:	f7fe f984 	bl	8020cb6 <memcpy>
 80229ae:	ec49 8b10 	vmov	d0, r8, r9
 80229b2:	aa14      	add	r2, sp, #80	; 0x50
 80229b4:	a913      	add	r1, sp, #76	; 0x4c
 80229b6:	4620      	mov	r0, r4
 80229b8:	f7ff fbda 	bl	8022170 <__d2b>
 80229bc:	ec49 8b18 	vmov	d8, r8, r9
 80229c0:	9012      	str	r0, [sp, #72]	; 0x48
 80229c2:	2800      	cmp	r0, #0
 80229c4:	f43f af02 	beq.w	80227cc <_strtod_l+0x47c>
 80229c8:	2101      	movs	r1, #1
 80229ca:	4620      	mov	r0, r4
 80229cc:	f7ff f934 	bl	8021c38 <__i2b>
 80229d0:	4606      	mov	r6, r0
 80229d2:	2800      	cmp	r0, #0
 80229d4:	f43f aefa 	beq.w	80227cc <_strtod_l+0x47c>
 80229d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80229da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80229dc:	2b00      	cmp	r3, #0
 80229de:	bfab      	itete	ge
 80229e0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80229e2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80229e4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80229e8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80229ec:	bfac      	ite	ge
 80229ee:	eb03 0b02 	addge.w	fp, r3, r2
 80229f2:	eba2 0a03 	sublt.w	sl, r2, r3
 80229f6:	9a05      	ldr	r2, [sp, #20]
 80229f8:	1a9b      	subs	r3, r3, r2
 80229fa:	440b      	add	r3, r1
 80229fc:	4a7b      	ldr	r2, [pc, #492]	; (8022bec <_strtod_l+0x89c>)
 80229fe:	3b01      	subs	r3, #1
 8022a00:	4293      	cmp	r3, r2
 8022a02:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8022a06:	f280 80cd 	bge.w	8022ba4 <_strtod_l+0x854>
 8022a0a:	1ad2      	subs	r2, r2, r3
 8022a0c:	2a1f      	cmp	r2, #31
 8022a0e:	eba1 0102 	sub.w	r1, r1, r2
 8022a12:	f04f 0001 	mov.w	r0, #1
 8022a16:	f300 80b9 	bgt.w	8022b8c <_strtod_l+0x83c>
 8022a1a:	fa00 f302 	lsl.w	r3, r0, r2
 8022a1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a20:	2300      	movs	r3, #0
 8022a22:	930a      	str	r3, [sp, #40]	; 0x28
 8022a24:	eb0b 0301 	add.w	r3, fp, r1
 8022a28:	9a05      	ldr	r2, [sp, #20]
 8022a2a:	459b      	cmp	fp, r3
 8022a2c:	448a      	add	sl, r1
 8022a2e:	4492      	add	sl, r2
 8022a30:	465a      	mov	r2, fp
 8022a32:	bfa8      	it	ge
 8022a34:	461a      	movge	r2, r3
 8022a36:	4552      	cmp	r2, sl
 8022a38:	bfa8      	it	ge
 8022a3a:	4652      	movge	r2, sl
 8022a3c:	2a00      	cmp	r2, #0
 8022a3e:	bfc2      	ittt	gt
 8022a40:	1a9b      	subgt	r3, r3, r2
 8022a42:	ebaa 0a02 	subgt.w	sl, sl, r2
 8022a46:	ebab 0b02 	subgt.w	fp, fp, r2
 8022a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a4c:	2a00      	cmp	r2, #0
 8022a4e:	dd18      	ble.n	8022a82 <_strtod_l+0x732>
 8022a50:	4631      	mov	r1, r6
 8022a52:	4620      	mov	r0, r4
 8022a54:	930f      	str	r3, [sp, #60]	; 0x3c
 8022a56:	f7ff f9af 	bl	8021db8 <__pow5mult>
 8022a5a:	4606      	mov	r6, r0
 8022a5c:	2800      	cmp	r0, #0
 8022a5e:	f43f aeb5 	beq.w	80227cc <_strtod_l+0x47c>
 8022a62:	4601      	mov	r1, r0
 8022a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a66:	4620      	mov	r0, r4
 8022a68:	f7ff f8fc 	bl	8021c64 <__multiply>
 8022a6c:	900e      	str	r0, [sp, #56]	; 0x38
 8022a6e:	2800      	cmp	r0, #0
 8022a70:	f43f aeac 	beq.w	80227cc <_strtod_l+0x47c>
 8022a74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022a76:	4620      	mov	r0, r4
 8022a78:	f7fe ffde 	bl	8021a38 <_Bfree>
 8022a7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022a80:	9212      	str	r2, [sp, #72]	; 0x48
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	f300 8093 	bgt.w	8022bae <_strtod_l+0x85e>
 8022a88:	9b06      	ldr	r3, [sp, #24]
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	dd08      	ble.n	8022aa0 <_strtod_l+0x750>
 8022a8e:	4639      	mov	r1, r7
 8022a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a92:	4620      	mov	r0, r4
 8022a94:	f7ff f990 	bl	8021db8 <__pow5mult>
 8022a98:	4607      	mov	r7, r0
 8022a9a:	2800      	cmp	r0, #0
 8022a9c:	f43f ae96 	beq.w	80227cc <_strtod_l+0x47c>
 8022aa0:	f1ba 0f00 	cmp.w	sl, #0
 8022aa4:	dd08      	ble.n	8022ab8 <_strtod_l+0x768>
 8022aa6:	4639      	mov	r1, r7
 8022aa8:	4652      	mov	r2, sl
 8022aaa:	4620      	mov	r0, r4
 8022aac:	f7ff f9de 	bl	8021e6c <__lshift>
 8022ab0:	4607      	mov	r7, r0
 8022ab2:	2800      	cmp	r0, #0
 8022ab4:	f43f ae8a 	beq.w	80227cc <_strtod_l+0x47c>
 8022ab8:	f1bb 0f00 	cmp.w	fp, #0
 8022abc:	dd08      	ble.n	8022ad0 <_strtod_l+0x780>
 8022abe:	4631      	mov	r1, r6
 8022ac0:	465a      	mov	r2, fp
 8022ac2:	4620      	mov	r0, r4
 8022ac4:	f7ff f9d2 	bl	8021e6c <__lshift>
 8022ac8:	4606      	mov	r6, r0
 8022aca:	2800      	cmp	r0, #0
 8022acc:	f43f ae7e 	beq.w	80227cc <_strtod_l+0x47c>
 8022ad0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022ad2:	463a      	mov	r2, r7
 8022ad4:	4620      	mov	r0, r4
 8022ad6:	f7ff fa51 	bl	8021f7c <__mdiff>
 8022ada:	4605      	mov	r5, r0
 8022adc:	2800      	cmp	r0, #0
 8022ade:	f43f ae75 	beq.w	80227cc <_strtod_l+0x47c>
 8022ae2:	2300      	movs	r3, #0
 8022ae4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8022ae8:	60c3      	str	r3, [r0, #12]
 8022aea:	4631      	mov	r1, r6
 8022aec:	f7ff fa2a 	bl	8021f44 <__mcmp>
 8022af0:	2800      	cmp	r0, #0
 8022af2:	da7f      	bge.n	8022bf4 <_strtod_l+0x8a4>
 8022af4:	ea5a 0a08 	orrs.w	sl, sl, r8
 8022af8:	f040 80a5 	bne.w	8022c46 <_strtod_l+0x8f6>
 8022afc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022b00:	2b00      	cmp	r3, #0
 8022b02:	f040 80a0 	bne.w	8022c46 <_strtod_l+0x8f6>
 8022b06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022b0a:	0d1b      	lsrs	r3, r3, #20
 8022b0c:	051b      	lsls	r3, r3, #20
 8022b0e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8022b12:	f240 8098 	bls.w	8022c46 <_strtod_l+0x8f6>
 8022b16:	696b      	ldr	r3, [r5, #20]
 8022b18:	b91b      	cbnz	r3, 8022b22 <_strtod_l+0x7d2>
 8022b1a:	692b      	ldr	r3, [r5, #16]
 8022b1c:	2b01      	cmp	r3, #1
 8022b1e:	f340 8092 	ble.w	8022c46 <_strtod_l+0x8f6>
 8022b22:	4629      	mov	r1, r5
 8022b24:	2201      	movs	r2, #1
 8022b26:	4620      	mov	r0, r4
 8022b28:	f7ff f9a0 	bl	8021e6c <__lshift>
 8022b2c:	4631      	mov	r1, r6
 8022b2e:	4605      	mov	r5, r0
 8022b30:	f7ff fa08 	bl	8021f44 <__mcmp>
 8022b34:	2800      	cmp	r0, #0
 8022b36:	f340 8086 	ble.w	8022c46 <_strtod_l+0x8f6>
 8022b3a:	9905      	ldr	r1, [sp, #20]
 8022b3c:	4a2c      	ldr	r2, [pc, #176]	; (8022bf0 <_strtod_l+0x8a0>)
 8022b3e:	464b      	mov	r3, r9
 8022b40:	2900      	cmp	r1, #0
 8022b42:	f000 809f 	beq.w	8022c84 <_strtod_l+0x934>
 8022b46:	ea02 0109 	and.w	r1, r2, r9
 8022b4a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8022b4e:	f300 8099 	bgt.w	8022c84 <_strtod_l+0x934>
 8022b52:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8022b56:	f77f aea8 	ble.w	80228aa <_strtod_l+0x55a>
 8022b5a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8022be0 <_strtod_l+0x890>
 8022b5e:	ec49 8b16 	vmov	d6, r8, r9
 8022b62:	4b23      	ldr	r3, [pc, #140]	; (8022bf0 <_strtod_l+0x8a0>)
 8022b64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022b68:	ee17 2a90 	vmov	r2, s15
 8022b6c:	4013      	ands	r3, r2
 8022b6e:	ec59 8b17 	vmov	r8, r9, d7
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	f47f ae34 	bne.w	80227e0 <_strtod_l+0x490>
 8022b78:	2322      	movs	r3, #34	; 0x22
 8022b7a:	6023      	str	r3, [r4, #0]
 8022b7c:	e630      	b.n	80227e0 <_strtod_l+0x490>
 8022b7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022b82:	fa01 f202 	lsl.w	r2, r1, r2
 8022b86:	ea02 0808 	and.w	r8, r2, r8
 8022b8a:	e6da      	b.n	8022942 <_strtod_l+0x5f2>
 8022b8c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8022b90:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8022b94:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8022b98:	33e2      	adds	r3, #226	; 0xe2
 8022b9a:	fa00 f303 	lsl.w	r3, r0, r3
 8022b9e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8022ba2:	e73f      	b.n	8022a24 <_strtod_l+0x6d4>
 8022ba4:	2200      	movs	r2, #0
 8022ba6:	2301      	movs	r3, #1
 8022ba8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8022bac:	e73a      	b.n	8022a24 <_strtod_l+0x6d4>
 8022bae:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022bb0:	461a      	mov	r2, r3
 8022bb2:	4620      	mov	r0, r4
 8022bb4:	f7ff f95a 	bl	8021e6c <__lshift>
 8022bb8:	9012      	str	r0, [sp, #72]	; 0x48
 8022bba:	2800      	cmp	r0, #0
 8022bbc:	f47f af64 	bne.w	8022a88 <_strtod_l+0x738>
 8022bc0:	e604      	b.n	80227cc <_strtod_l+0x47c>
 8022bc2:	bf00      	nop
 8022bc4:	f3af 8000 	nop.w
 8022bc8:	94a03595 	.word	0x94a03595
 8022bcc:	3fcfffff 	.word	0x3fcfffff
 8022bd0:	94a03595 	.word	0x94a03595
 8022bd4:	3fdfffff 	.word	0x3fdfffff
 8022bd8:	35afe535 	.word	0x35afe535
 8022bdc:	3fe00000 	.word	0x3fe00000
 8022be0:	00000000 	.word	0x00000000
 8022be4:	39500000 	.word	0x39500000
 8022be8:	08025c38 	.word	0x08025c38
 8022bec:	fffffc02 	.word	0xfffffc02
 8022bf0:	7ff00000 	.word	0x7ff00000
 8022bf4:	46cb      	mov	fp, r9
 8022bf6:	d15f      	bne.n	8022cb8 <_strtod_l+0x968>
 8022bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022bfc:	f1ba 0f00 	cmp.w	sl, #0
 8022c00:	d02a      	beq.n	8022c58 <_strtod_l+0x908>
 8022c02:	4aa7      	ldr	r2, [pc, #668]	; (8022ea0 <_strtod_l+0xb50>)
 8022c04:	4293      	cmp	r3, r2
 8022c06:	d12b      	bne.n	8022c60 <_strtod_l+0x910>
 8022c08:	9b05      	ldr	r3, [sp, #20]
 8022c0a:	4642      	mov	r2, r8
 8022c0c:	b1fb      	cbz	r3, 8022c4e <_strtod_l+0x8fe>
 8022c0e:	4ba5      	ldr	r3, [pc, #660]	; (8022ea4 <_strtod_l+0xb54>)
 8022c10:	ea09 0303 	and.w	r3, r9, r3
 8022c14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8022c18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022c1c:	d81a      	bhi.n	8022c54 <_strtod_l+0x904>
 8022c1e:	0d1b      	lsrs	r3, r3, #20
 8022c20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8022c24:	fa01 f303 	lsl.w	r3, r1, r3
 8022c28:	429a      	cmp	r2, r3
 8022c2a:	d119      	bne.n	8022c60 <_strtod_l+0x910>
 8022c2c:	4b9e      	ldr	r3, [pc, #632]	; (8022ea8 <_strtod_l+0xb58>)
 8022c2e:	459b      	cmp	fp, r3
 8022c30:	d102      	bne.n	8022c38 <_strtod_l+0x8e8>
 8022c32:	3201      	adds	r2, #1
 8022c34:	f43f adca 	beq.w	80227cc <_strtod_l+0x47c>
 8022c38:	4b9a      	ldr	r3, [pc, #616]	; (8022ea4 <_strtod_l+0xb54>)
 8022c3a:	ea0b 0303 	and.w	r3, fp, r3
 8022c3e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8022c42:	f04f 0800 	mov.w	r8, #0
 8022c46:	9b05      	ldr	r3, [sp, #20]
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	d186      	bne.n	8022b5a <_strtod_l+0x80a>
 8022c4c:	e5c8      	b.n	80227e0 <_strtod_l+0x490>
 8022c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022c52:	e7e9      	b.n	8022c28 <_strtod_l+0x8d8>
 8022c54:	460b      	mov	r3, r1
 8022c56:	e7e7      	b.n	8022c28 <_strtod_l+0x8d8>
 8022c58:	ea53 0308 	orrs.w	r3, r3, r8
 8022c5c:	f43f af6d 	beq.w	8022b3a <_strtod_l+0x7ea>
 8022c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c62:	b1cb      	cbz	r3, 8022c98 <_strtod_l+0x948>
 8022c64:	ea13 0f0b 	tst.w	r3, fp
 8022c68:	d0ed      	beq.n	8022c46 <_strtod_l+0x8f6>
 8022c6a:	9a05      	ldr	r2, [sp, #20]
 8022c6c:	4640      	mov	r0, r8
 8022c6e:	4649      	mov	r1, r9
 8022c70:	f1ba 0f00 	cmp.w	sl, #0
 8022c74:	d014      	beq.n	8022ca0 <_strtod_l+0x950>
 8022c76:	f7ff fb51 	bl	802231c <sulp>
 8022c7a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8022c7e:	ec59 8b17 	vmov	r8, r9, d7
 8022c82:	e7e0      	b.n	8022c46 <_strtod_l+0x8f6>
 8022c84:	4013      	ands	r3, r2
 8022c86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8022c8a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8022c8e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8022c92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022c96:	e7d6      	b.n	8022c46 <_strtod_l+0x8f6>
 8022c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c9a:	ea13 0f08 	tst.w	r3, r8
 8022c9e:	e7e3      	b.n	8022c68 <_strtod_l+0x918>
 8022ca0:	f7ff fb3c 	bl	802231c <sulp>
 8022ca4:	ee38 0b40 	vsub.f64	d0, d8, d0
 8022ca8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8022cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cb0:	ec59 8b10 	vmov	r8, r9, d0
 8022cb4:	d1c7      	bne.n	8022c46 <_strtod_l+0x8f6>
 8022cb6:	e5f8      	b.n	80228aa <_strtod_l+0x55a>
 8022cb8:	4631      	mov	r1, r6
 8022cba:	4628      	mov	r0, r5
 8022cbc:	f7ff fab2 	bl	8022224 <__ratio>
 8022cc0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8022cc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8022cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022ccc:	d85f      	bhi.n	8022d8e <_strtod_l+0xa3e>
 8022cce:	f1ba 0f00 	cmp.w	sl, #0
 8022cd2:	d166      	bne.n	8022da2 <_strtod_l+0xa52>
 8022cd4:	f1b8 0f00 	cmp.w	r8, #0
 8022cd8:	d14d      	bne.n	8022d76 <_strtod_l+0xa26>
 8022cda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022cde:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	d162      	bne.n	8022dac <_strtod_l+0xa5c>
 8022ce6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8022cea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cf2:	d401      	bmi.n	8022cf8 <_strtod_l+0x9a8>
 8022cf4:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022cf8:	eeb1 cb4d 	vneg.f64	d12, d13
 8022cfc:	4869      	ldr	r0, [pc, #420]	; (8022ea4 <_strtod_l+0xb54>)
 8022cfe:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8022eb0 <_strtod_l+0xb60>
 8022d02:	ea0b 0100 	and.w	r1, fp, r0
 8022d06:	4561      	cmp	r1, ip
 8022d08:	ec53 2b1c 	vmov	r2, r3, d12
 8022d0c:	d17a      	bne.n	8022e04 <_strtod_l+0xab4>
 8022d0e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8022d12:	ec49 8b10 	vmov	d0, r8, r9
 8022d16:	910a      	str	r1, [sp, #40]	; 0x28
 8022d18:	f7ff f9ba 	bl	8022090 <__ulp>
 8022d1c:	ec49 8b1e 	vmov	d14, r8, r9
 8022d20:	4860      	ldr	r0, [pc, #384]	; (8022ea4 <_strtod_l+0xb54>)
 8022d22:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8022d26:	ee1e 3a90 	vmov	r3, s29
 8022d2a:	4a60      	ldr	r2, [pc, #384]	; (8022eac <_strtod_l+0xb5c>)
 8022d2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022d2e:	4018      	ands	r0, r3
 8022d30:	4290      	cmp	r0, r2
 8022d32:	ec59 8b1e 	vmov	r8, r9, d14
 8022d36:	d93c      	bls.n	8022db2 <_strtod_l+0xa62>
 8022d38:	ee18 2a90 	vmov	r2, s17
 8022d3c:	4b5a      	ldr	r3, [pc, #360]	; (8022ea8 <_strtod_l+0xb58>)
 8022d3e:	429a      	cmp	r2, r3
 8022d40:	d104      	bne.n	8022d4c <_strtod_l+0x9fc>
 8022d42:	ee18 3a10 	vmov	r3, s16
 8022d46:	3301      	adds	r3, #1
 8022d48:	f43f ad40 	beq.w	80227cc <_strtod_l+0x47c>
 8022d4c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8022ea8 <_strtod_l+0xb58>
 8022d50:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022d54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022d56:	4620      	mov	r0, r4
 8022d58:	f7fe fe6e 	bl	8021a38 <_Bfree>
 8022d5c:	4639      	mov	r1, r7
 8022d5e:	4620      	mov	r0, r4
 8022d60:	f7fe fe6a 	bl	8021a38 <_Bfree>
 8022d64:	4631      	mov	r1, r6
 8022d66:	4620      	mov	r0, r4
 8022d68:	f7fe fe66 	bl	8021a38 <_Bfree>
 8022d6c:	4629      	mov	r1, r5
 8022d6e:	4620      	mov	r0, r4
 8022d70:	f7fe fe62 	bl	8021a38 <_Bfree>
 8022d74:	e609      	b.n	802298a <_strtod_l+0x63a>
 8022d76:	f1b8 0f01 	cmp.w	r8, #1
 8022d7a:	d103      	bne.n	8022d84 <_strtod_l+0xa34>
 8022d7c:	f1b9 0f00 	cmp.w	r9, #0
 8022d80:	f43f ad93 	beq.w	80228aa <_strtod_l+0x55a>
 8022d84:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8022d88:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8022d8c:	e7b6      	b.n	8022cfc <_strtod_l+0x9ac>
 8022d8e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8022d92:	ee20 db0d 	vmul.f64	d13, d0, d13
 8022d96:	f1ba 0f00 	cmp.w	sl, #0
 8022d9a:	d0ad      	beq.n	8022cf8 <_strtod_l+0x9a8>
 8022d9c:	eeb0 cb4d 	vmov.f64	d12, d13
 8022da0:	e7ac      	b.n	8022cfc <_strtod_l+0x9ac>
 8022da2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8022da6:	eeb0 db4c 	vmov.f64	d13, d12
 8022daa:	e7a7      	b.n	8022cfc <_strtod_l+0x9ac>
 8022dac:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8022db0:	e7a4      	b.n	8022cfc <_strtod_l+0x9ac>
 8022db2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8022db6:	9b05      	ldr	r3, [sp, #20]
 8022db8:	46cb      	mov	fp, r9
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	d1ca      	bne.n	8022d54 <_strtod_l+0xa04>
 8022dbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022dc2:	0d1b      	lsrs	r3, r3, #20
 8022dc4:	051b      	lsls	r3, r3, #20
 8022dc6:	4299      	cmp	r1, r3
 8022dc8:	d1c4      	bne.n	8022d54 <_strtod_l+0xa04>
 8022dca:	ec51 0b1d 	vmov	r0, r1, d13
 8022dce:	f7dd fcc3 	bl	8000758 <__aeabi_d2lz>
 8022dd2:	f7dd fc2b 	bl	800062c <__aeabi_l2d>
 8022dd6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8022dda:	ec41 0b17 	vmov	d7, r0, r1
 8022dde:	ea4b 0b08 	orr.w	fp, fp, r8
 8022de2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8022de6:	ee3d db47 	vsub.f64	d13, d13, d7
 8022dea:	d03c      	beq.n	8022e66 <_strtod_l+0xb16>
 8022dec:	eeb4 dbca 	vcmpe.f64	d13, d10
 8022df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022df4:	f53f acf4 	bmi.w	80227e0 <_strtod_l+0x490>
 8022df8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8022dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e00:	dda8      	ble.n	8022d54 <_strtod_l+0xa04>
 8022e02:	e4ed      	b.n	80227e0 <_strtod_l+0x490>
 8022e04:	9805      	ldr	r0, [sp, #20]
 8022e06:	b1f0      	cbz	r0, 8022e46 <_strtod_l+0xaf6>
 8022e08:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8022e0c:	d81b      	bhi.n	8022e46 <_strtod_l+0xaf6>
 8022e0e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8022e98 <_strtod_l+0xb48>
 8022e12:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8022e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e1a:	d811      	bhi.n	8022e40 <_strtod_l+0xaf0>
 8022e1c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8022e20:	ee1d 3a10 	vmov	r3, s26
 8022e24:	2b01      	cmp	r3, #1
 8022e26:	bf38      	it	cc
 8022e28:	2301      	movcc	r3, #1
 8022e2a:	ee0d 3a10 	vmov	s26, r3
 8022e2e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8022e32:	f1ba 0f00 	cmp.w	sl, #0
 8022e36:	d113      	bne.n	8022e60 <_strtod_l+0xb10>
 8022e38:	eeb1 7b4d 	vneg.f64	d7, d13
 8022e3c:	ec53 2b17 	vmov	r2, r3, d7
 8022e40:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8022e44:	1a43      	subs	r3, r0, r1
 8022e46:	eeb0 0b48 	vmov.f64	d0, d8
 8022e4a:	ec43 2b1c 	vmov	d12, r2, r3
 8022e4e:	910a      	str	r1, [sp, #40]	; 0x28
 8022e50:	f7ff f91e 	bl	8022090 <__ulp>
 8022e54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022e56:	eeac 8b00 	vfma.f64	d8, d12, d0
 8022e5a:	ec59 8b18 	vmov	r8, r9, d8
 8022e5e:	e7aa      	b.n	8022db6 <_strtod_l+0xa66>
 8022e60:	eeb0 7b4d 	vmov.f64	d7, d13
 8022e64:	e7ea      	b.n	8022e3c <_strtod_l+0xaec>
 8022e66:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8022e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e6e:	f57f af71 	bpl.w	8022d54 <_strtod_l+0xa04>
 8022e72:	e4b5      	b.n	80227e0 <_strtod_l+0x490>
 8022e74:	2300      	movs	r3, #0
 8022e76:	9308      	str	r3, [sp, #32]
 8022e78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e7c:	6013      	str	r3, [r2, #0]
 8022e7e:	f7ff baa6 	b.w	80223ce <_strtod_l+0x7e>
 8022e82:	2a65      	cmp	r2, #101	; 0x65
 8022e84:	f43f aba2 	beq.w	80225cc <_strtod_l+0x27c>
 8022e88:	2a45      	cmp	r2, #69	; 0x45
 8022e8a:	f43f ab9f 	beq.w	80225cc <_strtod_l+0x27c>
 8022e8e:	2101      	movs	r1, #1
 8022e90:	f7ff bbd8 	b.w	8022644 <_strtod_l+0x2f4>
 8022e94:	f3af 8000 	nop.w
 8022e98:	ffc00000 	.word	0xffc00000
 8022e9c:	41dfffff 	.word	0x41dfffff
 8022ea0:	000fffff 	.word	0x000fffff
 8022ea4:	7ff00000 	.word	0x7ff00000
 8022ea8:	7fefffff 	.word	0x7fefffff
 8022eac:	7c9fffff 	.word	0x7c9fffff
 8022eb0:	7fe00000 	.word	0x7fe00000

08022eb4 <_strtod_r>:
 8022eb4:	4b01      	ldr	r3, [pc, #4]	; (8022ebc <_strtod_r+0x8>)
 8022eb6:	f7ff ba4b 	b.w	8022350 <_strtod_l>
 8022eba:	bf00      	nop
 8022ebc:	200009dc 	.word	0x200009dc

08022ec0 <_strtol_l.constprop.0>:
 8022ec0:	2b01      	cmp	r3, #1
 8022ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ec6:	d001      	beq.n	8022ecc <_strtol_l.constprop.0+0xc>
 8022ec8:	2b24      	cmp	r3, #36	; 0x24
 8022eca:	d906      	bls.n	8022eda <_strtol_l.constprop.0+0x1a>
 8022ecc:	f7fd febe 	bl	8020c4c <__errno>
 8022ed0:	2316      	movs	r3, #22
 8022ed2:	6003      	str	r3, [r0, #0]
 8022ed4:	2000      	movs	r0, #0
 8022ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022eda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022fc0 <_strtol_l.constprop.0+0x100>
 8022ede:	460d      	mov	r5, r1
 8022ee0:	462e      	mov	r6, r5
 8022ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022ee6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8022eea:	f017 0708 	ands.w	r7, r7, #8
 8022eee:	d1f7      	bne.n	8022ee0 <_strtol_l.constprop.0+0x20>
 8022ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8022ef2:	d132      	bne.n	8022f5a <_strtol_l.constprop.0+0x9a>
 8022ef4:	782c      	ldrb	r4, [r5, #0]
 8022ef6:	2701      	movs	r7, #1
 8022ef8:	1cb5      	adds	r5, r6, #2
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d05b      	beq.n	8022fb6 <_strtol_l.constprop.0+0xf6>
 8022efe:	2b10      	cmp	r3, #16
 8022f00:	d109      	bne.n	8022f16 <_strtol_l.constprop.0+0x56>
 8022f02:	2c30      	cmp	r4, #48	; 0x30
 8022f04:	d107      	bne.n	8022f16 <_strtol_l.constprop.0+0x56>
 8022f06:	782c      	ldrb	r4, [r5, #0]
 8022f08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022f0c:	2c58      	cmp	r4, #88	; 0x58
 8022f0e:	d14d      	bne.n	8022fac <_strtol_l.constprop.0+0xec>
 8022f10:	786c      	ldrb	r4, [r5, #1]
 8022f12:	2310      	movs	r3, #16
 8022f14:	3502      	adds	r5, #2
 8022f16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8022f1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8022f1e:	f04f 0e00 	mov.w	lr, #0
 8022f22:	fbb8 f9f3 	udiv	r9, r8, r3
 8022f26:	4676      	mov	r6, lr
 8022f28:	fb03 8a19 	mls	sl, r3, r9, r8
 8022f2c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8022f30:	f1bc 0f09 	cmp.w	ip, #9
 8022f34:	d816      	bhi.n	8022f64 <_strtol_l.constprop.0+0xa4>
 8022f36:	4664      	mov	r4, ip
 8022f38:	42a3      	cmp	r3, r4
 8022f3a:	dd24      	ble.n	8022f86 <_strtol_l.constprop.0+0xc6>
 8022f3c:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8022f40:	d008      	beq.n	8022f54 <_strtol_l.constprop.0+0x94>
 8022f42:	45b1      	cmp	r9, r6
 8022f44:	d31c      	bcc.n	8022f80 <_strtol_l.constprop.0+0xc0>
 8022f46:	d101      	bne.n	8022f4c <_strtol_l.constprop.0+0x8c>
 8022f48:	45a2      	cmp	sl, r4
 8022f4a:	db19      	blt.n	8022f80 <_strtol_l.constprop.0+0xc0>
 8022f4c:	fb06 4603 	mla	r6, r6, r3, r4
 8022f50:	f04f 0e01 	mov.w	lr, #1
 8022f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022f58:	e7e8      	b.n	8022f2c <_strtol_l.constprop.0+0x6c>
 8022f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8022f5c:	bf04      	itt	eq
 8022f5e:	782c      	ldrbeq	r4, [r5, #0]
 8022f60:	1cb5      	addeq	r5, r6, #2
 8022f62:	e7ca      	b.n	8022efa <_strtol_l.constprop.0+0x3a>
 8022f64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8022f68:	f1bc 0f19 	cmp.w	ip, #25
 8022f6c:	d801      	bhi.n	8022f72 <_strtol_l.constprop.0+0xb2>
 8022f6e:	3c37      	subs	r4, #55	; 0x37
 8022f70:	e7e2      	b.n	8022f38 <_strtol_l.constprop.0+0x78>
 8022f72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8022f76:	f1bc 0f19 	cmp.w	ip, #25
 8022f7a:	d804      	bhi.n	8022f86 <_strtol_l.constprop.0+0xc6>
 8022f7c:	3c57      	subs	r4, #87	; 0x57
 8022f7e:	e7db      	b.n	8022f38 <_strtol_l.constprop.0+0x78>
 8022f80:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8022f84:	e7e6      	b.n	8022f54 <_strtol_l.constprop.0+0x94>
 8022f86:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8022f8a:	d105      	bne.n	8022f98 <_strtol_l.constprop.0+0xd8>
 8022f8c:	2322      	movs	r3, #34	; 0x22
 8022f8e:	6003      	str	r3, [r0, #0]
 8022f90:	4646      	mov	r6, r8
 8022f92:	b942      	cbnz	r2, 8022fa6 <_strtol_l.constprop.0+0xe6>
 8022f94:	4630      	mov	r0, r6
 8022f96:	e79e      	b.n	8022ed6 <_strtol_l.constprop.0+0x16>
 8022f98:	b107      	cbz	r7, 8022f9c <_strtol_l.constprop.0+0xdc>
 8022f9a:	4276      	negs	r6, r6
 8022f9c:	2a00      	cmp	r2, #0
 8022f9e:	d0f9      	beq.n	8022f94 <_strtol_l.constprop.0+0xd4>
 8022fa0:	f1be 0f00 	cmp.w	lr, #0
 8022fa4:	d000      	beq.n	8022fa8 <_strtol_l.constprop.0+0xe8>
 8022fa6:	1e69      	subs	r1, r5, #1
 8022fa8:	6011      	str	r1, [r2, #0]
 8022faa:	e7f3      	b.n	8022f94 <_strtol_l.constprop.0+0xd4>
 8022fac:	2430      	movs	r4, #48	; 0x30
 8022fae:	2b00      	cmp	r3, #0
 8022fb0:	d1b1      	bne.n	8022f16 <_strtol_l.constprop.0+0x56>
 8022fb2:	2308      	movs	r3, #8
 8022fb4:	e7af      	b.n	8022f16 <_strtol_l.constprop.0+0x56>
 8022fb6:	2c30      	cmp	r4, #48	; 0x30
 8022fb8:	d0a5      	beq.n	8022f06 <_strtol_l.constprop.0+0x46>
 8022fba:	230a      	movs	r3, #10
 8022fbc:	e7ab      	b.n	8022f16 <_strtol_l.constprop.0+0x56>
 8022fbe:	bf00      	nop
 8022fc0:	080258cc 	.word	0x080258cc

08022fc4 <_strtol_r>:
 8022fc4:	f7ff bf7c 	b.w	8022ec0 <_strtol_l.constprop.0>

08022fc8 <__ssputs_r>:
 8022fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022fcc:	688e      	ldr	r6, [r1, #8]
 8022fce:	461f      	mov	r7, r3
 8022fd0:	42be      	cmp	r6, r7
 8022fd2:	680b      	ldr	r3, [r1, #0]
 8022fd4:	4682      	mov	sl, r0
 8022fd6:	460c      	mov	r4, r1
 8022fd8:	4690      	mov	r8, r2
 8022fda:	d82c      	bhi.n	8023036 <__ssputs_r+0x6e>
 8022fdc:	898a      	ldrh	r2, [r1, #12]
 8022fde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022fe2:	d026      	beq.n	8023032 <__ssputs_r+0x6a>
 8022fe4:	6965      	ldr	r5, [r4, #20]
 8022fe6:	6909      	ldr	r1, [r1, #16]
 8022fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022fec:	eba3 0901 	sub.w	r9, r3, r1
 8022ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022ff4:	1c7b      	adds	r3, r7, #1
 8022ff6:	444b      	add	r3, r9
 8022ff8:	106d      	asrs	r5, r5, #1
 8022ffa:	429d      	cmp	r5, r3
 8022ffc:	bf38      	it	cc
 8022ffe:	461d      	movcc	r5, r3
 8023000:	0553      	lsls	r3, r2, #21
 8023002:	d527      	bpl.n	8023054 <__ssputs_r+0x8c>
 8023004:	4629      	mov	r1, r5
 8023006:	f7fc f9d5 	bl	801f3b4 <_malloc_r>
 802300a:	4606      	mov	r6, r0
 802300c:	b360      	cbz	r0, 8023068 <__ssputs_r+0xa0>
 802300e:	6921      	ldr	r1, [r4, #16]
 8023010:	464a      	mov	r2, r9
 8023012:	f7fd fe50 	bl	8020cb6 <memcpy>
 8023016:	89a3      	ldrh	r3, [r4, #12]
 8023018:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802301c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023020:	81a3      	strh	r3, [r4, #12]
 8023022:	6126      	str	r6, [r4, #16]
 8023024:	6165      	str	r5, [r4, #20]
 8023026:	444e      	add	r6, r9
 8023028:	eba5 0509 	sub.w	r5, r5, r9
 802302c:	6026      	str	r6, [r4, #0]
 802302e:	60a5      	str	r5, [r4, #8]
 8023030:	463e      	mov	r6, r7
 8023032:	42be      	cmp	r6, r7
 8023034:	d900      	bls.n	8023038 <__ssputs_r+0x70>
 8023036:	463e      	mov	r6, r7
 8023038:	6820      	ldr	r0, [r4, #0]
 802303a:	4632      	mov	r2, r6
 802303c:	4641      	mov	r1, r8
 802303e:	f7fd fd53 	bl	8020ae8 <memmove>
 8023042:	68a3      	ldr	r3, [r4, #8]
 8023044:	1b9b      	subs	r3, r3, r6
 8023046:	60a3      	str	r3, [r4, #8]
 8023048:	6823      	ldr	r3, [r4, #0]
 802304a:	4433      	add	r3, r6
 802304c:	6023      	str	r3, [r4, #0]
 802304e:	2000      	movs	r0, #0
 8023050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023054:	462a      	mov	r2, r5
 8023056:	f7fc faad 	bl	801f5b4 <_realloc_r>
 802305a:	4606      	mov	r6, r0
 802305c:	2800      	cmp	r0, #0
 802305e:	d1e0      	bne.n	8023022 <__ssputs_r+0x5a>
 8023060:	6921      	ldr	r1, [r4, #16]
 8023062:	4650      	mov	r0, sl
 8023064:	f7fe fc5c 	bl	8021920 <_free_r>
 8023068:	230c      	movs	r3, #12
 802306a:	f8ca 3000 	str.w	r3, [sl]
 802306e:	89a3      	ldrh	r3, [r4, #12]
 8023070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023074:	81a3      	strh	r3, [r4, #12]
 8023076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802307a:	e7e9      	b.n	8023050 <__ssputs_r+0x88>

0802307c <_svfiprintf_r>:
 802307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023080:	4698      	mov	r8, r3
 8023082:	898b      	ldrh	r3, [r1, #12]
 8023084:	061b      	lsls	r3, r3, #24
 8023086:	b09d      	sub	sp, #116	; 0x74
 8023088:	4607      	mov	r7, r0
 802308a:	460d      	mov	r5, r1
 802308c:	4614      	mov	r4, r2
 802308e:	d50e      	bpl.n	80230ae <_svfiprintf_r+0x32>
 8023090:	690b      	ldr	r3, [r1, #16]
 8023092:	b963      	cbnz	r3, 80230ae <_svfiprintf_r+0x32>
 8023094:	2140      	movs	r1, #64	; 0x40
 8023096:	f7fc f98d 	bl	801f3b4 <_malloc_r>
 802309a:	6028      	str	r0, [r5, #0]
 802309c:	6128      	str	r0, [r5, #16]
 802309e:	b920      	cbnz	r0, 80230aa <_svfiprintf_r+0x2e>
 80230a0:	230c      	movs	r3, #12
 80230a2:	603b      	str	r3, [r7, #0]
 80230a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80230a8:	e0d0      	b.n	802324c <_svfiprintf_r+0x1d0>
 80230aa:	2340      	movs	r3, #64	; 0x40
 80230ac:	616b      	str	r3, [r5, #20]
 80230ae:	2300      	movs	r3, #0
 80230b0:	9309      	str	r3, [sp, #36]	; 0x24
 80230b2:	2320      	movs	r3, #32
 80230b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80230b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80230bc:	2330      	movs	r3, #48	; 0x30
 80230be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8023264 <_svfiprintf_r+0x1e8>
 80230c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80230c6:	f04f 0901 	mov.w	r9, #1
 80230ca:	4623      	mov	r3, r4
 80230cc:	469a      	mov	sl, r3
 80230ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80230d2:	b10a      	cbz	r2, 80230d8 <_svfiprintf_r+0x5c>
 80230d4:	2a25      	cmp	r2, #37	; 0x25
 80230d6:	d1f9      	bne.n	80230cc <_svfiprintf_r+0x50>
 80230d8:	ebba 0b04 	subs.w	fp, sl, r4
 80230dc:	d00b      	beq.n	80230f6 <_svfiprintf_r+0x7a>
 80230de:	465b      	mov	r3, fp
 80230e0:	4622      	mov	r2, r4
 80230e2:	4629      	mov	r1, r5
 80230e4:	4638      	mov	r0, r7
 80230e6:	f7ff ff6f 	bl	8022fc8 <__ssputs_r>
 80230ea:	3001      	adds	r0, #1
 80230ec:	f000 80a9 	beq.w	8023242 <_svfiprintf_r+0x1c6>
 80230f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80230f2:	445a      	add	r2, fp
 80230f4:	9209      	str	r2, [sp, #36]	; 0x24
 80230f6:	f89a 3000 	ldrb.w	r3, [sl]
 80230fa:	2b00      	cmp	r3, #0
 80230fc:	f000 80a1 	beq.w	8023242 <_svfiprintf_r+0x1c6>
 8023100:	2300      	movs	r3, #0
 8023102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802310a:	f10a 0a01 	add.w	sl, sl, #1
 802310e:	9304      	str	r3, [sp, #16]
 8023110:	9307      	str	r3, [sp, #28]
 8023112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023116:	931a      	str	r3, [sp, #104]	; 0x68
 8023118:	4654      	mov	r4, sl
 802311a:	2205      	movs	r2, #5
 802311c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023120:	4850      	ldr	r0, [pc, #320]	; (8023264 <_svfiprintf_r+0x1e8>)
 8023122:	f7dd f89d 	bl	8000260 <memchr>
 8023126:	9a04      	ldr	r2, [sp, #16]
 8023128:	b9d8      	cbnz	r0, 8023162 <_svfiprintf_r+0xe6>
 802312a:	06d0      	lsls	r0, r2, #27
 802312c:	bf44      	itt	mi
 802312e:	2320      	movmi	r3, #32
 8023130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023134:	0711      	lsls	r1, r2, #28
 8023136:	bf44      	itt	mi
 8023138:	232b      	movmi	r3, #43	; 0x2b
 802313a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802313e:	f89a 3000 	ldrb.w	r3, [sl]
 8023142:	2b2a      	cmp	r3, #42	; 0x2a
 8023144:	d015      	beq.n	8023172 <_svfiprintf_r+0xf6>
 8023146:	9a07      	ldr	r2, [sp, #28]
 8023148:	4654      	mov	r4, sl
 802314a:	2000      	movs	r0, #0
 802314c:	f04f 0c0a 	mov.w	ip, #10
 8023150:	4621      	mov	r1, r4
 8023152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023156:	3b30      	subs	r3, #48	; 0x30
 8023158:	2b09      	cmp	r3, #9
 802315a:	d94d      	bls.n	80231f8 <_svfiprintf_r+0x17c>
 802315c:	b1b0      	cbz	r0, 802318c <_svfiprintf_r+0x110>
 802315e:	9207      	str	r2, [sp, #28]
 8023160:	e014      	b.n	802318c <_svfiprintf_r+0x110>
 8023162:	eba0 0308 	sub.w	r3, r0, r8
 8023166:	fa09 f303 	lsl.w	r3, r9, r3
 802316a:	4313      	orrs	r3, r2
 802316c:	9304      	str	r3, [sp, #16]
 802316e:	46a2      	mov	sl, r4
 8023170:	e7d2      	b.n	8023118 <_svfiprintf_r+0x9c>
 8023172:	9b03      	ldr	r3, [sp, #12]
 8023174:	1d19      	adds	r1, r3, #4
 8023176:	681b      	ldr	r3, [r3, #0]
 8023178:	9103      	str	r1, [sp, #12]
 802317a:	2b00      	cmp	r3, #0
 802317c:	bfbb      	ittet	lt
 802317e:	425b      	neglt	r3, r3
 8023180:	f042 0202 	orrlt.w	r2, r2, #2
 8023184:	9307      	strge	r3, [sp, #28]
 8023186:	9307      	strlt	r3, [sp, #28]
 8023188:	bfb8      	it	lt
 802318a:	9204      	strlt	r2, [sp, #16]
 802318c:	7823      	ldrb	r3, [r4, #0]
 802318e:	2b2e      	cmp	r3, #46	; 0x2e
 8023190:	d10c      	bne.n	80231ac <_svfiprintf_r+0x130>
 8023192:	7863      	ldrb	r3, [r4, #1]
 8023194:	2b2a      	cmp	r3, #42	; 0x2a
 8023196:	d134      	bne.n	8023202 <_svfiprintf_r+0x186>
 8023198:	9b03      	ldr	r3, [sp, #12]
 802319a:	1d1a      	adds	r2, r3, #4
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	9203      	str	r2, [sp, #12]
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	bfb8      	it	lt
 80231a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80231a8:	3402      	adds	r4, #2
 80231aa:	9305      	str	r3, [sp, #20]
 80231ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8023274 <_svfiprintf_r+0x1f8>
 80231b0:	7821      	ldrb	r1, [r4, #0]
 80231b2:	2203      	movs	r2, #3
 80231b4:	4650      	mov	r0, sl
 80231b6:	f7dd f853 	bl	8000260 <memchr>
 80231ba:	b138      	cbz	r0, 80231cc <_svfiprintf_r+0x150>
 80231bc:	9b04      	ldr	r3, [sp, #16]
 80231be:	eba0 000a 	sub.w	r0, r0, sl
 80231c2:	2240      	movs	r2, #64	; 0x40
 80231c4:	4082      	lsls	r2, r0
 80231c6:	4313      	orrs	r3, r2
 80231c8:	3401      	adds	r4, #1
 80231ca:	9304      	str	r3, [sp, #16]
 80231cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231d0:	4825      	ldr	r0, [pc, #148]	; (8023268 <_svfiprintf_r+0x1ec>)
 80231d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80231d6:	2206      	movs	r2, #6
 80231d8:	f7dd f842 	bl	8000260 <memchr>
 80231dc:	2800      	cmp	r0, #0
 80231de:	d038      	beq.n	8023252 <_svfiprintf_r+0x1d6>
 80231e0:	4b22      	ldr	r3, [pc, #136]	; (802326c <_svfiprintf_r+0x1f0>)
 80231e2:	bb1b      	cbnz	r3, 802322c <_svfiprintf_r+0x1b0>
 80231e4:	9b03      	ldr	r3, [sp, #12]
 80231e6:	3307      	adds	r3, #7
 80231e8:	f023 0307 	bic.w	r3, r3, #7
 80231ec:	3308      	adds	r3, #8
 80231ee:	9303      	str	r3, [sp, #12]
 80231f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231f2:	4433      	add	r3, r6
 80231f4:	9309      	str	r3, [sp, #36]	; 0x24
 80231f6:	e768      	b.n	80230ca <_svfiprintf_r+0x4e>
 80231f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80231fc:	460c      	mov	r4, r1
 80231fe:	2001      	movs	r0, #1
 8023200:	e7a6      	b.n	8023150 <_svfiprintf_r+0xd4>
 8023202:	2300      	movs	r3, #0
 8023204:	3401      	adds	r4, #1
 8023206:	9305      	str	r3, [sp, #20]
 8023208:	4619      	mov	r1, r3
 802320a:	f04f 0c0a 	mov.w	ip, #10
 802320e:	4620      	mov	r0, r4
 8023210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023214:	3a30      	subs	r2, #48	; 0x30
 8023216:	2a09      	cmp	r2, #9
 8023218:	d903      	bls.n	8023222 <_svfiprintf_r+0x1a6>
 802321a:	2b00      	cmp	r3, #0
 802321c:	d0c6      	beq.n	80231ac <_svfiprintf_r+0x130>
 802321e:	9105      	str	r1, [sp, #20]
 8023220:	e7c4      	b.n	80231ac <_svfiprintf_r+0x130>
 8023222:	fb0c 2101 	mla	r1, ip, r1, r2
 8023226:	4604      	mov	r4, r0
 8023228:	2301      	movs	r3, #1
 802322a:	e7f0      	b.n	802320e <_svfiprintf_r+0x192>
 802322c:	ab03      	add	r3, sp, #12
 802322e:	9300      	str	r3, [sp, #0]
 8023230:	462a      	mov	r2, r5
 8023232:	4b0f      	ldr	r3, [pc, #60]	; (8023270 <_svfiprintf_r+0x1f4>)
 8023234:	a904      	add	r1, sp, #16
 8023236:	4638      	mov	r0, r7
 8023238:	f7fc fafa 	bl	801f830 <_printf_float>
 802323c:	1c42      	adds	r2, r0, #1
 802323e:	4606      	mov	r6, r0
 8023240:	d1d6      	bne.n	80231f0 <_svfiprintf_r+0x174>
 8023242:	89ab      	ldrh	r3, [r5, #12]
 8023244:	065b      	lsls	r3, r3, #25
 8023246:	f53f af2d 	bmi.w	80230a4 <_svfiprintf_r+0x28>
 802324a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802324c:	b01d      	add	sp, #116	; 0x74
 802324e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023252:	ab03      	add	r3, sp, #12
 8023254:	9300      	str	r3, [sp, #0]
 8023256:	462a      	mov	r2, r5
 8023258:	4b05      	ldr	r3, [pc, #20]	; (8023270 <_svfiprintf_r+0x1f4>)
 802325a:	a904      	add	r1, sp, #16
 802325c:	4638      	mov	r0, r7
 802325e:	f7fc fd6f 	bl	801fd40 <_printf_i>
 8023262:	e7eb      	b.n	802323c <_svfiprintf_r+0x1c0>
 8023264:	08025c60 	.word	0x08025c60
 8023268:	08025c6a 	.word	0x08025c6a
 802326c:	0801f831 	.word	0x0801f831
 8023270:	08022fc9 	.word	0x08022fc9
 8023274:	08025c66 	.word	0x08025c66

08023278 <__sfputc_r>:
 8023278:	6893      	ldr	r3, [r2, #8]
 802327a:	3b01      	subs	r3, #1
 802327c:	2b00      	cmp	r3, #0
 802327e:	b410      	push	{r4}
 8023280:	6093      	str	r3, [r2, #8]
 8023282:	da08      	bge.n	8023296 <__sfputc_r+0x1e>
 8023284:	6994      	ldr	r4, [r2, #24]
 8023286:	42a3      	cmp	r3, r4
 8023288:	db01      	blt.n	802328e <__sfputc_r+0x16>
 802328a:	290a      	cmp	r1, #10
 802328c:	d103      	bne.n	8023296 <__sfputc_r+0x1e>
 802328e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023292:	f7fd bb83 	b.w	802099c <__swbuf_r>
 8023296:	6813      	ldr	r3, [r2, #0]
 8023298:	1c58      	adds	r0, r3, #1
 802329a:	6010      	str	r0, [r2, #0]
 802329c:	7019      	strb	r1, [r3, #0]
 802329e:	4608      	mov	r0, r1
 80232a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232a4:	4770      	bx	lr

080232a6 <__sfputs_r>:
 80232a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232a8:	4606      	mov	r6, r0
 80232aa:	460f      	mov	r7, r1
 80232ac:	4614      	mov	r4, r2
 80232ae:	18d5      	adds	r5, r2, r3
 80232b0:	42ac      	cmp	r4, r5
 80232b2:	d101      	bne.n	80232b8 <__sfputs_r+0x12>
 80232b4:	2000      	movs	r0, #0
 80232b6:	e007      	b.n	80232c8 <__sfputs_r+0x22>
 80232b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232bc:	463a      	mov	r2, r7
 80232be:	4630      	mov	r0, r6
 80232c0:	f7ff ffda 	bl	8023278 <__sfputc_r>
 80232c4:	1c43      	adds	r3, r0, #1
 80232c6:	d1f3      	bne.n	80232b0 <__sfputs_r+0xa>
 80232c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080232cc <_vfiprintf_r>:
 80232cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232d0:	460d      	mov	r5, r1
 80232d2:	b09d      	sub	sp, #116	; 0x74
 80232d4:	4614      	mov	r4, r2
 80232d6:	4698      	mov	r8, r3
 80232d8:	4606      	mov	r6, r0
 80232da:	b118      	cbz	r0, 80232e4 <_vfiprintf_r+0x18>
 80232dc:	6a03      	ldr	r3, [r0, #32]
 80232de:	b90b      	cbnz	r3, 80232e4 <_vfiprintf_r+0x18>
 80232e0:	f7fd f8e0 	bl	80204a4 <__sinit>
 80232e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232e6:	07d9      	lsls	r1, r3, #31
 80232e8:	d405      	bmi.n	80232f6 <_vfiprintf_r+0x2a>
 80232ea:	89ab      	ldrh	r3, [r5, #12]
 80232ec:	059a      	lsls	r2, r3, #22
 80232ee:	d402      	bmi.n	80232f6 <_vfiprintf_r+0x2a>
 80232f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232f2:	f7fd fcd6 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 80232f6:	89ab      	ldrh	r3, [r5, #12]
 80232f8:	071b      	lsls	r3, r3, #28
 80232fa:	d501      	bpl.n	8023300 <_vfiprintf_r+0x34>
 80232fc:	692b      	ldr	r3, [r5, #16]
 80232fe:	b99b      	cbnz	r3, 8023328 <_vfiprintf_r+0x5c>
 8023300:	4629      	mov	r1, r5
 8023302:	4630      	mov	r0, r6
 8023304:	f7fd fb88 	bl	8020a18 <__swsetup_r>
 8023308:	b170      	cbz	r0, 8023328 <_vfiprintf_r+0x5c>
 802330a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802330c:	07dc      	lsls	r4, r3, #31
 802330e:	d504      	bpl.n	802331a <_vfiprintf_r+0x4e>
 8023310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023314:	b01d      	add	sp, #116	; 0x74
 8023316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802331a:	89ab      	ldrh	r3, [r5, #12]
 802331c:	0598      	lsls	r0, r3, #22
 802331e:	d4f7      	bmi.n	8023310 <_vfiprintf_r+0x44>
 8023320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023322:	f7fd fcbf 	bl	8020ca4 <__retarget_lock_release_recursive>
 8023326:	e7f3      	b.n	8023310 <_vfiprintf_r+0x44>
 8023328:	2300      	movs	r3, #0
 802332a:	9309      	str	r3, [sp, #36]	; 0x24
 802332c:	2320      	movs	r3, #32
 802332e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023332:	f8cd 800c 	str.w	r8, [sp, #12]
 8023336:	2330      	movs	r3, #48	; 0x30
 8023338:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80234ec <_vfiprintf_r+0x220>
 802333c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023340:	f04f 0901 	mov.w	r9, #1
 8023344:	4623      	mov	r3, r4
 8023346:	469a      	mov	sl, r3
 8023348:	f813 2b01 	ldrb.w	r2, [r3], #1
 802334c:	b10a      	cbz	r2, 8023352 <_vfiprintf_r+0x86>
 802334e:	2a25      	cmp	r2, #37	; 0x25
 8023350:	d1f9      	bne.n	8023346 <_vfiprintf_r+0x7a>
 8023352:	ebba 0b04 	subs.w	fp, sl, r4
 8023356:	d00b      	beq.n	8023370 <_vfiprintf_r+0xa4>
 8023358:	465b      	mov	r3, fp
 802335a:	4622      	mov	r2, r4
 802335c:	4629      	mov	r1, r5
 802335e:	4630      	mov	r0, r6
 8023360:	f7ff ffa1 	bl	80232a6 <__sfputs_r>
 8023364:	3001      	adds	r0, #1
 8023366:	f000 80a9 	beq.w	80234bc <_vfiprintf_r+0x1f0>
 802336a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802336c:	445a      	add	r2, fp
 802336e:	9209      	str	r2, [sp, #36]	; 0x24
 8023370:	f89a 3000 	ldrb.w	r3, [sl]
 8023374:	2b00      	cmp	r3, #0
 8023376:	f000 80a1 	beq.w	80234bc <_vfiprintf_r+0x1f0>
 802337a:	2300      	movs	r3, #0
 802337c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023384:	f10a 0a01 	add.w	sl, sl, #1
 8023388:	9304      	str	r3, [sp, #16]
 802338a:	9307      	str	r3, [sp, #28]
 802338c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023390:	931a      	str	r3, [sp, #104]	; 0x68
 8023392:	4654      	mov	r4, sl
 8023394:	2205      	movs	r2, #5
 8023396:	f814 1b01 	ldrb.w	r1, [r4], #1
 802339a:	4854      	ldr	r0, [pc, #336]	; (80234ec <_vfiprintf_r+0x220>)
 802339c:	f7dc ff60 	bl	8000260 <memchr>
 80233a0:	9a04      	ldr	r2, [sp, #16]
 80233a2:	b9d8      	cbnz	r0, 80233dc <_vfiprintf_r+0x110>
 80233a4:	06d1      	lsls	r1, r2, #27
 80233a6:	bf44      	itt	mi
 80233a8:	2320      	movmi	r3, #32
 80233aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233ae:	0713      	lsls	r3, r2, #28
 80233b0:	bf44      	itt	mi
 80233b2:	232b      	movmi	r3, #43	; 0x2b
 80233b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233b8:	f89a 3000 	ldrb.w	r3, [sl]
 80233bc:	2b2a      	cmp	r3, #42	; 0x2a
 80233be:	d015      	beq.n	80233ec <_vfiprintf_r+0x120>
 80233c0:	9a07      	ldr	r2, [sp, #28]
 80233c2:	4654      	mov	r4, sl
 80233c4:	2000      	movs	r0, #0
 80233c6:	f04f 0c0a 	mov.w	ip, #10
 80233ca:	4621      	mov	r1, r4
 80233cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233d0:	3b30      	subs	r3, #48	; 0x30
 80233d2:	2b09      	cmp	r3, #9
 80233d4:	d94d      	bls.n	8023472 <_vfiprintf_r+0x1a6>
 80233d6:	b1b0      	cbz	r0, 8023406 <_vfiprintf_r+0x13a>
 80233d8:	9207      	str	r2, [sp, #28]
 80233da:	e014      	b.n	8023406 <_vfiprintf_r+0x13a>
 80233dc:	eba0 0308 	sub.w	r3, r0, r8
 80233e0:	fa09 f303 	lsl.w	r3, r9, r3
 80233e4:	4313      	orrs	r3, r2
 80233e6:	9304      	str	r3, [sp, #16]
 80233e8:	46a2      	mov	sl, r4
 80233ea:	e7d2      	b.n	8023392 <_vfiprintf_r+0xc6>
 80233ec:	9b03      	ldr	r3, [sp, #12]
 80233ee:	1d19      	adds	r1, r3, #4
 80233f0:	681b      	ldr	r3, [r3, #0]
 80233f2:	9103      	str	r1, [sp, #12]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	bfbb      	ittet	lt
 80233f8:	425b      	neglt	r3, r3
 80233fa:	f042 0202 	orrlt.w	r2, r2, #2
 80233fe:	9307      	strge	r3, [sp, #28]
 8023400:	9307      	strlt	r3, [sp, #28]
 8023402:	bfb8      	it	lt
 8023404:	9204      	strlt	r2, [sp, #16]
 8023406:	7823      	ldrb	r3, [r4, #0]
 8023408:	2b2e      	cmp	r3, #46	; 0x2e
 802340a:	d10c      	bne.n	8023426 <_vfiprintf_r+0x15a>
 802340c:	7863      	ldrb	r3, [r4, #1]
 802340e:	2b2a      	cmp	r3, #42	; 0x2a
 8023410:	d134      	bne.n	802347c <_vfiprintf_r+0x1b0>
 8023412:	9b03      	ldr	r3, [sp, #12]
 8023414:	1d1a      	adds	r2, r3, #4
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	9203      	str	r2, [sp, #12]
 802341a:	2b00      	cmp	r3, #0
 802341c:	bfb8      	it	lt
 802341e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023422:	3402      	adds	r4, #2
 8023424:	9305      	str	r3, [sp, #20]
 8023426:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80234fc <_vfiprintf_r+0x230>
 802342a:	7821      	ldrb	r1, [r4, #0]
 802342c:	2203      	movs	r2, #3
 802342e:	4650      	mov	r0, sl
 8023430:	f7dc ff16 	bl	8000260 <memchr>
 8023434:	b138      	cbz	r0, 8023446 <_vfiprintf_r+0x17a>
 8023436:	9b04      	ldr	r3, [sp, #16]
 8023438:	eba0 000a 	sub.w	r0, r0, sl
 802343c:	2240      	movs	r2, #64	; 0x40
 802343e:	4082      	lsls	r2, r0
 8023440:	4313      	orrs	r3, r2
 8023442:	3401      	adds	r4, #1
 8023444:	9304      	str	r3, [sp, #16]
 8023446:	f814 1b01 	ldrb.w	r1, [r4], #1
 802344a:	4829      	ldr	r0, [pc, #164]	; (80234f0 <_vfiprintf_r+0x224>)
 802344c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023450:	2206      	movs	r2, #6
 8023452:	f7dc ff05 	bl	8000260 <memchr>
 8023456:	2800      	cmp	r0, #0
 8023458:	d03f      	beq.n	80234da <_vfiprintf_r+0x20e>
 802345a:	4b26      	ldr	r3, [pc, #152]	; (80234f4 <_vfiprintf_r+0x228>)
 802345c:	bb1b      	cbnz	r3, 80234a6 <_vfiprintf_r+0x1da>
 802345e:	9b03      	ldr	r3, [sp, #12]
 8023460:	3307      	adds	r3, #7
 8023462:	f023 0307 	bic.w	r3, r3, #7
 8023466:	3308      	adds	r3, #8
 8023468:	9303      	str	r3, [sp, #12]
 802346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802346c:	443b      	add	r3, r7
 802346e:	9309      	str	r3, [sp, #36]	; 0x24
 8023470:	e768      	b.n	8023344 <_vfiprintf_r+0x78>
 8023472:	fb0c 3202 	mla	r2, ip, r2, r3
 8023476:	460c      	mov	r4, r1
 8023478:	2001      	movs	r0, #1
 802347a:	e7a6      	b.n	80233ca <_vfiprintf_r+0xfe>
 802347c:	2300      	movs	r3, #0
 802347e:	3401      	adds	r4, #1
 8023480:	9305      	str	r3, [sp, #20]
 8023482:	4619      	mov	r1, r3
 8023484:	f04f 0c0a 	mov.w	ip, #10
 8023488:	4620      	mov	r0, r4
 802348a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802348e:	3a30      	subs	r2, #48	; 0x30
 8023490:	2a09      	cmp	r2, #9
 8023492:	d903      	bls.n	802349c <_vfiprintf_r+0x1d0>
 8023494:	2b00      	cmp	r3, #0
 8023496:	d0c6      	beq.n	8023426 <_vfiprintf_r+0x15a>
 8023498:	9105      	str	r1, [sp, #20]
 802349a:	e7c4      	b.n	8023426 <_vfiprintf_r+0x15a>
 802349c:	fb0c 2101 	mla	r1, ip, r1, r2
 80234a0:	4604      	mov	r4, r0
 80234a2:	2301      	movs	r3, #1
 80234a4:	e7f0      	b.n	8023488 <_vfiprintf_r+0x1bc>
 80234a6:	ab03      	add	r3, sp, #12
 80234a8:	9300      	str	r3, [sp, #0]
 80234aa:	462a      	mov	r2, r5
 80234ac:	4b12      	ldr	r3, [pc, #72]	; (80234f8 <_vfiprintf_r+0x22c>)
 80234ae:	a904      	add	r1, sp, #16
 80234b0:	4630      	mov	r0, r6
 80234b2:	f7fc f9bd 	bl	801f830 <_printf_float>
 80234b6:	4607      	mov	r7, r0
 80234b8:	1c78      	adds	r0, r7, #1
 80234ba:	d1d6      	bne.n	802346a <_vfiprintf_r+0x19e>
 80234bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234be:	07d9      	lsls	r1, r3, #31
 80234c0:	d405      	bmi.n	80234ce <_vfiprintf_r+0x202>
 80234c2:	89ab      	ldrh	r3, [r5, #12]
 80234c4:	059a      	lsls	r2, r3, #22
 80234c6:	d402      	bmi.n	80234ce <_vfiprintf_r+0x202>
 80234c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234ca:	f7fd fbeb 	bl	8020ca4 <__retarget_lock_release_recursive>
 80234ce:	89ab      	ldrh	r3, [r5, #12]
 80234d0:	065b      	lsls	r3, r3, #25
 80234d2:	f53f af1d 	bmi.w	8023310 <_vfiprintf_r+0x44>
 80234d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234d8:	e71c      	b.n	8023314 <_vfiprintf_r+0x48>
 80234da:	ab03      	add	r3, sp, #12
 80234dc:	9300      	str	r3, [sp, #0]
 80234de:	462a      	mov	r2, r5
 80234e0:	4b05      	ldr	r3, [pc, #20]	; (80234f8 <_vfiprintf_r+0x22c>)
 80234e2:	a904      	add	r1, sp, #16
 80234e4:	4630      	mov	r0, r6
 80234e6:	f7fc fc2b 	bl	801fd40 <_printf_i>
 80234ea:	e7e4      	b.n	80234b6 <_vfiprintf_r+0x1ea>
 80234ec:	08025c60 	.word	0x08025c60
 80234f0:	08025c6a 	.word	0x08025c6a
 80234f4:	0801f831 	.word	0x0801f831
 80234f8:	080232a7 	.word	0x080232a7
 80234fc:	08025c66 	.word	0x08025c66

08023500 <__sflush_r>:
 8023500:	898a      	ldrh	r2, [r1, #12]
 8023502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023506:	4605      	mov	r5, r0
 8023508:	0710      	lsls	r0, r2, #28
 802350a:	460c      	mov	r4, r1
 802350c:	d458      	bmi.n	80235c0 <__sflush_r+0xc0>
 802350e:	684b      	ldr	r3, [r1, #4]
 8023510:	2b00      	cmp	r3, #0
 8023512:	dc05      	bgt.n	8023520 <__sflush_r+0x20>
 8023514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023516:	2b00      	cmp	r3, #0
 8023518:	dc02      	bgt.n	8023520 <__sflush_r+0x20>
 802351a:	2000      	movs	r0, #0
 802351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023522:	2e00      	cmp	r6, #0
 8023524:	d0f9      	beq.n	802351a <__sflush_r+0x1a>
 8023526:	2300      	movs	r3, #0
 8023528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802352c:	682f      	ldr	r7, [r5, #0]
 802352e:	6a21      	ldr	r1, [r4, #32]
 8023530:	602b      	str	r3, [r5, #0]
 8023532:	d032      	beq.n	802359a <__sflush_r+0x9a>
 8023534:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023536:	89a3      	ldrh	r3, [r4, #12]
 8023538:	075a      	lsls	r2, r3, #29
 802353a:	d505      	bpl.n	8023548 <__sflush_r+0x48>
 802353c:	6863      	ldr	r3, [r4, #4]
 802353e:	1ac0      	subs	r0, r0, r3
 8023540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023542:	b10b      	cbz	r3, 8023548 <__sflush_r+0x48>
 8023544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023546:	1ac0      	subs	r0, r0, r3
 8023548:	2300      	movs	r3, #0
 802354a:	4602      	mov	r2, r0
 802354c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802354e:	6a21      	ldr	r1, [r4, #32]
 8023550:	4628      	mov	r0, r5
 8023552:	47b0      	blx	r6
 8023554:	1c43      	adds	r3, r0, #1
 8023556:	89a3      	ldrh	r3, [r4, #12]
 8023558:	d106      	bne.n	8023568 <__sflush_r+0x68>
 802355a:	6829      	ldr	r1, [r5, #0]
 802355c:	291d      	cmp	r1, #29
 802355e:	d82b      	bhi.n	80235b8 <__sflush_r+0xb8>
 8023560:	4a29      	ldr	r2, [pc, #164]	; (8023608 <__sflush_r+0x108>)
 8023562:	410a      	asrs	r2, r1
 8023564:	07d6      	lsls	r6, r2, #31
 8023566:	d427      	bmi.n	80235b8 <__sflush_r+0xb8>
 8023568:	2200      	movs	r2, #0
 802356a:	6062      	str	r2, [r4, #4]
 802356c:	04d9      	lsls	r1, r3, #19
 802356e:	6922      	ldr	r2, [r4, #16]
 8023570:	6022      	str	r2, [r4, #0]
 8023572:	d504      	bpl.n	802357e <__sflush_r+0x7e>
 8023574:	1c42      	adds	r2, r0, #1
 8023576:	d101      	bne.n	802357c <__sflush_r+0x7c>
 8023578:	682b      	ldr	r3, [r5, #0]
 802357a:	b903      	cbnz	r3, 802357e <__sflush_r+0x7e>
 802357c:	6560      	str	r0, [r4, #84]	; 0x54
 802357e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023580:	602f      	str	r7, [r5, #0]
 8023582:	2900      	cmp	r1, #0
 8023584:	d0c9      	beq.n	802351a <__sflush_r+0x1a>
 8023586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802358a:	4299      	cmp	r1, r3
 802358c:	d002      	beq.n	8023594 <__sflush_r+0x94>
 802358e:	4628      	mov	r0, r5
 8023590:	f7fe f9c6 	bl	8021920 <_free_r>
 8023594:	2000      	movs	r0, #0
 8023596:	6360      	str	r0, [r4, #52]	; 0x34
 8023598:	e7c0      	b.n	802351c <__sflush_r+0x1c>
 802359a:	2301      	movs	r3, #1
 802359c:	4628      	mov	r0, r5
 802359e:	47b0      	blx	r6
 80235a0:	1c41      	adds	r1, r0, #1
 80235a2:	d1c8      	bne.n	8023536 <__sflush_r+0x36>
 80235a4:	682b      	ldr	r3, [r5, #0]
 80235a6:	2b00      	cmp	r3, #0
 80235a8:	d0c5      	beq.n	8023536 <__sflush_r+0x36>
 80235aa:	2b1d      	cmp	r3, #29
 80235ac:	d001      	beq.n	80235b2 <__sflush_r+0xb2>
 80235ae:	2b16      	cmp	r3, #22
 80235b0:	d101      	bne.n	80235b6 <__sflush_r+0xb6>
 80235b2:	602f      	str	r7, [r5, #0]
 80235b4:	e7b1      	b.n	802351a <__sflush_r+0x1a>
 80235b6:	89a3      	ldrh	r3, [r4, #12]
 80235b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80235bc:	81a3      	strh	r3, [r4, #12]
 80235be:	e7ad      	b.n	802351c <__sflush_r+0x1c>
 80235c0:	690f      	ldr	r7, [r1, #16]
 80235c2:	2f00      	cmp	r7, #0
 80235c4:	d0a9      	beq.n	802351a <__sflush_r+0x1a>
 80235c6:	0793      	lsls	r3, r2, #30
 80235c8:	680e      	ldr	r6, [r1, #0]
 80235ca:	bf08      	it	eq
 80235cc:	694b      	ldreq	r3, [r1, #20]
 80235ce:	600f      	str	r7, [r1, #0]
 80235d0:	bf18      	it	ne
 80235d2:	2300      	movne	r3, #0
 80235d4:	eba6 0807 	sub.w	r8, r6, r7
 80235d8:	608b      	str	r3, [r1, #8]
 80235da:	f1b8 0f00 	cmp.w	r8, #0
 80235de:	dd9c      	ble.n	802351a <__sflush_r+0x1a>
 80235e0:	6a21      	ldr	r1, [r4, #32]
 80235e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80235e4:	4643      	mov	r3, r8
 80235e6:	463a      	mov	r2, r7
 80235e8:	4628      	mov	r0, r5
 80235ea:	47b0      	blx	r6
 80235ec:	2800      	cmp	r0, #0
 80235ee:	dc06      	bgt.n	80235fe <__sflush_r+0xfe>
 80235f0:	89a3      	ldrh	r3, [r4, #12]
 80235f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80235f6:	81a3      	strh	r3, [r4, #12]
 80235f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80235fc:	e78e      	b.n	802351c <__sflush_r+0x1c>
 80235fe:	4407      	add	r7, r0
 8023600:	eba8 0800 	sub.w	r8, r8, r0
 8023604:	e7e9      	b.n	80235da <__sflush_r+0xda>
 8023606:	bf00      	nop
 8023608:	dfbffffe 	.word	0xdfbffffe

0802360c <_fflush_r>:
 802360c:	b538      	push	{r3, r4, r5, lr}
 802360e:	690b      	ldr	r3, [r1, #16]
 8023610:	4605      	mov	r5, r0
 8023612:	460c      	mov	r4, r1
 8023614:	b913      	cbnz	r3, 802361c <_fflush_r+0x10>
 8023616:	2500      	movs	r5, #0
 8023618:	4628      	mov	r0, r5
 802361a:	bd38      	pop	{r3, r4, r5, pc}
 802361c:	b118      	cbz	r0, 8023626 <_fflush_r+0x1a>
 802361e:	6a03      	ldr	r3, [r0, #32]
 8023620:	b90b      	cbnz	r3, 8023626 <_fflush_r+0x1a>
 8023622:	f7fc ff3f 	bl	80204a4 <__sinit>
 8023626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802362a:	2b00      	cmp	r3, #0
 802362c:	d0f3      	beq.n	8023616 <_fflush_r+0xa>
 802362e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023630:	07d0      	lsls	r0, r2, #31
 8023632:	d404      	bmi.n	802363e <_fflush_r+0x32>
 8023634:	0599      	lsls	r1, r3, #22
 8023636:	d402      	bmi.n	802363e <_fflush_r+0x32>
 8023638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802363a:	f7fd fb32 	bl	8020ca2 <__retarget_lock_acquire_recursive>
 802363e:	4628      	mov	r0, r5
 8023640:	4621      	mov	r1, r4
 8023642:	f7ff ff5d 	bl	8023500 <__sflush_r>
 8023646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023648:	07da      	lsls	r2, r3, #31
 802364a:	4605      	mov	r5, r0
 802364c:	d4e4      	bmi.n	8023618 <_fflush_r+0xc>
 802364e:	89a3      	ldrh	r3, [r4, #12]
 8023650:	059b      	lsls	r3, r3, #22
 8023652:	d4e1      	bmi.n	8023618 <_fflush_r+0xc>
 8023654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023656:	f7fd fb25 	bl	8020ca4 <__retarget_lock_release_recursive>
 802365a:	e7dd      	b.n	8023618 <_fflush_r+0xc>

0802365c <fiprintf>:
 802365c:	b40e      	push	{r1, r2, r3}
 802365e:	b503      	push	{r0, r1, lr}
 8023660:	4601      	mov	r1, r0
 8023662:	ab03      	add	r3, sp, #12
 8023664:	4805      	ldr	r0, [pc, #20]	; (802367c <fiprintf+0x20>)
 8023666:	f853 2b04 	ldr.w	r2, [r3], #4
 802366a:	6800      	ldr	r0, [r0, #0]
 802366c:	9301      	str	r3, [sp, #4]
 802366e:	f7ff fe2d 	bl	80232cc <_vfiprintf_r>
 8023672:	b002      	add	sp, #8
 8023674:	f85d eb04 	ldr.w	lr, [sp], #4
 8023678:	b003      	add	sp, #12
 802367a:	4770      	bx	lr
 802367c:	200009d8 	.word	0x200009d8

08023680 <__swhatbuf_r>:
 8023680:	b570      	push	{r4, r5, r6, lr}
 8023682:	460c      	mov	r4, r1
 8023684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023688:	2900      	cmp	r1, #0
 802368a:	b096      	sub	sp, #88	; 0x58
 802368c:	4615      	mov	r5, r2
 802368e:	461e      	mov	r6, r3
 8023690:	da0d      	bge.n	80236ae <__swhatbuf_r+0x2e>
 8023692:	89a3      	ldrh	r3, [r4, #12]
 8023694:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023698:	f04f 0100 	mov.w	r1, #0
 802369c:	bf0c      	ite	eq
 802369e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80236a2:	2340      	movne	r3, #64	; 0x40
 80236a4:	2000      	movs	r0, #0
 80236a6:	6031      	str	r1, [r6, #0]
 80236a8:	602b      	str	r3, [r5, #0]
 80236aa:	b016      	add	sp, #88	; 0x58
 80236ac:	bd70      	pop	{r4, r5, r6, pc}
 80236ae:	466a      	mov	r2, sp
 80236b0:	f000 f848 	bl	8023744 <_fstat_r>
 80236b4:	2800      	cmp	r0, #0
 80236b6:	dbec      	blt.n	8023692 <__swhatbuf_r+0x12>
 80236b8:	9901      	ldr	r1, [sp, #4]
 80236ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80236be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80236c2:	4259      	negs	r1, r3
 80236c4:	4159      	adcs	r1, r3
 80236c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80236ca:	e7eb      	b.n	80236a4 <__swhatbuf_r+0x24>

080236cc <__smakebuf_r>:
 80236cc:	898b      	ldrh	r3, [r1, #12]
 80236ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80236d0:	079d      	lsls	r5, r3, #30
 80236d2:	4606      	mov	r6, r0
 80236d4:	460c      	mov	r4, r1
 80236d6:	d507      	bpl.n	80236e8 <__smakebuf_r+0x1c>
 80236d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80236dc:	6023      	str	r3, [r4, #0]
 80236de:	6123      	str	r3, [r4, #16]
 80236e0:	2301      	movs	r3, #1
 80236e2:	6163      	str	r3, [r4, #20]
 80236e4:	b002      	add	sp, #8
 80236e6:	bd70      	pop	{r4, r5, r6, pc}
 80236e8:	ab01      	add	r3, sp, #4
 80236ea:	466a      	mov	r2, sp
 80236ec:	f7ff ffc8 	bl	8023680 <__swhatbuf_r>
 80236f0:	9900      	ldr	r1, [sp, #0]
 80236f2:	4605      	mov	r5, r0
 80236f4:	4630      	mov	r0, r6
 80236f6:	f7fb fe5d 	bl	801f3b4 <_malloc_r>
 80236fa:	b948      	cbnz	r0, 8023710 <__smakebuf_r+0x44>
 80236fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023700:	059a      	lsls	r2, r3, #22
 8023702:	d4ef      	bmi.n	80236e4 <__smakebuf_r+0x18>
 8023704:	f023 0303 	bic.w	r3, r3, #3
 8023708:	f043 0302 	orr.w	r3, r3, #2
 802370c:	81a3      	strh	r3, [r4, #12]
 802370e:	e7e3      	b.n	80236d8 <__smakebuf_r+0xc>
 8023710:	89a3      	ldrh	r3, [r4, #12]
 8023712:	6020      	str	r0, [r4, #0]
 8023714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023718:	81a3      	strh	r3, [r4, #12]
 802371a:	9b00      	ldr	r3, [sp, #0]
 802371c:	6163      	str	r3, [r4, #20]
 802371e:	9b01      	ldr	r3, [sp, #4]
 8023720:	6120      	str	r0, [r4, #16]
 8023722:	b15b      	cbz	r3, 802373c <__smakebuf_r+0x70>
 8023724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023728:	4630      	mov	r0, r6
 802372a:	f000 f81d 	bl	8023768 <_isatty_r>
 802372e:	b128      	cbz	r0, 802373c <__smakebuf_r+0x70>
 8023730:	89a3      	ldrh	r3, [r4, #12]
 8023732:	f023 0303 	bic.w	r3, r3, #3
 8023736:	f043 0301 	orr.w	r3, r3, #1
 802373a:	81a3      	strh	r3, [r4, #12]
 802373c:	89a3      	ldrh	r3, [r4, #12]
 802373e:	431d      	orrs	r5, r3
 8023740:	81a5      	strh	r5, [r4, #12]
 8023742:	e7cf      	b.n	80236e4 <__smakebuf_r+0x18>

08023744 <_fstat_r>:
 8023744:	b538      	push	{r3, r4, r5, lr}
 8023746:	4d07      	ldr	r5, [pc, #28]	; (8023764 <_fstat_r+0x20>)
 8023748:	2300      	movs	r3, #0
 802374a:	4604      	mov	r4, r0
 802374c:	4608      	mov	r0, r1
 802374e:	4611      	mov	r1, r2
 8023750:	602b      	str	r3, [r5, #0]
 8023752:	f7e0 f908 	bl	8003966 <_fstat>
 8023756:	1c43      	adds	r3, r0, #1
 8023758:	d102      	bne.n	8023760 <_fstat_r+0x1c>
 802375a:	682b      	ldr	r3, [r5, #0]
 802375c:	b103      	cbz	r3, 8023760 <_fstat_r+0x1c>
 802375e:	6023      	str	r3, [r4, #0]
 8023760:	bd38      	pop	{r3, r4, r5, pc}
 8023762:	bf00      	nop
 8023764:	200171a8 	.word	0x200171a8

08023768 <_isatty_r>:
 8023768:	b538      	push	{r3, r4, r5, lr}
 802376a:	4d06      	ldr	r5, [pc, #24]	; (8023784 <_isatty_r+0x1c>)
 802376c:	2300      	movs	r3, #0
 802376e:	4604      	mov	r4, r0
 8023770:	4608      	mov	r0, r1
 8023772:	602b      	str	r3, [r5, #0]
 8023774:	f7e0 f907 	bl	8003986 <_isatty>
 8023778:	1c43      	adds	r3, r0, #1
 802377a:	d102      	bne.n	8023782 <_isatty_r+0x1a>
 802377c:	682b      	ldr	r3, [r5, #0]
 802377e:	b103      	cbz	r3, 8023782 <_isatty_r+0x1a>
 8023780:	6023      	str	r3, [r4, #0]
 8023782:	bd38      	pop	{r3, r4, r5, pc}
 8023784:	200171a8 	.word	0x200171a8

08023788 <nan>:
 8023788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023790 <nan+0x8>
 802378c:	4770      	bx	lr
 802378e:	bf00      	nop
 8023790:	00000000 	.word	0x00000000
 8023794:	7ff80000 	.word	0x7ff80000

08023798 <abort>:
 8023798:	b508      	push	{r3, lr}
 802379a:	2006      	movs	r0, #6
 802379c:	f000 fba0 	bl	8023ee0 <raise>
 80237a0:	2001      	movs	r0, #1
 80237a2:	f7e0 f891 	bl	80038c8 <_exit>

080237a6 <rshift>:
 80237a6:	6903      	ldr	r3, [r0, #16]
 80237a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80237ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80237b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80237b4:	f100 0414 	add.w	r4, r0, #20
 80237b8:	dd45      	ble.n	8023846 <rshift+0xa0>
 80237ba:	f011 011f 	ands.w	r1, r1, #31
 80237be:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80237c2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80237c6:	d10c      	bne.n	80237e2 <rshift+0x3c>
 80237c8:	f100 0710 	add.w	r7, r0, #16
 80237cc:	4629      	mov	r1, r5
 80237ce:	42b1      	cmp	r1, r6
 80237d0:	d334      	bcc.n	802383c <rshift+0x96>
 80237d2:	1a9b      	subs	r3, r3, r2
 80237d4:	009b      	lsls	r3, r3, #2
 80237d6:	1eea      	subs	r2, r5, #3
 80237d8:	4296      	cmp	r6, r2
 80237da:	bf38      	it	cc
 80237dc:	2300      	movcc	r3, #0
 80237de:	4423      	add	r3, r4
 80237e0:	e015      	b.n	802380e <rshift+0x68>
 80237e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80237e6:	f1c1 0820 	rsb	r8, r1, #32
 80237ea:	40cf      	lsrs	r7, r1
 80237ec:	f105 0e04 	add.w	lr, r5, #4
 80237f0:	46a1      	mov	r9, r4
 80237f2:	4576      	cmp	r6, lr
 80237f4:	46f4      	mov	ip, lr
 80237f6:	d815      	bhi.n	8023824 <rshift+0x7e>
 80237f8:	1a9a      	subs	r2, r3, r2
 80237fa:	0092      	lsls	r2, r2, #2
 80237fc:	3a04      	subs	r2, #4
 80237fe:	3501      	adds	r5, #1
 8023800:	42ae      	cmp	r6, r5
 8023802:	bf38      	it	cc
 8023804:	2200      	movcc	r2, #0
 8023806:	18a3      	adds	r3, r4, r2
 8023808:	50a7      	str	r7, [r4, r2]
 802380a:	b107      	cbz	r7, 802380e <rshift+0x68>
 802380c:	3304      	adds	r3, #4
 802380e:	1b1a      	subs	r2, r3, r4
 8023810:	42a3      	cmp	r3, r4
 8023812:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8023816:	bf08      	it	eq
 8023818:	2300      	moveq	r3, #0
 802381a:	6102      	str	r2, [r0, #16]
 802381c:	bf08      	it	eq
 802381e:	6143      	streq	r3, [r0, #20]
 8023820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023824:	f8dc c000 	ldr.w	ip, [ip]
 8023828:	fa0c fc08 	lsl.w	ip, ip, r8
 802382c:	ea4c 0707 	orr.w	r7, ip, r7
 8023830:	f849 7b04 	str.w	r7, [r9], #4
 8023834:	f85e 7b04 	ldr.w	r7, [lr], #4
 8023838:	40cf      	lsrs	r7, r1
 802383a:	e7da      	b.n	80237f2 <rshift+0x4c>
 802383c:	f851 cb04 	ldr.w	ip, [r1], #4
 8023840:	f847 cf04 	str.w	ip, [r7, #4]!
 8023844:	e7c3      	b.n	80237ce <rshift+0x28>
 8023846:	4623      	mov	r3, r4
 8023848:	e7e1      	b.n	802380e <rshift+0x68>

0802384a <__hexdig_fun>:
 802384a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802384e:	2b09      	cmp	r3, #9
 8023850:	d802      	bhi.n	8023858 <__hexdig_fun+0xe>
 8023852:	3820      	subs	r0, #32
 8023854:	b2c0      	uxtb	r0, r0
 8023856:	4770      	bx	lr
 8023858:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802385c:	2b05      	cmp	r3, #5
 802385e:	d801      	bhi.n	8023864 <__hexdig_fun+0x1a>
 8023860:	3847      	subs	r0, #71	; 0x47
 8023862:	e7f7      	b.n	8023854 <__hexdig_fun+0xa>
 8023864:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8023868:	2b05      	cmp	r3, #5
 802386a:	d801      	bhi.n	8023870 <__hexdig_fun+0x26>
 802386c:	3827      	subs	r0, #39	; 0x27
 802386e:	e7f1      	b.n	8023854 <__hexdig_fun+0xa>
 8023870:	2000      	movs	r0, #0
 8023872:	4770      	bx	lr

08023874 <__gethex>:
 8023874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023878:	4617      	mov	r7, r2
 802387a:	680a      	ldr	r2, [r1, #0]
 802387c:	b085      	sub	sp, #20
 802387e:	f102 0b02 	add.w	fp, r2, #2
 8023882:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8023886:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802388a:	4681      	mov	r9, r0
 802388c:	468a      	mov	sl, r1
 802388e:	9302      	str	r3, [sp, #8]
 8023890:	32fe      	adds	r2, #254	; 0xfe
 8023892:	eb02 030b 	add.w	r3, r2, fp
 8023896:	46d8      	mov	r8, fp
 8023898:	f81b 0b01 	ldrb.w	r0, [fp], #1
 802389c:	9301      	str	r3, [sp, #4]
 802389e:	2830      	cmp	r0, #48	; 0x30
 80238a0:	d0f7      	beq.n	8023892 <__gethex+0x1e>
 80238a2:	f7ff ffd2 	bl	802384a <__hexdig_fun>
 80238a6:	4604      	mov	r4, r0
 80238a8:	2800      	cmp	r0, #0
 80238aa:	d138      	bne.n	802391e <__gethex+0xaa>
 80238ac:	49a7      	ldr	r1, [pc, #668]	; (8023b4c <__gethex+0x2d8>)
 80238ae:	2201      	movs	r2, #1
 80238b0:	4640      	mov	r0, r8
 80238b2:	f7fd f948 	bl	8020b46 <strncmp>
 80238b6:	4606      	mov	r6, r0
 80238b8:	2800      	cmp	r0, #0
 80238ba:	d169      	bne.n	8023990 <__gethex+0x11c>
 80238bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80238c0:	465d      	mov	r5, fp
 80238c2:	f7ff ffc2 	bl	802384a <__hexdig_fun>
 80238c6:	2800      	cmp	r0, #0
 80238c8:	d064      	beq.n	8023994 <__gethex+0x120>
 80238ca:	465a      	mov	r2, fp
 80238cc:	7810      	ldrb	r0, [r2, #0]
 80238ce:	2830      	cmp	r0, #48	; 0x30
 80238d0:	4690      	mov	r8, r2
 80238d2:	f102 0201 	add.w	r2, r2, #1
 80238d6:	d0f9      	beq.n	80238cc <__gethex+0x58>
 80238d8:	f7ff ffb7 	bl	802384a <__hexdig_fun>
 80238dc:	2301      	movs	r3, #1
 80238de:	fab0 f480 	clz	r4, r0
 80238e2:	0964      	lsrs	r4, r4, #5
 80238e4:	465e      	mov	r6, fp
 80238e6:	9301      	str	r3, [sp, #4]
 80238e8:	4642      	mov	r2, r8
 80238ea:	4615      	mov	r5, r2
 80238ec:	3201      	adds	r2, #1
 80238ee:	7828      	ldrb	r0, [r5, #0]
 80238f0:	f7ff ffab 	bl	802384a <__hexdig_fun>
 80238f4:	2800      	cmp	r0, #0
 80238f6:	d1f8      	bne.n	80238ea <__gethex+0x76>
 80238f8:	4994      	ldr	r1, [pc, #592]	; (8023b4c <__gethex+0x2d8>)
 80238fa:	2201      	movs	r2, #1
 80238fc:	4628      	mov	r0, r5
 80238fe:	f7fd f922 	bl	8020b46 <strncmp>
 8023902:	b978      	cbnz	r0, 8023924 <__gethex+0xb0>
 8023904:	b946      	cbnz	r6, 8023918 <__gethex+0xa4>
 8023906:	1c6e      	adds	r6, r5, #1
 8023908:	4632      	mov	r2, r6
 802390a:	4615      	mov	r5, r2
 802390c:	3201      	adds	r2, #1
 802390e:	7828      	ldrb	r0, [r5, #0]
 8023910:	f7ff ff9b 	bl	802384a <__hexdig_fun>
 8023914:	2800      	cmp	r0, #0
 8023916:	d1f8      	bne.n	802390a <__gethex+0x96>
 8023918:	1b73      	subs	r3, r6, r5
 802391a:	009e      	lsls	r6, r3, #2
 802391c:	e004      	b.n	8023928 <__gethex+0xb4>
 802391e:	2400      	movs	r4, #0
 8023920:	4626      	mov	r6, r4
 8023922:	e7e1      	b.n	80238e8 <__gethex+0x74>
 8023924:	2e00      	cmp	r6, #0
 8023926:	d1f7      	bne.n	8023918 <__gethex+0xa4>
 8023928:	782b      	ldrb	r3, [r5, #0]
 802392a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802392e:	2b50      	cmp	r3, #80	; 0x50
 8023930:	d13d      	bne.n	80239ae <__gethex+0x13a>
 8023932:	786b      	ldrb	r3, [r5, #1]
 8023934:	2b2b      	cmp	r3, #43	; 0x2b
 8023936:	d02f      	beq.n	8023998 <__gethex+0x124>
 8023938:	2b2d      	cmp	r3, #45	; 0x2d
 802393a:	d031      	beq.n	80239a0 <__gethex+0x12c>
 802393c:	1c69      	adds	r1, r5, #1
 802393e:	f04f 0b00 	mov.w	fp, #0
 8023942:	7808      	ldrb	r0, [r1, #0]
 8023944:	f7ff ff81 	bl	802384a <__hexdig_fun>
 8023948:	1e42      	subs	r2, r0, #1
 802394a:	b2d2      	uxtb	r2, r2
 802394c:	2a18      	cmp	r2, #24
 802394e:	d82e      	bhi.n	80239ae <__gethex+0x13a>
 8023950:	f1a0 0210 	sub.w	r2, r0, #16
 8023954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8023958:	f7ff ff77 	bl	802384a <__hexdig_fun>
 802395c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8023960:	fa5f fc8c 	uxtb.w	ip, ip
 8023964:	f1bc 0f18 	cmp.w	ip, #24
 8023968:	d91d      	bls.n	80239a6 <__gethex+0x132>
 802396a:	f1bb 0f00 	cmp.w	fp, #0
 802396e:	d000      	beq.n	8023972 <__gethex+0xfe>
 8023970:	4252      	negs	r2, r2
 8023972:	4416      	add	r6, r2
 8023974:	f8ca 1000 	str.w	r1, [sl]
 8023978:	b1dc      	cbz	r4, 80239b2 <__gethex+0x13e>
 802397a:	9b01      	ldr	r3, [sp, #4]
 802397c:	2b00      	cmp	r3, #0
 802397e:	bf14      	ite	ne
 8023980:	f04f 0800 	movne.w	r8, #0
 8023984:	f04f 0806 	moveq.w	r8, #6
 8023988:	4640      	mov	r0, r8
 802398a:	b005      	add	sp, #20
 802398c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023990:	4645      	mov	r5, r8
 8023992:	4626      	mov	r6, r4
 8023994:	2401      	movs	r4, #1
 8023996:	e7c7      	b.n	8023928 <__gethex+0xb4>
 8023998:	f04f 0b00 	mov.w	fp, #0
 802399c:	1ca9      	adds	r1, r5, #2
 802399e:	e7d0      	b.n	8023942 <__gethex+0xce>
 80239a0:	f04f 0b01 	mov.w	fp, #1
 80239a4:	e7fa      	b.n	802399c <__gethex+0x128>
 80239a6:	230a      	movs	r3, #10
 80239a8:	fb03 0002 	mla	r0, r3, r2, r0
 80239ac:	e7d0      	b.n	8023950 <__gethex+0xdc>
 80239ae:	4629      	mov	r1, r5
 80239b0:	e7e0      	b.n	8023974 <__gethex+0x100>
 80239b2:	eba5 0308 	sub.w	r3, r5, r8
 80239b6:	3b01      	subs	r3, #1
 80239b8:	4621      	mov	r1, r4
 80239ba:	2b07      	cmp	r3, #7
 80239bc:	dc0a      	bgt.n	80239d4 <__gethex+0x160>
 80239be:	4648      	mov	r0, r9
 80239c0:	f7fd fffa 	bl	80219b8 <_Balloc>
 80239c4:	4604      	mov	r4, r0
 80239c6:	b940      	cbnz	r0, 80239da <__gethex+0x166>
 80239c8:	4b61      	ldr	r3, [pc, #388]	; (8023b50 <__gethex+0x2dc>)
 80239ca:	4602      	mov	r2, r0
 80239cc:	21e4      	movs	r1, #228	; 0xe4
 80239ce:	4861      	ldr	r0, [pc, #388]	; (8023b54 <__gethex+0x2e0>)
 80239d0:	f7fd f986 	bl	8020ce0 <__assert_func>
 80239d4:	3101      	adds	r1, #1
 80239d6:	105b      	asrs	r3, r3, #1
 80239d8:	e7ef      	b.n	80239ba <__gethex+0x146>
 80239da:	f100 0a14 	add.w	sl, r0, #20
 80239de:	2300      	movs	r3, #0
 80239e0:	495a      	ldr	r1, [pc, #360]	; (8023b4c <__gethex+0x2d8>)
 80239e2:	f8cd a004 	str.w	sl, [sp, #4]
 80239e6:	469b      	mov	fp, r3
 80239e8:	45a8      	cmp	r8, r5
 80239ea:	d342      	bcc.n	8023a72 <__gethex+0x1fe>
 80239ec:	9801      	ldr	r0, [sp, #4]
 80239ee:	f840 bb04 	str.w	fp, [r0], #4
 80239f2:	eba0 000a 	sub.w	r0, r0, sl
 80239f6:	1080      	asrs	r0, r0, #2
 80239f8:	6120      	str	r0, [r4, #16]
 80239fa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80239fe:	4658      	mov	r0, fp
 8023a00:	f7fe f8cc 	bl	8021b9c <__hi0bits>
 8023a04:	683d      	ldr	r5, [r7, #0]
 8023a06:	eba8 0000 	sub.w	r0, r8, r0
 8023a0a:	42a8      	cmp	r0, r5
 8023a0c:	dd59      	ble.n	8023ac2 <__gethex+0x24e>
 8023a0e:	eba0 0805 	sub.w	r8, r0, r5
 8023a12:	4641      	mov	r1, r8
 8023a14:	4620      	mov	r0, r4
 8023a16:	f7fe fc58 	bl	80222ca <__any_on>
 8023a1a:	4683      	mov	fp, r0
 8023a1c:	b1b8      	cbz	r0, 8023a4e <__gethex+0x1da>
 8023a1e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8023a22:	1159      	asrs	r1, r3, #5
 8023a24:	f003 021f 	and.w	r2, r3, #31
 8023a28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8023a2c:	f04f 0b01 	mov.w	fp, #1
 8023a30:	fa0b f202 	lsl.w	r2, fp, r2
 8023a34:	420a      	tst	r2, r1
 8023a36:	d00a      	beq.n	8023a4e <__gethex+0x1da>
 8023a38:	455b      	cmp	r3, fp
 8023a3a:	dd06      	ble.n	8023a4a <__gethex+0x1d6>
 8023a3c:	f1a8 0102 	sub.w	r1, r8, #2
 8023a40:	4620      	mov	r0, r4
 8023a42:	f7fe fc42 	bl	80222ca <__any_on>
 8023a46:	2800      	cmp	r0, #0
 8023a48:	d138      	bne.n	8023abc <__gethex+0x248>
 8023a4a:	f04f 0b02 	mov.w	fp, #2
 8023a4e:	4641      	mov	r1, r8
 8023a50:	4620      	mov	r0, r4
 8023a52:	f7ff fea8 	bl	80237a6 <rshift>
 8023a56:	4446      	add	r6, r8
 8023a58:	68bb      	ldr	r3, [r7, #8]
 8023a5a:	42b3      	cmp	r3, r6
 8023a5c:	da41      	bge.n	8023ae2 <__gethex+0x26e>
 8023a5e:	4621      	mov	r1, r4
 8023a60:	4648      	mov	r0, r9
 8023a62:	f7fd ffe9 	bl	8021a38 <_Bfree>
 8023a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023a68:	2300      	movs	r3, #0
 8023a6a:	6013      	str	r3, [r2, #0]
 8023a6c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8023a70:	e78a      	b.n	8023988 <__gethex+0x114>
 8023a72:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8023a76:	2a2e      	cmp	r2, #46	; 0x2e
 8023a78:	d014      	beq.n	8023aa4 <__gethex+0x230>
 8023a7a:	2b20      	cmp	r3, #32
 8023a7c:	d106      	bne.n	8023a8c <__gethex+0x218>
 8023a7e:	9b01      	ldr	r3, [sp, #4]
 8023a80:	f843 bb04 	str.w	fp, [r3], #4
 8023a84:	f04f 0b00 	mov.w	fp, #0
 8023a88:	9301      	str	r3, [sp, #4]
 8023a8a:	465b      	mov	r3, fp
 8023a8c:	7828      	ldrb	r0, [r5, #0]
 8023a8e:	9303      	str	r3, [sp, #12]
 8023a90:	f7ff fedb 	bl	802384a <__hexdig_fun>
 8023a94:	9b03      	ldr	r3, [sp, #12]
 8023a96:	f000 000f 	and.w	r0, r0, #15
 8023a9a:	4098      	lsls	r0, r3
 8023a9c:	ea4b 0b00 	orr.w	fp, fp, r0
 8023aa0:	3304      	adds	r3, #4
 8023aa2:	e7a1      	b.n	80239e8 <__gethex+0x174>
 8023aa4:	45a8      	cmp	r8, r5
 8023aa6:	d8e8      	bhi.n	8023a7a <__gethex+0x206>
 8023aa8:	2201      	movs	r2, #1
 8023aaa:	4628      	mov	r0, r5
 8023aac:	9303      	str	r3, [sp, #12]
 8023aae:	f7fd f84a 	bl	8020b46 <strncmp>
 8023ab2:	4926      	ldr	r1, [pc, #152]	; (8023b4c <__gethex+0x2d8>)
 8023ab4:	9b03      	ldr	r3, [sp, #12]
 8023ab6:	2800      	cmp	r0, #0
 8023ab8:	d1df      	bne.n	8023a7a <__gethex+0x206>
 8023aba:	e795      	b.n	80239e8 <__gethex+0x174>
 8023abc:	f04f 0b03 	mov.w	fp, #3
 8023ac0:	e7c5      	b.n	8023a4e <__gethex+0x1da>
 8023ac2:	da0b      	bge.n	8023adc <__gethex+0x268>
 8023ac4:	eba5 0800 	sub.w	r8, r5, r0
 8023ac8:	4621      	mov	r1, r4
 8023aca:	4642      	mov	r2, r8
 8023acc:	4648      	mov	r0, r9
 8023ace:	f7fe f9cd 	bl	8021e6c <__lshift>
 8023ad2:	eba6 0608 	sub.w	r6, r6, r8
 8023ad6:	4604      	mov	r4, r0
 8023ad8:	f100 0a14 	add.w	sl, r0, #20
 8023adc:	f04f 0b00 	mov.w	fp, #0
 8023ae0:	e7ba      	b.n	8023a58 <__gethex+0x1e4>
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	42b3      	cmp	r3, r6
 8023ae6:	dd73      	ble.n	8023bd0 <__gethex+0x35c>
 8023ae8:	1b9e      	subs	r6, r3, r6
 8023aea:	42b5      	cmp	r5, r6
 8023aec:	dc34      	bgt.n	8023b58 <__gethex+0x2e4>
 8023aee:	68fb      	ldr	r3, [r7, #12]
 8023af0:	2b02      	cmp	r3, #2
 8023af2:	d023      	beq.n	8023b3c <__gethex+0x2c8>
 8023af4:	2b03      	cmp	r3, #3
 8023af6:	d025      	beq.n	8023b44 <__gethex+0x2d0>
 8023af8:	2b01      	cmp	r3, #1
 8023afa:	d115      	bne.n	8023b28 <__gethex+0x2b4>
 8023afc:	42b5      	cmp	r5, r6
 8023afe:	d113      	bne.n	8023b28 <__gethex+0x2b4>
 8023b00:	2d01      	cmp	r5, #1
 8023b02:	d10b      	bne.n	8023b1c <__gethex+0x2a8>
 8023b04:	9a02      	ldr	r2, [sp, #8]
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	6013      	str	r3, [r2, #0]
 8023b0a:	2301      	movs	r3, #1
 8023b0c:	6123      	str	r3, [r4, #16]
 8023b0e:	f8ca 3000 	str.w	r3, [sl]
 8023b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b14:	f04f 0862 	mov.w	r8, #98	; 0x62
 8023b18:	601c      	str	r4, [r3, #0]
 8023b1a:	e735      	b.n	8023988 <__gethex+0x114>
 8023b1c:	1e69      	subs	r1, r5, #1
 8023b1e:	4620      	mov	r0, r4
 8023b20:	f7fe fbd3 	bl	80222ca <__any_on>
 8023b24:	2800      	cmp	r0, #0
 8023b26:	d1ed      	bne.n	8023b04 <__gethex+0x290>
 8023b28:	4621      	mov	r1, r4
 8023b2a:	4648      	mov	r0, r9
 8023b2c:	f7fd ff84 	bl	8021a38 <_Bfree>
 8023b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023b32:	2300      	movs	r3, #0
 8023b34:	6013      	str	r3, [r2, #0]
 8023b36:	f04f 0850 	mov.w	r8, #80	; 0x50
 8023b3a:	e725      	b.n	8023988 <__gethex+0x114>
 8023b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023b3e:	2b00      	cmp	r3, #0
 8023b40:	d1f2      	bne.n	8023b28 <__gethex+0x2b4>
 8023b42:	e7df      	b.n	8023b04 <__gethex+0x290>
 8023b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023b46:	2b00      	cmp	r3, #0
 8023b48:	d1dc      	bne.n	8023b04 <__gethex+0x290>
 8023b4a:	e7ed      	b.n	8023b28 <__gethex+0x2b4>
 8023b4c:	08025c0c 	.word	0x08025c0c
 8023b50:	08025aa6 	.word	0x08025aa6
 8023b54:	08025c79 	.word	0x08025c79
 8023b58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8023b5c:	f1bb 0f00 	cmp.w	fp, #0
 8023b60:	d133      	bne.n	8023bca <__gethex+0x356>
 8023b62:	f1b8 0f00 	cmp.w	r8, #0
 8023b66:	d004      	beq.n	8023b72 <__gethex+0x2fe>
 8023b68:	4641      	mov	r1, r8
 8023b6a:	4620      	mov	r0, r4
 8023b6c:	f7fe fbad 	bl	80222ca <__any_on>
 8023b70:	4683      	mov	fp, r0
 8023b72:	ea4f 1268 	mov.w	r2, r8, asr #5
 8023b76:	2301      	movs	r3, #1
 8023b78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8023b7c:	f008 081f 	and.w	r8, r8, #31
 8023b80:	fa03 f308 	lsl.w	r3, r3, r8
 8023b84:	4213      	tst	r3, r2
 8023b86:	4631      	mov	r1, r6
 8023b88:	4620      	mov	r0, r4
 8023b8a:	bf18      	it	ne
 8023b8c:	f04b 0b02 	orrne.w	fp, fp, #2
 8023b90:	1bad      	subs	r5, r5, r6
 8023b92:	f7ff fe08 	bl	80237a6 <rshift>
 8023b96:	687e      	ldr	r6, [r7, #4]
 8023b98:	f04f 0802 	mov.w	r8, #2
 8023b9c:	f1bb 0f00 	cmp.w	fp, #0
 8023ba0:	d04a      	beq.n	8023c38 <__gethex+0x3c4>
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	2b02      	cmp	r3, #2
 8023ba6:	d016      	beq.n	8023bd6 <__gethex+0x362>
 8023ba8:	2b03      	cmp	r3, #3
 8023baa:	d018      	beq.n	8023bde <__gethex+0x36a>
 8023bac:	2b01      	cmp	r3, #1
 8023bae:	d109      	bne.n	8023bc4 <__gethex+0x350>
 8023bb0:	f01b 0f02 	tst.w	fp, #2
 8023bb4:	d006      	beq.n	8023bc4 <__gethex+0x350>
 8023bb6:	f8da 3000 	ldr.w	r3, [sl]
 8023bba:	ea4b 0b03 	orr.w	fp, fp, r3
 8023bbe:	f01b 0f01 	tst.w	fp, #1
 8023bc2:	d10f      	bne.n	8023be4 <__gethex+0x370>
 8023bc4:	f048 0810 	orr.w	r8, r8, #16
 8023bc8:	e036      	b.n	8023c38 <__gethex+0x3c4>
 8023bca:	f04f 0b01 	mov.w	fp, #1
 8023bce:	e7d0      	b.n	8023b72 <__gethex+0x2fe>
 8023bd0:	f04f 0801 	mov.w	r8, #1
 8023bd4:	e7e2      	b.n	8023b9c <__gethex+0x328>
 8023bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023bd8:	f1c3 0301 	rsb	r3, r3, #1
 8023bdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8023bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023be0:	2b00      	cmp	r3, #0
 8023be2:	d0ef      	beq.n	8023bc4 <__gethex+0x350>
 8023be4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8023be8:	f104 0214 	add.w	r2, r4, #20
 8023bec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8023bf0:	9301      	str	r3, [sp, #4]
 8023bf2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	4694      	mov	ip, r2
 8023bfa:	f852 1b04 	ldr.w	r1, [r2], #4
 8023bfe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8023c02:	d01e      	beq.n	8023c42 <__gethex+0x3ce>
 8023c04:	3101      	adds	r1, #1
 8023c06:	f8cc 1000 	str.w	r1, [ip]
 8023c0a:	f1b8 0f02 	cmp.w	r8, #2
 8023c0e:	f104 0214 	add.w	r2, r4, #20
 8023c12:	d13d      	bne.n	8023c90 <__gethex+0x41c>
 8023c14:	683b      	ldr	r3, [r7, #0]
 8023c16:	3b01      	subs	r3, #1
 8023c18:	42ab      	cmp	r3, r5
 8023c1a:	d10b      	bne.n	8023c34 <__gethex+0x3c0>
 8023c1c:	1169      	asrs	r1, r5, #5
 8023c1e:	2301      	movs	r3, #1
 8023c20:	f005 051f 	and.w	r5, r5, #31
 8023c24:	fa03 f505 	lsl.w	r5, r3, r5
 8023c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023c2c:	421d      	tst	r5, r3
 8023c2e:	bf18      	it	ne
 8023c30:	f04f 0801 	movne.w	r8, #1
 8023c34:	f048 0820 	orr.w	r8, r8, #32
 8023c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023c3a:	601c      	str	r4, [r3, #0]
 8023c3c:	9b02      	ldr	r3, [sp, #8]
 8023c3e:	601e      	str	r6, [r3, #0]
 8023c40:	e6a2      	b.n	8023988 <__gethex+0x114>
 8023c42:	4290      	cmp	r0, r2
 8023c44:	f842 3c04 	str.w	r3, [r2, #-4]
 8023c48:	d8d6      	bhi.n	8023bf8 <__gethex+0x384>
 8023c4a:	68a2      	ldr	r2, [r4, #8]
 8023c4c:	4593      	cmp	fp, r2
 8023c4e:	db17      	blt.n	8023c80 <__gethex+0x40c>
 8023c50:	6861      	ldr	r1, [r4, #4]
 8023c52:	4648      	mov	r0, r9
 8023c54:	3101      	adds	r1, #1
 8023c56:	f7fd feaf 	bl	80219b8 <_Balloc>
 8023c5a:	4682      	mov	sl, r0
 8023c5c:	b918      	cbnz	r0, 8023c66 <__gethex+0x3f2>
 8023c5e:	4b1b      	ldr	r3, [pc, #108]	; (8023ccc <__gethex+0x458>)
 8023c60:	4602      	mov	r2, r0
 8023c62:	2184      	movs	r1, #132	; 0x84
 8023c64:	e6b3      	b.n	80239ce <__gethex+0x15a>
 8023c66:	6922      	ldr	r2, [r4, #16]
 8023c68:	3202      	adds	r2, #2
 8023c6a:	f104 010c 	add.w	r1, r4, #12
 8023c6e:	0092      	lsls	r2, r2, #2
 8023c70:	300c      	adds	r0, #12
 8023c72:	f7fd f820 	bl	8020cb6 <memcpy>
 8023c76:	4621      	mov	r1, r4
 8023c78:	4648      	mov	r0, r9
 8023c7a:	f7fd fedd 	bl	8021a38 <_Bfree>
 8023c7e:	4654      	mov	r4, sl
 8023c80:	6922      	ldr	r2, [r4, #16]
 8023c82:	1c51      	adds	r1, r2, #1
 8023c84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023c88:	6121      	str	r1, [r4, #16]
 8023c8a:	2101      	movs	r1, #1
 8023c8c:	6151      	str	r1, [r2, #20]
 8023c8e:	e7bc      	b.n	8023c0a <__gethex+0x396>
 8023c90:	6921      	ldr	r1, [r4, #16]
 8023c92:	4559      	cmp	r1, fp
 8023c94:	dd0b      	ble.n	8023cae <__gethex+0x43a>
 8023c96:	2101      	movs	r1, #1
 8023c98:	4620      	mov	r0, r4
 8023c9a:	f7ff fd84 	bl	80237a6 <rshift>
 8023c9e:	68bb      	ldr	r3, [r7, #8]
 8023ca0:	3601      	adds	r6, #1
 8023ca2:	42b3      	cmp	r3, r6
 8023ca4:	f6ff aedb 	blt.w	8023a5e <__gethex+0x1ea>
 8023ca8:	f04f 0801 	mov.w	r8, #1
 8023cac:	e7c2      	b.n	8023c34 <__gethex+0x3c0>
 8023cae:	f015 051f 	ands.w	r5, r5, #31
 8023cb2:	d0f9      	beq.n	8023ca8 <__gethex+0x434>
 8023cb4:	9b01      	ldr	r3, [sp, #4]
 8023cb6:	441a      	add	r2, r3
 8023cb8:	f1c5 0520 	rsb	r5, r5, #32
 8023cbc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8023cc0:	f7fd ff6c 	bl	8021b9c <__hi0bits>
 8023cc4:	42a8      	cmp	r0, r5
 8023cc6:	dbe6      	blt.n	8023c96 <__gethex+0x422>
 8023cc8:	e7ee      	b.n	8023ca8 <__gethex+0x434>
 8023cca:	bf00      	nop
 8023ccc:	08025aa6 	.word	0x08025aa6

08023cd0 <L_shift>:
 8023cd0:	f1c2 0208 	rsb	r2, r2, #8
 8023cd4:	0092      	lsls	r2, r2, #2
 8023cd6:	b570      	push	{r4, r5, r6, lr}
 8023cd8:	f1c2 0620 	rsb	r6, r2, #32
 8023cdc:	6843      	ldr	r3, [r0, #4]
 8023cde:	6804      	ldr	r4, [r0, #0]
 8023ce0:	fa03 f506 	lsl.w	r5, r3, r6
 8023ce4:	432c      	orrs	r4, r5
 8023ce6:	40d3      	lsrs	r3, r2
 8023ce8:	6004      	str	r4, [r0, #0]
 8023cea:	f840 3f04 	str.w	r3, [r0, #4]!
 8023cee:	4288      	cmp	r0, r1
 8023cf0:	d3f4      	bcc.n	8023cdc <L_shift+0xc>
 8023cf2:	bd70      	pop	{r4, r5, r6, pc}

08023cf4 <__match>:
 8023cf4:	b530      	push	{r4, r5, lr}
 8023cf6:	6803      	ldr	r3, [r0, #0]
 8023cf8:	3301      	adds	r3, #1
 8023cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023cfe:	b914      	cbnz	r4, 8023d06 <__match+0x12>
 8023d00:	6003      	str	r3, [r0, #0]
 8023d02:	2001      	movs	r0, #1
 8023d04:	bd30      	pop	{r4, r5, pc}
 8023d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023d0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8023d0e:	2d19      	cmp	r5, #25
 8023d10:	bf98      	it	ls
 8023d12:	3220      	addls	r2, #32
 8023d14:	42a2      	cmp	r2, r4
 8023d16:	d0f0      	beq.n	8023cfa <__match+0x6>
 8023d18:	2000      	movs	r0, #0
 8023d1a:	e7f3      	b.n	8023d04 <__match+0x10>

08023d1c <__hexnan>:
 8023d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d20:	680b      	ldr	r3, [r1, #0]
 8023d22:	6801      	ldr	r1, [r0, #0]
 8023d24:	115e      	asrs	r6, r3, #5
 8023d26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8023d2a:	f013 031f 	ands.w	r3, r3, #31
 8023d2e:	b087      	sub	sp, #28
 8023d30:	bf18      	it	ne
 8023d32:	3604      	addne	r6, #4
 8023d34:	2500      	movs	r5, #0
 8023d36:	1f37      	subs	r7, r6, #4
 8023d38:	4682      	mov	sl, r0
 8023d3a:	4690      	mov	r8, r2
 8023d3c:	9301      	str	r3, [sp, #4]
 8023d3e:	f846 5c04 	str.w	r5, [r6, #-4]
 8023d42:	46b9      	mov	r9, r7
 8023d44:	463c      	mov	r4, r7
 8023d46:	9502      	str	r5, [sp, #8]
 8023d48:	46ab      	mov	fp, r5
 8023d4a:	784a      	ldrb	r2, [r1, #1]
 8023d4c:	1c4b      	adds	r3, r1, #1
 8023d4e:	9303      	str	r3, [sp, #12]
 8023d50:	b342      	cbz	r2, 8023da4 <__hexnan+0x88>
 8023d52:	4610      	mov	r0, r2
 8023d54:	9105      	str	r1, [sp, #20]
 8023d56:	9204      	str	r2, [sp, #16]
 8023d58:	f7ff fd77 	bl	802384a <__hexdig_fun>
 8023d5c:	2800      	cmp	r0, #0
 8023d5e:	d14f      	bne.n	8023e00 <__hexnan+0xe4>
 8023d60:	9a04      	ldr	r2, [sp, #16]
 8023d62:	9905      	ldr	r1, [sp, #20]
 8023d64:	2a20      	cmp	r2, #32
 8023d66:	d818      	bhi.n	8023d9a <__hexnan+0x7e>
 8023d68:	9b02      	ldr	r3, [sp, #8]
 8023d6a:	459b      	cmp	fp, r3
 8023d6c:	dd13      	ble.n	8023d96 <__hexnan+0x7a>
 8023d6e:	454c      	cmp	r4, r9
 8023d70:	d206      	bcs.n	8023d80 <__hexnan+0x64>
 8023d72:	2d07      	cmp	r5, #7
 8023d74:	dc04      	bgt.n	8023d80 <__hexnan+0x64>
 8023d76:	462a      	mov	r2, r5
 8023d78:	4649      	mov	r1, r9
 8023d7a:	4620      	mov	r0, r4
 8023d7c:	f7ff ffa8 	bl	8023cd0 <L_shift>
 8023d80:	4544      	cmp	r4, r8
 8023d82:	d950      	bls.n	8023e26 <__hexnan+0x10a>
 8023d84:	2300      	movs	r3, #0
 8023d86:	f1a4 0904 	sub.w	r9, r4, #4
 8023d8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8023d8e:	f8cd b008 	str.w	fp, [sp, #8]
 8023d92:	464c      	mov	r4, r9
 8023d94:	461d      	mov	r5, r3
 8023d96:	9903      	ldr	r1, [sp, #12]
 8023d98:	e7d7      	b.n	8023d4a <__hexnan+0x2e>
 8023d9a:	2a29      	cmp	r2, #41	; 0x29
 8023d9c:	d155      	bne.n	8023e4a <__hexnan+0x12e>
 8023d9e:	3102      	adds	r1, #2
 8023da0:	f8ca 1000 	str.w	r1, [sl]
 8023da4:	f1bb 0f00 	cmp.w	fp, #0
 8023da8:	d04f      	beq.n	8023e4a <__hexnan+0x12e>
 8023daa:	454c      	cmp	r4, r9
 8023dac:	d206      	bcs.n	8023dbc <__hexnan+0xa0>
 8023dae:	2d07      	cmp	r5, #7
 8023db0:	dc04      	bgt.n	8023dbc <__hexnan+0xa0>
 8023db2:	462a      	mov	r2, r5
 8023db4:	4649      	mov	r1, r9
 8023db6:	4620      	mov	r0, r4
 8023db8:	f7ff ff8a 	bl	8023cd0 <L_shift>
 8023dbc:	4544      	cmp	r4, r8
 8023dbe:	d934      	bls.n	8023e2a <__hexnan+0x10e>
 8023dc0:	f1a8 0204 	sub.w	r2, r8, #4
 8023dc4:	4623      	mov	r3, r4
 8023dc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8023dca:	f842 1f04 	str.w	r1, [r2, #4]!
 8023dce:	429f      	cmp	r7, r3
 8023dd0:	d2f9      	bcs.n	8023dc6 <__hexnan+0xaa>
 8023dd2:	1b3b      	subs	r3, r7, r4
 8023dd4:	f023 0303 	bic.w	r3, r3, #3
 8023dd8:	3304      	adds	r3, #4
 8023dda:	3e03      	subs	r6, #3
 8023ddc:	3401      	adds	r4, #1
 8023dde:	42a6      	cmp	r6, r4
 8023de0:	bf38      	it	cc
 8023de2:	2304      	movcc	r3, #4
 8023de4:	4443      	add	r3, r8
 8023de6:	2200      	movs	r2, #0
 8023de8:	f843 2b04 	str.w	r2, [r3], #4
 8023dec:	429f      	cmp	r7, r3
 8023dee:	d2fb      	bcs.n	8023de8 <__hexnan+0xcc>
 8023df0:	683b      	ldr	r3, [r7, #0]
 8023df2:	b91b      	cbnz	r3, 8023dfc <__hexnan+0xe0>
 8023df4:	4547      	cmp	r7, r8
 8023df6:	d126      	bne.n	8023e46 <__hexnan+0x12a>
 8023df8:	2301      	movs	r3, #1
 8023dfa:	603b      	str	r3, [r7, #0]
 8023dfc:	2005      	movs	r0, #5
 8023dfe:	e025      	b.n	8023e4c <__hexnan+0x130>
 8023e00:	3501      	adds	r5, #1
 8023e02:	2d08      	cmp	r5, #8
 8023e04:	f10b 0b01 	add.w	fp, fp, #1
 8023e08:	dd06      	ble.n	8023e18 <__hexnan+0xfc>
 8023e0a:	4544      	cmp	r4, r8
 8023e0c:	d9c3      	bls.n	8023d96 <__hexnan+0x7a>
 8023e0e:	2300      	movs	r3, #0
 8023e10:	f844 3c04 	str.w	r3, [r4, #-4]
 8023e14:	2501      	movs	r5, #1
 8023e16:	3c04      	subs	r4, #4
 8023e18:	6822      	ldr	r2, [r4, #0]
 8023e1a:	f000 000f 	and.w	r0, r0, #15
 8023e1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8023e22:	6020      	str	r0, [r4, #0]
 8023e24:	e7b7      	b.n	8023d96 <__hexnan+0x7a>
 8023e26:	2508      	movs	r5, #8
 8023e28:	e7b5      	b.n	8023d96 <__hexnan+0x7a>
 8023e2a:	9b01      	ldr	r3, [sp, #4]
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d0df      	beq.n	8023df0 <__hexnan+0xd4>
 8023e30:	f1c3 0320 	rsb	r3, r3, #32
 8023e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023e38:	40da      	lsrs	r2, r3
 8023e3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023e3e:	4013      	ands	r3, r2
 8023e40:	f846 3c04 	str.w	r3, [r6, #-4]
 8023e44:	e7d4      	b.n	8023df0 <__hexnan+0xd4>
 8023e46:	3f04      	subs	r7, #4
 8023e48:	e7d2      	b.n	8023df0 <__hexnan+0xd4>
 8023e4a:	2004      	movs	r0, #4
 8023e4c:	b007      	add	sp, #28
 8023e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023e52 <__ascii_mbtowc>:
 8023e52:	b082      	sub	sp, #8
 8023e54:	b901      	cbnz	r1, 8023e58 <__ascii_mbtowc+0x6>
 8023e56:	a901      	add	r1, sp, #4
 8023e58:	b142      	cbz	r2, 8023e6c <__ascii_mbtowc+0x1a>
 8023e5a:	b14b      	cbz	r3, 8023e70 <__ascii_mbtowc+0x1e>
 8023e5c:	7813      	ldrb	r3, [r2, #0]
 8023e5e:	600b      	str	r3, [r1, #0]
 8023e60:	7812      	ldrb	r2, [r2, #0]
 8023e62:	1e10      	subs	r0, r2, #0
 8023e64:	bf18      	it	ne
 8023e66:	2001      	movne	r0, #1
 8023e68:	b002      	add	sp, #8
 8023e6a:	4770      	bx	lr
 8023e6c:	4610      	mov	r0, r2
 8023e6e:	e7fb      	b.n	8023e68 <__ascii_mbtowc+0x16>
 8023e70:	f06f 0001 	mvn.w	r0, #1
 8023e74:	e7f8      	b.n	8023e68 <__ascii_mbtowc+0x16>

08023e76 <__ascii_wctomb>:
 8023e76:	b149      	cbz	r1, 8023e8c <__ascii_wctomb+0x16>
 8023e78:	2aff      	cmp	r2, #255	; 0xff
 8023e7a:	bf85      	ittet	hi
 8023e7c:	238a      	movhi	r3, #138	; 0x8a
 8023e7e:	6003      	strhi	r3, [r0, #0]
 8023e80:	700a      	strbls	r2, [r1, #0]
 8023e82:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8023e86:	bf98      	it	ls
 8023e88:	2001      	movls	r0, #1
 8023e8a:	4770      	bx	lr
 8023e8c:	4608      	mov	r0, r1
 8023e8e:	4770      	bx	lr

08023e90 <_raise_r>:
 8023e90:	291f      	cmp	r1, #31
 8023e92:	b538      	push	{r3, r4, r5, lr}
 8023e94:	4604      	mov	r4, r0
 8023e96:	460d      	mov	r5, r1
 8023e98:	d904      	bls.n	8023ea4 <_raise_r+0x14>
 8023e9a:	2316      	movs	r3, #22
 8023e9c:	6003      	str	r3, [r0, #0]
 8023e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023ea2:	bd38      	pop	{r3, r4, r5, pc}
 8023ea4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8023ea6:	b112      	cbz	r2, 8023eae <_raise_r+0x1e>
 8023ea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023eac:	b94b      	cbnz	r3, 8023ec2 <_raise_r+0x32>
 8023eae:	4620      	mov	r0, r4
 8023eb0:	f000 f830 	bl	8023f14 <_getpid_r>
 8023eb4:	462a      	mov	r2, r5
 8023eb6:	4601      	mov	r1, r0
 8023eb8:	4620      	mov	r0, r4
 8023eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ebe:	f000 b817 	b.w	8023ef0 <_kill_r>
 8023ec2:	2b01      	cmp	r3, #1
 8023ec4:	d00a      	beq.n	8023edc <_raise_r+0x4c>
 8023ec6:	1c59      	adds	r1, r3, #1
 8023ec8:	d103      	bne.n	8023ed2 <_raise_r+0x42>
 8023eca:	2316      	movs	r3, #22
 8023ecc:	6003      	str	r3, [r0, #0]
 8023ece:	2001      	movs	r0, #1
 8023ed0:	e7e7      	b.n	8023ea2 <_raise_r+0x12>
 8023ed2:	2400      	movs	r4, #0
 8023ed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023ed8:	4628      	mov	r0, r5
 8023eda:	4798      	blx	r3
 8023edc:	2000      	movs	r0, #0
 8023ede:	e7e0      	b.n	8023ea2 <_raise_r+0x12>

08023ee0 <raise>:
 8023ee0:	4b02      	ldr	r3, [pc, #8]	; (8023eec <raise+0xc>)
 8023ee2:	4601      	mov	r1, r0
 8023ee4:	6818      	ldr	r0, [r3, #0]
 8023ee6:	f7ff bfd3 	b.w	8023e90 <_raise_r>
 8023eea:	bf00      	nop
 8023eec:	200009d8 	.word	0x200009d8

08023ef0 <_kill_r>:
 8023ef0:	b538      	push	{r3, r4, r5, lr}
 8023ef2:	4d07      	ldr	r5, [pc, #28]	; (8023f10 <_kill_r+0x20>)
 8023ef4:	2300      	movs	r3, #0
 8023ef6:	4604      	mov	r4, r0
 8023ef8:	4608      	mov	r0, r1
 8023efa:	4611      	mov	r1, r2
 8023efc:	602b      	str	r3, [r5, #0]
 8023efe:	f7df fcd3 	bl	80038a8 <_kill>
 8023f02:	1c43      	adds	r3, r0, #1
 8023f04:	d102      	bne.n	8023f0c <_kill_r+0x1c>
 8023f06:	682b      	ldr	r3, [r5, #0]
 8023f08:	b103      	cbz	r3, 8023f0c <_kill_r+0x1c>
 8023f0a:	6023      	str	r3, [r4, #0]
 8023f0c:	bd38      	pop	{r3, r4, r5, pc}
 8023f0e:	bf00      	nop
 8023f10:	200171a8 	.word	0x200171a8

08023f14 <_getpid_r>:
 8023f14:	f7df bcc0 	b.w	8003898 <_getpid>

08023f18 <_init>:
 8023f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f1a:	bf00      	nop
 8023f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f1e:	bc08      	pop	{r3}
 8023f20:	469e      	mov	lr, r3
 8023f22:	4770      	bx	lr

08023f24 <_fini>:
 8023f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f26:	bf00      	nop
 8023f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f2a:	bc08      	pop	{r3}
 8023f2c:	469e      	mov	lr, r3
 8023f2e:	4770      	bx	lr
