
harurobo2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024338  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d74  08024538  08024538  00034538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080262ac  080262ac  00040b0c  2**0
                  CONTENTS
  4 .ARM          00000008  080262ac  080262ac  000362ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080262b4  080262b4  00040b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  080262b4  080262b4  000362b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080262cc  080262cc  000362cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b0c  20000000  080262d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000165b8  20000b10  08026ddc  00040b10  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200170c8  08026ddc  000470c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040b0c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00040b3a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f006  00000000  00000000  00040bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c2f  00000000  00000000  0006fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002268  00000000  00000000  000767e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a60  00000000  00000000  00078a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322fa  00000000  00000000  0007a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d97e  00000000  00000000  000ac7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119ca5  00000000  00000000  000da128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a4f0  00000000  00000000  001f3dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001fe2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000b10 	.word	0x20000b10
 800021c:	00000000 	.word	0x00000000
 8000220:	08024520 	.word	0x08024520

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000b14 	.word	0x20000b14
 800023c:	08024520 	.word	0x08024520

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a6:	f000 b9f3 	b.w	8000a90 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800073c:	f000 b9a8 	b.w	8000a90 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9e08      	ldr	r6, [sp, #32]
 80007ce:	460d      	mov	r5, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	460f      	mov	r7, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4694      	mov	ip, r2
 80007dc:	d965      	bls.n	80008aa <__udivmoddi4+0xe2>
 80007de:	fab2 f382 	clz	r3, r2
 80007e2:	b143      	cbz	r3, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007e8:	f1c3 0220 	rsb	r2, r3, #32
 80007ec:	409f      	lsls	r7, r3
 80007ee:	fa20 f202 	lsr.w	r2, r0, r2
 80007f2:	4317      	orrs	r7, r2
 80007f4:	409c      	lsls	r4, r3
 80007f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007fa:	fa1f f58c 	uxth.w	r5, ip
 80007fe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000802:	0c22      	lsrs	r2, r4, #16
 8000804:	fb0e 7711 	mls	r7, lr, r1, r7
 8000808:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800080c:	fb01 f005 	mul.w	r0, r1, r5
 8000810:	4290      	cmp	r0, r2
 8000812:	d90a      	bls.n	800082a <__udivmoddi4+0x62>
 8000814:	eb1c 0202 	adds.w	r2, ip, r2
 8000818:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800081c:	f080 811c 	bcs.w	8000a58 <__udivmoddi4+0x290>
 8000820:	4290      	cmp	r0, r2
 8000822:	f240 8119 	bls.w	8000a58 <__udivmoddi4+0x290>
 8000826:	3902      	subs	r1, #2
 8000828:	4462      	add	r2, ip
 800082a:	1a12      	subs	r2, r2, r0
 800082c:	b2a4      	uxth	r4, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083a:	fb00 f505 	mul.w	r5, r0, r5
 800083e:	42a5      	cmp	r5, r4
 8000840:	d90a      	bls.n	8000858 <__udivmoddi4+0x90>
 8000842:	eb1c 0404 	adds.w	r4, ip, r4
 8000846:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800084a:	f080 8107 	bcs.w	8000a5c <__udivmoddi4+0x294>
 800084e:	42a5      	cmp	r5, r4
 8000850:	f240 8104 	bls.w	8000a5c <__udivmoddi4+0x294>
 8000854:	4464      	add	r4, ip
 8000856:	3802      	subs	r0, #2
 8000858:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	2100      	movs	r1, #0
 8000860:	b11e      	cbz	r6, 800086a <__udivmoddi4+0xa2>
 8000862:	40dc      	lsrs	r4, r3
 8000864:	2300      	movs	r3, #0
 8000866:	e9c6 4300 	strd	r4, r3, [r6]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d908      	bls.n	8000884 <__udivmoddi4+0xbc>
 8000872:	2e00      	cmp	r6, #0
 8000874:	f000 80ed 	beq.w	8000a52 <__udivmoddi4+0x28a>
 8000878:	2100      	movs	r1, #0
 800087a:	e9c6 0500 	strd	r0, r5, [r6]
 800087e:	4608      	mov	r0, r1
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	fab3 f183 	clz	r1, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	d149      	bne.n	8000920 <__udivmoddi4+0x158>
 800088c:	42ab      	cmp	r3, r5
 800088e:	d302      	bcc.n	8000896 <__udivmoddi4+0xce>
 8000890:	4282      	cmp	r2, r0
 8000892:	f200 80f8 	bhi.w	8000a86 <__udivmoddi4+0x2be>
 8000896:	1a84      	subs	r4, r0, r2
 8000898:	eb65 0203 	sbc.w	r2, r5, r3
 800089c:	2001      	movs	r0, #1
 800089e:	4617      	mov	r7, r2
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d0e2      	beq.n	800086a <__udivmoddi4+0xa2>
 80008a4:	e9c6 4700 	strd	r4, r7, [r6]
 80008a8:	e7df      	b.n	800086a <__udivmoddi4+0xa2>
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xe6>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f040 8090 	bne.w	80009d8 <__udivmoddi4+0x210>
 80008b8:	1a8a      	subs	r2, r1, r2
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2101      	movs	r1, #1
 80008c4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008c8:	fb07 2015 	mls	r0, r7, r5, r2
 80008cc:	0c22      	lsrs	r2, r4, #16
 80008ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008d2:	fb0e f005 	mul.w	r0, lr, r5
 80008d6:	4290      	cmp	r0, r2
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x124>
 80008da:	eb1c 0202 	adds.w	r2, ip, r2
 80008de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x122>
 80008e4:	4290      	cmp	r0, r2
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2b8>
 80008ea:	4645      	mov	r5, r8
 80008ec:	1a12      	subs	r2, r2, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008f4:	fb07 2210 	mls	r2, r7, r0, r2
 80008f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x14e>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x14c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2c2>
 8000914:	4610      	mov	r0, r2
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800091e:	e79f      	b.n	8000860 <__udivmoddi4+0x98>
 8000920:	f1c1 0720 	rsb	r7, r1, #32
 8000924:	408b      	lsls	r3, r1
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa05 f401 	lsl.w	r4, r5, r1
 8000932:	fa20 f307 	lsr.w	r3, r0, r7
 8000936:	40fd      	lsrs	r5, r7
 8000938:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093c:	4323      	orrs	r3, r4
 800093e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	fb09 5518 	mls	r5, r9, r8, r5
 800094a:	0c1c      	lsrs	r4, r3, #16
 800094c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000950:	fb08 f50e 	mul.w	r5, r8, lr
 8000954:	42a5      	cmp	r5, r4
 8000956:	fa02 f201 	lsl.w	r2, r2, r1
 800095a:	fa00 f001 	lsl.w	r0, r0, r1
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b0>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2b4>
 800096c:	42a5      	cmp	r5, r4
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2b4>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4464      	add	r4, ip
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	b29d      	uxth	r5, r3
 800097c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000980:	fb09 4413 	mls	r4, r9, r3, r4
 8000984:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000988:	fb03 fe0e 	mul.w	lr, r3, lr
 800098c:	45a6      	cmp	lr, r4
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1da>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2ac>
 800099a:	45a6      	cmp	lr, r4
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2ac>
 800099e:	3b02      	subs	r3, #2
 80009a0:	4464      	add	r4, ip
 80009a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009a6:	fba3 9502 	umull	r9, r5, r3, r2
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	42ac      	cmp	r4, r5
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46ae      	mov	lr, r5
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x29c>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x298>
 80009b8:	b156      	cbz	r6, 80009d0 <__udivmoddi4+0x208>
 80009ba:	ebb0 0208 	subs.w	r2, r0, r8
 80009be:	eb64 040e 	sbc.w	r4, r4, lr
 80009c2:	fa04 f707 	lsl.w	r7, r4, r7
 80009c6:	40ca      	lsrs	r2, r1
 80009c8:	40cc      	lsrs	r4, r1
 80009ca:	4317      	orrs	r7, r2
 80009cc:	e9c6 7400 	strd	r7, r4, [r6]
 80009d0:	4618      	mov	r0, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d8:	f1c3 0120 	rsb	r1, r3, #32
 80009dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009e0:	fa20 f201 	lsr.w	r2, r0, r1
 80009e4:	fa25 f101 	lsr.w	r1, r5, r1
 80009e8:	409d      	lsls	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1510 	mls	r5, r7, r0, r1
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a02:	fb00 f50e 	mul.w	r5, r0, lr
 8000a06:	428d      	cmp	r5, r1
 8000a08:	fa04 f403 	lsl.w	r4, r4, r3
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x258>
 8000a0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b0>
 8000a18:	428d      	cmp	r5, r1
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b0>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1b49      	subs	r1, r1, r5
 8000a22:	b292      	uxth	r2, r2
 8000a24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a28:	fb07 1115 	mls	r1, r7, r5, r1
 8000a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a30:	fb05 f10e 	mul.w	r1, r5, lr
 8000a34:	4291      	cmp	r1, r2
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x282>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 8000a42:	4291      	cmp	r1, r2
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 8000a46:	3d02      	subs	r5, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a52      	subs	r2, r2, r1
 8000a4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0xfc>
 8000a52:	4631      	mov	r1, r6
 8000a54:	4630      	mov	r0, r6
 8000a56:	e708      	b.n	800086a <__udivmoddi4+0xa2>
 8000a58:	4639      	mov	r1, r7
 8000a5a:	e6e6      	b.n	800082a <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e6fb      	b.n	8000858 <__udivmoddi4+0x90>
 8000a60:	4548      	cmp	r0, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f0>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f0>
 8000a70:	4645      	mov	r5, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a74:	462b      	mov	r3, r5
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1da>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x258>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b0>
 8000a80:	3d02      	subs	r5, #2
 8000a82:	4462      	add	r2, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x124>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e70a      	b.n	80008a0 <__udivmoddi4+0xd8>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x14e>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3304      	adds	r3, #4
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	4413      	add	r3, r2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]
 8000ac2:	e010      	b.n	8000ae6 <PushTx8Bytes+0x52>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	18d1      	adds	r1, r2, r3
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	7808      	ldrb	r0, [r1, #0]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <PushTx8Bytes+0xa4>)
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	440a      	add	r2, r1
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	4602      	mov	r2, r0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	75fb      	strb	r3, [r7, #23]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d8ea      	bhi.n	8000ac4 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d106      	bne.n	8000b04 <PushTx8Bytes+0x70>
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <PushTx8Bytes+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b02:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b10:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <PushTx8Bytes+0xa0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <PushTx8Bytes+0xac>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d102      	bne.n	8000b24 <PushTx8Bytes+0x90>
		isfull = 1;
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <PushTx8Bytes+0xa8>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20002e04 	.word	0x20002e04
 8000b38:	20000e00 	.word	0x20000e00
 8000b3c:	20002e08 	.word	0x20002e08
 8000b40:	20002e00 	.word	0x20002e00

08000b44 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000b4e:	2304      	movs	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000b56:	e035      	b.n	8000bc4 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d105      	bne.n	8000b6c <PopSendTx8Bytes+0x28>
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <PopSendTx8Bytes+0xa8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d034      	beq.n	8000bd6 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b82:	011b      	lsls	r3, r3, #4
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	3308      	adds	r3, #8
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <PopSendTx8Bytes+0xac>)
 8000b98:	441a      	add	r2, r3
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	f003 fb9d 	bl	80042dc <HAL_CAN_AddTxMessage>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <PopSendTx8Bytes+0x6c>
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	e014      	b.n	8000bda <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <PopSendTx8Bytes+0xa4>)
 8000bbc:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <PopSendTx8Bytes+0xa0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <PopSendTx8Bytes+0xb0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fc57 	bl	800447c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1c1      	bne.n	8000b58 <PopSendTx8Bytes+0x14>
 8000bd4:	e000      	b.n	8000bd8 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000bd6:	bf00      	nop
	}

	return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002e08 	.word	0x20002e08
 8000be8:	20002e00 	.word	0x20002e00
 8000bec:	20002e04 	.word	0x20002e04
 8000bf0:	20000e00 	.word	0x20000e00
 8000bf4:	20000b2c 	.word	0x20000b2c

08000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000bfc:	f7ff ffa2 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000c08:	f7ff ff9c 	bl	8000b44 <PopSendTx8Bytes>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 8000c10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c14:	b08e      	sub	sp, #56	; 0x38
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	f107 0218 	add.w	r2, r7, #24
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f003 fc5d 	bl	80044e6 <HAL_CAN_GetRxMessage>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 8000c32:	486e      	ldr	r0, [pc, #440]	; (8000dec <WhenCANRxFifo0MsgPending+0x1dc>)
 8000c34:	f01f ffca 	bl	8020bcc <iprintf>
		Error_Handler();
 8000c38:	f002 fb6b 	bl	8003312 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4698      	mov	r8, r3
 8000c42:	4691      	mov	r9, r2
 8000c44:	4640      	mov	r0, r8
 8000c46:	4649      	mov	r1, r9
 8000c48:	f000 fe70 	bl	800192c <Extract_CAN_Device>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	733a      	strb	r2, [r7, #12]
 8000c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c56:	737a      	strb	r2, [r7, #13]
 8000c58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	2200      	movs	r2, #0
 8000c62:	461c      	mov	r4, r3
 8000c64:	4615      	mov	r5, r2
 8000c66:	4620      	mov	r0, r4
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 feab 	bl	80019c4 <Extract_CAN_CMD>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000c74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d139      	bne.n	8000cf0 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c82:	e013      	b.n	8000cac <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000c84:	7b3b      	ldrb	r3, [r7, #12]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000c8c:	4958      	ldr	r1, [pc, #352]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000c8e:	4603      	mov	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	440b      	add	r3, r1
 8000c96:	4413      	add	r3, r2
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f000 80a0 	beq.w	8000de2 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b50      	ldr	r3, [pc, #320]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cb2:	5c9b      	ldrb	r3, [r3, r2]
 8000cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7b3b      	ldrb	r3, [r7, #12]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cc6:	5c9b      	ldrb	r3, [r3, r2]
 8000cc8:	461c      	mov	r4, r3
 8000cca:	7c38      	ldrb	r0, [r7, #16]
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000cce:	460b      	mov	r3, r1
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	1a5b      	subs	r3, r3, r1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4423      	add	r3, r4
 8000cd8:	4602      	mov	r2, r0
 8000cda:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	7b3a      	ldrb	r2, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2d9      	uxtb	r1, r3
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000cec:	5499      	strb	r1, [r3, r2]
 8000cee:	e04a      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 8000cf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d146      	bne.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000cf8:	7b3b      	ldrb	r3, [r7, #12]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	7bba      	ldrb	r2, [r7, #14]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4413      	add	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4a3b      	ldr	r2, [pc, #236]	; (8000df8 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	cb03      	ldmia	r3!, {r0, r1}
 8000d14:	6010      	str	r0, [r2, #0]
 8000d16:	6051      	str	r1, [r2, #4]
 8000d18:	e035      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000d1a:	7b3b      	ldrb	r3, [r7, #12]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10d      	bne.n	8000d3c <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d20:	7b7b      	ldrb	r3, [r7, #13]
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4a34      	ldr	r2, [pc, #208]	; (8000dfc <WhenCANRxFifo0MsgPending+0x1ec>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	cb03      	ldmia	r3!, {r0, r1}
 8000d36:	6010      	str	r0, [r2, #0]
 8000d38:	6051      	str	r1, [r2, #4]
 8000d3a:	e024      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	2b03      	cmp	r3, #3
 8000d40:	d10d      	bne.n	8000d5e <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d42:	7b7b      	ldrb	r3, [r7, #13]
 8000d44:	7bba      	ldrb	r2, [r7, #14]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	; (8000e00 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	cb03      	ldmia	r3!, {r0, r1}
 8000d58:	6010      	str	r0, [r2, #0]
 8000d5a:	6051      	str	r1, [r2, #4]
 8000d5c:	e013      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d10d      	bne.n	8000d80 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000d70:	4413      	add	r3, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	cb03      	ldmia	r3!, {r0, r1}
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	6051      	str	r1, [r2, #4]
 8000d7e:	e002      	b.n	8000d86 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000d80:	4821      	ldr	r0, [pc, #132]	; (8000e08 <WhenCANRxFifo0MsgPending+0x1f8>)
 8000d82:	f01f ff23 	bl	8020bcc <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d88:	785a      	ldrb	r2, [r3, #1]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d128      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d122      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000da0:	78da      	ldrb	r2, [r3, #3]
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d11c      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dac:	791a      	ldrb	r2, [r3, #4]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d116      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000db8:	795a      	ldrb	r2, [r3, #5]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d110      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dc4:	799a      	ldrb	r2, [r3, #6]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d10a      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000dd0:	7a1a      	ldrb	r2, [r3, #8]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d104      	bne.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <WhenCANRxFifo0MsgPending+0x1fc>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	e000      	b.n	8000de4 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000de2:	bf00      	nop
	}
}
 8000de4:	3738      	adds	r7, #56	; 0x38
 8000de6:	46bd      	mov	sp, r7
 8000de8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000dec:	08024538 	.word	0x08024538
 8000df0:	20000b40 	.word	0x20000b40
 8000df4:	20000b34 	.word	0x20000b34
 8000df8:	20000b80 	.word	0x20000b80
 8000dfc:	20000c20 	.word	0x20000c20
 8000e00:	20000cc0 	.word	0x20000cc0
 8000e04:	20000d60 	.word	0x20000d60
 8000e08:	08024550 	.word	0x08024550
 8000e0c:	20000b30 	.word	0x20000b30

08000e10 <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	08db      	lsrs	r3, r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e015      	b.n	8000e5e <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	461a      	mov	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	2208      	movs	r2, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fe27 	bl	8000a94 <PushTx8Bytes>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <SendBytes+0x48>
			Error_Handler();
 8000e50:	f002 fa5f 	bl	8003312 <Error_Handler>
			return ret;
 8000e54:	7cfb      	ldrb	r3, [r7, #19]
 8000e56:	e027      	b.n	8000ea8 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 8000e58:	7ffb      	ldrb	r3, [r7, #31]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d8e5      	bhi.n	8000e32 <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4413      	add	r3, r2
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fe0b 	bl	8000a94 <PushTx8Bytes>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <SendBytes+0x80>
			Error_Handler();
 8000e88:	f002 fa43 	bl	8003312 <Error_Handler>
			return ret;
 8000e8c:	7cfb      	ldrb	r3, [r7, #19]
 8000e8e:	e00b      	b.n	8000ea8 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 8000e90:	f7ff fe58 	bl	8000b44 <PopSendTx8Bytes>
 8000e94:	4603      	mov	r3, r0
 8000e96:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <SendBytes+0x96>
		Error_Handler();
 8000e9e:	f002 fa38 	bl	8003312 <Error_Handler>
		return ret;
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	e000      	b.n	8000ea8 <SendBytes+0x98>
	}

	return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <CAN_SystemInit+0x30>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <CAN_SystemInit+0x34>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000eca:	e029      	b.n	8000f20 <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <CAN_SystemInit+0x38>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000edc:	e017      	b.n	8000f0e <CAN_SystemInit+0x5e>
 8000ede:	bf00      	nop
 8000ee0:	20000b2c 	.word	0x20000b2c
 8000ee4:	20000b30 	.word	0x20000b30
 8000ee8:	20000b34 	.word	0x20000b34
			node_id_list[type][i] = 0xff;
 8000eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ef0:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8000ef4:	48d7      	ldr	r0, [pc, #860]	; (8001254 <CAN_SystemInit+0x3a4>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	4403      	add	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d9ea      	bls.n	8000eec <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d9d1      	bls.n	8000ecc <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000f38:	230e      	movs	r3, #14
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fcc3 	bl	80018d2 <Make_CAN_ID>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	0b42      	lsrs	r2, r0, #13
 8000f56:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f5a:	0b4b      	lsrs	r3, r1, #13
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000f60:	231f      	movs	r3, #31
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 fcb3 	bl	80018d2 <Make_CAN_ID>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	0b42      	lsrs	r2, r0, #13
 8000f76:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f7a:	0b4b      	lsrs	r3, r1, #13
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fca3 	bl	80018d2 <Make_CAN_ID>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4613      	mov	r3, r2
 8000f92:	00da      	lsls	r2, r3, #3
 8000f94:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f98:	4013      	ands	r3, r2
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000fa0:	231f      	movs	r3, #31
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fc93 	bl	80018d2 <Make_CAN_ID>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00da      	lsls	r2, r3, #3
 8000fb4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000fc0:	4ba5      	ldr	r3, [pc, #660]	; (8001258 <CAN_SystemInit+0x3a8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f107 020c 	add.w	r2, r7, #12
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 f856 	bl	800407c <HAL_CAN_ConfigFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000fd6:	f002 f99c 	bl	8003312 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f000 fc74 	bl	80018d2 <Make_CAN_ID>
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	0b42      	lsrs	r2, r0, #13
 8000ff4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ff8:	0b4b      	lsrs	r3, r1, #13
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000ffe:	231f      	movs	r3, #31
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2002      	movs	r0, #2
 8001006:	f000 fc64 	bl	80018d2 <Make_CAN_ID>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	0b42      	lsrs	r2, r0, #13
 8001014:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001018:	0b4b      	lsrs	r3, r1, #13
 800101a:	4613      	mov	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800101e:	2300      	movs	r3, #0
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2002      	movs	r0, #2
 8001026:	f000 fc54 	bl	80018d2 <Make_CAN_ID>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4613      	mov	r3, r2
 8001030:	00da      	lsls	r2, r3, #3
 8001032:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001036:	4013      	ands	r3, r2
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800103e:	231f      	movs	r3, #31
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2002      	movs	r0, #2
 8001046:	f000 fc44 	bl	80018d2 <Make_CAN_ID>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4613      	mov	r3, r2
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001056:	4013      	ands	r3, r2
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <CAN_SystemInit+0x3a8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f807 	bl	800407c <HAL_CAN_ConfigFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8001074:	f002 f94d 	bl	8003312 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2003      	movs	r0, #3
 8001084:	f000 fc25 	bl	80018d2 <Make_CAN_ID>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	0b42      	lsrs	r2, r0, #13
 8001092:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001096:	0b4b      	lsrs	r3, r1, #13
 8001098:	4613      	mov	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 800109c:	231f      	movs	r3, #31
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 fc15 	bl	80018d2 <Make_CAN_ID>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	0b42      	lsrs	r2, r0, #13
 80010b2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80010b6:	0b4b      	lsrs	r3, r1, #13
 80010b8:	4613      	mov	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80010bc:	2300      	movs	r3, #0
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 fc05 	bl	80018d2 <Make_CAN_ID>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4613      	mov	r3, r2
 80010ce:	00da      	lsls	r2, r3, #3
 80010d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010d4:	4013      	ands	r3, r2
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80010dc:	231f      	movs	r3, #31
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 fbf5 	bl	80018d2 <Make_CAN_ID>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4613      	mov	r3, r2
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80010f4:	4013      	ands	r3, r2
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80010fc:	4b56      	ldr	r3, [pc, #344]	; (8001258 <CAN_SystemInit+0x3a8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f002 ffb8 	bl	800407c <HAL_CAN_ConfigFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8001112:	f002 f8fe 	bl	8003312 <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2000      	movs	r0, #0
 8001122:	f000 fbd6 	bl	80018d2 <Make_CAN_ID>
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	0b42      	lsrs	r2, r0, #13
 8001130:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001134:	0b4b      	lsrs	r3, r1, #13
 8001136:	4613      	mov	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 800113a:	231f      	movs	r3, #31
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fbc6 	bl	80018d2 <Make_CAN_ID>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	0b42      	lsrs	r2, r0, #13
 8001150:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001154:	0b4b      	lsrs	r3, r1, #13
 8001156:	4613      	mov	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 800115a:	2301      	movs	r3, #1
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fbb6 	bl	80018d2 <Make_CAN_ID>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4613      	mov	r3, r2
 800116c:	00da      	lsls	r2, r3, #3
 800116e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001172:	4013      	ands	r3, r2
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800117a:	231f      	movs	r3, #31
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fba6 	bl	80018d2 <Make_CAN_ID>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4613      	mov	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001192:	4013      	ands	r3, r2
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <CAN_SystemInit+0x3a8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 ff69 	bl	800407c <HAL_CAN_ConfigFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 80011b0:	f002 f8af 	bl	8003312 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 80011b8:	2300      	movs	r3, #0
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2004      	movs	r0, #4
 80011c0:	f000 fb87 	bl	80018d2 <Make_CAN_ID>
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	0b42      	lsrs	r2, r0, #13
 80011ce:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011d2:	0b4b      	lsrs	r3, r1, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 80011d8:	231f      	movs	r3, #31
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2004      	movs	r0, #4
 80011e0:	f000 fb77 	bl	80018d2 <Make_CAN_ID>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	0b42      	lsrs	r2, r0, #13
 80011ee:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 80011f2:	0b4b      	lsrs	r3, r1, #13
 80011f4:	4613      	mov	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2004      	movs	r0, #4
 8001200:	f000 fb67 	bl	80018d2 <Make_CAN_ID>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4613      	mov	r3, r2
 800120a:	00da      	lsls	r2, r3, #3
 800120c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8001218:	231f      	movs	r3, #31
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2004      	movs	r0, #4
 8001220:	f000 fb57 	bl	80018d2 <Make_CAN_ID>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4613      	mov	r3, r2
 800122a:	00da      	lsls	r2, r3, #3
 800122c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001230:	4013      	ands	r3, r2
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <CAN_SystemInit+0x3a8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 020c 	add.w	r2, r7, #12
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f002 ff1a 	bl	800407c <HAL_CAN_ConfigFilter>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 800124e:	f002 f860 	bl	8003312 <Error_Handler>
 8001252:	e003      	b.n	800125c <CAN_SystemInit+0x3ac>
 8001254:	20000b40 	.word	0x20000b40
 8001258:	20000b2c 	.word	0x20000b2c
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 800125c:	2305      	movs	r3, #5
 800125e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2005      	movs	r0, #5
 8001268:	f000 fb33 	bl	80018d2 <Make_CAN_ID>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	0b42      	lsrs	r2, r0, #13
 8001276:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800127a:	0b4b      	lsrs	r3, r1, #13
 800127c:	4613      	mov	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8001280:	231f      	movs	r3, #31
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f000 fb23 	bl	80018d2 <Make_CAN_ID>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	0b42      	lsrs	r2, r0, #13
 8001296:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800129a:	0b4b      	lsrs	r3, r1, #13
 800129c:	4613      	mov	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2005      	movs	r0, #5
 80012a8:	f000 fb13 	bl	80018d2 <Make_CAN_ID>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	00da      	lsls	r2, r3, #3
 80012b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012b8:	4013      	ands	r3, r2
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 80012c0:	231f      	movs	r3, #31
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2005      	movs	r0, #5
 80012c8:	f000 fb03 	bl	80018d2 <Make_CAN_ID>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4613      	mov	r3, r2
 80012d2:	00da      	lsls	r2, r3, #3
 80012d4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012d8:	4013      	ands	r3, r2
 80012da:	f043 0304 	orr.w	r3, r3, #4
 80012de:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 80012e0:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <CAN_SystemInit+0x544>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f107 020c 	add.w	r2, r7, #12
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fec6 	bl	800407c <HAL_CAN_ConfigFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 80012f6:	f002 f80c 	bl	8003312 <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 80012fa:	2306      	movs	r3, #6
 80012fc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2006      	movs	r0, #6
 8001306:	f000 fae4 	bl	80018d2 <Make_CAN_ID>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	0b42      	lsrs	r2, r0, #13
 8001314:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001318:	0b4b      	lsrs	r3, r1, #13
 800131a:	4613      	mov	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 800131e:	231f      	movs	r3, #31
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2006      	movs	r0, #6
 8001326:	f000 fad4 	bl	80018d2 <Make_CAN_ID>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	0b42      	lsrs	r2, r0, #13
 8001334:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001338:	0b4b      	lsrs	r3, r1, #13
 800133a:	4613      	mov	r3, r2
 800133c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 800133e:	2300      	movs	r3, #0
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2006      	movs	r0, #6
 8001346:	f000 fac4 	bl	80018d2 <Make_CAN_ID>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4613      	mov	r3, r2
 8001350:	00da      	lsls	r2, r3, #3
 8001352:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001356:	4013      	ands	r3, r2
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 800135e:	231f      	movs	r3, #31
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fab4 	bl	80018d2 <Make_CAN_ID>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4613      	mov	r3, r2
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001376:	4013      	ands	r3, r2
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 800137e:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <CAN_SystemInit+0x544>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fe77 	bl	800407c <HAL_CAN_ConfigFilter>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8001394:	f001 ffbd 	bl	8003312 <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <CAN_SystemInit+0x544>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f002 ff59 	bl	8004254 <HAL_CAN_Start>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <CAN_SystemInit+0x548>)
 80013aa:	f01f fc75 	bl	8020c98 <puts>
		Error_Handler();
 80013ae:	f001 ffb0 	bl	8003312 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <CAN_SystemInit+0x544>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2102      	movs	r1, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 f9a6 	bl	800470a <HAL_CAN_ActivateNotification>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <CAN_SystemInit+0x54c>)
 80013c6:	f01f fc01 	bl	8020bcc <iprintf>
		Error_Handler();
 80013ca:	f001 ffa2 	bl	8003312 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <CAN_SystemInit+0x544>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f003 f998 	bl	800470a <HAL_CAN_ActivateNotification>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <CAN_SystemInit+0x54c>)
 80013e2:	f01f fbf3 	bl	8020bcc <iprintf>
		Error_Handler();
 80013e6:	f001 ff94 	bl	8003312 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3738      	adds	r7, #56	; 0x38
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000b2c 	.word	0x20000b2c
 80013f8:	08024558 	.word	0x08024558
 80013fc:	08024568 	.word	0x08024568

08001400 <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8001408:	e006      	b.n	8001418 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <CAN_WaitConnect+0x13c>)
 800140c:	f01f fbde 	bl	8020bcc <iprintf>
		HAL_Delay(500);
 8001410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001414:	f002 fd12 	bl	8003e3c <HAL_Delay>
	while (all_node_detected == 0){
 8001418:	4b49      	ldr	r3, [pc, #292]	; (8001540 <CAN_WaitConnect+0x140>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	e00a      	b.n	800143e <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <CAN_WaitConnect+0x144>)
 800142c:	4413      	add	r3, r2
 800142e:	79db      	ldrb	r3, [r3, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <CAN_WaitConnect+0x148>)
 8001434:	f01f fbca 	bl	8020bcc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3ef      	bcc.n	8001428 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
 800144c:	e00a      	b.n	8001464 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <CAN_WaitConnect+0x144>)
 8001452:	4413      	add	r3, r2
 8001454:	7b9b      	ldrb	r3, [r3, #14]
 8001456:	4619      	mov	r1, r3
 8001458:	483c      	ldr	r0, [pc, #240]	; (800154c <CAN_WaitConnect+0x14c>)
 800145a:	f01f fbb7 	bl	8020bcc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	3301      	adds	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	785b      	ldrb	r3, [r3, #1]
 8001468:	7bba      	ldrb	r2, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ef      	bcc.n	800144e <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	737b      	strb	r3, [r7, #13]
 8001472:	e00a      	b.n	800148a <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <CAN_WaitConnect+0x144>)
 8001478:	4413      	add	r3, r2
 800147a:	7d5b      	ldrb	r3, [r3, #21]
 800147c:	4619      	mov	r1, r3
 800147e:	4834      	ldr	r0, [pc, #208]	; (8001550 <CAN_WaitConnect+0x150>)
 8001480:	f01f fba4 	bl	8020bcc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	3301      	adds	r3, #1
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	7b7a      	ldrb	r2, [r7, #13]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ef      	bcc.n	8001474 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	e00b      	b.n	80014b2 <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <CAN_WaitConnect+0x144>)
 800149e:	4413      	add	r3, r2
 80014a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80014a4:	4619      	mov	r1, r3
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <CAN_WaitConnect+0x154>)
 80014a8:	f01f fb90 	bl	8020bcc <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 80014ac:	7b3b      	ldrb	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	733b      	strb	r3, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	795b      	ldrb	r3, [r3, #5]
 80014b6:	7b3a      	ldrb	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3ee      	bcc.n	800149a <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	72fb      	strb	r3, [r7, #11]
 80014c0:	e00a      	b.n	80014d8 <CAN_WaitConnect+0xd8>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <CAN_WaitConnect+0x144>)
 80014c6:	4413      	add	r3, r2
 80014c8:	7f1b      	ldrb	r3, [r3, #28]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <CAN_WaitConnect+0x158>)
 80014ce:	f01f fb7d 	bl	8020bcc <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 80014d2:	7afb      	ldrb	r3, [r7, #11]
 80014d4:	3301      	adds	r3, #1
 80014d6:	72fb      	strb	r3, [r7, #11]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3ef      	bcc.n	80014c2 <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	72bb      	strb	r3, [r7, #10]
 80014e6:	e00b      	b.n	8001500 <CAN_WaitConnect+0x100>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <CAN_WaitConnect+0x144>)
 80014ec:	4413      	add	r3, r2
 80014ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <CAN_WaitConnect+0x15c>)
 80014f6:	f01f fb69 	bl	8020bcc <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	3301      	adds	r3, #1
 80014fe:	72bb      	strb	r3, [r7, #10]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	7aba      	ldrb	r2, [r7, #10]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ee      	bcc.n	80014e8 <CAN_WaitConnect+0xe8>
	for (uint8_t i = 0; i < num_of->other; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	727b      	strb	r3, [r7, #9]
 800150e:	e00b      	b.n	8001528 <CAN_WaitConnect+0x128>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <CAN_WaitConnect+0x144>)
 8001514:	4413      	add	r3, r2
 8001516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <CAN_WaitConnect+0x160>)
 800151e:	f01f fb55 	bl	8020bcc <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001522:	7a7b      	ldrb	r3, [r7, #9]
 8001524:	3301      	adds	r3, #1
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	799b      	ldrb	r3, [r3, #6]
 800152c:	7a7a      	ldrb	r2, [r7, #9]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ee      	bcc.n	8001510 <CAN_WaitConnect+0x110>
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	0802458c 	.word	0x0802458c
 8001540:	20000b30 	.word	0x20000b30
 8001544:	20000b40 	.word	0x20000b40
 8001548:	080245ac 	.word	0x080245ac
 800154c:	080245bc 	.word	0x080245bc
 8001550:	080245cc 	.word	0x080245cc
 8001554:	080245dc 	.word	0x080245dc
 8001558:	080245ec 	.word	0x080245ec
 800155c:	080245fc 	.word	0x080245fc
 8001560:	08024608 	.word	0x08024608

08001564 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2105      	movs	r1, #5
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f97f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2208      	movs	r2, #8
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fc3e 	bl	8000e10 <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2106      	movs	r1, #6
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f96b 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2208      	movs	r2, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fc2a 	bl	8000e10 <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2107      	movs	r1, #7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f957 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2208      	movs	r2, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fc16 	bl	8000e10 <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7d1b      	ldrb	r3, [r3, #20]
 80015e8:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f0:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001600:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800160e:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2108      	movs	r1, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f933 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2206      	movs	r2, #6
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fbf2 	bl	8000e10 <SendBytes>
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	bdata[0] = hmcmd->enc_dir;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	753b      	strb	r3, [r7, #20]
	bdata[1] = hmcmd->rot_dir;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	795b      	ldrb	r3, [r3, #5]
 8001646:	757b      	strb	r3, [r7, #21]
	bdata[2] = hmcmd->calib;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	75bb      	strb	r3, [r7, #22]
	bdata[3] = hmcmd->limit_sw_type;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	75fb      	strb	r3, [r7, #23]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2102      	movs	r1, #2
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f911 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2204      	movs	r2, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fbd0 	bl	8000e10 <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60fb      	str	r3, [r7, #12]
	fdata[1] = hmcmd->calib_duty;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2103      	movs	r1, #3
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f8fd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fbbc 	bl	8000e10 <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	60fb      	str	r3, [r7, #12]
	fdata[1] = 0;
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2104      	movs	r1, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f8e9 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fba8 	bl	8000e10 <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 80016c0:	2032      	movs	r0, #50	; 0x32
 80016c2:	f002 fbbb 	bl	8003e3c <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ff4c 	bl	8001564 <MCMD_ChangeControl>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2109      	movs	r1, #9
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f8cd 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2204      	movs	r2, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fb8c 	bl	8000e10 <SendBytes>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <MCMD_Control_Enable>:

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	210a      	movs	r1, #10
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8b7 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fb76 	bl	8000e10 <SendBytes>
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	210c      	movs	r1, #12
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f89f 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	463b      	mov	r3, r7
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fb5f 	bl	8000e10 <SendBytes>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <ServoDriver_Init>:
		return ans;
	}
}

////servo
void ServoDriver_Init(CAN_Device *can_device, CANServo_Param_Typedef *param){
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	float fdata[2];
	fdata[0] = param->pulse_width_min;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->pulse_width_max;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT1), (uint8_t *)fdata, sizeof(fdata));
 8001770:	2101      	movs	r1, #1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f884 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2208      	movs	r2, #8
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fb43 	bl	8000e10 <SendBytes>
	fdata[0] = param->pwm_frequency;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	60bb      	str	r3, [r7, #8]
	fdata[1] = param->angle_range;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT2), (uint8_t *)fdata, sizeof(fdata));
 8001796:	2102      	movs	r1, #2
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f871 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	2208      	movs	r2, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff fb30 	bl	8000e10 <SendBytes>
	fdata[0] = param->angle_offset;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0.0f;
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_INIT3), (uint8_t *)fdata, sizeof(fdata));
 80017bc:	2103      	movs	r1, #3
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f85e 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2208      	movs	r2, #8
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff fb1d 	bl	8000e10 <SendBytes>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <ServoDriver_SendValue>:

void ServoDriver_SendValue(CAN_Device *can_device, float angle){
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	ed87 0a00 	vstr	s0, [r7]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, SERVO_CMD_SET_TARGET), (uint8_t *)(&angle), sizeof(float)) != HAL_OK){
 80017ea:	2104      	movs	r1, #4
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f847 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	463b      	mov	r3, r7
 80017fa:	2204      	movs	r2, #4
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fb07 	bl	8000e10 <SendBytes>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <ServoDriver_SendValue+0x2e>
		Error_Handler();
 8001808:	f001 fd83 	bl	8003312 <Error_Handler>
	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <AirCylinder_Init>:
 * 異なる関数名を用いて明示的にしてある.
 * また, AirCylinderの基板の方にも, 最初は必ず初期化処理(AIR_CMD_INIT)が来るものとして定義してある.
 */

////AirCylinder
void AirCylinder_Init(CAN_Device *can_device, Air_PortStatus_Typedef param){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_INIT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001820:	2101      	movs	r1, #1
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f82c 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	1cfb      	adds	r3, r7, #3
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff faec 	bl	8000e10 <SendBytes>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <AirCylinder_Init+0x2e>
		Error_Handler();
 800183e:	f001 fd68 	bl	8003312 <Error_Handler>
	}
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <AirCylinder_SendOutput>:

void AirCylinder_SendOutput(CAN_Device *can_device, Air_PortStatus_Typedef param){
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
	if (SendBytes(Make_CAN_ID_from_CAN_Device(can_device, AIR_CMD_OUTPUT), (uint8_t *)(&param), sizeof(Air_PortStatus_Typedef)) != HAL_OK){
 8001856:	2102      	movs	r1, #2
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f811 	bl	8001880 <Make_CAN_ID_from_CAN_Device>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	1cfb      	adds	r3, r7, #3
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff fad1 	bl	8000e10 <SendBytes>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <AirCylinder_SendOutput+0x2e>
		Error_Handler();
 8001874:	f001 fd4d 	bl	8003312 <Error_Handler>
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 8001880:	b4b0      	push	{r4, r5, r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	02db      	lsls	r3, r3, #11
 800189a:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	4313      	orrs	r3, r2
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	461c      	mov	r4, r3
 80018c0:	4615      	mov	r5, r2
 80018c2:	4622      	mov	r2, r4
 80018c4:	462b      	mov	r3, r5
}
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bcb0      	pop	{r4, r5, r7}
 80018d0:	4770      	bx	lr

080018d2 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 80018d2:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4604      	mov	r4, r0
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	4603      	mov	r3, r0
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	460b      	mov	r3, r1
 80018ec:	717b      	strb	r3, [r7, #5]
 80018ee:	4613      	mov	r3, r2
 80018f0:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	02db      	lsls	r3, r3, #11
 80018f6:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001902:	431a      	orrs	r2, r3
 8001904:	797b      	ldrb	r3, [r7, #5]
 8001906:	015b      	lsls	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 800190c:	793b      	ldrb	r3, [r7, #4]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	17da      	asrs	r2, r3, #31
 8001916:	4698      	mov	r8, r3
 8001918:	4691      	mov	r9, r2
 800191a:	4642      	mov	r2, r8
 800191c:	464b      	mov	r3, r9
}
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 800192a:	4770      	bx	lr

0800192c <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8001936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	0942      	lsrs	r2, r0, #5
 8001944:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001948:	094b      	lsrs	r3, r1, #5
 800194a:	b2d3      	uxtb	r3, r2
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b2db      	uxtb	r3, r3
 8001952:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8001954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	0a02      	lsrs	r2, r0, #8
 8001962:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001966:	0a0b      	lsrs	r3, r1, #8
 8001968:	b2d3      	uxtb	r3, r2
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	b2db      	uxtb	r3, r3
 8001970:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8001972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	0ac2      	lsrs	r2, r0, #11
 8001980:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8001984:	0acb      	lsrs	r3, r1, #11
 8001986:	b2d3      	uxtb	r3, r2
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	b2db      	uxtb	r3, r3
 800198e:	723b      	strb	r3, [r7, #8]
    return ans;
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	f107 0208 	add.w	r2, r7, #8
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	4611      	mov	r1, r2
 800199c:	8019      	strh	r1, [r3, #0]
 800199e:	3302      	adds	r3, #2
 80019a0:	0c12      	lsrs	r2, r2, #16
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	7b3a      	ldrb	r2, [r7, #12]
 80019a8:	f362 0307 	bfi	r3, r2, #0, #8
 80019ac:	7b7a      	ldrb	r2, [r7, #13]
 80019ae:	f362 230f 	bfi	r3, r2, #8, #8
 80019b2:	7bba      	ldrb	r2, [r7, #14]
 80019b4:	f362 4317 	bfi	r3, r2, #16, #8
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	e9c7 0100 	strd	r0, r1, [r7]
 80019ce:	783b      	ldrb	r3, [r7, #0]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019ea:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <MX_CAN1_Init+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_CAN1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a02:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001a06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_CAN1_Init+0x64>)
 8001a34:	f002 fa26 	bl	8003e84 <HAL_CAN_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a3e:	f001 fc68 	bl	8003312 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20002e0c 	.word	0x20002e0c
 8001a4c:	40006400 	.word	0x40006400

08001a50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_CAN_MspInit+0xac>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d13f      	bne.n	8001af2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_CAN_MspInit+0xb0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4811      	ldr	r0, [pc, #68]	; (8001b04 <HAL_CAN_MspInit+0xb4>)
 8001abe:	f003 fd35 	bl	800552c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	2013      	movs	r0, #19
 8001ac8:	f003 f8f0 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001acc:	2013      	movs	r0, #19
 8001ace:	f003 f909 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	2014      	movs	r0, #20
 8001ad8:	f003 f8e8 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001adc:	2014      	movs	r0, #20
 8001ade:	f003 f901 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2015      	movs	r0, #21
 8001ae8:	f003 f8e0 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001aec:	2015      	movs	r0, #21
 8001aee:	f003 f8f9 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40006400 	.word	0x40006400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001b14:	f00d fc72 	bl	800f3fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b18:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001b20:	f000 f98a 	bl	8001e38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 8092 	bne.w	8001c56 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01f      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001b38:	2208      	movs	r2, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d016      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f023 0307 	bic.w	r3, r3, #7
 8001b50:	3308      	adds	r3, #8
 8001b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00c      	beq.n	8001b78 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b62:	b672      	cpsid	i
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	b662      	cpsie	i
 8001b72:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b74:	bf00      	nop
 8001b76:	e7fe      	b.n	8001b76 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06b      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d866      	bhi.n	8001c56 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001b88:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <pvPortMallocMicroROS+0x18c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b92:	e004      	b.n	8001b9e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d903      	bls.n	8001bb0 <pvPortMallocMicroROS+0xa8>
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f1      	bne.n	8001b94 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <pvPortMallocMicroROS+0x180>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d04d      	beq.n	8001c56 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4413      	add	r3, r2
 8001bc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d921      	bls.n	8001c20 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	b672      	cpsid	i
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	b662      	cpsie	i
 8001c02:	613b      	str	r3, [r7, #16]
}
 8001c04:	bf00      	nop
 8001c06:	e7fe      	b.n	8001c06 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c1a:	69b8      	ldr	r0, [r7, #24]
 8001c1c:	f000 f96e 	bl	8001efc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d203      	bcs.n	8001c42 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <pvPortMallocMicroROS+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <pvPortMallocMicroROS+0x190>)
 8001c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <pvPortMallocMicroROS+0x184>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c56:	f00d fbdf 	bl	800f418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	b672      	cpsid	i
 8001c6a:	f383 8811 	msr	BASEPRI, r3
 8001c6e:	f3bf 8f6f 	isb	sy
 8001c72:	f3bf 8f4f 	dsb	sy
 8001c76:	b662      	cpsie	i
 8001c78:	60fb      	str	r3, [r7, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	e7fe      	b.n	8001c7c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3728      	adds	r7, #40	; 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20006a3c 	.word	0x20006a3c
 8001c8c:	20006a48 	.word	0x20006a48
 8001c90:	20006a40 	.word	0x20006a40
 8001c94:	20006a34 	.word	0x20006a34
 8001c98:	20006a44 	.word	0x20006a44

08001c9c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d04c      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	b672      	cpsid	i
 8001cd0:	f383 8811 	msr	BASEPRI, r3
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	f3bf 8f4f 	dsb	sy
 8001cdc:	b662      	cpsie	i
 8001cde:	60fb      	str	r3, [r7, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	e7fe      	b.n	8001ce2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf0:	b672      	cpsid	i
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	b662      	cpsie	i
 8001d00:	60bb      	str	r3, [r7, #8]
}
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d019      	beq.n	8001d48 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d115      	bne.n	8001d48 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <vPortFreeMicroROS+0xb4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001d2c:	f00d fb66 	bl	800f3fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <vPortFreeMicroROS+0xb8>)
 8001d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001d3e:	6938      	ldr	r0, [r7, #16]
 8001d40:	f000 f8dc 	bl	8001efc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001d44:	f00d fb68 	bl	800f418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20006a48 	.word	0x20006a48
 8001d54:	20006a40 	.word	0x20006a40

08001d58 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d64:	2308      	movs	r3, #8
 8001d66:	425b      	negs	r3, r3
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <getBlockSize+0x38>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

	return count;
 8001d80:	68fb      	ldr	r3, [r7, #12]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20006a48 	.word	0x20006a48

08001d94 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d9e:	f00d fb2d 	bl	800f3fc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff feb0 	bl	8001b08 <pvPortMallocMicroROS>
 8001da8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d014      	beq.n	8001de0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffce 	bl	8001d58 <getBlockSize>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d201      	bcs.n	8001dd0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	f01f fa72 	bl	80212be <memcpy>

		vPortFreeMicroROS(pv);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff5e 	bl	8001c9c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001de0:	f00d fb1a 	bl	800f418 <xTaskResumeAll>

	return newmem;
 8001de4:	68bb      	ldr	r3, [r7, #8]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001df8:	f00d fb00 	bl	800f3fc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff fe7e 	bl	8001b08 <pvPortMallocMicroROS>
 8001e0c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001e12:	e004      	b.n	8001e1e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	613a      	str	r2, [r7, #16]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	617a      	str	r2, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f5      	bne.n	8001e14 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001e28:	f00d faf6 	bl	800f418 <xTaskResumeAll>
  	return mem;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001e42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <prvHeapInit+0xac>)
 8001e46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00c      	beq.n	8001e6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3307      	adds	r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0307 	bic.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <prvHeapInit+0xac>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <prvHeapInit+0xb0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e84:	2208      	movs	r2, #8
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0307 	bic.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <prvHeapInit+0xb4>)
 8001e98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <prvHeapInit+0xb4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <prvHeapInit+0xb4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	1ad2      	subs	r2, r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <prvHeapInit+0xb4>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <prvHeapInit+0xb8>)
 8001ec6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <prvHeapInit+0xbc>)
 8001ece:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <prvHeapInit+0xc0>)
 8001ed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20002e34 	.word	0x20002e34
 8001ee8:	20006a34 	.word	0x20006a34
 8001eec:	20006a3c 	.word	0x20006a3c
 8001ef0:	20006a44 	.word	0x20006a44
 8001ef4:	20006a40 	.word	0x20006a40
 8001ef8:	20006a48 	.word	0x20006a48

08001efc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <prvInsertBlockIntoFreeList+0xac>)
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e002      	b.n	8001f10 <prvInsertBlockIntoFreeList+0x14>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8f7      	bhi.n	8001f0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d108      	bne.n	8001f3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	441a      	add	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d118      	bne.n	8001f84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d00d      	beq.n	8001f7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e008      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <prvInsertBlockIntoFreeList+0xb0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e003      	b.n	8001f8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d002      	beq.n	8001f9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20006a34 	.word	0x20006a34
 8001fac:	20006a3c 	.word	0x20006a3c

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MX_DMA_Init+0x48>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	200c      	movs	r0, #12
 8001fd4:	f002 fe6a 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fd8:	200c      	movs	r0, #12
 8001fda:	f002 fe83 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	200e      	movs	r0, #14
 8001fe4:	f002 fe62 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001fe8:	200e      	movs	r0, #14
 8001fea:	f002 fe7b 	bl	8004ce4 <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800200a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <cubemx_transport_open+0x28>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f007 f9a2 	bl	800935c <HAL_UART_Receive_DMA>
    return true;
 8002018:	2301      	movs	r3, #1
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20006a4c 	.word	0x20006a4c

08002028 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002036:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f007 f9d3 	bl	80093e4 <HAL_UART_DMAStop>
    return true;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800205c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002062:	2b20      	cmp	r3, #32
 8002064:	d11a      	bne.n	800209c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f007 f8f8 	bl	8009264 <HAL_UART_Transmit_DMA>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002078:	e002      	b.n	8002080 <cubemx_transport_write+0x38>
            osDelay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f00c f954 	bl	800e328 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <cubemx_transport_write+0x46>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800208a:	2b20      	cmp	r3, #32
 800208c:	d1f5      	bne.n	800207a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800208e:	7cfb      	ldrb	r3, [r7, #19]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <cubemx_transport_write+0x50>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	e002      	b.n	800209e <cubemx_transport_write+0x56>
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800209c:	2300      	movs	r3, #0
    }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020bc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c2:	b672      	cpsid	i
}
 80020c4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <cubemx_transport_read+0x9c>)
 80020d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
}
 80020d8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f00c f921 	bl	800e328 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <cubemx_transport_read+0xa0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <cubemx_transport_read+0x9c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d103      	bne.n	80020fa <cubemx_transport_read+0x52>
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbe3      	blt.n	80020c2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80020fe:	e011      	b.n	8002124 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <cubemx_transport_read+0xa0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	440b      	add	r3, r1
 800210a:	4910      	ldr	r1, [pc, #64]	; (800214c <cubemx_transport_read+0xa4>)
 800210c:	5c8a      	ldrb	r2, [r1, r2]
 800210e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <cubemx_transport_read+0xa0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <cubemx_transport_read+0xa0>)
 800211c:	6013      	str	r3, [r2, #0]
        wrote++;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <cubemx_transport_read+0xa0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <cubemx_transport_read+0x9c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d003      	beq.n	8002138 <cubemx_transport_read+0x90>
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3e3      	bcc.n	8002100 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002138:	69bb      	ldr	r3, [r7, #24]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20007250 	.word	0x20007250
 8002148:	2000724c 	.word	0x2000724c
 800214c:	20006a4c 	.word	0x20006a4c

08002150 <HAL_CAN_TxMailbox0CompleteCallback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002158:	f7fe fd4e 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800216c:	f7fe fd4a 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8002180:	f7fe fd3a 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 8002194:	f7fe fd36 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80021a8:	f7fe fd26 	bl	8000bf8 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80021bc:	f7fe fd22 	bl	8000c04 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fd1c 	bl	8000c10 <WhenCANRxFifo0MsgPending>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200072f4 	.word	0x200072f4

080021e4 <canSetting>:
//can通信の設定
void canSetting(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	printf("Start Initializing CAN System:Begin\n\r");
 80021e8:	480f      	ldr	r0, [pc, #60]	; (8002228 <canSetting+0x44>)
 80021ea:	f01e fcef 	bl	8020bcc <iprintf>
	osDelay(10);
 80021ee:	200a      	movs	r0, #10
 80021f0:	f00c f89a 	bl	800e328 <osDelay>

	CAN_SystemInit(&hcan1);
 80021f4:	480d      	ldr	r0, [pc, #52]	; (800222c <canSetting+0x48>)
 80021f6:	f7fe fe5b 	bl	8000eb0 <CAN_SystemInit>

//	num_of_devices.mcmd3 = 1;
	num_of_devices.mcmd3 = 3;
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <canSetting+0x4c>)
 80021fc:	2203      	movs	r2, #3
 80021fe:	709a      	strb	r2, [r3, #2]
	num_of_devices.mcmd4 = 0;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <canSetting+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	715a      	strb	r2, [r3, #5]
	num_of_devices.air = 0;
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <canSetting+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	711a      	strb	r2, [r3, #4]
	num_of_devices.servo = 0;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <canSetting+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	70da      	strb	r2, [r3, #3]

	printf("Start Initializing CAN System:End\n\r");
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <canSetting+0x50>)
 8002214:	f01e fcda 	bl	8020bcc <iprintf>
	osDelay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f00c f885 	bl	800e328 <osDelay>
	CAN_WaitConnect(&num_of_devices);
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <canSetting+0x4c>)
 8002220:	f7ff f8ee 	bl	8001400 <CAN_WaitConnect>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08024668 	.word	0x08024668
 800222c:	20002e0c 	.word	0x20002e0c
 8002230:	200072f4 	.word	0x200072f4
 8002234:	08024690 	.word	0x08024690

08002238 <mcmdMoter1Setting>:

//モータ1のmcmd設定
void mcmdMoter1Setting(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	    mcmd4M1_struct.device.node_type = NODE_MCMD3;
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 800223e:	2203      	movs	r2, #3
 8002240:	701a      	strb	r2, [r3, #0]
	    mcmd4M1_struct.device.node_id = 0;
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002244:	2200      	movs	r2, #0
 8002246:	705a      	strb	r2, [r3, #1]
	    mcmd4M1_struct.device.device_num = 0;
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 800224a:	2200      	movs	r2, #0
 800224c:	709a      	strb	r2, [r3, #2]

	    mcmd4M1_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002250:	2201      	movs	r2, #1
 8002252:	751a      	strb	r2, [r3, #20]
	    mcmd4M1_struct.ctrl_param.PID_param.kp = 0.075f;
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002256:	4a25      	ldr	r2, [pc, #148]	; (80022ec <mcmdMoter1Setting+0xb4>)
 8002258:	619a      	str	r2, [r3, #24]
	    mcmd4M1_struct.ctrl_param.PID_param.ki = 0.025f;
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <mcmdMoter1Setting+0xb8>)
 800225e:	61da      	str	r2, [r3, #28]
	    mcmd4M1_struct.ctrl_param.PID_param.kd = 0.01f;
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002262:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <mcmdMoter1Setting+0xbc>)
 8002264:	621a      	str	r2, [r3, #32]
	    mcmd4M1_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M1_struct.ctrl_param.accel_limit_size = 2.0f;
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002274:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M1_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M1_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M1_struct.enc_dir = MCMD_DIR_FW;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002288:	2200      	movs	r2, #0
 800228a:	711a      	strb	r2, [r3, #4]
	    mcmd4M1_struct.rot_dir = MCMD_DIR_FW;
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 800228e:	2200      	movs	r2, #0
 8002290:	715a      	strb	r2, [r3, #5]
	    mcmd4M1_struct.quant_per_unit = 1.0/1024.0f;
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 8002294:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002298:	611a      	str	r2, [r3, #16]

	    mcmd4M1_struct.limit_sw_type = LIMIT_SW_NO;
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 800229c:	2201      	movs	r2, #1
 800229e:	719a      	strb	r2, [r3, #6]
	    mcmd4M1_struct.calib = CALIBRATION_DISABLE;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	71da      	strb	r2, [r3, #7]
	    mcmd4M1_struct.calib_duty = -0.2f;
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <mcmdMoter1Setting+0xc0>)
 80022aa:	609a      	str	r2, [r3, #8]
	    mcmd4M1_struct.offset = 0.0f;
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
	    mcmd4M1_struct.fb_type = MCMD_FB_POS;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M1_struct);
 80022ba:	480b      	ldr	r0, [pc, #44]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022bc:	f7ff f9ba 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80022c0:	200a      	movs	r0, #10
 80022c2:	f00c f831 	bl	800e328 <osDelay>
		 MCMD_Calib(&mcmd4M1_struct);
 80022c6:	4808      	ldr	r0, [pc, #32]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022c8:	f7ff fa04 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80022cc:	2032      	movs	r0, #50	; 0x32
 80022ce:	f00c f82b 	bl	800e328 <osDelay>
		 MCMD_SetTarget(&mcmd4M1_struct, 0.00f);
 80022d2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80022fc <mcmdMoter1Setting+0xc4>
 80022d6:	4804      	ldr	r0, [pc, #16]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022d8:	f7ff fa28 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M1_struct);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <mcmdMoter1Setting+0xb0>)
 80022de:	f7ff fa0f 	bl	8001700 <MCMD_Control_Enable>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200072fc 	.word	0x200072fc
 80022ec:	3d99999a 	.word	0x3d99999a
 80022f0:	3ccccccd 	.word	0x3ccccccd
 80022f4:	3c23d70a 	.word	0x3c23d70a
 80022f8:	be4ccccd 	.word	0xbe4ccccd
 80022fc:	00000000 	.word	0x00000000

08002300 <mcmdMoter2Setting>:

//モータ2のmcmd設定
void mcmdMoter2Setting(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	    mcmd4M2_struct.device.node_type = NODE_MCMD3;
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002306:	2203      	movs	r2, #3
 8002308:	701a      	strb	r2, [r3, #0]
	    mcmd4M2_struct.device.node_id = 0;
 800230a:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
	    mcmd4M2_struct.device.device_num = 1;
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002312:	2201      	movs	r2, #1
 8002314:	709a      	strb	r2, [r3, #2]

	    mcmd4M2_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002318:	2201      	movs	r2, #1
 800231a:	751a      	strb	r2, [r3, #20]
	    mcmd4M2_struct.ctrl_param.PID_param.kp = 0.075f;
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 800231e:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <mcmdMoter2Setting+0xb4>)
 8002320:	619a      	str	r2, [r3, #24]
	    mcmd4M2_struct.ctrl_param.PID_param.ki = 0.025f;
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <mcmdMoter2Setting+0xb8>)
 8002326:	61da      	str	r2, [r3, #28]
	    mcmd4M2_struct.ctrl_param.PID_param.kd = 0.01f;
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 800232a:	4a24      	ldr	r2, [pc, #144]	; (80023bc <mcmdMoter2Setting+0xbc>)
 800232c:	621a      	str	r2, [r3, #32]
	    mcmd4M2_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M2_struct.ctrl_param.accel_limit_size = 2.0f;
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M2_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M2_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M2_struct.enc_dir = MCMD_DIR_FW;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002350:	2200      	movs	r2, #0
 8002352:	711a      	strb	r2, [r3, #4]
	    mcmd4M2_struct.rot_dir = MCMD_DIR_FW;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002356:	2200      	movs	r2, #0
 8002358:	715a      	strb	r2, [r3, #5]
	    mcmd4M2_struct.quant_per_unit = 1.0/1024.0f;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 800235c:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002360:	611a      	str	r2, [r3, #16]

	    mcmd4M2_struct.limit_sw_type = LIMIT_SW_NO;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002364:	2201      	movs	r2, #1
 8002366:	719a      	strb	r2, [r3, #6]
	    mcmd4M2_struct.calib = CALIBRATION_DISABLE;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 800236a:	2201      	movs	r2, #1
 800236c:	71da      	strb	r2, [r3, #7]
	    mcmd4M2_struct.calib_duty = -0.2f;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002370:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <mcmdMoter2Setting+0xc0>)
 8002372:	609a      	str	r2, [r3, #8]
	    mcmd4M2_struct.offset = 0.0f;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
	    mcmd4M2_struct.fb_type = MCMD_FB_POS;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 800237e:	2200      	movs	r2, #0
 8002380:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M2_struct);
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002384:	f7ff f956 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002388:	200a      	movs	r0, #10
 800238a:	f00b ffcd 	bl	800e328 <osDelay>
		 MCMD_Calib(&mcmd4M2_struct);
 800238e:	4808      	ldr	r0, [pc, #32]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 8002390:	f7ff f9a0 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002394:	2032      	movs	r0, #50	; 0x32
 8002396:	f00b ffc7 	bl	800e328 <osDelay>
		 MCMD_SetTarget(&mcmd4M2_struct, 0.00f);
 800239a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80023c4 <mcmdMoter2Setting+0xc4>
 800239e:	4804      	ldr	r0, [pc, #16]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 80023a0:	f7ff f9c4 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M2_struct);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <mcmdMoter2Setting+0xb0>)
 80023a6:	f7ff f9ab 	bl	8001700 <MCMD_Control_Enable>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000733c 	.word	0x2000733c
 80023b4:	3d99999a 	.word	0x3d99999a
 80023b8:	3ccccccd 	.word	0x3ccccccd
 80023bc:	3c23d70a 	.word	0x3c23d70a
 80023c0:	be4ccccd 	.word	0xbe4ccccd
 80023c4:	00000000 	.word	0x00000000

080023c8 <mcmdMoter3Setting>:

void mcmdMoter3Setting(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	    mcmd4M3_struct.device.node_type = NODE_MCMD3;
 80023cc:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023ce:	2203      	movs	r2, #3
 80023d0:	701a      	strb	r2, [r3, #0]
	    mcmd4M3_struct.device.node_id = 2;
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023d4:	2202      	movs	r2, #2
 80023d6:	705a      	strb	r2, [r3, #1]
	    mcmd4M3_struct.device.device_num = 0;
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023da:	2200      	movs	r2, #0
 80023dc:	709a      	strb	r2, [r3, #2]

	    mcmd4M3_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	751a      	strb	r2, [r3, #20]
	    mcmd4M3_struct.ctrl_param.PID_param.kp = 0.075f;
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023e6:	4a25      	ldr	r2, [pc, #148]	; (800247c <mcmdMoter3Setting+0xb4>)
 80023e8:	619a      	str	r2, [r3, #24]
	    mcmd4M3_struct.ctrl_param.PID_param.ki = 0.025f;
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023ec:	4a24      	ldr	r2, [pc, #144]	; (8002480 <mcmdMoter3Setting+0xb8>)
 80023ee:	61da      	str	r2, [r3, #28]
	    mcmd4M3_struct.ctrl_param.PID_param.kd = 0.01f;
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <mcmdMoter3Setting+0xbc>)
 80023f4:	621a      	str	r2, [r3, #32]
	    mcmd4M3_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <mcmdMoter3Setting+0xb0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M3_struct.ctrl_param.accel_limit_size = 2.0f;
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M3_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M3_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M3_struct.enc_dir = MCMD_DIR_FW;
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002418:	2200      	movs	r2, #0
 800241a:	711a      	strb	r2, [r3, #4]
	    mcmd4M3_struct.rot_dir = MCMD_DIR_FW;
 800241c:	4b16      	ldr	r3, [pc, #88]	; (8002478 <mcmdMoter3Setting+0xb0>)
 800241e:	2200      	movs	r2, #0
 8002420:	715a      	strb	r2, [r3, #5]
	    mcmd4M3_struct.quant_per_unit = 1.0/1024.0f;
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002424:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002428:	611a      	str	r2, [r3, #16]

	    mcmd4M3_struct.limit_sw_type = LIMIT_SW_NO;
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <mcmdMoter3Setting+0xb0>)
 800242c:	2201      	movs	r2, #1
 800242e:	719a      	strb	r2, [r3, #6]
	    mcmd4M3_struct.calib = CALIBRATION_DISABLE;
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002432:	2201      	movs	r2, #1
 8002434:	71da      	strb	r2, [r3, #7]
	    mcmd4M3_struct.calib_duty = -0.2f;
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <mcmdMoter3Setting+0xc0>)
 800243a:	609a      	str	r2, [r3, #8]
	    mcmd4M3_struct.offset = 0.0f;
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <mcmdMoter3Setting+0xb0>)
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
	    mcmd4M3_struct.fb_type = MCMD_FB_POS;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002446:	2200      	movs	r2, #0
 8002448:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M3_struct);
 800244a:	480b      	ldr	r0, [pc, #44]	; (8002478 <mcmdMoter3Setting+0xb0>)
 800244c:	f7ff f8f2 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002450:	200a      	movs	r0, #10
 8002452:	f00b ff69 	bl	800e328 <osDelay>
		 MCMD_Calib(&mcmd4M3_struct);
 8002456:	4808      	ldr	r0, [pc, #32]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002458:	f7ff f93c 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 800245c:	2032      	movs	r0, #50	; 0x32
 800245e:	f00b ff63 	bl	800e328 <osDelay>
		 MCMD_SetTarget(&mcmd4M3_struct, 0.00f);
 8002462:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800248c <mcmdMoter3Setting+0xc4>
 8002466:	4804      	ldr	r0, [pc, #16]	; (8002478 <mcmdMoter3Setting+0xb0>)
 8002468:	f7ff f960 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M3_struct);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <mcmdMoter3Setting+0xb0>)
 800246e:	f7ff f947 	bl	8001700 <MCMD_Control_Enable>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000737c 	.word	0x2000737c
 800247c:	3d99999a 	.word	0x3d99999a
 8002480:	3ccccccd 	.word	0x3ccccccd
 8002484:	3c23d70a 	.word	0x3c23d70a
 8002488:	be4ccccd 	.word	0xbe4ccccd
 800248c:	00000000 	.word	0x00000000

08002490 <mcmdMoter4Setting>:

void mcmdMoter4Setting(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	    mcmd4M4_struct.device.node_type = NODE_MCMD3;
 8002494:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <mcmdMoter4Setting+0xb0>)
 8002496:	2203      	movs	r2, #3
 8002498:	701a      	strb	r2, [r3, #0]
	    mcmd4M4_struct.device.node_id =2;
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <mcmdMoter4Setting+0xb0>)
 800249c:	2202      	movs	r2, #2
 800249e:	705a      	strb	r2, [r3, #1]
	    mcmd4M4_struct.device.device_num = 1;
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	709a      	strb	r2, [r3, #2]

	    mcmd4M4_struct.ctrl_param.ctrl_type = MCMD_CTRL_VEL;
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	751a      	strb	r2, [r3, #20]
	    mcmd4M4_struct.ctrl_param.PID_param.kp = 0.075f;
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024ae:	4a25      	ldr	r2, [pc, #148]	; (8002544 <mcmdMoter4Setting+0xb4>)
 80024b0:	619a      	str	r2, [r3, #24]
	    mcmd4M4_struct.ctrl_param.PID_param.ki = 0.025f;
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024b4:	4a24      	ldr	r2, [pc, #144]	; (8002548 <mcmdMoter4Setting+0xb8>)
 80024b6:	61da      	str	r2, [r3, #28]
	    mcmd4M4_struct.ctrl_param.PID_param.kd = 0.01f;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <mcmdMoter4Setting+0xbc>)
 80024bc:	621a      	str	r2, [r3, #32]
	    mcmd4M4_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M4_struct.ctrl_param.accel_limit_size = 2.0f;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M4_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M4_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M4_struct.enc_dir = MCMD_DIR_FW;
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	711a      	strb	r2, [r3, #4]
	    mcmd4M4_struct.rot_dir = MCMD_DIR_FW;
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	715a      	strb	r2, [r3, #5]
	    mcmd4M4_struct.quant_per_unit = 1.0/1024.0f;
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024ec:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 80024f0:	611a      	str	r2, [r3, #16]

	    mcmd4M4_struct.limit_sw_type = LIMIT_SW_NO;
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	719a      	strb	r2, [r3, #6]
	    mcmd4M4_struct.calib = CALIBRATION_DISABLE;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <mcmdMoter4Setting+0xb0>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	71da      	strb	r2, [r3, #7]
	    mcmd4M4_struct.calib_duty = -0.2f;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <mcmdMoter4Setting+0xb0>)
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <mcmdMoter4Setting+0xc0>)
 8002502:	609a      	str	r2, [r3, #8]
	    mcmd4M4_struct.offset = 0.0f;
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <mcmdMoter4Setting+0xb0>)
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
	    mcmd4M4_struct.fb_type = MCMD_FB_POS;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <mcmdMoter4Setting+0xb0>)
 800250e:	2200      	movs	r2, #0
 8002510:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M4_struct);
 8002512:	480b      	ldr	r0, [pc, #44]	; (8002540 <mcmdMoter4Setting+0xb0>)
 8002514:	f7ff f88e 	bl	8001634 <MCMD_init>
		 osDelay(10);
 8002518:	200a      	movs	r0, #10
 800251a:	f00b ff05 	bl	800e328 <osDelay>
		 MCMD_Calib(&mcmd4M4_struct);
 800251e:	4808      	ldr	r0, [pc, #32]	; (8002540 <mcmdMoter4Setting+0xb0>)
 8002520:	f7ff f8d8 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 8002524:	2032      	movs	r0, #50	; 0x32
 8002526:	f00b feff 	bl	800e328 <osDelay>
		 MCMD_SetTarget(&mcmd4M4_struct, 0.00f);
 800252a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002554 <mcmdMoter4Setting+0xc4>
 800252e:	4804      	ldr	r0, [pc, #16]	; (8002540 <mcmdMoter4Setting+0xb0>)
 8002530:	f7ff f8fc 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M4_struct);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <mcmdMoter4Setting+0xb0>)
 8002536:	f7ff f8e3 	bl	8001700 <MCMD_Control_Enable>
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200073bc 	.word	0x200073bc
 8002544:	3d99999a 	.word	0x3d99999a
 8002548:	3ccccccd 	.word	0x3ccccccd
 800254c:	3c23d70a 	.word	0x3c23d70a
 8002550:	be4ccccd 	.word	0xbe4ccccd
 8002554:	00000000 	.word	0x00000000

08002558 <mcmdMoter5Setting>:

void mcmdMoter5Setting(){
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	    mcmd4M5_struct.device.node_type = NODE_MCMD3;
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800255e:	2203      	movs	r2, #3
 8002560:	701a      	strb	r2, [r3, #0]
	    mcmd4M5_struct.device.node_id =5;
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002564:	2205      	movs	r2, #5
 8002566:	705a      	strb	r2, [r3, #1]
	    mcmd4M5_struct.device.device_num = 0;
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800256a:	2200      	movs	r2, #0
 800256c:	709a      	strb	r2, [r3, #2]

	    mcmd4M5_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002570:	2200      	movs	r2, #0
 8002572:	751a      	strb	r2, [r3, #20]
	    mcmd4M5_struct.ctrl_param.PID_param.kp = 0.2f;
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <mcmdMoter5Setting+0xb4>)
 8002578:	619a      	str	r2, [r3, #24]
	    mcmd4M5_struct.ctrl_param.PID_param.ki = 0.05f;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <mcmdMoter5Setting+0xb0>)
 800257c:	4a24      	ldr	r2, [pc, #144]	; (8002610 <mcmdMoter5Setting+0xb8>)
 800257e:	61da      	str	r2, [r3, #28]
	    mcmd4M5_struct.ctrl_param.PID_param.kd = 0.01f;
 8002580:	4b21      	ldr	r3, [pc, #132]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <mcmdMoter5Setting+0xbc>)
 8002584:	621a      	str	r2, [r3, #32]
	    mcmd4M5_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M5_struct.ctrl_param.accel_limit_size = 2.0f;
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002594:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M5_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <mcmdMoter5Setting+0xb0>)
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M5_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M5_struct.enc_dir = MCMD_DIR_BC;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	711a      	strb	r2, [r3, #4]
	    mcmd4M5_struct.rot_dir = MCMD_DIR_BC;
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	715a      	strb	r2, [r3, #5]
	    mcmd4M5_struct.quant_per_unit = 1.0/1024.0f;
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025b4:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 80025b8:	611a      	str	r2, [r3, #16]

	    mcmd4M5_struct.limit_sw_type = LIMIT_SW_NO;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	719a      	strb	r2, [r3, #6]
	    mcmd4M5_struct.calib = CALIBRATION_DISABLE;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	71da      	strb	r2, [r3, #7]
	    mcmd4M5_struct.calib_duty = -0.2f;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025c8:	4a13      	ldr	r2, [pc, #76]	; (8002618 <mcmdMoter5Setting+0xc0>)
 80025ca:	609a      	str	r2, [r3, #8]
	    mcmd4M5_struct.offset = 0.0f;
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
	    mcmd4M5_struct.fb_type = MCMD_FB_POS;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M5_struct);
 80025da:	480b      	ldr	r0, [pc, #44]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025dc:	f7ff f82a 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80025e0:	200a      	movs	r0, #10
 80025e2:	f00b fea1 	bl	800e328 <osDelay>
		 MCMD_Calib(&mcmd4M5_struct);
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025e8:	f7ff f874 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80025ec:	2032      	movs	r0, #50	; 0x32
 80025ee:	f00b fe9b 	bl	800e328 <osDelay>
		 MCMD_SetTarget(&mcmd4M5_struct, 0.00f);
 80025f2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800261c <mcmdMoter5Setting+0xc4>
 80025f6:	4804      	ldr	r0, [pc, #16]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025f8:	f7ff f898 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M5_struct);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <mcmdMoter5Setting+0xb0>)
 80025fe:	f7ff f87f 	bl	8001700 <MCMD_Control_Enable>
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200073fc 	.word	0x200073fc
 800260c:	3e4ccccd 	.word	0x3e4ccccd
 8002610:	3d4ccccd 	.word	0x3d4ccccd
 8002614:	3c23d70a 	.word	0x3c23d70a
 8002618:	be4ccccd 	.word	0xbe4ccccd
 800261c:	00000000 	.word	0x00000000

08002620 <mcmdMoter6Setting>:

void mcmdMoter6Setting(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	    mcmd4M6_struct.device.node_type = NODE_MCMD3;
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002626:	2203      	movs	r2, #3
 8002628:	701a      	strb	r2, [r3, #0]
	    mcmd4M6_struct.device.node_id =5;
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800262c:	2205      	movs	r2, #5
 800262e:	705a      	strb	r2, [r3, #1]
	    mcmd4M6_struct.device.device_num = 1;
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002632:	2201      	movs	r2, #1
 8002634:	709a      	strb	r2, [r3, #2]

	    mcmd4M6_struct.ctrl_param.ctrl_type = MCMD_CTRL_POS;
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002638:	2200      	movs	r2, #0
 800263a:	751a      	strb	r2, [r3, #20]
	    mcmd4M6_struct.ctrl_param.PID_param.kp = 0.2f;
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <mcmdMoter6Setting+0xb4>)
 8002640:	619a      	str	r2, [r3, #24]
	    mcmd4M6_struct.ctrl_param.PID_param.ki = 0.05f;
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002644:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <mcmdMoter6Setting+0xb8>)
 8002646:	61da      	str	r2, [r3, #28]
	    mcmd4M6_struct.ctrl_param.PID_param.kd = 0.01f;
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800264a:	4a24      	ldr	r2, [pc, #144]	; (80026dc <mcmdMoter6Setting+0xbc>)
 800264c:	621a      	str	r2, [r3, #32]
	    mcmd4M6_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	    mcmd4M6_struct.ctrl_param.accel_limit_size = 2.0f;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002658:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265c:	635a      	str	r2, [r3, #52]	; 0x34
	    mcmd4M6_struct.ctrl_param.feedback = MCMD_FB_ENABLE;
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    mcmd4M6_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    mcmd4M6_struct.enc_dir = MCMD_DIR_FW;
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002670:	2200      	movs	r2, #0
 8002672:	711a      	strb	r2, [r3, #4]
	    mcmd4M6_struct.rot_dir = MCMD_DIR_FW;
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002676:	2200      	movs	r2, #0
 8002678:	715a      	strb	r2, [r3, #5]
	    mcmd4M6_struct.quant_per_unit = 1.0/1024.0f;
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800267c:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8002680:	611a      	str	r2, [r3, #16]

	    mcmd4M6_struct.limit_sw_type = LIMIT_SW_NO;
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002684:	2201      	movs	r2, #1
 8002686:	719a      	strb	r2, [r3, #6]
	    mcmd4M6_struct.calib = CALIBRATION_DISABLE;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800268a:	2201      	movs	r2, #1
 800268c:	71da      	strb	r2, [r3, #7]
	    mcmd4M6_struct.calib_duty = -0.2f;
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002690:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <mcmdMoter6Setting+0xc0>)
 8002692:	609a      	str	r2, [r3, #8]
	    mcmd4M6_struct.offset = 0.0f;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
	    mcmd4M6_struct.fb_type = MCMD_FB_POS;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 800269e:	2200      	movs	r2, #0
 80026a0:	70da      	strb	r2, [r3, #3]

		 MCMD_init(&mcmd4M6_struct);
 80026a2:	480b      	ldr	r0, [pc, #44]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026a4:	f7fe ffc6 	bl	8001634 <MCMD_init>
		 osDelay(10);
 80026a8:	200a      	movs	r0, #10
 80026aa:	f00b fe3d 	bl	800e328 <osDelay>
		 MCMD_Calib(&mcmd4M6_struct);
 80026ae:	4808      	ldr	r0, [pc, #32]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026b0:	f7ff f810 	bl	80016d4 <MCMD_Calib>
		 osDelay(50);
 80026b4:	2032      	movs	r0, #50	; 0x32
 80026b6:	f00b fe37 	bl	800e328 <osDelay>
		 MCMD_SetTarget(&mcmd4M6_struct, 0.00f);
 80026ba:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80026e4 <mcmdMoter6Setting+0xc4>
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026c0:	f7ff f834 	bl	800172c <MCMD_SetTarget>
		 MCMD_Control_Enable(&mcmd4M6_struct);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <mcmdMoter6Setting+0xb0>)
 80026c6:	f7ff f81b 	bl	8001700 <MCMD_Control_Enable>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000743c 	.word	0x2000743c
 80026d4:	3e4ccccd 	.word	0x3e4ccccd
 80026d8:	3d4ccccd 	.word	0x3d4ccccd
 80026dc:	3c23d70a 	.word	0x3c23d70a
 80026e0:	be4ccccd 	.word	0xbe4ccccd
 80026e4:	00000000 	.word	0x00000000

080026e8 <servo1Setting>:
		 MCMD_SetTarget(&mcmd4M8_struct, 0.00f);
		 MCMD_Control_Enable(&mcmd4M8_struct);
}

//サーボ基盤設定
void servo1Setting(){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	servo_device1.node_type = NODE_SERVO;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <servo1Setting+0x44>)
 80026ee:	2204      	movs	r2, #4
 80026f0:	701a      	strb	r2, [r3, #0]
	servo_device1.node_id = 1;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <servo1Setting+0x44>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	705a      	strb	r2, [r3, #1]
	servo_device1.device_num = 0;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <servo1Setting+0x44>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	709a      	strb	r2, [r3, #2]

	servo_param1.angle_range=270.0f;
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <servo1Setting+0x48>)
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <servo1Setting+0x4c>)
 8002702:	60da      	str	r2, [r3, #12]
	servo_param1.angle_offset=0.0f;
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <servo1Setting+0x48>)
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
	servo_param1.pulse_width_max=2.4f;
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <servo1Setting+0x48>)
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <servo1Setting+0x50>)
 8002710:	605a      	str	r2, [r3, #4]
	servo_param1.pulse_width_min=0.5f;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <servo1Setting+0x48>)
 8002714:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002718:	601a      	str	r2, [r3, #0]
	servo_param1.pwm_frequency=50;
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <servo1Setting+0x48>)
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <servo1Setting+0x54>)
 800271e:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002720:	2032      	movs	r0, #50	; 0x32
 8002722:	f00b fe01 	bl	800e328 <osDelay>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20007490 	.word	0x20007490
 8002730:	2000747c 	.word	0x2000747c
 8002734:	43870000 	.word	0x43870000
 8002738:	4019999a 	.word	0x4019999a
 800273c:	42480000 	.word	0x42480000

08002740 <servo2Setting>:

void servo2Setting(){
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	servo_device2.node_type = NODE_SERVO;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <servo2Setting+0x44>)
 8002746:	2204      	movs	r2, #4
 8002748:	701a      	strb	r2, [r3, #0]
	servo_device2.node_id = 1;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <servo2Setting+0x44>)
 800274c:	2201      	movs	r2, #1
 800274e:	705a      	strb	r2, [r3, #1]
	servo_device2.device_num = 1;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <servo2Setting+0x44>)
 8002752:	2201      	movs	r2, #1
 8002754:	709a      	strb	r2, [r3, #2]

	servo_param2.angle_range=270.0f;
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <servo2Setting+0x48>)
 8002758:	4a0c      	ldr	r2, [pc, #48]	; (800278c <servo2Setting+0x4c>)
 800275a:	60da      	str	r2, [r3, #12]
	servo_param2.angle_offset=0.0f;
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <servo2Setting+0x48>)
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
	servo_param2.pulse_width_max=2.4f;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <servo2Setting+0x48>)
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <servo2Setting+0x50>)
 8002768:	605a      	str	r2, [r3, #4]
	servo_param2.pulse_width_min=0.5f;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <servo2Setting+0x48>)
 800276c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002770:	601a      	str	r2, [r3, #0]
	servo_param2.pwm_frequency=50;
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <servo2Setting+0x48>)
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <servo2Setting+0x54>)
 8002776:	609a      	str	r2, [r3, #8]

	osDelay(50);
 8002778:	2032      	movs	r0, #50	; 0x32
 800277a:	f00b fdd5 	bl	800e328 <osDelay>
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200074a8 	.word	0x200074a8
 8002788:	20007494 	.word	0x20007494
 800278c:	43870000 	.word	0x43870000
 8002790:	4019999a 	.word	0x4019999a
 8002794:	42480000 	.word	0x42480000

08002798 <airSetting>:

//エアシリ基盤設定
void airSetting(){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	air_device.node_type = NODE_AIR;
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <airSetting+0x44>)
 80027a0:	2205      	movs	r2, #5
 80027a2:	701a      	strb	r2, [r3, #0]
	air_device.node_id = 0;
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <airSetting+0x44>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	705a      	strb	r2, [r3, #1]

	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 80027aa:	2300      	movs	r3, #0
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	e00c      	b.n	80027ca <airSetting+0x32>
		air_device.device_num = i; //
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <airSetting+0x44>)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	7093      	strb	r3, [r2, #2]
		AirCylinder_Init(&air_device, AIR_OFF);
 80027b6:	2100      	movs	r1, #0
 80027b8:	4808      	ldr	r0, [pc, #32]	; (80027dc <airSetting+0x44>)
 80027ba:	f7ff f82b 	bl	8001814 <AirCylinder_Init>
		HAL_Delay(10);  // このdelayは必要
 80027be:	200a      	movs	r0, #10
 80027c0:	f001 fb3c 	bl	8003e3c <HAL_Delay>
	 for(uint8_t i=PORT_1; i<=PORT_8; i++){
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	3301      	adds	r3, #1
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2b07      	cmp	r3, #7
 80027ce:	d9ef      	bls.n	80027b0 <airSetting+0x18>
	 }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200074ac 	.word	0x200074ac

080027e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80027e4:	4a10      	ldr	r2, [pc, #64]	; (8002828 <MX_FREERTOS_Init+0x48>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	4810      	ldr	r0, [pc, #64]	; (800282c <MX_FREERTOS_Init+0x4c>)
 80027ea:	f00b fcf7 	bl	800e1dc <osThreadNew>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <MX_FREERTOS_Init+0x50>)
 80027f2:	6013      	str	r3, [r2, #0]

  /* creation of SysCeckTask */
  SysCeckTaskHandle = osThreadNew(StartSysCheckTask, NULL, &SysCeckTask_attributes);
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <MX_FREERTOS_Init+0x54>)
 80027f6:	2100      	movs	r1, #0
 80027f8:	480f      	ldr	r0, [pc, #60]	; (8002838 <MX_FREERTOS_Init+0x58>)
 80027fa:	f00b fcef 	bl	800e1dc <osThreadNew>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <MX_FREERTOS_Init+0x5c>)
 8002802:	6013      	str	r3, [r2, #0]

  /* creation of MotorRunTask */
  MotorRunTaskHandle = osThreadNew(StartMotorRunTask, NULL, &MotorRunTask_attributes);
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <MX_FREERTOS_Init+0x60>)
 8002806:	2100      	movs	r1, #0
 8002808:	480e      	ldr	r0, [pc, #56]	; (8002844 <MX_FREERTOS_Init+0x64>)
 800280a:	f00b fce7 	bl	800e1dc <osThreadNew>
 800280e:	4603      	mov	r3, r0
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <MX_FREERTOS_Init+0x68>)
 8002812:	6013      	str	r3, [r2, #0]

  /* creation of EncorderTask */
  EncorderTaskHandle = osThreadNew(StartEncorderTask, NULL, &EncorderTask_attributes);
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <MX_FREERTOS_Init+0x6c>)
 8002816:	2100      	movs	r1, #0
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <MX_FREERTOS_Init+0x70>)
 800281a:	f00b fcdf 	bl	800e1dc <osThreadNew>
 800281e:	4603      	mov	r3, r0
 8002820:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <MX_FREERTOS_Init+0x74>)
 8002822:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	08024890 	.word	0x08024890
 800282c:	08002c21 	.word	0x08002c21
 8002830:	200074b8 	.word	0x200074b8
 8002834:	080248b4 	.word	0x080248b4
 8002838:	08003099 	.word	0x08003099
 800283c:	2000a3f8 	.word	0x2000a3f8
 8002840:	080248d8 	.word	0x080248d8
 8002844:	080030d5 	.word	0x080030d5
 8002848:	2000ac58 	.word	0x2000ac58
 800284c:	080248fc 	.word	0x080248fc
 8002850:	080030e5 	.word	0x080030e5
 8002854:	2000b4b8 	.word	0x2000b4b8

08002858 <service_callback>:
  * @retval None
  */

//過去の遺物
void service_callback(const void *request, void *response)
{
 8002858:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	60bb      	str	r3, [r7, #8]

	osDelay(1000);
 800286c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002870:	f00b fd5a 	bl	800e328 <osDelay>

	_res->sum = _req->a + _req->b + _req->c;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002880:	1884      	adds	r4, r0, r2
 8002882:	eb41 0503 	adc.w	r5, r1, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800288c:	eb14 0802 	adds.w	r8, r4, r2
 8002890:	eb45 0903 	adc.w	r9, r5, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	e9c3 8900 	strd	r8, r9, [r3]
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080028a4 <subscription_callback>:

//速度司令を格納
void subscription_callback(const void * msgin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	  const drive_msgs__msg__Omni * sub = (const drive_msgs__msg__Omni *)msgin;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

	  cmd_motor[0] = sub->mfontright;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	ed93 7b04 	vldr	d7, [r3, #16]
 80028b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <subscription_callback+0x58>)
 80028bc:	edc3 7a00 	vstr	s15, [r3]
	  cmd_motor[1] = sub->mfrontleft;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	ed93 7b06 	vldr	d7, [r3, #24]
 80028c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <subscription_callback+0x58>)
 80028cc:	edc3 7a01 	vstr	s15, [r3, #4]
	  cmd_motor[2] = sub->mbackright;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	ed93 7b08 	vldr	d7, [r3, #32]
 80028d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <subscription_callback+0x58>)
 80028dc:	edc3 7a02 	vstr	s15, [r3, #8]
	  cmd_motor[3] = sub->mbackleft;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80028e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <subscription_callback+0x58>)
 80028ec:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	2000bd1c 	.word	0x2000bd1c

08002900 <print_int>:

//micro-rosでのデバッグ用
void print_int(int num){
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	rosidl_runtime_c__String__init(&pub);
 8002908:	4811      	ldr	r0, [pc, #68]	; (8002950 <print_int+0x50>)
 800290a:	f014 fe73 	bl	80175f4 <rosidl_runtime_c__String__init>
	char val[12];
	snprintf(val, 12, "%d", num);
 800290e:	f107 0008 	add.w	r0, r7, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <print_int+0x54>)
 8002916:	210c      	movs	r1, #12
 8002918:	f01e fa74 	bl	8020e04 <sniprintf>
	rosidl_runtime_c__String__assignn(&pub.data, val, sizeof(val));
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	220c      	movs	r2, #12
 8002922:	4619      	mov	r1, r3
 8002924:	480a      	ldr	r0, [pc, #40]	; (8002950 <print_int+0x50>)
 8002926:	f014 fec3 	bl	80176b0 <rosidl_runtime_c__String__assignn>
	RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 800292a:	2200      	movs	r2, #0
 800292c:	4908      	ldr	r1, [pc, #32]	; (8002950 <print_int+0x50>)
 800292e:	480a      	ldr	r0, [pc, #40]	; (8002958 <print_int+0x58>)
 8002930:	f011 fada 	bl	8013ee8 <rcl_publish>
 8002934:	6178      	str	r0, [r7, #20]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <print_int+0x48>
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	f44f 7119 	mov.w	r1, #612	; 0x264
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <print_int+0x5c>)
 8002944:	f01e f942 	bl	8020bcc <iprintf>
}
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200072e8 	.word	0x200072e8
 8002954:	080246b4 	.word	0x080246b4
 8002958:	200074b0 	.word	0x200074b0
 800295c:	080246b8 	.word	0x080246b8

08002960 <manipsub_callback>:

//マニピュレーションのためのコールバック関数群
void manipsub_callback(const void * msgin)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const manip_msgs__msg__Cmd * msub = (const manip_msgs__msg__Cmd *)msgin;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60fb      	str	r3, [r7, #12]

	  print_int(msub->num);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002972:	4613      	mov	r3, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffc3 	bl	8002900 <print_int>
	  print_int(msub->top_base_arm);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	4613      	mov	r3, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ffbc 	bl	8002900 <print_int>
	  print_int(msub->top_base_hand);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ffb5 	bl	8002900 <print_int>

	  work_arm_deployer(msub->work_arm_deploy);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f000 f834 	bl	8002a0c <work_arm_deployer>
	  work_arm_setter(msub->work_arm);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f000 f899 	bl	8002ae4 <work_arm_setter>
	  work_hand_setter(msub->work_hand);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f000 f872 	bl	8002aa4 <work_hand_setter>
	  base1_arm_setter(msub->top_base_arm);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f000 f8ab 	bl	8002b24 <base1_arm_setter>
	  base1_hand_setter(msub->top_base_hand);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f000 f8c2 	bl	8002b60 <base1_hand_setter>
	  base2_arm_setter(msub->bottom_base_arm);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f000 f8db 	bl	8002ba0 <base2_arm_setter>
	  base2_hand_setter(msub->bottom_base_hand);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f000 f8f2 	bl	8002bdc <base2_hand_setter>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	4803      	ldr	r0, [pc, #12]	; (8002a08 <manipsub_callback+0xa8>)
 80029fc:	f002 ff5b 	bl	80058b6 <HAL_GPIO_TogglePin>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40020400 	.word	0x40020400

08002a0c <work_arm_deployer>:

void work_arm_deployer(int state){//state:{0:close,1:open}
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <work_arm_deployer+0x40>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002a1a:	491c      	ldr	r1, [pc, #112]	; (8002a8c <work_arm_deployer+0x80>)
 8002a1c:	481c      	ldr	r0, [pc, #112]	; (8002a90 <work_arm_deployer+0x84>)
 8002a1e:	f7fe fe9c 	bl	800175a <ServoDriver_Init>
		osDelay(100);  // 適切なdelayを入れる
 8002a22:	2064      	movs	r0, #100	; 0x64
 8002a24:	f00b fc80 	bl	800e328 <osDelay>
		ServoDriver_SendValue(&servo_device1, 45.0f);
 8002a28:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002a94 <work_arm_deployer+0x88>
 8002a2c:	4818      	ldr	r0, [pc, #96]	; (8002a90 <work_arm_deployer+0x84>)
 8002a2e:	f7fe fed6 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002a32:	4919      	ldr	r1, [pc, #100]	; (8002a98 <work_arm_deployer+0x8c>)
 8002a34:	4819      	ldr	r0, [pc, #100]	; (8002a9c <work_arm_deployer+0x90>)
 8002a36:	f7fe fe90 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002a3a:	2064      	movs	r0, #100	; 0x64
 8002a3c:	f00b fc74 	bl	800e328 <osDelay>
		ServoDriver_SendValue(&servo_device2, 135.0f);
 8002a40:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002aa0 <work_arm_deployer+0x94>
 8002a44:	4815      	ldr	r0, [pc, #84]	; (8002a9c <work_arm_deployer+0x90>)
 8002a46:	f7fe feca 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_SendValue(&servo_device2, 45.0f);
		ServoDriver_Init(&servo_device1, &servo_param1);
		osDelay(100);
		ServoDriver_SendValue(&servo_device1, 135.0f);
	}
}
 8002a4a:	e01a      	b.n	8002a82 <work_arm_deployer+0x76>
	}else if(state == 1){
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d117      	bne.n	8002a82 <work_arm_deployer+0x76>
		ServoDriver_Init(&servo_device2, &servo_param2);
 8002a52:	4911      	ldr	r1, [pc, #68]	; (8002a98 <work_arm_deployer+0x8c>)
 8002a54:	4811      	ldr	r0, [pc, #68]	; (8002a9c <work_arm_deployer+0x90>)
 8002a56:	f7fe fe80 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002a5a:	2064      	movs	r0, #100	; 0x64
 8002a5c:	f00b fc64 	bl	800e328 <osDelay>
		ServoDriver_SendValue(&servo_device2, 45.0f);
 8002a60:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8002a94 <work_arm_deployer+0x88>
 8002a64:	480d      	ldr	r0, [pc, #52]	; (8002a9c <work_arm_deployer+0x90>)
 8002a66:	f7fe feba 	bl	80017de <ServoDriver_SendValue>
		ServoDriver_Init(&servo_device1, &servo_param1);
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <work_arm_deployer+0x80>)
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <work_arm_deployer+0x84>)
 8002a6e:	f7fe fe74 	bl	800175a <ServoDriver_Init>
		osDelay(100);
 8002a72:	2064      	movs	r0, #100	; 0x64
 8002a74:	f00b fc58 	bl	800e328 <osDelay>
		ServoDriver_SendValue(&servo_device1, 135.0f);
 8002a78:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002aa0 <work_arm_deployer+0x94>
 8002a7c:	4804      	ldr	r0, [pc, #16]	; (8002a90 <work_arm_deployer+0x84>)
 8002a7e:	f7fe feae 	bl	80017de <ServoDriver_SendValue>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000747c 	.word	0x2000747c
 8002a90:	20007490 	.word	0x20007490
 8002a94:	42340000 	.word	0x42340000
 8002a98:	20007494 	.word	0x20007494
 8002a9c:	200074a8 	.word	0x200074a8
 8002aa0:	43070000 	.word	0x43070000

08002aa4 <work_hand_setter>:

void work_hand_setter(int state){//state:{0:open,1:close}
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <work_hand_setter+0x1e>
		  air_device.device_num=1;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <work_hand_setter+0x3c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4809      	ldr	r0, [pc, #36]	; (8002ae0 <work_hand_setter+0x3c>)
 8002abc:	f7fe fec5 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=1;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002ac0:	e009      	b.n	8002ad6 <work_hand_setter+0x32>
	  }else if(state == 1){
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <work_hand_setter+0x32>
		  air_device.device_num=1;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <work_hand_setter+0x3c>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <work_hand_setter+0x3c>)
 8002ad2:	f7fe feba 	bl	800184a <AirCylinder_SendOutput>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200074ac 	.word	0x200074ac

08002ae4 <work_arm_setter>:

void work_arm_setter(int state){//state:{0:up,1:down}
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	  if(state == 0){
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <work_arm_setter+0x1e>
		  air_device.device_num=0;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <work_arm_setter+0x3c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002af8:	2100      	movs	r1, #0
 8002afa:	4809      	ldr	r0, [pc, #36]	; (8002b20 <work_arm_setter+0x3c>)
 8002afc:	f7fe fea5 	bl	800184a <AirCylinder_SendOutput>
	  }else if(state == 1){
		  air_device.device_num=0;
		  AirCylinder_SendOutput(&air_device, AIR_ON);
	  }
}
 8002b00:	e009      	b.n	8002b16 <work_arm_setter+0x32>
	  }else if(state == 1){
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <work_arm_setter+0x32>
		  air_device.device_num=0;
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <work_arm_setter+0x3c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	709a      	strb	r2, [r3, #2]
		  AirCylinder_SendOutput(&air_device, AIR_ON);
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <work_arm_setter+0x3c>)
 8002b12:	f7fe fe9a 	bl	800184a <AirCylinder_SendOutput>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200074ac 	.word	0x200074ac

08002b24 <base1_arm_setter>:

void base1_arm_setter(int state){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <base1_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M5_struct,0.0f);
 8002b32:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002b58 <base1_arm_setter+0x34>
 8002b36:	4809      	ldr	r0, [pc, #36]	; (8002b5c <base1_arm_setter+0x38>)
 8002b38:	f7fe fdf8 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
	}
}
 8002b3c:	e007      	b.n	8002b4e <base1_arm_setter+0x2a>
	}else if(state == 1){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d104      	bne.n	8002b4e <base1_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M5_struct,0.5f);
 8002b44:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002b48:	4804      	ldr	r0, [pc, #16]	; (8002b5c <base1_arm_setter+0x38>)
 8002b4a:	f7fe fdef 	bl	800172c <MCMD_SetTarget>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	200073fc 	.word	0x200073fc

08002b60 <base1_hand_setter>:

void base1_hand_setter(int state){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <base1_hand_setter+0x1e>
		air_device.device_num=3;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <base1_hand_setter+0x3c>)
 8002b70:	2203      	movs	r2, #3
 8002b72:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002b74:	2100      	movs	r1, #0
 8002b76:	4809      	ldr	r0, [pc, #36]	; (8002b9c <base1_hand_setter+0x3c>)
 8002b78:	f7fe fe67 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=3;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002b7c:	e009      	b.n	8002b92 <base1_hand_setter+0x32>
		}else if(state == 1){
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <base1_hand_setter+0x32>
			air_device.device_num=3;
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <base1_hand_setter+0x3c>)
 8002b86:	2203      	movs	r2, #3
 8002b88:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4803      	ldr	r0, [pc, #12]	; (8002b9c <base1_hand_setter+0x3c>)
 8002b8e:	f7fe fe5c 	bl	800184a <AirCylinder_SendOutput>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200074ac 	.word	0x200074ac

08002ba0 <base2_arm_setter>:

void base2_arm_setter(int state){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <base2_arm_setter+0x1a>
		MCMD_SetTarget(&mcmd4M6_struct,0.0f);
 8002bae:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002bd4 <base2_arm_setter+0x34>
 8002bb2:	4809      	ldr	r0, [pc, #36]	; (8002bd8 <base2_arm_setter+0x38>)
 8002bb4:	f7fe fdba 	bl	800172c <MCMD_SetTarget>
	}else if(state == 1){
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
	}
}
 8002bb8:	e007      	b.n	8002bca <base2_arm_setter+0x2a>
	}else if(state == 1){
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d104      	bne.n	8002bca <base2_arm_setter+0x2a>
		MCMD_SetTarget(&mcmd4M6_struct,0.75f);
 8002bc0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8002bc4:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <base2_arm_setter+0x38>)
 8002bc6:	f7fe fdb1 	bl	800172c <MCMD_SetTarget>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	00000000 	.word	0x00000000
 8002bd8:	2000743c 	.word	0x2000743c

08002bdc <base2_hand_setter>:

void base2_hand_setter(int state){
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	if(state == 0){
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <base2_hand_setter+0x1e>
		air_device.device_num=2;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <base2_hand_setter+0x3c>)
 8002bec:	2202      	movs	r2, #2
 8002bee:	709a      	strb	r2, [r3, #2]
		AirCylinder_SendOutput(&air_device, AIR_OFF);
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4809      	ldr	r0, [pc, #36]	; (8002c18 <base2_hand_setter+0x3c>)
 8002bf4:	f7fe fe29 	bl	800184a <AirCylinder_SendOutput>
		}else if(state == 1){
			air_device.device_num=2;
			AirCylinder_SendOutput(&air_device, AIR_ON);
		}
}
 8002bf8:	e009      	b.n	8002c0e <base2_hand_setter+0x32>
		}else if(state == 1){
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <base2_hand_setter+0x32>
			air_device.device_num=2;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <base2_hand_setter+0x3c>)
 8002c02:	2202      	movs	r2, #2
 8002c04:	709a      	strb	r2, [r3, #2]
			AirCylinder_SendOutput(&air_device, AIR_ON);
 8002c06:	2101      	movs	r1, #1
 8002c08:	4803      	ldr	r0, [pc, #12]	; (8002c18 <base2_hand_setter+0x3c>)
 8002c0a:	f7fe fe1e 	bl	800184a <AirCylinder_SendOutput>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200074ac 	.word	0x200074ac
 8002c1c:	00000000 	.word	0x00000000

08002c20 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b0f0      	sub	sp, #448	; 0x1c0
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002c2a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c2e:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002c30:	f00e f85c 	bl	8010cec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの設定
  	rmw_uros_set_custom_transport(
 8002c34:	4bd2      	ldr	r3, [pc, #840]	; (8002f80 <StartDefaultTask+0x360>)
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	4bd2      	ldr	r3, [pc, #840]	; (8002f84 <StartDefaultTask+0x364>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4bd2      	ldr	r3, [pc, #840]	; (8002f88 <StartDefaultTask+0x368>)
 8002c3e:	4ad3      	ldr	r2, [pc, #844]	; (8002f8c <StartDefaultTask+0x36c>)
 8002c40:	49d3      	ldr	r1, [pc, #844]	; (8002f90 <StartDefaultTask+0x370>)
 8002c42:	2001      	movs	r0, #1
 8002c44:	f012 ff0a 	bl	8015a5c <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002c48:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f012 fb9b 	bl	8015388 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8002c52:	4bd0      	ldr	r3, [pc, #832]	; (8002f94 <StartDefaultTask+0x374>)
 8002c54:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8002c58:	4bcf      	ldr	r3, [pc, #828]	; (8002f98 <StartDefaultTask+0x378>)
 8002c5a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8002c5e:	4bcf      	ldr	r3, [pc, #828]	; (8002f9c <StartDefaultTask+0x37c>)
 8002c60:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002c64:	4bce      	ldr	r3, [pc, #824]	; (8002fa0 <StartDefaultTask+0x380>)
 8002c66:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002c6a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f012 fb98 	bl	80153a4 <rcutils_set_default_allocator>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f083 0301 	eor.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8002c80:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8002c84:	48c7      	ldr	r0, [pc, #796]	; (8002fa4 <StartDefaultTask+0x384>)
 8002c86:	f01d ffa1 	bl	8020bcc <iprintf>
  	}

  	osDelay(100);
 8002c8a:	2064      	movs	r0, #100	; 0x64
 8002c8c:	f00b fb4c 	bl	800e328 <osDelay>

  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8002c90:	4bc5      	ldr	r3, [pc, #788]	; (8002fa8 <StartDefaultTask+0x388>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6898      	ldr	r0, [r3, #8]
 8002c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	f01e f803 	bl	8020ca8 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8002ca2:	f010 fda1 	bl	80137e8 <rcl_get_zero_initialized_init_options>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8002cac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f012 fb95 	bl	80153e0 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8002cb6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f010 fe9c 	bl	80139f8 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8002cc0:	f011 f958 	bl	8013f74 <rcl_get_zero_initialized_service>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  	publisher = rcl_get_zero_initialized_publisher();
 8002cca:	f011 f83f 	bl	8013d4c <rcl_get_zero_initialized_publisher>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4ab6      	ldr	r2, [pc, #728]	; (8002fac <StartDefaultTask+0x38c>)
 8002cd2:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8002cd4:	f011 fa72 	bl	80141bc <rcl_get_zero_initialized_subscription>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	rcl_subscription_t manipsub = rcl_get_zero_initialized_subscription();
 8002cde:	f011 fa6d 	bl	80141bc <rcl_get_zero_initialized_subscription>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8002ce8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f011 fef3 	bl	8014adc <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002cf6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002cfa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f010 fff4 	bl	8013cec <rcl_node_get_default_options>

  	osDelay(100);
 8002d04:	2064      	movs	r0, #100	; 0x64
 8002d06:	f00b fb0f 	bl	800e328 <osDelay>

  	//ノードの設定
  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8002d0a:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8002d0e:	466a      	mov	r2, sp
 8002d10:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002d14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d18:	e882 0003 	stmia.w	r2, {r0, r1}
 8002d1c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d22:	4620      	mov	r0, r4
 8002d24:	f010 fd62 	bl	80137ec <rcl_init_options_init>
 8002d28:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8002d2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d006      	beq.n	8002d42 <StartDefaultTask+0x122>
 8002d34:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d38:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8002d3c:	489c      	ldr	r0, [pc, #624]	; (8002fb0 <StartDefaultTask+0x390>)
 8002d3e:	f01d ff45 	bl	8020bcc <iprintf>
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8002d42:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f010 fe4d 	bl	80139e8 <rcl_init_options_set_domain_id>
 8002d4e:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8002d52:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <StartDefaultTask+0x148>
 8002d5a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002d5e:	f240 21f1 	movw	r1, #753	; 0x2f1
 8002d62:	4893      	ldr	r0, [pc, #588]	; (8002fb0 <StartDefaultTask+0x390>)
 8002d64:	f01d ff32 	bl	8020bcc <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002d68:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8002d6c:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8002d70:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4613      	mov	r3, r2
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f012 f9dc 	bl	8015138 <rclc_support_init_with_options>
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8002d80:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8002d84:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8002d88:	f107 0320 	add.w	r3, r7, #32
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <StartDefaultTask+0x394>)
 8002d92:	4989      	ldr	r1, [pc, #548]	; (8002fb8 <StartDefaultTask+0x398>)
 8002d94:	f012 fa06 	bl	80151a4 <rclc_node_init_with_options>
 8002d98:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8002d9c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <StartDefaultTask+0x192>
 8002da4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002da8:	f240 21f3 	movw	r1, #755	; 0x2f3
 8002dac:	4880      	ldr	r0, [pc, #512]	; (8002fb0 <StartDefaultTask+0x390>)
 8002dae:	f01d ff0d 	bl	8020bcc <iprintf>
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8002db2:	f00e fcfb 	bl	80117ac <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002dbc:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002dc0:	4b7e      	ldr	r3, [pc, #504]	; (8002fbc <StartDefaultTask+0x39c>)
 8002dc2:	f012 fa65 	bl	8015290 <rclc_service_init_default>
 8002dc6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
 8002dca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <StartDefaultTask+0x1c0>
 8002dd2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002dd6:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8002dda:	4875      	ldr	r0, [pc, #468]	; (8002fb0 <StartDefaultTask+0x390>)
 8002ddc:	f01d fef6 	bl	8020bcc <iprintf>

	RCCHECK(rclc_publisher_init_default(
 8002de0:	f014 fcf6 	bl	80177d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002dea:	4b75      	ldr	r3, [pc, #468]	; (8002fc0 <StartDefaultTask+0x3a0>)
 8002dec:	486f      	ldr	r0, [pc, #444]	; (8002fac <StartDefaultTask+0x38c>)
 8002dee:	f012 fa15 	bl	801521c <rclc_publisher_init_default>
 8002df2:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8002df6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <StartDefaultTask+0x1ec>
 8002dfe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e02:	f240 21f6 	movw	r1, #758	; 0x2f6
 8002e06:	486a      	ldr	r0, [pc, #424]	; (8002fb0 <StartDefaultTask+0x390>)
 8002e08:	f01d fee0 	bl	8020bcc <iprintf>
	  &publisher,
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

		RCCHECK(rclc_publisher_init_default(
 8002e0c:	f00e fdfe 	bl	8011a0c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e16:	4b6b      	ldr	r3, [pc, #428]	; (8002fc4 <StartDefaultTask+0x3a4>)
 8002e18:	486b      	ldr	r0, [pc, #428]	; (8002fc8 <StartDefaultTask+0x3a8>)
 8002e1a:	f012 f9ff 	bl	801521c <rclc_publisher_init_default>
 8002e1e:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8002e22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <StartDefaultTask+0x218>
 8002e2a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002e2e:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8002e32:	485f      	ldr	r0, [pc, #380]	; (8002fb0 <StartDefaultTask+0x390>)
 8002e34:	f01d feca 	bl	8020bcc <iprintf>
		  &encpublisher,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, OmniEnc),
		  "/enc_val_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002e38:	f00e fdd0 	bl	80119dc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e42:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <StartDefaultTask+0x3ac>)
 8002e48:	f012 fa5c 	bl	8015304 <rclc_subscription_init_default>
 8002e4c:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8002e50:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <StartDefaultTask+0x246>
 8002e58:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e5c:	f240 3102 	movw	r1, #770	; 0x302
 8002e60:	4853      	ldr	r0, [pc, #332]	; (8002fb0 <StartDefaultTask+0x390>)
 8002e62:	f01d feb3 	bl	8020bcc <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, Omni),
		  "/cmd_motor_f7"));

		RCCHECK(rclc_subscription_init_default(
 8002e66:	f00e ffdf 	bl	8011e28 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002e70:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002e74:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <StartDefaultTask+0x3b0>)
 8002e76:	f012 fa45 	bl	8015304 <rclc_subscription_init_default>
 8002e7a:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8002e7e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <StartDefaultTask+0x274>
 8002e86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e8a:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002e8e:	4848      	ldr	r0, [pc, #288]	; (8002fb0 <StartDefaultTask+0x390>)
 8002e90:	f01d fe9c 	bl	8020bcc <iprintf>
		  &manipsub,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(manip_msgs, msg, Cmd),
		  "/manip_cmd_f7"));

		RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 8002e94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002e98:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8002e9c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f011 fe25 	bl	8014af0 <rclc_executor_init>
 8002ea6:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8002eaa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <StartDefaultTask+0x2a0>
 8002eb2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002eb6:	f240 310e 	movw	r1, #782	; 0x30e
 8002eba:	483d      	ldr	r0, [pc, #244]	; (8002fb0 <StartDefaultTask+0x390>)
 8002ebc:	f01d fe86 	bl	8020bcc <iprintf>

  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8002ec0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002ec4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <StartDefaultTask+0x3b4>)
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <StartDefaultTask+0x3b8>)
 8002ece:	4a43      	ldr	r2, [pc, #268]	; (8002fdc <StartDefaultTask+0x3bc>)
 8002ed0:	f011 fec8 	bl	8014c64 <rclc_executor_add_service>
 8002ed4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8002ed8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <StartDefaultTask+0x2ce>
 8002ee0:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002ee4:	f44f 7144 	mov.w	r1, #784	; 0x310
 8002ee8:	4831      	ldr	r0, [pc, #196]	; (8002fb0 <StartDefaultTask+0x390>)
 8002eea:	f01d fe6f 	bl	8020bcc <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8002eee:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8002ef2:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <StartDefaultTask+0x3c0>)
 8002efc:	4a39      	ldr	r2, [pc, #228]	; (8002fe4 <StartDefaultTask+0x3c4>)
 8002efe:	f011 fe73 	bl	8014be8 <rclc_executor_add_subscription>
 8002f02:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8002f06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <StartDefaultTask+0x2fc>
 8002f0e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8002f12:	f240 3111 	movw	r1, #785	; 0x311
 8002f16:	4826      	ldr	r0, [pc, #152]	; (8002fb0 <StartDefaultTask+0x390>)
 8002f18:	f01d fe58 	bl	8020bcc <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));
  	RCCHECK(rclc_executor_add_subscription(
 8002f1c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002f20:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	4b2f      	ldr	r3, [pc, #188]	; (8002fe8 <StartDefaultTask+0x3c8>)
 8002f2a:	4a30      	ldr	r2, [pc, #192]	; (8002fec <StartDefaultTask+0x3cc>)
 8002f2c:	f011 fe5c 	bl	8014be8 <rclc_executor_add_subscription>
 8002f30:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8002f34:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <StartDefaultTask+0x32a>
 8002f3c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002f40:	f44f 7145 	mov.w	r1, #788	; 0x314
 8002f44:	481a      	ldr	r0, [pc, #104]	; (8002fb0 <StartDefaultTask+0x390>)
 8002f46:	f01d fe41 	bl	8020bcc <iprintf>
  	  		  &executor, &manipsub, &msub,
  	  		  &manipsub_callback, ON_NEW_DATA));

  	osDelay(100);
 8002f4a:	2064      	movs	r0, #100	; 0x64
 8002f4c:	f00b f9ec 	bl	800e328 <osDelay>

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 8002f50:	4827      	ldr	r0, [pc, #156]	; (8002ff0 <StartDefaultTask+0x3d0>)
 8002f52:	f014 fb4f 	bl	80175f4 <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 8002f56:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002f5a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f5e:	4a25      	ldr	r2, [pc, #148]	; (8002ff4 <StartDefaultTask+0x3d4>)
 8002f60:	461c      	mov	r4, r3
 8002f62:	4615      	mov	r5, r2
 8002f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	2214      	movs	r2, #20
 8002f72:	4619      	mov	r1, r3
 8002f74:	481e      	ldr	r0, [pc, #120]	; (8002ff0 <StartDefaultTask+0x3d0>)
 8002f76:	f014 fb9b 	bl	80176b0 <rosidl_runtime_c__String__assignn>
    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	e03c      	b.n	8002ff8 <StartDefaultTask+0x3d8>
 8002f7e:	bf00      	nop
 8002f80:	080020a9 	.word	0x080020a9
 8002f84:	08002049 	.word	0x08002049
 8002f88:	08002029 	.word	0x08002029
 8002f8c:	08001ffd 	.word	0x08001ffd
 8002f90:	2000bdd8 	.word	0x2000bdd8
 8002f94:	0800331d 	.word	0x0800331d
 8002f98:	08003361 	.word	0x08003361
 8002f9c:	08003399 	.word	0x08003399
 8002fa0:	08003405 	.word	0x08003405
 8002fa4:	080246e4 	.word	0x080246e4
 8002fa8:	2000099c 	.word	0x2000099c
 8002fac:	200074b0 	.word	0x200074b0
 8002fb0:	0802470c 	.word	0x0802470c
 8002fb4:	08024738 	.word	0x08024738
 8002fb8:	0802473c 	.word	0x0802473c
 8002fbc:	08024744 	.word	0x08024744
 8002fc0:	08024754 	.word	0x08024754
 8002fc4:	08024764 	.word	0x08024764
 8002fc8:	200074b4 	.word	0x200074b4
 8002fcc:	08024770 	.word	0x08024770
 8002fd0:	08024780 	.word	0x08024780
 8002fd4:	08002859 	.word	0x08002859
 8002fd8:	20007270 	.word	0x20007270
 8002fdc:	20007258 	.word	0x20007258
 8002fe0:	080028a5 	.word	0x080028a5
 8002fe4:	20007278 	.word	0x20007278
 8002fe8:	08002961 	.word	0x08002961
 8002fec:	200072a8 	.word	0x200072a8
 8002ff0:	200072e8 	.word	0x200072e8
 8002ff4:	080247a8 	.word	0x080247a8
 8002ff8:	4921      	ldr	r1, [pc, #132]	; (8003080 <StartDefaultTask+0x460>)
 8002ffa:	4822      	ldr	r0, [pc, #136]	; (8003084 <StartDefaultTask+0x464>)
 8002ffc:	f010 ff74 	bl	8013ee8 <rcl_publish>
 8003000:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003004:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <StartDefaultTask+0x3fa>
 800300c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8003010:	f240 311e 	movw	r1, #798	; 0x31e
 8003014:	481c      	ldr	r0, [pc, #112]	; (8003088 <StartDefaultTask+0x468>)
 8003016:	f01d fdd9 	bl	8020bcc <iprintf>

    //ピンの初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800301a:	2200      	movs	r2, #0
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	481b      	ldr	r0, [pc, #108]	; (800308c <StartDefaultTask+0x46c>)
 8003020:	f002 fc30 	bl	8005884 <HAL_GPIO_WritePin>

    //CANの設定を実行
	canSetting();
 8003024:	f7ff f8de 	bl	80021e4 <canSetting>
	mcmdMoter1Setting();
 8003028:	f7ff f906 	bl	8002238 <mcmdMoter1Setting>
	mcmdMoter2Setting();
 800302c:	f7ff f968 	bl	8002300 <mcmdMoter2Setting>
	mcmdMoter3Setting();
 8003030:	f7ff f9ca 	bl	80023c8 <mcmdMoter3Setting>
	mcmdMoter4Setting();
 8003034:	f7ff fa2c 	bl	8002490 <mcmdMoter4Setting>
	mcmdMoter5Setting();
 8003038:	f7ff fa8e 	bl	8002558 <mcmdMoter5Setting>
	mcmdMoter6Setting();
 800303c:	f7ff faf0 	bl	8002620 <mcmdMoter6Setting>
//	mcmdMoter7Setting();
//	mcmdMoter8Setting();
	servo1Setting();
 8003040:	f7ff fb52 	bl	80026e8 <servo1Setting>
	servo2Setting();
 8003044:	f7ff fb7c 	bl	8002740 <servo2Setting>
	airSetting();
 8003048:	f7ff fba6 	bl	8002798 <airSetting>

	printf("All Setting Finished\r\n");
 800304c:	4810      	ldr	r0, [pc, #64]	; (8003090 <StartDefaultTask+0x470>)
 800304e:	f01d fe23 	bl	8020c98 <puts>
	finishCANsetting = true;
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <StartDefaultTask+0x474>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
	osDelay(100);
 8003058:	2064      	movs	r0, #100	; 0x64
 800305a:	f00b f965 	bl	800e328 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800305e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003062:	a305      	add	r3, pc, #20	; (adr r3, 8003078 <StartDefaultTask+0x458>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	4608      	mov	r0, r1
 800306a:	f012 f82b 	bl	80150c4 <rclc_executor_spin_some>
	  //RCSOFTCHECK(rcl_publish(&encpublisher, &enc, NULL));//printfを見たいときはコメントアウト

	  osDelay(10);
 800306e:	200a      	movs	r0, #10
 8003070:	f00b f95a 	bl	800e328 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8003074:	e7f3      	b.n	800305e <StartDefaultTask+0x43e>
 8003076:	bf00      	nop
 8003078:	05f5e100 	.word	0x05f5e100
 800307c:	00000000 	.word	0x00000000
 8003080:	200072e8 	.word	0x200072e8
 8003084:	200074b0 	.word	0x200074b0
 8003088:	080246b8 	.word	0x080246b8
 800308c:	40020400 	.word	0x40020400
 8003090:	08024790 	.word	0x08024790
 8003094:	2000bd18 	.word	0x2000bd18

08003098 <StartSysCheckTask>:
	  air_device.device_num=1;
	  AirCylinder_SendOutput(&air_device, AIR_OFF);
}
/* USER CODE END Header_StartSysCheckTask */
void StartSysCheckTask(void *argument)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSysCheckTask */
  /* Infinite loop */
  for(;;)
  {
	  if(finishCANsetting){
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <StartSysCheckTask+0x34>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <StartSysCheckTask+0x2c>
		  if(!finishCheck){
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <StartSysCheckTask+0x38>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	f083 0301 	eor.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d006      	beq.n	80030c4 <StartSysCheckTask+0x2c>
			  osDelay(1000);//このdelayは必要？
 80030b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ba:	f00b f935 	bl	800e328 <osDelay>
			  //mcmdMotorCecker(&mcmd4M1_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
			  //mcmdMotorCecker(&mcmd4M2_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);
			  //mcmdMotorCecker(&mcmd4M3_struct,MCMD_CTRL_VEL,-2.0f,10000,0.0f);
			  //mcmdMotorCecker(&mcmd4M4_struct,MCMD_CTRL_VEL,-2.0f,5000,0.0f);

			  finishCheck = true;
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <StartSysCheckTask+0x38>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
//	  mcmdEncChecker(&mcmdM2_fb,&mcmd4M2_struct,100);
//	  mcmdEncChecker(&mcmdM3_fb,&mcmd4M3_struct,100);
//	  mcmdEncChecker(&mcmdM4_fb,&mcmd4M4_struct,100);
//	  mcmdEncChecker(&mcmdM5_fb,&mcmd4M5_struct,100);
//	  mcmdEncChecker(&mcmdM6_fb,&mcmd4M6_struct,100);
	  osDelay(10);
 80030c4:	200a      	movs	r0, #10
 80030c6:	f00b f92f 	bl	800e328 <osDelay>
	  if(finishCANsetting){
 80030ca:	e7e9      	b.n	80030a0 <StartSysCheckTask+0x8>
 80030cc:	2000bd18 	.word	0x2000bd18
 80030d0:	2000bd2c 	.word	0x2000bd2c

080030d4 <StartMotorRunTask>:
	MCMD_SetTarget(&mcmd4M4_struct, velLimmiter(cmd_motor[3]));
	//MCMD_SetTarget(&mcmd4M5_struct, velLimmiter(cmd_motor[3]));
	//MCMD_SetTarget(&mcmd4M4_struct, velLimmiter(cmd_motor[3]));
}
void StartMotorRunTask(void *argument)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //motorRun();

    osDelay(10);
 80030dc:	200a      	movs	r0, #10
 80030de:	f00b f923 	bl	800e328 <osDelay>
 80030e2:	e7fb      	b.n	80030dc <StartMotorRunTask+0x8>

080030e4 <StartEncorderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncorderTask */
void StartEncorderTask(void *argument)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
//	  enc.encbackleft = Get_MCMD_Feedback(&(mcmd4M4_struct.device)).value;
//	  enc.enclx = Get_MCMD_Feedback(&(mcmd4M5_struct.device)).value;
//	  enc.encly = 0.0f;
//	  enc.encadditional = Get_MCMD_Feedback(&(mcmd4M6_struct.device)).value;

    osDelay(10);
 80030ec:	200a      	movs	r0, #10
 80030ee:	f00b f91b 	bl	800e328 <osDelay>
 80030f2:	e7fb      	b.n	80030ec <StartEncorderTask+0x8>

080030f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800310a:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <MX_GPIO_Init+0xc0>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a23      	ldr	r2, [pc, #140]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003128:	f043 0310 	orr.w	r3, r3, #16
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <MX_GPIO_Init+0xc0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <MX_GPIO_Init+0xc0>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <MX_GPIO_Init+0xc0>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 8003182:	2200      	movs	r2, #0
 8003184:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8003188:	480b      	ldr	r0, [pc, #44]	; (80031b8 <MX_GPIO_Init+0xc4>)
 800318a:	f002 fb7b 	bl	8005884 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 800318e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8003192:	617b      	str	r3, [r7, #20]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003194:	2301      	movs	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4619      	mov	r1, r3
 80031a6:	4804      	ldr	r0, [pc, #16]	; (80031b8 <MX_GPIO_Init+0xc4>)
 80031a8:	f002 f9c0 	bl	800552c <HAL_GPIO_Init>

}
 80031ac:	bf00      	nop
 80031ae:	3728      	adds	r7, #40	; 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020400 	.word	0x40020400

080031bc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80031c6:	1df9      	adds	r1, r7, #7
 80031c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031cc:	2201      	movs	r2, #1
 80031ce:	4804      	ldr	r0, [pc, #16]	; (80031e0 <__io_putchar+0x24>)
 80031d0:	f005 ffc4 	bl	800915c <HAL_UART_Transmit>
    return ch;
 80031d4:	79fb      	ldrb	r3, [r7, #7]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000bdd8 	.word	0x2000bdd8

080031e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031e8:	f000 fdfb 	bl	8003de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031ec:	f000 f812 	bl	8003214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031f0:	f7ff ff80 	bl	80030f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80031f4:	f7fe fedc 	bl	8001fb0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80031f8:	f000 fcca 	bl	8003b90 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80031fc:	f000 fbd4 	bl	80039a8 <MX_TIM1_Init>
  MX_CAN1_Init();
 8003200:	f7fe fbf0 	bl	80019e4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003204:	f00a ff80 	bl	800e108 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003208:	f7ff faea 	bl	80027e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800320c:	f00a ffb0 	bl	800e170 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003210:	e7fe      	b.n	8003210 <main+0x2c>
	...

08003214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b094      	sub	sp, #80	; 0x50
 8003218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800321a:	f107 031c 	add.w	r3, r7, #28
 800321e:	2234      	movs	r2, #52	; 0x34
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f01d ff7e 	bl	8021124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <SystemClock_Config+0xd8>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <SystemClock_Config+0xd8>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	6413      	str	r3, [r2, #64]	; 0x40
 8003244:	4b29      	ldr	r3, [pc, #164]	; (80032ec <SystemClock_Config+0xd8>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <SystemClock_Config+0xdc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <SystemClock_Config+0xdc>)
 800325a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <SystemClock_Config+0xdc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800326c:	2301      	movs	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003274:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003276:	2302      	movs	r3, #2
 8003278:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800327a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003280:	2304      	movs	r3, #4
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003284:	2360      	movs	r3, #96	; 0x60
 8003286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003288:	2302      	movs	r3, #2
 800328a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800328c:	2304      	movs	r3, #4
 800328e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003290:	2302      	movs	r3, #2
 8003292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003294:	f107 031c 	add.w	r3, r7, #28
 8003298:	4618      	mov	r0, r3
 800329a:	f003 fe2f 	bl	8006efc <HAL_RCC_OscConfig>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80032a4:	f000 f835 	bl	8003312 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032a8:	f003 fdd8 	bl	8006e5c <HAL_PWREx_EnableOverDrive>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80032b2:	f000 f82e 	bl	8003312 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032b6:	230f      	movs	r3, #15
 80032b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032ba:	2302      	movs	r3, #2
 80032bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	2103      	movs	r1, #3
 80032d4:	4618      	mov	r0, r3
 80032d6:	f004 f8bf 	bl	8007458 <HAL_RCC_ClockConfig>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80032e0:	f000 f817 	bl	8003312 <Error_Handler>
  }
}
 80032e4:	bf00      	nop
 80032e6:	3750      	adds	r7, #80	; 0x50
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000

080032f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d101      	bne.n	800330a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003306:	f000 fd79 	bl	8003dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003316:	b672      	cpsid	i
}
 8003318:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800331a:	e7fe      	b.n	800331a <Error_Handler+0x8>

0800331c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <microros_allocate+0x3c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <microros_allocate+0x3c>)
 8003334:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <microros_allocate+0x40>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <microros_allocate+0x40>)
 8003344:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe fbde 	bl	8001b08 <pvPortMallocMicroROS>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	2000bd30 	.word	0x2000bd30
 800335c:	2000bd34 	.word	0x2000bd34

08003360 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fe fcf1 	bl	8001d58 <getBlockSize>
 8003376:	4603      	mov	r3, r0
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <microros_deallocate+0x34>)
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	461a      	mov	r2, r3
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <microros_deallocate+0x34>)
 8003382:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fe fc89 	bl	8001c9c <vPortFreeMicroROS>
  }
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2000bd34 	.word	0x2000bd34

08003398 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80033a4:	4b15      	ldr	r3, [pc, #84]	; (80033fc <microros_reallocate+0x64>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4413      	add	r3, r2
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <microros_reallocate+0x64>)
 80033b2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80033b4:	4b12      	ldr	r3, [pc, #72]	; (8003400 <microros_reallocate+0x68>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	4413      	add	r3, r2
 80033be:	461a      	mov	r2, r3
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <microros_reallocate+0x68>)
 80033c2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80033ca:	68b8      	ldr	r0, [r7, #8]
 80033cc:	f7fe fb9c 	bl	8001b08 <pvPortMallocMicroROS>
 80033d0:	4603      	mov	r3, r0
 80033d2:	e00e      	b.n	80033f2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7fe fcbf 	bl	8001d58 <getBlockSize>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a08      	ldr	r2, [pc, #32]	; (8003400 <microros_reallocate+0x68>)
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <microros_reallocate+0x68>)
 80033e6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7fe fcd2 	bl	8001d94 <pvPortReallocMicroROS>
 80033f0:	4603      	mov	r3, r0
  }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000bd30 	.word	0x2000bd30
 8003400:	2000bd34 	.word	0x2000bd34

08003404 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <microros_zero_allocate+0x48>)
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	461a      	mov	r2, r3
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <microros_zero_allocate+0x48>)
 8003422:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	4a08      	ldr	r2, [pc, #32]	; (8003450 <microros_zero_allocate+0x4c>)
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	4413      	add	r3, r2
 8003432:	461a      	mov	r2, r3
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <microros_zero_allocate+0x4c>)
 8003436:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7fe fcd7 	bl	8001dee <pvPortCallocMicroROS>
 8003440:	4603      	mov	r3, r0
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000bd30 	.word	0x2000bd30
 8003450:	2000bd34 	.word	0x2000bd34
 8003454:	00000000 	.word	0x00000000

08003458 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003458:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800346a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800346e:	a320      	add	r3, pc, #128	; (adr r3, 80034f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f908 	bl	8000688 <__aeabi_ldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003486:	a31a      	add	r3, pc, #104	; (adr r3, 80034f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd f8fc 	bl	8000688 <__aeabi_ldivmod>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	da20      	bge.n	80034de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <UTILS_NanosecondsToTimespec+0x90>)
 80034a2:	fb82 1203 	smull	r1, r2, r2, r3
 80034a6:	1712      	asrs	r2, r2, #28
 80034a8:	17db      	asrs	r3, r3, #31
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	17c8      	asrs	r0, r1, #31
 80034ba:	460c      	mov	r4, r1
 80034bc:	4605      	mov	r5, r0
 80034be:	ebb2 0804 	subs.w	r8, r2, r4
 80034c2:	eb63 0905 	sbc.w	r9, r3, r5
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4906      	ldr	r1, [pc, #24]	; (80034ec <UTILS_NanosecondsToTimespec+0x94>)
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	441a      	add	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]
    }
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034e8:	44b82fa1 	.word	0x44b82fa1
 80034ec:	3b9aca00 	.word	0x3b9aca00
 80034f0:	3b9aca00 	.word	0x3b9aca00
 80034f4:	00000000 	.word	0x00000000

080034f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80034f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034fc:	b08e      	sub	sp, #56	; 0x38
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6278      	str	r0, [r7, #36]	; 0x24
 8003502:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003504:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003508:	2300      	movs	r3, #0
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800351a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800351e:	4618      	mov	r0, r3
 8003520:	f00c fa00 	bl	800f924 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	17da      	asrs	r2, r3, #31
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	61fa      	str	r2, [r7, #28]
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	000b      	movs	r3, r1
 8003538:	2200      	movs	r2, #0
 800353a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	2200      	movs	r2, #0
 8003542:	461c      	mov	r4, r3
 8003544:	4615      	mov	r5, r2
 8003546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800354a:	1911      	adds	r1, r2, r4
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	416b      	adcs	r3, r5
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003556:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800355a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	f04f 0400 	mov.w	r4, #0
 8003566:	f04f 0500 	mov.w	r5, #0
 800356a:	015d      	lsls	r5, r3, #5
 800356c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003570:	0154      	lsls	r4, r2, #5
 8003572:	4622      	mov	r2, r4
 8003574:	462b      	mov	r3, r5
 8003576:	ebb2 0800 	subs.w	r8, r2, r0
 800357a:	eb63 0901 	sbc.w	r9, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800358a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800358e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	eb18 0a00 	adds.w	sl, r8, r0
 800359a:	eb49 0b01 	adc.w	fp, r9, r1
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035b2:	ebb2 040a 	subs.w	r4, r2, sl
 80035b6:	603c      	str	r4, [r7, #0]
 80035b8:	eb63 030b 	sbc.w	r3, r3, fp
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c2:	4623      	mov	r3, r4
 80035c4:	181b      	adds	r3, r3, r0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	462b      	mov	r3, r5
 80035ca:	eb41 0303 	adc.w	r3, r1, r3
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035d6:	f7ff ff3f 	bl	8003458 <UTILS_NanosecondsToTimespec>

    return 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	3738      	adds	r7, #56	; 0x38
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080035e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_MspInit+0x4c>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_MspInit+0x4c>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_MspInit+0x4c>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_MspInit+0x4c>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_MspInit+0x4c>)
 800360c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003610:	6453      	str	r3, [r2, #68]	; 0x44
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_MspInit+0x4c>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	210f      	movs	r1, #15
 8003622:	f06f 0001 	mvn.w	r0, #1
 8003626:	f001 fb41 	bl	8004cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800

08003638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08e      	sub	sp, #56	; 0x38
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_InitTick+0xe4>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	4a33      	ldr	r2, [pc, #204]	; (800371c <HAL_InitTick+0xe4>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6413      	str	r3, [r2, #64]	; 0x40
 8003654:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_InitTick+0xe4>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003660:	f107 0210 	add.w	r2, r7, #16
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f004 f91a 	bl	80078a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800367a:	f004 f8eb 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 800367e:	6378      	str	r0, [r7, #52]	; 0x34
 8003680:	e004      	b.n	800368c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003682:	f004 f8e7 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 8003686:	4603      	mov	r3, r0
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_InitTick+0xe8>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9b      	lsrs	r3, r3, #18
 8003696:	3b01      	subs	r3, #1
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_InitTick+0xec>)
 800369c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_InitTick+0xec>)
 80036a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036a8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80036aa:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_InitTick+0xec>)
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <HAL_InitTick+0xec>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_InitTick+0xec>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_InitTick+0xec>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80036c2:	4818      	ldr	r0, [pc, #96]	; (8003724 <HAL_InitTick+0xec>)
 80036c4:	f004 fd48 	bl	8008158 <HAL_TIM_Base_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80036ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11b      	bne.n	800370e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80036d6:	4813      	ldr	r0, [pc, #76]	; (8003724 <HAL_InitTick+0xec>)
 80036d8:	f004 fda0 	bl	800821c <HAL_TIM_Base_Start_IT>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80036e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d111      	bne.n	800370e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036ea:	201c      	movs	r0, #28
 80036ec:	f001 fafa 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	d808      	bhi.n	8003708 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80036f6:	2200      	movs	r2, #0
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	201c      	movs	r0, #28
 80036fc:	f001 fad6 	bl	8004cac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003700:	4a09      	ldr	r2, [pc, #36]	; (8003728 <HAL_InitTick+0xf0>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e002      	b.n	800370e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800370e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003712:	4618      	mov	r0, r3
 8003714:	3738      	adds	r7, #56	; 0x38
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	431bde83 	.word	0x431bde83
 8003724:	2000bd38 	.word	0x2000bd38
 8003728:	20000008 	.word	0x20000008

0800372c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003730:	e7fe      	b.n	8003730 <NMI_Handler+0x4>

08003732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003736:	e7fe      	b.n	8003736 <HardFault_Handler+0x4>

08003738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800373c:	e7fe      	b.n	800373c <MemManage_Handler+0x4>

0800373e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003742:	e7fe      	b.n	8003742 <BusFault_Handler+0x4>

08003744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003748:	e7fe      	b.n	8003748 <UsageFault_Handler+0x4>

0800374a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800374a:	b480      	push	{r7}
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <DMA1_Stream1_IRQHandler+0x10>)
 800375e:	f001 fc6f 	bl	8005040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2000be60 	.word	0x2000be60

0800376c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <DMA1_Stream3_IRQHandler+0x10>)
 8003772:	f001 fc65 	bl	8005040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000bec0 	.word	0x2000bec0

08003780 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <CAN1_TX_IRQHandler+0x10>)
 8003786:	f000 ffe6 	bl	8004756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20002e0c 	.word	0x20002e0c

08003794 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <CAN1_RX0_IRQHandler+0x10>)
 800379a:	f000 ffdc 	bl	8004756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20002e0c 	.word	0x20002e0c

080037a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <CAN1_RX1_IRQHandler+0x10>)
 80037ae:	f000 ffd2 	bl	8004756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20002e0c 	.word	0x20002e0c

080037bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <TIM2_IRQHandler+0x10>)
 80037c2:	f004 fdfa 	bl	80083ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000bd38 	.word	0x2000bd38

080037d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <USART3_IRQHandler+0x10>)
 80037d6:	f005 fe97 	bl	8009508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	2000bdd8 	.word	0x2000bdd8

080037e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <OTG_FS_IRQHandler+0x10>)
 80037ea:	f002 f9c4 	bl	8005b76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20011d4c 	.word	0x20011d4c

080037f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return 1;
 80037fc:	2301      	movs	r3, #1
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_kill>:

int _kill(int pid, int sig)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003812:	f01d fd1f 	bl	8021254 <__errno>
 8003816:	4603      	mov	r3, r0
 8003818:	2216      	movs	r2, #22
 800381a:	601a      	str	r2, [r3, #0]
  return -1;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_exit>:

void _exit (int status)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003830:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffe7 	bl	8003808 <_kill>
  while (1) {}    /* Make sure we hang here */
 800383a:	e7fe      	b.n	800383a <_exit+0x12>

0800383c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e00a      	b.n	8003864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800384e:	f3af 8000 	nop.w
 8003852:	4601      	mov	r1, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	60ba      	str	r2, [r7, #8]
 800385a:	b2ca      	uxtb	r2, r1
 800385c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3301      	adds	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	dbf0      	blt.n	800384e <_read+0x12>
  }

  return len;
 800386c:	687b      	ldr	r3, [r7, #4]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e009      	b.n	800389c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	60ba      	str	r2, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fc93 	bl	80031bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbf1      	blt.n	8003888 <_write+0x12>
  }
  return len;
 80038a4:	687b      	ldr	r3, [r7, #4]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_close>:

int _close(int file)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038d6:	605a      	str	r2, [r3, #4]
  return 0;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <_isatty>:

int _isatty(int file)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <_sbrk+0x5c>)
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <_sbrk+0x60>)
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <_sbrk+0x64>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <_sbrk+0x64>)
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <_sbrk+0x68>)
 8003938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <_sbrk+0x64>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	429a      	cmp	r2, r3
 8003946:	d207      	bcs.n	8003958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003948:	f01d fc84 	bl	8021254 <__errno>
 800394c:	4603      	mov	r3, r0
 800394e:	220c      	movs	r2, #12
 8003950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003956:	e009      	b.n	800396c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <_sbrk+0x64>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800395e:	4b07      	ldr	r3, [pc, #28]	; (800397c <_sbrk+0x64>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <_sbrk+0x64>)
 8003968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20080000 	.word	0x20080000
 8003978:	00000400 	.word	0x00000400
 800397c:	2000bd88 	.word	0x2000bd88
 8003980:	200170c8 	.word	0x200170c8

08003984 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <SystemInit+0x20>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <SystemInit+0x20>)
 8003990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b096      	sub	sp, #88	; 0x58
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	611a      	str	r2, [r3, #16]
 80039ca:	615a      	str	r2, [r3, #20]
 80039cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	222c      	movs	r2, #44	; 0x2c
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f01d fba5 	bl	8021124 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039da:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <MX_TIM1_Init+0x130>)
 80039dc:	4a3f      	ldr	r2, [pc, #252]	; (8003adc <MX_TIM1_Init+0x134>)
 80039de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80039e0:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <MX_TIM1_Init+0x130>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e6:	4b3c      	ldr	r3, [pc, #240]	; (8003ad8 <MX_TIM1_Init+0x130>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80039ec:	4b3a      	ldr	r3, [pc, #232]	; (8003ad8 <MX_TIM1_Init+0x130>)
 80039ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f4:	4b38      	ldr	r3, [pc, #224]	; (8003ad8 <MX_TIM1_Init+0x130>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039fa:	4b37      	ldr	r3, [pc, #220]	; (8003ad8 <MX_TIM1_Init+0x130>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <MX_TIM1_Init+0x130>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a06:	4834      	ldr	r0, [pc, #208]	; (8003ad8 <MX_TIM1_Init+0x130>)
 8003a08:	f004 fc80 	bl	800830c <HAL_TIM_PWM_Init>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003a12:	f7ff fc7e 	bl	8003312 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a26:	4619      	mov	r1, r3
 8003a28:	482b      	ldr	r0, [pc, #172]	; (8003ad8 <MX_TIM1_Init+0x130>)
 8003a2a:	f005 fa1f 	bl	8008e6c <HAL_TIMEx_MasterConfigSynchronization>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003a34:	f7ff fc6d 	bl	8003312 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a38:	2360      	movs	r3, #96	; 0x60
 8003a3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a44:	2300      	movs	r3, #0
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a50:	2300      	movs	r3, #0
 8003a52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	481e      	ldr	r0, [pc, #120]	; (8003ad8 <MX_TIM1_Init+0x130>)
 8003a5e:	f004 fdcb 	bl	80085f8 <HAL_TIM_PWM_ConfigChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003a68:	f7ff fc53 	bl	8003312 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a70:	2204      	movs	r2, #4
 8003a72:	4619      	mov	r1, r3
 8003a74:	4818      	ldr	r0, [pc, #96]	; (8003ad8 <MX_TIM1_Init+0x130>)
 8003a76:	f004 fdbf 	bl	80085f8 <HAL_TIM_PWM_ConfigChannel>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003a80:	f7ff fc47 	bl	8003312 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ab4:	1d3b      	adds	r3, r7, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4807      	ldr	r0, [pc, #28]	; (8003ad8 <MX_TIM1_Init+0x130>)
 8003aba:	f005 fa65 	bl	8008f88 <HAL_TIMEx_ConfigBreakDeadTime>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8003ac4:	f7ff fc25 	bl	8003312 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ac8:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <MX_TIM1_Init+0x130>)
 8003aca:	f000 f829 	bl	8003b20 <HAL_TIM_MspPostInit>

}
 8003ace:	bf00      	nop
 8003ad0:	3758      	adds	r7, #88	; 0x58
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000bd8c 	.word	0x2000bd8c
 8003adc:	40010000 	.word	0x40010000

08003ae0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_TIM_PWM_MspInit+0x38>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10b      	bne.n	8003b0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_TIM_PWM_MspInit+0x3c>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_TIM_PWM_MspInit+0x3c>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6453      	str	r3, [r2, #68]	; 0x44
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <HAL_TIM_PWM_MspInit+0x3c>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40010000 	.word	0x40010000
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <HAL_TIM_MspPostInit+0x64>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d11c      	bne.n	8003b7c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_TIM_MspPostInit+0x68>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	4a10      	ldr	r2, [pc, #64]	; (8003b88 <HAL_TIM_MspPostInit+0x68>)
 8003b48:	f043 0310 	orr.w	r3, r3, #16
 8003b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <HAL_TIM_MspPostInit+0x68>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003b5a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003b5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b70:	f107 030c 	add.w	r3, r7, #12
 8003b74:	4619      	mov	r1, r3
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <HAL_TIM_MspPostInit+0x6c>)
 8003b78:	f001 fcd8 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b7c:	bf00      	nop
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	40021000 	.word	0x40021000

08003b90 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <MX_USART3_UART_Init+0x5c>)
 8003b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bae:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bb6:	220c      	movs	r2, #12
 8003bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bd2:	4805      	ldr	r0, [pc, #20]	; (8003be8 <MX_USART3_UART_Init+0x58>)
 8003bd4:	f005 fa74 	bl	80090c0 <HAL_UART_Init>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003bde:	f7ff fb98 	bl	8003312 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	2000bdd8 	.word	0x2000bdd8
 8003bec:	40004800 	.word	0x40004800

08003bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b0ae      	sub	sp, #184	; 0xb8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	2290      	movs	r2, #144	; 0x90
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f01d fa87 	bl	8021124 <memset>
  if(uartHandle->Instance==USART3)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a56      	ldr	r2, [pc, #344]	; (8003d74 <HAL_UART_MspInit+0x184>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f040 80a4 	bne.w	8003d6a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	4618      	mov	r0, r3
 8003c32:	f003 fe69 	bl	8007908 <HAL_RCCEx_PeriphCLKConfig>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003c3c:	f7ff fb69 	bl	8003312 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c40:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <HAL_UART_MspInit+0x188>)
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_UART_MspInit+0x188>)
 8003c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4c:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_UART_MspInit+0x188>)
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c58:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_UART_MspInit+0x188>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <HAL_UART_MspInit+0x188>)
 8003c5e:	f043 0308 	orr.w	r3, r3, #8
 8003c62:	6313      	str	r3, [r2, #48]	; 0x30
 8003c64:	4b44      	ldr	r3, [pc, #272]	; (8003d78 <HAL_UART_MspInit+0x188>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c94:	4619      	mov	r1, r3
 8003c96:	4839      	ldr	r0, [pc, #228]	; (8003d7c <HAL_UART_MspInit+0x18c>)
 8003c98:	f001 fc48 	bl	800552c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003c9c:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003c9e:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <HAL_UART_MspInit+0x194>)
 8003ca0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003ca2:	4b37      	ldr	r3, [pc, #220]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003ca4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ca8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003caa:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb0:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cbc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003cd8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ce0:	4827      	ldr	r0, [pc, #156]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003ce2:	f001 f80d 	bl	8004d00 <HAL_DMA_Init>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8003cec:	f7ff fb11 	bl	8003312 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cf4:	675a      	str	r2, [r3, #116]	; 0x74
 8003cf6:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <HAL_UART_MspInit+0x190>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003cfc:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003cfe:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <HAL_UART_MspInit+0x19c>)
 8003d00:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003d02:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d08:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d10:	4b1d      	ldr	r3, [pc, #116]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d24:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003d2a:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d30:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d36:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d38:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003d3e:	4812      	ldr	r0, [pc, #72]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d40:	f000 ffde 	bl	8004d00 <HAL_DMA_Init>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003d4a:	f7ff fae2 	bl	8003312 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d52:	671a      	str	r2, [r3, #112]	; 0x70
 8003d54:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <HAL_UART_MspInit+0x198>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2105      	movs	r1, #5
 8003d5e:	2027      	movs	r0, #39	; 0x27
 8003d60:	f000 ffa4 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d64:	2027      	movs	r0, #39	; 0x27
 8003d66:	f000 ffbd 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	37b8      	adds	r7, #184	; 0xb8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40004800 	.word	0x40004800
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40020c00 	.word	0x40020c00
 8003d80:	2000be60 	.word	0x2000be60
 8003d84:	40026028 	.word	0x40026028
 8003d88:	2000bec0 	.word	0x2000bec0
 8003d8c:	40026058 	.word	0x40026058

08003d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d94:	480d      	ldr	r0, [pc, #52]	; (8003dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d96:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d98:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d9c:	e002      	b.n	8003da4 <LoopCopyDataInit>

08003d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003da2:	3304      	adds	r3, #4

08003da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da8:	d3f9      	bcc.n	8003d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003daa:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dac:	4c0b      	ldr	r4, [pc, #44]	; (8003ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003db0:	e001      	b.n	8003db6 <LoopFillZerobss>

08003db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db4:	3204      	adds	r2, #4

08003db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db8:	d3fb      	bcc.n	8003db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003dba:	f7ff fde3 	bl	8003984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dbe:	f01d fa4f 	bl	8021260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dc2:	f7ff fa0f 	bl	80031e4 <main>
  bx  lr    
 8003dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dd0:	20000b0c 	.word	0x20000b0c
  ldr r2, =_sidata
 8003dd4:	080262d0 	.word	0x080262d0
  ldr r2, =_sbss
 8003dd8:	20000b10 	.word	0x20000b10
  ldr r4, =_ebss
 8003ddc:	200170c8 	.word	0x200170c8

08003de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003de0:	e7fe      	b.n	8003de0 <ADC_IRQHandler>

08003de2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de6:	2003      	movs	r0, #3
 8003de8:	f000 ff55 	bl	8004c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dec:	200f      	movs	r0, #15
 8003dee:	f7ff fc23 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003df2:	f7ff fbf9 	bl	80035e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_IncTick+0x20>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_IncTick+0x24>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_IncTick+0x24>)
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c
 8003e20:	2000bf20 	.word	0x2000bf20

08003e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return uwTick;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_GetTick+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000bf20 	.word	0x2000bf20

08003e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff ffee 	bl	8003e24 <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e54:	d005      	beq.n	8003e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_Delay+0x44>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e62:	bf00      	nop
 8003e64:	f7ff ffde 	bl	8003e24 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d8f7      	bhi.n	8003e64 <HAL_Delay+0x28>
  {
  }
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	2000000c 	.word	0x2000000c

08003e84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0ed      	b.n	8004072 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd fdd4 	bl	8001a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb8:	f7ff ffb4 	bl	8003e24 <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ebe:	e012      	b.n	8003ee6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ec0:	f7ff ffb0 	bl	8003e24 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b0a      	cmp	r3, #10
 8003ecc:	d90b      	bls.n	8003ee6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2205      	movs	r2, #5
 8003ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0c5      	b.n	8004072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0e5      	beq.n	8003ec0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0202 	bic.w	r2, r2, #2
 8003f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f04:	f7ff ff8e 	bl	8003e24 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f0a:	e012      	b.n	8003f32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f0c:	f7ff ff8a 	bl	8003e24 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b0a      	cmp	r3, #10
 8003f18:	d90b      	bls.n	8003f32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2205      	movs	r2, #5
 8003f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e09f      	b.n	8004072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7e1b      	ldrb	r3, [r3, #24]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d108      	bne.n	8003f5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e007      	b.n	8003f6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7e5b      	ldrb	r3, [r3, #25]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d108      	bne.n	8003f84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e007      	b.n	8003f94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	7e9b      	ldrb	r3, [r3, #26]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d108      	bne.n	8003fae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0220 	orr.w	r2, r2, #32
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	e007      	b.n	8003fbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0220 	bic.w	r2, r2, #32
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7edb      	ldrb	r3, [r3, #27]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0210 	bic.w	r2, r2, #16
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e007      	b.n	8003fe8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0210 	orr.w	r2, r2, #16
 8003fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7f1b      	ldrb	r3, [r3, #28]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e007      	b.n	8004012 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0208 	bic.w	r2, r2, #8
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7f5b      	ldrb	r3, [r3, #29]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d108      	bne.n	800402c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0204 	orr.w	r2, r2, #4
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e007      	b.n	800403c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	ea42 0103 	orr.w	r1, r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004092:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d003      	beq.n	80040a2 <HAL_CAN_ConfigFilter+0x26>
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b02      	cmp	r3, #2
 800409e:	f040 80c7 	bne.w	8004230 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a69      	ldr	r2, [pc, #420]	; (800424c <HAL_CAN_ConfigFilter+0x1d0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d001      	beq.n	80040b0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80040ac:	4b68      	ldr	r3, [pc, #416]	; (8004250 <HAL_CAN_ConfigFilter+0x1d4>)
 80040ae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	4a63      	ldr	r2, [pc, #396]	; (8004250 <HAL_CAN_ConfigFilter+0x1d4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d111      	bne.n	80040ec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	431a      	orrs	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2201      	movs	r2, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	43db      	mvns	r3, r3
 8004106:	401a      	ands	r2, r3
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d123      	bne.n	800415e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43db      	mvns	r3, r3
 8004120:	401a      	ands	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004138:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3248      	adds	r2, #72	; 0x48
 800413e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004152:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004154:	6979      	ldr	r1, [r7, #20]
 8004156:	3348      	adds	r3, #72	; 0x48
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	440b      	add	r3, r1
 800415c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d122      	bne.n	80041ac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	431a      	orrs	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004186:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	3248      	adds	r2, #72	; 0x48
 800418c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	3348      	adds	r3, #72	; 0x48
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	440b      	add	r3, r1
 80041aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80041c6:	e007      	b.n	80041d8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80041f2:	e007      	b.n	8004204 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	431a      	orrs	r2, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004222:	f023 0201 	bic.w	r2, r3, #1
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e006      	b.n	800423e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40003400 	.word	0x40003400
 8004250:	40006400 	.word	0x40006400

08004254 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d12e      	bne.n	80042c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004280:	f7ff fdd0 	bl	8003e24 <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004286:	e012      	b.n	80042ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004288:	f7ff fdcc 	bl	8003e24 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b0a      	cmp	r3, #10
 8004294:	d90b      	bls.n	80042ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2205      	movs	r2, #5
 80042a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e012      	b.n	80042d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e006      	b.n	80042d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80042dc:	b480      	push	{r7}
 80042de:	b089      	sub	sp, #36	; 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d003      	beq.n	8004308 <HAL_CAN_AddTxMessage+0x2c>
 8004300:	7ffb      	ldrb	r3, [r7, #31]
 8004302:	2b02      	cmp	r3, #2
 8004304:	f040 80ad 	bne.w	8004462 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8095 	beq.w	8004452 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	0e1b      	lsrs	r3, r3, #24
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004332:	2201      	movs	r2, #1
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	409a      	lsls	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10d      	bne.n	8004360 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	6809      	ldr	r1, [r1, #0]
 8004352:	431a      	orrs	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3318      	adds	r3, #24
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	440b      	add	r3, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e00f      	b.n	8004380 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800436a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004374:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	3318      	adds	r3, #24
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	440b      	add	r3, r1
 800437e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3318      	adds	r3, #24
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	440b      	add	r3, r1
 8004390:	3304      	adds	r3, #4
 8004392:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	7d1b      	ldrb	r3, [r3, #20]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d111      	bne.n	80043c0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3318      	adds	r3, #24
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	6811      	ldr	r1, [r2, #0]
 80043b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3318      	adds	r3, #24
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	440b      	add	r3, r1
 80043bc:	3304      	adds	r3, #4
 80043be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3307      	adds	r3, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	061a      	lsls	r2, r3, #24
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3306      	adds	r3, #6
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3305      	adds	r3, #5
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	4313      	orrs	r3, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	3204      	adds	r2, #4
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	4610      	mov	r0, r2
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	6811      	ldr	r1, [r2, #0]
 80043e8:	ea43 0200 	orr.w	r2, r3, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	440b      	add	r3, r1
 80043f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80043f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3303      	adds	r3, #3
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	061a      	lsls	r2, r3, #24
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3302      	adds	r3, #2
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3301      	adds	r3, #1
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	4313      	orrs	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	4610      	mov	r0, r2
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	6811      	ldr	r1, [r2, #0]
 800441e:	ea43 0200 	orr.w	r2, r3, r0
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	440b      	add	r3, r1
 8004428:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800442c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3318      	adds	r3, #24
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	4413      	add	r3, r2
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6811      	ldr	r1, [r2, #0]
 8004440:	f043 0201 	orr.w	r2, r3, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	3318      	adds	r3, #24
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	440b      	add	r3, r1
 800444c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e00e      	b.n	8004470 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e006      	b.n	8004470 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3724      	adds	r7, #36	; 0x24
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004490:	7afb      	ldrb	r3, [r7, #11]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d002      	beq.n	800449c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11d      	bne.n	80044d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3301      	adds	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80044d8:	68fb      	ldr	r3, [r7, #12]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80044e6:	b480      	push	{r7}
 80044e8:	b087      	sub	sp, #28
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d003      	beq.n	800450a <HAL_CAN_GetRxMessage+0x24>
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b02      	cmp	r3, #2
 8004506:	f040 80f3 	bne.w	80046f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10e      	bne.n	800452e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0e7      	b.n	80046fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0d8      	b.n	80046fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	331b      	adds	r3, #27
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	4413      	add	r3, r2
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0204 	and.w	r2, r3, #4
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	331b      	adds	r3, #27
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	4413      	add	r3, r2
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0d5b      	lsrs	r3, r3, #21
 800457a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e00b      	b.n	800459c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	331b      	adds	r3, #27
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	4413      	add	r3, r2
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	08db      	lsrs	r3, r3, #3
 8004594:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	331b      	adds	r3, #27
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	4413      	add	r3, r2
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0202 	and.w	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	331b      	adds	r3, #27
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	4413      	add	r3, r2
 80045be:	3304      	adds	r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	331b      	adds	r3, #27
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	3304      	adds	r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	331b      	adds	r3, #27
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	4413      	add	r3, r2
 80045ee:	3304      	adds	r3, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0c1b      	lsrs	r3, r3, #16
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	4413      	add	r3, r2
 8004604:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	4413      	add	r3, r2
 800461a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0a1a      	lsrs	r2, r3, #8
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	4413      	add	r3, r2
 8004634:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	0c1a      	lsrs	r2, r3, #16
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	3302      	adds	r3, #2
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	4413      	add	r3, r2
 800464e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0e1a      	lsrs	r2, r3, #24
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3303      	adds	r3, #3
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	4413      	add	r3, r2
 8004668:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	3304      	adds	r3, #4
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4413      	add	r3, r2
 8004680:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	0a1a      	lsrs	r2, r3, #8
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	3305      	adds	r3, #5
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	4413      	add	r3, r2
 800469a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0c1a      	lsrs	r2, r3, #16
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	3306      	adds	r3, #6
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	0e1a      	lsrs	r2, r3, #24
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	3307      	adds	r3, #7
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0220 	orr.w	r2, r2, #32
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	e007      	b.n	80046ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0220 	orr.w	r2, r2, #32
 80046ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e006      	b.n	80046fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800471a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d002      	beq.n	8004728 <HAL_CAN_ActivateNotification+0x1e>
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d109      	bne.n	800473c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6959      	ldr	r1, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e006      	b.n	800474a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b08a      	sub	sp, #40	; 0x28
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d07c      	beq.n	8004896 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d023      	beq.n	80047ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2201      	movs	r2, #1
 80047ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fd fcc9 	bl	8002150 <HAL_CAN_TxMailbox0CompleteCallback>
 80047be:	e016      	b.n	80047ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	e00c      	b.n	80047ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	e002      	b.n	80047ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fd fcbb 	bl	8002164 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d024      	beq.n	8004842 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004800:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fd fcb3 	bl	8002178 <HAL_CAN_TxMailbox1CompleteCallback>
 8004812:	e016      	b.n	8004842 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	e00c      	b.n	8004842 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e002      	b.n	8004842 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fd fca5 	bl	800218c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d024      	beq.n	8004896 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004854:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fd fc9d 	bl	80021a0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004866:	e016      	b.n	8004896 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	e00c      	b.n	8004896 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	e002      	b.n	8004896 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fd fc8f 	bl	80021b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00c      	beq.n	80048ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2210      	movs	r2, #16
 80048b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d006      	beq.n	80048dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2208      	movs	r2, #8
 80048d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8f4 	bl	8004ac4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fd fc67 	bl	80021c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00c      	beq.n	800491e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004914:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2208      	movs	r2, #8
 8004938:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8d6 	bl	8004aec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f8bd 	bl	8004ad8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8c0 	bl	8004b00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2208      	movs	r2, #8
 800499a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f8b9 	bl	8004b14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d07b      	beq.n	8004aa4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d072      	beq.n	8004a9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d043      	beq.n	8004a9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d03e      	beq.n	8004a9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a24:	2b60      	cmp	r3, #96	; 0x60
 8004a26:	d02b      	beq.n	8004a80 <HAL_CAN_IRQHandler+0x32a>
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d82e      	bhi.n	8004a8a <HAL_CAN_IRQHandler+0x334>
 8004a2c:	2b50      	cmp	r3, #80	; 0x50
 8004a2e:	d022      	beq.n	8004a76 <HAL_CAN_IRQHandler+0x320>
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d82a      	bhi.n	8004a8a <HAL_CAN_IRQHandler+0x334>
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d019      	beq.n	8004a6c <HAL_CAN_IRQHandler+0x316>
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d826      	bhi.n	8004a8a <HAL_CAN_IRQHandler+0x334>
 8004a3c:	2b30      	cmp	r3, #48	; 0x30
 8004a3e:	d010      	beq.n	8004a62 <HAL_CAN_IRQHandler+0x30c>
 8004a40:	2b30      	cmp	r3, #48	; 0x30
 8004a42:	d822      	bhi.n	8004a8a <HAL_CAN_IRQHandler+0x334>
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d002      	beq.n	8004a4e <HAL_CAN_IRQHandler+0x2f8>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d005      	beq.n	8004a58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a4c:	e01d      	b.n	8004a8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	f043 0308 	orr.w	r3, r3, #8
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a56:	e019      	b.n	8004a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f043 0310 	orr.w	r3, r3, #16
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a60:	e014      	b.n	8004a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	f043 0320 	orr.w	r3, r3, #32
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a6a:	e00f      	b.n	8004a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a74:	e00a      	b.n	8004a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a7e:	e005      	b.n	8004a8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a88:	e000      	b.n	8004a8c <HAL_CAN_IRQHandler+0x336>
            break;
 8004a8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f836 	bl	8004b28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004abc:	bf00      	nop
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <__NVIC_SetPriorityGrouping+0x40>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b64:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b6a:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <__NVIC_SetPriorityGrouping+0x40>)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	60d3      	str	r3, [r2, #12]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000ed00 	.word	0xe000ed00
 8004b80:	05fa0000 	.word	0x05fa0000

08004b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__NVIC_GetPriorityGrouping+0x18>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	f003 0307 	and.w	r3, r3, #7
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db0b      	blt.n	8004bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	4907      	ldr	r1, [pc, #28]	; (8004bd8 <__NVIC_EnableIRQ+0x38>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e100 	.word	0xe000e100

08004bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db0a      	blt.n	8004c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <__NVIC_SetPriority+0x4c>)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c04:	e00a      	b.n	8004c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4908      	ldr	r1, [pc, #32]	; (8004c2c <__NVIC_SetPriority+0x50>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3b04      	subs	r3, #4
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	440b      	add	r3, r1
 8004c1a:	761a      	strb	r2, [r3, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf28      	it	cs
 8004c4e:	2304      	movcs	r3, #4
 8004c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d902      	bls.n	8004c60 <NVIC_EncodePriority+0x30>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3b03      	subs	r3, #3
 8004c5e:	e000      	b.n	8004c62 <NVIC_EncodePriority+0x32>
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	401a      	ands	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	43d9      	mvns	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c88:	4313      	orrs	r3, r2
         );
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff4c 	bl	8004b3c <__NVIC_SetPriorityGrouping>
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cbe:	f7ff ff61 	bl	8004b84 <__NVIC_GetPriorityGrouping>
 8004cc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	6978      	ldr	r0, [r7, #20]
 8004cca:	f7ff ffb1 	bl	8004c30 <NVIC_EncodePriority>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff80 	bl	8004bdc <__NVIC_SetPriority>
}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ff54 	bl	8004ba0 <__NVIC_EnableIRQ>
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d0c:	f7ff f88a 	bl	8003e24 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e099      	b.n	8004e50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d3c:	e00f      	b.n	8004d5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d3e:	f7ff f871 	bl	8003e24 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d908      	bls.n	8004d5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e078      	b.n	8004e50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e8      	bne.n	8004d3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <HAL_DMA_Init+0x158>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d107      	bne.n	8004dc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d117      	bne.n	8004e22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00e      	beq.n	8004e22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fb15 	bl	8005434 <DMA_CheckFifoParam>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e016      	b.n	8004e50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 facc 	bl	80053c8 <DMA_CalcBaseAndBitshift>
 8004e30:	4603      	mov	r3, r0
 8004e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	223f      	movs	r2, #63	; 0x3f
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	e010803f 	.word	0xe010803f

08004e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_DMA_Start_IT+0x26>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e048      	b.n	8004f14 <HAL_DMA_Start_IT+0xb8>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d137      	bne.n	8004f06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fa5e 	bl	800536c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	223f      	movs	r2, #63	; 0x3f
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0216 	orr.w	r2, r2, #22
 8004eca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eda:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0208 	orr.w	r2, r2, #8
 8004ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e005      	b.n	8004f12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f2a:	f7fe ff7b 	bl	8003e24 <HAL_GetTick>
 8004f2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d008      	beq.n	8004f4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e052      	b.n	8004ff4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0216 	bic.w	r2, r2, #22
 8004f5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <HAL_DMA_Abort+0x62>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0208 	bic.w	r2, r2, #8
 8004f8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f9e:	e013      	b.n	8004fc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fa0:	f7fe ff40 	bl	8003e24 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d90c      	bls.n	8004fc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e015      	b.n	8004ff4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e4      	bne.n	8004fa0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	223f      	movs	r2, #63	; 0x3f
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d004      	beq.n	800501a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e00c      	b.n	8005034 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2205      	movs	r2, #5
 800501e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800504c:	4b8e      	ldr	r3, [pc, #568]	; (8005288 <HAL_DMA_IRQHandler+0x248>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a8e      	ldr	r2, [pc, #568]	; (800528c <HAL_DMA_IRQHandler+0x24c>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	0a9b      	lsrs	r3, r3, #10
 8005058:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506a:	2208      	movs	r2, #8
 800506c:	409a      	lsls	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01a      	beq.n	80050ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0204 	bic.w	r2, r2, #4
 8005092:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005098:	2208      	movs	r2, #8
 800509a:	409a      	lsls	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	f043 0201 	orr.w	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	2201      	movs	r2, #1
 80050b2:	409a      	lsls	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4013      	ands	r3, r2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ce:	2201      	movs	r2, #1
 80050d0:	409a      	lsls	r2, r3
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050da:	f043 0202 	orr.w	r2, r3, #2
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	2204      	movs	r2, #4
 80050e8:	409a      	lsls	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d012      	beq.n	8005118 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005104:	2204      	movs	r2, #4
 8005106:	409a      	lsls	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f043 0204 	orr.w	r2, r3, #4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2210      	movs	r2, #16
 800511e:	409a      	lsls	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d043      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d03c      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513a:	2210      	movs	r2, #16
 800513c:	409a      	lsls	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d018      	beq.n	8005182 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d108      	bne.n	8005170 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d024      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	e01f      	b.n	80051b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01b      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
 8005180:	e016      	b.n	80051b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d107      	bne.n	80051a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0208 	bic.w	r2, r2, #8
 800519e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	2220      	movs	r2, #32
 80051b6:	409a      	lsls	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 808f 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8087 	beq.w	80052e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d6:	2220      	movs	r2, #32
 80051d8:	409a      	lsls	r2, r3
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d136      	bne.n	8005258 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0216 	bic.w	r2, r2, #22
 80051f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005208:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <HAL_DMA_IRQHandler+0x1da>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0208 	bic.w	r2, r2, #8
 8005228:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	223f      	movs	r2, #63	; 0x3f
 8005230:	409a      	lsls	r2, r3
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524a:	2b00      	cmp	r3, #0
 800524c:	d07e      	beq.n	800534c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
        }
        return;
 8005256:	e079      	b.n	800534c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01d      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10d      	bne.n	8005290 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	2b00      	cmp	r3, #0
 800527a:	d031      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
 8005284:	e02c      	b.n	80052e0 <HAL_DMA_IRQHandler+0x2a0>
 8005286:	bf00      	nop
 8005288:	20000004 	.word	0x20000004
 800528c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d023      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
 80052a0:	e01e      	b.n	80052e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10f      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0210 	bic.w	r2, r2, #16
 80052be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d032      	beq.n	800534e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d022      	beq.n	800533a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2205      	movs	r2, #5
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3301      	adds	r3, #1
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	429a      	cmp	r2, r3
 8005316:	d307      	bcc.n	8005328 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f2      	bne.n	800530c <HAL_DMA_IRQHandler+0x2cc>
 8005326:	e000      	b.n	800532a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005328:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
 800534a:	e000      	b.n	800534e <HAL_DMA_IRQHandler+0x30e>
        return;
 800534c:	bf00      	nop
    }
  }
}
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d108      	bne.n	80053ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053aa:	e007      	b.n	80053bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	3b10      	subs	r3, #16
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <DMA_CalcBaseAndBitshift+0x60>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053e2:	4a12      	ldr	r2, [pc, #72]	; (800542c <DMA_CalcBaseAndBitshift+0x64>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d908      	bls.n	8005408 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <DMA_CalcBaseAndBitshift+0x68>)
 80053fe:	4013      	ands	r3, r2
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	659a      	str	r2, [r3, #88]	; 0x58
 8005406:	e006      	b.n	8005416 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <DMA_CalcBaseAndBitshift+0x68>)
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	aaaaaaab 	.word	0xaaaaaaab
 800542c:	08024938 	.word	0x08024938
 8005430:	fffffc00 	.word	0xfffffc00

08005434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11f      	bne.n	800548e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d856      	bhi.n	8005502 <DMA_CheckFifoParam+0xce>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <DMA_CheckFifoParam+0x28>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	0800546d 	.word	0x0800546d
 8005460:	0800547f 	.word	0x0800547f
 8005464:	0800546d 	.word	0x0800546d
 8005468:	08005503 	.word	0x08005503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d046      	beq.n	8005506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800547c:	e043      	b.n	8005506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005486:	d140      	bne.n	800550a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800548c:	e03d      	b.n	800550a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	d121      	bne.n	80054dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d837      	bhi.n	800550e <DMA_CheckFifoParam+0xda>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <DMA_CheckFifoParam+0x70>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	080054bb 	.word	0x080054bb
 80054ac:	080054b5 	.word	0x080054b5
 80054b0:	080054cd 	.word	0x080054cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e030      	b.n	800551c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d025      	beq.n	8005512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ca:	e022      	b.n	8005512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054d4:	d11f      	bne.n	8005516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054da:	e01c      	b.n	8005516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d903      	bls.n	80054ea <DMA_CheckFifoParam+0xb6>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d003      	beq.n	80054f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054e8:	e018      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      break;
 80054ee:	e015      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e00b      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;
 8005502:	bf00      	nop
 8005504:	e00a      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 8005506:	bf00      	nop
 8005508:	e008      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 800550a:	bf00      	nop
 800550c:	e006      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 800550e:	bf00      	nop
 8005510:	e004      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;   
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <DMA_CheckFifoParam+0xe8>
      break;
 800551a:	bf00      	nop
    }
  } 
  
  return status; 
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop

0800552c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800553e:	2300      	movs	r3, #0
 8005540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e175      	b.n	8005838 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800554c:	2201      	movs	r2, #1
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	429a      	cmp	r2, r3
 8005566:	f040 8164 	bne.w	8005832 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b01      	cmp	r3, #1
 8005574:	d005      	beq.n	8005582 <HAL_GPIO_Init+0x56>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d130      	bne.n	80055e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	2203      	movs	r2, #3
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055b8:	2201      	movs	r2, #1
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	43db      	mvns	r3, r3
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	4013      	ands	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 0201 	and.w	r2, r3, #1
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4313      	orrs	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d017      	beq.n	8005620 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2203      	movs	r2, #3
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4313      	orrs	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d123      	bne.n	8005674 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	08da      	lsrs	r2, r3, #3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3208      	adds	r2, #8
 8005634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	220f      	movs	r2, #15
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4313      	orrs	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	08da      	lsrs	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3208      	adds	r2, #8
 800566e:	69b9      	ldr	r1, [r7, #24]
 8005670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	2203      	movs	r2, #3
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f003 0203 	and.w	r2, r3, #3
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80be 	beq.w	8005832 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b6:	4b66      	ldr	r3, [pc, #408]	; (8005850 <HAL_GPIO_Init+0x324>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	4a65      	ldr	r2, [pc, #404]	; (8005850 <HAL_GPIO_Init+0x324>)
 80056bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056c0:	6453      	str	r3, [r2, #68]	; 0x44
 80056c2:	4b63      	ldr	r3, [pc, #396]	; (8005850 <HAL_GPIO_Init+0x324>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056ce:	4a61      	ldr	r2, [pc, #388]	; (8005854 <HAL_GPIO_Init+0x328>)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	220f      	movs	r2, #15
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a58      	ldr	r2, [pc, #352]	; (8005858 <HAL_GPIO_Init+0x32c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d037      	beq.n	800576a <HAL_GPIO_Init+0x23e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a57      	ldr	r2, [pc, #348]	; (800585c <HAL_GPIO_Init+0x330>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_GPIO_Init+0x23a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a56      	ldr	r2, [pc, #344]	; (8005860 <HAL_GPIO_Init+0x334>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d02b      	beq.n	8005762 <HAL_GPIO_Init+0x236>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a55      	ldr	r2, [pc, #340]	; (8005864 <HAL_GPIO_Init+0x338>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d025      	beq.n	800575e <HAL_GPIO_Init+0x232>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a54      	ldr	r2, [pc, #336]	; (8005868 <HAL_GPIO_Init+0x33c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01f      	beq.n	800575a <HAL_GPIO_Init+0x22e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a53      	ldr	r2, [pc, #332]	; (800586c <HAL_GPIO_Init+0x340>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d019      	beq.n	8005756 <HAL_GPIO_Init+0x22a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a52      	ldr	r2, [pc, #328]	; (8005870 <HAL_GPIO_Init+0x344>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_GPIO_Init+0x226>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a51      	ldr	r2, [pc, #324]	; (8005874 <HAL_GPIO_Init+0x348>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00d      	beq.n	800574e <HAL_GPIO_Init+0x222>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a50      	ldr	r2, [pc, #320]	; (8005878 <HAL_GPIO_Init+0x34c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <HAL_GPIO_Init+0x21e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a4f      	ldr	r2, [pc, #316]	; (800587c <HAL_GPIO_Init+0x350>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_GPIO_Init+0x21a>
 8005742:	2309      	movs	r3, #9
 8005744:	e012      	b.n	800576c <HAL_GPIO_Init+0x240>
 8005746:	230a      	movs	r3, #10
 8005748:	e010      	b.n	800576c <HAL_GPIO_Init+0x240>
 800574a:	2308      	movs	r3, #8
 800574c:	e00e      	b.n	800576c <HAL_GPIO_Init+0x240>
 800574e:	2307      	movs	r3, #7
 8005750:	e00c      	b.n	800576c <HAL_GPIO_Init+0x240>
 8005752:	2306      	movs	r3, #6
 8005754:	e00a      	b.n	800576c <HAL_GPIO_Init+0x240>
 8005756:	2305      	movs	r3, #5
 8005758:	e008      	b.n	800576c <HAL_GPIO_Init+0x240>
 800575a:	2304      	movs	r3, #4
 800575c:	e006      	b.n	800576c <HAL_GPIO_Init+0x240>
 800575e:	2303      	movs	r3, #3
 8005760:	e004      	b.n	800576c <HAL_GPIO_Init+0x240>
 8005762:	2302      	movs	r3, #2
 8005764:	e002      	b.n	800576c <HAL_GPIO_Init+0x240>
 8005766:	2301      	movs	r3, #1
 8005768:	e000      	b.n	800576c <HAL_GPIO_Init+0x240>
 800576a:	2300      	movs	r3, #0
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	f002 0203 	and.w	r2, r2, #3
 8005772:	0092      	lsls	r2, r2, #2
 8005774:	4093      	lsls	r3, r2
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800577c:	4935      	ldr	r1, [pc, #212]	; (8005854 <HAL_GPIO_Init+0x328>)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	3302      	adds	r3, #2
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800578a:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <HAL_GPIO_Init+0x354>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057ae:	4a34      	ldr	r2, [pc, #208]	; (8005880 <HAL_GPIO_Init+0x354>)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057b4:	4b32      	ldr	r3, [pc, #200]	; (8005880 <HAL_GPIO_Init+0x354>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057d8:	4a29      	ldr	r2, [pc, #164]	; (8005880 <HAL_GPIO_Init+0x354>)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057de:	4b28      	ldr	r3, [pc, #160]	; (8005880 <HAL_GPIO_Init+0x354>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005802:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <HAL_GPIO_Init+0x354>)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005808:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <HAL_GPIO_Init+0x354>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	43db      	mvns	r3, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4013      	ands	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800582c:	4a14      	ldr	r2, [pc, #80]	; (8005880 <HAL_GPIO_Init+0x354>)
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3301      	adds	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b0f      	cmp	r3, #15
 800583c:	f67f ae86 	bls.w	800554c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	3724      	adds	r7, #36	; 0x24
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40023800 	.word	0x40023800
 8005854:	40013800 	.word	0x40013800
 8005858:	40020000 	.word	0x40020000
 800585c:	40020400 	.word	0x40020400
 8005860:	40020800 	.word	0x40020800
 8005864:	40020c00 	.word	0x40020c00
 8005868:	40021000 	.word	0x40021000
 800586c:	40021400 	.word	0x40021400
 8005870:	40021800 	.word	0x40021800
 8005874:	40021c00 	.word	0x40021c00
 8005878:	40022000 	.word	0x40022000
 800587c:	40022400 	.word	0x40022400
 8005880:	40013c00 	.word	0x40013c00

08005884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
 8005890:	4613      	mov	r3, r2
 8005892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005894:	787b      	ldrb	r3, [r7, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800589a:	887a      	ldrh	r2, [r7, #2]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058a0:	e003      	b.n	80058aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058a2:	887b      	ldrh	r3, [r7, #2]
 80058a4:	041a      	lsls	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	619a      	str	r2, [r3, #24]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4013      	ands	r3, r2
 80058ce:	041a      	lsls	r2, r3, #16
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	43d9      	mvns	r1, r3
 80058d4:	887b      	ldrh	r3, [r7, #2]
 80058d6:	400b      	ands	r3, r1
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	619a      	str	r2, [r3, #24]
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ec:	b08f      	sub	sp, #60	; 0x3c
 80058ee:	af0a      	add	r7, sp, #40	; 0x28
 80058f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e116      	b.n	8005b2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f00b fbda 	bl	80110d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2203      	movs	r2, #3
 8005920:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f005 f8ef 	bl	800ab1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	687e      	ldr	r6, [r7, #4]
 8005948:	466d      	mov	r5, sp
 800594a:	f106 0410 	add.w	r4, r6, #16
 800594e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800595a:	e885 0003 	stmia.w	r5, {r0, r1}
 800595e:	1d33      	adds	r3, r6, #4
 8005960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005962:	6838      	ldr	r0, [r7, #0]
 8005964:	f004 ffd0 	bl	800a908 <USB_CoreInit>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0d7      	b.n	8005b2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f005 f8dd 	bl	800ab40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e04a      	b.n	8005a22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800598c:	7bfa      	ldrb	r2, [r7, #15]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	333d      	adds	r3, #61	; 0x3d
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059a0:	7bfa      	ldrb	r2, [r7, #15]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	333c      	adds	r3, #60	; 0x3c
 80059b0:	7bfa      	ldrb	r2, [r7, #15]
 80059b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059b4:	7bfa      	ldrb	r2, [r7, #15]
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	b298      	uxth	r0, r3
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	3344      	adds	r3, #68	; 0x44
 80059c8:	4602      	mov	r2, r0
 80059ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	3340      	adds	r3, #64	; 0x40
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059e0:	7bfa      	ldrb	r2, [r7, #15]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	3348      	adds	r3, #72	; 0x48
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059f4:	7bfa      	ldrb	r2, [r7, #15]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	334c      	adds	r3, #76	; 0x4c
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	3354      	adds	r3, #84	; 0x54
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3af      	bcc.n	800598c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e044      	b.n	8005abc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a48:	7bfa      	ldrb	r2, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3b5      	bcc.n	8005a32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	687e      	ldr	r6, [r7, #4]
 8005ace:	466d      	mov	r5, sp
 8005ad0:	f106 0410 	add.w	r4, r6, #16
 8005ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005adc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ae0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ae4:	1d33      	adds	r3, r6, #4
 8005ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ae8:	6838      	ldr	r0, [r7, #0]
 8005aea:	f005 f875 	bl	800abd8 <USB_DevInit>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e014      	b.n	8005b2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d102      	bne.n	8005b1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f97b 	bl	8006e14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f006 f9c3 	bl	800beae <USB_DevDisconnect>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_PCD_Start+0x16>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e012      	b.n	8005b6e <HAL_PCD_Start+0x3c>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f004 ffd1 	bl	800aafc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f006 f984 	bl	800be6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b76:	b590      	push	{r4, r7, lr}
 8005b78:	b08d      	sub	sp, #52	; 0x34
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f006 fa42 	bl	800c016 <USB_GetMode>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 84b7 	bne.w	8006508 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f006 f9a6 	bl	800bef0 <USB_ReadInterrupts>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 84ad 	beq.w	8006506 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f006 f993 	bl	800bef0 <USB_ReadInterrupts>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d107      	bne.n	8005be4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f002 0202 	and.w	r2, r2, #2
 8005be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f006 f981 	bl	800bef0 <USB_ReadInterrupts>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d161      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0210 	bic.w	r2, r2, #16
 8005c06:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f003 020f 	and.w	r2, r3, #15
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	0c5b      	lsrs	r3, r3, #17
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d124      	bne.n	8005c7e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d035      	beq.n	8005cac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	6a38      	ldr	r0, [r7, #32]
 8005c54:	f005 ffb8 	bl	800bbc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c64:	441a      	add	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6a1a      	ldr	r2, [r3, #32]
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c76:	441a      	add	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	621a      	str	r2, [r3, #32]
 8005c7c:	e016      	b.n	8005cac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	0c5b      	lsrs	r3, r3, #17
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	2b06      	cmp	r3, #6
 8005c88:	d110      	bne.n	8005cac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c90:	2208      	movs	r2, #8
 8005c92:	4619      	mov	r1, r3
 8005c94:	6a38      	ldr	r0, [r7, #32]
 8005c96:	f005 ff97 	bl	800bbc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6a1a      	ldr	r2, [r3, #32]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca6:	441a      	add	r2, r3
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0210 	orr.w	r2, r2, #16
 8005cba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f006 f915 	bl	800bef0 <USB_ReadInterrupts>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ccc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cd0:	f040 80a7 	bne.w	8005e22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f006 f91a 	bl	800bf16 <USB_ReadDevAllOutEpInterrupt>
 8005ce2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ce4:	e099      	b.n	8005e1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 808e 	beq.w	8005e0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f006 f93e 	bl	800bf7e <USB_ReadDevOutEPInterrupt>
 8005d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00c      	beq.n	8005d28 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fef0 	bl	8006b08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2308      	movs	r3, #8
 8005d42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 ffc6 	bl	8006cd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	461a      	mov	r2, r3
 8005d64:	2310      	movs	r3, #16
 8005d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d030      	beq.n	8005dd4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d109      	bne.n	8005d92 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d90:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	4413      	add	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	4413      	add	r3, r2
 8005da4:	3304      	adds	r3, #4
 8005da6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	78db      	ldrb	r3, [r3, #3]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d108      	bne.n	8005dc2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2200      	movs	r2, #0
 8005db4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f00b faab 	bl	8011318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	461a      	mov	r2, r3
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	461a      	mov	r2, r3
 8005dec:	2320      	movs	r3, #32
 8005dee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d009      	beq.n	8005e0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	461a      	mov	r2, r3
 8005e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	3301      	adds	r3, #1
 8005e12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f47f af62 	bne.w	8005ce6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f006 f862 	bl	800bef0 <USB_ReadInterrupts>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e36:	f040 80db 	bne.w	8005ff0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f006 f883 	bl	800bf4a <USB_ReadDevAllInEpInterrupt>
 8005e44:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005e4a:	e0cd      	b.n	8005fe8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80c2 	beq.w	8005fdc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f006 f8a9 	bl	800bfba <USB_ReadDevInEPInterrupt>
 8005e68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d057      	beq.n	8005f24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	69f9      	ldr	r1, [r7, #28]
 8005e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e94:	4013      	ands	r3, r2
 8005e96:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d132      	bne.n	8005f18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	334c      	adds	r3, #76	; 0x4c
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	4613      	mov	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4403      	add	r3, r0
 8005ed2:	3348      	adds	r3, #72	; 0x48
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4419      	add	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4403      	add	r3, r0
 8005ee6:	334c      	adds	r3, #76	; 0x4c
 8005ee8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d113      	bne.n	8005f18 <HAL_PCD_IRQHandler+0x3a2>
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	3354      	adds	r3, #84	; 0x54
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d108      	bne.n	8005f18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f10:	461a      	mov	r2, r3
 8005f12:	2101      	movs	r1, #1
 8005f14:	f006 f8b2 	bl	800c07c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f00b f975 	bl	801120e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d008      	beq.n	8005f5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	461a      	mov	r2, r3
 8005f58:	2310      	movs	r3, #16
 8005f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	461a      	mov	r2, r3
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d023      	beq.n	8005fca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f84:	6a38      	ldr	r0, [r7, #32]
 8005f86:	f004 ff85 	bl	800ae94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	3338      	adds	r3, #56	; 0x38
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	78db      	ldrb	r3, [r3, #3]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d108      	bne.n	8005fb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f00b f9c2 	bl	801133c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fd08 	bl	80069ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	3301      	adds	r3, #1
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	085b      	lsrs	r3, r3, #1
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f47f af2e 	bne.w	8005e4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f005 ff7b 	bl	800bef0 <USB_ReadInterrupts>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006004:	d122      	bne.n	800604c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006020:	2b01      	cmp	r3, #1
 8006022:	d108      	bne.n	8006036 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800602c:	2100      	movs	r1, #0
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f00b fb3c 	bl	80116ac <HAL_PCDEx_LPM_Callback>
 8006034:	e002      	b.n	800603c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f00b f960 	bl	80112fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695a      	ldr	r2, [r3, #20]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800604a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f005 ff4d 	bl	800bef0 <USB_ReadInterrupts>
 8006056:	4603      	mov	r3, r0
 8006058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006060:	d112      	bne.n	8006088 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d102      	bne.n	8006078 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f00b f91c 	bl	80112b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006086:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f005 ff2f 	bl	800bef0 <USB_ReadInterrupts>
 8006092:	4603      	mov	r3, r0
 8006094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800609c:	d121      	bne.n	80060e2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80060ac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d111      	bne.n	80060dc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	f003 020f 	and.w	r2, r3, #15
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060d2:	2101      	movs	r1, #1
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f00b fae9 	bl	80116ac <HAL_PCDEx_LPM_Callback>
 80060da:	e002      	b.n	80060e2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f00b f8e7 	bl	80112b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f005 ff02 	bl	800bef0 <USB_ReadInterrupts>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	f040 80b7 	bne.w	8006268 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2110      	movs	r1, #16
 8006114:	4618      	mov	r0, r3
 8006116:	f004 febd 	bl	800ae94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800611a:	2300      	movs	r3, #0
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800611e:	e046      	b.n	80061ae <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	461a      	mov	r2, r3
 800612e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006132:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	461a      	mov	r2, r3
 8006162:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006166:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006182:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	3301      	adds	r3, #1
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d3b3      	bcc.n	8006120 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80061ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d016      	beq.n	8006202 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e4:	f043 030b 	orr.w	r3, r3, #11
 80061e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fa:	f043 030b 	orr.w	r3, r3, #11
 80061fe:	6453      	str	r3, [r2, #68]	; 0x44
 8006200:	e015      	b.n	800622e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006210:	4619      	mov	r1, r3
 8006212:	f242 032b 	movw	r3, #8235	; 0x202b
 8006216:	4313      	orrs	r3, r2
 8006218:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006228:	f043 030b 	orr.w	r3, r3, #11
 800622c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800623c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006240:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006252:	461a      	mov	r2, r3
 8006254:	f005 ff12 	bl	800c07c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f005 fe3f 	bl	800bef0 <USB_ReadInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627c:	d124      	bne.n	80062c8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f005 fed6 	bl	800c034 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f004 fe7e 	bl	800af8e <USB_GetDevSpeed>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681c      	ldr	r4, [r3, #0]
 800629e:	f001 facd 	bl	800783c <HAL_RCC_GetHCLKFreq>
 80062a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	4620      	mov	r0, r4
 80062ae:	f004 fb83 	bl	800a9b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f00a ffd3 	bl	801125e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80062c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f005 fe0f 	bl	800bef0 <USB_ReadInterrupts>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d10a      	bne.n	80062f2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f00a ffb0 	bl	8011242 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f002 0208 	and.w	r2, r2, #8
 80062f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f005 fdfa 	bl	800bef0 <USB_ReadInterrupts>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d122      	bne.n	800634c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006312:	2301      	movs	r3, #1
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
 8006316:	e014      	b.n	8006342 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d105      	bne.n	800633c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	b2db      	uxtb	r3, r3
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fb27 	bl	800698a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	3301      	adds	r3, #1
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006348:	429a      	cmp	r2, r3
 800634a:	d3e5      	bcc.n	8006318 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f005 fdcd 	bl	800bef0 <USB_ReadInterrupts>
 8006356:	4603      	mov	r3, r0
 8006358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800635c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006360:	d13b      	bne.n	80063da <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006362:	2301      	movs	r3, #1
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
 8006366:	e02b      	b.n	80063c0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	4613      	mov	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	3340      	adds	r3, #64	; 0x40
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d115      	bne.n	80063ba <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800638e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006390:	2b00      	cmp	r3, #0
 8006392:	da12      	bge.n	80063ba <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006398:	4613      	mov	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	333f      	adds	r3, #63	; 0x3f
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fae8 	bl	800698a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	3301      	adds	r3, #1
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d3ce      	bcc.n	8006368 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695a      	ldr	r2, [r3, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80063d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f005 fd86 	bl	800bef0 <USB_ReadInterrupts>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063ee:	d155      	bne.n	800649c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063f0:	2301      	movs	r3, #1
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
 80063f4:	e045      	b.n	8006482 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	4613      	mov	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d12e      	bne.n	800647c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800641e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006420:	2b00      	cmp	r3, #0
 8006422:	da2b      	bge.n	800647c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006430:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006434:	429a      	cmp	r2, r3
 8006436:	d121      	bne.n	800647c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006478:	6053      	str	r3, [r2, #4]
            break;
 800647a:	e007      	b.n	800648c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	3301      	adds	r3, #1
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006488:	429a      	cmp	r2, r3
 800648a:	d3b4      	bcc.n	80063f6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800649a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f005 fd25 	bl	800bef0 <USB_ReadInterrupts>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d10a      	bne.n	80064c8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f00a ff54 	bl	8011360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80064c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f005 fd0f 	bl	800bef0 <USB_ReadInterrupts>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d115      	bne.n	8006508 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f00a ff44 	bl	801137c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	e000      	b.n	8006508 <HAL_PCD_IRQHandler+0x992>
      return;
 8006506:	bf00      	nop
    }
  }
}
 8006508:	3734      	adds	r7, #52	; 0x34
 800650a:	46bd      	mov	sp, r7
 800650c:	bd90      	pop	{r4, r7, pc}

0800650e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_PCD_SetAddress+0x1a>
 8006524:	2302      	movs	r3, #2
 8006526:	e013      	b.n	8006550 <HAL_PCD_SetAddress+0x42>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f005 fc6d 	bl	800be20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	4608      	mov	r0, r1
 8006562:	4611      	mov	r1, r2
 8006564:	461a      	mov	r2, r3
 8006566:	4603      	mov	r3, r0
 8006568:	70fb      	strb	r3, [r7, #3]
 800656a:	460b      	mov	r3, r1
 800656c:	803b      	strh	r3, [r7, #0]
 800656e:	4613      	mov	r3, r2
 8006570:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800657a:	2b00      	cmp	r3, #0
 800657c:	da0f      	bge.n	800659e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	f003 020f 	and.w	r2, r3, #15
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	3338      	adds	r3, #56	; 0x38
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	3304      	adds	r3, #4
 8006594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	705a      	strb	r2, [r3, #1]
 800659c:	e00f      	b.n	80065be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	f003 020f 	and.w	r2, r3, #15
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4413      	add	r3, r2
 80065b4:	3304      	adds	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80065ca:	883a      	ldrh	r2, [r7, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	78ba      	ldrb	r2, [r7, #2]
 80065d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80065e8:	78bb      	ldrb	r3, [r7, #2]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d102      	bne.n	80065f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_PCD_EP_Open+0xaa>
 80065fe:	2302      	movs	r3, #2
 8006600:	e00e      	b.n	8006620 <HAL_PCD_EP_Open+0xc8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	4618      	mov	r0, r3
 8006612:	f004 fce1 	bl	800afd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800661e:	7afb      	ldrb	r3, [r7, #11]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006638:	2b00      	cmp	r3, #0
 800663a:	da0f      	bge.n	800665c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	3338      	adds	r3, #56	; 0x38
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	4413      	add	r3, r2
 8006650:	3304      	adds	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	705a      	strb	r2, [r3, #1]
 800665a:	e00f      	b.n	800667c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	f003 020f 	and.w	r2, r3, #15
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	3304      	adds	r3, #4
 8006674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	b2da      	uxtb	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_PCD_EP_Close+0x6e>
 8006692:	2302      	movs	r3, #2
 8006694:	e00e      	b.n	80066b4 <HAL_PCD_EP_Close+0x8c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f004 fd1f 	bl	800b0e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	460b      	mov	r3, r1
 80066ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	f003 020f 	and.w	r2, r3, #15
 80066d2:	4613      	mov	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	3304      	adds	r3, #4
 80066e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2200      	movs	r2, #0
 80066f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2200      	movs	r2, #0
 80066fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	b2da      	uxtb	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d102      	bne.n	8006718 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	6979      	ldr	r1, [r7, #20]
 8006730:	f005 f806 	bl	800b740 <USB_EP0StartXfer>
 8006734:	e008      	b.n	8006748 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	6979      	ldr	r1, [r7, #20]
 8006744:	f004 fdac 	bl	800b2a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	f003 020f 	and.w	r2, r3, #15
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006774:	681b      	ldr	r3, [r3, #0]
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	460b      	mov	r3, r1
 8006790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	4613      	mov	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	3338      	adds	r3, #56	; 0x38
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	3304      	adds	r3, #4
 80067a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2201      	movs	r2, #1
 80067c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d102      	bne.n	80067dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	6979      	ldr	r1, [r7, #20]
 80067f4:	f004 ffa4 	bl	800b740 <USB_EP0StartXfer>
 80067f8:	e008      	b.n	800680c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	461a      	mov	r2, r3
 8006806:	6979      	ldr	r1, [r7, #20]
 8006808:	f004 fd4a 	bl	800b2a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d901      	bls.n	8006834 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e050      	b.n	80068d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da0f      	bge.n	800685c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	3338      	adds	r3, #56	; 0x38
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	3304      	adds	r3, #4
 8006852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	705a      	strb	r2, [r3, #1]
 800685a:	e00d      	b.n	8006878 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	3304      	adds	r3, #4
 8006870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	b2da      	uxtb	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_PCD_EP_SetStall+0x82>
 8006894:	2302      	movs	r3, #2
 8006896:	e01e      	b.n	80068d6 <HAL_PCD_EP_SetStall+0xc0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68f9      	ldr	r1, [r7, #12]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f005 f9e6 	bl	800bc78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	b2d9      	uxtb	r1, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068c6:	461a      	mov	r2, r3
 80068c8:	f005 fbd8 	bl	800c07c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d901      	bls.n	80068fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e042      	b.n	8006982 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006900:	2b00      	cmp	r3, #0
 8006902:	da0f      	bge.n	8006924 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	f003 020f 	and.w	r2, r3, #15
 800690a:	4613      	mov	r3, r2
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	3338      	adds	r3, #56	; 0x38
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4413      	add	r3, r2
 8006918:	3304      	adds	r3, #4
 800691a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	705a      	strb	r2, [r3, #1]
 8006922:	e00f      	b.n	8006944 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	3304      	adds	r3, #4
 800693c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	b2da      	uxtb	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_PCD_EP_ClrStall+0x86>
 8006960:	2302      	movs	r3, #2
 8006962:	e00e      	b.n	8006982 <HAL_PCD_EP_ClrStall+0xa4>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68f9      	ldr	r1, [r7, #12]
 8006972:	4618      	mov	r0, r3
 8006974:	f005 f9ee 	bl	800bd54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800699a:	2b00      	cmp	r3, #0
 800699c:	da0c      	bge.n	80069b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	4613      	mov	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	3338      	adds	r3, #56	; 0x38
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	3304      	adds	r3, #4
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	e00c      	b.n	80069d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	4613      	mov	r3, r2
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	3304      	adds	r3, #4
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	4618      	mov	r0, r3
 80069da:	f005 f80d 	bl	800b9f8 <USB_EPStopXfer>
 80069de:	4603      	mov	r3, r0
 80069e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80069e2:	7afb      	ldrb	r3, [r7, #11]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	4613      	mov	r3, r2
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	3338      	adds	r3, #56	; 0x38
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	4413      	add	r3, r2
 8006a10:	3304      	adds	r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1a      	ldr	r2, [r3, #32]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d901      	bls.n	8006a24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e06c      	b.n	8006afe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d902      	bls.n	8006a40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	3303      	adds	r3, #3
 8006a44:	089b      	lsrs	r3, r3, #2
 8006a46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a48:	e02b      	b.n	8006aa2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d902      	bls.n	8006a66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	3303      	adds	r3, #3
 8006a6a:	089b      	lsrs	r3, r3, #2
 8006a6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6919      	ldr	r1, [r3, #16]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	4603      	mov	r3, r0
 8006a84:	6978      	ldr	r0, [r7, #20]
 8006a86:	f005 f861 	bl	800bb4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	691a      	ldr	r2, [r3, #16]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	441a      	add	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d809      	bhi.n	8006acc <PCD_WriteEmptyTxFifo+0xe0>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d203      	bcs.n	8006acc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1be      	bne.n	8006a4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d811      	bhi.n	8006afc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	2201      	movs	r2, #1
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	6939      	ldr	r1, [r7, #16]
 8006af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af8:	4013      	ands	r3, r2
 8006afa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	333c      	adds	r3, #60	; 0x3c
 8006b20:	3304      	adds	r3, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d17b      	bne.n	8006c36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d015      	beq.n	8006b74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	4a61      	ldr	r2, [pc, #388]	; (8006cd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	f240 80b9 	bls.w	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80b3 	beq.w	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b70:	6093      	str	r3, [r2, #8]
 8006b72:	e0a7      	b.n	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d009      	beq.n	8006b92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	6093      	str	r3, [r2, #8]
 8006b90:	e098      	b.n	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 8093 	bne.w	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4a4b      	ldr	r2, [pc, #300]	; (8006cd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d90f      	bls.n	8006bc6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc2:	6093      	str	r3, [r2, #8]
 8006bc4:	e07e      	b.n	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3304      	adds	r3, #4
 8006bda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	0159      	lsls	r1, r3, #5
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	440b      	add	r3, r1
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d114      	bne.n	8006c28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c10:	461a      	mov	r2, r3
 8006c12:	2101      	movs	r1, #1
 8006c14:	f005 fa32 	bl	800c07c <USB_EP0_OutStart>
 8006c18:	e006      	b.n	8006c28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	441a      	add	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f00a fad2 	bl	80111d8 <HAL_PCD_DataOutStageCallback>
 8006c34:	e046      	b.n	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d124      	bne.n	8006c88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c54:	461a      	mov	r2, r3
 8006c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c5a:	6093      	str	r3, [r2, #8]
 8006c5c:	e032      	b.n	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	461a      	mov	r2, r3
 8006c76:	2320      	movs	r3, #32
 8006c78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f00a faa9 	bl	80111d8 <HAL_PCD_DataOutStageCallback>
 8006c86:	e01d      	b.n	8006cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d114      	bne.n	8006cb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	4613      	mov	r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d108      	bne.n	8006cb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	f005 f9e2 	bl	800c07c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f00a fa8a 	bl	80111d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	4f54300a 	.word	0x4f54300a
 8006cd4:	4f54310a 	.word	0x4f54310a

08006cd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	333c      	adds	r3, #60	; 0x3c
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d90e      	bls.n	8006d2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	461a      	mov	r2, r3
 8006d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f00a fa41 	bl	80111b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a0a      	ldr	r2, [pc, #40]	; (8006d60 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d90c      	bls.n	8006d54 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d108      	bne.n	8006d54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2101      	movs	r1, #1
 8006d50:	f005 f994 	bl	800c07c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	4f54300a 	.word	0x4f54300a

08006d64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
 8006d70:	4613      	mov	r3, r2
 8006d72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d107      	bne.n	8006d92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d82:	883b      	ldrh	r3, [r7, #0]
 8006d84:	0419      	lsls	r1, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d90:	e028      	b.n	8006de4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	0c1b      	lsrs	r3, r3, #16
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
 8006da4:	e00d      	b.n	8006dc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	3340      	adds	r3, #64	; 0x40
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	0c1b      	lsrs	r3, r3, #16
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4413      	add	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
 8006dc2:	7bfa      	ldrb	r2, [r7, #15]
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d3ec      	bcc.n	8006da6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006dcc:	883b      	ldrh	r3, [r7, #0]
 8006dce:	0418      	lsls	r0, r3, #16
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	4302      	orrs	r2, r0
 8006ddc:	3340      	adds	r3, #64	; 0x40
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	887a      	ldrh	r2, [r7, #2]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_PCDEx_ActivateLPM+0x44>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	10000003 	.word	0x10000003

08006e5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e66:	4b23      	ldr	r3, [pc, #140]	; (8006ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	4a22      	ldr	r2, [pc, #136]	; (8006ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e70:	6413      	str	r3, [r2, #64]	; 0x40
 8006e72:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e8a:	f7fc ffcb 	bl	8003e24 <HAL_GetTick>
 8006e8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e90:	e009      	b.n	8006ea6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e92:	f7fc ffc7 	bl	8003e24 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ea0:	d901      	bls.n	8006ea6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e022      	b.n	8006eec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb2:	d1ee      	bne.n	8006e92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006eb4:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a0f      	ldr	r2, [pc, #60]	; (8006ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ebe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ec0:	f7fc ffb0 	bl	8003e24 <HAL_GetTick>
 8006ec4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ec6:	e009      	b.n	8006edc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ec8:	f7fc ffac 	bl	8003e24 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ed6:	d901      	bls.n	8006edc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e007      	b.n	8006eec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006edc:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee8:	d1ee      	bne.n	8006ec8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40007000 	.word	0x40007000

08006efc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e29b      	b.n	800744a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8087 	beq.w	800702e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f20:	4b96      	ldr	r3, [pc, #600]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d00c      	beq.n	8006f46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f2c:	4b93      	ldr	r3, [pc, #588]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 030c 	and.w	r3, r3, #12
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d112      	bne.n	8006f5e <HAL_RCC_OscConfig+0x62>
 8006f38:	4b90      	ldr	r3, [pc, #576]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f44:	d10b      	bne.n	8006f5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f46:	4b8d      	ldr	r3, [pc, #564]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d06c      	beq.n	800702c <HAL_RCC_OscConfig+0x130>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d168      	bne.n	800702c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e275      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f66:	d106      	bne.n	8006f76 <HAL_RCC_OscConfig+0x7a>
 8006f68:	4b84      	ldr	r3, [pc, #528]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a83      	ldr	r2, [pc, #524]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e02e      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCC_OscConfig+0x9c>
 8006f7e:	4b7f      	ldr	r3, [pc, #508]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a7e      	ldr	r2, [pc, #504]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4b7c      	ldr	r3, [pc, #496]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a7b      	ldr	r2, [pc, #492]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e01d      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCC_OscConfig+0xc0>
 8006fa2:	4b76      	ldr	r3, [pc, #472]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a75      	ldr	r2, [pc, #468]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b73      	ldr	r3, [pc, #460]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a72      	ldr	r2, [pc, #456]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	e00b      	b.n	8006fd4 <HAL_RCC_OscConfig+0xd8>
 8006fbc:	4b6f      	ldr	r3, [pc, #444]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a6e      	ldr	r2, [pc, #440]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	4b6c      	ldr	r3, [pc, #432]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6b      	ldr	r2, [pc, #428]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d013      	beq.n	8007004 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fdc:	f7fc ff22 	bl	8003e24 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fe4:	f7fc ff1e 	bl	8003e24 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b64      	cmp	r3, #100	; 0x64
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e229      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	4b61      	ldr	r3, [pc, #388]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0f0      	beq.n	8006fe4 <HAL_RCC_OscConfig+0xe8>
 8007002:	e014      	b.n	800702e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fc ff0e 	bl	8003e24 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800700c:	f7fc ff0a 	bl	8003e24 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b64      	cmp	r3, #100	; 0x64
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e215      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800701e:	4b57      	ldr	r3, [pc, #348]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x110>
 800702a:	e000      	b.n	800702e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d069      	beq.n	800710e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800703a:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 030c 	and.w	r3, r3, #12
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007046:	4b4d      	ldr	r3, [pc, #308]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 030c 	and.w	r3, r3, #12
 800704e:	2b08      	cmp	r3, #8
 8007050:	d11c      	bne.n	800708c <HAL_RCC_OscConfig+0x190>
 8007052:	4b4a      	ldr	r3, [pc, #296]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d116      	bne.n	800708c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <HAL_RCC_OscConfig+0x17a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d001      	beq.n	8007076 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e1e9      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007076:	4b41      	ldr	r3, [pc, #260]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	493d      	ldr	r1, [pc, #244]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800708a:	e040      	b.n	800710e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d023      	beq.n	80070dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a38      	ldr	r2, [pc, #224]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fc fec0 	bl	8003e24 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fc febc 	bl	8003e24 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e1c7      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ba:	4b30      	ldr	r3, [pc, #192]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c6:	4b2d      	ldr	r3, [pc, #180]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4929      	ldr	r1, [pc, #164]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	600b      	str	r3, [r1, #0]
 80070da:	e018      	b.n	800710e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070dc:	4b27      	ldr	r3, [pc, #156]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a26      	ldr	r2, [pc, #152]	; (800717c <HAL_RCC_OscConfig+0x280>)
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fc fe9c 	bl	8003e24 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f0:	f7fc fe98 	bl	8003e24 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e1a3      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007102:	4b1e      	ldr	r3, [pc, #120]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f0      	bne.n	80070f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d038      	beq.n	800718c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d019      	beq.n	8007156 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007122:	4b16      	ldr	r3, [pc, #88]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007126:	4a15      	ldr	r2, [pc, #84]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007128:	f043 0301 	orr.w	r3, r3, #1
 800712c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712e:	f7fc fe79 	bl	8003e24 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007136:	f7fc fe75 	bl	8003e24 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e180      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800714a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <HAL_RCC_OscConfig+0x23a>
 8007154:	e01a      	b.n	800718c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_RCC_OscConfig+0x280>)
 8007158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715a:	4a08      	ldr	r2, [pc, #32]	; (800717c <HAL_RCC_OscConfig+0x280>)
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007162:	f7fc fe5f 	bl	8003e24 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007168:	e00a      	b.n	8007180 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800716a:	f7fc fe5b 	bl	8003e24 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d903      	bls.n	8007180 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e166      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
 800717c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007180:	4b92      	ldr	r3, [pc, #584]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ee      	bne.n	800716a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a4 	beq.w	80072e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719a:	4b8c      	ldr	r3, [pc, #560]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	4b89      	ldr	r3, [pc, #548]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	4a88      	ldr	r2, [pc, #544]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b0:	6413      	str	r3, [r2, #64]	; 0x40
 80071b2:	4b86      	ldr	r3, [pc, #536]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c2:	4b83      	ldr	r3, [pc, #524]	; (80073d0 <HAL_RCC_OscConfig+0x4d4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d118      	bne.n	8007200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071ce:	4b80      	ldr	r3, [pc, #512]	; (80073d0 <HAL_RCC_OscConfig+0x4d4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a7f      	ldr	r2, [pc, #508]	; (80073d0 <HAL_RCC_OscConfig+0x4d4>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071da:	f7fc fe23 	bl	8003e24 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fc fe1f 	bl	8003e24 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b64      	cmp	r3, #100	; 0x64
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e12a      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f4:	4b76      	ldr	r3, [pc, #472]	; (80073d0 <HAL_RCC_OscConfig+0x4d4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <HAL_RCC_OscConfig+0x31a>
 8007208:	4b70      	ldr	r3, [pc, #448]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800720a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720c:	4a6f      	ldr	r2, [pc, #444]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	6713      	str	r3, [r2, #112]	; 0x70
 8007214:	e02d      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10c      	bne.n	8007238 <HAL_RCC_OscConfig+0x33c>
 800721e:	4b6b      	ldr	r3, [pc, #428]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	4a6a      	ldr	r2, [pc, #424]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007224:	f023 0301 	bic.w	r3, r3, #1
 8007228:	6713      	str	r3, [r2, #112]	; 0x70
 800722a:	4b68      	ldr	r3, [pc, #416]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722e:	4a67      	ldr	r2, [pc, #412]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007230:	f023 0304 	bic.w	r3, r3, #4
 8007234:	6713      	str	r3, [r2, #112]	; 0x70
 8007236:	e01c      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b05      	cmp	r3, #5
 800723e:	d10c      	bne.n	800725a <HAL_RCC_OscConfig+0x35e>
 8007240:	4b62      	ldr	r3, [pc, #392]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	4a61      	ldr	r2, [pc, #388]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007246:	f043 0304 	orr.w	r3, r3, #4
 800724a:	6713      	str	r3, [r2, #112]	; 0x70
 800724c:	4b5f      	ldr	r3, [pc, #380]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800724e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007250:	4a5e      	ldr	r2, [pc, #376]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007252:	f043 0301 	orr.w	r3, r3, #1
 8007256:	6713      	str	r3, [r2, #112]	; 0x70
 8007258:	e00b      	b.n	8007272 <HAL_RCC_OscConfig+0x376>
 800725a:	4b5c      	ldr	r3, [pc, #368]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800725c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725e:	4a5b      	ldr	r2, [pc, #364]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
 8007266:	4b59      	ldr	r3, [pc, #356]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726a:	4a58      	ldr	r2, [pc, #352]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d015      	beq.n	80072a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727a:	f7fc fdd3 	bl	8003e24 <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	e00a      	b.n	8007298 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007282:	f7fc fdcf 	bl	8003e24 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	4293      	cmp	r3, r2
 8007292:	d901      	bls.n	8007298 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	e0d8      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007298:	4b4c      	ldr	r3, [pc, #304]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ee      	beq.n	8007282 <HAL_RCC_OscConfig+0x386>
 80072a4:	e014      	b.n	80072d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a6:	f7fc fdbd 	bl	8003e24 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ac:	e00a      	b.n	80072c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ae:	f7fc fdb9 	bl	8003e24 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072bc:	4293      	cmp	r3, r2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e0c2      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c4:	4b41      	ldr	r3, [pc, #260]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ee      	bne.n	80072ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d105      	bne.n	80072e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072d6:	4b3d      	ldr	r3, [pc, #244]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	4a3c      	ldr	r2, [pc, #240]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80072dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80ae 	beq.w	8007448 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072ec:	4b37      	ldr	r3, [pc, #220]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 030c 	and.w	r3, r3, #12
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d06d      	beq.n	80073d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d14b      	bne.n	8007398 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007300:	4b32      	ldr	r3, [pc, #200]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a31      	ldr	r2, [pc, #196]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800730a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730c:	f7fc fd8a 	bl	8003e24 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007314:	f7fc fd86 	bl	8003e24 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e091      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007326:	4b29      	ldr	r3, [pc, #164]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f0      	bne.n	8007314 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	3b01      	subs	r3, #1
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	061b      	lsls	r3, r3, #24
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	071b      	lsls	r3, r3, #28
 800735e:	491b      	ldr	r1, [pc, #108]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007360:	4313      	orrs	r3, r2
 8007362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007364:	4b19      	ldr	r3, [pc, #100]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800736a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800736e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007370:	f7fc fd58 	bl	8003e24 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007378:	f7fc fd54 	bl	8003e24 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e05f      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800738a:	4b10      	ldr	r3, [pc, #64]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f0      	beq.n	8007378 <HAL_RCC_OscConfig+0x47c>
 8007396:	e057      	b.n	8007448 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007398:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a0b      	ldr	r2, [pc, #44]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 800739e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a4:	f7fc fd3e 	bl	8003e24 <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ac:	f7fc fd3a 	bl	8003e24 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e045      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073be:	4b03      	ldr	r3, [pc, #12]	; (80073cc <HAL_RCC_OscConfig+0x4d0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f0      	bne.n	80073ac <HAL_RCC_OscConfig+0x4b0>
 80073ca:	e03d      	b.n	8007448 <HAL_RCC_OscConfig+0x54c>
 80073cc:	40023800 	.word	0x40023800
 80073d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073d4:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <HAL_RCC_OscConfig+0x558>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d030      	beq.n	8007444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d129      	bne.n	8007444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d122      	bne.n	8007444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800740a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800740c:	4293      	cmp	r3, r2
 800740e:	d119      	bne.n	8007444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	3b01      	subs	r3, #1
 800741e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007420:	429a      	cmp	r2, r3
 8007422:	d10f      	bne.n	8007444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d107      	bne.n	8007444 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d001      	beq.n	8007448 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800

08007458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0d0      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007470:	4b6a      	ldr	r3, [pc, #424]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d910      	bls.n	80074a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747e:	4b67      	ldr	r3, [pc, #412]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f023 020f 	bic.w	r2, r3, #15
 8007486:	4965      	ldr	r1, [pc, #404]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	4313      	orrs	r3, r2
 800748c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800748e:	4b63      	ldr	r3, [pc, #396]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d001      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0b8      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d020      	beq.n	80074ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074b8:	4b59      	ldr	r3, [pc, #356]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4a58      	ldr	r2, [pc, #352]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074d0:	4b53      	ldr	r3, [pc, #332]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	4a52      	ldr	r2, [pc, #328]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074dc:	4b50      	ldr	r3, [pc, #320]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	494d      	ldr	r1, [pc, #308]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d040      	beq.n	800757c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d107      	bne.n	8007512 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007502:	4b47      	ldr	r3, [pc, #284]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d115      	bne.n	800753a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e07f      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d107      	bne.n	800752a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800751a:	4b41      	ldr	r3, [pc, #260]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e073      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800752a:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e06b      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800753a:	4b39      	ldr	r3, [pc, #228]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f023 0203 	bic.w	r2, r3, #3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	4936      	ldr	r1, [pc, #216]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 8007548:	4313      	orrs	r3, r2
 800754a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754c:	f7fc fc6a 	bl	8003e24 <HAL_GetTick>
 8007550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007552:	e00a      	b.n	800756a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007554:	f7fc fc66 	bl	8003e24 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e053      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800756a:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 020c 	and.w	r2, r3, #12
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	429a      	cmp	r2, r3
 800757a:	d1eb      	bne.n	8007554 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800757c:	4b27      	ldr	r3, [pc, #156]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d210      	bcs.n	80075ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758a:	4b24      	ldr	r3, [pc, #144]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f023 020f 	bic.w	r2, r3, #15
 8007592:	4922      	ldr	r1, [pc, #136]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	4313      	orrs	r3, r2
 8007598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800759a:	4b20      	ldr	r3, [pc, #128]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e032      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075b8:	4b19      	ldr	r3, [pc, #100]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4916      	ldr	r1, [pc, #88]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	490e      	ldr	r1, [pc, #56]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075ea:	f000 f821 	bl	8007630 <HAL_RCC_GetSysClockFreq>
 80075ee:	4602      	mov	r2, r0
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	091b      	lsrs	r3, r3, #4
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	490a      	ldr	r1, [pc, #40]	; (8007624 <HAL_RCC_ClockConfig+0x1cc>)
 80075fc:	5ccb      	ldrb	r3, [r1, r3]
 80075fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007602:	4a09      	ldr	r2, [pc, #36]	; (8007628 <HAL_RCC_ClockConfig+0x1d0>)
 8007604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007606:	4b09      	ldr	r3, [pc, #36]	; (800762c <HAL_RCC_ClockConfig+0x1d4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4618      	mov	r0, r3
 800760c:	f7fc f814 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40023c00 	.word	0x40023c00
 8007620:	40023800 	.word	0x40023800
 8007624:	08024920 	.word	0x08024920
 8007628:	20000004 	.word	0x20000004
 800762c:	20000008 	.word	0x20000008

08007630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007634:	b094      	sub	sp, #80	; 0x50
 8007636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
 800763c:	2300      	movs	r3, #0
 800763e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007640:	2300      	movs	r3, #0
 8007642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007648:	4b79      	ldr	r3, [pc, #484]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 030c 	and.w	r3, r3, #12
 8007650:	2b08      	cmp	r3, #8
 8007652:	d00d      	beq.n	8007670 <HAL_RCC_GetSysClockFreq+0x40>
 8007654:	2b08      	cmp	r3, #8
 8007656:	f200 80e1 	bhi.w	800781c <HAL_RCC_GetSysClockFreq+0x1ec>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x34>
 800765e:	2b04      	cmp	r3, #4
 8007660:	d003      	beq.n	800766a <HAL_RCC_GetSysClockFreq+0x3a>
 8007662:	e0db      	b.n	800781c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007664:	4b73      	ldr	r3, [pc, #460]	; (8007834 <HAL_RCC_GetSysClockFreq+0x204>)
 8007666:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007668:	e0db      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800766a:	4b73      	ldr	r3, [pc, #460]	; (8007838 <HAL_RCC_GetSysClockFreq+0x208>)
 800766c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800766e:	e0d8      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007670:	4b6f      	ldr	r3, [pc, #444]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007678:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800767a:	4b6d      	ldr	r3, [pc, #436]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d063      	beq.n	800774e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007686:	4b6a      	ldr	r3, [pc, #424]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	099b      	lsrs	r3, r3, #6
 800768c:	2200      	movs	r2, #0
 800768e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007698:	633b      	str	r3, [r7, #48]	; 0x30
 800769a:	2300      	movs	r3, #0
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
 800769e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	f04f 0000 	mov.w	r0, #0
 80076aa:	f04f 0100 	mov.w	r1, #0
 80076ae:	0159      	lsls	r1, r3, #5
 80076b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076b4:	0150      	lsls	r0, r2, #5
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4621      	mov	r1, r4
 80076bc:	1a51      	subs	r1, r2, r1
 80076be:	6139      	str	r1, [r7, #16]
 80076c0:	4629      	mov	r1, r5
 80076c2:	eb63 0301 	sbc.w	r3, r3, r1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076d4:	4659      	mov	r1, fp
 80076d6:	018b      	lsls	r3, r1, #6
 80076d8:	4651      	mov	r1, sl
 80076da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076de:	4651      	mov	r1, sl
 80076e0:	018a      	lsls	r2, r1, #6
 80076e2:	4651      	mov	r1, sl
 80076e4:	ebb2 0801 	subs.w	r8, r2, r1
 80076e8:	4659      	mov	r1, fp
 80076ea:	eb63 0901 	sbc.w	r9, r3, r1
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007702:	4690      	mov	r8, r2
 8007704:	4699      	mov	r9, r3
 8007706:	4623      	mov	r3, r4
 8007708:	eb18 0303 	adds.w	r3, r8, r3
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	462b      	mov	r3, r5
 8007710:	eb49 0303 	adc.w	r3, r9, r3
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007722:	4629      	mov	r1, r5
 8007724:	024b      	lsls	r3, r1, #9
 8007726:	4621      	mov	r1, r4
 8007728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800772c:	4621      	mov	r1, r4
 800772e:	024a      	lsls	r2, r1, #9
 8007730:	4610      	mov	r0, r2
 8007732:	4619      	mov	r1, r3
 8007734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007736:	2200      	movs	r2, #0
 8007738:	62bb      	str	r3, [r7, #40]	; 0x28
 800773a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800773c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007740:	f7f8 fff2 	bl	8000728 <__aeabi_uldivmod>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4613      	mov	r3, r2
 800774a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800774c:	e058      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800774e:	4b38      	ldr	r3, [pc, #224]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	099b      	lsrs	r3, r3, #6
 8007754:	2200      	movs	r2, #0
 8007756:	4618      	mov	r0, r3
 8007758:	4611      	mov	r1, r2
 800775a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800775e:	623b      	str	r3, [r7, #32]
 8007760:	2300      	movs	r3, #0
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f04f 0000 	mov.w	r0, #0
 8007770:	f04f 0100 	mov.w	r1, #0
 8007774:	0159      	lsls	r1, r3, #5
 8007776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800777a:	0150      	lsls	r0, r2, #5
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4641      	mov	r1, r8
 8007782:	ebb2 0a01 	subs.w	sl, r2, r1
 8007786:	4649      	mov	r1, r9
 8007788:	eb63 0b01 	sbc.w	fp, r3, r1
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800779c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077a0:	ebb2 040a 	subs.w	r4, r2, sl
 80077a4:	eb63 050b 	sbc.w	r5, r3, fp
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	00eb      	lsls	r3, r5, #3
 80077b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077b6:	00e2      	lsls	r2, r4, #3
 80077b8:	4614      	mov	r4, r2
 80077ba:	461d      	mov	r5, r3
 80077bc:	4643      	mov	r3, r8
 80077be:	18e3      	adds	r3, r4, r3
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	464b      	mov	r3, r9
 80077c4:	eb45 0303 	adc.w	r3, r5, r3
 80077c8:	607b      	str	r3, [r7, #4]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	f04f 0300 	mov.w	r3, #0
 80077d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077d6:	4629      	mov	r1, r5
 80077d8:	028b      	lsls	r3, r1, #10
 80077da:	4621      	mov	r1, r4
 80077dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077e0:	4621      	mov	r1, r4
 80077e2:	028a      	lsls	r2, r1, #10
 80077e4:	4610      	mov	r0, r2
 80077e6:	4619      	mov	r1, r3
 80077e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ea:	2200      	movs	r2, #0
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	61fa      	str	r2, [r7, #28]
 80077f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077f4:	f7f8 ff98 	bl	8000728 <__aeabi_uldivmod>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4613      	mov	r3, r2
 80077fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007800:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	3301      	adds	r3, #1
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007814:	fbb2 f3f3 	udiv	r3, r2, r3
 8007818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800781a:	e002      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <HAL_RCC_GetSysClockFreq+0x204>)
 800781e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007824:	4618      	mov	r0, r3
 8007826:	3750      	adds	r7, #80	; 0x50
 8007828:	46bd      	mov	sp, r7
 800782a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782e:	bf00      	nop
 8007830:	40023800 	.word	0x40023800
 8007834:	00f42400 	.word	0x00f42400
 8007838:	007a1200 	.word	0x007a1200

0800783c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007840:	4b03      	ldr	r3, [pc, #12]	; (8007850 <HAL_RCC_GetHCLKFreq+0x14>)
 8007842:	681b      	ldr	r3, [r3, #0]
}
 8007844:	4618      	mov	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000004 	.word	0x20000004

08007854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007858:	f7ff fff0 	bl	800783c <HAL_RCC_GetHCLKFreq>
 800785c:	4602      	mov	r2, r0
 800785e:	4b05      	ldr	r3, [pc, #20]	; (8007874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	0a9b      	lsrs	r3, r3, #10
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	4903      	ldr	r1, [pc, #12]	; (8007878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800786a:	5ccb      	ldrb	r3, [r1, r3]
 800786c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007870:	4618      	mov	r0, r3
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40023800 	.word	0x40023800
 8007878:	08024930 	.word	0x08024930

0800787c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007880:	f7ff ffdc 	bl	800783c <HAL_RCC_GetHCLKFreq>
 8007884:	4602      	mov	r2, r0
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	0b5b      	lsrs	r3, r3, #13
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	4903      	ldr	r1, [pc, #12]	; (80078a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007892:	5ccb      	ldrb	r3, [r1, r3]
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007898:	4618      	mov	r0, r3
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40023800 	.word	0x40023800
 80078a0:	08024930 	.word	0x08024930

080078a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	220f      	movs	r2, #15
 80078b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078b4:	4b12      	ldr	r3, [pc, #72]	; (8007900 <HAL_RCC_GetClockConfig+0x5c>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 0203 	and.w	r2, r3, #3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078c0:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <HAL_RCC_GetClockConfig+0x5c>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078cc:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <HAL_RCC_GetClockConfig+0x5c>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80078d8:	4b09      	ldr	r3, [pc, #36]	; (8007900 <HAL_RCC_GetClockConfig+0x5c>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	08db      	lsrs	r3, r3, #3
 80078de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078e6:	4b07      	ldr	r3, [pc, #28]	; (8007904 <HAL_RCC_GetClockConfig+0x60>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 020f 	and.w	r2, r3, #15
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	601a      	str	r2, [r3, #0]
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40023800 	.word	0x40023800
 8007904:	40023c00 	.word	0x40023c00

08007908 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d012      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007930:	4b69      	ldr	r3, [pc, #420]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4a68      	ldr	r2, [pc, #416]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007936:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800793a:	6093      	str	r3, [r2, #8]
 800793c:	4b66      	ldr	r3, [pc, #408]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007944:	4964      	ldr	r1, [pc, #400]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007946:	4313      	orrs	r3, r2
 8007948:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007952:	2301      	movs	r3, #1
 8007954:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d017      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007962:	4b5d      	ldr	r3, [pc, #372]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007970:	4959      	ldr	r1, [pc, #356]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007972:	4313      	orrs	r3, r2
 8007974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007980:	d101      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007982:	2301      	movs	r3, #1
 8007984:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800798e:	2301      	movs	r3, #1
 8007990:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d017      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800799e:	4b4e      	ldr	r3, [pc, #312]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	494a      	ldr	r1, [pc, #296]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079bc:	d101      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079ca:	2301      	movs	r3, #1
 80079cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079da:	2301      	movs	r3, #1
 80079dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 808b 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079ec:	4b3a      	ldr	r3, [pc, #232]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	4a39      	ldr	r2, [pc, #228]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f6:	6413      	str	r3, [r2, #64]	; 0x40
 80079f8:	4b37      	ldr	r3, [pc, #220]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a04:	4b35      	ldr	r3, [pc, #212]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a34      	ldr	r2, [pc, #208]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a10:	f7fc fa08 	bl	8003e24 <HAL_GetTick>
 8007a14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a16:	e008      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a18:	f7fc fa04 	bl	8003e24 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b64      	cmp	r3, #100	; 0x64
 8007a24:	d901      	bls.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e38f      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a2a:	4b2c      	ldr	r3, [pc, #176]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f0      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a36:	4b28      	ldr	r3, [pc, #160]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d035      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d02e      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a54:	4b20      	ldr	r3, [pc, #128]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a62:	4a1d      	ldr	r2, [pc, #116]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6e:	4a1a      	ldr	r2, [pc, #104]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a76:	4a18      	ldr	r2, [pc, #96]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d114      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fc f9cc 	bl	8003e24 <HAL_GetTick>
 8007a8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8e:	e00a      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a90:	f7fc f9c8 	bl	8003e24 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e351      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa6:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0ee      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007abe:	d111      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007acc:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ace:	400b      	ands	r3, r1
 8007ad0:	4901      	ldr	r1, [pc, #4]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	608b      	str	r3, [r1, #8]
 8007ad6:	e00b      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	40007000 	.word	0x40007000
 8007ae0:	0ffffcff 	.word	0x0ffffcff
 8007ae4:	4bac      	ldr	r3, [pc, #688]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4aab      	ldr	r2, [pc, #684]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007aee:	6093      	str	r3, [r2, #8]
 8007af0:	4ba9      	ldr	r3, [pc, #676]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007afc:	49a6      	ldr	r1, [pc, #664]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d010      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b0e:	4ba2      	ldr	r3, [pc, #648]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b14:	4aa0      	ldr	r2, [pc, #640]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007b1e:	4b9e      	ldr	r3, [pc, #632]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	499b      	ldr	r1, [pc, #620]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b3c:	4b96      	ldr	r3, [pc, #600]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b4a:	4993      	ldr	r1, [pc, #588]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b5e:	4b8e      	ldr	r3, [pc, #568]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b6c:	498a      	ldr	r1, [pc, #552]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b80:	4b85      	ldr	r3, [pc, #532]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8e:	4982      	ldr	r1, [pc, #520]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ba2:	4b7d      	ldr	r3, [pc, #500]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb0:	4979      	ldr	r1, [pc, #484]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bc4:	4b74      	ldr	r3, [pc, #464]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bca:	f023 0203 	bic.w	r2, r3, #3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	4971      	ldr	r1, [pc, #452]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007be6:	4b6c      	ldr	r3, [pc, #432]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bec:	f023 020c 	bic.w	r2, r3, #12
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf4:	4968      	ldr	r1, [pc, #416]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c08:	4b63      	ldr	r3, [pc, #396]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c16:	4960      	ldr	r1, [pc, #384]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c2a:	4b5b      	ldr	r3, [pc, #364]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c38:	4957      	ldr	r1, [pc, #348]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c4c:	4b52      	ldr	r3, [pc, #328]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	494f      	ldr	r1, [pc, #316]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c6e:	4b4a      	ldr	r3, [pc, #296]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7c:	4946      	ldr	r1, [pc, #280]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c90:	4b41      	ldr	r3, [pc, #260]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9e:	493e      	ldr	r1, [pc, #248]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007cb2:	4b39      	ldr	r3, [pc, #228]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc0:	4935      	ldr	r1, [pc, #212]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cd4:	4b30      	ldr	r3, [pc, #192]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce2:	492d      	ldr	r1, [pc, #180]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d011      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007cf6:	4b28      	ldr	r3, [pc, #160]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d04:	4924      	ldr	r1, [pc, #144]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d14:	d101      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d16:	2301      	movs	r3, #1
 8007d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0308 	and.w	r3, r3, #8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d26:	2301      	movs	r3, #1
 8007d28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d44:	4914      	ldr	r1, [pc, #80]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d68:	490b      	ldr	r1, [pc, #44]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00f      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007d7c:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d8c:	4902      	ldr	r1, [pc, #8]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d94:	e002      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007d96:	bf00      	nop
 8007d98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007da8:	4b8a      	ldr	r3, [pc, #552]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db8:	4986      	ldr	r1, [pc, #536]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007dcc:	4b81      	ldr	r3, [pc, #516]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ddc:	497d      	ldr	r1, [pc, #500]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d006      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80d6 	beq.w	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007df8:	4b76      	ldr	r3, [pc, #472]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a75      	ldr	r2, [pc, #468]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e04:	f7fc f80e 	bl	8003e24 <HAL_GetTick>
 8007e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e0c:	f7fc f80a 	bl	8003e24 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b64      	cmp	r3, #100	; 0x64
 8007e18:	d901      	bls.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e195      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e1e:	4b6d      	ldr	r3, [pc, #436]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f0      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d021      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d11d      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e3e:	4b65      	ldr	r3, [pc, #404]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e44:	0c1b      	lsrs	r3, r3, #16
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e4c:	4b61      	ldr	r3, [pc, #388]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e52:	0e1b      	lsrs	r3, r3, #24
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	019a      	lsls	r2, r3, #6
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	431a      	orrs	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	061b      	lsls	r3, r3, #24
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	071b      	lsls	r3, r3, #28
 8007e72:	4958      	ldr	r1, [pc, #352]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e8e:	d00a      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d02e      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ea4:	d129      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ea6:	4b4b      	ldr	r3, [pc, #300]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007eb4:	4b47      	ldr	r3, [pc, #284]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eba:	0f1b      	lsrs	r3, r3, #28
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	019a      	lsls	r2, r3, #6
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	061b      	lsls	r3, r3, #24
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	071b      	lsls	r3, r3, #28
 8007eda:	493e      	ldr	r1, [pc, #248]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ee2:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee8:	f023 021f 	bic.w	r2, r3, #31
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	4938      	ldr	r1, [pc, #224]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01d      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f06:	4b33      	ldr	r3, [pc, #204]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0c:	0e1b      	lsrs	r3, r3, #24
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f14:	4b2f      	ldr	r3, [pc, #188]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1a:	0f1b      	lsrs	r3, r3, #28
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	019a      	lsls	r2, r3, #6
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	061b      	lsls	r3, r3, #24
 8007f34:	431a      	orrs	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	071b      	lsls	r3, r3, #28
 8007f3a:	4926      	ldr	r1, [pc, #152]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d011      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	019a      	lsls	r2, r3, #6
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	041b      	lsls	r3, r3, #16
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	061b      	lsls	r3, r3, #24
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	071b      	lsls	r3, r3, #28
 8007f6a:	491a      	ldr	r1, [pc, #104]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f72:	4b18      	ldr	r3, [pc, #96]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a17      	ldr	r2, [pc, #92]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f7e:	f7fb ff51 	bl	8003e24 <HAL_GetTick>
 8007f82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f84:	e008      	b.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f86:	f7fb ff4d 	bl	8003e24 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b64      	cmp	r3, #100	; 0x64
 8007f92:	d901      	bls.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e0d8      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f98:	4b0e      	ldr	r3, [pc, #56]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0f0      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	f040 80ce 	bne.w	8008148 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fb8:	f7fb ff34 	bl	8003e24 <HAL_GetTick>
 8007fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fbe:	e00b      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fc0:	f7fb ff30 	bl	8003e24 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b64      	cmp	r3, #100	; 0x64
 8007fcc:	d904      	bls.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e0bb      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007fd2:	bf00      	nop
 8007fd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fd8:	4b5e      	ldr	r3, [pc, #376]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe4:	d0ec      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008002:	2b00      	cmp	r3, #0
 8008004:	d02e      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d12a      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800800e:	4b51      	ldr	r3, [pc, #324]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800801c:	4b4d      	ldr	r3, [pc, #308]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800801e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008022:	0f1b      	lsrs	r3, r3, #28
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	019a      	lsls	r2, r3, #6
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	041b      	lsls	r3, r3, #16
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	061b      	lsls	r3, r3, #24
 800803c:	431a      	orrs	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	071b      	lsls	r3, r3, #28
 8008042:	4944      	ldr	r1, [pc, #272]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800804a:	4b42      	ldr	r3, [pc, #264]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800804c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008050:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	3b01      	subs	r3, #1
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	493d      	ldr	r1, [pc, #244]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800805e:	4313      	orrs	r3, r2
 8008060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d022      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008078:	d11d      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800807a:	4b36      	ldr	r3, [pc, #216]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800807c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008080:	0e1b      	lsrs	r3, r3, #24
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008088:	4b32      	ldr	r3, [pc, #200]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800808e:	0f1b      	lsrs	r3, r3, #28
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	019a      	lsls	r2, r3, #6
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	431a      	orrs	r2, r3
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	061b      	lsls	r3, r3, #24
 80080a8:	431a      	orrs	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	071b      	lsls	r3, r3, #28
 80080ae:	4929      	ldr	r1, [pc, #164]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d028      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080c2:	4b24      	ldr	r3, [pc, #144]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080d0:	4b20      	ldr	r3, [pc, #128]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d6:	0c1b      	lsrs	r3, r3, #16
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	019a      	lsls	r2, r3, #6
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	431a      	orrs	r2, r3
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	061b      	lsls	r3, r3, #24
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	071b      	lsls	r3, r3, #28
 80080f6:	4917      	ldr	r1, [pc, #92]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80080fe:	4b15      	ldr	r3, [pc, #84]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	4911      	ldr	r1, [pc, #68]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800810e:	4313      	orrs	r3, r2
 8008110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008114:	4b0f      	ldr	r3, [pc, #60]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a0e      	ldr	r2, [pc, #56]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800811a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800811e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008120:	f7fb fe80 	bl	8003e24 <HAL_GetTick>
 8008124:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008126:	e008      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008128:	f7fb fe7c 	bl	8003e24 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b64      	cmp	r3, #100	; 0x64
 8008134:	d901      	bls.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e007      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008146:	d1ef      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3720      	adds	r7, #32
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	40023800 	.word	0x40023800

08008158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e049      	b.n	80081fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f841 	bl	8008206 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2202      	movs	r2, #2
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3304      	adds	r3, #4
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f000 fb6a 	bl	8008870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	d001      	beq.n	8008234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e054      	b.n	80082de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a26      	ldr	r2, [pc, #152]	; (80082ec <HAL_TIM_Base_Start_IT+0xd0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d022      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825e:	d01d      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a22      	ldr	r2, [pc, #136]	; (80082f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a21      	ldr	r2, [pc, #132]	; (80082f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00e      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <HAL_TIM_Base_Start_IT+0xe0>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1c      	ldr	r2, [pc, #112]	; (8008300 <HAL_TIM_Base_Start_IT+0xe4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <HAL_TIM_Base_Start_IT+0xe8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d115      	bne.n	80082c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	4b19      	ldr	r3, [pc, #100]	; (8008308 <HAL_TIM_Base_Start_IT+0xec>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b06      	cmp	r3, #6
 80082ac:	d015      	beq.n	80082da <HAL_TIM_Base_Start_IT+0xbe>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b4:	d011      	beq.n	80082da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c6:	e008      	b.n	80082da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e000      	b.n	80082dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40010000 	.word	0x40010000
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00
 80082fc:	40010400 	.word	0x40010400
 8008300:	40014000 	.word	0x40014000
 8008304:	40001800 	.word	0x40001800
 8008308:	00010007 	.word	0x00010007

0800830c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e049      	b.n	80083b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7fb fbd4 	bl	8003ae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f000 fa90 	bl	8008870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d122      	bne.n	8008416 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d11b      	bne.n	8008416 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f06f 0202 	mvn.w	r2, #2
 80083e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa19 	bl	8008834 <HAL_TIM_IC_CaptureCallback>
 8008402:	e005      	b.n	8008410 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa0b 	bl	8008820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa1c 	bl	8008848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b04      	cmp	r3, #4
 8008422:	d122      	bne.n	800846a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b04      	cmp	r3, #4
 8008430:	d11b      	bne.n	800846a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f06f 0204 	mvn.w	r2, #4
 800843a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f9ef 	bl	8008834 <HAL_TIM_IC_CaptureCallback>
 8008456:	e005      	b.n	8008464 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f9e1 	bl	8008820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f9f2 	bl	8008848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b08      	cmp	r3, #8
 8008476:	d122      	bne.n	80084be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f003 0308 	and.w	r3, r3, #8
 8008482:	2b08      	cmp	r3, #8
 8008484:	d11b      	bne.n	80084be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f06f 0208 	mvn.w	r2, #8
 800848e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2204      	movs	r2, #4
 8008494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f9c5 	bl	8008834 <HAL_TIM_IC_CaptureCallback>
 80084aa:	e005      	b.n	80084b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f9b7 	bl	8008820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f9c8 	bl	8008848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f003 0310 	and.w	r3, r3, #16
 80084c8:	2b10      	cmp	r3, #16
 80084ca:	d122      	bne.n	8008512 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f003 0310 	and.w	r3, r3, #16
 80084d6:	2b10      	cmp	r3, #16
 80084d8:	d11b      	bne.n	8008512 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f06f 0210 	mvn.w	r2, #16
 80084e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2208      	movs	r2, #8
 80084e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f99b 	bl	8008834 <HAL_TIM_IC_CaptureCallback>
 80084fe:	e005      	b.n	800850c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f98d 	bl	8008820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f99e 	bl	8008848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b01      	cmp	r3, #1
 800851e:	d10e      	bne.n	800853e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b01      	cmp	r3, #1
 800852c:	d107      	bne.n	800853e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f06f 0201 	mvn.w	r2, #1
 8008536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7fa fedb 	bl	80032f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008548:	2b80      	cmp	r3, #128	; 0x80
 800854a:	d10e      	bne.n	800856a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008556:	2b80      	cmp	r3, #128	; 0x80
 8008558:	d107      	bne.n	800856a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fd97 	bl	8009098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008578:	d10e      	bne.n	8008598 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008584:	2b80      	cmp	r3, #128	; 0x80
 8008586:	d107      	bne.n	8008598 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fd8a 	bl	80090ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d10e      	bne.n	80085c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b0:	2b40      	cmp	r3, #64	; 0x40
 80085b2:	d107      	bne.n	80085c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f94c 	bl	800885c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f003 0320 	and.w	r3, r3, #32
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d10e      	bne.n	80085f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f003 0320 	and.w	r3, r3, #32
 80085dc:	2b20      	cmp	r3, #32
 80085de:	d107      	bne.n	80085f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f06f 0220 	mvn.w	r2, #32
 80085e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fd4a 	bl	8009084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085f0:	bf00      	nop
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008612:	2302      	movs	r3, #2
 8008614:	e0ff      	b.n	8008816 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b14      	cmp	r3, #20
 8008622:	f200 80f0 	bhi.w	8008806 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008626:	a201      	add	r2, pc, #4	; (adr r2, 800862c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862c:	08008681 	.word	0x08008681
 8008630:	08008807 	.word	0x08008807
 8008634:	08008807 	.word	0x08008807
 8008638:	08008807 	.word	0x08008807
 800863c:	080086c1 	.word	0x080086c1
 8008640:	08008807 	.word	0x08008807
 8008644:	08008807 	.word	0x08008807
 8008648:	08008807 	.word	0x08008807
 800864c:	08008703 	.word	0x08008703
 8008650:	08008807 	.word	0x08008807
 8008654:	08008807 	.word	0x08008807
 8008658:	08008807 	.word	0x08008807
 800865c:	08008743 	.word	0x08008743
 8008660:	08008807 	.word	0x08008807
 8008664:	08008807 	.word	0x08008807
 8008668:	08008807 	.word	0x08008807
 800866c:	08008785 	.word	0x08008785
 8008670:	08008807 	.word	0x08008807
 8008674:	08008807 	.word	0x08008807
 8008678:	08008807 	.word	0x08008807
 800867c:	080087c5 	.word	0x080087c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f992 	bl	80089b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	699a      	ldr	r2, [r3, #24]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0208 	orr.w	r2, r2, #8
 800869a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	699a      	ldr	r2, [r3, #24]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 0204 	bic.w	r2, r2, #4
 80086aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6999      	ldr	r1, [r3, #24]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	619a      	str	r2, [r3, #24]
      break;
 80086be:	e0a5      	b.n	800880c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68b9      	ldr	r1, [r7, #8]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f9e4 	bl	8008a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6999      	ldr	r1, [r3, #24]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	021a      	lsls	r2, r3, #8
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	430a      	orrs	r2, r1
 80086fe:	619a      	str	r2, [r3, #24]
      break;
 8008700:	e084      	b.n	800880c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fa3b 	bl	8008b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	69da      	ldr	r2, [r3, #28]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f042 0208 	orr.w	r2, r2, #8
 800871c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69da      	ldr	r2, [r3, #28]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0204 	bic.w	r2, r2, #4
 800872c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	69d9      	ldr	r1, [r3, #28]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	691a      	ldr	r2, [r3, #16]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	61da      	str	r2, [r3, #28]
      break;
 8008740:	e064      	b.n	800880c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fa91 	bl	8008c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69da      	ldr	r2, [r3, #28]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800875c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69da      	ldr	r2, [r3, #28]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800876c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69d9      	ldr	r1, [r3, #28]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	021a      	lsls	r2, r3, #8
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	61da      	str	r2, [r3, #28]
      break;
 8008782:	e043      	b.n	800880c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fac8 	bl	8008d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0208 	orr.w	r2, r2, #8
 800879e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0204 	bic.w	r2, r2, #4
 80087ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	691a      	ldr	r2, [r3, #16]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087c2:	e023      	b.n	800880c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fafa 	bl	8008dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	021a      	lsls	r2, r3, #8
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008804:	e002      	b.n	800880c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	75fb      	strb	r3, [r7, #23]
      break;
 800880a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop

08008820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a40      	ldr	r2, [pc, #256]	; (8008984 <TIM_Base_SetConfig+0x114>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d013      	beq.n	80088b0 <TIM_Base_SetConfig+0x40>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800888e:	d00f      	beq.n	80088b0 <TIM_Base_SetConfig+0x40>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a3d      	ldr	r2, [pc, #244]	; (8008988 <TIM_Base_SetConfig+0x118>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00b      	beq.n	80088b0 <TIM_Base_SetConfig+0x40>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a3c      	ldr	r2, [pc, #240]	; (800898c <TIM_Base_SetConfig+0x11c>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d007      	beq.n	80088b0 <TIM_Base_SetConfig+0x40>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a3b      	ldr	r2, [pc, #236]	; (8008990 <TIM_Base_SetConfig+0x120>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d003      	beq.n	80088b0 <TIM_Base_SetConfig+0x40>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a3a      	ldr	r2, [pc, #232]	; (8008994 <TIM_Base_SetConfig+0x124>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d108      	bne.n	80088c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a2f      	ldr	r2, [pc, #188]	; (8008984 <TIM_Base_SetConfig+0x114>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d02b      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d0:	d027      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a2c      	ldr	r2, [pc, #176]	; (8008988 <TIM_Base_SetConfig+0x118>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d023      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a2b      	ldr	r2, [pc, #172]	; (800898c <TIM_Base_SetConfig+0x11c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d01f      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a2a      	ldr	r2, [pc, #168]	; (8008990 <TIM_Base_SetConfig+0x120>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01b      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a29      	ldr	r2, [pc, #164]	; (8008994 <TIM_Base_SetConfig+0x124>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d017      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a28      	ldr	r2, [pc, #160]	; (8008998 <TIM_Base_SetConfig+0x128>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d013      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a27      	ldr	r2, [pc, #156]	; (800899c <TIM_Base_SetConfig+0x12c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d00f      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <TIM_Base_SetConfig+0x130>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00b      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a25      	ldr	r2, [pc, #148]	; (80089a4 <TIM_Base_SetConfig+0x134>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d007      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <TIM_Base_SetConfig+0x138>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d003      	beq.n	8008922 <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a23      	ldr	r2, [pc, #140]	; (80089ac <TIM_Base_SetConfig+0x13c>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d108      	bne.n	8008934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a0a      	ldr	r2, [pc, #40]	; (8008984 <TIM_Base_SetConfig+0x114>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_Base_SetConfig+0xf8>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a0c      	ldr	r2, [pc, #48]	; (8008994 <TIM_Base_SetConfig+0x124>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d103      	bne.n	8008970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	615a      	str	r2, [r3, #20]
}
 8008976:	bf00      	nop
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	40010000 	.word	0x40010000
 8008988:	40000400 	.word	0x40000400
 800898c:	40000800 	.word	0x40000800
 8008990:	40000c00 	.word	0x40000c00
 8008994:	40010400 	.word	0x40010400
 8008998:	40014000 	.word	0x40014000
 800899c:	40014400 	.word	0x40014400
 80089a0:	40014800 	.word	0x40014800
 80089a4:	40001800 	.word	0x40001800
 80089a8:	40001c00 	.word	0x40001c00
 80089ac:	40002000 	.word	0x40002000

080089b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	f023 0201 	bic.w	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4b2b      	ldr	r3, [pc, #172]	; (8008a88 <TIM_OC1_SetConfig+0xd8>)
 80089dc:	4013      	ands	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0303 	bic.w	r3, r3, #3
 80089e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f023 0302 	bic.w	r3, r3, #2
 80089f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <TIM_OC1_SetConfig+0xdc>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_OC1_SetConfig+0x64>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a20      	ldr	r2, [pc, #128]	; (8008a90 <TIM_OC1_SetConfig+0xe0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d10c      	bne.n	8008a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f023 0308 	bic.w	r3, r3, #8
 8008a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f023 0304 	bic.w	r3, r3, #4
 8008a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <TIM_OC1_SetConfig+0xdc>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d003      	beq.n	8008a3e <TIM_OC1_SetConfig+0x8e>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a15      	ldr	r2, [pc, #84]	; (8008a90 <TIM_OC1_SetConfig+0xe0>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d111      	bne.n	8008a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	621a      	str	r2, [r3, #32]
}
 8008a7c:	bf00      	nop
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	fffeff8f 	.word	0xfffeff8f
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400

08008a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f023 0210 	bic.w	r2, r3, #16
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4b2e      	ldr	r3, [pc, #184]	; (8008b78 <TIM_OC2_SetConfig+0xe4>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	021b      	lsls	r3, r3, #8
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f023 0320 	bic.w	r3, r3, #32
 8008ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a23      	ldr	r2, [pc, #140]	; (8008b7c <TIM_OC2_SetConfig+0xe8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_OC2_SetConfig+0x68>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a22      	ldr	r2, [pc, #136]	; (8008b80 <TIM_OC2_SetConfig+0xec>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d10d      	bne.n	8008b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a18      	ldr	r2, [pc, #96]	; (8008b7c <TIM_OC2_SetConfig+0xe8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_OC2_SetConfig+0x94>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a17      	ldr	r2, [pc, #92]	; (8008b80 <TIM_OC2_SetConfig+0xec>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d113      	bne.n	8008b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	621a      	str	r2, [r3, #32]
}
 8008b6a:	bf00      	nop
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	feff8fff 	.word	0xfeff8fff
 8008b7c:	40010000 	.word	0x40010000
 8008b80:	40010400 	.word	0x40010400

08008b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4b2d      	ldr	r3, [pc, #180]	; (8008c64 <TIM_OC3_SetConfig+0xe0>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a22      	ldr	r2, [pc, #136]	; (8008c68 <TIM_OC3_SetConfig+0xe4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d003      	beq.n	8008bea <TIM_OC3_SetConfig+0x66>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a21      	ldr	r2, [pc, #132]	; (8008c6c <TIM_OC3_SetConfig+0xe8>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d10d      	bne.n	8008c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <TIM_OC3_SetConfig+0xe4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d003      	beq.n	8008c16 <TIM_OC3_SetConfig+0x92>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <TIM_OC3_SetConfig+0xe8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d113      	bne.n	8008c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	621a      	str	r2, [r3, #32]
}
 8008c58:	bf00      	nop
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	fffeff8f 	.word	0xfffeff8f
 8008c68:	40010000 	.word	0x40010000
 8008c6c:	40010400 	.word	0x40010400

08008c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <TIM_OC4_SetConfig+0xa4>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	031b      	lsls	r3, r3, #12
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a13      	ldr	r2, [pc, #76]	; (8008d18 <TIM_OC4_SetConfig+0xa8>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d003      	beq.n	8008cd8 <TIM_OC4_SetConfig+0x68>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a12      	ldr	r2, [pc, #72]	; (8008d1c <TIM_OC4_SetConfig+0xac>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d109      	bne.n	8008cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	019b      	lsls	r3, r3, #6
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	feff8fff 	.word	0xfeff8fff
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40010400 	.word	0x40010400

08008d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <TIM_OC5_SetConfig+0x98>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	041b      	lsls	r3, r3, #16
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a12      	ldr	r2, [pc, #72]	; (8008dbc <TIM_OC5_SetConfig+0x9c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d003      	beq.n	8008d7e <TIM_OC5_SetConfig+0x5e>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a11      	ldr	r2, [pc, #68]	; (8008dc0 <TIM_OC5_SetConfig+0xa0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d109      	bne.n	8008d92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	621a      	str	r2, [r3, #32]
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	fffeff8f 	.word	0xfffeff8f
 8008dbc:	40010000 	.word	0x40010000
 8008dc0:	40010400 	.word	0x40010400

08008dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4b1c      	ldr	r3, [pc, #112]	; (8008e60 <TIM_OC6_SetConfig+0x9c>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	051b      	lsls	r3, r3, #20
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a13      	ldr	r2, [pc, #76]	; (8008e64 <TIM_OC6_SetConfig+0xa0>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d003      	beq.n	8008e24 <TIM_OC6_SetConfig+0x60>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a12      	ldr	r2, [pc, #72]	; (8008e68 <TIM_OC6_SetConfig+0xa4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d109      	bne.n	8008e38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	feff8fff 	.word	0xfeff8fff
 8008e64:	40010000 	.word	0x40010000
 8008e68:	40010400 	.word	0x40010400

08008e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d101      	bne.n	8008e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e06d      	b.n	8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a30      	ldr	r2, [pc, #192]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a2f      	ldr	r2, [pc, #188]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d108      	bne.n	8008eca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ebe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a20      	ldr	r2, [pc, #128]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d022      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef6:	d01d      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d018      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1c      	ldr	r2, [pc, #112]	; (8008f78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1a      	ldr	r2, [pc, #104]	; (8008f7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00e      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a15      	ldr	r2, [pc, #84]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d009      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a16      	ldr	r2, [pc, #88]	; (8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d004      	beq.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a15      	ldr	r2, [pc, #84]	; (8008f84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d10c      	bne.n	8008f4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	40010000 	.word	0x40010000
 8008f70:	40010400 	.word	0x40010400
 8008f74:	40000400 	.word	0x40000400
 8008f78:	40000800 	.word	0x40000800
 8008f7c:	40000c00 	.word	0x40000c00
 8008f80:	40014000 	.word	0x40014000
 8008f84:	40001800 	.word	0x40001800

08008f88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e065      	b.n	8009070 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	041b      	lsls	r3, r3, #16
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a16      	ldr	r2, [pc, #88]	; (800907c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d004      	beq.n	8009032 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a14      	ldr	r2, [pc, #80]	; (8009080 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d115      	bne.n	800905e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	051b      	lsls	r3, r3, #20
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	40010000 	.word	0x40010000
 8009080:	40010400 	.word	0x40010400

08009084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e040      	b.n	8009154 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d106      	bne.n	80090e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7fa fd84 	bl	8003bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2224      	movs	r2, #36	; 0x24
 80090ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0201 	bic.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fd32 	bl	8009b68 <UART_SetConfig>
 8009104:	4603      	mov	r3, r0
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e022      	b.n	8009154 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 ff8a 	bl	800a030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800912a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800913a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f811 	bl	800a174 <UART_CheckIdleState>
 8009152:	4603      	mov	r3, r0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af02      	add	r7, sp, #8
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	4613      	mov	r3, r2
 800916a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009170:	2b20      	cmp	r3, #32
 8009172:	d171      	bne.n	8009258 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_UART_Transmit+0x24>
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	e06a      	b.n	800925a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2221      	movs	r2, #33	; 0x21
 8009190:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009192:	f7fa fe47 	bl	8003e24 <HAL_GetTick>
 8009196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	88fa      	ldrh	r2, [r7, #6]
 80091a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b0:	d108      	bne.n	80091c4 <HAL_UART_Transmit+0x68>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	61bb      	str	r3, [r7, #24]
 80091c2:	e003      	b.n	80091cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091cc:	e02c      	b.n	8009228 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2200      	movs	r2, #0
 80091d6:	2180      	movs	r1, #128	; 0x80
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f001 f818 	bl	800a20e <UART_WaitOnFlagUntilTimeout>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e038      	b.n	800925a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	3302      	adds	r3, #2
 8009202:	61bb      	str	r3, [r7, #24]
 8009204:	e007      	b.n	8009216 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	3301      	adds	r3, #1
 8009214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1cc      	bne.n	80091ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2200      	movs	r2, #0
 800923c:	2140      	movs	r1, #64	; 0x40
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 ffe5 	bl	800a20e <UART_WaitOnFlagUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e005      	b.n	800925a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2220      	movs	r2, #32
 8009252:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	e000      	b.n	800925a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009258:	2302      	movs	r3, #2
  }
}
 800925a:	4618      	mov	r0, r3
 800925c:	3720      	adds	r7, #32
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	4613      	mov	r3, r2
 8009270:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009276:	2b20      	cmp	r3, #32
 8009278:	d165      	bne.n	8009346 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <HAL_UART_Transmit_DMA+0x22>
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e05e      	b.n	8009348 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2221      	movs	r2, #33	; 0x21
 80092ac:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d027      	beq.n	8009306 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	4a25      	ldr	r2, [pc, #148]	; (8009350 <HAL_UART_Transmit_DMA+0xec>)
 80092bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	4a24      	ldr	r2, [pc, #144]	; (8009354 <HAL_UART_Transmit_DMA+0xf0>)
 80092c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	4a23      	ldr	r2, [pc, #140]	; (8009358 <HAL_UART_Transmit_DMA+0xf4>)
 80092cc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d2:	2200      	movs	r2, #0
 80092d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092de:	4619      	mov	r1, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3328      	adds	r3, #40	; 0x28
 80092e6:	461a      	mov	r2, r3
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	f7fb fdb7 	bl	8004e5c <HAL_DMA_Start_IT>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d008      	beq.n	8009306 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2210      	movs	r2, #16
 80092f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e020      	b.n	8009348 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2240      	movs	r2, #64	; 0x40
 800930c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3308      	adds	r3, #8
 8009314:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	613b      	str	r3, [r7, #16]
   return(result);
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932e:	623a      	str	r2, [r7, #32]
 8009330:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	69f9      	ldr	r1, [r7, #28]
 8009334:	6a3a      	ldr	r2, [r7, #32]
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	61bb      	str	r3, [r7, #24]
   return(result);
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e5      	bne.n	800930e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	e000      	b.n	8009348 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009346:	2302      	movs	r3, #2
  }
}
 8009348:	4618      	mov	r0, r3
 800934a:	3728      	adds	r7, #40	; 0x28
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	0800a5f1 	.word	0x0800a5f1
 8009354:	0800a687 	.word	0x0800a687
 8009358:	0800a809 	.word	0x0800a809

0800935c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08a      	sub	sp, #40	; 0x28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009370:	2b20      	cmp	r3, #32
 8009372:	d132      	bne.n	80093da <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <HAL_UART_Receive_DMA+0x24>
 800937a:	88fb      	ldrh	r3, [r7, #6]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e02b      	b.n	80093dc <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d018      	beq.n	80093ca <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	613b      	str	r3, [r7, #16]
   return(result);
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	623b      	str	r3, [r7, #32]
 80093b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	69f9      	ldr	r1, [r7, #28]
 80093bc:	6a3a      	ldr	r2, [r7, #32]
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e6      	bne.n	8009398 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	461a      	mov	r2, r3
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 ffe3 	bl	800a39c <UART_Start_Receive_DMA>
 80093d6:	4603      	mov	r3, r0
 80093d8:	e000      	b.n	80093dc <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80093da:	2302      	movs	r3, #2
  }
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3728      	adds	r7, #40	; 0x28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b090      	sub	sp, #64	; 0x40
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093f8:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009404:	2b80      	cmp	r3, #128	; 0x80
 8009406:	d139      	bne.n	800947c <HAL_UART_DMAStop+0x98>
 8009408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940a:	2b21      	cmp	r3, #33	; 0x21
 800940c:	d136      	bne.n	800947c <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	61fb      	str	r3, [r7, #28]
   return(result);
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e5      	bne.n	800940e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009446:	2b00      	cmp	r3, #0
 8009448:	d015      	beq.n	8009476 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944e:	4618      	mov	r0, r3
 8009450:	f7fb fd64 	bl	8004f1c <HAL_DMA_Abort>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945e:	4618      	mov	r0, r3
 8009460:	f7fb ff78 	bl	8005354 <HAL_DMA_GetError>
 8009464:	4603      	mov	r3, r0
 8009466:	2b20      	cmp	r3, #32
 8009468:	d105      	bne.n	8009476 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2210      	movs	r2, #16
 800946e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e044      	b.n	8009500 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f001 f830 	bl	800a4dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b40      	cmp	r3, #64	; 0x40
 8009488:	d139      	bne.n	80094fe <HAL_UART_DMAStop+0x11a>
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	2b22      	cmp	r3, #34	; 0x22
 800948e:	d136      	bne.n	80094fe <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3308      	adds	r3, #8
 8009496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	e853 3f00 	ldrex	r3, [r3]
 800949e:	60bb      	str	r3, [r7, #8]
   return(result);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a6:	633b      	str	r3, [r7, #48]	; 0x30
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3308      	adds	r3, #8
 80094ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b0:	61ba      	str	r2, [r7, #24]
 80094b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b4:	6979      	ldr	r1, [r7, #20]
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	e841 2300 	strex	r3, r2, [r1]
 80094bc:	613b      	str	r3, [r7, #16]
   return(result);
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1e5      	bne.n	8009490 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d015      	beq.n	80094f8 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fb fd23 	bl	8004f1c <HAL_DMA_Abort>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00d      	beq.n	80094f8 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fb ff37 	bl	8005354 <HAL_DMA_GetError>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	d105      	bne.n	80094f8 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2210      	movs	r2, #16
 80094f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e003      	b.n	8009500 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f815 	bl	800a528 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3740      	adds	r7, #64	; 0x40
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b0ba      	sub	sp, #232	; 0xe8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800952e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009532:	f640 030f 	movw	r3, #2063	; 0x80f
 8009536:	4013      	ands	r3, r2
 8009538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800953c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d115      	bne.n	8009570 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009548:	f003 0320 	and.w	r3, r3, #32
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00f      	beq.n	8009570 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d009      	beq.n	8009570 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 82ac 	beq.w	8009abe <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
      }
      return;
 800956e:	e2a6      	b.n	8009abe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8117 	beq.w	80097a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800957a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800958a:	4b85      	ldr	r3, [pc, #532]	; (80097a0 <HAL_UART_IRQHandler+0x298>)
 800958c:	4013      	ands	r3, r2
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 810a 	beq.w	80097a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d011      	beq.n	80095c4 <HAL_UART_IRQHandler+0xbc>
 80095a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ba:	f043 0201 	orr.w	r2, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d011      	beq.n	80095f4 <HAL_UART_IRQHandler+0xec>
 80095d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2202      	movs	r2, #2
 80095e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ea:	f043 0204 	orr.w	r2, r3, #4
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d011      	beq.n	8009624 <HAL_UART_IRQHandler+0x11c>
 8009600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2204      	movs	r2, #4
 8009612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800961a:	f043 0202 	orr.w	r2, r3, #2
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009628:	f003 0308 	and.w	r3, r3, #8
 800962c:	2b00      	cmp	r3, #0
 800962e:	d017      	beq.n	8009660 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009634:	f003 0320 	and.w	r3, r3, #32
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800963c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2208      	movs	r2, #8
 800964e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009656:	f043 0208 	orr.w	r2, r3, #8
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009668:	2b00      	cmp	r3, #0
 800966a:	d012      	beq.n	8009692 <HAL_UART_IRQHandler+0x18a>
 800966c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009688:	f043 0220 	orr.w	r2, r3, #32
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8212 	beq.w	8009ac2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800969e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d007      	beq.n	80096c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096da:	2b40      	cmp	r3, #64	; 0x40
 80096dc:	d005      	beq.n	80096ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d04f      	beq.n	800978a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 ff1c 	bl	800a528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096fa:	2b40      	cmp	r3, #64	; 0x40
 80096fc:	d141      	bne.n	8009782 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3308      	adds	r3, #8
 8009704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800971c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3308      	adds	r3, #8
 8009726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800972a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800972e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1d9      	bne.n	80096fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800974e:	2b00      	cmp	r3, #0
 8009750:	d013      	beq.n	800977a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009756:	4a13      	ldr	r2, [pc, #76]	; (80097a4 <HAL_UART_IRQHandler+0x29c>)
 8009758:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975e:	4618      	mov	r0, r3
 8009760:	f7fb fc4c 	bl	8004ffc <HAL_DMA_Abort_IT>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d017      	beq.n	800979a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009778:	e00f      	b.n	800979a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f9d4 	bl	8009b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009780:	e00b      	b.n	800979a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f9d0 	bl	8009b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009788:	e007      	b.n	800979a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f9cc 	bl	8009b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009798:	e193      	b.n	8009ac2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800979a:	bf00      	nop
    return;
 800979c:	e191      	b.n	8009ac2 <HAL_UART_IRQHandler+0x5ba>
 800979e:	bf00      	nop
 80097a0:	04000120 	.word	0x04000120
 80097a4:	0800a887 	.word	0x0800a887

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	f040 814c 	bne.w	8009a4a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b6:	f003 0310 	and.w	r3, r3, #16
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 8145 	beq.w	8009a4a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 813e 	beq.w	8009a4a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2210      	movs	r2, #16
 80097d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e0:	2b40      	cmp	r3, #64	; 0x40
 80097e2:	f040 80b6 	bne.w	8009952 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 8165 	beq.w	8009ac6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009806:	429a      	cmp	r2, r3
 8009808:	f080 815d 	bcs.w	8009ac6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009820:	f000 8086 	beq.w	8009930 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800983c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	461a      	mov	r2, r3
 800984a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800984e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800985a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1da      	bne.n	8009824 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3308      	adds	r3, #8
 8009874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800987e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009880:	f023 0301 	bic.w	r3, r3, #1
 8009884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3308      	adds	r3, #8
 800988e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800989a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e1      	bne.n	800986e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098b4:	e853 3f00 	ldrex	r3, [r3]
 80098b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3308      	adds	r3, #8
 80098ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80098ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e3      	bne.n	80098aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2220      	movs	r2, #32
 80098e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009900:	f023 0310 	bic.w	r3, r3, #16
 8009904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009912:	65bb      	str	r3, [r7, #88]	; 0x58
 8009914:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e4      	bne.n	80098f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992a:	4618      	mov	r0, r3
 800992c:	f7fb faf6 	bl	8004f1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009942:	b29b      	uxth	r3, r3
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	b29b      	uxth	r3, r3
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f8f6 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009950:	e0b9      	b.n	8009ac6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800995e:	b29b      	uxth	r3, r3
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80ab 	beq.w	8009aca <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8009974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 80a6 	beq.w	8009aca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099a0:	647b      	str	r3, [r7, #68]	; 0x44
 80099a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e4      	bne.n	800997e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3308      	adds	r3, #8
 80099ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	623b      	str	r3, [r7, #32]
   return(result);
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	f023 0301 	bic.w	r3, r3, #1
 80099ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099d8:	633a      	str	r2, [r7, #48]	; 0x30
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e3      	bne.n	80099b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f023 0310 	bic.w	r3, r3, #16
 8009a14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a22:	61fb      	str	r3, [r7, #28]
 8009a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	69b9      	ldr	r1, [r7, #24]
 8009a28:	69fa      	ldr	r2, [r7, #28]
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e4      	bne.n	8009a00 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f87a 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a48:	e03f      	b.n	8009aca <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00e      	beq.n	8009a74 <HAL_UART_IRQHandler+0x56c>
 8009a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d008      	beq.n	8009a74 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f871 	bl	8009b54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a72:	e02d      	b.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00e      	beq.n	8009a9e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d008      	beq.n	8009a9e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01c      	beq.n	8009ace <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	4798      	blx	r3
    }
    return;
 8009a9c:	e017      	b.n	8009ace <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d012      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
 8009aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00c      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fefb 	bl	800a8b2 <UART_EndTransmit_IT>
    return;
 8009abc:	e008      	b.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009abe:	bf00      	nop
 8009ac0:	e006      	b.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8009ac2:	bf00      	nop
 8009ac4:	e004      	b.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009ac6:	bf00      	nop
 8009ac8:	e002      	b.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009aca:	bf00      	nop
 8009acc:	e000      	b.n	8009ad0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8009ace:	bf00      	nop
  }

}
 8009ad0:	37e8      	adds	r7, #232	; 0xe8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop

08009ad8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	4ba6      	ldr	r3, [pc, #664]	; (8009e2c <UART_SetConfig+0x2c4>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	6812      	ldr	r2, [r2, #0]
 8009b9a:	6979      	ldr	r1, [r7, #20]
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a94      	ldr	r2, [pc, #592]	; (8009e30 <UART_SetConfig+0x2c8>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d120      	bne.n	8009c26 <UART_SetConfig+0xbe>
 8009be4:	4b93      	ldr	r3, [pc, #588]	; (8009e34 <UART_SetConfig+0x2cc>)
 8009be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d816      	bhi.n	8009c20 <UART_SetConfig+0xb8>
 8009bf2:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <UART_SetConfig+0x90>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c09 	.word	0x08009c09
 8009bfc:	08009c15 	.word	0x08009c15
 8009c00:	08009c0f 	.word	0x08009c0f
 8009c04:	08009c1b 	.word	0x08009c1b
 8009c08:	2301      	movs	r3, #1
 8009c0a:	77fb      	strb	r3, [r7, #31]
 8009c0c:	e150      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	77fb      	strb	r3, [r7, #31]
 8009c12:	e14d      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c14:	2304      	movs	r3, #4
 8009c16:	77fb      	strb	r3, [r7, #31]
 8009c18:	e14a      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c1a:	2308      	movs	r3, #8
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	e147      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c20:	2310      	movs	r3, #16
 8009c22:	77fb      	strb	r3, [r7, #31]
 8009c24:	e144      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a83      	ldr	r2, [pc, #524]	; (8009e38 <UART_SetConfig+0x2d0>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d132      	bne.n	8009c96 <UART_SetConfig+0x12e>
 8009c30:	4b80      	ldr	r3, [pc, #512]	; (8009e34 <UART_SetConfig+0x2cc>)
 8009c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c36:	f003 030c 	and.w	r3, r3, #12
 8009c3a:	2b0c      	cmp	r3, #12
 8009c3c:	d828      	bhi.n	8009c90 <UART_SetConfig+0x128>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0xdc>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009c79 	.word	0x08009c79
 8009c48:	08009c91 	.word	0x08009c91
 8009c4c:	08009c91 	.word	0x08009c91
 8009c50:	08009c91 	.word	0x08009c91
 8009c54:	08009c85 	.word	0x08009c85
 8009c58:	08009c91 	.word	0x08009c91
 8009c5c:	08009c91 	.word	0x08009c91
 8009c60:	08009c91 	.word	0x08009c91
 8009c64:	08009c7f 	.word	0x08009c7f
 8009c68:	08009c91 	.word	0x08009c91
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009c91 	.word	0x08009c91
 8009c74:	08009c8b 	.word	0x08009c8b
 8009c78:	2300      	movs	r3, #0
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e118      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	77fb      	strb	r3, [r7, #31]
 8009c82:	e115      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c84:	2304      	movs	r3, #4
 8009c86:	77fb      	strb	r3, [r7, #31]
 8009c88:	e112      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	77fb      	strb	r3, [r7, #31]
 8009c8e:	e10f      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c90:	2310      	movs	r3, #16
 8009c92:	77fb      	strb	r3, [r7, #31]
 8009c94:	e10c      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a68      	ldr	r2, [pc, #416]	; (8009e3c <UART_SetConfig+0x2d4>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d120      	bne.n	8009ce2 <UART_SetConfig+0x17a>
 8009ca0:	4b64      	ldr	r3, [pc, #400]	; (8009e34 <UART_SetConfig+0x2cc>)
 8009ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009caa:	2b30      	cmp	r3, #48	; 0x30
 8009cac:	d013      	beq.n	8009cd6 <UART_SetConfig+0x16e>
 8009cae:	2b30      	cmp	r3, #48	; 0x30
 8009cb0:	d814      	bhi.n	8009cdc <UART_SetConfig+0x174>
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d009      	beq.n	8009cca <UART_SetConfig+0x162>
 8009cb6:	2b20      	cmp	r3, #32
 8009cb8:	d810      	bhi.n	8009cdc <UART_SetConfig+0x174>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <UART_SetConfig+0x15c>
 8009cbe:	2b10      	cmp	r3, #16
 8009cc0:	d006      	beq.n	8009cd0 <UART_SetConfig+0x168>
 8009cc2:	e00b      	b.n	8009cdc <UART_SetConfig+0x174>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	77fb      	strb	r3, [r7, #31]
 8009cc8:	e0f2      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	77fb      	strb	r3, [r7, #31]
 8009cce:	e0ef      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	77fb      	strb	r3, [r7, #31]
 8009cd4:	e0ec      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	77fb      	strb	r3, [r7, #31]
 8009cda:	e0e9      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	77fb      	strb	r3, [r7, #31]
 8009ce0:	e0e6      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a56      	ldr	r2, [pc, #344]	; (8009e40 <UART_SetConfig+0x2d8>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d120      	bne.n	8009d2e <UART_SetConfig+0x1c6>
 8009cec:	4b51      	ldr	r3, [pc, #324]	; (8009e34 <UART_SetConfig+0x2cc>)
 8009cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8009cf8:	d013      	beq.n	8009d22 <UART_SetConfig+0x1ba>
 8009cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8009cfc:	d814      	bhi.n	8009d28 <UART_SetConfig+0x1c0>
 8009cfe:	2b80      	cmp	r3, #128	; 0x80
 8009d00:	d009      	beq.n	8009d16 <UART_SetConfig+0x1ae>
 8009d02:	2b80      	cmp	r3, #128	; 0x80
 8009d04:	d810      	bhi.n	8009d28 <UART_SetConfig+0x1c0>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <UART_SetConfig+0x1a8>
 8009d0a:	2b40      	cmp	r3, #64	; 0x40
 8009d0c:	d006      	beq.n	8009d1c <UART_SetConfig+0x1b4>
 8009d0e:	e00b      	b.n	8009d28 <UART_SetConfig+0x1c0>
 8009d10:	2300      	movs	r3, #0
 8009d12:	77fb      	strb	r3, [r7, #31]
 8009d14:	e0cc      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d16:	2302      	movs	r3, #2
 8009d18:	77fb      	strb	r3, [r7, #31]
 8009d1a:	e0c9      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d1c:	2304      	movs	r3, #4
 8009d1e:	77fb      	strb	r3, [r7, #31]
 8009d20:	e0c6      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d22:	2308      	movs	r3, #8
 8009d24:	77fb      	strb	r3, [r7, #31]
 8009d26:	e0c3      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	77fb      	strb	r3, [r7, #31]
 8009d2c:	e0c0      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a44      	ldr	r2, [pc, #272]	; (8009e44 <UART_SetConfig+0x2dc>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d125      	bne.n	8009d84 <UART_SetConfig+0x21c>
 8009d38:	4b3e      	ldr	r3, [pc, #248]	; (8009e34 <UART_SetConfig+0x2cc>)
 8009d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d46:	d017      	beq.n	8009d78 <UART_SetConfig+0x210>
 8009d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d4c:	d817      	bhi.n	8009d7e <UART_SetConfig+0x216>
 8009d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d52:	d00b      	beq.n	8009d6c <UART_SetConfig+0x204>
 8009d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d58:	d811      	bhi.n	8009d7e <UART_SetConfig+0x216>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <UART_SetConfig+0x1fe>
 8009d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d62:	d006      	beq.n	8009d72 <UART_SetConfig+0x20a>
 8009d64:	e00b      	b.n	8009d7e <UART_SetConfig+0x216>
 8009d66:	2300      	movs	r3, #0
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e0a1      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	77fb      	strb	r3, [r7, #31]
 8009d70:	e09e      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d72:	2304      	movs	r3, #4
 8009d74:	77fb      	strb	r3, [r7, #31]
 8009d76:	e09b      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	77fb      	strb	r3, [r7, #31]
 8009d7c:	e098      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d7e:	2310      	movs	r3, #16
 8009d80:	77fb      	strb	r3, [r7, #31]
 8009d82:	e095      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a2f      	ldr	r2, [pc, #188]	; (8009e48 <UART_SetConfig+0x2e0>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d125      	bne.n	8009dda <UART_SetConfig+0x272>
 8009d8e:	4b29      	ldr	r3, [pc, #164]	; (8009e34 <UART_SetConfig+0x2cc>)
 8009d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d9c:	d017      	beq.n	8009dce <UART_SetConfig+0x266>
 8009d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009da2:	d817      	bhi.n	8009dd4 <UART_SetConfig+0x26c>
 8009da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009da8:	d00b      	beq.n	8009dc2 <UART_SetConfig+0x25a>
 8009daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dae:	d811      	bhi.n	8009dd4 <UART_SetConfig+0x26c>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <UART_SetConfig+0x254>
 8009db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009db8:	d006      	beq.n	8009dc8 <UART_SetConfig+0x260>
 8009dba:	e00b      	b.n	8009dd4 <UART_SetConfig+0x26c>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	77fb      	strb	r3, [r7, #31]
 8009dc0:	e076      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	77fb      	strb	r3, [r7, #31]
 8009dc6:	e073      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	77fb      	strb	r3, [r7, #31]
 8009dcc:	e070      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009dce:	2308      	movs	r3, #8
 8009dd0:	77fb      	strb	r3, [r7, #31]
 8009dd2:	e06d      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009dd4:	2310      	movs	r3, #16
 8009dd6:	77fb      	strb	r3, [r7, #31]
 8009dd8:	e06a      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a1b      	ldr	r2, [pc, #108]	; (8009e4c <UART_SetConfig+0x2e4>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d138      	bne.n	8009e56 <UART_SetConfig+0x2ee>
 8009de4:	4b13      	ldr	r3, [pc, #76]	; (8009e34 <UART_SetConfig+0x2cc>)
 8009de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009df2:	d017      	beq.n	8009e24 <UART_SetConfig+0x2bc>
 8009df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009df8:	d82a      	bhi.n	8009e50 <UART_SetConfig+0x2e8>
 8009dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dfe:	d00b      	beq.n	8009e18 <UART_SetConfig+0x2b0>
 8009e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e04:	d824      	bhi.n	8009e50 <UART_SetConfig+0x2e8>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <UART_SetConfig+0x2aa>
 8009e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e0e:	d006      	beq.n	8009e1e <UART_SetConfig+0x2b6>
 8009e10:	e01e      	b.n	8009e50 <UART_SetConfig+0x2e8>
 8009e12:	2300      	movs	r3, #0
 8009e14:	77fb      	strb	r3, [r7, #31]
 8009e16:	e04b      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	77fb      	strb	r3, [r7, #31]
 8009e1c:	e048      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009e1e:	2304      	movs	r3, #4
 8009e20:	77fb      	strb	r3, [r7, #31]
 8009e22:	e045      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009e24:	2308      	movs	r3, #8
 8009e26:	77fb      	strb	r3, [r7, #31]
 8009e28:	e042      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009e2a:	bf00      	nop
 8009e2c:	efff69f3 	.word	0xefff69f3
 8009e30:	40011000 	.word	0x40011000
 8009e34:	40023800 	.word	0x40023800
 8009e38:	40004400 	.word	0x40004400
 8009e3c:	40004800 	.word	0x40004800
 8009e40:	40004c00 	.word	0x40004c00
 8009e44:	40005000 	.word	0x40005000
 8009e48:	40011400 	.word	0x40011400
 8009e4c:	40007800 	.word	0x40007800
 8009e50:	2310      	movs	r3, #16
 8009e52:	77fb      	strb	r3, [r7, #31]
 8009e54:	e02c      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a72      	ldr	r2, [pc, #456]	; (800a024 <UART_SetConfig+0x4bc>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d125      	bne.n	8009eac <UART_SetConfig+0x344>
 8009e60:	4b71      	ldr	r3, [pc, #452]	; (800a028 <UART_SetConfig+0x4c0>)
 8009e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009e6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e6e:	d017      	beq.n	8009ea0 <UART_SetConfig+0x338>
 8009e70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e74:	d817      	bhi.n	8009ea6 <UART_SetConfig+0x33e>
 8009e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e7a:	d00b      	beq.n	8009e94 <UART_SetConfig+0x32c>
 8009e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e80:	d811      	bhi.n	8009ea6 <UART_SetConfig+0x33e>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <UART_SetConfig+0x326>
 8009e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e8a:	d006      	beq.n	8009e9a <UART_SetConfig+0x332>
 8009e8c:	e00b      	b.n	8009ea6 <UART_SetConfig+0x33e>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	77fb      	strb	r3, [r7, #31]
 8009e92:	e00d      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009e94:	2302      	movs	r3, #2
 8009e96:	77fb      	strb	r3, [r7, #31]
 8009e98:	e00a      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009e9a:	2304      	movs	r3, #4
 8009e9c:	77fb      	strb	r3, [r7, #31]
 8009e9e:	e007      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	77fb      	strb	r3, [r7, #31]
 8009ea4:	e004      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009ea6:	2310      	movs	r3, #16
 8009ea8:	77fb      	strb	r3, [r7, #31]
 8009eaa:	e001      	b.n	8009eb0 <UART_SetConfig+0x348>
 8009eac:	2310      	movs	r3, #16
 8009eae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eb8:	d15b      	bne.n	8009f72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009eba:	7ffb      	ldrb	r3, [r7, #31]
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d828      	bhi.n	8009f12 <UART_SetConfig+0x3aa>
 8009ec0:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <UART_SetConfig+0x360>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009eed 	.word	0x08009eed
 8009ecc:	08009ef5 	.word	0x08009ef5
 8009ed0:	08009efd 	.word	0x08009efd
 8009ed4:	08009f13 	.word	0x08009f13
 8009ed8:	08009f03 	.word	0x08009f03
 8009edc:	08009f13 	.word	0x08009f13
 8009ee0:	08009f13 	.word	0x08009f13
 8009ee4:	08009f13 	.word	0x08009f13
 8009ee8:	08009f0b 	.word	0x08009f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eec:	f7fd fcb2 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 8009ef0:	61b8      	str	r0, [r7, #24]
        break;
 8009ef2:	e013      	b.n	8009f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ef4:	f7fd fcc2 	bl	800787c <HAL_RCC_GetPCLK2Freq>
 8009ef8:	61b8      	str	r0, [r7, #24]
        break;
 8009efa:	e00f      	b.n	8009f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009efc:	4b4b      	ldr	r3, [pc, #300]	; (800a02c <UART_SetConfig+0x4c4>)
 8009efe:	61bb      	str	r3, [r7, #24]
        break;
 8009f00:	e00c      	b.n	8009f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f02:	f7fd fb95 	bl	8007630 <HAL_RCC_GetSysClockFreq>
 8009f06:	61b8      	str	r0, [r7, #24]
        break;
 8009f08:	e008      	b.n	8009f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f0e:	61bb      	str	r3, [r7, #24]
        break;
 8009f10:	e004      	b.n	8009f1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	77bb      	strb	r3, [r7, #30]
        break;
 8009f1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d074      	beq.n	800a00c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	005a      	lsls	r2, r3, #1
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	085b      	lsrs	r3, r3, #1
 8009f2c:	441a      	add	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b0f      	cmp	r3, #15
 8009f3c:	d916      	bls.n	8009f6c <UART_SetConfig+0x404>
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f44:	d212      	bcs.n	8009f6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	f023 030f 	bic.w	r3, r3, #15
 8009f4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	085b      	lsrs	r3, r3, #1
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	89fb      	ldrh	r3, [r7, #14]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	89fa      	ldrh	r2, [r7, #14]
 8009f68:	60da      	str	r2, [r3, #12]
 8009f6a:	e04f      	b.n	800a00c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	77bb      	strb	r3, [r7, #30]
 8009f70:	e04c      	b.n	800a00c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f72:	7ffb      	ldrb	r3, [r7, #31]
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d828      	bhi.n	8009fca <UART_SetConfig+0x462>
 8009f78:	a201      	add	r2, pc, #4	; (adr r2, 8009f80 <UART_SetConfig+0x418>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	08009fa5 	.word	0x08009fa5
 8009f84:	08009fad 	.word	0x08009fad
 8009f88:	08009fb5 	.word	0x08009fb5
 8009f8c:	08009fcb 	.word	0x08009fcb
 8009f90:	08009fbb 	.word	0x08009fbb
 8009f94:	08009fcb 	.word	0x08009fcb
 8009f98:	08009fcb 	.word	0x08009fcb
 8009f9c:	08009fcb 	.word	0x08009fcb
 8009fa0:	08009fc3 	.word	0x08009fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fa4:	f7fd fc56 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 8009fa8:	61b8      	str	r0, [r7, #24]
        break;
 8009faa:	e013      	b.n	8009fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fac:	f7fd fc66 	bl	800787c <HAL_RCC_GetPCLK2Freq>
 8009fb0:	61b8      	str	r0, [r7, #24]
        break;
 8009fb2:	e00f      	b.n	8009fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fb4:	4b1d      	ldr	r3, [pc, #116]	; (800a02c <UART_SetConfig+0x4c4>)
 8009fb6:	61bb      	str	r3, [r7, #24]
        break;
 8009fb8:	e00c      	b.n	8009fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fba:	f7fd fb39 	bl	8007630 <HAL_RCC_GetSysClockFreq>
 8009fbe:	61b8      	str	r0, [r7, #24]
        break;
 8009fc0:	e008      	b.n	8009fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc6:	61bb      	str	r3, [r7, #24]
        break;
 8009fc8:	e004      	b.n	8009fd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8009fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d018      	beq.n	800a00c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	085a      	lsrs	r2, r3, #1
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	441a      	add	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	2b0f      	cmp	r3, #15
 8009ff2:	d909      	bls.n	800a008 <UART_SetConfig+0x4a0>
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffa:	d205      	bcs.n	800a008 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60da      	str	r2, [r3, #12]
 800a006:	e001      	b.n	800a00c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a018:	7fbb      	ldrb	r3, [r7, #30]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3720      	adds	r7, #32
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	40007c00 	.word	0x40007c00
 800a028:	40023800 	.word	0x40023800
 800a02c:	00f42400 	.word	0x00f42400

0800a030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00a      	beq.n	800a05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	f003 0310 	and.w	r3, r3, #16
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d01a      	beq.n	800a146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12e:	d10a      	bne.n	800a146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	430a      	orrs	r2, r1
 800a144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	605a      	str	r2, [r3, #4]
  }
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af02      	add	r7, sp, #8
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a184:	f7f9 fe4e 	bl	8003e24 <HAL_GetTick>
 800a188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b08      	cmp	r3, #8
 800a196:	d10e      	bne.n	800a1b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f831 	bl	800a20e <UART_WaitOnFlagUntilTimeout>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	e027      	b.n	800a206 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d10e      	bne.n	800a1e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f81b 	bl	800a20e <UART_WaitOnFlagUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e011      	b.n	800a206 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b09c      	sub	sp, #112	; 0x70
 800a212:	af00      	add	r7, sp, #0
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	60b9      	str	r1, [r7, #8]
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	4613      	mov	r3, r2
 800a21c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a21e:	e0a7      	b.n	800a370 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a226:	f000 80a3 	beq.w	800a370 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a22a:	f7f9 fdfb 	bl	8003e24 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a236:	429a      	cmp	r2, r3
 800a238:	d302      	bcc.n	800a240 <UART_WaitOnFlagUntilTimeout+0x32>
 800a23a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d13f      	bne.n	800a2c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a254:	667b      	str	r3, [r7, #100]	; 0x64
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a25e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a260:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a264:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e6      	bne.n	800a240 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3308      	adds	r3, #8
 800a278:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	f023 0301 	bic.w	r3, r3, #1
 800a288:	663b      	str	r3, [r7, #96]	; 0x60
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3308      	adds	r3, #8
 800a290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a292:	64ba      	str	r2, [r7, #72]	; 0x48
 800a294:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a29a:	e841 2300 	strex	r3, r2, [r1]
 800a29e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1e5      	bne.n	800a272 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e068      	b.n	800a392 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d050      	beq.n	800a370 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69db      	ldr	r3, [r3, #28]
 800a2d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2dc:	d148      	bne.n	800a370 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a306:	637b      	str	r3, [r7, #52]	; 0x34
 800a308:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a30c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e6      	bne.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3308      	adds	r3, #8
 800a320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	e853 3f00 	ldrex	r3, [r3]
 800a328:	613b      	str	r3, [r7, #16]
   return(result);
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f023 0301 	bic.w	r3, r3, #1
 800a330:	66bb      	str	r3, [r7, #104]	; 0x68
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a33a:	623a      	str	r2, [r7, #32]
 800a33c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	69f9      	ldr	r1, [r7, #28]
 800a340:	6a3a      	ldr	r2, [r7, #32]
 800a342:	e841 2300 	strex	r3, r2, [r1]
 800a346:	61bb      	str	r3, [r7, #24]
   return(result);
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e5      	bne.n	800a31a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2220      	movs	r2, #32
 800a352:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2220      	movs	r2, #32
 800a358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2220      	movs	r2, #32
 800a360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e010      	b.n	800a392 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	69da      	ldr	r2, [r3, #28]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4013      	ands	r3, r2
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	bf0c      	ite	eq
 800a380:	2301      	moveq	r3, #1
 800a382:	2300      	movne	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	461a      	mov	r2, r3
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	f43f af48 	beq.w	800a220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3770      	adds	r7, #112	; 0x70
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b096      	sub	sp, #88	; 0x58
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	88fa      	ldrh	r2, [r7, #6]
 800a3b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2222      	movs	r2, #34	; 0x22
 800a3c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d028      	beq.n	800a422 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d4:	4a3e      	ldr	r2, [pc, #248]	; (800a4d0 <UART_Start_Receive_DMA+0x134>)
 800a3d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3dc:	4a3d      	ldr	r2, [pc, #244]	; (800a4d4 <UART_Start_Receive_DMA+0x138>)
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e4:	4a3c      	ldr	r2, [pc, #240]	; (800a4d8 <UART_Start_Receive_DMA+0x13c>)
 800a3e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3324      	adds	r3, #36	; 0x24
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a400:	461a      	mov	r2, r3
 800a402:	88fb      	ldrh	r3, [r7, #6]
 800a404:	f7fa fd2a 	bl	8004e5c <HAL_DMA_Start_IT>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d009      	beq.n	800a422 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2210      	movs	r2, #16
 800a412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2220      	movs	r2, #32
 800a41a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e051      	b.n	800a4c6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d018      	beq.n	800a45c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a432:	e853 3f00 	ldrex	r3, [r3]
 800a436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a43e:	657b      	str	r3, [r7, #84]	; 0x54
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	461a      	mov	r2, r3
 800a446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a448:	64bb      	str	r3, [r7, #72]	; 0x48
 800a44a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a44e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a450:	e841 2300 	strex	r3, r2, [r1]
 800a454:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1e6      	bne.n	800a42a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3308      	adds	r3, #8
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	e853 3f00 	ldrex	r3, [r3]
 800a46a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	f043 0301 	orr.w	r3, r3, #1
 800a472:	653b      	str	r3, [r7, #80]	; 0x50
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3308      	adds	r3, #8
 800a47a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a47c:	637a      	str	r2, [r7, #52]	; 0x34
 800a47e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a484:	e841 2300 	strex	r3, r2, [r1]
 800a488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e5      	bne.n	800a45c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3308      	adds	r3, #8
 800a496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	e853 3f00 	ldrex	r3, [r3]
 800a49e:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3308      	adds	r3, #8
 800a4ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4b0:	623a      	str	r2, [r7, #32]
 800a4b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	69f9      	ldr	r1, [r7, #28]
 800a4b6:	6a3a      	ldr	r2, [r7, #32]
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e5      	bne.n	800a490 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3758      	adds	r7, #88	; 0x58
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	0800a6a3 	.word	0x0800a6a3
 800a4d4:	0800a7cb 	.word	0x0800a7cb
 800a4d8:	0800a809 	.word	0x0800a809

0800a4dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b089      	sub	sp, #36	; 0x24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	e853 3f00 	ldrex	r3, [r3]
 800a4f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	61bb      	str	r3, [r7, #24]
 800a504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a506:	6979      	ldr	r1, [r7, #20]
 800a508:	69ba      	ldr	r2, [r7, #24]
 800a50a:	e841 2300 	strex	r3, r2, [r1]
 800a50e:	613b      	str	r3, [r7, #16]
   return(result);
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e6      	bne.n	800a4e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a51c:	bf00      	nop
 800a51e:	3724      	adds	r7, #36	; 0x24
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a528:	b480      	push	{r7}
 800a52a:	b095      	sub	sp, #84	; 0x54
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a544:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54e:	643b      	str	r3, [r7, #64]	; 0x40
 800a550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e6      	bne.n	800a530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3308      	adds	r3, #8
 800a568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	61fb      	str	r3, [r7, #28]
   return(result);
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f023 0301 	bic.w	r3, r3, #1
 800a578:	64bb      	str	r3, [r7, #72]	; 0x48
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3308      	adds	r3, #8
 800a580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a582:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e5      	bne.n	800a562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d118      	bne.n	800a5d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f023 0310 	bic.w	r3, r3, #16
 800a5b2:	647b      	str	r3, [r7, #68]	; 0x44
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5bc:	61bb      	str	r3, [r7, #24]
 800a5be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	6979      	ldr	r1, [r7, #20]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e6      	bne.n	800a59e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a5e4:	bf00      	nop
 800a5e6:	3754      	adds	r7, #84	; 0x54
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b090      	sub	sp, #64	; 0x40
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a606:	d037      	beq.n	800a678 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3308      	adds	r3, #8
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	623b      	str	r3, [r7, #32]
   return(result);
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a626:	63bb      	str	r3, [r7, #56]	; 0x38
 800a628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3308      	adds	r3, #8
 800a62e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a630:	633a      	str	r2, [r7, #48]	; 0x30
 800a632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a638:	e841 2300 	strex	r3, r2, [r1]
 800a63c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e5      	bne.n	800a610 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	60fb      	str	r3, [r7, #12]
   return(result);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a658:	637b      	str	r3, [r7, #52]	; 0x34
 800a65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a662:	61fb      	str	r3, [r7, #28]
 800a664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a666:	69b9      	ldr	r1, [r7, #24]
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	617b      	str	r3, [r7, #20]
   return(result);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1e6      	bne.n	800a644 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a676:	e002      	b.n	800a67e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a678:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a67a:	f7ff fa2d 	bl	8009ad8 <HAL_UART_TxCpltCallback>
}
 800a67e:	bf00      	nop
 800a680:	3740      	adds	r7, #64	; 0x40
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a692:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f7ff fa29 	bl	8009aec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a69a:	bf00      	nop
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b09c      	sub	sp, #112	; 0x70
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b8:	d071      	beq.n	800a79e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6e8:	e841 2300 	strex	r3, r2, [r1]
 800a6ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e6      	bne.n	800a6c2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	667b      	str	r3, [r7, #100]	; 0x64
 800a70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3308      	adds	r3, #8
 800a712:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a714:	647a      	str	r2, [r7, #68]	; 0x44
 800a716:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a71a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e5      	bne.n	800a6f4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3308      	adds	r3, #8
 800a72e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	e853 3f00 	ldrex	r3, [r3]
 800a736:	623b      	str	r3, [r7, #32]
   return(result);
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a73e:	663b      	str	r3, [r7, #96]	; 0x60
 800a740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3308      	adds	r3, #8
 800a746:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a748:	633a      	str	r2, [r7, #48]	; 0x30
 800a74a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a74e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e5      	bne.n	800a728 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a75c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75e:	2220      	movs	r2, #32
 800a760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d118      	bne.n	800a79e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a76c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	e853 3f00 	ldrex	r3, [r3]
 800a778:	60fb      	str	r3, [r7, #12]
   return(result);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f023 0310 	bic.w	r3, r3, #16
 800a780:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a78a:	61fb      	str	r3, [r7, #28]
 800a78c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78e:	69b9      	ldr	r1, [r7, #24]
 800a790:	69fa      	ldr	r2, [r7, #28]
 800a792:	e841 2300 	strex	r3, r2, [r1]
 800a796:	617b      	str	r3, [r7, #20]
   return(result);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e6      	bne.n	800a76c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d107      	bne.n	800a7bc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7b6:	f7ff f9c1 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7ba:	e002      	b.n	800a7c2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a7bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7be:	f7ff f99f 	bl	8009b00 <HAL_UART_RxCpltCallback>
}
 800a7c2:	bf00      	nop
 800a7c4:	3770      	adds	r7, #112	; 0x70
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d109      	bne.n	800a7fa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a7ec:	085b      	lsrs	r3, r3, #1
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff f9a2 	bl	8009b3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7f8:	e002      	b.n	800a800 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f7ff f98a 	bl	8009b14 <HAL_UART_RxHalfCpltCallback>
}
 800a800:	bf00      	nop
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a814:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a81a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a822:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a82e:	2b80      	cmp	r3, #128	; 0x80
 800a830:	d109      	bne.n	800a846 <UART_DMAError+0x3e>
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2b21      	cmp	r3, #33	; 0x21
 800a836:	d106      	bne.n	800a846 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a840:	6978      	ldr	r0, [r7, #20]
 800a842:	f7ff fe4b 	bl	800a4dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a850:	2b40      	cmp	r3, #64	; 0x40
 800a852:	d109      	bne.n	800a868 <UART_DMAError+0x60>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b22      	cmp	r3, #34	; 0x22
 800a858:	d106      	bne.n	800a868 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a862:	6978      	ldr	r0, [r7, #20]
 800a864:	f7ff fe60 	bl	800a528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a86e:	f043 0210 	orr.w	r2, r3, #16
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a878:	6978      	ldr	r0, [r7, #20]
 800a87a:	f7ff f955 	bl	8009b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a87e:	bf00      	nop
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b084      	sub	sp, #16
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7ff f93f 	bl	8009b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b088      	sub	sp, #32
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	e853 3f00 	ldrex	r3, [r3]
 800a8c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	61bb      	str	r3, [r7, #24]
 800a8da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6979      	ldr	r1, [r7, #20]
 800a8de:	69ba      	ldr	r2, [r7, #24]
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e6      	bne.n	800a8ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff f8ed 	bl	8009ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8fe:	bf00      	nop
 800a900:	3720      	adds	r7, #32
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a908:	b084      	sub	sp, #16
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	f107 001c 	add.w	r0, r7, #28
 800a916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d120      	bne.n	800a962 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	4b20      	ldr	r3, [pc, #128]	; (800a9b4 <USB_CoreInit+0xac>)
 800a932:	4013      	ands	r3, r2
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a946:	2b01      	cmp	r3, #1
 800a948:	d105      	bne.n	800a956 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 fbee 	bl	800c138 <USB_CoreReset>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73fb      	strb	r3, [r7, #15]
 800a960:	e010      	b.n	800a984 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f001 fbe2 	bl	800c138 <USB_CoreReset>
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a986:	2b01      	cmp	r3, #1
 800a988:	d10b      	bne.n	800a9a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f043 0206 	orr.w	r2, r3, #6
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	f043 0220 	orr.w	r2, r3, #32
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9ae:	b004      	add	sp, #16
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	ffbdffbf 	.word	0xffbdffbf

0800a9b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b087      	sub	sp, #28
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d165      	bne.n	800aa98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4a41      	ldr	r2, [pc, #260]	; (800aad4 <USB_SetTurnaroundTime+0x11c>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d906      	bls.n	800a9e2 <USB_SetTurnaroundTime+0x2a>
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	4a40      	ldr	r2, [pc, #256]	; (800aad8 <USB_SetTurnaroundTime+0x120>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d202      	bcs.n	800a9e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a9dc:	230f      	movs	r3, #15
 800a9de:	617b      	str	r3, [r7, #20]
 800a9e0:	e062      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	4a3c      	ldr	r2, [pc, #240]	; (800aad8 <USB_SetTurnaroundTime+0x120>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d306      	bcc.n	800a9f8 <USB_SetTurnaroundTime+0x40>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	4a3b      	ldr	r2, [pc, #236]	; (800aadc <USB_SetTurnaroundTime+0x124>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d202      	bcs.n	800a9f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a9f2:	230e      	movs	r3, #14
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	e057      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	4a38      	ldr	r2, [pc, #224]	; (800aadc <USB_SetTurnaroundTime+0x124>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d306      	bcc.n	800aa0e <USB_SetTurnaroundTime+0x56>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	4a37      	ldr	r2, [pc, #220]	; (800aae0 <USB_SetTurnaroundTime+0x128>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d202      	bcs.n	800aa0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aa08:	230d      	movs	r3, #13
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	e04c      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	4a33      	ldr	r2, [pc, #204]	; (800aae0 <USB_SetTurnaroundTime+0x128>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d306      	bcc.n	800aa24 <USB_SetTurnaroundTime+0x6c>
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	4a32      	ldr	r2, [pc, #200]	; (800aae4 <USB_SetTurnaroundTime+0x12c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d802      	bhi.n	800aa24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aa1e:	230c      	movs	r3, #12
 800aa20:	617b      	str	r3, [r7, #20]
 800aa22:	e041      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	4a2f      	ldr	r2, [pc, #188]	; (800aae4 <USB_SetTurnaroundTime+0x12c>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d906      	bls.n	800aa3a <USB_SetTurnaroundTime+0x82>
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	4a2e      	ldr	r2, [pc, #184]	; (800aae8 <USB_SetTurnaroundTime+0x130>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d802      	bhi.n	800aa3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aa34:	230b      	movs	r3, #11
 800aa36:	617b      	str	r3, [r7, #20]
 800aa38:	e036      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4a2a      	ldr	r2, [pc, #168]	; (800aae8 <USB_SetTurnaroundTime+0x130>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d906      	bls.n	800aa50 <USB_SetTurnaroundTime+0x98>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	4a29      	ldr	r2, [pc, #164]	; (800aaec <USB_SetTurnaroundTime+0x134>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d802      	bhi.n	800aa50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aa4a:	230a      	movs	r3, #10
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	e02b      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	4a26      	ldr	r2, [pc, #152]	; (800aaec <USB_SetTurnaroundTime+0x134>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d906      	bls.n	800aa66 <USB_SetTurnaroundTime+0xae>
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4a25      	ldr	r2, [pc, #148]	; (800aaf0 <USB_SetTurnaroundTime+0x138>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d202      	bcs.n	800aa66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aa60:	2309      	movs	r3, #9
 800aa62:	617b      	str	r3, [r7, #20]
 800aa64:	e020      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4a21      	ldr	r2, [pc, #132]	; (800aaf0 <USB_SetTurnaroundTime+0x138>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d306      	bcc.n	800aa7c <USB_SetTurnaroundTime+0xc4>
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	4a20      	ldr	r2, [pc, #128]	; (800aaf4 <USB_SetTurnaroundTime+0x13c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d802      	bhi.n	800aa7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aa76:	2308      	movs	r3, #8
 800aa78:	617b      	str	r3, [r7, #20]
 800aa7a:	e015      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4a1d      	ldr	r2, [pc, #116]	; (800aaf4 <USB_SetTurnaroundTime+0x13c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d906      	bls.n	800aa92 <USB_SetTurnaroundTime+0xda>
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	4a1c      	ldr	r2, [pc, #112]	; (800aaf8 <USB_SetTurnaroundTime+0x140>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d202      	bcs.n	800aa92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aa8c:	2307      	movs	r3, #7
 800aa8e:	617b      	str	r3, [r7, #20]
 800aa90:	e00a      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aa92:	2306      	movs	r3, #6
 800aa94:	617b      	str	r3, [r7, #20]
 800aa96:	e007      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aa9e:	2309      	movs	r3, #9
 800aaa0:	617b      	str	r3, [r7, #20]
 800aaa2:	e001      	b.n	800aaa8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aaa4:	2309      	movs	r3, #9
 800aaa6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68da      	ldr	r2, [r3, #12]
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	029b      	lsls	r3, r3, #10
 800aabc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800aac0:	431a      	orrs	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	00d8acbf 	.word	0x00d8acbf
 800aad8:	00e4e1c0 	.word	0x00e4e1c0
 800aadc:	00f42400 	.word	0x00f42400
 800aae0:	01067380 	.word	0x01067380
 800aae4:	011a499f 	.word	0x011a499f
 800aae8:	01312cff 	.word	0x01312cff
 800aaec:	014ca43f 	.word	0x014ca43f
 800aaf0:	016e3600 	.word	0x016e3600
 800aaf4:	01a6ab1f 	.word	0x01a6ab1f
 800aaf8:	01e84800 	.word	0x01e84800

0800aafc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f043 0201 	orr.w	r2, r3, #1
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f023 0201 	bic.w	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d115      	bne.n	800ab8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ab6e:	2001      	movs	r0, #1
 800ab70:	f7f9 f964 	bl	8003e3c <HAL_Delay>
      ms++;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3301      	adds	r3, #1
 800ab78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f001 fa4b 	bl	800c016 <USB_GetMode>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d01e      	beq.n	800abc4 <USB_SetCurrentMode+0x84>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b31      	cmp	r3, #49	; 0x31
 800ab8a:	d9f0      	bls.n	800ab6e <USB_SetCurrentMode+0x2e>
 800ab8c:	e01a      	b.n	800abc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab8e:	78fb      	ldrb	r3, [r7, #3]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d115      	bne.n	800abc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aba0:	2001      	movs	r0, #1
 800aba2:	f7f9 f94b 	bl	8003e3c <HAL_Delay>
      ms++;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3301      	adds	r3, #1
 800abaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f001 fa32 	bl	800c016 <USB_GetMode>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <USB_SetCurrentMode+0x84>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b31      	cmp	r3, #49	; 0x31
 800abbc:	d9f0      	bls.n	800aba0 <USB_SetCurrentMode+0x60>
 800abbe:	e001      	b.n	800abc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e005      	b.n	800abd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b32      	cmp	r3, #50	; 0x32
 800abc8:	d101      	bne.n	800abce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abd8:	b084      	sub	sp, #16
 800abda:	b580      	push	{r7, lr}
 800abdc:	b086      	sub	sp, #24
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800abe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abf2:	2300      	movs	r3, #0
 800abf4:	613b      	str	r3, [r7, #16]
 800abf6:	e009      	b.n	800ac0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	3340      	adds	r3, #64	; 0x40
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	613b      	str	r3, [r7, #16]
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b0e      	cmp	r3, #14
 800ac10:	d9f2      	bls.n	800abf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d11c      	bne.n	800ac52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac26:	f043 0302 	orr.w	r3, r3, #2
 800ac2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	e005      	b.n	800ac5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac64:	461a      	mov	r2, r3
 800ac66:	2300      	movs	r3, #0
 800ac68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac70:	4619      	mov	r1, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac78:	461a      	mov	r2, r3
 800ac7a:	680b      	ldr	r3, [r1, #0]
 800ac7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10c      	bne.n	800ac9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d104      	bne.n	800ac94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f965 	bl	800af5c <USB_SetDevSpeed>
 800ac92:	e008      	b.n	800aca6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac94:	2101      	movs	r1, #1
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f960 	bl	800af5c <USB_SetDevSpeed>
 800ac9c:	e003      	b.n	800aca6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac9e:	2103      	movs	r1, #3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f95b 	bl	800af5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aca6:	2110      	movs	r1, #16
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f8f3 	bl	800ae94 <USB_FlushTxFifo>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d001      	beq.n	800acb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f91f 	bl	800aefc <USB_FlushRxFifo>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acce:	461a      	mov	r2, r3
 800acd0:	2300      	movs	r3, #0
 800acd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acda:	461a      	mov	r2, r3
 800acdc:	2300      	movs	r3, #0
 800acde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace6:	461a      	mov	r2, r3
 800ace8:	2300      	movs	r3, #0
 800acea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acec:	2300      	movs	r3, #0
 800acee:	613b      	str	r3, [r7, #16]
 800acf0:	e043      	b.n	800ad7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad08:	d118      	bne.n	800ad3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10a      	bne.n	800ad26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	e013      	b.n	800ad4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	015a      	lsls	r2, r3, #5
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad32:	461a      	mov	r2, r3
 800ad34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad38:	6013      	str	r3, [r2, #0]
 800ad3a:	e008      	b.n	800ad4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad48:	461a      	mov	r2, r3
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ad72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	3301      	adds	r3, #1
 800ad78:	613b      	str	r3, [r7, #16]
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d3b7      	bcc.n	800acf2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad82:	2300      	movs	r3, #0
 800ad84:	613b      	str	r3, [r7, #16]
 800ad86:	e043      	b.n	800ae10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad9e:	d118      	bne.n	800add2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb2:	461a      	mov	r2, r3
 800adb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	e013      	b.n	800ade4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc8:	461a      	mov	r2, r3
 800adca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	e008      	b.n	800ade4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adde:	461a      	mov	r2, r3
 800ade0:	2300      	movs	r3, #0
 800ade2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf0:	461a      	mov	r2, r3
 800adf2:	2300      	movs	r3, #0
 800adf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	015a      	lsls	r2, r3, #5
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	4413      	add	r3, r2
 800adfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae02:	461a      	mov	r2, r3
 800ae04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	613b      	str	r3, [r7, #16]
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d3b7      	bcc.n	800ad88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ae38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d105      	bne.n	800ae4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	f043 0210 	orr.w	r2, r3, #16
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	4b0e      	ldr	r3, [pc, #56]	; (800ae8c <USB_DevInit+0x2b4>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d005      	beq.n	800ae6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	f043 0208 	orr.w	r2, r3, #8
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d105      	bne.n	800ae7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	699a      	ldr	r2, [r3, #24]
 800ae74:	4b06      	ldr	r3, [pc, #24]	; (800ae90 <USB_DevInit+0x2b8>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae88:	b004      	add	sp, #16
 800ae8a:	4770      	bx	lr
 800ae8c:	803c3800 	.word	0x803c3800
 800ae90:	40000004 	.word	0x40000004

0800ae94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3301      	adds	r3, #1
 800aea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4a13      	ldr	r2, [pc, #76]	; (800aef8 <USB_FlushTxFifo+0x64>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d901      	bls.n	800aeb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e01b      	b.n	800aeec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	daf2      	bge.n	800aea2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	019b      	lsls	r3, r3, #6
 800aec4:	f043 0220 	orr.w	r2, r3, #32
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3301      	adds	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4a08      	ldr	r2, [pc, #32]	; (800aef8 <USB_FlushTxFifo+0x64>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d901      	bls.n	800aede <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	e006      	b.n	800aeec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0320 	and.w	r3, r3, #32
 800aee6:	2b20      	cmp	r3, #32
 800aee8:	d0f0      	beq.n	800aecc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	00030d40 	.word	0x00030d40

0800aefc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	4a11      	ldr	r2, [pc, #68]	; (800af58 <USB_FlushRxFifo+0x5c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d901      	bls.n	800af1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e018      	b.n	800af4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	daf2      	bge.n	800af08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2210      	movs	r2, #16
 800af2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3301      	adds	r3, #1
 800af30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	4a08      	ldr	r2, [pc, #32]	; (800af58 <USB_FlushRxFifo+0x5c>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d901      	bls.n	800af3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e006      	b.n	800af4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	f003 0310 	and.w	r3, r3, #16
 800af46:	2b10      	cmp	r3, #16
 800af48:	d0f0      	beq.n	800af2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	00030d40 	.word	0x00030d40

0800af5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	78fb      	ldrb	r3, [r7, #3]
 800af76:	68f9      	ldr	r1, [r7, #12]
 800af78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af7c:	4313      	orrs	r3, r2
 800af7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800af8e:	b480      	push	{r7}
 800af90:	b087      	sub	sp, #28
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f003 0306 	and.w	r3, r3, #6
 800afa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800afae:	2300      	movs	r3, #0
 800afb0:	75fb      	strb	r3, [r7, #23]
 800afb2:	e00a      	b.n	800afca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d002      	beq.n	800afc0 <USB_GetDevSpeed+0x32>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b06      	cmp	r3, #6
 800afbe:	d102      	bne.n	800afc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800afc0:	2302      	movs	r3, #2
 800afc2:	75fb      	strb	r3, [r7, #23]
 800afc4:	e001      	b.n	800afca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800afc6:	230f      	movs	r3, #15
 800afc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800afca:	7dfb      	ldrb	r3, [r7, #23]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	785b      	ldrb	r3, [r3, #1]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d139      	bne.n	800b068 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affa:	69da      	ldr	r2, [r3, #28]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	f003 030f 	and.w	r3, r3, #15
 800b004:	2101      	movs	r1, #1
 800b006:	fa01 f303 	lsl.w	r3, r1, r3
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	68f9      	ldr	r1, [r7, #12]
 800b00e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b012:	4313      	orrs	r3, r2
 800b014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d153      	bne.n	800b0d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	015a      	lsls	r2, r3, #5
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4413      	add	r3, r2
 800b034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	791b      	ldrb	r3, [r3, #4]
 800b046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	059b      	lsls	r3, r3, #22
 800b04e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b050:	431a      	orrs	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	0159      	lsls	r1, r3, #5
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	440b      	add	r3, r1
 800b05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b05e:	4619      	mov	r1, r3
 800b060:	4b20      	ldr	r3, [pc, #128]	; (800b0e4 <USB_ActivateEndpoint+0x10c>)
 800b062:	4313      	orrs	r3, r2
 800b064:	600b      	str	r3, [r1, #0]
 800b066:	e035      	b.n	800b0d4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06e:	69da      	ldr	r2, [r3, #28]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	f003 030f 	and.w	r3, r3, #15
 800b078:	2101      	movs	r1, #1
 800b07a:	fa01 f303 	lsl.w	r3, r1, r3
 800b07e:	041b      	lsls	r3, r3, #16
 800b080:	68f9      	ldr	r1, [r7, #12]
 800b082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b086:	4313      	orrs	r3, r2
 800b088:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d119      	bne.n	800b0d4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	791b      	ldrb	r3, [r3, #4]
 800b0ba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	0159      	lsls	r1, r3, #5
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	440b      	add	r3, r1
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <USB_ActivateEndpoint+0x10c>)
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	10008000 	.word	0x10008000

0800b0e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	785b      	ldrb	r3, [r3, #1]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d161      	bne.n	800b1c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b11a:	d11f      	bne.n	800b15c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	0151      	lsls	r1, r2, #5
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	440a      	add	r2, r1
 800b132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b13a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	440a      	add	r2, r1
 800b152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b15a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f003 030f 	and.w	r3, r3, #15
 800b16c:	2101      	movs	r1, #1
 800b16e:	fa01 f303 	lsl.w	r3, r1, r3
 800b172:	b29b      	uxth	r3, r3
 800b174:	43db      	mvns	r3, r3
 800b176:	68f9      	ldr	r1, [r7, #12]
 800b178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b17c:	4013      	ands	r3, r2
 800b17e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b186:	69da      	ldr	r2, [r3, #28]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	f003 030f 	and.w	r3, r3, #15
 800b190:	2101      	movs	r1, #1
 800b192:	fa01 f303 	lsl.w	r3, r1, r3
 800b196:	b29b      	uxth	r3, r3
 800b198:	43db      	mvns	r3, r3
 800b19a:	68f9      	ldr	r1, [r7, #12]
 800b19c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	0159      	lsls	r1, r3, #5
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	440b      	add	r3, r1
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4b35      	ldr	r3, [pc, #212]	; (800b298 <USB_DeactivateEndpoint+0x1b0>)
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	600b      	str	r3, [r1, #0]
 800b1c6:	e060      	b.n	800b28a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1de:	d11f      	bne.n	800b220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b21a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b21e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	f003 030f 	and.w	r3, r3, #15
 800b230:	2101      	movs	r1, #1
 800b232:	fa01 f303 	lsl.w	r3, r1, r3
 800b236:	041b      	lsls	r3, r3, #16
 800b238:	43db      	mvns	r3, r3
 800b23a:	68f9      	ldr	r1, [r7, #12]
 800b23c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b240:	4013      	ands	r3, r2
 800b242:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b24a:	69da      	ldr	r2, [r3, #28]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	f003 030f 	and.w	r3, r3, #15
 800b254:	2101      	movs	r1, #1
 800b256:	fa01 f303 	lsl.w	r3, r1, r3
 800b25a:	041b      	lsls	r3, r3, #16
 800b25c:	43db      	mvns	r3, r3
 800b25e:	68f9      	ldr	r1, [r7, #12]
 800b260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b264:	4013      	ands	r3, r2
 800b266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	0159      	lsls	r1, r3, #5
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	440b      	add	r3, r1
 800b27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b282:	4619      	mov	r1, r3
 800b284:	4b05      	ldr	r3, [pc, #20]	; (800b29c <USB_DeactivateEndpoint+0x1b4>)
 800b286:	4013      	ands	r3, r2
 800b288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	ec337800 	.word	0xec337800
 800b29c:	eff37800 	.word	0xeff37800

0800b2a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08a      	sub	sp, #40	; 0x28
 800b2a4:	af02      	add	r7, sp, #8
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	785b      	ldrb	r3, [r3, #1]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	f040 8163 	bne.w	800b588 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d132      	bne.n	800b330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d6:	691a      	ldr	r2, [r3, #16]
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	0159      	lsls	r1, r3, #5
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	440b      	add	r3, r1
 800b2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4ba5      	ldr	r3, [pc, #660]	; (800b57c <USB_EPStartXfer+0x2dc>)
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	0151      	lsls	r1, r2, #5
 800b2fe:	69fa      	ldr	r2, [r7, #28]
 800b300:	440a      	add	r2, r1
 800b302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b30a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	4413      	add	r3, r2
 800b314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b318:	691a      	ldr	r2, [r3, #16]
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	0159      	lsls	r1, r3, #5
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	440b      	add	r3, r1
 800b322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b326:	4619      	mov	r1, r3
 800b328:	4b95      	ldr	r3, [pc, #596]	; (800b580 <USB_EPStartXfer+0x2e0>)
 800b32a:	4013      	ands	r3, r2
 800b32c:	610b      	str	r3, [r1, #16]
 800b32e:	e074      	b.n	800b41a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	4413      	add	r3, r2
 800b338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b33c:	691a      	ldr	r2, [r3, #16]
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	0159      	lsls	r1, r3, #5
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	440b      	add	r3, r1
 800b346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34a:	4619      	mov	r1, r3
 800b34c:	4b8c      	ldr	r3, [pc, #560]	; (800b580 <USB_EPStartXfer+0x2e0>)
 800b34e:	4013      	ands	r3, r2
 800b350:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35e:	691a      	ldr	r2, [r3, #16]
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	0159      	lsls	r1, r3, #5
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	440b      	add	r3, r1
 800b368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b36c:	4619      	mov	r1, r3
 800b36e:	4b83      	ldr	r3, [pc, #524]	; (800b57c <USB_EPStartXfer+0x2dc>)
 800b370:	4013      	ands	r3, r2
 800b372:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	015a      	lsls	r2, r3, #5
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	4413      	add	r3, r2
 800b37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b380:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	6999      	ldr	r1, [r3, #24]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	440b      	add	r3, r1
 800b38c:	1e59      	subs	r1, r3, #1
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	fbb1 f3f3 	udiv	r3, r1, r3
 800b396:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b398:	4b7a      	ldr	r3, [pc, #488]	; (800b584 <USB_EPStartXfer+0x2e4>)
 800b39a:	400b      	ands	r3, r1
 800b39c:	69b9      	ldr	r1, [r7, #24]
 800b39e:	0148      	lsls	r0, r1, #5
 800b3a0:	69f9      	ldr	r1, [r7, #28]
 800b3a2:	4401      	add	r1, r0
 800b3a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b8:	691a      	ldr	r2, [r3, #16]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c2:	69b9      	ldr	r1, [r7, #24]
 800b3c4:	0148      	lsls	r0, r1, #5
 800b3c6:	69f9      	ldr	r1, [r7, #28]
 800b3c8:	4401      	add	r1, r0
 800b3ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	791b      	ldrb	r3, [r3, #4]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d11f      	bne.n	800b41a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	69ba      	ldr	r2, [r7, #24]
 800b3ea:	0151      	lsls	r1, r2, #5
 800b3ec:	69fa      	ldr	r2, [r7, #28]
 800b3ee:	440a      	add	r2, r1
 800b3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b3f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	015a      	lsls	r2, r3, #5
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4413      	add	r3, r2
 800b402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	69ba      	ldr	r2, [r7, #24]
 800b40a:	0151      	lsls	r1, r2, #5
 800b40c:	69fa      	ldr	r2, [r7, #28]
 800b40e:	440a      	add	r2, r1
 800b410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b418:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d14b      	bne.n	800b4b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d009      	beq.n	800b43c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	015a      	lsls	r2, r3, #5
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	4413      	add	r3, r2
 800b430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b434:	461a      	mov	r2, r3
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	791b      	ldrb	r3, [r3, #4]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d128      	bne.n	800b496 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b450:	2b00      	cmp	r3, #0
 800b452:	d110      	bne.n	800b476 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	0151      	lsls	r1, r2, #5
 800b466:	69fa      	ldr	r2, [r7, #28]
 800b468:	440a      	add	r2, r1
 800b46a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b46e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	e00f      	b.n	800b496 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	015a      	lsls	r2, r3, #5
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	0151      	lsls	r1, r2, #5
 800b488:	69fa      	ldr	r2, [r7, #28]
 800b48a:	440a      	add	r2, r1
 800b48c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b494:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	69fa      	ldr	r2, [r7, #28]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	e137      	b.n	800b728 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	0151      	lsls	r1, r2, #5
 800b4ca:	69fa      	ldr	r2, [r7, #28]
 800b4cc:	440a      	add	r2, r1
 800b4ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	791b      	ldrb	r3, [r3, #4]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d015      	beq.n	800b50c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 811f 	beq.w	800b728 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	f003 030f 	and.w	r3, r3, #15
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b500:	69f9      	ldr	r1, [r7, #28]
 800b502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b506:	4313      	orrs	r3, r2
 800b508:	634b      	str	r3, [r1, #52]	; 0x34
 800b50a:	e10d      	b.n	800b728 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d110      	bne.n	800b53e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	015a      	lsls	r2, r3, #5
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	4413      	add	r3, r2
 800b524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	0151      	lsls	r1, r2, #5
 800b52e:	69fa      	ldr	r2, [r7, #28]
 800b530:	440a      	add	r2, r1
 800b532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	e00f      	b.n	800b55e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	4413      	add	r3, r2
 800b546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	0151      	lsls	r1, r2, #5
 800b550:	69fa      	ldr	r2, [r7, #28]
 800b552:	440a      	add	r2, r1
 800b554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b55c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6919      	ldr	r1, [r3, #16]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	781a      	ldrb	r2, [r3, #0]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	b298      	uxth	r0, r3
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	4603      	mov	r3, r0
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f000 faea 	bl	800bb4c <USB_WritePacket>
 800b578:	e0d6      	b.n	800b728 <USB_EPStartXfer+0x488>
 800b57a:	bf00      	nop
 800b57c:	e007ffff 	.word	0xe007ffff
 800b580:	fff80000 	.word	0xfff80000
 800b584:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b594:	691a      	ldr	r2, [r3, #16]
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	0159      	lsls	r1, r3, #5
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	440b      	add	r3, r1
 800b59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4b63      	ldr	r3, [pc, #396]	; (800b734 <USB_EPStartXfer+0x494>)
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b6:	691a      	ldr	r2, [r3, #16]
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	0159      	lsls	r1, r3, #5
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	440b      	add	r3, r1
 800b5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4b5c      	ldr	r3, [pc, #368]	; (800b738 <USB_EPStartXfer+0x498>)
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d123      	bne.n	800b61c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	691a      	ldr	r2, [r3, #16]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5ea:	69b9      	ldr	r1, [r7, #24]
 800b5ec:	0148      	lsls	r0, r1, #5
 800b5ee:	69f9      	ldr	r1, [r7, #28]
 800b5f0:	4401      	add	r1, r0
 800b5f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b618:	6113      	str	r3, [r2, #16]
 800b61a:	e037      	b.n	800b68c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	699a      	ldr	r2, [r3, #24]
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	4413      	add	r3, r2
 800b626:	1e5a      	subs	r2, r3, #1
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b630:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	8afa      	ldrh	r2, [r7, #22]
 800b638:	fb03 f202 	mul.w	r2, r3, r2
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	4413      	add	r3, r2
 800b648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64c:	691a      	ldr	r2, [r3, #16]
 800b64e:	8afb      	ldrh	r3, [r7, #22]
 800b650:	04d9      	lsls	r1, r3, #19
 800b652:	4b3a      	ldr	r3, [pc, #232]	; (800b73c <USB_EPStartXfer+0x49c>)
 800b654:	400b      	ands	r3, r1
 800b656:	69b9      	ldr	r1, [r7, #24]
 800b658:	0148      	lsls	r0, r1, #5
 800b65a:	69f9      	ldr	r1, [r7, #28]
 800b65c:	4401      	add	r1, r0
 800b65e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b662:	4313      	orrs	r3, r2
 800b664:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	015a      	lsls	r2, r3, #5
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	4413      	add	r3, r2
 800b66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b672:	691a      	ldr	r2, [r3, #16]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	69db      	ldr	r3, [r3, #28]
 800b678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b67c:	69b9      	ldr	r1, [r7, #24]
 800b67e:	0148      	lsls	r0, r1, #5
 800b680:	69f9      	ldr	r1, [r7, #28]
 800b682:	4401      	add	r1, r0
 800b684:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b688:	4313      	orrs	r3, r2
 800b68a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b68c:	79fb      	ldrb	r3, [r7, #7]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d10d      	bne.n	800b6ae <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d009      	beq.n	800b6ae <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6919      	ldr	r1, [r3, #16]
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6aa:	460a      	mov	r2, r1
 800b6ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	791b      	ldrb	r3, [r3, #4]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d128      	bne.n	800b708 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d110      	bne.n	800b6e8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	69ba      	ldr	r2, [r7, #24]
 800b6d6:	0151      	lsls	r1, r2, #5
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	440a      	add	r2, r1
 800b6dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	e00f      	b.n	800b708 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69ba      	ldr	r2, [r7, #24]
 800b6f8:	0151      	lsls	r1, r2, #5
 800b6fa:	69fa      	ldr	r2, [r7, #28]
 800b6fc:	440a      	add	r2, r1
 800b6fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b706:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	0151      	lsls	r1, r2, #5
 800b71a:	69fa      	ldr	r2, [r7, #28]
 800b71c:	440a      	add	r2, r1
 800b71e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b726:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3720      	adds	r7, #32
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	fff80000 	.word	0xfff80000
 800b738:	e007ffff 	.word	0xe007ffff
 800b73c:	1ff80000 	.word	0x1ff80000

0800b740 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b740:	b480      	push	{r7}
 800b742:	b087      	sub	sp, #28
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	4613      	mov	r3, r2
 800b74c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	785b      	ldrb	r3, [r3, #1]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	f040 80ce 	bne.w	800b8fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d132      	bne.n	800b7d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	4413      	add	r3, r2
 800b772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b776:	691a      	ldr	r2, [r3, #16]
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	0159      	lsls	r1, r3, #5
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	440b      	add	r3, r1
 800b780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b784:	4619      	mov	r1, r3
 800b786:	4b9a      	ldr	r3, [pc, #616]	; (800b9f0 <USB_EP0StartXfer+0x2b0>)
 800b788:	4013      	ands	r3, r2
 800b78a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	015a      	lsls	r2, r3, #5
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	4413      	add	r3, r2
 800b794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	0151      	lsls	r1, r2, #5
 800b79e:	697a      	ldr	r2, [r7, #20]
 800b7a0:	440a      	add	r2, r1
 800b7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b8:	691a      	ldr	r2, [r3, #16]
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	0159      	lsls	r1, r3, #5
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	440b      	add	r3, r1
 800b7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4b8a      	ldr	r3, [pc, #552]	; (800b9f4 <USB_EP0StartXfer+0x2b4>)
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	610b      	str	r3, [r1, #16]
 800b7ce:	e04e      	b.n	800b86e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	015a      	lsls	r2, r3, #5
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7dc:	691a      	ldr	r2, [r3, #16]
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	0159      	lsls	r1, r3, #5
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	440b      	add	r3, r1
 800b7e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4b81      	ldr	r3, [pc, #516]	; (800b9f4 <USB_EP0StartXfer+0x2b4>)
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	015a      	lsls	r2, r3, #5
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fe:	691a      	ldr	r2, [r3, #16]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	0159      	lsls	r1, r3, #5
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	440b      	add	r3, r1
 800b808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b80c:	4619      	mov	r1, r3
 800b80e:	4b78      	ldr	r3, [pc, #480]	; (800b9f0 <USB_EP0StartXfer+0x2b0>)
 800b810:	4013      	ands	r3, r2
 800b812:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	699a      	ldr	r2, [r3, #24]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d903      	bls.n	800b828 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	68da      	ldr	r2, [r3, #12]
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	0151      	lsls	r1, r2, #5
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	440a      	add	r2, r1
 800b83e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	015a      	lsls	r2, r3, #5
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	4413      	add	r3, r2
 800b850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b854:	691a      	ldr	r2, [r3, #16]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b85e:	6939      	ldr	r1, [r7, #16]
 800b860:	0148      	lsls	r0, r1, #5
 800b862:	6979      	ldr	r1, [r7, #20]
 800b864:	4401      	add	r1, r0
 800b866:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b86a:	4313      	orrs	r3, r2
 800b86c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d11e      	bne.n	800b8b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d009      	beq.n	800b890 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	015a      	lsls	r2, r3, #5
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	4413      	add	r3, r2
 800b884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b888:	461a      	mov	r2, r3
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	0151      	lsls	r1, r2, #5
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	440a      	add	r2, r1
 800b8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	e097      	b.n	800b9e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	0151      	lsls	r1, r2, #5
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	440a      	add	r2, r1
 800b8c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	699b      	ldr	r3, [r3, #24]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 8083 	beq.w	800b9e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	f003 030f 	and.w	r3, r3, #15
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b8f2:	6979      	ldr	r1, [r7, #20]
 800b8f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	634b      	str	r3, [r1, #52]	; 0x34
 800b8fc:	e071      	b.n	800b9e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90a:	691a      	ldr	r2, [r3, #16]
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	0159      	lsls	r1, r3, #5
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	440b      	add	r3, r1
 800b914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b918:	4619      	mov	r1, r3
 800b91a:	4b36      	ldr	r3, [pc, #216]	; (800b9f4 <USB_EP0StartXfer+0x2b4>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	691a      	ldr	r2, [r3, #16]
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	0159      	lsls	r1, r3, #5
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	440b      	add	r3, r1
 800b936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93a:	4619      	mov	r1, r3
 800b93c:	4b2c      	ldr	r3, [pc, #176]	; (800b9f0 <USB_EP0StartXfer+0x2b0>)
 800b93e:	4013      	ands	r3, r2
 800b940:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	68da      	ldr	r2, [r3, #12]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	4413      	add	r3, r2
 800b962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	0151      	lsls	r1, r2, #5
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	440a      	add	r2, r1
 800b970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b978:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	4413      	add	r3, r2
 800b982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b986:	691a      	ldr	r2, [r3, #16]
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	69db      	ldr	r3, [r3, #28]
 800b98c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b990:	6939      	ldr	r1, [r7, #16]
 800b992:	0148      	lsls	r0, r1, #5
 800b994:	6979      	ldr	r1, [r7, #20]
 800b996:	4401      	add	r1, r0
 800b998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b99c:	4313      	orrs	r3, r2
 800b99e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d10d      	bne.n	800b9c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d009      	beq.n	800b9c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6919      	ldr	r1, [r3, #16]
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	015a      	lsls	r2, r3, #5
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9be:	460a      	mov	r2, r1
 800b9c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	015a      	lsls	r2, r3, #5
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	0151      	lsls	r1, r2, #5
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	440a      	add	r2, r1
 800b9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	371c      	adds	r7, #28
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	e007ffff 	.word	0xe007ffff
 800b9f4:	fff80000 	.word	0xfff80000

0800b9f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	785b      	ldrb	r3, [r3, #1]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d14a      	bne.n	800baac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	015a      	lsls	r2, r3, #5
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	4413      	add	r3, r2
 800ba20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba2e:	f040 8086 	bne.w	800bb3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	015a      	lsls	r2, r3, #5
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	7812      	ldrb	r2, [r2, #0]
 800ba46:	0151      	lsls	r1, r2, #5
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	440a      	add	r2, r1
 800ba4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	0151      	lsls	r1, r2, #5
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	440a      	add	r2, r1
 800ba70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f242 7210 	movw	r2, #10000	; 0x2710
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d902      	bls.n	800ba90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	75fb      	strb	r3, [r7, #23]
          break;
 800ba8e:	e056      	b.n	800bb3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	015a      	lsls	r2, r3, #5
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800baa8:	d0e7      	beq.n	800ba7a <USB_EPStopXfer+0x82>
 800baaa:	e048      	b.n	800bb3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bac4:	d13b      	bne.n	800bb3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	7812      	ldrb	r2, [r2, #0]
 800bada:	0151      	lsls	r1, r2, #5
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	440a      	add	r2, r1
 800bae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bae4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bae8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	7812      	ldrb	r2, [r2, #0]
 800bafe:	0151      	lsls	r1, r2, #5
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	440a      	add	r2, r1
 800bb04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3301      	adds	r3, #1
 800bb12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d902      	bls.n	800bb24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	75fb      	strb	r3, [r7, #23]
          break;
 800bb22:	e00c      	b.n	800bb3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb3c:	d0e7      	beq.n	800bb0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	371c      	adds	r7, #28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b089      	sub	sp, #36	; 0x24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4611      	mov	r1, r2
 800bb58:	461a      	mov	r2, r3
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	71fb      	strb	r3, [r7, #7]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bb6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d123      	bne.n	800bbba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb72:	88bb      	ldrh	r3, [r7, #4]
 800bb74:	3303      	adds	r3, #3
 800bb76:	089b      	lsrs	r3, r3, #2
 800bb78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61bb      	str	r3, [r7, #24]
 800bb7e:	e018      	b.n	800bbb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	031a      	lsls	r2, r3, #12
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	3301      	adds	r3, #1
 800bb98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	3301      	adds	r3, #1
 800bba4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	61bb      	str	r3, [r7, #24]
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d3e2      	bcc.n	800bb80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3724      	adds	r7, #36	; 0x24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b08b      	sub	sp, #44	; 0x2c
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bbde:	88fb      	ldrh	r3, [r7, #6]
 800bbe0:	089b      	lsrs	r3, r3, #2
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bbe6:	88fb      	ldrh	r3, [r7, #6]
 800bbe8:	f003 0303 	and.w	r3, r3, #3
 800bbec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bbee:	2300      	movs	r3, #0
 800bbf0:	623b      	str	r3, [r7, #32]
 800bbf2:	e014      	b.n	800bc1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc02:	3301      	adds	r3, #1
 800bc04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	3301      	adds	r3, #1
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	3301      	adds	r3, #1
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	3301      	adds	r3, #1
 800bc16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	623b      	str	r3, [r7, #32]
 800bc1e:	6a3a      	ldr	r2, [r7, #32]
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d3e6      	bcc.n	800bbf4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bc26:	8bfb      	ldrh	r3, [r7, #30]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01e      	beq.n	800bc6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc36:	461a      	mov	r2, r3
 800bc38:	f107 0310 	add.w	r3, r7, #16
 800bc3c:	6812      	ldr	r2, [r2, #0]
 800bc3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	fa22 f303 	lsr.w	r3, r2, r3
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	701a      	strb	r2, [r3, #0]
      i++;
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	3301      	adds	r3, #1
 800bc56:	623b      	str	r3, [r7, #32]
      pDest++;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bc5e:	8bfb      	ldrh	r3, [r7, #30]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bc64:	8bfb      	ldrh	r3, [r7, #30]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1ea      	bne.n	800bc40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	372c      	adds	r7, #44	; 0x2c
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	785b      	ldrb	r3, [r3, #1]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d12c      	bne.n	800bcee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	015a      	lsls	r2, r3, #5
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	db12      	blt.n	800bccc <USB_EPSetStall+0x54>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00f      	beq.n	800bccc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	015a      	lsls	r2, r3, #5
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	0151      	lsls	r1, r2, #5
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	440a      	add	r2, r1
 800bcc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bcca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	015a      	lsls	r2, r3, #5
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	0151      	lsls	r1, r2, #5
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	440a      	add	r2, r1
 800bce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bce6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	e02b      	b.n	800bd46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	db12      	blt.n	800bd26 <USB_EPSetStall+0xae>
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00f      	beq.n	800bd26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	0151      	lsls	r1, r2, #5
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	440a      	add	r2, r1
 800bd1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	015a      	lsls	r2, r3, #5
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	0151      	lsls	r1, r2, #5
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	440a      	add	r2, r1
 800bd3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	785b      	ldrb	r3, [r3, #1]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d128      	bne.n	800bdc2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	015a      	lsls	r2, r3, #5
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	4413      	add	r3, r2
 800bd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	0151      	lsls	r1, r2, #5
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	440a      	add	r2, r1
 800bd86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	791b      	ldrb	r3, [r3, #4]
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	d003      	beq.n	800bda0 <USB_EPClearStall+0x4c>
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	791b      	ldrb	r3, [r3, #4]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d138      	bne.n	800be12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	015a      	lsls	r2, r3, #5
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4413      	add	r3, r2
 800bda8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	0151      	lsls	r1, r2, #5
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	440a      	add	r2, r1
 800bdb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	e027      	b.n	800be12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	015a      	lsls	r2, r3, #5
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	0151      	lsls	r1, r2, #5
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	440a      	add	r2, r1
 800bdd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bde0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	791b      	ldrb	r3, [r3, #4]
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d003      	beq.n	800bdf2 <USB_EPClearStall+0x9e>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	791b      	ldrb	r3, [r3, #4]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d10f      	bne.n	800be12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	015a      	lsls	r2, r3, #5
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	0151      	lsls	r1, r2, #5
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	440a      	add	r2, r1
 800be08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	460b      	mov	r3, r1
 800be2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800be42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	78fb      	ldrb	r3, [r7, #3]
 800be4e:	011b      	lsls	r3, r3, #4
 800be50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800be54:	68f9      	ldr	r1, [r7, #12]
 800be56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be5a:	4313      	orrs	r3, r2
 800be5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be86:	f023 0303 	bic.w	r3, r3, #3
 800be8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be9a:	f023 0302 	bic.w	r3, r3, #2
 800be9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800beae:	b480      	push	{r7}
 800beb0:	b085      	sub	sp, #20
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bec8:	f023 0303 	bic.w	r3, r3, #3
 800becc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bedc:	f043 0302 	orr.w	r3, r3, #2
 800bee0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	4013      	ands	r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bf08:	68fb      	ldr	r3, [r7, #12]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf16:	b480      	push	{r7}
 800bf18:	b085      	sub	sp, #20
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	4013      	ands	r3, r2
 800bf38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	0c1b      	lsrs	r3, r3, #16
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b085      	sub	sp, #20
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	b29b      	uxth	r3, r3
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b085      	sub	sp, #20
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bf8e:	78fb      	ldrb	r3, [r7, #3]
 800bf90:	015a      	lsls	r2, r3, #5
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	4413      	add	r3, r2
 800bf96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bfac:	68bb      	ldr	r3, [r7, #8]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b087      	sub	sp, #28
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfdc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bfde:	78fb      	ldrb	r3, [r7, #3]
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	fa22 f303 	lsr.w	r3, r2, r3
 800bfea:	01db      	lsls	r3, r3, #7
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bff4:	78fb      	ldrb	r3, [r7, #3]
 800bff6:	015a      	lsls	r2, r3, #5
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	4413      	add	r3, r2
 800bffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	4013      	ands	r3, r2
 800c006:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c008:	68bb      	ldr	r3, [r7, #8]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	371c      	adds	r7, #28
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c016:	b480      	push	{r7}
 800c018:	b083      	sub	sp, #12
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	f003 0301 	and.w	r3, r3, #1
}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
	...

0800c034 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c04e:	4619      	mov	r1, r3
 800c050:	4b09      	ldr	r3, [pc, #36]	; (800c078 <USB_ActivateSetup+0x44>)
 800c052:	4013      	ands	r3, r2
 800c054:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	fffff800 	.word	0xfffff800

0800c07c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	460b      	mov	r3, r1
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	333c      	adds	r3, #60	; 0x3c
 800c092:	3304      	adds	r3, #4
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	4a26      	ldr	r2, [pc, #152]	; (800c134 <USB_EP0_OutStart+0xb8>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d90a      	bls.n	800c0b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0b0:	d101      	bne.n	800c0b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e037      	b.n	800c126 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0bc:	461a      	mov	r2, r3
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0e4:	f043 0318 	orr.w	r3, r3, #24
 800c0e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	697a      	ldr	r2, [r7, #20]
 800c0f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c0fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d10f      	bne.n	800c124 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c10a:	461a      	mov	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c11e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c122:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	371c      	adds	r7, #28
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	4f54300a 	.word	0x4f54300a

0800c138 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c140:	2300      	movs	r3, #0
 800c142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3301      	adds	r3, #1
 800c148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4a13      	ldr	r2, [pc, #76]	; (800c19c <USB_CoreReset+0x64>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d901      	bls.n	800c156 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c152:	2303      	movs	r3, #3
 800c154:	e01b      	b.n	800c18e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	daf2      	bge.n	800c144 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c15e:	2300      	movs	r3, #0
 800c160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	f043 0201 	orr.w	r2, r3, #1
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3301      	adds	r3, #1
 800c172:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4a09      	ldr	r2, [pc, #36]	; (800c19c <USB_CoreReset+0x64>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d901      	bls.n	800c180 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e006      	b.n	800c18e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d0f0      	beq.n	800c16e <USB_CoreReset+0x36>

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	00030d40 	.word	0x00030d40

0800c1a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c1ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c1b0:	f013 fbd4 	bl	801f95c <malloc>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d109      	bne.n	800c1d2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	32b0      	adds	r2, #176	; 0xb0
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	e0d4      	b.n	800c37c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c1d2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f014 ffa3 	bl	8021124 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	32b0      	adds	r2, #176	; 0xb0
 800c1e8:	68f9      	ldr	r1, [r7, #12]
 800c1ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	32b0      	adds	r2, #176	; 0xb0
 800c1f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7c1b      	ldrb	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d138      	bne.n	800c27c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c20a:	4b5e      	ldr	r3, [pc, #376]	; (800c384 <USBD_CDC_Init+0x1e4>)
 800c20c:	7819      	ldrb	r1, [r3, #0]
 800c20e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c212:	2202      	movs	r2, #2
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f005 f926 	bl	8011466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c21a:	4b5a      	ldr	r3, [pc, #360]	; (800c384 <USBD_CDC_Init+0x1e4>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	f003 020f 	and.w	r2, r3, #15
 800c222:	6879      	ldr	r1, [r7, #4]
 800c224:	4613      	mov	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	440b      	add	r3, r1
 800c22e:	3324      	adds	r3, #36	; 0x24
 800c230:	2201      	movs	r2, #1
 800c232:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c234:	4b54      	ldr	r3, [pc, #336]	; (800c388 <USBD_CDC_Init+0x1e8>)
 800c236:	7819      	ldrb	r1, [r3, #0]
 800c238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c23c:	2202      	movs	r2, #2
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f005 f911 	bl	8011466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c244:	4b50      	ldr	r3, [pc, #320]	; (800c388 <USBD_CDC_Init+0x1e8>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	f003 020f 	and.w	r2, r3, #15
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	4613      	mov	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	440b      	add	r3, r1
 800c258:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c25c:	2201      	movs	r2, #1
 800c25e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c260:	4b4a      	ldr	r3, [pc, #296]	; (800c38c <USBD_CDC_Init+0x1ec>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	f003 020f 	and.w	r2, r3, #15
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	4613      	mov	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	440b      	add	r3, r1
 800c274:	3326      	adds	r3, #38	; 0x26
 800c276:	2210      	movs	r2, #16
 800c278:	801a      	strh	r2, [r3, #0]
 800c27a:	e035      	b.n	800c2e8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c27c:	4b41      	ldr	r3, [pc, #260]	; (800c384 <USBD_CDC_Init+0x1e4>)
 800c27e:	7819      	ldrb	r1, [r3, #0]
 800c280:	2340      	movs	r3, #64	; 0x40
 800c282:	2202      	movs	r2, #2
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f005 f8ee 	bl	8011466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c28a:	4b3e      	ldr	r3, [pc, #248]	; (800c384 <USBD_CDC_Init+0x1e4>)
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	f003 020f 	and.w	r2, r3, #15
 800c292:	6879      	ldr	r1, [r7, #4]
 800c294:	4613      	mov	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	440b      	add	r3, r1
 800c29e:	3324      	adds	r3, #36	; 0x24
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c2a4:	4b38      	ldr	r3, [pc, #224]	; (800c388 <USBD_CDC_Init+0x1e8>)
 800c2a6:	7819      	ldrb	r1, [r3, #0]
 800c2a8:	2340      	movs	r3, #64	; 0x40
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f005 f8da 	bl	8011466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c2b2:	4b35      	ldr	r3, [pc, #212]	; (800c388 <USBD_CDC_Init+0x1e8>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	f003 020f 	and.w	r2, r3, #15
 800c2ba:	6879      	ldr	r1, [r7, #4]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	440b      	add	r3, r1
 800c2c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c2ce:	4b2f      	ldr	r3, [pc, #188]	; (800c38c <USBD_CDC_Init+0x1ec>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	f003 020f 	and.w	r2, r3, #15
 800c2d6:	6879      	ldr	r1, [r7, #4]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	4413      	add	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	440b      	add	r3, r1
 800c2e2:	3326      	adds	r3, #38	; 0x26
 800c2e4:	2210      	movs	r2, #16
 800c2e6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c2e8:	4b28      	ldr	r3, [pc, #160]	; (800c38c <USBD_CDC_Init+0x1ec>)
 800c2ea:	7819      	ldrb	r1, [r3, #0]
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f005 f8b8 	bl	8011466 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c2f6:	4b25      	ldr	r3, [pc, #148]	; (800c38c <USBD_CDC_Init+0x1ec>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	f003 020f 	and.w	r2, r3, #15
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	440b      	add	r3, r1
 800c30a:	3324      	adds	r3, #36	; 0x24
 800c30c:	2201      	movs	r2, #1
 800c30e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	33b0      	adds	r3, #176	; 0xb0
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800c346:	2302      	movs	r3, #2
 800c348:	e018      	b.n	800c37c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7c1b      	ldrb	r3, [r3, #16]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d10a      	bne.n	800c368 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c352:	4b0d      	ldr	r3, [pc, #52]	; (800c388 <USBD_CDC_Init+0x1e8>)
 800c354:	7819      	ldrb	r1, [r3, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c35c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f005 f96f 	bl	8011644 <USBD_LL_PrepareReceive>
 800c366:	e008      	b.n	800c37a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <USBD_CDC_Init+0x1e8>)
 800c36a:	7819      	ldrb	r1, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c372:	2340      	movs	r3, #64	; 0x40
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f005 f965 	bl	8011644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	20000097 	.word	0x20000097
 800c388:	20000098 	.word	0x20000098
 800c38c:	20000099 	.word	0x20000099

0800c390 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c39c:	4b3a      	ldr	r3, [pc, #232]	; (800c488 <USBD_CDC_DeInit+0xf8>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f005 f885 	bl	80114b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c3a8:	4b37      	ldr	r3, [pc, #220]	; (800c488 <USBD_CDC_DeInit+0xf8>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	f003 020f 	and.w	r2, r3, #15
 800c3b0:	6879      	ldr	r1, [r7, #4]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3324      	adds	r3, #36	; 0x24
 800c3be:	2200      	movs	r2, #0
 800c3c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c3c2:	4b32      	ldr	r3, [pc, #200]	; (800c48c <USBD_CDC_DeInit+0xfc>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f005 f872 	bl	80114b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c3ce:	4b2f      	ldr	r3, [pc, #188]	; (800c48c <USBD_CDC_DeInit+0xfc>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	f003 020f 	and.w	r2, r3, #15
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	440b      	add	r3, r1
 800c3e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c3ea:	4b29      	ldr	r3, [pc, #164]	; (800c490 <USBD_CDC_DeInit+0x100>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f005 f85e 	bl	80114b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c3f6:	4b26      	ldr	r3, [pc, #152]	; (800c490 <USBD_CDC_DeInit+0x100>)
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	f003 020f 	and.w	r2, r3, #15
 800c3fe:	6879      	ldr	r1, [r7, #4]
 800c400:	4613      	mov	r3, r2
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	440b      	add	r3, r1
 800c40a:	3324      	adds	r3, #36	; 0x24
 800c40c:	2200      	movs	r2, #0
 800c40e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c410:	4b1f      	ldr	r3, [pc, #124]	; (800c490 <USBD_CDC_DeInit+0x100>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f003 020f 	and.w	r2, r3, #15
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	4613      	mov	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	440b      	add	r3, r1
 800c424:	3326      	adds	r3, #38	; 0x26
 800c426:	2200      	movs	r2, #0
 800c428:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	32b0      	adds	r2, #176	; 0xb0
 800c434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01f      	beq.n	800c47c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	33b0      	adds	r3, #176	; 0xb0
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	32b0      	adds	r2, #176	; 0xb0
 800c45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45e:	4618      	mov	r0, r3
 800c460:	f013 fa84 	bl	801f96c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	32b0      	adds	r2, #176	; 0xb0
 800c46e:	2100      	movs	r1, #0
 800c470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20000097 	.word	0x20000097
 800c48c:	20000098 	.word	0x20000098
 800c490:	20000099 	.word	0x20000099

0800c494 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	32b0      	adds	r2, #176	; 0xb0
 800c4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d101      	bne.n	800c4c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e0bf      	b.n	800c644 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d050      	beq.n	800c572 <USBD_CDC_Setup+0xde>
 800c4d0:	2b20      	cmp	r3, #32
 800c4d2:	f040 80af 	bne.w	800c634 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	88db      	ldrh	r3, [r3, #6]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d03a      	beq.n	800c554 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	b25b      	sxtb	r3, r3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	da1b      	bge.n	800c520 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	33b0      	adds	r3, #176	; 0xb0
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c4fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	88d2      	ldrh	r2, [r2, #6]
 800c504:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	88db      	ldrh	r3, [r3, #6]
 800c50a:	2b07      	cmp	r3, #7
 800c50c:	bf28      	it	cs
 800c50e:	2307      	movcs	r3, #7
 800c510:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	89fa      	ldrh	r2, [r7, #14]
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f001 fd6d 	bl	800dff8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c51e:	e090      	b.n	800c642 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	785a      	ldrb	r2, [r3, #1]
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	88db      	ldrh	r3, [r3, #6]
 800c52e:	2b3f      	cmp	r3, #63	; 0x3f
 800c530:	d803      	bhi.n	800c53a <USBD_CDC_Setup+0xa6>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	88db      	ldrh	r3, [r3, #6]
 800c536:	b2da      	uxtb	r2, r3
 800c538:	e000      	b.n	800c53c <USBD_CDC_Setup+0xa8>
 800c53a:	2240      	movs	r2, #64	; 0x40
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c542:	6939      	ldr	r1, [r7, #16]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c54a:	461a      	mov	r2, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f001 fd7f 	bl	800e050 <USBD_CtlPrepareRx>
      break;
 800c552:	e076      	b.n	800c642 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	33b0      	adds	r3, #176	; 0xb0
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	7850      	ldrb	r0, [r2, #1]
 800c56a:	2200      	movs	r2, #0
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	4798      	blx	r3
      break;
 800c570:	e067      	b.n	800c642 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	785b      	ldrb	r3, [r3, #1]
 800c576:	2b0b      	cmp	r3, #11
 800c578:	d851      	bhi.n	800c61e <USBD_CDC_Setup+0x18a>
 800c57a:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <USBD_CDC_Setup+0xec>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c5b1 	.word	0x0800c5b1
 800c584:	0800c62d 	.word	0x0800c62d
 800c588:	0800c61f 	.word	0x0800c61f
 800c58c:	0800c61f 	.word	0x0800c61f
 800c590:	0800c61f 	.word	0x0800c61f
 800c594:	0800c61f 	.word	0x0800c61f
 800c598:	0800c61f 	.word	0x0800c61f
 800c59c:	0800c61f 	.word	0x0800c61f
 800c5a0:	0800c61f 	.word	0x0800c61f
 800c5a4:	0800c61f 	.word	0x0800c61f
 800c5a8:	0800c5db 	.word	0x0800c5db
 800c5ac:	0800c605 	.word	0x0800c605
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d107      	bne.n	800c5cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c5bc:	f107 030a 	add.w	r3, r7, #10
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f001 fd17 	bl	800dff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c5ca:	e032      	b.n	800c632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f001 fca1 	bl	800df16 <USBD_CtlError>
            ret = USBD_FAIL;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	75fb      	strb	r3, [r7, #23]
          break;
 800c5d8:	e02b      	b.n	800c632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b03      	cmp	r3, #3
 800c5e4:	d107      	bne.n	800c5f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c5e6:	f107 030d 	add.w	r3, r7, #13
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f001 fd02 	bl	800dff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c5f4:	e01d      	b.n	800c632 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c5f6:	6839      	ldr	r1, [r7, #0]
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f001 fc8c 	bl	800df16 <USBD_CtlError>
            ret = USBD_FAIL;
 800c5fe:	2303      	movs	r3, #3
 800c600:	75fb      	strb	r3, [r7, #23]
          break;
 800c602:	e016      	b.n	800c632 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	d00f      	beq.n	800c630 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 fc7f 	bl	800df16 <USBD_CtlError>
            ret = USBD_FAIL;
 800c618:	2303      	movs	r3, #3
 800c61a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c61c:	e008      	b.n	800c630 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f001 fc78 	bl	800df16 <USBD_CtlError>
          ret = USBD_FAIL;
 800c626:	2303      	movs	r3, #3
 800c628:	75fb      	strb	r3, [r7, #23]
          break;
 800c62a:	e002      	b.n	800c632 <USBD_CDC_Setup+0x19e>
          break;
 800c62c:	bf00      	nop
 800c62e:	e008      	b.n	800c642 <USBD_CDC_Setup+0x1ae>
          break;
 800c630:	bf00      	nop
      }
      break;
 800c632:	e006      	b.n	800c642 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f001 fc6d 	bl	800df16 <USBD_CtlError>
      ret = USBD_FAIL;
 800c63c:	2303      	movs	r3, #3
 800c63e:	75fb      	strb	r3, [r7, #23]
      break;
 800c640:	bf00      	nop
  }

  return (uint8_t)ret;
 800c642:	7dfb      	ldrb	r3, [r7, #23]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c65e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	32b0      	adds	r2, #176	; 0xb0
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c672:	2303      	movs	r3, #3
 800c674:	e065      	b.n	800c742 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	32b0      	adds	r2, #176	; 0xb0
 800c680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c684:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c686:	78fb      	ldrb	r3, [r7, #3]
 800c688:	f003 020f 	and.w	r2, r3, #15
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	3318      	adds	r3, #24
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d02f      	beq.n	800c700 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	f003 020f 	and.w	r2, r3, #15
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	440b      	add	r3, r1
 800c6b2:	3318      	adds	r3, #24
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	78fb      	ldrb	r3, [r7, #3]
 800c6b8:	f003 010f 	and.w	r1, r3, #15
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	440b      	add	r3, r1
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4403      	add	r3, r0
 800c6c8:	3348      	adds	r3, #72	; 0x48
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800c6d0:	fb01 f303 	mul.w	r3, r1, r3
 800c6d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d112      	bne.n	800c700 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	f003 020f 	and.w	r2, r3, #15
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	440b      	add	r3, r1
 800c6ec:	3318      	adds	r3, #24
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c6f2:	78f9      	ldrb	r1, [r7, #3]
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f004 ff82 	bl	8011602 <USBD_LL_Transmit>
 800c6fe:	e01f      	b.n	800c740 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2200      	movs	r2, #0
 800c704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	33b0      	adds	r3, #176	; 0xb0
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d010      	beq.n	800c740 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	33b0      	adds	r3, #176	; 0xb0
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c73c:	78fa      	ldrb	r2, [r7, #3]
 800c73e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	460b      	mov	r3, r1
 800c754:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	32b0      	adds	r2, #176	; 0xb0
 800c760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c764:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	32b0      	adds	r2, #176	; 0xb0
 800c770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d101      	bne.n	800c77c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c778:	2303      	movs	r3, #3
 800c77a:	e01a      	b.n	800c7b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c77c:	78fb      	ldrb	r3, [r7, #3]
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f004 ff80 	bl	8011686 <USBD_LL_GetRxDataSize>
 800c786:	4602      	mov	r2, r0
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	33b0      	adds	r3, #176	; 0xb0
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b084      	sub	sp, #16
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	32b0      	adds	r2, #176	; 0xb0
 800c7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e025      	b.n	800c828 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	33b0      	adds	r3, #176	; 0xb0
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d01a      	beq.n	800c826 <USBD_CDC_EP0_RxReady+0x6c>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c7f6:	2bff      	cmp	r3, #255	; 0xff
 800c7f8:	d015      	beq.n	800c826 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	33b0      	adds	r3, #176	; 0xb0
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c812:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c81a:	b292      	uxth	r2, r2
 800c81c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	22ff      	movs	r2, #255	; 0xff
 800c822:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c838:	2182      	movs	r1, #130	; 0x82
 800c83a:	4818      	ldr	r0, [pc, #96]	; (800c89c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c83c:	f000 fd09 	bl	800d252 <USBD_GetEpDesc>
 800c840:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c842:	2101      	movs	r1, #1
 800c844:	4815      	ldr	r0, [pc, #84]	; (800c89c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c846:	f000 fd04 	bl	800d252 <USBD_GetEpDesc>
 800c84a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c84c:	2181      	movs	r1, #129	; 0x81
 800c84e:	4813      	ldr	r0, [pc, #76]	; (800c89c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c850:	f000 fcff 	bl	800d252 <USBD_GetEpDesc>
 800c854:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	2210      	movs	r2, #16
 800c860:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d006      	beq.n	800c876 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	2200      	movs	r2, #0
 800c86c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c870:	711a      	strb	r2, [r3, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d006      	beq.n	800c88a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c884:	711a      	strb	r2, [r3, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2243      	movs	r2, #67	; 0x43
 800c88e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c890:	4b02      	ldr	r3, [pc, #8]	; (800c89c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c892:	4618      	mov	r0, r3
 800c894:	3718      	adds	r7, #24
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	20000054 	.word	0x20000054

0800c8a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c8a8:	2182      	movs	r1, #130	; 0x82
 800c8aa:	4818      	ldr	r0, [pc, #96]	; (800c90c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c8ac:	f000 fcd1 	bl	800d252 <USBD_GetEpDesc>
 800c8b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	4815      	ldr	r0, [pc, #84]	; (800c90c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c8b6:	f000 fccc 	bl	800d252 <USBD_GetEpDesc>
 800c8ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c8bc:	2181      	movs	r1, #129	; 0x81
 800c8be:	4813      	ldr	r0, [pc, #76]	; (800c90c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c8c0:	f000 fcc7 	bl	800d252 <USBD_GetEpDesc>
 800c8c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	2210      	movs	r2, #16
 800c8d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d006      	beq.n	800c8e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	711a      	strb	r2, [r3, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f042 0202 	orr.w	r2, r2, #2
 800c8e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d006      	beq.n	800c8fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	711a      	strb	r2, [r3, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f042 0202 	orr.w	r2, r2, #2
 800c8f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2243      	movs	r2, #67	; 0x43
 800c8fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c900:	4b02      	ldr	r3, [pc, #8]	; (800c90c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	20000054 	.word	0x20000054

0800c910 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c918:	2182      	movs	r1, #130	; 0x82
 800c91a:	4818      	ldr	r0, [pc, #96]	; (800c97c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c91c:	f000 fc99 	bl	800d252 <USBD_GetEpDesc>
 800c920:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c922:	2101      	movs	r1, #1
 800c924:	4815      	ldr	r0, [pc, #84]	; (800c97c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c926:	f000 fc94 	bl	800d252 <USBD_GetEpDesc>
 800c92a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c92c:	2181      	movs	r1, #129	; 0x81
 800c92e:	4813      	ldr	r0, [pc, #76]	; (800c97c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c930:	f000 fc8f 	bl	800d252 <USBD_GetEpDesc>
 800c934:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	2210      	movs	r2, #16
 800c940:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d006      	beq.n	800c956 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c950:	711a      	strb	r2, [r3, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d006      	beq.n	800c96a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c964:	711a      	strb	r2, [r3, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2243      	movs	r2, #67	; 0x43
 800c96e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c970:	4b02      	ldr	r3, [pc, #8]	; (800c97c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20000054 	.word	0x20000054

0800c980 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	220a      	movs	r2, #10
 800c98c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c98e:	4b03      	ldr	r3, [pc, #12]	; (800c99c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c990:	4618      	mov	r0, r3
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	20000010 	.word	0x20000010

0800c9a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c9b0:	2303      	movs	r3, #3
 800c9b2:	e009      	b.n	800c9c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	33b0      	adds	r3, #176	; 0xb0
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	4413      	add	r3, r2
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	32b0      	adds	r2, #176	; 0xb0
 800c9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e008      	b.n	800ca0c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	371c      	adds	r7, #28
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	32b0      	adds	r2, #176	; 0xb0
 800ca2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e004      	b.n	800ca46 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
	...

0800ca54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	32b0      	adds	r2, #176	; 0xb0
 800ca66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	32b0      	adds	r2, #176	; 0xb0
 800ca76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	e018      	b.n	800cab4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	7c1b      	ldrb	r3, [r3, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10a      	bne.n	800caa0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca8a:	4b0c      	ldr	r3, [pc, #48]	; (800cabc <USBD_CDC_ReceivePacket+0x68>)
 800ca8c:	7819      	ldrb	r1, [r3, #0]
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f004 fdd3 	bl	8011644 <USBD_LL_PrepareReceive>
 800ca9e:	e008      	b.n	800cab2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800caa0:	4b06      	ldr	r3, [pc, #24]	; (800cabc <USBD_CDC_ReceivePacket+0x68>)
 800caa2:	7819      	ldrb	r1, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800caaa:	2340      	movs	r3, #64	; 0x40
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f004 fdc9 	bl	8011644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	20000098 	.word	0x20000098

0800cac0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	4613      	mov	r3, r2
 800cacc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cad4:	2303      	movs	r3, #3
 800cad6:	e01f      	b.n	800cb18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	79fa      	ldrb	r2, [r7, #7]
 800cb0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f004 fc43 	bl	8011398 <USBD_LL_Init>
 800cb12:	4603      	mov	r3, r0
 800cb14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cb34:	2303      	movs	r3, #3
 800cb36:	e025      	b.n	800cb84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	683a      	ldr	r2, [r7, #0]
 800cb3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	32ae      	adds	r2, #174	; 0xae
 800cb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00f      	beq.n	800cb74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	32ae      	adds	r2, #174	; 0xae
 800cb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	f107 020e 	add.w	r2, r7, #14
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4798      	blx	r3
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cb7a:	1c5a      	adds	r2, r3, #1
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f004 fc4b 	bl	8011430 <USBD_LL_Start>
 800cb9a:	4603      	mov	r3, r0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b084      	sub	sp, #16
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d009      	beq.n	800cbe8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	78fa      	ldrb	r2, [r7, #3]
 800cbde:	4611      	mov	r1, r2
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	4798      	blx	r3
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	78fa      	ldrb	r2, [r7, #3]
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	4798      	blx	r3
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f001 f932 	bl	800dea2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2201      	movs	r2, #1
 800cc42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cc5a:	f003 031f 	and.w	r3, r3, #31
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d01a      	beq.n	800cc98 <USBD_LL_SetupStage+0x72>
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	d822      	bhi.n	800ccac <USBD_LL_SetupStage+0x86>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <USBD_LL_SetupStage+0x4a>
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d00a      	beq.n	800cc84 <USBD_LL_SetupStage+0x5e>
 800cc6e:	e01d      	b.n	800ccac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc76:	4619      	mov	r1, r3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fb5f 	bl	800d33c <USBD_StdDevReq>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]
      break;
 800cc82:	e020      	b.n	800ccc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fbc7 	bl	800d420 <USBD_StdItfReq>
 800cc92:	4603      	mov	r3, r0
 800cc94:	73fb      	strb	r3, [r7, #15]
      break;
 800cc96:	e016      	b.n	800ccc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fc29 	bl	800d4f8 <USBD_StdEPReq>
 800cca6:	4603      	mov	r3, r0
 800cca8:	73fb      	strb	r3, [r7, #15]
      break;
 800ccaa:	e00c      	b.n	800ccc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ccb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f004 fc18 	bl	80114f0 <USBD_LL_StallEP>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73fb      	strb	r3, [r7, #15]
      break;
 800ccc4:	bf00      	nop
  }

  return ret;
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cce2:	7afb      	ldrb	r3, [r7, #11]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d16e      	bne.n	800cdc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ccee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccf6:	2b03      	cmp	r3, #3
 800ccf8:	f040 8098 	bne.w	800ce2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	689a      	ldr	r2, [r3, #8]
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d913      	bls.n	800cd30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	689a      	ldr	r2, [r3, #8]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	1ad2      	subs	r2, r2, r3
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	68da      	ldr	r2, [r3, #12]
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	bf28      	it	cs
 800cd22:	4613      	movcs	r3, r2
 800cd24:	461a      	mov	r2, r3
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f001 f9ae 	bl	800e08a <USBD_CtlContinueRx>
 800cd2e:	e07d      	b.n	800ce2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cd36:	f003 031f 	and.w	r3, r3, #31
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d014      	beq.n	800cd68 <USBD_LL_DataOutStage+0x98>
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d81d      	bhi.n	800cd7e <USBD_LL_DataOutStage+0xae>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d002      	beq.n	800cd4c <USBD_LL_DataOutStage+0x7c>
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d003      	beq.n	800cd52 <USBD_LL_DataOutStage+0x82>
 800cd4a:	e018      	b.n	800cd7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	75bb      	strb	r3, [r7, #22]
            break;
 800cd50:	e018      	b.n	800cd84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 fa5e 	bl	800d21e <USBD_CoreFindIF>
 800cd62:	4603      	mov	r3, r0
 800cd64:	75bb      	strb	r3, [r7, #22]
            break;
 800cd66:	e00d      	b.n	800cd84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	4619      	mov	r1, r3
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f000 fa60 	bl	800d238 <USBD_CoreFindEP>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	75bb      	strb	r3, [r7, #22]
            break;
 800cd7c:	e002      	b.n	800cd84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	75bb      	strb	r3, [r7, #22]
            break;
 800cd82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cd84:	7dbb      	ldrb	r3, [r7, #22]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d119      	bne.n	800cdbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d113      	bne.n	800cdbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cd96:	7dba      	ldrb	r2, [r7, #22]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	32ae      	adds	r2, #174	; 0xae
 800cd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00b      	beq.n	800cdbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cda6:	7dba      	ldrb	r2, [r7, #22]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cdae:	7dba      	ldrb	r2, [r7, #22]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	32ae      	adds	r2, #174	; 0xae
 800cdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f001 f974 	bl	800e0ac <USBD_CtlSendStatus>
 800cdc4:	e032      	b.n	800ce2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cdc6:	7afb      	ldrb	r3, [r7, #11]
 800cdc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	4619      	mov	r1, r3
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 fa31 	bl	800d238 <USBD_CoreFindEP>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdda:	7dbb      	ldrb	r3, [r7, #22]
 800cddc:	2bff      	cmp	r3, #255	; 0xff
 800cdde:	d025      	beq.n	800ce2c <USBD_LL_DataOutStage+0x15c>
 800cde0:	7dbb      	ldrb	r3, [r7, #22]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d122      	bne.n	800ce2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d117      	bne.n	800ce22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cdf2:	7dba      	ldrb	r2, [r7, #22]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	32ae      	adds	r2, #174	; 0xae
 800cdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00f      	beq.n	800ce22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ce02:	7dba      	ldrb	r2, [r7, #22]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ce0a:	7dba      	ldrb	r2, [r7, #22]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	32ae      	adds	r2, #174	; 0xae
 800ce10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce14:	699b      	ldr	r3, [r3, #24]
 800ce16:	7afa      	ldrb	r2, [r7, #11]
 800ce18:	4611      	mov	r1, r2
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	4798      	blx	r3
 800ce1e:	4603      	mov	r3, r0
 800ce20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	e000      	b.n	800ce2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ce2c:	2300      	movs	r3, #0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b086      	sub	sp, #24
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	460b      	mov	r3, r1
 800ce40:	607a      	str	r2, [r7, #4]
 800ce42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d16f      	bne.n	800cf2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	3314      	adds	r3, #20
 800ce4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d15a      	bne.n	800cf10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	689a      	ldr	r2, [r3, #8]
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d914      	bls.n	800ce90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	689a      	ldr	r2, [r3, #8]
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	1ad2      	subs	r2, r2, r3
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	6879      	ldr	r1, [r7, #4]
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f001 f8d6 	bl	800e02e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce82:	2300      	movs	r3, #0
 800ce84:	2200      	movs	r2, #0
 800ce86:	2100      	movs	r1, #0
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f004 fbdb 	bl	8011644 <USBD_LL_PrepareReceive>
 800ce8e:	e03f      	b.n	800cf10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	68da      	ldr	r2, [r3, #12]
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d11c      	bne.n	800ced6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d316      	bcc.n	800ced6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	685a      	ldr	r2, [r3, #4]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d20f      	bcs.n	800ced6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	2100      	movs	r1, #0
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f001 f8b7 	bl	800e02e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cec8:	2300      	movs	r3, #0
 800ceca:	2200      	movs	r2, #0
 800cecc:	2100      	movs	r1, #0
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f004 fbb8 	bl	8011644 <USBD_LL_PrepareReceive>
 800ced4:	e01c      	b.n	800cf10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b03      	cmp	r3, #3
 800cee0:	d10f      	bne.n	800cf02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d009      	beq.n	800cf02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf02:	2180      	movs	r1, #128	; 0x80
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f004 faf3 	bl	80114f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f001 f8e1 	bl	800e0d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d03a      	beq.n	800cf90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7ff fe42 	bl	800cba4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cf28:	e032      	b.n	800cf90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cf2a:	7afb      	ldrb	r3, [r7, #11]
 800cf2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	4619      	mov	r1, r3
 800cf34:	68f8      	ldr	r0, [r7, #12]
 800cf36:	f000 f97f 	bl	800d238 <USBD_CoreFindEP>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	2bff      	cmp	r3, #255	; 0xff
 800cf42:	d025      	beq.n	800cf90 <USBD_LL_DataInStage+0x15a>
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d122      	bne.n	800cf90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	d11c      	bne.n	800cf90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cf56:	7dfa      	ldrb	r2, [r7, #23]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	32ae      	adds	r2, #174	; 0xae
 800cf5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf60:	695b      	ldr	r3, [r3, #20]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d014      	beq.n	800cf90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cf66:	7dfa      	ldrb	r2, [r7, #23]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cf6e:	7dfa      	ldrb	r2, [r7, #23]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	32ae      	adds	r2, #174	; 0xae
 800cf74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	7afa      	ldrb	r2, [r7, #11]
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	4798      	blx	r3
 800cf82:	4603      	mov	r3, r0
 800cf84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cf86:	7dbb      	ldrb	r3, [r7, #22]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cf8c:	7dbb      	ldrb	r3, [r7, #22]
 800cf8e:	e000      	b.n	800cf92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3718      	adds	r7, #24
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d014      	beq.n	800d000 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00e      	beq.n	800d000 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	6852      	ldr	r2, [r2, #4]
 800cfee:	b2d2      	uxtb	r2, r2
 800cff0:	4611      	mov	r1, r2
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	4798      	blx	r3
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cffc:	2303      	movs	r3, #3
 800cffe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	2200      	movs	r2, #0
 800d004:	2100      	movs	r1, #0
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f004 fa2d 	bl	8011466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2240      	movs	r2, #64	; 0x40
 800d018:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d01c:	2340      	movs	r3, #64	; 0x40
 800d01e:	2200      	movs	r2, #0
 800d020:	2180      	movs	r1, #128	; 0x80
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f004 fa1f 	bl	8011466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2240      	movs	r2, #64	; 0x40
 800d032:	621a      	str	r2, [r3, #32]

  return ret;
 800d034:	7bfb      	ldrb	r3, [r7, #15]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d03e:	b480      	push	{r7}
 800d040:	b083      	sub	sp, #12
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	460b      	mov	r3, r1
 800d048:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	78fa      	ldrb	r2, [r7, #3]
 800d04e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d05e:	b480      	push	{r7}
 800d060:	b083      	sub	sp, #12
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2204      	movs	r2, #4
 800d078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b04      	cmp	r3, #4
 800d09c:	d106      	bne.n	800d0ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b082      	sub	sp, #8
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	d110      	bne.n	800d0f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00b      	beq.n	800d0f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0de:	69db      	ldr	r3, [r3, #28]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d005      	beq.n	800d0f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ea:	69db      	ldr	r3, [r3, #28]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b082      	sub	sp, #8
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	460b      	mov	r3, r1
 800d104:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	32ae      	adds	r2, #174	; 0xae
 800d110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d101      	bne.n	800d11c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d118:	2303      	movs	r3, #3
 800d11a:	e01c      	b.n	800d156 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b03      	cmp	r3, #3
 800d126:	d115      	bne.n	800d154 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	32ae      	adds	r2, #174	; 0xae
 800d132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d136:	6a1b      	ldr	r3, [r3, #32]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00b      	beq.n	800d154 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	32ae      	adds	r2, #174	; 0xae
 800d146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	78fa      	ldrb	r2, [r7, #3]
 800d14e:	4611      	mov	r1, r2
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	460b      	mov	r3, r1
 800d168:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	32ae      	adds	r2, #174	; 0xae
 800d174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d17c:	2303      	movs	r3, #3
 800d17e:	e01c      	b.n	800d1ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d115      	bne.n	800d1b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	32ae      	adds	r2, #174	; 0xae
 800d196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00b      	beq.n	800d1b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	32ae      	adds	r2, #174	; 0xae
 800d1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	78fa      	ldrb	r2, [r7, #3]
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b083      	sub	sp, #12
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00e      	beq.n	800d214 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	6852      	ldr	r2, [r2, #4]
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	4611      	mov	r1, r2
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	4798      	blx	r3
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d210:	2303      	movs	r3, #3
 800d212:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d214:	7bfb      	ldrb	r3, [r7, #15]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	460b      	mov	r3, r1
 800d228:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d22a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d244:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d246:	4618      	mov	r0, r3
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b086      	sub	sp, #24
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	885b      	ldrh	r3, [r3, #2]
 800d26e:	b29a      	uxth	r2, r3
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	b29b      	uxth	r3, r3
 800d276:	429a      	cmp	r2, r3
 800d278:	d920      	bls.n	800d2bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	b29b      	uxth	r3, r3
 800d280:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d282:	e013      	b.n	800d2ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d284:	f107 030a 	add.w	r3, r7, #10
 800d288:	4619      	mov	r1, r3
 800d28a:	6978      	ldr	r0, [r7, #20]
 800d28c:	f000 f81b 	bl	800d2c6 <USBD_GetNextDesc>
 800d290:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	785b      	ldrb	r3, [r3, #1]
 800d296:	2b05      	cmp	r3, #5
 800d298:	d108      	bne.n	800d2ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	789b      	ldrb	r3, [r3, #2]
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d008      	beq.n	800d2ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	885b      	ldrh	r3, [r3, #2]
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	897b      	ldrh	r3, [r7, #10]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d8e5      	bhi.n	800d284 <USBD_GetEpDesc+0x32>
 800d2b8:	e000      	b.n	800d2bc <USBD_GetEpDesc+0x6a>
          break;
 800d2ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d2bc:	693b      	ldr	r3, [r7, #16]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b085      	sub	sp, #20
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	881a      	ldrh	r2, [r3, #0]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	4413      	add	r3, r2
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d300:	b480      	push	{r7}
 800d302:	b087      	sub	sp, #28
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	3301      	adds	r3, #1
 800d316:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d31e:	8a3b      	ldrh	r3, [r7, #16]
 800d320:	021b      	lsls	r3, r3, #8
 800d322:	b21a      	sxth	r2, r3
 800d324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d328:	4313      	orrs	r3, r2
 800d32a:	b21b      	sxth	r3, r3
 800d32c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d32e:	89fb      	ldrh	r3, [r7, #14]
}
 800d330:	4618      	mov	r0, r3
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d346:	2300      	movs	r3, #0
 800d348:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d352:	2b40      	cmp	r3, #64	; 0x40
 800d354:	d005      	beq.n	800d362 <USBD_StdDevReq+0x26>
 800d356:	2b40      	cmp	r3, #64	; 0x40
 800d358:	d857      	bhi.n	800d40a <USBD_StdDevReq+0xce>
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00f      	beq.n	800d37e <USBD_StdDevReq+0x42>
 800d35e:	2b20      	cmp	r3, #32
 800d360:	d153      	bne.n	800d40a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	32ae      	adds	r2, #174	; 0xae
 800d36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	6839      	ldr	r1, [r7, #0]
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	4798      	blx	r3
 800d378:	4603      	mov	r3, r0
 800d37a:	73fb      	strb	r3, [r7, #15]
      break;
 800d37c:	e04a      	b.n	800d414 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	785b      	ldrb	r3, [r3, #1]
 800d382:	2b09      	cmp	r3, #9
 800d384:	d83b      	bhi.n	800d3fe <USBD_StdDevReq+0xc2>
 800d386:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <USBD_StdDevReq+0x50>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d3e1 	.word	0x0800d3e1
 800d390:	0800d3f5 	.word	0x0800d3f5
 800d394:	0800d3ff 	.word	0x0800d3ff
 800d398:	0800d3eb 	.word	0x0800d3eb
 800d39c:	0800d3ff 	.word	0x0800d3ff
 800d3a0:	0800d3bf 	.word	0x0800d3bf
 800d3a4:	0800d3b5 	.word	0x0800d3b5
 800d3a8:	0800d3ff 	.word	0x0800d3ff
 800d3ac:	0800d3d7 	.word	0x0800d3d7
 800d3b0:	0800d3c9 	.word	0x0800d3c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fa3c 	bl	800d834 <USBD_GetDescriptor>
          break;
 800d3bc:	e024      	b.n	800d408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 fbcb 	bl	800db5c <USBD_SetAddress>
          break;
 800d3c6:	e01f      	b.n	800d408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 fc0a 	bl	800dbe4 <USBD_SetConfig>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]
          break;
 800d3d4:	e018      	b.n	800d408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 fcad 	bl	800dd38 <USBD_GetConfig>
          break;
 800d3de:	e013      	b.n	800d408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fcde 	bl	800dda4 <USBD_GetStatus>
          break;
 800d3e8:	e00e      	b.n	800d408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fd0d 	bl	800de0c <USBD_SetFeature>
          break;
 800d3f2:	e009      	b.n	800d408 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d3f4:	6839      	ldr	r1, [r7, #0]
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fd31 	bl	800de5e <USBD_ClrFeature>
          break;
 800d3fc:	e004      	b.n	800d408 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fd88 	bl	800df16 <USBD_CtlError>
          break;
 800d406:	bf00      	nop
      }
      break;
 800d408:	e004      	b.n	800d414 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 fd82 	bl	800df16 <USBD_CtlError>
      break;
 800d412:	bf00      	nop
  }

  return ret;
 800d414:	7bfb      	ldrb	r3, [r7, #15]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop

0800d420 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d436:	2b40      	cmp	r3, #64	; 0x40
 800d438:	d005      	beq.n	800d446 <USBD_StdItfReq+0x26>
 800d43a:	2b40      	cmp	r3, #64	; 0x40
 800d43c:	d852      	bhi.n	800d4e4 <USBD_StdItfReq+0xc4>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d001      	beq.n	800d446 <USBD_StdItfReq+0x26>
 800d442:	2b20      	cmp	r3, #32
 800d444:	d14e      	bne.n	800d4e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	3b01      	subs	r3, #1
 800d450:	2b02      	cmp	r3, #2
 800d452:	d840      	bhi.n	800d4d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	889b      	ldrh	r3, [r3, #4]
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d836      	bhi.n	800d4cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	889b      	ldrh	r3, [r3, #4]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff fed9 	bl	800d21e <USBD_CoreFindIF>
 800d46c:	4603      	mov	r3, r0
 800d46e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d470:	7bbb      	ldrb	r3, [r7, #14]
 800d472:	2bff      	cmp	r3, #255	; 0xff
 800d474:	d01d      	beq.n	800d4b2 <USBD_StdItfReq+0x92>
 800d476:	7bbb      	ldrb	r3, [r7, #14]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d11a      	bne.n	800d4b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d47c:	7bba      	ldrb	r2, [r7, #14]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	32ae      	adds	r2, #174	; 0xae
 800d482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00f      	beq.n	800d4ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d48c:	7bba      	ldrb	r2, [r7, #14]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d494:	7bba      	ldrb	r2, [r7, #14]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	32ae      	adds	r2, #174	; 0xae
 800d49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	4798      	blx	r3
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d4aa:	e004      	b.n	800d4b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d4ac:	2303      	movs	r3, #3
 800d4ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d4b0:	e001      	b.n	800d4b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	88db      	ldrh	r3, [r3, #6]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d110      	bne.n	800d4e0 <USBD_StdItfReq+0xc0>
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10d      	bne.n	800d4e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fdf1 	bl	800e0ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d4ca:	e009      	b.n	800d4e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d4cc:	6839      	ldr	r1, [r7, #0]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fd21 	bl	800df16 <USBD_CtlError>
          break;
 800d4d4:	e004      	b.n	800d4e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d4d6:	6839      	ldr	r1, [r7, #0]
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fd1c 	bl	800df16 <USBD_CtlError>
          break;
 800d4de:	e000      	b.n	800d4e2 <USBD_StdItfReq+0xc2>
          break;
 800d4e0:	bf00      	nop
      }
      break;
 800d4e2:	e004      	b.n	800d4ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fd15 	bl	800df16 <USBD_CtlError>
      break;
 800d4ec:	bf00      	nop
  }

  return ret;
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	889b      	ldrh	r3, [r3, #4]
 800d50a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d514:	2b40      	cmp	r3, #64	; 0x40
 800d516:	d007      	beq.n	800d528 <USBD_StdEPReq+0x30>
 800d518:	2b40      	cmp	r3, #64	; 0x40
 800d51a:	f200 817f 	bhi.w	800d81c <USBD_StdEPReq+0x324>
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d02a      	beq.n	800d578 <USBD_StdEPReq+0x80>
 800d522:	2b20      	cmp	r3, #32
 800d524:	f040 817a 	bne.w	800d81c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d528:	7bbb      	ldrb	r3, [r7, #14]
 800d52a:	4619      	mov	r1, r3
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff fe83 	bl	800d238 <USBD_CoreFindEP>
 800d532:	4603      	mov	r3, r0
 800d534:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d536:	7b7b      	ldrb	r3, [r7, #13]
 800d538:	2bff      	cmp	r3, #255	; 0xff
 800d53a:	f000 8174 	beq.w	800d826 <USBD_StdEPReq+0x32e>
 800d53e:	7b7b      	ldrb	r3, [r7, #13]
 800d540:	2b00      	cmp	r3, #0
 800d542:	f040 8170 	bne.w	800d826 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d546:	7b7a      	ldrb	r2, [r7, #13]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d54e:	7b7a      	ldrb	r2, [r7, #13]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	32ae      	adds	r2, #174	; 0xae
 800d554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f000 8163 	beq.w	800d826 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d560:	7b7a      	ldrb	r2, [r7, #13]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	32ae      	adds	r2, #174	; 0xae
 800d566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	4798      	blx	r3
 800d572:	4603      	mov	r3, r0
 800d574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d576:	e156      	b.n	800d826 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	785b      	ldrb	r3, [r3, #1]
 800d57c:	2b03      	cmp	r3, #3
 800d57e:	d008      	beq.n	800d592 <USBD_StdEPReq+0x9a>
 800d580:	2b03      	cmp	r3, #3
 800d582:	f300 8145 	bgt.w	800d810 <USBD_StdEPReq+0x318>
 800d586:	2b00      	cmp	r3, #0
 800d588:	f000 809b 	beq.w	800d6c2 <USBD_StdEPReq+0x1ca>
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d03c      	beq.n	800d60a <USBD_StdEPReq+0x112>
 800d590:	e13e      	b.n	800d810 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d002      	beq.n	800d5a4 <USBD_StdEPReq+0xac>
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d016      	beq.n	800d5d0 <USBD_StdEPReq+0xd8>
 800d5a2:	e02c      	b.n	800d5fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5a4:	7bbb      	ldrb	r3, [r7, #14]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00d      	beq.n	800d5c6 <USBD_StdEPReq+0xce>
 800d5aa:	7bbb      	ldrb	r3, [r7, #14]
 800d5ac:	2b80      	cmp	r3, #128	; 0x80
 800d5ae:	d00a      	beq.n	800d5c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5b0:	7bbb      	ldrb	r3, [r7, #14]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f003 ff9b 	bl	80114f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5ba:	2180      	movs	r1, #128	; 0x80
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f003 ff97 	bl	80114f0 <USBD_LL_StallEP>
 800d5c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5c4:	e020      	b.n	800d608 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fca4 	bl	800df16 <USBD_CtlError>
              break;
 800d5ce:	e01b      	b.n	800d608 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	885b      	ldrh	r3, [r3, #2]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10e      	bne.n	800d5f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00b      	beq.n	800d5f6 <USBD_StdEPReq+0xfe>
 800d5de:	7bbb      	ldrb	r3, [r7, #14]
 800d5e0:	2b80      	cmp	r3, #128	; 0x80
 800d5e2:	d008      	beq.n	800d5f6 <USBD_StdEPReq+0xfe>
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	88db      	ldrh	r3, [r3, #6]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d104      	bne.n	800d5f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f003 ff7d 	bl	80114f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fd58 	bl	800e0ac <USBD_CtlSendStatus>

              break;
 800d5fc:	e004      	b.n	800d608 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fc88 	bl	800df16 <USBD_CtlError>
              break;
 800d606:	bf00      	nop
          }
          break;
 800d608:	e107      	b.n	800d81a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b02      	cmp	r3, #2
 800d614:	d002      	beq.n	800d61c <USBD_StdEPReq+0x124>
 800d616:	2b03      	cmp	r3, #3
 800d618:	d016      	beq.n	800d648 <USBD_StdEPReq+0x150>
 800d61a:	e04b      	b.n	800d6b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00d      	beq.n	800d63e <USBD_StdEPReq+0x146>
 800d622:	7bbb      	ldrb	r3, [r7, #14]
 800d624:	2b80      	cmp	r3, #128	; 0x80
 800d626:	d00a      	beq.n	800d63e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f003 ff5f 	bl	80114f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d632:	2180      	movs	r1, #128	; 0x80
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f003 ff5b 	bl	80114f0 <USBD_LL_StallEP>
 800d63a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d63c:	e040      	b.n	800d6c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fc68 	bl	800df16 <USBD_CtlError>
              break;
 800d646:	e03b      	b.n	800d6c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	885b      	ldrh	r3, [r3, #2]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d136      	bne.n	800d6be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d650:	7bbb      	ldrb	r3, [r7, #14]
 800d652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d656:	2b00      	cmp	r3, #0
 800d658:	d004      	beq.n	800d664 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d65a:	7bbb      	ldrb	r3, [r7, #14]
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f003 ff65 	bl	801152e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fd21 	bl	800e0ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
 800d66c:	4619      	mov	r1, r3
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7ff fde2 	bl	800d238 <USBD_CoreFindEP>
 800d674:	4603      	mov	r3, r0
 800d676:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d678:	7b7b      	ldrb	r3, [r7, #13]
 800d67a:	2bff      	cmp	r3, #255	; 0xff
 800d67c:	d01f      	beq.n	800d6be <USBD_StdEPReq+0x1c6>
 800d67e:	7b7b      	ldrb	r3, [r7, #13]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d11c      	bne.n	800d6be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d684:	7b7a      	ldrb	r2, [r7, #13]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d68c:	7b7a      	ldrb	r2, [r7, #13]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	32ae      	adds	r2, #174	; 0xae
 800d692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d010      	beq.n	800d6be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d69c:	7b7a      	ldrb	r2, [r7, #13]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	32ae      	adds	r2, #174	; 0xae
 800d6a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	6839      	ldr	r1, [r7, #0]
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	4798      	blx	r3
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d6b2:	e004      	b.n	800d6be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fc2d 	bl	800df16 <USBD_CtlError>
              break;
 800d6bc:	e000      	b.n	800d6c0 <USBD_StdEPReq+0x1c8>
              break;
 800d6be:	bf00      	nop
          }
          break;
 800d6c0:	e0ab      	b.n	800d81a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d002      	beq.n	800d6d4 <USBD_StdEPReq+0x1dc>
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d032      	beq.n	800d738 <USBD_StdEPReq+0x240>
 800d6d2:	e097      	b.n	800d804 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d007      	beq.n	800d6ea <USBD_StdEPReq+0x1f2>
 800d6da:	7bbb      	ldrb	r3, [r7, #14]
 800d6dc:	2b80      	cmp	r3, #128	; 0x80
 800d6de:	d004      	beq.n	800d6ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fc17 	bl	800df16 <USBD_CtlError>
                break;
 800d6e8:	e091      	b.n	800d80e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	da0b      	bge.n	800d70a <USBD_StdEPReq+0x212>
 800d6f2:	7bbb      	ldrb	r3, [r7, #14]
 800d6f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4413      	add	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	3310      	adds	r3, #16
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	4413      	add	r3, r2
 800d706:	3304      	adds	r3, #4
 800d708:	e00b      	b.n	800d722 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
 800d70c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d710:	4613      	mov	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	4413      	add	r3, r2
 800d720:	3304      	adds	r3, #4
 800d722:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	2200      	movs	r2, #0
 800d728:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	2202      	movs	r2, #2
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fc61 	bl	800dff8 <USBD_CtlSendData>
              break;
 800d736:	e06a      	b.n	800d80e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da11      	bge.n	800d764 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d740:	7bbb      	ldrb	r3, [r7, #14]
 800d742:	f003 020f 	and.w	r2, r3, #15
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	440b      	add	r3, r1
 800d752:	3324      	adds	r3, #36	; 0x24
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d117      	bne.n	800d78a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d75a:	6839      	ldr	r1, [r7, #0]
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fbda 	bl	800df16 <USBD_CtlError>
                  break;
 800d762:	e054      	b.n	800d80e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d764:	7bbb      	ldrb	r3, [r7, #14]
 800d766:	f003 020f 	and.w	r2, r3, #15
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	4613      	mov	r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4413      	add	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	440b      	add	r3, r1
 800d776:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d104      	bne.n	800d78a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fbc7 	bl	800df16 <USBD_CtlError>
                  break;
 800d788:	e041      	b.n	800d80e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d78a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	da0b      	bge.n	800d7aa <USBD_StdEPReq+0x2b2>
 800d792:	7bbb      	ldrb	r3, [r7, #14]
 800d794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	3310      	adds	r3, #16
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	e00b      	b.n	800d7c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7aa:	7bbb      	ldrb	r3, [r7, #14]
 800d7ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	4413      	add	r3, r2
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d7c4:	7bbb      	ldrb	r3, [r7, #14]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <USBD_StdEPReq+0x2d8>
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	2b80      	cmp	r3, #128	; 0x80
 800d7ce:	d103      	bne.n	800d7d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	e00e      	b.n	800d7f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d7d8:	7bbb      	ldrb	r3, [r7, #14]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f003 fec5 	bl	801156c <USBD_LL_IsStallEP>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	e002      	b.n	800d7f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2202      	movs	r2, #2
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 fbfb 	bl	800dff8 <USBD_CtlSendData>
              break;
 800d802:	e004      	b.n	800d80e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 fb85 	bl	800df16 <USBD_CtlError>
              break;
 800d80c:	bf00      	nop
          }
          break;
 800d80e:	e004      	b.n	800d81a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d810:	6839      	ldr	r1, [r7, #0]
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fb7f 	bl	800df16 <USBD_CtlError>
          break;
 800d818:	bf00      	nop
      }
      break;
 800d81a:	e005      	b.n	800d828 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d81c:	6839      	ldr	r1, [r7, #0]
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fb79 	bl	800df16 <USBD_CtlError>
      break;
 800d824:	e000      	b.n	800d828 <USBD_StdEPReq+0x330>
      break;
 800d826:	bf00      	nop
  }

  return ret;
 800d828:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d83e:	2300      	movs	r3, #0
 800d840:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d842:	2300      	movs	r3, #0
 800d844:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d846:	2300      	movs	r3, #0
 800d848:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	885b      	ldrh	r3, [r3, #2]
 800d84e:	0a1b      	lsrs	r3, r3, #8
 800d850:	b29b      	uxth	r3, r3
 800d852:	3b01      	subs	r3, #1
 800d854:	2b0e      	cmp	r3, #14
 800d856:	f200 8152 	bhi.w	800dafe <USBD_GetDescriptor+0x2ca>
 800d85a:	a201      	add	r2, pc, #4	; (adr r2, 800d860 <USBD_GetDescriptor+0x2c>)
 800d85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d860:	0800d8d1 	.word	0x0800d8d1
 800d864:	0800d8e9 	.word	0x0800d8e9
 800d868:	0800d929 	.word	0x0800d929
 800d86c:	0800daff 	.word	0x0800daff
 800d870:	0800daff 	.word	0x0800daff
 800d874:	0800da9f 	.word	0x0800da9f
 800d878:	0800dacb 	.word	0x0800dacb
 800d87c:	0800daff 	.word	0x0800daff
 800d880:	0800daff 	.word	0x0800daff
 800d884:	0800daff 	.word	0x0800daff
 800d888:	0800daff 	.word	0x0800daff
 800d88c:	0800daff 	.word	0x0800daff
 800d890:	0800daff 	.word	0x0800daff
 800d894:	0800daff 	.word	0x0800daff
 800d898:	0800d89d 	.word	0x0800d89d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8a2:	69db      	ldr	r3, [r3, #28]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00b      	beq.n	800d8c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8ae:	69db      	ldr	r3, [r3, #28]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	7c12      	ldrb	r2, [r2, #16]
 800d8b4:	f107 0108 	add.w	r1, r7, #8
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	4798      	blx	r3
 800d8bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8be:	e126      	b.n	800db0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d8c0:	6839      	ldr	r1, [r7, #0]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 fb27 	bl	800df16 <USBD_CtlError>
        err++;
 800d8c8:	7afb      	ldrb	r3, [r7, #11]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	72fb      	strb	r3, [r7, #11]
      break;
 800d8ce:	e11e      	b.n	800db0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	7c12      	ldrb	r2, [r2, #16]
 800d8dc:	f107 0108 	add.w	r1, r7, #8
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
 800d8e4:	60f8      	str	r0, [r7, #12]
      break;
 800d8e6:	e112      	b.n	800db0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	7c1b      	ldrb	r3, [r3, #16]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10d      	bne.n	800d90c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f8:	f107 0208 	add.w	r2, r7, #8
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	4798      	blx	r3
 800d900:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	3301      	adds	r3, #1
 800d906:	2202      	movs	r2, #2
 800d908:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d90a:	e100      	b.n	800db0e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d914:	f107 0208 	add.w	r2, r7, #8
 800d918:	4610      	mov	r0, r2
 800d91a:	4798      	blx	r3
 800d91c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3301      	adds	r3, #1
 800d922:	2202      	movs	r2, #2
 800d924:	701a      	strb	r2, [r3, #0]
      break;
 800d926:	e0f2      	b.n	800db0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	885b      	ldrh	r3, [r3, #2]
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b05      	cmp	r3, #5
 800d930:	f200 80ac 	bhi.w	800da8c <USBD_GetDescriptor+0x258>
 800d934:	a201      	add	r2, pc, #4	; (adr r2, 800d93c <USBD_GetDescriptor+0x108>)
 800d936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93a:	bf00      	nop
 800d93c:	0800d955 	.word	0x0800d955
 800d940:	0800d989 	.word	0x0800d989
 800d944:	0800d9bd 	.word	0x0800d9bd
 800d948:	0800d9f1 	.word	0x0800d9f1
 800d94c:	0800da25 	.word	0x0800da25
 800d950:	0800da59 	.word	0x0800da59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00b      	beq.n	800d978 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	7c12      	ldrb	r2, [r2, #16]
 800d96c:	f107 0108 	add.w	r1, r7, #8
 800d970:	4610      	mov	r0, r2
 800d972:	4798      	blx	r3
 800d974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d976:	e091      	b.n	800da9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 facb 	bl	800df16 <USBD_CtlError>
            err++;
 800d980:	7afb      	ldrb	r3, [r7, #11]
 800d982:	3301      	adds	r3, #1
 800d984:	72fb      	strb	r3, [r7, #11]
          break;
 800d986:	e089      	b.n	800da9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00b      	beq.n	800d9ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	7c12      	ldrb	r2, [r2, #16]
 800d9a0:	f107 0108 	add.w	r1, r7, #8
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	4798      	blx	r3
 800d9a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9aa:	e077      	b.n	800da9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9ac:	6839      	ldr	r1, [r7, #0]
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fab1 	bl	800df16 <USBD_CtlError>
            err++;
 800d9b4:	7afb      	ldrb	r3, [r7, #11]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d9ba:	e06f      	b.n	800da9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00b      	beq.n	800d9e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	7c12      	ldrb	r2, [r2, #16]
 800d9d4:	f107 0108 	add.w	r1, r7, #8
 800d9d8:	4610      	mov	r0, r2
 800d9da:	4798      	blx	r3
 800d9dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9de:	e05d      	b.n	800da9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 fa97 	bl	800df16 <USBD_CtlError>
            err++;
 800d9e8:	7afb      	ldrb	r3, [r7, #11]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d9ee:	e055      	b.n	800da9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00b      	beq.n	800da14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	7c12      	ldrb	r2, [r2, #16]
 800da08:	f107 0108 	add.w	r1, r7, #8
 800da0c:	4610      	mov	r0, r2
 800da0e:	4798      	blx	r3
 800da10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da12:	e043      	b.n	800da9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fa7d 	bl	800df16 <USBD_CtlError>
            err++;
 800da1c:	7afb      	ldrb	r3, [r7, #11]
 800da1e:	3301      	adds	r3, #1
 800da20:	72fb      	strb	r3, [r7, #11]
          break;
 800da22:	e03b      	b.n	800da9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da2a:	695b      	ldr	r3, [r3, #20]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d00b      	beq.n	800da48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da36:	695b      	ldr	r3, [r3, #20]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	7c12      	ldrb	r2, [r2, #16]
 800da3c:	f107 0108 	add.w	r1, r7, #8
 800da40:	4610      	mov	r0, r2
 800da42:	4798      	blx	r3
 800da44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da46:	e029      	b.n	800da9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da48:	6839      	ldr	r1, [r7, #0]
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fa63 	bl	800df16 <USBD_CtlError>
            err++;
 800da50:	7afb      	ldrb	r3, [r7, #11]
 800da52:	3301      	adds	r3, #1
 800da54:	72fb      	strb	r3, [r7, #11]
          break;
 800da56:	e021      	b.n	800da9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00b      	beq.n	800da7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	7c12      	ldrb	r2, [r2, #16]
 800da70:	f107 0108 	add.w	r1, r7, #8
 800da74:	4610      	mov	r0, r2
 800da76:	4798      	blx	r3
 800da78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da7a:	e00f      	b.n	800da9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fa49 	bl	800df16 <USBD_CtlError>
            err++;
 800da84:	7afb      	ldrb	r3, [r7, #11]
 800da86:	3301      	adds	r3, #1
 800da88:	72fb      	strb	r3, [r7, #11]
          break;
 800da8a:	e007      	b.n	800da9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fa41 	bl	800df16 <USBD_CtlError>
          err++;
 800da94:	7afb      	ldrb	r3, [r7, #11]
 800da96:	3301      	adds	r3, #1
 800da98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800da9a:	bf00      	nop
      }
      break;
 800da9c:	e037      	b.n	800db0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7c1b      	ldrb	r3, [r3, #16]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d109      	bne.n	800daba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daae:	f107 0208 	add.w	r2, r7, #8
 800dab2:	4610      	mov	r0, r2
 800dab4:	4798      	blx	r3
 800dab6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dab8:	e029      	b.n	800db0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fa2a 	bl	800df16 <USBD_CtlError>
        err++;
 800dac2:	7afb      	ldrb	r3, [r7, #11]
 800dac4:	3301      	adds	r3, #1
 800dac6:	72fb      	strb	r3, [r7, #11]
      break;
 800dac8:	e021      	b.n	800db0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	7c1b      	ldrb	r3, [r3, #16]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10d      	bne.n	800daee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dada:	f107 0208 	add.w	r2, r7, #8
 800dade:	4610      	mov	r0, r2
 800dae0:	4798      	blx	r3
 800dae2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3301      	adds	r3, #1
 800dae8:	2207      	movs	r2, #7
 800daea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800daec:	e00f      	b.n	800db0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800daee:	6839      	ldr	r1, [r7, #0]
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fa10 	bl	800df16 <USBD_CtlError>
        err++;
 800daf6:	7afb      	ldrb	r3, [r7, #11]
 800daf8:	3301      	adds	r3, #1
 800dafa:	72fb      	strb	r3, [r7, #11]
      break;
 800dafc:	e007      	b.n	800db0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fa08 	bl	800df16 <USBD_CtlError>
      err++;
 800db06:	7afb      	ldrb	r3, [r7, #11]
 800db08:	3301      	adds	r3, #1
 800db0a:	72fb      	strb	r3, [r7, #11]
      break;
 800db0c:	bf00      	nop
  }

  if (err != 0U)
 800db0e:	7afb      	ldrb	r3, [r7, #11]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d11e      	bne.n	800db52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	88db      	ldrh	r3, [r3, #6]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d016      	beq.n	800db4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800db1c:	893b      	ldrh	r3, [r7, #8]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00e      	beq.n	800db40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	88da      	ldrh	r2, [r3, #6]
 800db26:	893b      	ldrh	r3, [r7, #8]
 800db28:	4293      	cmp	r3, r2
 800db2a:	bf28      	it	cs
 800db2c:	4613      	movcs	r3, r2
 800db2e:	b29b      	uxth	r3, r3
 800db30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800db32:	893b      	ldrh	r3, [r7, #8]
 800db34:	461a      	mov	r2, r3
 800db36:	68f9      	ldr	r1, [r7, #12]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fa5d 	bl	800dff8 <USBD_CtlSendData>
 800db3e:	e009      	b.n	800db54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f9e7 	bl	800df16 <USBD_CtlError>
 800db48:	e004      	b.n	800db54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 faae 	bl	800e0ac <USBD_CtlSendStatus>
 800db50:	e000      	b.n	800db54 <USBD_GetDescriptor+0x320>
    return;
 800db52:	bf00      	nop
  }
}
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop

0800db5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	889b      	ldrh	r3, [r3, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d131      	bne.n	800dbd2 <USBD_SetAddress+0x76>
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	88db      	ldrh	r3, [r3, #6]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d12d      	bne.n	800dbd2 <USBD_SetAddress+0x76>
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	885b      	ldrh	r3, [r3, #2]
 800db7a:	2b7f      	cmp	r3, #127	; 0x7f
 800db7c:	d829      	bhi.n	800dbd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	885b      	ldrh	r3, [r3, #2]
 800db82:	b2db      	uxtb	r3, r3
 800db84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b03      	cmp	r3, #3
 800db94:	d104      	bne.n	800dba0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db96:	6839      	ldr	r1, [r7, #0]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f9bc 	bl	800df16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db9e:	e01d      	b.n	800dbdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	7bfa      	ldrb	r2, [r7, #15]
 800dba4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dba8:	7bfb      	ldrb	r3, [r7, #15]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f003 fd09 	bl	80115c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fa7a 	bl	800e0ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d004      	beq.n	800dbc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2202      	movs	r2, #2
 800dbc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbc6:	e009      	b.n	800dbdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbd0:	e004      	b.n	800dbdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 f99e 	bl	800df16 <USBD_CtlError>
  }
}
 800dbda:	bf00      	nop
 800dbdc:	bf00      	nop
 800dbde:	3710      	adds	r7, #16
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	885b      	ldrh	r3, [r3, #2]
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	4b4e      	ldr	r3, [pc, #312]	; (800dd34 <USBD_SetConfig+0x150>)
 800dbfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbfc:	4b4d      	ldr	r3, [pc, #308]	; (800dd34 <USBD_SetConfig+0x150>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d905      	bls.n	800dc10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dc04:	6839      	ldr	r1, [r7, #0]
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 f985 	bl	800df16 <USBD_CtlError>
    return USBD_FAIL;
 800dc0c:	2303      	movs	r3, #3
 800dc0e:	e08c      	b.n	800dd2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d002      	beq.n	800dc22 <USBD_SetConfig+0x3e>
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	d029      	beq.n	800dc74 <USBD_SetConfig+0x90>
 800dc20:	e075      	b.n	800dd0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dc22:	4b44      	ldr	r3, [pc, #272]	; (800dd34 <USBD_SetConfig+0x150>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d020      	beq.n	800dc6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dc2a:	4b42      	ldr	r3, [pc, #264]	; (800dd34 <USBD_SetConfig+0x150>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc34:	4b3f      	ldr	r3, [pc, #252]	; (800dd34 <USBD_SetConfig+0x150>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7fe ffbd 	bl	800cbba <USBD_SetClassConfig>
 800dc40:	4603      	mov	r3, r0
 800dc42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d008      	beq.n	800dc5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f962 	bl	800df16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2202      	movs	r2, #2
 800dc56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc5a:	e065      	b.n	800dd28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 fa25 	bl	800e0ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2203      	movs	r2, #3
 800dc66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dc6a:	e05d      	b.n	800dd28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fa1d 	bl	800e0ac <USBD_CtlSendStatus>
      break;
 800dc72:	e059      	b.n	800dd28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc74:	4b2f      	ldr	r3, [pc, #188]	; (800dd34 <USBD_SetConfig+0x150>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d112      	bne.n	800dca2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2202      	movs	r2, #2
 800dc80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dc84:	4b2b      	ldr	r3, [pc, #172]	; (800dd34 <USBD_SetConfig+0x150>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	461a      	mov	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc8e:	4b29      	ldr	r3, [pc, #164]	; (800dd34 <USBD_SetConfig+0x150>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	4619      	mov	r1, r3
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f7fe ffac 	bl	800cbf2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 fa06 	bl	800e0ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dca0:	e042      	b.n	800dd28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dca2:	4b24      	ldr	r3, [pc, #144]	; (800dd34 <USBD_SetConfig+0x150>)
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	461a      	mov	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d02a      	beq.n	800dd06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7fe ff9a 	bl	800cbf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dcbe:	4b1d      	ldr	r3, [pc, #116]	; (800dd34 <USBD_SetConfig+0x150>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dcc8:	4b1a      	ldr	r3, [pc, #104]	; (800dd34 <USBD_SetConfig+0x150>)
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7fe ff73 	bl	800cbba <USBD_SetClassConfig>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00f      	beq.n	800dcfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 f918 	bl	800df16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7fe ff7f 	bl	800cbf2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dcfc:	e014      	b.n	800dd28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f9d4 	bl	800e0ac <USBD_CtlSendStatus>
      break;
 800dd04:	e010      	b.n	800dd28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f9d0 	bl	800e0ac <USBD_CtlSendStatus>
      break;
 800dd0c:	e00c      	b.n	800dd28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800dd0e:	6839      	ldr	r1, [r7, #0]
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 f900 	bl	800df16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd16:	4b07      	ldr	r3, [pc, #28]	; (800dd34 <USBD_SetConfig+0x150>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f7fe ff68 	bl	800cbf2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dd22:	2303      	movs	r3, #3
 800dd24:	73fb      	strb	r3, [r7, #15]
      break;
 800dd26:	bf00      	nop
  }

  return ret;
 800dd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	2000bf24 	.word	0x2000bf24

0800dd38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	88db      	ldrh	r3, [r3, #6]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d004      	beq.n	800dd54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f8e2 	bl	800df16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd52:	e023      	b.n	800dd9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	dc02      	bgt.n	800dd66 <USBD_GetConfig+0x2e>
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	dc03      	bgt.n	800dd6c <USBD_GetConfig+0x34>
 800dd64:	e015      	b.n	800dd92 <USBD_GetConfig+0x5a>
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d00b      	beq.n	800dd82 <USBD_GetConfig+0x4a>
 800dd6a:	e012      	b.n	800dd92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3308      	adds	r3, #8
 800dd76:	2201      	movs	r2, #1
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f93c 	bl	800dff8 <USBD_CtlSendData>
        break;
 800dd80:	e00c      	b.n	800dd9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3304      	adds	r3, #4
 800dd86:	2201      	movs	r2, #1
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 f934 	bl	800dff8 <USBD_CtlSendData>
        break;
 800dd90:	e004      	b.n	800dd9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd92:	6839      	ldr	r1, [r7, #0]
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f8be 	bl	800df16 <USBD_CtlError>
        break;
 800dd9a:	bf00      	nop
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d81e      	bhi.n	800ddfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	88db      	ldrh	r3, [r3, #6]
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d004      	beq.n	800ddce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f8a5 	bl	800df16 <USBD_CtlError>
        break;
 800ddcc:	e01a      	b.n	800de04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d005      	beq.n	800ddea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	f043 0202 	orr.w	r2, r3, #2
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	330c      	adds	r3, #12
 800ddee:	2202      	movs	r2, #2
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f900 	bl	800dff8 <USBD_CtlSendData>
      break;
 800ddf8:	e004      	b.n	800de04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddfa:	6839      	ldr	r1, [r7, #0]
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f88a 	bl	800df16 <USBD_CtlError>
      break;
 800de02:	bf00      	nop
  }
}
 800de04:	bf00      	nop
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	885b      	ldrh	r3, [r3, #2]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d107      	bne.n	800de2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2201      	movs	r2, #1
 800de22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f940 	bl	800e0ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800de2c:	e013      	b.n	800de56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	885b      	ldrh	r3, [r3, #2]
 800de32:	2b02      	cmp	r3, #2
 800de34:	d10b      	bne.n	800de4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	889b      	ldrh	r3, [r3, #4]
 800de3a:	0a1b      	lsrs	r3, r3, #8
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f930 	bl	800e0ac <USBD_CtlSendStatus>
}
 800de4c:	e003      	b.n	800de56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800de4e:	6839      	ldr	r1, [r7, #0]
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f860 	bl	800df16 <USBD_CtlError>
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b082      	sub	sp, #8
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	3b01      	subs	r3, #1
 800de72:	2b02      	cmp	r3, #2
 800de74:	d80b      	bhi.n	800de8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	885b      	ldrh	r3, [r3, #2]
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d10c      	bne.n	800de98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f910 	bl	800e0ac <USBD_CtlSendStatus>
      }
      break;
 800de8c:	e004      	b.n	800de98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f840 	bl	800df16 <USBD_CtlError>
      break;
 800de96:	e000      	b.n	800de9a <USBD_ClrFeature+0x3c>
      break;
 800de98:	bf00      	nop
  }
}
 800de9a:	bf00      	nop
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b084      	sub	sp, #16
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
 800deaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	781a      	ldrb	r2, [r3, #0]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3301      	adds	r3, #1
 800debc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	781a      	ldrb	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3301      	adds	r3, #1
 800deca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f7ff fa17 	bl	800d300 <SWAPBYTE>
 800ded2:	4603      	mov	r3, r0
 800ded4:	461a      	mov	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3301      	adds	r3, #1
 800dede:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	3301      	adds	r3, #1
 800dee4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f7ff fa0a 	bl	800d300 <SWAPBYTE>
 800deec:	4603      	mov	r3, r0
 800deee:	461a      	mov	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3301      	adds	r3, #1
 800def8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3301      	adds	r3, #1
 800defe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7ff f9fd 	bl	800d300 <SWAPBYTE>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	80da      	strh	r2, [r3, #6]
}
 800df0e:	bf00      	nop
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b082      	sub	sp, #8
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800df20:	2180      	movs	r1, #128	; 0x80
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f003 fae4 	bl	80114f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800df28:	2100      	movs	r1, #0
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f003 fae0 	bl	80114f0 <USBD_LL_StallEP>
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800df44:	2300      	movs	r3, #0
 800df46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d036      	beq.n	800dfbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df52:	6938      	ldr	r0, [r7, #16]
 800df54:	f000 f836 	bl	800dfc4 <USBD_GetLen>
 800df58:	4603      	mov	r3, r0
 800df5a:	3301      	adds	r3, #1
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	005b      	lsls	r3, r3, #1
 800df60:	b29a      	uxth	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800df66:	7dfb      	ldrb	r3, [r7, #23]
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	4413      	add	r3, r2
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	7812      	ldrb	r2, [r2, #0]
 800df70:	701a      	strb	r2, [r3, #0]
  idx++;
 800df72:	7dfb      	ldrb	r3, [r7, #23]
 800df74:	3301      	adds	r3, #1
 800df76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df78:	7dfb      	ldrb	r3, [r7, #23]
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	4413      	add	r3, r2
 800df7e:	2203      	movs	r2, #3
 800df80:	701a      	strb	r2, [r3, #0]
  idx++;
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	3301      	adds	r3, #1
 800df86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df88:	e013      	b.n	800dfb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df8a:	7dfb      	ldrb	r3, [r7, #23]
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	4413      	add	r3, r2
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	7812      	ldrb	r2, [r2, #0]
 800df94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	3301      	adds	r3, #1
 800df9a:	613b      	str	r3, [r7, #16]
    idx++;
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dfa2:	7dfb      	ldrb	r3, [r7, #23]
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	701a      	strb	r2, [r3, #0]
    idx++;
 800dfac:	7dfb      	ldrb	r3, [r7, #23]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1e7      	bne.n	800df8a <USBD_GetString+0x52>
 800dfba:	e000      	b.n	800dfbe <USBD_GetString+0x86>
    return;
 800dfbc:	bf00      	nop
  }
}
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dfd4:	e005      	b.n	800dfe2 <USBD_GetLen+0x1e>
  {
    len++;
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1f5      	bne.n	800dfd6 <USBD_GetLen+0x12>
  }

  return len;
 800dfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2202      	movs	r2, #2
 800e008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	2100      	movs	r1, #0
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f003 faef 	bl	8011602 <USBD_LL_Transmit>

  return USBD_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b084      	sub	sp, #16
 800e032:	af00      	add	r7, sp, #0
 800e034:	60f8      	str	r0, [r7, #12]
 800e036:	60b9      	str	r1, [r7, #8]
 800e038:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	68ba      	ldr	r2, [r7, #8]
 800e03e:	2100      	movs	r1, #0
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f003 fade 	bl	8011602 <USBD_LL_Transmit>

  return USBD_OK;
 800e046:	2300      	movs	r3, #0
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2203      	movs	r2, #3
 800e060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	2100      	movs	r1, #0
 800e07a:	68f8      	ldr	r0, [r7, #12]
 800e07c:	f003 fae2 	bl	8011644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b084      	sub	sp, #16
 800e08e:	af00      	add	r7, sp, #0
 800e090:	60f8      	str	r0, [r7, #12]
 800e092:	60b9      	str	r1, [r7, #8]
 800e094:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	2100      	movs	r1, #0
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f003 fad1 	bl	8011644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2204      	movs	r2, #4
 800e0b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e0bc:	2300      	movs	r3, #0
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f003 fa9d 	bl	8011602 <USBD_LL_Transmit>

  return USBD_OK;
 800e0c8:	2300      	movs	r3, #0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2205      	movs	r2, #5
 800e0de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f003 faab 	bl	8011644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e0f8:	b480      	push	{r7}
 800e0fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e0fc:	bf00      	nop
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
	...

0800e108 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e10e:	f3ef 8305 	mrs	r3, IPSR
 800e112:	60bb      	str	r3, [r7, #8]
  return(result);
 800e114:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10f      	bne.n	800e13a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e11a:	f3ef 8310 	mrs	r3, PRIMASK
 800e11e:	607b      	str	r3, [r7, #4]
  return(result);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d105      	bne.n	800e132 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e126:	f3ef 8311 	mrs	r3, BASEPRI
 800e12a:	603b      	str	r3, [r7, #0]
  return(result);
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d007      	beq.n	800e142 <osKernelInitialize+0x3a>
 800e132:	4b0e      	ldr	r3, [pc, #56]	; (800e16c <osKernelInitialize+0x64>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b02      	cmp	r3, #2
 800e138:	d103      	bne.n	800e142 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e13a:	f06f 0305 	mvn.w	r3, #5
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e00c      	b.n	800e15c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e142:	4b0a      	ldr	r3, [pc, #40]	; (800e16c <osKernelInitialize+0x64>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d105      	bne.n	800e156 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e14a:	4b08      	ldr	r3, [pc, #32]	; (800e16c <osKernelInitialize+0x64>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e150:	2300      	movs	r3, #0
 800e152:	60fb      	str	r3, [r7, #12]
 800e154:	e002      	b.n	800e15c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e15a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e15c:	68fb      	ldr	r3, [r7, #12]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3714      	adds	r7, #20
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	2000bf28 	.word	0x2000bf28

0800e170 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e176:	f3ef 8305 	mrs	r3, IPSR
 800e17a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e17c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10f      	bne.n	800e1a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e182:	f3ef 8310 	mrs	r3, PRIMASK
 800e186:	607b      	str	r3, [r7, #4]
  return(result);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d105      	bne.n	800e19a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e18e:	f3ef 8311 	mrs	r3, BASEPRI
 800e192:	603b      	str	r3, [r7, #0]
  return(result);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d007      	beq.n	800e1aa <osKernelStart+0x3a>
 800e19a:	4b0f      	ldr	r3, [pc, #60]	; (800e1d8 <osKernelStart+0x68>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d103      	bne.n	800e1aa <osKernelStart+0x3a>
    stat = osErrorISR;
 800e1a2:	f06f 0305 	mvn.w	r3, #5
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	e010      	b.n	800e1cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e1aa:	4b0b      	ldr	r3, [pc, #44]	; (800e1d8 <osKernelStart+0x68>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d109      	bne.n	800e1c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e1b2:	f7ff ffa1 	bl	800e0f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e1b6:	4b08      	ldr	r3, [pc, #32]	; (800e1d8 <osKernelStart+0x68>)
 800e1b8:	2202      	movs	r2, #2
 800e1ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e1bc:	f001 f8b4 	bl	800f328 <vTaskStartScheduler>
      stat = osOK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	60fb      	str	r3, [r7, #12]
 800e1c4:	e002      	b.n	800e1cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e1c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	2000bf28 	.word	0x2000bf28

0800e1dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b090      	sub	sp, #64	; 0x40
 800e1e0:	af04      	add	r7, sp, #16
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1ec:	f3ef 8305 	mrs	r3, IPSR
 800e1f0:	61fb      	str	r3, [r7, #28]
  return(result);
 800e1f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f040 808f 	bne.w	800e318 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1fa:	f3ef 8310 	mrs	r3, PRIMASK
 800e1fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d105      	bne.n	800e212 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e206:	f3ef 8311 	mrs	r3, BASEPRI
 800e20a:	617b      	str	r3, [r7, #20]
  return(result);
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d003      	beq.n	800e21a <osThreadNew+0x3e>
 800e212:	4b44      	ldr	r3, [pc, #272]	; (800e324 <osThreadNew+0x148>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b02      	cmp	r3, #2
 800e218:	d07e      	beq.n	800e318 <osThreadNew+0x13c>
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d07b      	beq.n	800e318 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e220:	2380      	movs	r3, #128	; 0x80
 800e222:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e224:	2318      	movs	r3, #24
 800e226:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e228:	2300      	movs	r3, #0
 800e22a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e22c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e230:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d045      	beq.n	800e2c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <osThreadNew+0x6a>
        name = attr->name;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d002      	beq.n	800e254 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	2b00      	cmp	r3, #0
 800e258:	d008      	beq.n	800e26c <osThreadNew+0x90>
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	2b38      	cmp	r3, #56	; 0x38
 800e25e:	d805      	bhi.n	800e26c <osThreadNew+0x90>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	f003 0301 	and.w	r3, r3, #1
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d001      	beq.n	800e270 <osThreadNew+0x94>
        return (NULL);
 800e26c:	2300      	movs	r3, #0
 800e26e:	e054      	b.n	800e31a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	695b      	ldr	r3, [r3, #20]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d003      	beq.n	800e280 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	695b      	ldr	r3, [r3, #20]
 800e27c:	089b      	lsrs	r3, r3, #2
 800e27e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00e      	beq.n	800e2a6 <osThreadNew+0xca>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	2b5b      	cmp	r3, #91	; 0x5b
 800e28e:	d90a      	bls.n	800e2a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e294:	2b00      	cmp	r3, #0
 800e296:	d006      	beq.n	800e2a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	695b      	ldr	r3, [r3, #20]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <osThreadNew+0xca>
        mem = 1;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	623b      	str	r3, [r7, #32]
 800e2a4:	e010      	b.n	800e2c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10c      	bne.n	800e2c8 <osThreadNew+0xec>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d108      	bne.n	800e2c8 <osThreadNew+0xec>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	691b      	ldr	r3, [r3, #16]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d104      	bne.n	800e2c8 <osThreadNew+0xec>
          mem = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	623b      	str	r3, [r7, #32]
 800e2c2:	e001      	b.n	800e2c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d110      	bne.n	800e2f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e2d6:	9202      	str	r2, [sp, #8]
 800e2d8:	9301      	str	r3, [sp, #4]
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f000 fe3f 	bl	800ef68 <xTaskCreateStatic>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	613b      	str	r3, [r7, #16]
 800e2ee:	e013      	b.n	800e318 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e2f0:	6a3b      	ldr	r3, [r7, #32]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d110      	bne.n	800e318 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	f107 0310 	add.w	r3, r7, #16
 800e2fe:	9301      	str	r3, [sp, #4]
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f000 fe90 	bl	800f02e <xTaskCreate>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b01      	cmp	r3, #1
 800e312:	d001      	beq.n	800e318 <osThreadNew+0x13c>
          hTask = NULL;
 800e314:	2300      	movs	r3, #0
 800e316:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e318:	693b      	ldr	r3, [r7, #16]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3730      	adds	r7, #48	; 0x30
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	2000bf28 	.word	0x2000bf28

0800e328 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e330:	f3ef 8305 	mrs	r3, IPSR
 800e334:	613b      	str	r3, [r7, #16]
  return(result);
 800e336:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10f      	bne.n	800e35c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e33c:	f3ef 8310 	mrs	r3, PRIMASK
 800e340:	60fb      	str	r3, [r7, #12]
  return(result);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d105      	bne.n	800e354 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e348:	f3ef 8311 	mrs	r3, BASEPRI
 800e34c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d007      	beq.n	800e364 <osDelay+0x3c>
 800e354:	4b0a      	ldr	r3, [pc, #40]	; (800e380 <osDelay+0x58>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d103      	bne.n	800e364 <osDelay+0x3c>
    stat = osErrorISR;
 800e35c:	f06f 0305 	mvn.w	r3, #5
 800e360:	617b      	str	r3, [r7, #20]
 800e362:	e007      	b.n	800e374 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e364:	2300      	movs	r3, #0
 800e366:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 ffa4 	bl	800f2bc <vTaskDelay>
    }
  }

  return (stat);
 800e374:	697b      	ldr	r3, [r7, #20]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3718      	adds	r7, #24
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	2000bf28 	.word	0x2000bf28

0800e384 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	4a07      	ldr	r2, [pc, #28]	; (800e3b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800e394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	4a06      	ldr	r2, [pc, #24]	; (800e3b4 <vApplicationGetIdleTaskMemory+0x30>)
 800e39a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2280      	movs	r2, #128	; 0x80
 800e3a0:	601a      	str	r2, [r3, #0]
}
 800e3a2:	bf00      	nop
 800e3a4:	3714      	adds	r7, #20
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	2000bf2c 	.word	0x2000bf2c
 800e3b4:	2000bf88 	.word	0x2000bf88

0800e3b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4a07      	ldr	r2, [pc, #28]	; (800e3e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800e3c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	4a06      	ldr	r2, [pc, #24]	; (800e3e8 <vApplicationGetTimerTaskMemory+0x30>)
 800e3ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3d6:	601a      	str	r2, [r3, #0]
}
 800e3d8:	bf00      	nop
 800e3da:	3714      	adds	r7, #20
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	2000c188 	.word	0x2000c188
 800e3e8:	2000c1e4 	.word	0x2000c1e4

0800e3ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f103 0208 	add.w	r2, r3, #8
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e404:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f103 0208 	add.w	r2, r3, #8
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f103 0208 	add.w	r2, r3, #8
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e43a:	bf00      	nop
 800e43c:	370c      	adds	r7, #12
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e446:	b480      	push	{r7}
 800e448:	b085      	sub	sp, #20
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
 800e44e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	689a      	ldr	r2, [r3, #8]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	683a      	ldr	r2, [r7, #0]
 800e46a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	601a      	str	r2, [r3, #0]
}
 800e482:	bf00      	nop
 800e484:	3714      	adds	r7, #20
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e48e:	b480      	push	{r7}
 800e490:	b085      	sub	sp, #20
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4a4:	d103      	bne.n	800e4ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	60fb      	str	r3, [r7, #12]
 800e4ac:	e00c      	b.n	800e4c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	e002      	b.n	800e4bc <vListInsert+0x2e>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	60fb      	str	r3, [r7, #12]
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d2f6      	bcs.n	800e4b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	683a      	ldr	r2, [r7, #0]
 800e4d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	1c5a      	adds	r2, r3, #1
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	601a      	str	r2, [r3, #0]
}
 800e4f4:	bf00      	nop
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr

0800e500 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	6892      	ldr	r2, [r2, #8]
 800e516:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	6852      	ldr	r2, [r2, #4]
 800e520:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d103      	bne.n	800e534 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	689a      	ldr	r2, [r3, #8]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	1e5a      	subs	r2, r3, #1
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3714      	adds	r7, #20
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d10c      	bne.n	800e582 <xQueueGenericReset+0x2e>
	__asm volatile
 800e568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56c:	b672      	cpsid	i
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	b662      	cpsie	i
 800e57c:	60bb      	str	r3, [r7, #8]
}
 800e57e:	bf00      	nop
 800e580:	e7fe      	b.n	800e580 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e582:	f002 f8a3 	bl	80106cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e58e:	68f9      	ldr	r1, [r7, #12]
 800e590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e592:	fb01 f303 	mul.w	r3, r1, r3
 800e596:	441a      	add	r2, r3
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b2:	3b01      	subs	r3, #1
 800e5b4:	68f9      	ldr	r1, [r7, #12]
 800e5b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e5b8:	fb01 f303 	mul.w	r3, r1, r3
 800e5bc:	441a      	add	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	22ff      	movs	r2, #255	; 0xff
 800e5c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	22ff      	movs	r2, #255	; 0xff
 800e5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d114      	bne.n	800e602 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d01a      	beq.n	800e616 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	3310      	adds	r3, #16
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f001 f937 	bl	800f858 <xTaskRemoveFromEventList>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d012      	beq.n	800e616 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e5f0:	4b0c      	ldr	r3, [pc, #48]	; (800e624 <xQueueGenericReset+0xd0>)
 800e5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f6:	601a      	str	r2, [r3, #0]
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	e009      	b.n	800e616 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	3310      	adds	r3, #16
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff fef0 	bl	800e3ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	3324      	adds	r3, #36	; 0x24
 800e610:	4618      	mov	r0, r3
 800e612:	f7ff feeb 	bl	800e3ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e616:	f002 f88d 	bl	8010734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e61a:	2301      	movs	r3, #1
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	e000ed04 	.word	0xe000ed04

0800e628 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b08e      	sub	sp, #56	; 0x38
 800e62c:	af02      	add	r7, sp, #8
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
 800e634:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10c      	bne.n	800e656 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e640:	b672      	cpsid	i
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	b662      	cpsie	i
 800e650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e652:	bf00      	nop
 800e654:	e7fe      	b.n	800e654 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10c      	bne.n	800e676 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e660:	b672      	cpsid	i
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	b662      	cpsie	i
 800e670:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e672:	bf00      	nop
 800e674:	e7fe      	b.n	800e674 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <xQueueGenericCreateStatic+0x5a>
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d001      	beq.n	800e686 <xQueueGenericCreateStatic+0x5e>
 800e682:	2301      	movs	r3, #1
 800e684:	e000      	b.n	800e688 <xQueueGenericCreateStatic+0x60>
 800e686:	2300      	movs	r3, #0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d10c      	bne.n	800e6a6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e690:	b672      	cpsid	i
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	b662      	cpsie	i
 800e6a0:	623b      	str	r3, [r7, #32]
}
 800e6a2:	bf00      	nop
 800e6a4:	e7fe      	b.n	800e6a4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d102      	bne.n	800e6b2 <xQueueGenericCreateStatic+0x8a>
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <xQueueGenericCreateStatic+0x8e>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e000      	b.n	800e6b8 <xQueueGenericCreateStatic+0x90>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d10c      	bne.n	800e6d6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c0:	b672      	cpsid	i
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	b662      	cpsie	i
 800e6d0:	61fb      	str	r3, [r7, #28]
}
 800e6d2:	bf00      	nop
 800e6d4:	e7fe      	b.n	800e6d4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e6d6:	2350      	movs	r3, #80	; 0x50
 800e6d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	2b50      	cmp	r3, #80	; 0x50
 800e6de:	d00c      	beq.n	800e6fa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e4:	b672      	cpsid	i
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	b662      	cpsie	i
 800e6f4:	61bb      	str	r3, [r7, #24]
}
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e6fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00d      	beq.n	800e722 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	2201      	movs	r2, #1
 800e70a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e70e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	4613      	mov	r3, r2
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	68b9      	ldr	r1, [r7, #8]
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	f000 f805 	bl	800e72c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e724:	4618      	mov	r0, r3
 800e726:	3730      	adds	r7, #48	; 0x30
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d103      	bne.n	800e748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	69ba      	ldr	r2, [r7, #24]
 800e744:	601a      	str	r2, [r3, #0]
 800e746:	e002      	b.n	800e74e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e75a:	2101      	movs	r1, #1
 800e75c:	69b8      	ldr	r0, [r7, #24]
 800e75e:	f7ff fef9 	bl	800e554 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	78fa      	ldrb	r2, [r7, #3]
 800e766:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e76a:	bf00      	nop
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
	...

0800e774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b08e      	sub	sp, #56	; 0x38
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e782:	2300      	movs	r3, #0
 800e784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d10c      	bne.n	800e7aa <xQueueGenericSend+0x36>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	b672      	cpsid	i
 800e796:	f383 8811 	msr	BASEPRI, r3
 800e79a:	f3bf 8f6f 	isb	sy
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	b662      	cpsie	i
 800e7a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e7a6:	bf00      	nop
 800e7a8:	e7fe      	b.n	800e7a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d103      	bne.n	800e7b8 <xQueueGenericSend+0x44>
 800e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <xQueueGenericSend+0x48>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e000      	b.n	800e7be <xQueueGenericSend+0x4a>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d10c      	bne.n	800e7dc <xQueueGenericSend+0x68>
	__asm volatile
 800e7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c6:	b672      	cpsid	i
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	b662      	cpsie	i
 800e7d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7d8:	bf00      	nop
 800e7da:	e7fe      	b.n	800e7da <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	d103      	bne.n	800e7ea <xQueueGenericSend+0x76>
 800e7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d101      	bne.n	800e7ee <xQueueGenericSend+0x7a>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e000      	b.n	800e7f0 <xQueueGenericSend+0x7c>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d10c      	bne.n	800e80e <xQueueGenericSend+0x9a>
	__asm volatile
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	b672      	cpsid	i
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	b662      	cpsie	i
 800e808:	623b      	str	r3, [r7, #32]
}
 800e80a:	bf00      	nop
 800e80c:	e7fe      	b.n	800e80c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e80e:	f001 fa11 	bl	800fc34 <xTaskGetSchedulerState>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d102      	bne.n	800e81e <xQueueGenericSend+0xaa>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <xQueueGenericSend+0xae>
 800e81e:	2301      	movs	r3, #1
 800e820:	e000      	b.n	800e824 <xQueueGenericSend+0xb0>
 800e822:	2300      	movs	r3, #0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10c      	bne.n	800e842 <xQueueGenericSend+0xce>
	__asm volatile
 800e828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82c:	b672      	cpsid	i
 800e82e:	f383 8811 	msr	BASEPRI, r3
 800e832:	f3bf 8f6f 	isb	sy
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	b662      	cpsie	i
 800e83c:	61fb      	str	r3, [r7, #28]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e842:	f001 ff43 	bl	80106cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e84e:	429a      	cmp	r2, r3
 800e850:	d302      	bcc.n	800e858 <xQueueGenericSend+0xe4>
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	2b02      	cmp	r3, #2
 800e856:	d129      	bne.n	800e8ac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e858:	683a      	ldr	r2, [r7, #0]
 800e85a:	68b9      	ldr	r1, [r7, #8]
 800e85c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e85e:	f000 fa15 	bl	800ec8c <prvCopyDataToQueue>
 800e862:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d010      	beq.n	800e88e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86e:	3324      	adds	r3, #36	; 0x24
 800e870:	4618      	mov	r0, r3
 800e872:	f000 fff1 	bl	800f858 <xTaskRemoveFromEventList>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d013      	beq.n	800e8a4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e87c:	4b3f      	ldr	r3, [pc, #252]	; (800e97c <xQueueGenericSend+0x208>)
 800e87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e882:	601a      	str	r2, [r3, #0]
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	e00a      	b.n	800e8a4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	2b00      	cmp	r3, #0
 800e892:	d007      	beq.n	800e8a4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e894:	4b39      	ldr	r3, [pc, #228]	; (800e97c <xQueueGenericSend+0x208>)
 800e896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e8a4:	f001 ff46 	bl	8010734 <vPortExitCritical>
				return pdPASS;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e063      	b.n	800e974 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d103      	bne.n	800e8ba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8b2:	f001 ff3f 	bl	8010734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	e05c      	b.n	800e974 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d106      	bne.n	800e8ce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8c0:	f107 0314 	add.w	r3, r7, #20
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f001 f855 	bl	800f974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8ce:	f001 ff31 	bl	8010734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8d2:	f000 fd93 	bl	800f3fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8d6:	f001 fef9 	bl	80106cc <vPortEnterCritical>
 800e8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8e0:	b25b      	sxtb	r3, r3
 800e8e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8e6:	d103      	bne.n	800e8f0 <xQueueGenericSend+0x17c>
 800e8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8f6:	b25b      	sxtb	r3, r3
 800e8f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8fc:	d103      	bne.n	800e906 <xQueueGenericSend+0x192>
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e906:	f001 ff15 	bl	8010734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e90a:	1d3a      	adds	r2, r7, #4
 800e90c:	f107 0314 	add.w	r3, r7, #20
 800e910:	4611      	mov	r1, r2
 800e912:	4618      	mov	r0, r3
 800e914:	f001 f844 	bl	800f9a0 <xTaskCheckForTimeOut>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d124      	bne.n	800e968 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e91e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e920:	f000 faac 	bl	800ee7c <prvIsQueueFull>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d018      	beq.n	800e95c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92c:	3310      	adds	r3, #16
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	4611      	mov	r1, r2
 800e932:	4618      	mov	r0, r3
 800e934:	f000 ff3c 	bl	800f7b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e93a:	f000 fa37 	bl	800edac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e93e:	f000 fd6b 	bl	800f418 <xTaskResumeAll>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	f47f af7c 	bne.w	800e842 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e94a:	4b0c      	ldr	r3, [pc, #48]	; (800e97c <xQueueGenericSend+0x208>)
 800e94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	e772      	b.n	800e842 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e95e:	f000 fa25 	bl	800edac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e962:	f000 fd59 	bl	800f418 <xTaskResumeAll>
 800e966:	e76c      	b.n	800e842 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e96a:	f000 fa1f 	bl	800edac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e96e:	f000 fd53 	bl	800f418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e972:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e974:	4618      	mov	r0, r3
 800e976:	3738      	adds	r7, #56	; 0x38
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	e000ed04 	.word	0xe000ed04

0800e980 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b08e      	sub	sp, #56	; 0x38
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
 800e98c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10c      	bne.n	800e9b2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99c:	b672      	cpsid	i
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	b662      	cpsie	i
 800e9ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9ae:	bf00      	nop
 800e9b0:	e7fe      	b.n	800e9b0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d103      	bne.n	800e9c0 <xQueueGenericSendFromISR+0x40>
 800e9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <xQueueGenericSendFromISR+0x44>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e000      	b.n	800e9c6 <xQueueGenericSendFromISR+0x46>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d10c      	bne.n	800e9e4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ce:	b672      	cpsid	i
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	b662      	cpsie	i
 800e9de:	623b      	str	r3, [r7, #32]
}
 800e9e0:	bf00      	nop
 800e9e2:	e7fe      	b.n	800e9e2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d103      	bne.n	800e9f2 <xQueueGenericSendFromISR+0x72>
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d101      	bne.n	800e9f6 <xQueueGenericSendFromISR+0x76>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e000      	b.n	800e9f8 <xQueueGenericSendFromISR+0x78>
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10c      	bne.n	800ea16 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	b672      	cpsid	i
 800ea02:	f383 8811 	msr	BASEPRI, r3
 800ea06:	f3bf 8f6f 	isb	sy
 800ea0a:	f3bf 8f4f 	dsb	sy
 800ea0e:	b662      	cpsie	i
 800ea10:	61fb      	str	r3, [r7, #28]
}
 800ea12:	bf00      	nop
 800ea14:	e7fe      	b.n	800ea14 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea16:	f001 ff41 	bl	801089c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ea1a:	f3ef 8211 	mrs	r2, BASEPRI
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	b672      	cpsid	i
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	b662      	cpsie	i
 800ea32:	61ba      	str	r2, [r7, #24]
 800ea34:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ea36:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d302      	bcc.n	800ea4c <xQueueGenericSendFromISR+0xcc>
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	2b02      	cmp	r3, #2
 800ea4a:	d12c      	bne.n	800eaa6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	68b9      	ldr	r1, [r7, #8]
 800ea5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea5c:	f000 f916 	bl	800ec8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea60:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ea64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea68:	d112      	bne.n	800ea90 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d016      	beq.n	800eaa0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	3324      	adds	r3, #36	; 0x24
 800ea76:	4618      	mov	r0, r3
 800ea78:	f000 feee 	bl	800f858 <xTaskRemoveFromEventList>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d00e      	beq.n	800eaa0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00b      	beq.n	800eaa0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	601a      	str	r2, [r3, #0]
 800ea8e:	e007      	b.n	800eaa0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ea94:	3301      	adds	r3, #1
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	b25a      	sxtb	r2, r3
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800eaa4:	e001      	b.n	800eaaa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	637b      	str	r3, [r7, #52]	; 0x34
 800eaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eab4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3738      	adds	r7, #56	; 0x38
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08c      	sub	sp, #48	; 0x30
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eacc:	2300      	movs	r3, #0
 800eace:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10c      	bne.n	800eaf4 <xQueueReceive+0x34>
	__asm volatile
 800eada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eade:	b672      	cpsid	i
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	b662      	cpsie	i
 800eaee:	623b      	str	r3, [r7, #32]
}
 800eaf0:	bf00      	nop
 800eaf2:	e7fe      	b.n	800eaf2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d103      	bne.n	800eb02 <xQueueReceive+0x42>
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <xQueueReceive+0x46>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <xQueueReceive+0x48>
 800eb06:	2300      	movs	r3, #0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10c      	bne.n	800eb26 <xQueueReceive+0x66>
	__asm volatile
 800eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb10:	b672      	cpsid	i
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	b662      	cpsie	i
 800eb20:	61fb      	str	r3, [r7, #28]
}
 800eb22:	bf00      	nop
 800eb24:	e7fe      	b.n	800eb24 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb26:	f001 f885 	bl	800fc34 <xTaskGetSchedulerState>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <xQueueReceive+0x76>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <xQueueReceive+0x7a>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e000      	b.n	800eb3c <xQueueReceive+0x7c>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10c      	bne.n	800eb5a <xQueueReceive+0x9a>
	__asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb44:	b672      	cpsid	i
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	b662      	cpsie	i
 800eb54:	61bb      	str	r3, [r7, #24]
}
 800eb56:	bf00      	nop
 800eb58:	e7fe      	b.n	800eb58 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb5a:	f001 fdb7 	bl	80106cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d01f      	beq.n	800ebaa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb6a:	68b9      	ldr	r1, [r7, #8]
 800eb6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb6e:	f000 f8f7 	bl	800ed60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb74:	1e5a      	subs	r2, r3, #1
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	691b      	ldr	r3, [r3, #16]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00f      	beq.n	800eba2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	3310      	adds	r3, #16
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 fe66 	bl	800f858 <xTaskRemoveFromEventList>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d007      	beq.n	800eba2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb92:	4b3d      	ldr	r3, [pc, #244]	; (800ec88 <xQueueReceive+0x1c8>)
 800eb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eba2:	f001 fdc7 	bl	8010734 <vPortExitCritical>
				return pdPASS;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e069      	b.n	800ec7e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d103      	bne.n	800ebb8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebb0:	f001 fdc0 	bl	8010734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	e062      	b.n	800ec7e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebbe:	f107 0310 	add.w	r3, r7, #16
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 fed6 	bl	800f974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebcc:	f001 fdb2 	bl	8010734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebd0:	f000 fc14 	bl	800f3fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebd4:	f001 fd7a 	bl	80106cc <vPortEnterCritical>
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebde:	b25b      	sxtb	r3, r3
 800ebe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebe4:	d103      	bne.n	800ebee <xQueueReceive+0x12e>
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebf4:	b25b      	sxtb	r3, r3
 800ebf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebfa:	d103      	bne.n	800ec04 <xQueueReceive+0x144>
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec04:	f001 fd96 	bl	8010734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec08:	1d3a      	adds	r2, r7, #4
 800ec0a:	f107 0310 	add.w	r3, r7, #16
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f000 fec5 	bl	800f9a0 <xTaskCheckForTimeOut>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d123      	bne.n	800ec64 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec1e:	f000 f917 	bl	800ee50 <prvIsQueueEmpty>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d017      	beq.n	800ec58 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	3324      	adds	r3, #36	; 0x24
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	4611      	mov	r1, r2
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 fdbd 	bl	800f7b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec38:	f000 f8b8 	bl	800edac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec3c:	f000 fbec 	bl	800f418 <xTaskResumeAll>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d189      	bne.n	800eb5a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ec46:	4b10      	ldr	r3, [pc, #64]	; (800ec88 <xQueueReceive+0x1c8>)
 800ec48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	e780      	b.n	800eb5a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ec58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec5a:	f000 f8a7 	bl	800edac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec5e:	f000 fbdb 	bl	800f418 <xTaskResumeAll>
 800ec62:	e77a      	b.n	800eb5a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ec64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec66:	f000 f8a1 	bl	800edac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec6a:	f000 fbd5 	bl	800f418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec70:	f000 f8ee 	bl	800ee50 <prvIsQueueEmpty>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f43f af6f 	beq.w	800eb5a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3730      	adds	r7, #48	; 0x30
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	e000ed04 	.word	0xe000ed04

0800ec8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b086      	sub	sp, #24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eca0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d10d      	bne.n	800ecc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d14d      	bne.n	800ed4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	689b      	ldr	r3, [r3, #8]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f000 ffda 	bl	800fc70 <xTaskPriorityDisinherit>
 800ecbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	609a      	str	r2, [r3, #8]
 800ecc4:	e043      	b.n	800ed4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d119      	bne.n	800ed00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6858      	ldr	r0, [r3, #4]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	68b9      	ldr	r1, [r7, #8]
 800ecd8:	f012 faf1 	bl	80212be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece4:	441a      	add	r2, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d32b      	bcc.n	800ed4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	605a      	str	r2, [r3, #4]
 800ecfe:	e026      	b.n	800ed4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	68d8      	ldr	r0, [r3, #12]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed08:	461a      	mov	r2, r3
 800ed0a:	68b9      	ldr	r1, [r7, #8]
 800ed0c:	f012 fad7 	bl	80212be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68da      	ldr	r2, [r3, #12]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed18:	425b      	negs	r3, r3
 800ed1a:	441a      	add	r2, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	68da      	ldr	r2, [r3, #12]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d207      	bcs.n	800ed3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	689a      	ldr	r2, [r3, #8]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed34:	425b      	negs	r3, r3
 800ed36:	441a      	add	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d105      	bne.n	800ed4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	3b01      	subs	r3, #1
 800ed4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	1c5a      	adds	r2, r3, #1
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ed56:	697b      	ldr	r3, [r7, #20]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3718      	adds	r7, #24
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d018      	beq.n	800eda4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68da      	ldr	r2, [r3, #12]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7a:	441a      	add	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	68da      	ldr	r2, [r3, #12]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d303      	bcc.n	800ed94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	68d9      	ldr	r1, [r3, #12]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	6838      	ldr	r0, [r7, #0]
 800eda0:	f012 fa8d 	bl	80212be <memcpy>
	}
}
 800eda4:	bf00      	nop
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800edb4:	f001 fc8a 	bl	80106cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800edbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800edc0:	e011      	b.n	800ede6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d012      	beq.n	800edf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	3324      	adds	r3, #36	; 0x24
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 fd42 	bl	800f858 <xTaskRemoveFromEventList>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d001      	beq.n	800edde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800edda:	f000 fe47 	bl	800fa6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	3b01      	subs	r3, #1
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ede6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edea:	2b00      	cmp	r3, #0
 800edec:	dce9      	bgt.n	800edc2 <prvUnlockQueue+0x16>
 800edee:	e000      	b.n	800edf2 <prvUnlockQueue+0x46>
					break;
 800edf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	22ff      	movs	r2, #255	; 0xff
 800edf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800edfa:	f001 fc9b 	bl	8010734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800edfe:	f001 fc65 	bl	80106cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee0a:	e011      	b.n	800ee30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d012      	beq.n	800ee3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3310      	adds	r3, #16
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f000 fd1d 	bl	800f858 <xTaskRemoveFromEventList>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d001      	beq.n	800ee28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee24:	f000 fe22 	bl	800fa6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee28:	7bbb      	ldrb	r3, [r7, #14]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	dce9      	bgt.n	800ee0c <prvUnlockQueue+0x60>
 800ee38:	e000      	b.n	800ee3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	22ff      	movs	r2, #255	; 0xff
 800ee40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ee44:	f001 fc76 	bl	8010734 <vPortExitCritical>
}
 800ee48:	bf00      	nop
 800ee4a:	3710      	adds	r7, #16
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee58:	f001 fc38 	bl	80106cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d102      	bne.n	800ee6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee64:	2301      	movs	r3, #1
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	e001      	b.n	800ee6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee6e:	f001 fc61 	bl	8010734 <vPortExitCritical>

	return xReturn;
 800ee72:	68fb      	ldr	r3, [r7, #12]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee84:	f001 fc22 	bl	80106cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d102      	bne.n	800ee9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ee94:	2301      	movs	r3, #1
 800ee96:	60fb      	str	r3, [r7, #12]
 800ee98:	e001      	b.n	800ee9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee9e:	f001 fc49 	bl	8010734 <vPortExitCritical>

	return xReturn;
 800eea2:	68fb      	ldr	r3, [r7, #12]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	60fb      	str	r3, [r7, #12]
 800eeba:	e014      	b.n	800eee6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eebc:	4a0f      	ldr	r2, [pc, #60]	; (800eefc <vQueueAddToRegistry+0x50>)
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10b      	bne.n	800eee0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eec8:	490c      	ldr	r1, [pc, #48]	; (800eefc <vQueueAddToRegistry+0x50>)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eed2:	4a0a      	ldr	r2, [pc, #40]	; (800eefc <vQueueAddToRegistry+0x50>)
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	00db      	lsls	r3, r3, #3
 800eed8:	4413      	add	r3, r2
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eede:	e006      	b.n	800eeee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3301      	adds	r3, #1
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	2b07      	cmp	r3, #7
 800eeea:	d9e7      	bls.n	800eebc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eeec:	bf00      	nop
 800eeee:	bf00      	nop
 800eef0:	3714      	adds	r7, #20
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	2000c5e4 	.word	0x2000c5e4

0800ef00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef10:	f001 fbdc 	bl	80106cc <vPortEnterCritical>
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef1a:	b25b      	sxtb	r3, r3
 800ef1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef20:	d103      	bne.n	800ef2a <vQueueWaitForMessageRestricted+0x2a>
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	2200      	movs	r2, #0
 800ef26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef30:	b25b      	sxtb	r3, r3
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef36:	d103      	bne.n	800ef40 <vQueueWaitForMessageRestricted+0x40>
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef40:	f001 fbf8 	bl	8010734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d106      	bne.n	800ef5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	3324      	adds	r3, #36	; 0x24
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	68b9      	ldr	r1, [r7, #8]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 fc51 	bl	800f7fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ef5a:	6978      	ldr	r0, [r7, #20]
 800ef5c:	f7ff ff26 	bl	800edac <prvUnlockQueue>
	}
 800ef60:	bf00      	nop
 800ef62:	3718      	adds	r7, #24
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08e      	sub	sp, #56	; 0x38
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
 800ef74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ef76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10c      	bne.n	800ef96 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ef7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef80:	b672      	cpsid	i
 800ef82:	f383 8811 	msr	BASEPRI, r3
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	b662      	cpsie	i
 800ef90:	623b      	str	r3, [r7, #32]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ef96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10c      	bne.n	800efb6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ef9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa0:	b672      	cpsid	i
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	b662      	cpsie	i
 800efb0:	61fb      	str	r3, [r7, #28]
}
 800efb2:	bf00      	nop
 800efb4:	e7fe      	b.n	800efb4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800efb6:	235c      	movs	r3, #92	; 0x5c
 800efb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	2b5c      	cmp	r3, #92	; 0x5c
 800efbe:	d00c      	beq.n	800efda <xTaskCreateStatic+0x72>
	__asm volatile
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	b672      	cpsid	i
 800efc6:	f383 8811 	msr	BASEPRI, r3
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	b662      	cpsie	i
 800efd4:	61bb      	str	r3, [r7, #24]
}
 800efd6:	bf00      	nop
 800efd8:	e7fe      	b.n	800efd8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800efda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800efdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d01e      	beq.n	800f020 <xTaskCreateStatic+0xb8>
 800efe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d01b      	beq.n	800f020 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eff0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	2202      	movs	r2, #2
 800eff6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800effa:	2300      	movs	r3, #0
 800effc:	9303      	str	r3, [sp, #12]
 800effe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f000:	9302      	str	r3, [sp, #8]
 800f002:	f107 0314 	add.w	r3, r7, #20
 800f006:	9301      	str	r3, [sp, #4]
 800f008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	68b9      	ldr	r1, [r7, #8]
 800f012:	68f8      	ldr	r0, [r7, #12]
 800f014:	f000 f850 	bl	800f0b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f01a:	f000 f8df 	bl	800f1dc <prvAddNewTaskToReadyList>
 800f01e:	e001      	b.n	800f024 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f020:	2300      	movs	r3, #0
 800f022:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f024:	697b      	ldr	r3, [r7, #20]
	}
 800f026:	4618      	mov	r0, r3
 800f028:	3728      	adds	r7, #40	; 0x28
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b08c      	sub	sp, #48	; 0x30
 800f032:	af04      	add	r7, sp, #16
 800f034:	60f8      	str	r0, [r7, #12]
 800f036:	60b9      	str	r1, [r7, #8]
 800f038:	603b      	str	r3, [r7, #0]
 800f03a:	4613      	mov	r3, r2
 800f03c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f03e:	88fb      	ldrh	r3, [r7, #6]
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	4618      	mov	r0, r3
 800f044:	f001 fc6e 	bl	8010924 <pvPortMalloc>
 800f048:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00e      	beq.n	800f06e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f050:	205c      	movs	r0, #92	; 0x5c
 800f052:	f001 fc67 	bl	8010924 <pvPortMalloc>
 800f056:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d003      	beq.n	800f066 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f05e:	69fb      	ldr	r3, [r7, #28]
 800f060:	697a      	ldr	r2, [r7, #20]
 800f062:	631a      	str	r2, [r3, #48]	; 0x30
 800f064:	e005      	b.n	800f072 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f066:	6978      	ldr	r0, [r7, #20]
 800f068:	f001 fd26 	bl	8010ab8 <vPortFree>
 800f06c:	e001      	b.n	800f072 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f06e:	2300      	movs	r3, #0
 800f070:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d017      	beq.n	800f0a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f080:	88fa      	ldrh	r2, [r7, #6]
 800f082:	2300      	movs	r3, #0
 800f084:	9303      	str	r3, [sp, #12]
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	9302      	str	r3, [sp, #8]
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	68b9      	ldr	r1, [r7, #8]
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f000 f80e 	bl	800f0b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f09c:	69f8      	ldr	r0, [r7, #28]
 800f09e:	f000 f89d 	bl	800f1dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	61bb      	str	r3, [r7, #24]
 800f0a6:	e002      	b.n	800f0ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f0ae:	69bb      	ldr	r3, [r7, #24]
	}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3720      	adds	r7, #32
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b088      	sub	sp, #32
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	21a5      	movs	r1, #165	; 0xa5
 800f0d2:	f012 f827 	bl	8021124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0da:	6879      	ldr	r1, [r7, #4]
 800f0dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f0e0:	440b      	add	r3, r1
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	f023 0307 	bic.w	r3, r3, #7
 800f0ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	f003 0307 	and.w	r3, r3, #7
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00c      	beq.n	800f114 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fe:	b672      	cpsid	i
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	b662      	cpsie	i
 800f10e:	617b      	str	r3, [r7, #20]
}
 800f110:	bf00      	nop
 800f112:	e7fe      	b.n	800f112 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d01f      	beq.n	800f15a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f11a:	2300      	movs	r3, #0
 800f11c:	61fb      	str	r3, [r7, #28]
 800f11e:	e012      	b.n	800f146 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	4413      	add	r3, r2
 800f126:	7819      	ldrb	r1, [r3, #0]
 800f128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	4413      	add	r3, r2
 800f12e:	3334      	adds	r3, #52	; 0x34
 800f130:	460a      	mov	r2, r1
 800f132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	4413      	add	r3, r2
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d006      	beq.n	800f14e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	3301      	adds	r3, #1
 800f144:	61fb      	str	r3, [r7, #28]
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	2b0f      	cmp	r3, #15
 800f14a:	d9e9      	bls.n	800f120 <prvInitialiseNewTask+0x68>
 800f14c:	e000      	b.n	800f150 <prvInitialiseNewTask+0x98>
			{
				break;
 800f14e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f152:	2200      	movs	r2, #0
 800f154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f158:	e003      	b.n	800f162 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	2200      	movs	r2, #0
 800f15e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f164:	2b37      	cmp	r3, #55	; 0x37
 800f166:	d901      	bls.n	800f16c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f168:	2337      	movs	r3, #55	; 0x37
 800f16a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17a:	2200      	movs	r2, #0
 800f17c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f180:	3304      	adds	r3, #4
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff f952 	bl	800e42c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18a:	3318      	adds	r3, #24
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7ff f94d 	bl	800e42c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	68f9      	ldr	r1, [r7, #12]
 800f1ba:	69b8      	ldr	r0, [r7, #24]
 800f1bc:	f001 f97a 	bl	80104b4 <pxPortInitialiseStack>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1d2:	bf00      	nop
 800f1d4:	3720      	adds	r7, #32
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
	...

0800f1dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f1e4:	f001 fa72 	bl	80106cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f1e8:	4b2d      	ldr	r3, [pc, #180]	; (800f2a0 <prvAddNewTaskToReadyList+0xc4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	4a2c      	ldr	r2, [pc, #176]	; (800f2a0 <prvAddNewTaskToReadyList+0xc4>)
 800f1f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f1f2:	4b2c      	ldr	r3, [pc, #176]	; (800f2a4 <prvAddNewTaskToReadyList+0xc8>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d109      	bne.n	800f20e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f1fa:	4a2a      	ldr	r2, [pc, #168]	; (800f2a4 <prvAddNewTaskToReadyList+0xc8>)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f200:	4b27      	ldr	r3, [pc, #156]	; (800f2a0 <prvAddNewTaskToReadyList+0xc4>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	2b01      	cmp	r3, #1
 800f206:	d110      	bne.n	800f22a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f208:	f000 fc54 	bl	800fab4 <prvInitialiseTaskLists>
 800f20c:	e00d      	b.n	800f22a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f20e:	4b26      	ldr	r3, [pc, #152]	; (800f2a8 <prvAddNewTaskToReadyList+0xcc>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d109      	bne.n	800f22a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f216:	4b23      	ldr	r3, [pc, #140]	; (800f2a4 <prvAddNewTaskToReadyList+0xc8>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f220:	429a      	cmp	r2, r3
 800f222:	d802      	bhi.n	800f22a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f224:	4a1f      	ldr	r2, [pc, #124]	; (800f2a4 <prvAddNewTaskToReadyList+0xc8>)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f22a:	4b20      	ldr	r3, [pc, #128]	; (800f2ac <prvAddNewTaskToReadyList+0xd0>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3301      	adds	r3, #1
 800f230:	4a1e      	ldr	r2, [pc, #120]	; (800f2ac <prvAddNewTaskToReadyList+0xd0>)
 800f232:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f234:	4b1d      	ldr	r3, [pc, #116]	; (800f2ac <prvAddNewTaskToReadyList+0xd0>)
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f240:	4b1b      	ldr	r3, [pc, #108]	; (800f2b0 <prvAddNewTaskToReadyList+0xd4>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	429a      	cmp	r2, r3
 800f246:	d903      	bls.n	800f250 <prvAddNewTaskToReadyList+0x74>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f24c:	4a18      	ldr	r2, [pc, #96]	; (800f2b0 <prvAddNewTaskToReadyList+0xd4>)
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f254:	4613      	mov	r3, r2
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4413      	add	r3, r2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4a15      	ldr	r2, [pc, #84]	; (800f2b4 <prvAddNewTaskToReadyList+0xd8>)
 800f25e:	441a      	add	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	3304      	adds	r3, #4
 800f264:	4619      	mov	r1, r3
 800f266:	4610      	mov	r0, r2
 800f268:	f7ff f8ed 	bl	800e446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f26c:	f001 fa62 	bl	8010734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f270:	4b0d      	ldr	r3, [pc, #52]	; (800f2a8 <prvAddNewTaskToReadyList+0xcc>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00e      	beq.n	800f296 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f278:	4b0a      	ldr	r3, [pc, #40]	; (800f2a4 <prvAddNewTaskToReadyList+0xc8>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f282:	429a      	cmp	r2, r3
 800f284:	d207      	bcs.n	800f296 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f286:	4b0c      	ldr	r3, [pc, #48]	; (800f2b8 <prvAddNewTaskToReadyList+0xdc>)
 800f288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f296:	bf00      	nop
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	2000caf8 	.word	0x2000caf8
 800f2a4:	2000c624 	.word	0x2000c624
 800f2a8:	2000cb04 	.word	0x2000cb04
 800f2ac:	2000cb14 	.word	0x2000cb14
 800f2b0:	2000cb00 	.word	0x2000cb00
 800f2b4:	2000c628 	.word	0x2000c628
 800f2b8:	e000ed04 	.word	0xe000ed04

0800f2bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d019      	beq.n	800f302 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f2ce:	4b14      	ldr	r3, [pc, #80]	; (800f320 <vTaskDelay+0x64>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d00c      	beq.n	800f2f0 <vTaskDelay+0x34>
	__asm volatile
 800f2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2da:	b672      	cpsid	i
 800f2dc:	f383 8811 	msr	BASEPRI, r3
 800f2e0:	f3bf 8f6f 	isb	sy
 800f2e4:	f3bf 8f4f 	dsb	sy
 800f2e8:	b662      	cpsie	i
 800f2ea:	60bb      	str	r3, [r7, #8]
}
 800f2ec:	bf00      	nop
 800f2ee:	e7fe      	b.n	800f2ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f2f0:	f000 f884 	bl	800f3fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 fd2c 	bl	800fd54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f2fc:	f000 f88c 	bl	800f418 <xTaskResumeAll>
 800f300:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d107      	bne.n	800f318 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f308:	4b06      	ldr	r3, [pc, #24]	; (800f324 <vTaskDelay+0x68>)
 800f30a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f30e:	601a      	str	r2, [r3, #0]
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f318:	bf00      	nop
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	2000cb20 	.word	0x2000cb20
 800f324:	e000ed04 	.word	0xe000ed04

0800f328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b08a      	sub	sp, #40	; 0x28
 800f32c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f32e:	2300      	movs	r3, #0
 800f330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f332:	2300      	movs	r3, #0
 800f334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f336:	463a      	mov	r2, r7
 800f338:	1d39      	adds	r1, r7, #4
 800f33a:	f107 0308 	add.w	r3, r7, #8
 800f33e:	4618      	mov	r0, r3
 800f340:	f7ff f820 	bl	800e384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f344:	6839      	ldr	r1, [r7, #0]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	9202      	str	r2, [sp, #8]
 800f34c:	9301      	str	r3, [sp, #4]
 800f34e:	2300      	movs	r3, #0
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	2300      	movs	r3, #0
 800f354:	460a      	mov	r2, r1
 800f356:	4923      	ldr	r1, [pc, #140]	; (800f3e4 <vTaskStartScheduler+0xbc>)
 800f358:	4823      	ldr	r0, [pc, #140]	; (800f3e8 <vTaskStartScheduler+0xc0>)
 800f35a:	f7ff fe05 	bl	800ef68 <xTaskCreateStatic>
 800f35e:	4603      	mov	r3, r0
 800f360:	4a22      	ldr	r2, [pc, #136]	; (800f3ec <vTaskStartScheduler+0xc4>)
 800f362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f364:	4b21      	ldr	r3, [pc, #132]	; (800f3ec <vTaskStartScheduler+0xc4>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f36c:	2301      	movs	r3, #1
 800f36e:	617b      	str	r3, [r7, #20]
 800f370:	e001      	b.n	800f376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f372:	2300      	movs	r3, #0
 800f374:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d102      	bne.n	800f382 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f37c:	f000 fd3e 	bl	800fdfc <xTimerCreateTimerTask>
 800f380:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	2b01      	cmp	r3, #1
 800f386:	d118      	bne.n	800f3ba <vTaskStartScheduler+0x92>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	b672      	cpsid	i
 800f38e:	f383 8811 	msr	BASEPRI, r3
 800f392:	f3bf 8f6f 	isb	sy
 800f396:	f3bf 8f4f 	dsb	sy
 800f39a:	b662      	cpsie	i
 800f39c:	613b      	str	r3, [r7, #16]
}
 800f39e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f3a0:	4b13      	ldr	r3, [pc, #76]	; (800f3f0 <vTaskStartScheduler+0xc8>)
 800f3a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f3a8:	4b12      	ldr	r3, [pc, #72]	; (800f3f4 <vTaskStartScheduler+0xcc>)
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f3ae:	4b12      	ldr	r3, [pc, #72]	; (800f3f8 <vTaskStartScheduler+0xd0>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f3b4:	f001 f90c 	bl	80105d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f3b8:	e010      	b.n	800f3dc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3c0:	d10c      	bne.n	800f3dc <vTaskStartScheduler+0xb4>
	__asm volatile
 800f3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c6:	b672      	cpsid	i
 800f3c8:	f383 8811 	msr	BASEPRI, r3
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f3bf 8f4f 	dsb	sy
 800f3d4:	b662      	cpsie	i
 800f3d6:	60fb      	str	r3, [r7, #12]
}
 800f3d8:	bf00      	nop
 800f3da:	e7fe      	b.n	800f3da <vTaskStartScheduler+0xb2>
}
 800f3dc:	bf00      	nop
 800f3de:	3718      	adds	r7, #24
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	08024814 	.word	0x08024814
 800f3e8:	0800fa85 	.word	0x0800fa85
 800f3ec:	2000cb1c 	.word	0x2000cb1c
 800f3f0:	2000cb18 	.word	0x2000cb18
 800f3f4:	2000cb04 	.word	0x2000cb04
 800f3f8:	2000cafc 	.word	0x2000cafc

0800f3fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f400:	4b04      	ldr	r3, [pc, #16]	; (800f414 <vTaskSuspendAll+0x18>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	3301      	adds	r3, #1
 800f406:	4a03      	ldr	r2, [pc, #12]	; (800f414 <vTaskSuspendAll+0x18>)
 800f408:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f40a:	bf00      	nop
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	2000cb20 	.word	0x2000cb20

0800f418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f41e:	2300      	movs	r3, #0
 800f420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f422:	2300      	movs	r3, #0
 800f424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f426:	4b43      	ldr	r3, [pc, #268]	; (800f534 <xTaskResumeAll+0x11c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d10c      	bne.n	800f448 <xTaskResumeAll+0x30>
	__asm volatile
 800f42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f432:	b672      	cpsid	i
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	b662      	cpsie	i
 800f442:	603b      	str	r3, [r7, #0]
}
 800f444:	bf00      	nop
 800f446:	e7fe      	b.n	800f446 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f448:	f001 f940 	bl	80106cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f44c:	4b39      	ldr	r3, [pc, #228]	; (800f534 <xTaskResumeAll+0x11c>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	3b01      	subs	r3, #1
 800f452:	4a38      	ldr	r2, [pc, #224]	; (800f534 <xTaskResumeAll+0x11c>)
 800f454:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f456:	4b37      	ldr	r3, [pc, #220]	; (800f534 <xTaskResumeAll+0x11c>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d162      	bne.n	800f524 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f45e:	4b36      	ldr	r3, [pc, #216]	; (800f538 <xTaskResumeAll+0x120>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d05e      	beq.n	800f524 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f466:	e02f      	b.n	800f4c8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f468:	4b34      	ldr	r3, [pc, #208]	; (800f53c <xTaskResumeAll+0x124>)
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	3318      	adds	r3, #24
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff f843 	bl	800e500 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	3304      	adds	r3, #4
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff f83e 	bl	800e500 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f488:	4b2d      	ldr	r3, [pc, #180]	; (800f540 <xTaskResumeAll+0x128>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d903      	bls.n	800f498 <xTaskResumeAll+0x80>
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f494:	4a2a      	ldr	r2, [pc, #168]	; (800f540 <xTaskResumeAll+0x128>)
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f49c:	4613      	mov	r3, r2
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	4413      	add	r3, r2
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4a27      	ldr	r2, [pc, #156]	; (800f544 <xTaskResumeAll+0x12c>)
 800f4a6:	441a      	add	r2, r3
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	4610      	mov	r0, r2
 800f4b0:	f7fe ffc9 	bl	800e446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b8:	4b23      	ldr	r3, [pc, #140]	; (800f548 <xTaskResumeAll+0x130>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d302      	bcc.n	800f4c8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f4c2:	4b22      	ldr	r3, [pc, #136]	; (800f54c <xTaskResumeAll+0x134>)
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f4c8:	4b1c      	ldr	r3, [pc, #112]	; (800f53c <xTaskResumeAll+0x124>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1cb      	bne.n	800f468 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d001      	beq.n	800f4da <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f4d6:	f000 fb8d 	bl	800fbf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f4da:	4b1d      	ldr	r3, [pc, #116]	; (800f550 <xTaskResumeAll+0x138>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d010      	beq.n	800f508 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f4e6:	f000 f847 	bl	800f578 <xTaskIncrementTick>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d002      	beq.n	800f4f6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f4f0:	4b16      	ldr	r3, [pc, #88]	; (800f54c <xTaskResumeAll+0x134>)
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1f1      	bne.n	800f4e6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f502:	4b13      	ldr	r3, [pc, #76]	; (800f550 <xTaskResumeAll+0x138>)
 800f504:	2200      	movs	r2, #0
 800f506:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f508:	4b10      	ldr	r3, [pc, #64]	; (800f54c <xTaskResumeAll+0x134>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d009      	beq.n	800f524 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f510:	2301      	movs	r3, #1
 800f512:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f514:	4b0f      	ldr	r3, [pc, #60]	; (800f554 <xTaskResumeAll+0x13c>)
 800f516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f51a:	601a      	str	r2, [r3, #0]
 800f51c:	f3bf 8f4f 	dsb	sy
 800f520:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f524:	f001 f906 	bl	8010734 <vPortExitCritical>

	return xAlreadyYielded;
 800f528:	68bb      	ldr	r3, [r7, #8]
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	2000cb20 	.word	0x2000cb20
 800f538:	2000caf8 	.word	0x2000caf8
 800f53c:	2000cab8 	.word	0x2000cab8
 800f540:	2000cb00 	.word	0x2000cb00
 800f544:	2000c628 	.word	0x2000c628
 800f548:	2000c624 	.word	0x2000c624
 800f54c:	2000cb0c 	.word	0x2000cb0c
 800f550:	2000cb08 	.word	0x2000cb08
 800f554:	e000ed04 	.word	0xe000ed04

0800f558 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f558:	b480      	push	{r7}
 800f55a:	b083      	sub	sp, #12
 800f55c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f55e:	4b05      	ldr	r3, [pc, #20]	; (800f574 <xTaskGetTickCount+0x1c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f564:	687b      	ldr	r3, [r7, #4]
}
 800f566:	4618      	mov	r0, r3
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	2000cafc 	.word	0x2000cafc

0800f578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b086      	sub	sp, #24
 800f57c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f57e:	2300      	movs	r3, #0
 800f580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f582:	4b50      	ldr	r3, [pc, #320]	; (800f6c4 <xTaskIncrementTick+0x14c>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f040 808b 	bne.w	800f6a2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f58c:	4b4e      	ldr	r3, [pc, #312]	; (800f6c8 <xTaskIncrementTick+0x150>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3301      	adds	r3, #1
 800f592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f594:	4a4c      	ldr	r2, [pc, #304]	; (800f6c8 <xTaskIncrementTick+0x150>)
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d122      	bne.n	800f5e6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f5a0:	4b4a      	ldr	r3, [pc, #296]	; (800f6cc <xTaskIncrementTick+0x154>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00c      	beq.n	800f5c4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	b672      	cpsid	i
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	b662      	cpsie	i
 800f5be:	603b      	str	r3, [r7, #0]
}
 800f5c0:	bf00      	nop
 800f5c2:	e7fe      	b.n	800f5c2 <xTaskIncrementTick+0x4a>
 800f5c4:	4b41      	ldr	r3, [pc, #260]	; (800f6cc <xTaskIncrementTick+0x154>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	60fb      	str	r3, [r7, #12]
 800f5ca:	4b41      	ldr	r3, [pc, #260]	; (800f6d0 <xTaskIncrementTick+0x158>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4a3f      	ldr	r2, [pc, #252]	; (800f6cc <xTaskIncrementTick+0x154>)
 800f5d0:	6013      	str	r3, [r2, #0]
 800f5d2:	4a3f      	ldr	r2, [pc, #252]	; (800f6d0 <xTaskIncrementTick+0x158>)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6013      	str	r3, [r2, #0]
 800f5d8:	4b3e      	ldr	r3, [pc, #248]	; (800f6d4 <xTaskIncrementTick+0x15c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	4a3d      	ldr	r2, [pc, #244]	; (800f6d4 <xTaskIncrementTick+0x15c>)
 800f5e0:	6013      	str	r3, [r2, #0]
 800f5e2:	f000 fb07 	bl	800fbf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f5e6:	4b3c      	ldr	r3, [pc, #240]	; (800f6d8 <xTaskIncrementTick+0x160>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	693a      	ldr	r2, [r7, #16]
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d349      	bcc.n	800f684 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5f0:	4b36      	ldr	r3, [pc, #216]	; (800f6cc <xTaskIncrementTick+0x154>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d104      	bne.n	800f604 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5fa:	4b37      	ldr	r3, [pc, #220]	; (800f6d8 <xTaskIncrementTick+0x160>)
 800f5fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f600:	601a      	str	r2, [r3, #0]
					break;
 800f602:	e03f      	b.n	800f684 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f604:	4b31      	ldr	r3, [pc, #196]	; (800f6cc <xTaskIncrementTick+0x154>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f614:	693a      	ldr	r2, [r7, #16]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d203      	bcs.n	800f624 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f61c:	4a2e      	ldr	r2, [pc, #184]	; (800f6d8 <xTaskIncrementTick+0x160>)
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f622:	e02f      	b.n	800f684 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	3304      	adds	r3, #4
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fe ff69 	bl	800e500 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f632:	2b00      	cmp	r3, #0
 800f634:	d004      	beq.n	800f640 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	3318      	adds	r3, #24
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe ff60 	bl	800e500 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f644:	4b25      	ldr	r3, [pc, #148]	; (800f6dc <xTaskIncrementTick+0x164>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d903      	bls.n	800f654 <xTaskIncrementTick+0xdc>
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f650:	4a22      	ldr	r2, [pc, #136]	; (800f6dc <xTaskIncrementTick+0x164>)
 800f652:	6013      	str	r3, [r2, #0]
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f658:	4613      	mov	r3, r2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	4413      	add	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4a1f      	ldr	r2, [pc, #124]	; (800f6e0 <xTaskIncrementTick+0x168>)
 800f662:	441a      	add	r2, r3
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	3304      	adds	r3, #4
 800f668:	4619      	mov	r1, r3
 800f66a:	4610      	mov	r0, r2
 800f66c:	f7fe feeb 	bl	800e446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f674:	4b1b      	ldr	r3, [pc, #108]	; (800f6e4 <xTaskIncrementTick+0x16c>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d3b8      	bcc.n	800f5f0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f67e:	2301      	movs	r3, #1
 800f680:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f682:	e7b5      	b.n	800f5f0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f684:	4b17      	ldr	r3, [pc, #92]	; (800f6e4 <xTaskIncrementTick+0x16c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f68a:	4915      	ldr	r1, [pc, #84]	; (800f6e0 <xTaskIncrementTick+0x168>)
 800f68c:	4613      	mov	r3, r2
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	4413      	add	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	440b      	add	r3, r1
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d907      	bls.n	800f6ac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f69c:	2301      	movs	r3, #1
 800f69e:	617b      	str	r3, [r7, #20]
 800f6a0:	e004      	b.n	800f6ac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f6a2:	4b11      	ldr	r3, [pc, #68]	; (800f6e8 <xTaskIncrementTick+0x170>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	4a0f      	ldr	r2, [pc, #60]	; (800f6e8 <xTaskIncrementTick+0x170>)
 800f6aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f6ac:	4b0f      	ldr	r3, [pc, #60]	; (800f6ec <xTaskIncrementTick+0x174>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d001      	beq.n	800f6b8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f6b8:	697b      	ldr	r3, [r7, #20]
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3718      	adds	r7, #24
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	2000cb20 	.word	0x2000cb20
 800f6c8:	2000cafc 	.word	0x2000cafc
 800f6cc:	2000cab0 	.word	0x2000cab0
 800f6d0:	2000cab4 	.word	0x2000cab4
 800f6d4:	2000cb10 	.word	0x2000cb10
 800f6d8:	2000cb18 	.word	0x2000cb18
 800f6dc:	2000cb00 	.word	0x2000cb00
 800f6e0:	2000c628 	.word	0x2000c628
 800f6e4:	2000c624 	.word	0x2000c624
 800f6e8:	2000cb08 	.word	0x2000cb08
 800f6ec:	2000cb0c 	.word	0x2000cb0c

0800f6f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b085      	sub	sp, #20
 800f6f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f6f6:	4b29      	ldr	r3, [pc, #164]	; (800f79c <vTaskSwitchContext+0xac>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d003      	beq.n	800f706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f6fe:	4b28      	ldr	r3, [pc, #160]	; (800f7a0 <vTaskSwitchContext+0xb0>)
 800f700:	2201      	movs	r2, #1
 800f702:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f704:	e043      	b.n	800f78e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800f706:	4b26      	ldr	r3, [pc, #152]	; (800f7a0 <vTaskSwitchContext+0xb0>)
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f70c:	4b25      	ldr	r3, [pc, #148]	; (800f7a4 <vTaskSwitchContext+0xb4>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	60fb      	str	r3, [r7, #12]
 800f712:	e012      	b.n	800f73a <vTaskSwitchContext+0x4a>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10c      	bne.n	800f734 <vTaskSwitchContext+0x44>
	__asm volatile
 800f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71e:	b672      	cpsid	i
 800f720:	f383 8811 	msr	BASEPRI, r3
 800f724:	f3bf 8f6f 	isb	sy
 800f728:	f3bf 8f4f 	dsb	sy
 800f72c:	b662      	cpsie	i
 800f72e:	607b      	str	r3, [r7, #4]
}
 800f730:	bf00      	nop
 800f732:	e7fe      	b.n	800f732 <vTaskSwitchContext+0x42>
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	3b01      	subs	r3, #1
 800f738:	60fb      	str	r3, [r7, #12]
 800f73a:	491b      	ldr	r1, [pc, #108]	; (800f7a8 <vTaskSwitchContext+0xb8>)
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	4613      	mov	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	4413      	add	r3, r2
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	440b      	add	r3, r1
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d0e2      	beq.n	800f714 <vTaskSwitchContext+0x24>
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	4613      	mov	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4a13      	ldr	r2, [pc, #76]	; (800f7a8 <vTaskSwitchContext+0xb8>)
 800f75a:	4413      	add	r3, r2
 800f75c:	60bb      	str	r3, [r7, #8]
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	685a      	ldr	r2, [r3, #4]
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	605a      	str	r2, [r3, #4]
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	685a      	ldr	r2, [r3, #4]
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	3308      	adds	r3, #8
 800f770:	429a      	cmp	r2, r3
 800f772:	d104      	bne.n	800f77e <vTaskSwitchContext+0x8e>
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	685a      	ldr	r2, [r3, #4]
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	605a      	str	r2, [r3, #4]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	4a09      	ldr	r2, [pc, #36]	; (800f7ac <vTaskSwitchContext+0xbc>)
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	4a06      	ldr	r2, [pc, #24]	; (800f7a4 <vTaskSwitchContext+0xb4>)
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6013      	str	r3, [r2, #0]
}
 800f78e:	bf00      	nop
 800f790:	3714      	adds	r7, #20
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr
 800f79a:	bf00      	nop
 800f79c:	2000cb20 	.word	0x2000cb20
 800f7a0:	2000cb0c 	.word	0x2000cb0c
 800f7a4:	2000cb00 	.word	0x2000cb00
 800f7a8:	2000c628 	.word	0x2000c628
 800f7ac:	2000c624 	.word	0x2000c624

0800f7b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10c      	bne.n	800f7da <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c4:	b672      	cpsid	i
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	b662      	cpsie	i
 800f7d4:	60fb      	str	r3, [r7, #12]
}
 800f7d6:	bf00      	nop
 800f7d8:	e7fe      	b.n	800f7d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7da:	4b07      	ldr	r3, [pc, #28]	; (800f7f8 <vTaskPlaceOnEventList+0x48>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	3318      	adds	r3, #24
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7fe fe53 	bl	800e48e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	6838      	ldr	r0, [r7, #0]
 800f7ec:	f000 fab2 	bl	800fd54 <prvAddCurrentTaskToDelayedList>
}
 800f7f0:	bf00      	nop
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	2000c624 	.word	0x2000c624

0800f7fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d10c      	bne.n	800f828 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	b672      	cpsid	i
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	b662      	cpsie	i
 800f822:	617b      	str	r3, [r7, #20]
}
 800f824:	bf00      	nop
 800f826:	e7fe      	b.n	800f826 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f828:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <vTaskPlaceOnEventListRestricted+0x58>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3318      	adds	r3, #24
 800f82e:	4619      	mov	r1, r3
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f7fe fe08 	bl	800e446 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d002      	beq.n	800f842 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800f83c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f840:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f842:	6879      	ldr	r1, [r7, #4]
 800f844:	68b8      	ldr	r0, [r7, #8]
 800f846:	f000 fa85 	bl	800fd54 <prvAddCurrentTaskToDelayedList>
	}
 800f84a:	bf00      	nop
 800f84c:	3718      	adds	r7, #24
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	2000c624 	.word	0x2000c624

0800f858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d10c      	bne.n	800f888 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f872:	b672      	cpsid	i
 800f874:	f383 8811 	msr	BASEPRI, r3
 800f878:	f3bf 8f6f 	isb	sy
 800f87c:	f3bf 8f4f 	dsb	sy
 800f880:	b662      	cpsie	i
 800f882:	60fb      	str	r3, [r7, #12]
}
 800f884:	bf00      	nop
 800f886:	e7fe      	b.n	800f886 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	3318      	adds	r3, #24
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fe fe37 	bl	800e500 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f892:	4b1e      	ldr	r3, [pc, #120]	; (800f90c <xTaskRemoveFromEventList+0xb4>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d11d      	bne.n	800f8d6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	3304      	adds	r3, #4
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fe fe2e 	bl	800e500 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a8:	4b19      	ldr	r3, [pc, #100]	; (800f910 <xTaskRemoveFromEventList+0xb8>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d903      	bls.n	800f8b8 <xTaskRemoveFromEventList+0x60>
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b4:	4a16      	ldr	r2, [pc, #88]	; (800f910 <xTaskRemoveFromEventList+0xb8>)
 800f8b6:	6013      	str	r3, [r2, #0]
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	4a13      	ldr	r2, [pc, #76]	; (800f914 <xTaskRemoveFromEventList+0xbc>)
 800f8c6:	441a      	add	r2, r3
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	f7fe fdb9 	bl	800e446 <vListInsertEnd>
 800f8d4:	e005      	b.n	800f8e2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	3318      	adds	r3, #24
 800f8da:	4619      	mov	r1, r3
 800f8dc:	480e      	ldr	r0, [pc, #56]	; (800f918 <xTaskRemoveFromEventList+0xc0>)
 800f8de:	f7fe fdb2 	bl	800e446 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e6:	4b0d      	ldr	r3, [pc, #52]	; (800f91c <xTaskRemoveFromEventList+0xc4>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d905      	bls.n	800f8fc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f8f4:	4b0a      	ldr	r3, [pc, #40]	; (800f920 <xTaskRemoveFromEventList+0xc8>)
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	601a      	str	r2, [r3, #0]
 800f8fa:	e001      	b.n	800f900 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f900:	697b      	ldr	r3, [r7, #20]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3718      	adds	r7, #24
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	2000cb20 	.word	0x2000cb20
 800f910:	2000cb00 	.word	0x2000cb00
 800f914:	2000c628 	.word	0x2000c628
 800f918:	2000cab8 	.word	0x2000cab8
 800f91c:	2000c624 	.word	0x2000c624
 800f920:	2000cb0c 	.word	0x2000cb0c

0800f924 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10c      	bne.n	800f94c <vTaskSetTimeOutState+0x28>
	__asm volatile
 800f932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f936:	b672      	cpsid	i
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	b662      	cpsie	i
 800f946:	60fb      	str	r3, [r7, #12]
}
 800f948:	bf00      	nop
 800f94a:	e7fe      	b.n	800f94a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800f94c:	f000 febe 	bl	80106cc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f950:	4b06      	ldr	r3, [pc, #24]	; (800f96c <vTaskSetTimeOutState+0x48>)
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f958:	4b05      	ldr	r3, [pc, #20]	; (800f970 <vTaskSetTimeOutState+0x4c>)
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f960:	f000 fee8 	bl	8010734 <vPortExitCritical>
}
 800f964:	bf00      	nop
 800f966:	3710      	adds	r7, #16
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	2000cb10 	.word	0x2000cb10
 800f970:	2000cafc 	.word	0x2000cafc

0800f974 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f97c:	4b06      	ldr	r3, [pc, #24]	; (800f998 <vTaskInternalSetTimeOutState+0x24>)
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f984:	4b05      	ldr	r3, [pc, #20]	; (800f99c <vTaskInternalSetTimeOutState+0x28>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	605a      	str	r2, [r3, #4]
}
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr
 800f998:	2000cb10 	.word	0x2000cb10
 800f99c:	2000cafc 	.word	0x2000cafc

0800f9a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b088      	sub	sp, #32
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d10c      	bne.n	800f9ca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	b672      	cpsid	i
 800f9b6:	f383 8811 	msr	BASEPRI, r3
 800f9ba:	f3bf 8f6f 	isb	sy
 800f9be:	f3bf 8f4f 	dsb	sy
 800f9c2:	b662      	cpsie	i
 800f9c4:	613b      	str	r3, [r7, #16]
}
 800f9c6:	bf00      	nop
 800f9c8:	e7fe      	b.n	800f9c8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d10c      	bne.n	800f9ea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d4:	b672      	cpsid	i
 800f9d6:	f383 8811 	msr	BASEPRI, r3
 800f9da:	f3bf 8f6f 	isb	sy
 800f9de:	f3bf 8f4f 	dsb	sy
 800f9e2:	b662      	cpsie	i
 800f9e4:	60fb      	str	r3, [r7, #12]
}
 800f9e6:	bf00      	nop
 800f9e8:	e7fe      	b.n	800f9e8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f9ea:	f000 fe6f 	bl	80106cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f9ee:	4b1d      	ldr	r3, [pc, #116]	; (800fa64 <xTaskCheckForTimeOut+0xc4>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	69ba      	ldr	r2, [r7, #24]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa06:	d102      	bne.n	800fa0e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	61fb      	str	r3, [r7, #28]
 800fa0c:	e023      	b.n	800fa56 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	4b15      	ldr	r3, [pc, #84]	; (800fa68 <xTaskCheckForTimeOut+0xc8>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d007      	beq.n	800fa2a <xTaskCheckForTimeOut+0x8a>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	69ba      	ldr	r2, [r7, #24]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d302      	bcc.n	800fa2a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa24:	2301      	movs	r3, #1
 800fa26:	61fb      	str	r3, [r7, #28]
 800fa28:	e015      	b.n	800fa56 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	697a      	ldr	r2, [r7, #20]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d20b      	bcs.n	800fa4c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	1ad2      	subs	r2, r2, r3
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7ff ff97 	bl	800f974 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa46:	2300      	movs	r3, #0
 800fa48:	61fb      	str	r3, [r7, #28]
 800fa4a:	e004      	b.n	800fa56 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa52:	2301      	movs	r3, #1
 800fa54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa56:	f000 fe6d 	bl	8010734 <vPortExitCritical>

	return xReturn;
 800fa5a:	69fb      	ldr	r3, [r7, #28]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3720      	adds	r7, #32
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	2000cafc 	.word	0x2000cafc
 800fa68:	2000cb10 	.word	0x2000cb10

0800fa6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa70:	4b03      	ldr	r3, [pc, #12]	; (800fa80 <vTaskMissedYield+0x14>)
 800fa72:	2201      	movs	r2, #1
 800fa74:	601a      	str	r2, [r3, #0]
}
 800fa76:	bf00      	nop
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr
 800fa80:	2000cb0c 	.word	0x2000cb0c

0800fa84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa8c:	f000 f852 	bl	800fb34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa90:	4b06      	ldr	r3, [pc, #24]	; (800faac <prvIdleTask+0x28>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d9f9      	bls.n	800fa8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fa98:	4b05      	ldr	r3, [pc, #20]	; (800fab0 <prvIdleTask+0x2c>)
 800fa9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa9e:	601a      	str	r2, [r3, #0]
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800faa8:	e7f0      	b.n	800fa8c <prvIdleTask+0x8>
 800faaa:	bf00      	nop
 800faac:	2000c628 	.word	0x2000c628
 800fab0:	e000ed04 	.word	0xe000ed04

0800fab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800faba:	2300      	movs	r3, #0
 800fabc:	607b      	str	r3, [r7, #4]
 800fabe:	e00c      	b.n	800fada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	4613      	mov	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4a12      	ldr	r2, [pc, #72]	; (800fb14 <prvInitialiseTaskLists+0x60>)
 800facc:	4413      	add	r3, r2
 800face:	4618      	mov	r0, r3
 800fad0:	f7fe fc8c 	bl	800e3ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	3301      	adds	r3, #1
 800fad8:	607b      	str	r3, [r7, #4]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2b37      	cmp	r3, #55	; 0x37
 800fade:	d9ef      	bls.n	800fac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fae0:	480d      	ldr	r0, [pc, #52]	; (800fb18 <prvInitialiseTaskLists+0x64>)
 800fae2:	f7fe fc83 	bl	800e3ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fae6:	480d      	ldr	r0, [pc, #52]	; (800fb1c <prvInitialiseTaskLists+0x68>)
 800fae8:	f7fe fc80 	bl	800e3ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800faec:	480c      	ldr	r0, [pc, #48]	; (800fb20 <prvInitialiseTaskLists+0x6c>)
 800faee:	f7fe fc7d 	bl	800e3ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800faf2:	480c      	ldr	r0, [pc, #48]	; (800fb24 <prvInitialiseTaskLists+0x70>)
 800faf4:	f7fe fc7a 	bl	800e3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800faf8:	480b      	ldr	r0, [pc, #44]	; (800fb28 <prvInitialiseTaskLists+0x74>)
 800fafa:	f7fe fc77 	bl	800e3ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fafe:	4b0b      	ldr	r3, [pc, #44]	; (800fb2c <prvInitialiseTaskLists+0x78>)
 800fb00:	4a05      	ldr	r2, [pc, #20]	; (800fb18 <prvInitialiseTaskLists+0x64>)
 800fb02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fb04:	4b0a      	ldr	r3, [pc, #40]	; (800fb30 <prvInitialiseTaskLists+0x7c>)
 800fb06:	4a05      	ldr	r2, [pc, #20]	; (800fb1c <prvInitialiseTaskLists+0x68>)
 800fb08:	601a      	str	r2, [r3, #0]
}
 800fb0a:	bf00      	nop
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	2000c628 	.word	0x2000c628
 800fb18:	2000ca88 	.word	0x2000ca88
 800fb1c:	2000ca9c 	.word	0x2000ca9c
 800fb20:	2000cab8 	.word	0x2000cab8
 800fb24:	2000cacc 	.word	0x2000cacc
 800fb28:	2000cae4 	.word	0x2000cae4
 800fb2c:	2000cab0 	.word	0x2000cab0
 800fb30:	2000cab4 	.word	0x2000cab4

0800fb34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb3a:	e019      	b.n	800fb70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb3c:	f000 fdc6 	bl	80106cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb40:	4b10      	ldr	r3, [pc, #64]	; (800fb84 <prvCheckTasksWaitingTermination+0x50>)
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fe fcd7 	bl	800e500 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb52:	4b0d      	ldr	r3, [pc, #52]	; (800fb88 <prvCheckTasksWaitingTermination+0x54>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3b01      	subs	r3, #1
 800fb58:	4a0b      	ldr	r2, [pc, #44]	; (800fb88 <prvCheckTasksWaitingTermination+0x54>)
 800fb5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb5c:	4b0b      	ldr	r3, [pc, #44]	; (800fb8c <prvCheckTasksWaitingTermination+0x58>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	4a0a      	ldr	r2, [pc, #40]	; (800fb8c <prvCheckTasksWaitingTermination+0x58>)
 800fb64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb66:	f000 fde5 	bl	8010734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 f810 	bl	800fb90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb70:	4b06      	ldr	r3, [pc, #24]	; (800fb8c <prvCheckTasksWaitingTermination+0x58>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d1e1      	bne.n	800fb3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb78:	bf00      	nop
 800fb7a:	bf00      	nop
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	2000cacc 	.word	0x2000cacc
 800fb88:	2000caf8 	.word	0x2000caf8
 800fb8c:	2000cae0 	.word	0x2000cae0

0800fb90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d108      	bne.n	800fbb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fba6:	4618      	mov	r0, r3
 800fba8:	f000 ff86 	bl	8010ab8 <vPortFree>
				vPortFree( pxTCB );
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 ff83 	bl	8010ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fbb2:	e01a      	b.n	800fbea <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d103      	bne.n	800fbc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 ff7a 	bl	8010ab8 <vPortFree>
	}
 800fbc4:	e011      	b.n	800fbea <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d00c      	beq.n	800fbea <prvDeleteTCB+0x5a>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd4:	b672      	cpsid	i
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	b662      	cpsie	i
 800fbe4:	60fb      	str	r3, [r7, #12]
}
 800fbe6:	bf00      	nop
 800fbe8:	e7fe      	b.n	800fbe8 <prvDeleteTCB+0x58>
	}
 800fbea:	bf00      	nop
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
	...

0800fbf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b083      	sub	sp, #12
 800fbf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbfa:	4b0c      	ldr	r3, [pc, #48]	; (800fc2c <prvResetNextTaskUnblockTime+0x38>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d104      	bne.n	800fc0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fc04:	4b0a      	ldr	r3, [pc, #40]	; (800fc30 <prvResetNextTaskUnblockTime+0x3c>)
 800fc06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fc0c:	e008      	b.n	800fc20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc0e:	4b07      	ldr	r3, [pc, #28]	; (800fc2c <prvResetNextTaskUnblockTime+0x38>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	4a04      	ldr	r2, [pc, #16]	; (800fc30 <prvResetNextTaskUnblockTime+0x3c>)
 800fc1e:	6013      	str	r3, [r2, #0]
}
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr
 800fc2c:	2000cab0 	.word	0x2000cab0
 800fc30:	2000cb18 	.word	0x2000cb18

0800fc34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc3a:	4b0b      	ldr	r3, [pc, #44]	; (800fc68 <xTaskGetSchedulerState+0x34>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d102      	bne.n	800fc48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc42:	2301      	movs	r3, #1
 800fc44:	607b      	str	r3, [r7, #4]
 800fc46:	e008      	b.n	800fc5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc48:	4b08      	ldr	r3, [pc, #32]	; (800fc6c <xTaskGetSchedulerState+0x38>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d102      	bne.n	800fc56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc50:	2302      	movs	r3, #2
 800fc52:	607b      	str	r3, [r7, #4]
 800fc54:	e001      	b.n	800fc5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc56:	2300      	movs	r3, #0
 800fc58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc5a:	687b      	ldr	r3, [r7, #4]
	}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	2000cb04 	.word	0x2000cb04
 800fc6c:	2000cb20 	.word	0x2000cb20

0800fc70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d05a      	beq.n	800fd3c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fc86:	4b30      	ldr	r3, [pc, #192]	; (800fd48 <xTaskPriorityDisinherit+0xd8>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	693a      	ldr	r2, [r7, #16]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d00c      	beq.n	800fcaa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800fc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc94:	b672      	cpsid	i
 800fc96:	f383 8811 	msr	BASEPRI, r3
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	b662      	cpsie	i
 800fca4:	60fb      	str	r3, [r7, #12]
}
 800fca6:	bf00      	nop
 800fca8:	e7fe      	b.n	800fca8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d10c      	bne.n	800fccc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800fcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb6:	b672      	cpsid	i
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	b662      	cpsie	i
 800fcc6:	60bb      	str	r3, [r7, #8]
}
 800fcc8:	bf00      	nop
 800fcca:	e7fe      	b.n	800fcca <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcd0:	1e5a      	subs	r2, r3, #1
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d02c      	beq.n	800fd3c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d128      	bne.n	800fd3c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	3304      	adds	r3, #4
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe fc06 	bl	800e500 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd0c:	4b0f      	ldr	r3, [pc, #60]	; (800fd4c <xTaskPriorityDisinherit+0xdc>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d903      	bls.n	800fd1c <xTaskPriorityDisinherit+0xac>
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd18:	4a0c      	ldr	r2, [pc, #48]	; (800fd4c <xTaskPriorityDisinherit+0xdc>)
 800fd1a:	6013      	str	r3, [r2, #0]
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd20:	4613      	mov	r3, r2
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	4413      	add	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	4a09      	ldr	r2, [pc, #36]	; (800fd50 <xTaskPriorityDisinherit+0xe0>)
 800fd2a:	441a      	add	r2, r3
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	3304      	adds	r3, #4
 800fd30:	4619      	mov	r1, r3
 800fd32:	4610      	mov	r0, r2
 800fd34:	f7fe fb87 	bl	800e446 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fd38:	2301      	movs	r3, #1
 800fd3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd3c:	697b      	ldr	r3, [r7, #20]
	}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3718      	adds	r7, #24
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	2000c624 	.word	0x2000c624
 800fd4c:	2000cb00 	.word	0x2000cb00
 800fd50:	2000c628 	.word	0x2000c628

0800fd54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd5e:	4b21      	ldr	r3, [pc, #132]	; (800fde4 <prvAddCurrentTaskToDelayedList+0x90>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd64:	4b20      	ldr	r3, [pc, #128]	; (800fde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	3304      	adds	r3, #4
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fe fbc8 	bl	800e500 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd76:	d10a      	bne.n	800fd8e <prvAddCurrentTaskToDelayedList+0x3a>
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d007      	beq.n	800fd8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd7e:	4b1a      	ldr	r3, [pc, #104]	; (800fde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	3304      	adds	r3, #4
 800fd84:	4619      	mov	r1, r3
 800fd86:	4819      	ldr	r0, [pc, #100]	; (800fdec <prvAddCurrentTaskToDelayedList+0x98>)
 800fd88:	f7fe fb5d 	bl	800e446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd8c:	e026      	b.n	800fddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd8e:	68fa      	ldr	r2, [r7, #12]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	4413      	add	r3, r2
 800fd94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd96:	4b14      	ldr	r3, [pc, #80]	; (800fde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd9e:	68ba      	ldr	r2, [r7, #8]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d209      	bcs.n	800fdba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fda6:	4b12      	ldr	r3, [pc, #72]	; (800fdf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	4b0f      	ldr	r3, [pc, #60]	; (800fde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	3304      	adds	r3, #4
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	f7fe fb6b 	bl	800e48e <vListInsert>
}
 800fdb8:	e010      	b.n	800fddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdba:	4b0e      	ldr	r3, [pc, #56]	; (800fdf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	3304      	adds	r3, #4
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	f7fe fb61 	bl	800e48e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fdcc:	4b0a      	ldr	r3, [pc, #40]	; (800fdf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68ba      	ldr	r2, [r7, #8]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d202      	bcs.n	800fddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fdd6:	4a08      	ldr	r2, [pc, #32]	; (800fdf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	6013      	str	r3, [r2, #0]
}
 800fddc:	bf00      	nop
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	2000cafc 	.word	0x2000cafc
 800fde8:	2000c624 	.word	0x2000c624
 800fdec:	2000cae4 	.word	0x2000cae4
 800fdf0:	2000cab4 	.word	0x2000cab4
 800fdf4:	2000cab0 	.word	0x2000cab0
 800fdf8:	2000cb18 	.word	0x2000cb18

0800fdfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08a      	sub	sp, #40	; 0x28
 800fe00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fe02:	2300      	movs	r3, #0
 800fe04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fe06:	f000 fb15 	bl	8010434 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fe0a:	4b1d      	ldr	r3, [pc, #116]	; (800fe80 <xTimerCreateTimerTask+0x84>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d021      	beq.n	800fe56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fe16:	2300      	movs	r3, #0
 800fe18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fe1a:	1d3a      	adds	r2, r7, #4
 800fe1c:	f107 0108 	add.w	r1, r7, #8
 800fe20:	f107 030c 	add.w	r3, r7, #12
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fe fac7 	bl	800e3b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fe2a:	6879      	ldr	r1, [r7, #4]
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	9202      	str	r2, [sp, #8]
 800fe32:	9301      	str	r3, [sp, #4]
 800fe34:	2302      	movs	r3, #2
 800fe36:	9300      	str	r3, [sp, #0]
 800fe38:	2300      	movs	r3, #0
 800fe3a:	460a      	mov	r2, r1
 800fe3c:	4911      	ldr	r1, [pc, #68]	; (800fe84 <xTimerCreateTimerTask+0x88>)
 800fe3e:	4812      	ldr	r0, [pc, #72]	; (800fe88 <xTimerCreateTimerTask+0x8c>)
 800fe40:	f7ff f892 	bl	800ef68 <xTaskCreateStatic>
 800fe44:	4603      	mov	r3, r0
 800fe46:	4a11      	ldr	r2, [pc, #68]	; (800fe8c <xTimerCreateTimerTask+0x90>)
 800fe48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe4a:	4b10      	ldr	r3, [pc, #64]	; (800fe8c <xTimerCreateTimerTask+0x90>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe52:	2301      	movs	r3, #1
 800fe54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10c      	bne.n	800fe76 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800fe5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe60:	b672      	cpsid	i
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	b662      	cpsie	i
 800fe70:	613b      	str	r3, [r7, #16]
}
 800fe72:	bf00      	nop
 800fe74:	e7fe      	b.n	800fe74 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fe76:	697b      	ldr	r3, [r7, #20]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3718      	adds	r7, #24
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	2000cb54 	.word	0x2000cb54
 800fe84:	0802481c 	.word	0x0802481c
 800fe88:	0800ffcd 	.word	0x0800ffcd
 800fe8c:	2000cb58 	.word	0x2000cb58

0800fe90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b08a      	sub	sp, #40	; 0x28
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
 800fe9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10c      	bne.n	800fec2 <xTimerGenericCommand+0x32>
	__asm volatile
 800fea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feac:	b672      	cpsid	i
 800feae:	f383 8811 	msr	BASEPRI, r3
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	f3bf 8f4f 	dsb	sy
 800feba:	b662      	cpsie	i
 800febc:	623b      	str	r3, [r7, #32]
}
 800febe:	bf00      	nop
 800fec0:	e7fe      	b.n	800fec0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fec2:	4b1a      	ldr	r3, [pc, #104]	; (800ff2c <xTimerGenericCommand+0x9c>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d02a      	beq.n	800ff20 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	2b05      	cmp	r3, #5
 800feda:	dc18      	bgt.n	800ff0e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fedc:	f7ff feaa 	bl	800fc34 <xTaskGetSchedulerState>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d109      	bne.n	800fefa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fee6:	4b11      	ldr	r3, [pc, #68]	; (800ff2c <xTimerGenericCommand+0x9c>)
 800fee8:	6818      	ldr	r0, [r3, #0]
 800feea:	f107 0110 	add.w	r1, r7, #16
 800feee:	2300      	movs	r3, #0
 800fef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fef2:	f7fe fc3f 	bl	800e774 <xQueueGenericSend>
 800fef6:	6278      	str	r0, [r7, #36]	; 0x24
 800fef8:	e012      	b.n	800ff20 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fefa:	4b0c      	ldr	r3, [pc, #48]	; (800ff2c <xTimerGenericCommand+0x9c>)
 800fefc:	6818      	ldr	r0, [r3, #0]
 800fefe:	f107 0110 	add.w	r1, r7, #16
 800ff02:	2300      	movs	r3, #0
 800ff04:	2200      	movs	r2, #0
 800ff06:	f7fe fc35 	bl	800e774 <xQueueGenericSend>
 800ff0a:	6278      	str	r0, [r7, #36]	; 0x24
 800ff0c:	e008      	b.n	800ff20 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ff0e:	4b07      	ldr	r3, [pc, #28]	; (800ff2c <xTimerGenericCommand+0x9c>)
 800ff10:	6818      	ldr	r0, [r3, #0]
 800ff12:	f107 0110 	add.w	r1, r7, #16
 800ff16:	2300      	movs	r3, #0
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	f7fe fd31 	bl	800e980 <xQueueGenericSendFromISR>
 800ff1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3728      	adds	r7, #40	; 0x28
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	2000cb54 	.word	0x2000cb54

0800ff30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b088      	sub	sp, #32
 800ff34:	af02      	add	r7, sp, #8
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff3a:	4b23      	ldr	r3, [pc, #140]	; (800ffc8 <prvProcessExpiredTimer+0x98>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	3304      	adds	r3, #4
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe fad9 	bl	800e500 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff54:	f003 0304 	and.w	r3, r3, #4
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d024      	beq.n	800ffa6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	699a      	ldr	r2, [r3, #24]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	18d1      	adds	r1, r2, r3
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	683a      	ldr	r2, [r7, #0]
 800ff68:	6978      	ldr	r0, [r7, #20]
 800ff6a:	f000 f8d3 	bl	8010114 <prvInsertTimerInActiveList>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d021      	beq.n	800ffb8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff74:	2300      	movs	r3, #0
 800ff76:	9300      	str	r3, [sp, #0]
 800ff78:	2300      	movs	r3, #0
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	6978      	ldr	r0, [r7, #20]
 800ff80:	f7ff ff86 	bl	800fe90 <xTimerGenericCommand>
 800ff84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d115      	bne.n	800ffb8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ff8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff90:	b672      	cpsid	i
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	b662      	cpsie	i
 800ffa0:	60fb      	str	r3, [r7, #12]
}
 800ffa2:	bf00      	nop
 800ffa4:	e7fe      	b.n	800ffa4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffac:	f023 0301 	bic.w	r3, r3, #1
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	6a1b      	ldr	r3, [r3, #32]
 800ffbc:	6978      	ldr	r0, [r7, #20]
 800ffbe:	4798      	blx	r3
}
 800ffc0:	bf00      	nop
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	2000cb4c 	.word	0x2000cb4c

0800ffcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffd4:	f107 0308 	add.w	r3, r7, #8
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f000 f857 	bl	801008c <prvGetNextExpireTime>
 800ffde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	f000 f803 	bl	800fff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ffea:	f000 f8d5 	bl	8010198 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffee:	e7f1      	b.n	800ffd4 <prvTimerTask+0x8>

0800fff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fffa:	f7ff f9ff 	bl	800f3fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fffe:	f107 0308 	add.w	r3, r7, #8
 8010002:	4618      	mov	r0, r3
 8010004:	f000 f866 	bl	80100d4 <prvSampleTimeNow>
 8010008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d130      	bne.n	8010072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d10a      	bne.n	801002c <prvProcessTimerOrBlockTask+0x3c>
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	429a      	cmp	r2, r3
 801001c:	d806      	bhi.n	801002c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801001e:	f7ff f9fb 	bl	800f418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010022:	68f9      	ldr	r1, [r7, #12]
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff ff83 	bl	800ff30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801002a:	e024      	b.n	8010076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d008      	beq.n	8010044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010032:	4b13      	ldr	r3, [pc, #76]	; (8010080 <prvProcessTimerOrBlockTask+0x90>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d101      	bne.n	8010040 <prvProcessTimerOrBlockTask+0x50>
 801003c:	2301      	movs	r3, #1
 801003e:	e000      	b.n	8010042 <prvProcessTimerOrBlockTask+0x52>
 8010040:	2300      	movs	r3, #0
 8010042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010044:	4b0f      	ldr	r3, [pc, #60]	; (8010084 <prvProcessTimerOrBlockTask+0x94>)
 8010046:	6818      	ldr	r0, [r3, #0]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	683a      	ldr	r2, [r7, #0]
 8010050:	4619      	mov	r1, r3
 8010052:	f7fe ff55 	bl	800ef00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010056:	f7ff f9df 	bl	800f418 <xTaskResumeAll>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10a      	bne.n	8010076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010060:	4b09      	ldr	r3, [pc, #36]	; (8010088 <prvProcessTimerOrBlockTask+0x98>)
 8010062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010066:	601a      	str	r2, [r3, #0]
 8010068:	f3bf 8f4f 	dsb	sy
 801006c:	f3bf 8f6f 	isb	sy
}
 8010070:	e001      	b.n	8010076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010072:	f7ff f9d1 	bl	800f418 <xTaskResumeAll>
}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	2000cb50 	.word	0x2000cb50
 8010084:	2000cb54 	.word	0x2000cb54
 8010088:	e000ed04 	.word	0xe000ed04

0801008c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801008c:	b480      	push	{r7}
 801008e:	b085      	sub	sp, #20
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010094:	4b0e      	ldr	r3, [pc, #56]	; (80100d0 <prvGetNextExpireTime+0x44>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d101      	bne.n	80100a2 <prvGetNextExpireTime+0x16>
 801009e:	2201      	movs	r2, #1
 80100a0:	e000      	b.n	80100a4 <prvGetNextExpireTime+0x18>
 80100a2:	2200      	movs	r2, #0
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d105      	bne.n	80100bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80100b0:	4b07      	ldr	r3, [pc, #28]	; (80100d0 <prvGetNextExpireTime+0x44>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	60fb      	str	r3, [r7, #12]
 80100ba:	e001      	b.n	80100c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80100bc:	2300      	movs	r3, #0
 80100be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80100c0:	68fb      	ldr	r3, [r7, #12]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3714      	adds	r7, #20
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	2000cb4c 	.word	0x2000cb4c

080100d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80100dc:	f7ff fa3c 	bl	800f558 <xTaskGetTickCount>
 80100e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80100e2:	4b0b      	ldr	r3, [pc, #44]	; (8010110 <prvSampleTimeNow+0x3c>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d205      	bcs.n	80100f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80100ec:	f000 f93c 	bl	8010368 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	e002      	b.n	80100fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80100fe:	4a04      	ldr	r2, [pc, #16]	; (8010110 <prvSampleTimeNow+0x3c>)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010104:	68fb      	ldr	r3, [r7, #12]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	2000cb5c 	.word	0x2000cb5c

08010114 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b086      	sub	sp, #24
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
 8010120:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010122:	2300      	movs	r3, #0
 8010124:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	68ba      	ldr	r2, [r7, #8]
 801012a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	68fa      	ldr	r2, [r7, #12]
 8010130:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	429a      	cmp	r2, r3
 8010138:	d812      	bhi.n	8010160 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	1ad2      	subs	r2, r2, r3
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	699b      	ldr	r3, [r3, #24]
 8010144:	429a      	cmp	r2, r3
 8010146:	d302      	bcc.n	801014e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010148:	2301      	movs	r3, #1
 801014a:	617b      	str	r3, [r7, #20]
 801014c:	e01b      	b.n	8010186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801014e:	4b10      	ldr	r3, [pc, #64]	; (8010190 <prvInsertTimerInActiveList+0x7c>)
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	3304      	adds	r3, #4
 8010156:	4619      	mov	r1, r3
 8010158:	4610      	mov	r0, r2
 801015a:	f7fe f998 	bl	800e48e <vListInsert>
 801015e:	e012      	b.n	8010186 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	429a      	cmp	r2, r3
 8010166:	d206      	bcs.n	8010176 <prvInsertTimerInActiveList+0x62>
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	429a      	cmp	r2, r3
 801016e:	d302      	bcc.n	8010176 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010170:	2301      	movs	r3, #1
 8010172:	617b      	str	r3, [r7, #20]
 8010174:	e007      	b.n	8010186 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010176:	4b07      	ldr	r3, [pc, #28]	; (8010194 <prvInsertTimerInActiveList+0x80>)
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	3304      	adds	r3, #4
 801017e:	4619      	mov	r1, r3
 8010180:	4610      	mov	r0, r2
 8010182:	f7fe f984 	bl	800e48e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010186:	697b      	ldr	r3, [r7, #20]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3718      	adds	r7, #24
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	2000cb50 	.word	0x2000cb50
 8010194:	2000cb4c 	.word	0x2000cb4c

08010198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b08e      	sub	sp, #56	; 0x38
 801019c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801019e:	e0d0      	b.n	8010342 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	da1a      	bge.n	80101dc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80101a6:	1d3b      	adds	r3, r7, #4
 80101a8:	3304      	adds	r3, #4
 80101aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80101ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10c      	bne.n	80101cc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b6:	b672      	cpsid	i
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	b662      	cpsie	i
 80101c6:	61fb      	str	r3, [r7, #28]
}
 80101c8:	bf00      	nop
 80101ca:	e7fe      	b.n	80101ca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101d2:	6850      	ldr	r0, [r2, #4]
 80101d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101d6:	6892      	ldr	r2, [r2, #8]
 80101d8:	4611      	mov	r1, r2
 80101da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f2c0 80af 	blt.w	8010342 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80101e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ea:	695b      	ldr	r3, [r3, #20]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d004      	beq.n	80101fa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f2:	3304      	adds	r3, #4
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe f983 	bl	800e500 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80101fa:	463b      	mov	r3, r7
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7ff ff69 	bl	80100d4 <prvSampleTimeNow>
 8010202:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2b09      	cmp	r3, #9
 8010208:	f200 809a 	bhi.w	8010340 <prvProcessReceivedCommands+0x1a8>
 801020c:	a201      	add	r2, pc, #4	; (adr r2, 8010214 <prvProcessReceivedCommands+0x7c>)
 801020e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010212:	bf00      	nop
 8010214:	0801023d 	.word	0x0801023d
 8010218:	0801023d 	.word	0x0801023d
 801021c:	0801023d 	.word	0x0801023d
 8010220:	080102b5 	.word	0x080102b5
 8010224:	080102c9 	.word	0x080102c9
 8010228:	08010317 	.word	0x08010317
 801022c:	0801023d 	.word	0x0801023d
 8010230:	0801023d 	.word	0x0801023d
 8010234:	080102b5 	.word	0x080102b5
 8010238:	080102c9 	.word	0x080102c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801023c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010242:	f043 0301 	orr.w	r3, r3, #1
 8010246:	b2da      	uxtb	r2, r3
 8010248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	18d1      	adds	r1, r2, r3
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801025a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801025c:	f7ff ff5a 	bl	8010114 <prvInsertTimerInActiveList>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d06d      	beq.n	8010342 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010268:	6a1b      	ldr	r3, [r3, #32]
 801026a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801026c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801026e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010274:	f003 0304 	and.w	r3, r3, #4
 8010278:	2b00      	cmp	r3, #0
 801027a:	d062      	beq.n	8010342 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010280:	699b      	ldr	r3, [r3, #24]
 8010282:	441a      	add	r2, r3
 8010284:	2300      	movs	r3, #0
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	2300      	movs	r3, #0
 801028a:	2100      	movs	r1, #0
 801028c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801028e:	f7ff fdff 	bl	800fe90 <xTimerGenericCommand>
 8010292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d153      	bne.n	8010342 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 801029a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029e:	b672      	cpsid	i
 80102a0:	f383 8811 	msr	BASEPRI, r3
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	b662      	cpsie	i
 80102ae:	61bb      	str	r3, [r7, #24]
}
 80102b0:	bf00      	nop
 80102b2:	e7fe      	b.n	80102b2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102ba:	f023 0301 	bic.w	r3, r3, #1
 80102be:	b2da      	uxtb	r2, r3
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80102c6:	e03c      	b.n	8010342 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80102ce:	f043 0301 	orr.w	r3, r3, #1
 80102d2:	b2da      	uxtb	r2, r3
 80102d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80102da:	68ba      	ldr	r2, [r7, #8]
 80102dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80102e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e2:	699b      	ldr	r3, [r3, #24]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d10c      	bne.n	8010302 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80102e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ec:	b672      	cpsid	i
 80102ee:	f383 8811 	msr	BASEPRI, r3
 80102f2:	f3bf 8f6f 	isb	sy
 80102f6:	f3bf 8f4f 	dsb	sy
 80102fa:	b662      	cpsie	i
 80102fc:	617b      	str	r3, [r7, #20]
}
 80102fe:	bf00      	nop
 8010300:	e7fe      	b.n	8010300 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010304:	699a      	ldr	r2, [r3, #24]
 8010306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010308:	18d1      	adds	r1, r2, r3
 801030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801030e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010310:	f7ff ff00 	bl	8010114 <prvInsertTimerInActiveList>
					break;
 8010314:	e015      	b.n	8010342 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801031c:	f003 0302 	and.w	r3, r3, #2
 8010320:	2b00      	cmp	r3, #0
 8010322:	d103      	bne.n	801032c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010326:	f000 fbc7 	bl	8010ab8 <vPortFree>
 801032a:	e00a      	b.n	8010342 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010332:	f023 0301 	bic.w	r3, r3, #1
 8010336:	b2da      	uxtb	r2, r3
 8010338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801033e:	e000      	b.n	8010342 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8010340:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010342:	4b08      	ldr	r3, [pc, #32]	; (8010364 <prvProcessReceivedCommands+0x1cc>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	1d39      	adds	r1, r7, #4
 8010348:	2200      	movs	r2, #0
 801034a:	4618      	mov	r0, r3
 801034c:	f7fe fbb8 	bl	800eac0 <xQueueReceive>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	f47f af24 	bne.w	80101a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010358:	bf00      	nop
 801035a:	bf00      	nop
 801035c:	3730      	adds	r7, #48	; 0x30
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	2000cb54 	.word	0x2000cb54

08010368 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801036e:	e04a      	b.n	8010406 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010370:	4b2e      	ldr	r3, [pc, #184]	; (801042c <prvSwitchTimerLists+0xc4>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801037a:	4b2c      	ldr	r3, [pc, #176]	; (801042c <prvSwitchTimerLists+0xc4>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	3304      	adds	r3, #4
 8010388:	4618      	mov	r0, r3
 801038a:	f7fe f8b9 	bl	800e500 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6a1b      	ldr	r3, [r3, #32]
 8010392:	68f8      	ldr	r0, [r7, #12]
 8010394:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801039c:	f003 0304 	and.w	r3, r3, #4
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d030      	beq.n	8010406 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	693a      	ldr	r2, [r7, #16]
 80103aa:	4413      	add	r3, r2
 80103ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80103ae:	68ba      	ldr	r2, [r7, #8]
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d90e      	bls.n	80103d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	68ba      	ldr	r2, [r7, #8]
 80103ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	68fa      	ldr	r2, [r7, #12]
 80103c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103c2:	4b1a      	ldr	r3, [pc, #104]	; (801042c <prvSwitchTimerLists+0xc4>)
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3304      	adds	r3, #4
 80103ca:	4619      	mov	r1, r3
 80103cc:	4610      	mov	r0, r2
 80103ce:	f7fe f85e 	bl	800e48e <vListInsert>
 80103d2:	e018      	b.n	8010406 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103d4:	2300      	movs	r3, #0
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	2300      	movs	r3, #0
 80103da:	693a      	ldr	r2, [r7, #16]
 80103dc:	2100      	movs	r1, #0
 80103de:	68f8      	ldr	r0, [r7, #12]
 80103e0:	f7ff fd56 	bl	800fe90 <xTimerGenericCommand>
 80103e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d10c      	bne.n	8010406 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80103ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f0:	b672      	cpsid	i
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	b662      	cpsie	i
 8010400:	603b      	str	r3, [r7, #0]
}
 8010402:	bf00      	nop
 8010404:	e7fe      	b.n	8010404 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010406:	4b09      	ldr	r3, [pc, #36]	; (801042c <prvSwitchTimerLists+0xc4>)
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1af      	bne.n	8010370 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010410:	4b06      	ldr	r3, [pc, #24]	; (801042c <prvSwitchTimerLists+0xc4>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010416:	4b06      	ldr	r3, [pc, #24]	; (8010430 <prvSwitchTimerLists+0xc8>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4a04      	ldr	r2, [pc, #16]	; (801042c <prvSwitchTimerLists+0xc4>)
 801041c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801041e:	4a04      	ldr	r2, [pc, #16]	; (8010430 <prvSwitchTimerLists+0xc8>)
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	6013      	str	r3, [r2, #0]
}
 8010424:	bf00      	nop
 8010426:	3718      	adds	r7, #24
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	2000cb4c 	.word	0x2000cb4c
 8010430:	2000cb50 	.word	0x2000cb50

08010434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801043a:	f000 f947 	bl	80106cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801043e:	4b15      	ldr	r3, [pc, #84]	; (8010494 <prvCheckForValidListAndQueue+0x60>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d120      	bne.n	8010488 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010446:	4814      	ldr	r0, [pc, #80]	; (8010498 <prvCheckForValidListAndQueue+0x64>)
 8010448:	f7fd ffd0 	bl	800e3ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801044c:	4813      	ldr	r0, [pc, #76]	; (801049c <prvCheckForValidListAndQueue+0x68>)
 801044e:	f7fd ffcd 	bl	800e3ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010452:	4b13      	ldr	r3, [pc, #76]	; (80104a0 <prvCheckForValidListAndQueue+0x6c>)
 8010454:	4a10      	ldr	r2, [pc, #64]	; (8010498 <prvCheckForValidListAndQueue+0x64>)
 8010456:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010458:	4b12      	ldr	r3, [pc, #72]	; (80104a4 <prvCheckForValidListAndQueue+0x70>)
 801045a:	4a10      	ldr	r2, [pc, #64]	; (801049c <prvCheckForValidListAndQueue+0x68>)
 801045c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801045e:	2300      	movs	r3, #0
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	4b11      	ldr	r3, [pc, #68]	; (80104a8 <prvCheckForValidListAndQueue+0x74>)
 8010464:	4a11      	ldr	r2, [pc, #68]	; (80104ac <prvCheckForValidListAndQueue+0x78>)
 8010466:	2110      	movs	r1, #16
 8010468:	200a      	movs	r0, #10
 801046a:	f7fe f8dd 	bl	800e628 <xQueueGenericCreateStatic>
 801046e:	4603      	mov	r3, r0
 8010470:	4a08      	ldr	r2, [pc, #32]	; (8010494 <prvCheckForValidListAndQueue+0x60>)
 8010472:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010474:	4b07      	ldr	r3, [pc, #28]	; (8010494 <prvCheckForValidListAndQueue+0x60>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d005      	beq.n	8010488 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801047c:	4b05      	ldr	r3, [pc, #20]	; (8010494 <prvCheckForValidListAndQueue+0x60>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	490b      	ldr	r1, [pc, #44]	; (80104b0 <prvCheckForValidListAndQueue+0x7c>)
 8010482:	4618      	mov	r0, r3
 8010484:	f7fe fd12 	bl	800eeac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010488:	f000 f954 	bl	8010734 <vPortExitCritical>
}
 801048c:	bf00      	nop
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	2000cb54 	.word	0x2000cb54
 8010498:	2000cb24 	.word	0x2000cb24
 801049c:	2000cb38 	.word	0x2000cb38
 80104a0:	2000cb4c 	.word	0x2000cb4c
 80104a4:	2000cb50 	.word	0x2000cb50
 80104a8:	2000cc00 	.word	0x2000cc00
 80104ac:	2000cb60 	.word	0x2000cb60
 80104b0:	08024824 	.word	0x08024824

080104b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3b04      	subs	r3, #4
 80104c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80104cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3b04      	subs	r3, #4
 80104d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	f023 0201 	bic.w	r2, r3, #1
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	3b04      	subs	r3, #4
 80104e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80104e4:	4a0c      	ldr	r2, [pc, #48]	; (8010518 <pxPortInitialiseStack+0x64>)
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	3b14      	subs	r3, #20
 80104ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	3b04      	subs	r3, #4
 80104fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f06f 0202 	mvn.w	r2, #2
 8010502:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	3b20      	subs	r3, #32
 8010508:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801050a:	68fb      	ldr	r3, [r7, #12]
}
 801050c:	4618      	mov	r0, r3
 801050e:	3714      	adds	r7, #20
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr
 8010518:	0801051d 	.word	0x0801051d

0801051c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010522:	2300      	movs	r3, #0
 8010524:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010526:	4b14      	ldr	r3, [pc, #80]	; (8010578 <prvTaskExitError+0x5c>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801052e:	d00c      	beq.n	801054a <prvTaskExitError+0x2e>
	__asm volatile
 8010530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010534:	b672      	cpsid	i
 8010536:	f383 8811 	msr	BASEPRI, r3
 801053a:	f3bf 8f6f 	isb	sy
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	b662      	cpsie	i
 8010544:	60fb      	str	r3, [r7, #12]
}
 8010546:	bf00      	nop
 8010548:	e7fe      	b.n	8010548 <prvTaskExitError+0x2c>
	__asm volatile
 801054a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054e:	b672      	cpsid	i
 8010550:	f383 8811 	msr	BASEPRI, r3
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	b662      	cpsie	i
 801055e:	60bb      	str	r3, [r7, #8]
}
 8010560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010562:	bf00      	nop
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d0fc      	beq.n	8010564 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801056a:	bf00      	nop
 801056c:	bf00      	nop
 801056e:	3714      	adds	r7, #20
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr
 8010578:	2000009c 	.word	0x2000009c
 801057c:	00000000 	.word	0x00000000

08010580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010580:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <pxCurrentTCBConst2>)
 8010582:	6819      	ldr	r1, [r3, #0]
 8010584:	6808      	ldr	r0, [r1, #0]
 8010586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058a:	f380 8809 	msr	PSP, r0
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f04f 0000 	mov.w	r0, #0
 8010596:	f380 8811 	msr	BASEPRI, r0
 801059a:	4770      	bx	lr
 801059c:	f3af 8000 	nop.w

080105a0 <pxCurrentTCBConst2>:
 80105a0:	2000c624 	.word	0x2000c624
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80105a4:	bf00      	nop
 80105a6:	bf00      	nop

080105a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80105a8:	4808      	ldr	r0, [pc, #32]	; (80105cc <prvPortStartFirstTask+0x24>)
 80105aa:	6800      	ldr	r0, [r0, #0]
 80105ac:	6800      	ldr	r0, [r0, #0]
 80105ae:	f380 8808 	msr	MSP, r0
 80105b2:	f04f 0000 	mov.w	r0, #0
 80105b6:	f380 8814 	msr	CONTROL, r0
 80105ba:	b662      	cpsie	i
 80105bc:	b661      	cpsie	f
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	f3bf 8f6f 	isb	sy
 80105c6:	df00      	svc	0
 80105c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80105ca:	bf00      	nop
 80105cc:	e000ed08 	.word	0xe000ed08

080105d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105d6:	4b37      	ldr	r3, [pc, #220]	; (80106b4 <xPortStartScheduler+0xe4>)
 80105d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	22ff      	movs	r2, #255	; 0xff
 80105e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80105f0:	78fb      	ldrb	r3, [r7, #3]
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b2f      	ldr	r3, [pc, #188]	; (80106b8 <xPortStartScheduler+0xe8>)
 80105fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80105fe:	4b2f      	ldr	r3, [pc, #188]	; (80106bc <xPortStartScheduler+0xec>)
 8010600:	2207      	movs	r2, #7
 8010602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010604:	e009      	b.n	801061a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010606:	4b2d      	ldr	r3, [pc, #180]	; (80106bc <xPortStartScheduler+0xec>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3b01      	subs	r3, #1
 801060c:	4a2b      	ldr	r2, [pc, #172]	; (80106bc <xPortStartScheduler+0xec>)
 801060e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010610:	78fb      	ldrb	r3, [r7, #3]
 8010612:	b2db      	uxtb	r3, r3
 8010614:	005b      	lsls	r3, r3, #1
 8010616:	b2db      	uxtb	r3, r3
 8010618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801061a:	78fb      	ldrb	r3, [r7, #3]
 801061c:	b2db      	uxtb	r3, r3
 801061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010622:	2b80      	cmp	r3, #128	; 0x80
 8010624:	d0ef      	beq.n	8010606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010626:	4b25      	ldr	r3, [pc, #148]	; (80106bc <xPortStartScheduler+0xec>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f1c3 0307 	rsb	r3, r3, #7
 801062e:	2b04      	cmp	r3, #4
 8010630:	d00c      	beq.n	801064c <xPortStartScheduler+0x7c>
	__asm volatile
 8010632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010636:	b672      	cpsid	i
 8010638:	f383 8811 	msr	BASEPRI, r3
 801063c:	f3bf 8f6f 	isb	sy
 8010640:	f3bf 8f4f 	dsb	sy
 8010644:	b662      	cpsie	i
 8010646:	60bb      	str	r3, [r7, #8]
}
 8010648:	bf00      	nop
 801064a:	e7fe      	b.n	801064a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801064c:	4b1b      	ldr	r3, [pc, #108]	; (80106bc <xPortStartScheduler+0xec>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	021b      	lsls	r3, r3, #8
 8010652:	4a1a      	ldr	r2, [pc, #104]	; (80106bc <xPortStartScheduler+0xec>)
 8010654:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010656:	4b19      	ldr	r3, [pc, #100]	; (80106bc <xPortStartScheduler+0xec>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801065e:	4a17      	ldr	r2, [pc, #92]	; (80106bc <xPortStartScheduler+0xec>)
 8010660:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	b2da      	uxtb	r2, r3
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801066a:	4b15      	ldr	r3, [pc, #84]	; (80106c0 <xPortStartScheduler+0xf0>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a14      	ldr	r2, [pc, #80]	; (80106c0 <xPortStartScheduler+0xf0>)
 8010670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010674:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010676:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <xPortStartScheduler+0xf0>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a11      	ldr	r2, [pc, #68]	; (80106c0 <xPortStartScheduler+0xf0>)
 801067c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010680:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010682:	f000 f8dd 	bl	8010840 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010686:	4b0f      	ldr	r3, [pc, #60]	; (80106c4 <xPortStartScheduler+0xf4>)
 8010688:	2200      	movs	r2, #0
 801068a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801068c:	f000 f8fc 	bl	8010888 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010690:	4b0d      	ldr	r3, [pc, #52]	; (80106c8 <xPortStartScheduler+0xf8>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a0c      	ldr	r2, [pc, #48]	; (80106c8 <xPortStartScheduler+0xf8>)
 8010696:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801069a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801069c:	f7ff ff84 	bl	80105a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80106a0:	f7ff f826 	bl	800f6f0 <vTaskSwitchContext>
	prvTaskExitError();
 80106a4:	f7ff ff3a 	bl	801051c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	e000e400 	.word	0xe000e400
 80106b8:	2000cc50 	.word	0x2000cc50
 80106bc:	2000cc54 	.word	0x2000cc54
 80106c0:	e000ed20 	.word	0xe000ed20
 80106c4:	2000009c 	.word	0x2000009c
 80106c8:	e000ef34 	.word	0xe000ef34

080106cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
	__asm volatile
 80106d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d6:	b672      	cpsid	i
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	b662      	cpsie	i
 80106e6:	607b      	str	r3, [r7, #4]
}
 80106e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106ea:	4b10      	ldr	r3, [pc, #64]	; (801072c <vPortEnterCritical+0x60>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	3301      	adds	r3, #1
 80106f0:	4a0e      	ldr	r2, [pc, #56]	; (801072c <vPortEnterCritical+0x60>)
 80106f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80106f4:	4b0d      	ldr	r3, [pc, #52]	; (801072c <vPortEnterCritical+0x60>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d111      	bne.n	8010720 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80106fc:	4b0c      	ldr	r3, [pc, #48]	; (8010730 <vPortEnterCritical+0x64>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	b2db      	uxtb	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00c      	beq.n	8010720 <vPortEnterCritical+0x54>
	__asm volatile
 8010706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070a:	b672      	cpsid	i
 801070c:	f383 8811 	msr	BASEPRI, r3
 8010710:	f3bf 8f6f 	isb	sy
 8010714:	f3bf 8f4f 	dsb	sy
 8010718:	b662      	cpsie	i
 801071a:	603b      	str	r3, [r7, #0]
}
 801071c:	bf00      	nop
 801071e:	e7fe      	b.n	801071e <vPortEnterCritical+0x52>
	}
}
 8010720:	bf00      	nop
 8010722:	370c      	adds	r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr
 801072c:	2000009c 	.word	0x2000009c
 8010730:	e000ed04 	.word	0xe000ed04

08010734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801073a:	4b13      	ldr	r3, [pc, #76]	; (8010788 <vPortExitCritical+0x54>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d10c      	bne.n	801075c <vPortExitCritical+0x28>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010746:	b672      	cpsid	i
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	b662      	cpsie	i
 8010756:	607b      	str	r3, [r7, #4]
}
 8010758:	bf00      	nop
 801075a:	e7fe      	b.n	801075a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801075c:	4b0a      	ldr	r3, [pc, #40]	; (8010788 <vPortExitCritical+0x54>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	3b01      	subs	r3, #1
 8010762:	4a09      	ldr	r2, [pc, #36]	; (8010788 <vPortExitCritical+0x54>)
 8010764:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010766:	4b08      	ldr	r3, [pc, #32]	; (8010788 <vPortExitCritical+0x54>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d105      	bne.n	801077a <vPortExitCritical+0x46>
 801076e:	2300      	movs	r3, #0
 8010770:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	f383 8811 	msr	BASEPRI, r3
}
 8010778:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801077a:	bf00      	nop
 801077c:	370c      	adds	r7, #12
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop
 8010788:	2000009c 	.word	0x2000009c
 801078c:	00000000 	.word	0x00000000

08010790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010790:	f3ef 8009 	mrs	r0, PSP
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	4b15      	ldr	r3, [pc, #84]	; (80107f0 <pxCurrentTCBConst>)
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	f01e 0f10 	tst.w	lr, #16
 80107a0:	bf08      	it	eq
 80107a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80107a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107aa:	6010      	str	r0, [r2, #0]
 80107ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80107b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80107b4:	b672      	cpsid	i
 80107b6:	f380 8811 	msr	BASEPRI, r0
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	b662      	cpsie	i
 80107c4:	f7fe ff94 	bl	800f6f0 <vTaskSwitchContext>
 80107c8:	f04f 0000 	mov.w	r0, #0
 80107cc:	f380 8811 	msr	BASEPRI, r0
 80107d0:	bc09      	pop	{r0, r3}
 80107d2:	6819      	ldr	r1, [r3, #0]
 80107d4:	6808      	ldr	r0, [r1, #0]
 80107d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107da:	f01e 0f10 	tst.w	lr, #16
 80107de:	bf08      	it	eq
 80107e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80107e4:	f380 8809 	msr	PSP, r0
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop

080107f0 <pxCurrentTCBConst>:
 80107f0:	2000c624 	.word	0x2000c624
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80107f4:	bf00      	nop
 80107f6:	bf00      	nop

080107f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
	__asm volatile
 80107fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010802:	b672      	cpsid	i
 8010804:	f383 8811 	msr	BASEPRI, r3
 8010808:	f3bf 8f6f 	isb	sy
 801080c:	f3bf 8f4f 	dsb	sy
 8010810:	b662      	cpsie	i
 8010812:	607b      	str	r3, [r7, #4]
}
 8010814:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010816:	f7fe feaf 	bl	800f578 <xTaskIncrementTick>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010820:	4b06      	ldr	r3, [pc, #24]	; (801083c <SysTick_Handler+0x44>)
 8010822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010826:	601a      	str	r2, [r3, #0]
 8010828:	2300      	movs	r3, #0
 801082a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	f383 8811 	msr	BASEPRI, r3
}
 8010832:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010834:	bf00      	nop
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	e000ed04 	.word	0xe000ed04

08010840 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010840:	b480      	push	{r7}
 8010842:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010844:	4b0b      	ldr	r3, [pc, #44]	; (8010874 <vPortSetupTimerInterrupt+0x34>)
 8010846:	2200      	movs	r2, #0
 8010848:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801084a:	4b0b      	ldr	r3, [pc, #44]	; (8010878 <vPortSetupTimerInterrupt+0x38>)
 801084c:	2200      	movs	r2, #0
 801084e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010850:	4b0a      	ldr	r3, [pc, #40]	; (801087c <vPortSetupTimerInterrupt+0x3c>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a0a      	ldr	r2, [pc, #40]	; (8010880 <vPortSetupTimerInterrupt+0x40>)
 8010856:	fba2 2303 	umull	r2, r3, r2, r3
 801085a:	099b      	lsrs	r3, r3, #6
 801085c:	4a09      	ldr	r2, [pc, #36]	; (8010884 <vPortSetupTimerInterrupt+0x44>)
 801085e:	3b01      	subs	r3, #1
 8010860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010862:	4b04      	ldr	r3, [pc, #16]	; (8010874 <vPortSetupTimerInterrupt+0x34>)
 8010864:	2207      	movs	r2, #7
 8010866:	601a      	str	r2, [r3, #0]
}
 8010868:	bf00      	nop
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	e000e010 	.word	0xe000e010
 8010878:	e000e018 	.word	0xe000e018
 801087c:	20000004 	.word	0x20000004
 8010880:	10624dd3 	.word	0x10624dd3
 8010884:	e000e014 	.word	0xe000e014

08010888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010888:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010898 <vPortEnableVFP+0x10>
 801088c:	6801      	ldr	r1, [r0, #0]
 801088e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010892:	6001      	str	r1, [r0, #0]
 8010894:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010896:	bf00      	nop
 8010898:	e000ed88 	.word	0xe000ed88

0801089c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80108a2:	f3ef 8305 	mrs	r3, IPSR
 80108a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2b0f      	cmp	r3, #15
 80108ac:	d916      	bls.n	80108dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80108ae:	4a19      	ldr	r2, [pc, #100]	; (8010914 <vPortValidateInterruptPriority+0x78>)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4413      	add	r3, r2
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80108b8:	4b17      	ldr	r3, [pc, #92]	; (8010918 <vPortValidateInterruptPriority+0x7c>)
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	7afa      	ldrb	r2, [r7, #11]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d20c      	bcs.n	80108dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	b672      	cpsid	i
 80108c8:	f383 8811 	msr	BASEPRI, r3
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	f3bf 8f4f 	dsb	sy
 80108d4:	b662      	cpsie	i
 80108d6:	607b      	str	r3, [r7, #4]
}
 80108d8:	bf00      	nop
 80108da:	e7fe      	b.n	80108da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80108dc:	4b0f      	ldr	r3, [pc, #60]	; (801091c <vPortValidateInterruptPriority+0x80>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80108e4:	4b0e      	ldr	r3, [pc, #56]	; (8010920 <vPortValidateInterruptPriority+0x84>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d90c      	bls.n	8010906 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80108ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f0:	b672      	cpsid	i
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	b662      	cpsie	i
 8010900:	603b      	str	r3, [r7, #0]
}
 8010902:	bf00      	nop
 8010904:	e7fe      	b.n	8010904 <vPortValidateInterruptPriority+0x68>
	}
 8010906:	bf00      	nop
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	e000e3f0 	.word	0xe000e3f0
 8010918:	2000cc50 	.word	0x2000cc50
 801091c:	e000ed0c 	.word	0xe000ed0c
 8010920:	2000cc54 	.word	0x2000cc54

08010924 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b08a      	sub	sp, #40	; 0x28
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801092c:	2300      	movs	r3, #0
 801092e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010930:	f7fe fd64 	bl	800f3fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010934:	4b5b      	ldr	r3, [pc, #364]	; (8010aa4 <pvPortMalloc+0x180>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d101      	bne.n	8010940 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801093c:	f000 f91a 	bl	8010b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010940:	4b59      	ldr	r3, [pc, #356]	; (8010aa8 <pvPortMalloc+0x184>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4013      	ands	r3, r2
 8010948:	2b00      	cmp	r3, #0
 801094a:	f040 8092 	bne.w	8010a72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d01f      	beq.n	8010994 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010954:	2208      	movs	r2, #8
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	4413      	add	r3, r2
 801095a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f003 0307 	and.w	r3, r3, #7
 8010962:	2b00      	cmp	r3, #0
 8010964:	d016      	beq.n	8010994 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f023 0307 	bic.w	r3, r3, #7
 801096c:	3308      	adds	r3, #8
 801096e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f003 0307 	and.w	r3, r3, #7
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00c      	beq.n	8010994 <pvPortMalloc+0x70>
	__asm volatile
 801097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097e:	b672      	cpsid	i
 8010980:	f383 8811 	msr	BASEPRI, r3
 8010984:	f3bf 8f6f 	isb	sy
 8010988:	f3bf 8f4f 	dsb	sy
 801098c:	b662      	cpsie	i
 801098e:	617b      	str	r3, [r7, #20]
}
 8010990:	bf00      	nop
 8010992:	e7fe      	b.n	8010992 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d06b      	beq.n	8010a72 <pvPortMalloc+0x14e>
 801099a:	4b44      	ldr	r3, [pc, #272]	; (8010aac <pvPortMalloc+0x188>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d866      	bhi.n	8010a72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80109a4:	4b42      	ldr	r3, [pc, #264]	; (8010ab0 <pvPortMalloc+0x18c>)
 80109a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80109a8:	4b41      	ldr	r3, [pc, #260]	; (8010ab0 <pvPortMalloc+0x18c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109ae:	e004      	b.n	80109ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80109b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d903      	bls.n	80109cc <pvPortMalloc+0xa8>
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1f1      	bne.n	80109b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80109cc:	4b35      	ldr	r3, [pc, #212]	; (8010aa4 <pvPortMalloc+0x180>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d04d      	beq.n	8010a72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80109d6:	6a3b      	ldr	r3, [r7, #32]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2208      	movs	r2, #8
 80109dc:	4413      	add	r3, r2
 80109de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	681a      	ldr	r2, [r3, #0]
 80109e4:	6a3b      	ldr	r3, [r7, #32]
 80109e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	685a      	ldr	r2, [r3, #4]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	1ad2      	subs	r2, r2, r3
 80109f0:	2308      	movs	r3, #8
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d921      	bls.n	8010a3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80109f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4413      	add	r3, r2
 80109fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a00:	69bb      	ldr	r3, [r7, #24]
 8010a02:	f003 0307 	and.w	r3, r3, #7
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00c      	beq.n	8010a24 <pvPortMalloc+0x100>
	__asm volatile
 8010a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a0e:	b672      	cpsid	i
 8010a10:	f383 8811 	msr	BASEPRI, r3
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	b662      	cpsie	i
 8010a1e:	613b      	str	r3, [r7, #16]
}
 8010a20:	bf00      	nop
 8010a22:	e7fe      	b.n	8010a22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a26:	685a      	ldr	r2, [r3, #4]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	1ad2      	subs	r2, r2, r3
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	687a      	ldr	r2, [r7, #4]
 8010a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a36:	69b8      	ldr	r0, [r7, #24]
 8010a38:	f000 f8fe 	bl	8010c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a3c:	4b1b      	ldr	r3, [pc, #108]	; (8010aac <pvPortMalloc+0x188>)
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	4a19      	ldr	r2, [pc, #100]	; (8010aac <pvPortMalloc+0x188>)
 8010a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a4a:	4b18      	ldr	r3, [pc, #96]	; (8010aac <pvPortMalloc+0x188>)
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	4b19      	ldr	r3, [pc, #100]	; (8010ab4 <pvPortMalloc+0x190>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d203      	bcs.n	8010a5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a56:	4b15      	ldr	r3, [pc, #84]	; (8010aac <pvPortMalloc+0x188>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4a16      	ldr	r2, [pc, #88]	; (8010ab4 <pvPortMalloc+0x190>)
 8010a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	685a      	ldr	r2, [r3, #4]
 8010a62:	4b11      	ldr	r3, [pc, #68]	; (8010aa8 <pvPortMalloc+0x184>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	431a      	orrs	r2, r3
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6e:	2200      	movs	r2, #0
 8010a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a72:	f7fe fcd1 	bl	800f418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	f003 0307 	and.w	r3, r3, #7
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00c      	beq.n	8010a9a <pvPortMalloc+0x176>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a84:	b672      	cpsid	i
 8010a86:	f383 8811 	msr	BASEPRI, r3
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	b662      	cpsie	i
 8010a94:	60fb      	str	r3, [r7, #12]
}
 8010a96:	bf00      	nop
 8010a98:	e7fe      	b.n	8010a98 <pvPortMalloc+0x174>
	return pvReturn;
 8010a9a:	69fb      	ldr	r3, [r7, #28]
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3728      	adds	r7, #40	; 0x28
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	20010860 	.word	0x20010860
 8010aa8:	2001086c 	.word	0x2001086c
 8010aac:	20010864 	.word	0x20010864
 8010ab0:	20010858 	.word	0x20010858
 8010ab4:	20010868 	.word	0x20010868

08010ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d04c      	beq.n	8010b64 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010aca:	2308      	movs	r3, #8
 8010acc:	425b      	negs	r3, r3
 8010ace:	697a      	ldr	r2, [r7, #20]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	685a      	ldr	r2, [r3, #4]
 8010adc:	4b23      	ldr	r3, [pc, #140]	; (8010b6c <vPortFree+0xb4>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4013      	ands	r3, r2
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d10c      	bne.n	8010b00 <vPortFree+0x48>
	__asm volatile
 8010ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aea:	b672      	cpsid	i
 8010aec:	f383 8811 	msr	BASEPRI, r3
 8010af0:	f3bf 8f6f 	isb	sy
 8010af4:	f3bf 8f4f 	dsb	sy
 8010af8:	b662      	cpsie	i
 8010afa:	60fb      	str	r3, [r7, #12]
}
 8010afc:	bf00      	nop
 8010afe:	e7fe      	b.n	8010afe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00c      	beq.n	8010b22 <vPortFree+0x6a>
	__asm volatile
 8010b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0c:	b672      	cpsid	i
 8010b0e:	f383 8811 	msr	BASEPRI, r3
 8010b12:	f3bf 8f6f 	isb	sy
 8010b16:	f3bf 8f4f 	dsb	sy
 8010b1a:	b662      	cpsie	i
 8010b1c:	60bb      	str	r3, [r7, #8]
}
 8010b1e:	bf00      	nop
 8010b20:	e7fe      	b.n	8010b20 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	685a      	ldr	r2, [r3, #4]
 8010b26:	4b11      	ldr	r3, [pc, #68]	; (8010b6c <vPortFree+0xb4>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4013      	ands	r3, r2
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d019      	beq.n	8010b64 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d115      	bne.n	8010b64 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	685a      	ldr	r2, [r3, #4]
 8010b3c:	4b0b      	ldr	r3, [pc, #44]	; (8010b6c <vPortFree+0xb4>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	43db      	mvns	r3, r3
 8010b42:	401a      	ands	r2, r3
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b48:	f7fe fc58 	bl	800f3fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	685a      	ldr	r2, [r3, #4]
 8010b50:	4b07      	ldr	r3, [pc, #28]	; (8010b70 <vPortFree+0xb8>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4413      	add	r3, r2
 8010b56:	4a06      	ldr	r2, [pc, #24]	; (8010b70 <vPortFree+0xb8>)
 8010b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b5a:	6938      	ldr	r0, [r7, #16]
 8010b5c:	f000 f86c 	bl	8010c38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010b60:	f7fe fc5a 	bl	800f418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b64:	bf00      	nop
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	2001086c 	.word	0x2001086c
 8010b70:	20010864 	.word	0x20010864

08010b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b74:	b480      	push	{r7}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b80:	4b27      	ldr	r3, [pc, #156]	; (8010c20 <prvHeapInit+0xac>)
 8010b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f003 0307 	and.w	r3, r3, #7
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00c      	beq.n	8010ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	3307      	adds	r3, #7
 8010b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f023 0307 	bic.w	r3, r3, #7
 8010b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	4a1f      	ldr	r2, [pc, #124]	; (8010c20 <prvHeapInit+0xac>)
 8010ba4:	4413      	add	r3, r2
 8010ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010bac:	4a1d      	ldr	r2, [pc, #116]	; (8010c24 <prvHeapInit+0xb0>)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010bb2:	4b1c      	ldr	r3, [pc, #112]	; (8010c24 <prvHeapInit+0xb0>)
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	68ba      	ldr	r2, [r7, #8]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010bc0:	2208      	movs	r2, #8
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f023 0307 	bic.w	r3, r3, #7
 8010bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	4a15      	ldr	r2, [pc, #84]	; (8010c28 <prvHeapInit+0xb4>)
 8010bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010bd6:	4b14      	ldr	r3, [pc, #80]	; (8010c28 <prvHeapInit+0xb4>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010bde:	4b12      	ldr	r3, [pc, #72]	; (8010c28 <prvHeapInit+0xb4>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2200      	movs	r2, #0
 8010be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	1ad2      	subs	r2, r2, r3
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010bf4:	4b0c      	ldr	r3, [pc, #48]	; (8010c28 <prvHeapInit+0xb4>)
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	4a0a      	ldr	r2, [pc, #40]	; (8010c2c <prvHeapInit+0xb8>)
 8010c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	4a09      	ldr	r2, [pc, #36]	; (8010c30 <prvHeapInit+0xbc>)
 8010c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c0c:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <prvHeapInit+0xc0>)
 8010c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010c12:	601a      	str	r2, [r3, #0]
}
 8010c14:	bf00      	nop
 8010c16:	3714      	adds	r7, #20
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr
 8010c20:	2000cc58 	.word	0x2000cc58
 8010c24:	20010858 	.word	0x20010858
 8010c28:	20010860 	.word	0x20010860
 8010c2c:	20010868 	.word	0x20010868
 8010c30:	20010864 	.word	0x20010864
 8010c34:	2001086c 	.word	0x2001086c

08010c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c40:	4b28      	ldr	r3, [pc, #160]	; (8010ce4 <prvInsertBlockIntoFreeList+0xac>)
 8010c42:	60fb      	str	r3, [r7, #12]
 8010c44:	e002      	b.n	8010c4c <prvInsertBlockIntoFreeList+0x14>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	60fb      	str	r3, [r7, #12]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d8f7      	bhi.n	8010c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	68ba      	ldr	r2, [r7, #8]
 8010c60:	4413      	add	r3, r2
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d108      	bne.n	8010c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	685a      	ldr	r2, [r3, #4]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	441a      	add	r2, r3
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	441a      	add	r2, r3
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d118      	bne.n	8010cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	4b15      	ldr	r3, [pc, #84]	; (8010ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d00d      	beq.n	8010cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	441a      	add	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	601a      	str	r2, [r3, #0]
 8010cb4:	e008      	b.n	8010cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010cb6:	4b0c      	ldr	r3, [pc, #48]	; (8010ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	e003      	b.n	8010cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d002      	beq.n	8010cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cd6:	bf00      	nop
 8010cd8:	3714      	adds	r7, #20
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop
 8010ce4:	20010858 	.word	0x20010858
 8010ce8:	20010860 	.word	0x20010860

08010cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	4912      	ldr	r1, [pc, #72]	; (8010d3c <MX_USB_DEVICE_Init+0x50>)
 8010cf4:	4812      	ldr	r0, [pc, #72]	; (8010d40 <MX_USB_DEVICE_Init+0x54>)
 8010cf6:	f7fb fee3 	bl	800cac0 <USBD_Init>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d001      	beq.n	8010d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010d00:	f7f2 fb07 	bl	8003312 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010d04:	490f      	ldr	r1, [pc, #60]	; (8010d44 <MX_USB_DEVICE_Init+0x58>)
 8010d06:	480e      	ldr	r0, [pc, #56]	; (8010d40 <MX_USB_DEVICE_Init+0x54>)
 8010d08:	f7fb ff0a 	bl	800cb20 <USBD_RegisterClass>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010d12:	f7f2 fafe 	bl	8003312 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010d16:	490c      	ldr	r1, [pc, #48]	; (8010d48 <MX_USB_DEVICE_Init+0x5c>)
 8010d18:	4809      	ldr	r0, [pc, #36]	; (8010d40 <MX_USB_DEVICE_Init+0x54>)
 8010d1a:	f7fb fe41 	bl	800c9a0 <USBD_CDC_RegisterInterface>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d001      	beq.n	8010d28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010d24:	f7f2 faf5 	bl	8003312 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010d28:	4805      	ldr	r0, [pc, #20]	; (8010d40 <MX_USB_DEVICE_Init+0x54>)
 8010d2a:	f7fb ff2f 	bl	800cb8c <USBD_Start>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d001      	beq.n	8010d38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010d34:	f7f2 faed 	bl	8003312 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010d38:	bf00      	nop
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	200000b4 	.word	0x200000b4
 8010d40:	20010870 	.word	0x20010870
 8010d44:	2000001c 	.word	0x2000001c
 8010d48:	200000a0 	.word	0x200000a0

08010d4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010d50:	2200      	movs	r2, #0
 8010d52:	4905      	ldr	r1, [pc, #20]	; (8010d68 <CDC_Init_FS+0x1c>)
 8010d54:	4805      	ldr	r0, [pc, #20]	; (8010d6c <CDC_Init_FS+0x20>)
 8010d56:	f7fb fe3d 	bl	800c9d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010d5a:	4905      	ldr	r1, [pc, #20]	; (8010d70 <CDC_Init_FS+0x24>)
 8010d5c:	4803      	ldr	r0, [pc, #12]	; (8010d6c <CDC_Init_FS+0x20>)
 8010d5e:	f7fb fe5b 	bl	800ca18 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010d62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	2001134c 	.word	0x2001134c
 8010d6c:	20010870 	.word	0x20010870
 8010d70:	20010b4c 	.word	0x20010b4c

08010d74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010d74:	b480      	push	{r7}
 8010d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010d78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b083      	sub	sp, #12
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	6039      	str	r1, [r7, #0]
 8010d8e:	71fb      	strb	r3, [r7, #7]
 8010d90:	4613      	mov	r3, r2
 8010d92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010d94:	79fb      	ldrb	r3, [r7, #7]
 8010d96:	2b23      	cmp	r3, #35	; 0x23
 8010d98:	d84a      	bhi.n	8010e30 <CDC_Control_FS+0xac>
 8010d9a:	a201      	add	r2, pc, #4	; (adr r2, 8010da0 <CDC_Control_FS+0x1c>)
 8010d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da0:	08010e31 	.word	0x08010e31
 8010da4:	08010e31 	.word	0x08010e31
 8010da8:	08010e31 	.word	0x08010e31
 8010dac:	08010e31 	.word	0x08010e31
 8010db0:	08010e31 	.word	0x08010e31
 8010db4:	08010e31 	.word	0x08010e31
 8010db8:	08010e31 	.word	0x08010e31
 8010dbc:	08010e31 	.word	0x08010e31
 8010dc0:	08010e31 	.word	0x08010e31
 8010dc4:	08010e31 	.word	0x08010e31
 8010dc8:	08010e31 	.word	0x08010e31
 8010dcc:	08010e31 	.word	0x08010e31
 8010dd0:	08010e31 	.word	0x08010e31
 8010dd4:	08010e31 	.word	0x08010e31
 8010dd8:	08010e31 	.word	0x08010e31
 8010ddc:	08010e31 	.word	0x08010e31
 8010de0:	08010e31 	.word	0x08010e31
 8010de4:	08010e31 	.word	0x08010e31
 8010de8:	08010e31 	.word	0x08010e31
 8010dec:	08010e31 	.word	0x08010e31
 8010df0:	08010e31 	.word	0x08010e31
 8010df4:	08010e31 	.word	0x08010e31
 8010df8:	08010e31 	.word	0x08010e31
 8010dfc:	08010e31 	.word	0x08010e31
 8010e00:	08010e31 	.word	0x08010e31
 8010e04:	08010e31 	.word	0x08010e31
 8010e08:	08010e31 	.word	0x08010e31
 8010e0c:	08010e31 	.word	0x08010e31
 8010e10:	08010e31 	.word	0x08010e31
 8010e14:	08010e31 	.word	0x08010e31
 8010e18:	08010e31 	.word	0x08010e31
 8010e1c:	08010e31 	.word	0x08010e31
 8010e20:	08010e31 	.word	0x08010e31
 8010e24:	08010e31 	.word	0x08010e31
 8010e28:	08010e31 	.word	0x08010e31
 8010e2c:	08010e31 	.word	0x08010e31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010e30:	bf00      	nop
  }

  return (USBD_OK);
 8010e32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	370c      	adds	r7, #12
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr

08010e40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010e4a:	6879      	ldr	r1, [r7, #4]
 8010e4c:	4805      	ldr	r0, [pc, #20]	; (8010e64 <CDC_Receive_FS+0x24>)
 8010e4e:	f7fb fde3 	bl	800ca18 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010e52:	4804      	ldr	r0, [pc, #16]	; (8010e64 <CDC_Receive_FS+0x24>)
 8010e54:	f7fb fdfe 	bl	800ca54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010e58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3708      	adds	r7, #8
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	20010870 	.word	0x20010870

08010e68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b087      	sub	sp, #28
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	4613      	mov	r3, r2
 8010e74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010e76:	2300      	movs	r3, #0
 8010e78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	371c      	adds	r7, #28
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr
	...

08010e8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	4603      	mov	r3, r0
 8010e94:	6039      	str	r1, [r7, #0]
 8010e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	2212      	movs	r2, #18
 8010e9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010e9e:	4b03      	ldr	r3, [pc, #12]	; (8010eac <USBD_FS_DeviceDescriptor+0x20>)
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	200000d4 	.word	0x200000d4

08010eb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	6039      	str	r1, [r7, #0]
 8010eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	2204      	movs	r2, #4
 8010ec0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010ec2:	4b03      	ldr	r3, [pc, #12]	; (8010ed0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr
 8010ed0:	200000f4 	.word	0x200000f4

08010ed4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	4603      	mov	r3, r0
 8010edc:	6039      	str	r1, [r7, #0]
 8010ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ee0:	79fb      	ldrb	r3, [r7, #7]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d105      	bne.n	8010ef2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	4907      	ldr	r1, [pc, #28]	; (8010f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8010eea:	4808      	ldr	r0, [pc, #32]	; (8010f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8010eec:	f7fd f824 	bl	800df38 <USBD_GetString>
 8010ef0:	e004      	b.n	8010efc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	4904      	ldr	r1, [pc, #16]	; (8010f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8010ef6:	4805      	ldr	r0, [pc, #20]	; (8010f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8010ef8:	f7fd f81e 	bl	800df38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010efc:	4b02      	ldr	r3, [pc, #8]	; (8010f08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
 8010f06:	bf00      	nop
 8010f08:	20011b4c 	.word	0x20011b4c
 8010f0c:	0802482c 	.word	0x0802482c

08010f10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	4603      	mov	r3, r0
 8010f18:	6039      	str	r1, [r7, #0]
 8010f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010f1c:	683a      	ldr	r2, [r7, #0]
 8010f1e:	4904      	ldr	r1, [pc, #16]	; (8010f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010f20:	4804      	ldr	r0, [pc, #16]	; (8010f34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010f22:	f7fd f809 	bl	800df38 <USBD_GetString>
  return USBD_StrDesc;
 8010f26:	4b02      	ldr	r3, [pc, #8]	; (8010f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	20011b4c 	.word	0x20011b4c
 8010f34:	08024844 	.word	0x08024844

08010f38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	4603      	mov	r3, r0
 8010f40:	6039      	str	r1, [r7, #0]
 8010f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	221a      	movs	r2, #26
 8010f48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010f4a:	f000 f855 	bl	8010ff8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010f4e:	4b02      	ldr	r3, [pc, #8]	; (8010f58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	200000f8 	.word	0x200000f8

08010f5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	4603      	mov	r3, r0
 8010f64:	6039      	str	r1, [r7, #0]
 8010f66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010f68:	79fb      	ldrb	r3, [r7, #7]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d105      	bne.n	8010f7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010f6e:	683a      	ldr	r2, [r7, #0]
 8010f70:	4907      	ldr	r1, [pc, #28]	; (8010f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010f72:	4808      	ldr	r0, [pc, #32]	; (8010f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010f74:	f7fc ffe0 	bl	800df38 <USBD_GetString>
 8010f78:	e004      	b.n	8010f84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010f7a:	683a      	ldr	r2, [r7, #0]
 8010f7c:	4904      	ldr	r1, [pc, #16]	; (8010f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010f7e:	4805      	ldr	r0, [pc, #20]	; (8010f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010f80:	f7fc ffda 	bl	800df38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f84:	4b02      	ldr	r3, [pc, #8]	; (8010f90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3708      	adds	r7, #8
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	20011b4c 	.word	0x20011b4c
 8010f94:	08024858 	.word	0x08024858

08010f98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	6039      	str	r1, [r7, #0]
 8010fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d105      	bne.n	8010fb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010faa:	683a      	ldr	r2, [r7, #0]
 8010fac:	4907      	ldr	r1, [pc, #28]	; (8010fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010fae:	4808      	ldr	r0, [pc, #32]	; (8010fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010fb0:	f7fc ffc2 	bl	800df38 <USBD_GetString>
 8010fb4:	e004      	b.n	8010fc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010fb6:	683a      	ldr	r2, [r7, #0]
 8010fb8:	4904      	ldr	r1, [pc, #16]	; (8010fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010fba:	4805      	ldr	r0, [pc, #20]	; (8010fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010fbc:	f7fc ffbc 	bl	800df38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fc0:	4b02      	ldr	r3, [pc, #8]	; (8010fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3708      	adds	r7, #8
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	20011b4c 	.word	0x20011b4c
 8010fd0:	08024864 	.word	0x08024864

08010fd4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	4603      	mov	r3, r0
 8010fdc:	6039      	str	r1, [r7, #0]
 8010fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	220c      	movs	r2, #12
 8010fe4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010fe6:	4b03      	ldr	r3, [pc, #12]	; (8010ff4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	200000e8 	.word	0x200000e8

08010ff8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ffe:	4b0f      	ldr	r3, [pc, #60]	; (801103c <Get_SerialNum+0x44>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011004:	4b0e      	ldr	r3, [pc, #56]	; (8011040 <Get_SerialNum+0x48>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801100a:	4b0e      	ldr	r3, [pc, #56]	; (8011044 <Get_SerialNum+0x4c>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011010:	68fa      	ldr	r2, [r7, #12]
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4413      	add	r3, r2
 8011016:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d009      	beq.n	8011032 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801101e:	2208      	movs	r2, #8
 8011020:	4909      	ldr	r1, [pc, #36]	; (8011048 <Get_SerialNum+0x50>)
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	f000 f814 	bl	8011050 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011028:	2204      	movs	r2, #4
 801102a:	4908      	ldr	r1, [pc, #32]	; (801104c <Get_SerialNum+0x54>)
 801102c:	68b8      	ldr	r0, [r7, #8]
 801102e:	f000 f80f 	bl	8011050 <IntToUnicode>
  }
}
 8011032:	bf00      	nop
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	1ff0f420 	.word	0x1ff0f420
 8011040:	1ff0f424 	.word	0x1ff0f424
 8011044:	1ff0f428 	.word	0x1ff0f428
 8011048:	200000fa 	.word	0x200000fa
 801104c:	2000010a 	.word	0x2000010a

08011050 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011050:	b480      	push	{r7}
 8011052:	b087      	sub	sp, #28
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	60b9      	str	r1, [r7, #8]
 801105a:	4613      	mov	r3, r2
 801105c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011062:	2300      	movs	r3, #0
 8011064:	75fb      	strb	r3, [r7, #23]
 8011066:	e027      	b.n	80110b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	0f1b      	lsrs	r3, r3, #28
 801106c:	2b09      	cmp	r3, #9
 801106e:	d80b      	bhi.n	8011088 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	0f1b      	lsrs	r3, r3, #28
 8011074:	b2da      	uxtb	r2, r3
 8011076:	7dfb      	ldrb	r3, [r7, #23]
 8011078:	005b      	lsls	r3, r3, #1
 801107a:	4619      	mov	r1, r3
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	440b      	add	r3, r1
 8011080:	3230      	adds	r2, #48	; 0x30
 8011082:	b2d2      	uxtb	r2, r2
 8011084:	701a      	strb	r2, [r3, #0]
 8011086:	e00a      	b.n	801109e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	0f1b      	lsrs	r3, r3, #28
 801108c:	b2da      	uxtb	r2, r3
 801108e:	7dfb      	ldrb	r3, [r7, #23]
 8011090:	005b      	lsls	r3, r3, #1
 8011092:	4619      	mov	r1, r3
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	440b      	add	r3, r1
 8011098:	3237      	adds	r2, #55	; 0x37
 801109a:	b2d2      	uxtb	r2, r2
 801109c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	011b      	lsls	r3, r3, #4
 80110a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80110a4:	7dfb      	ldrb	r3, [r7, #23]
 80110a6:	005b      	lsls	r3, r3, #1
 80110a8:	3301      	adds	r3, #1
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	4413      	add	r3, r2
 80110ae:	2200      	movs	r2, #0
 80110b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80110b2:	7dfb      	ldrb	r3, [r7, #23]
 80110b4:	3301      	adds	r3, #1
 80110b6:	75fb      	strb	r3, [r7, #23]
 80110b8:	7dfa      	ldrb	r2, [r7, #23]
 80110ba:	79fb      	ldrb	r3, [r7, #7]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d3d3      	bcc.n	8011068 <IntToUnicode+0x18>
  }
}
 80110c0:	bf00      	nop
 80110c2:	bf00      	nop
 80110c4:	371c      	adds	r7, #28
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
	...

080110d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b0ae      	sub	sp, #184	; 0xb8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80110d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80110dc:	2200      	movs	r2, #0
 80110de:	601a      	str	r2, [r3, #0]
 80110e0:	605a      	str	r2, [r3, #4]
 80110e2:	609a      	str	r2, [r3, #8]
 80110e4:	60da      	str	r2, [r3, #12]
 80110e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80110e8:	f107 0314 	add.w	r3, r7, #20
 80110ec:	2290      	movs	r2, #144	; 0x90
 80110ee:	2100      	movs	r1, #0
 80110f0:	4618      	mov	r0, r3
 80110f2:	f010 f817 	bl	8021124 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80110fe:	d151      	bne.n	80111a4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011100:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011104:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8011106:	2300      	movs	r3, #0
 8011108:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801110c:	f107 0314 	add.w	r3, r7, #20
 8011110:	4618      	mov	r0, r3
 8011112:	f7f6 fbf9 	bl	8007908 <HAL_RCCEx_PeriphCLKConfig>
 8011116:	4603      	mov	r3, r0
 8011118:	2b00      	cmp	r3, #0
 801111a:	d001      	beq.n	8011120 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801111c:	f7f2 f8f9 	bl	8003312 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011120:	4b22      	ldr	r3, [pc, #136]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 8011122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011124:	4a21      	ldr	r2, [pc, #132]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 8011126:	f043 0301 	orr.w	r3, r3, #1
 801112a:	6313      	str	r3, [r2, #48]	; 0x30
 801112c:	4b1f      	ldr	r3, [pc, #124]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 801112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011130:	f003 0301 	and.w	r3, r3, #1
 8011134:	613b      	str	r3, [r7, #16]
 8011136:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011138:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801113c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011140:	2302      	movs	r3, #2
 8011142:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011146:	2300      	movs	r3, #0
 8011148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801114c:	2303      	movs	r3, #3
 801114e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011152:	230a      	movs	r3, #10
 8011154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011158:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801115c:	4619      	mov	r1, r3
 801115e:	4814      	ldr	r0, [pc, #80]	; (80111b0 <HAL_PCD_MspInit+0xe0>)
 8011160:	f7f4 f9e4 	bl	800552c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011164:	4b11      	ldr	r3, [pc, #68]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 8011166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011168:	4a10      	ldr	r2, [pc, #64]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 801116a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801116e:	6353      	str	r3, [r2, #52]	; 0x34
 8011170:	4b0e      	ldr	r3, [pc, #56]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 8011172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011178:	60fb      	str	r3, [r7, #12]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	4b0b      	ldr	r3, [pc, #44]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 801117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011180:	4a0a      	ldr	r2, [pc, #40]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 8011182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011186:	6453      	str	r3, [r2, #68]	; 0x44
 8011188:	4b08      	ldr	r3, [pc, #32]	; (80111ac <HAL_PCD_MspInit+0xdc>)
 801118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011190:	60bb      	str	r3, [r7, #8]
 8011192:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011194:	2200      	movs	r2, #0
 8011196:	2105      	movs	r1, #5
 8011198:	2043      	movs	r0, #67	; 0x43
 801119a:	f7f3 fd87 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801119e:	2043      	movs	r0, #67	; 0x43
 80111a0:	f7f3 fda0 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80111a4:	bf00      	nop
 80111a6:	37b8      	adds	r7, #184	; 0xb8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	40023800 	.word	0x40023800
 80111b0:	40020000 	.word	0x40020000

080111b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80111c8:	4619      	mov	r1, r3
 80111ca:	4610      	mov	r0, r2
 80111cc:	f7fb fd2b 	bl	800cc26 <USBD_LL_SetupStage>
}
 80111d0:	bf00      	nop
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	460b      	mov	r3, r1
 80111e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80111ea:	78fa      	ldrb	r2, [r7, #3]
 80111ec:	6879      	ldr	r1, [r7, #4]
 80111ee:	4613      	mov	r3, r2
 80111f0:	00db      	lsls	r3, r3, #3
 80111f2:	4413      	add	r3, r2
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	440b      	add	r3, r1
 80111f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	78fb      	ldrb	r3, [r7, #3]
 8011200:	4619      	mov	r1, r3
 8011202:	f7fb fd65 	bl	800ccd0 <USBD_LL_DataOutStage>
}
 8011206:	bf00      	nop
 8011208:	3708      	adds	r7, #8
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b082      	sub	sp, #8
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	460b      	mov	r3, r1
 8011218:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011220:	78fa      	ldrb	r2, [r7, #3]
 8011222:	6879      	ldr	r1, [r7, #4]
 8011224:	4613      	mov	r3, r2
 8011226:	00db      	lsls	r3, r3, #3
 8011228:	4413      	add	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	440b      	add	r3, r1
 801122e:	334c      	adds	r3, #76	; 0x4c
 8011230:	681a      	ldr	r2, [r3, #0]
 8011232:	78fb      	ldrb	r3, [r7, #3]
 8011234:	4619      	mov	r1, r3
 8011236:	f7fb fdfe 	bl	800ce36 <USBD_LL_DataInStage>
}
 801123a:	bf00      	nop
 801123c:	3708      	adds	r7, #8
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b082      	sub	sp, #8
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011250:	4618      	mov	r0, r3
 8011252:	f7fb ff32 	bl	800d0ba <USBD_LL_SOF>
}
 8011256:	bf00      	nop
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}

0801125e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801125e:	b580      	push	{r7, lr}
 8011260:	b084      	sub	sp, #16
 8011262:	af00      	add	r7, sp, #0
 8011264:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011266:	2301      	movs	r3, #1
 8011268:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d102      	bne.n	8011278 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011272:	2300      	movs	r3, #0
 8011274:	73fb      	strb	r3, [r7, #15]
 8011276:	e008      	b.n	801128a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	2b02      	cmp	r3, #2
 801127e:	d102      	bne.n	8011286 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011280:	2301      	movs	r3, #1
 8011282:	73fb      	strb	r3, [r7, #15]
 8011284:	e001      	b.n	801128a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011286:	f7f2 f844 	bl	8003312 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011290:	7bfa      	ldrb	r2, [r7, #15]
 8011292:	4611      	mov	r1, r2
 8011294:	4618      	mov	r0, r3
 8011296:	f7fb fed2 	bl	800d03e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fb fe7a 	bl	800cf9a <USBD_LL_Reset>
}
 80112a6:	bf00      	nop
 80112a8:	3710      	adds	r7, #16
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
	...

080112b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fb fecd 	bl	800d05e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	6812      	ldr	r2, [r2, #0]
 80112d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80112d6:	f043 0301 	orr.w	r3, r3, #1
 80112da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a1b      	ldr	r3, [r3, #32]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d005      	beq.n	80112f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80112e4:	4b04      	ldr	r3, [pc, #16]	; (80112f8 <HAL_PCD_SuspendCallback+0x48>)
 80112e6:	691b      	ldr	r3, [r3, #16]
 80112e8:	4a03      	ldr	r2, [pc, #12]	; (80112f8 <HAL_PCD_SuspendCallback+0x48>)
 80112ea:	f043 0306 	orr.w	r3, r3, #6
 80112ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	e000ed00 	.word	0xe000ed00

080112fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801130a:	4618      	mov	r0, r3
 801130c:	f7fb febd 	bl	800d08a <USBD_LL_Resume>
}
 8011310:	bf00      	nop
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801132a:	78fa      	ldrb	r2, [r7, #3]
 801132c:	4611      	mov	r1, r2
 801132e:	4618      	mov	r0, r3
 8011330:	f7fb ff15 	bl	800d15e <USBD_LL_IsoOUTIncomplete>
}
 8011334:	bf00      	nop
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	460b      	mov	r3, r1
 8011346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801134e:	78fa      	ldrb	r2, [r7, #3]
 8011350:	4611      	mov	r1, r2
 8011352:	4618      	mov	r0, r3
 8011354:	f7fb fed1 	bl	800d0fa <USBD_LL_IsoINIncomplete>
}
 8011358:	bf00      	nop
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801136e:	4618      	mov	r0, r3
 8011370:	f7fb ff27 	bl	800d1c2 <USBD_LL_DevConnected>
}
 8011374:	bf00      	nop
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801138a:	4618      	mov	r0, r3
 801138c:	f7fb ff24 	bl	800d1d8 <USBD_LL_DevDisconnected>
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d13c      	bne.n	8011422 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80113a8:	4a20      	ldr	r2, [pc, #128]	; (801142c <USBD_LL_Init+0x94>)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4a1e      	ldr	r2, [pc, #120]	; (801142c <USBD_LL_Init+0x94>)
 80113b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80113b8:	4b1c      	ldr	r3, [pc, #112]	; (801142c <USBD_LL_Init+0x94>)
 80113ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80113be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80113c0:	4b1a      	ldr	r3, [pc, #104]	; (801142c <USBD_LL_Init+0x94>)
 80113c2:	2206      	movs	r2, #6
 80113c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80113c6:	4b19      	ldr	r3, [pc, #100]	; (801142c <USBD_LL_Init+0x94>)
 80113c8:	2202      	movs	r2, #2
 80113ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80113cc:	4b17      	ldr	r3, [pc, #92]	; (801142c <USBD_LL_Init+0x94>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80113d2:	4b16      	ldr	r3, [pc, #88]	; (801142c <USBD_LL_Init+0x94>)
 80113d4:	2202      	movs	r2, #2
 80113d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80113d8:	4b14      	ldr	r3, [pc, #80]	; (801142c <USBD_LL_Init+0x94>)
 80113da:	2200      	movs	r2, #0
 80113dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80113de:	4b13      	ldr	r3, [pc, #76]	; (801142c <USBD_LL_Init+0x94>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80113e4:	4b11      	ldr	r3, [pc, #68]	; (801142c <USBD_LL_Init+0x94>)
 80113e6:	2200      	movs	r2, #0
 80113e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80113ea:	4b10      	ldr	r3, [pc, #64]	; (801142c <USBD_LL_Init+0x94>)
 80113ec:	2200      	movs	r2, #0
 80113ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80113f0:	4b0e      	ldr	r3, [pc, #56]	; (801142c <USBD_LL_Init+0x94>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80113f6:	480d      	ldr	r0, [pc, #52]	; (801142c <USBD_LL_Init+0x94>)
 80113f8:	f7f4 fa77 	bl	80058ea <HAL_PCD_Init>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011402:	f7f1 ff86 	bl	8003312 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011406:	2180      	movs	r1, #128	; 0x80
 8011408:	4808      	ldr	r0, [pc, #32]	; (801142c <USBD_LL_Init+0x94>)
 801140a:	f7f5 fcf2 	bl	8006df2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801140e:	2240      	movs	r2, #64	; 0x40
 8011410:	2100      	movs	r1, #0
 8011412:	4806      	ldr	r0, [pc, #24]	; (801142c <USBD_LL_Init+0x94>)
 8011414:	f7f5 fca6 	bl	8006d64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011418:	2280      	movs	r2, #128	; 0x80
 801141a:	2101      	movs	r1, #1
 801141c:	4803      	ldr	r0, [pc, #12]	; (801142c <USBD_LL_Init+0x94>)
 801141e:	f7f5 fca1 	bl	8006d64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3708      	adds	r7, #8
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	20011d4c 	.word	0x20011d4c

08011430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011438:	2300      	movs	r3, #0
 801143a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801143c:	2300      	movs	r3, #0
 801143e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011446:	4618      	mov	r0, r3
 8011448:	f7f4 fb73 	bl	8005b32 <HAL_PCD_Start>
 801144c:	4603      	mov	r3, r0
 801144e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011450:	7bfb      	ldrb	r3, [r7, #15]
 8011452:	4618      	mov	r0, r3
 8011454:	f000 f97e 	bl	8011754 <USBD_Get_USB_Status>
 8011458:	4603      	mov	r3, r0
 801145a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801145c:	7bbb      	ldrb	r3, [r7, #14]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3710      	adds	r7, #16
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}

08011466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011466:	b580      	push	{r7, lr}
 8011468:	b084      	sub	sp, #16
 801146a:	af00      	add	r7, sp, #0
 801146c:	6078      	str	r0, [r7, #4]
 801146e:	4608      	mov	r0, r1
 8011470:	4611      	mov	r1, r2
 8011472:	461a      	mov	r2, r3
 8011474:	4603      	mov	r3, r0
 8011476:	70fb      	strb	r3, [r7, #3]
 8011478:	460b      	mov	r3, r1
 801147a:	70bb      	strb	r3, [r7, #2]
 801147c:	4613      	mov	r3, r2
 801147e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011480:	2300      	movs	r3, #0
 8011482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011484:	2300      	movs	r3, #0
 8011486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801148e:	78bb      	ldrb	r3, [r7, #2]
 8011490:	883a      	ldrh	r2, [r7, #0]
 8011492:	78f9      	ldrb	r1, [r7, #3]
 8011494:	f7f5 f860 	bl	8006558 <HAL_PCD_EP_Open>
 8011498:	4603      	mov	r3, r0
 801149a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801149c:	7bfb      	ldrb	r3, [r7, #15]
 801149e:	4618      	mov	r0, r3
 80114a0:	f000 f958 	bl	8011754 <USBD_Get_USB_Status>
 80114a4:	4603      	mov	r3, r0
 80114a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}

080114b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b084      	sub	sp, #16
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
 80114ba:	460b      	mov	r3, r1
 80114bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114be:	2300      	movs	r3, #0
 80114c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114c2:	2300      	movs	r3, #0
 80114c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114cc:	78fa      	ldrb	r2, [r7, #3]
 80114ce:	4611      	mov	r1, r2
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7f5 f8a9 	bl	8006628 <HAL_PCD_EP_Close>
 80114d6:	4603      	mov	r3, r0
 80114d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114da:	7bfb      	ldrb	r3, [r7, #15]
 80114dc:	4618      	mov	r0, r3
 80114de:	f000 f939 	bl	8011754 <USBD_Get_USB_Status>
 80114e2:	4603      	mov	r3, r0
 80114e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	460b      	mov	r3, r1
 80114fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114fc:	2300      	movs	r3, #0
 80114fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801150a:	78fa      	ldrb	r2, [r7, #3]
 801150c:	4611      	mov	r1, r2
 801150e:	4618      	mov	r0, r3
 8011510:	f7f5 f981 	bl	8006816 <HAL_PCD_EP_SetStall>
 8011514:	4603      	mov	r3, r0
 8011516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011518:	7bfb      	ldrb	r3, [r7, #15]
 801151a:	4618      	mov	r0, r3
 801151c:	f000 f91a 	bl	8011754 <USBD_Get_USB_Status>
 8011520:	4603      	mov	r3, r0
 8011522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011524:	7bbb      	ldrb	r3, [r7, #14]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801152e:	b580      	push	{r7, lr}
 8011530:	b084      	sub	sp, #16
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
 8011536:	460b      	mov	r3, r1
 8011538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801153a:	2300      	movs	r3, #0
 801153c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801153e:	2300      	movs	r3, #0
 8011540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011548:	78fa      	ldrb	r2, [r7, #3]
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f7f5 f9c6 	bl	80068de <HAL_PCD_EP_ClrStall>
 8011552:	4603      	mov	r3, r0
 8011554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011556:	7bfb      	ldrb	r3, [r7, #15]
 8011558:	4618      	mov	r0, r3
 801155a:	f000 f8fb 	bl	8011754 <USBD_Get_USB_Status>
 801155e:	4603      	mov	r3, r0
 8011560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011562:	7bbb      	ldrb	r3, [r7, #14]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	460b      	mov	r3, r1
 8011576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801157e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011584:	2b00      	cmp	r3, #0
 8011586:	da0b      	bge.n	80115a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011588:	78fb      	ldrb	r3, [r7, #3]
 801158a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801158e:	68f9      	ldr	r1, [r7, #12]
 8011590:	4613      	mov	r3, r2
 8011592:	00db      	lsls	r3, r3, #3
 8011594:	4413      	add	r3, r2
 8011596:	009b      	lsls	r3, r3, #2
 8011598:	440b      	add	r3, r1
 801159a:	333e      	adds	r3, #62	; 0x3e
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	e00b      	b.n	80115b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80115a0:	78fb      	ldrb	r3, [r7, #3]
 80115a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80115a6:	68f9      	ldr	r1, [r7, #12]
 80115a8:	4613      	mov	r3, r2
 80115aa:	00db      	lsls	r3, r3, #3
 80115ac:	4413      	add	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	440b      	add	r3, r1
 80115b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80115b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3714      	adds	r7, #20
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	460b      	mov	r3, r1
 80115ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115d0:	2300      	movs	r3, #0
 80115d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115de:	78fa      	ldrb	r2, [r7, #3]
 80115e0:	4611      	mov	r1, r2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7f4 ff93 	bl	800650e <HAL_PCD_SetAddress>
 80115e8:	4603      	mov	r3, r0
 80115ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115ec:	7bfb      	ldrb	r3, [r7, #15]
 80115ee:	4618      	mov	r0, r3
 80115f0:	f000 f8b0 	bl	8011754 <USBD_Get_USB_Status>
 80115f4:	4603      	mov	r3, r0
 80115f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b086      	sub	sp, #24
 8011606:	af00      	add	r7, sp, #0
 8011608:	60f8      	str	r0, [r7, #12]
 801160a:	607a      	str	r2, [r7, #4]
 801160c:	603b      	str	r3, [r7, #0]
 801160e:	460b      	mov	r3, r1
 8011610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011616:	2300      	movs	r3, #0
 8011618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011620:	7af9      	ldrb	r1, [r7, #11]
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	f7f5 f8ac 	bl	8006782 <HAL_PCD_EP_Transmit>
 801162a:	4603      	mov	r3, r0
 801162c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801162e:	7dfb      	ldrb	r3, [r7, #23]
 8011630:	4618      	mov	r0, r3
 8011632:	f000 f88f 	bl	8011754 <USBD_Get_USB_Status>
 8011636:	4603      	mov	r3, r0
 8011638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801163a:	7dbb      	ldrb	r3, [r7, #22]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3718      	adds	r7, #24
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b086      	sub	sp, #24
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	607a      	str	r2, [r7, #4]
 801164e:	603b      	str	r3, [r7, #0]
 8011650:	460b      	mov	r3, r1
 8011652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011654:	2300      	movs	r3, #0
 8011656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011662:	7af9      	ldrb	r1, [r7, #11]
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	f7f5 f828 	bl	80066bc <HAL_PCD_EP_Receive>
 801166c:	4603      	mov	r3, r0
 801166e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011670:	7dfb      	ldrb	r3, [r7, #23]
 8011672:	4618      	mov	r0, r3
 8011674:	f000 f86e 	bl	8011754 <USBD_Get_USB_Status>
 8011678:	4603      	mov	r3, r0
 801167a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801167c:	7dbb      	ldrb	r3, [r7, #22]
}
 801167e:	4618      	mov	r0, r3
 8011680:	3718      	adds	r7, #24
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011686:	b580      	push	{r7, lr}
 8011688:	b082      	sub	sp, #8
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
 801168e:	460b      	mov	r3, r1
 8011690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011698:	78fa      	ldrb	r2, [r7, #3]
 801169a:	4611      	mov	r1, r2
 801169c:	4618      	mov	r0, r3
 801169e:	f7f5 f858 	bl	8006752 <HAL_PCD_EP_GetRxCount>
 80116a2:	4603      	mov	r3, r0
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	460b      	mov	r3, r1
 80116b6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80116b8:	78fb      	ldrb	r3, [r7, #3]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d002      	beq.n	80116c4 <HAL_PCDEx_LPM_Callback+0x18>
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d01f      	beq.n	8011702 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80116c2:	e03b      	b.n	801173c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6a1b      	ldr	r3, [r3, #32]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d007      	beq.n	80116dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80116cc:	f000 f83c 	bl	8011748 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80116d0:	4b1c      	ldr	r3, [pc, #112]	; (8011744 <HAL_PCDEx_LPM_Callback+0x98>)
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	4a1b      	ldr	r2, [pc, #108]	; (8011744 <HAL_PCDEx_LPM_Callback+0x98>)
 80116d6:	f023 0306 	bic.w	r3, r3, #6
 80116da:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	687a      	ldr	r2, [r7, #4]
 80116e8:	6812      	ldr	r2, [r2, #0]
 80116ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80116ee:	f023 0301 	bic.w	r3, r3, #1
 80116f2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fb fcc5 	bl	800d08a <USBD_LL_Resume>
    break;
 8011700:	e01c      	b.n	801173c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	6812      	ldr	r2, [r2, #0]
 8011710:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011714:	f043 0301 	orr.w	r3, r3, #1
 8011718:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011720:	4618      	mov	r0, r3
 8011722:	f7fb fc9c 	bl	800d05e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a1b      	ldr	r3, [r3, #32]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d005      	beq.n	801173a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801172e:	4b05      	ldr	r3, [pc, #20]	; (8011744 <HAL_PCDEx_LPM_Callback+0x98>)
 8011730:	691b      	ldr	r3, [r3, #16]
 8011732:	4a04      	ldr	r2, [pc, #16]	; (8011744 <HAL_PCDEx_LPM_Callback+0x98>)
 8011734:	f043 0306 	orr.w	r3, r3, #6
 8011738:	6113      	str	r3, [r2, #16]
    break;
 801173a:	bf00      	nop
}
 801173c:	bf00      	nop
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	e000ed00 	.word	0xe000ed00

08011748 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801174c:	f7f1 fd62 	bl	8003214 <SystemClock_Config>
}
 8011750:	bf00      	nop
 8011752:	bd80      	pop	{r7, pc}

08011754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011754:	b480      	push	{r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
 801175a:	4603      	mov	r3, r0
 801175c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801175e:	2300      	movs	r3, #0
 8011760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011762:	79fb      	ldrb	r3, [r7, #7]
 8011764:	2b03      	cmp	r3, #3
 8011766:	d817      	bhi.n	8011798 <USBD_Get_USB_Status+0x44>
 8011768:	a201      	add	r2, pc, #4	; (adr r2, 8011770 <USBD_Get_USB_Status+0x1c>)
 801176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176e:	bf00      	nop
 8011770:	08011781 	.word	0x08011781
 8011774:	08011787 	.word	0x08011787
 8011778:	0801178d 	.word	0x0801178d
 801177c:	08011793 	.word	0x08011793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011780:	2300      	movs	r3, #0
 8011782:	73fb      	strb	r3, [r7, #15]
    break;
 8011784:	e00b      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011786:	2303      	movs	r3, #3
 8011788:	73fb      	strb	r3, [r7, #15]
    break;
 801178a:	e008      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801178c:	2301      	movs	r3, #1
 801178e:	73fb      	strb	r3, [r7, #15]
    break;
 8011790:	e005      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011792:	2303      	movs	r3, #3
 8011794:	73fb      	strb	r3, [r7, #15]
    break;
 8011796:	e002      	b.n	801179e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011798:	2303      	movs	r3, #3
 801179a:	73fb      	strb	r3, [r7, #15]
    break;
 801179c:	bf00      	nop
  }
  return usb_status;
 801179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3714      	adds	r7, #20
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80117ac:	4b04      	ldr	r3, [pc, #16]	; (80117c0 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	b10a      	cbz	r2, 80117b6 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 80117b2:	4803      	ldr	r0, [pc, #12]	; (80117c0 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80117b4:	4770      	bx	lr
 80117b6:	4a03      	ldr	r2, [pc, #12]	; (80117c4 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 80117b8:	4801      	ldr	r0, [pc, #4]	; (80117c0 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 80117ba:	6812      	ldr	r2, [r2, #0]
 80117bc:	601a      	str	r2, [r3, #0]
 80117be:	4770      	bx	lr
 80117c0:	2000011c 	.word	0x2000011c
 80117c4:	200008b8 	.word	0x200008b8

080117c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80117c8:	4b04      	ldr	r3, [pc, #16]	; (80117dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80117ca:	4805      	ldr	r0, [pc, #20]	; (80117e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4905      	ldr	r1, [pc, #20]	; (80117e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 80117d0:	4a05      	ldr	r2, [pc, #20]	; (80117e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 80117d2:	6003      	str	r3, [r0, #0]
 80117d4:	600b      	str	r3, [r1, #0]
 80117d6:	6013      	str	r3, [r2, #0]
 80117d8:	4770      	bx	lr
 80117da:	bf00      	nop
 80117dc:	200008b8 	.word	0x200008b8
 80117e0:	20000138 	.word	0x20000138
 80117e4:	20000144 	.word	0x20000144
 80117e8:	2000011c 	.word	0x2000011c

080117ec <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 80117ec:	f006 b880 	b.w	80178f0 <custom_test_msgs__srv__AddThreeInts_Request__init>

080117f0 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 80117f0:	f006 b882 	b.w	80178f8 <custom_test_msgs__srv__AddThreeInts_Request__fini>

080117f4 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 80117f4:	f006 b882 	b.w	80178fc <custom_test_msgs__srv__AddThreeInts_Response__init>

080117f8 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 80117f8:	f006 b884 	b.w	8017904 <custom_test_msgs__srv__AddThreeInts_Response__fini>

080117fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 80117fc:	4b04      	ldr	r3, [pc, #16]	; (8011810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	b10a      	cbz	r2, 8011806 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 8011802:	4803      	ldr	r0, [pc, #12]	; (8011810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 8011804:	4770      	bx	lr
 8011806:	4a03      	ldr	r2, [pc, #12]	; (8011814 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 8011808:	4801      	ldr	r0, [pc, #4]	; (8011810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 801180a:	6812      	ldr	r2, [r2, #0]
 801180c:	601a      	str	r2, [r3, #0]
 801180e:	4770      	bx	lr
 8011810:	20000204 	.word	0x20000204
 8011814:	200008bc 	.word	0x200008bc

08011818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 8011818:	4b04      	ldr	r3, [pc, #16]	; (801182c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	b10a      	cbz	r2, 8011822 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 801181e:	4803      	ldr	r0, [pc, #12]	; (801182c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011820:	4770      	bx	lr
 8011822:	4a03      	ldr	r2, [pc, #12]	; (8011830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 8011824:	4801      	ldr	r0, [pc, #4]	; (801182c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 8011826:	6812      	ldr	r2, [r2, #0]
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	4770      	bx	lr
 801182c:	2000024c 	.word	0x2000024c
 8011830:	200008bc 	.word	0x200008bc

08011834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 8011834:	4b13      	ldr	r3, [pc, #76]	; (8011884 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	b132      	cbz	r2, 8011848 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	689a      	ldr	r2, [r3, #8]
 801183e:	b152      	cbz	r2, 8011856 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 8011840:	68da      	ldr	r2, [r3, #12]
 8011842:	b182      	cbz	r2, 8011866 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 8011844:	480f      	ldr	r0, [pc, #60]	; (8011884 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011846:	4770      	bx	lr
 8011848:	4a0f      	ldr	r2, [pc, #60]	; (8011888 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801184a:	6812      	ldr	r2, [r2, #0]
 801184c:	601a      	str	r2, [r3, #0]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	689a      	ldr	r2, [r3, #8]
 8011852:	2a00      	cmp	r2, #0
 8011854:	d1f4      	bne.n	8011840 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 8011856:	4a0d      	ldr	r2, [pc, #52]	; (801188c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 8011858:	6811      	ldr	r1, [r2, #0]
 801185a:	b179      	cbz	r1, 801187c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 801185c:	6852      	ldr	r2, [r2, #4]
 801185e:	609a      	str	r2, [r3, #8]
 8011860:	68da      	ldr	r2, [r3, #12]
 8011862:	2a00      	cmp	r2, #0
 8011864:	d1ee      	bne.n	8011844 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 8011866:	4a0a      	ldr	r2, [pc, #40]	; (8011890 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 8011868:	6811      	ldr	r1, [r2, #0]
 801186a:	b119      	cbz	r1, 8011874 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 801186c:	6852      	ldr	r2, [r2, #4]
 801186e:	4805      	ldr	r0, [pc, #20]	; (8011884 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 8011870:	60da      	str	r2, [r3, #12]
 8011872:	4770      	bx	lr
 8011874:	4904      	ldr	r1, [pc, #16]	; (8011888 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 8011876:	6809      	ldr	r1, [r1, #0]
 8011878:	6011      	str	r1, [r2, #0]
 801187a:	e7f7      	b.n	801186c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 801187c:	4902      	ldr	r1, [pc, #8]	; (8011888 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 801187e:	6809      	ldr	r1, [r1, #0]
 8011880:	6011      	str	r1, [r2, #0]
 8011882:	e7eb      	b.n	801185c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 8011884:	20000268 	.word	0x20000268
 8011888:	200008bc 	.word	0x200008bc
 801188c:	20000204 	.word	0x20000204
 8011890:	2000024c 	.word	0x2000024c

08011894 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 8011894:	4800      	ldr	r0, [pc, #0]	; (8011898 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 8011896:	4770      	bx	lr
 8011898:	20000290 	.word	0x20000290

0801189c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 801189c:	4800      	ldr	r0, [pc, #0]	; (80118a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 801189e:	4770      	bx	lr
 80118a0:	2000029c 	.word	0x2000029c

080118a4 <_AddThreeInts_Response__max_serialized_size>:
 80118a4:	2108      	movs	r1, #8
 80118a6:	2000      	movs	r0, #0
 80118a8:	b508      	push	{r3, lr}
 80118aa:	f001 fed5 	bl	8013658 <ucdr_alignment>
 80118ae:	3008      	adds	r0, #8
 80118b0:	bd08      	pop	{r3, pc}
 80118b2:	bf00      	nop

080118b4 <_AddThreeInts_Response__cdr_deserialize>:
 80118b4:	b109      	cbz	r1, 80118ba <_AddThreeInts_Response__cdr_deserialize+0x6>
 80118b6:	f001 bc1b 	b.w	80130f0 <ucdr_deserialize_int64_t>
 80118ba:	4608      	mov	r0, r1
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop

080118c0 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 80118c0:	b1b8      	cbz	r0, 80118f2 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 80118c2:	b538      	push	{r3, r4, r5, lr}
 80118c4:	460d      	mov	r5, r1
 80118c6:	2108      	movs	r1, #8
 80118c8:	4628      	mov	r0, r5
 80118ca:	f001 fec5 	bl	8013658 <ucdr_alignment>
 80118ce:	f105 0308 	add.w	r3, r5, #8
 80118d2:	2108      	movs	r1, #8
 80118d4:	f1c5 0508 	rsb	r5, r5, #8
 80118d8:	181c      	adds	r4, r3, r0
 80118da:	4620      	mov	r0, r4
 80118dc:	f001 febc 	bl	8013658 <ucdr_alignment>
 80118e0:	2108      	movs	r1, #8
 80118e2:	4408      	add	r0, r1
 80118e4:	4404      	add	r4, r0
 80118e6:	4620      	mov	r0, r4
 80118e8:	f001 feb6 	bl	8013658 <ucdr_alignment>
 80118ec:	4428      	add	r0, r5
 80118ee:	4420      	add	r0, r4
 80118f0:	bd38      	pop	{r3, r4, r5, pc}
 80118f2:	4770      	bx	lr

080118f4 <_AddThreeInts_Response__get_serialized_size>:
 80118f4:	b130      	cbz	r0, 8011904 <_AddThreeInts_Response__get_serialized_size+0x10>
 80118f6:	2108      	movs	r1, #8
 80118f8:	2000      	movs	r0, #0
 80118fa:	b508      	push	{r3, lr}
 80118fc:	f001 feac 	bl	8013658 <ucdr_alignment>
 8011900:	3008      	adds	r0, #8
 8011902:	bd08      	pop	{r3, pc}
 8011904:	4770      	bx	lr
 8011906:	bf00      	nop

08011908 <_AddThreeInts_Request__cdr_deserialize>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	460c      	mov	r4, r1
 801190c:	b171      	cbz	r1, 801192c <_AddThreeInts_Request__cdr_deserialize+0x24>
 801190e:	4605      	mov	r5, r0
 8011910:	f001 fbee 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011914:	f104 0108 	add.w	r1, r4, #8
 8011918:	4628      	mov	r0, r5
 801191a:	f001 fbe9 	bl	80130f0 <ucdr_deserialize_int64_t>
 801191e:	f104 0110 	add.w	r1, r4, #16
 8011922:	4628      	mov	r0, r5
 8011924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011928:	f001 bbe2 	b.w	80130f0 <ucdr_deserialize_int64_t>
 801192c:	4608      	mov	r0, r1
 801192e:	bd38      	pop	{r3, r4, r5, pc}

08011930 <_AddThreeInts_Request__cdr_serialize>:
 8011930:	b198      	cbz	r0, 801195a <_AddThreeInts_Request__cdr_serialize+0x2a>
 8011932:	b570      	push	{r4, r5, r6, lr}
 8011934:	460d      	mov	r5, r1
 8011936:	4604      	mov	r4, r0
 8011938:	e9d0 2300 	ldrd	r2, r3, [r0]
 801193c:	4608      	mov	r0, r1
 801193e:	f001 fb07 	bl	8012f50 <ucdr_serialize_int64_t>
 8011942:	4628      	mov	r0, r5
 8011944:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011948:	f001 fb02 	bl	8012f50 <ucdr_serialize_int64_t>
 801194c:	4628      	mov	r0, r5
 801194e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011956:	f001 bafb 	b.w	8012f50 <ucdr_serialize_int64_t>
 801195a:	4770      	bx	lr

0801195c <_AddThreeInts_Response__cdr_serialize>:
 801195c:	b120      	cbz	r0, 8011968 <_AddThreeInts_Response__cdr_serialize+0xc>
 801195e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011962:	4608      	mov	r0, r1
 8011964:	f001 baf4 	b.w	8012f50 <ucdr_serialize_int64_t>
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop

0801196c <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 801196c:	b138      	cbz	r0, 801197e <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 801196e:	b508      	push	{r3, lr}
 8011970:	460b      	mov	r3, r1
 8011972:	2108      	movs	r1, #8
 8011974:	4618      	mov	r0, r3
 8011976:	f001 fe6f 	bl	8013658 <ucdr_alignment>
 801197a:	3008      	adds	r0, #8
 801197c:	bd08      	pop	{r3, pc}
 801197e:	4770      	bx	lr

08011980 <_AddThreeInts_Request__get_serialized_size>:
 8011980:	b190      	cbz	r0, 80119a8 <_AddThreeInts_Request__get_serialized_size+0x28>
 8011982:	2108      	movs	r1, #8
 8011984:	2000      	movs	r0, #0
 8011986:	b510      	push	{r4, lr}
 8011988:	f001 fe66 	bl	8013658 <ucdr_alignment>
 801198c:	2108      	movs	r1, #8
 801198e:	1844      	adds	r4, r0, r1
 8011990:	4620      	mov	r0, r4
 8011992:	f001 fe61 	bl	8013658 <ucdr_alignment>
 8011996:	2108      	movs	r1, #8
 8011998:	4408      	add	r0, r1
 801199a:	4404      	add	r4, r0
 801199c:	4620      	mov	r0, r4
 801199e:	f001 fe5b 	bl	8013658 <ucdr_alignment>
 80119a2:	3008      	adds	r0, #8
 80119a4:	4420      	add	r0, r4
 80119a6:	bd10      	pop	{r4, pc}
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop

080119ac <_AddThreeInts_Request__max_serialized_size>:
 80119ac:	b538      	push	{r3, r4, r5, lr}
 80119ae:	2108      	movs	r1, #8
 80119b0:	2000      	movs	r0, #0
 80119b2:	f001 fe51 	bl	8013658 <ucdr_alignment>
 80119b6:	2108      	movs	r1, #8
 80119b8:	1845      	adds	r5, r0, r1
 80119ba:	4628      	mov	r0, r5
 80119bc:	f001 fe4c 	bl	8013658 <ucdr_alignment>
 80119c0:	2108      	movs	r1, #8
 80119c2:	1844      	adds	r4, r0, r1
 80119c4:	442c      	add	r4, r5
 80119c6:	4620      	mov	r0, r4
 80119c8:	f001 fe46 	bl	8013658 <ucdr_alignment>
 80119cc:	3008      	adds	r0, #8
 80119ce:	4420      	add	r0, r4
 80119d0:	bd38      	pop	{r3, r4, r5, pc}
 80119d2:	bf00      	nop

080119d4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 80119d4:	4800      	ldr	r0, [pc, #0]	; (80119d8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 80119d6:	4770      	bx	lr
 80119d8:	20000284 	.word	0x20000284

080119dc <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80119dc:	4b04      	ldr	r3, [pc, #16]	; (80119f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	b10a      	cbz	r2, 80119e6 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 80119e2:	4803      	ldr	r0, [pc, #12]	; (80119f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80119e4:	4770      	bx	lr
 80119e6:	4a03      	ldr	r2, [pc, #12]	; (80119f4 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 80119e8:	4801      	ldr	r0, [pc, #4]	; (80119f0 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 80119ea:	6812      	ldr	r2, [r2, #0]
 80119ec:	601a      	str	r2, [r3, #0]
 80119ee:	4770      	bx	lr
 80119f0:	200002e8 	.word	0x200002e8
 80119f4:	200008b8 	.word	0x200008b8

080119f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 80119f8:	4a02      	ldr	r2, [pc, #8]	; (8011a04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xc>)
 80119fa:	4b03      	ldr	r3, [pc, #12]	; (8011a08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x10>)
 80119fc:	6812      	ldr	r2, [r2, #0]
 80119fe:	601a      	str	r2, [r3, #0]
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop
 8011a04:	200008b8 	.word	0x200008b8
 8011a08:	200002e8 	.word	0x200002e8

08011a0c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011a0c:	4b04      	ldr	r3, [pc, #16]	; (8011a20 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	b10a      	cbz	r2, 8011a16 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 8011a12:	4803      	ldr	r0, [pc, #12]	; (8011a20 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011a14:	4770      	bx	lr
 8011a16:	4a03      	ldr	r2, [pc, #12]	; (8011a24 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011a18:	4801      	ldr	r0, [pc, #4]	; (8011a20 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011a1a:	6812      	ldr	r2, [r2, #0]
 8011a1c:	601a      	str	r2, [r3, #0]
 8011a1e:	4770      	bx	lr
 8011a20:	200002fc 	.word	0x200002fc
 8011a24:	200008b8 	.word	0x200008b8

08011a28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011a28:	4a02      	ldr	r2, [pc, #8]	; (8011a34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xc>)
 8011a2a:	4b03      	ldr	r3, [pc, #12]	; (8011a38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x10>)
 8011a2c:	6812      	ldr	r2, [r2, #0]
 8011a2e:	601a      	str	r2, [r3, #0]
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	200008b8 	.word	0x200008b8
 8011a38:	200002fc 	.word	0x200002fc

08011a3c <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_init_function>:
 8011a3c:	f005 bf64 	b.w	8017908 <drive_msgs__msg__Omni__init>

08011a40 <drive_msgs__msg__Omni__rosidl_typesupport_introspection_c__Omni_fini_function>:
 8011a40:	f005 bf74 	b.w	801792c <drive_msgs__msg__Omni__fini>

08011a44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011a44:	4b04      	ldr	r3, [pc, #16]	; (8011a58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	b10a      	cbz	r2, 8011a4e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0xa>
 8011a4a:	4803      	ldr	r0, [pc, #12]	; (8011a58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011a4c:	4770      	bx	lr
 8011a4e:	4a03      	ldr	r2, [pc, #12]	; (8011a5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x18>)
 8011a50:	4801      	ldr	r0, [pc, #4]	; (8011a58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x14>)
 8011a52:	6812      	ldr	r2, [r2, #0]
 8011a54:	601a      	str	r2, [r3, #0]
 8011a56:	4770      	bx	lr
 8011a58:	20000434 	.word	0x20000434
 8011a5c:	200008bc 	.word	0x200008bc

08011a60 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_init_function>:
 8011a60:	f005 bf68 	b.w	8017934 <drive_msgs__msg__OmniEnc__init>

08011a64 <drive_msgs__msg__OmniEnc__rosidl_typesupport_introspection_c__OmniEnc_fini_function>:
 8011a64:	f005 bf78 	b.w	8017958 <drive_msgs__msg__OmniEnc__fini>

08011a68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011a68:	4b04      	ldr	r3, [pc, #16]	; (8011a7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011a6a:	681a      	ldr	r2, [r3, #0]
 8011a6c:	b10a      	cbz	r2, 8011a72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0xa>
 8011a6e:	4803      	ldr	r0, [pc, #12]	; (8011a7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011a70:	4770      	bx	lr
 8011a72:	4a03      	ldr	r2, [pc, #12]	; (8011a80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x18>)
 8011a74:	4801      	ldr	r0, [pc, #4]	; (8011a7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x14>)
 8011a76:	6812      	ldr	r2, [r2, #0]
 8011a78:	601a      	str	r2, [r3, #0]
 8011a7a:	4770      	bx	lr
 8011a7c:	20000620 	.word	0x20000620
 8011a80:	200008bc 	.word	0x200008bc

08011a84 <_Omni__cdr_serialize>:
 8011a84:	b330      	cbz	r0, 8011ad4 <_Omni__cdr_serialize+0x50>
 8011a86:	b570      	push	{r4, r5, r6, lr}
 8011a88:	6806      	ldr	r6, [r0, #0]
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	460d      	mov	r5, r1
 8011a8e:	b1f6      	cbz	r6, 8011ace <_Omni__cdr_serialize+0x4a>
 8011a90:	4630      	mov	r0, r6
 8011a92:	f7ee fc35 	bl	8000300 <strlen>
 8011a96:	1c42      	adds	r2, r0, #1
 8011a98:	4631      	mov	r1, r6
 8011a9a:	6060      	str	r0, [r4, #4]
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	f001 fe4b 	bl	8013738 <ucdr_serialize_sequence_char>
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	ed94 0b04 	vldr	d0, [r4, #16]
 8011aa8:	f001 fbe8 	bl	801327c <ucdr_serialize_double>
 8011aac:	4628      	mov	r0, r5
 8011aae:	ed94 0b06 	vldr	d0, [r4, #24]
 8011ab2:	f001 fbe3 	bl	801327c <ucdr_serialize_double>
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	ed94 0b08 	vldr	d0, [r4, #32]
 8011abc:	f001 fbde 	bl	801327c <ucdr_serialize_double>
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011aca:	f001 bbd7 	b.w	801327c <ucdr_serialize_double>
 8011ace:	4632      	mov	r2, r6
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	e7e1      	b.n	8011a98 <_Omni__cdr_serialize+0x14>
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop

08011ad8 <get_serialized_size_drive_msgs__msg__Omni>:
 8011ad8:	b570      	push	{r4, r5, r6, lr}
 8011ada:	4604      	mov	r4, r0
 8011adc:	b310      	cbz	r0, 8011b24 <get_serialized_size_drive_msgs__msg__Omni+0x4c>
 8011ade:	460d      	mov	r5, r1
 8011ae0:	2104      	movs	r1, #4
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	f001 fdb8 	bl	8013658 <ucdr_alignment>
 8011ae8:	6866      	ldr	r6, [r4, #4]
 8011aea:	1d6b      	adds	r3, r5, #5
 8011aec:	2108      	movs	r1, #8
 8011aee:	f1c5 0508 	rsb	r5, r5, #8
 8011af2:	4433      	add	r3, r6
 8011af4:	181e      	adds	r6, r3, r0
 8011af6:	4630      	mov	r0, r6
 8011af8:	f001 fdae 	bl	8013658 <ucdr_alignment>
 8011afc:	2108      	movs	r1, #8
 8011afe:	1844      	adds	r4, r0, r1
 8011b00:	4426      	add	r6, r4
 8011b02:	4630      	mov	r0, r6
 8011b04:	f001 fda8 	bl	8013658 <ucdr_alignment>
 8011b08:	2108      	movs	r1, #8
 8011b0a:	1844      	adds	r4, r0, r1
 8011b0c:	4434      	add	r4, r6
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f001 fda2 	bl	8013658 <ucdr_alignment>
 8011b14:	2108      	movs	r1, #8
 8011b16:	4408      	add	r0, r1
 8011b18:	4404      	add	r4, r0
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	f001 fd9c 	bl	8013658 <ucdr_alignment>
 8011b20:	4428      	add	r0, r5
 8011b22:	4420      	add	r0, r4
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
 8011b26:	bf00      	nop

08011b28 <_Omni__cdr_deserialize>:
 8011b28:	b570      	push	{r4, r5, r6, lr}
 8011b2a:	460c      	mov	r4, r1
 8011b2c:	b082      	sub	sp, #8
 8011b2e:	b329      	cbz	r1, 8011b7c <_Omni__cdr_deserialize+0x54>
 8011b30:	688e      	ldr	r6, [r1, #8]
 8011b32:	ab01      	add	r3, sp, #4
 8011b34:	6809      	ldr	r1, [r1, #0]
 8011b36:	4605      	mov	r5, r0
 8011b38:	4632      	mov	r2, r6
 8011b3a:	f001 fe0f 	bl	801375c <ucdr_deserialize_sequence_char>
 8011b3e:	9b01      	ldr	r3, [sp, #4]
 8011b40:	b9c0      	cbnz	r0, 8011b74 <_Omni__cdr_deserialize+0x4c>
 8011b42:	429e      	cmp	r6, r3
 8011b44:	d31d      	bcc.n	8011b82 <_Omni__cdr_deserialize+0x5a>
 8011b46:	f104 0110 	add.w	r1, r4, #16
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	f001 fc66 	bl	801341c <ucdr_deserialize_double>
 8011b50:	f104 0118 	add.w	r1, r4, #24
 8011b54:	4628      	mov	r0, r5
 8011b56:	f001 fc61 	bl	801341c <ucdr_deserialize_double>
 8011b5a:	f104 0120 	add.w	r1, r4, #32
 8011b5e:	4628      	mov	r0, r5
 8011b60:	f001 fc5c 	bl	801341c <ucdr_deserialize_double>
 8011b64:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011b68:	4628      	mov	r0, r5
 8011b6a:	b002      	add	sp, #8
 8011b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b70:	f001 bc54 	b.w	801341c <ucdr_deserialize_double>
 8011b74:	b103      	cbz	r3, 8011b78 <_Omni__cdr_deserialize+0x50>
 8011b76:	3b01      	subs	r3, #1
 8011b78:	6063      	str	r3, [r4, #4]
 8011b7a:	e7e4      	b.n	8011b46 <_Omni__cdr_deserialize+0x1e>
 8011b7c:	4608      	mov	r0, r1
 8011b7e:	b002      	add	sp, #8
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	2101      	movs	r1, #1
 8011b84:	75a8      	strb	r0, [r5, #22]
 8011b86:	7569      	strb	r1, [r5, #21]
 8011b88:	6060      	str	r0, [r4, #4]
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	f001 fd7c 	bl	8013688 <ucdr_align_to>
 8011b90:	9901      	ldr	r1, [sp, #4]
 8011b92:	4628      	mov	r0, r5
 8011b94:	f001 fdb0 	bl	80136f8 <ucdr_advance_buffer>
 8011b98:	e7d5      	b.n	8011b46 <_Omni__cdr_deserialize+0x1e>
 8011b9a:	bf00      	nop

08011b9c <_Omni__max_serialized_size>:
 8011b9c:	b538      	push	{r3, r4, r5, lr}
 8011b9e:	2108      	movs	r1, #8
 8011ba0:	2000      	movs	r0, #0
 8011ba2:	f001 fd59 	bl	8013658 <ucdr_alignment>
 8011ba6:	2108      	movs	r1, #8
 8011ba8:	1845      	adds	r5, r0, r1
 8011baa:	4628      	mov	r0, r5
 8011bac:	f001 fd54 	bl	8013658 <ucdr_alignment>
 8011bb0:	2108      	movs	r1, #8
 8011bb2:	1844      	adds	r4, r0, r1
 8011bb4:	442c      	add	r4, r5
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	f001 fd4e 	bl	8013658 <ucdr_alignment>
 8011bbc:	2108      	movs	r1, #8
 8011bbe:	4408      	add	r0, r1
 8011bc0:	4404      	add	r4, r0
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f001 fd48 	bl	8013658 <ucdr_alignment>
 8011bc8:	3008      	adds	r0, #8
 8011bca:	4420      	add	r0, r4
 8011bcc:	bd38      	pop	{r3, r4, r5, pc}
 8011bce:	bf00      	nop

08011bd0 <_Omni__get_serialized_size>:
 8011bd0:	b538      	push	{r3, r4, r5, lr}
 8011bd2:	4604      	mov	r4, r0
 8011bd4:	b1f0      	cbz	r0, 8011c14 <_Omni__get_serialized_size+0x44>
 8011bd6:	2104      	movs	r1, #4
 8011bd8:	2000      	movs	r0, #0
 8011bda:	f001 fd3d 	bl	8013658 <ucdr_alignment>
 8011bde:	6863      	ldr	r3, [r4, #4]
 8011be0:	2108      	movs	r1, #8
 8011be2:	3305      	adds	r3, #5
 8011be4:	181d      	adds	r5, r3, r0
 8011be6:	4628      	mov	r0, r5
 8011be8:	f001 fd36 	bl	8013658 <ucdr_alignment>
 8011bec:	2108      	movs	r1, #8
 8011bee:	1844      	adds	r4, r0, r1
 8011bf0:	4425      	add	r5, r4
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	f001 fd30 	bl	8013658 <ucdr_alignment>
 8011bf8:	2108      	movs	r1, #8
 8011bfa:	1844      	adds	r4, r0, r1
 8011bfc:	442c      	add	r4, r5
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f001 fd2a 	bl	8013658 <ucdr_alignment>
 8011c04:	2108      	movs	r1, #8
 8011c06:	4408      	add	r0, r1
 8011c08:	4404      	add	r4, r0
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f001 fd24 	bl	8013658 <ucdr_alignment>
 8011c10:	3008      	adds	r0, #8
 8011c12:	4420      	add	r0, r4
 8011c14:	bd38      	pop	{r3, r4, r5, pc}
 8011c16:	bf00      	nop

08011c18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni>:
 8011c18:	4800      	ldr	r0, [pc, #0]	; (8011c1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__Omni+0x4>)
 8011c1a:	4770      	bx	lr
 8011c1c:	2000062c 	.word	0x2000062c

08011c20 <_OmniEnc__cdr_serialize>:
 8011c20:	b3a8      	cbz	r0, 8011c8e <_OmniEnc__cdr_serialize+0x6e>
 8011c22:	b570      	push	{r4, r5, r6, lr}
 8011c24:	6806      	ldr	r6, [r0, #0]
 8011c26:	4604      	mov	r4, r0
 8011c28:	460d      	mov	r5, r1
 8011c2a:	b36e      	cbz	r6, 8011c88 <_OmniEnc__cdr_serialize+0x68>
 8011c2c:	4630      	mov	r0, r6
 8011c2e:	f7ee fb67 	bl	8000300 <strlen>
 8011c32:	1c42      	adds	r2, r0, #1
 8011c34:	4631      	mov	r1, r6
 8011c36:	6060      	str	r0, [r4, #4]
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f001 fd7d 	bl	8013738 <ucdr_serialize_sequence_char>
 8011c3e:	4628      	mov	r0, r5
 8011c40:	ed94 0b04 	vldr	d0, [r4, #16]
 8011c44:	f001 fb1a 	bl	801327c <ucdr_serialize_double>
 8011c48:	4628      	mov	r0, r5
 8011c4a:	ed94 0b06 	vldr	d0, [r4, #24]
 8011c4e:	f001 fb15 	bl	801327c <ucdr_serialize_double>
 8011c52:	4628      	mov	r0, r5
 8011c54:	ed94 0b08 	vldr	d0, [r4, #32]
 8011c58:	f001 fb10 	bl	801327c <ucdr_serialize_double>
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	ed94 0b0a 	vldr	d0, [r4, #40]	; 0x28
 8011c62:	f001 fb0b 	bl	801327c <ucdr_serialize_double>
 8011c66:	4628      	mov	r0, r5
 8011c68:	ed94 0b0c 	vldr	d0, [r4, #48]	; 0x30
 8011c6c:	f001 fb06 	bl	801327c <ucdr_serialize_double>
 8011c70:	4628      	mov	r0, r5
 8011c72:	ed94 0b0e 	vldr	d0, [r4, #56]	; 0x38
 8011c76:	f001 fb01 	bl	801327c <ucdr_serialize_double>
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8011c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c84:	f001 bafa 	b.w	801327c <ucdr_serialize_double>
 8011c88:	4632      	mov	r2, r6
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	e7d2      	b.n	8011c34 <_OmniEnc__cdr_serialize+0x14>
 8011c8e:	4770      	bx	lr

08011c90 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>:
 8011c90:	b570      	push	{r4, r5, r6, lr}
 8011c92:	460c      	mov	r4, r1
 8011c94:	4605      	mov	r5, r0
 8011c96:	2104      	movs	r1, #4
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f001 fcdd 	bl	8013658 <ucdr_alignment>
 8011c9e:	686b      	ldr	r3, [r5, #4]
 8011ca0:	2108      	movs	r1, #8
 8011ca2:	4423      	add	r3, r4
 8011ca4:	f1c4 0408 	rsb	r4, r4, #8
 8011ca8:	3305      	adds	r3, #5
 8011caa:	18c6      	adds	r6, r0, r3
 8011cac:	4630      	mov	r0, r6
 8011cae:	f001 fcd3 	bl	8013658 <ucdr_alignment>
 8011cb2:	2108      	movs	r1, #8
 8011cb4:	1845      	adds	r5, r0, r1
 8011cb6:	442e      	add	r6, r5
 8011cb8:	4630      	mov	r0, r6
 8011cba:	f001 fccd 	bl	8013658 <ucdr_alignment>
 8011cbe:	2108      	movs	r1, #8
 8011cc0:	1845      	adds	r5, r0, r1
 8011cc2:	4435      	add	r5, r6
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f001 fcc7 	bl	8013658 <ucdr_alignment>
 8011cca:	2108      	movs	r1, #8
 8011ccc:	4408      	add	r0, r1
 8011cce:	4405      	add	r5, r0
 8011cd0:	4628      	mov	r0, r5
 8011cd2:	f001 fcc1 	bl	8013658 <ucdr_alignment>
 8011cd6:	2108      	movs	r1, #8
 8011cd8:	4408      	add	r0, r1
 8011cda:	1946      	adds	r6, r0, r5
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f001 fcbb 	bl	8013658 <ucdr_alignment>
 8011ce2:	2108      	movs	r1, #8
 8011ce4:	1845      	adds	r5, r0, r1
 8011ce6:	4435      	add	r5, r6
 8011ce8:	4628      	mov	r0, r5
 8011cea:	f001 fcb5 	bl	8013658 <ucdr_alignment>
 8011cee:	2108      	movs	r1, #8
 8011cf0:	4408      	add	r0, r1
 8011cf2:	4405      	add	r5, r0
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f001 fcaf 	bl	8013658 <ucdr_alignment>
 8011cfa:	4420      	add	r0, r4
 8011cfc:	4428      	add	r0, r5
 8011cfe:	bd70      	pop	{r4, r5, r6, pc}

08011d00 <get_serialized_size_drive_msgs__msg__OmniEnc>:
 8011d00:	b108      	cbz	r0, 8011d06 <get_serialized_size_drive_msgs__msg__OmniEnc+0x6>
 8011d02:	f7ff bfc5 	b.w	8011c90 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011d06:	4770      	bx	lr

08011d08 <_OmniEnc__get_serialized_size>:
 8011d08:	b110      	cbz	r0, 8011d10 <_OmniEnc__get_serialized_size+0x8>
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	f7ff bfc0 	b.w	8011c90 <get_serialized_size_drive_msgs__msg__OmniEnc.part.0>
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop

08011d14 <_OmniEnc__cdr_deserialize>:
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	460c      	mov	r4, r1
 8011d18:	b082      	sub	sp, #8
 8011d1a:	b3a1      	cbz	r1, 8011d86 <_OmniEnc__cdr_deserialize+0x72>
 8011d1c:	688e      	ldr	r6, [r1, #8]
 8011d1e:	ab01      	add	r3, sp, #4
 8011d20:	6809      	ldr	r1, [r1, #0]
 8011d22:	4605      	mov	r5, r0
 8011d24:	4632      	mov	r2, r6
 8011d26:	f001 fd19 	bl	801375c <ucdr_deserialize_sequence_char>
 8011d2a:	9b01      	ldr	r3, [sp, #4]
 8011d2c:	bb38      	cbnz	r0, 8011d7e <_OmniEnc__cdr_deserialize+0x6a>
 8011d2e:	429e      	cmp	r6, r3
 8011d30:	d32c      	bcc.n	8011d8c <_OmniEnc__cdr_deserialize+0x78>
 8011d32:	f104 0110 	add.w	r1, r4, #16
 8011d36:	4628      	mov	r0, r5
 8011d38:	f001 fb70 	bl	801341c <ucdr_deserialize_double>
 8011d3c:	f104 0118 	add.w	r1, r4, #24
 8011d40:	4628      	mov	r0, r5
 8011d42:	f001 fb6b 	bl	801341c <ucdr_deserialize_double>
 8011d46:	f104 0120 	add.w	r1, r4, #32
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	f001 fb66 	bl	801341c <ucdr_deserialize_double>
 8011d50:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011d54:	4628      	mov	r0, r5
 8011d56:	f001 fb61 	bl	801341c <ucdr_deserialize_double>
 8011d5a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011d5e:	4628      	mov	r0, r5
 8011d60:	f001 fb5c 	bl	801341c <ucdr_deserialize_double>
 8011d64:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011d68:	4628      	mov	r0, r5
 8011d6a:	f001 fb57 	bl	801341c <ucdr_deserialize_double>
 8011d6e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8011d72:	4628      	mov	r0, r5
 8011d74:	b002      	add	sp, #8
 8011d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d7a:	f001 bb4f 	b.w	801341c <ucdr_deserialize_double>
 8011d7e:	b103      	cbz	r3, 8011d82 <_OmniEnc__cdr_deserialize+0x6e>
 8011d80:	3b01      	subs	r3, #1
 8011d82:	6063      	str	r3, [r4, #4]
 8011d84:	e7d5      	b.n	8011d32 <_OmniEnc__cdr_deserialize+0x1e>
 8011d86:	4608      	mov	r0, r1
 8011d88:	b002      	add	sp, #8
 8011d8a:	bd70      	pop	{r4, r5, r6, pc}
 8011d8c:	2101      	movs	r1, #1
 8011d8e:	75a8      	strb	r0, [r5, #22]
 8011d90:	7569      	strb	r1, [r5, #21]
 8011d92:	6060      	str	r0, [r4, #4]
 8011d94:	4628      	mov	r0, r5
 8011d96:	f001 fc77 	bl	8013688 <ucdr_align_to>
 8011d9a:	9901      	ldr	r1, [sp, #4]
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f001 fcab 	bl	80136f8 <ucdr_advance_buffer>
 8011da2:	e7c6      	b.n	8011d32 <_OmniEnc__cdr_deserialize+0x1e>

08011da4 <max_serialized_size_drive_msgs__msg__OmniEnc>:
 8011da4:	b570      	push	{r4, r5, r6, lr}
 8011da6:	460c      	mov	r4, r1
 8011da8:	4603      	mov	r3, r0
 8011daa:	2200      	movs	r2, #0
 8011dac:	2108      	movs	r1, #8
 8011dae:	f104 0508 	add.w	r5, r4, #8
 8011db2:	4620      	mov	r0, r4
 8011db4:	701a      	strb	r2, [r3, #0]
 8011db6:	f1c4 0408 	rsb	r4, r4, #8
 8011dba:	f001 fc4d 	bl	8013658 <ucdr_alignment>
 8011dbe:	4405      	add	r5, r0
 8011dc0:	2108      	movs	r1, #8
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	f001 fc48 	bl	8013658 <ucdr_alignment>
 8011dc8:	2108      	movs	r1, #8
 8011dca:	1846      	adds	r6, r0, r1
 8011dcc:	442e      	add	r6, r5
 8011dce:	4630      	mov	r0, r6
 8011dd0:	f001 fc42 	bl	8013658 <ucdr_alignment>
 8011dd4:	2108      	movs	r1, #8
 8011dd6:	1845      	adds	r5, r0, r1
 8011dd8:	442e      	add	r6, r5
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f001 fc3c 	bl	8013658 <ucdr_alignment>
 8011de0:	2108      	movs	r1, #8
 8011de2:	4408      	add	r0, r1
 8011de4:	4406      	add	r6, r0
 8011de6:	4630      	mov	r0, r6
 8011de8:	f001 fc36 	bl	8013658 <ucdr_alignment>
 8011dec:	2108      	movs	r1, #8
 8011dee:	1845      	adds	r5, r0, r1
 8011df0:	4435      	add	r5, r6
 8011df2:	4628      	mov	r0, r5
 8011df4:	f001 fc30 	bl	8013658 <ucdr_alignment>
 8011df8:	2108      	movs	r1, #8
 8011dfa:	4408      	add	r0, r1
 8011dfc:	4405      	add	r5, r0
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f001 fc2a 	bl	8013658 <ucdr_alignment>
 8011e04:	4420      	add	r0, r4
 8011e06:	4428      	add	r0, r5
 8011e08:	bd70      	pop	{r4, r5, r6, pc}
 8011e0a:	bf00      	nop

08011e0c <_OmniEnc__max_serialized_size>:
 8011e0c:	b500      	push	{lr}
 8011e0e:	b083      	sub	sp, #12
 8011e10:	2100      	movs	r1, #0
 8011e12:	f10d 0007 	add.w	r0, sp, #7
 8011e16:	f7ff ffc5 	bl	8011da4 <max_serialized_size_drive_msgs__msg__OmniEnc>
 8011e1a:	b003      	add	sp, #12
 8011e1c:	f85d fb04 	ldr.w	pc, [sp], #4

08011e20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc>:
 8011e20:	4800      	ldr	r0, [pc, #0]	; (8011e24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__OmniEnc+0x4>)
 8011e22:	4770      	bx	lr
 8011e24:	20000654 	.word	0x20000654

08011e28 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011e28:	4b04      	ldr	r3, [pc, #16]	; (8011e3c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011e2a:	681a      	ldr	r2, [r3, #0]
 8011e2c:	b10a      	cbz	r2, 8011e32 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011e2e:	4803      	ldr	r0, [pc, #12]	; (8011e3c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011e30:	4770      	bx	lr
 8011e32:	4a03      	ldr	r2, [pc, #12]	; (8011e40 <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011e34:	4801      	ldr	r0, [pc, #4]	; (8011e3c <rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011e36:	6812      	ldr	r2, [r2, #0]
 8011e38:	601a      	str	r2, [r3, #0]
 8011e3a:	4770      	bx	lr
 8011e3c:	20000684 	.word	0x20000684
 8011e40:	200008b8 	.word	0x200008b8

08011e44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011e44:	4a02      	ldr	r2, [pc, #8]	; (8011e50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xc>)
 8011e46:	4b03      	ldr	r3, [pc, #12]	; (8011e54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x10>)
 8011e48:	6812      	ldr	r2, [r2, #0]
 8011e4a:	601a      	str	r2, [r3, #0]
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	200008b8 	.word	0x200008b8
 8011e54:	20000684 	.word	0x20000684

08011e58 <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_init_function>:
 8011e58:	f005 bd82 	b.w	8017960 <manip_msgs__msg__Cmd__init>

08011e5c <manip_msgs__msg__Cmd__rosidl_typesupport_introspection_c__Cmd_fini_function>:
 8011e5c:	f005 bd84 	b.w	8017968 <manip_msgs__msg__Cmd__fini>

08011e60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 8011e60:	4b04      	ldr	r3, [pc, #16]	; (8011e74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	b10a      	cbz	r2, 8011e6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0xa>
 8011e66:	4803      	ldr	r0, [pc, #12]	; (8011e74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011e68:	4770      	bx	lr
 8011e6a:	4a03      	ldr	r2, [pc, #12]	; (8011e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x18>)
 8011e6c:	4801      	ldr	r0, [pc, #4]	; (8011e74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x14>)
 8011e6e:	6812      	ldr	r2, [r2, #0]
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	4770      	bx	lr
 8011e74:	20000870 	.word	0x20000870
 8011e78:	200008bc 	.word	0x200008bc

08011e7c <get_serialized_size_manip_msgs__msg__Cmd.part.0>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	2108      	movs	r1, #8
 8011e80:	4604      	mov	r4, r0
 8011e82:	f001 fbe9 	bl	8013658 <ucdr_alignment>
 8011e86:	2108      	movs	r1, #8
 8011e88:	1866      	adds	r6, r4, r1
 8011e8a:	f1c4 0408 	rsb	r4, r4, #8
 8011e8e:	4406      	add	r6, r0
 8011e90:	4630      	mov	r0, r6
 8011e92:	f001 fbe1 	bl	8013658 <ucdr_alignment>
 8011e96:	2108      	movs	r1, #8
 8011e98:	1845      	adds	r5, r0, r1
 8011e9a:	442e      	add	r6, r5
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f001 fbdb 	bl	8013658 <ucdr_alignment>
 8011ea2:	2108      	movs	r1, #8
 8011ea4:	1845      	adds	r5, r0, r1
 8011ea6:	4435      	add	r5, r6
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	f001 fbd5 	bl	8013658 <ucdr_alignment>
 8011eae:	2108      	movs	r1, #8
 8011eb0:	4408      	add	r0, r1
 8011eb2:	4405      	add	r5, r0
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	f001 fbcf 	bl	8013658 <ucdr_alignment>
 8011eba:	2108      	movs	r1, #8
 8011ebc:	4408      	add	r0, r1
 8011ebe:	1946      	adds	r6, r0, r5
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	f001 fbc9 	bl	8013658 <ucdr_alignment>
 8011ec6:	2108      	movs	r1, #8
 8011ec8:	1845      	adds	r5, r0, r1
 8011eca:	4435      	add	r5, r6
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f001 fbc3 	bl	8013658 <ucdr_alignment>
 8011ed2:	2108      	movs	r1, #8
 8011ed4:	4408      	add	r0, r1
 8011ed6:	4405      	add	r5, r0
 8011ed8:	4628      	mov	r0, r5
 8011eda:	f001 fbbd 	bl	8013658 <ucdr_alignment>
 8011ede:	4420      	add	r0, r4
 8011ee0:	4428      	add	r0, r5
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}

08011ee4 <get_serialized_size_manip_msgs__msg__Cmd>:
 8011ee4:	b110      	cbz	r0, 8011eec <get_serialized_size_manip_msgs__msg__Cmd+0x8>
 8011ee6:	4608      	mov	r0, r1
 8011ee8:	f7ff bfc8 	b.w	8011e7c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop

08011ef0 <_Cmd__get_serialized_size>:
 8011ef0:	b110      	cbz	r0, 8011ef8 <_Cmd__get_serialized_size+0x8>
 8011ef2:	2000      	movs	r0, #0
 8011ef4:	f7ff bfc2 	b.w	8011e7c <get_serialized_size_manip_msgs__msg__Cmd.part.0>
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop

08011efc <_Cmd__cdr_deserialize>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	460c      	mov	r4, r1
 8011f00:	b339      	cbz	r1, 8011f52 <_Cmd__cdr_deserialize+0x56>
 8011f02:	4605      	mov	r5, r0
 8011f04:	f001 f8f4 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011f08:	f104 0108 	add.w	r1, r4, #8
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	f001 f8ef 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011f12:	f104 0110 	add.w	r1, r4, #16
 8011f16:	4628      	mov	r0, r5
 8011f18:	f001 f8ea 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011f1c:	f104 0118 	add.w	r1, r4, #24
 8011f20:	4628      	mov	r0, r5
 8011f22:	f001 f8e5 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011f26:	f104 0120 	add.w	r1, r4, #32
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	f001 f8e0 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011f30:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8011f34:	4628      	mov	r0, r5
 8011f36:	f001 f8db 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011f3a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f001 f8d6 	bl	80130f0 <ucdr_deserialize_int64_t>
 8011f44:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011f48:	4628      	mov	r0, r5
 8011f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f4e:	f001 b8cf 	b.w	80130f0 <ucdr_deserialize_int64_t>
 8011f52:	4608      	mov	r0, r1
 8011f54:	bd38      	pop	{r3, r4, r5, pc}
 8011f56:	bf00      	nop

08011f58 <_Cmd__cdr_serialize>:
 8011f58:	b360      	cbz	r0, 8011fb4 <_Cmd__cdr_serialize+0x5c>
 8011f5a:	b570      	push	{r4, r5, r6, lr}
 8011f5c:	460d      	mov	r5, r1
 8011f5e:	4604      	mov	r4, r0
 8011f60:	e9d0 2300 	ldrd	r2, r3, [r0]
 8011f64:	4608      	mov	r0, r1
 8011f66:	f000 fff3 	bl	8012f50 <ucdr_serialize_int64_t>
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8011f70:	f000 ffee 	bl	8012f50 <ucdr_serialize_int64_t>
 8011f74:	4628      	mov	r0, r5
 8011f76:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011f7a:	f000 ffe9 	bl	8012f50 <ucdr_serialize_int64_t>
 8011f7e:	4628      	mov	r0, r5
 8011f80:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011f84:	f000 ffe4 	bl	8012f50 <ucdr_serialize_int64_t>
 8011f88:	4628      	mov	r0, r5
 8011f8a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8011f8e:	f000 ffdf 	bl	8012f50 <ucdr_serialize_int64_t>
 8011f92:	4628      	mov	r0, r5
 8011f94:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8011f98:	f000 ffda 	bl	8012f50 <ucdr_serialize_int64_t>
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8011fa2:	f000 ffd5 	bl	8012f50 <ucdr_serialize_int64_t>
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8011fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fb0:	f000 bfce 	b.w	8012f50 <ucdr_serialize_int64_t>
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop

08011fb8 <max_serialized_size_manip_msgs__msg__Cmd>:
 8011fb8:	b570      	push	{r4, r5, r6, lr}
 8011fba:	460c      	mov	r4, r1
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	2108      	movs	r1, #8
 8011fc0:	f104 0608 	add.w	r6, r4, #8
 8011fc4:	7003      	strb	r3, [r0, #0]
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f1c4 0408 	rsb	r4, r4, #8
 8011fcc:	f001 fb44 	bl	8013658 <ucdr_alignment>
 8011fd0:	4406      	add	r6, r0
 8011fd2:	2108      	movs	r1, #8
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f001 fb3f 	bl	8013658 <ucdr_alignment>
 8011fda:	2108      	movs	r1, #8
 8011fdc:	1845      	adds	r5, r0, r1
 8011fde:	442e      	add	r6, r5
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	f001 fb39 	bl	8013658 <ucdr_alignment>
 8011fe6:	2108      	movs	r1, #8
 8011fe8:	1845      	adds	r5, r0, r1
 8011fea:	4435      	add	r5, r6
 8011fec:	4628      	mov	r0, r5
 8011fee:	f001 fb33 	bl	8013658 <ucdr_alignment>
 8011ff2:	2108      	movs	r1, #8
 8011ff4:	4408      	add	r0, r1
 8011ff6:	4405      	add	r5, r0
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f001 fb2d 	bl	8013658 <ucdr_alignment>
 8011ffe:	2108      	movs	r1, #8
 8012000:	4408      	add	r0, r1
 8012002:	1946      	adds	r6, r0, r5
 8012004:	4630      	mov	r0, r6
 8012006:	f001 fb27 	bl	8013658 <ucdr_alignment>
 801200a:	2108      	movs	r1, #8
 801200c:	1845      	adds	r5, r0, r1
 801200e:	4435      	add	r5, r6
 8012010:	4628      	mov	r0, r5
 8012012:	f001 fb21 	bl	8013658 <ucdr_alignment>
 8012016:	2108      	movs	r1, #8
 8012018:	4408      	add	r0, r1
 801201a:	4405      	add	r5, r0
 801201c:	4628      	mov	r0, r5
 801201e:	f001 fb1b 	bl	8013658 <ucdr_alignment>
 8012022:	4420      	add	r0, r4
 8012024:	4428      	add	r0, r5
 8012026:	bd70      	pop	{r4, r5, r6, pc}

08012028 <_Cmd__max_serialized_size>:
 8012028:	b500      	push	{lr}
 801202a:	b083      	sub	sp, #12
 801202c:	2100      	movs	r1, #0
 801202e:	f10d 0007 	add.w	r0, sp, #7
 8012032:	f7ff ffc1 	bl	8011fb8 <max_serialized_size_manip_msgs__msg__Cmd>
 8012036:	b003      	add	sp, #12
 8012038:	f85d fb04 	ldr.w	pc, [sp], #4

0801203c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd>:
 801203c:	4800      	ldr	r0, [pc, #0]	; (8012040 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__manip_msgs__msg__Cmd+0x4>)
 801203e:	4770      	bx	lr
 8012040:	2000087c 	.word	0x2000087c

08012044 <ucdr_serialize_bool>:
 8012044:	b538      	push	{r3, r4, r5, lr}
 8012046:	460d      	mov	r5, r1
 8012048:	2101      	movs	r1, #1
 801204a:	4604      	mov	r4, r0
 801204c:	f001 fab8 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012050:	b148      	cbz	r0, 8012066 <ucdr_serialize_bool+0x22>
 8012052:	68a3      	ldr	r3, [r4, #8]
 8012054:	2101      	movs	r1, #1
 8012056:	701d      	strb	r5, [r3, #0]
 8012058:	68a2      	ldr	r2, [r4, #8]
 801205a:	6923      	ldr	r3, [r4, #16]
 801205c:	440a      	add	r2, r1
 801205e:	7561      	strb	r1, [r4, #21]
 8012060:	440b      	add	r3, r1
 8012062:	60a2      	str	r2, [r4, #8]
 8012064:	6123      	str	r3, [r4, #16]
 8012066:	7da0      	ldrb	r0, [r4, #22]
 8012068:	f080 0001 	eor.w	r0, r0, #1
 801206c:	bd38      	pop	{r3, r4, r5, pc}
 801206e:	bf00      	nop

08012070 <ucdr_deserialize_bool>:
 8012070:	b538      	push	{r3, r4, r5, lr}
 8012072:	460d      	mov	r5, r1
 8012074:	2101      	movs	r1, #1
 8012076:	4604      	mov	r4, r0
 8012078:	f001 faa2 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 801207c:	b160      	cbz	r0, 8012098 <ucdr_deserialize_bool+0x28>
 801207e:	68a2      	ldr	r2, [r4, #8]
 8012080:	2101      	movs	r1, #1
 8012082:	6923      	ldr	r3, [r4, #16]
 8012084:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012088:	440b      	add	r3, r1
 801208a:	3800      	subs	r0, #0
 801208c:	bf18      	it	ne
 801208e:	2001      	movne	r0, #1
 8012090:	7028      	strb	r0, [r5, #0]
 8012092:	60a2      	str	r2, [r4, #8]
 8012094:	6123      	str	r3, [r4, #16]
 8012096:	7561      	strb	r1, [r4, #21]
 8012098:	7da0      	ldrb	r0, [r4, #22]
 801209a:	f080 0001 	eor.w	r0, r0, #1
 801209e:	bd38      	pop	{r3, r4, r5, pc}

080120a0 <ucdr_serialize_uint8_t>:
 80120a0:	b538      	push	{r3, r4, r5, lr}
 80120a2:	460d      	mov	r5, r1
 80120a4:	2101      	movs	r1, #1
 80120a6:	4604      	mov	r4, r0
 80120a8:	f001 fa8a 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80120ac:	b148      	cbz	r0, 80120c2 <ucdr_serialize_uint8_t+0x22>
 80120ae:	68a3      	ldr	r3, [r4, #8]
 80120b0:	2101      	movs	r1, #1
 80120b2:	701d      	strb	r5, [r3, #0]
 80120b4:	68a2      	ldr	r2, [r4, #8]
 80120b6:	6923      	ldr	r3, [r4, #16]
 80120b8:	440a      	add	r2, r1
 80120ba:	7561      	strb	r1, [r4, #21]
 80120bc:	440b      	add	r3, r1
 80120be:	60a2      	str	r2, [r4, #8]
 80120c0:	6123      	str	r3, [r4, #16]
 80120c2:	7da0      	ldrb	r0, [r4, #22]
 80120c4:	f080 0001 	eor.w	r0, r0, #1
 80120c8:	bd38      	pop	{r3, r4, r5, pc}
 80120ca:	bf00      	nop

080120cc <ucdr_deserialize_uint8_t>:
 80120cc:	b538      	push	{r3, r4, r5, lr}
 80120ce:	460d      	mov	r5, r1
 80120d0:	2101      	movs	r1, #1
 80120d2:	4604      	mov	r4, r0
 80120d4:	f001 fa74 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80120d8:	b150      	cbz	r0, 80120f0 <ucdr_deserialize_uint8_t+0x24>
 80120da:	68a3      	ldr	r3, [r4, #8]
 80120dc:	2101      	movs	r1, #1
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	702b      	strb	r3, [r5, #0]
 80120e2:	68a2      	ldr	r2, [r4, #8]
 80120e4:	6923      	ldr	r3, [r4, #16]
 80120e6:	440a      	add	r2, r1
 80120e8:	7561      	strb	r1, [r4, #21]
 80120ea:	440b      	add	r3, r1
 80120ec:	60a2      	str	r2, [r4, #8]
 80120ee:	6123      	str	r3, [r4, #16]
 80120f0:	7da0      	ldrb	r0, [r4, #22]
 80120f2:	f080 0001 	eor.w	r0, r0, #1
 80120f6:	bd38      	pop	{r3, r4, r5, pc}

080120f8 <ucdr_serialize_uint16_t>:
 80120f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120fc:	460b      	mov	r3, r1
 80120fe:	b082      	sub	sp, #8
 8012100:	4604      	mov	r4, r0
 8012102:	2102      	movs	r1, #2
 8012104:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012108:	f001 faae 	bl	8013668 <ucdr_buffer_alignment>
 801210c:	4601      	mov	r1, r0
 801210e:	4620      	mov	r0, r4
 8012110:	7d67      	ldrb	r7, [r4, #21]
 8012112:	f001 faf1 	bl	80136f8 <ucdr_advance_buffer>
 8012116:	2102      	movs	r1, #2
 8012118:	4620      	mov	r0, r4
 801211a:	f001 fa45 	bl	80135a8 <ucdr_check_buffer_available_for>
 801211e:	bb78      	cbnz	r0, 8012180 <ucdr_serialize_uint16_t+0x88>
 8012120:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012124:	42ab      	cmp	r3, r5
 8012126:	d926      	bls.n	8012176 <ucdr_serialize_uint16_t+0x7e>
 8012128:	1b5e      	subs	r6, r3, r5
 801212a:	60a3      	str	r3, [r4, #8]
 801212c:	6923      	ldr	r3, [r4, #16]
 801212e:	4620      	mov	r0, r4
 8012130:	f1c6 0802 	rsb	r8, r6, #2
 8012134:	4433      	add	r3, r6
 8012136:	4641      	mov	r1, r8
 8012138:	6123      	str	r3, [r4, #16]
 801213a:	f001 fa41 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 801213e:	2800      	cmp	r0, #0
 8012140:	d03b      	beq.n	80121ba <ucdr_serialize_uint16_t+0xc2>
 8012142:	7d23      	ldrb	r3, [r4, #20]
 8012144:	2b01      	cmp	r3, #1
 8012146:	d04a      	beq.n	80121de <ucdr_serialize_uint16_t+0xe6>
 8012148:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801214c:	702b      	strb	r3, [r5, #0]
 801214e:	2e00      	cmp	r6, #0
 8012150:	d040      	beq.n	80121d4 <ucdr_serialize_uint16_t+0xdc>
 8012152:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012156:	706b      	strb	r3, [r5, #1]
 8012158:	6923      	ldr	r3, [r4, #16]
 801215a:	2102      	movs	r1, #2
 801215c:	68a2      	ldr	r2, [r4, #8]
 801215e:	3302      	adds	r3, #2
 8012160:	7da0      	ldrb	r0, [r4, #22]
 8012162:	4442      	add	r2, r8
 8012164:	7561      	strb	r1, [r4, #21]
 8012166:	1b9e      	subs	r6, r3, r6
 8012168:	f080 0001 	eor.w	r0, r0, #1
 801216c:	60a2      	str	r2, [r4, #8]
 801216e:	6126      	str	r6, [r4, #16]
 8012170:	b002      	add	sp, #8
 8012172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012176:	2102      	movs	r1, #2
 8012178:	4620      	mov	r0, r4
 801217a:	f001 fa21 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 801217e:	b190      	cbz	r0, 80121a6 <ucdr_serialize_uint16_t+0xae>
 8012180:	7d23      	ldrb	r3, [r4, #20]
 8012182:	2b01      	cmp	r3, #1
 8012184:	68a3      	ldr	r3, [r4, #8]
 8012186:	d014      	beq.n	80121b2 <ucdr_serialize_uint16_t+0xba>
 8012188:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801218c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012190:	7019      	strb	r1, [r3, #0]
 8012192:	68a3      	ldr	r3, [r4, #8]
 8012194:	705a      	strb	r2, [r3, #1]
 8012196:	2102      	movs	r1, #2
 8012198:	68a2      	ldr	r2, [r4, #8]
 801219a:	6923      	ldr	r3, [r4, #16]
 801219c:	440a      	add	r2, r1
 801219e:	7561      	strb	r1, [r4, #21]
 80121a0:	440b      	add	r3, r1
 80121a2:	60a2      	str	r2, [r4, #8]
 80121a4:	6123      	str	r3, [r4, #16]
 80121a6:	7da0      	ldrb	r0, [r4, #22]
 80121a8:	f080 0001 	eor.w	r0, r0, #1
 80121ac:	b002      	add	sp, #8
 80121ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80121b6:	801a      	strh	r2, [r3, #0]
 80121b8:	e7ed      	b.n	8012196 <ucdr_serialize_uint16_t+0x9e>
 80121ba:	68a2      	ldr	r2, [r4, #8]
 80121bc:	6923      	ldr	r3, [r4, #16]
 80121be:	7da0      	ldrb	r0, [r4, #22]
 80121c0:	1b92      	subs	r2, r2, r6
 80121c2:	1b9b      	subs	r3, r3, r6
 80121c4:	7567      	strb	r7, [r4, #21]
 80121c6:	f080 0001 	eor.w	r0, r0, #1
 80121ca:	60a2      	str	r2, [r4, #8]
 80121cc:	6123      	str	r3, [r4, #16]
 80121ce:	b002      	add	sp, #8
 80121d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121d4:	68a3      	ldr	r3, [r4, #8]
 80121d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121da:	701a      	strb	r2, [r3, #0]
 80121dc:	e7bc      	b.n	8012158 <ucdr_serialize_uint16_t+0x60>
 80121de:	4628      	mov	r0, r5
 80121e0:	f10d 0506 	add.w	r5, sp, #6
 80121e4:	4632      	mov	r2, r6
 80121e6:	4629      	mov	r1, r5
 80121e8:	f00f f869 	bl	80212be <memcpy>
 80121ec:	4642      	mov	r2, r8
 80121ee:	19a9      	adds	r1, r5, r6
 80121f0:	68a0      	ldr	r0, [r4, #8]
 80121f2:	f00f f864 	bl	80212be <memcpy>
 80121f6:	e7af      	b.n	8012158 <ucdr_serialize_uint16_t+0x60>

080121f8 <ucdr_serialize_endian_uint16_t>:
 80121f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121fc:	4604      	mov	r4, r0
 80121fe:	b083      	sub	sp, #12
 8012200:	460d      	mov	r5, r1
 8012202:	2102      	movs	r1, #2
 8012204:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012208:	f001 fa2e 	bl	8013668 <ucdr_buffer_alignment>
 801220c:	4601      	mov	r1, r0
 801220e:	4620      	mov	r0, r4
 8012210:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012214:	f001 fa70 	bl	80136f8 <ucdr_advance_buffer>
 8012218:	2102      	movs	r1, #2
 801221a:	4620      	mov	r0, r4
 801221c:	f001 f9c4 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012220:	bb70      	cbnz	r0, 8012280 <ucdr_serialize_endian_uint16_t+0x88>
 8012222:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012226:	42be      	cmp	r6, r7
 8012228:	d925      	bls.n	8012276 <ucdr_serialize_endian_uint16_t+0x7e>
 801222a:	6923      	ldr	r3, [r4, #16]
 801222c:	4620      	mov	r0, r4
 801222e:	60a6      	str	r6, [r4, #8]
 8012230:	1bf6      	subs	r6, r6, r7
 8012232:	4433      	add	r3, r6
 8012234:	f1c6 0902 	rsb	r9, r6, #2
 8012238:	6123      	str	r3, [r4, #16]
 801223a:	4649      	mov	r1, r9
 801223c:	f001 f9c0 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012240:	2800      	cmp	r0, #0
 8012242:	d039      	beq.n	80122b8 <ucdr_serialize_endian_uint16_t+0xc0>
 8012244:	2d01      	cmp	r5, #1
 8012246:	d04a      	beq.n	80122de <ucdr_serialize_endian_uint16_t+0xe6>
 8012248:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801224c:	703b      	strb	r3, [r7, #0]
 801224e:	2e00      	cmp	r6, #0
 8012250:	d040      	beq.n	80122d4 <ucdr_serialize_endian_uint16_t+0xdc>
 8012252:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012256:	707b      	strb	r3, [r7, #1]
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	2102      	movs	r1, #2
 801225c:	68a2      	ldr	r2, [r4, #8]
 801225e:	7da0      	ldrb	r0, [r4, #22]
 8012260:	3302      	adds	r3, #2
 8012262:	444a      	add	r2, r9
 8012264:	7561      	strb	r1, [r4, #21]
 8012266:	1b9b      	subs	r3, r3, r6
 8012268:	f080 0001 	eor.w	r0, r0, #1
 801226c:	60a2      	str	r2, [r4, #8]
 801226e:	6123      	str	r3, [r4, #16]
 8012270:	b003      	add	sp, #12
 8012272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012276:	2102      	movs	r1, #2
 8012278:	4620      	mov	r0, r4
 801227a:	f001 f9a1 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 801227e:	b188      	cbz	r0, 80122a4 <ucdr_serialize_endian_uint16_t+0xac>
 8012280:	2d01      	cmp	r5, #1
 8012282:	68a3      	ldr	r3, [r4, #8]
 8012284:	d014      	beq.n	80122b0 <ucdr_serialize_endian_uint16_t+0xb8>
 8012286:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801228a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801228e:	7019      	strb	r1, [r3, #0]
 8012290:	68a3      	ldr	r3, [r4, #8]
 8012292:	705a      	strb	r2, [r3, #1]
 8012294:	2102      	movs	r1, #2
 8012296:	68a2      	ldr	r2, [r4, #8]
 8012298:	6923      	ldr	r3, [r4, #16]
 801229a:	440a      	add	r2, r1
 801229c:	7561      	strb	r1, [r4, #21]
 801229e:	440b      	add	r3, r1
 80122a0:	60a2      	str	r2, [r4, #8]
 80122a2:	6123      	str	r3, [r4, #16]
 80122a4:	7da0      	ldrb	r0, [r4, #22]
 80122a6:	f080 0001 	eor.w	r0, r0, #1
 80122aa:	b003      	add	sp, #12
 80122ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80122b4:	801a      	strh	r2, [r3, #0]
 80122b6:	e7ed      	b.n	8012294 <ucdr_serialize_endian_uint16_t+0x9c>
 80122b8:	68a2      	ldr	r2, [r4, #8]
 80122ba:	6923      	ldr	r3, [r4, #16]
 80122bc:	7da0      	ldrb	r0, [r4, #22]
 80122be:	1b92      	subs	r2, r2, r6
 80122c0:	1b9b      	subs	r3, r3, r6
 80122c2:	f884 8015 	strb.w	r8, [r4, #21]
 80122c6:	f080 0001 	eor.w	r0, r0, #1
 80122ca:	60a2      	str	r2, [r4, #8]
 80122cc:	6123      	str	r3, [r4, #16]
 80122ce:	b003      	add	sp, #12
 80122d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122d4:	68a3      	ldr	r3, [r4, #8]
 80122d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80122da:	701a      	strb	r2, [r3, #0]
 80122dc:	e7bc      	b.n	8012258 <ucdr_serialize_endian_uint16_t+0x60>
 80122de:	f10d 0506 	add.w	r5, sp, #6
 80122e2:	4632      	mov	r2, r6
 80122e4:	4638      	mov	r0, r7
 80122e6:	4629      	mov	r1, r5
 80122e8:	f00e ffe9 	bl	80212be <memcpy>
 80122ec:	464a      	mov	r2, r9
 80122ee:	19a9      	adds	r1, r5, r6
 80122f0:	68a0      	ldr	r0, [r4, #8]
 80122f2:	f00e ffe4 	bl	80212be <memcpy>
 80122f6:	e7af      	b.n	8012258 <ucdr_serialize_endian_uint16_t+0x60>

080122f8 <ucdr_deserialize_uint16_t>:
 80122f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122fc:	4604      	mov	r4, r0
 80122fe:	460d      	mov	r5, r1
 8012300:	2102      	movs	r1, #2
 8012302:	f001 f9b1 	bl	8013668 <ucdr_buffer_alignment>
 8012306:	4601      	mov	r1, r0
 8012308:	4620      	mov	r0, r4
 801230a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801230e:	f001 f9f3 	bl	80136f8 <ucdr_advance_buffer>
 8012312:	2102      	movs	r1, #2
 8012314:	4620      	mov	r0, r4
 8012316:	f001 f947 	bl	80135a8 <ucdr_check_buffer_available_for>
 801231a:	bb60      	cbnz	r0, 8012376 <ucdr_deserialize_uint16_t+0x7e>
 801231c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012320:	42be      	cmp	r6, r7
 8012322:	d923      	bls.n	801236c <ucdr_deserialize_uint16_t+0x74>
 8012324:	6923      	ldr	r3, [r4, #16]
 8012326:	4620      	mov	r0, r4
 8012328:	60a6      	str	r6, [r4, #8]
 801232a:	1bf6      	subs	r6, r6, r7
 801232c:	4433      	add	r3, r6
 801232e:	f1c6 0902 	rsb	r9, r6, #2
 8012332:	6123      	str	r3, [r4, #16]
 8012334:	4649      	mov	r1, r9
 8012336:	f001 f943 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 801233a:	2800      	cmp	r0, #0
 801233c:	d034      	beq.n	80123a8 <ucdr_deserialize_uint16_t+0xb0>
 801233e:	7d23      	ldrb	r3, [r4, #20]
 8012340:	2b01      	cmp	r3, #1
 8012342:	d042      	beq.n	80123ca <ucdr_deserialize_uint16_t+0xd2>
 8012344:	787b      	ldrb	r3, [r7, #1]
 8012346:	702b      	strb	r3, [r5, #0]
 8012348:	2e00      	cmp	r6, #0
 801234a:	d03a      	beq.n	80123c2 <ucdr_deserialize_uint16_t+0xca>
 801234c:	783b      	ldrb	r3, [r7, #0]
 801234e:	706b      	strb	r3, [r5, #1]
 8012350:	6923      	ldr	r3, [r4, #16]
 8012352:	2102      	movs	r1, #2
 8012354:	68a2      	ldr	r2, [r4, #8]
 8012356:	3302      	adds	r3, #2
 8012358:	7da0      	ldrb	r0, [r4, #22]
 801235a:	444a      	add	r2, r9
 801235c:	7561      	strb	r1, [r4, #21]
 801235e:	1b9b      	subs	r3, r3, r6
 8012360:	f080 0001 	eor.w	r0, r0, #1
 8012364:	60a2      	str	r2, [r4, #8]
 8012366:	6123      	str	r3, [r4, #16]
 8012368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801236c:	2102      	movs	r1, #2
 801236e:	4620      	mov	r0, r4
 8012370:	f001 f926 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012374:	b180      	cbz	r0, 8012398 <ucdr_deserialize_uint16_t+0xa0>
 8012376:	7d23      	ldrb	r3, [r4, #20]
 8012378:	2b01      	cmp	r3, #1
 801237a:	68a3      	ldr	r3, [r4, #8]
 801237c:	d011      	beq.n	80123a2 <ucdr_deserialize_uint16_t+0xaa>
 801237e:	785b      	ldrb	r3, [r3, #1]
 8012380:	702b      	strb	r3, [r5, #0]
 8012382:	68a3      	ldr	r3, [r4, #8]
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	706b      	strb	r3, [r5, #1]
 8012388:	2102      	movs	r1, #2
 801238a:	68a2      	ldr	r2, [r4, #8]
 801238c:	6923      	ldr	r3, [r4, #16]
 801238e:	440a      	add	r2, r1
 8012390:	7561      	strb	r1, [r4, #21]
 8012392:	440b      	add	r3, r1
 8012394:	60a2      	str	r2, [r4, #8]
 8012396:	6123      	str	r3, [r4, #16]
 8012398:	7da0      	ldrb	r0, [r4, #22]
 801239a:	f080 0001 	eor.w	r0, r0, #1
 801239e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	802b      	strh	r3, [r5, #0]
 80123a6:	e7ef      	b.n	8012388 <ucdr_deserialize_uint16_t+0x90>
 80123a8:	68a2      	ldr	r2, [r4, #8]
 80123aa:	6923      	ldr	r3, [r4, #16]
 80123ac:	1b92      	subs	r2, r2, r6
 80123ae:	7da0      	ldrb	r0, [r4, #22]
 80123b0:	1b9b      	subs	r3, r3, r6
 80123b2:	f884 8015 	strb.w	r8, [r4, #21]
 80123b6:	f080 0001 	eor.w	r0, r0, #1
 80123ba:	60a2      	str	r2, [r4, #8]
 80123bc:	6123      	str	r3, [r4, #16]
 80123be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123c2:	68a3      	ldr	r3, [r4, #8]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	706b      	strb	r3, [r5, #1]
 80123c8:	e7c2      	b.n	8012350 <ucdr_deserialize_uint16_t+0x58>
 80123ca:	4639      	mov	r1, r7
 80123cc:	4632      	mov	r2, r6
 80123ce:	4628      	mov	r0, r5
 80123d0:	f00e ff75 	bl	80212be <memcpy>
 80123d4:	464a      	mov	r2, r9
 80123d6:	19a8      	adds	r0, r5, r6
 80123d8:	68a1      	ldr	r1, [r4, #8]
 80123da:	f00e ff70 	bl	80212be <memcpy>
 80123de:	e7b7      	b.n	8012350 <ucdr_deserialize_uint16_t+0x58>

080123e0 <ucdr_deserialize_endian_uint16_t>:
 80123e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123e4:	4604      	mov	r4, r0
 80123e6:	460e      	mov	r6, r1
 80123e8:	2102      	movs	r1, #2
 80123ea:	4615      	mov	r5, r2
 80123ec:	f001 f93c 	bl	8013668 <ucdr_buffer_alignment>
 80123f0:	4601      	mov	r1, r0
 80123f2:	4620      	mov	r0, r4
 80123f4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80123f8:	f001 f97e 	bl	80136f8 <ucdr_advance_buffer>
 80123fc:	2102      	movs	r1, #2
 80123fe:	4620      	mov	r0, r4
 8012400:	f001 f8d2 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012404:	bb70      	cbnz	r0, 8012464 <ucdr_deserialize_endian_uint16_t+0x84>
 8012406:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801240a:	454f      	cmp	r7, r9
 801240c:	d925      	bls.n	801245a <ucdr_deserialize_endian_uint16_t+0x7a>
 801240e:	6923      	ldr	r3, [r4, #16]
 8012410:	4620      	mov	r0, r4
 8012412:	60a7      	str	r7, [r4, #8]
 8012414:	eba7 0709 	sub.w	r7, r7, r9
 8012418:	443b      	add	r3, r7
 801241a:	f1c7 0a02 	rsb	sl, r7, #2
 801241e:	6123      	str	r3, [r4, #16]
 8012420:	4651      	mov	r1, sl
 8012422:	f001 f8cd 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012426:	2800      	cmp	r0, #0
 8012428:	d034      	beq.n	8012494 <ucdr_deserialize_endian_uint16_t+0xb4>
 801242a:	2e01      	cmp	r6, #1
 801242c:	d043      	beq.n	80124b6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801242e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012432:	702b      	strb	r3, [r5, #0]
 8012434:	2f00      	cmp	r7, #0
 8012436:	d03a      	beq.n	80124ae <ucdr_deserialize_endian_uint16_t+0xce>
 8012438:	f899 3000 	ldrb.w	r3, [r9]
 801243c:	706b      	strb	r3, [r5, #1]
 801243e:	6923      	ldr	r3, [r4, #16]
 8012440:	2102      	movs	r1, #2
 8012442:	68a2      	ldr	r2, [r4, #8]
 8012444:	3302      	adds	r3, #2
 8012446:	7da0      	ldrb	r0, [r4, #22]
 8012448:	4452      	add	r2, sl
 801244a:	7561      	strb	r1, [r4, #21]
 801244c:	1bdb      	subs	r3, r3, r7
 801244e:	f080 0001 	eor.w	r0, r0, #1
 8012452:	60a2      	str	r2, [r4, #8]
 8012454:	6123      	str	r3, [r4, #16]
 8012456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245a:	2102      	movs	r1, #2
 801245c:	4620      	mov	r0, r4
 801245e:	f001 f8af 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012462:	b178      	cbz	r0, 8012484 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012464:	2e01      	cmp	r6, #1
 8012466:	68a3      	ldr	r3, [r4, #8]
 8012468:	d011      	beq.n	801248e <ucdr_deserialize_endian_uint16_t+0xae>
 801246a:	785b      	ldrb	r3, [r3, #1]
 801246c:	702b      	strb	r3, [r5, #0]
 801246e:	68a3      	ldr	r3, [r4, #8]
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	706b      	strb	r3, [r5, #1]
 8012474:	2102      	movs	r1, #2
 8012476:	68a2      	ldr	r2, [r4, #8]
 8012478:	6923      	ldr	r3, [r4, #16]
 801247a:	440a      	add	r2, r1
 801247c:	7561      	strb	r1, [r4, #21]
 801247e:	440b      	add	r3, r1
 8012480:	60a2      	str	r2, [r4, #8]
 8012482:	6123      	str	r3, [r4, #16]
 8012484:	7da0      	ldrb	r0, [r4, #22]
 8012486:	f080 0001 	eor.w	r0, r0, #1
 801248a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	802b      	strh	r3, [r5, #0]
 8012492:	e7ef      	b.n	8012474 <ucdr_deserialize_endian_uint16_t+0x94>
 8012494:	68a2      	ldr	r2, [r4, #8]
 8012496:	6923      	ldr	r3, [r4, #16]
 8012498:	1bd2      	subs	r2, r2, r7
 801249a:	7da0      	ldrb	r0, [r4, #22]
 801249c:	1bdb      	subs	r3, r3, r7
 801249e:	f884 8015 	strb.w	r8, [r4, #21]
 80124a2:	f080 0001 	eor.w	r0, r0, #1
 80124a6:	60a2      	str	r2, [r4, #8]
 80124a8:	6123      	str	r3, [r4, #16]
 80124aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ae:	68a3      	ldr	r3, [r4, #8]
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	706b      	strb	r3, [r5, #1]
 80124b4:	e7c3      	b.n	801243e <ucdr_deserialize_endian_uint16_t+0x5e>
 80124b6:	4649      	mov	r1, r9
 80124b8:	463a      	mov	r2, r7
 80124ba:	4628      	mov	r0, r5
 80124bc:	f00e feff 	bl	80212be <memcpy>
 80124c0:	4652      	mov	r2, sl
 80124c2:	19e8      	adds	r0, r5, r7
 80124c4:	68a1      	ldr	r1, [r4, #8]
 80124c6:	f00e fefa 	bl	80212be <memcpy>
 80124ca:	e7b8      	b.n	801243e <ucdr_deserialize_endian_uint16_t+0x5e>

080124cc <ucdr_serialize_uint32_t>:
 80124cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d0:	b082      	sub	sp, #8
 80124d2:	4604      	mov	r4, r0
 80124d4:	9101      	str	r1, [sp, #4]
 80124d6:	2104      	movs	r1, #4
 80124d8:	f001 f8c6 	bl	8013668 <ucdr_buffer_alignment>
 80124dc:	4601      	mov	r1, r0
 80124de:	4620      	mov	r0, r4
 80124e0:	7d67      	ldrb	r7, [r4, #21]
 80124e2:	f001 f909 	bl	80136f8 <ucdr_advance_buffer>
 80124e6:	2104      	movs	r1, #4
 80124e8:	4620      	mov	r0, r4
 80124ea:	f001 f85d 	bl	80135a8 <ucdr_check_buffer_available_for>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d139      	bne.n	8012566 <ucdr_serialize_uint32_t+0x9a>
 80124f2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80124f6:	42ab      	cmp	r3, r5
 80124f8:	d930      	bls.n	801255c <ucdr_serialize_uint32_t+0x90>
 80124fa:	1b5e      	subs	r6, r3, r5
 80124fc:	60a3      	str	r3, [r4, #8]
 80124fe:	6923      	ldr	r3, [r4, #16]
 8012500:	4620      	mov	r0, r4
 8012502:	f1c6 0804 	rsb	r8, r6, #4
 8012506:	4433      	add	r3, r6
 8012508:	4641      	mov	r1, r8
 801250a:	6123      	str	r3, [r4, #16]
 801250c:	f001 f858 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012510:	2800      	cmp	r0, #0
 8012512:	d04c      	beq.n	80125ae <ucdr_serialize_uint32_t+0xe2>
 8012514:	7d23      	ldrb	r3, [r4, #20]
 8012516:	2b01      	cmp	r3, #1
 8012518:	d063      	beq.n	80125e2 <ucdr_serialize_uint32_t+0x116>
 801251a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801251e:	702b      	strb	r3, [r5, #0]
 8012520:	2e00      	cmp	r6, #0
 8012522:	d051      	beq.n	80125c8 <ucdr_serialize_uint32_t+0xfc>
 8012524:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012528:	2e01      	cmp	r6, #1
 801252a:	706b      	strb	r3, [r5, #1]
 801252c:	d050      	beq.n	80125d0 <ucdr_serialize_uint32_t+0x104>
 801252e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012532:	2e02      	cmp	r6, #2
 8012534:	70ab      	strb	r3, [r5, #2]
 8012536:	d04f      	beq.n	80125d8 <ucdr_serialize_uint32_t+0x10c>
 8012538:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801253c:	70eb      	strb	r3, [r5, #3]
 801253e:	6923      	ldr	r3, [r4, #16]
 8012540:	2104      	movs	r1, #4
 8012542:	68a2      	ldr	r2, [r4, #8]
 8012544:	3304      	adds	r3, #4
 8012546:	7da0      	ldrb	r0, [r4, #22]
 8012548:	4442      	add	r2, r8
 801254a:	7561      	strb	r1, [r4, #21]
 801254c:	1b9e      	subs	r6, r3, r6
 801254e:	f080 0001 	eor.w	r0, r0, #1
 8012552:	60a2      	str	r2, [r4, #8]
 8012554:	6126      	str	r6, [r4, #16]
 8012556:	b002      	add	sp, #8
 8012558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801255c:	2104      	movs	r1, #4
 801255e:	4620      	mov	r0, r4
 8012560:	f001 f82e 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012564:	b1d0      	cbz	r0, 801259c <ucdr_serialize_uint32_t+0xd0>
 8012566:	7d23      	ldrb	r3, [r4, #20]
 8012568:	2b01      	cmp	r3, #1
 801256a:	68a3      	ldr	r3, [r4, #8]
 801256c:	d01c      	beq.n	80125a8 <ucdr_serialize_uint32_t+0xdc>
 801256e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012572:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012576:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801257a:	7018      	strb	r0, [r3, #0]
 801257c:	68a3      	ldr	r3, [r4, #8]
 801257e:	705a      	strb	r2, [r3, #1]
 8012580:	68a3      	ldr	r3, [r4, #8]
 8012582:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012586:	7099      	strb	r1, [r3, #2]
 8012588:	68a3      	ldr	r3, [r4, #8]
 801258a:	70da      	strb	r2, [r3, #3]
 801258c:	2104      	movs	r1, #4
 801258e:	68a2      	ldr	r2, [r4, #8]
 8012590:	6923      	ldr	r3, [r4, #16]
 8012592:	440a      	add	r2, r1
 8012594:	7561      	strb	r1, [r4, #21]
 8012596:	440b      	add	r3, r1
 8012598:	60a2      	str	r2, [r4, #8]
 801259a:	6123      	str	r3, [r4, #16]
 801259c:	7da0      	ldrb	r0, [r4, #22]
 801259e:	f080 0001 	eor.w	r0, r0, #1
 80125a2:	b002      	add	sp, #8
 80125a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a8:	9a01      	ldr	r2, [sp, #4]
 80125aa:	601a      	str	r2, [r3, #0]
 80125ac:	e7ee      	b.n	801258c <ucdr_serialize_uint32_t+0xc0>
 80125ae:	68a2      	ldr	r2, [r4, #8]
 80125b0:	6923      	ldr	r3, [r4, #16]
 80125b2:	7da0      	ldrb	r0, [r4, #22]
 80125b4:	1b92      	subs	r2, r2, r6
 80125b6:	1b9b      	subs	r3, r3, r6
 80125b8:	7567      	strb	r7, [r4, #21]
 80125ba:	f080 0001 	eor.w	r0, r0, #1
 80125be:	60a2      	str	r2, [r4, #8]
 80125c0:	6123      	str	r3, [r4, #16]
 80125c2:	b002      	add	sp, #8
 80125c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c8:	68a3      	ldr	r3, [r4, #8]
 80125ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125ce:	701a      	strb	r2, [r3, #0]
 80125d0:	68a3      	ldr	r3, [r4, #8]
 80125d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125d6:	701a      	strb	r2, [r3, #0]
 80125d8:	68a3      	ldr	r3, [r4, #8]
 80125da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125de:	701a      	strb	r2, [r3, #0]
 80125e0:	e7ad      	b.n	801253e <ucdr_serialize_uint32_t+0x72>
 80125e2:	4628      	mov	r0, r5
 80125e4:	ad01      	add	r5, sp, #4
 80125e6:	4632      	mov	r2, r6
 80125e8:	4629      	mov	r1, r5
 80125ea:	f00e fe68 	bl	80212be <memcpy>
 80125ee:	4642      	mov	r2, r8
 80125f0:	19a9      	adds	r1, r5, r6
 80125f2:	68a0      	ldr	r0, [r4, #8]
 80125f4:	f00e fe63 	bl	80212be <memcpy>
 80125f8:	e7a1      	b.n	801253e <ucdr_serialize_uint32_t+0x72>
 80125fa:	bf00      	nop

080125fc <ucdr_serialize_endian_uint32_t>:
 80125fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012600:	4604      	mov	r4, r0
 8012602:	b083      	sub	sp, #12
 8012604:	460d      	mov	r5, r1
 8012606:	2104      	movs	r1, #4
 8012608:	9201      	str	r2, [sp, #4]
 801260a:	f001 f82d 	bl	8013668 <ucdr_buffer_alignment>
 801260e:	4601      	mov	r1, r0
 8012610:	4620      	mov	r0, r4
 8012612:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012616:	f001 f86f 	bl	80136f8 <ucdr_advance_buffer>
 801261a:	2104      	movs	r1, #4
 801261c:	4620      	mov	r0, r4
 801261e:	f000 ffc3 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012622:	2800      	cmp	r0, #0
 8012624:	d138      	bne.n	8012698 <ucdr_serialize_endian_uint32_t+0x9c>
 8012626:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801262a:	42b7      	cmp	r7, r6
 801262c:	d92f      	bls.n	801268e <ucdr_serialize_endian_uint32_t+0x92>
 801262e:	6923      	ldr	r3, [r4, #16]
 8012630:	4620      	mov	r0, r4
 8012632:	60a7      	str	r7, [r4, #8]
 8012634:	1bbf      	subs	r7, r7, r6
 8012636:	443b      	add	r3, r7
 8012638:	f1c7 0904 	rsb	r9, r7, #4
 801263c:	6123      	str	r3, [r4, #16]
 801263e:	4649      	mov	r1, r9
 8012640:	f000 ffbe 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012644:	2800      	cmp	r0, #0
 8012646:	d04a      	beq.n	80126de <ucdr_serialize_endian_uint32_t+0xe2>
 8012648:	2d01      	cmp	r5, #1
 801264a:	d063      	beq.n	8012714 <ucdr_serialize_endian_uint32_t+0x118>
 801264c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012650:	7033      	strb	r3, [r6, #0]
 8012652:	2f00      	cmp	r7, #0
 8012654:	d051      	beq.n	80126fa <ucdr_serialize_endian_uint32_t+0xfe>
 8012656:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801265a:	2f01      	cmp	r7, #1
 801265c:	7073      	strb	r3, [r6, #1]
 801265e:	d050      	beq.n	8012702 <ucdr_serialize_endian_uint32_t+0x106>
 8012660:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012664:	2f02      	cmp	r7, #2
 8012666:	70b3      	strb	r3, [r6, #2]
 8012668:	d04f      	beq.n	801270a <ucdr_serialize_endian_uint32_t+0x10e>
 801266a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801266e:	70f3      	strb	r3, [r6, #3]
 8012670:	6923      	ldr	r3, [r4, #16]
 8012672:	2104      	movs	r1, #4
 8012674:	68a2      	ldr	r2, [r4, #8]
 8012676:	7da0      	ldrb	r0, [r4, #22]
 8012678:	3304      	adds	r3, #4
 801267a:	444a      	add	r2, r9
 801267c:	7561      	strb	r1, [r4, #21]
 801267e:	1bdb      	subs	r3, r3, r7
 8012680:	f080 0001 	eor.w	r0, r0, #1
 8012684:	60a2      	str	r2, [r4, #8]
 8012686:	6123      	str	r3, [r4, #16]
 8012688:	b003      	add	sp, #12
 801268a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801268e:	2104      	movs	r1, #4
 8012690:	4620      	mov	r0, r4
 8012692:	f000 ff95 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012696:	b1c8      	cbz	r0, 80126cc <ucdr_serialize_endian_uint32_t+0xd0>
 8012698:	2d01      	cmp	r5, #1
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	d01c      	beq.n	80126d8 <ucdr_serialize_endian_uint32_t+0xdc>
 801269e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80126a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80126a6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80126aa:	7018      	strb	r0, [r3, #0]
 80126ac:	68a3      	ldr	r3, [r4, #8]
 80126ae:	705a      	strb	r2, [r3, #1]
 80126b0:	68a3      	ldr	r3, [r4, #8]
 80126b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80126b6:	7099      	strb	r1, [r3, #2]
 80126b8:	68a3      	ldr	r3, [r4, #8]
 80126ba:	70da      	strb	r2, [r3, #3]
 80126bc:	2104      	movs	r1, #4
 80126be:	68a2      	ldr	r2, [r4, #8]
 80126c0:	6923      	ldr	r3, [r4, #16]
 80126c2:	440a      	add	r2, r1
 80126c4:	7561      	strb	r1, [r4, #21]
 80126c6:	440b      	add	r3, r1
 80126c8:	60a2      	str	r2, [r4, #8]
 80126ca:	6123      	str	r3, [r4, #16]
 80126cc:	7da0      	ldrb	r0, [r4, #22]
 80126ce:	f080 0001 	eor.w	r0, r0, #1
 80126d2:	b003      	add	sp, #12
 80126d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126d8:	9a01      	ldr	r2, [sp, #4]
 80126da:	601a      	str	r2, [r3, #0]
 80126dc:	e7ee      	b.n	80126bc <ucdr_serialize_endian_uint32_t+0xc0>
 80126de:	68a2      	ldr	r2, [r4, #8]
 80126e0:	6923      	ldr	r3, [r4, #16]
 80126e2:	7da0      	ldrb	r0, [r4, #22]
 80126e4:	1bd2      	subs	r2, r2, r7
 80126e6:	1bdb      	subs	r3, r3, r7
 80126e8:	f884 8015 	strb.w	r8, [r4, #21]
 80126ec:	f080 0001 	eor.w	r0, r0, #1
 80126f0:	60a2      	str	r2, [r4, #8]
 80126f2:	6123      	str	r3, [r4, #16]
 80126f4:	b003      	add	sp, #12
 80126f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126fa:	68a3      	ldr	r3, [r4, #8]
 80126fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012700:	701a      	strb	r2, [r3, #0]
 8012702:	68a3      	ldr	r3, [r4, #8]
 8012704:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012708:	701a      	strb	r2, [r3, #0]
 801270a:	68a3      	ldr	r3, [r4, #8]
 801270c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012710:	701a      	strb	r2, [r3, #0]
 8012712:	e7ad      	b.n	8012670 <ucdr_serialize_endian_uint32_t+0x74>
 8012714:	ad01      	add	r5, sp, #4
 8012716:	463a      	mov	r2, r7
 8012718:	4630      	mov	r0, r6
 801271a:	4629      	mov	r1, r5
 801271c:	f00e fdcf 	bl	80212be <memcpy>
 8012720:	464a      	mov	r2, r9
 8012722:	19e9      	adds	r1, r5, r7
 8012724:	68a0      	ldr	r0, [r4, #8]
 8012726:	f00e fdca 	bl	80212be <memcpy>
 801272a:	e7a1      	b.n	8012670 <ucdr_serialize_endian_uint32_t+0x74>

0801272c <ucdr_deserialize_uint32_t>:
 801272c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012730:	4604      	mov	r4, r0
 8012732:	460d      	mov	r5, r1
 8012734:	2104      	movs	r1, #4
 8012736:	f000 ff97 	bl	8013668 <ucdr_buffer_alignment>
 801273a:	4601      	mov	r1, r0
 801273c:	4620      	mov	r0, r4
 801273e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012742:	f000 ffd9 	bl	80136f8 <ucdr_advance_buffer>
 8012746:	2104      	movs	r1, #4
 8012748:	4620      	mov	r0, r4
 801274a:	f000 ff2d 	bl	80135a8 <ucdr_check_buffer_available_for>
 801274e:	2800      	cmp	r0, #0
 8012750:	d138      	bne.n	80127c4 <ucdr_deserialize_uint32_t+0x98>
 8012752:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012756:	42b7      	cmp	r7, r6
 8012758:	d92f      	bls.n	80127ba <ucdr_deserialize_uint32_t+0x8e>
 801275a:	6923      	ldr	r3, [r4, #16]
 801275c:	4620      	mov	r0, r4
 801275e:	60a7      	str	r7, [r4, #8]
 8012760:	1bbf      	subs	r7, r7, r6
 8012762:	443b      	add	r3, r7
 8012764:	f1c7 0904 	rsb	r9, r7, #4
 8012768:	6123      	str	r3, [r4, #16]
 801276a:	4649      	mov	r1, r9
 801276c:	f000 ff28 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012770:	2800      	cmp	r0, #0
 8012772:	d046      	beq.n	8012802 <ucdr_deserialize_uint32_t+0xd6>
 8012774:	7d23      	ldrb	r3, [r4, #20]
 8012776:	2b01      	cmp	r3, #1
 8012778:	d05c      	beq.n	8012834 <ucdr_deserialize_uint32_t+0x108>
 801277a:	78f3      	ldrb	r3, [r6, #3]
 801277c:	702b      	strb	r3, [r5, #0]
 801277e:	2f00      	cmp	r7, #0
 8012780:	d04c      	beq.n	801281c <ucdr_deserialize_uint32_t+0xf0>
 8012782:	78b3      	ldrb	r3, [r6, #2]
 8012784:	2f01      	cmp	r7, #1
 8012786:	706b      	strb	r3, [r5, #1]
 8012788:	f105 0302 	add.w	r3, r5, #2
 801278c:	d04a      	beq.n	8012824 <ucdr_deserialize_uint32_t+0xf8>
 801278e:	7873      	ldrb	r3, [r6, #1]
 8012790:	2f02      	cmp	r7, #2
 8012792:	70ab      	strb	r3, [r5, #2]
 8012794:	f105 0303 	add.w	r3, r5, #3
 8012798:	d048      	beq.n	801282c <ucdr_deserialize_uint32_t+0x100>
 801279a:	7833      	ldrb	r3, [r6, #0]
 801279c:	70eb      	strb	r3, [r5, #3]
 801279e:	6923      	ldr	r3, [r4, #16]
 80127a0:	2104      	movs	r1, #4
 80127a2:	68a2      	ldr	r2, [r4, #8]
 80127a4:	3304      	adds	r3, #4
 80127a6:	7da0      	ldrb	r0, [r4, #22]
 80127a8:	444a      	add	r2, r9
 80127aa:	7561      	strb	r1, [r4, #21]
 80127ac:	1bdb      	subs	r3, r3, r7
 80127ae:	f080 0001 	eor.w	r0, r0, #1
 80127b2:	60a2      	str	r2, [r4, #8]
 80127b4:	6123      	str	r3, [r4, #16]
 80127b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ba:	2104      	movs	r1, #4
 80127bc:	4620      	mov	r0, r4
 80127be:	f000 feff 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80127c2:	b1b0      	cbz	r0, 80127f2 <ucdr_deserialize_uint32_t+0xc6>
 80127c4:	7d23      	ldrb	r3, [r4, #20]
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	68a3      	ldr	r3, [r4, #8]
 80127ca:	d017      	beq.n	80127fc <ucdr_deserialize_uint32_t+0xd0>
 80127cc:	78db      	ldrb	r3, [r3, #3]
 80127ce:	702b      	strb	r3, [r5, #0]
 80127d0:	68a3      	ldr	r3, [r4, #8]
 80127d2:	789b      	ldrb	r3, [r3, #2]
 80127d4:	706b      	strb	r3, [r5, #1]
 80127d6:	68a3      	ldr	r3, [r4, #8]
 80127d8:	785b      	ldrb	r3, [r3, #1]
 80127da:	70ab      	strb	r3, [r5, #2]
 80127dc:	68a3      	ldr	r3, [r4, #8]
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	70eb      	strb	r3, [r5, #3]
 80127e2:	2104      	movs	r1, #4
 80127e4:	68a2      	ldr	r2, [r4, #8]
 80127e6:	6923      	ldr	r3, [r4, #16]
 80127e8:	440a      	add	r2, r1
 80127ea:	7561      	strb	r1, [r4, #21]
 80127ec:	440b      	add	r3, r1
 80127ee:	60a2      	str	r2, [r4, #8]
 80127f0:	6123      	str	r3, [r4, #16]
 80127f2:	7da0      	ldrb	r0, [r4, #22]
 80127f4:	f080 0001 	eor.w	r0, r0, #1
 80127f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	602b      	str	r3, [r5, #0]
 8012800:	e7ef      	b.n	80127e2 <ucdr_deserialize_uint32_t+0xb6>
 8012802:	68a2      	ldr	r2, [r4, #8]
 8012804:	6923      	ldr	r3, [r4, #16]
 8012806:	1bd2      	subs	r2, r2, r7
 8012808:	7da0      	ldrb	r0, [r4, #22]
 801280a:	1bdb      	subs	r3, r3, r7
 801280c:	f884 8015 	strb.w	r8, [r4, #21]
 8012810:	f080 0001 	eor.w	r0, r0, #1
 8012814:	60a2      	str	r2, [r4, #8]
 8012816:	6123      	str	r3, [r4, #16]
 8012818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801281c:	68a3      	ldr	r3, [r4, #8]
 801281e:	789b      	ldrb	r3, [r3, #2]
 8012820:	706b      	strb	r3, [r5, #1]
 8012822:	1cab      	adds	r3, r5, #2
 8012824:	68a2      	ldr	r2, [r4, #8]
 8012826:	7852      	ldrb	r2, [r2, #1]
 8012828:	f803 2b01 	strb.w	r2, [r3], #1
 801282c:	68a2      	ldr	r2, [r4, #8]
 801282e:	7812      	ldrb	r2, [r2, #0]
 8012830:	701a      	strb	r2, [r3, #0]
 8012832:	e7b4      	b.n	801279e <ucdr_deserialize_uint32_t+0x72>
 8012834:	4631      	mov	r1, r6
 8012836:	463a      	mov	r2, r7
 8012838:	4628      	mov	r0, r5
 801283a:	f00e fd40 	bl	80212be <memcpy>
 801283e:	464a      	mov	r2, r9
 8012840:	19e8      	adds	r0, r5, r7
 8012842:	68a1      	ldr	r1, [r4, #8]
 8012844:	f00e fd3b 	bl	80212be <memcpy>
 8012848:	e7a9      	b.n	801279e <ucdr_deserialize_uint32_t+0x72>
 801284a:	bf00      	nop

0801284c <ucdr_deserialize_endian_uint32_t>:
 801284c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012850:	4604      	mov	r4, r0
 8012852:	460e      	mov	r6, r1
 8012854:	2104      	movs	r1, #4
 8012856:	4615      	mov	r5, r2
 8012858:	f000 ff06 	bl	8013668 <ucdr_buffer_alignment>
 801285c:	4601      	mov	r1, r0
 801285e:	4620      	mov	r0, r4
 8012860:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012864:	f000 ff48 	bl	80136f8 <ucdr_advance_buffer>
 8012868:	2104      	movs	r1, #4
 801286a:	4620      	mov	r0, r4
 801286c:	f000 fe9c 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012870:	2800      	cmp	r0, #0
 8012872:	d13c      	bne.n	80128ee <ucdr_deserialize_endian_uint32_t+0xa2>
 8012874:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012878:	42bb      	cmp	r3, r7
 801287a:	d933      	bls.n	80128e4 <ucdr_deserialize_endian_uint32_t+0x98>
 801287c:	eba3 0907 	sub.w	r9, r3, r7
 8012880:	60a3      	str	r3, [r4, #8]
 8012882:	6923      	ldr	r3, [r4, #16]
 8012884:	4620      	mov	r0, r4
 8012886:	f1c9 0a04 	rsb	sl, r9, #4
 801288a:	444b      	add	r3, r9
 801288c:	4651      	mov	r1, sl
 801288e:	6123      	str	r3, [r4, #16]
 8012890:	f000 fe96 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012894:	2800      	cmp	r0, #0
 8012896:	d048      	beq.n	801292a <ucdr_deserialize_endian_uint32_t+0xde>
 8012898:	2e01      	cmp	r6, #1
 801289a:	d061      	beq.n	8012960 <ucdr_deserialize_endian_uint32_t+0x114>
 801289c:	78fb      	ldrb	r3, [r7, #3]
 801289e:	702b      	strb	r3, [r5, #0]
 80128a0:	f1b9 0f00 	cmp.w	r9, #0
 80128a4:	d050      	beq.n	8012948 <ucdr_deserialize_endian_uint32_t+0xfc>
 80128a6:	78bb      	ldrb	r3, [r7, #2]
 80128a8:	f1b9 0f01 	cmp.w	r9, #1
 80128ac:	706b      	strb	r3, [r5, #1]
 80128ae:	f105 0302 	add.w	r3, r5, #2
 80128b2:	d04d      	beq.n	8012950 <ucdr_deserialize_endian_uint32_t+0x104>
 80128b4:	787b      	ldrb	r3, [r7, #1]
 80128b6:	f1b9 0f02 	cmp.w	r9, #2
 80128ba:	70ab      	strb	r3, [r5, #2]
 80128bc:	f105 0303 	add.w	r3, r5, #3
 80128c0:	d04a      	beq.n	8012958 <ucdr_deserialize_endian_uint32_t+0x10c>
 80128c2:	783b      	ldrb	r3, [r7, #0]
 80128c4:	70eb      	strb	r3, [r5, #3]
 80128c6:	6923      	ldr	r3, [r4, #16]
 80128c8:	2104      	movs	r1, #4
 80128ca:	68a2      	ldr	r2, [r4, #8]
 80128cc:	3304      	adds	r3, #4
 80128ce:	7da0      	ldrb	r0, [r4, #22]
 80128d0:	4452      	add	r2, sl
 80128d2:	7561      	strb	r1, [r4, #21]
 80128d4:	eba3 0309 	sub.w	r3, r3, r9
 80128d8:	f080 0001 	eor.w	r0, r0, #1
 80128dc:	60a2      	str	r2, [r4, #8]
 80128de:	6123      	str	r3, [r4, #16]
 80128e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128e4:	2104      	movs	r1, #4
 80128e6:	4620      	mov	r0, r4
 80128e8:	f000 fe6a 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80128ec:	b1a8      	cbz	r0, 801291a <ucdr_deserialize_endian_uint32_t+0xce>
 80128ee:	2e01      	cmp	r6, #1
 80128f0:	68a3      	ldr	r3, [r4, #8]
 80128f2:	d017      	beq.n	8012924 <ucdr_deserialize_endian_uint32_t+0xd8>
 80128f4:	78db      	ldrb	r3, [r3, #3]
 80128f6:	702b      	strb	r3, [r5, #0]
 80128f8:	68a3      	ldr	r3, [r4, #8]
 80128fa:	789b      	ldrb	r3, [r3, #2]
 80128fc:	706b      	strb	r3, [r5, #1]
 80128fe:	68a3      	ldr	r3, [r4, #8]
 8012900:	785b      	ldrb	r3, [r3, #1]
 8012902:	70ab      	strb	r3, [r5, #2]
 8012904:	68a3      	ldr	r3, [r4, #8]
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	70eb      	strb	r3, [r5, #3]
 801290a:	2104      	movs	r1, #4
 801290c:	68a2      	ldr	r2, [r4, #8]
 801290e:	6923      	ldr	r3, [r4, #16]
 8012910:	440a      	add	r2, r1
 8012912:	7561      	strb	r1, [r4, #21]
 8012914:	440b      	add	r3, r1
 8012916:	60a2      	str	r2, [r4, #8]
 8012918:	6123      	str	r3, [r4, #16]
 801291a:	7da0      	ldrb	r0, [r4, #22]
 801291c:	f080 0001 	eor.w	r0, r0, #1
 8012920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	602b      	str	r3, [r5, #0]
 8012928:	e7ef      	b.n	801290a <ucdr_deserialize_endian_uint32_t+0xbe>
 801292a:	68a2      	ldr	r2, [r4, #8]
 801292c:	6923      	ldr	r3, [r4, #16]
 801292e:	eba2 0209 	sub.w	r2, r2, r9
 8012932:	7da0      	ldrb	r0, [r4, #22]
 8012934:	eba3 0309 	sub.w	r3, r3, r9
 8012938:	f884 8015 	strb.w	r8, [r4, #21]
 801293c:	f080 0001 	eor.w	r0, r0, #1
 8012940:	60a2      	str	r2, [r4, #8]
 8012942:	6123      	str	r3, [r4, #16]
 8012944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012948:	68a3      	ldr	r3, [r4, #8]
 801294a:	789b      	ldrb	r3, [r3, #2]
 801294c:	706b      	strb	r3, [r5, #1]
 801294e:	1cab      	adds	r3, r5, #2
 8012950:	68a2      	ldr	r2, [r4, #8]
 8012952:	7852      	ldrb	r2, [r2, #1]
 8012954:	f803 2b01 	strb.w	r2, [r3], #1
 8012958:	68a2      	ldr	r2, [r4, #8]
 801295a:	7812      	ldrb	r2, [r2, #0]
 801295c:	701a      	strb	r2, [r3, #0]
 801295e:	e7b2      	b.n	80128c6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8012960:	4639      	mov	r1, r7
 8012962:	464a      	mov	r2, r9
 8012964:	4628      	mov	r0, r5
 8012966:	f00e fcaa 	bl	80212be <memcpy>
 801296a:	4652      	mov	r2, sl
 801296c:	eb05 0009 	add.w	r0, r5, r9
 8012970:	68a1      	ldr	r1, [r4, #8]
 8012972:	f00e fca4 	bl	80212be <memcpy>
 8012976:	e7a6      	b.n	80128c6 <ucdr_deserialize_endian_uint32_t+0x7a>

08012978 <ucdr_serialize_uint64_t>:
 8012978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801297c:	4604      	mov	r4, r0
 801297e:	b082      	sub	sp, #8
 8012980:	2108      	movs	r1, #8
 8012982:	e9cd 2300 	strd	r2, r3, [sp]
 8012986:	f000 fe6f 	bl	8013668 <ucdr_buffer_alignment>
 801298a:	4601      	mov	r1, r0
 801298c:	4620      	mov	r0, r4
 801298e:	7d67      	ldrb	r7, [r4, #21]
 8012990:	f000 feb2 	bl	80136f8 <ucdr_advance_buffer>
 8012994:	2108      	movs	r1, #8
 8012996:	4620      	mov	r0, r4
 8012998:	f000 fe06 	bl	80135a8 <ucdr_check_buffer_available_for>
 801299c:	2800      	cmp	r0, #0
 801299e:	d14e      	bne.n	8012a3e <ucdr_serialize_uint64_t+0xc6>
 80129a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80129a4:	42ab      	cmp	r3, r5
 80129a6:	d945      	bls.n	8012a34 <ucdr_serialize_uint64_t+0xbc>
 80129a8:	1b5e      	subs	r6, r3, r5
 80129aa:	60a3      	str	r3, [r4, #8]
 80129ac:	6923      	ldr	r3, [r4, #16]
 80129ae:	4620      	mov	r0, r4
 80129b0:	f1c6 0808 	rsb	r8, r6, #8
 80129b4:	4433      	add	r3, r6
 80129b6:	4641      	mov	r1, r8
 80129b8:	6123      	str	r3, [r4, #16]
 80129ba:	f000 fe01 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80129be:	2800      	cmp	r0, #0
 80129c0:	d074      	beq.n	8012aac <ucdr_serialize_uint64_t+0x134>
 80129c2:	7d23      	ldrb	r3, [r4, #20]
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	f000 809b 	beq.w	8012b00 <ucdr_serialize_uint64_t+0x188>
 80129ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129ce:	702b      	strb	r3, [r5, #0]
 80129d0:	2e00      	cmp	r6, #0
 80129d2:	d078      	beq.n	8012ac6 <ucdr_serialize_uint64_t+0x14e>
 80129d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80129d8:	2e01      	cmp	r6, #1
 80129da:	706b      	strb	r3, [r5, #1]
 80129dc:	d077      	beq.n	8012ace <ucdr_serialize_uint64_t+0x156>
 80129de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129e2:	2e02      	cmp	r6, #2
 80129e4:	70ab      	strb	r3, [r5, #2]
 80129e6:	d076      	beq.n	8012ad6 <ucdr_serialize_uint64_t+0x15e>
 80129e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129ec:	2e03      	cmp	r6, #3
 80129ee:	70eb      	strb	r3, [r5, #3]
 80129f0:	d075      	beq.n	8012ade <ucdr_serialize_uint64_t+0x166>
 80129f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80129f6:	2e04      	cmp	r6, #4
 80129f8:	712b      	strb	r3, [r5, #4]
 80129fa:	d074      	beq.n	8012ae6 <ucdr_serialize_uint64_t+0x16e>
 80129fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012a00:	2e05      	cmp	r6, #5
 8012a02:	716b      	strb	r3, [r5, #5]
 8012a04:	d073      	beq.n	8012aee <ucdr_serialize_uint64_t+0x176>
 8012a06:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012a0a:	2e06      	cmp	r6, #6
 8012a0c:	71ab      	strb	r3, [r5, #6]
 8012a0e:	d072      	beq.n	8012af6 <ucdr_serialize_uint64_t+0x17e>
 8012a10:	f89d 3000 	ldrb.w	r3, [sp]
 8012a14:	71eb      	strb	r3, [r5, #7]
 8012a16:	6923      	ldr	r3, [r4, #16]
 8012a18:	2108      	movs	r1, #8
 8012a1a:	68a2      	ldr	r2, [r4, #8]
 8012a1c:	3308      	adds	r3, #8
 8012a1e:	7da0      	ldrb	r0, [r4, #22]
 8012a20:	4442      	add	r2, r8
 8012a22:	7561      	strb	r1, [r4, #21]
 8012a24:	1b9e      	subs	r6, r3, r6
 8012a26:	f080 0001 	eor.w	r0, r0, #1
 8012a2a:	60a2      	str	r2, [r4, #8]
 8012a2c:	6126      	str	r6, [r4, #16]
 8012a2e:	b002      	add	sp, #8
 8012a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a34:	2108      	movs	r1, #8
 8012a36:	4620      	mov	r0, r4
 8012a38:	f000 fdc2 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012a3c:	b350      	cbz	r0, 8012a94 <ucdr_serialize_uint64_t+0x11c>
 8012a3e:	7d23      	ldrb	r3, [r4, #20]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d02d      	beq.n	8012aa0 <ucdr_serialize_uint64_t+0x128>
 8012a44:	68a3      	ldr	r3, [r4, #8]
 8012a46:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012a4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a4e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012a52:	7018      	strb	r0, [r3, #0]
 8012a54:	68a3      	ldr	r3, [r4, #8]
 8012a56:	705a      	strb	r2, [r3, #1]
 8012a58:	68a3      	ldr	r3, [r4, #8]
 8012a5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a5e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012a62:	7099      	strb	r1, [r3, #2]
 8012a64:	68a3      	ldr	r3, [r4, #8]
 8012a66:	70da      	strb	r2, [r3, #3]
 8012a68:	68a3      	ldr	r3, [r4, #8]
 8012a6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a6e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012a72:	7118      	strb	r0, [r3, #4]
 8012a74:	68a3      	ldr	r3, [r4, #8]
 8012a76:	715a      	strb	r2, [r3, #5]
 8012a78:	68a3      	ldr	r3, [r4, #8]
 8012a7a:	f89d 2000 	ldrb.w	r2, [sp]
 8012a7e:	7199      	strb	r1, [r3, #6]
 8012a80:	68a3      	ldr	r3, [r4, #8]
 8012a82:	71da      	strb	r2, [r3, #7]
 8012a84:	2108      	movs	r1, #8
 8012a86:	68a2      	ldr	r2, [r4, #8]
 8012a88:	6923      	ldr	r3, [r4, #16]
 8012a8a:	440a      	add	r2, r1
 8012a8c:	7561      	strb	r1, [r4, #21]
 8012a8e:	440b      	add	r3, r1
 8012a90:	60a2      	str	r2, [r4, #8]
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	7da0      	ldrb	r0, [r4, #22]
 8012a96:	f080 0001 	eor.w	r0, r0, #1
 8012a9a:	b002      	add	sp, #8
 8012a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa0:	466b      	mov	r3, sp
 8012aa2:	68a2      	ldr	r2, [r4, #8]
 8012aa4:	cb03      	ldmia	r3!, {r0, r1}
 8012aa6:	6010      	str	r0, [r2, #0]
 8012aa8:	6051      	str	r1, [r2, #4]
 8012aaa:	e7eb      	b.n	8012a84 <ucdr_serialize_uint64_t+0x10c>
 8012aac:	68a2      	ldr	r2, [r4, #8]
 8012aae:	6923      	ldr	r3, [r4, #16]
 8012ab0:	7da0      	ldrb	r0, [r4, #22]
 8012ab2:	1b92      	subs	r2, r2, r6
 8012ab4:	1b9b      	subs	r3, r3, r6
 8012ab6:	7567      	strb	r7, [r4, #21]
 8012ab8:	f080 0001 	eor.w	r0, r0, #1
 8012abc:	60a2      	str	r2, [r4, #8]
 8012abe:	6123      	str	r3, [r4, #16]
 8012ac0:	b002      	add	sp, #8
 8012ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac6:	68a3      	ldr	r3, [r4, #8]
 8012ac8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012acc:	701a      	strb	r2, [r3, #0]
 8012ace:	68a3      	ldr	r3, [r4, #8]
 8012ad0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012ad4:	701a      	strb	r2, [r3, #0]
 8012ad6:	68a3      	ldr	r3, [r4, #8]
 8012ad8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012adc:	701a      	strb	r2, [r3, #0]
 8012ade:	68a3      	ldr	r3, [r4, #8]
 8012ae0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012ae4:	701a      	strb	r2, [r3, #0]
 8012ae6:	68a3      	ldr	r3, [r4, #8]
 8012ae8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012aec:	701a      	strb	r2, [r3, #0]
 8012aee:	68a3      	ldr	r3, [r4, #8]
 8012af0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012af4:	701a      	strb	r2, [r3, #0]
 8012af6:	68a3      	ldr	r3, [r4, #8]
 8012af8:	f89d 2000 	ldrb.w	r2, [sp]
 8012afc:	701a      	strb	r2, [r3, #0]
 8012afe:	e78a      	b.n	8012a16 <ucdr_serialize_uint64_t+0x9e>
 8012b00:	4628      	mov	r0, r5
 8012b02:	466d      	mov	r5, sp
 8012b04:	4632      	mov	r2, r6
 8012b06:	4629      	mov	r1, r5
 8012b08:	f00e fbd9 	bl	80212be <memcpy>
 8012b0c:	4642      	mov	r2, r8
 8012b0e:	19a9      	adds	r1, r5, r6
 8012b10:	68a0      	ldr	r0, [r4, #8]
 8012b12:	f00e fbd4 	bl	80212be <memcpy>
 8012b16:	e77e      	b.n	8012a16 <ucdr_serialize_uint64_t+0x9e>

08012b18 <ucdr_serialize_int16_t>:
 8012b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	b082      	sub	sp, #8
 8012b20:	4604      	mov	r4, r0
 8012b22:	2102      	movs	r1, #2
 8012b24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012b28:	f000 fd9e 	bl	8013668 <ucdr_buffer_alignment>
 8012b2c:	4601      	mov	r1, r0
 8012b2e:	4620      	mov	r0, r4
 8012b30:	7d67      	ldrb	r7, [r4, #21]
 8012b32:	f000 fde1 	bl	80136f8 <ucdr_advance_buffer>
 8012b36:	2102      	movs	r1, #2
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f000 fd35 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012b3e:	bb78      	cbnz	r0, 8012ba0 <ucdr_serialize_int16_t+0x88>
 8012b40:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012b44:	42ab      	cmp	r3, r5
 8012b46:	d926      	bls.n	8012b96 <ucdr_serialize_int16_t+0x7e>
 8012b48:	1b5e      	subs	r6, r3, r5
 8012b4a:	60a3      	str	r3, [r4, #8]
 8012b4c:	6923      	ldr	r3, [r4, #16]
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f1c6 0802 	rsb	r8, r6, #2
 8012b54:	4433      	add	r3, r6
 8012b56:	4641      	mov	r1, r8
 8012b58:	6123      	str	r3, [r4, #16]
 8012b5a:	f000 fd31 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d03b      	beq.n	8012bda <ucdr_serialize_int16_t+0xc2>
 8012b62:	7d23      	ldrb	r3, [r4, #20]
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d04a      	beq.n	8012bfe <ucdr_serialize_int16_t+0xe6>
 8012b68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012b6c:	702b      	strb	r3, [r5, #0]
 8012b6e:	2e00      	cmp	r6, #0
 8012b70:	d040      	beq.n	8012bf4 <ucdr_serialize_int16_t+0xdc>
 8012b72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012b76:	706b      	strb	r3, [r5, #1]
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	2102      	movs	r1, #2
 8012b7c:	68a2      	ldr	r2, [r4, #8]
 8012b7e:	3302      	adds	r3, #2
 8012b80:	7da0      	ldrb	r0, [r4, #22]
 8012b82:	4442      	add	r2, r8
 8012b84:	7561      	strb	r1, [r4, #21]
 8012b86:	1b9e      	subs	r6, r3, r6
 8012b88:	f080 0001 	eor.w	r0, r0, #1
 8012b8c:	60a2      	str	r2, [r4, #8]
 8012b8e:	6126      	str	r6, [r4, #16]
 8012b90:	b002      	add	sp, #8
 8012b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b96:	2102      	movs	r1, #2
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f000 fd11 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012b9e:	b190      	cbz	r0, 8012bc6 <ucdr_serialize_int16_t+0xae>
 8012ba0:	7d23      	ldrb	r3, [r4, #20]
 8012ba2:	2b01      	cmp	r3, #1
 8012ba4:	68a3      	ldr	r3, [r4, #8]
 8012ba6:	d014      	beq.n	8012bd2 <ucdr_serialize_int16_t+0xba>
 8012ba8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012bac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012bb0:	7019      	strb	r1, [r3, #0]
 8012bb2:	68a3      	ldr	r3, [r4, #8]
 8012bb4:	705a      	strb	r2, [r3, #1]
 8012bb6:	2102      	movs	r1, #2
 8012bb8:	68a2      	ldr	r2, [r4, #8]
 8012bba:	6923      	ldr	r3, [r4, #16]
 8012bbc:	440a      	add	r2, r1
 8012bbe:	7561      	strb	r1, [r4, #21]
 8012bc0:	440b      	add	r3, r1
 8012bc2:	60a2      	str	r2, [r4, #8]
 8012bc4:	6123      	str	r3, [r4, #16]
 8012bc6:	7da0      	ldrb	r0, [r4, #22]
 8012bc8:	f080 0001 	eor.w	r0, r0, #1
 8012bcc:	b002      	add	sp, #8
 8012bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012bd6:	801a      	strh	r2, [r3, #0]
 8012bd8:	e7ed      	b.n	8012bb6 <ucdr_serialize_int16_t+0x9e>
 8012bda:	68a2      	ldr	r2, [r4, #8]
 8012bdc:	6923      	ldr	r3, [r4, #16]
 8012bde:	7da0      	ldrb	r0, [r4, #22]
 8012be0:	1b92      	subs	r2, r2, r6
 8012be2:	1b9b      	subs	r3, r3, r6
 8012be4:	7567      	strb	r7, [r4, #21]
 8012be6:	f080 0001 	eor.w	r0, r0, #1
 8012bea:	60a2      	str	r2, [r4, #8]
 8012bec:	6123      	str	r3, [r4, #16]
 8012bee:	b002      	add	sp, #8
 8012bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bf4:	68a3      	ldr	r3, [r4, #8]
 8012bf6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012bfa:	701a      	strb	r2, [r3, #0]
 8012bfc:	e7bc      	b.n	8012b78 <ucdr_serialize_int16_t+0x60>
 8012bfe:	4628      	mov	r0, r5
 8012c00:	f10d 0506 	add.w	r5, sp, #6
 8012c04:	4632      	mov	r2, r6
 8012c06:	4629      	mov	r1, r5
 8012c08:	f00e fb59 	bl	80212be <memcpy>
 8012c0c:	4642      	mov	r2, r8
 8012c0e:	19a9      	adds	r1, r5, r6
 8012c10:	68a0      	ldr	r0, [r4, #8]
 8012c12:	f00e fb54 	bl	80212be <memcpy>
 8012c16:	e7af      	b.n	8012b78 <ucdr_serialize_int16_t+0x60>

08012c18 <ucdr_deserialize_int16_t>:
 8012c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	460d      	mov	r5, r1
 8012c20:	2102      	movs	r1, #2
 8012c22:	f000 fd21 	bl	8013668 <ucdr_buffer_alignment>
 8012c26:	4601      	mov	r1, r0
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012c2e:	f000 fd63 	bl	80136f8 <ucdr_advance_buffer>
 8012c32:	2102      	movs	r1, #2
 8012c34:	4620      	mov	r0, r4
 8012c36:	f000 fcb7 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012c3a:	bb60      	cbnz	r0, 8012c96 <ucdr_deserialize_int16_t+0x7e>
 8012c3c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012c40:	42be      	cmp	r6, r7
 8012c42:	d923      	bls.n	8012c8c <ucdr_deserialize_int16_t+0x74>
 8012c44:	6923      	ldr	r3, [r4, #16]
 8012c46:	4620      	mov	r0, r4
 8012c48:	60a6      	str	r6, [r4, #8]
 8012c4a:	1bf6      	subs	r6, r6, r7
 8012c4c:	4433      	add	r3, r6
 8012c4e:	f1c6 0902 	rsb	r9, r6, #2
 8012c52:	6123      	str	r3, [r4, #16]
 8012c54:	4649      	mov	r1, r9
 8012c56:	f000 fcb3 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d034      	beq.n	8012cc8 <ucdr_deserialize_int16_t+0xb0>
 8012c5e:	7d23      	ldrb	r3, [r4, #20]
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d042      	beq.n	8012cea <ucdr_deserialize_int16_t+0xd2>
 8012c64:	787b      	ldrb	r3, [r7, #1]
 8012c66:	702b      	strb	r3, [r5, #0]
 8012c68:	2e00      	cmp	r6, #0
 8012c6a:	d03a      	beq.n	8012ce2 <ucdr_deserialize_int16_t+0xca>
 8012c6c:	783b      	ldrb	r3, [r7, #0]
 8012c6e:	706b      	strb	r3, [r5, #1]
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	2102      	movs	r1, #2
 8012c74:	68a2      	ldr	r2, [r4, #8]
 8012c76:	3302      	adds	r3, #2
 8012c78:	7da0      	ldrb	r0, [r4, #22]
 8012c7a:	444a      	add	r2, r9
 8012c7c:	7561      	strb	r1, [r4, #21]
 8012c7e:	1b9b      	subs	r3, r3, r6
 8012c80:	f080 0001 	eor.w	r0, r0, #1
 8012c84:	60a2      	str	r2, [r4, #8]
 8012c86:	6123      	str	r3, [r4, #16]
 8012c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c8c:	2102      	movs	r1, #2
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f000 fc96 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012c94:	b180      	cbz	r0, 8012cb8 <ucdr_deserialize_int16_t+0xa0>
 8012c96:	7d23      	ldrb	r3, [r4, #20]
 8012c98:	2b01      	cmp	r3, #1
 8012c9a:	68a3      	ldr	r3, [r4, #8]
 8012c9c:	d011      	beq.n	8012cc2 <ucdr_deserialize_int16_t+0xaa>
 8012c9e:	785b      	ldrb	r3, [r3, #1]
 8012ca0:	702b      	strb	r3, [r5, #0]
 8012ca2:	68a3      	ldr	r3, [r4, #8]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	706b      	strb	r3, [r5, #1]
 8012ca8:	2102      	movs	r1, #2
 8012caa:	68a2      	ldr	r2, [r4, #8]
 8012cac:	6923      	ldr	r3, [r4, #16]
 8012cae:	440a      	add	r2, r1
 8012cb0:	7561      	strb	r1, [r4, #21]
 8012cb2:	440b      	add	r3, r1
 8012cb4:	60a2      	str	r2, [r4, #8]
 8012cb6:	6123      	str	r3, [r4, #16]
 8012cb8:	7da0      	ldrb	r0, [r4, #22]
 8012cba:	f080 0001 	eor.w	r0, r0, #1
 8012cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cc2:	881b      	ldrh	r3, [r3, #0]
 8012cc4:	802b      	strh	r3, [r5, #0]
 8012cc6:	e7ef      	b.n	8012ca8 <ucdr_deserialize_int16_t+0x90>
 8012cc8:	68a2      	ldr	r2, [r4, #8]
 8012cca:	6923      	ldr	r3, [r4, #16]
 8012ccc:	1b92      	subs	r2, r2, r6
 8012cce:	7da0      	ldrb	r0, [r4, #22]
 8012cd0:	1b9b      	subs	r3, r3, r6
 8012cd2:	f884 8015 	strb.w	r8, [r4, #21]
 8012cd6:	f080 0001 	eor.w	r0, r0, #1
 8012cda:	60a2      	str	r2, [r4, #8]
 8012cdc:	6123      	str	r3, [r4, #16]
 8012cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ce2:	68a3      	ldr	r3, [r4, #8]
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	706b      	strb	r3, [r5, #1]
 8012ce8:	e7c2      	b.n	8012c70 <ucdr_deserialize_int16_t+0x58>
 8012cea:	4639      	mov	r1, r7
 8012cec:	4632      	mov	r2, r6
 8012cee:	4628      	mov	r0, r5
 8012cf0:	f00e fae5 	bl	80212be <memcpy>
 8012cf4:	464a      	mov	r2, r9
 8012cf6:	19a8      	adds	r0, r5, r6
 8012cf8:	68a1      	ldr	r1, [r4, #8]
 8012cfa:	f00e fae0 	bl	80212be <memcpy>
 8012cfe:	e7b7      	b.n	8012c70 <ucdr_deserialize_int16_t+0x58>

08012d00 <ucdr_serialize_int32_t>:
 8012d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d04:	b082      	sub	sp, #8
 8012d06:	4604      	mov	r4, r0
 8012d08:	9101      	str	r1, [sp, #4]
 8012d0a:	2104      	movs	r1, #4
 8012d0c:	f000 fcac 	bl	8013668 <ucdr_buffer_alignment>
 8012d10:	4601      	mov	r1, r0
 8012d12:	4620      	mov	r0, r4
 8012d14:	7d67      	ldrb	r7, [r4, #21]
 8012d16:	f000 fcef 	bl	80136f8 <ucdr_advance_buffer>
 8012d1a:	2104      	movs	r1, #4
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f000 fc43 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012d22:	2800      	cmp	r0, #0
 8012d24:	d139      	bne.n	8012d9a <ucdr_serialize_int32_t+0x9a>
 8012d26:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012d2a:	42ab      	cmp	r3, r5
 8012d2c:	d930      	bls.n	8012d90 <ucdr_serialize_int32_t+0x90>
 8012d2e:	1b5e      	subs	r6, r3, r5
 8012d30:	60a3      	str	r3, [r4, #8]
 8012d32:	6923      	ldr	r3, [r4, #16]
 8012d34:	4620      	mov	r0, r4
 8012d36:	f1c6 0804 	rsb	r8, r6, #4
 8012d3a:	4433      	add	r3, r6
 8012d3c:	4641      	mov	r1, r8
 8012d3e:	6123      	str	r3, [r4, #16]
 8012d40:	f000 fc3e 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d04c      	beq.n	8012de2 <ucdr_serialize_int32_t+0xe2>
 8012d48:	7d23      	ldrb	r3, [r4, #20]
 8012d4a:	2b01      	cmp	r3, #1
 8012d4c:	d063      	beq.n	8012e16 <ucdr_serialize_int32_t+0x116>
 8012d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d52:	702b      	strb	r3, [r5, #0]
 8012d54:	2e00      	cmp	r6, #0
 8012d56:	d051      	beq.n	8012dfc <ucdr_serialize_int32_t+0xfc>
 8012d58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d5c:	2e01      	cmp	r6, #1
 8012d5e:	706b      	strb	r3, [r5, #1]
 8012d60:	d050      	beq.n	8012e04 <ucdr_serialize_int32_t+0x104>
 8012d62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d66:	2e02      	cmp	r6, #2
 8012d68:	70ab      	strb	r3, [r5, #2]
 8012d6a:	d04f      	beq.n	8012e0c <ucdr_serialize_int32_t+0x10c>
 8012d6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d70:	70eb      	strb	r3, [r5, #3]
 8012d72:	6923      	ldr	r3, [r4, #16]
 8012d74:	2104      	movs	r1, #4
 8012d76:	68a2      	ldr	r2, [r4, #8]
 8012d78:	3304      	adds	r3, #4
 8012d7a:	7da0      	ldrb	r0, [r4, #22]
 8012d7c:	4442      	add	r2, r8
 8012d7e:	7561      	strb	r1, [r4, #21]
 8012d80:	1b9e      	subs	r6, r3, r6
 8012d82:	f080 0001 	eor.w	r0, r0, #1
 8012d86:	60a2      	str	r2, [r4, #8]
 8012d88:	6126      	str	r6, [r4, #16]
 8012d8a:	b002      	add	sp, #8
 8012d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d90:	2104      	movs	r1, #4
 8012d92:	4620      	mov	r0, r4
 8012d94:	f000 fc14 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012d98:	b1d0      	cbz	r0, 8012dd0 <ucdr_serialize_int32_t+0xd0>
 8012d9a:	7d23      	ldrb	r3, [r4, #20]
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	68a3      	ldr	r3, [r4, #8]
 8012da0:	d01c      	beq.n	8012ddc <ucdr_serialize_int32_t+0xdc>
 8012da2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012da6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012daa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012dae:	7018      	strb	r0, [r3, #0]
 8012db0:	68a3      	ldr	r3, [r4, #8]
 8012db2:	705a      	strb	r2, [r3, #1]
 8012db4:	68a3      	ldr	r3, [r4, #8]
 8012db6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012dba:	7099      	strb	r1, [r3, #2]
 8012dbc:	68a3      	ldr	r3, [r4, #8]
 8012dbe:	70da      	strb	r2, [r3, #3]
 8012dc0:	2104      	movs	r1, #4
 8012dc2:	68a2      	ldr	r2, [r4, #8]
 8012dc4:	6923      	ldr	r3, [r4, #16]
 8012dc6:	440a      	add	r2, r1
 8012dc8:	7561      	strb	r1, [r4, #21]
 8012dca:	440b      	add	r3, r1
 8012dcc:	60a2      	str	r2, [r4, #8]
 8012dce:	6123      	str	r3, [r4, #16]
 8012dd0:	7da0      	ldrb	r0, [r4, #22]
 8012dd2:	f080 0001 	eor.w	r0, r0, #1
 8012dd6:	b002      	add	sp, #8
 8012dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ddc:	9a01      	ldr	r2, [sp, #4]
 8012dde:	601a      	str	r2, [r3, #0]
 8012de0:	e7ee      	b.n	8012dc0 <ucdr_serialize_int32_t+0xc0>
 8012de2:	68a2      	ldr	r2, [r4, #8]
 8012de4:	6923      	ldr	r3, [r4, #16]
 8012de6:	7da0      	ldrb	r0, [r4, #22]
 8012de8:	1b92      	subs	r2, r2, r6
 8012dea:	1b9b      	subs	r3, r3, r6
 8012dec:	7567      	strb	r7, [r4, #21]
 8012dee:	f080 0001 	eor.w	r0, r0, #1
 8012df2:	60a2      	str	r2, [r4, #8]
 8012df4:	6123      	str	r3, [r4, #16]
 8012df6:	b002      	add	sp, #8
 8012df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dfc:	68a3      	ldr	r3, [r4, #8]
 8012dfe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e02:	701a      	strb	r2, [r3, #0]
 8012e04:	68a3      	ldr	r3, [r4, #8]
 8012e06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012e0a:	701a      	strb	r2, [r3, #0]
 8012e0c:	68a3      	ldr	r3, [r4, #8]
 8012e0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e12:	701a      	strb	r2, [r3, #0]
 8012e14:	e7ad      	b.n	8012d72 <ucdr_serialize_int32_t+0x72>
 8012e16:	4628      	mov	r0, r5
 8012e18:	ad01      	add	r5, sp, #4
 8012e1a:	4632      	mov	r2, r6
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	f00e fa4e 	bl	80212be <memcpy>
 8012e22:	4642      	mov	r2, r8
 8012e24:	19a9      	adds	r1, r5, r6
 8012e26:	68a0      	ldr	r0, [r4, #8]
 8012e28:	f00e fa49 	bl	80212be <memcpy>
 8012e2c:	e7a1      	b.n	8012d72 <ucdr_serialize_int32_t+0x72>
 8012e2e:	bf00      	nop

08012e30 <ucdr_deserialize_int32_t>:
 8012e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e34:	4604      	mov	r4, r0
 8012e36:	460d      	mov	r5, r1
 8012e38:	2104      	movs	r1, #4
 8012e3a:	f000 fc15 	bl	8013668 <ucdr_buffer_alignment>
 8012e3e:	4601      	mov	r1, r0
 8012e40:	4620      	mov	r0, r4
 8012e42:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e46:	f000 fc57 	bl	80136f8 <ucdr_advance_buffer>
 8012e4a:	2104      	movs	r1, #4
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f000 fbab 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012e52:	2800      	cmp	r0, #0
 8012e54:	d138      	bne.n	8012ec8 <ucdr_deserialize_int32_t+0x98>
 8012e56:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012e5a:	42b7      	cmp	r7, r6
 8012e5c:	d92f      	bls.n	8012ebe <ucdr_deserialize_int32_t+0x8e>
 8012e5e:	6923      	ldr	r3, [r4, #16]
 8012e60:	4620      	mov	r0, r4
 8012e62:	60a7      	str	r7, [r4, #8]
 8012e64:	1bbf      	subs	r7, r7, r6
 8012e66:	443b      	add	r3, r7
 8012e68:	f1c7 0904 	rsb	r9, r7, #4
 8012e6c:	6123      	str	r3, [r4, #16]
 8012e6e:	4649      	mov	r1, r9
 8012e70:	f000 fba6 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d046      	beq.n	8012f06 <ucdr_deserialize_int32_t+0xd6>
 8012e78:	7d23      	ldrb	r3, [r4, #20]
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	d05c      	beq.n	8012f38 <ucdr_deserialize_int32_t+0x108>
 8012e7e:	78f3      	ldrb	r3, [r6, #3]
 8012e80:	702b      	strb	r3, [r5, #0]
 8012e82:	2f00      	cmp	r7, #0
 8012e84:	d04c      	beq.n	8012f20 <ucdr_deserialize_int32_t+0xf0>
 8012e86:	78b3      	ldrb	r3, [r6, #2]
 8012e88:	2f01      	cmp	r7, #1
 8012e8a:	706b      	strb	r3, [r5, #1]
 8012e8c:	f105 0302 	add.w	r3, r5, #2
 8012e90:	d04a      	beq.n	8012f28 <ucdr_deserialize_int32_t+0xf8>
 8012e92:	7873      	ldrb	r3, [r6, #1]
 8012e94:	2f02      	cmp	r7, #2
 8012e96:	70ab      	strb	r3, [r5, #2]
 8012e98:	f105 0303 	add.w	r3, r5, #3
 8012e9c:	d048      	beq.n	8012f30 <ucdr_deserialize_int32_t+0x100>
 8012e9e:	7833      	ldrb	r3, [r6, #0]
 8012ea0:	70eb      	strb	r3, [r5, #3]
 8012ea2:	6923      	ldr	r3, [r4, #16]
 8012ea4:	2104      	movs	r1, #4
 8012ea6:	68a2      	ldr	r2, [r4, #8]
 8012ea8:	3304      	adds	r3, #4
 8012eaa:	7da0      	ldrb	r0, [r4, #22]
 8012eac:	444a      	add	r2, r9
 8012eae:	7561      	strb	r1, [r4, #21]
 8012eb0:	1bdb      	subs	r3, r3, r7
 8012eb2:	f080 0001 	eor.w	r0, r0, #1
 8012eb6:	60a2      	str	r2, [r4, #8]
 8012eb8:	6123      	str	r3, [r4, #16]
 8012eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ebe:	2104      	movs	r1, #4
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	f000 fb7d 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012ec6:	b1b0      	cbz	r0, 8012ef6 <ucdr_deserialize_int32_t+0xc6>
 8012ec8:	7d23      	ldrb	r3, [r4, #20]
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	68a3      	ldr	r3, [r4, #8]
 8012ece:	d017      	beq.n	8012f00 <ucdr_deserialize_int32_t+0xd0>
 8012ed0:	78db      	ldrb	r3, [r3, #3]
 8012ed2:	702b      	strb	r3, [r5, #0]
 8012ed4:	68a3      	ldr	r3, [r4, #8]
 8012ed6:	789b      	ldrb	r3, [r3, #2]
 8012ed8:	706b      	strb	r3, [r5, #1]
 8012eda:	68a3      	ldr	r3, [r4, #8]
 8012edc:	785b      	ldrb	r3, [r3, #1]
 8012ede:	70ab      	strb	r3, [r5, #2]
 8012ee0:	68a3      	ldr	r3, [r4, #8]
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	70eb      	strb	r3, [r5, #3]
 8012ee6:	2104      	movs	r1, #4
 8012ee8:	68a2      	ldr	r2, [r4, #8]
 8012eea:	6923      	ldr	r3, [r4, #16]
 8012eec:	440a      	add	r2, r1
 8012eee:	7561      	strb	r1, [r4, #21]
 8012ef0:	440b      	add	r3, r1
 8012ef2:	60a2      	str	r2, [r4, #8]
 8012ef4:	6123      	str	r3, [r4, #16]
 8012ef6:	7da0      	ldrb	r0, [r4, #22]
 8012ef8:	f080 0001 	eor.w	r0, r0, #1
 8012efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	602b      	str	r3, [r5, #0]
 8012f04:	e7ef      	b.n	8012ee6 <ucdr_deserialize_int32_t+0xb6>
 8012f06:	68a2      	ldr	r2, [r4, #8]
 8012f08:	6923      	ldr	r3, [r4, #16]
 8012f0a:	1bd2      	subs	r2, r2, r7
 8012f0c:	7da0      	ldrb	r0, [r4, #22]
 8012f0e:	1bdb      	subs	r3, r3, r7
 8012f10:	f884 8015 	strb.w	r8, [r4, #21]
 8012f14:	f080 0001 	eor.w	r0, r0, #1
 8012f18:	60a2      	str	r2, [r4, #8]
 8012f1a:	6123      	str	r3, [r4, #16]
 8012f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f20:	68a3      	ldr	r3, [r4, #8]
 8012f22:	789b      	ldrb	r3, [r3, #2]
 8012f24:	706b      	strb	r3, [r5, #1]
 8012f26:	1cab      	adds	r3, r5, #2
 8012f28:	68a2      	ldr	r2, [r4, #8]
 8012f2a:	7852      	ldrb	r2, [r2, #1]
 8012f2c:	f803 2b01 	strb.w	r2, [r3], #1
 8012f30:	68a2      	ldr	r2, [r4, #8]
 8012f32:	7812      	ldrb	r2, [r2, #0]
 8012f34:	701a      	strb	r2, [r3, #0]
 8012f36:	e7b4      	b.n	8012ea2 <ucdr_deserialize_int32_t+0x72>
 8012f38:	4631      	mov	r1, r6
 8012f3a:	463a      	mov	r2, r7
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	f00e f9be 	bl	80212be <memcpy>
 8012f42:	464a      	mov	r2, r9
 8012f44:	19e8      	adds	r0, r5, r7
 8012f46:	68a1      	ldr	r1, [r4, #8]
 8012f48:	f00e f9b9 	bl	80212be <memcpy>
 8012f4c:	e7a9      	b.n	8012ea2 <ucdr_deserialize_int32_t+0x72>
 8012f4e:	bf00      	nop

08012f50 <ucdr_serialize_int64_t>:
 8012f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f54:	4604      	mov	r4, r0
 8012f56:	b082      	sub	sp, #8
 8012f58:	2108      	movs	r1, #8
 8012f5a:	e9cd 2300 	strd	r2, r3, [sp]
 8012f5e:	f000 fb83 	bl	8013668 <ucdr_buffer_alignment>
 8012f62:	4601      	mov	r1, r0
 8012f64:	4620      	mov	r0, r4
 8012f66:	7d67      	ldrb	r7, [r4, #21]
 8012f68:	f000 fbc6 	bl	80136f8 <ucdr_advance_buffer>
 8012f6c:	2108      	movs	r1, #8
 8012f6e:	4620      	mov	r0, r4
 8012f70:	f000 fb1a 	bl	80135a8 <ucdr_check_buffer_available_for>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d14e      	bne.n	8013016 <ucdr_serialize_int64_t+0xc6>
 8012f78:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012f7c:	42ab      	cmp	r3, r5
 8012f7e:	d945      	bls.n	801300c <ucdr_serialize_int64_t+0xbc>
 8012f80:	1b5e      	subs	r6, r3, r5
 8012f82:	60a3      	str	r3, [r4, #8]
 8012f84:	6923      	ldr	r3, [r4, #16]
 8012f86:	4620      	mov	r0, r4
 8012f88:	f1c6 0808 	rsb	r8, r6, #8
 8012f8c:	4433      	add	r3, r6
 8012f8e:	4641      	mov	r1, r8
 8012f90:	6123      	str	r3, [r4, #16]
 8012f92:	f000 fb15 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d074      	beq.n	8013084 <ucdr_serialize_int64_t+0x134>
 8012f9a:	7d23      	ldrb	r3, [r4, #20]
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	f000 809b 	beq.w	80130d8 <ucdr_serialize_int64_t+0x188>
 8012fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012fa6:	702b      	strb	r3, [r5, #0]
 8012fa8:	2e00      	cmp	r6, #0
 8012faa:	d078      	beq.n	801309e <ucdr_serialize_int64_t+0x14e>
 8012fac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012fb0:	2e01      	cmp	r6, #1
 8012fb2:	706b      	strb	r3, [r5, #1]
 8012fb4:	d077      	beq.n	80130a6 <ucdr_serialize_int64_t+0x156>
 8012fb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012fba:	2e02      	cmp	r6, #2
 8012fbc:	70ab      	strb	r3, [r5, #2]
 8012fbe:	d076      	beq.n	80130ae <ucdr_serialize_int64_t+0x15e>
 8012fc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012fc4:	2e03      	cmp	r6, #3
 8012fc6:	70eb      	strb	r3, [r5, #3]
 8012fc8:	d075      	beq.n	80130b6 <ucdr_serialize_int64_t+0x166>
 8012fca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012fce:	2e04      	cmp	r6, #4
 8012fd0:	712b      	strb	r3, [r5, #4]
 8012fd2:	d074      	beq.n	80130be <ucdr_serialize_int64_t+0x16e>
 8012fd4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012fd8:	2e05      	cmp	r6, #5
 8012fda:	716b      	strb	r3, [r5, #5]
 8012fdc:	d073      	beq.n	80130c6 <ucdr_serialize_int64_t+0x176>
 8012fde:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012fe2:	2e06      	cmp	r6, #6
 8012fe4:	71ab      	strb	r3, [r5, #6]
 8012fe6:	d072      	beq.n	80130ce <ucdr_serialize_int64_t+0x17e>
 8012fe8:	f89d 3000 	ldrb.w	r3, [sp]
 8012fec:	71eb      	strb	r3, [r5, #7]
 8012fee:	6923      	ldr	r3, [r4, #16]
 8012ff0:	2108      	movs	r1, #8
 8012ff2:	68a2      	ldr	r2, [r4, #8]
 8012ff4:	3308      	adds	r3, #8
 8012ff6:	7da0      	ldrb	r0, [r4, #22]
 8012ff8:	4442      	add	r2, r8
 8012ffa:	7561      	strb	r1, [r4, #21]
 8012ffc:	1b9e      	subs	r6, r3, r6
 8012ffe:	f080 0001 	eor.w	r0, r0, #1
 8013002:	60a2      	str	r2, [r4, #8]
 8013004:	6126      	str	r6, [r4, #16]
 8013006:	b002      	add	sp, #8
 8013008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300c:	2108      	movs	r1, #8
 801300e:	4620      	mov	r0, r4
 8013010:	f000 fad6 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8013014:	b350      	cbz	r0, 801306c <ucdr_serialize_int64_t+0x11c>
 8013016:	7d23      	ldrb	r3, [r4, #20]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d02d      	beq.n	8013078 <ucdr_serialize_int64_t+0x128>
 801301c:	68a3      	ldr	r3, [r4, #8]
 801301e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013022:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013026:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801302a:	7018      	strb	r0, [r3, #0]
 801302c:	68a3      	ldr	r3, [r4, #8]
 801302e:	705a      	strb	r2, [r3, #1]
 8013030:	68a3      	ldr	r3, [r4, #8]
 8013032:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013036:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801303a:	7099      	strb	r1, [r3, #2]
 801303c:	68a3      	ldr	r3, [r4, #8]
 801303e:	70da      	strb	r2, [r3, #3]
 8013040:	68a3      	ldr	r3, [r4, #8]
 8013042:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013046:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801304a:	7118      	strb	r0, [r3, #4]
 801304c:	68a3      	ldr	r3, [r4, #8]
 801304e:	715a      	strb	r2, [r3, #5]
 8013050:	68a3      	ldr	r3, [r4, #8]
 8013052:	f89d 2000 	ldrb.w	r2, [sp]
 8013056:	7199      	strb	r1, [r3, #6]
 8013058:	68a3      	ldr	r3, [r4, #8]
 801305a:	71da      	strb	r2, [r3, #7]
 801305c:	2108      	movs	r1, #8
 801305e:	68a2      	ldr	r2, [r4, #8]
 8013060:	6923      	ldr	r3, [r4, #16]
 8013062:	440a      	add	r2, r1
 8013064:	7561      	strb	r1, [r4, #21]
 8013066:	440b      	add	r3, r1
 8013068:	60a2      	str	r2, [r4, #8]
 801306a:	6123      	str	r3, [r4, #16]
 801306c:	7da0      	ldrb	r0, [r4, #22]
 801306e:	f080 0001 	eor.w	r0, r0, #1
 8013072:	b002      	add	sp, #8
 8013074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013078:	466b      	mov	r3, sp
 801307a:	68a2      	ldr	r2, [r4, #8]
 801307c:	cb03      	ldmia	r3!, {r0, r1}
 801307e:	6010      	str	r0, [r2, #0]
 8013080:	6051      	str	r1, [r2, #4]
 8013082:	e7eb      	b.n	801305c <ucdr_serialize_int64_t+0x10c>
 8013084:	68a2      	ldr	r2, [r4, #8]
 8013086:	6923      	ldr	r3, [r4, #16]
 8013088:	7da0      	ldrb	r0, [r4, #22]
 801308a:	1b92      	subs	r2, r2, r6
 801308c:	1b9b      	subs	r3, r3, r6
 801308e:	7567      	strb	r7, [r4, #21]
 8013090:	f080 0001 	eor.w	r0, r0, #1
 8013094:	60a2      	str	r2, [r4, #8]
 8013096:	6123      	str	r3, [r4, #16]
 8013098:	b002      	add	sp, #8
 801309a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801309e:	68a3      	ldr	r3, [r4, #8]
 80130a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80130a4:	701a      	strb	r2, [r3, #0]
 80130a6:	68a3      	ldr	r3, [r4, #8]
 80130a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80130ac:	701a      	strb	r2, [r3, #0]
 80130ae:	68a3      	ldr	r3, [r4, #8]
 80130b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80130b4:	701a      	strb	r2, [r3, #0]
 80130b6:	68a3      	ldr	r3, [r4, #8]
 80130b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80130bc:	701a      	strb	r2, [r3, #0]
 80130be:	68a3      	ldr	r3, [r4, #8]
 80130c0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80130c4:	701a      	strb	r2, [r3, #0]
 80130c6:	68a3      	ldr	r3, [r4, #8]
 80130c8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80130cc:	701a      	strb	r2, [r3, #0]
 80130ce:	68a3      	ldr	r3, [r4, #8]
 80130d0:	f89d 2000 	ldrb.w	r2, [sp]
 80130d4:	701a      	strb	r2, [r3, #0]
 80130d6:	e78a      	b.n	8012fee <ucdr_serialize_int64_t+0x9e>
 80130d8:	4628      	mov	r0, r5
 80130da:	466d      	mov	r5, sp
 80130dc:	4632      	mov	r2, r6
 80130de:	4629      	mov	r1, r5
 80130e0:	f00e f8ed 	bl	80212be <memcpy>
 80130e4:	4642      	mov	r2, r8
 80130e6:	19a9      	adds	r1, r5, r6
 80130e8:	68a0      	ldr	r0, [r4, #8]
 80130ea:	f00e f8e8 	bl	80212be <memcpy>
 80130ee:	e77e      	b.n	8012fee <ucdr_serialize_int64_t+0x9e>

080130f0 <ucdr_deserialize_int64_t>:
 80130f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130f4:	4604      	mov	r4, r0
 80130f6:	460d      	mov	r5, r1
 80130f8:	2108      	movs	r1, #8
 80130fa:	f000 fab5 	bl	8013668 <ucdr_buffer_alignment>
 80130fe:	4601      	mov	r1, r0
 8013100:	4620      	mov	r0, r4
 8013102:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013106:	f000 faf7 	bl	80136f8 <ucdr_advance_buffer>
 801310a:	2108      	movs	r1, #8
 801310c:	4620      	mov	r0, r4
 801310e:	f000 fa4b 	bl	80135a8 <ucdr_check_buffer_available_for>
 8013112:	2800      	cmp	r0, #0
 8013114:	d151      	bne.n	80131ba <ucdr_deserialize_int64_t+0xca>
 8013116:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801311a:	42be      	cmp	r6, r7
 801311c:	d948      	bls.n	80131b0 <ucdr_deserialize_int64_t+0xc0>
 801311e:	6923      	ldr	r3, [r4, #16]
 8013120:	4620      	mov	r0, r4
 8013122:	60a6      	str	r6, [r4, #8]
 8013124:	1bf6      	subs	r6, r6, r7
 8013126:	4433      	add	r3, r6
 8013128:	f1c6 0908 	rsb	r9, r6, #8
 801312c:	6123      	str	r3, [r4, #16]
 801312e:	4649      	mov	r1, r9
 8013130:	f000 fa46 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8013134:	2800      	cmp	r0, #0
 8013136:	d06d      	beq.n	8013214 <ucdr_deserialize_int64_t+0x124>
 8013138:	7d23      	ldrb	r3, [r4, #20]
 801313a:	2b01      	cmp	r3, #1
 801313c:	f000 8093 	beq.w	8013266 <ucdr_deserialize_int64_t+0x176>
 8013140:	79fb      	ldrb	r3, [r7, #7]
 8013142:	702b      	strb	r3, [r5, #0]
 8013144:	2e00      	cmp	r6, #0
 8013146:	d072      	beq.n	801322e <ucdr_deserialize_int64_t+0x13e>
 8013148:	79bb      	ldrb	r3, [r7, #6]
 801314a:	2e01      	cmp	r6, #1
 801314c:	706b      	strb	r3, [r5, #1]
 801314e:	f105 0302 	add.w	r3, r5, #2
 8013152:	d070      	beq.n	8013236 <ucdr_deserialize_int64_t+0x146>
 8013154:	797b      	ldrb	r3, [r7, #5]
 8013156:	2e02      	cmp	r6, #2
 8013158:	70ab      	strb	r3, [r5, #2]
 801315a:	f105 0303 	add.w	r3, r5, #3
 801315e:	d06e      	beq.n	801323e <ucdr_deserialize_int64_t+0x14e>
 8013160:	793b      	ldrb	r3, [r7, #4]
 8013162:	2e03      	cmp	r6, #3
 8013164:	70eb      	strb	r3, [r5, #3]
 8013166:	f105 0304 	add.w	r3, r5, #4
 801316a:	d06c      	beq.n	8013246 <ucdr_deserialize_int64_t+0x156>
 801316c:	78fb      	ldrb	r3, [r7, #3]
 801316e:	2e04      	cmp	r6, #4
 8013170:	712b      	strb	r3, [r5, #4]
 8013172:	f105 0305 	add.w	r3, r5, #5
 8013176:	d06a      	beq.n	801324e <ucdr_deserialize_int64_t+0x15e>
 8013178:	78bb      	ldrb	r3, [r7, #2]
 801317a:	2e05      	cmp	r6, #5
 801317c:	716b      	strb	r3, [r5, #5]
 801317e:	f105 0306 	add.w	r3, r5, #6
 8013182:	d068      	beq.n	8013256 <ucdr_deserialize_int64_t+0x166>
 8013184:	787b      	ldrb	r3, [r7, #1]
 8013186:	2e06      	cmp	r6, #6
 8013188:	71ab      	strb	r3, [r5, #6]
 801318a:	f105 0307 	add.w	r3, r5, #7
 801318e:	d066      	beq.n	801325e <ucdr_deserialize_int64_t+0x16e>
 8013190:	783b      	ldrb	r3, [r7, #0]
 8013192:	71eb      	strb	r3, [r5, #7]
 8013194:	6923      	ldr	r3, [r4, #16]
 8013196:	2108      	movs	r1, #8
 8013198:	68a2      	ldr	r2, [r4, #8]
 801319a:	3308      	adds	r3, #8
 801319c:	7da0      	ldrb	r0, [r4, #22]
 801319e:	444a      	add	r2, r9
 80131a0:	7561      	strb	r1, [r4, #21]
 80131a2:	1b9e      	subs	r6, r3, r6
 80131a4:	f080 0001 	eor.w	r0, r0, #1
 80131a8:	60a2      	str	r2, [r4, #8]
 80131aa:	6126      	str	r6, [r4, #16]
 80131ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131b0:	2108      	movs	r1, #8
 80131b2:	4620      	mov	r0, r4
 80131b4:	f000 fa04 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80131b8:	b310      	cbz	r0, 8013200 <ucdr_deserialize_int64_t+0x110>
 80131ba:	7d23      	ldrb	r3, [r4, #20]
 80131bc:	2b01      	cmp	r3, #1
 80131be:	68a3      	ldr	r3, [r4, #8]
 80131c0:	d023      	beq.n	801320a <ucdr_deserialize_int64_t+0x11a>
 80131c2:	79db      	ldrb	r3, [r3, #7]
 80131c4:	702b      	strb	r3, [r5, #0]
 80131c6:	68a3      	ldr	r3, [r4, #8]
 80131c8:	799b      	ldrb	r3, [r3, #6]
 80131ca:	706b      	strb	r3, [r5, #1]
 80131cc:	68a3      	ldr	r3, [r4, #8]
 80131ce:	795b      	ldrb	r3, [r3, #5]
 80131d0:	70ab      	strb	r3, [r5, #2]
 80131d2:	68a3      	ldr	r3, [r4, #8]
 80131d4:	791b      	ldrb	r3, [r3, #4]
 80131d6:	70eb      	strb	r3, [r5, #3]
 80131d8:	68a3      	ldr	r3, [r4, #8]
 80131da:	78db      	ldrb	r3, [r3, #3]
 80131dc:	712b      	strb	r3, [r5, #4]
 80131de:	68a3      	ldr	r3, [r4, #8]
 80131e0:	789b      	ldrb	r3, [r3, #2]
 80131e2:	716b      	strb	r3, [r5, #5]
 80131e4:	68a3      	ldr	r3, [r4, #8]
 80131e6:	785b      	ldrb	r3, [r3, #1]
 80131e8:	71ab      	strb	r3, [r5, #6]
 80131ea:	68a3      	ldr	r3, [r4, #8]
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	71eb      	strb	r3, [r5, #7]
 80131f0:	2108      	movs	r1, #8
 80131f2:	68a2      	ldr	r2, [r4, #8]
 80131f4:	6923      	ldr	r3, [r4, #16]
 80131f6:	440a      	add	r2, r1
 80131f8:	7561      	strb	r1, [r4, #21]
 80131fa:	440b      	add	r3, r1
 80131fc:	60a2      	str	r2, [r4, #8]
 80131fe:	6123      	str	r3, [r4, #16]
 8013200:	7da0      	ldrb	r0, [r4, #22]
 8013202:	f080 0001 	eor.w	r0, r0, #1
 8013206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	685b      	ldr	r3, [r3, #4]
 801320e:	602a      	str	r2, [r5, #0]
 8013210:	606b      	str	r3, [r5, #4]
 8013212:	e7ed      	b.n	80131f0 <ucdr_deserialize_int64_t+0x100>
 8013214:	68a2      	ldr	r2, [r4, #8]
 8013216:	6923      	ldr	r3, [r4, #16]
 8013218:	1b92      	subs	r2, r2, r6
 801321a:	7da0      	ldrb	r0, [r4, #22]
 801321c:	1b9b      	subs	r3, r3, r6
 801321e:	f884 8015 	strb.w	r8, [r4, #21]
 8013222:	f080 0001 	eor.w	r0, r0, #1
 8013226:	60a2      	str	r2, [r4, #8]
 8013228:	6123      	str	r3, [r4, #16]
 801322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801322e:	68a3      	ldr	r3, [r4, #8]
 8013230:	799b      	ldrb	r3, [r3, #6]
 8013232:	706b      	strb	r3, [r5, #1]
 8013234:	1cab      	adds	r3, r5, #2
 8013236:	68a2      	ldr	r2, [r4, #8]
 8013238:	7952      	ldrb	r2, [r2, #5]
 801323a:	f803 2b01 	strb.w	r2, [r3], #1
 801323e:	68a2      	ldr	r2, [r4, #8]
 8013240:	7912      	ldrb	r2, [r2, #4]
 8013242:	f803 2b01 	strb.w	r2, [r3], #1
 8013246:	68a2      	ldr	r2, [r4, #8]
 8013248:	78d2      	ldrb	r2, [r2, #3]
 801324a:	f803 2b01 	strb.w	r2, [r3], #1
 801324e:	68a2      	ldr	r2, [r4, #8]
 8013250:	7892      	ldrb	r2, [r2, #2]
 8013252:	f803 2b01 	strb.w	r2, [r3], #1
 8013256:	68a2      	ldr	r2, [r4, #8]
 8013258:	7852      	ldrb	r2, [r2, #1]
 801325a:	f803 2b01 	strb.w	r2, [r3], #1
 801325e:	68a2      	ldr	r2, [r4, #8]
 8013260:	7812      	ldrb	r2, [r2, #0]
 8013262:	701a      	strb	r2, [r3, #0]
 8013264:	e796      	b.n	8013194 <ucdr_deserialize_int64_t+0xa4>
 8013266:	4639      	mov	r1, r7
 8013268:	4632      	mov	r2, r6
 801326a:	4628      	mov	r0, r5
 801326c:	f00e f827 	bl	80212be <memcpy>
 8013270:	464a      	mov	r2, r9
 8013272:	19a8      	adds	r0, r5, r6
 8013274:	68a1      	ldr	r1, [r4, #8]
 8013276:	f00e f822 	bl	80212be <memcpy>
 801327a:	e78b      	b.n	8013194 <ucdr_deserialize_int64_t+0xa4>

0801327c <ucdr_serialize_double>:
 801327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013280:	4604      	mov	r4, r0
 8013282:	b082      	sub	sp, #8
 8013284:	2108      	movs	r1, #8
 8013286:	ed8d 0b00 	vstr	d0, [sp]
 801328a:	f000 f9ed 	bl	8013668 <ucdr_buffer_alignment>
 801328e:	4601      	mov	r1, r0
 8013290:	4620      	mov	r0, r4
 8013292:	7d67      	ldrb	r7, [r4, #21]
 8013294:	f000 fa30 	bl	80136f8 <ucdr_advance_buffer>
 8013298:	2108      	movs	r1, #8
 801329a:	4620      	mov	r0, r4
 801329c:	f000 f984 	bl	80135a8 <ucdr_check_buffer_available_for>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d14e      	bne.n	8013342 <ucdr_serialize_double+0xc6>
 80132a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80132a8:	42ab      	cmp	r3, r5
 80132aa:	d945      	bls.n	8013338 <ucdr_serialize_double+0xbc>
 80132ac:	1b5e      	subs	r6, r3, r5
 80132ae:	60a3      	str	r3, [r4, #8]
 80132b0:	6923      	ldr	r3, [r4, #16]
 80132b2:	4620      	mov	r0, r4
 80132b4:	f1c6 0808 	rsb	r8, r6, #8
 80132b8:	4433      	add	r3, r6
 80132ba:	4641      	mov	r1, r8
 80132bc:	6123      	str	r3, [r4, #16]
 80132be:	f000 f97f 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d074      	beq.n	80133b0 <ucdr_serialize_double+0x134>
 80132c6:	7d23      	ldrb	r3, [r4, #20]
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	f000 809b 	beq.w	8013404 <ucdr_serialize_double+0x188>
 80132ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80132d2:	702b      	strb	r3, [r5, #0]
 80132d4:	2e00      	cmp	r6, #0
 80132d6:	d078      	beq.n	80133ca <ucdr_serialize_double+0x14e>
 80132d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80132dc:	2e01      	cmp	r6, #1
 80132de:	706b      	strb	r3, [r5, #1]
 80132e0:	d077      	beq.n	80133d2 <ucdr_serialize_double+0x156>
 80132e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80132e6:	2e02      	cmp	r6, #2
 80132e8:	70ab      	strb	r3, [r5, #2]
 80132ea:	d076      	beq.n	80133da <ucdr_serialize_double+0x15e>
 80132ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80132f0:	2e03      	cmp	r6, #3
 80132f2:	70eb      	strb	r3, [r5, #3]
 80132f4:	d075      	beq.n	80133e2 <ucdr_serialize_double+0x166>
 80132f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80132fa:	2e04      	cmp	r6, #4
 80132fc:	712b      	strb	r3, [r5, #4]
 80132fe:	d074      	beq.n	80133ea <ucdr_serialize_double+0x16e>
 8013300:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013304:	2e05      	cmp	r6, #5
 8013306:	716b      	strb	r3, [r5, #5]
 8013308:	d073      	beq.n	80133f2 <ucdr_serialize_double+0x176>
 801330a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801330e:	2e06      	cmp	r6, #6
 8013310:	71ab      	strb	r3, [r5, #6]
 8013312:	d072      	beq.n	80133fa <ucdr_serialize_double+0x17e>
 8013314:	f89d 3000 	ldrb.w	r3, [sp]
 8013318:	71eb      	strb	r3, [r5, #7]
 801331a:	6923      	ldr	r3, [r4, #16]
 801331c:	2108      	movs	r1, #8
 801331e:	68a2      	ldr	r2, [r4, #8]
 8013320:	3308      	adds	r3, #8
 8013322:	7da0      	ldrb	r0, [r4, #22]
 8013324:	4442      	add	r2, r8
 8013326:	7561      	strb	r1, [r4, #21]
 8013328:	1b9e      	subs	r6, r3, r6
 801332a:	f080 0001 	eor.w	r0, r0, #1
 801332e:	60a2      	str	r2, [r4, #8]
 8013330:	6126      	str	r6, [r4, #16]
 8013332:	b002      	add	sp, #8
 8013334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013338:	2108      	movs	r1, #8
 801333a:	4620      	mov	r0, r4
 801333c:	f000 f940 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8013340:	b350      	cbz	r0, 8013398 <ucdr_serialize_double+0x11c>
 8013342:	7d23      	ldrb	r3, [r4, #20]
 8013344:	2b01      	cmp	r3, #1
 8013346:	d02d      	beq.n	80133a4 <ucdr_serialize_double+0x128>
 8013348:	68a3      	ldr	r3, [r4, #8]
 801334a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801334e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013352:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8013356:	7018      	strb	r0, [r3, #0]
 8013358:	68a3      	ldr	r3, [r4, #8]
 801335a:	705a      	strb	r2, [r3, #1]
 801335c:	68a3      	ldr	r3, [r4, #8]
 801335e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013362:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8013366:	7099      	strb	r1, [r3, #2]
 8013368:	68a3      	ldr	r3, [r4, #8]
 801336a:	70da      	strb	r2, [r3, #3]
 801336c:	68a3      	ldr	r3, [r4, #8]
 801336e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013372:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8013376:	7118      	strb	r0, [r3, #4]
 8013378:	68a3      	ldr	r3, [r4, #8]
 801337a:	715a      	strb	r2, [r3, #5]
 801337c:	68a3      	ldr	r3, [r4, #8]
 801337e:	f89d 2000 	ldrb.w	r2, [sp]
 8013382:	7199      	strb	r1, [r3, #6]
 8013384:	68a3      	ldr	r3, [r4, #8]
 8013386:	71da      	strb	r2, [r3, #7]
 8013388:	2108      	movs	r1, #8
 801338a:	68a2      	ldr	r2, [r4, #8]
 801338c:	6923      	ldr	r3, [r4, #16]
 801338e:	440a      	add	r2, r1
 8013390:	7561      	strb	r1, [r4, #21]
 8013392:	440b      	add	r3, r1
 8013394:	60a2      	str	r2, [r4, #8]
 8013396:	6123      	str	r3, [r4, #16]
 8013398:	7da0      	ldrb	r0, [r4, #22]
 801339a:	f080 0001 	eor.w	r0, r0, #1
 801339e:	b002      	add	sp, #8
 80133a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133a4:	466b      	mov	r3, sp
 80133a6:	68a2      	ldr	r2, [r4, #8]
 80133a8:	cb03      	ldmia	r3!, {r0, r1}
 80133aa:	6010      	str	r0, [r2, #0]
 80133ac:	6051      	str	r1, [r2, #4]
 80133ae:	e7eb      	b.n	8013388 <ucdr_serialize_double+0x10c>
 80133b0:	68a2      	ldr	r2, [r4, #8]
 80133b2:	6923      	ldr	r3, [r4, #16]
 80133b4:	7da0      	ldrb	r0, [r4, #22]
 80133b6:	1b92      	subs	r2, r2, r6
 80133b8:	1b9b      	subs	r3, r3, r6
 80133ba:	7567      	strb	r7, [r4, #21]
 80133bc:	f080 0001 	eor.w	r0, r0, #1
 80133c0:	60a2      	str	r2, [r4, #8]
 80133c2:	6123      	str	r3, [r4, #16]
 80133c4:	b002      	add	sp, #8
 80133c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ca:	68a3      	ldr	r3, [r4, #8]
 80133cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80133d0:	701a      	strb	r2, [r3, #0]
 80133d2:	68a3      	ldr	r3, [r4, #8]
 80133d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80133d8:	701a      	strb	r2, [r3, #0]
 80133da:	68a3      	ldr	r3, [r4, #8]
 80133dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80133e0:	701a      	strb	r2, [r3, #0]
 80133e2:	68a3      	ldr	r3, [r4, #8]
 80133e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80133e8:	701a      	strb	r2, [r3, #0]
 80133ea:	68a3      	ldr	r3, [r4, #8]
 80133ec:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80133f0:	701a      	strb	r2, [r3, #0]
 80133f2:	68a3      	ldr	r3, [r4, #8]
 80133f4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80133f8:	701a      	strb	r2, [r3, #0]
 80133fa:	68a3      	ldr	r3, [r4, #8]
 80133fc:	f89d 2000 	ldrb.w	r2, [sp]
 8013400:	701a      	strb	r2, [r3, #0]
 8013402:	e78a      	b.n	801331a <ucdr_serialize_double+0x9e>
 8013404:	4628      	mov	r0, r5
 8013406:	466d      	mov	r5, sp
 8013408:	4632      	mov	r2, r6
 801340a:	4629      	mov	r1, r5
 801340c:	f00d ff57 	bl	80212be <memcpy>
 8013410:	4642      	mov	r2, r8
 8013412:	19a9      	adds	r1, r5, r6
 8013414:	68a0      	ldr	r0, [r4, #8]
 8013416:	f00d ff52 	bl	80212be <memcpy>
 801341a:	e77e      	b.n	801331a <ucdr_serialize_double+0x9e>

0801341c <ucdr_deserialize_double>:
 801341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013420:	4604      	mov	r4, r0
 8013422:	460d      	mov	r5, r1
 8013424:	2108      	movs	r1, #8
 8013426:	f000 f91f 	bl	8013668 <ucdr_buffer_alignment>
 801342a:	4601      	mov	r1, r0
 801342c:	4620      	mov	r0, r4
 801342e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013432:	f000 f961 	bl	80136f8 <ucdr_advance_buffer>
 8013436:	2108      	movs	r1, #8
 8013438:	4620      	mov	r0, r4
 801343a:	f000 f8b5 	bl	80135a8 <ucdr_check_buffer_available_for>
 801343e:	2800      	cmp	r0, #0
 8013440:	d151      	bne.n	80134e6 <ucdr_deserialize_double+0xca>
 8013442:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013446:	42be      	cmp	r6, r7
 8013448:	d948      	bls.n	80134dc <ucdr_deserialize_double+0xc0>
 801344a:	6923      	ldr	r3, [r4, #16]
 801344c:	4620      	mov	r0, r4
 801344e:	60a6      	str	r6, [r4, #8]
 8013450:	1bf6      	subs	r6, r6, r7
 8013452:	4433      	add	r3, r6
 8013454:	f1c6 0908 	rsb	r9, r6, #8
 8013458:	6123      	str	r3, [r4, #16]
 801345a:	4649      	mov	r1, r9
 801345c:	f000 f8b0 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 8013460:	2800      	cmp	r0, #0
 8013462:	d06d      	beq.n	8013540 <ucdr_deserialize_double+0x124>
 8013464:	7d23      	ldrb	r3, [r4, #20]
 8013466:	2b01      	cmp	r3, #1
 8013468:	f000 8093 	beq.w	8013592 <ucdr_deserialize_double+0x176>
 801346c:	79fb      	ldrb	r3, [r7, #7]
 801346e:	702b      	strb	r3, [r5, #0]
 8013470:	2e00      	cmp	r6, #0
 8013472:	d072      	beq.n	801355a <ucdr_deserialize_double+0x13e>
 8013474:	79bb      	ldrb	r3, [r7, #6]
 8013476:	2e01      	cmp	r6, #1
 8013478:	706b      	strb	r3, [r5, #1]
 801347a:	f105 0302 	add.w	r3, r5, #2
 801347e:	d070      	beq.n	8013562 <ucdr_deserialize_double+0x146>
 8013480:	797b      	ldrb	r3, [r7, #5]
 8013482:	2e02      	cmp	r6, #2
 8013484:	70ab      	strb	r3, [r5, #2]
 8013486:	f105 0303 	add.w	r3, r5, #3
 801348a:	d06e      	beq.n	801356a <ucdr_deserialize_double+0x14e>
 801348c:	793b      	ldrb	r3, [r7, #4]
 801348e:	2e03      	cmp	r6, #3
 8013490:	70eb      	strb	r3, [r5, #3]
 8013492:	f105 0304 	add.w	r3, r5, #4
 8013496:	d06c      	beq.n	8013572 <ucdr_deserialize_double+0x156>
 8013498:	78fb      	ldrb	r3, [r7, #3]
 801349a:	2e04      	cmp	r6, #4
 801349c:	712b      	strb	r3, [r5, #4]
 801349e:	f105 0305 	add.w	r3, r5, #5
 80134a2:	d06a      	beq.n	801357a <ucdr_deserialize_double+0x15e>
 80134a4:	78bb      	ldrb	r3, [r7, #2]
 80134a6:	2e05      	cmp	r6, #5
 80134a8:	716b      	strb	r3, [r5, #5]
 80134aa:	f105 0306 	add.w	r3, r5, #6
 80134ae:	d068      	beq.n	8013582 <ucdr_deserialize_double+0x166>
 80134b0:	787b      	ldrb	r3, [r7, #1]
 80134b2:	2e06      	cmp	r6, #6
 80134b4:	71ab      	strb	r3, [r5, #6]
 80134b6:	f105 0307 	add.w	r3, r5, #7
 80134ba:	d066      	beq.n	801358a <ucdr_deserialize_double+0x16e>
 80134bc:	783b      	ldrb	r3, [r7, #0]
 80134be:	71eb      	strb	r3, [r5, #7]
 80134c0:	6923      	ldr	r3, [r4, #16]
 80134c2:	2108      	movs	r1, #8
 80134c4:	68a2      	ldr	r2, [r4, #8]
 80134c6:	3308      	adds	r3, #8
 80134c8:	7da0      	ldrb	r0, [r4, #22]
 80134ca:	444a      	add	r2, r9
 80134cc:	7561      	strb	r1, [r4, #21]
 80134ce:	1b9e      	subs	r6, r3, r6
 80134d0:	f080 0001 	eor.w	r0, r0, #1
 80134d4:	60a2      	str	r2, [r4, #8]
 80134d6:	6126      	str	r6, [r4, #16]
 80134d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134dc:	2108      	movs	r1, #8
 80134de:	4620      	mov	r0, r4
 80134e0:	f000 f86e 	bl	80135c0 <ucdr_check_final_buffer_behavior>
 80134e4:	b310      	cbz	r0, 801352c <ucdr_deserialize_double+0x110>
 80134e6:	7d23      	ldrb	r3, [r4, #20]
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	68a3      	ldr	r3, [r4, #8]
 80134ec:	d023      	beq.n	8013536 <ucdr_deserialize_double+0x11a>
 80134ee:	79db      	ldrb	r3, [r3, #7]
 80134f0:	702b      	strb	r3, [r5, #0]
 80134f2:	68a3      	ldr	r3, [r4, #8]
 80134f4:	799b      	ldrb	r3, [r3, #6]
 80134f6:	706b      	strb	r3, [r5, #1]
 80134f8:	68a3      	ldr	r3, [r4, #8]
 80134fa:	795b      	ldrb	r3, [r3, #5]
 80134fc:	70ab      	strb	r3, [r5, #2]
 80134fe:	68a3      	ldr	r3, [r4, #8]
 8013500:	791b      	ldrb	r3, [r3, #4]
 8013502:	70eb      	strb	r3, [r5, #3]
 8013504:	68a3      	ldr	r3, [r4, #8]
 8013506:	78db      	ldrb	r3, [r3, #3]
 8013508:	712b      	strb	r3, [r5, #4]
 801350a:	68a3      	ldr	r3, [r4, #8]
 801350c:	789b      	ldrb	r3, [r3, #2]
 801350e:	716b      	strb	r3, [r5, #5]
 8013510:	68a3      	ldr	r3, [r4, #8]
 8013512:	785b      	ldrb	r3, [r3, #1]
 8013514:	71ab      	strb	r3, [r5, #6]
 8013516:	68a3      	ldr	r3, [r4, #8]
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	71eb      	strb	r3, [r5, #7]
 801351c:	2108      	movs	r1, #8
 801351e:	68a2      	ldr	r2, [r4, #8]
 8013520:	6923      	ldr	r3, [r4, #16]
 8013522:	440a      	add	r2, r1
 8013524:	7561      	strb	r1, [r4, #21]
 8013526:	440b      	add	r3, r1
 8013528:	60a2      	str	r2, [r4, #8]
 801352a:	6123      	str	r3, [r4, #16]
 801352c:	7da0      	ldrb	r0, [r4, #22]
 801352e:	f080 0001 	eor.w	r0, r0, #1
 8013532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	602a      	str	r2, [r5, #0]
 801353c:	606b      	str	r3, [r5, #4]
 801353e:	e7ed      	b.n	801351c <ucdr_deserialize_double+0x100>
 8013540:	68a2      	ldr	r2, [r4, #8]
 8013542:	6923      	ldr	r3, [r4, #16]
 8013544:	1b92      	subs	r2, r2, r6
 8013546:	7da0      	ldrb	r0, [r4, #22]
 8013548:	1b9b      	subs	r3, r3, r6
 801354a:	f884 8015 	strb.w	r8, [r4, #21]
 801354e:	f080 0001 	eor.w	r0, r0, #1
 8013552:	60a2      	str	r2, [r4, #8]
 8013554:	6123      	str	r3, [r4, #16]
 8013556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801355a:	68a3      	ldr	r3, [r4, #8]
 801355c:	799b      	ldrb	r3, [r3, #6]
 801355e:	706b      	strb	r3, [r5, #1]
 8013560:	1cab      	adds	r3, r5, #2
 8013562:	68a2      	ldr	r2, [r4, #8]
 8013564:	7952      	ldrb	r2, [r2, #5]
 8013566:	f803 2b01 	strb.w	r2, [r3], #1
 801356a:	68a2      	ldr	r2, [r4, #8]
 801356c:	7912      	ldrb	r2, [r2, #4]
 801356e:	f803 2b01 	strb.w	r2, [r3], #1
 8013572:	68a2      	ldr	r2, [r4, #8]
 8013574:	78d2      	ldrb	r2, [r2, #3]
 8013576:	f803 2b01 	strb.w	r2, [r3], #1
 801357a:	68a2      	ldr	r2, [r4, #8]
 801357c:	7892      	ldrb	r2, [r2, #2]
 801357e:	f803 2b01 	strb.w	r2, [r3], #1
 8013582:	68a2      	ldr	r2, [r4, #8]
 8013584:	7852      	ldrb	r2, [r2, #1]
 8013586:	f803 2b01 	strb.w	r2, [r3], #1
 801358a:	68a2      	ldr	r2, [r4, #8]
 801358c:	7812      	ldrb	r2, [r2, #0]
 801358e:	701a      	strb	r2, [r3, #0]
 8013590:	e796      	b.n	80134c0 <ucdr_deserialize_double+0xa4>
 8013592:	4639      	mov	r1, r7
 8013594:	4632      	mov	r2, r6
 8013596:	4628      	mov	r0, r5
 8013598:	f00d fe91 	bl	80212be <memcpy>
 801359c:	464a      	mov	r2, r9
 801359e:	19a8      	adds	r0, r5, r6
 80135a0:	68a1      	ldr	r1, [r4, #8]
 80135a2:	f00d fe8c 	bl	80212be <memcpy>
 80135a6:	e78b      	b.n	80134c0 <ucdr_deserialize_double+0xa4>

080135a8 <ucdr_check_buffer_available_for>:
 80135a8:	7d83      	ldrb	r3, [r0, #22]
 80135aa:	b93b      	cbnz	r3, 80135bc <ucdr_check_buffer_available_for+0x14>
 80135ac:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80135b0:	4419      	add	r1, r3
 80135b2:	4288      	cmp	r0, r1
 80135b4:	bf34      	ite	cc
 80135b6:	2000      	movcc	r0, #0
 80135b8:	2001      	movcs	r0, #1
 80135ba:	4770      	bx	lr
 80135bc:	2000      	movs	r0, #0
 80135be:	4770      	bx	lr

080135c0 <ucdr_check_final_buffer_behavior>:
 80135c0:	7d83      	ldrb	r3, [r0, #22]
 80135c2:	b943      	cbnz	r3, 80135d6 <ucdr_check_final_buffer_behavior+0x16>
 80135c4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80135c8:	b510      	push	{r4, lr}
 80135ca:	4291      	cmp	r1, r2
 80135cc:	4604      	mov	r4, r0
 80135ce:	d205      	bcs.n	80135dc <ucdr_check_final_buffer_behavior+0x1c>
 80135d0:	2301      	movs	r3, #1
 80135d2:	4618      	mov	r0, r3
 80135d4:	bd10      	pop	{r4, pc}
 80135d6:	2300      	movs	r3, #0
 80135d8:	4618      	mov	r0, r3
 80135da:	4770      	bx	lr
 80135dc:	6982      	ldr	r2, [r0, #24]
 80135de:	b13a      	cbz	r2, 80135f0 <ucdr_check_final_buffer_behavior+0x30>
 80135e0:	69c1      	ldr	r1, [r0, #28]
 80135e2:	4790      	blx	r2
 80135e4:	f080 0301 	eor.w	r3, r0, #1
 80135e8:	75a0      	strb	r0, [r4, #22]
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	4618      	mov	r0, r3
 80135ee:	bd10      	pop	{r4, pc}
 80135f0:	2001      	movs	r0, #1
 80135f2:	75a0      	strb	r0, [r4, #22]
 80135f4:	e7fa      	b.n	80135ec <ucdr_check_final_buffer_behavior+0x2c>
 80135f6:	bf00      	nop

080135f8 <ucdr_set_on_full_buffer_callback>:
 80135f8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80135fc:	4770      	bx	lr
 80135fe:	bf00      	nop

08013600 <ucdr_init_buffer_origin_offset_endian>:
 8013600:	b410      	push	{r4}
 8013602:	9c01      	ldr	r4, [sp, #4]
 8013604:	440a      	add	r2, r1
 8013606:	6001      	str	r1, [r0, #0]
 8013608:	6042      	str	r2, [r0, #4]
 801360a:	190a      	adds	r2, r1, r4
 801360c:	441c      	add	r4, r3
 801360e:	6082      	str	r2, [r0, #8]
 8013610:	2200      	movs	r2, #0
 8013612:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8013616:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801361a:	7542      	strb	r2, [r0, #21]
 801361c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013620:	7582      	strb	r2, [r0, #22]
 8013622:	7503      	strb	r3, [r0, #20]
 8013624:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013628:	4770      	bx	lr
 801362a:	bf00      	nop

0801362c <ucdr_init_buffer_origin_offset>:
 801362c:	b510      	push	{r4, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	9c04      	ldr	r4, [sp, #16]
 8013632:	9400      	str	r4, [sp, #0]
 8013634:	2401      	movs	r4, #1
 8013636:	9401      	str	r4, [sp, #4]
 8013638:	f7ff ffe2 	bl	8013600 <ucdr_init_buffer_origin_offset_endian>
 801363c:	b002      	add	sp, #8
 801363e:	bd10      	pop	{r4, pc}

08013640 <ucdr_init_buffer_origin>:
 8013640:	b510      	push	{r4, lr}
 8013642:	2400      	movs	r4, #0
 8013644:	b082      	sub	sp, #8
 8013646:	9400      	str	r4, [sp, #0]
 8013648:	f7ff fff0 	bl	801362c <ucdr_init_buffer_origin_offset>
 801364c:	b002      	add	sp, #8
 801364e:	bd10      	pop	{r4, pc}

08013650 <ucdr_init_buffer>:
 8013650:	2300      	movs	r3, #0
 8013652:	f7ff bff5 	b.w	8013640 <ucdr_init_buffer_origin>
 8013656:	bf00      	nop

08013658 <ucdr_alignment>:
 8013658:	fbb0 f2f1 	udiv	r2, r0, r1
 801365c:	fb02 0011 	mls	r0, r2, r1, r0
 8013660:	1e4b      	subs	r3, r1, #1
 8013662:	1a08      	subs	r0, r1, r0
 8013664:	4018      	ands	r0, r3
 8013666:	4770      	bx	lr

08013668 <ucdr_buffer_alignment>:
 8013668:	7d43      	ldrb	r3, [r0, #21]
 801366a:	428b      	cmp	r3, r1
 801366c:	d209      	bcs.n	8013682 <ucdr_buffer_alignment+0x1a>
 801366e:	6903      	ldr	r3, [r0, #16]
 8013670:	1e4a      	subs	r2, r1, #1
 8013672:	fbb3 f0f1 	udiv	r0, r3, r1
 8013676:	fb01 3010 	mls	r0, r1, r0, r3
 801367a:	1a09      	subs	r1, r1, r0
 801367c:	ea01 0002 	and.w	r0, r1, r2
 8013680:	4770      	bx	lr
 8013682:	2000      	movs	r0, #0
 8013684:	4770      	bx	lr
 8013686:	bf00      	nop

08013688 <ucdr_align_to>:
 8013688:	b538      	push	{r3, r4, r5, lr}
 801368a:	4604      	mov	r4, r0
 801368c:	460d      	mov	r5, r1
 801368e:	f7ff ffeb 	bl	8013668 <ucdr_buffer_alignment>
 8013692:	68a3      	ldr	r3, [r4, #8]
 8013694:	7565      	strb	r5, [r4, #21]
 8013696:	181a      	adds	r2, r3, r0
 8013698:	6923      	ldr	r3, [r4, #16]
 801369a:	4418      	add	r0, r3
 801369c:	6863      	ldr	r3, [r4, #4]
 801369e:	4293      	cmp	r3, r2
 80136a0:	6120      	str	r0, [r4, #16]
 80136a2:	bf28      	it	cs
 80136a4:	4613      	movcs	r3, r2
 80136a6:	60a3      	str	r3, [r4, #8]
 80136a8:	bd38      	pop	{r3, r4, r5, pc}
 80136aa:	bf00      	nop

080136ac <ucdr_buffer_length>:
 80136ac:	6882      	ldr	r2, [r0, #8]
 80136ae:	6800      	ldr	r0, [r0, #0]
 80136b0:	1a10      	subs	r0, r2, r0
 80136b2:	4770      	bx	lr

080136b4 <ucdr_buffer_remaining>:
 80136b4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80136b8:	1a10      	subs	r0, r2, r0
 80136ba:	4770      	bx	lr

080136bc <ucdr_check_final_buffer_behavior_array>:
 80136bc:	b538      	push	{r3, r4, r5, lr}
 80136be:	7d83      	ldrb	r3, [r0, #22]
 80136c0:	b9a3      	cbnz	r3, 80136ec <ucdr_check_final_buffer_behavior_array+0x30>
 80136c2:	4604      	mov	r4, r0
 80136c4:	460d      	mov	r5, r1
 80136c6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d300      	bcc.n	80136d0 <ucdr_check_final_buffer_behavior_array+0x14>
 80136ce:	b931      	cbnz	r1, 80136de <ucdr_check_final_buffer_behavior_array+0x22>
 80136d0:	4620      	mov	r0, r4
 80136d2:	f7ff ffef 	bl	80136b4 <ucdr_buffer_remaining>
 80136d6:	42a8      	cmp	r0, r5
 80136d8:	bf28      	it	cs
 80136da:	4628      	movcs	r0, r5
 80136dc:	bd38      	pop	{r3, r4, r5, pc}
 80136de:	6983      	ldr	r3, [r0, #24]
 80136e0:	b133      	cbz	r3, 80136f0 <ucdr_check_final_buffer_behavior_array+0x34>
 80136e2:	69c1      	ldr	r1, [r0, #28]
 80136e4:	4798      	blx	r3
 80136e6:	75a0      	strb	r0, [r4, #22]
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d0f1      	beq.n	80136d0 <ucdr_check_final_buffer_behavior_array+0x14>
 80136ec:	2000      	movs	r0, #0
 80136ee:	bd38      	pop	{r3, r4, r5, pc}
 80136f0:	2301      	movs	r3, #1
 80136f2:	7583      	strb	r3, [r0, #22]
 80136f4:	e7fa      	b.n	80136ec <ucdr_check_final_buffer_behavior_array+0x30>
 80136f6:	bf00      	nop

080136f8 <ucdr_advance_buffer>:
 80136f8:	b538      	push	{r3, r4, r5, lr}
 80136fa:	4604      	mov	r4, r0
 80136fc:	460d      	mov	r5, r1
 80136fe:	f7ff ff53 	bl	80135a8 <ucdr_check_buffer_available_for>
 8013702:	b178      	cbz	r0, 8013724 <ucdr_advance_buffer+0x2c>
 8013704:	6923      	ldr	r3, [r4, #16]
 8013706:	68a2      	ldr	r2, [r4, #8]
 8013708:	442b      	add	r3, r5
 801370a:	442a      	add	r2, r5
 801370c:	6123      	str	r3, [r4, #16]
 801370e:	2301      	movs	r3, #1
 8013710:	60a2      	str	r2, [r4, #8]
 8013712:	7563      	strb	r3, [r4, #21]
 8013714:	bd38      	pop	{r3, r4, r5, pc}
 8013716:	68a2      	ldr	r2, [r4, #8]
 8013718:	1a2d      	subs	r5, r5, r0
 801371a:	6923      	ldr	r3, [r4, #16]
 801371c:	4402      	add	r2, r0
 801371e:	4418      	add	r0, r3
 8013720:	60a2      	str	r2, [r4, #8]
 8013722:	6120      	str	r0, [r4, #16]
 8013724:	4629      	mov	r1, r5
 8013726:	2201      	movs	r2, #1
 8013728:	4620      	mov	r0, r4
 801372a:	f7ff ffc7 	bl	80136bc <ucdr_check_final_buffer_behavior_array>
 801372e:	2800      	cmp	r0, #0
 8013730:	d1f1      	bne.n	8013716 <ucdr_advance_buffer+0x1e>
 8013732:	2301      	movs	r3, #1
 8013734:	7563      	strb	r3, [r4, #21]
 8013736:	bd38      	pop	{r3, r4, r5, pc}

08013738 <ucdr_serialize_sequence_char>:
 8013738:	b570      	push	{r4, r5, r6, lr}
 801373a:	4615      	mov	r5, r2
 801373c:	460e      	mov	r6, r1
 801373e:	7d01      	ldrb	r1, [r0, #20]
 8013740:	4604      	mov	r4, r0
 8013742:	f7fe ff5b 	bl	80125fc <ucdr_serialize_endian_uint32_t>
 8013746:	b90d      	cbnz	r5, 801374c <ucdr_serialize_sequence_char+0x14>
 8013748:	2001      	movs	r0, #1
 801374a:	bd70      	pop	{r4, r5, r6, pc}
 801374c:	462b      	mov	r3, r5
 801374e:	4632      	mov	r2, r6
 8013750:	7d21      	ldrb	r1, [r4, #20]
 8013752:	4620      	mov	r0, r4
 8013754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013758:	f004 b908 	b.w	801796c <ucdr_serialize_endian_array_char>

0801375c <ucdr_deserialize_sequence_char>:
 801375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013760:	461d      	mov	r5, r3
 8013762:	4616      	mov	r6, r2
 8013764:	460f      	mov	r7, r1
 8013766:	461a      	mov	r2, r3
 8013768:	7d01      	ldrb	r1, [r0, #20]
 801376a:	4604      	mov	r4, r0
 801376c:	f7ff f86e 	bl	801284c <ucdr_deserialize_endian_uint32_t>
 8013770:	682b      	ldr	r3, [r5, #0]
 8013772:	429e      	cmp	r6, r3
 8013774:	d201      	bcs.n	801377a <ucdr_deserialize_sequence_char+0x1e>
 8013776:	2201      	movs	r2, #1
 8013778:	75a2      	strb	r2, [r4, #22]
 801377a:	b913      	cbnz	r3, 8013782 <ucdr_deserialize_sequence_char+0x26>
 801377c:	2001      	movs	r0, #1
 801377e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013782:	463a      	mov	r2, r7
 8013784:	7d21      	ldrb	r1, [r4, #20]
 8013786:	4620      	mov	r0, r4
 8013788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801378c:	f004 b920 	b.w	80179d0 <ucdr_deserialize_endian_array_char>

08013790 <ucdr_serialize_sequence_uint8_t>:
 8013790:	b570      	push	{r4, r5, r6, lr}
 8013792:	4615      	mov	r5, r2
 8013794:	460e      	mov	r6, r1
 8013796:	7d01      	ldrb	r1, [r0, #20]
 8013798:	4604      	mov	r4, r0
 801379a:	f7fe ff2f 	bl	80125fc <ucdr_serialize_endian_uint32_t>
 801379e:	b90d      	cbnz	r5, 80137a4 <ucdr_serialize_sequence_uint8_t+0x14>
 80137a0:	2001      	movs	r0, #1
 80137a2:	bd70      	pop	{r4, r5, r6, pc}
 80137a4:	462b      	mov	r3, r5
 80137a6:	4632      	mov	r2, r6
 80137a8:	7d21      	ldrb	r1, [r4, #20]
 80137aa:	4620      	mov	r0, r4
 80137ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137b0:	f004 b974 	b.w	8017a9c <ucdr_serialize_endian_array_uint8_t>

080137b4 <ucdr_deserialize_sequence_uint8_t>:
 80137b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b8:	461d      	mov	r5, r3
 80137ba:	4616      	mov	r6, r2
 80137bc:	460f      	mov	r7, r1
 80137be:	461a      	mov	r2, r3
 80137c0:	7d01      	ldrb	r1, [r0, #20]
 80137c2:	4604      	mov	r4, r0
 80137c4:	f7ff f842 	bl	801284c <ucdr_deserialize_endian_uint32_t>
 80137c8:	682b      	ldr	r3, [r5, #0]
 80137ca:	429e      	cmp	r6, r3
 80137cc:	d201      	bcs.n	80137d2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 80137ce:	2201      	movs	r2, #1
 80137d0:	75a2      	strb	r2, [r4, #22]
 80137d2:	b913      	cbnz	r3, 80137da <ucdr_deserialize_sequence_uint8_t+0x26>
 80137d4:	2001      	movs	r0, #1
 80137d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137da:	463a      	mov	r2, r7
 80137dc:	7d21      	ldrb	r1, [r4, #20]
 80137de:	4620      	mov	r0, r4
 80137e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137e4:	f004 b9c0 	b.w	8017b68 <ucdr_deserialize_endian_array_uint8_t>

080137e8 <rcl_get_zero_initialized_init_options>:
 80137e8:	2000      	movs	r0, #0
 80137ea:	4770      	bx	lr

080137ec <rcl_init_options_init>:
 80137ec:	b084      	sub	sp, #16
 80137ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137f0:	b097      	sub	sp, #92	; 0x5c
 80137f2:	ae1d      	add	r6, sp, #116	; 0x74
 80137f4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80137f8:	2800      	cmp	r0, #0
 80137fa:	d058      	beq.n	80138ae <rcl_init_options_init+0xc2>
 80137fc:	6803      	ldr	r3, [r0, #0]
 80137fe:	4605      	mov	r5, r0
 8013800:	b133      	cbz	r3, 8013810 <rcl_init_options_init+0x24>
 8013802:	2464      	movs	r4, #100	; 0x64
 8013804:	4620      	mov	r0, r4
 8013806:	b017      	add	sp, #92	; 0x5c
 8013808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801380c:	b004      	add	sp, #16
 801380e:	4770      	bx	lr
 8013810:	4630      	mov	r0, r6
 8013812:	f001 fdf3 	bl	80153fc <rcutils_allocator_is_valid>
 8013816:	2800      	cmp	r0, #0
 8013818:	d049      	beq.n	80138ae <rcl_init_options_init+0xc2>
 801381a:	46b4      	mov	ip, r6
 801381c:	ac11      	add	r4, sp, #68	; 0x44
 801381e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013824:	f8dc 3000 	ldr.w	r3, [ip]
 8013828:	2050      	movs	r0, #80	; 0x50
 801382a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801382c:	6023      	str	r3, [r4, #0]
 801382e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013830:	4798      	blx	r3
 8013832:	4604      	mov	r4, r0
 8013834:	6028      	str	r0, [r5, #0]
 8013836:	2800      	cmp	r0, #0
 8013838:	d03b      	beq.n	80138b2 <rcl_init_options_init+0xc6>
 801383a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801383e:	4686      	mov	lr, r0
 8013840:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013844:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013848:	f8dc 3000 	ldr.w	r3, [ip]
 801384c:	a802      	add	r0, sp, #8
 801384e:	f8ce 3000 	str.w	r3, [lr]
 8013852:	f001 fff1 	bl	8015838 <rmw_get_zero_initialized_init_options>
 8013856:	f10d 0e08 	add.w	lr, sp, #8
 801385a:	f104 0c18 	add.w	ip, r4, #24
 801385e:	682f      	ldr	r7, [r5, #0]
 8013860:	ac20      	add	r4, sp, #128	; 0x80
 8013862:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013866:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801386a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801386e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013872:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013876:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801387a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801387e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013882:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013886:	e88d 0003 	stmia.w	sp, {r0, r1}
 801388a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801388e:	f107 0018 	add.w	r0, r7, #24
 8013892:	f002 f8f9 	bl	8015a88 <rmw_init_options_init>
 8013896:	4604      	mov	r4, r0
 8013898:	2800      	cmp	r0, #0
 801389a:	d0b3      	beq.n	8013804 <rcl_init_options_init+0x18>
 801389c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801389e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80138a0:	6828      	ldr	r0, [r5, #0]
 80138a2:	4798      	blx	r3
 80138a4:	4620      	mov	r0, r4
 80138a6:	f007 ff8d 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80138aa:	4604      	mov	r4, r0
 80138ac:	e7aa      	b.n	8013804 <rcl_init_options_init+0x18>
 80138ae:	240b      	movs	r4, #11
 80138b0:	e7a8      	b.n	8013804 <rcl_init_options_init+0x18>
 80138b2:	240a      	movs	r4, #10
 80138b4:	e7a6      	b.n	8013804 <rcl_init_options_init+0x18>
 80138b6:	bf00      	nop

080138b8 <rcl_init_options_fini>:
 80138b8:	b530      	push	{r4, r5, lr}
 80138ba:	b087      	sub	sp, #28
 80138bc:	b1f0      	cbz	r0, 80138fc <rcl_init_options_fini+0x44>
 80138be:	6803      	ldr	r3, [r0, #0]
 80138c0:	4604      	mov	r4, r0
 80138c2:	b1db      	cbz	r3, 80138fc <rcl_init_options_fini+0x44>
 80138c4:	469c      	mov	ip, r3
 80138c6:	f10d 0e04 	add.w	lr, sp, #4
 80138ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80138ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80138d2:	f8dc 3000 	ldr.w	r3, [ip]
 80138d6:	a801      	add	r0, sp, #4
 80138d8:	f8ce 3000 	str.w	r3, [lr]
 80138dc:	f001 fd8e 	bl	80153fc <rcutils_allocator_is_valid>
 80138e0:	b160      	cbz	r0, 80138fc <rcl_init_options_fini+0x44>
 80138e2:	6820      	ldr	r0, [r4, #0]
 80138e4:	3018      	adds	r0, #24
 80138e6:	f002 f989 	bl	8015bfc <rmw_init_options_fini>
 80138ea:	4605      	mov	r5, r0
 80138ec:	b950      	cbnz	r0, 8013904 <rcl_init_options_fini+0x4c>
 80138ee:	6820      	ldr	r0, [r4, #0]
 80138f0:	9b02      	ldr	r3, [sp, #8]
 80138f2:	9905      	ldr	r1, [sp, #20]
 80138f4:	4798      	blx	r3
 80138f6:	4628      	mov	r0, r5
 80138f8:	b007      	add	sp, #28
 80138fa:	bd30      	pop	{r4, r5, pc}
 80138fc:	250b      	movs	r5, #11
 80138fe:	4628      	mov	r0, r5
 8013900:	b007      	add	sp, #28
 8013902:	bd30      	pop	{r4, r5, pc}
 8013904:	f007 ff5e 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013908:	4605      	mov	r5, r0
 801390a:	e7f8      	b.n	80138fe <rcl_init_options_fini+0x46>

0801390c <rcl_init_options_copy>:
 801390c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013910:	b094      	sub	sp, #80	; 0x50
 8013912:	2800      	cmp	r0, #0
 8013914:	d05b      	beq.n	80139ce <rcl_init_options_copy+0xc2>
 8013916:	4604      	mov	r4, r0
 8013918:	6800      	ldr	r0, [r0, #0]
 801391a:	2800      	cmp	r0, #0
 801391c:	d057      	beq.n	80139ce <rcl_init_options_copy+0xc2>
 801391e:	460e      	mov	r6, r1
 8013920:	f001 fd6c 	bl	80153fc <rcutils_allocator_is_valid>
 8013924:	2e00      	cmp	r6, #0
 8013926:	d052      	beq.n	80139ce <rcl_init_options_copy+0xc2>
 8013928:	f080 0001 	eor.w	r0, r0, #1
 801392c:	b2c0      	uxtb	r0, r0
 801392e:	2800      	cmp	r0, #0
 8013930:	d14d      	bne.n	80139ce <rcl_init_options_copy+0xc2>
 8013932:	6833      	ldr	r3, [r6, #0]
 8013934:	b123      	cbz	r3, 8013940 <rcl_init_options_copy+0x34>
 8013936:	2464      	movs	r4, #100	; 0x64
 8013938:	4620      	mov	r0, r4
 801393a:	b014      	add	sp, #80	; 0x50
 801393c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013940:	6827      	ldr	r7, [r4, #0]
 8013942:	ad0f      	add	r5, sp, #60	; 0x3c
 8013944:	46bc      	mov	ip, r7
 8013946:	f8d7 8000 	ldr.w	r8, [r7]
 801394a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801394e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013950:	f8dc 3000 	ldr.w	r3, [ip]
 8013954:	2050      	movs	r0, #80	; 0x50
 8013956:	4619      	mov	r1, r3
 8013958:	602b      	str	r3, [r5, #0]
 801395a:	47c0      	blx	r8
 801395c:	4605      	mov	r5, r0
 801395e:	6030      	str	r0, [r6, #0]
 8013960:	b3d0      	cbz	r0, 80139d8 <rcl_init_options_copy+0xcc>
 8013962:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8013966:	4686      	mov	lr, r0
 8013968:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801396c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013970:	f8dc 3000 	ldr.w	r3, [ip]
 8013974:	4668      	mov	r0, sp
 8013976:	f8ce 3000 	str.w	r3, [lr]
 801397a:	f001 ff5d 	bl	8015838 <rmw_get_zero_initialized_init_options>
 801397e:	46ee      	mov	lr, sp
 8013980:	f105 0c18 	add.w	ip, r5, #24
 8013984:	6824      	ldr	r4, [r4, #0]
 8013986:	6835      	ldr	r5, [r6, #0]
 8013988:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801398c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013990:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013994:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013998:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801399c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80139a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80139a8:	f104 0018 	add.w	r0, r4, #24
 80139ac:	f105 0118 	add.w	r1, r5, #24
 80139b0:	f002 f8d2 	bl	8015b58 <rmw_init_options_copy>
 80139b4:	4604      	mov	r4, r0
 80139b6:	2800      	cmp	r0, #0
 80139b8:	d0be      	beq.n	8013938 <rcl_init_options_copy+0x2c>
 80139ba:	f001 fd45 	bl	8015448 <rcutils_get_error_string>
 80139be:	f001 fd5b 	bl	8015478 <rcutils_reset_error>
 80139c2:	4630      	mov	r0, r6
 80139c4:	f7ff ff78 	bl	80138b8 <rcl_init_options_fini>
 80139c8:	b140      	cbz	r0, 80139dc <rcl_init_options_copy+0xd0>
 80139ca:	4604      	mov	r4, r0
 80139cc:	e7b4      	b.n	8013938 <rcl_init_options_copy+0x2c>
 80139ce:	240b      	movs	r4, #11
 80139d0:	4620      	mov	r0, r4
 80139d2:	b014      	add	sp, #80	; 0x50
 80139d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d8:	240a      	movs	r4, #10
 80139da:	e7ad      	b.n	8013938 <rcl_init_options_copy+0x2c>
 80139dc:	4620      	mov	r0, r4
 80139de:	b014      	add	sp, #80	; 0x50
 80139e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139e4:	f007 beee 	b.w	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>

080139e8 <rcl_init_options_set_domain_id>:
 80139e8:	b120      	cbz	r0, 80139f4 <rcl_init_options_set_domain_id+0xc>
 80139ea:	6803      	ldr	r3, [r0, #0]
 80139ec:	b113      	cbz	r3, 80139f4 <rcl_init_options_set_domain_id+0xc>
 80139ee:	2000      	movs	r0, #0
 80139f0:	6259      	str	r1, [r3, #36]	; 0x24
 80139f2:	4770      	bx	lr
 80139f4:	200b      	movs	r0, #11
 80139f6:	4770      	bx	lr

080139f8 <rcl_get_zero_initialized_node>:
 80139f8:	4a03      	ldr	r2, [pc, #12]	; (8013a08 <rcl_get_zero_initialized_node+0x10>)
 80139fa:	4603      	mov	r3, r0
 80139fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a00:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a04:	4618      	mov	r0, r3
 8013a06:	4770      	bx	lr
 8013a08:	08025198 	.word	0x08025198

08013a0c <rcl_node_init>:
 8013a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a10:	b0a9      	sub	sp, #164	; 0xa4
 8013a12:	4604      	mov	r4, r0
 8013a14:	460e      	mov	r6, r1
 8013a16:	4615      	mov	r5, r2
 8013a18:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8013a1c:	a823      	add	r0, sp, #140	; 0x8c
 8013a1e:	461f      	mov	r7, r3
 8013a20:	f007 ffe0 	bl	801b9e4 <rcl_guard_condition_get_default_options>
 8013a24:	f1b8 0f00 	cmp.w	r8, #0
 8013a28:	f000 80f3 	beq.w	8013c12 <rcl_node_init+0x206>
 8013a2c:	4640      	mov	r0, r8
 8013a2e:	f001 fce5 	bl	80153fc <rcutils_allocator_is_valid>
 8013a32:	2d00      	cmp	r5, #0
 8013a34:	bf18      	it	ne
 8013a36:	2c00      	cmpne	r4, #0
 8013a38:	f080 0001 	eor.w	r0, r0, #1
 8013a3c:	bf0c      	ite	eq
 8013a3e:	f04f 0c01 	moveq.w	ip, #1
 8013a42:	f04f 0c00 	movne.w	ip, #0
 8013a46:	2e00      	cmp	r6, #0
 8013a48:	bf08      	it	eq
 8013a4a:	f04c 0c01 	orreq.w	ip, ip, #1
 8013a4e:	ea4c 0c00 	orr.w	ip, ip, r0
 8013a52:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8013a56:	f040 80dc 	bne.w	8013c12 <rcl_node_init+0x206>
 8013a5a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013a5e:	f1ba 0f00 	cmp.w	sl, #0
 8013a62:	f040 80fc 	bne.w	8013c5e <rcl_node_init+0x252>
 8013a66:	2f00      	cmp	r7, #0
 8013a68:	f000 80d3 	beq.w	8013c12 <rcl_node_init+0x206>
 8013a6c:	4638      	mov	r0, r7
 8013a6e:	f007 fec7 	bl	801b800 <rcl_context_is_valid>
 8013a72:	4683      	mov	fp, r0
 8013a74:	2800      	cmp	r0, #0
 8013a76:	f000 80d2 	beq.w	8013c1e <rcl_node_init+0x212>
 8013a7a:	4652      	mov	r2, sl
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	a922      	add	r1, sp, #136	; 0x88
 8013a80:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 8013a84:	f001 ff8a 	bl	801599c <rmw_validate_node_name>
 8013a88:	4682      	mov	sl, r0
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	f040 80c3 	bne.w	8013c16 <rcl_node_init+0x20a>
 8013a90:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013a92:	2800      	cmp	r0, #0
 8013a94:	f040 80f1 	bne.w	8013c7a <rcl_node_init+0x26e>
 8013a98:	4628      	mov	r0, r5
 8013a9a:	f7ec fc31 	bl	8000300 <strlen>
 8013a9e:	2800      	cmp	r0, #0
 8013aa0:	f040 80c0 	bne.w	8013c24 <rcl_node_init+0x218>
 8013aa4:	4d79      	ldr	r5, [pc, #484]	; (8013c8c <rcl_node_init+0x280>)
 8013aa6:	a922      	add	r1, sp, #136	; 0x88
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	4628      	mov	r0, r5
 8013aac:	f001 ff58 	bl	8015960 <rmw_validate_namespace>
 8013ab0:	4682      	mov	sl, r0
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	f040 80af 	bne.w	8013c16 <rcl_node_init+0x20a>
 8013ab8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8013aba:	2800      	cmp	r0, #0
 8013abc:	f040 80d5 	bne.w	8013c6a <rcl_node_init+0x25e>
 8013ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8013ac4:	2078      	movs	r0, #120	; 0x78
 8013ac6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013aca:	4798      	blx	r3
 8013acc:	4682      	mov	sl, r0
 8013ace:	6060      	str	r0, [r4, #4]
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	f000 80cf 	beq.w	8013c74 <rcl_node_init+0x268>
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	2300      	movs	r3, #0
 8013ada:	a808      	add	r0, sp, #32
 8013adc:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 8013ae0:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8013ae4:	f000 f902 	bl	8013cec <rcl_node_get_default_options>
 8013ae8:	a908      	add	r1, sp, #32
 8013aea:	4650      	mov	r0, sl
 8013aec:	2268      	movs	r2, #104	; 0x68
 8013aee:	f00d fbe6 	bl	80212be <memcpy>
 8013af2:	6861      	ldr	r1, [r4, #4]
 8013af4:	4640      	mov	r0, r8
 8013af6:	6027      	str	r7, [r4, #0]
 8013af8:	f000 f906 	bl	8013d08 <rcl_node_options_copy>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d158      	bne.n	8013bb2 <rcl_node_init+0x1a6>
 8013b00:	4628      	mov	r0, r5
 8013b02:	f7ec fbfd 	bl	8000300 <strlen>
 8013b06:	4428      	add	r0, r5
 8013b08:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013b0c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013b10:	2b2f      	cmp	r3, #47	; 0x2f
 8013b12:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	bf0c      	ite	eq
 8013b1a:	4b5d      	ldreq	r3, [pc, #372]	; (8013c90 <rcl_node_init+0x284>)
 8013b1c:	4b5d      	ldrne	r3, [pc, #372]	; (8013c94 <rcl_node_init+0x288>)
 8013b1e:	9302      	str	r3, [sp, #8]
 8013b20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b24:	9301      	str	r3, [sp, #4]
 8013b26:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8013b2a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013b2e:	f001 fcbf 	bl	80154b0 <rcutils_format_string_limit>
 8013b32:	6823      	ldr	r3, [r4, #0]
 8013b34:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 8013b38:	4631      	mov	r1, r6
 8013b3a:	6818      	ldr	r0, [r3, #0]
 8013b3c:	462a      	mov	r2, r5
 8013b3e:	6866      	ldr	r6, [r4, #4]
 8013b40:	3028      	adds	r0, #40	; 0x28
 8013b42:	f002 fa87 	bl	8016054 <rmw_create_node>
 8013b46:	6863      	ldr	r3, [r4, #4]
 8013b48:	66b0      	str	r0, [r6, #104]	; 0x68
 8013b4a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013b4c:	2800      	cmp	r0, #0
 8013b4e:	d032      	beq.n	8013bb6 <rcl_node_init+0x1aa>
 8013b50:	f002 fb10 	bl	8016174 <rmw_node_get_graph_guard_condition>
 8013b54:	4682      	mov	sl, r0
 8013b56:	b360      	cbz	r0, 8013bb2 <rcl_node_init+0x1a6>
 8013b58:	f8d8 3000 	ldr.w	r3, [r8]
 8013b5c:	2008      	movs	r0, #8
 8013b5e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013b62:	6866      	ldr	r6, [r4, #4]
 8013b64:	4798      	blx	r3
 8013b66:	6863      	ldr	r3, [r4, #4]
 8013b68:	66f0      	str	r0, [r6, #108]	; 0x6c
 8013b6a:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8013b6e:	f1bb 0f00 	cmp.w	fp, #0
 8013b72:	d020      	beq.n	8013bb6 <rcl_node_init+0x1aa>
 8013b74:	a806      	add	r0, sp, #24
 8013b76:	ae23      	add	r6, sp, #140	; 0x8c
 8013b78:	f007 fea8 	bl	801b8cc <rcl_get_zero_initialized_guard_condition>
 8013b7c:	a806      	add	r0, sp, #24
 8013b7e:	6863      	ldr	r3, [r4, #4]
 8013b80:	46c4      	mov	ip, r8
 8013b82:	c803      	ldmia	r0, {r0, r1}
 8013b84:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8013b88:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013b8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013b90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013b92:	f8dc 3000 	ldr.w	r3, [ip]
 8013b96:	6033      	str	r3, [r6, #0]
 8013b98:	ab28      	add	r3, sp, #160	; 0xa0
 8013b9a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013b9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013ba2:	4651      	mov	r1, sl
 8013ba4:	463a      	mov	r2, r7
 8013ba6:	4670      	mov	r0, lr
 8013ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013baa:	f007 fe99 	bl	801b8e0 <rcl_guard_condition_init_from_rmw>
 8013bae:	4682      	mov	sl, r0
 8013bb0:	b328      	cbz	r0, 8013bfe <rcl_node_init+0x1f2>
 8013bb2:	6863      	ldr	r3, [r4, #4]
 8013bb4:	b1f3      	cbz	r3, 8013bf4 <rcl_node_init+0x1e8>
 8013bb6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8013bb8:	b128      	cbz	r0, 8013bc6 <rcl_node_init+0x1ba>
 8013bba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013bbe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013bc2:	4798      	blx	r3
 8013bc4:	6863      	ldr	r3, [r4, #4]
 8013bc6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013bc8:	b110      	cbz	r0, 8013bd0 <rcl_node_init+0x1c4>
 8013bca:	f002 fa55 	bl	8016078 <rmw_destroy_node>
 8013bce:	6863      	ldr	r3, [r4, #4]
 8013bd0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013bd2:	b148      	cbz	r0, 8013be8 <rcl_node_init+0x1dc>
 8013bd4:	f007 fee0 	bl	801b998 <rcl_guard_condition_fini>
 8013bd8:	6863      	ldr	r3, [r4, #4]
 8013bda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013bde:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013be0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013be4:	4798      	blx	r3
 8013be6:	6863      	ldr	r3, [r4, #4]
 8013be8:	4618      	mov	r0, r3
 8013bea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013bee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013bf2:	4798      	blx	r3
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	f04f 0a01 	mov.w	sl, #1
 8013bfa:	e9c4 3300 	strd	r3, r3, [r4]
 8013bfe:	f1b9 0f00 	cmp.w	r9, #0
 8013c02:	d008      	beq.n	8013c16 <rcl_node_init+0x20a>
 8013c04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013c08:	4628      	mov	r0, r5
 8013c0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013c0e:	4798      	blx	r3
 8013c10:	e001      	b.n	8013c16 <rcl_node_init+0x20a>
 8013c12:	f04f 0a0b 	mov.w	sl, #11
 8013c16:	4650      	mov	r0, sl
 8013c18:	b029      	add	sp, #164	; 0xa4
 8013c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c1e:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8013c22:	e7f8      	b.n	8013c16 <rcl_node_init+0x20a>
 8013c24:	782b      	ldrb	r3, [r5, #0]
 8013c26:	2b2f      	cmp	r3, #47	; 0x2f
 8013c28:	f43f af3d 	beq.w	8013aa6 <rcl_node_init+0x9a>
 8013c2c:	9503      	str	r5, [sp, #12]
 8013c2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	4b18      	ldr	r3, [pc, #96]	; (8013c98 <rcl_node_init+0x28c>)
 8013c36:	9302      	str	r3, [sp, #8]
 8013c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013c3c:	9301      	str	r3, [sp, #4]
 8013c3e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013c42:	f001 fc35 	bl	80154b0 <rcutils_format_string_limit>
 8013c46:	4605      	mov	r5, r0
 8013c48:	b1e0      	cbz	r0, 8013c84 <rcl_node_init+0x278>
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	a922      	add	r1, sp, #136	; 0x88
 8013c4e:	9222      	str	r2, [sp, #136]	; 0x88
 8013c50:	f001 fe86 	bl	8015960 <rmw_validate_namespace>
 8013c54:	4682      	mov	sl, r0
 8013c56:	2800      	cmp	r0, #0
 8013c58:	d1d4      	bne.n	8013c04 <rcl_node_init+0x1f8>
 8013c5a:	46d9      	mov	r9, fp
 8013c5c:	e72c      	b.n	8013ab8 <rcl_node_init+0xac>
 8013c5e:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8013c62:	4650      	mov	r0, sl
 8013c64:	b029      	add	sp, #164	; 0xa4
 8013c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c6a:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8013c6e:	f001 fe89 	bl	8015984 <rmw_namespace_validation_result_string>
 8013c72:	e7c4      	b.n	8013bfe <rcl_node_init+0x1f2>
 8013c74:	f04f 0a0a 	mov.w	sl, #10
 8013c78:	e7c1      	b.n	8013bfe <rcl_node_init+0x1f2>
 8013c7a:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8013c7e:	f001 fee1 	bl	8015a44 <rmw_node_name_validation_result_string>
 8013c82:	e7c8      	b.n	8013c16 <rcl_node_init+0x20a>
 8013c84:	f04f 0a0a 	mov.w	sl, #10
 8013c88:	e7c5      	b.n	8013c16 <rcl_node_init+0x20a>
 8013c8a:	bf00      	nop
 8013c8c:	08025180 	.word	0x08025180
 8013c90:	08025188 	.word	0x08025188
 8013c94:	08025190 	.word	0x08025190
 8013c98:	08025184 	.word	0x08025184

08013c9c <rcl_node_is_valid>:
 8013c9c:	b130      	cbz	r0, 8013cac <rcl_node_is_valid+0x10>
 8013c9e:	6843      	ldr	r3, [r0, #4]
 8013ca0:	b123      	cbz	r3, 8013cac <rcl_node_is_valid+0x10>
 8013ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ca4:	b113      	cbz	r3, 8013cac <rcl_node_is_valid+0x10>
 8013ca6:	6800      	ldr	r0, [r0, #0]
 8013ca8:	f007 bdaa 	b.w	801b800 <rcl_context_is_valid>
 8013cac:	2000      	movs	r0, #0
 8013cae:	4770      	bx	lr

08013cb0 <rcl_node_get_name>:
 8013cb0:	b120      	cbz	r0, 8013cbc <rcl_node_get_name+0xc>
 8013cb2:	6840      	ldr	r0, [r0, #4]
 8013cb4:	b110      	cbz	r0, 8013cbc <rcl_node_get_name+0xc>
 8013cb6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013cb8:	b100      	cbz	r0, 8013cbc <rcl_node_get_name+0xc>
 8013cba:	6880      	ldr	r0, [r0, #8]
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop

08013cc0 <rcl_node_get_namespace>:
 8013cc0:	b120      	cbz	r0, 8013ccc <rcl_node_get_namespace+0xc>
 8013cc2:	6840      	ldr	r0, [r0, #4]
 8013cc4:	b110      	cbz	r0, 8013ccc <rcl_node_get_namespace+0xc>
 8013cc6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013cc8:	b100      	cbz	r0, 8013ccc <rcl_node_get_namespace+0xc>
 8013cca:	68c0      	ldr	r0, [r0, #12]
 8013ccc:	4770      	bx	lr
 8013cce:	bf00      	nop

08013cd0 <rcl_node_get_options>:
 8013cd0:	b128      	cbz	r0, 8013cde <rcl_node_get_options+0xe>
 8013cd2:	6840      	ldr	r0, [r0, #4]
 8013cd4:	b118      	cbz	r0, 8013cde <rcl_node_get_options+0xe>
 8013cd6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	bf08      	it	eq
 8013cdc:	2000      	moveq	r0, #0
 8013cde:	4770      	bx	lr

08013ce0 <rcl_node_get_rmw_handle>:
 8013ce0:	b110      	cbz	r0, 8013ce8 <rcl_node_get_rmw_handle+0x8>
 8013ce2:	6840      	ldr	r0, [r0, #4]
 8013ce4:	b100      	cbz	r0, 8013ce8 <rcl_node_get_rmw_handle+0x8>
 8013ce6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013ce8:	4770      	bx	lr
 8013cea:	bf00      	nop

08013cec <rcl_node_get_default_options>:
 8013cec:	b510      	push	{r4, lr}
 8013cee:	4604      	mov	r4, r0
 8013cf0:	2268      	movs	r2, #104	; 0x68
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	f00d fa16 	bl	8021124 <memset>
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	f001 fb71 	bl	80153e0 <rcutils_get_default_allocator>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	4620      	mov	r0, r4
 8013d02:	7523      	strb	r3, [r4, #20]
 8013d04:	bd10      	pop	{r4, pc}
 8013d06:	bf00      	nop

08013d08 <rcl_node_options_copy>:
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	bf18      	it	ne
 8013d0c:	4288      	cmpne	r0, r1
 8013d0e:	d01b      	beq.n	8013d48 <rcl_node_options_copy+0x40>
 8013d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d12:	fab1 f681 	clz	r6, r1
 8013d16:	460c      	mov	r4, r1
 8013d18:	0976      	lsrs	r6, r6, #5
 8013d1a:	b199      	cbz	r1, 8013d44 <rcl_node_options_copy+0x3c>
 8013d1c:	4605      	mov	r5, r0
 8013d1e:	8a87      	ldrh	r7, [r0, #20]
 8013d20:	4684      	mov	ip, r0
 8013d22:	468e      	mov	lr, r1
 8013d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d2a:	682b      	ldr	r3, [r5, #0]
 8013d2c:	2250      	movs	r2, #80	; 0x50
 8013d2e:	f10c 0118 	add.w	r1, ip, #24
 8013d32:	f104 0018 	add.w	r0, r4, #24
 8013d36:	f8ce 3000 	str.w	r3, [lr]
 8013d3a:	82a7      	strh	r7, [r4, #20]
 8013d3c:	f00d fabf 	bl	80212be <memcpy>
 8013d40:	4630      	mov	r0, r6
 8013d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d44:	200b      	movs	r0, #11
 8013d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d48:	200b      	movs	r0, #11
 8013d4a:	4770      	bx	lr

08013d4c <rcl_get_zero_initialized_publisher>:
 8013d4c:	4b01      	ldr	r3, [pc, #4]	; (8013d54 <rcl_get_zero_initialized_publisher+0x8>)
 8013d4e:	6818      	ldr	r0, [r3, #0]
 8013d50:	4770      	bx	lr
 8013d52:	bf00      	nop
 8013d54:	080251a0 	.word	0x080251a0

08013d58 <rcl_publisher_init>:
 8013d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d5c:	b088      	sub	sp, #32
 8013d5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013d60:	2e00      	cmp	r6, #0
 8013d62:	d06b      	beq.n	8013e3c <rcl_publisher_init+0xe4>
 8013d64:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8013d68:	4605      	mov	r5, r0
 8013d6a:	460f      	mov	r7, r1
 8013d6c:	4690      	mov	r8, r2
 8013d6e:	4650      	mov	r0, sl
 8013d70:	4699      	mov	r9, r3
 8013d72:	f001 fb43 	bl	80153fc <rcutils_allocator_is_valid>
 8013d76:	f080 0401 	eor.w	r4, r0, #1
 8013d7a:	b2e4      	uxtb	r4, r4
 8013d7c:	2c00      	cmp	r4, #0
 8013d7e:	d15d      	bne.n	8013e3c <rcl_publisher_init+0xe4>
 8013d80:	2d00      	cmp	r5, #0
 8013d82:	d05b      	beq.n	8013e3c <rcl_publisher_init+0xe4>
 8013d84:	682b      	ldr	r3, [r5, #0]
 8013d86:	b123      	cbz	r3, 8013d92 <rcl_publisher_init+0x3a>
 8013d88:	2464      	movs	r4, #100	; 0x64
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	b008      	add	sp, #32
 8013d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d92:	4638      	mov	r0, r7
 8013d94:	f7ff ff82 	bl	8013c9c <rcl_node_is_valid>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	d054      	beq.n	8013e46 <rcl_publisher_init+0xee>
 8013d9c:	f1b8 0f00 	cmp.w	r8, #0
 8013da0:	d04c      	beq.n	8013e3c <rcl_publisher_init+0xe4>
 8013da2:	fab9 f389 	clz	r3, r9
 8013da6:	095b      	lsrs	r3, r3, #5
 8013da8:	f1b9 0f00 	cmp.w	r9, #0
 8013dac:	d046      	beq.n	8013e3c <rcl_publisher_init+0xe4>
 8013dae:	aa07      	add	r2, sp, #28
 8013db0:	9307      	str	r3, [sp, #28]
 8013db2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013db6:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8013dba:	9205      	str	r2, [sp, #20]
 8013dbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013dc0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013dc4:	4649      	mov	r1, r9
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013dcc:	f007 ff54 	bl	801bc78 <rcl_node_resolve_name>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d14f      	bne.n	8013e74 <rcl_publisher_init+0x11c>
 8013dd4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8013dd6:	20c8      	movs	r0, #200	; 0xc8
 8013dd8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013dda:	4798      	blx	r3
 8013ddc:	6028      	str	r0, [r5, #0]
 8013dde:	2800      	cmp	r0, #0
 8013de0:	d050      	beq.n	8013e84 <rcl_publisher_init+0x12c>
 8013de2:	4638      	mov	r0, r7
 8013de4:	f7ff ff7c 	bl	8013ce0 <rcl_node_get_rmw_handle>
 8013de8:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8013dec:	4641      	mov	r1, r8
 8013dee:	9a07      	ldr	r2, [sp, #28]
 8013df0:	9300      	str	r3, [sp, #0]
 8013df2:	4633      	mov	r3, r6
 8013df4:	682c      	ldr	r4, [r5, #0]
 8013df6:	f002 fa27 	bl	8016248 <rmw_create_publisher>
 8013dfa:	682b      	ldr	r3, [r5, #0]
 8013dfc:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013e00:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013e04:	b370      	cbz	r0, 8013e64 <rcl_publisher_init+0x10c>
 8013e06:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8013e0a:	f002 fb01 	bl	8016410 <rmw_publisher_get_actual_qos>
 8013e0e:	682b      	ldr	r3, [r5, #0]
 8013e10:	4604      	mov	r4, r0
 8013e12:	b9d0      	cbnz	r0, 8013e4a <rcl_publisher_init+0xf2>
 8013e14:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8013e18:	4631      	mov	r1, r6
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8013e20:	2270      	movs	r2, #112	; 0x70
 8013e22:	f00d fa4c 	bl	80212be <memcpy>
 8013e26:	683a      	ldr	r2, [r7, #0]
 8013e28:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8013e2c:	9807      	ldr	r0, [sp, #28]
 8013e2e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8013e30:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013e32:	4798      	blx	r3
 8013e34:	4620      	mov	r0, r4
 8013e36:	b008      	add	sp, #32
 8013e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e3c:	240b      	movs	r4, #11
 8013e3e:	4620      	mov	r0, r4
 8013e40:	b008      	add	sp, #32
 8013e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e46:	24c8      	movs	r4, #200	; 0xc8
 8013e48:	e79f      	b.n	8013d8a <rcl_publisher_init+0x32>
 8013e4a:	b1cb      	cbz	r3, 8013e80 <rcl_publisher_init+0x128>
 8013e4c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013e50:	b142      	cbz	r2, 8013e64 <rcl_publisher_init+0x10c>
 8013e52:	4638      	mov	r0, r7
 8013e54:	f7ff ff44 	bl	8013ce0 <rcl_node_get_rmw_handle>
 8013e58:	682b      	ldr	r3, [r5, #0]
 8013e5a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8013e5e:	f002 faeb 	bl	8016438 <rmw_destroy_publisher>
 8013e62:	682b      	ldr	r3, [r5, #0]
 8013e64:	4618      	mov	r0, r3
 8013e66:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8013e68:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8013e6a:	2401      	movs	r4, #1
 8013e6c:	4790      	blx	r2
 8013e6e:	2300      	movs	r3, #0
 8013e70:	602b      	str	r3, [r5, #0]
 8013e72:	e7db      	b.n	8013e2c <rcl_publisher_init+0xd4>
 8013e74:	2867      	cmp	r0, #103	; 0x67
 8013e76:	d007      	beq.n	8013e88 <rcl_publisher_init+0x130>
 8013e78:	2869      	cmp	r0, #105	; 0x69
 8013e7a:	d005      	beq.n	8013e88 <rcl_publisher_init+0x130>
 8013e7c:	280a      	cmp	r0, #10
 8013e7e:	d001      	beq.n	8013e84 <rcl_publisher_init+0x12c>
 8013e80:	2401      	movs	r4, #1
 8013e82:	e7d3      	b.n	8013e2c <rcl_publisher_init+0xd4>
 8013e84:	240a      	movs	r4, #10
 8013e86:	e7d1      	b.n	8013e2c <rcl_publisher_init+0xd4>
 8013e88:	2467      	movs	r4, #103	; 0x67
 8013e8a:	e7cf      	b.n	8013e2c <rcl_publisher_init+0xd4>

08013e8c <rcl_publisher_get_default_options>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	4d14      	ldr	r5, [pc, #80]	; (8013ee0 <rcl_publisher_get_default_options+0x54>)
 8013e90:	b088      	sub	sp, #32
 8013e92:	4604      	mov	r4, r0
 8013e94:	2250      	movs	r2, #80	; 0x50
 8013e96:	4913      	ldr	r1, [pc, #76]	; (8013ee4 <rcl_publisher_get_default_options+0x58>)
 8013e98:	4628      	mov	r0, r5
 8013e9a:	f00d fa10 	bl	80212be <memcpy>
 8013e9e:	a802      	add	r0, sp, #8
 8013ea0:	f001 fa9e 	bl	80153e0 <rcutils_get_default_allocator>
 8013ea4:	f10d 0c08 	add.w	ip, sp, #8
 8013ea8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8013eac:	466e      	mov	r6, sp
 8013eae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013eb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013eb6:	f8dc 3000 	ldr.w	r3, [ip]
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f8ce 3000 	str.w	r3, [lr]
 8013ec0:	f001 fcca 	bl	8015858 <rmw_get_default_publisher_options>
 8013ec4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8013ec8:	2270      	movs	r2, #112	; 0x70
 8013eca:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013ece:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ed2:	4629      	mov	r1, r5
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	f00d f9f2 	bl	80212be <memcpy>
 8013eda:	4620      	mov	r0, r4
 8013edc:	b008      	add	sp, #32
 8013ede:	bd70      	pop	{r4, r5, r6, pc}
 8013ee0:	20012258 	.word	0x20012258
 8013ee4:	080251a8 	.word	0x080251a8

08013ee8 <rcl_publish>:
 8013ee8:	b1f8      	cbz	r0, 8013f2a <rcl_publish+0x42>
 8013eea:	6803      	ldr	r3, [r0, #0]
 8013eec:	b570      	push	{r4, r5, r6, lr}
 8013eee:	4604      	mov	r4, r0
 8013ef0:	b1b3      	cbz	r3, 8013f20 <rcl_publish+0x38>
 8013ef2:	4616      	mov	r6, r2
 8013ef4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013ef8:	b192      	cbz	r2, 8013f20 <rcl_publish+0x38>
 8013efa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013efe:	460d      	mov	r5, r1
 8013f00:	f007 fc7e 	bl	801b800 <rcl_context_is_valid>
 8013f04:	b160      	cbz	r0, 8013f20 <rcl_publish+0x38>
 8013f06:	6823      	ldr	r3, [r4, #0]
 8013f08:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013f0c:	b140      	cbz	r0, 8013f20 <rcl_publish+0x38>
 8013f0e:	b155      	cbz	r5, 8013f26 <rcl_publish+0x3e>
 8013f10:	4632      	mov	r2, r6
 8013f12:	4629      	mov	r1, r5
 8013f14:	f002 f938 	bl	8016188 <rmw_publish>
 8013f18:	3800      	subs	r0, #0
 8013f1a:	bf18      	it	ne
 8013f1c:	2001      	movne	r0, #1
 8013f1e:	bd70      	pop	{r4, r5, r6, pc}
 8013f20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013f24:	bd70      	pop	{r4, r5, r6, pc}
 8013f26:	200b      	movs	r0, #11
 8013f28:	bd70      	pop	{r4, r5, r6, pc}
 8013f2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013f2e:	4770      	bx	lr

08013f30 <rcl_publisher_is_valid>:
 8013f30:	b1a0      	cbz	r0, 8013f5c <rcl_publisher_is_valid+0x2c>
 8013f32:	6803      	ldr	r3, [r0, #0]
 8013f34:	b510      	push	{r4, lr}
 8013f36:	4604      	mov	r4, r0
 8013f38:	b173      	cbz	r3, 8013f58 <rcl_publisher_is_valid+0x28>
 8013f3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8013f3e:	b15a      	cbz	r2, 8013f58 <rcl_publisher_is_valid+0x28>
 8013f40:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8013f44:	f007 fc5c 	bl	801b800 <rcl_context_is_valid>
 8013f48:	b130      	cbz	r0, 8013f58 <rcl_publisher_is_valid+0x28>
 8013f4a:	6823      	ldr	r3, [r4, #0]
 8013f4c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8013f50:	3800      	subs	r0, #0
 8013f52:	bf18      	it	ne
 8013f54:	2001      	movne	r0, #1
 8013f56:	bd10      	pop	{r4, pc}
 8013f58:	2000      	movs	r0, #0
 8013f5a:	bd10      	pop	{r4, pc}
 8013f5c:	2000      	movs	r0, #0
 8013f5e:	4770      	bx	lr

08013f60 <rcl_publisher_is_valid_except_context>:
 8013f60:	b130      	cbz	r0, 8013f70 <rcl_publisher_is_valid_except_context+0x10>
 8013f62:	6800      	ldr	r0, [r0, #0]
 8013f64:	b120      	cbz	r0, 8013f70 <rcl_publisher_is_valid_except_context+0x10>
 8013f66:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8013f6a:	3800      	subs	r0, #0
 8013f6c:	bf18      	it	ne
 8013f6e:	2001      	movne	r0, #1
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop

08013f74 <rcl_get_zero_initialized_service>:
 8013f74:	4b01      	ldr	r3, [pc, #4]	; (8013f7c <rcl_get_zero_initialized_service+0x8>)
 8013f76:	6818      	ldr	r0, [r3, #0]
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	080251f8 	.word	0x080251f8

08013f80 <rcl_service_init>:
 8013f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f84:	b088      	sub	sp, #32
 8013f86:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013f88:	b1ff      	cbz	r7, 8013fca <rcl_service_init+0x4a>
 8013f8a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8013f8e:	4605      	mov	r5, r0
 8013f90:	460e      	mov	r6, r1
 8013f92:	4691      	mov	r9, r2
 8013f94:	4650      	mov	r0, sl
 8013f96:	4698      	mov	r8, r3
 8013f98:	f001 fa30 	bl	80153fc <rcutils_allocator_is_valid>
 8013f9c:	f080 0401 	eor.w	r4, r0, #1
 8013fa0:	b2e4      	uxtb	r4, r4
 8013fa2:	b994      	cbnz	r4, 8013fca <rcl_service_init+0x4a>
 8013fa4:	b18d      	cbz	r5, 8013fca <rcl_service_init+0x4a>
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	f7ff fe78 	bl	8013c9c <rcl_node_is_valid>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d05d      	beq.n	801406c <rcl_service_init+0xec>
 8013fb0:	f1b8 0f00 	cmp.w	r8, #0
 8013fb4:	d009      	beq.n	8013fca <rcl_service_init+0x4a>
 8013fb6:	f1b9 0f00 	cmp.w	r9, #0
 8013fba:	d006      	beq.n	8013fca <rcl_service_init+0x4a>
 8013fbc:	682b      	ldr	r3, [r5, #0]
 8013fbe:	b14b      	cbz	r3, 8013fd4 <rcl_service_init+0x54>
 8013fc0:	2464      	movs	r4, #100	; 0x64
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	b008      	add	sp, #32
 8013fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fca:	240b      	movs	r4, #11
 8013fcc:	4620      	mov	r0, r4
 8013fce:	b008      	add	sp, #32
 8013fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fd4:	aa07      	add	r2, sp, #28
 8013fd6:	9304      	str	r3, [sp, #16]
 8013fd8:	9307      	str	r3, [sp, #28]
 8013fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013fde:	9205      	str	r2, [sp, #20]
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	9203      	str	r2, [sp, #12]
 8013fe4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013fe8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013fec:	4641      	mov	r1, r8
 8013fee:	4630      	mov	r0, r6
 8013ff0:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8013ff4:	f007 fe40 	bl	801bc78 <rcl_node_resolve_name>
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d146      	bne.n	801408a <rcl_service_init+0x10a>
 8013ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ffe:	f44f 7088 	mov.w	r0, #272	; 0x110
 8014002:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014004:	4798      	blx	r3
 8014006:	6028      	str	r0, [r5, #0]
 8014008:	2800      	cmp	r0, #0
 801400a:	d046      	beq.n	801409a <rcl_service_init+0x11a>
 801400c:	4630      	mov	r0, r6
 801400e:	f7ff fe67 	bl	8013ce0 <rcl_node_get_rmw_handle>
 8014012:	463b      	mov	r3, r7
 8014014:	4649      	mov	r1, r9
 8014016:	9a07      	ldr	r2, [sp, #28]
 8014018:	682c      	ldr	r4, [r5, #0]
 801401a:	f002 fbb1 	bl	8016780 <rmw_create_service>
 801401e:	682b      	ldr	r3, [r5, #0]
 8014020:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8014024:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014028:	b338      	cbz	r0, 801407a <rcl_service_init+0xfa>
 801402a:	f103 0168 	add.w	r1, r3, #104	; 0x68
 801402e:	f002 fcd9 	bl	80169e4 <rmw_service_request_subscription_get_actual_qos>
 8014032:	bb00      	cbnz	r0, 8014076 <rcl_service_init+0xf6>
 8014034:	682b      	ldr	r3, [r5, #0]
 8014036:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 801403a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801403e:	f002 fcbd 	bl	80169bc <rmw_service_response_publisher_get_actual_qos>
 8014042:	4604      	mov	r4, r0
 8014044:	b9b8      	cbnz	r0, 8014076 <rcl_service_init+0xf6>
 8014046:	6828      	ldr	r0, [r5, #0]
 8014048:	2268      	movs	r2, #104	; 0x68
 801404a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801404e:	4639      	mov	r1, r7
 8014050:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8014054:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8014058:	f00d f931 	bl	80212be <memcpy>
 801405c:	9807      	ldr	r0, [sp, #28]
 801405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014060:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014062:	4798      	blx	r3
 8014064:	4620      	mov	r0, r4
 8014066:	b008      	add	sp, #32
 8014068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801406c:	24c8      	movs	r4, #200	; 0xc8
 801406e:	4620      	mov	r0, r4
 8014070:	b008      	add	sp, #32
 8014072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014076:	682b      	ldr	r3, [r5, #0]
 8014078:	b16b      	cbz	r3, 8014096 <rcl_service_init+0x116>
 801407a:	4618      	mov	r0, r3
 801407c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801407e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014080:	2401      	movs	r4, #1
 8014082:	4790      	blx	r2
 8014084:	2300      	movs	r3, #0
 8014086:	602b      	str	r3, [r5, #0]
 8014088:	e7e8      	b.n	801405c <rcl_service_init+0xdc>
 801408a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 801408e:	2b01      	cmp	r3, #1
 8014090:	d905      	bls.n	801409e <rcl_service_init+0x11e>
 8014092:	280a      	cmp	r0, #10
 8014094:	d001      	beq.n	801409a <rcl_service_init+0x11a>
 8014096:	2401      	movs	r4, #1
 8014098:	e7e0      	b.n	801405c <rcl_service_init+0xdc>
 801409a:	240a      	movs	r4, #10
 801409c:	e7de      	b.n	801405c <rcl_service_init+0xdc>
 801409e:	2468      	movs	r4, #104	; 0x68
 80140a0:	e7dc      	b.n	801405c <rcl_service_init+0xdc>
 80140a2:	bf00      	nop

080140a4 <rcl_service_get_default_options>:
 80140a4:	b530      	push	{r4, r5, lr}
 80140a6:	4d0f      	ldr	r5, [pc, #60]	; (80140e4 <rcl_service_get_default_options+0x40>)
 80140a8:	b087      	sub	sp, #28
 80140aa:	4604      	mov	r4, r0
 80140ac:	2250      	movs	r2, #80	; 0x50
 80140ae:	490e      	ldr	r1, [pc, #56]	; (80140e8 <rcl_service_get_default_options+0x44>)
 80140b0:	4628      	mov	r0, r5
 80140b2:	f00d f904 	bl	80212be <memcpy>
 80140b6:	4668      	mov	r0, sp
 80140b8:	f001 f992 	bl	80153e0 <rcutils_get_default_allocator>
 80140bc:	46ec      	mov	ip, sp
 80140be:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80140c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140ca:	f8dc 3000 	ldr.w	r3, [ip]
 80140ce:	2268      	movs	r2, #104	; 0x68
 80140d0:	4629      	mov	r1, r5
 80140d2:	4620      	mov	r0, r4
 80140d4:	f8ce 3000 	str.w	r3, [lr]
 80140d8:	f00d f8f1 	bl	80212be <memcpy>
 80140dc:	4620      	mov	r0, r4
 80140de:	b007      	add	sp, #28
 80140e0:	bd30      	pop	{r4, r5, pc}
 80140e2:	bf00      	nop
 80140e4:	200122c8 	.word	0x200122c8
 80140e8:	08025200 	.word	0x08025200

080140ec <rcl_service_get_rmw_handle>:
 80140ec:	b118      	cbz	r0, 80140f6 <rcl_service_get_rmw_handle+0xa>
 80140ee:	6800      	ldr	r0, [r0, #0]
 80140f0:	b108      	cbz	r0, 80140f6 <rcl_service_get_rmw_handle+0xa>
 80140f2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80140f6:	4770      	bx	lr

080140f8 <rcl_take_request>:
 80140f8:	b570      	push	{r4, r5, r6, lr}
 80140fa:	468e      	mov	lr, r1
 80140fc:	b08c      	sub	sp, #48	; 0x30
 80140fe:	460c      	mov	r4, r1
 8014100:	4616      	mov	r6, r2
 8014102:	f10d 0c18 	add.w	ip, sp, #24
 8014106:	4605      	mov	r5, r0
 8014108:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801410c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014110:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014114:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014118:	b30d      	cbz	r5, 801415e <rcl_take_request+0x66>
 801411a:	682b      	ldr	r3, [r5, #0]
 801411c:	b1fb      	cbz	r3, 801415e <rcl_take_request+0x66>
 801411e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014122:	b1e0      	cbz	r0, 801415e <rcl_take_request+0x66>
 8014124:	b336      	cbz	r6, 8014174 <rcl_take_request+0x7c>
 8014126:	2300      	movs	r3, #0
 8014128:	4632      	mov	r2, r6
 801412a:	a902      	add	r1, sp, #8
 801412c:	f88d 3007 	strb.w	r3, [sp, #7]
 8014130:	f10d 0307 	add.w	r3, sp, #7
 8014134:	f002 fa22 	bl	801657c <rmw_take_request>
 8014138:	4605      	mov	r5, r0
 801413a:	b198      	cbz	r0, 8014164 <rcl_take_request+0x6c>
 801413c:	280a      	cmp	r0, #10
 801413e:	bf18      	it	ne
 8014140:	2501      	movne	r5, #1
 8014142:	f10d 0e18 	add.w	lr, sp, #24
 8014146:	46a4      	mov	ip, r4
 8014148:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801414c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014150:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014154:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014158:	4628      	mov	r0, r5
 801415a:	b00c      	add	sp, #48	; 0x30
 801415c:	bd70      	pop	{r4, r5, r6, pc}
 801415e:	f44f 7516 	mov.w	r5, #600	; 0x258
 8014162:	e7ee      	b.n	8014142 <rcl_take_request+0x4a>
 8014164:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014168:	f240 2359 	movw	r3, #601	; 0x259
 801416c:	2a00      	cmp	r2, #0
 801416e:	bf08      	it	eq
 8014170:	461d      	moveq	r5, r3
 8014172:	e7e6      	b.n	8014142 <rcl_take_request+0x4a>
 8014174:	250b      	movs	r5, #11
 8014176:	e7e4      	b.n	8014142 <rcl_take_request+0x4a>

08014178 <rcl_send_response>:
 8014178:	b170      	cbz	r0, 8014198 <rcl_send_response+0x20>
 801417a:	6800      	ldr	r0, [r0, #0]
 801417c:	b160      	cbz	r0, 8014198 <rcl_send_response+0x20>
 801417e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8014182:	b148      	cbz	r0, 8014198 <rcl_send_response+0x20>
 8014184:	b169      	cbz	r1, 80141a2 <rcl_send_response+0x2a>
 8014186:	b510      	push	{r4, lr}
 8014188:	b14a      	cbz	r2, 801419e <rcl_send_response+0x26>
 801418a:	f002 fa55 	bl	8016638 <rmw_send_response>
 801418e:	b110      	cbz	r0, 8014196 <rcl_send_response+0x1e>
 8014190:	2802      	cmp	r0, #2
 8014192:	bf18      	it	ne
 8014194:	2001      	movne	r0, #1
 8014196:	bd10      	pop	{r4, pc}
 8014198:	f44f 7016 	mov.w	r0, #600	; 0x258
 801419c:	4770      	bx	lr
 801419e:	200b      	movs	r0, #11
 80141a0:	bd10      	pop	{r4, pc}
 80141a2:	200b      	movs	r0, #11
 80141a4:	4770      	bx	lr
 80141a6:	bf00      	nop

080141a8 <rcl_service_is_valid>:
 80141a8:	b130      	cbz	r0, 80141b8 <rcl_service_is_valid+0x10>
 80141aa:	6800      	ldr	r0, [r0, #0]
 80141ac:	b120      	cbz	r0, 80141b8 <rcl_service_is_valid+0x10>
 80141ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80141b2:	3800      	subs	r0, #0
 80141b4:	bf18      	it	ne
 80141b6:	2001      	movne	r0, #1
 80141b8:	4770      	bx	lr
 80141ba:	bf00      	nop

080141bc <rcl_get_zero_initialized_subscription>:
 80141bc:	4b01      	ldr	r3, [pc, #4]	; (80141c4 <rcl_get_zero_initialized_subscription+0x8>)
 80141be:	6818      	ldr	r0, [r3, #0]
 80141c0:	4770      	bx	lr
 80141c2:	bf00      	nop
 80141c4:	08025250 	.word	0x08025250

080141c8 <rcl_subscription_init>:
 80141c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141cc:	b088      	sub	sp, #32
 80141ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80141d0:	b1ff      	cbz	r7, 8014212 <rcl_subscription_init+0x4a>
 80141d2:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 80141d6:	4605      	mov	r5, r0
 80141d8:	460e      	mov	r6, r1
 80141da:	4691      	mov	r9, r2
 80141dc:	4650      	mov	r0, sl
 80141de:	4698      	mov	r8, r3
 80141e0:	f001 f90c 	bl	80153fc <rcutils_allocator_is_valid>
 80141e4:	f080 0401 	eor.w	r4, r0, #1
 80141e8:	b2e4      	uxtb	r4, r4
 80141ea:	b994      	cbnz	r4, 8014212 <rcl_subscription_init+0x4a>
 80141ec:	b18d      	cbz	r5, 8014212 <rcl_subscription_init+0x4a>
 80141ee:	4630      	mov	r0, r6
 80141f0:	f7ff fd54 	bl	8013c9c <rcl_node_is_valid>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d055      	beq.n	80142a4 <rcl_subscription_init+0xdc>
 80141f8:	f1b9 0f00 	cmp.w	r9, #0
 80141fc:	d009      	beq.n	8014212 <rcl_subscription_init+0x4a>
 80141fe:	f1b8 0f00 	cmp.w	r8, #0
 8014202:	d006      	beq.n	8014212 <rcl_subscription_init+0x4a>
 8014204:	682b      	ldr	r3, [r5, #0]
 8014206:	b14b      	cbz	r3, 801421c <rcl_subscription_init+0x54>
 8014208:	2464      	movs	r4, #100	; 0x64
 801420a:	4620      	mov	r0, r4
 801420c:	b008      	add	sp, #32
 801420e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014212:	240b      	movs	r4, #11
 8014214:	4620      	mov	r0, r4
 8014216:	b008      	add	sp, #32
 8014218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801421c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014220:	aa07      	add	r2, sp, #28
 8014222:	9307      	str	r3, [sp, #28]
 8014224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014228:	9205      	str	r2, [sp, #20]
 801422a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801422e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014232:	4641      	mov	r1, r8
 8014234:	4630      	mov	r0, r6
 8014236:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801423a:	f007 fd1d 	bl	801bc78 <rcl_node_resolve_name>
 801423e:	2800      	cmp	r0, #0
 8014240:	d15f      	bne.n	8014302 <rcl_subscription_init+0x13a>
 8014242:	21c8      	movs	r1, #200	; 0xc8
 8014244:	2001      	movs	r0, #1
 8014246:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 801424a:	4798      	blx	r3
 801424c:	6028      	str	r0, [r5, #0]
 801424e:	2800      	cmp	r0, #0
 8014250:	d05f      	beq.n	8014312 <rcl_subscription_init+0x14a>
 8014252:	4630      	mov	r0, r6
 8014254:	f7ff fd44 	bl	8013ce0 <rcl_node_get_rmw_handle>
 8014258:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801425c:	4649      	mov	r1, r9
 801425e:	9a07      	ldr	r2, [sp, #28]
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	463b      	mov	r3, r7
 8014264:	682c      	ldr	r4, [r5, #0]
 8014266:	f002 fbd1 	bl	8016a0c <rmw_create_subscription>
 801426a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 801426e:	682c      	ldr	r4, [r5, #0]
 8014270:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8014274:	b348      	cbz	r0, 80142ca <rcl_subscription_init+0x102>
 8014276:	f104 0170 	add.w	r1, r4, #112	; 0x70
 801427a:	f002 fcbd 	bl	8016bf8 <rmw_subscription_get_actual_qos>
 801427e:	4604      	mov	r4, r0
 8014280:	b9a8      	cbnz	r0, 80142ae <rcl_subscription_init+0xe6>
 8014282:	6828      	ldr	r0, [r5, #0]
 8014284:	2270      	movs	r2, #112	; 0x70
 8014286:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801428a:	4639      	mov	r1, r7
 801428c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8014290:	f00d f815 	bl	80212be <memcpy>
 8014294:	9807      	ldr	r0, [sp, #28]
 8014296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014298:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801429a:	4798      	blx	r3
 801429c:	4620      	mov	r0, r4
 801429e:	b008      	add	sp, #32
 80142a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a4:	24c8      	movs	r4, #200	; 0xc8
 80142a6:	4620      	mov	r0, r4
 80142a8:	b008      	add	sp, #32
 80142aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ae:	682c      	ldr	r4, [r5, #0]
 80142b0:	b36c      	cbz	r4, 801430e <rcl_subscription_init+0x146>
 80142b2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80142b6:	b14b      	cbz	r3, 80142cc <rcl_subscription_init+0x104>
 80142b8:	4630      	mov	r0, r6
 80142ba:	f7ff fd11 	bl	8013ce0 <rcl_node_get_rmw_handle>
 80142be:	682b      	ldr	r3, [r5, #0]
 80142c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80142c4:	f002 fcac 	bl	8016c20 <rmw_destroy_subscription>
 80142c8:	682c      	ldr	r4, [r5, #0]
 80142ca:	b194      	cbz	r4, 80142f2 <rcl_subscription_init+0x12a>
 80142cc:	f104 0650 	add.w	r6, r4, #80	; 0x50
 80142d0:	4630      	mov	r0, r6
 80142d2:	f001 f893 	bl	80153fc <rcutils_allocator_is_valid>
 80142d6:	b158      	cbz	r0, 80142f0 <rcl_subscription_init+0x128>
 80142d8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80142da:	b148      	cbz	r0, 80142f0 <rcl_subscription_init+0x128>
 80142dc:	4631      	mov	r1, r6
 80142de:	f001 fac3 	bl	8015868 <rmw_subscription_content_filter_options_fini>
 80142e2:	4606      	mov	r6, r0
 80142e4:	b9c8      	cbnz	r0, 801431a <rcl_subscription_init+0x152>
 80142e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80142e8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80142ea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80142ec:	4798      	blx	r3
 80142ee:	66e6      	str	r6, [r4, #108]	; 0x6c
 80142f0:	682c      	ldr	r4, [r5, #0]
 80142f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142f4:	4620      	mov	r0, r4
 80142f6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80142f8:	2401      	movs	r4, #1
 80142fa:	4798      	blx	r3
 80142fc:	2300      	movs	r3, #0
 80142fe:	602b      	str	r3, [r5, #0]
 8014300:	e7c8      	b.n	8014294 <rcl_subscription_init+0xcc>
 8014302:	2867      	cmp	r0, #103	; 0x67
 8014304:	d007      	beq.n	8014316 <rcl_subscription_init+0x14e>
 8014306:	2869      	cmp	r0, #105	; 0x69
 8014308:	d005      	beq.n	8014316 <rcl_subscription_init+0x14e>
 801430a:	280a      	cmp	r0, #10
 801430c:	d001      	beq.n	8014312 <rcl_subscription_init+0x14a>
 801430e:	2401      	movs	r4, #1
 8014310:	e7c0      	b.n	8014294 <rcl_subscription_init+0xcc>
 8014312:	240a      	movs	r4, #10
 8014314:	e7be      	b.n	8014294 <rcl_subscription_init+0xcc>
 8014316:	2467      	movs	r4, #103	; 0x67
 8014318:	e7bc      	b.n	8014294 <rcl_subscription_init+0xcc>
 801431a:	f007 fa53 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801431e:	682c      	ldr	r4, [r5, #0]
 8014320:	e7e7      	b.n	80142f2 <rcl_subscription_init+0x12a>
 8014322:	bf00      	nop

08014324 <rcl_subscription_get_default_options>:
 8014324:	b570      	push	{r4, r5, r6, lr}
 8014326:	4d14      	ldr	r5, [pc, #80]	; (8014378 <rcl_subscription_get_default_options+0x54>)
 8014328:	b08a      	sub	sp, #40	; 0x28
 801432a:	4604      	mov	r4, r0
 801432c:	2250      	movs	r2, #80	; 0x50
 801432e:	4913      	ldr	r1, [pc, #76]	; (801437c <rcl_subscription_get_default_options+0x58>)
 8014330:	4628      	mov	r0, r5
 8014332:	f00c ffc4 	bl	80212be <memcpy>
 8014336:	a804      	add	r0, sp, #16
 8014338:	f001 f852 	bl	80153e0 <rcutils_get_default_allocator>
 801433c:	f10d 0c10 	add.w	ip, sp, #16
 8014340:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8014344:	466e      	mov	r6, sp
 8014346:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801434a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801434e:	f8dc 3000 	ldr.w	r3, [ip]
 8014352:	4630      	mov	r0, r6
 8014354:	f8ce 3000 	str.w	r3, [lr]
 8014358:	f001 faa0 	bl	801589c <rmw_get_default_subscription_options>
 801435c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8014360:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014364:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014368:	2270      	movs	r2, #112	; 0x70
 801436a:	4629      	mov	r1, r5
 801436c:	4620      	mov	r0, r4
 801436e:	f00c ffa6 	bl	80212be <memcpy>
 8014372:	4620      	mov	r0, r4
 8014374:	b00a      	add	sp, #40	; 0x28
 8014376:	bd70      	pop	{r4, r5, r6, pc}
 8014378:	20012330 	.word	0x20012330
 801437c:	08025258 	.word	0x08025258

08014380 <rcl_take>:
 8014380:	2800      	cmp	r0, #0
 8014382:	d049      	beq.n	8014418 <rcl_take+0x98>
 8014384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014388:	4615      	mov	r5, r2
 801438a:	6802      	ldr	r2, [r0, #0]
 801438c:	b0a4      	sub	sp, #144	; 0x90
 801438e:	4604      	mov	r4, r0
 8014390:	2a00      	cmp	r2, #0
 8014392:	d039      	beq.n	8014408 <rcl_take+0x88>
 8014394:	461f      	mov	r7, r3
 8014396:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 801439a:	b3ab      	cbz	r3, 8014408 <rcl_take+0x88>
 801439c:	460e      	mov	r6, r1
 801439e:	2900      	cmp	r1, #0
 80143a0:	d038      	beq.n	8014414 <rcl_take+0x94>
 80143a2:	2d00      	cmp	r5, #0
 80143a4:	d03c      	beq.n	8014420 <rcl_take+0xa0>
 80143a6:	a802      	add	r0, sp, #8
 80143a8:	f04f 0800 	mov.w	r8, #0
 80143ac:	f001 fa7c 	bl	80158a8 <rmw_get_zero_initialized_message_info>
 80143b0:	f10d 0c08 	add.w	ip, sp, #8
 80143b4:	46ae      	mov	lr, r5
 80143b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143ce:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80143d2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80143d6:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 80143da:	462b      	mov	r3, r5
 80143dc:	6820      	ldr	r0, [r4, #0]
 80143de:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 80143e2:	4631      	mov	r1, r6
 80143e4:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80143e8:	9700      	str	r7, [sp, #0]
 80143ea:	f002 fc7b 	bl	8016ce4 <rmw_take_with_info>
 80143ee:	4603      	mov	r3, r0
 80143f0:	b9c0      	cbnz	r0, 8014424 <rcl_take+0xa4>
 80143f2:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 80143f6:	f240 1291 	movw	r2, #401	; 0x191
 80143fa:	2900      	cmp	r1, #0
 80143fc:	bf08      	it	eq
 80143fe:	4613      	moveq	r3, r2
 8014400:	4618      	mov	r0, r3
 8014402:	b024      	add	sp, #144	; 0x90
 8014404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014408:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801440c:	4618      	mov	r0, r3
 801440e:	b024      	add	sp, #144	; 0x90
 8014410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014414:	230b      	movs	r3, #11
 8014416:	e7f3      	b.n	8014400 <rcl_take+0x80>
 8014418:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801441c:	4618      	mov	r0, r3
 801441e:	4770      	bx	lr
 8014420:	ad14      	add	r5, sp, #80	; 0x50
 8014422:	e7c0      	b.n	80143a6 <rcl_take+0x26>
 8014424:	f007 f9ce 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014428:	4603      	mov	r3, r0
 801442a:	e7e9      	b.n	8014400 <rcl_take+0x80>

0801442c <rcl_subscription_get_rmw_handle>:
 801442c:	b118      	cbz	r0, 8014436 <rcl_subscription_get_rmw_handle+0xa>
 801442e:	6800      	ldr	r0, [r0, #0]
 8014430:	b108      	cbz	r0, 8014436 <rcl_subscription_get_rmw_handle+0xa>
 8014432:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014436:	4770      	bx	lr

08014438 <rcl_subscription_is_valid>:
 8014438:	b130      	cbz	r0, 8014448 <rcl_subscription_is_valid+0x10>
 801443a:	6800      	ldr	r0, [r0, #0]
 801443c:	b120      	cbz	r0, 8014448 <rcl_subscription_is_valid+0x10>
 801443e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014442:	3800      	subs	r0, #0
 8014444:	bf18      	it	ne
 8014446:	2001      	movne	r0, #1
 8014448:	4770      	bx	lr
 801444a:	bf00      	nop

0801444c <_rclc_check_for_new_data>:
 801444c:	2800      	cmp	r0, #0
 801444e:	d046      	beq.n	80144de <_rclc_check_for_new_data+0x92>
 8014450:	4603      	mov	r3, r0
 8014452:	b530      	push	{r4, r5, lr}
 8014454:	7802      	ldrb	r2, [r0, #0]
 8014456:	b085      	sub	sp, #20
 8014458:	2a0a      	cmp	r2, #10
 801445a:	d842      	bhi.n	80144e2 <_rclc_check_for_new_data+0x96>
 801445c:	e8df f002 	tbb	[pc, r2]
 8014460:	14181212 	.word	0x14181212
 8014464:	06060614 	.word	0x06060614
 8014468:	2e1a      	.short	0x2e1a
 801446a:	16          	.byte	0x16
 801446b:	00          	.byte	0x00
 801446c:	6a0a      	ldr	r2, [r1, #32]
 801446e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014470:	2000      	movs	r0, #0
 8014472:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014476:	1a12      	subs	r2, r2, r0
 8014478:	bf18      	it	ne
 801447a:	2201      	movne	r2, #1
 801447c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014480:	b005      	add	sp, #20
 8014482:	bd30      	pop	{r4, r5, pc}
 8014484:	680a      	ldr	r2, [r1, #0]
 8014486:	e7f2      	b.n	801446e <_rclc_check_for_new_data+0x22>
 8014488:	698a      	ldr	r2, [r1, #24]
 801448a:	e7f0      	b.n	801446e <_rclc_check_for_new_data+0x22>
 801448c:	688a      	ldr	r2, [r1, #8]
 801448e:	e7ee      	b.n	801446e <_rclc_check_for_new_data+0x22>
 8014490:	690a      	ldr	r2, [r1, #16]
 8014492:	e7ec      	b.n	801446e <_rclc_check_for_new_data+0x22>
 8014494:	685c      	ldr	r4, [r3, #4]
 8014496:	4608      	mov	r0, r1
 8014498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801449c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144a4:	f104 0110 	add.w	r1, r4, #16
 80144a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80144ac:	9500      	str	r5, [sp, #0]
 80144ae:	f104 0341 	add.w	r3, r4, #65	; 0x41
 80144b2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80144b6:	f008 ff4b 	bl	801d350 <rcl_action_client_wait_set_get_entities_ready>
 80144ba:	e7e1      	b.n	8014480 <_rclc_check_for_new_data+0x34>
 80144bc:	685c      	ldr	r4, [r3, #4]
 80144be:	4608      	mov	r0, r1
 80144c0:	f104 0222 	add.w	r2, r4, #34	; 0x22
 80144c4:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80144c8:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80144cc:	e9cd 2100 	strd	r2, r1, [sp]
 80144d0:	f104 0220 	add.w	r2, r4, #32
 80144d4:	f104 0110 	add.w	r1, r4, #16
 80144d8:	f009 f952 	bl	801d780 <rcl_action_server_wait_set_get_entities_ready>
 80144dc:	e7d0      	b.n	8014480 <_rclc_check_for_new_data+0x34>
 80144de:	200b      	movs	r0, #11
 80144e0:	4770      	bx	lr
 80144e2:	2001      	movs	r0, #1
 80144e4:	e7cc      	b.n	8014480 <_rclc_check_for_new_data+0x34>
 80144e6:	bf00      	nop

080144e8 <_rclc_take_new_data>:
 80144e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ea:	b09b      	sub	sp, #108	; 0x6c
 80144ec:	2800      	cmp	r0, #0
 80144ee:	f000 8088 	beq.w	8014602 <_rclc_take_new_data+0x11a>
 80144f2:	7803      	ldrb	r3, [r0, #0]
 80144f4:	4604      	mov	r4, r0
 80144f6:	2b0a      	cmp	r3, #10
 80144f8:	f200 8167 	bhi.w	80147ca <_rclc_take_new_data+0x2e2>
 80144fc:	e8df f003 	tbb	[pc, r3]
 8014500:	44152d2d 	.word	0x44152d2d
 8014504:	19191944 	.word	0x19191944
 8014508:	065a      	.short	0x065a
 801450a:	15          	.byte	0x15
 801450b:	00          	.byte	0x00
 801450c:	6840      	ldr	r0, [r0, #4]
 801450e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014512:	2b00      	cmp	r3, #0
 8014514:	f040 80b2 	bne.w	801467c <_rclc_take_new_data+0x194>
 8014518:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 801451c:	2b00      	cmp	r3, #0
 801451e:	f040 80e4 	bne.w	80146ea <_rclc_take_new_data+0x202>
 8014522:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8014526:	2b00      	cmp	r3, #0
 8014528:	d16f      	bne.n	801460a <_rclc_take_new_data+0x122>
 801452a:	2500      	movs	r5, #0
 801452c:	4628      	mov	r0, r5
 801452e:	b01b      	add	sp, #108	; 0x6c
 8014530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014532:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8014534:	6a0b      	ldr	r3, [r1, #32]
 8014536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d0f5      	beq.n	801452a <_rclc_take_new_data+0x42>
 801453e:	6882      	ldr	r2, [r0, #8]
 8014540:	f100 0110 	add.w	r1, r0, #16
 8014544:	6840      	ldr	r0, [r0, #4]
 8014546:	f7ff fdd7 	bl	80140f8 <rcl_take_request>
 801454a:	4605      	mov	r5, r0
 801454c:	2800      	cmp	r0, #0
 801454e:	d0ec      	beq.n	801452a <_rclc_take_new_data+0x42>
 8014550:	f240 2359 	movw	r3, #601	; 0x259
 8014554:	4298      	cmp	r0, r3
 8014556:	d013      	beq.n	8014580 <_rclc_take_new_data+0x98>
 8014558:	e029      	b.n	80145ae <_rclc_take_new_data+0xc6>
 801455a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801455c:	680b      	ldr	r3, [r1, #0]
 801455e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d0e1      	beq.n	801452a <_rclc_take_new_data+0x42>
 8014566:	2300      	movs	r3, #0
 8014568:	aa0a      	add	r2, sp, #40	; 0x28
 801456a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 801456e:	f7ff ff07 	bl	8014380 <rcl_take>
 8014572:	4605      	mov	r5, r0
 8014574:	2800      	cmp	r0, #0
 8014576:	d0d9      	beq.n	801452c <_rclc_take_new_data+0x44>
 8014578:	f240 1391 	movw	r3, #401	; 0x191
 801457c:	4298      	cmp	r0, r3
 801457e:	d116      	bne.n	80145ae <_rclc_take_new_data+0xc6>
 8014580:	2300      	movs	r3, #0
 8014582:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014586:	e7d1      	b.n	801452c <_rclc_take_new_data+0x44>
 8014588:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801458a:	698b      	ldr	r3, [r1, #24]
 801458c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d0ca      	beq.n	801452a <_rclc_take_new_data+0x42>
 8014594:	6882      	ldr	r2, [r0, #8]
 8014596:	f100 0110 	add.w	r1, r0, #16
 801459a:	6840      	ldr	r0, [r0, #4]
 801459c:	f007 f8c0 	bl	801b720 <rcl_take_response>
 80145a0:	4605      	mov	r5, r0
 80145a2:	2800      	cmp	r0, #0
 80145a4:	d0c1      	beq.n	801452a <_rclc_take_new_data+0x42>
 80145a6:	f240 13f5 	movw	r3, #501	; 0x1f5
 80145aa:	4298      	cmp	r0, r3
 80145ac:	d0be      	beq.n	801452c <_rclc_take_new_data+0x44>
 80145ae:	f000 ff63 	bl	8015478 <rcutils_reset_error>
 80145b2:	e7bb      	b.n	801452c <_rclc_take_new_data+0x44>
 80145b4:	6840      	ldr	r0, [r0, #4]
 80145b6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d17d      	bne.n	80146ba <_rclc_take_new_data+0x1d2>
 80145be:	69c3      	ldr	r3, [r0, #28]
 80145c0:	b11b      	cbz	r3, 80145ca <_rclc_take_new_data+0xe2>
 80145c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d144      	bne.n	8014654 <_rclc_take_new_data+0x16c>
 80145ca:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	f040 80ac 	bne.w	801472c <_rclc_take_new_data+0x244>
 80145d4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d0a6      	beq.n	801452a <_rclc_take_new_data+0x42>
 80145dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80145de:	a90a      	add	r1, sp, #40	; 0x28
 80145e0:	3010      	adds	r0, #16
 80145e2:	f008 fd8d 	bl	801d100 <rcl_action_take_result_response>
 80145e6:	4605      	mov	r5, r0
 80145e8:	2800      	cmp	r0, #0
 80145ea:	d1e0      	bne.n	80145ae <_rclc_take_new_data+0xc6>
 80145ec:	6860      	ldr	r0, [r4, #4]
 80145ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80145f2:	f009 f9f5 	bl	801d9e0 <rclc_action_find_handle_by_result_request_sequence_number>
 80145f6:	2800      	cmp	r0, #0
 80145f8:	d098      	beq.n	801452c <_rclc_take_new_data+0x44>
 80145fa:	2301      	movs	r3, #1
 80145fc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8014600:	e794      	b.n	801452c <_rclc_take_new_data+0x44>
 8014602:	250b      	movs	r5, #11
 8014604:	4628      	mov	r0, r5
 8014606:	b01b      	add	sp, #108	; 0x6c
 8014608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801460a:	ae04      	add	r6, sp, #16
 801460c:	3010      	adds	r0, #16
 801460e:	aa0a      	add	r2, sp, #40	; 0x28
 8014610:	4631      	mov	r1, r6
 8014612:	f008 ffe9 	bl	801d5e8 <rcl_action_take_cancel_request>
 8014616:	4605      	mov	r5, r0
 8014618:	2800      	cmp	r0, #0
 801461a:	d1c8      	bne.n	80145ae <_rclc_take_new_data+0xc6>
 801461c:	a90a      	add	r1, sp, #40	; 0x28
 801461e:	6860      	ldr	r0, [r4, #4]
 8014620:	f009 f99e 	bl	801d960 <rclc_action_find_goal_handle_by_uuid>
 8014624:	4607      	mov	r7, r0
 8014626:	2800      	cmp	r0, #0
 8014628:	f000 80bb 	beq.w	80147a2 <_rclc_take_new_data+0x2ba>
 801462c:	2101      	movs	r1, #1
 801462e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8014632:	f009 f91f 	bl	801d874 <rcl_action_transition_goal_state>
 8014636:	2803      	cmp	r0, #3
 8014638:	4684      	mov	ip, r0
 801463a:	f040 80a7 	bne.w	801478c <_rclc_take_new_data+0x2a4>
 801463e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8014642:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014646:	e896 0003 	ldmia.w	r6, {r0, r1}
 801464a:	e884 0003 	stmia.w	r4, {r0, r1}
 801464e:	f887 c008 	strb.w	ip, [r7, #8]
 8014652:	e76b      	b.n	801452c <_rclc_take_new_data+0x44>
 8014654:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014656:	3010      	adds	r0, #16
 8014658:	f008 fdd2 	bl	801d200 <rcl_action_take_feedback>
 801465c:	4605      	mov	r5, r0
 801465e:	2800      	cmp	r0, #0
 8014660:	d1a5      	bne.n	80145ae <_rclc_take_new_data+0xc6>
 8014662:	6860      	ldr	r0, [r4, #4]
 8014664:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014666:	f009 f97b 	bl	801d960 <rclc_action_find_goal_handle_by_uuid>
 801466a:	4603      	mov	r3, r0
 801466c:	2800      	cmp	r0, #0
 801466e:	f000 80a3 	beq.w	80147b8 <_rclc_take_new_data+0x2d0>
 8014672:	2201      	movs	r2, #1
 8014674:	6860      	ldr	r0, [r4, #4]
 8014676:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 801467a:	e7a6      	b.n	80145ca <_rclc_take_new_data+0xe2>
 801467c:	f009 f94a 	bl	801d914 <rclc_action_take_goal_handle>
 8014680:	4606      	mov	r6, r0
 8014682:	6860      	ldr	r0, [r4, #4]
 8014684:	2e00      	cmp	r6, #0
 8014686:	f43f af47 	beq.w	8014518 <_rclc_take_new_data+0x30>
 801468a:	6070      	str	r0, [r6, #4]
 801468c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8014690:	69f2      	ldr	r2, [r6, #28]
 8014692:	3010      	adds	r0, #16
 8014694:	f008 fef2 	bl	801d47c <rcl_action_take_goal_request>
 8014698:	4605      	mov	r5, r0
 801469a:	2800      	cmp	r0, #0
 801469c:	f040 808e 	bne.w	80147bc <_rclc_take_new_data+0x2d4>
 80146a0:	69f7      	ldr	r7, [r6, #28]
 80146a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146a4:	7235      	strb	r5, [r6, #8]
 80146a6:	f8c6 0009 	str.w	r0, [r6, #9]
 80146aa:	f8c6 100d 	str.w	r1, [r6, #13]
 80146ae:	6860      	ldr	r0, [r4, #4]
 80146b0:	f8c6 2011 	str.w	r2, [r6, #17]
 80146b4:	f8c6 3015 	str.w	r3, [r6, #21]
 80146b8:	e72e      	b.n	8014518 <_rclc_take_new_data+0x30>
 80146ba:	aa04      	add	r2, sp, #16
 80146bc:	a90a      	add	r1, sp, #40	; 0x28
 80146be:	3010      	adds	r0, #16
 80146c0:	f008 fca6 	bl	801d010 <rcl_action_take_goal_response>
 80146c4:	4605      	mov	r5, r0
 80146c6:	2800      	cmp	r0, #0
 80146c8:	f47f af71 	bne.w	80145ae <_rclc_take_new_data+0xc6>
 80146cc:	6860      	ldr	r0, [r4, #4]
 80146ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80146d2:	f009 f973 	bl	801d9bc <rclc_action_find_handle_by_goal_request_sequence_number>
 80146d6:	b130      	cbz	r0, 80146e6 <_rclc_take_new_data+0x1fe>
 80146d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80146dc:	2201      	movs	r2, #1
 80146de:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80146e2:	f880 2020 	strb.w	r2, [r0, #32]
 80146e6:	6860      	ldr	r0, [r4, #4]
 80146e8:	e769      	b.n	80145be <_rclc_take_new_data+0xd6>
 80146ea:	3010      	adds	r0, #16
 80146ec:	aa04      	add	r2, sp, #16
 80146ee:	a90a      	add	r1, sp, #40	; 0x28
 80146f0:	f008 ff3a 	bl	801d568 <rcl_action_take_result_request>
 80146f4:	4605      	mov	r5, r0
 80146f6:	2800      	cmp	r0, #0
 80146f8:	f47f af59 	bne.w	80145ae <_rclc_take_new_data+0xc6>
 80146fc:	a904      	add	r1, sp, #16
 80146fe:	6860      	ldr	r0, [r4, #4]
 8014700:	f009 f92e 	bl	801d960 <rclc_action_find_goal_handle_by_uuid>
 8014704:	4607      	mov	r7, r0
 8014706:	b160      	cbz	r0, 8014722 <_rclc_take_new_data+0x23a>
 8014708:	ad0a      	add	r5, sp, #40	; 0x28
 801470a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801470e:	f04f 0c02 	mov.w	ip, #2
 8014712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014714:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014716:	e895 0003 	ldmia.w	r5, {r0, r1}
 801471a:	e886 0003 	stmia.w	r6, {r0, r1}
 801471e:	f887 c008 	strb.w	ip, [r7, #8]
 8014722:	6860      	ldr	r0, [r4, #4]
 8014724:	2300      	movs	r3, #0
 8014726:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 801472a:	e6fa      	b.n	8014522 <_rclc_take_new_data+0x3a>
 801472c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014730:	a90a      	add	r1, sp, #40	; 0x28
 8014732:	3010      	adds	r0, #16
 8014734:	f008 fd24 	bl	801d180 <rcl_action_take_cancel_response>
 8014738:	4605      	mov	r5, r0
 801473a:	2800      	cmp	r0, #0
 801473c:	f47f af37 	bne.w	80145ae <_rclc_take_new_data+0xc6>
 8014740:	6860      	ldr	r0, [r4, #4]
 8014742:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014746:	f009 f95d 	bl	801da04 <rclc_action_find_handle_by_cancel_request_sequence_number>
 801474a:	4606      	mov	r6, r0
 801474c:	6860      	ldr	r0, [r4, #4]
 801474e:	2e00      	cmp	r6, #0
 8014750:	f43f af40 	beq.w	80145d4 <_rclc_take_new_data+0xec>
 8014754:	2701      	movs	r7, #1
 8014756:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014758:	84b7      	strh	r7, [r6, #36]	; 0x24
 801475a:	2b00      	cmp	r3, #0
 801475c:	f43f af3a 	beq.w	80145d4 <_rclc_take_new_data+0xec>
 8014760:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014762:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014766:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801476a:	f009 f8f9 	bl	801d960 <rclc_action_find_goal_handle_by_uuid>
 801476e:	b138      	cbz	r0, 8014780 <_rclc_take_new_data+0x298>
 8014770:	6860      	ldr	r0, [r4, #4]
 8014772:	3501      	adds	r5, #1
 8014774:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8014778:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801477a:	42ab      	cmp	r3, r5
 801477c:	d8f0      	bhi.n	8014760 <_rclc_take_new_data+0x278>
 801477e:	e729      	b.n	80145d4 <_rclc_take_new_data+0xec>
 8014780:	6860      	ldr	r0, [r4, #4]
 8014782:	3501      	adds	r5, #1
 8014784:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014786:	42ab      	cmp	r3, r5
 8014788:	d8ea      	bhi.n	8014760 <_rclc_take_new_data+0x278>
 801478a:	e723      	b.n	80145d4 <_rclc_take_new_data+0xec>
 801478c:	ab06      	add	r3, sp, #24
 801478e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014790:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014794:	2103      	movs	r1, #3
 8014796:	6860      	ldr	r0, [r4, #4]
 8014798:	e896 000c 	ldmia.w	r6, {r2, r3}
 801479c:	f009 f9a8 	bl	801daf0 <rclc_action_server_goal_cancel_reject>
 80147a0:	e6c4      	b.n	801452c <_rclc_take_new_data+0x44>
 80147a2:	ab06      	add	r3, sp, #24
 80147a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147a6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147aa:	2102      	movs	r1, #2
 80147ac:	6860      	ldr	r0, [r4, #4]
 80147ae:	e896 000c 	ldmia.w	r6, {r2, r3}
 80147b2:	f009 f99d 	bl	801daf0 <rclc_action_server_goal_cancel_reject>
 80147b6:	e6b9      	b.n	801452c <_rclc_take_new_data+0x44>
 80147b8:	6860      	ldr	r0, [r4, #4]
 80147ba:	e706      	b.n	80145ca <_rclc_take_new_data+0xe2>
 80147bc:	4631      	mov	r1, r6
 80147be:	6860      	ldr	r0, [r4, #4]
 80147c0:	f009 f8b8 	bl	801d934 <rclc_action_remove_used_goal_handle>
 80147c4:	f000 fe58 	bl	8015478 <rcutils_reset_error>
 80147c8:	e6b0      	b.n	801452c <_rclc_take_new_data+0x44>
 80147ca:	2501      	movs	r5, #1
 80147cc:	e6ae      	b.n	801452c <_rclc_take_new_data+0x44>
 80147ce:	bf00      	nop

080147d0 <_rclc_execute.part.0>:
 80147d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147d2:	7803      	ldrb	r3, [r0, #0]
 80147d4:	b085      	sub	sp, #20
 80147d6:	4604      	mov	r4, r0
 80147d8:	2b0a      	cmp	r3, #10
 80147da:	f200 8139 	bhi.w	8014a50 <_rclc_execute.part.0+0x280>
 80147de:	e8df f003 	tbb	[pc, r3]
 80147e2:	4268      	.short	0x4268
 80147e4:	06a75b4d 	.word	0x06a75b4d
 80147e8:	721d0606 	.word	0x721d0606
 80147ec:	62          	.byte	0x62
 80147ed:	00          	.byte	0x00
 80147ee:	2b06      	cmp	r3, #6
 80147f0:	f000 8126 	beq.w	8014a40 <_rclc_execute.part.0+0x270>
 80147f4:	2b07      	cmp	r3, #7
 80147f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80147f8:	f040 811c 	bne.w	8014a34 <_rclc_execute.part.0+0x264>
 80147fc:	f104 0510 	add.w	r5, r4, #16
 8014800:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 8014804:	6880      	ldr	r0, [r0, #8]
 8014806:	4798      	blx	r3
 8014808:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801480a:	4629      	mov	r1, r5
 801480c:	6860      	ldr	r0, [r4, #4]
 801480e:	f7ff fcb3 	bl	8014178 <rcl_send_response>
 8014812:	4604      	mov	r4, r0
 8014814:	b378      	cbz	r0, 8014876 <_rclc_execute.part.0+0xa6>
 8014816:	f000 fe2f 	bl	8015478 <rcutils_reset_error>
 801481a:	e02c      	b.n	8014876 <_rclc_execute.part.0+0xa6>
 801481c:	6840      	ldr	r0, [r0, #4]
 801481e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8014822:	2b00      	cmp	r3, #0
 8014824:	f000 808e 	beq.w	8014944 <_rclc_execute.part.0+0x174>
 8014828:	2600      	movs	r6, #0
 801482a:	2701      	movs	r7, #1
 801482c:	e004      	b.n	8014838 <_rclc_execute.part.0+0x68>
 801482e:	f009 f84b 	bl	801d8c8 <rclc_action_send_result_request>
 8014832:	b998      	cbnz	r0, 801485c <_rclc_execute.part.0+0x8c>
 8014834:	722f      	strb	r7, [r5, #8]
 8014836:	6860      	ldr	r0, [r4, #4]
 8014838:	f009 f8f6 	bl	801da28 <rclc_action_find_first_handle_with_goal_response>
 801483c:	4605      	mov	r5, r0
 801483e:	2800      	cmp	r0, #0
 8014840:	d07f      	beq.n	8014942 <_rclc_execute.part.0+0x172>
 8014842:	6863      	ldr	r3, [r4, #4]
 8014844:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014846:	699b      	ldr	r3, [r3, #24]
 8014848:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 801484c:	f885 6020 	strb.w	r6, [r5, #32]
 8014850:	4798      	blx	r3
 8014852:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8014856:	4628      	mov	r0, r5
 8014858:	2b00      	cmp	r3, #0
 801485a:	d1e8      	bne.n	801482e <_rclc_execute.part.0+0x5e>
 801485c:	6860      	ldr	r0, [r4, #4]
 801485e:	4629      	mov	r1, r5
 8014860:	f009 f868 	bl	801d934 <rclc_action_remove_used_goal_handle>
 8014864:	e7e7      	b.n	8014836 <_rclc_execute.part.0+0x66>
 8014866:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801486a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 801486e:	b100      	cbz	r0, 8014872 <_rclc_execute.part.0+0xa2>
 8014870:	68a0      	ldr	r0, [r4, #8]
 8014872:	2400      	movs	r4, #0
 8014874:	4798      	blx	r3
 8014876:	4620      	mov	r0, r4
 8014878:	b005      	add	sp, #20
 801487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801487c:	6840      	ldr	r0, [r0, #4]
 801487e:	f007 fc7d 	bl	801c17c <rcl_timer_call>
 8014882:	f240 3321 	movw	r3, #801	; 0x321
 8014886:	4604      	mov	r4, r0
 8014888:	4298      	cmp	r0, r3
 801488a:	d001      	beq.n	8014890 <_rclc_execute.part.0+0xc0>
 801488c:	2800      	cmp	r0, #0
 801488e:	d1c2      	bne.n	8014816 <_rclc_execute.part.0+0x46>
 8014890:	2400      	movs	r4, #0
 8014892:	4620      	mov	r0, r4
 8014894:	b005      	add	sp, #20
 8014896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014898:	2400      	movs	r4, #0
 801489a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801489c:	6880      	ldr	r0, [r0, #8]
 801489e:	4798      	blx	r3
 80148a0:	4620      	mov	r0, r4
 80148a2:	b005      	add	sp, #20
 80148a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148a6:	2400      	movs	r4, #0
 80148a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80148aa:	4798      	blx	r3
 80148ac:	4620      	mov	r0, r4
 80148ae:	b005      	add	sp, #20
 80148b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148b2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 80148b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80148b8:	b100      	cbz	r0, 80148bc <_rclc_execute.part.0+0xec>
 80148ba:	68a0      	ldr	r0, [r4, #8]
 80148bc:	2400      	movs	r4, #0
 80148be:	4798      	blx	r3
 80148c0:	4620      	mov	r0, r4
 80148c2:	b005      	add	sp, #20
 80148c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148c6:	6840      	ldr	r0, [r0, #4]
 80148c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80148cc:	bb3b      	cbnz	r3, 801491e <_rclc_execute.part.0+0x14e>
 80148ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d07d      	beq.n	80149d2 <_rclc_execute.part.0+0x202>
 80148d6:	f640 0634 	movw	r6, #2100	; 0x834
 80148da:	2701      	movs	r7, #1
 80148dc:	e007      	b.n	80148ee <_rclc_execute.part.0+0x11e>
 80148de:	4628      	mov	r0, r5
 80148e0:	f009 f8ba 	bl	801da58 <rclc_action_server_response_goal_request>
 80148e4:	4629      	mov	r1, r5
 80148e6:	6860      	ldr	r0, [r4, #4]
 80148e8:	f009 f824 	bl	801d934 <rclc_action_remove_used_goal_handle>
 80148ec:	6860      	ldr	r0, [r4, #4]
 80148ee:	2100      	movs	r1, #0
 80148f0:	f009 f84c 	bl	801d98c <rclc_action_find_first_handle_by_status>
 80148f4:	4605      	mov	r5, r0
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d068      	beq.n	80149cc <_rclc_execute.part.0+0x1fc>
 80148fa:	6863      	ldr	r3, [r4, #4]
 80148fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80148fe:	699b      	ldr	r3, [r3, #24]
 8014900:	4798      	blx	r3
 8014902:	42b0      	cmp	r0, r6
 8014904:	f04f 0100 	mov.w	r1, #0
 8014908:	d1e9      	bne.n	80148de <_rclc_execute.part.0+0x10e>
 801490a:	2101      	movs	r1, #1
 801490c:	4628      	mov	r0, r5
 801490e:	f009 f8a3 	bl	801da58 <rclc_action_server_response_goal_request>
 8014912:	722f      	strb	r7, [r5, #8]
 8014914:	e7ea      	b.n	80148ec <_rclc_execute.part.0+0x11c>
 8014916:	6848      	ldr	r0, [r1, #4]
 8014918:	f009 f80c 	bl	801d934 <rclc_action_remove_used_goal_handle>
 801491c:	6860      	ldr	r0, [r4, #4]
 801491e:	f009 f841 	bl	801d9a4 <rclc_action_find_first_terminated_handle>
 8014922:	4601      	mov	r1, r0
 8014924:	2800      	cmp	r0, #0
 8014926:	d1f6      	bne.n	8014916 <_rclc_execute.part.0+0x146>
 8014928:	6860      	ldr	r0, [r4, #4]
 801492a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801492e:	e7ce      	b.n	80148ce <_rclc_execute.part.0+0xfe>
 8014930:	2400      	movs	r4, #0
 8014932:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014934:	f100 0110 	add.w	r1, r0, #16
 8014938:	6880      	ldr	r0, [r0, #8]
 801493a:	4798      	blx	r3
 801493c:	4620      	mov	r0, r4
 801493e:	b005      	add	sp, #20
 8014940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014942:	6860      	ldr	r0, [r4, #4]
 8014944:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014948:	b18b      	cbz	r3, 801496e <_rclc_execute.part.0+0x19e>
 801494a:	68c5      	ldr	r5, [r0, #12]
 801494c:	b32d      	cbz	r5, 801499a <_rclc_execute.part.0+0x1ca>
 801494e:	2600      	movs	r6, #0
 8014950:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8014954:	b143      	cbz	r3, 8014968 <_rclc_execute.part.0+0x198>
 8014956:	69c3      	ldr	r3, [r0, #28]
 8014958:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 801495c:	b123      	cbz	r3, 8014968 <_rclc_execute.part.0+0x198>
 801495e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014960:	4628      	mov	r0, r5
 8014962:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014964:	4798      	blx	r3
 8014966:	6860      	ldr	r0, [r4, #4]
 8014968:	682d      	ldr	r5, [r5, #0]
 801496a:	2d00      	cmp	r5, #0
 801496c:	d1f0      	bne.n	8014950 <_rclc_execute.part.0+0x180>
 801496e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8014972:	b193      	cbz	r3, 801499a <_rclc_execute.part.0+0x1ca>
 8014974:	68c5      	ldr	r5, [r0, #12]
 8014976:	b185      	cbz	r5, 801499a <_rclc_execute.part.0+0x1ca>
 8014978:	2600      	movs	r6, #0
 801497a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801497e:	b14b      	cbz	r3, 8014994 <_rclc_execute.part.0+0x1c4>
 8014980:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014982:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8014986:	b12b      	cbz	r3, 8014994 <_rclc_execute.part.0+0x1c4>
 8014988:	4628      	mov	r0, r5
 801498a:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 801498e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014990:	4798      	blx	r3
 8014992:	6860      	ldr	r0, [r4, #4]
 8014994:	682d      	ldr	r5, [r5, #0]
 8014996:	2d00      	cmp	r5, #0
 8014998:	d1ef      	bne.n	801497a <_rclc_execute.part.0+0x1aa>
 801499a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 801499e:	2b00      	cmp	r3, #0
 80149a0:	f43f af76 	beq.w	8014890 <_rclc_execute.part.0+0xc0>
 80149a4:	2700      	movs	r7, #0
 80149a6:	e00b      	b.n	80149c0 <_rclc_execute.part.0+0x1f0>
 80149a8:	6863      	ldr	r3, [r4, #4]
 80149aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80149ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80149ae:	6a1e      	ldr	r6, [r3, #32]
 80149b0:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 80149b4:	47b0      	blx	r6
 80149b6:	6860      	ldr	r0, [r4, #4]
 80149b8:	4629      	mov	r1, r5
 80149ba:	f008 ffbb 	bl	801d934 <rclc_action_remove_used_goal_handle>
 80149be:	6860      	ldr	r0, [r4, #4]
 80149c0:	f009 f83e 	bl	801da40 <rclc_action_find_first_handle_with_result_response>
 80149c4:	4605      	mov	r5, r0
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d1ee      	bne.n	80149a8 <_rclc_execute.part.0+0x1d8>
 80149ca:	e761      	b.n	8014890 <_rclc_execute.part.0+0xc0>
 80149cc:	6860      	ldr	r0, [r4, #4]
 80149ce:	f880 5020 	strb.w	r5, [r0, #32]
 80149d2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f43f af5a 	beq.w	8014890 <_rclc_execute.part.0+0xc0>
 80149dc:	68c5      	ldr	r5, [r0, #12]
 80149de:	b1b5      	cbz	r5, 8014a0e <_rclc_execute.part.0+0x23e>
 80149e0:	2602      	movs	r6, #2
 80149e2:	e001      	b.n	80149e8 <_rclc_execute.part.0+0x218>
 80149e4:	682d      	ldr	r5, [r5, #0]
 80149e6:	b195      	cbz	r5, 8014a0e <_rclc_execute.part.0+0x23e>
 80149e8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80149ec:	2b03      	cmp	r3, #3
 80149ee:	d1f9      	bne.n	80149e4 <_rclc_execute.part.0+0x214>
 80149f0:	69c3      	ldr	r3, [r0, #28]
 80149f2:	4628      	mov	r0, r5
 80149f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80149f6:	4798      	blx	r3
 80149f8:	4603      	mov	r3, r0
 80149fa:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80149fe:	4628      	mov	r0, r5
 8014a00:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014a04:	b143      	cbz	r3, 8014a18 <_rclc_execute.part.0+0x248>
 8014a06:	f009 f847 	bl	801da98 <rclc_action_server_goal_cancel_accept>
 8014a0a:	6860      	ldr	r0, [r4, #4]
 8014a0c:	e7ea      	b.n	80149e4 <_rclc_execute.part.0+0x214>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	461c      	mov	r4, r3
 8014a12:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8014a16:	e72e      	b.n	8014876 <_rclc_execute.part.0+0xa6>
 8014a18:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8014a1a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8014a1e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a22:	2101      	movs	r1, #1
 8014a24:	6860      	ldr	r0, [r4, #4]
 8014a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a2a:	f009 f861 	bl	801daf0 <rclc_action_server_goal_cancel_reject>
 8014a2e:	722e      	strb	r6, [r5, #8]
 8014a30:	6860      	ldr	r0, [r4, #4]
 8014a32:	e7d7      	b.n	80149e4 <_rclc_execute.part.0+0x214>
 8014a34:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8014a36:	f104 0510 	add.w	r5, r4, #16
 8014a3a:	6880      	ldr	r0, [r0, #8]
 8014a3c:	4798      	blx	r3
 8014a3e:	e6e3      	b.n	8014808 <_rclc_execute.part.0+0x38>
 8014a40:	f100 0510 	add.w	r5, r0, #16
 8014a44:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014a46:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8014a48:	4629      	mov	r1, r5
 8014a4a:	6880      	ldr	r0, [r0, #8]
 8014a4c:	4798      	blx	r3
 8014a4e:	e6db      	b.n	8014808 <_rclc_execute.part.0+0x38>
 8014a50:	2401      	movs	r4, #1
 8014a52:	e710      	b.n	8014876 <_rclc_execute.part.0+0xa6>

08014a54 <rclc_executor_trigger_any>:
 8014a54:	2800      	cmp	r0, #0
 8014a56:	d03d      	beq.n	8014ad4 <rclc_executor_trigger_any+0x80>
 8014a58:	2900      	cmp	r1, #0
 8014a5a:	d03c      	beq.n	8014ad6 <rclc_executor_trigger_any+0x82>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8014a62:	2200      	movs	r2, #0
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d035      	beq.n	8014ad4 <rclc_executor_trigger_any+0x80>
 8014a68:	b430      	push	{r4, r5}
 8014a6a:	f893 c000 	ldrb.w	ip, [r3]
 8014a6e:	f1bc 0f08 	cmp.w	ip, #8
 8014a72:	d11d      	bne.n	8014ab0 <rclc_executor_trigger_any+0x5c>
 8014a74:	685c      	ldr	r4, [r3, #4]
 8014a76:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8014a78:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8014a7c:	d105      	bne.n	8014a8a <rclc_executor_trigger_any+0x36>
 8014a7e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8014a82:	b910      	cbnz	r0, 8014a8a <rclc_executor_trigger_any+0x36>
 8014a84:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8014a88:	b128      	cbz	r0, 8014a96 <rclc_executor_trigger_any+0x42>
 8014a8a:	bc30      	pop	{r4, r5}
 8014a8c:	4770      	bx	lr
 8014a8e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8014a92:	2800      	cmp	r0, #0
 8014a94:	d1f9      	bne.n	8014a8a <rclc_executor_trigger_any+0x36>
 8014a96:	3201      	adds	r2, #1
 8014a98:	3340      	adds	r3, #64	; 0x40
 8014a9a:	4291      	cmp	r1, r2
 8014a9c:	d017      	beq.n	8014ace <rclc_executor_trigger_any+0x7a>
 8014a9e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8014aa2:	2800      	cmp	r0, #0
 8014aa4:	d0f1      	beq.n	8014a8a <rclc_executor_trigger_any+0x36>
 8014aa6:	f893 c000 	ldrb.w	ip, [r3]
 8014aaa:	f1bc 0f08 	cmp.w	ip, #8
 8014aae:	d0e1      	beq.n	8014a74 <rclc_executor_trigger_any+0x20>
 8014ab0:	f1bc 0f09 	cmp.w	ip, #9
 8014ab4:	d1eb      	bne.n	8014a8e <rclc_executor_trigger_any+0x3a>
 8014ab6:	685c      	ldr	r4, [r3, #4]
 8014ab8:	6a25      	ldr	r5, [r4, #32]
 8014aba:	2d00      	cmp	r5, #0
 8014abc:	d1e5      	bne.n	8014a8a <rclc_executor_trigger_any+0x36>
 8014abe:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	d1e1      	bne.n	8014a8a <rclc_executor_trigger_any+0x36>
 8014ac6:	3201      	adds	r2, #1
 8014ac8:	3340      	adds	r3, #64	; 0x40
 8014aca:	4291      	cmp	r1, r2
 8014acc:	d1e7      	bne.n	8014a9e <rclc_executor_trigger_any+0x4a>
 8014ace:	2000      	movs	r0, #0
 8014ad0:	bc30      	pop	{r4, r5}
 8014ad2:	4770      	bx	lr
 8014ad4:	4770      	bx	lr
 8014ad6:	4608      	mov	r0, r1
 8014ad8:	4770      	bx	lr
 8014ada:	bf00      	nop

08014adc <rclc_executor_get_zero_initialized_executor>:
 8014adc:	b510      	push	{r4, lr}
 8014ade:	4604      	mov	r4, r0
 8014ae0:	2288      	movs	r2, #136	; 0x88
 8014ae2:	4902      	ldr	r1, [pc, #8]	; (8014aec <rclc_executor_get_zero_initialized_executor+0x10>)
 8014ae4:	f00c fbeb 	bl	80212be <memcpy>
 8014ae8:	4620      	mov	r0, r4
 8014aea:	bd10      	pop	{r4, pc}
 8014aec:	080252a8 	.word	0x080252a8

08014af0 <rclc_executor_init>:
 8014af0:	2900      	cmp	r1, #0
 8014af2:	d06a      	beq.n	8014bca <rclc_executor_init+0xda>
 8014af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014af8:	4605      	mov	r5, r0
 8014afa:	b0b0      	sub	sp, #192	; 0xc0
 8014afc:	2800      	cmp	r0, #0
 8014afe:	d05c      	beq.n	8014bba <rclc_executor_init+0xca>
 8014b00:	4616      	mov	r6, r2
 8014b02:	4618      	mov	r0, r3
 8014b04:	4688      	mov	r8, r1
 8014b06:	461f      	mov	r7, r3
 8014b08:	f000 fc78 	bl	80153fc <rcutils_allocator_is_valid>
 8014b0c:	2e00      	cmp	r6, #0
 8014b0e:	d054      	beq.n	8014bba <rclc_executor_init+0xca>
 8014b10:	f080 0401 	eor.w	r4, r0, #1
 8014b14:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8014b18:	d14f      	bne.n	8014bba <rclc_executor_init+0xca>
 8014b1a:	2288      	movs	r2, #136	; 0x88
 8014b1c:	4930      	ldr	r1, [pc, #192]	; (8014be0 <rclc_executor_init+0xf0>)
 8014b1e:	a80e      	add	r0, sp, #56	; 0x38
 8014b20:	f00c fbcd 	bl	80212be <memcpy>
 8014b24:	a90e      	add	r1, sp, #56	; 0x38
 8014b26:	2288      	movs	r2, #136	; 0x88
 8014b28:	4628      	mov	r0, r5
 8014b2a:	f00c fbc8 	bl	80212be <memcpy>
 8014b2e:	4668      	mov	r0, sp
 8014b30:	f8c5 8000 	str.w	r8, [r5]
 8014b34:	60ae      	str	r6, [r5, #8]
 8014b36:	f007 fc97 	bl	801c468 <rcl_get_zero_initialized_wait_set>
 8014b3a:	46ec      	mov	ip, sp
 8014b3c:	f105 0e14 	add.w	lr, r5, #20
 8014b40:	f8d7 8000 	ldr.w	r8, [r7]
 8014b44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b58:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014bd8 <rclc_executor_init+0xe8>
 8014b5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b60:	f8dc 3000 	ldr.w	r3, [ip]
 8014b64:	01b0      	lsls	r0, r6, #6
 8014b66:	6939      	ldr	r1, [r7, #16]
 8014b68:	f8ce 3000 	str.w	r3, [lr]
 8014b6c:	612f      	str	r7, [r5, #16]
 8014b6e:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8014b72:	47c0      	blx	r8
 8014b74:	6068      	str	r0, [r5, #4]
 8014b76:	b908      	cbnz	r0, 8014b7c <rclc_executor_init+0x8c>
 8014b78:	e029      	b.n	8014bce <rclc_executor_init+0xde>
 8014b7a:	6868      	ldr	r0, [r5, #4]
 8014b7c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8014b80:	3401      	adds	r4, #1
 8014b82:	4631      	mov	r1, r6
 8014b84:	f000 fac0 	bl	8015108 <rclc_executor_handle_init>
 8014b88:	42a6      	cmp	r6, r4
 8014b8a:	d8f6      	bhi.n	8014b7a <rclc_executor_init+0x8a>
 8014b8c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8014b90:	f000 faae 	bl	80150f0 <rclc_executor_handle_counters_zero_init>
 8014b94:	4a13      	ldr	r2, [pc, #76]	; (8014be4 <rclc_executor_init+0xf4>)
 8014b96:	2300      	movs	r3, #0
 8014b98:	6868      	ldr	r0, [r5, #4]
 8014b9a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8014b9e:	b168      	cbz	r0, 8014bbc <rclc_executor_init+0xcc>
 8014ba0:	68ab      	ldr	r3, [r5, #8]
 8014ba2:	b173      	cbz	r3, 8014bc2 <rclc_executor_init+0xd2>
 8014ba4:	692a      	ldr	r2, [r5, #16]
 8014ba6:	fab2 f382 	clz	r3, r2
 8014baa:	095b      	lsrs	r3, r3, #5
 8014bac:	b14a      	cbz	r2, 8014bc2 <rclc_executor_init+0xd2>
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 8014bb4:	b030      	add	sp, #192	; 0xc0
 8014bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bba:	200b      	movs	r0, #11
 8014bbc:	b030      	add	sp, #192	; 0xc0
 8014bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc2:	2000      	movs	r0, #0
 8014bc4:	b030      	add	sp, #192	; 0xc0
 8014bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bca:	200b      	movs	r0, #11
 8014bcc:	4770      	bx	lr
 8014bce:	200a      	movs	r0, #10
 8014bd0:	e7f4      	b.n	8014bbc <rclc_executor_init+0xcc>
 8014bd2:	bf00      	nop
 8014bd4:	f3af 8000 	nop.w
 8014bd8:	3b9aca00 	.word	0x3b9aca00
 8014bdc:	00000000 	.word	0x00000000
 8014be0:	080252a8 	.word	0x080252a8
 8014be4:	08014a55 	.word	0x08014a55

08014be8 <rclc_executor_add_subscription>:
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	bf18      	it	ne
 8014bec:	2a00      	cmpne	r2, #0
 8014bee:	b570      	push	{r4, r5, r6, lr}
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	bf0c      	ite	eq
 8014bf4:	2001      	moveq	r0, #1
 8014bf6:	2000      	movne	r0, #0
 8014bf8:	f89d c010 	ldrb.w	ip, [sp, #16]
 8014bfc:	2900      	cmp	r1, #0
 8014bfe:	bf08      	it	eq
 8014c00:	f040 0001 	orreq.w	r0, r0, #1
 8014c04:	bb28      	cbnz	r0, 8014c52 <rclc_executor_add_subscription+0x6a>
 8014c06:	fab4 f584 	clz	r5, r4
 8014c0a:	096d      	lsrs	r5, r5, #5
 8014c0c:	b30c      	cbz	r4, 8014c52 <rclc_executor_add_subscription+0x6a>
 8014c0e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8014c12:	4286      	cmp	r6, r0
 8014c14:	d301      	bcc.n	8014c1a <rclc_executor_add_subscription+0x32>
 8014c16:	2001      	movs	r0, #1
 8014c18:	bd70      	pop	{r4, r5, r6, pc}
 8014c1a:	6860      	ldr	r0, [r4, #4]
 8014c1c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8014c20:	f800 500e 	strb.w	r5, [r0, lr]
 8014c24:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8014c28:	3601      	adds	r6, #1
 8014c2a:	6303      	str	r3, [r0, #48]	; 0x30
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	62c5      	str	r5, [r0, #44]	; 0x2c
 8014c30:	f104 0514 	add.w	r5, r4, #20
 8014c34:	f880 c001 	strb.w	ip, [r0, #1]
 8014c38:	8703      	strh	r3, [r0, #56]	; 0x38
 8014c3a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014c3e:	4628      	mov	r0, r5
 8014c40:	60e6      	str	r6, [r4, #12]
 8014c42:	f007 fc25 	bl	801c490 <rcl_wait_set_is_valid>
 8014c46:	b930      	cbnz	r0, 8014c56 <rclc_executor_add_subscription+0x6e>
 8014c48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	64a3      	str	r3, [r4, #72]	; 0x48
 8014c50:	bd70      	pop	{r4, r5, r6, pc}
 8014c52:	200b      	movs	r0, #11
 8014c54:	bd70      	pop	{r4, r5, r6, pc}
 8014c56:	4628      	mov	r0, r5
 8014c58:	f007 fc20 	bl	801c49c <rcl_wait_set_fini>
 8014c5c:	2800      	cmp	r0, #0
 8014c5e:	d0f3      	beq.n	8014c48 <rclc_executor_add_subscription+0x60>
 8014c60:	bd70      	pop	{r4, r5, r6, pc}
 8014c62:	bf00      	nop

08014c64 <rclc_executor_add_service>:
 8014c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c66:	9d06      	ldr	r5, [sp, #24]
 8014c68:	4604      	mov	r4, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	bf18      	it	ne
 8014c6e:	2d00      	cmpne	r5, #0
 8014c70:	bf0c      	ite	eq
 8014c72:	2001      	moveq	r0, #1
 8014c74:	2000      	movne	r0, #0
 8014c76:	2a00      	cmp	r2, #0
 8014c78:	bf08      	it	eq
 8014c7a:	f040 0001 	orreq.w	r0, r0, #1
 8014c7e:	2900      	cmp	r1, #0
 8014c80:	bf08      	it	eq
 8014c82:	f040 0001 	orreq.w	r0, r0, #1
 8014c86:	bb40      	cbnz	r0, 8014cda <rclc_executor_add_service+0x76>
 8014c88:	fab4 f684 	clz	r6, r4
 8014c8c:	0976      	lsrs	r6, r6, #5
 8014c8e:	b324      	cbz	r4, 8014cda <rclc_executor_add_service+0x76>
 8014c90:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8014c94:	42b8      	cmp	r0, r7
 8014c96:	d301      	bcc.n	8014c9c <rclc_executor_add_service+0x38>
 8014c98:	2001      	movs	r0, #1
 8014c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c9c:	6867      	ldr	r7, [r4, #4]
 8014c9e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8014ca2:	f100 0c01 	add.w	ip, r0, #1
 8014ca6:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8014caa:	6283      	str	r3, [r0, #40]	; 0x28
 8014cac:	2305      	movs	r3, #5
 8014cae:	6305      	str	r5, [r0, #48]	; 0x30
 8014cb0:	f104 0514 	add.w	r5, r4, #20
 8014cb4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8014cb8:	f827 300e 	strh.w	r3, [r7, lr]
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	62c6      	str	r6, [r0, #44]	; 0x2c
 8014cc0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f8c4 c00c 	str.w	ip, [r4, #12]
 8014cca:	f007 fbe1 	bl	801c490 <rcl_wait_set_is_valid>
 8014cce:	b930      	cbnz	r0, 8014cde <rclc_executor_add_service+0x7a>
 8014cd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014cd2:	2000      	movs	r0, #0
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	6563      	str	r3, [r4, #84]	; 0x54
 8014cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cda:	200b      	movs	r0, #11
 8014cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cde:	4628      	mov	r0, r5
 8014ce0:	f007 fbdc 	bl	801c49c <rcl_wait_set_fini>
 8014ce4:	2800      	cmp	r0, #0
 8014ce6:	d0f3      	beq.n	8014cd0 <rclc_executor_add_service+0x6c>
 8014ce8:	e7d7      	b.n	8014c9a <rclc_executor_add_service+0x36>
 8014cea:	bf00      	nop

08014cec <rclc_executor_prepare>:
 8014cec:	2800      	cmp	r0, #0
 8014cee:	d044      	beq.n	8014d7a <rclc_executor_prepare+0x8e>
 8014cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cf2:	f100 0514 	add.w	r5, r0, #20
 8014cf6:	b09b      	sub	sp, #108	; 0x6c
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	f007 fbc8 	bl	801c490 <rcl_wait_set_is_valid>
 8014d00:	b110      	cbz	r0, 8014d08 <rclc_executor_prepare+0x1c>
 8014d02:	2000      	movs	r0, #0
 8014d04:	b01b      	add	sp, #108	; 0x6c
 8014d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d08:	4628      	mov	r0, r5
 8014d0a:	f007 fbc7 	bl	801c49c <rcl_wait_set_fini>
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	d130      	bne.n	8014d74 <rclc_executor_prepare+0x88>
 8014d12:	a80c      	add	r0, sp, #48	; 0x30
 8014d14:	ae04      	add	r6, sp, #16
 8014d16:	f007 fba7 	bl	801c468 <rcl_get_zero_initialized_wait_set>
 8014d1a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014d1e:	46ae      	mov	lr, r5
 8014d20:	6927      	ldr	r7, [r4, #16]
 8014d22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d3a:	f8dc 3000 	ldr.w	r3, [ip]
 8014d3e:	f8ce 3000 	str.w	r3, [lr]
 8014d42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014d44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	4628      	mov	r0, r5
 8014d4a:	6822      	ldr	r2, [r4, #0]
 8014d4c:	6033      	str	r3, [r6, #0]
 8014d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d50:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014d52:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d56:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8014d5a:	e9cd 2100 	strd	r2, r1, [sp]
 8014d5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8014d60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014d62:	f007 fe9b 	bl	801ca9c <rcl_wait_set_init>
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d0cc      	beq.n	8014d04 <rclc_executor_prepare+0x18>
 8014d6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8014d6c:	f000 fb84 	bl	8015478 <rcutils_reset_error>
 8014d70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014d72:	e7c7      	b.n	8014d04 <rclc_executor_prepare+0x18>
 8014d74:	f000 fb80 	bl	8015478 <rcutils_reset_error>
 8014d78:	e7cb      	b.n	8014d12 <rclc_executor_prepare+0x26>
 8014d7a:	200b      	movs	r0, #11
 8014d7c:	4770      	bx	lr
 8014d7e:	bf00      	nop

08014d80 <rclc_executor_spin_some.part.0>:
 8014d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d84:	4605      	mov	r5, r0
 8014d86:	4691      	mov	r9, r2
 8014d88:	4698      	mov	r8, r3
 8014d8a:	f7ff ffaf 	bl	8014cec <rclc_executor_prepare>
 8014d8e:	f105 0614 	add.w	r6, r5, #20
 8014d92:	4630      	mov	r0, r6
 8014d94:	f007 fc4e 	bl	801c634 <rcl_wait_set_clear>
 8014d98:	4607      	mov	r7, r0
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	f040 80a8 	bne.w	8014ef0 <rclc_executor_spin_some.part.0+0x170>
 8014da0:	68ab      	ldr	r3, [r5, #8]
 8014da2:	b30b      	cbz	r3, 8014de8 <rclc_executor_spin_some.part.0+0x68>
 8014da4:	4604      	mov	r4, r0
 8014da6:	6869      	ldr	r1, [r5, #4]
 8014da8:	01a2      	lsls	r2, r4, #6
 8014daa:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8014dae:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8014db2:	b1cb      	cbz	r3, 8014de8 <rclc_executor_spin_some.part.0+0x68>
 8014db4:	5c8b      	ldrb	r3, [r1, r2]
 8014db6:	2b0a      	cmp	r3, #10
 8014db8:	f200 80de 	bhi.w	8014f78 <rclc_executor_spin_some.part.0+0x1f8>
 8014dbc:	e8df f003 	tbb	[pc, r3]
 8014dc0:	8da99d9d 	.word	0x8da99d9d
 8014dc4:	0606068d 	.word	0x0606068d
 8014dc8:	c1ce      	.short	0xc1ce
 8014dca:	b5          	.byte	0xb5
 8014dcb:	00          	.byte	0x00
 8014dcc:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014dd0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	f007 ff7d 	bl	801ccd4 <rcl_wait_set_add_service>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	f040 8087 	bne.w	8014eee <rclc_executor_spin_some.part.0+0x16e>
 8014de0:	3401      	adds	r4, #1
 8014de2:	68ab      	ldr	r3, [r5, #8]
 8014de4:	429c      	cmp	r4, r3
 8014de6:	d3de      	bcc.n	8014da6 <rclc_executor_spin_some.part.0+0x26>
 8014de8:	4643      	mov	r3, r8
 8014dea:	464a      	mov	r2, r9
 8014dec:	4630      	mov	r0, r6
 8014dee:	f007 ff9f 	bl	801cd30 <rcl_wait>
 8014df2:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	f000 80c6 	beq.w	8014f88 <rclc_executor_spin_some.part.0+0x208>
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	f040 80bb 	bne.w	8014f78 <rclc_executor_spin_some.part.0+0x1f8>
 8014e02:	68ab      	ldr	r3, [r5, #8]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f000 8159 	beq.w	80150bc <rclc_executor_spin_some.part.0+0x33c>
 8014e0a:	2400      	movs	r4, #0
 8014e0c:	f240 1991 	movw	r9, #401	; 0x191
 8014e10:	46a0      	mov	r8, r4
 8014e12:	e00a      	b.n	8014e2a <rclc_executor_spin_some.part.0+0xaa>
 8014e14:	f7ff fb1a 	bl	801444c <_rclc_check_for_new_data>
 8014e18:	4604      	mov	r4, r0
 8014e1a:	b110      	cbz	r0, 8014e22 <rclc_executor_spin_some.part.0+0xa2>
 8014e1c:	4548      	cmp	r0, r9
 8014e1e:	f040 80b1 	bne.w	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014e22:	68ab      	ldr	r3, [r5, #8]
 8014e24:	4598      	cmp	r8, r3
 8014e26:	f080 8126 	bcs.w	8015076 <rclc_executor_spin_some.part.0+0x2f6>
 8014e2a:	686a      	ldr	r2, [r5, #4]
 8014e2c:	4631      	mov	r1, r6
 8014e2e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014e32:	f108 0801 	add.w	r8, r8, #1
 8014e36:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014e3a:	f1bc 0f00 	cmp.w	ip, #0
 8014e3e:	d1e9      	bne.n	8014e14 <rclc_executor_spin_some.part.0+0x94>
 8014e40:	4619      	mov	r1, r3
 8014e42:	4610      	mov	r0, r2
 8014e44:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014e48:	4798      	blx	r3
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	f000 809a 	beq.w	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014e50:	68ab      	ldr	r3, [r5, #8]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	f000 8096 	beq.w	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014e58:	f04f 0800 	mov.w	r8, #0
 8014e5c:	f240 1991 	movw	r9, #401	; 0x191
 8014e60:	e009      	b.n	8014e76 <rclc_executor_spin_some.part.0+0xf6>
 8014e62:	f7ff fb41 	bl	80144e8 <_rclc_take_new_data>
 8014e66:	4604      	mov	r4, r0
 8014e68:	b110      	cbz	r0, 8014e70 <rclc_executor_spin_some.part.0+0xf0>
 8014e6a:	4548      	cmp	r0, r9
 8014e6c:	f040 808a 	bne.w	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014e70:	68ab      	ldr	r3, [r5, #8]
 8014e72:	4598      	cmp	r8, r3
 8014e74:	d209      	bcs.n	8014e8a <rclc_executor_spin_some.part.0+0x10a>
 8014e76:	6868      	ldr	r0, [r5, #4]
 8014e78:	4631      	mov	r1, r6
 8014e7a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014e7e:	f108 0801 	add.w	r8, r8, #1
 8014e82:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8014e86:	2a00      	cmp	r2, #0
 8014e88:	d1eb      	bne.n	8014e62 <rclc_executor_spin_some.part.0+0xe2>
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d07a      	beq.n	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014e8e:	2600      	movs	r6, #0
 8014e90:	e00e      	b.n	8014eb0 <rclc_executor_spin_some.part.0+0x130>
 8014e92:	f812 200c 	ldrb.w	r2, [r2, ip]
 8014e96:	2a08      	cmp	r2, #8
 8014e98:	f000 80fc 	beq.w	8015094 <rclc_executor_spin_some.part.0+0x314>
 8014e9c:	2a09      	cmp	r2, #9
 8014e9e:	f000 80ee 	beq.w	801507e <rclc_executor_spin_some.part.0+0x2fe>
 8014ea2:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8014ea6:	b98a      	cbnz	r2, 8014ecc <rclc_executor_spin_some.part.0+0x14c>
 8014ea8:	3601      	adds	r6, #1
 8014eaa:	429e      	cmp	r6, r3
 8014eac:	d267      	bcs.n	8014f7e <rclc_executor_spin_some.part.0+0x1fe>
 8014eae:	2400      	movs	r4, #0
 8014eb0:	686a      	ldr	r2, [r5, #4]
 8014eb2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8014eb6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8014eba:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8014ebe:	2900      	cmp	r1, #0
 8014ec0:	d060      	beq.n	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014ec2:	7841      	ldrb	r1, [r0, #1]
 8014ec4:	2900      	cmp	r1, #0
 8014ec6:	d0e4      	beq.n	8014e92 <rclc_executor_spin_some.part.0+0x112>
 8014ec8:	2901      	cmp	r1, #1
 8014eca:	d1ed      	bne.n	8014ea8 <rclc_executor_spin_some.part.0+0x128>
 8014ecc:	f7ff fc80 	bl	80147d0 <_rclc_execute.part.0>
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	f040 80b5 	bne.w	8015040 <rclc_executor_spin_some.part.0+0x2c0>
 8014ed6:	68ab      	ldr	r3, [r5, #8]
 8014ed8:	e7e6      	b.n	8014ea8 <rclc_executor_spin_some.part.0+0x128>
 8014eda:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014ede:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014ee2:	4630      	mov	r0, r6
 8014ee4:	f007 feca 	bl	801cc7c <rcl_wait_set_add_client>
 8014ee8:	2800      	cmp	r0, #0
 8014eea:	f43f af79 	beq.w	8014de0 <rclc_executor_spin_some.part.0+0x60>
 8014eee:	4607      	mov	r7, r0
 8014ef0:	f000 fac2 	bl	8015478 <rcutils_reset_error>
 8014ef4:	4638      	mov	r0, r7
 8014ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014efe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f02:	4630      	mov	r0, r6
 8014f04:	f007 fb6a 	bl	801c5dc <rcl_wait_set_add_subscription>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	f43f af69 	beq.w	8014de0 <rclc_executor_spin_some.part.0+0x60>
 8014f0e:	4607      	mov	r7, r0
 8014f10:	e7ee      	b.n	8014ef0 <rclc_executor_spin_some.part.0+0x170>
 8014f12:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014f16:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f1a:	4630      	mov	r0, r6
 8014f1c:	f007 fe7e 	bl	801cc1c <rcl_wait_set_add_timer>
 8014f20:	2800      	cmp	r0, #0
 8014f22:	f43f af5d 	beq.w	8014de0 <rclc_executor_spin_some.part.0+0x60>
 8014f26:	4607      	mov	r7, r0
 8014f28:	e7e2      	b.n	8014ef0 <rclc_executor_spin_some.part.0+0x170>
 8014f2a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014f2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f32:	4630      	mov	r0, r6
 8014f34:	f007 fe46 	bl	801cbc4 <rcl_wait_set_add_guard_condition>
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	f43f af51 	beq.w	8014de0 <rclc_executor_spin_some.part.0+0x60>
 8014f3e:	4607      	mov	r7, r0
 8014f40:	e7d6      	b.n	8014ef0 <rclc_executor_spin_some.part.0+0x170>
 8014f42:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f46:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014f4a:	4630      	mov	r0, r6
 8014f4c:	3110      	adds	r1, #16
 8014f4e:	f008 fbc3 	bl	801d6d8 <rcl_action_wait_set_add_action_server>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	f43f af44 	beq.w	8014de0 <rclc_executor_spin_some.part.0+0x60>
 8014f58:	4607      	mov	r7, r0
 8014f5a:	e7c9      	b.n	8014ef0 <rclc_executor_spin_some.part.0+0x170>
 8014f5c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014f60:	2300      	movs	r3, #0
 8014f62:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8014f66:	4630      	mov	r0, r6
 8014f68:	3110      	adds	r1, #16
 8014f6a:	f008 f98d 	bl	801d288 <rcl_action_wait_set_add_action_client>
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	f43f af36 	beq.w	8014de0 <rclc_executor_spin_some.part.0+0x60>
 8014f74:	4607      	mov	r7, r0
 8014f76:	e7bb      	b.n	8014ef0 <rclc_executor_spin_some.part.0+0x170>
 8014f78:	2701      	movs	r7, #1
 8014f7a:	f000 fa7d 	bl	8015478 <rcutils_reset_error>
 8014f7e:	4638      	mov	r0, r7
 8014f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f84:	4627      	mov	r7, r4
 8014f86:	e7fa      	b.n	8014f7e <rclc_executor_spin_some.part.0+0x1fe>
 8014f88:	68ab      	ldr	r3, [r5, #8]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f000 8093 	beq.w	80150b6 <rclc_executor_spin_some.part.0+0x336>
 8014f90:	2400      	movs	r4, #0
 8014f92:	f240 1991 	movw	r9, #401	; 0x191
 8014f96:	46a0      	mov	r8, r4
 8014f98:	e008      	b.n	8014fac <rclc_executor_spin_some.part.0+0x22c>
 8014f9a:	f7ff fa57 	bl	801444c <_rclc_check_for_new_data>
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	b108      	cbz	r0, 8014fa6 <rclc_executor_spin_some.part.0+0x226>
 8014fa2:	4548      	cmp	r0, r9
 8014fa4:	d1ee      	bne.n	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014fa6:	68ab      	ldr	r3, [r5, #8]
 8014fa8:	4598      	cmp	r8, r3
 8014faa:	d266      	bcs.n	801507a <rclc_executor_spin_some.part.0+0x2fa>
 8014fac:	686a      	ldr	r2, [r5, #4]
 8014fae:	4631      	mov	r1, r6
 8014fb0:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8014fb4:	f108 0801 	add.w	r8, r8, #1
 8014fb8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8014fbc:	f1bc 0f00 	cmp.w	ip, #0
 8014fc0:	d1eb      	bne.n	8014f9a <rclc_executor_spin_some.part.0+0x21a>
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	4610      	mov	r0, r2
 8014fc6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8014fca:	4798      	blx	r3
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d0d9      	beq.n	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014fd0:	68ab      	ldr	r3, [r5, #8]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d0d6      	beq.n	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8014fd6:	f04f 0a00 	mov.w	sl, #0
 8014fda:	f240 1891 	movw	r8, #401	; 0x191
 8014fde:	f240 2959 	movw	r9, #601	; 0x259
 8014fe2:	e00e      	b.n	8015002 <rclc_executor_spin_some.part.0+0x282>
 8014fe4:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014fe8:	2b08      	cmp	r3, #8
 8014fea:	d034      	beq.n	8015056 <rclc_executor_spin_some.part.0+0x2d6>
 8014fec:	2b09      	cmp	r3, #9
 8014fee:	d029      	beq.n	8015044 <rclc_executor_spin_some.part.0+0x2c4>
 8014ff0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8014ff4:	bb03      	cbnz	r3, 8015038 <rclc_executor_spin_some.part.0+0x2b8>
 8014ff6:	f10a 0a01 	add.w	sl, sl, #1
 8014ffa:	68ab      	ldr	r3, [r5, #8]
 8014ffc:	459a      	cmp	sl, r3
 8014ffe:	d2be      	bcs.n	8014f7e <rclc_executor_spin_some.part.0+0x1fe>
 8015000:	2400      	movs	r4, #0
 8015002:	6868      	ldr	r0, [r5, #4]
 8015004:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8015008:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801500c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8015010:	2b00      	cmp	r3, #0
 8015012:	d0b7      	beq.n	8014f84 <rclc_executor_spin_some.part.0+0x204>
 8015014:	4631      	mov	r1, r6
 8015016:	f7ff fa67 	bl	80144e8 <_rclc_take_new_data>
 801501a:	2800      	cmp	r0, #0
 801501c:	bf18      	it	ne
 801501e:	4540      	cmpne	r0, r8
 8015020:	d001      	beq.n	8015026 <rclc_executor_spin_some.part.0+0x2a6>
 8015022:	4548      	cmp	r0, r9
 8015024:	d10c      	bne.n	8015040 <rclc_executor_spin_some.part.0+0x2c0>
 8015026:	686b      	ldr	r3, [r5, #4]
 8015028:	eb13 000b 	adds.w	r0, r3, fp
 801502c:	d021      	beq.n	8015072 <rclc_executor_spin_some.part.0+0x2f2>
 801502e:	7842      	ldrb	r2, [r0, #1]
 8015030:	2a00      	cmp	r2, #0
 8015032:	d0d7      	beq.n	8014fe4 <rclc_executor_spin_some.part.0+0x264>
 8015034:	2a01      	cmp	r2, #1
 8015036:	d1de      	bne.n	8014ff6 <rclc_executor_spin_some.part.0+0x276>
 8015038:	f7ff fbca 	bl	80147d0 <_rclc_execute.part.0>
 801503c:	2800      	cmp	r0, #0
 801503e:	d0da      	beq.n	8014ff6 <rclc_executor_spin_some.part.0+0x276>
 8015040:	4607      	mov	r7, r0
 8015042:	e79c      	b.n	8014f7e <rclc_executor_spin_some.part.0+0x1fe>
 8015044:	6843      	ldr	r3, [r0, #4]
 8015046:	6a1a      	ldr	r2, [r3, #32]
 8015048:	2a00      	cmp	r2, #0
 801504a:	d1f5      	bne.n	8015038 <rclc_executor_spin_some.part.0+0x2b8>
 801504c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015050:	2b00      	cmp	r3, #0
 8015052:	d0d0      	beq.n	8014ff6 <rclc_executor_spin_some.part.0+0x276>
 8015054:	e7f0      	b.n	8015038 <rclc_executor_spin_some.part.0+0x2b8>
 8015056:	6843      	ldr	r3, [r0, #4]
 8015058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801505a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801505e:	d1eb      	bne.n	8015038 <rclc_executor_spin_some.part.0+0x2b8>
 8015060:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8015064:	2a00      	cmp	r2, #0
 8015066:	d1e7      	bne.n	8015038 <rclc_executor_spin_some.part.0+0x2b8>
 8015068:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801506c:	2b00      	cmp	r3, #0
 801506e:	d0c2      	beq.n	8014ff6 <rclc_executor_spin_some.part.0+0x276>
 8015070:	e7e2      	b.n	8015038 <rclc_executor_spin_some.part.0+0x2b8>
 8015072:	270b      	movs	r7, #11
 8015074:	e783      	b.n	8014f7e <rclc_executor_spin_some.part.0+0x1fe>
 8015076:	686a      	ldr	r2, [r5, #4]
 8015078:	e6e2      	b.n	8014e40 <rclc_executor_spin_some.part.0+0xc0>
 801507a:	686a      	ldr	r2, [r5, #4]
 801507c:	e7a1      	b.n	8014fc2 <rclc_executor_spin_some.part.0+0x242>
 801507e:	6842      	ldr	r2, [r0, #4]
 8015080:	6a11      	ldr	r1, [r2, #32]
 8015082:	2900      	cmp	r1, #0
 8015084:	f47f af22 	bne.w	8014ecc <rclc_executor_spin_some.part.0+0x14c>
 8015088:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801508c:	2a00      	cmp	r2, #0
 801508e:	f43f af0b 	beq.w	8014ea8 <rclc_executor_spin_some.part.0+0x128>
 8015092:	e71b      	b.n	8014ecc <rclc_executor_spin_some.part.0+0x14c>
 8015094:	6842      	ldr	r2, [r0, #4]
 8015096:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8015098:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 801509c:	f47f af16 	bne.w	8014ecc <rclc_executor_spin_some.part.0+0x14c>
 80150a0:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 80150a4:	2900      	cmp	r1, #0
 80150a6:	f47f af11 	bne.w	8014ecc <rclc_executor_spin_some.part.0+0x14c>
 80150aa:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 80150ae:	2a00      	cmp	r2, #0
 80150b0:	f43f aefa 	beq.w	8014ea8 <rclc_executor_spin_some.part.0+0x128>
 80150b4:	e70a      	b.n	8014ecc <rclc_executor_spin_some.part.0+0x14c>
 80150b6:	686a      	ldr	r2, [r5, #4]
 80150b8:	461c      	mov	r4, r3
 80150ba:	e782      	b.n	8014fc2 <rclc_executor_spin_some.part.0+0x242>
 80150bc:	686a      	ldr	r2, [r5, #4]
 80150be:	461c      	mov	r4, r3
 80150c0:	e6be      	b.n	8014e40 <rclc_executor_spin_some.part.0+0xc0>
 80150c2:	bf00      	nop

080150c4 <rclc_executor_spin_some>:
 80150c4:	b190      	cbz	r0, 80150ec <rclc_executor_spin_some+0x28>
 80150c6:	b570      	push	{r4, r5, r6, lr}
 80150c8:	4604      	mov	r4, r0
 80150ca:	6800      	ldr	r0, [r0, #0]
 80150cc:	4616      	mov	r6, r2
 80150ce:	461d      	mov	r5, r3
 80150d0:	f006 fb96 	bl	801b800 <rcl_context_is_valid>
 80150d4:	b130      	cbz	r0, 80150e4 <rclc_executor_spin_some+0x20>
 80150d6:	4632      	mov	r2, r6
 80150d8:	462b      	mov	r3, r5
 80150da:	4620      	mov	r0, r4
 80150dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150e0:	f7ff be4e 	b.w	8014d80 <rclc_executor_spin_some.part.0>
 80150e4:	f000 f9c8 	bl	8015478 <rcutils_reset_error>
 80150e8:	2001      	movs	r0, #1
 80150ea:	bd70      	pop	{r4, r5, r6, pc}
 80150ec:	200b      	movs	r0, #11
 80150ee:	4770      	bx	lr

080150f0 <rclc_executor_handle_counters_zero_init>:
 80150f0:	b130      	cbz	r0, 8015100 <rclc_executor_handle_counters_zero_init+0x10>
 80150f2:	2220      	movs	r2, #32
 80150f4:	2100      	movs	r1, #0
 80150f6:	b508      	push	{r3, lr}
 80150f8:	f00c f814 	bl	8021124 <memset>
 80150fc:	2000      	movs	r0, #0
 80150fe:	bd08      	pop	{r3, pc}
 8015100:	200b      	movs	r0, #11
 8015102:	4770      	bx	lr
 8015104:	0000      	movs	r0, r0
	...

08015108 <rclc_executor_handle_init>:
 8015108:	4603      	mov	r3, r0
 801510a:	b178      	cbz	r0, 801512c <rclc_executor_handle_init+0x24>
 801510c:	2200      	movs	r2, #0
 801510e:	f04f 0c0b 	mov.w	ip, #11
 8015112:	6341      	str	r1, [r0, #52]	; 0x34
 8015114:	4610      	mov	r0, r2
 8015116:	f8a3 c000 	strh.w	ip, [r3]
 801511a:	631a      	str	r2, [r3, #48]	; 0x30
 801511c:	871a      	strh	r2, [r3, #56]	; 0x38
 801511e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 8015130 <rclc_executor_handle_init+0x28>
 8015122:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8015126:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 801512a:	4770      	bx	lr
 801512c:	200b      	movs	r0, #11
 801512e:	4770      	bx	lr
	...

08015138 <rclc_support_init_with_options>:
 8015138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801513c:	b083      	sub	sp, #12
 801513e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015140:	2b00      	cmp	r3, #0
 8015142:	bf18      	it	ne
 8015144:	2f00      	cmpne	r7, #0
 8015146:	d027      	beq.n	8015198 <rclc_support_init_with_options+0x60>
 8015148:	4604      	mov	r4, r0
 801514a:	b328      	cbz	r0, 8015198 <rclc_support_init_with_options+0x60>
 801514c:	46e9      	mov	r9, sp
 801514e:	461d      	mov	r5, r3
 8015150:	460e      	mov	r6, r1
 8015152:	4690      	mov	r8, r2
 8015154:	4648      	mov	r0, r9
 8015156:	f006 fb49 	bl	801b7ec <rcl_get_zero_initialized_context>
 801515a:	462a      	mov	r2, r5
 801515c:	4623      	mov	r3, r4
 801515e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015162:	e884 0003 	stmia.w	r4, {r0, r1}
 8015166:	4641      	mov	r1, r8
 8015168:	4630      	mov	r0, r6
 801516a:	f006 fc5d 	bl	801ba28 <rcl_init>
 801516e:	4605      	mov	r5, r0
 8015170:	b960      	cbnz	r0, 801518c <rclc_support_init_with_options+0x54>
 8015172:	463a      	mov	r2, r7
 8015174:	f104 010c 	add.w	r1, r4, #12
 8015178:	2003      	movs	r0, #3
 801517a:	60a7      	str	r7, [r4, #8]
 801517c:	f006 ff6a 	bl	801c054 <rcl_clock_init>
 8015180:	4605      	mov	r5, r0
 8015182:	b918      	cbnz	r0, 801518c <rclc_support_init_with_options+0x54>
 8015184:	4628      	mov	r0, r5
 8015186:	b003      	add	sp, #12
 8015188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801518c:	f000 f974 	bl	8015478 <rcutils_reset_error>
 8015190:	4628      	mov	r0, r5
 8015192:	b003      	add	sp, #12
 8015194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015198:	250b      	movs	r5, #11
 801519a:	4628      	mov	r0, r5
 801519c:	b003      	add	sp, #12
 801519e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151a2:	bf00      	nop

080151a4 <rclc_node_init_with_options>:
 80151a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151a8:	b087      	sub	sp, #28
 80151aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80151ac:	2e00      	cmp	r6, #0
 80151ae:	bf18      	it	ne
 80151b0:	2b00      	cmpne	r3, #0
 80151b2:	bf0c      	ite	eq
 80151b4:	f04f 0c01 	moveq.w	ip, #1
 80151b8:	f04f 0c00 	movne.w	ip, #0
 80151bc:	2a00      	cmp	r2, #0
 80151be:	bf08      	it	eq
 80151c0:	f04c 0c01 	orreq.w	ip, ip, #1
 80151c4:	2900      	cmp	r1, #0
 80151c6:	bf08      	it	eq
 80151c8:	f04c 0c01 	orreq.w	ip, ip, #1
 80151cc:	f1bc 0f00 	cmp.w	ip, #0
 80151d0:	d118      	bne.n	8015204 <rclc_node_init_with_options+0x60>
 80151d2:	4604      	mov	r4, r0
 80151d4:	b1b0      	cbz	r0, 8015204 <rclc_node_init_with_options+0x60>
 80151d6:	f10d 0910 	add.w	r9, sp, #16
 80151da:	460d      	mov	r5, r1
 80151dc:	4698      	mov	r8, r3
 80151de:	4617      	mov	r7, r2
 80151e0:	4648      	mov	r0, r9
 80151e2:	f7fe fc09 	bl	80139f8 <rcl_get_zero_initialized_node>
 80151e6:	9600      	str	r6, [sp, #0]
 80151e8:	4643      	mov	r3, r8
 80151ea:	463a      	mov	r2, r7
 80151ec:	e899 0003 	ldmia.w	r9, {r0, r1}
 80151f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80151f4:	4629      	mov	r1, r5
 80151f6:	4620      	mov	r0, r4
 80151f8:	f7fe fc08 	bl	8013a0c <rcl_node_init>
 80151fc:	b930      	cbnz	r0, 801520c <rclc_node_init_with_options+0x68>
 80151fe:	b007      	add	sp, #28
 8015200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015204:	200b      	movs	r0, #11
 8015206:	b007      	add	sp, #28
 8015208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801520c:	9003      	str	r0, [sp, #12]
 801520e:	f000 f933 	bl	8015478 <rcutils_reset_error>
 8015212:	9803      	ldr	r0, [sp, #12]
 8015214:	b007      	add	sp, #28
 8015216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801521a:	bf00      	nop

0801521c <rclc_publisher_init_default>:
 801521c:	2b00      	cmp	r3, #0
 801521e:	bf18      	it	ne
 8015220:	2a00      	cmpne	r2, #0
 8015222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015226:	4616      	mov	r6, r2
 8015228:	bf0c      	ite	eq
 801522a:	2201      	moveq	r2, #1
 801522c:	2200      	movne	r2, #0
 801522e:	b0a0      	sub	sp, #128	; 0x80
 8015230:	2900      	cmp	r1, #0
 8015232:	bf08      	it	eq
 8015234:	f042 0201 	orreq.w	r2, r2, #1
 8015238:	bb1a      	cbnz	r2, 8015282 <rclc_publisher_init_default+0x66>
 801523a:	4604      	mov	r4, r0
 801523c:	b308      	cbz	r0, 8015282 <rclc_publisher_init_default+0x66>
 801523e:	f10d 0810 	add.w	r8, sp, #16
 8015242:	461f      	mov	r7, r3
 8015244:	460d      	mov	r5, r1
 8015246:	f7fe fd81 	bl	8013d4c <rcl_get_zero_initialized_publisher>
 801524a:	6020      	str	r0, [r4, #0]
 801524c:	4640      	mov	r0, r8
 801524e:	f7fe fe1d 	bl	8013e8c <rcl_publisher_get_default_options>
 8015252:	2250      	movs	r2, #80	; 0x50
 8015254:	490d      	ldr	r1, [pc, #52]	; (801528c <rclc_publisher_init_default+0x70>)
 8015256:	4640      	mov	r0, r8
 8015258:	f00c f831 	bl	80212be <memcpy>
 801525c:	463b      	mov	r3, r7
 801525e:	4632      	mov	r2, r6
 8015260:	4629      	mov	r1, r5
 8015262:	4620      	mov	r0, r4
 8015264:	f8cd 8000 	str.w	r8, [sp]
 8015268:	f7fe fd76 	bl	8013d58 <rcl_publisher_init>
 801526c:	b910      	cbnz	r0, 8015274 <rclc_publisher_init_default+0x58>
 801526e:	b020      	add	sp, #128	; 0x80
 8015270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015274:	9003      	str	r0, [sp, #12]
 8015276:	f000 f8ff 	bl	8015478 <rcutils_reset_error>
 801527a:	9803      	ldr	r0, [sp, #12]
 801527c:	b020      	add	sp, #128	; 0x80
 801527e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015282:	200b      	movs	r0, #11
 8015284:	b020      	add	sp, #128	; 0x80
 8015286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801528a:	bf00      	nop
 801528c:	08025330 	.word	0x08025330

08015290 <rclc_service_init_default>:
 8015290:	2b00      	cmp	r3, #0
 8015292:	bf18      	it	ne
 8015294:	2a00      	cmpne	r2, #0
 8015296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801529a:	4616      	mov	r6, r2
 801529c:	bf0c      	ite	eq
 801529e:	2201      	moveq	r2, #1
 80152a0:	2200      	movne	r2, #0
 80152a2:	b09e      	sub	sp, #120	; 0x78
 80152a4:	2900      	cmp	r1, #0
 80152a6:	bf08      	it	eq
 80152a8:	f042 0201 	orreq.w	r2, r2, #1
 80152ac:	bb1a      	cbnz	r2, 80152f6 <rclc_service_init_default+0x66>
 80152ae:	4604      	mov	r4, r0
 80152b0:	b308      	cbz	r0, 80152f6 <rclc_service_init_default+0x66>
 80152b2:	f10d 0810 	add.w	r8, sp, #16
 80152b6:	461f      	mov	r7, r3
 80152b8:	460d      	mov	r5, r1
 80152ba:	f7fe fe5b 	bl	8013f74 <rcl_get_zero_initialized_service>
 80152be:	6020      	str	r0, [r4, #0]
 80152c0:	4640      	mov	r0, r8
 80152c2:	f7fe feef 	bl	80140a4 <rcl_service_get_default_options>
 80152c6:	2250      	movs	r2, #80	; 0x50
 80152c8:	490d      	ldr	r1, [pc, #52]	; (8015300 <rclc_service_init_default+0x70>)
 80152ca:	4640      	mov	r0, r8
 80152cc:	f00b fff7 	bl	80212be <memcpy>
 80152d0:	463b      	mov	r3, r7
 80152d2:	4632      	mov	r2, r6
 80152d4:	4629      	mov	r1, r5
 80152d6:	4620      	mov	r0, r4
 80152d8:	f8cd 8000 	str.w	r8, [sp]
 80152dc:	f7fe fe50 	bl	8013f80 <rcl_service_init>
 80152e0:	b910      	cbnz	r0, 80152e8 <rclc_service_init_default+0x58>
 80152e2:	b01e      	add	sp, #120	; 0x78
 80152e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152e8:	9003      	str	r0, [sp, #12]
 80152ea:	f000 f8c5 	bl	8015478 <rcutils_reset_error>
 80152ee:	9803      	ldr	r0, [sp, #12]
 80152f0:	b01e      	add	sp, #120	; 0x78
 80152f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f6:	200b      	movs	r0, #11
 80152f8:	b01e      	add	sp, #120	; 0x78
 80152fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152fe:	bf00      	nop
 8015300:	08025380 	.word	0x08025380

08015304 <rclc_subscription_init_default>:
 8015304:	2b00      	cmp	r3, #0
 8015306:	bf18      	it	ne
 8015308:	2a00      	cmpne	r2, #0
 801530a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801530e:	4616      	mov	r6, r2
 8015310:	bf0c      	ite	eq
 8015312:	2201      	moveq	r2, #1
 8015314:	2200      	movne	r2, #0
 8015316:	b0a0      	sub	sp, #128	; 0x80
 8015318:	2900      	cmp	r1, #0
 801531a:	bf08      	it	eq
 801531c:	f042 0201 	orreq.w	r2, r2, #1
 8015320:	bb1a      	cbnz	r2, 801536a <rclc_subscription_init_default+0x66>
 8015322:	4604      	mov	r4, r0
 8015324:	b308      	cbz	r0, 801536a <rclc_subscription_init_default+0x66>
 8015326:	f10d 0810 	add.w	r8, sp, #16
 801532a:	461f      	mov	r7, r3
 801532c:	460d      	mov	r5, r1
 801532e:	f7fe ff45 	bl	80141bc <rcl_get_zero_initialized_subscription>
 8015332:	6020      	str	r0, [r4, #0]
 8015334:	4640      	mov	r0, r8
 8015336:	f7fe fff5 	bl	8014324 <rcl_subscription_get_default_options>
 801533a:	2250      	movs	r2, #80	; 0x50
 801533c:	490d      	ldr	r1, [pc, #52]	; (8015374 <rclc_subscription_init_default+0x70>)
 801533e:	4640      	mov	r0, r8
 8015340:	f00b ffbd 	bl	80212be <memcpy>
 8015344:	463b      	mov	r3, r7
 8015346:	4632      	mov	r2, r6
 8015348:	4629      	mov	r1, r5
 801534a:	4620      	mov	r0, r4
 801534c:	f8cd 8000 	str.w	r8, [sp]
 8015350:	f7fe ff3a 	bl	80141c8 <rcl_subscription_init>
 8015354:	b910      	cbnz	r0, 801535c <rclc_subscription_init_default+0x58>
 8015356:	b020      	add	sp, #128	; 0x80
 8015358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801535c:	9003      	str	r0, [sp, #12]
 801535e:	f000 f88b 	bl	8015478 <rcutils_reset_error>
 8015362:	9803      	ldr	r0, [sp, #12]
 8015364:	b020      	add	sp, #128	; 0x80
 8015366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801536a:	200b      	movs	r0, #11
 801536c:	b020      	add	sp, #128	; 0x80
 801536e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015372:	bf00      	nop
 8015374:	080253d0 	.word	0x080253d0

08015378 <__default_zero_allocate>:
 8015378:	f00a ba78 	b.w	801f86c <calloc>

0801537c <__default_reallocate>:
 801537c:	f00a bc16 	b.w	801fbac <realloc>

08015380 <__default_deallocate>:
 8015380:	f00a baf4 	b.w	801f96c <free>

08015384 <__default_allocate>:
 8015384:	f00a baea 	b.w	801f95c <malloc>

08015388 <rcutils_get_zero_initialized_allocator>:
 8015388:	b510      	push	{r4, lr}
 801538a:	4c05      	ldr	r4, [pc, #20]	; (80153a0 <rcutils_get_zero_initialized_allocator+0x18>)
 801538c:	4686      	mov	lr, r0
 801538e:	4684      	mov	ip, r0
 8015390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015396:	6823      	ldr	r3, [r4, #0]
 8015398:	4670      	mov	r0, lr
 801539a:	f8cc 3000 	str.w	r3, [ip]
 801539e:	bd10      	pop	{r4, pc}
 80153a0:	08025420 	.word	0x08025420

080153a4 <rcutils_set_default_allocator>:
 80153a4:	b1a8      	cbz	r0, 80153d2 <rcutils_set_default_allocator+0x2e>
 80153a6:	6802      	ldr	r2, [r0, #0]
 80153a8:	b1a2      	cbz	r2, 80153d4 <rcutils_set_default_allocator+0x30>
 80153aa:	6841      	ldr	r1, [r0, #4]
 80153ac:	b1a1      	cbz	r1, 80153d8 <rcutils_set_default_allocator+0x34>
 80153ae:	b410      	push	{r4}
 80153b0:	68c4      	ldr	r4, [r0, #12]
 80153b2:	b164      	cbz	r4, 80153ce <rcutils_set_default_allocator+0x2a>
 80153b4:	6880      	ldr	r0, [r0, #8]
 80153b6:	b138      	cbz	r0, 80153c8 <rcutils_set_default_allocator+0x24>
 80153b8:	4b08      	ldr	r3, [pc, #32]	; (80153dc <rcutils_set_default_allocator+0x38>)
 80153ba:	601a      	str	r2, [r3, #0]
 80153bc:	2200      	movs	r2, #0
 80153be:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80153c2:	2001      	movs	r0, #1
 80153c4:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80153c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153cc:	4770      	bx	lr
 80153ce:	4620      	mov	r0, r4
 80153d0:	e7fa      	b.n	80153c8 <rcutils_set_default_allocator+0x24>
 80153d2:	4770      	bx	lr
 80153d4:	4610      	mov	r0, r2
 80153d6:	4770      	bx	lr
 80153d8:	4608      	mov	r0, r1
 80153da:	4770      	bx	lr
 80153dc:	200008a4 	.word	0x200008a4

080153e0 <rcutils_get_default_allocator>:
 80153e0:	b510      	push	{r4, lr}
 80153e2:	4c05      	ldr	r4, [pc, #20]	; (80153f8 <rcutils_get_default_allocator+0x18>)
 80153e4:	4686      	mov	lr, r0
 80153e6:	4684      	mov	ip, r0
 80153e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153ee:	6823      	ldr	r3, [r4, #0]
 80153f0:	4670      	mov	r0, lr
 80153f2:	f8cc 3000 	str.w	r3, [ip]
 80153f6:	bd10      	pop	{r4, pc}
 80153f8:	200008a4 	.word	0x200008a4

080153fc <rcutils_allocator_is_valid>:
 80153fc:	b158      	cbz	r0, 8015416 <rcutils_allocator_is_valid+0x1a>
 80153fe:	6803      	ldr	r3, [r0, #0]
 8015400:	b143      	cbz	r3, 8015414 <rcutils_allocator_is_valid+0x18>
 8015402:	6843      	ldr	r3, [r0, #4]
 8015404:	b133      	cbz	r3, 8015414 <rcutils_allocator_is_valid+0x18>
 8015406:	68c3      	ldr	r3, [r0, #12]
 8015408:	b123      	cbz	r3, 8015414 <rcutils_allocator_is_valid+0x18>
 801540a:	6880      	ldr	r0, [r0, #8]
 801540c:	3800      	subs	r0, #0
 801540e:	bf18      	it	ne
 8015410:	2001      	movne	r0, #1
 8015412:	4770      	bx	lr
 8015414:	4618      	mov	r0, r3
 8015416:	4770      	bx	lr

08015418 <rcutils_get_env>:
 8015418:	b168      	cbz	r0, 8015436 <rcutils_get_env+0x1e>
 801541a:	b510      	push	{r4, lr}
 801541c:	460c      	mov	r4, r1
 801541e:	b129      	cbz	r1, 801542c <rcutils_get_env+0x14>
 8015420:	f00a fa54 	bl	801f8cc <getenv>
 8015424:	b120      	cbz	r0, 8015430 <rcutils_get_env+0x18>
 8015426:	6020      	str	r0, [r4, #0]
 8015428:	2000      	movs	r0, #0
 801542a:	bd10      	pop	{r4, pc}
 801542c:	4803      	ldr	r0, [pc, #12]	; (801543c <rcutils_get_env+0x24>)
 801542e:	bd10      	pop	{r4, pc}
 8015430:	4b03      	ldr	r3, [pc, #12]	; (8015440 <rcutils_get_env+0x28>)
 8015432:	6023      	str	r3, [r4, #0]
 8015434:	bd10      	pop	{r4, pc}
 8015436:	4803      	ldr	r0, [pc, #12]	; (8015444 <rcutils_get_env+0x2c>)
 8015438:	4770      	bx	lr
 801543a:	bf00      	nop
 801543c:	08025450 	.word	0x08025450
 8015440:	08025808 	.word	0x08025808
 8015444:	08025434 	.word	0x08025434

08015448 <rcutils_get_error_string>:
 8015448:	4b06      	ldr	r3, [pc, #24]	; (8015464 <rcutils_get_error_string+0x1c>)
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	b13b      	cbz	r3, 801545e <rcutils_get_error_string+0x16>
 801544e:	4b06      	ldr	r3, [pc, #24]	; (8015468 <rcutils_get_error_string+0x20>)
 8015450:	781a      	ldrb	r2, [r3, #0]
 8015452:	b90a      	cbnz	r2, 8015458 <rcutils_get_error_string+0x10>
 8015454:	2201      	movs	r2, #1
 8015456:	701a      	strb	r2, [r3, #0]
 8015458:	4b04      	ldr	r3, [pc, #16]	; (801546c <rcutils_get_error_string+0x24>)
 801545a:	7818      	ldrb	r0, [r3, #0]
 801545c:	4770      	bx	lr
 801545e:	4b04      	ldr	r3, [pc, #16]	; (8015470 <rcutils_get_error_string+0x28>)
 8015460:	7818      	ldrb	r0, [r3, #0]
 8015462:	4770      	bx	lr
 8015464:	200123a0 	.word	0x200123a0
 8015468:	200123b9 	.word	0x200123b9
 801546c:	200123b8 	.word	0x200123b8
 8015470:	08024ae0 	.word	0x08024ae0
 8015474:	00000000 	.word	0x00000000

08015478 <rcutils_reset_error>:
 8015478:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8015498 <rcutils_reset_error+0x20>
 801547c:	2300      	movs	r3, #0
 801547e:	4a08      	ldr	r2, [pc, #32]	; (80154a0 <rcutils_reset_error+0x28>)
 8015480:	4808      	ldr	r0, [pc, #32]	; (80154a4 <rcutils_reset_error+0x2c>)
 8015482:	8013      	strh	r3, [r2, #0]
 8015484:	4908      	ldr	r1, [pc, #32]	; (80154a8 <rcutils_reset_error+0x30>)
 8015486:	7003      	strb	r3, [r0, #0]
 8015488:	700b      	strb	r3, [r1, #0]
 801548a:	ed82 7b02 	vstr	d7, [r2, #8]
 801548e:	4a07      	ldr	r2, [pc, #28]	; (80154ac <rcutils_reset_error+0x34>)
 8015490:	7013      	strb	r3, [r2, #0]
 8015492:	4770      	bx	lr
 8015494:	f3af 8000 	nop.w
	...
 80154a0:	200123a8 	.word	0x200123a8
 80154a4:	200123b9 	.word	0x200123b9
 80154a8:	200123b8 	.word	0x200123b8
 80154ac:	200123a0 	.word	0x200123a0

080154b0 <rcutils_format_string_limit>:
 80154b0:	b40f      	push	{r0, r1, r2, r3}
 80154b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154b4:	b083      	sub	sp, #12
 80154b6:	ac08      	add	r4, sp, #32
 80154b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80154ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80154be:	b326      	cbz	r6, 801550a <rcutils_format_string_limit+0x5a>
 80154c0:	a808      	add	r0, sp, #32
 80154c2:	f7ff ff9b 	bl	80153fc <rcutils_allocator_is_valid>
 80154c6:	b300      	cbz	r0, 801550a <rcutils_format_string_limit+0x5a>
 80154c8:	2100      	movs	r1, #0
 80154ca:	ab0f      	add	r3, sp, #60	; 0x3c
 80154cc:	4632      	mov	r2, r6
 80154ce:	4608      	mov	r0, r1
 80154d0:	e9cd 3300 	strd	r3, r3, [sp]
 80154d4:	f000 f906 	bl	80156e4 <rcutils_vsnprintf>
 80154d8:	1c43      	adds	r3, r0, #1
 80154da:	4605      	mov	r5, r0
 80154dc:	d015      	beq.n	801550a <rcutils_format_string_limit+0x5a>
 80154de:	1c47      	adds	r7, r0, #1
 80154e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154e2:	429f      	cmp	r7, r3
 80154e4:	d901      	bls.n	80154ea <rcutils_format_string_limit+0x3a>
 80154e6:	1e5d      	subs	r5, r3, #1
 80154e8:	461f      	mov	r7, r3
 80154ea:	9b08      	ldr	r3, [sp, #32]
 80154ec:	4638      	mov	r0, r7
 80154ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80154f0:	4798      	blx	r3
 80154f2:	4604      	mov	r4, r0
 80154f4:	b148      	cbz	r0, 801550a <rcutils_format_string_limit+0x5a>
 80154f6:	4632      	mov	r2, r6
 80154f8:	4639      	mov	r1, r7
 80154fa:	9b01      	ldr	r3, [sp, #4]
 80154fc:	f000 f8f2 	bl	80156e4 <rcutils_vsnprintf>
 8015500:	2800      	cmp	r0, #0
 8015502:	db09      	blt.n	8015518 <rcutils_format_string_limit+0x68>
 8015504:	2300      	movs	r3, #0
 8015506:	5563      	strb	r3, [r4, r5]
 8015508:	e000      	b.n	801550c <rcutils_format_string_limit+0x5c>
 801550a:	2400      	movs	r4, #0
 801550c:	4620      	mov	r0, r4
 801550e:	b003      	add	sp, #12
 8015510:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015514:	b004      	add	sp, #16
 8015516:	4770      	bx	lr
 8015518:	4620      	mov	r0, r4
 801551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801551c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801551e:	2400      	movs	r4, #0
 8015520:	4798      	blx	r3
 8015522:	e7f3      	b.n	801550c <rcutils_format_string_limit+0x5c>

08015524 <rcutils_repl_str>:
 8015524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015528:	ed2d 8b02 	vpush	{d8}
 801552c:	b087      	sub	sp, #28
 801552e:	2600      	movs	r6, #0
 8015530:	4680      	mov	r8, r0
 8015532:	468a      	mov	sl, r1
 8015534:	9000      	str	r0, [sp, #0]
 8015536:	4608      	mov	r0, r1
 8015538:	ee08 2a10 	vmov	s16, r2
 801553c:	4699      	mov	r9, r3
 801553e:	2510      	movs	r5, #16
 8015540:	f7ea fede 	bl	8000300 <strlen>
 8015544:	4637      	mov	r7, r6
 8015546:	46b3      	mov	fp, r6
 8015548:	9001      	str	r0, [sp, #4]
 801554a:	e01e      	b.n	801558a <rcutils_repl_str+0x66>
 801554c:	f10b 0b01 	add.w	fp, fp, #1
 8015550:	9b01      	ldr	r3, [sp, #4]
 8015552:	455e      	cmp	r6, fp
 8015554:	eb04 0803 	add.w	r8, r4, r3
 8015558:	d211      	bcs.n	801557e <rcutils_repl_str+0x5a>
 801555a:	442e      	add	r6, r5
 801555c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015560:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015568:	00b1      	lsls	r1, r6, #2
 801556a:	4798      	blx	r3
 801556c:	2800      	cmp	r0, #0
 801556e:	f000 8088 	beq.w	8015682 <rcutils_repl_str+0x15e>
 8015572:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8015576:	4607      	mov	r7, r0
 8015578:	bf28      	it	cs
 801557a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801557e:	9a00      	ldr	r2, [sp, #0]
 8015580:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8015584:	1aa4      	subs	r4, r4, r2
 8015586:	f843 4c04 	str.w	r4, [r3, #-4]
 801558a:	4651      	mov	r1, sl
 801558c:	4640      	mov	r0, r8
 801558e:	f00b fdf0 	bl	8021172 <strstr>
 8015592:	4604      	mov	r4, r0
 8015594:	4638      	mov	r0, r7
 8015596:	2c00      	cmp	r4, #0
 8015598:	d1d8      	bne.n	801554c <rcutils_repl_str+0x28>
 801559a:	4640      	mov	r0, r8
 801559c:	f7ea feb0 	bl	8000300 <strlen>
 80155a0:	9b00      	ldr	r3, [sp, #0]
 80155a2:	eba8 0803 	sub.w	r8, r8, r3
 80155a6:	eb08 0400 	add.w	r4, r8, r0
 80155aa:	9402      	str	r4, [sp, #8]
 80155ac:	f1bb 0f00 	cmp.w	fp, #0
 80155b0:	d045      	beq.n	801563e <rcutils_repl_str+0x11a>
 80155b2:	ee18 0a10 	vmov	r0, s16
 80155b6:	f7ea fea3 	bl	8000300 <strlen>
 80155ba:	9a01      	ldr	r2, [sp, #4]
 80155bc:	4606      	mov	r6, r0
 80155be:	f8d9 3000 	ldr.w	r3, [r9]
 80155c2:	1a82      	subs	r2, r0, r2
 80155c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80155c8:	fb0b 4202 	mla	r2, fp, r2, r4
 80155cc:	1c50      	adds	r0, r2, #1
 80155ce:	9205      	str	r2, [sp, #20]
 80155d0:	4798      	blx	r3
 80155d2:	4682      	mov	sl, r0
 80155d4:	2800      	cmp	r0, #0
 80155d6:	d054      	beq.n	8015682 <rcutils_repl_str+0x15e>
 80155d8:	683a      	ldr	r2, [r7, #0]
 80155da:	463d      	mov	r5, r7
 80155dc:	9900      	ldr	r1, [sp, #0]
 80155de:	2401      	movs	r4, #1
 80155e0:	f00b fe6d 	bl	80212be <memcpy>
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 80155ea:	eb0a 0803 	add.w	r8, sl, r3
 80155ee:	ee18 7a10 	vmov	r7, s16
 80155f2:	f8dd a000 	ldr.w	sl, [sp]
 80155f6:	f8cd 9000 	str.w	r9, [sp]
 80155fa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80155fe:	4632      	mov	r2, r6
 8015600:	4639      	mov	r1, r7
 8015602:	4640      	mov	r0, r8
 8015604:	44b0      	add	r8, r6
 8015606:	f00b fe5a 	bl	80212be <memcpy>
 801560a:	f855 2b04 	ldr.w	r2, [r5], #4
 801560e:	45a3      	cmp	fp, r4
 8015610:	444a      	add	r2, r9
 8015612:	eb0a 0102 	add.w	r1, sl, r2
 8015616:	d02a      	beq.n	801566e <rcutils_repl_str+0x14a>
 8015618:	6828      	ldr	r0, [r5, #0]
 801561a:	1a82      	subs	r2, r0, r2
 801561c:	4640      	mov	r0, r8
 801561e:	4490      	add	r8, r2
 8015620:	f00b fe4d 	bl	80212be <memcpy>
 8015624:	1c62      	adds	r2, r4, #1
 8015626:	45a3      	cmp	fp, r4
 8015628:	4614      	mov	r4, r2
 801562a:	d8e8      	bhi.n	80155fe <rcutils_repl_str+0xda>
 801562c:	f8dd 9000 	ldr.w	r9, [sp]
 8015630:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8015634:	2300      	movs	r3, #0
 8015636:	9a05      	ldr	r2, [sp, #20]
 8015638:	f80a 3002 	strb.w	r3, [sl, r2]
 801563c:	e00b      	b.n	8015656 <rcutils_repl_str+0x132>
 801563e:	4620      	mov	r0, r4
 8015640:	f8d9 3000 	ldr.w	r3, [r9]
 8015644:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015648:	3001      	adds	r0, #1
 801564a:	4798      	blx	r3
 801564c:	4682      	mov	sl, r0
 801564e:	b110      	cbz	r0, 8015656 <rcutils_repl_str+0x132>
 8015650:	9900      	ldr	r1, [sp, #0]
 8015652:	f00b fe2c 	bl	80212ae <strcpy>
 8015656:	4638      	mov	r0, r7
 8015658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801565c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015660:	4798      	blx	r3
 8015662:	4650      	mov	r0, sl
 8015664:	b007      	add	sp, #28
 8015666:	ecbd 8b02 	vpop	{d8}
 801566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801566e:	9b02      	ldr	r3, [sp, #8]
 8015670:	4640      	mov	r0, r8
 8015672:	f8dd 9000 	ldr.w	r9, [sp]
 8015676:	1a9a      	subs	r2, r3, r2
 8015678:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801567c:	f00b fe1f 	bl	80212be <memcpy>
 8015680:	e7d8      	b.n	8015634 <rcutils_repl_str+0x110>
 8015682:	f04f 0a00 	mov.w	sl, #0
 8015686:	e7e6      	b.n	8015656 <rcutils_repl_str+0x132>

08015688 <rcutils_snprintf>:
 8015688:	b40c      	push	{r2, r3}
 801568a:	b530      	push	{r4, r5, lr}
 801568c:	b083      	sub	sp, #12
 801568e:	ab06      	add	r3, sp, #24
 8015690:	f853 2b04 	ldr.w	r2, [r3], #4
 8015694:	9301      	str	r3, [sp, #4]
 8015696:	b1e2      	cbz	r2, 80156d2 <rcutils_snprintf+0x4a>
 8015698:	fab0 f480 	clz	r4, r0
 801569c:	fab1 f581 	clz	r5, r1
 80156a0:	ea50 0c01 	orrs.w	ip, r0, r1
 80156a4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80156a8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80156ac:	d008      	beq.n	80156c0 <rcutils_snprintf+0x38>
 80156ae:	b984      	cbnz	r4, 80156d2 <rcutils_snprintf+0x4a>
 80156b0:	b97d      	cbnz	r5, 80156d2 <rcutils_snprintf+0x4a>
 80156b2:	f00b fc69 	bl	8020f88 <vsniprintf>
 80156b6:	b003      	add	sp, #12
 80156b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156bc:	b002      	add	sp, #8
 80156be:	4770      	bx	lr
 80156c0:	4661      	mov	r1, ip
 80156c2:	4660      	mov	r0, ip
 80156c4:	f00b fc60 	bl	8020f88 <vsniprintf>
 80156c8:	b003      	add	sp, #12
 80156ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156ce:	b002      	add	sp, #8
 80156d0:	4770      	bx	lr
 80156d2:	f00b fdbf 	bl	8021254 <__errno>
 80156d6:	2216      	movs	r2, #22
 80156d8:	4603      	mov	r3, r0
 80156da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80156de:	601a      	str	r2, [r3, #0]
 80156e0:	e7e9      	b.n	80156b6 <rcutils_snprintf+0x2e>
 80156e2:	bf00      	nop

080156e4 <rcutils_vsnprintf>:
 80156e4:	b570      	push	{r4, r5, r6, lr}
 80156e6:	b1b2      	cbz	r2, 8015716 <rcutils_vsnprintf+0x32>
 80156e8:	fab0 f480 	clz	r4, r0
 80156ec:	fab1 f581 	clz	r5, r1
 80156f0:	ea50 0c01 	orrs.w	ip, r0, r1
 80156f4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80156f8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80156fc:	d005      	beq.n	801570a <rcutils_vsnprintf+0x26>
 80156fe:	b954      	cbnz	r4, 8015716 <rcutils_vsnprintf+0x32>
 8015700:	b94d      	cbnz	r5, 8015716 <rcutils_vsnprintf+0x32>
 8015702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015706:	f00b bc3f 	b.w	8020f88 <vsniprintf>
 801570a:	4661      	mov	r1, ip
 801570c:	4660      	mov	r0, ip
 801570e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015712:	f00b bc39 	b.w	8020f88 <vsniprintf>
 8015716:	f00b fd9d 	bl	8021254 <__errno>
 801571a:	2316      	movs	r3, #22
 801571c:	6003      	str	r3, [r0, #0]
 801571e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015722:	bd70      	pop	{r4, r5, r6, pc}

08015724 <rcutils_strdup>:
 8015724:	b084      	sub	sp, #16
 8015726:	b570      	push	{r4, r5, r6, lr}
 8015728:	b082      	sub	sp, #8
 801572a:	4605      	mov	r5, r0
 801572c:	ac07      	add	r4, sp, #28
 801572e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015732:	b1b0      	cbz	r0, 8015762 <rcutils_strdup+0x3e>
 8015734:	f7ea fde4 	bl	8000300 <strlen>
 8015738:	1c42      	adds	r2, r0, #1
 801573a:	9b07      	ldr	r3, [sp, #28]
 801573c:	4606      	mov	r6, r0
 801573e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015740:	4610      	mov	r0, r2
 8015742:	9201      	str	r2, [sp, #4]
 8015744:	4798      	blx	r3
 8015746:	4604      	mov	r4, r0
 8015748:	b128      	cbz	r0, 8015756 <rcutils_strdup+0x32>
 801574a:	9a01      	ldr	r2, [sp, #4]
 801574c:	4629      	mov	r1, r5
 801574e:	f00b fdb6 	bl	80212be <memcpy>
 8015752:	2300      	movs	r3, #0
 8015754:	55a3      	strb	r3, [r4, r6]
 8015756:	4620      	mov	r0, r4
 8015758:	b002      	add	sp, #8
 801575a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801575e:	b004      	add	sp, #16
 8015760:	4770      	bx	lr
 8015762:	4604      	mov	r4, r0
 8015764:	e7f7      	b.n	8015756 <rcutils_strdup+0x32>
 8015766:	bf00      	nop

08015768 <rcutils_strndup>:
 8015768:	b082      	sub	sp, #8
 801576a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801576c:	ac06      	add	r4, sp, #24
 801576e:	4605      	mov	r5, r0
 8015770:	e884 000c 	stmia.w	r4, {r2, r3}
 8015774:	b188      	cbz	r0, 801579a <rcutils_strndup+0x32>
 8015776:	1c4f      	adds	r7, r1, #1
 8015778:	460e      	mov	r6, r1
 801577a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801577c:	4638      	mov	r0, r7
 801577e:	4790      	blx	r2
 8015780:	4604      	mov	r4, r0
 8015782:	b128      	cbz	r0, 8015790 <rcutils_strndup+0x28>
 8015784:	463a      	mov	r2, r7
 8015786:	4629      	mov	r1, r5
 8015788:	f00b fd99 	bl	80212be <memcpy>
 801578c:	2300      	movs	r3, #0
 801578e:	55a3      	strb	r3, [r4, r6]
 8015790:	4620      	mov	r0, r4
 8015792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015796:	b002      	add	sp, #8
 8015798:	4770      	bx	lr
 801579a:	4604      	mov	r4, r0
 801579c:	e7f8      	b.n	8015790 <rcutils_strndup+0x28>
 801579e:	bf00      	nop

080157a0 <rcutils_system_time_now>:
 80157a0:	b300      	cbz	r0, 80157e4 <rcutils_system_time_now+0x44>
 80157a2:	b570      	push	{r4, r5, r6, lr}
 80157a4:	b084      	sub	sp, #16
 80157a6:	4604      	mov	r4, r0
 80157a8:	2001      	movs	r0, #1
 80157aa:	4669      	mov	r1, sp
 80157ac:	f7ed fea4 	bl	80034f8 <clock_gettime>
 80157b0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80157b4:	2900      	cmp	r1, #0
 80157b6:	db12      	blt.n	80157de <rcutils_system_time_now+0x3e>
 80157b8:	ea53 0201 	orrs.w	r2, r3, r1
 80157bc:	9d02      	ldr	r5, [sp, #8]
 80157be:	d101      	bne.n	80157c4 <rcutils_system_time_now+0x24>
 80157c0:	2d00      	cmp	r5, #0
 80157c2:	db0c      	blt.n	80157de <rcutils_system_time_now+0x3e>
 80157c4:	4e08      	ldr	r6, [pc, #32]	; (80157e8 <rcutils_system_time_now+0x48>)
 80157c6:	2000      	movs	r0, #0
 80157c8:	fba3 3206 	umull	r3, r2, r3, r6
 80157cc:	195b      	adds	r3, r3, r5
 80157ce:	fb06 2201 	mla	r2, r6, r1, r2
 80157d2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80157d6:	e9c4 3200 	strd	r3, r2, [r4]
 80157da:	b004      	add	sp, #16
 80157dc:	bd70      	pop	{r4, r5, r6, pc}
 80157de:	2002      	movs	r0, #2
 80157e0:	b004      	add	sp, #16
 80157e2:	bd70      	pop	{r4, r5, r6, pc}
 80157e4:	200b      	movs	r0, #11
 80157e6:	4770      	bx	lr
 80157e8:	3b9aca00 	.word	0x3b9aca00

080157ec <rcutils_steady_time_now>:
 80157ec:	b300      	cbz	r0, 8015830 <rcutils_steady_time_now+0x44>
 80157ee:	b570      	push	{r4, r5, r6, lr}
 80157f0:	b084      	sub	sp, #16
 80157f2:	4604      	mov	r4, r0
 80157f4:	2000      	movs	r0, #0
 80157f6:	4669      	mov	r1, sp
 80157f8:	f7ed fe7e 	bl	80034f8 <clock_gettime>
 80157fc:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015800:	2900      	cmp	r1, #0
 8015802:	db12      	blt.n	801582a <rcutils_steady_time_now+0x3e>
 8015804:	ea53 0201 	orrs.w	r2, r3, r1
 8015808:	9d02      	ldr	r5, [sp, #8]
 801580a:	d101      	bne.n	8015810 <rcutils_steady_time_now+0x24>
 801580c:	2d00      	cmp	r5, #0
 801580e:	db0c      	blt.n	801582a <rcutils_steady_time_now+0x3e>
 8015810:	4e08      	ldr	r6, [pc, #32]	; (8015834 <rcutils_steady_time_now+0x48>)
 8015812:	2000      	movs	r0, #0
 8015814:	fba3 3206 	umull	r3, r2, r3, r6
 8015818:	195b      	adds	r3, r3, r5
 801581a:	fb06 2201 	mla	r2, r6, r1, r2
 801581e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8015822:	e9c4 3200 	strd	r3, r2, [r4]
 8015826:	b004      	add	sp, #16
 8015828:	bd70      	pop	{r4, r5, r6, pc}
 801582a:	2002      	movs	r0, #2
 801582c:	b004      	add	sp, #16
 801582e:	bd70      	pop	{r4, r5, r6, pc}
 8015830:	200b      	movs	r0, #11
 8015832:	4770      	bx	lr
 8015834:	3b9aca00 	.word	0x3b9aca00

08015838 <rmw_get_zero_initialized_init_options>:
 8015838:	b510      	push	{r4, lr}
 801583a:	4604      	mov	r4, r0
 801583c:	2238      	movs	r2, #56	; 0x38
 801583e:	2100      	movs	r1, #0
 8015840:	f00b fc70 	bl	8021124 <memset>
 8015844:	f104 0010 	add.w	r0, r4, #16
 8015848:	f000 f80a 	bl	8015860 <rmw_get_default_security_options>
 801584c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015850:	4620      	mov	r0, r4
 8015852:	60e3      	str	r3, [r4, #12]
 8015854:	bd10      	pop	{r4, pc}
 8015856:	bf00      	nop

08015858 <rmw_get_default_publisher_options>:
 8015858:	2200      	movs	r2, #0
 801585a:	6002      	str	r2, [r0, #0]
 801585c:	7102      	strb	r2, [r0, #4]
 801585e:	4770      	bx	lr

08015860 <rmw_get_default_security_options>:
 8015860:	2200      	movs	r2, #0
 8015862:	7002      	strb	r2, [r0, #0]
 8015864:	6042      	str	r2, [r0, #4]
 8015866:	4770      	bx	lr

08015868 <rmw_subscription_content_filter_options_fini>:
 8015868:	b1b0      	cbz	r0, 8015898 <rmw_subscription_content_filter_options_fini+0x30>
 801586a:	b538      	push	{r3, r4, r5, lr}
 801586c:	4604      	mov	r4, r0
 801586e:	4608      	mov	r0, r1
 8015870:	460d      	mov	r5, r1
 8015872:	f7ff fdc3 	bl	80153fc <rcutils_allocator_is_valid>
 8015876:	b168      	cbz	r0, 8015894 <rmw_subscription_content_filter_options_fini+0x2c>
 8015878:	6820      	ldr	r0, [r4, #0]
 801587a:	b120      	cbz	r0, 8015886 <rmw_subscription_content_filter_options_fini+0x1e>
 801587c:	686b      	ldr	r3, [r5, #4]
 801587e:	6929      	ldr	r1, [r5, #16]
 8015880:	4798      	blx	r3
 8015882:	2300      	movs	r3, #0
 8015884:	6023      	str	r3, [r4, #0]
 8015886:	1d20      	adds	r0, r4, #4
 8015888:	f008 fa06 	bl	801dc98 <rcutils_string_array_fini>
 801588c:	3800      	subs	r0, #0
 801588e:	bf18      	it	ne
 8015890:	2001      	movne	r0, #1
 8015892:	bd38      	pop	{r3, r4, r5, pc}
 8015894:	200b      	movs	r0, #11
 8015896:	bd38      	pop	{r3, r4, r5, pc}
 8015898:	200b      	movs	r0, #11
 801589a:	4770      	bx	lr

0801589c <rmw_get_default_subscription_options>:
 801589c:	2200      	movs	r2, #0
 801589e:	e9c0 2200 	strd	r2, r2, [r0]
 80158a2:	6082      	str	r2, [r0, #8]
 80158a4:	4770      	bx	lr
 80158a6:	bf00      	nop

080158a8 <rmw_get_zero_initialized_message_info>:
 80158a8:	b510      	push	{r4, lr}
 80158aa:	4604      	mov	r4, r0
 80158ac:	2240      	movs	r2, #64	; 0x40
 80158ae:	2100      	movs	r1, #0
 80158b0:	f00b fc38 	bl	8021124 <memset>
 80158b4:	4620      	mov	r0, r4
 80158b6:	bd10      	pop	{r4, pc}

080158b8 <rmw_validate_namespace_with_size>:
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d043      	beq.n	8015944 <rmw_validate_namespace_with_size+0x8c>
 80158bc:	b570      	push	{r4, r5, r6, lr}
 80158be:	4614      	mov	r4, r2
 80158c0:	b0c2      	sub	sp, #264	; 0x108
 80158c2:	b32a      	cbz	r2, 8015910 <rmw_validate_namespace_with_size+0x58>
 80158c4:	2901      	cmp	r1, #1
 80158c6:	460d      	mov	r5, r1
 80158c8:	461e      	mov	r6, r3
 80158ca:	d102      	bne.n	80158d2 <rmw_validate_namespace_with_size+0x1a>
 80158cc:	7803      	ldrb	r3, [r0, #0]
 80158ce:	2b2f      	cmp	r3, #47	; 0x2f
 80158d0:	d012      	beq.n	80158f8 <rmw_validate_namespace_with_size+0x40>
 80158d2:	aa01      	add	r2, sp, #4
 80158d4:	4669      	mov	r1, sp
 80158d6:	f008 fbd3 	bl	801e080 <rmw_validate_full_topic_name>
 80158da:	b980      	cbnz	r0, 80158fe <rmw_validate_namespace_with_size+0x46>
 80158dc:	9a00      	ldr	r2, [sp, #0]
 80158de:	b14a      	cbz	r2, 80158f4 <rmw_validate_namespace_with_size+0x3c>
 80158e0:	2a07      	cmp	r2, #7
 80158e2:	d007      	beq.n	80158f4 <rmw_validate_namespace_with_size+0x3c>
 80158e4:	1e53      	subs	r3, r2, #1
 80158e6:	2b05      	cmp	r3, #5
 80158e8:	d82e      	bhi.n	8015948 <rmw_validate_namespace_with_size+0x90>
 80158ea:	e8df f003 	tbb	[pc, r3]
 80158ee:	1f1c      	.short	0x1f1c
 80158f0:	14282522 	.word	0x14282522
 80158f4:	2df5      	cmp	r5, #245	; 0xf5
 80158f6:	d804      	bhi.n	8015902 <rmw_validate_namespace_with_size+0x4a>
 80158f8:	2300      	movs	r3, #0
 80158fa:	4618      	mov	r0, r3
 80158fc:	6023      	str	r3, [r4, #0]
 80158fe:	b042      	add	sp, #264	; 0x108
 8015900:	bd70      	pop	{r4, r5, r6, pc}
 8015902:	2307      	movs	r3, #7
 8015904:	6023      	str	r3, [r4, #0]
 8015906:	2e00      	cmp	r6, #0
 8015908:	d0f9      	beq.n	80158fe <rmw_validate_namespace_with_size+0x46>
 801590a:	23f4      	movs	r3, #244	; 0xf4
 801590c:	6033      	str	r3, [r6, #0]
 801590e:	e7f6      	b.n	80158fe <rmw_validate_namespace_with_size+0x46>
 8015910:	200b      	movs	r0, #11
 8015912:	b042      	add	sp, #264	; 0x108
 8015914:	bd70      	pop	{r4, r5, r6, pc}
 8015916:	2306      	movs	r3, #6
 8015918:	6023      	str	r3, [r4, #0]
 801591a:	2e00      	cmp	r6, #0
 801591c:	d0ef      	beq.n	80158fe <rmw_validate_namespace_with_size+0x46>
 801591e:	9b01      	ldr	r3, [sp, #4]
 8015920:	6033      	str	r3, [r6, #0]
 8015922:	b042      	add	sp, #264	; 0x108
 8015924:	bd70      	pop	{r4, r5, r6, pc}
 8015926:	2301      	movs	r3, #1
 8015928:	6023      	str	r3, [r4, #0]
 801592a:	e7f6      	b.n	801591a <rmw_validate_namespace_with_size+0x62>
 801592c:	2302      	movs	r3, #2
 801592e:	6023      	str	r3, [r4, #0]
 8015930:	e7f3      	b.n	801591a <rmw_validate_namespace_with_size+0x62>
 8015932:	2303      	movs	r3, #3
 8015934:	6023      	str	r3, [r4, #0]
 8015936:	e7f0      	b.n	801591a <rmw_validate_namespace_with_size+0x62>
 8015938:	2304      	movs	r3, #4
 801593a:	6023      	str	r3, [r4, #0]
 801593c:	e7ed      	b.n	801591a <rmw_validate_namespace_with_size+0x62>
 801593e:	2305      	movs	r3, #5
 8015940:	6023      	str	r3, [r4, #0]
 8015942:	e7ea      	b.n	801591a <rmw_validate_namespace_with_size+0x62>
 8015944:	200b      	movs	r0, #11
 8015946:	4770      	bx	lr
 8015948:	4613      	mov	r3, r2
 801594a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801594e:	4a03      	ldr	r2, [pc, #12]	; (801595c <rmw_validate_namespace_with_size+0xa4>)
 8015950:	a802      	add	r0, sp, #8
 8015952:	f7ff fe99 	bl	8015688 <rcutils_snprintf>
 8015956:	2001      	movs	r0, #1
 8015958:	e7d1      	b.n	80158fe <rmw_validate_namespace_with_size+0x46>
 801595a:	bf00      	nop
 801595c:	0802546c 	.word	0x0802546c

08015960 <rmw_validate_namespace>:
 8015960:	b168      	cbz	r0, 801597e <rmw_validate_namespace+0x1e>
 8015962:	b570      	push	{r4, r5, r6, lr}
 8015964:	460d      	mov	r5, r1
 8015966:	4616      	mov	r6, r2
 8015968:	4604      	mov	r4, r0
 801596a:	f7ea fcc9 	bl	8000300 <strlen>
 801596e:	4633      	mov	r3, r6
 8015970:	4601      	mov	r1, r0
 8015972:	462a      	mov	r2, r5
 8015974:	4620      	mov	r0, r4
 8015976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801597a:	f7ff bf9d 	b.w	80158b8 <rmw_validate_namespace_with_size>
 801597e:	200b      	movs	r0, #11
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop

08015984 <rmw_namespace_validation_result_string>:
 8015984:	2807      	cmp	r0, #7
 8015986:	d803      	bhi.n	8015990 <rmw_namespace_validation_result_string+0xc>
 8015988:	4b02      	ldr	r3, [pc, #8]	; (8015994 <rmw_namespace_validation_result_string+0x10>)
 801598a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801598e:	4770      	bx	lr
 8015990:	4801      	ldr	r0, [pc, #4]	; (8015998 <rmw_namespace_validation_result_string+0x14>)
 8015992:	4770      	bx	lr
 8015994:	08025664 	.word	0x08025664
 8015998:	080254bc 	.word	0x080254bc

0801599c <rmw_validate_node_name>:
 801599c:	2800      	cmp	r0, #0
 801599e:	d042      	beq.n	8015a26 <rmw_validate_node_name+0x8a>
 80159a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a4:	460d      	mov	r5, r1
 80159a6:	2900      	cmp	r1, #0
 80159a8:	d03f      	beq.n	8015a2a <rmw_validate_node_name+0x8e>
 80159aa:	4604      	mov	r4, r0
 80159ac:	4616      	mov	r6, r2
 80159ae:	f7ea fca7 	bl	8000300 <strlen>
 80159b2:	b310      	cbz	r0, 80159fa <rmw_validate_node_name+0x5e>
 80159b4:	1e63      	subs	r3, r4, #1
 80159b6:	f1c4 0101 	rsb	r1, r4, #1
 80159ba:	eb03 0800 	add.w	r8, r3, r0
 80159be:	18cf      	adds	r7, r1, r3
 80159c0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80159c4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80159c8:	f02e 0c20 	bic.w	ip, lr, #32
 80159cc:	2a09      	cmp	r2, #9
 80159ce:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80159d2:	d905      	bls.n	80159e0 <rmw_validate_node_name+0x44>
 80159d4:	f1bc 0f19 	cmp.w	ip, #25
 80159d8:	d902      	bls.n	80159e0 <rmw_validate_node_name+0x44>
 80159da:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80159de:	d114      	bne.n	8015a0a <rmw_validate_node_name+0x6e>
 80159e0:	4598      	cmp	r8, r3
 80159e2:	d1ec      	bne.n	80159be <rmw_validate_node_name+0x22>
 80159e4:	7822      	ldrb	r2, [r4, #0]
 80159e6:	4b16      	ldr	r3, [pc, #88]	; (8015a40 <rmw_validate_node_name+0xa4>)
 80159e8:	5cd3      	ldrb	r3, [r2, r3]
 80159ea:	f013 0304 	ands.w	r3, r3, #4
 80159ee:	d113      	bne.n	8015a18 <rmw_validate_node_name+0x7c>
 80159f0:	28ff      	cmp	r0, #255	; 0xff
 80159f2:	d81c      	bhi.n	8015a2e <rmw_validate_node_name+0x92>
 80159f4:	4618      	mov	r0, r3
 80159f6:	602b      	str	r3, [r5, #0]
 80159f8:	e00c      	b.n	8015a14 <rmw_validate_node_name+0x78>
 80159fa:	2301      	movs	r3, #1
 80159fc:	602b      	str	r3, [r5, #0]
 80159fe:	b17e      	cbz	r6, 8015a20 <rmw_validate_node_name+0x84>
 8015a00:	2300      	movs	r3, #0
 8015a02:	4618      	mov	r0, r3
 8015a04:	6033      	str	r3, [r6, #0]
 8015a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a0a:	2302      	movs	r3, #2
 8015a0c:	602b      	str	r3, [r5, #0]
 8015a0e:	b13e      	cbz	r6, 8015a20 <rmw_validate_node_name+0x84>
 8015a10:	2000      	movs	r0, #0
 8015a12:	6037      	str	r7, [r6, #0]
 8015a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a18:	2303      	movs	r3, #3
 8015a1a:	602b      	str	r3, [r5, #0]
 8015a1c:	2e00      	cmp	r6, #0
 8015a1e:	d1ef      	bne.n	8015a00 <rmw_validate_node_name+0x64>
 8015a20:	2000      	movs	r0, #0
 8015a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a26:	200b      	movs	r0, #11
 8015a28:	4770      	bx	lr
 8015a2a:	200b      	movs	r0, #11
 8015a2c:	e7f2      	b.n	8015a14 <rmw_validate_node_name+0x78>
 8015a2e:	2204      	movs	r2, #4
 8015a30:	602a      	str	r2, [r5, #0]
 8015a32:	2e00      	cmp	r6, #0
 8015a34:	d0f4      	beq.n	8015a20 <rmw_validate_node_name+0x84>
 8015a36:	22fe      	movs	r2, #254	; 0xfe
 8015a38:	4618      	mov	r0, r3
 8015a3a:	6032      	str	r2, [r6, #0]
 8015a3c:	e7ea      	b.n	8015a14 <rmw_validate_node_name+0x78>
 8015a3e:	bf00      	nop
 8015a40:	08025e9c 	.word	0x08025e9c

08015a44 <rmw_node_name_validation_result_string>:
 8015a44:	2804      	cmp	r0, #4
 8015a46:	d803      	bhi.n	8015a50 <rmw_node_name_validation_result_string+0xc>
 8015a48:	4b02      	ldr	r3, [pc, #8]	; (8015a54 <rmw_node_name_validation_result_string+0x10>)
 8015a4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8015a4e:	4770      	bx	lr
 8015a50:	4801      	ldr	r0, [pc, #4]	; (8015a58 <rmw_node_name_validation_result_string+0x14>)
 8015a52:	4770      	bx	lr
 8015a54:	08025770 	.word	0x08025770
 8015a58:	08025684 	.word	0x08025684

08015a5c <rmw_uros_set_custom_transport>:
 8015a5c:	b470      	push	{r4, r5, r6}
 8015a5e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8015a62:	b162      	cbz	r2, 8015a7e <rmw_uros_set_custom_transport+0x22>
 8015a64:	b15b      	cbz	r3, 8015a7e <rmw_uros_set_custom_transport+0x22>
 8015a66:	b155      	cbz	r5, 8015a7e <rmw_uros_set_custom_transport+0x22>
 8015a68:	b14e      	cbz	r6, 8015a7e <rmw_uros_set_custom_transport+0x22>
 8015a6a:	4c06      	ldr	r4, [pc, #24]	; (8015a84 <rmw_uros_set_custom_transport+0x28>)
 8015a6c:	7020      	strb	r0, [r4, #0]
 8015a6e:	2000      	movs	r0, #0
 8015a70:	6166      	str	r6, [r4, #20]
 8015a72:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015a76:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015a7a:	bc70      	pop	{r4, r5, r6}
 8015a7c:	4770      	bx	lr
 8015a7e:	200b      	movs	r0, #11
 8015a80:	bc70      	pop	{r4, r5, r6}
 8015a82:	4770      	bx	lr
 8015a84:	200123bc 	.word	0x200123bc

08015a88 <rmw_init_options_init>:
 8015a88:	b084      	sub	sp, #16
 8015a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a8c:	b083      	sub	sp, #12
 8015a8e:	ad09      	add	r5, sp, #36	; 0x24
 8015a90:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015a94:	b130      	cbz	r0, 8015aa4 <rmw_init_options_init+0x1c>
 8015a96:	4604      	mov	r4, r0
 8015a98:	4628      	mov	r0, r5
 8015a9a:	f7ff fcaf 	bl	80153fc <rcutils_allocator_is_valid>
 8015a9e:	b108      	cbz	r0, 8015aa4 <rmw_init_options_init+0x1c>
 8015aa0:	68a6      	ldr	r6, [r4, #8]
 8015aa2:	b12e      	cbz	r6, 8015ab0 <rmw_init_options_init+0x28>
 8015aa4:	200b      	movs	r0, #11
 8015aa6:	b003      	add	sp, #12
 8015aa8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015aac:	b004      	add	sp, #16
 8015aae:	4770      	bx	lr
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	f104 0c20 	add.w	ip, r4, #32
 8015ab8:	f8df e098 	ldr.w	lr, [pc, #152]	; 8015b54 <rmw_init_options_init+0xcc>
 8015abc:	466f      	mov	r7, sp
 8015abe:	e9c4 2300 	strd	r2, r3, [r4]
 8015ac2:	4b20      	ldr	r3, [pc, #128]	; (8015b44 <rmw_init_options_init+0xbc>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	60a3      	str	r3, [r4, #8]
 8015ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015aca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ace:	682b      	ldr	r3, [r5, #0]
 8015ad0:	4638      	mov	r0, r7
 8015ad2:	f8cc 3000 	str.w	r3, [ip]
 8015ad6:	f8c4 e01c 	str.w	lr, [r4, #28]
 8015ada:	60e6      	str	r6, [r4, #12]
 8015adc:	f7ff fec0 	bl	8015860 <rmw_get_default_security_options>
 8015ae0:	f104 0310 	add.w	r3, r4, #16
 8015ae4:	2203      	movs	r2, #3
 8015ae6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015aea:	e883 0003 	stmia.w	r3, {r0, r1}
 8015aee:	4816      	ldr	r0, [pc, #88]	; (8015b48 <rmw_init_options_init+0xc0>)
 8015af0:	4916      	ldr	r1, [pc, #88]	; (8015b4c <rmw_init_options_init+0xc4>)
 8015af2:	7626      	strb	r6, [r4, #24]
 8015af4:	f001 fa62 	bl	8016fbc <rmw_uxrce_init_init_options_impl_memory>
 8015af8:	4813      	ldr	r0, [pc, #76]	; (8015b48 <rmw_init_options_init+0xc0>)
 8015afa:	f008 fc25 	bl	801e348 <get_memory>
 8015afe:	b1f0      	cbz	r0, 8015b3e <rmw_init_options_init+0xb6>
 8015b00:	4a13      	ldr	r2, [pc, #76]	; (8015b50 <rmw_init_options_init+0xc8>)
 8015b02:	6883      	ldr	r3, [r0, #8]
 8015b04:	6851      	ldr	r1, [r2, #4]
 8015b06:	6363      	str	r3, [r4, #52]	; 0x34
 8015b08:	7810      	ldrb	r0, [r2, #0]
 8015b0a:	6159      	str	r1, [r3, #20]
 8015b0c:	68d1      	ldr	r1, [r2, #12]
 8015b0e:	7418      	strb	r0, [r3, #16]
 8015b10:	61d9      	str	r1, [r3, #28]
 8015b12:	6911      	ldr	r1, [r2, #16]
 8015b14:	6219      	str	r1, [r3, #32]
 8015b16:	6951      	ldr	r1, [r2, #20]
 8015b18:	6892      	ldr	r2, [r2, #8]
 8015b1a:	6259      	str	r1, [r3, #36]	; 0x24
 8015b1c:	619a      	str	r2, [r3, #24]
 8015b1e:	f004 fb65 	bl	801a1ec <uxr_nanos>
 8015b22:	f009 ffd7 	bl	801fad4 <srand>
 8015b26:	f00a f803 	bl	801fb30 <rand>
 8015b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b2c:	6298      	str	r0, [r3, #40]	; 0x28
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	d0f9      	beq.n	8015b26 <rmw_init_options_init+0x9e>
 8015b32:	2000      	movs	r0, #0
 8015b34:	b003      	add	sp, #12
 8015b36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015b3a:	b004      	add	sp, #16
 8015b3c:	4770      	bx	lr
 8015b3e:	2001      	movs	r0, #1
 8015b40:	e7b1      	b.n	8015aa6 <rmw_init_options_init+0x1e>
 8015b42:	bf00      	nop
 8015b44:	08025df4 	.word	0x08025df4
 8015b48:	20016e14 	.word	0x20016e14
 8015b4c:	200126b0 	.word	0x200126b0
 8015b50:	200123bc 	.word	0x200123bc
 8015b54:	08025180 	.word	0x08025180

08015b58 <rmw_init_options_copy>:
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d047      	beq.n	8015bec <rmw_init_options_copy+0x94>
 8015b5c:	b570      	push	{r4, r5, r6, lr}
 8015b5e:	460d      	mov	r5, r1
 8015b60:	b149      	cbz	r1, 8015b76 <rmw_init_options_copy+0x1e>
 8015b62:	4604      	mov	r4, r0
 8015b64:	6880      	ldr	r0, [r0, #8]
 8015b66:	b120      	cbz	r0, 8015b72 <rmw_init_options_copy+0x1a>
 8015b68:	4b22      	ldr	r3, [pc, #136]	; (8015bf4 <rmw_init_options_copy+0x9c>)
 8015b6a:	6819      	ldr	r1, [r3, #0]
 8015b6c:	f7ea fb68 	bl	8000240 <strcmp>
 8015b70:	bba8      	cbnz	r0, 8015bde <rmw_init_options_copy+0x86>
 8015b72:	68ab      	ldr	r3, [r5, #8]
 8015b74:	b11b      	cbz	r3, 8015b7e <rmw_init_options_copy+0x26>
 8015b76:	f04f 0c0b 	mov.w	ip, #11
 8015b7a:	4660      	mov	r0, ip
 8015b7c:	bd70      	pop	{r4, r5, r6, pc}
 8015b7e:	4623      	mov	r3, r4
 8015b80:	462a      	mov	r2, r5
 8015b82:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015b86:	f8d3 e000 	ldr.w	lr, [r3]
 8015b8a:	3310      	adds	r3, #16
 8015b8c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8015b90:	3210      	adds	r2, #16
 8015b92:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8015b96:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015b9a:	42b3      	cmp	r3, r6
 8015b9c:	f842 ec10 	str.w	lr, [r2, #-16]
 8015ba0:	f842 cc0c 	str.w	ip, [r2, #-12]
 8015ba4:	f842 0c08 	str.w	r0, [r2, #-8]
 8015ba8:	f842 1c04 	str.w	r1, [r2, #-4]
 8015bac:	d1eb      	bne.n	8015b86 <rmw_init_options_copy+0x2e>
 8015bae:	6819      	ldr	r1, [r3, #0]
 8015bb0:	685b      	ldr	r3, [r3, #4]
 8015bb2:	4811      	ldr	r0, [pc, #68]	; (8015bf8 <rmw_init_options_copy+0xa0>)
 8015bb4:	6011      	str	r1, [r2, #0]
 8015bb6:	6053      	str	r3, [r2, #4]
 8015bb8:	f008 fbc6 	bl	801e348 <get_memory>
 8015bbc:	b198      	cbz	r0, 8015be6 <rmw_init_options_copy+0x8e>
 8015bbe:	6883      	ldr	r3, [r0, #8]
 8015bc0:	f04f 0c00 	mov.w	ip, #0
 8015bc4:	636b      	str	r3, [r5, #52]	; 0x34
 8015bc6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8015bc8:	f103 0410 	add.w	r4, r3, #16
 8015bcc:	3510      	adds	r5, #16
 8015bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015bda:	4660      	mov	r0, ip
 8015bdc:	bd70      	pop	{r4, r5, r6, pc}
 8015bde:	f04f 0c0c 	mov.w	ip, #12
 8015be2:	4660      	mov	r0, ip
 8015be4:	bd70      	pop	{r4, r5, r6, pc}
 8015be6:	f04f 0c01 	mov.w	ip, #1
 8015bea:	e7c6      	b.n	8015b7a <rmw_init_options_copy+0x22>
 8015bec:	f04f 0c0b 	mov.w	ip, #11
 8015bf0:	4660      	mov	r0, ip
 8015bf2:	4770      	bx	lr
 8015bf4:	08025df4 	.word	0x08025df4
 8015bf8:	20016e14 	.word	0x20016e14

08015bfc <rmw_init_options_fini>:
 8015bfc:	b510      	push	{r4, lr}
 8015bfe:	b08e      	sub	sp, #56	; 0x38
 8015c00:	b388      	cbz	r0, 8015c66 <rmw_init_options_fini+0x6a>
 8015c02:	4604      	mov	r4, r0
 8015c04:	3020      	adds	r0, #32
 8015c06:	f7ff fbf9 	bl	80153fc <rcutils_allocator_is_valid>
 8015c0a:	b360      	cbz	r0, 8015c66 <rmw_init_options_fini+0x6a>
 8015c0c:	68a0      	ldr	r0, [r4, #8]
 8015c0e:	b120      	cbz	r0, 8015c1a <rmw_init_options_fini+0x1e>
 8015c10:	4b1a      	ldr	r3, [pc, #104]	; (8015c7c <rmw_init_options_fini+0x80>)
 8015c12:	6819      	ldr	r1, [r3, #0]
 8015c14:	f7ea fb14 	bl	8000240 <strcmp>
 8015c18:	bb68      	cbnz	r0, 8015c76 <rmw_init_options_fini+0x7a>
 8015c1a:	4b19      	ldr	r3, [pc, #100]	; (8015c80 <rmw_init_options_fini+0x84>)
 8015c1c:	6819      	ldr	r1, [r3, #0]
 8015c1e:	b331      	cbz	r1, 8015c6e <rmw_init_options_fini+0x72>
 8015c20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015c22:	e001      	b.n	8015c28 <rmw_init_options_fini+0x2c>
 8015c24:	6849      	ldr	r1, [r1, #4]
 8015c26:	b311      	cbz	r1, 8015c6e <rmw_init_options_fini+0x72>
 8015c28:	688b      	ldr	r3, [r1, #8]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d1fa      	bne.n	8015c24 <rmw_init_options_fini+0x28>
 8015c2e:	4814      	ldr	r0, [pc, #80]	; (8015c80 <rmw_init_options_fini+0x84>)
 8015c30:	f008 fb9a 	bl	801e368 <put_memory>
 8015c34:	4668      	mov	r0, sp
 8015c36:	f7ff fdff 	bl	8015838 <rmw_get_zero_initialized_init_options>
 8015c3a:	46ee      	mov	lr, sp
 8015c3c:	46a4      	mov	ip, r4
 8015c3e:	2400      	movs	r4, #0
 8015c40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c58:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015c5c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c60:	4620      	mov	r0, r4
 8015c62:	b00e      	add	sp, #56	; 0x38
 8015c64:	bd10      	pop	{r4, pc}
 8015c66:	240b      	movs	r4, #11
 8015c68:	4620      	mov	r0, r4
 8015c6a:	b00e      	add	sp, #56	; 0x38
 8015c6c:	bd10      	pop	{r4, pc}
 8015c6e:	2401      	movs	r4, #1
 8015c70:	4620      	mov	r0, r4
 8015c72:	b00e      	add	sp, #56	; 0x38
 8015c74:	bd10      	pop	{r4, pc}
 8015c76:	240c      	movs	r4, #12
 8015c78:	e7f2      	b.n	8015c60 <rmw_init_options_fini+0x64>
 8015c7a:	bf00      	nop
 8015c7c:	08025df4 	.word	0x08025df4
 8015c80:	20016e14 	.word	0x20016e14

08015c84 <rmw_init>:
 8015c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c88:	b083      	sub	sp, #12
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	f000 80d3 	beq.w	8015e36 <rmw_init+0x1b2>
 8015c90:	460e      	mov	r6, r1
 8015c92:	2900      	cmp	r1, #0
 8015c94:	f000 80cf 	beq.w	8015e36 <rmw_init+0x1b2>
 8015c98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015c9a:	4605      	mov	r5, r0
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	f000 80ca 	beq.w	8015e36 <rmw_init+0x1b2>
 8015ca2:	4b78      	ldr	r3, [pc, #480]	; (8015e84 <rmw_init+0x200>)
 8015ca4:	6880      	ldr	r0, [r0, #8]
 8015ca6:	681f      	ldr	r7, [r3, #0]
 8015ca8:	b128      	cbz	r0, 8015cb6 <rmw_init+0x32>
 8015caa:	4639      	mov	r1, r7
 8015cac:	f7ea fac8 	bl	8000240 <strcmp>
 8015cb0:	2800      	cmp	r0, #0
 8015cb2:	f040 80ca 	bne.w	8015e4a <rmw_init+0x1c6>
 8015cb6:	4c74      	ldr	r4, [pc, #464]	; (8015e88 <rmw_init+0x204>)
 8015cb8:	f04f 0800 	mov.w	r8, #0
 8015cbc:	4973      	ldr	r1, [pc, #460]	; (8015e8c <rmw_init+0x208>)
 8015cbe:	4874      	ldr	r0, [pc, #464]	; (8015e90 <rmw_init+0x20c>)
 8015cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015cc4:	60b7      	str	r7, [r6, #8]
 8015cc6:	e9c6 2300 	strd	r2, r3, [r6]
 8015cca:	68eb      	ldr	r3, [r5, #12]
 8015ccc:	2201      	movs	r2, #1
 8015cce:	64b3      	str	r3, [r6, #72]	; 0x48
 8015cd0:	f001 f914 	bl	8016efc <rmw_uxrce_init_session_memory>
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	2204      	movs	r2, #4
 8015cd8:	496e      	ldr	r1, [pc, #440]	; (8015e94 <rmw_init+0x210>)
 8015cda:	f001 f94f 	bl	8016f7c <rmw_uxrce_init_static_input_buffer_memory>
 8015cde:	486c      	ldr	r0, [pc, #432]	; (8015e90 <rmw_init+0x20c>)
 8015ce0:	f884 800d 	strb.w	r8, [r4, #13]
 8015ce4:	f008 fb30 	bl	801e348 <get_memory>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	f000 80a9 	beq.w	8015e40 <rmw_init+0x1bc>
 8015cee:	6884      	ldr	r4, [r0, #8]
 8015cf0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015cf2:	f104 0910 	add.w	r9, r4, #16
 8015cf6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015cf8:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015cfc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015d00:	9101      	str	r1, [sp, #4]
 8015d02:	4661      	mov	r1, ip
 8015d04:	6a00      	ldr	r0, [r0, #32]
 8015d06:	9000      	str	r0, [sp, #0]
 8015d08:	4648      	mov	r0, r9
 8015d0a:	f002 fa19 	bl	8018140 <uxr_set_custom_transport_callbacks>
 8015d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d12:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8015d16:	4960      	ldr	r1, [pc, #384]	; (8015e98 <rmw_init+0x214>)
 8015d18:	4860      	ldr	r0, [pc, #384]	; (8015e9c <rmw_init+0x218>)
 8015d1a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015d1e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8015d22:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8015d26:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8015d2a:	2201      	movs	r2, #1
 8015d2c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015d30:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8015d34:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015d38:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8015d3c:	64f4      	str	r4, [r6, #76]	; 0x4c
 8015d3e:	f001 f8bd 	bl	8016ebc <rmw_uxrce_init_node_memory>
 8015d42:	2205      	movs	r2, #5
 8015d44:	4956      	ldr	r1, [pc, #344]	; (8015ea0 <rmw_init+0x21c>)
 8015d46:	4857      	ldr	r0, [pc, #348]	; (8015ea4 <rmw_init+0x220>)
 8015d48:	f001 f898 	bl	8016e7c <rmw_uxrce_init_subscription_memory>
 8015d4c:	220a      	movs	r2, #10
 8015d4e:	4956      	ldr	r1, [pc, #344]	; (8015ea8 <rmw_init+0x224>)
 8015d50:	4856      	ldr	r0, [pc, #344]	; (8015eac <rmw_init+0x228>)
 8015d52:	f001 f873 	bl	8016e3c <rmw_uxrce_init_publisher_memory>
 8015d56:	2201      	movs	r2, #1
 8015d58:	4955      	ldr	r1, [pc, #340]	; (8015eb0 <rmw_init+0x22c>)
 8015d5a:	4856      	ldr	r0, [pc, #344]	; (8015eb4 <rmw_init+0x230>)
 8015d5c:	f001 f82e 	bl	8016dbc <rmw_uxrce_init_service_memory>
 8015d60:	2201      	movs	r2, #1
 8015d62:	4955      	ldr	r1, [pc, #340]	; (8015eb8 <rmw_init+0x234>)
 8015d64:	4855      	ldr	r0, [pc, #340]	; (8015ebc <rmw_init+0x238>)
 8015d66:	f001 f849 	bl	8016dfc <rmw_uxrce_init_client_memory>
 8015d6a:	220f      	movs	r2, #15
 8015d6c:	4954      	ldr	r1, [pc, #336]	; (8015ec0 <rmw_init+0x23c>)
 8015d6e:	4855      	ldr	r0, [pc, #340]	; (8015ec4 <rmw_init+0x240>)
 8015d70:	f001 f8e4 	bl	8016f3c <rmw_uxrce_init_topic_memory>
 8015d74:	2203      	movs	r2, #3
 8015d76:	4954      	ldr	r1, [pc, #336]	; (8015ec8 <rmw_init+0x244>)
 8015d78:	4854      	ldr	r0, [pc, #336]	; (8015ecc <rmw_init+0x248>)
 8015d7a:	f001 f91f 	bl	8016fbc <rmw_uxrce_init_init_options_impl_memory>
 8015d7e:	2204      	movs	r2, #4
 8015d80:	4953      	ldr	r1, [pc, #332]	; (8015ed0 <rmw_init+0x24c>)
 8015d82:	4854      	ldr	r0, [pc, #336]	; (8015ed4 <rmw_init+0x250>)
 8015d84:	f001 f93a 	bl	8016ffc <rmw_uxrce_init_wait_set_memory>
 8015d88:	4953      	ldr	r1, [pc, #332]	; (8015ed8 <rmw_init+0x254>)
 8015d8a:	4854      	ldr	r0, [pc, #336]	; (8015edc <rmw_init+0x258>)
 8015d8c:	2204      	movs	r2, #4
 8015d8e:	f001 f955 	bl	801703c <rmw_uxrce_init_guard_condition_memory>
 8015d92:	4642      	mov	r2, r8
 8015d94:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8015d96:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015d98:	f000 fff8 	bl	8016d8c <rmw_uxrce_transport_init>
 8015d9c:	4607      	mov	r7, r0
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d158      	bne.n	8015e54 <rmw_init+0x1d0>
 8015da2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015da4:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015da8:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015dae:	4628      	mov	r0, r5
 8015db0:	f002 fbf6 	bl	80185a0 <uxr_init_session>
 8015db4:	4622      	mov	r2, r4
 8015db6:	494a      	ldr	r1, [pc, #296]	; (8015ee0 <rmw_init+0x25c>)
 8015db8:	4628      	mov	r0, r5
 8015dba:	f002 fc15 	bl	80185e8 <uxr_set_topic_callback>
 8015dbe:	463a      	mov	r2, r7
 8015dc0:	4948      	ldr	r1, [pc, #288]	; (8015ee4 <rmw_init+0x260>)
 8015dc2:	4628      	mov	r0, r5
 8015dc4:	f002 fc0c 	bl	80185e0 <uxr_set_status_callback>
 8015dc8:	463a      	mov	r2, r7
 8015dca:	4947      	ldr	r1, [pc, #284]	; (8015ee8 <rmw_init+0x264>)
 8015dcc:	4628      	mov	r0, r5
 8015dce:	f002 fc0f 	bl	80185f0 <uxr_set_request_callback>
 8015dd2:	463a      	mov	r2, r7
 8015dd4:	4945      	ldr	r1, [pc, #276]	; (8015eec <rmw_init+0x268>)
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	f002 fc0e 	bl	80185f8 <uxr_set_reply_callback>
 8015ddc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015de0:	2304      	movs	r3, #4
 8015de2:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015de6:	0092      	lsls	r2, r2, #2
 8015de8:	4628      	mov	r0, r5
 8015dea:	f002 fc45 	bl	8018678 <uxr_create_input_reliable_stream>
 8015dee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015df2:	2304      	movs	r3, #4
 8015df4:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015df8:	0092      	lsls	r2, r2, #2
 8015dfa:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015dfe:	4628      	mov	r0, r5
 8015e00:	f002 fc10 	bl	8018624 <uxr_create_output_reliable_stream>
 8015e04:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015e08:	4628      	mov	r0, r5
 8015e0a:	f002 fc2f 	bl	801866c <uxr_create_input_best_effort_stream>
 8015e0e:	f241 3194 	movw	r1, #5012	; 0x1394
 8015e12:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015e16:	4628      	mov	r0, r5
 8015e18:	4421      	add	r1, r4
 8015e1a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015e1e:	f002 fbef 	bl	8018600 <uxr_create_output_best_effort_stream>
 8015e22:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015e26:	4628      	mov	r0, r5
 8015e28:	f003 f978 	bl	801911c <uxr_create_session>
 8015e2c:	b1f8      	cbz	r0, 8015e6e <rmw_init+0x1ea>
 8015e2e:	4638      	mov	r0, r7
 8015e30:	b003      	add	sp, #12
 8015e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e36:	270b      	movs	r7, #11
 8015e38:	4638      	mov	r0, r7
 8015e3a:	b003      	add	sp, #12
 8015e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e40:	2701      	movs	r7, #1
 8015e42:	4638      	mov	r0, r7
 8015e44:	b003      	add	sp, #12
 8015e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e4a:	270c      	movs	r7, #12
 8015e4c:	4638      	mov	r0, r7
 8015e4e:	b003      	add	sp, #12
 8015e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e54:	4648      	mov	r0, r9
 8015e56:	f002 f9b1 	bl	80181bc <uxr_close_custom_transport>
 8015e5a:	4621      	mov	r1, r4
 8015e5c:	480c      	ldr	r0, [pc, #48]	; (8015e90 <rmw_init+0x20c>)
 8015e5e:	f008 fa83 	bl	801e368 <put_memory>
 8015e62:	4638      	mov	r0, r7
 8015e64:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015e68:	b003      	add	sp, #12
 8015e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e6e:	4648      	mov	r0, r9
 8015e70:	f002 f9a4 	bl	80181bc <uxr_close_custom_transport>
 8015e74:	4621      	mov	r1, r4
 8015e76:	4806      	ldr	r0, [pc, #24]	; (8015e90 <rmw_init+0x20c>)
 8015e78:	f008 fa76 	bl	801e368 <put_memory>
 8015e7c:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015e7e:	2701      	movs	r7, #1
 8015e80:	e7d5      	b.n	8015e2e <rmw_init+0x1aa>
 8015e82:	bf00      	nop
 8015e84:	08025df4 	.word	0x08025df4
 8015e88:	20016e64 	.word	0x20016e64
 8015e8c:	20013110 	.word	0x20013110
 8015e90:	20016e54 	.word	0x20016e54
 8015e94:	200146b8 	.word	0x200146b8
 8015e98:	20012734 	.word	0x20012734
 8015e9c:	20016e24 	.word	0x20016e24
 8015ea0:	200167b8 	.word	0x200167b8
 8015ea4:	20016e74 	.word	0x20016e74
 8015ea8:	200127d8 	.word	0x200127d8
 8015eac:	20016e34 	.word	0x20016e34
 8015eb0:	20013048 	.word	0x20013048
 8015eb4:	20016e44 	.word	0x20016e44
 8015eb8:	20012568 	.word	0x20012568
 8015ebc:	20012554 	.word	0x20012554
 8015ec0:	20016bf0 	.word	0x20016bf0
 8015ec4:	20016e84 	.word	0x20016e84
 8015ec8:	200126b0 	.word	0x200126b0
 8015ecc:	20016e14 	.word	0x20016e14
 8015ed0:	20016d94 	.word	0x20016d94
 8015ed4:	20016e94 	.word	0x20016e94
 8015ed8:	20012630 	.word	0x20012630
 8015edc:	20016e04 	.word	0x20016e04
 8015ee0:	0801e181 	.word	0x0801e181
 8015ee4:	0801e179 	.word	0x0801e179
 8015ee8:	0801e219 	.word	0x0801e219
 8015eec:	0801e2b5 	.word	0x0801e2b5

08015ef0 <rmw_context_fini>:
 8015ef0:	4b17      	ldr	r3, [pc, #92]	; (8015f50 <rmw_context_fini+0x60>)
 8015ef2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015ef4:	b570      	push	{r4, r5, r6, lr}
 8015ef6:	681c      	ldr	r4, [r3, #0]
 8015ef8:	4605      	mov	r5, r0
 8015efa:	b334      	cbz	r4, 8015f4a <rmw_context_fini+0x5a>
 8015efc:	2600      	movs	r6, #0
 8015efe:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015f02:	6902      	ldr	r2, [r0, #16]
 8015f04:	428a      	cmp	r2, r1
 8015f06:	d018      	beq.n	8015f3a <rmw_context_fini+0x4a>
 8015f08:	2c00      	cmp	r4, #0
 8015f0a:	d1f8      	bne.n	8015efe <rmw_context_fini+0xe>
 8015f0c:	b189      	cbz	r1, 8015f32 <rmw_context_fini+0x42>
 8015f0e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015f12:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015f16:	789b      	ldrb	r3, [r3, #2]
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	bf14      	ite	ne
 8015f1c:	210a      	movne	r1, #10
 8015f1e:	2100      	moveq	r1, #0
 8015f20:	f003 f8d4 	bl	80190cc <uxr_delete_session_retries>
 8015f24:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015f26:	f001 f8a9 	bl	801707c <rmw_uxrce_fini_session_memory>
 8015f2a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015f2c:	3010      	adds	r0, #16
 8015f2e:	f002 f945 	bl	80181bc <uxr_close_custom_transport>
 8015f32:	2300      	movs	r3, #0
 8015f34:	4630      	mov	r0, r6
 8015f36:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015f38:	bd70      	pop	{r4, r5, r6, pc}
 8015f3a:	3018      	adds	r0, #24
 8015f3c:	f000 f89c 	bl	8016078 <rmw_destroy_node>
 8015f40:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015f42:	4606      	mov	r6, r0
 8015f44:	2c00      	cmp	r4, #0
 8015f46:	d1da      	bne.n	8015efe <rmw_context_fini+0xe>
 8015f48:	e7e0      	b.n	8015f0c <rmw_context_fini+0x1c>
 8015f4a:	4626      	mov	r6, r4
 8015f4c:	e7de      	b.n	8015f0c <rmw_context_fini+0x1c>
 8015f4e:	bf00      	nop
 8015f50:	20016e24 	.word	0x20016e24

08015f54 <create_node>:
 8015f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f58:	b083      	sub	sp, #12
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d064      	beq.n	8016028 <create_node+0xd4>
 8015f5e:	4606      	mov	r6, r0
 8015f60:	4838      	ldr	r0, [pc, #224]	; (8016044 <create_node+0xf0>)
 8015f62:	460f      	mov	r7, r1
 8015f64:	4690      	mov	r8, r2
 8015f66:	461d      	mov	r5, r3
 8015f68:	f008 f9ee 	bl	801e348 <get_memory>
 8015f6c:	2800      	cmp	r0, #0
 8015f6e:	d05b      	beq.n	8016028 <create_node+0xd4>
 8015f70:	6884      	ldr	r4, [r0, #8]
 8015f72:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015f74:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015f78:	f104 0518 	add.w	r5, r4, #24
 8015f7c:	6123      	str	r3, [r4, #16]
 8015f7e:	f008 fa4b 	bl	801e418 <rmw_get_implementation_identifier>
 8015f82:	f8c4 9020 	str.w	r9, [r4, #32]
 8015f86:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	f7ea f9b8 	bl	8000300 <strlen>
 8015f90:	1c42      	adds	r2, r0, #1
 8015f92:	2a3c      	cmp	r2, #60	; 0x3c
 8015f94:	d840      	bhi.n	8016018 <create_node+0xc4>
 8015f96:	4648      	mov	r0, r9
 8015f98:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015f9c:	4631      	mov	r1, r6
 8015f9e:	f00b f98e 	bl	80212be <memcpy>
 8015fa2:	4638      	mov	r0, r7
 8015fa4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015fa8:	f7ea f9aa 	bl	8000300 <strlen>
 8015fac:	1c42      	adds	r2, r0, #1
 8015fae:	2a3c      	cmp	r2, #60	; 0x3c
 8015fb0:	d832      	bhi.n	8016018 <create_node+0xc4>
 8015fb2:	4639      	mov	r1, r7
 8015fb4:	4648      	mov	r0, r9
 8015fb6:	f00b f982 	bl	80212be <memcpy>
 8015fba:	6923      	ldr	r3, [r4, #16]
 8015fbc:	2101      	movs	r1, #1
 8015fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015fc2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015fc6:	1842      	adds	r2, r0, r1
 8015fc8:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015fcc:	f002 f8fa 	bl	80181c4 <uxr_object_id>
 8015fd0:	6160      	str	r0, [r4, #20]
 8015fd2:	783b      	ldrb	r3, [r7, #0]
 8015fd4:	2b2f      	cmp	r3, #47	; 0x2f
 8015fd6:	d12c      	bne.n	8016032 <create_node+0xde>
 8015fd8:	787b      	ldrb	r3, [r7, #1]
 8015fda:	bb53      	cbnz	r3, 8016032 <create_node+0xde>
 8015fdc:	4633      	mov	r3, r6
 8015fde:	4a1a      	ldr	r2, [pc, #104]	; (8016048 <create_node+0xf4>)
 8015fe0:	213c      	movs	r1, #60	; 0x3c
 8015fe2:	481a      	ldr	r0, [pc, #104]	; (801604c <create_node+0xf8>)
 8015fe4:	f00a ff0e 	bl	8020e04 <sniprintf>
 8015fe8:	6920      	ldr	r0, [r4, #16]
 8015fea:	2106      	movs	r1, #6
 8015fec:	fa1f f388 	uxth.w	r3, r8
 8015ff0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015ff4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ff8:	9101      	str	r1, [sp, #4]
 8015ffa:	4914      	ldr	r1, [pc, #80]	; (801604c <create_node+0xf8>)
 8015ffc:	9100      	str	r1, [sp, #0]
 8015ffe:	6811      	ldr	r1, [r2, #0]
 8016000:	6962      	ldr	r2, [r4, #20]
 8016002:	f001 fe31 	bl	8017c68 <uxr_buffer_create_participant_bin>
 8016006:	4602      	mov	r2, r0
 8016008:	6920      	ldr	r0, [r4, #16]
 801600a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801600e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016012:	f001 f9b7 	bl	8017384 <run_xrce_session>
 8016016:	b918      	cbnz	r0, 8016020 <create_node+0xcc>
 8016018:	4628      	mov	r0, r5
 801601a:	2500      	movs	r5, #0
 801601c:	f001 f834 	bl	8017088 <rmw_uxrce_fini_node_memory>
 8016020:	4628      	mov	r0, r5
 8016022:	b003      	add	sp, #12
 8016024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016028:	2500      	movs	r5, #0
 801602a:	4628      	mov	r0, r5
 801602c:	b003      	add	sp, #12
 801602e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016032:	463b      	mov	r3, r7
 8016034:	4a06      	ldr	r2, [pc, #24]	; (8016050 <create_node+0xfc>)
 8016036:	213c      	movs	r1, #60	; 0x3c
 8016038:	9600      	str	r6, [sp, #0]
 801603a:	4804      	ldr	r0, [pc, #16]	; (801604c <create_node+0xf8>)
 801603c:	f00a fee2 	bl	8020e04 <sniprintf>
 8016040:	e7d2      	b.n	8015fe8 <create_node+0x94>
 8016042:	bf00      	nop
 8016044:	20016e24 	.word	0x20016e24
 8016048:	08025794 	.word	0x08025794
 801604c:	200123d8 	.word	0x200123d8
 8016050:	08025190 	.word	0x08025190

08016054 <rmw_create_node>:
 8016054:	468c      	mov	ip, r1
 8016056:	4611      	mov	r1, r2
 8016058:	f1bc 0f00 	cmp.w	ip, #0
 801605c:	d00a      	beq.n	8016074 <rmw_create_node+0x20>
 801605e:	f89c 3000 	ldrb.w	r3, [ip]
 8016062:	b13b      	cbz	r3, 8016074 <rmw_create_node+0x20>
 8016064:	b132      	cbz	r2, 8016074 <rmw_create_node+0x20>
 8016066:	7813      	ldrb	r3, [r2, #0]
 8016068:	b123      	cbz	r3, 8016074 <rmw_create_node+0x20>
 801606a:	4603      	mov	r3, r0
 801606c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 801606e:	4660      	mov	r0, ip
 8016070:	f7ff bf70 	b.w	8015f54 <create_node>
 8016074:	2000      	movs	r0, #0
 8016076:	4770      	bx	lr

08016078 <rmw_destroy_node>:
 8016078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801607a:	b328      	cbz	r0, 80160c8 <rmw_destroy_node+0x50>
 801607c:	4607      	mov	r7, r0
 801607e:	6800      	ldr	r0, [r0, #0]
 8016080:	b120      	cbz	r0, 801608c <rmw_destroy_node+0x14>
 8016082:	4b37      	ldr	r3, [pc, #220]	; (8016160 <rmw_destroy_node+0xe8>)
 8016084:	6819      	ldr	r1, [r3, #0]
 8016086:	f7ea f8db 	bl	8000240 <strcmp>
 801608a:	b9e8      	cbnz	r0, 80160c8 <rmw_destroy_node+0x50>
 801608c:	687d      	ldr	r5, [r7, #4]
 801608e:	b1dd      	cbz	r5, 80160c8 <rmw_destroy_node+0x50>
 8016090:	4b34      	ldr	r3, [pc, #208]	; (8016164 <rmw_destroy_node+0xec>)
 8016092:	681c      	ldr	r4, [r3, #0]
 8016094:	2c00      	cmp	r4, #0
 8016096:	d060      	beq.n	801615a <rmw_destroy_node+0xe2>
 8016098:	2600      	movs	r6, #0
 801609a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801609e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80160a2:	429d      	cmp	r5, r3
 80160a4:	d013      	beq.n	80160ce <rmw_destroy_node+0x56>
 80160a6:	2c00      	cmp	r4, #0
 80160a8:	d1f7      	bne.n	801609a <rmw_destroy_node+0x22>
 80160aa:	4b2f      	ldr	r3, [pc, #188]	; (8016168 <rmw_destroy_node+0xf0>)
 80160ac:	681c      	ldr	r4, [r3, #0]
 80160ae:	b1c4      	cbz	r4, 80160e2 <rmw_destroy_node+0x6a>
 80160b0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80160b4:	6a0b      	ldr	r3, [r1, #32]
 80160b6:	429d      	cmp	r5, r3
 80160b8:	d1f9      	bne.n	80160ae <rmw_destroy_node+0x36>
 80160ba:	317c      	adds	r1, #124	; 0x7c
 80160bc:	4638      	mov	r0, r7
 80160be:	f000 fdaf 	bl	8016c20 <rmw_destroy_subscription>
 80160c2:	2801      	cmp	r0, #1
 80160c4:	4606      	mov	r6, r0
 80160c6:	d1f2      	bne.n	80160ae <rmw_destroy_node+0x36>
 80160c8:	2601      	movs	r6, #1
 80160ca:	4630      	mov	r0, r6
 80160cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ce:	3184      	adds	r1, #132	; 0x84
 80160d0:	4638      	mov	r0, r7
 80160d2:	f000 f9b1 	bl	8016438 <rmw_destroy_publisher>
 80160d6:	2801      	cmp	r0, #1
 80160d8:	4606      	mov	r6, r0
 80160da:	d0f5      	beq.n	80160c8 <rmw_destroy_node+0x50>
 80160dc:	2c00      	cmp	r4, #0
 80160de:	d1dc      	bne.n	801609a <rmw_destroy_node+0x22>
 80160e0:	e7e3      	b.n	80160aa <rmw_destroy_node+0x32>
 80160e2:	4b22      	ldr	r3, [pc, #136]	; (801616c <rmw_destroy_node+0xf4>)
 80160e4:	681c      	ldr	r4, [r3, #0]
 80160e6:	b16c      	cbz	r4, 8016104 <rmw_destroy_node+0x8c>
 80160e8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80160ec:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80160ee:	429d      	cmp	r5, r3
 80160f0:	d1f9      	bne.n	80160e6 <rmw_destroy_node+0x6e>
 80160f2:	317c      	adds	r1, #124	; 0x7c
 80160f4:	4638      	mov	r0, r7
 80160f6:	f000 fc1d 	bl	8016934 <rmw_destroy_service>
 80160fa:	2801      	cmp	r0, #1
 80160fc:	4606      	mov	r6, r0
 80160fe:	d0e3      	beq.n	80160c8 <rmw_destroy_node+0x50>
 8016100:	2c00      	cmp	r4, #0
 8016102:	d1f1      	bne.n	80160e8 <rmw_destroy_node+0x70>
 8016104:	4b1a      	ldr	r3, [pc, #104]	; (8016170 <rmw_destroy_node+0xf8>)
 8016106:	681c      	ldr	r4, [r3, #0]
 8016108:	b16c      	cbz	r4, 8016126 <rmw_destroy_node+0xae>
 801610a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801610e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8016110:	429d      	cmp	r5, r3
 8016112:	d1f9      	bne.n	8016108 <rmw_destroy_node+0x90>
 8016114:	317c      	adds	r1, #124	; 0x7c
 8016116:	4638      	mov	r0, r7
 8016118:	f008 f93a 	bl	801e390 <rmw_destroy_client>
 801611c:	2801      	cmp	r0, #1
 801611e:	4606      	mov	r6, r0
 8016120:	d0d2      	beq.n	80160c8 <rmw_destroy_node+0x50>
 8016122:	2c00      	cmp	r4, #0
 8016124:	d1f1      	bne.n	801610a <rmw_destroy_node+0x92>
 8016126:	6928      	ldr	r0, [r5, #16]
 8016128:	696a      	ldr	r2, [r5, #20]
 801612a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801612e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016132:	6819      	ldr	r1, [r3, #0]
 8016134:	f001 fd4c 	bl	8017bd0 <uxr_buffer_delete_entity>
 8016138:	4602      	mov	r2, r0
 801613a:	6928      	ldr	r0, [r5, #16]
 801613c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016140:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016144:	f001 f91e 	bl	8017384 <run_xrce_session>
 8016148:	4603      	mov	r3, r0
 801614a:	4638      	mov	r0, r7
 801614c:	2b00      	cmp	r3, #0
 801614e:	bf08      	it	eq
 8016150:	2602      	moveq	r6, #2
 8016152:	f000 ff99 	bl	8017088 <rmw_uxrce_fini_node_memory>
 8016156:	4630      	mov	r0, r6
 8016158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801615a:	4626      	mov	r6, r4
 801615c:	e7a5      	b.n	80160aa <rmw_destroy_node+0x32>
 801615e:	bf00      	nop
 8016160:	08025df4 	.word	0x08025df4
 8016164:	20016e34 	.word	0x20016e34
 8016168:	20016e74 	.word	0x20016e74
 801616c:	20016e44 	.word	0x20016e44
 8016170:	20012554 	.word	0x20012554

08016174 <rmw_node_get_graph_guard_condition>:
 8016174:	6843      	ldr	r3, [r0, #4]
 8016176:	6918      	ldr	r0, [r3, #16]
 8016178:	f500 705a 	add.w	r0, r0, #872	; 0x368
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop

08016180 <flush_session>:
 8016180:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8016182:	f002 be59 	b.w	8018e38 <uxr_run_session_until_confirm_delivery>
 8016186:	bf00      	nop

08016188 <rmw_publish>:
 8016188:	2800      	cmp	r0, #0
 801618a:	d053      	beq.n	8016234 <rmw_publish+0xac>
 801618c:	b570      	push	{r4, r5, r6, lr}
 801618e:	460d      	mov	r5, r1
 8016190:	b08e      	sub	sp, #56	; 0x38
 8016192:	2900      	cmp	r1, #0
 8016194:	d04b      	beq.n	801622e <rmw_publish+0xa6>
 8016196:	4604      	mov	r4, r0
 8016198:	6800      	ldr	r0, [r0, #0]
 801619a:	f001 fa05 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 801619e:	2800      	cmp	r0, #0
 80161a0:	d045      	beq.n	801622e <rmw_publish+0xa6>
 80161a2:	6866      	ldr	r6, [r4, #4]
 80161a4:	2e00      	cmp	r6, #0
 80161a6:	d042      	beq.n	801622e <rmw_publish+0xa6>
 80161a8:	69b4      	ldr	r4, [r6, #24]
 80161aa:	4628      	mov	r0, r5
 80161ac:	6923      	ldr	r3, [r4, #16]
 80161ae:	4798      	blx	r3
 80161b0:	69f3      	ldr	r3, [r6, #28]
 80161b2:	9005      	str	r0, [sp, #20]
 80161b4:	b113      	cbz	r3, 80161bc <rmw_publish+0x34>
 80161b6:	a805      	add	r0, sp, #20
 80161b8:	4798      	blx	r3
 80161ba:	9805      	ldr	r0, [sp, #20]
 80161bc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80161c0:	691b      	ldr	r3, [r3, #16]
 80161c2:	9000      	str	r0, [sp, #0]
 80161c4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80161c8:	6972      	ldr	r2, [r6, #20]
 80161ca:	ab06      	add	r3, sp, #24
 80161cc:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80161ce:	f004 f8ad 	bl	801a32c <uxr_prepare_output_stream>
 80161d2:	b1d8      	cbz	r0, 801620c <rmw_publish+0x84>
 80161d4:	68a3      	ldr	r3, [r4, #8]
 80161d6:	a906      	add	r1, sp, #24
 80161d8:	4628      	mov	r0, r5
 80161da:	4798      	blx	r3
 80161dc:	6a33      	ldr	r3, [r6, #32]
 80161de:	4604      	mov	r4, r0
 80161e0:	b10b      	cbz	r3, 80161e6 <rmw_publish+0x5e>
 80161e2:	a806      	add	r0, sp, #24
 80161e4:	4798      	blx	r3
 80161e6:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80161ea:	2b01      	cmp	r3, #1
 80161ec:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80161f0:	d022      	beq.n	8016238 <rmw_publish+0xb0>
 80161f2:	6918      	ldr	r0, [r3, #16]
 80161f4:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80161f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80161fa:	f002 fe1d 	bl	8018e38 <uxr_run_session_until_confirm_delivery>
 80161fe:	4020      	ands	r0, r4
 8016200:	b2c4      	uxtb	r4, r0
 8016202:	f084 0001 	eor.w	r0, r4, #1
 8016206:	b2c0      	uxtb	r0, r0
 8016208:	b00e      	add	sp, #56	; 0x38
 801620a:	bd70      	pop	{r4, r5, r6, pc}
 801620c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016210:	6918      	ldr	r0, [r3, #16]
 8016212:	9b05      	ldr	r3, [sp, #20]
 8016214:	9602      	str	r6, [sp, #8]
 8016216:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801621a:	9300      	str	r3, [sp, #0]
 801621c:	4b09      	ldr	r3, [pc, #36]	; (8016244 <rmw_publish+0xbc>)
 801621e:	9301      	str	r3, [sp, #4]
 8016220:	ab06      	add	r3, sp, #24
 8016222:	6972      	ldr	r2, [r6, #20]
 8016224:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8016226:	f004 f8b1 	bl	801a38c <uxr_prepare_output_stream_fragmented>
 801622a:	2800      	cmp	r0, #0
 801622c:	d1d2      	bne.n	80161d4 <rmw_publish+0x4c>
 801622e:	2001      	movs	r0, #1
 8016230:	b00e      	add	sp, #56	; 0x38
 8016232:	bd70      	pop	{r4, r5, r6, pc}
 8016234:	2001      	movs	r0, #1
 8016236:	4770      	bx	lr
 8016238:	6918      	ldr	r0, [r3, #16]
 801623a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801623e:	f002 fa41 	bl	80186c4 <uxr_flash_output_streams>
 8016242:	e7de      	b.n	8016202 <rmw_publish+0x7a>
 8016244:	08016181 	.word	0x08016181

08016248 <rmw_create_publisher>:
 8016248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801624c:	b087      	sub	sp, #28
 801624e:	2800      	cmp	r0, #0
 8016250:	f000 80d2 	beq.w	80163f8 <rmw_create_publisher+0x1b0>
 8016254:	460e      	mov	r6, r1
 8016256:	2900      	cmp	r1, #0
 8016258:	f000 80ce 	beq.w	80163f8 <rmw_create_publisher+0x1b0>
 801625c:	4604      	mov	r4, r0
 801625e:	6800      	ldr	r0, [r0, #0]
 8016260:	4615      	mov	r5, r2
 8016262:	461f      	mov	r7, r3
 8016264:	f001 f9a0 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 8016268:	f080 0001 	eor.w	r0, r0, #1
 801626c:	b2c0      	uxtb	r0, r0
 801626e:	2800      	cmp	r0, #0
 8016270:	f040 80c2 	bne.w	80163f8 <rmw_create_publisher+0x1b0>
 8016274:	2d00      	cmp	r5, #0
 8016276:	f000 80bf 	beq.w	80163f8 <rmw_create_publisher+0x1b0>
 801627a:	782b      	ldrb	r3, [r5, #0]
 801627c:	2b00      	cmp	r3, #0
 801627e:	f000 80bb 	beq.w	80163f8 <rmw_create_publisher+0x1b0>
 8016282:	2f00      	cmp	r7, #0
 8016284:	f000 80b8 	beq.w	80163f8 <rmw_create_publisher+0x1b0>
 8016288:	485e      	ldr	r0, [pc, #376]	; (8016404 <rmw_create_publisher+0x1bc>)
 801628a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801628e:	f008 f85b 	bl	801e348 <get_memory>
 8016292:	2800      	cmp	r0, #0
 8016294:	f000 80b0 	beq.w	80163f8 <rmw_create_publisher+0x1b0>
 8016298:	6884      	ldr	r4, [r0, #8]
 801629a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 801629e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80162a2:	f008 f8b9 	bl	801e418 <rmw_get_implementation_identifier>
 80162a6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80162aa:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80162ae:	4628      	mov	r0, r5
 80162b0:	f7ea f826 	bl	8000300 <strlen>
 80162b4:	3001      	adds	r0, #1
 80162b6:	f104 0884 	add.w	r8, r4, #132	; 0x84
 80162ba:	283c      	cmp	r0, #60	; 0x3c
 80162bc:	f200 808f 	bhi.w	80163de <rmw_create_publisher+0x196>
 80162c0:	462b      	mov	r3, r5
 80162c2:	4a51      	ldr	r2, [pc, #324]	; (8016408 <rmw_create_publisher+0x1c0>)
 80162c4:	213c      	movs	r1, #60	; 0x3c
 80162c6:	4650      	mov	r0, sl
 80162c8:	f00a fd9c 	bl	8020e04 <sniprintf>
 80162cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80162d0:	4639      	mov	r1, r7
 80162d2:	2250      	movs	r2, #80	; 0x50
 80162d4:	67e3      	str	r3, [r4, #124]	; 0x7c
 80162d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80162da:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 80162de:	f00a ffee 	bl	80212be <memcpy>
 80162e2:	7a3b      	ldrb	r3, [r7, #8]
 80162e4:	4630      	mov	r0, r6
 80162e6:	4949      	ldr	r1, [pc, #292]	; (801640c <rmw_create_publisher+0x1c4>)
 80162e8:	2b02      	cmp	r3, #2
 80162ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80162ee:	bf0c      	ite	eq
 80162f0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 80162f4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 80162f8:	67a3      	str	r3, [r4, #120]	; 0x78
 80162fa:	2300      	movs	r3, #0
 80162fc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016300:	f001 f960 	bl	80175c4 <get_message_typesupport_handle>
 8016304:	2800      	cmp	r0, #0
 8016306:	d06a      	beq.n	80163de <rmw_create_publisher+0x196>
 8016308:	6842      	ldr	r2, [r0, #4]
 801630a:	61a2      	str	r2, [r4, #24]
 801630c:	2a00      	cmp	r2, #0
 801630e:	d066      	beq.n	80163de <rmw_create_publisher+0x196>
 8016310:	4629      	mov	r1, r5
 8016312:	463b      	mov	r3, r7
 8016314:	4648      	mov	r0, r9
 8016316:	f008 f8af 	bl	801e478 <create_topic>
 801631a:	6260      	str	r0, [r4, #36]	; 0x24
 801631c:	2800      	cmp	r0, #0
 801631e:	d062      	beq.n	80163e6 <rmw_create_publisher+0x19e>
 8016320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016324:	2103      	movs	r1, #3
 8016326:	2506      	movs	r5, #6
 8016328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801632c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8016330:	1c42      	adds	r2, r0, #1
 8016332:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8016336:	f001 ff45 	bl	80181c4 <uxr_object_id>
 801633a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801633e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016342:	6120      	str	r0, [r4, #16]
 8016344:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8016348:	6910      	ldr	r0, [r2, #16]
 801634a:	9500      	str	r5, [sp, #0]
 801634c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016350:	6819      	ldr	r1, [r3, #0]
 8016352:	6922      	ldr	r2, [r4, #16]
 8016354:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016358:	f001 fcee 	bl	8017d38 <uxr_buffer_create_publisher_bin>
 801635c:	4602      	mov	r2, r0
 801635e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016362:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016366:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801636a:	f001 f80b 	bl	8017384 <run_xrce_session>
 801636e:	b3b0      	cbz	r0, 80163de <rmw_create_publisher+0x196>
 8016370:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016374:	2105      	movs	r1, #5
 8016376:	f10d 0a10 	add.w	sl, sp, #16
 801637a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801637e:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8016382:	1c42      	adds	r2, r0, #1
 8016384:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8016388:	f001 ff1c 	bl	80181c4 <uxr_object_id>
 801638c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016390:	4639      	mov	r1, r7
 8016392:	6160      	str	r0, [r4, #20]
 8016394:	691e      	ldr	r6, [r3, #16]
 8016396:	4650      	mov	r0, sl
 8016398:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801639c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80163a0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 80163a4:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 80163a8:	f001 f808 	bl	80173bc <convert_qos_profile>
 80163ac:	9503      	str	r5, [sp, #12]
 80163ae:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80163b2:	9001      	str	r0, [sp, #4]
 80163b4:	4630      	mov	r0, r6
 80163b6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80163ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 80163be:	9300      	str	r3, [sp, #0]
 80163c0:	6839      	ldr	r1, [r7, #0]
 80163c2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80163c6:	f001 fd17 	bl	8017df8 <uxr_buffer_create_datawriter_bin>
 80163ca:	4602      	mov	r2, r0
 80163cc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80163d0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80163d4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80163d8:	f000 ffd4 	bl	8017384 <run_xrce_session>
 80163dc:	b970      	cbnz	r0, 80163fc <rmw_create_publisher+0x1b4>
 80163de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80163e0:	b108      	cbz	r0, 80163e6 <rmw_create_publisher+0x19e>
 80163e2:	f000 fec1 	bl	8017168 <rmw_uxrce_fini_topic_memory>
 80163e6:	4640      	mov	r0, r8
 80163e8:	f04f 0800 	mov.w	r8, #0
 80163ec:	f000 fe64 	bl	80170b8 <rmw_uxrce_fini_publisher_memory>
 80163f0:	4640      	mov	r0, r8
 80163f2:	b007      	add	sp, #28
 80163f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f8:	f04f 0800 	mov.w	r8, #0
 80163fc:	4640      	mov	r0, r8
 80163fe:	b007      	add	sp, #28
 8016400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016404:	20016e34 	.word	0x20016e34
 8016408:	08025794 	.word	0x08025794
 801640c:	08024a4c 	.word	0x08024a4c

08016410 <rmw_publisher_get_actual_qos>:
 8016410:	b178      	cbz	r0, 8016432 <rmw_publisher_get_actual_qos+0x22>
 8016412:	b510      	push	{r4, lr}
 8016414:	fab1 f481 	clz	r4, r1
 8016418:	0964      	lsrs	r4, r4, #5
 801641a:	b141      	cbz	r1, 801642e <rmw_publisher_get_actual_qos+0x1e>
 801641c:	6843      	ldr	r3, [r0, #4]
 801641e:	2250      	movs	r2, #80	; 0x50
 8016420:	4608      	mov	r0, r1
 8016422:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016426:	f00a ff4a 	bl	80212be <memcpy>
 801642a:	4620      	mov	r0, r4
 801642c:	bd10      	pop	{r4, pc}
 801642e:	200b      	movs	r0, #11
 8016430:	bd10      	pop	{r4, pc}
 8016432:	200b      	movs	r0, #11
 8016434:	4770      	bx	lr
 8016436:	bf00      	nop

08016438 <rmw_destroy_publisher>:
 8016438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801643c:	b128      	cbz	r0, 801644a <rmw_destroy_publisher+0x12>
 801643e:	4604      	mov	r4, r0
 8016440:	6800      	ldr	r0, [r0, #0]
 8016442:	460d      	mov	r5, r1
 8016444:	f001 f8b0 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 8016448:	b918      	cbnz	r0, 8016452 <rmw_destroy_publisher+0x1a>
 801644a:	2401      	movs	r4, #1
 801644c:	4620      	mov	r0, r4
 801644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016452:	6863      	ldr	r3, [r4, #4]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d0f8      	beq.n	801644a <rmw_destroy_publisher+0x12>
 8016458:	fab5 f485 	clz	r4, r5
 801645c:	0964      	lsrs	r4, r4, #5
 801645e:	2d00      	cmp	r5, #0
 8016460:	d0f3      	beq.n	801644a <rmw_destroy_publisher+0x12>
 8016462:	6828      	ldr	r0, [r5, #0]
 8016464:	f001 f8a0 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 8016468:	2800      	cmp	r0, #0
 801646a:	d0ee      	beq.n	801644a <rmw_destroy_publisher+0x12>
 801646c:	686e      	ldr	r6, [r5, #4]
 801646e:	2e00      	cmp	r6, #0
 8016470:	d0eb      	beq.n	801644a <rmw_destroy_publisher+0x12>
 8016472:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8016474:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8016478:	f008 f84e 	bl	801e518 <destroy_topic>
 801647c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016480:	6972      	ldr	r2, [r6, #20]
 8016482:	6918      	ldr	r0, [r3, #16]
 8016484:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016488:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801648c:	6819      	ldr	r1, [r3, #0]
 801648e:	f001 fb9f 	bl	8017bd0 <uxr_buffer_delete_entity>
 8016492:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8016496:	4680      	mov	r8, r0
 8016498:	6932      	ldr	r2, [r6, #16]
 801649a:	6918      	ldr	r0, [r3, #16]
 801649c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80164a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80164a4:	6819      	ldr	r1, [r3, #0]
 80164a6:	f001 fb93 	bl	8017bd0 <uxr_buffer_delete_entity>
 80164aa:	4606      	mov	r6, r0
 80164ac:	6938      	ldr	r0, [r7, #16]
 80164ae:	4642      	mov	r2, r8
 80164b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80164b4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80164b8:	f000 ff64 	bl	8017384 <run_xrce_session>
 80164bc:	693f      	ldr	r7, [r7, #16]
 80164be:	4632      	mov	r2, r6
 80164c0:	4606      	mov	r6, r0
 80164c2:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80164c6:	4638      	mov	r0, r7
 80164c8:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80164cc:	f000 ff5a 	bl	8017384 <run_xrce_session>
 80164d0:	b126      	cbz	r6, 80164dc <rmw_destroy_publisher+0xa4>
 80164d2:	b118      	cbz	r0, 80164dc <rmw_destroy_publisher+0xa4>
 80164d4:	4628      	mov	r0, r5
 80164d6:	f000 fdef 	bl	80170b8 <rmw_uxrce_fini_publisher_memory>
 80164da:	e7b7      	b.n	801644c <rmw_destroy_publisher+0x14>
 80164dc:	2402      	movs	r4, #2
 80164de:	e7f9      	b.n	80164d4 <rmw_destroy_publisher+0x9c>

080164e0 <rmw_send_request>:
 80164e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164e4:	4604      	mov	r4, r0
 80164e6:	6800      	ldr	r0, [r0, #0]
 80164e8:	b08b      	sub	sp, #44	; 0x2c
 80164ea:	460e      	mov	r6, r1
 80164ec:	4615      	mov	r5, r2
 80164ee:	b128      	cbz	r0, 80164fc <rmw_send_request+0x1c>
 80164f0:	4b21      	ldr	r3, [pc, #132]	; (8016578 <rmw_send_request+0x98>)
 80164f2:	6819      	ldr	r1, [r3, #0]
 80164f4:	f7e9 fea4 	bl	8000240 <strcmp>
 80164f8:	2800      	cmp	r0, #0
 80164fa:	d139      	bne.n	8016570 <rmw_send_request+0x90>
 80164fc:	6864      	ldr	r4, [r4, #4]
 80164fe:	2700      	movs	r7, #0
 8016500:	6963      	ldr	r3, [r4, #20]
 8016502:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8016506:	689b      	ldr	r3, [r3, #8]
 8016508:	4798      	blx	r3
 801650a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801650e:	4630      	mov	r0, r6
 8016510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016514:	4798      	blx	r3
 8016516:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801651a:	9000      	str	r0, [sp, #0]
 801651c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016520:	6922      	ldr	r2, [r4, #16]
 8016522:	ab02      	add	r3, sp, #8
 8016524:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8016526:	f003 ff01 	bl	801a32c <uxr_prepare_output_stream>
 801652a:	e9c5 0700 	strd	r0, r7, [r5]
 801652e:	b198      	cbz	r0, 8016558 <rmw_send_request+0x78>
 8016530:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016534:	a902      	add	r1, sp, #8
 8016536:	4630      	mov	r0, r6
 8016538:	4798      	blx	r3
 801653a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801653e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016542:	2b01      	cmp	r3, #1
 8016544:	d00c      	beq.n	8016560 <rmw_send_request+0x80>
 8016546:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8016548:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801654c:	f002 fc74 	bl	8018e38 <uxr_run_session_until_confirm_delivery>
 8016550:	4638      	mov	r0, r7
 8016552:	b00b      	add	sp, #44	; 0x2c
 8016554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016558:	2001      	movs	r0, #1
 801655a:	b00b      	add	sp, #44	; 0x2c
 801655c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016560:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016564:	f002 f8ae 	bl	80186c4 <uxr_flash_output_streams>
 8016568:	4638      	mov	r0, r7
 801656a:	b00b      	add	sp, #44	; 0x2c
 801656c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016570:	200c      	movs	r0, #12
 8016572:	b00b      	add	sp, #44	; 0x2c
 8016574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016578:	08025df4 	.word	0x08025df4

0801657c <rmw_take_request>:
 801657c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016580:	4605      	mov	r5, r0
 8016582:	6800      	ldr	r0, [r0, #0]
 8016584:	b089      	sub	sp, #36	; 0x24
 8016586:	460c      	mov	r4, r1
 8016588:	4690      	mov	r8, r2
 801658a:	461e      	mov	r6, r3
 801658c:	b128      	cbz	r0, 801659a <rmw_take_request+0x1e>
 801658e:	4b28      	ldr	r3, [pc, #160]	; (8016630 <rmw_take_request+0xb4>)
 8016590:	6819      	ldr	r1, [r3, #0]
 8016592:	f7e9 fe55 	bl	8000240 <strcmp>
 8016596:	2800      	cmp	r0, #0
 8016598:	d146      	bne.n	8016628 <rmw_take_request+0xac>
 801659a:	b10e      	cbz	r6, 80165a0 <rmw_take_request+0x24>
 801659c:	2300      	movs	r3, #0
 801659e:	7033      	strb	r3, [r6, #0]
 80165a0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80165a4:	f000 fe70 	bl	8017288 <rmw_uxrce_clean_expired_static_input_buffer>
 80165a8:	4648      	mov	r0, r9
 80165aa:	f000 fe43 	bl	8017234 <rmw_uxrce_find_static_input_buffer_by_owner>
 80165ae:	4607      	mov	r7, r0
 80165b0:	b3b0      	cbz	r0, 8016620 <rmw_take_request+0xa4>
 80165b2:	6885      	ldr	r5, [r0, #8]
 80165b4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80165b8:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 80165bc:	e9c4 3208 	strd	r3, r2, [r4, #32]
 80165c0:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80165c4:	7423      	strb	r3, [r4, #16]
 80165c6:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 80165ca:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 80165ce:	f8a4 2011 	strh.w	r2, [r4, #17]
 80165d2:	74e3      	strb	r3, [r4, #19]
 80165d4:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 80165d8:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 80165dc:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 80165e0:	6161      	str	r1, [r4, #20]
 80165e2:	61a2      	str	r2, [r4, #24]
 80165e4:	61e3      	str	r3, [r4, #28]
 80165e6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80165ea:	689b      	ldr	r3, [r3, #8]
 80165ec:	4798      	blx	r3
 80165ee:	6844      	ldr	r4, [r0, #4]
 80165f0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80165f4:	f105 0110 	add.w	r1, r5, #16
 80165f8:	4668      	mov	r0, sp
 80165fa:	f7fd f829 	bl	8013650 <ucdr_init_buffer>
 80165fe:	4641      	mov	r1, r8
 8016600:	68e3      	ldr	r3, [r4, #12]
 8016602:	4668      	mov	r0, sp
 8016604:	4798      	blx	r3
 8016606:	4639      	mov	r1, r7
 8016608:	4604      	mov	r4, r0
 801660a:	480a      	ldr	r0, [pc, #40]	; (8016634 <rmw_take_request+0xb8>)
 801660c:	f007 feac 	bl	801e368 <put_memory>
 8016610:	b106      	cbz	r6, 8016614 <rmw_take_request+0x98>
 8016612:	7034      	strb	r4, [r6, #0]
 8016614:	f084 0001 	eor.w	r0, r4, #1
 8016618:	b2c0      	uxtb	r0, r0
 801661a:	b009      	add	sp, #36	; 0x24
 801661c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016620:	2001      	movs	r0, #1
 8016622:	b009      	add	sp, #36	; 0x24
 8016624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016628:	200c      	movs	r0, #12
 801662a:	b009      	add	sp, #36	; 0x24
 801662c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016630:	08025df4 	.word	0x08025df4
 8016634:	20016e64 	.word	0x20016e64

08016638 <rmw_send_response>:
 8016638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801663a:	4605      	mov	r5, r0
 801663c:	6800      	ldr	r0, [r0, #0]
 801663e:	b091      	sub	sp, #68	; 0x44
 8016640:	460c      	mov	r4, r1
 8016642:	4616      	mov	r6, r2
 8016644:	b128      	cbz	r0, 8016652 <rmw_send_response+0x1a>
 8016646:	4b29      	ldr	r3, [pc, #164]	; (80166ec <rmw_send_response+0xb4>)
 8016648:	6819      	ldr	r1, [r3, #0]
 801664a:	f7e9 fdf9 	bl	8000240 <strcmp>
 801664e:	2800      	cmp	r0, #0
 8016650:	d141      	bne.n	80166d6 <rmw_send_response+0x9e>
 8016652:	686d      	ldr	r5, [r5, #4]
 8016654:	68a1      	ldr	r1, [r4, #8]
 8016656:	6860      	ldr	r0, [r4, #4]
 8016658:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801665a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801665e:	9307      	str	r3, [sp, #28]
 8016660:	4623      	mov	r3, r4
 8016662:	9206      	str	r2, [sp, #24]
 8016664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016668:	789b      	ldrb	r3, [r3, #2]
 801666a:	f88d 2017 	strb.w	r2, [sp, #23]
 801666e:	f88d 3016 	strb.w	r3, [sp, #22]
 8016672:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016676:	68e2      	ldr	r2, [r4, #12]
 8016678:	f8ad 3014 	strh.w	r3, [sp, #20]
 801667c:	ab02      	add	r3, sp, #8
 801667e:	696c      	ldr	r4, [r5, #20]
 8016680:	c307      	stmia	r3!, {r0, r1, r2}
 8016682:	68e3      	ldr	r3, [r4, #12]
 8016684:	4798      	blx	r3
 8016686:	6844      	ldr	r4, [r0, #4]
 8016688:	4630      	mov	r0, r6
 801668a:	6923      	ldr	r3, [r4, #16]
 801668c:	4798      	blx	r3
 801668e:	f100 0318 	add.w	r3, r0, #24
 8016692:	6938      	ldr	r0, [r7, #16]
 8016694:	9300      	str	r3, [sp, #0]
 8016696:	ab08      	add	r3, sp, #32
 8016698:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801669c:	692a      	ldr	r2, [r5, #16]
 801669e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80166a0:	f003 fe44 	bl	801a32c <uxr_prepare_output_stream>
 80166a4:	b910      	cbnz	r0, 80166ac <rmw_send_response+0x74>
 80166a6:	2001      	movs	r0, #1
 80166a8:	b011      	add	sp, #68	; 0x44
 80166aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ac:	a902      	add	r1, sp, #8
 80166ae:	a808      	add	r0, sp, #32
 80166b0:	f004 ffa8 	bl	801b604 <uxr_serialize_SampleIdentity>
 80166b4:	68a3      	ldr	r3, [r4, #8]
 80166b6:	a908      	add	r1, sp, #32
 80166b8:	4630      	mov	r0, r6
 80166ba:	4798      	blx	r3
 80166bc:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80166c0:	6938      	ldr	r0, [r7, #16]
 80166c2:	2b01      	cmp	r3, #1
 80166c4:	d00a      	beq.n	80166dc <rmw_send_response+0xa4>
 80166c6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80166c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80166cc:	f002 fbb4 	bl	8018e38 <uxr_run_session_until_confirm_delivery>
 80166d0:	2000      	movs	r0, #0
 80166d2:	b011      	add	sp, #68	; 0x44
 80166d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166d6:	200c      	movs	r0, #12
 80166d8:	b011      	add	sp, #68	; 0x44
 80166da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166dc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80166e0:	f001 fff0 	bl	80186c4 <uxr_flash_output_streams>
 80166e4:	2000      	movs	r0, #0
 80166e6:	b011      	add	sp, #68	; 0x44
 80166e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ea:	bf00      	nop
 80166ec:	08025df4 	.word	0x08025df4

080166f0 <rmw_take_response>:
 80166f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166f4:	4604      	mov	r4, r0
 80166f6:	6800      	ldr	r0, [r0, #0]
 80166f8:	b088      	sub	sp, #32
 80166fa:	460f      	mov	r7, r1
 80166fc:	4690      	mov	r8, r2
 80166fe:	461d      	mov	r5, r3
 8016700:	b120      	cbz	r0, 801670c <rmw_take_response+0x1c>
 8016702:	4b1d      	ldr	r3, [pc, #116]	; (8016778 <rmw_take_response+0x88>)
 8016704:	6819      	ldr	r1, [r3, #0]
 8016706:	f7e9 fd9b 	bl	8000240 <strcmp>
 801670a:	bb68      	cbnz	r0, 8016768 <rmw_take_response+0x78>
 801670c:	b10d      	cbz	r5, 8016712 <rmw_take_response+0x22>
 801670e:	2300      	movs	r3, #0
 8016710:	702b      	strb	r3, [r5, #0]
 8016712:	6864      	ldr	r4, [r4, #4]
 8016714:	f000 fdb8 	bl	8017288 <rmw_uxrce_clean_expired_static_input_buffer>
 8016718:	4620      	mov	r0, r4
 801671a:	f000 fd8b 	bl	8017234 <rmw_uxrce_find_static_input_buffer_by_owner>
 801671e:	4606      	mov	r6, r0
 8016720:	b330      	cbz	r0, 8016770 <rmw_take_response+0x80>
 8016722:	6963      	ldr	r3, [r4, #20]
 8016724:	6884      	ldr	r4, [r0, #8]
 8016726:	68db      	ldr	r3, [r3, #12]
 8016728:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801672c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016730:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8016734:	4798      	blx	r3
 8016736:	6847      	ldr	r7, [r0, #4]
 8016738:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801673c:	f104 0110 	add.w	r1, r4, #16
 8016740:	4668      	mov	r0, sp
 8016742:	f7fc ff85 	bl	8013650 <ucdr_init_buffer>
 8016746:	4641      	mov	r1, r8
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	4668      	mov	r0, sp
 801674c:	4798      	blx	r3
 801674e:	4631      	mov	r1, r6
 8016750:	4604      	mov	r4, r0
 8016752:	480a      	ldr	r0, [pc, #40]	; (801677c <rmw_take_response+0x8c>)
 8016754:	f007 fe08 	bl	801e368 <put_memory>
 8016758:	b105      	cbz	r5, 801675c <rmw_take_response+0x6c>
 801675a:	702c      	strb	r4, [r5, #0]
 801675c:	f084 0001 	eor.w	r0, r4, #1
 8016760:	b2c0      	uxtb	r0, r0
 8016762:	b008      	add	sp, #32
 8016764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016768:	200c      	movs	r0, #12
 801676a:	b008      	add	sp, #32
 801676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016770:	2001      	movs	r0, #1
 8016772:	b008      	add	sp, #32
 8016774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016778:	08025df4 	.word	0x08025df4
 801677c:	20016e64 	.word	0x20016e64

08016780 <rmw_create_service>:
 8016780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016784:	b091      	sub	sp, #68	; 0x44
 8016786:	2900      	cmp	r1, #0
 8016788:	f000 80bb 	beq.w	8016902 <rmw_create_service+0x182>
 801678c:	4606      	mov	r6, r0
 801678e:	2800      	cmp	r0, #0
 8016790:	f000 80b7 	beq.w	8016902 <rmw_create_service+0x182>
 8016794:	4614      	mov	r4, r2
 8016796:	6800      	ldr	r0, [r0, #0]
 8016798:	4689      	mov	r9, r1
 801679a:	461d      	mov	r5, r3
 801679c:	f000 ff04 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 80167a0:	2c00      	cmp	r4, #0
 80167a2:	f000 80ae 	beq.w	8016902 <rmw_create_service+0x182>
 80167a6:	f080 0001 	eor.w	r0, r0, #1
 80167aa:	b2c0      	uxtb	r0, r0
 80167ac:	2800      	cmp	r0, #0
 80167ae:	f040 80a8 	bne.w	8016902 <rmw_create_service+0x182>
 80167b2:	7823      	ldrb	r3, [r4, #0]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	f000 80a4 	beq.w	8016902 <rmw_create_service+0x182>
 80167ba:	2d00      	cmp	r5, #0
 80167bc:	f000 80a1 	beq.w	8016902 <rmw_create_service+0x182>
 80167c0:	4856      	ldr	r0, [pc, #344]	; (801691c <rmw_create_service+0x19c>)
 80167c2:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80167c6:	f007 fdbf 	bl	801e348 <get_memory>
 80167ca:	4606      	mov	r6, r0
 80167cc:	2800      	cmp	r0, #0
 80167ce:	f000 8099 	beq.w	8016904 <rmw_create_service+0x184>
 80167d2:	6887      	ldr	r7, [r0, #8]
 80167d4:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 80167d8:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80167dc:	f007 fe1c 	bl	801e418 <rmw_get_implementation_identifier>
 80167e0:	67f8      	str	r0, [r7, #124]	; 0x7c
 80167e2:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80167e6:	4620      	mov	r0, r4
 80167e8:	f7e9 fd8a 	bl	8000300 <strlen>
 80167ec:	1c42      	adds	r2, r0, #1
 80167ee:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 80167f2:	2a3c      	cmp	r2, #60	; 0x3c
 80167f4:	f200 808a 	bhi.w	801690c <rmw_create_service+0x18c>
 80167f8:	4621      	mov	r1, r4
 80167fa:	4650      	mov	r0, sl
 80167fc:	f00a fd5f 	bl	80212be <memcpy>
 8016800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016804:	4629      	mov	r1, r5
 8016806:	2250      	movs	r2, #80	; 0x50
 8016808:	f107 0020 	add.w	r0, r7, #32
 801680c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8016810:	677b      	str	r3, [r7, #116]	; 0x74
 8016812:	f00a fd54 	bl	80212be <memcpy>
 8016816:	4648      	mov	r0, r9
 8016818:	4941      	ldr	r1, [pc, #260]	; (8016920 <rmw_create_service+0x1a0>)
 801681a:	f000 fedf 	bl	80175dc <get_service_typesupport_handle>
 801681e:	2800      	cmp	r0, #0
 8016820:	d074      	beq.n	801690c <rmw_create_service+0x18c>
 8016822:	6843      	ldr	r3, [r0, #4]
 8016824:	617b      	str	r3, [r7, #20]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d070      	beq.n	801690c <rmw_create_service+0x18c>
 801682a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801682e:	2108      	movs	r1, #8
 8016830:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8016928 <rmw_create_service+0x1a8>
 8016834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016838:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801692c <rmw_create_service+0x1ac>
 801683c:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8016840:	1c42      	adds	r2, r0, #1
 8016842:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8016846:	f001 fcbd 	bl	80181c4 <uxr_object_id>
 801684a:	2364      	movs	r3, #100	; 0x64
 801684c:	6138      	str	r0, [r7, #16]
 801684e:	4652      	mov	r2, sl
 8016850:	4649      	mov	r1, r9
 8016852:	6978      	ldr	r0, [r7, #20]
 8016854:	f000 fdfc 	bl	8017450 <generate_service_types>
 8016858:	2800      	cmp	r0, #0
 801685a:	d057      	beq.n	801690c <rmw_create_service+0x18c>
 801685c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8016930 <rmw_create_service+0x1b0>
 8016860:	233c      	movs	r3, #60	; 0x3c
 8016862:	4a30      	ldr	r2, [pc, #192]	; (8016924 <rmw_create_service+0x1a4>)
 8016864:	4620      	mov	r0, r4
 8016866:	4659      	mov	r1, fp
 8016868:	f000 fdc0 	bl	80173ec <generate_service_topics>
 801686c:	2800      	cmp	r0, #0
 801686e:	d04d      	beq.n	801690c <rmw_create_service+0x18c>
 8016870:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016874:	a80c      	add	r0, sp, #48	; 0x30
 8016876:	4629      	mov	r1, r5
 8016878:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801687c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016880:	f000 fd9c 	bl	80173bc <convert_qos_profile>
 8016884:	4a27      	ldr	r2, [pc, #156]	; (8016924 <rmw_create_service+0x1a4>)
 8016886:	a80c      	add	r0, sp, #48	; 0x30
 8016888:	9400      	str	r4, [sp, #0]
 801688a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801688c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016890:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8016894:	c803      	ldmia	r0, {r0, r1}
 8016896:	9a08      	ldr	r2, [sp, #32]
 8016898:	9005      	str	r0, [sp, #20]
 801689a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801689e:	2306      	movs	r3, #6
 80168a0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80168a4:	9307      	str	r3, [sp, #28]
 80168a6:	6811      	ldr	r1, [r2, #0]
 80168a8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80168ac:	693a      	ldr	r2, [r7, #16]
 80168ae:	f001 fb91 	bl	8017fd4 <uxr_buffer_create_replier_bin>
 80168b2:	4602      	mov	r2, r0
 80168b4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80168b8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80168bc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80168c0:	f000 fd60 	bl	8017384 <run_xrce_session>
 80168c4:	b310      	cbz	r0, 801690c <rmw_create_service+0x18c>
 80168c6:	7a2b      	ldrb	r3, [r5, #8]
 80168c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168cc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80168d0:	2b02      	cmp	r3, #2
 80168d2:	920e      	str	r2, [sp, #56]	; 0x38
 80168d4:	f04f 0200 	mov.w	r2, #0
 80168d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80168da:	bf0c      	ite	eq
 80168dc:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 80168e0:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 80168e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80168e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80168ea:	ab0e      	add	r3, sp, #56	; 0x38
 80168ec:	673a      	str	r2, [r7, #112]	; 0x70
 80168ee:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 80168f2:	9300      	str	r3, [sp, #0]
 80168f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168f6:	6811      	ldr	r1, [r2, #0]
 80168f8:	693a      	ldr	r2, [r7, #16]
 80168fa:	f001 fc93 	bl	8018224 <uxr_buffer_request_data>
 80168fe:	8338      	strh	r0, [r7, #24]
 8016900:	e000      	b.n	8016904 <rmw_create_service+0x184>
 8016902:	2600      	movs	r6, #0
 8016904:	4630      	mov	r0, r6
 8016906:	b011      	add	sp, #68	; 0x44
 8016908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801690c:	4630      	mov	r0, r6
 801690e:	2600      	movs	r6, #0
 8016910:	f000 fbfe 	bl	8017110 <rmw_uxrce_fini_service_memory>
 8016914:	4630      	mov	r0, r6
 8016916:	b011      	add	sp, #68	; 0x44
 8016918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801691c:	20016e44 	.word	0x20016e44
 8016920:	08024a4c 	.word	0x08024a4c
 8016924:	200124b4 	.word	0x200124b4
 8016928:	200124f0 	.word	0x200124f0
 801692c:	20012450 	.word	0x20012450
 8016930:	20012414 	.word	0x20012414

08016934 <rmw_destroy_service>:
 8016934:	b570      	push	{r4, r5, r6, lr}
 8016936:	b128      	cbz	r0, 8016944 <rmw_destroy_service+0x10>
 8016938:	4604      	mov	r4, r0
 801693a:	6800      	ldr	r0, [r0, #0]
 801693c:	460d      	mov	r5, r1
 801693e:	f000 fe33 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 8016942:	b910      	cbnz	r0, 801694a <rmw_destroy_service+0x16>
 8016944:	2401      	movs	r4, #1
 8016946:	4620      	mov	r0, r4
 8016948:	bd70      	pop	{r4, r5, r6, pc}
 801694a:	6863      	ldr	r3, [r4, #4]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d0f9      	beq.n	8016944 <rmw_destroy_service+0x10>
 8016950:	2d00      	cmp	r5, #0
 8016952:	d0f7      	beq.n	8016944 <rmw_destroy_service+0x10>
 8016954:	6828      	ldr	r0, [r5, #0]
 8016956:	f000 fe27 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 801695a:	2800      	cmp	r0, #0
 801695c:	d0f2      	beq.n	8016944 <rmw_destroy_service+0x10>
 801695e:	686e      	ldr	r6, [r5, #4]
 8016960:	2e00      	cmp	r6, #0
 8016962:	d0ef      	beq.n	8016944 <rmw_destroy_service+0x10>
 8016964:	6864      	ldr	r4, [r4, #4]
 8016966:	6932      	ldr	r2, [r6, #16]
 8016968:	6920      	ldr	r0, [r4, #16]
 801696a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801696e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016972:	6819      	ldr	r1, [r3, #0]
 8016974:	f001 fc90 	bl	8018298 <uxr_buffer_cancel_data>
 8016978:	4602      	mov	r2, r0
 801697a:	6920      	ldr	r0, [r4, #16]
 801697c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016980:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016984:	f000 fcfe 	bl	8017384 <run_xrce_session>
 8016988:	6920      	ldr	r0, [r4, #16]
 801698a:	6932      	ldr	r2, [r6, #16]
 801698c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016990:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016994:	6819      	ldr	r1, [r3, #0]
 8016996:	f001 f91b 	bl	8017bd0 <uxr_buffer_delete_entity>
 801699a:	4602      	mov	r2, r0
 801699c:	6920      	ldr	r0, [r4, #16]
 801699e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80169a2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80169a6:	f000 fced 	bl	8017384 <run_xrce_session>
 80169aa:	4603      	mov	r3, r0
 80169ac:	4628      	mov	r0, r5
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	bf14      	ite	ne
 80169b2:	2400      	movne	r4, #0
 80169b4:	2402      	moveq	r4, #2
 80169b6:	f000 fbab 	bl	8017110 <rmw_uxrce_fini_service_memory>
 80169ba:	e7c4      	b.n	8016946 <rmw_destroy_service+0x12>

080169bc <rmw_service_response_publisher_get_actual_qos>:
 80169bc:	b181      	cbz	r1, 80169e0 <rmw_service_response_publisher_get_actual_qos+0x24>
 80169be:	4603      	mov	r3, r0
 80169c0:	b510      	push	{r4, lr}
 80169c2:	fab0 f480 	clz	r4, r0
 80169c6:	0964      	lsrs	r4, r4, #5
 80169c8:	b140      	cbz	r0, 80169dc <rmw_service_response_publisher_get_actual_qos+0x20>
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	4608      	mov	r0, r1
 80169ce:	2250      	movs	r2, #80	; 0x50
 80169d0:	f103 0120 	add.w	r1, r3, #32
 80169d4:	f00a fc73 	bl	80212be <memcpy>
 80169d8:	4620      	mov	r0, r4
 80169da:	bd10      	pop	{r4, pc}
 80169dc:	200b      	movs	r0, #11
 80169de:	bd10      	pop	{r4, pc}
 80169e0:	200b      	movs	r0, #11
 80169e2:	4770      	bx	lr

080169e4 <rmw_service_request_subscription_get_actual_qos>:
 80169e4:	b178      	cbz	r0, 8016a06 <rmw_service_request_subscription_get_actual_qos+0x22>
 80169e6:	b510      	push	{r4, lr}
 80169e8:	fab1 f481 	clz	r4, r1
 80169ec:	0964      	lsrs	r4, r4, #5
 80169ee:	b141      	cbz	r1, 8016a02 <rmw_service_request_subscription_get_actual_qos+0x1e>
 80169f0:	6843      	ldr	r3, [r0, #4]
 80169f2:	2250      	movs	r2, #80	; 0x50
 80169f4:	4608      	mov	r0, r1
 80169f6:	f103 0120 	add.w	r1, r3, #32
 80169fa:	f00a fc60 	bl	80212be <memcpy>
 80169fe:	4620      	mov	r0, r4
 8016a00:	bd10      	pop	{r4, pc}
 8016a02:	200b      	movs	r0, #11
 8016a04:	bd10      	pop	{r4, pc}
 8016a06:	200b      	movs	r0, #11
 8016a08:	4770      	bx	lr
 8016a0a:	bf00      	nop

08016a0c <rmw_create_subscription>:
 8016a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a10:	b08d      	sub	sp, #52	; 0x34
 8016a12:	2900      	cmp	r1, #0
 8016a14:	f000 80d8 	beq.w	8016bc8 <rmw_create_subscription+0x1bc>
 8016a18:	4604      	mov	r4, r0
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	f000 80d4 	beq.w	8016bc8 <rmw_create_subscription+0x1bc>
 8016a20:	6800      	ldr	r0, [r0, #0]
 8016a22:	460e      	mov	r6, r1
 8016a24:	4615      	mov	r5, r2
 8016a26:	461f      	mov	r7, r3
 8016a28:	f000 fdbe 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 8016a2c:	f080 0001 	eor.w	r0, r0, #1
 8016a30:	b2c0      	uxtb	r0, r0
 8016a32:	2800      	cmp	r0, #0
 8016a34:	f040 80c8 	bne.w	8016bc8 <rmw_create_subscription+0x1bc>
 8016a38:	2d00      	cmp	r5, #0
 8016a3a:	f000 80c5 	beq.w	8016bc8 <rmw_create_subscription+0x1bc>
 8016a3e:	782b      	ldrb	r3, [r5, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	f000 80c1 	beq.w	8016bc8 <rmw_create_subscription+0x1bc>
 8016a46:	2f00      	cmp	r7, #0
 8016a48:	f000 80be 	beq.w	8016bc8 <rmw_create_subscription+0x1bc>
 8016a4c:	4867      	ldr	r0, [pc, #412]	; (8016bec <rmw_create_subscription+0x1e0>)
 8016a4e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016a52:	f007 fc79 	bl	801e348 <get_memory>
 8016a56:	4604      	mov	r4, r0
 8016a58:	2800      	cmp	r0, #0
 8016a5a:	f000 80b6 	beq.w	8016bca <rmw_create_subscription+0x1be>
 8016a5e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016a62:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8016a66:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8016a6a:	f007 fcd5 	bl	801e418 <rmw_get_implementation_identifier>
 8016a6e:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8016a72:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8016a76:	4628      	mov	r0, r5
 8016a78:	f7e9 fc42 	bl	8000300 <strlen>
 8016a7c:	3001      	adds	r0, #1
 8016a7e:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8016a82:	283c      	cmp	r0, #60	; 0x3c
 8016a84:	f200 80a5 	bhi.w	8016bd2 <rmw_create_subscription+0x1c6>
 8016a88:	462b      	mov	r3, r5
 8016a8a:	4a59      	ldr	r2, [pc, #356]	; (8016bf0 <rmw_create_subscription+0x1e4>)
 8016a8c:	213c      	movs	r1, #60	; 0x3c
 8016a8e:	4650      	mov	r0, sl
 8016a90:	f00a f9b8 	bl	8020e04 <sniprintf>
 8016a94:	4639      	mov	r1, r7
 8016a96:	2250      	movs	r2, #80	; 0x50
 8016a98:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8016a9c:	f8c8 9020 	str.w	r9, [r8, #32]
 8016aa0:	f00a fc0d 	bl	80212be <memcpy>
 8016aa4:	4630      	mov	r0, r6
 8016aa6:	4953      	ldr	r1, [pc, #332]	; (8016bf4 <rmw_create_subscription+0x1e8>)
 8016aa8:	f000 fd8c 	bl	80175c4 <get_message_typesupport_handle>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	f000 8090 	beq.w	8016bd2 <rmw_create_subscription+0x1c6>
 8016ab2:	6842      	ldr	r2, [r0, #4]
 8016ab4:	f8c8 2018 	str.w	r2, [r8, #24]
 8016ab8:	2a00      	cmp	r2, #0
 8016aba:	f000 808a 	beq.w	8016bd2 <rmw_create_subscription+0x1c6>
 8016abe:	4629      	mov	r1, r5
 8016ac0:	463b      	mov	r3, r7
 8016ac2:	4648      	mov	r0, r9
 8016ac4:	f007 fcd8 	bl	801e478 <create_topic>
 8016ac8:	f8c8 001c 	str.w	r0, [r8, #28]
 8016acc:	2800      	cmp	r0, #0
 8016ace:	f000 8085 	beq.w	8016bdc <rmw_create_subscription+0x1d0>
 8016ad2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ad6:	2104      	movs	r1, #4
 8016ad8:	2506      	movs	r5, #6
 8016ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ade:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8016ae2:	1c42      	adds	r2, r0, #1
 8016ae4:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8016ae8:	f001 fb6c 	bl	80181c4 <uxr_object_id>
 8016aec:	f8c8 0010 	str.w	r0, [r8, #16]
 8016af0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016af4:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8016af8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016afc:	9500      	str	r5, [sp, #0]
 8016afe:	6819      	ldr	r1, [r3, #0]
 8016b00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016b04:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016b08:	f001 f946 	bl	8017d98 <uxr_buffer_create_subscriber_bin>
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016b12:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016b16:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016b1a:	f000 fc33 	bl	8017384 <run_xrce_session>
 8016b1e:	2800      	cmp	r0, #0
 8016b20:	d057      	beq.n	8016bd2 <rmw_create_subscription+0x1c6>
 8016b22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016b26:	4629      	mov	r1, r5
 8016b28:	ae08      	add	r6, sp, #32
 8016b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b2e:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8016b32:	1c42      	adds	r2, r0, #1
 8016b34:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8016b38:	f001 fb44 	bl	80181c4 <uxr_object_id>
 8016b3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016b40:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8016b44:	4639      	mov	r1, r7
 8016b46:	f8c8 0014 	str.w	r0, [r8, #20]
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8016b50:	9305      	str	r3, [sp, #20]
 8016b52:	f000 fc33 	bl	80173bc <convert_qos_profile>
 8016b56:	9503      	str	r5, [sp, #12]
 8016b58:	9b05      	ldr	r3, [sp, #20]
 8016b5a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016b5e:	9001      	str	r0, [sp, #4]
 8016b60:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8016b64:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016b68:	691b      	ldr	r3, [r3, #16]
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	f8db 1000 	ldr.w	r1, [fp]
 8016b70:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8016b74:	f001 f9b6 	bl	8017ee4 <uxr_buffer_create_datareader_bin>
 8016b78:	4602      	mov	r2, r0
 8016b7a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016b7e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016b82:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016b86:	f000 fbfd 	bl	8017384 <run_xrce_session>
 8016b8a:	b310      	cbz	r0, 8016bd2 <rmw_create_subscription+0x1c6>
 8016b8c:	7a3b      	ldrb	r3, [r7, #8]
 8016b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b92:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016b96:	2b02      	cmp	r3, #2
 8016b98:	920a      	str	r2, [sp, #40]	; 0x28
 8016b9a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016b9e:	f04f 0200 	mov.w	r2, #0
 8016ba2:	bf08      	it	eq
 8016ba4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8016ba8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016bac:	bf18      	it	ne
 8016bae:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8016bb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8016bb4:	9307      	str	r3, [sp, #28]
 8016bb6:	ab0a      	add	r3, sp, #40	; 0x28
 8016bb8:	9300      	str	r3, [sp, #0]
 8016bba:	9b07      	ldr	r3, [sp, #28]
 8016bbc:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016bc0:	6809      	ldr	r1, [r1, #0]
 8016bc2:	f001 fb2f 	bl	8018224 <uxr_buffer_request_data>
 8016bc6:	e000      	b.n	8016bca <rmw_create_subscription+0x1be>
 8016bc8:	2400      	movs	r4, #0
 8016bca:	4620      	mov	r0, r4
 8016bcc:	b00d      	add	sp, #52	; 0x34
 8016bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd2:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8016bd6:	b108      	cbz	r0, 8016bdc <rmw_create_subscription+0x1d0>
 8016bd8:	f000 fac6 	bl	8017168 <rmw_uxrce_fini_topic_memory>
 8016bdc:	4620      	mov	r0, r4
 8016bde:	2400      	movs	r4, #0
 8016be0:	f000 fa80 	bl	80170e4 <rmw_uxrce_fini_subscription_memory>
 8016be4:	4620      	mov	r0, r4
 8016be6:	b00d      	add	sp, #52	; 0x34
 8016be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bec:	20016e74 	.word	0x20016e74
 8016bf0:	08025794 	.word	0x08025794
 8016bf4:	08024a4c 	.word	0x08024a4c

08016bf8 <rmw_subscription_get_actual_qos>:
 8016bf8:	b178      	cbz	r0, 8016c1a <rmw_subscription_get_actual_qos+0x22>
 8016bfa:	b510      	push	{r4, lr}
 8016bfc:	fab1 f481 	clz	r4, r1
 8016c00:	0964      	lsrs	r4, r4, #5
 8016c02:	b141      	cbz	r1, 8016c16 <rmw_subscription_get_actual_qos+0x1e>
 8016c04:	6843      	ldr	r3, [r0, #4]
 8016c06:	2250      	movs	r2, #80	; 0x50
 8016c08:	4608      	mov	r0, r1
 8016c0a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8016c0e:	f00a fb56 	bl	80212be <memcpy>
 8016c12:	4620      	mov	r0, r4
 8016c14:	bd10      	pop	{r4, pc}
 8016c16:	200b      	movs	r0, #11
 8016c18:	bd10      	pop	{r4, pc}
 8016c1a:	200b      	movs	r0, #11
 8016c1c:	4770      	bx	lr
 8016c1e:	bf00      	nop

08016c20 <rmw_destroy_subscription>:
 8016c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c24:	b128      	cbz	r0, 8016c32 <rmw_destroy_subscription+0x12>
 8016c26:	4604      	mov	r4, r0
 8016c28:	6800      	ldr	r0, [r0, #0]
 8016c2a:	460d      	mov	r5, r1
 8016c2c:	f000 fcbc 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 8016c30:	b918      	cbnz	r0, 8016c3a <rmw_destroy_subscription+0x1a>
 8016c32:	2401      	movs	r4, #1
 8016c34:	4620      	mov	r0, r4
 8016c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c3a:	6863      	ldr	r3, [r4, #4]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d0f8      	beq.n	8016c32 <rmw_destroy_subscription+0x12>
 8016c40:	fab5 f485 	clz	r4, r5
 8016c44:	0964      	lsrs	r4, r4, #5
 8016c46:	2d00      	cmp	r5, #0
 8016c48:	d0f3      	beq.n	8016c32 <rmw_destroy_subscription+0x12>
 8016c4a:	6828      	ldr	r0, [r5, #0]
 8016c4c:	f000 fcac 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	d0ee      	beq.n	8016c32 <rmw_destroy_subscription+0x12>
 8016c54:	686e      	ldr	r6, [r5, #4]
 8016c56:	2e00      	cmp	r6, #0
 8016c58:	d0eb      	beq.n	8016c32 <rmw_destroy_subscription+0x12>
 8016c5a:	6a37      	ldr	r7, [r6, #32]
 8016c5c:	6972      	ldr	r2, [r6, #20]
 8016c5e:	6938      	ldr	r0, [r7, #16]
 8016c60:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016c64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016c68:	6819      	ldr	r1, [r3, #0]
 8016c6a:	f001 fb15 	bl	8018298 <uxr_buffer_cancel_data>
 8016c6e:	4602      	mov	r2, r0
 8016c70:	6938      	ldr	r0, [r7, #16]
 8016c72:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016c76:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016c7a:	f000 fb83 	bl	8017384 <run_xrce_session>
 8016c7e:	69f0      	ldr	r0, [r6, #28]
 8016c80:	f007 fc4a 	bl	801e518 <destroy_topic>
 8016c84:	6a33      	ldr	r3, [r6, #32]
 8016c86:	6972      	ldr	r2, [r6, #20]
 8016c88:	6918      	ldr	r0, [r3, #16]
 8016c8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016c8e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016c92:	6819      	ldr	r1, [r3, #0]
 8016c94:	f000 ff9c 	bl	8017bd0 <uxr_buffer_delete_entity>
 8016c98:	6a33      	ldr	r3, [r6, #32]
 8016c9a:	4680      	mov	r8, r0
 8016c9c:	6932      	ldr	r2, [r6, #16]
 8016c9e:	6918      	ldr	r0, [r3, #16]
 8016ca0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016ca4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016ca8:	6819      	ldr	r1, [r3, #0]
 8016caa:	f000 ff91 	bl	8017bd0 <uxr_buffer_delete_entity>
 8016cae:	4606      	mov	r6, r0
 8016cb0:	6938      	ldr	r0, [r7, #16]
 8016cb2:	4642      	mov	r2, r8
 8016cb4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016cb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016cbc:	f000 fb62 	bl	8017384 <run_xrce_session>
 8016cc0:	693f      	ldr	r7, [r7, #16]
 8016cc2:	4632      	mov	r2, r6
 8016cc4:	4606      	mov	r6, r0
 8016cc6:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016cca:	4638      	mov	r0, r7
 8016ccc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016cd0:	f000 fb58 	bl	8017384 <run_xrce_session>
 8016cd4:	b126      	cbz	r6, 8016ce0 <rmw_destroy_subscription+0xc0>
 8016cd6:	b118      	cbz	r0, 8016ce0 <rmw_destroy_subscription+0xc0>
 8016cd8:	4628      	mov	r0, r5
 8016cda:	f000 fa03 	bl	80170e4 <rmw_uxrce_fini_subscription_memory>
 8016cde:	e7a9      	b.n	8016c34 <rmw_destroy_subscription+0x14>
 8016ce0:	2402      	movs	r4, #2
 8016ce2:	e7f9      	b.n	8016cd8 <rmw_destroy_subscription+0xb8>

08016ce4 <rmw_take_with_info>:
 8016ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	6800      	ldr	r0, [r0, #0]
 8016cea:	b089      	sub	sp, #36	; 0x24
 8016cec:	460f      	mov	r7, r1
 8016cee:	4615      	mov	r5, r2
 8016cf0:	b128      	cbz	r0, 8016cfe <rmw_take_with_info+0x1a>
 8016cf2:	4b24      	ldr	r3, [pc, #144]	; (8016d84 <rmw_take_with_info+0xa0>)
 8016cf4:	6819      	ldr	r1, [r3, #0]
 8016cf6:	f7e9 faa3 	bl	8000240 <strcmp>
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d13e      	bne.n	8016d7c <rmw_take_with_info+0x98>
 8016cfe:	b305      	cbz	r5, 8016d42 <rmw_take_with_info+0x5e>
 8016d00:	2300      	movs	r3, #0
 8016d02:	6864      	ldr	r4, [r4, #4]
 8016d04:	702b      	strb	r3, [r5, #0]
 8016d06:	f000 fabf 	bl	8017288 <rmw_uxrce_clean_expired_static_input_buffer>
 8016d0a:	4620      	mov	r0, r4
 8016d0c:	f000 fa92 	bl	8017234 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016d10:	4606      	mov	r6, r0
 8016d12:	b1f0      	cbz	r0, 8016d52 <rmw_take_with_info+0x6e>
 8016d14:	6881      	ldr	r1, [r0, #8]
 8016d16:	4668      	mov	r0, sp
 8016d18:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016d1c:	3110      	adds	r1, #16
 8016d1e:	f7fc fc97 	bl	8013650 <ucdr_init_buffer>
 8016d22:	69a3      	ldr	r3, [r4, #24]
 8016d24:	4639      	mov	r1, r7
 8016d26:	4668      	mov	r0, sp
 8016d28:	68db      	ldr	r3, [r3, #12]
 8016d2a:	4798      	blx	r3
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	4631      	mov	r1, r6
 8016d30:	4815      	ldr	r0, [pc, #84]	; (8016d88 <rmw_take_with_info+0xa4>)
 8016d32:	f007 fb19 	bl	801e368 <put_memory>
 8016d36:	702c      	strb	r4, [r5, #0]
 8016d38:	f084 0001 	eor.w	r0, r4, #1
 8016d3c:	b2c0      	uxtb	r0, r0
 8016d3e:	b009      	add	sp, #36	; 0x24
 8016d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d42:	6864      	ldr	r4, [r4, #4]
 8016d44:	f000 faa0 	bl	8017288 <rmw_uxrce_clean_expired_static_input_buffer>
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f000 fa73 	bl	8017234 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016d4e:	4605      	mov	r5, r0
 8016d50:	b910      	cbnz	r0, 8016d58 <rmw_take_with_info+0x74>
 8016d52:	2001      	movs	r0, #1
 8016d54:	b009      	add	sp, #36	; 0x24
 8016d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d58:	68a9      	ldr	r1, [r5, #8]
 8016d5a:	4668      	mov	r0, sp
 8016d5c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016d60:	3110      	adds	r1, #16
 8016d62:	f7fc fc75 	bl	8013650 <ucdr_init_buffer>
 8016d66:	69a3      	ldr	r3, [r4, #24]
 8016d68:	4639      	mov	r1, r7
 8016d6a:	4668      	mov	r0, sp
 8016d6c:	68db      	ldr	r3, [r3, #12]
 8016d6e:	4798      	blx	r3
 8016d70:	4629      	mov	r1, r5
 8016d72:	4604      	mov	r4, r0
 8016d74:	4804      	ldr	r0, [pc, #16]	; (8016d88 <rmw_take_with_info+0xa4>)
 8016d76:	f007 faf7 	bl	801e368 <put_memory>
 8016d7a:	e7dd      	b.n	8016d38 <rmw_take_with_info+0x54>
 8016d7c:	200c      	movs	r0, #12
 8016d7e:	b009      	add	sp, #36	; 0x24
 8016d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d82:	bf00      	nop
 8016d84:	08025df4 	.word	0x08025df4
 8016d88:	20016e64 	.word	0x20016e64

08016d8c <rmw_uxrce_transport_init>:
 8016d8c:	b508      	push	{r3, lr}
 8016d8e:	b108      	cbz	r0, 8016d94 <rmw_uxrce_transport_init+0x8>
 8016d90:	f100 0210 	add.w	r2, r0, #16
 8016d94:	b139      	cbz	r1, 8016da6 <rmw_uxrce_transport_init+0x1a>
 8016d96:	6949      	ldr	r1, [r1, #20]
 8016d98:	4610      	mov	r0, r2
 8016d9a:	f001 f9db 	bl	8018154 <uxr_init_custom_transport>
 8016d9e:	f080 0001 	eor.w	r0, r0, #1
 8016da2:	b2c0      	uxtb	r0, r0
 8016da4:	bd08      	pop	{r3, pc}
 8016da6:	4b04      	ldr	r3, [pc, #16]	; (8016db8 <rmw_uxrce_transport_init+0x2c>)
 8016da8:	4610      	mov	r0, r2
 8016daa:	6859      	ldr	r1, [r3, #4]
 8016dac:	f001 f9d2 	bl	8018154 <uxr_init_custom_transport>
 8016db0:	f080 0001 	eor.w	r0, r0, #1
 8016db4:	b2c0      	uxtb	r0, r0
 8016db6:	bd08      	pop	{r3, pc}
 8016db8:	200123bc 	.word	0x200123bc

08016dbc <rmw_uxrce_init_service_memory>:
 8016dbc:	b1e2      	cbz	r2, 8016df8 <rmw_uxrce_init_service_memory+0x3c>
 8016dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dc2:	7b05      	ldrb	r5, [r0, #12]
 8016dc4:	4606      	mov	r6, r0
 8016dc6:	b9ad      	cbnz	r5, 8016df4 <rmw_uxrce_init_service_memory+0x38>
 8016dc8:	23c8      	movs	r3, #200	; 0xc8
 8016dca:	4617      	mov	r7, r2
 8016dcc:	460c      	mov	r4, r1
 8016dce:	46a8      	mov	r8, r5
 8016dd0:	6083      	str	r3, [r0, #8]
 8016dd2:	f240 1301 	movw	r3, #257	; 0x101
 8016dd6:	e9c0 5500 	strd	r5, r5, [r0]
 8016dda:	8183      	strh	r3, [r0, #12]
 8016ddc:	3501      	adds	r5, #1
 8016dde:	4621      	mov	r1, r4
 8016de0:	4630      	mov	r0, r6
 8016de2:	f007 fac1 	bl	801e368 <put_memory>
 8016de6:	42af      	cmp	r7, r5
 8016de8:	60a4      	str	r4, [r4, #8]
 8016dea:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016dee:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016df2:	d1f3      	bne.n	8016ddc <rmw_uxrce_init_service_memory+0x20>
 8016df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df8:	4770      	bx	lr
 8016dfa:	bf00      	nop

08016dfc <rmw_uxrce_init_client_memory>:
 8016dfc:	b1e2      	cbz	r2, 8016e38 <rmw_uxrce_init_client_memory+0x3c>
 8016dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e02:	7b05      	ldrb	r5, [r0, #12]
 8016e04:	4606      	mov	r6, r0
 8016e06:	b9ad      	cbnz	r5, 8016e34 <rmw_uxrce_init_client_memory+0x38>
 8016e08:	23c8      	movs	r3, #200	; 0xc8
 8016e0a:	4617      	mov	r7, r2
 8016e0c:	460c      	mov	r4, r1
 8016e0e:	46a8      	mov	r8, r5
 8016e10:	6083      	str	r3, [r0, #8]
 8016e12:	f240 1301 	movw	r3, #257	; 0x101
 8016e16:	e9c0 5500 	strd	r5, r5, [r0]
 8016e1a:	8183      	strh	r3, [r0, #12]
 8016e1c:	3501      	adds	r5, #1
 8016e1e:	4621      	mov	r1, r4
 8016e20:	4630      	mov	r0, r6
 8016e22:	f007 faa1 	bl	801e368 <put_memory>
 8016e26:	42af      	cmp	r7, r5
 8016e28:	60a4      	str	r4, [r4, #8]
 8016e2a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8016e2e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8016e32:	d1f3      	bne.n	8016e1c <rmw_uxrce_init_client_memory+0x20>
 8016e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e38:	4770      	bx	lr
 8016e3a:	bf00      	nop

08016e3c <rmw_uxrce_init_publisher_memory>:
 8016e3c:	b1e2      	cbz	r2, 8016e78 <rmw_uxrce_init_publisher_memory+0x3c>
 8016e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e42:	7b05      	ldrb	r5, [r0, #12]
 8016e44:	4606      	mov	r6, r0
 8016e46:	b9ad      	cbnz	r5, 8016e74 <rmw_uxrce_init_publisher_memory+0x38>
 8016e48:	23d8      	movs	r3, #216	; 0xd8
 8016e4a:	4617      	mov	r7, r2
 8016e4c:	460c      	mov	r4, r1
 8016e4e:	46a8      	mov	r8, r5
 8016e50:	6083      	str	r3, [r0, #8]
 8016e52:	f240 1301 	movw	r3, #257	; 0x101
 8016e56:	e9c0 5500 	strd	r5, r5, [r0]
 8016e5a:	8183      	strh	r3, [r0, #12]
 8016e5c:	3501      	adds	r5, #1
 8016e5e:	4621      	mov	r1, r4
 8016e60:	4630      	mov	r0, r6
 8016e62:	f007 fa81 	bl	801e368 <put_memory>
 8016e66:	42af      	cmp	r7, r5
 8016e68:	60a4      	str	r4, [r4, #8]
 8016e6a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016e6e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016e72:	d1f3      	bne.n	8016e5c <rmw_uxrce_init_publisher_memory+0x20>
 8016e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop

08016e7c <rmw_uxrce_init_subscription_memory>:
 8016e7c:	b1e2      	cbz	r2, 8016eb8 <rmw_uxrce_init_subscription_memory+0x3c>
 8016e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e82:	7b05      	ldrb	r5, [r0, #12]
 8016e84:	4606      	mov	r6, r0
 8016e86:	b9ad      	cbnz	r5, 8016eb4 <rmw_uxrce_init_subscription_memory+0x38>
 8016e88:	23d8      	movs	r3, #216	; 0xd8
 8016e8a:	4617      	mov	r7, r2
 8016e8c:	460c      	mov	r4, r1
 8016e8e:	46a8      	mov	r8, r5
 8016e90:	6083      	str	r3, [r0, #8]
 8016e92:	f240 1301 	movw	r3, #257	; 0x101
 8016e96:	e9c0 5500 	strd	r5, r5, [r0]
 8016e9a:	8183      	strh	r3, [r0, #12]
 8016e9c:	3501      	adds	r5, #1
 8016e9e:	4621      	mov	r1, r4
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	f007 fa61 	bl	801e368 <put_memory>
 8016ea6:	42af      	cmp	r7, r5
 8016ea8:	60a4      	str	r4, [r4, #8]
 8016eaa:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8016eae:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8016eb2:	d1f3      	bne.n	8016e9c <rmw_uxrce_init_subscription_memory+0x20>
 8016eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb8:	4770      	bx	lr
 8016eba:	bf00      	nop

08016ebc <rmw_uxrce_init_node_memory>:
 8016ebc:	b1e2      	cbz	r2, 8016ef8 <rmw_uxrce_init_node_memory+0x3c>
 8016ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec2:	7b05      	ldrb	r5, [r0, #12]
 8016ec4:	4606      	mov	r6, r0
 8016ec6:	b9ad      	cbnz	r5, 8016ef4 <rmw_uxrce_init_node_memory+0x38>
 8016ec8:	23a4      	movs	r3, #164	; 0xa4
 8016eca:	4617      	mov	r7, r2
 8016ecc:	460c      	mov	r4, r1
 8016ece:	46a8      	mov	r8, r5
 8016ed0:	6083      	str	r3, [r0, #8]
 8016ed2:	f240 1301 	movw	r3, #257	; 0x101
 8016ed6:	e9c0 5500 	strd	r5, r5, [r0]
 8016eda:	8183      	strh	r3, [r0, #12]
 8016edc:	3501      	adds	r5, #1
 8016ede:	4621      	mov	r1, r4
 8016ee0:	4630      	mov	r0, r6
 8016ee2:	f007 fa41 	bl	801e368 <put_memory>
 8016ee6:	42af      	cmp	r7, r5
 8016ee8:	60a4      	str	r4, [r4, #8]
 8016eea:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8016eee:	f804 8c98 	strb.w	r8, [r4, #-152]
 8016ef2:	d1f3      	bne.n	8016edc <rmw_uxrce_init_node_memory+0x20>
 8016ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ef8:	4770      	bx	lr
 8016efa:	bf00      	nop

08016efc <rmw_uxrce_init_session_memory>:
 8016efc:	b1ea      	cbz	r2, 8016f3a <rmw_uxrce_init_session_memory+0x3e>
 8016efe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f02:	7b05      	ldrb	r5, [r0, #12]
 8016f04:	4606      	mov	r6, r0
 8016f06:	b9b5      	cbnz	r5, 8016f36 <rmw_uxrce_init_session_memory+0x3a>
 8016f08:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8016f0c:	f240 1301 	movw	r3, #257	; 0x101
 8016f10:	4617      	mov	r7, r2
 8016f12:	460c      	mov	r4, r1
 8016f14:	46a9      	mov	r9, r5
 8016f16:	f8c0 8008 	str.w	r8, [r0, #8]
 8016f1a:	8183      	strh	r3, [r0, #12]
 8016f1c:	e9c0 5500 	strd	r5, r5, [r0]
 8016f20:	3501      	adds	r5, #1
 8016f22:	4621      	mov	r1, r4
 8016f24:	4630      	mov	r0, r6
 8016f26:	f007 fa1f 	bl	801e368 <put_memory>
 8016f2a:	42af      	cmp	r7, r5
 8016f2c:	60a4      	str	r4, [r4, #8]
 8016f2e:	f884 900c 	strb.w	r9, [r4, #12]
 8016f32:	4444      	add	r4, r8
 8016f34:	d1f4      	bne.n	8016f20 <rmw_uxrce_init_session_memory+0x24>
 8016f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f3a:	4770      	bx	lr

08016f3c <rmw_uxrce_init_topic_memory>:
 8016f3c:	b1e2      	cbz	r2, 8016f78 <rmw_uxrce_init_topic_memory+0x3c>
 8016f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f42:	7b05      	ldrb	r5, [r0, #12]
 8016f44:	4606      	mov	r6, r0
 8016f46:	b9ad      	cbnz	r5, 8016f74 <rmw_uxrce_init_topic_memory+0x38>
 8016f48:	231c      	movs	r3, #28
 8016f4a:	4617      	mov	r7, r2
 8016f4c:	460c      	mov	r4, r1
 8016f4e:	46a8      	mov	r8, r5
 8016f50:	6083      	str	r3, [r0, #8]
 8016f52:	f240 1301 	movw	r3, #257	; 0x101
 8016f56:	e9c0 5500 	strd	r5, r5, [r0]
 8016f5a:	8183      	strh	r3, [r0, #12]
 8016f5c:	3501      	adds	r5, #1
 8016f5e:	4621      	mov	r1, r4
 8016f60:	4630      	mov	r0, r6
 8016f62:	f007 fa01 	bl	801e368 <put_memory>
 8016f66:	42af      	cmp	r7, r5
 8016f68:	60a4      	str	r4, [r4, #8]
 8016f6a:	f104 041c 	add.w	r4, r4, #28
 8016f6e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8016f72:	d1f3      	bne.n	8016f5c <rmw_uxrce_init_topic_memory+0x20>
 8016f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f78:	4770      	bx	lr
 8016f7a:	bf00      	nop

08016f7c <rmw_uxrce_init_static_input_buffer_memory>:
 8016f7c:	b1ea      	cbz	r2, 8016fba <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8016f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f82:	7b05      	ldrb	r5, [r0, #12]
 8016f84:	4606      	mov	r6, r0
 8016f86:	b9b5      	cbnz	r5, 8016fb6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8016f88:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8016f8c:	4617      	mov	r7, r2
 8016f8e:	460c      	mov	r4, r1
 8016f90:	46a8      	mov	r8, r5
 8016f92:	6083      	str	r3, [r0, #8]
 8016f94:	f240 1301 	movw	r3, #257	; 0x101
 8016f98:	e9c0 5500 	strd	r5, r5, [r0]
 8016f9c:	8183      	strh	r3, [r0, #12]
 8016f9e:	3501      	adds	r5, #1
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	4630      	mov	r0, r6
 8016fa4:	f007 f9e0 	bl	801e368 <put_memory>
 8016fa8:	42af      	cmp	r7, r5
 8016faa:	60a4      	str	r4, [r4, #8]
 8016fac:	f884 800c 	strb.w	r8, [r4, #12]
 8016fb0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8016fb4:	d1f3      	bne.n	8016f9e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8016fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fba:	4770      	bx	lr

08016fbc <rmw_uxrce_init_init_options_impl_memory>:
 8016fbc:	b1e2      	cbz	r2, 8016ff8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8016fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc2:	7b05      	ldrb	r5, [r0, #12]
 8016fc4:	4606      	mov	r6, r0
 8016fc6:	b9ad      	cbnz	r5, 8016ff4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8016fc8:	232c      	movs	r3, #44	; 0x2c
 8016fca:	4617      	mov	r7, r2
 8016fcc:	460c      	mov	r4, r1
 8016fce:	46a8      	mov	r8, r5
 8016fd0:	6083      	str	r3, [r0, #8]
 8016fd2:	f240 1301 	movw	r3, #257	; 0x101
 8016fd6:	e9c0 5500 	strd	r5, r5, [r0]
 8016fda:	8183      	strh	r3, [r0, #12]
 8016fdc:	3501      	adds	r5, #1
 8016fde:	4621      	mov	r1, r4
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	f007 f9c1 	bl	801e368 <put_memory>
 8016fe6:	42af      	cmp	r7, r5
 8016fe8:	60a4      	str	r4, [r4, #8]
 8016fea:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8016fee:	f804 8c20 	strb.w	r8, [r4, #-32]
 8016ff2:	d1f3      	bne.n	8016fdc <rmw_uxrce_init_init_options_impl_memory+0x20>
 8016ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ff8:	4770      	bx	lr
 8016ffa:	bf00      	nop

08016ffc <rmw_uxrce_init_wait_set_memory>:
 8016ffc:	b1e2      	cbz	r2, 8017038 <rmw_uxrce_init_wait_set_memory+0x3c>
 8016ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017002:	7b05      	ldrb	r5, [r0, #12]
 8017004:	4606      	mov	r6, r0
 8017006:	b9ad      	cbnz	r5, 8017034 <rmw_uxrce_init_wait_set_memory+0x38>
 8017008:	231c      	movs	r3, #28
 801700a:	4617      	mov	r7, r2
 801700c:	460c      	mov	r4, r1
 801700e:	46a8      	mov	r8, r5
 8017010:	6083      	str	r3, [r0, #8]
 8017012:	f240 1301 	movw	r3, #257	; 0x101
 8017016:	e9c0 5500 	strd	r5, r5, [r0]
 801701a:	8183      	strh	r3, [r0, #12]
 801701c:	3501      	adds	r5, #1
 801701e:	4621      	mov	r1, r4
 8017020:	4630      	mov	r0, r6
 8017022:	f007 f9a1 	bl	801e368 <put_memory>
 8017026:	42af      	cmp	r7, r5
 8017028:	60a4      	str	r4, [r4, #8]
 801702a:	f104 041c 	add.w	r4, r4, #28
 801702e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8017032:	d1f3      	bne.n	801701c <rmw_uxrce_init_wait_set_memory+0x20>
 8017034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017038:	4770      	bx	lr
 801703a:	bf00      	nop

0801703c <rmw_uxrce_init_guard_condition_memory>:
 801703c:	b1e2      	cbz	r2, 8017078 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801703e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017042:	7b05      	ldrb	r5, [r0, #12]
 8017044:	4606      	mov	r6, r0
 8017046:	b9ad      	cbnz	r5, 8017074 <rmw_uxrce_init_guard_condition_memory+0x38>
 8017048:	2320      	movs	r3, #32
 801704a:	4617      	mov	r7, r2
 801704c:	460c      	mov	r4, r1
 801704e:	46a8      	mov	r8, r5
 8017050:	6083      	str	r3, [r0, #8]
 8017052:	f240 1301 	movw	r3, #257	; 0x101
 8017056:	e9c0 5500 	strd	r5, r5, [r0]
 801705a:	8183      	strh	r3, [r0, #12]
 801705c:	3501      	adds	r5, #1
 801705e:	4621      	mov	r1, r4
 8017060:	4630      	mov	r0, r6
 8017062:	f007 f981 	bl	801e368 <put_memory>
 8017066:	42af      	cmp	r7, r5
 8017068:	60a4      	str	r4, [r4, #8]
 801706a:	f104 0420 	add.w	r4, r4, #32
 801706e:	f804 8c14 	strb.w	r8, [r4, #-20]
 8017072:	d1f3      	bne.n	801705c <rmw_uxrce_init_guard_condition_memory+0x20>
 8017074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017078:	4770      	bx	lr
 801707a:	bf00      	nop

0801707c <rmw_uxrce_fini_session_memory>:
 801707c:	4601      	mov	r1, r0
 801707e:	4801      	ldr	r0, [pc, #4]	; (8017084 <rmw_uxrce_fini_session_memory+0x8>)
 8017080:	f007 b972 	b.w	801e368 <put_memory>
 8017084:	20016e54 	.word	0x20016e54

08017088 <rmw_uxrce_fini_node_memory>:
 8017088:	b538      	push	{r3, r4, r5, lr}
 801708a:	4604      	mov	r4, r0
 801708c:	6800      	ldr	r0, [r0, #0]
 801708e:	b128      	cbz	r0, 801709c <rmw_uxrce_fini_node_memory+0x14>
 8017090:	4b07      	ldr	r3, [pc, #28]	; (80170b0 <rmw_uxrce_fini_node_memory+0x28>)
 8017092:	6819      	ldr	r1, [r3, #0]
 8017094:	f7e9 f8d4 	bl	8000240 <strcmp>
 8017098:	b940      	cbnz	r0, 80170ac <rmw_uxrce_fini_node_memory+0x24>
 801709a:	6020      	str	r0, [r4, #0]
 801709c:	6861      	ldr	r1, [r4, #4]
 801709e:	b129      	cbz	r1, 80170ac <rmw_uxrce_fini_node_memory+0x24>
 80170a0:	2500      	movs	r5, #0
 80170a2:	4804      	ldr	r0, [pc, #16]	; (80170b4 <rmw_uxrce_fini_node_memory+0x2c>)
 80170a4:	610d      	str	r5, [r1, #16]
 80170a6:	f007 f95f 	bl	801e368 <put_memory>
 80170aa:	6065      	str	r5, [r4, #4]
 80170ac:	bd38      	pop	{r3, r4, r5, pc}
 80170ae:	bf00      	nop
 80170b0:	08025df4 	.word	0x08025df4
 80170b4:	20016e24 	.word	0x20016e24

080170b8 <rmw_uxrce_fini_publisher_memory>:
 80170b8:	b510      	push	{r4, lr}
 80170ba:	4604      	mov	r4, r0
 80170bc:	6800      	ldr	r0, [r0, #0]
 80170be:	b128      	cbz	r0, 80170cc <rmw_uxrce_fini_publisher_memory+0x14>
 80170c0:	4b06      	ldr	r3, [pc, #24]	; (80170dc <rmw_uxrce_fini_publisher_memory+0x24>)
 80170c2:	6819      	ldr	r1, [r3, #0]
 80170c4:	f7e9 f8bc 	bl	8000240 <strcmp>
 80170c8:	b938      	cbnz	r0, 80170da <rmw_uxrce_fini_publisher_memory+0x22>
 80170ca:	6020      	str	r0, [r4, #0]
 80170cc:	6861      	ldr	r1, [r4, #4]
 80170ce:	b121      	cbz	r1, 80170da <rmw_uxrce_fini_publisher_memory+0x22>
 80170d0:	4803      	ldr	r0, [pc, #12]	; (80170e0 <rmw_uxrce_fini_publisher_memory+0x28>)
 80170d2:	f007 f949 	bl	801e368 <put_memory>
 80170d6:	2300      	movs	r3, #0
 80170d8:	6063      	str	r3, [r4, #4]
 80170da:	bd10      	pop	{r4, pc}
 80170dc:	08025df4 	.word	0x08025df4
 80170e0:	20016e34 	.word	0x20016e34

080170e4 <rmw_uxrce_fini_subscription_memory>:
 80170e4:	b510      	push	{r4, lr}
 80170e6:	4604      	mov	r4, r0
 80170e8:	6800      	ldr	r0, [r0, #0]
 80170ea:	b128      	cbz	r0, 80170f8 <rmw_uxrce_fini_subscription_memory+0x14>
 80170ec:	4b06      	ldr	r3, [pc, #24]	; (8017108 <rmw_uxrce_fini_subscription_memory+0x24>)
 80170ee:	6819      	ldr	r1, [r3, #0]
 80170f0:	f7e9 f8a6 	bl	8000240 <strcmp>
 80170f4:	b938      	cbnz	r0, 8017106 <rmw_uxrce_fini_subscription_memory+0x22>
 80170f6:	6020      	str	r0, [r4, #0]
 80170f8:	6861      	ldr	r1, [r4, #4]
 80170fa:	b121      	cbz	r1, 8017106 <rmw_uxrce_fini_subscription_memory+0x22>
 80170fc:	4803      	ldr	r0, [pc, #12]	; (801710c <rmw_uxrce_fini_subscription_memory+0x28>)
 80170fe:	f007 f933 	bl	801e368 <put_memory>
 8017102:	2300      	movs	r3, #0
 8017104:	6063      	str	r3, [r4, #4]
 8017106:	bd10      	pop	{r4, pc}
 8017108:	08025df4 	.word	0x08025df4
 801710c:	20016e74 	.word	0x20016e74

08017110 <rmw_uxrce_fini_service_memory>:
 8017110:	b510      	push	{r4, lr}
 8017112:	4604      	mov	r4, r0
 8017114:	6800      	ldr	r0, [r0, #0]
 8017116:	b128      	cbz	r0, 8017124 <rmw_uxrce_fini_service_memory+0x14>
 8017118:	4b06      	ldr	r3, [pc, #24]	; (8017134 <rmw_uxrce_fini_service_memory+0x24>)
 801711a:	6819      	ldr	r1, [r3, #0]
 801711c:	f7e9 f890 	bl	8000240 <strcmp>
 8017120:	b938      	cbnz	r0, 8017132 <rmw_uxrce_fini_service_memory+0x22>
 8017122:	6020      	str	r0, [r4, #0]
 8017124:	6861      	ldr	r1, [r4, #4]
 8017126:	b121      	cbz	r1, 8017132 <rmw_uxrce_fini_service_memory+0x22>
 8017128:	4803      	ldr	r0, [pc, #12]	; (8017138 <rmw_uxrce_fini_service_memory+0x28>)
 801712a:	f007 f91d 	bl	801e368 <put_memory>
 801712e:	2300      	movs	r3, #0
 8017130:	6063      	str	r3, [r4, #4]
 8017132:	bd10      	pop	{r4, pc}
 8017134:	08025df4 	.word	0x08025df4
 8017138:	20016e44 	.word	0x20016e44

0801713c <rmw_uxrce_fini_client_memory>:
 801713c:	b510      	push	{r4, lr}
 801713e:	4604      	mov	r4, r0
 8017140:	6800      	ldr	r0, [r0, #0]
 8017142:	b128      	cbz	r0, 8017150 <rmw_uxrce_fini_client_memory+0x14>
 8017144:	4b06      	ldr	r3, [pc, #24]	; (8017160 <rmw_uxrce_fini_client_memory+0x24>)
 8017146:	6819      	ldr	r1, [r3, #0]
 8017148:	f7e9 f87a 	bl	8000240 <strcmp>
 801714c:	b938      	cbnz	r0, 801715e <rmw_uxrce_fini_client_memory+0x22>
 801714e:	6020      	str	r0, [r4, #0]
 8017150:	6861      	ldr	r1, [r4, #4]
 8017152:	b121      	cbz	r1, 801715e <rmw_uxrce_fini_client_memory+0x22>
 8017154:	4803      	ldr	r0, [pc, #12]	; (8017164 <rmw_uxrce_fini_client_memory+0x28>)
 8017156:	f007 f907 	bl	801e368 <put_memory>
 801715a:	2300      	movs	r3, #0
 801715c:	6063      	str	r3, [r4, #4]
 801715e:	bd10      	pop	{r4, pc}
 8017160:	08025df4 	.word	0x08025df4
 8017164:	20012554 	.word	0x20012554

08017168 <rmw_uxrce_fini_topic_memory>:
 8017168:	b510      	push	{r4, lr}
 801716a:	4604      	mov	r4, r0
 801716c:	4803      	ldr	r0, [pc, #12]	; (801717c <rmw_uxrce_fini_topic_memory+0x14>)
 801716e:	4621      	mov	r1, r4
 8017170:	f007 f8fa 	bl	801e368 <put_memory>
 8017174:	2300      	movs	r3, #0
 8017176:	61a3      	str	r3, [r4, #24]
 8017178:	bd10      	pop	{r4, pc}
 801717a:	bf00      	nop
 801717c:	20016e84 	.word	0x20016e84

08017180 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8017180:	b082      	sub	sp, #8
 8017182:	492b      	ldr	r1, [pc, #172]	; (8017230 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8017184:	b530      	push	{r4, r5, lr}
 8017186:	680d      	ldr	r5, [r1, #0]
 8017188:	ac03      	add	r4, sp, #12
 801718a:	e884 000c 	stmia.w	r4, {r2, r3}
 801718e:	461c      	mov	r4, r3
 8017190:	2d00      	cmp	r5, #0
 8017192:	d04b      	beq.n	801722c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8017194:	462b      	mov	r3, r5
 8017196:	2100      	movs	r1, #0
 8017198:	689a      	ldr	r2, [r3, #8]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80171a0:	4290      	cmp	r0, r2
 80171a2:	bf08      	it	eq
 80171a4:	3101      	addeq	r1, #1
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d1f6      	bne.n	8017198 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80171aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80171ae:	2b02      	cmp	r3, #2
 80171b0:	d029      	beq.n	8017206 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80171b2:	d820      	bhi.n	80171f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 80171b4:	428c      	cmp	r4, r1
 80171b6:	d828      	bhi.n	801720a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80171b8:	fab4 f284 	clz	r2, r4
 80171bc:	0952      	lsrs	r2, r2, #5
 80171be:	b324      	cbz	r4, 801720a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 80171c0:	b1dd      	cbz	r5, 80171fa <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 80171c2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80171c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80171ca:	e001      	b.n	80171d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 80171cc:	686d      	ldr	r5, [r5, #4]
 80171ce:	b1ad      	cbz	r5, 80171fc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80171d0:	68ab      	ldr	r3, [r5, #8]
 80171d2:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 80171d6:	4288      	cmp	r0, r1
 80171d8:	d1f8      	bne.n	80171cc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80171da:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 80171de:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80171e2:	4561      	cmp	r1, ip
 80171e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80171e8:	eb73 0e04 	sbcs.w	lr, r3, r4
 80171ec:	daee      	bge.n	80171cc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80171ee:	468c      	mov	ip, r1
 80171f0:	461c      	mov	r4, r3
 80171f2:	462a      	mov	r2, r5
 80171f4:	e7ea      	b.n	80171cc <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80171f6:	2b03      	cmp	r3, #3
 80171f8:	d0dc      	beq.n	80171b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 80171fa:	2200      	movs	r2, #0
 80171fc:	4610      	mov	r0, r2
 80171fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017202:	b002      	add	sp, #8
 8017204:	4770      	bx	lr
 8017206:	428c      	cmp	r4, r1
 8017208:	d905      	bls.n	8017216 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801720a:	4809      	ldr	r0, [pc, #36]	; (8017230 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801720c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017210:	b002      	add	sp, #8
 8017212:	f007 b899 	b.w	801e348 <get_memory>
 8017216:	fab4 f284 	clz	r2, r4
 801721a:	0952      	lsrs	r2, r2, #5
 801721c:	2c00      	cmp	r4, #0
 801721e:	d1ed      	bne.n	80171fc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8017220:	4803      	ldr	r0, [pc, #12]	; (8017230 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8017222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017226:	b002      	add	sp, #8
 8017228:	f007 b88e 	b.w	801e348 <get_memory>
 801722c:	4629      	mov	r1, r5
 801722e:	e7bc      	b.n	80171aa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8017230:	20016e64 	.word	0x20016e64

08017234 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8017234:	4b12      	ldr	r3, [pc, #72]	; (8017280 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	b530      	push	{r4, r5, lr}
 801723a:	b1f3      	cbz	r3, 801727a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801723c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8017240:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8017244:	2400      	movs	r4, #0
 8017246:	e001      	b.n	801724c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	b1a3      	cbz	r3, 8017276 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 801724c:	689a      	ldr	r2, [r3, #8]
 801724e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8017252:	4288      	cmp	r0, r1
 8017254:	d1f8      	bne.n	8017248 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8017256:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 801725a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 801725e:	4571      	cmp	r1, lr
 8017260:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8017264:	eb72 050c 	sbcs.w	r5, r2, ip
 8017268:	daee      	bge.n	8017248 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801726a:	461c      	mov	r4, r3
 801726c:	685b      	ldr	r3, [r3, #4]
 801726e:	468e      	mov	lr, r1
 8017270:	4694      	mov	ip, r2
 8017272:	2b00      	cmp	r3, #0
 8017274:	d1ea      	bne.n	801724c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8017276:	4620      	mov	r0, r4
 8017278:	bd30      	pop	{r4, r5, pc}
 801727a:	461c      	mov	r4, r3
 801727c:	4620      	mov	r0, r4
 801727e:	bd30      	pop	{r4, r5, pc}
 8017280:	20016e64 	.word	0x20016e64
 8017284:	00000000 	.word	0x00000000

08017288 <rmw_uxrce_clean_expired_static_input_buffer>:
 8017288:	4b3d      	ldr	r3, [pc, #244]	; (8017380 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801728a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801728e:	681f      	ldr	r7, [r3, #0]
 8017290:	ed2d 8b06 	vpush	{d8-d10}
 8017294:	b08d      	sub	sp, #52	; 0x34
 8017296:	f007 fae3 	bl	801e860 <rmw_uros_epoch_nanos>
 801729a:	2f00      	cmp	r7, #0
 801729c:	d05d      	beq.n	801735a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801729e:	46b8      	mov	r8, r7
 80172a0:	4681      	mov	r9, r0
 80172a2:	468a      	mov	sl, r1
 80172a4:	ac04      	add	r4, sp, #16
 80172a6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80172aa:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 80172ae:	2b04      	cmp	r3, #4
 80172b0:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8017368 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80172b4:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8017370 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80172b8:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8017378 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80172bc:	d03f      	beq.n	801733e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80172be:	2b05      	cmp	r3, #5
 80172c0:	d044      	beq.n	801734c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80172c2:	2b03      	cmp	r3, #3
 80172c4:	d03b      	beq.n	801733e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80172c6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80172ca:	ed8d ab06 	vstr	d10, [sp, #24]
 80172ce:	ab08      	add	r3, sp, #32
 80172d0:	ed8d 8b08 	vstr	d8, [sp, #32]
 80172d4:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 80172d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80172da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80172de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80172e2:	f006 fe45 	bl	801df70 <rmw_time_equal>
 80172e6:	b118      	cbz	r0, 80172f0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80172e8:	ed8d 9b04 	vstr	d9, [sp, #16]
 80172ec:	ed8d 8b06 	vstr	d8, [sp, #24]
 80172f0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 80172f4:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 80172f8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80172fc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8017300:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017304:	f006 fe8a 	bl	801e01c <rmw_time_total_nsec>
 8017308:	1830      	adds	r0, r6, r0
 801730a:	eb47 0101 	adc.w	r1, r7, r1
 801730e:	4548      	cmp	r0, r9
 8017310:	eb71 030a 	sbcs.w	r3, r1, sl
 8017314:	db05      	blt.n	8017322 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8017316:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801731a:	4591      	cmp	r9, r2
 801731c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8017320:	da03      	bge.n	801732a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8017322:	4641      	mov	r1, r8
 8017324:	4816      	ldr	r0, [pc, #88]	; (8017380 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8017326:	f007 f81f 	bl	801e368 <put_memory>
 801732a:	f1bb 0f00 	cmp.w	fp, #0
 801732e:	d014      	beq.n	801735a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8017330:	46d8      	mov	r8, fp
 8017332:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017336:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 801733a:	2b04      	cmp	r3, #4
 801733c:	d1bf      	bne.n	80172be <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801733e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8017342:	3340      	adds	r3, #64	; 0x40
 8017344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017346:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801734a:	e7c0      	b.n	80172ce <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801734c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8017350:	3348      	adds	r3, #72	; 0x48
 8017352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017358:	e7b9      	b.n	80172ce <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801735a:	b00d      	add	sp, #52	; 0x34
 801735c:	ecbd 8b06 	vpop	{d8-d10}
 8017360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017364:	f3af 8000 	nop.w
	...
 8017370:	00000001 	.word	0x00000001
 8017374:	00000000 	.word	0x00000000
 8017378:	0000001e 	.word	0x0000001e
 801737c:	00000000 	.word	0x00000000
 8017380:	20016e64 	.word	0x20016e64

08017384 <run_xrce_session>:
 8017384:	b510      	push	{r4, lr}
 8017386:	788c      	ldrb	r4, [r1, #2]
 8017388:	b086      	sub	sp, #24
 801738a:	2c01      	cmp	r4, #1
 801738c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017390:	d00c      	beq.n	80173ac <run_xrce_session+0x28>
 8017392:	2401      	movs	r4, #1
 8017394:	4619      	mov	r1, r3
 8017396:	f10d 020e 	add.w	r2, sp, #14
 801739a:	f10d 0317 	add.w	r3, sp, #23
 801739e:	9400      	str	r4, [sp, #0]
 80173a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80173a4:	f001 fd6c 	bl	8018e80 <uxr_run_session_until_all_status>
 80173a8:	b006      	add	sp, #24
 80173aa:	bd10      	pop	{r4, pc}
 80173ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80173b0:	f001 f988 	bl	80186c4 <uxr_flash_output_streams>
 80173b4:	4620      	mov	r0, r4
 80173b6:	b006      	add	sp, #24
 80173b8:	bd10      	pop	{r4, pc}
 80173ba:	bf00      	nop

080173bc <convert_qos_profile>:
 80173bc:	7a4a      	ldrb	r2, [r1, #9]
 80173be:	f891 c008 	ldrb.w	ip, [r1, #8]
 80173c2:	2a02      	cmp	r2, #2
 80173c4:	bf18      	it	ne
 80173c6:	2200      	movne	r2, #0
 80173c8:	7002      	strb	r2, [r0, #0]
 80173ca:	f1ac 0202 	sub.w	r2, ip, #2
 80173ce:	fab2 f282 	clz	r2, r2
 80173d2:	0952      	lsrs	r2, r2, #5
 80173d4:	7042      	strb	r2, [r0, #1]
 80173d6:	780a      	ldrb	r2, [r1, #0]
 80173d8:	8889      	ldrh	r1, [r1, #4]
 80173da:	f1a2 0202 	sub.w	r2, r2, #2
 80173de:	8081      	strh	r1, [r0, #4]
 80173e0:	fab2 f282 	clz	r2, r2
 80173e4:	0952      	lsrs	r2, r2, #5
 80173e6:	7082      	strb	r2, [r0, #2]
 80173e8:	4770      	bx	lr
 80173ea:	bf00      	nop

080173ec <generate_service_topics>:
 80173ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173ee:	461d      	mov	r5, r3
 80173f0:	b083      	sub	sp, #12
 80173f2:	4606      	mov	r6, r0
 80173f4:	4c11      	ldr	r4, [pc, #68]	; (801743c <generate_service_topics+0x50>)
 80173f6:	4608      	mov	r0, r1
 80173f8:	4b11      	ldr	r3, [pc, #68]	; (8017440 <generate_service_topics+0x54>)
 80173fa:	4617      	mov	r7, r2
 80173fc:	4629      	mov	r1, r5
 80173fe:	4a11      	ldr	r2, [pc, #68]	; (8017444 <generate_service_topics+0x58>)
 8017400:	9401      	str	r4, [sp, #4]
 8017402:	9600      	str	r6, [sp, #0]
 8017404:	f009 fcfe 	bl	8020e04 <sniprintf>
 8017408:	4a0f      	ldr	r2, [pc, #60]	; (8017448 <generate_service_topics+0x5c>)
 801740a:	4604      	mov	r4, r0
 801740c:	4b0f      	ldr	r3, [pc, #60]	; (801744c <generate_service_topics+0x60>)
 801740e:	9201      	str	r2, [sp, #4]
 8017410:	4638      	mov	r0, r7
 8017412:	4a0c      	ldr	r2, [pc, #48]	; (8017444 <generate_service_topics+0x58>)
 8017414:	4629      	mov	r1, r5
 8017416:	9600      	str	r6, [sp, #0]
 8017418:	f009 fcf4 	bl	8020e04 <sniprintf>
 801741c:	2c00      	cmp	r4, #0
 801741e:	bfa8      	it	ge
 8017420:	42a5      	cmpge	r5, r4
 8017422:	bfcc      	ite	gt
 8017424:	2401      	movgt	r4, #1
 8017426:	2400      	movle	r4, #0
 8017428:	dd05      	ble.n	8017436 <generate_service_topics+0x4a>
 801742a:	2800      	cmp	r0, #0
 801742c:	bfa8      	it	ge
 801742e:	4285      	cmpge	r5, r0
 8017430:	bfcc      	ite	gt
 8017432:	2401      	movgt	r4, #1
 8017434:	2400      	movle	r4, #0
 8017436:	4620      	mov	r0, r4
 8017438:	b003      	add	sp, #12
 801743a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801743c:	080257b0 	.word	0x080257b0
 8017440:	080257ac 	.word	0x080257ac
 8017444:	08025790 	.word	0x08025790
 8017448:	080257a4 	.word	0x080257a4
 801744c:	080257a0 	.word	0x080257a0

08017450 <generate_service_types>:
 8017450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017454:	4606      	mov	r6, r0
 8017456:	b087      	sub	sp, #28
 8017458:	461c      	mov	r4, r3
 801745a:	6883      	ldr	r3, [r0, #8]
 801745c:	460d      	mov	r5, r1
 801745e:	4617      	mov	r7, r2
 8017460:	4798      	blx	r3
 8017462:	68f3      	ldr	r3, [r6, #12]
 8017464:	4606      	mov	r6, r0
 8017466:	4798      	blx	r3
 8017468:	2300      	movs	r3, #0
 801746a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 801746e:	6872      	ldr	r2, [r6, #4]
 8017470:	702b      	strb	r3, [r5, #0]
 8017472:	6813      	ldr	r3, [r2, #0]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d03f      	beq.n	80174f8 <generate_service_types+0xa8>
 8017478:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801750c <generate_service_types+0xbc>
 801747c:	4649      	mov	r1, r9
 801747e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8017514 <generate_service_types+0xc4>
 8017482:	4628      	mov	r0, r5
 8017484:	f8df a090 	ldr.w	sl, [pc, #144]	; 8017518 <generate_service_types+0xc8>
 8017488:	f8cd 8014 	str.w	r8, [sp, #20]
 801748c:	6852      	ldr	r2, [r2, #4]
 801748e:	9100      	str	r1, [sp, #0]
 8017490:	4621      	mov	r1, r4
 8017492:	f8cd 8008 	str.w	r8, [sp, #8]
 8017496:	f8cd a004 	str.w	sl, [sp, #4]
 801749a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801749e:	4a1a      	ldr	r2, [pc, #104]	; (8017508 <generate_service_types+0xb8>)
 80174a0:	f009 fcb0 	bl	8020e04 <sniprintf>
 80174a4:	2300      	movs	r3, #0
 80174a6:	42a0      	cmp	r0, r4
 80174a8:	ea6f 0600 	mvn.w	r6, r0
 80174ac:	703b      	strb	r3, [r7, #0]
 80174ae:	f8db 3000 	ldr.w	r3, [fp]
 80174b2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 80174b6:	bfac      	ite	ge
 80174b8:	2500      	movge	r5, #0
 80174ba:	2501      	movlt	r5, #1
 80174bc:	b30b      	cbz	r3, 8017502 <generate_service_types+0xb2>
 80174be:	4a13      	ldr	r2, [pc, #76]	; (801750c <generate_service_types+0xbc>)
 80174c0:	f8cd 8014 	str.w	r8, [sp, #20]
 80174c4:	402e      	ands	r6, r5
 80174c6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80174ca:	4638      	mov	r0, r7
 80174cc:	9104      	str	r1, [sp, #16]
 80174ce:	4621      	mov	r1, r4
 80174d0:	e9cd 2a00 	strd	r2, sl, [sp]
 80174d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80174d8:	4a0b      	ldr	r2, [pc, #44]	; (8017508 <generate_service_types+0xb8>)
 80174da:	f009 fc93 	bl	8020e04 <sniprintf>
 80174de:	2800      	cmp	r0, #0
 80174e0:	bfb4      	ite	lt
 80174e2:	2600      	movlt	r6, #0
 80174e4:	f006 0601 	andge.w	r6, r6, #1
 80174e8:	42a0      	cmp	r0, r4
 80174ea:	bfac      	ite	ge
 80174ec:	2000      	movge	r0, #0
 80174ee:	f006 0001 	andlt.w	r0, r6, #1
 80174f2:	b007      	add	sp, #28
 80174f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f8:	4b05      	ldr	r3, [pc, #20]	; (8017510 <generate_service_types+0xc0>)
 80174fa:	f8df 9010 	ldr.w	r9, [pc, #16]	; 801750c <generate_service_types+0xbc>
 80174fe:	4619      	mov	r1, r3
 8017500:	e7bd      	b.n	801747e <generate_service_types+0x2e>
 8017502:	4b03      	ldr	r3, [pc, #12]	; (8017510 <generate_service_types+0xc0>)
 8017504:	461a      	mov	r2, r3
 8017506:	e7db      	b.n	80174c0 <generate_service_types+0x70>
 8017508:	08025788 	.word	0x08025788
 801750c:	08025784 	.word	0x08025784
 8017510:	08025808 	.word	0x08025808
 8017514:	08025798 	.word	0x08025798
 8017518:	0802579c 	.word	0x0802579c

0801751c <generate_type_name>:
 801751c:	2300      	movs	r3, #0
 801751e:	b530      	push	{r4, r5, lr}
 8017520:	700b      	strb	r3, [r1, #0]
 8017522:	b087      	sub	sp, #28
 8017524:	6803      	ldr	r3, [r0, #0]
 8017526:	4614      	mov	r4, r2
 8017528:	b1bb      	cbz	r3, 801755a <generate_type_name+0x3e>
 801752a:	4a0e      	ldr	r2, [pc, #56]	; (8017564 <generate_type_name+0x48>)
 801752c:	4615      	mov	r5, r2
 801752e:	9500      	str	r5, [sp, #0]
 8017530:	9203      	str	r2, [sp, #12]
 8017532:	4d0d      	ldr	r5, [pc, #52]	; (8017568 <generate_type_name+0x4c>)
 8017534:	6842      	ldr	r2, [r0, #4]
 8017536:	4608      	mov	r0, r1
 8017538:	490c      	ldr	r1, [pc, #48]	; (801756c <generate_type_name+0x50>)
 801753a:	9204      	str	r2, [sp, #16]
 801753c:	9105      	str	r1, [sp, #20]
 801753e:	9102      	str	r1, [sp, #8]
 8017540:	4621      	mov	r1, r4
 8017542:	4a0b      	ldr	r2, [pc, #44]	; (8017570 <generate_type_name+0x54>)
 8017544:	9501      	str	r5, [sp, #4]
 8017546:	f009 fc5d 	bl	8020e04 <sniprintf>
 801754a:	2800      	cmp	r0, #0
 801754c:	bfa8      	it	ge
 801754e:	4284      	cmpge	r4, r0
 8017550:	bfcc      	ite	gt
 8017552:	2001      	movgt	r0, #1
 8017554:	2000      	movle	r0, #0
 8017556:	b007      	add	sp, #28
 8017558:	bd30      	pop	{r4, r5, pc}
 801755a:	4b06      	ldr	r3, [pc, #24]	; (8017574 <generate_type_name+0x58>)
 801755c:	4a01      	ldr	r2, [pc, #4]	; (8017564 <generate_type_name+0x48>)
 801755e:	461d      	mov	r5, r3
 8017560:	e7e5      	b.n	801752e <generate_type_name+0x12>
 8017562:	bf00      	nop
 8017564:	08025784 	.word	0x08025784
 8017568:	0802579c 	.word	0x0802579c
 801756c:	08025798 	.word	0x08025798
 8017570:	08025788 	.word	0x08025788
 8017574:	08025808 	.word	0x08025808

08017578 <generate_topic_name>:
 8017578:	b530      	push	{r4, r5, lr}
 801757a:	4614      	mov	r4, r2
 801757c:	b083      	sub	sp, #12
 801757e:	4605      	mov	r5, r0
 8017580:	4b07      	ldr	r3, [pc, #28]	; (80175a0 <generate_topic_name+0x28>)
 8017582:	4a08      	ldr	r2, [pc, #32]	; (80175a4 <generate_topic_name+0x2c>)
 8017584:	4608      	mov	r0, r1
 8017586:	9500      	str	r5, [sp, #0]
 8017588:	4621      	mov	r1, r4
 801758a:	f009 fc3b 	bl	8020e04 <sniprintf>
 801758e:	2800      	cmp	r0, #0
 8017590:	bfa8      	it	ge
 8017592:	4284      	cmpge	r4, r0
 8017594:	bfcc      	ite	gt
 8017596:	2001      	movgt	r0, #1
 8017598:	2000      	movle	r0, #0
 801759a:	b003      	add	sp, #12
 801759c:	bd30      	pop	{r4, r5, pc}
 801759e:	bf00      	nop
 80175a0:	080257b8 	.word	0x080257b8
 80175a4:	08025188 	.word	0x08025188

080175a8 <is_uxrce_rmw_identifier_valid>:
 80175a8:	b510      	push	{r4, lr}
 80175aa:	4604      	mov	r4, r0
 80175ac:	b140      	cbz	r0, 80175c0 <is_uxrce_rmw_identifier_valid+0x18>
 80175ae:	f006 ff33 	bl	801e418 <rmw_get_implementation_identifier>
 80175b2:	4601      	mov	r1, r0
 80175b4:	4620      	mov	r0, r4
 80175b6:	f7e8 fe43 	bl	8000240 <strcmp>
 80175ba:	fab0 f080 	clz	r0, r0
 80175be:	0940      	lsrs	r0, r0, #5
 80175c0:	bd10      	pop	{r4, pc}
 80175c2:	bf00      	nop

080175c4 <get_message_typesupport_handle>:
 80175c4:	6883      	ldr	r3, [r0, #8]
 80175c6:	4718      	bx	r3

080175c8 <get_message_typesupport_handle_function>:
 80175c8:	b510      	push	{r4, lr}
 80175ca:	4604      	mov	r4, r0
 80175cc:	6800      	ldr	r0, [r0, #0]
 80175ce:	f7e8 fe37 	bl	8000240 <strcmp>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	bf0c      	ite	eq
 80175d6:	4620      	moveq	r0, r4
 80175d8:	2000      	movne	r0, #0
 80175da:	bd10      	pop	{r4, pc}

080175dc <get_service_typesupport_handle>:
 80175dc:	6883      	ldr	r3, [r0, #8]
 80175de:	4718      	bx	r3

080175e0 <get_service_typesupport_handle_function>:
 80175e0:	b510      	push	{r4, lr}
 80175e2:	4604      	mov	r4, r0
 80175e4:	6800      	ldr	r0, [r0, #0]
 80175e6:	f7e8 fe2b 	bl	8000240 <strcmp>
 80175ea:	2800      	cmp	r0, #0
 80175ec:	bf0c      	ite	eq
 80175ee:	4620      	moveq	r0, r4
 80175f0:	2000      	movne	r0, #0
 80175f2:	bd10      	pop	{r4, pc}

080175f4 <rosidl_runtime_c__String__init>:
 80175f4:	b510      	push	{r4, lr}
 80175f6:	4604      	mov	r4, r0
 80175f8:	b086      	sub	sp, #24
 80175fa:	b170      	cbz	r0, 801761a <rosidl_runtime_c__String__init+0x26>
 80175fc:	a801      	add	r0, sp, #4
 80175fe:	f7fd feef 	bl	80153e0 <rcutils_get_default_allocator>
 8017602:	9b01      	ldr	r3, [sp, #4]
 8017604:	9905      	ldr	r1, [sp, #20]
 8017606:	2001      	movs	r0, #1
 8017608:	4798      	blx	r3
 801760a:	6020      	str	r0, [r4, #0]
 801760c:	b128      	cbz	r0, 801761a <rosidl_runtime_c__String__init+0x26>
 801760e:	2100      	movs	r1, #0
 8017610:	2201      	movs	r2, #1
 8017612:	7001      	strb	r1, [r0, #0]
 8017614:	4610      	mov	r0, r2
 8017616:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801761a:	b006      	add	sp, #24
 801761c:	bd10      	pop	{r4, pc}
 801761e:	bf00      	nop

08017620 <rosidl_runtime_c__String__fini>:
 8017620:	b320      	cbz	r0, 801766c <rosidl_runtime_c__String__fini+0x4c>
 8017622:	6803      	ldr	r3, [r0, #0]
 8017624:	b510      	push	{r4, lr}
 8017626:	4604      	mov	r4, r0
 8017628:	b086      	sub	sp, #24
 801762a:	b173      	cbz	r3, 801764a <rosidl_runtime_c__String__fini+0x2a>
 801762c:	6883      	ldr	r3, [r0, #8]
 801762e:	b1f3      	cbz	r3, 801766e <rosidl_runtime_c__String__fini+0x4e>
 8017630:	a801      	add	r0, sp, #4
 8017632:	f7fd fed5 	bl	80153e0 <rcutils_get_default_allocator>
 8017636:	9b02      	ldr	r3, [sp, #8]
 8017638:	9905      	ldr	r1, [sp, #20]
 801763a:	6820      	ldr	r0, [r4, #0]
 801763c:	4798      	blx	r3
 801763e:	2300      	movs	r3, #0
 8017640:	e9c4 3300 	strd	r3, r3, [r4]
 8017644:	60a3      	str	r3, [r4, #8]
 8017646:	b006      	add	sp, #24
 8017648:	bd10      	pop	{r4, pc}
 801764a:	6843      	ldr	r3, [r0, #4]
 801764c:	b9db      	cbnz	r3, 8017686 <rosidl_runtime_c__String__fini+0x66>
 801764e:	6883      	ldr	r3, [r0, #8]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d0f8      	beq.n	8017646 <rosidl_runtime_c__String__fini+0x26>
 8017654:	4b12      	ldr	r3, [pc, #72]	; (80176a0 <rosidl_runtime_c__String__fini+0x80>)
 8017656:	2251      	movs	r2, #81	; 0x51
 8017658:	2101      	movs	r1, #1
 801765a:	4812      	ldr	r0, [pc, #72]	; (80176a4 <rosidl_runtime_c__String__fini+0x84>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	68db      	ldr	r3, [r3, #12]
 8017660:	f009 faa6 	bl	8020bb0 <fwrite>
 8017664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017668:	f008 f91e 	bl	801f8a8 <exit>
 801766c:	4770      	bx	lr
 801766e:	4b0c      	ldr	r3, [pc, #48]	; (80176a0 <rosidl_runtime_c__String__fini+0x80>)
 8017670:	224c      	movs	r2, #76	; 0x4c
 8017672:	2101      	movs	r1, #1
 8017674:	480c      	ldr	r0, [pc, #48]	; (80176a8 <rosidl_runtime_c__String__fini+0x88>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	68db      	ldr	r3, [r3, #12]
 801767a:	f009 fa99 	bl	8020bb0 <fwrite>
 801767e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017682:	f008 f911 	bl	801f8a8 <exit>
 8017686:	4b06      	ldr	r3, [pc, #24]	; (80176a0 <rosidl_runtime_c__String__fini+0x80>)
 8017688:	224e      	movs	r2, #78	; 0x4e
 801768a:	2101      	movs	r1, #1
 801768c:	4807      	ldr	r0, [pc, #28]	; (80176ac <rosidl_runtime_c__String__fini+0x8c>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	68db      	ldr	r3, [r3, #12]
 8017692:	f009 fa8d 	bl	8020bb0 <fwrite>
 8017696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801769a:	f008 f905 	bl	801f8a8 <exit>
 801769e:	bf00      	nop
 80176a0:	2000099c 	.word	0x2000099c
 80176a4:	0802585c 	.word	0x0802585c
 80176a8:	080257bc 	.word	0x080257bc
 80176ac:	0802580c 	.word	0x0802580c

080176b0 <rosidl_runtime_c__String__assignn>:
 80176b0:	2900      	cmp	r1, #0
 80176b2:	bf18      	it	ne
 80176b4:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 80176b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176bc:	bf0c      	ite	eq
 80176be:	2401      	moveq	r4, #1
 80176c0:	2400      	movne	r4, #0
 80176c2:	b087      	sub	sp, #28
 80176c4:	2800      	cmp	r0, #0
 80176c6:	bf08      	it	eq
 80176c8:	f044 0401 	orreq.w	r4, r4, #1
 80176cc:	b124      	cbz	r4, 80176d8 <rosidl_runtime_c__String__assignn+0x28>
 80176ce:	2400      	movs	r4, #0
 80176d0:	4620      	mov	r0, r4
 80176d2:	b007      	add	sp, #28
 80176d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176d8:	4616      	mov	r6, r2
 80176da:	4605      	mov	r5, r0
 80176dc:	a801      	add	r0, sp, #4
 80176de:	460f      	mov	r7, r1
 80176e0:	f106 0901 	add.w	r9, r6, #1
 80176e4:	f7fd fe7c 	bl	80153e0 <rcutils_get_default_allocator>
 80176e8:	9b03      	ldr	r3, [sp, #12]
 80176ea:	9a05      	ldr	r2, [sp, #20]
 80176ec:	4649      	mov	r1, r9
 80176ee:	6828      	ldr	r0, [r5, #0]
 80176f0:	4798      	blx	r3
 80176f2:	4680      	mov	r8, r0
 80176f4:	2800      	cmp	r0, #0
 80176f6:	d0eb      	beq.n	80176d0 <rosidl_runtime_c__String__assignn+0x20>
 80176f8:	4639      	mov	r1, r7
 80176fa:	4632      	mov	r2, r6
 80176fc:	f009 fddf 	bl	80212be <memcpy>
 8017700:	f808 4006 	strb.w	r4, [r8, r6]
 8017704:	2401      	movs	r4, #1
 8017706:	f8c5 9008 	str.w	r9, [r5, #8]
 801770a:	4620      	mov	r0, r4
 801770c:	e9c5 8600 	strd	r8, r6, [r5]
 8017710:	b007      	add	sp, #28
 8017712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017716:	bf00      	nop

08017718 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801771c:	6805      	ldr	r5, [r0, #0]
 801771e:	4604      	mov	r4, r0
 8017720:	460e      	mov	r6, r1
 8017722:	4628      	mov	r0, r5
 8017724:	f7e8 fd8c 	bl	8000240 <strcmp>
 8017728:	b1c8      	cbz	r0, 801775e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801772a:	4b11      	ldr	r3, [pc, #68]	; (8017770 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	429d      	cmp	r5, r3
 8017730:	d112      	bne.n	8017758 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017732:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017736:	f8d8 4000 	ldr.w	r4, [r8]
 801773a:	b16c      	cbz	r4, 8017758 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801773c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017740:	2700      	movs	r7, #0
 8017742:	3d04      	subs	r5, #4
 8017744:	4631      	mov	r1, r6
 8017746:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801774a:	f7e8 fd79 	bl	8000240 <strcmp>
 801774e:	00bb      	lsls	r3, r7, #2
 8017750:	b140      	cbz	r0, 8017764 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8017752:	3701      	adds	r7, #1
 8017754:	42bc      	cmp	r4, r7
 8017756:	d1f5      	bne.n	8017744 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017758:	2000      	movs	r0, #0
 801775a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801775e:	4620      	mov	r0, r4
 8017760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017764:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801776c:	58d3      	ldr	r3, [r2, r3]
 801776e:	4718      	bx	r3
 8017770:	200008b8 	.word	0x200008b8

08017774 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8017774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017778:	6805      	ldr	r5, [r0, #0]
 801777a:	4604      	mov	r4, r0
 801777c:	460e      	mov	r6, r1
 801777e:	4628      	mov	r0, r5
 8017780:	f7e8 fd5e 	bl	8000240 <strcmp>
 8017784:	b1c8      	cbz	r0, 80177ba <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8017786:	4b11      	ldr	r3, [pc, #68]	; (80177cc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	429d      	cmp	r5, r3
 801778c:	d112      	bne.n	80177b4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 801778e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017792:	f8d8 4000 	ldr.w	r4, [r8]
 8017796:	b16c      	cbz	r4, 80177b4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8017798:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801779c:	2700      	movs	r7, #0
 801779e:	3d04      	subs	r5, #4
 80177a0:	4631      	mov	r1, r6
 80177a2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80177a6:	f7e8 fd4b 	bl	8000240 <strcmp>
 80177aa:	00bb      	lsls	r3, r7, #2
 80177ac:	b140      	cbz	r0, 80177c0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 80177ae:	3701      	adds	r7, #1
 80177b0:	42bc      	cmp	r4, r7
 80177b2:	d1f5      	bne.n	80177a0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 80177b4:	2000      	movs	r0, #0
 80177b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177ba:	4620      	mov	r0, r4
 80177bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80177c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177c8:	58d3      	ldr	r3, [r2, r3]
 80177ca:	4718      	bx	r3
 80177cc:	200008b8 	.word	0x200008b8

080177d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80177d0:	4b04      	ldr	r3, [pc, #16]	; (80177e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80177d2:	681a      	ldr	r2, [r3, #0]
 80177d4:	b10a      	cbz	r2, 80177da <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80177d6:	4803      	ldr	r0, [pc, #12]	; (80177e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80177d8:	4770      	bx	lr
 80177da:	4a03      	ldr	r2, [pc, #12]	; (80177e8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80177dc:	4801      	ldr	r0, [pc, #4]	; (80177e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80177de:	6812      	ldr	r2, [r2, #0]
 80177e0:	601a      	str	r2, [r3, #0]
 80177e2:	4770      	bx	lr
 80177e4:	200008c8 	.word	0x200008c8
 80177e8:	200008b8 	.word	0x200008b8

080177ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80177ec:	4a02      	ldr	r2, [pc, #8]	; (80177f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 80177ee:	4b03      	ldr	r3, [pc, #12]	; (80177fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 80177f0:	6812      	ldr	r2, [r2, #0]
 80177f2:	601a      	str	r2, [r3, #0]
 80177f4:	4770      	bx	lr
 80177f6:	bf00      	nop
 80177f8:	200008b8 	.word	0x200008b8
 80177fc:	200008c8 	.word	0x200008c8

08017800 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8017800:	f007 b83c 	b.w	801e87c <std_msgs__msg__String__init>

08017804 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 8017804:	f007 b84c 	b.w	801e8a0 <std_msgs__msg__String__fini>

08017808 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8017808:	4b04      	ldr	r3, [pc, #16]	; (801781c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801780a:	681a      	ldr	r2, [r3, #0]
 801780c:	b10a      	cbz	r2, 8017812 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801780e:	4803      	ldr	r0, [pc, #12]	; (801781c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017810:	4770      	bx	lr
 8017812:	4a03      	ldr	r2, [pc, #12]	; (8017820 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8017814:	4801      	ldr	r0, [pc, #4]	; (801781c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8017816:	6812      	ldr	r2, [r2, #0]
 8017818:	601a      	str	r2, [r3, #0]
 801781a:	4770      	bx	lr
 801781c:	20000910 	.word	0x20000910
 8017820:	200008bc 	.word	0x200008bc

08017824 <_String__max_serialized_size>:
 8017824:	2000      	movs	r0, #0
 8017826:	4770      	bx	lr

08017828 <_String__cdr_serialize>:
 8017828:	b1c8      	cbz	r0, 801785e <_String__cdr_serialize+0x36>
 801782a:	b570      	push	{r4, r5, r6, lr}
 801782c:	6806      	ldr	r6, [r0, #0]
 801782e:	4604      	mov	r4, r0
 8017830:	460d      	mov	r5, r1
 8017832:	b15e      	cbz	r6, 801784c <_String__cdr_serialize+0x24>
 8017834:	4630      	mov	r0, r6
 8017836:	f7e8 fd63 	bl	8000300 <strlen>
 801783a:	4603      	mov	r3, r0
 801783c:	1c42      	adds	r2, r0, #1
 801783e:	4631      	mov	r1, r6
 8017840:	4628      	mov	r0, r5
 8017842:	6063      	str	r3, [r4, #4]
 8017844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017848:	f7fb bf76 	b.w	8013738 <ucdr_serialize_sequence_char>
 801784c:	4633      	mov	r3, r6
 801784e:	4632      	mov	r2, r6
 8017850:	4631      	mov	r1, r6
 8017852:	4628      	mov	r0, r5
 8017854:	6063      	str	r3, [r4, #4]
 8017856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801785a:	f7fb bf6d 	b.w	8013738 <ucdr_serialize_sequence_char>
 801785e:	4770      	bx	lr

08017860 <get_serialized_size_std_msgs__msg__String>:
 8017860:	b510      	push	{r4, lr}
 8017862:	4604      	mov	r4, r0
 8017864:	b130      	cbz	r0, 8017874 <get_serialized_size_std_msgs__msg__String+0x14>
 8017866:	4608      	mov	r0, r1
 8017868:	2104      	movs	r1, #4
 801786a:	f7fb fef5 	bl	8013658 <ucdr_alignment>
 801786e:	6863      	ldr	r3, [r4, #4]
 8017870:	3305      	adds	r3, #5
 8017872:	4418      	add	r0, r3
 8017874:	bd10      	pop	{r4, pc}
 8017876:	bf00      	nop

08017878 <_String__cdr_deserialize>:
 8017878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801787a:	460c      	mov	r4, r1
 801787c:	b083      	sub	sp, #12
 801787e:	b1a1      	cbz	r1, 80178aa <_String__cdr_deserialize+0x32>
 8017880:	688f      	ldr	r7, [r1, #8]
 8017882:	ab01      	add	r3, sp, #4
 8017884:	6809      	ldr	r1, [r1, #0]
 8017886:	4606      	mov	r6, r0
 8017888:	463a      	mov	r2, r7
 801788a:	f7fb ff67 	bl	801375c <ucdr_deserialize_sequence_char>
 801788e:	9b01      	ldr	r3, [sp, #4]
 8017890:	4605      	mov	r5, r0
 8017892:	b920      	cbnz	r0, 801789e <_String__cdr_deserialize+0x26>
 8017894:	429f      	cmp	r7, r3
 8017896:	d30c      	bcc.n	80178b2 <_String__cdr_deserialize+0x3a>
 8017898:	4628      	mov	r0, r5
 801789a:	b003      	add	sp, #12
 801789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801789e:	b103      	cbz	r3, 80178a2 <_String__cdr_deserialize+0x2a>
 80178a0:	3b01      	subs	r3, #1
 80178a2:	4628      	mov	r0, r5
 80178a4:	6063      	str	r3, [r4, #4]
 80178a6:	b003      	add	sp, #12
 80178a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178aa:	460d      	mov	r5, r1
 80178ac:	4628      	mov	r0, r5
 80178ae:	b003      	add	sp, #12
 80178b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178b2:	2101      	movs	r1, #1
 80178b4:	4630      	mov	r0, r6
 80178b6:	75b5      	strb	r5, [r6, #22]
 80178b8:	7571      	strb	r1, [r6, #21]
 80178ba:	6065      	str	r5, [r4, #4]
 80178bc:	f7fb fee4 	bl	8013688 <ucdr_align_to>
 80178c0:	4630      	mov	r0, r6
 80178c2:	9901      	ldr	r1, [sp, #4]
 80178c4:	f7fb ff18 	bl	80136f8 <ucdr_advance_buffer>
 80178c8:	4628      	mov	r0, r5
 80178ca:	b003      	add	sp, #12
 80178cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178ce:	bf00      	nop

080178d0 <_String__get_serialized_size>:
 80178d0:	b510      	push	{r4, lr}
 80178d2:	4604      	mov	r4, r0
 80178d4:	b130      	cbz	r0, 80178e4 <_String__get_serialized_size+0x14>
 80178d6:	2104      	movs	r1, #4
 80178d8:	2000      	movs	r0, #0
 80178da:	f7fb febd 	bl	8013658 <ucdr_alignment>
 80178de:	6863      	ldr	r3, [r4, #4]
 80178e0:	3305      	adds	r3, #5
 80178e2:	4418      	add	r0, r3
 80178e4:	bd10      	pop	{r4, pc}
 80178e6:	bf00      	nop

080178e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 80178e8:	4800      	ldr	r0, [pc, #0]	; (80178ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 80178ea:	4770      	bx	lr
 80178ec:	2000091c 	.word	0x2000091c

080178f0 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 80178f0:	3800      	subs	r0, #0
 80178f2:	bf18      	it	ne
 80178f4:	2001      	movne	r0, #1
 80178f6:	4770      	bx	lr

080178f8 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 80178f8:	4770      	bx	lr
 80178fa:	bf00      	nop

080178fc <custom_test_msgs__srv__AddThreeInts_Response__init>:
 80178fc:	3800      	subs	r0, #0
 80178fe:	bf18      	it	ne
 8017900:	2001      	movne	r0, #1
 8017902:	4770      	bx	lr

08017904 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 8017904:	4770      	bx	lr
 8017906:	bf00      	nop

08017908 <drive_msgs__msg__Omni__init>:
 8017908:	b538      	push	{r3, r4, r5, lr}
 801790a:	4604      	mov	r4, r0
 801790c:	b128      	cbz	r0, 801791a <drive_msgs__msg__Omni__init+0x12>
 801790e:	f7ff fe71 	bl	80175f4 <rosidl_runtime_c__String__init>
 8017912:	4605      	mov	r5, r0
 8017914:	b120      	cbz	r0, 8017920 <drive_msgs__msg__Omni__init+0x18>
 8017916:	4628      	mov	r0, r5
 8017918:	bd38      	pop	{r3, r4, r5, pc}
 801791a:	4605      	mov	r5, r0
 801791c:	4628      	mov	r0, r5
 801791e:	bd38      	pop	{r3, r4, r5, pc}
 8017920:	4620      	mov	r0, r4
 8017922:	f7ff fe7d 	bl	8017620 <rosidl_runtime_c__String__fini>
 8017926:	4628      	mov	r0, r5
 8017928:	bd38      	pop	{r3, r4, r5, pc}
 801792a:	bf00      	nop

0801792c <drive_msgs__msg__Omni__fini>:
 801792c:	b108      	cbz	r0, 8017932 <drive_msgs__msg__Omni__fini+0x6>
 801792e:	f7ff be77 	b.w	8017620 <rosidl_runtime_c__String__fini>
 8017932:	4770      	bx	lr

08017934 <drive_msgs__msg__OmniEnc__init>:
 8017934:	b538      	push	{r3, r4, r5, lr}
 8017936:	4604      	mov	r4, r0
 8017938:	b128      	cbz	r0, 8017946 <drive_msgs__msg__OmniEnc__init+0x12>
 801793a:	f7ff fe5b 	bl	80175f4 <rosidl_runtime_c__String__init>
 801793e:	4605      	mov	r5, r0
 8017940:	b120      	cbz	r0, 801794c <drive_msgs__msg__OmniEnc__init+0x18>
 8017942:	4628      	mov	r0, r5
 8017944:	bd38      	pop	{r3, r4, r5, pc}
 8017946:	4605      	mov	r5, r0
 8017948:	4628      	mov	r0, r5
 801794a:	bd38      	pop	{r3, r4, r5, pc}
 801794c:	4620      	mov	r0, r4
 801794e:	f7ff fe67 	bl	8017620 <rosidl_runtime_c__String__fini>
 8017952:	4628      	mov	r0, r5
 8017954:	bd38      	pop	{r3, r4, r5, pc}
 8017956:	bf00      	nop

08017958 <drive_msgs__msg__OmniEnc__fini>:
 8017958:	b108      	cbz	r0, 801795e <drive_msgs__msg__OmniEnc__fini+0x6>
 801795a:	f7ff be61 	b.w	8017620 <rosidl_runtime_c__String__fini>
 801795e:	4770      	bx	lr

08017960 <manip_msgs__msg__Cmd__init>:
 8017960:	3800      	subs	r0, #0
 8017962:	bf18      	it	ne
 8017964:	2001      	movne	r0, #1
 8017966:	4770      	bx	lr

08017968 <manip_msgs__msg__Cmd__fini>:
 8017968:	4770      	bx	lr
 801796a:	bf00      	nop

0801796c <ucdr_serialize_endian_array_char>:
 801796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017970:	4619      	mov	r1, r3
 8017972:	461f      	mov	r7, r3
 8017974:	4605      	mov	r5, r0
 8017976:	4690      	mov	r8, r2
 8017978:	f7fb fe16 	bl	80135a8 <ucdr_check_buffer_available_for>
 801797c:	b9e0      	cbnz	r0, 80179b8 <ucdr_serialize_endian_array_char+0x4c>
 801797e:	463e      	mov	r6, r7
 8017980:	e00b      	b.n	801799a <ucdr_serialize_endian_array_char+0x2e>
 8017982:	4441      	add	r1, r8
 8017984:	68a8      	ldr	r0, [r5, #8]
 8017986:	4622      	mov	r2, r4
 8017988:	1b36      	subs	r6, r6, r4
 801798a:	f009 fc98 	bl	80212be <memcpy>
 801798e:	68ab      	ldr	r3, [r5, #8]
 8017990:	6928      	ldr	r0, [r5, #16]
 8017992:	4423      	add	r3, r4
 8017994:	4420      	add	r0, r4
 8017996:	60ab      	str	r3, [r5, #8]
 8017998:	6128      	str	r0, [r5, #16]
 801799a:	4631      	mov	r1, r6
 801799c:	2201      	movs	r2, #1
 801799e:	4628      	mov	r0, r5
 80179a0:	f7fb fe8c 	bl	80136bc <ucdr_check_final_buffer_behavior_array>
 80179a4:	1bb9      	subs	r1, r7, r6
 80179a6:	4604      	mov	r4, r0
 80179a8:	2800      	cmp	r0, #0
 80179aa:	d1ea      	bne.n	8017982 <ucdr_serialize_endian_array_char+0x16>
 80179ac:	2301      	movs	r3, #1
 80179ae:	7da8      	ldrb	r0, [r5, #22]
 80179b0:	756b      	strb	r3, [r5, #21]
 80179b2:	4058      	eors	r0, r3
 80179b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b8:	463a      	mov	r2, r7
 80179ba:	4641      	mov	r1, r8
 80179bc:	68a8      	ldr	r0, [r5, #8]
 80179be:	f009 fc7e 	bl	80212be <memcpy>
 80179c2:	68aa      	ldr	r2, [r5, #8]
 80179c4:	692b      	ldr	r3, [r5, #16]
 80179c6:	443a      	add	r2, r7
 80179c8:	443b      	add	r3, r7
 80179ca:	60aa      	str	r2, [r5, #8]
 80179cc:	612b      	str	r3, [r5, #16]
 80179ce:	e7ed      	b.n	80179ac <ucdr_serialize_endian_array_char+0x40>

080179d0 <ucdr_deserialize_endian_array_char>:
 80179d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179d4:	4619      	mov	r1, r3
 80179d6:	461f      	mov	r7, r3
 80179d8:	4605      	mov	r5, r0
 80179da:	4690      	mov	r8, r2
 80179dc:	f7fb fde4 	bl	80135a8 <ucdr_check_buffer_available_for>
 80179e0:	b9e8      	cbnz	r0, 8017a1e <ucdr_deserialize_endian_array_char+0x4e>
 80179e2:	463e      	mov	r6, r7
 80179e4:	e00c      	b.n	8017a00 <ucdr_deserialize_endian_array_char+0x30>
 80179e6:	eb08 0003 	add.w	r0, r8, r3
 80179ea:	68a9      	ldr	r1, [r5, #8]
 80179ec:	4622      	mov	r2, r4
 80179ee:	1b36      	subs	r6, r6, r4
 80179f0:	f009 fc65 	bl	80212be <memcpy>
 80179f4:	68ab      	ldr	r3, [r5, #8]
 80179f6:	6928      	ldr	r0, [r5, #16]
 80179f8:	4423      	add	r3, r4
 80179fa:	4420      	add	r0, r4
 80179fc:	60ab      	str	r3, [r5, #8]
 80179fe:	6128      	str	r0, [r5, #16]
 8017a00:	4631      	mov	r1, r6
 8017a02:	2201      	movs	r2, #1
 8017a04:	4628      	mov	r0, r5
 8017a06:	f7fb fe59 	bl	80136bc <ucdr_check_final_buffer_behavior_array>
 8017a0a:	1bbb      	subs	r3, r7, r6
 8017a0c:	4604      	mov	r4, r0
 8017a0e:	2800      	cmp	r0, #0
 8017a10:	d1e9      	bne.n	80179e6 <ucdr_deserialize_endian_array_char+0x16>
 8017a12:	2301      	movs	r3, #1
 8017a14:	7da8      	ldrb	r0, [r5, #22]
 8017a16:	756b      	strb	r3, [r5, #21]
 8017a18:	4058      	eors	r0, r3
 8017a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a1e:	463a      	mov	r2, r7
 8017a20:	68a9      	ldr	r1, [r5, #8]
 8017a22:	4640      	mov	r0, r8
 8017a24:	f009 fc4b 	bl	80212be <memcpy>
 8017a28:	68aa      	ldr	r2, [r5, #8]
 8017a2a:	692b      	ldr	r3, [r5, #16]
 8017a2c:	443a      	add	r2, r7
 8017a2e:	443b      	add	r3, r7
 8017a30:	60aa      	str	r2, [r5, #8]
 8017a32:	612b      	str	r3, [r5, #16]
 8017a34:	e7ed      	b.n	8017a12 <ucdr_deserialize_endian_array_char+0x42>
 8017a36:	bf00      	nop

08017a38 <ucdr_serialize_array_uint8_t>:
 8017a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a3c:	4688      	mov	r8, r1
 8017a3e:	4611      	mov	r1, r2
 8017a40:	4617      	mov	r7, r2
 8017a42:	4605      	mov	r5, r0
 8017a44:	f7fb fdb0 	bl	80135a8 <ucdr_check_buffer_available_for>
 8017a48:	b9e0      	cbnz	r0, 8017a84 <ucdr_serialize_array_uint8_t+0x4c>
 8017a4a:	463e      	mov	r6, r7
 8017a4c:	e00b      	b.n	8017a66 <ucdr_serialize_array_uint8_t+0x2e>
 8017a4e:	4441      	add	r1, r8
 8017a50:	68a8      	ldr	r0, [r5, #8]
 8017a52:	4622      	mov	r2, r4
 8017a54:	1b36      	subs	r6, r6, r4
 8017a56:	f009 fc32 	bl	80212be <memcpy>
 8017a5a:	68ab      	ldr	r3, [r5, #8]
 8017a5c:	6928      	ldr	r0, [r5, #16]
 8017a5e:	4423      	add	r3, r4
 8017a60:	4420      	add	r0, r4
 8017a62:	60ab      	str	r3, [r5, #8]
 8017a64:	6128      	str	r0, [r5, #16]
 8017a66:	4631      	mov	r1, r6
 8017a68:	2201      	movs	r2, #1
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	f7fb fe26 	bl	80136bc <ucdr_check_final_buffer_behavior_array>
 8017a70:	1bb9      	subs	r1, r7, r6
 8017a72:	4604      	mov	r4, r0
 8017a74:	2800      	cmp	r0, #0
 8017a76:	d1ea      	bne.n	8017a4e <ucdr_serialize_array_uint8_t+0x16>
 8017a78:	2301      	movs	r3, #1
 8017a7a:	7da8      	ldrb	r0, [r5, #22]
 8017a7c:	756b      	strb	r3, [r5, #21]
 8017a7e:	4058      	eors	r0, r3
 8017a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a84:	463a      	mov	r2, r7
 8017a86:	4641      	mov	r1, r8
 8017a88:	68a8      	ldr	r0, [r5, #8]
 8017a8a:	f009 fc18 	bl	80212be <memcpy>
 8017a8e:	68aa      	ldr	r2, [r5, #8]
 8017a90:	692b      	ldr	r3, [r5, #16]
 8017a92:	443a      	add	r2, r7
 8017a94:	443b      	add	r3, r7
 8017a96:	60aa      	str	r2, [r5, #8]
 8017a98:	612b      	str	r3, [r5, #16]
 8017a9a:	e7ed      	b.n	8017a78 <ucdr_serialize_array_uint8_t+0x40>

08017a9c <ucdr_serialize_endian_array_uint8_t>:
 8017a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aa0:	4619      	mov	r1, r3
 8017aa2:	461f      	mov	r7, r3
 8017aa4:	4605      	mov	r5, r0
 8017aa6:	4690      	mov	r8, r2
 8017aa8:	f7fb fd7e 	bl	80135a8 <ucdr_check_buffer_available_for>
 8017aac:	b9e0      	cbnz	r0, 8017ae8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017aae:	463e      	mov	r6, r7
 8017ab0:	e00b      	b.n	8017aca <ucdr_serialize_endian_array_uint8_t+0x2e>
 8017ab2:	4441      	add	r1, r8
 8017ab4:	68a8      	ldr	r0, [r5, #8]
 8017ab6:	4622      	mov	r2, r4
 8017ab8:	1b36      	subs	r6, r6, r4
 8017aba:	f009 fc00 	bl	80212be <memcpy>
 8017abe:	68ab      	ldr	r3, [r5, #8]
 8017ac0:	6928      	ldr	r0, [r5, #16]
 8017ac2:	4423      	add	r3, r4
 8017ac4:	4420      	add	r0, r4
 8017ac6:	60ab      	str	r3, [r5, #8]
 8017ac8:	6128      	str	r0, [r5, #16]
 8017aca:	4631      	mov	r1, r6
 8017acc:	2201      	movs	r2, #1
 8017ace:	4628      	mov	r0, r5
 8017ad0:	f7fb fdf4 	bl	80136bc <ucdr_check_final_buffer_behavior_array>
 8017ad4:	1bb9      	subs	r1, r7, r6
 8017ad6:	4604      	mov	r4, r0
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	d1ea      	bne.n	8017ab2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8017adc:	2301      	movs	r3, #1
 8017ade:	7da8      	ldrb	r0, [r5, #22]
 8017ae0:	756b      	strb	r3, [r5, #21]
 8017ae2:	4058      	eors	r0, r3
 8017ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ae8:	463a      	mov	r2, r7
 8017aea:	4641      	mov	r1, r8
 8017aec:	68a8      	ldr	r0, [r5, #8]
 8017aee:	f009 fbe6 	bl	80212be <memcpy>
 8017af2:	68aa      	ldr	r2, [r5, #8]
 8017af4:	692b      	ldr	r3, [r5, #16]
 8017af6:	443a      	add	r2, r7
 8017af8:	443b      	add	r3, r7
 8017afa:	60aa      	str	r2, [r5, #8]
 8017afc:	612b      	str	r3, [r5, #16]
 8017afe:	e7ed      	b.n	8017adc <ucdr_serialize_endian_array_uint8_t+0x40>

08017b00 <ucdr_deserialize_array_uint8_t>:
 8017b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b04:	4688      	mov	r8, r1
 8017b06:	4611      	mov	r1, r2
 8017b08:	4617      	mov	r7, r2
 8017b0a:	4605      	mov	r5, r0
 8017b0c:	f7fb fd4c 	bl	80135a8 <ucdr_check_buffer_available_for>
 8017b10:	b9e8      	cbnz	r0, 8017b4e <ucdr_deserialize_array_uint8_t+0x4e>
 8017b12:	463e      	mov	r6, r7
 8017b14:	e00c      	b.n	8017b30 <ucdr_deserialize_array_uint8_t+0x30>
 8017b16:	eb08 0003 	add.w	r0, r8, r3
 8017b1a:	68a9      	ldr	r1, [r5, #8]
 8017b1c:	4622      	mov	r2, r4
 8017b1e:	1b36      	subs	r6, r6, r4
 8017b20:	f009 fbcd 	bl	80212be <memcpy>
 8017b24:	68ab      	ldr	r3, [r5, #8]
 8017b26:	6928      	ldr	r0, [r5, #16]
 8017b28:	4423      	add	r3, r4
 8017b2a:	4420      	add	r0, r4
 8017b2c:	60ab      	str	r3, [r5, #8]
 8017b2e:	6128      	str	r0, [r5, #16]
 8017b30:	4631      	mov	r1, r6
 8017b32:	2201      	movs	r2, #1
 8017b34:	4628      	mov	r0, r5
 8017b36:	f7fb fdc1 	bl	80136bc <ucdr_check_final_buffer_behavior_array>
 8017b3a:	1bbb      	subs	r3, r7, r6
 8017b3c:	4604      	mov	r4, r0
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	d1e9      	bne.n	8017b16 <ucdr_deserialize_array_uint8_t+0x16>
 8017b42:	2301      	movs	r3, #1
 8017b44:	7da8      	ldrb	r0, [r5, #22]
 8017b46:	756b      	strb	r3, [r5, #21]
 8017b48:	4058      	eors	r0, r3
 8017b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b4e:	463a      	mov	r2, r7
 8017b50:	68a9      	ldr	r1, [r5, #8]
 8017b52:	4640      	mov	r0, r8
 8017b54:	f009 fbb3 	bl	80212be <memcpy>
 8017b58:	68aa      	ldr	r2, [r5, #8]
 8017b5a:	692b      	ldr	r3, [r5, #16]
 8017b5c:	443a      	add	r2, r7
 8017b5e:	443b      	add	r3, r7
 8017b60:	60aa      	str	r2, [r5, #8]
 8017b62:	612b      	str	r3, [r5, #16]
 8017b64:	e7ed      	b.n	8017b42 <ucdr_deserialize_array_uint8_t+0x42>
 8017b66:	bf00      	nop

08017b68 <ucdr_deserialize_endian_array_uint8_t>:
 8017b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b6c:	4619      	mov	r1, r3
 8017b6e:	461f      	mov	r7, r3
 8017b70:	4605      	mov	r5, r0
 8017b72:	4690      	mov	r8, r2
 8017b74:	f7fb fd18 	bl	80135a8 <ucdr_check_buffer_available_for>
 8017b78:	b9e8      	cbnz	r0, 8017bb6 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8017b7a:	463e      	mov	r6, r7
 8017b7c:	e00c      	b.n	8017b98 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8017b7e:	eb08 0003 	add.w	r0, r8, r3
 8017b82:	68a9      	ldr	r1, [r5, #8]
 8017b84:	4622      	mov	r2, r4
 8017b86:	1b36      	subs	r6, r6, r4
 8017b88:	f009 fb99 	bl	80212be <memcpy>
 8017b8c:	68ab      	ldr	r3, [r5, #8]
 8017b8e:	6928      	ldr	r0, [r5, #16]
 8017b90:	4423      	add	r3, r4
 8017b92:	4420      	add	r0, r4
 8017b94:	60ab      	str	r3, [r5, #8]
 8017b96:	6128      	str	r0, [r5, #16]
 8017b98:	4631      	mov	r1, r6
 8017b9a:	2201      	movs	r2, #1
 8017b9c:	4628      	mov	r0, r5
 8017b9e:	f7fb fd8d 	bl	80136bc <ucdr_check_final_buffer_behavior_array>
 8017ba2:	1bbb      	subs	r3, r7, r6
 8017ba4:	4604      	mov	r4, r0
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	d1e9      	bne.n	8017b7e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017baa:	2301      	movs	r3, #1
 8017bac:	7da8      	ldrb	r0, [r5, #22]
 8017bae:	756b      	strb	r3, [r5, #21]
 8017bb0:	4058      	eors	r0, r3
 8017bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bb6:	463a      	mov	r2, r7
 8017bb8:	68a9      	ldr	r1, [r5, #8]
 8017bba:	4640      	mov	r0, r8
 8017bbc:	f009 fb7f 	bl	80212be <memcpy>
 8017bc0:	68aa      	ldr	r2, [r5, #8]
 8017bc2:	692b      	ldr	r3, [r5, #16]
 8017bc4:	443a      	add	r2, r7
 8017bc6:	443b      	add	r3, r7
 8017bc8:	60aa      	str	r2, [r5, #8]
 8017bca:	612b      	str	r3, [r5, #16]
 8017bcc:	e7ed      	b.n	8017baa <ucdr_deserialize_endian_array_uint8_t+0x42>
 8017bce:	bf00      	nop

08017bd0 <uxr_buffer_delete_entity>:
 8017bd0:	b510      	push	{r4, lr}
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	b08e      	sub	sp, #56	; 0x38
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	9103      	str	r1, [sp, #12]
 8017bda:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017bde:	2303      	movs	r3, #3
 8017be0:	2204      	movs	r2, #4
 8017be2:	9300      	str	r3, [sp, #0]
 8017be4:	ab06      	add	r3, sp, #24
 8017be6:	f001 fb77 	bl	80192d8 <uxr_prepare_stream_to_write_submessage>
 8017bea:	b918      	cbnz	r0, 8017bf4 <uxr_buffer_delete_entity+0x24>
 8017bec:	4604      	mov	r4, r0
 8017bee:	4620      	mov	r0, r4
 8017bf0:	b00e      	add	sp, #56	; 0x38
 8017bf2:	bd10      	pop	{r4, pc}
 8017bf4:	9902      	ldr	r1, [sp, #8]
 8017bf6:	aa05      	add	r2, sp, #20
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	f001 fca9 	bl	8019550 <uxr_init_base_object_request>
 8017bfe:	4604      	mov	r4, r0
 8017c00:	a905      	add	r1, sp, #20
 8017c02:	a806      	add	r0, sp, #24
 8017c04:	f003 fbae 	bl	801b364 <uxr_serialize_DELETE_Payload>
 8017c08:	4620      	mov	r0, r4
 8017c0a:	b00e      	add	sp, #56	; 0x38
 8017c0c:	bd10      	pop	{r4, pc}
 8017c0e:	bf00      	nop

08017c10 <uxr_common_create_entity>:
 8017c10:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017c14:	b510      	push	{r4, lr}
 8017c16:	f1bc 0f01 	cmp.w	ip, #1
 8017c1a:	b08c      	sub	sp, #48	; 0x30
 8017c1c:	4604      	mov	r4, r0
 8017c1e:	9202      	str	r2, [sp, #8]
 8017c20:	bf0c      	ite	eq
 8017c22:	f003 0201 	andeq.w	r2, r3, #1
 8017c26:	2200      	movne	r2, #0
 8017c28:	330e      	adds	r3, #14
 8017c2a:	9103      	str	r1, [sp, #12]
 8017c2c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8017c30:	441a      	add	r2, r3
 8017c32:	ab04      	add	r3, sp, #16
 8017c34:	9101      	str	r1, [sp, #4]
 8017c36:	2101      	movs	r1, #1
 8017c38:	b292      	uxth	r2, r2
 8017c3a:	9100      	str	r1, [sp, #0]
 8017c3c:	9903      	ldr	r1, [sp, #12]
 8017c3e:	f001 fb4b 	bl	80192d8 <uxr_prepare_stream_to_write_submessage>
 8017c42:	b918      	cbnz	r0, 8017c4c <uxr_common_create_entity+0x3c>
 8017c44:	4604      	mov	r4, r0
 8017c46:	4620      	mov	r0, r4
 8017c48:	b00c      	add	sp, #48	; 0x30
 8017c4a:	bd10      	pop	{r4, pc}
 8017c4c:	9902      	ldr	r1, [sp, #8]
 8017c4e:	4620      	mov	r0, r4
 8017c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017c52:	f001 fc7d 	bl	8019550 <uxr_init_base_object_request>
 8017c56:	4604      	mov	r4, r0
 8017c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017c5a:	a804      	add	r0, sp, #16
 8017c5c:	f003 fadc 	bl	801b218 <uxr_serialize_CREATE_Payload>
 8017c60:	4620      	mov	r0, r4
 8017c62:	b00c      	add	sp, #48	; 0x30
 8017c64:	bd10      	pop	{r4, pc}
 8017c66:	bf00      	nop

08017c68 <uxr_buffer_create_participant_bin>:
 8017c68:	b570      	push	{r4, r5, r6, lr}
 8017c6a:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8017c6e:	4605      	mov	r5, r0
 8017c70:	ac11      	add	r4, sp, #68	; 0x44
 8017c72:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8017c76:	2303      	movs	r3, #3
 8017c78:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8017c7c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8017c80:	7223      	strb	r3, [r4, #8]
 8017c82:	2300      	movs	r3, #0
 8017c84:	2201      	movs	r2, #1
 8017c86:	f88d 3014 	strb.w	r3, [sp, #20]
 8017c8a:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8017c8c:	7122      	strb	r2, [r4, #4]
 8017c8e:	b1cb      	cbz	r3, 8017cc4 <uxr_buffer_create_participant_bin+0x5c>
 8017c90:	f88d 201c 	strb.w	r2, [sp, #28]
 8017c94:	9308      	str	r3, [sp, #32]
 8017c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c9a:	a915      	add	r1, sp, #84	; 0x54
 8017c9c:	a809      	add	r0, sp, #36	; 0x24
 8017c9e:	f7fb fcd7 	bl	8013650 <ucdr_init_buffer>
 8017ca2:	a905      	add	r1, sp, #20
 8017ca4:	a809      	add	r0, sp, #36	; 0x24
 8017ca6:	f002 fe6d 	bl	801a984 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8017caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cac:	9600      	str	r6, [sp, #0]
 8017cae:	4628      	mov	r0, r5
 8017cb0:	9401      	str	r4, [sp, #4]
 8017cb2:	60e3      	str	r3, [r4, #12]
 8017cb4:	b29b      	uxth	r3, r3
 8017cb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017cba:	f7ff ffa9 	bl	8017c10 <uxr_common_create_entity>
 8017cbe:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8017cc2:	bd70      	pop	{r4, r5, r6, pc}
 8017cc4:	f88d 301c 	strb.w	r3, [sp, #28]
 8017cc8:	e7e5      	b.n	8017c96 <uxr_buffer_create_participant_bin+0x2e>
 8017cca:	bf00      	nop

08017ccc <uxr_buffer_create_topic_bin>:
 8017ccc:	b570      	push	{r4, r5, r6, lr}
 8017cce:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8017cd2:	4605      	mov	r5, r0
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	9105      	str	r1, [sp, #20]
 8017cd8:	a997      	add	r1, sp, #604	; 0x25c
 8017cda:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8017cde:	ac13      	add	r4, sp, #76	; 0x4c
 8017ce0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017ce4:	2302      	movs	r3, #2
 8017ce6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8017cea:	f000 fa8d 	bl	8018208 <uxr_object_id_to_raw>
 8017cee:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8017cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017cf4:	a917      	add	r1, sp, #92	; 0x5c
 8017cf6:	a80b      	add	r0, sp, #44	; 0x2c
 8017cf8:	9306      	str	r3, [sp, #24]
 8017cfa:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8017cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8017cfe:	2303      	movs	r3, #3
 8017d00:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017d04:	2301      	movs	r3, #1
 8017d06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017d10:	f7fb fc9e 	bl	8013650 <ucdr_init_buffer>
 8017d14:	a906      	add	r1, sp, #24
 8017d16:	a80b      	add	r0, sp, #44	; 0x2c
 8017d18:	f002 fe56 	bl	801a9c8 <uxr_serialize_OBJK_Topic_Binary>
 8017d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d1e:	4628      	mov	r0, r5
 8017d20:	9600      	str	r6, [sp, #0]
 8017d22:	9316      	str	r3, [sp, #88]	; 0x58
 8017d24:	b29b      	uxth	r3, r3
 8017d26:	9401      	str	r4, [sp, #4]
 8017d28:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017d2c:	f7ff ff70 	bl	8017c10 <uxr_common_create_entity>
 8017d30:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8017d34:	bd70      	pop	{r4, r5, r6, pc}
 8017d36:	bf00      	nop

08017d38 <uxr_buffer_create_publisher_bin>:
 8017d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d3a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8017d3e:	2603      	movs	r6, #3
 8017d40:	4605      	mov	r5, r0
 8017d42:	4618      	mov	r0, r3
 8017d44:	9105      	str	r1, [sp, #20]
 8017d46:	a992      	add	r1, sp, #584	; 0x248
 8017d48:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8017d4c:	ac0e      	add	r4, sp, #56	; 0x38
 8017d4e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8017d52:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017d56:	f000 fa57 	bl	8018208 <uxr_object_id_to_raw>
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017d60:	a912      	add	r1, sp, #72	; 0x48
 8017d62:	a806      	add	r0, sp, #24
 8017d64:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017d68:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017d6c:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8017d70:	f7fb fc6e 	bl	8013650 <ucdr_init_buffer>
 8017d74:	a993      	add	r1, sp, #588	; 0x24c
 8017d76:	a806      	add	r0, sp, #24
 8017d78:	f002 feda 	bl	801ab30 <uxr_serialize_OBJK_Publisher_Binary>
 8017d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d7e:	4628      	mov	r0, r5
 8017d80:	9700      	str	r7, [sp, #0]
 8017d82:	9311      	str	r3, [sp, #68]	; 0x44
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	9401      	str	r4, [sp, #4]
 8017d88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017d8c:	f7ff ff40 	bl	8017c10 <uxr_common_create_entity>
 8017d90:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8017d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d96:	bf00      	nop

08017d98 <uxr_buffer_create_subscriber_bin>:
 8017d98:	b570      	push	{r4, r5, r6, lr}
 8017d9a:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8017d9e:	4605      	mov	r5, r0
 8017da0:	4618      	mov	r0, r3
 8017da2:	9105      	str	r1, [sp, #20]
 8017da4:	a992      	add	r1, sp, #584	; 0x248
 8017da6:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8017daa:	ac0e      	add	r4, sp, #56	; 0x38
 8017dac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017db0:	2304      	movs	r3, #4
 8017db2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8017db6:	f000 fa27 	bl	8018208 <uxr_object_id_to_raw>
 8017dba:	2300      	movs	r3, #0
 8017dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017dc0:	a912      	add	r1, sp, #72	; 0x48
 8017dc2:	a806      	add	r0, sp, #24
 8017dc4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8017dc8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8017dcc:	2303      	movs	r3, #3
 8017dce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017dd2:	f7fb fc3d 	bl	8013650 <ucdr_init_buffer>
 8017dd6:	a993      	add	r1, sp, #588	; 0x24c
 8017dd8:	a806      	add	r0, sp, #24
 8017dda:	f002 ff59 	bl	801ac90 <uxr_serialize_OBJK_Subscriber_Binary>
 8017dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017de0:	4628      	mov	r0, r5
 8017de2:	9600      	str	r6, [sp, #0]
 8017de4:	9311      	str	r3, [sp, #68]	; 0x44
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	9401      	str	r4, [sp, #4]
 8017dea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017dee:	f7ff ff0f 	bl	8017c10 <uxr_common_create_entity>
 8017df2:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8017df6:	bd70      	pop	{r4, r5, r6, pc}

08017df8 <uxr_buffer_create_datawriter_bin>:
 8017df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dfc:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017e00:	4606      	mov	r6, r0
 8017e02:	4618      	mov	r0, r3
 8017e04:	2703      	movs	r7, #3
 8017e06:	ac1d      	add	r4, sp, #116	; 0x74
 8017e08:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8017e0c:	9105      	str	r1, [sp, #20]
 8017e0e:	a9a1      	add	r1, sp, #644	; 0x284
 8017e10:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8017e14:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017e18:	2305      	movs	r3, #5
 8017e1a:	7123      	strb	r3, [r4, #4]
 8017e1c:	f000 f9f4 	bl	8018208 <uxr_object_id_to_raw>
 8017e20:	a90e      	add	r1, sp, #56	; 0x38
 8017e22:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8017e24:	7227      	strb	r7, [r4, #8]
 8017e26:	f000 f9ef 	bl	8018208 <uxr_object_id_to_raw>
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017e30:	3d00      	subs	r5, #0
 8017e32:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8017e36:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017e3a:	bf18      	it	ne
 8017e3c:	2501      	movne	r5, #1
 8017e3e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017e42:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017e46:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017e4a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017e4e:	2301      	movs	r3, #1
 8017e50:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017e54:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017e58:	bb8a      	cbnz	r2, 8017ebe <uxr_buffer_create_datawriter_bin+0xc6>
 8017e5a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017e5e:	f04f 0c13 	mov.w	ip, #19
 8017e62:	250b      	movs	r5, #11
 8017e64:	2221      	movs	r2, #33	; 0x21
 8017e66:	2111      	movs	r1, #17
 8017e68:	2009      	movs	r0, #9
 8017e6a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017e6e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8017e72:	b923      	cbnz	r3, 8017e7e <uxr_buffer_create_datawriter_bin+0x86>
 8017e74:	4672      	mov	r2, lr
 8017e76:	4661      	mov	r1, ip
 8017e78:	4628      	mov	r0, r5
 8017e7a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017e7e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8017e82:	2b01      	cmp	r3, #1
 8017e84:	d025      	beq.n	8017ed2 <uxr_buffer_create_datawriter_bin+0xda>
 8017e86:	2b03      	cmp	r3, #3
 8017e88:	d029      	beq.n	8017ede <uxr_buffer_create_datawriter_bin+0xe6>
 8017e8a:	b32b      	cbz	r3, 8017ed8 <uxr_buffer_create_datawriter_bin+0xe0>
 8017e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e90:	a921      	add	r1, sp, #132	; 0x84
 8017e92:	a806      	add	r0, sp, #24
 8017e94:	f7fb fbdc 	bl	8013650 <ucdr_init_buffer>
 8017e98:	a90e      	add	r1, sp, #56	; 0x38
 8017e9a:	a806      	add	r0, sp, #24
 8017e9c:	f002 ffaa 	bl	801adf4 <uxr_serialize_OBJK_DataWriter_Binary>
 8017ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ea2:	f8cd 8000 	str.w	r8, [sp]
 8017ea6:	4630      	mov	r0, r6
 8017ea8:	9401      	str	r4, [sp, #4]
 8017eaa:	60e3      	str	r3, [r4, #12]
 8017eac:	b29b      	uxth	r3, r3
 8017eae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017eb2:	f7ff fead 	bl	8017c10 <uxr_common_create_entity>
 8017eb6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ebe:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017ec2:	f04f 0c12 	mov.w	ip, #18
 8017ec6:	250a      	movs	r5, #10
 8017ec8:	2220      	movs	r2, #32
 8017eca:	2110      	movs	r1, #16
 8017ecc:	2008      	movs	r0, #8
 8017ece:	2702      	movs	r7, #2
 8017ed0:	e7cd      	b.n	8017e6e <uxr_buffer_create_datawriter_bin+0x76>
 8017ed2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017ed6:	e7d9      	b.n	8017e8c <uxr_buffer_create_datawriter_bin+0x94>
 8017ed8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017edc:	e7d6      	b.n	8017e8c <uxr_buffer_create_datawriter_bin+0x94>
 8017ede:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017ee2:	e7d3      	b.n	8017e8c <uxr_buffer_create_datawriter_bin+0x94>

08017ee4 <uxr_buffer_create_datareader_bin>:
 8017ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ee8:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8017eec:	4606      	mov	r6, r0
 8017eee:	4618      	mov	r0, r3
 8017ef0:	2703      	movs	r7, #3
 8017ef2:	ac1f      	add	r4, sp, #124	; 0x7c
 8017ef4:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8017ef8:	9105      	str	r1, [sp, #20]
 8017efa:	a9a3      	add	r1, sp, #652	; 0x28c
 8017efc:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8017f00:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017f04:	2306      	movs	r3, #6
 8017f06:	7123      	strb	r3, [r4, #4]
 8017f08:	f000 f97e 	bl	8018208 <uxr_object_id_to_raw>
 8017f0c:	a90e      	add	r1, sp, #56	; 0x38
 8017f0e:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8017f10:	7227      	strb	r7, [r4, #8]
 8017f12:	f000 f979 	bl	8018208 <uxr_object_id_to_raw>
 8017f16:	2300      	movs	r3, #0
 8017f18:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8017f1c:	3d00      	subs	r5, #0
 8017f1e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8017f22:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8017f26:	bf18      	it	ne
 8017f28:	2501      	movne	r5, #1
 8017f2a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8017f2e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8017f32:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8017f36:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8017f3a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017f3e:	2301      	movs	r3, #1
 8017f40:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8017f44:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017f48:	bb8a      	cbnz	r2, 8017fae <uxr_buffer_create_datareader_bin+0xca>
 8017f4a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8017f4e:	f04f 0c13 	mov.w	ip, #19
 8017f52:	250b      	movs	r5, #11
 8017f54:	2221      	movs	r2, #33	; 0x21
 8017f56:	2111      	movs	r1, #17
 8017f58:	2009      	movs	r0, #9
 8017f5a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8017f5e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8017f62:	b923      	cbnz	r3, 8017f6e <uxr_buffer_create_datareader_bin+0x8a>
 8017f64:	4672      	mov	r2, lr
 8017f66:	4661      	mov	r1, ip
 8017f68:	4628      	mov	r0, r5
 8017f6a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8017f6e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8017f72:	2b01      	cmp	r3, #1
 8017f74:	d025      	beq.n	8017fc2 <uxr_buffer_create_datareader_bin+0xde>
 8017f76:	2b03      	cmp	r3, #3
 8017f78:	d029      	beq.n	8017fce <uxr_buffer_create_datareader_bin+0xea>
 8017f7a:	b32b      	cbz	r3, 8017fc8 <uxr_buffer_create_datareader_bin+0xe4>
 8017f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017f80:	a923      	add	r1, sp, #140	; 0x8c
 8017f82:	a806      	add	r0, sp, #24
 8017f84:	f7fb fb64 	bl	8013650 <ucdr_init_buffer>
 8017f88:	a90e      	add	r1, sp, #56	; 0x38
 8017f8a:	a806      	add	r0, sp, #24
 8017f8c:	f002 fef6 	bl	801ad7c <uxr_serialize_OBJK_DataReader_Binary>
 8017f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f92:	f8cd 8000 	str.w	r8, [sp]
 8017f96:	4630      	mov	r0, r6
 8017f98:	9401      	str	r4, [sp, #4]
 8017f9a:	60e3      	str	r3, [r4, #12]
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8017fa2:	f7ff fe35 	bl	8017c10 <uxr_common_create_entity>
 8017fa6:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8017faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fae:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8017fb2:	f04f 0c12 	mov.w	ip, #18
 8017fb6:	250a      	movs	r5, #10
 8017fb8:	2220      	movs	r2, #32
 8017fba:	2110      	movs	r1, #16
 8017fbc:	2008      	movs	r0, #8
 8017fbe:	2702      	movs	r7, #2
 8017fc0:	e7cd      	b.n	8017f5e <uxr_buffer_create_datareader_bin+0x7a>
 8017fc2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8017fc6:	e7d9      	b.n	8017f7c <uxr_buffer_create_datareader_bin+0x98>
 8017fc8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8017fcc:	e7d6      	b.n	8017f7c <uxr_buffer_create_datareader_bin+0x98>
 8017fce:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017fd2:	e7d3      	b.n	8017f7c <uxr_buffer_create_datareader_bin+0x98>

08017fd4 <uxr_buffer_create_replier_bin>:
 8017fd4:	b570      	push	{r4, r5, r6, lr}
 8017fd6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8017fda:	4605      	mov	r5, r0
 8017fdc:	4618      	mov	r0, r3
 8017fde:	9105      	str	r1, [sp, #20]
 8017fe0:	a999      	add	r1, sp, #612	; 0x264
 8017fe2:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8017fe6:	ac15      	add	r4, sp, #84	; 0x54
 8017fe8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8017fec:	2308      	movs	r3, #8
 8017fee:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8017ff2:	f000 f909 	bl	8018208 <uxr_object_id_to_raw>
 8017ff6:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8017ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ffc:	a919      	add	r1, sp, #100	; 0x64
 8017ffe:	a80d      	add	r0, sp, #52	; 0x34
 8018000:	9306      	str	r3, [sp, #24]
 8018002:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8018004:	9307      	str	r3, [sp, #28]
 8018006:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8018008:	9308      	str	r3, [sp, #32]
 801800a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801800c:	930c      	str	r3, [sp, #48]	; 0x30
 801800e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018010:	930a      	str	r3, [sp, #40]	; 0x28
 8018012:	2301      	movs	r3, #1
 8018014:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018018:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801801c:	2303      	movs	r3, #3
 801801e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8018022:	f7fb fb15 	bl	8013650 <ucdr_init_buffer>
 8018026:	a906      	add	r1, sp, #24
 8018028:	a80d      	add	r0, sp, #52	; 0x34
 801802a:	f002 ff0f 	bl	801ae4c <uxr_serialize_OBJK_Replier_Binary>
 801802e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018030:	4628      	mov	r0, r5
 8018032:	9600      	str	r6, [sp, #0]
 8018034:	9318      	str	r3, [sp, #96]	; 0x60
 8018036:	b29b      	uxth	r3, r3
 8018038:	9401      	str	r4, [sp, #4]
 801803a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801803e:	f7ff fde7 	bl	8017c10 <uxr_common_create_entity>
 8018042:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8018046:	bd70      	pop	{r4, r5, r6, pc}

08018048 <get_custom_error>:
 8018048:	4b01      	ldr	r3, [pc, #4]	; (8018050 <get_custom_error+0x8>)
 801804a:	7818      	ldrb	r0, [r3, #0]
 801804c:	4770      	bx	lr
 801804e:	bf00      	nop
 8018050:	20016ea4 	.word	0x20016ea4

08018054 <recv_custom_msg>:
 8018054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018058:	4693      	mov	fp, r2
 801805a:	b089      	sub	sp, #36	; 0x24
 801805c:	2200      	movs	r2, #0
 801805e:	4604      	mov	r4, r0
 8018060:	468a      	mov	sl, r1
 8018062:	9305      	str	r3, [sp, #20]
 8018064:	f88d 201e 	strb.w	r2, [sp, #30]
 8018068:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 801806c:	b322      	cbz	r2, 80180b8 <recv_custom_msg+0x64>
 801806e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8018072:	f10d 081f 	add.w	r8, sp, #31
 8018076:	af05      	add	r7, sp, #20
 8018078:	f10d 061e 	add.w	r6, sp, #30
 801807c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8018080:	e002      	b.n	8018088 <recv_custom_msg+0x34>
 8018082:	9b05      	ldr	r3, [sp, #20]
 8018084:	2b00      	cmp	r3, #0
 8018086:	dd0f      	ble.n	80180a8 <recv_custom_msg+0x54>
 8018088:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801808c:	4623      	mov	r3, r4
 801808e:	4622      	mov	r2, r4
 8018090:	4648      	mov	r0, r9
 8018092:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8018096:	e9cd 5600 	strd	r5, r6, [sp]
 801809a:	f001 fc6f 	bl	801997c <uxr_read_framed_msg>
 801809e:	2800      	cmp	r0, #0
 80180a0:	d0ef      	beq.n	8018082 <recv_custom_msg+0x2e>
 80180a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80180a6:	b1b3      	cbz	r3, 80180d6 <recv_custom_msg+0x82>
 80180a8:	4b0f      	ldr	r3, [pc, #60]	; (80180e8 <recv_custom_msg+0x94>)
 80180aa:	2000      	movs	r0, #0
 80180ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80180b0:	701a      	strb	r2, [r3, #0]
 80180b2:	b009      	add	sp, #36	; 0x24
 80180b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180b8:	f10d 021f 	add.w	r2, sp, #31
 80180bc:	4601      	mov	r1, r0
 80180be:	9200      	str	r2, [sp, #0]
 80180c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80180c4:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80180c8:	47a8      	blx	r5
 80180ca:	2800      	cmp	r0, #0
 80180cc:	d0ec      	beq.n	80180a8 <recv_custom_msg+0x54>
 80180ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d1e8      	bne.n	80180a8 <recv_custom_msg+0x54>
 80180d6:	f8cb 0000 	str.w	r0, [fp]
 80180da:	2001      	movs	r0, #1
 80180dc:	f8ca 4000 	str.w	r4, [sl]
 80180e0:	b009      	add	sp, #36	; 0x24
 80180e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180e6:	bf00      	nop
 80180e8:	20016ea4 	.word	0x20016ea4

080180ec <send_custom_msg>:
 80180ec:	b530      	push	{r4, r5, lr}
 80180ee:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80180f2:	b087      	sub	sp, #28
 80180f4:	4614      	mov	r4, r2
 80180f6:	b995      	cbnz	r5, 801811e <send_custom_msg+0x32>
 80180f8:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 80180fc:	f10d 0317 	add.w	r3, sp, #23
 8018100:	47a8      	blx	r5
 8018102:	1e03      	subs	r3, r0, #0
 8018104:	bf18      	it	ne
 8018106:	2301      	movne	r3, #1
 8018108:	42a0      	cmp	r0, r4
 801810a:	bf18      	it	ne
 801810c:	2300      	movne	r3, #0
 801810e:	b91b      	cbnz	r3, 8018118 <send_custom_msg+0x2c>
 8018110:	4a0a      	ldr	r2, [pc, #40]	; (801813c <send_custom_msg+0x50>)
 8018112:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8018116:	7011      	strb	r1, [r2, #0]
 8018118:	4618      	mov	r0, r3
 801811a:	b007      	add	sp, #28
 801811c:	bd30      	pop	{r4, r5, pc}
 801811e:	460b      	mov	r3, r1
 8018120:	2200      	movs	r2, #0
 8018122:	f10d 0117 	add.w	r1, sp, #23
 8018126:	9400      	str	r4, [sp, #0]
 8018128:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801812c:	4602      	mov	r2, r0
 801812e:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8018132:	f200 2002 	addw	r0, r0, #514	; 0x202
 8018136:	f001 fa43 	bl	80195c0 <uxr_write_framed_msg>
 801813a:	e7e2      	b.n	8018102 <send_custom_msg+0x16>
 801813c:	20016ea4 	.word	0x20016ea4

08018140 <uxr_set_custom_transport_callbacks>:
 8018140:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8018144:	9901      	ldr	r1, [sp, #4]
 8018146:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801814a:	9b00      	ldr	r3, [sp, #0]
 801814c:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8018150:	4770      	bx	lr
 8018152:	bf00      	nop

08018154 <uxr_init_custom_transport>:
 8018154:	b538      	push	{r3, r4, r5, lr}
 8018156:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801815a:	b303      	cbz	r3, 801819e <uxr_init_custom_transport+0x4a>
 801815c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8018160:	4604      	mov	r4, r0
 8018162:	b1e2      	cbz	r2, 801819e <uxr_init_custom_transport+0x4a>
 8018164:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8018168:	b1ca      	cbz	r2, 801819e <uxr_init_custom_transport+0x4a>
 801816a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801816e:	b1b2      	cbz	r2, 801819e <uxr_init_custom_transport+0x4a>
 8018170:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018174:	4798      	blx	r3
 8018176:	4605      	mov	r5, r0
 8018178:	b188      	cbz	r0, 801819e <uxr_init_custom_transport+0x4a>
 801817a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801817e:	b98b      	cbnz	r3, 80181a4 <uxr_init_custom_transport+0x50>
 8018180:	4b0b      	ldr	r3, [pc, #44]	; (80181b0 <uxr_init_custom_transport+0x5c>)
 8018182:	4628      	mov	r0, r5
 8018184:	490b      	ldr	r1, [pc, #44]	; (80181b4 <uxr_init_custom_transport+0x60>)
 8018186:	4a0c      	ldr	r2, [pc, #48]	; (80181b8 <uxr_init_custom_transport+0x64>)
 8018188:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801818c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018190:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8018194:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8018198:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801819c:	bd38      	pop	{r3, r4, r5, pc}
 801819e:	2500      	movs	r5, #0
 80181a0:	4628      	mov	r0, r5
 80181a2:	bd38      	pop	{r3, r4, r5, pc}
 80181a4:	2100      	movs	r1, #0
 80181a6:	f204 2002 	addw	r0, r4, #514	; 0x202
 80181aa:	f001 fa03 	bl	80195b4 <uxr_init_framing_io>
 80181ae:	e7e7      	b.n	8018180 <uxr_init_custom_transport+0x2c>
 80181b0:	08018055 	.word	0x08018055
 80181b4:	080180ed 	.word	0x080180ed
 80181b8:	08018049 	.word	0x08018049

080181bc <uxr_close_custom_transport>:
 80181bc:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80181c0:	4718      	bx	r3
 80181c2:	bf00      	nop

080181c4 <uxr_object_id>:
 80181c4:	b082      	sub	sp, #8
 80181c6:	2300      	movs	r3, #0
 80181c8:	f88d 1006 	strb.w	r1, [sp, #6]
 80181cc:	f360 030f 	bfi	r3, r0, #0, #16
 80181d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80181d4:	f362 431f 	bfi	r3, r2, #16, #16
 80181d8:	4618      	mov	r0, r3
 80181da:	b002      	add	sp, #8
 80181dc:	4770      	bx	lr
 80181de:	bf00      	nop

080181e0 <uxr_object_id_from_raw>:
 80181e0:	7843      	ldrb	r3, [r0, #1]
 80181e2:	b082      	sub	sp, #8
 80181e4:	7801      	ldrb	r1, [r0, #0]
 80181e6:	2000      	movs	r0, #0
 80181e8:	091a      	lsrs	r2, r3, #4
 80181ea:	f003 030f 	and.w	r3, r3, #15
 80181ee:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80181f2:	f88d 3006 	strb.w	r3, [sp, #6]
 80181f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80181fa:	f362 000f 	bfi	r0, r2, #0, #16
 80181fe:	f363 401f 	bfi	r0, r3, #16, #16
 8018202:	b002      	add	sp, #8
 8018204:	4770      	bx	lr
 8018206:	bf00      	nop

08018208 <uxr_object_id_to_raw>:
 8018208:	4602      	mov	r2, r0
 801820a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801820e:	b082      	sub	sp, #8
 8018210:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8018214:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8018218:	f881 c000 	strb.w	ip, [r1]
 801821c:	7048      	strb	r0, [r1, #1]
 801821e:	b002      	add	sp, #8
 8018220:	4770      	bx	lr
 8018222:	bf00      	nop

08018224 <uxr_buffer_request_data>:
 8018224:	b530      	push	{r4, r5, lr}
 8018226:	b095      	sub	sp, #84	; 0x54
 8018228:	4604      	mov	r4, r0
 801822a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801822c:	9303      	str	r3, [sp, #12]
 801822e:	2d00      	cmp	r5, #0
 8018230:	f88d 301c 	strb.w	r3, [sp, #28]
 8018234:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018238:	f04f 0200 	mov.w	r2, #0
 801823c:	bf14      	ite	ne
 801823e:	2101      	movne	r1, #1
 8018240:	4611      	moveq	r1, r2
 8018242:	f88d 201d 	strb.w	r2, [sp, #29]
 8018246:	f88d 201e 	strb.w	r2, [sp, #30]
 801824a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801824e:	d021      	beq.n	8018294 <uxr_buffer_request_data+0x70>
 8018250:	686b      	ldr	r3, [r5, #4]
 8018252:	2210      	movs	r2, #16
 8018254:	6829      	ldr	r1, [r5, #0]
 8018256:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801825a:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801825e:	2308      	movs	r3, #8
 8018260:	2100      	movs	r1, #0
 8018262:	4620      	mov	r0, r4
 8018264:	e9cd 3100 	strd	r3, r1, [sp]
 8018268:	ab0c      	add	r3, sp, #48	; 0x30
 801826a:	9905      	ldr	r1, [sp, #20]
 801826c:	f001 f834 	bl	80192d8 <uxr_prepare_stream_to_write_submessage>
 8018270:	b918      	cbnz	r0, 801827a <uxr_buffer_request_data+0x56>
 8018272:	4604      	mov	r4, r0
 8018274:	4620      	mov	r0, r4
 8018276:	b015      	add	sp, #84	; 0x54
 8018278:	bd30      	pop	{r4, r5, pc}
 801827a:	9904      	ldr	r1, [sp, #16]
 801827c:	aa06      	add	r2, sp, #24
 801827e:	4620      	mov	r0, r4
 8018280:	f001 f966 	bl	8019550 <uxr_init_base_object_request>
 8018284:	4604      	mov	r4, r0
 8018286:	a906      	add	r1, sp, #24
 8018288:	a80c      	add	r0, sp, #48	; 0x30
 801828a:	f003 f915 	bl	801b4b8 <uxr_serialize_READ_DATA_Payload>
 801828e:	4620      	mov	r0, r4
 8018290:	b015      	add	sp, #84	; 0x54
 8018292:	bd30      	pop	{r4, r5, pc}
 8018294:	2208      	movs	r2, #8
 8018296:	e7e2      	b.n	801825e <uxr_buffer_request_data+0x3a>

08018298 <uxr_buffer_cancel_data>:
 8018298:	b510      	push	{r4, lr}
 801829a:	2300      	movs	r3, #0
 801829c:	b094      	sub	sp, #80	; 0x50
 801829e:	4604      	mov	r4, r0
 80182a0:	9205      	str	r2, [sp, #20]
 80182a2:	9301      	str	r3, [sp, #4]
 80182a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80182a8:	f88d 301e 	strb.w	r3, [sp, #30]
 80182ac:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80182b0:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80182b4:	2308      	movs	r3, #8
 80182b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80182ba:	2201      	movs	r2, #1
 80182bc:	9300      	str	r3, [sp, #0]
 80182be:	ab0c      	add	r3, sp, #48	; 0x30
 80182c0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80182c4:	2210      	movs	r2, #16
 80182c6:	f001 f807 	bl	80192d8 <uxr_prepare_stream_to_write_submessage>
 80182ca:	b918      	cbnz	r0, 80182d4 <uxr_buffer_cancel_data+0x3c>
 80182cc:	4604      	mov	r4, r0
 80182ce:	4620      	mov	r0, r4
 80182d0:	b014      	add	sp, #80	; 0x50
 80182d2:	bd10      	pop	{r4, pc}
 80182d4:	9905      	ldr	r1, [sp, #20]
 80182d6:	aa06      	add	r2, sp, #24
 80182d8:	4620      	mov	r0, r4
 80182da:	f001 f939 	bl	8019550 <uxr_init_base_object_request>
 80182de:	4604      	mov	r4, r0
 80182e0:	a906      	add	r1, sp, #24
 80182e2:	a80c      	add	r0, sp, #48	; 0x30
 80182e4:	f003 f8e8 	bl	801b4b8 <uxr_serialize_READ_DATA_Payload>
 80182e8:	4620      	mov	r0, r4
 80182ea:	b014      	add	sp, #80	; 0x50
 80182ec:	bd10      	pop	{r4, pc}
 80182ee:	bf00      	nop

080182f0 <read_submessage_format>:
 80182f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182f4:	b095      	sub	sp, #84	; 0x54
 80182f6:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 80182fa:	b113      	cbz	r3, 8018302 <read_submessage_format+0x12>
 80182fc:	b015      	add	sp, #84	; 0x54
 80182fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018302:	4606      	mov	r6, r0
 8018304:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018306:	460c      	mov	r4, r1
 8018308:	4615      	mov	r5, r2
 801830a:	9004      	str	r0, [sp, #16]
 801830c:	4699      	mov	r9, r3
 801830e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018310:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8018314:	9005      	str	r0, [sp, #20]
 8018316:	a80c      	add	r0, sp, #48	; 0x30
 8018318:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801831c:	1a52      	subs	r2, r2, r1
 801831e:	f7fb f997 	bl	8013650 <ucdr_init_buffer>
 8018322:	a80c      	add	r0, sp, #48	; 0x30
 8018324:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018328:	f7fb f966 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801832c:	69e2      	ldr	r2, [r4, #28]
 801832e:	b19a      	cbz	r2, 8018358 <read_submessage_format+0x68>
 8018330:	f1b8 0f07 	cmp.w	r8, #7
 8018334:	f882 9014 	strb.w	r9, [r2, #20]
 8018338:	d040      	beq.n	80183bc <read_submessage_format+0xcc>
 801833a:	f1b8 0f08 	cmp.w	r8, #8
 801833e:	d02e      	beq.n	801839e <read_submessage_format+0xae>
 8018340:	f1b8 0f06 	cmp.w	r8, #6
 8018344:	d011      	beq.n	801836a <read_submessage_format+0x7a>
 8018346:	2301      	movs	r3, #1
 8018348:	7513      	strb	r3, [r2, #20]
 801834a:	4629      	mov	r1, r5
 801834c:	4620      	mov	r0, r4
 801834e:	f7fb f9d3 	bl	80136f8 <ucdr_advance_buffer>
 8018352:	b015      	add	sp, #84	; 0x54
 8018354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018358:	f1b8 0f07 	cmp.w	r8, #7
 801835c:	d02e      	beq.n	80183bc <read_submessage_format+0xcc>
 801835e:	f1b8 0f08 	cmp.w	r8, #8
 8018362:	d01c      	beq.n	801839e <read_submessage_format+0xae>
 8018364:	f1b8 0f06 	cmp.w	r8, #6
 8018368:	d1ef      	bne.n	801834a <read_submessage_format+0x5a>
 801836a:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801836e:	f1b8 0f00 	cmp.w	r8, #0
 8018372:	d011      	beq.n	8018398 <read_submessage_format+0xa8>
 8018374:	ab0c      	add	r3, sp, #48	; 0x30
 8018376:	9501      	str	r5, [sp, #4]
 8018378:	463a      	mov	r2, r7
 801837a:	4630      	mov	r0, r6
 801837c:	9300      	str	r3, [sp, #0]
 801837e:	2306      	movs	r3, #6
 8018380:	f88d 3016 	strb.w	r3, [sp, #22]
 8018384:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8018388:	9302      	str	r3, [sp, #8]
 801838a:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801838e:	47c0      	blx	r8
 8018390:	2301      	movs	r3, #1
 8018392:	69e2      	ldr	r2, [r4, #28]
 8018394:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018398:	2a00      	cmp	r2, #0
 801839a:	d1d4      	bne.n	8018346 <read_submessage_format+0x56>
 801839c:	e7d5      	b.n	801834a <read_submessage_format+0x5a>
 801839e:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d0f8      	beq.n	8018398 <read_submessage_format+0xa8>
 80183a6:	a80c      	add	r0, sp, #48	; 0x30
 80183a8:	a906      	add	r1, sp, #24
 80183aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80183ae:	f003 f94f 	bl	801b650 <uxr_deserialize_SampleIdentity>
 80183b2:	b9a0      	cbnz	r0, 80183de <read_submessage_format+0xee>
 80183b4:	69e2      	ldr	r2, [r4, #28]
 80183b6:	2a00      	cmp	r2, #0
 80183b8:	d1c5      	bne.n	8018346 <read_submessage_format+0x56>
 80183ba:	e7c6      	b.n	801834a <read_submessage_format+0x5a>
 80183bc:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80183c0:	b13b      	cbz	r3, 80183d2 <read_submessage_format+0xe2>
 80183c2:	a906      	add	r1, sp, #24
 80183c4:	a80c      	add	r0, sp, #48	; 0x30
 80183c6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80183ca:	f002 fe15 	bl	801aff8 <uxr_deserialize_BaseObjectRequest>
 80183ce:	bb60      	cbnz	r0, 801842a <read_submessage_format+0x13a>
 80183d0:	69e2      	ldr	r2, [r4, #28]
 80183d2:	68a3      	ldr	r3, [r4, #8]
 80183d4:	442b      	add	r3, r5
 80183d6:	60a3      	str	r3, [r4, #8]
 80183d8:	2a00      	cmp	r2, #0
 80183da:	d1b4      	bne.n	8018346 <read_submessage_format+0x56>
 80183dc:	e7b5      	b.n	801834a <read_submessage_format+0x5a>
 80183de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80183e0:	a80c      	add	r0, sp, #48	; 0x30
 80183e2:	eba8 0803 	sub.w	r8, r8, r3
 80183e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80183ea:	44a8      	add	r8, r5
 80183ec:	1a52      	subs	r2, r2, r1
 80183ee:	f7fb f92f 	bl	8013650 <ucdr_init_buffer>
 80183f2:	a80c      	add	r0, sp, #48	; 0x30
 80183f4:	fa1f f888 	uxth.w	r8, r8
 80183f8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80183fc:	f7fb f8fc 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 8018400:	ab0c      	add	r3, sp, #48	; 0x30
 8018402:	2108      	movs	r1, #8
 8018404:	f8cd 8004 	str.w	r8, [sp, #4]
 8018408:	9300      	str	r3, [sp, #0]
 801840a:	463a      	mov	r2, r7
 801840c:	f88d 1016 	strb.w	r1, [sp, #22]
 8018410:	ab06      	add	r3, sp, #24
 8018412:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8018416:	4630      	mov	r0, r6
 8018418:	9102      	str	r1, [sp, #8]
 801841a:	9905      	ldr	r1, [sp, #20]
 801841c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8018420:	47b8      	blx	r7
 8018422:	2301      	movs	r3, #1
 8018424:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018428:	e7c4      	b.n	80183b4 <read_submessage_format+0xc4>
 801842a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801842e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018430:	a80c      	add	r0, sp, #48	; 0x30
 8018432:	1a52      	subs	r2, r2, r1
 8018434:	eba8 0803 	sub.w	r8, r8, r3
 8018438:	f7fb f90a 	bl	8013650 <ucdr_init_buffer>
 801843c:	a80c      	add	r0, sp, #48	; 0x30
 801843e:	44a8      	add	r8, r5
 8018440:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018444:	f7fb f8d8 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 8018448:	ab0c      	add	r3, sp, #48	; 0x30
 801844a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801844e:	fa1f f888 	uxth.w	r8, r8
 8018452:	9300      	str	r3, [sp, #0]
 8018454:	463a      	mov	r2, r7
 8018456:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801845a:	4630      	mov	r0, r6
 801845c:	f8cd 8004 	str.w	r8, [sp, #4]
 8018460:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018464:	2107      	movs	r1, #7
 8018466:	f88d 1016 	strb.w	r1, [sp, #22]
 801846a:	b29b      	uxth	r3, r3
 801846c:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8018470:	9102      	str	r1, [sp, #8]
 8018472:	9905      	ldr	r1, [sp, #20]
 8018474:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8018478:	47b8      	blx	r7
 801847a:	2301      	movs	r3, #1
 801847c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8018480:	e7a6      	b.n	80183d0 <read_submessage_format+0xe0>
 8018482:	bf00      	nop

08018484 <on_get_fragmentation_info>:
 8018484:	b500      	push	{lr}
 8018486:	b08b      	sub	sp, #44	; 0x2c
 8018488:	4601      	mov	r1, r0
 801848a:	2204      	movs	r2, #4
 801848c:	a802      	add	r0, sp, #8
 801848e:	f7fb f8df 	bl	8013650 <ucdr_init_buffer>
 8018492:	f10d 0305 	add.w	r3, sp, #5
 8018496:	f10d 0206 	add.w	r2, sp, #6
 801849a:	a901      	add	r1, sp, #4
 801849c:	a802      	add	r0, sp, #8
 801849e:	f001 fe5d 	bl	801a15c <uxr_read_submessage_header>
 80184a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80184a6:	2b0d      	cmp	r3, #13
 80184a8:	d003      	beq.n	80184b2 <on_get_fragmentation_info+0x2e>
 80184aa:	2000      	movs	r0, #0
 80184ac:	b00b      	add	sp, #44	; 0x2c
 80184ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80184b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80184b6:	f013 0f02 	tst.w	r3, #2
 80184ba:	bf14      	ite	ne
 80184bc:	2002      	movne	r0, #2
 80184be:	2001      	moveq	r0, #1
 80184c0:	b00b      	add	sp, #44	; 0x2c
 80184c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80184c6:	bf00      	nop

080184c8 <read_submessage_get_info>:
 80184c8:	b570      	push	{r4, r5, r6, lr}
 80184ca:	2500      	movs	r5, #0
 80184cc:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80184d0:	460e      	mov	r6, r1
 80184d2:	4604      	mov	r4, r0
 80184d4:	f44f 7224 	mov.w	r2, #656	; 0x290
 80184d8:	4629      	mov	r1, r5
 80184da:	a810      	add	r0, sp, #64	; 0x40
 80184dc:	9503      	str	r5, [sp, #12]
 80184de:	9504      	str	r5, [sp, #16]
 80184e0:	f008 fe20 	bl	8021124 <memset>
 80184e4:	a903      	add	r1, sp, #12
 80184e6:	4630      	mov	r0, r6
 80184e8:	f002 ff26 	bl	801b338 <uxr_deserialize_GET_INFO_Payload>
 80184ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80184f0:	4620      	mov	r0, r4
 80184f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80184f6:	f001 f823 	bl	8019540 <uxr_session_header_offset>
 80184fa:	462b      	mov	r3, r5
 80184fc:	220c      	movs	r2, #12
 80184fe:	a905      	add	r1, sp, #20
 8018500:	9000      	str	r0, [sp, #0]
 8018502:	a808      	add	r0, sp, #32
 8018504:	f7fb f892 	bl	801362c <ucdr_init_buffer_origin_offset>
 8018508:	a910      	add	r1, sp, #64	; 0x40
 801850a:	a808      	add	r0, sp, #32
 801850c:	f002 ff88 	bl	801b420 <uxr_serialize_INFO_Payload>
 8018510:	9b08      	ldr	r3, [sp, #32]
 8018512:	462a      	mov	r2, r5
 8018514:	4629      	mov	r1, r5
 8018516:	4620      	mov	r0, r4
 8018518:	f000 ffbe 	bl	8019498 <uxr_stamp_session_header>
 801851c:	a808      	add	r0, sp, #32
 801851e:	f7fb f8c5 	bl	80136ac <ucdr_buffer_length>
 8018522:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018524:	4602      	mov	r2, r0
 8018526:	a905      	add	r1, sp, #20
 8018528:	e9d3 0400 	ldrd	r0, r4, [r3]
 801852c:	47a0      	blx	r4
 801852e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8018532:	bd70      	pop	{r4, r5, r6, pc}

08018534 <write_submessage_acknack.isra.0>:
 8018534:	b570      	push	{r4, r5, r6, lr}
 8018536:	b092      	sub	sp, #72	; 0x48
 8018538:	4605      	mov	r5, r0
 801853a:	460e      	mov	r6, r1
 801853c:	4614      	mov	r4, r2
 801853e:	f000 ffff 	bl	8019540 <uxr_session_header_offset>
 8018542:	a905      	add	r1, sp, #20
 8018544:	9000      	str	r0, [sp, #0]
 8018546:	2300      	movs	r3, #0
 8018548:	a80a      	add	r0, sp, #40	; 0x28
 801854a:	2211      	movs	r2, #17
 801854c:	f7fb f86e 	bl	801362c <ucdr_init_buffer_origin_offset>
 8018550:	2218      	movs	r2, #24
 8018552:	2300      	movs	r3, #0
 8018554:	210a      	movs	r1, #10
 8018556:	fb02 5404 	mla	r4, r2, r4, r5
 801855a:	a80a      	add	r0, sp, #40	; 0x28
 801855c:	2205      	movs	r2, #5
 801855e:	3450      	adds	r4, #80	; 0x50
 8018560:	f001 fde2 	bl	801a128 <uxr_buffer_submessage_header>
 8018564:	a903      	add	r1, sp, #12
 8018566:	4620      	mov	r0, r4
 8018568:	f006 fb50 	bl	801ec0c <uxr_compute_acknack>
 801856c:	ba40      	rev16	r0, r0
 801856e:	a903      	add	r1, sp, #12
 8018570:	f88d 6010 	strb.w	r6, [sp, #16]
 8018574:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018578:	a80a      	add	r0, sp, #40	; 0x28
 801857a:	f002 ffc3 	bl	801b504 <uxr_serialize_ACKNACK_Payload>
 801857e:	2200      	movs	r2, #0
 8018580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018582:	4628      	mov	r0, r5
 8018584:	4611      	mov	r1, r2
 8018586:	f000 ff87 	bl	8019498 <uxr_stamp_session_header>
 801858a:	a80a      	add	r0, sp, #40	; 0x28
 801858c:	f7fb f88e 	bl	80136ac <ucdr_buffer_length>
 8018590:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8018592:	4602      	mov	r2, r0
 8018594:	a905      	add	r1, sp, #20
 8018596:	e9d3 0400 	ldrd	r0, r4, [r3]
 801859a:	47a0      	blx	r4
 801859c:	b012      	add	sp, #72	; 0x48
 801859e:	bd70      	pop	{r4, r5, r6, pc}

080185a0 <uxr_init_session>:
 80185a0:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80185d8 <uxr_init_session+0x38>
 80185a4:	2300      	movs	r3, #0
 80185a6:	b510      	push	{r4, lr}
 80185a8:	4604      	mov	r4, r0
 80185aa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80185ae:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80185b2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80185b6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80185ba:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80185be:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80185c2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80185c6:	2181      	movs	r1, #129	; 0x81
 80185c8:	f000 feca 	bl	8019360 <uxr_init_session_info>
 80185cc:	f104 0008 	add.w	r0, r4, #8
 80185d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185d4:	f001 bcc4 	b.w	8019f60 <uxr_init_stream_storage>
	...

080185e0 <uxr_set_status_callback>:
 80185e0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80185e4:	4770      	bx	lr
 80185e6:	bf00      	nop

080185e8 <uxr_set_topic_callback>:
 80185e8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80185ec:	4770      	bx	lr
 80185ee:	bf00      	nop

080185f0 <uxr_set_request_callback>:
 80185f0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80185f4:	4770      	bx	lr
 80185f6:	bf00      	nop

080185f8 <uxr_set_reply_callback>:
 80185f8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80185fc:	4770      	bx	lr
 80185fe:	bf00      	nop

08018600 <uxr_create_output_best_effort_stream>:
 8018600:	b510      	push	{r4, lr}
 8018602:	4604      	mov	r4, r0
 8018604:	b084      	sub	sp, #16
 8018606:	e9cd 2100 	strd	r2, r1, [sp]
 801860a:	f000 ff99 	bl	8019540 <uxr_session_header_offset>
 801860e:	4603      	mov	r3, r0
 8018610:	f104 0008 	add.w	r0, r4, #8
 8018614:	e9dd 2100 	ldrd	r2, r1, [sp]
 8018618:	b004      	add	sp, #16
 801861a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801861e:	f001 bce5 	b.w	8019fec <uxr_add_output_best_effort_buffer>
 8018622:	bf00      	nop

08018624 <uxr_create_output_reliable_stream>:
 8018624:	b530      	push	{r4, r5, lr}
 8018626:	b089      	sub	sp, #36	; 0x24
 8018628:	4604      	mov	r4, r0
 801862a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801862e:	9303      	str	r3, [sp, #12]
 8018630:	f000 ff86 	bl	8019540 <uxr_session_header_offset>
 8018634:	4605      	mov	r5, r0
 8018636:	9905      	ldr	r1, [sp, #20]
 8018638:	f104 0008 	add.w	r0, r4, #8
 801863c:	9500      	str	r5, [sp, #0]
 801863e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8018642:	f001 fce7 	bl	801a014 <uxr_add_output_reliable_buffer>
 8018646:	2200      	movs	r2, #0
 8018648:	fa5f fc80 	uxtb.w	ip, r0
 801864c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8018650:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018654:	0e03      	lsrs	r3, r0, #24
 8018656:	f36c 0207 	bfi	r2, ip, #0, #8
 801865a:	f364 220f 	bfi	r2, r4, #8, #8
 801865e:	f361 4217 	bfi	r2, r1, #16, #8
 8018662:	f363 621f 	bfi	r2, r3, #24, #8
 8018666:	4610      	mov	r0, r2
 8018668:	b009      	add	sp, #36	; 0x24
 801866a:	bd30      	pop	{r4, r5, pc}

0801866c <uxr_create_input_best_effort_stream>:
 801866c:	b082      	sub	sp, #8
 801866e:	3008      	adds	r0, #8
 8018670:	b002      	add	sp, #8
 8018672:	f001 bce9 	b.w	801a048 <uxr_add_input_best_effort_buffer>
 8018676:	bf00      	nop

08018678 <uxr_create_input_reliable_stream>:
 8018678:	b510      	push	{r4, lr}
 801867a:	4c0c      	ldr	r4, [pc, #48]	; (80186ac <uxr_create_input_reliable_stream+0x34>)
 801867c:	b084      	sub	sp, #16
 801867e:	3008      	adds	r0, #8
 8018680:	9400      	str	r4, [sp, #0]
 8018682:	f001 fcf7 	bl	801a074 <uxr_add_input_reliable_buffer>
 8018686:	2200      	movs	r2, #0
 8018688:	fa5f fe80 	uxtb.w	lr, r0
 801868c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8018690:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8018694:	0e03      	lsrs	r3, r0, #24
 8018696:	f36e 0207 	bfi	r2, lr, #0, #8
 801869a:	f36c 220f 	bfi	r2, ip, #8, #8
 801869e:	f361 4217 	bfi	r2, r1, #16, #8
 80186a2:	f363 621f 	bfi	r2, r3, #24, #8
 80186a6:	4610      	mov	r0, r2
 80186a8:	b004      	add	sp, #16
 80186aa:	bd10      	pop	{r4, pc}
 80186ac:	08018485 	.word	0x08018485

080186b0 <uxr_epoch_nanos>:
 80186b0:	b510      	push	{r4, lr}
 80186b2:	4604      	mov	r4, r0
 80186b4:	f001 fd9a 	bl	801a1ec <uxr_nanos>
 80186b8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80186bc:	1ac0      	subs	r0, r0, r3
 80186be:	eb61 0102 	sbc.w	r1, r1, r2
 80186c2:	bd10      	pop	{r4, pc}

080186c4 <uxr_flash_output_streams>:
 80186c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186c8:	7e03      	ldrb	r3, [r0, #24]
 80186ca:	b084      	sub	sp, #16
 80186cc:	4604      	mov	r4, r0
 80186ce:	b1fb      	cbz	r3, 8018710 <uxr_flash_output_streams+0x4c>
 80186d0:	f04f 0900 	mov.w	r9, #0
 80186d4:	f10d 0802 	add.w	r8, sp, #2
 80186d8:	af03      	add	r7, sp, #12
 80186da:	ae02      	add	r6, sp, #8
 80186dc:	4648      	mov	r0, r9
 80186de:	2201      	movs	r2, #1
 80186e0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80186e4:	4611      	mov	r1, r2
 80186e6:	3508      	adds	r5, #8
 80186e8:	f001 fbe0 	bl	8019eac <uxr_stream_id>
 80186ec:	4684      	mov	ip, r0
 80186ee:	4643      	mov	r3, r8
 80186f0:	463a      	mov	r2, r7
 80186f2:	4631      	mov	r1, r6
 80186f4:	4628      	mov	r0, r5
 80186f6:	f8cd c004 	str.w	ip, [sp, #4]
 80186fa:	f006 fb11 	bl	801ed20 <uxr_prepare_best_effort_buffer_to_send>
 80186fe:	2800      	cmp	r0, #0
 8018700:	d13d      	bne.n	801877e <uxr_flash_output_streams+0xba>
 8018702:	f109 0901 	add.w	r9, r9, #1
 8018706:	7e23      	ldrb	r3, [r4, #24]
 8018708:	fa5f f089 	uxtb.w	r0, r9
 801870c:	4283      	cmp	r3, r0
 801870e:	d8e6      	bhi.n	80186de <uxr_flash_output_streams+0x1a>
 8018710:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018714:	b383      	cbz	r3, 8018778 <uxr_flash_output_streams+0xb4>
 8018716:	f04f 0900 	mov.w	r9, #0
 801871a:	f10d 0802 	add.w	r8, sp, #2
 801871e:	af03      	add	r7, sp, #12
 8018720:	ae02      	add	r6, sp, #8
 8018722:	4648      	mov	r0, r9
 8018724:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8018728:	2201      	movs	r2, #1
 801872a:	2102      	movs	r1, #2
 801872c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8018730:	f001 fbbc 	bl	8019eac <uxr_stream_id>
 8018734:	9001      	str	r0, [sp, #4]
 8018736:	3520      	adds	r5, #32
 8018738:	e00c      	b.n	8018754 <uxr_flash_output_streams+0x90>
 801873a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801873e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8018742:	9b02      	ldr	r3, [sp, #8]
 8018744:	f000 fea8 	bl	8019498 <uxr_stamp_session_header>
 8018748:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801874a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801874e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8018752:	47d0      	blx	sl
 8018754:	4643      	mov	r3, r8
 8018756:	463a      	mov	r2, r7
 8018758:	4631      	mov	r1, r6
 801875a:	4628      	mov	r0, r5
 801875c:	f006 fd04 	bl	801f168 <uxr_prepare_next_reliable_buffer_to_send>
 8018760:	4603      	mov	r3, r0
 8018762:	4620      	mov	r0, r4
 8018764:	2b00      	cmp	r3, #0
 8018766:	d1e8      	bne.n	801873a <uxr_flash_output_streams+0x76>
 8018768:	f109 0901 	add.w	r9, r9, #1
 801876c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8018770:	fa5f f089 	uxtb.w	r0, r9
 8018774:	4283      	cmp	r3, r0
 8018776:	d8d5      	bhi.n	8018724 <uxr_flash_output_streams+0x60>
 8018778:	b004      	add	sp, #16
 801877a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801877e:	9b02      	ldr	r3, [sp, #8]
 8018780:	4620      	mov	r0, r4
 8018782:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018786:	f109 0901 	add.w	r9, r9, #1
 801878a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801878e:	f000 fe83 	bl	8019498 <uxr_stamp_session_header>
 8018792:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018794:	9a03      	ldr	r2, [sp, #12]
 8018796:	685d      	ldr	r5, [r3, #4]
 8018798:	6818      	ldr	r0, [r3, #0]
 801879a:	9902      	ldr	r1, [sp, #8]
 801879c:	47a8      	blx	r5
 801879e:	7e23      	ldrb	r3, [r4, #24]
 80187a0:	fa5f f089 	uxtb.w	r0, r9
 80187a4:	4283      	cmp	r3, r0
 80187a6:	d89a      	bhi.n	80186de <uxr_flash_output_streams+0x1a>
 80187a8:	e7b2      	b.n	8018710 <uxr_flash_output_streams+0x4c>
 80187aa:	bf00      	nop

080187ac <read_submessage_info>:
 80187ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187b0:	460d      	mov	r5, r1
 80187b2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80187b6:	4606      	mov	r6, r0
 80187b8:	4669      	mov	r1, sp
 80187ba:	4628      	mov	r0, r5
 80187bc:	f002 fcce 	bl	801b15c <uxr_deserialize_BaseObjectReply>
 80187c0:	4604      	mov	r4, r0
 80187c2:	a902      	add	r1, sp, #8
 80187c4:	4628      	mov	r0, r5
 80187c6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80187ca:	f7f9 fc51 	bl	8012070 <ucdr_deserialize_bool>
 80187ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80187d2:	4004      	ands	r4, r0
 80187d4:	b2e4      	uxtb	r4, r4
 80187d6:	b95b      	cbnz	r3, 80187f0 <read_submessage_info+0x44>
 80187d8:	a987      	add	r1, sp, #540	; 0x21c
 80187da:	4628      	mov	r0, r5
 80187dc:	f7f9 fc48 	bl	8012070 <ucdr_deserialize_bool>
 80187e0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80187e4:	4680      	mov	r8, r0
 80187e6:	b94b      	cbnz	r3, 80187fc <read_submessage_info+0x50>
 80187e8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80187ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187f0:	a903      	add	r1, sp, #12
 80187f2:	4628      	mov	r0, r5
 80187f4:	f002 fb5e 	bl	801aeb4 <uxr_deserialize_ObjectVariant>
 80187f8:	4004      	ands	r4, r0
 80187fa:	e7ed      	b.n	80187d8 <read_submessage_info+0x2c>
 80187fc:	a988      	add	r1, sp, #544	; 0x220
 80187fe:	4628      	mov	r0, r5
 8018800:	f7f9 fc64 	bl	80120cc <ucdr_deserialize_uint8_t>
 8018804:	ea14 0f08 	tst.w	r4, r8
 8018808:	d0ee      	beq.n	80187e8 <read_submessage_info+0x3c>
 801880a:	2800      	cmp	r0, #0
 801880c:	d0ec      	beq.n	80187e8 <read_submessage_info+0x3c>
 801880e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8018812:	2b0d      	cmp	r3, #13
 8018814:	d1e8      	bne.n	80187e8 <read_submessage_info+0x3c>
 8018816:	a98a      	add	r1, sp, #552	; 0x228
 8018818:	4628      	mov	r0, r5
 801881a:	f7fa f9fd 	bl	8012c18 <ucdr_deserialize_int16_t>
 801881e:	b138      	cbz	r0, 8018830 <read_submessage_info+0x84>
 8018820:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8018824:	2b00      	cmp	r3, #0
 8018826:	dd06      	ble.n	8018836 <read_submessage_info+0x8a>
 8018828:	2f00      	cmp	r7, #0
 801882a:	bf14      	ite	ne
 801882c:	2001      	movne	r0, #1
 801882e:	2002      	moveq	r0, #2
 8018830:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8018834:	e7d8      	b.n	80187e8 <read_submessage_info+0x3c>
 8018836:	2000      	movs	r0, #0
 8018838:	e7fa      	b.n	8018830 <read_submessage_info+0x84>
 801883a:	bf00      	nop

0801883c <read_submessage_list>:
 801883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018840:	4604      	mov	r4, r0
 8018842:	b097      	sub	sp, #92	; 0x5c
 8018844:	460d      	mov	r5, r1
 8018846:	4ec1      	ldr	r6, [pc, #772]	; (8018b4c <read_submessage_list+0x310>)
 8018848:	9209      	str	r2, [sp, #36]	; 0x24
 801884a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801884e:	aa0c      	add	r2, sp, #48	; 0x30
 8018850:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8018854:	4628      	mov	r0, r5
 8018856:	f001 fc81 	bl	801a15c <uxr_read_submessage_header>
 801885a:	2800      	cmp	r0, #0
 801885c:	f000 8142 	beq.w	8018ae4 <read_submessage_list+0x2a8>
 8018860:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8018864:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8018868:	3b02      	subs	r3, #2
 801886a:	2b0d      	cmp	r3, #13
 801886c:	d8ed      	bhi.n	801884a <read_submessage_list+0xe>
 801886e:	a101      	add	r1, pc, #4	; (adr r1, 8018874 <read_submessage_list+0x38>)
 8018870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018874:	08018adb 	.word	0x08018adb
 8018878:	0801884b 	.word	0x0801884b
 801887c:	08018acb 	.word	0x08018acb
 8018880:	08018a69 	.word	0x08018a69
 8018884:	08018a5f 	.word	0x08018a5f
 8018888:	0801884b 	.word	0x0801884b
 801888c:	0801884b 	.word	0x0801884b
 8018890:	080189b5 	.word	0x080189b5
 8018894:	08018947 	.word	0x08018947
 8018898:	08018907 	.word	0x08018907
 801889c:	0801884b 	.word	0x0801884b
 80188a0:	0801884b 	.word	0x0801884b
 80188a4:	0801884b 	.word	0x0801884b
 80188a8:	080188ad 	.word	0x080188ad
 80188ac:	a910      	add	r1, sp, #64	; 0x40
 80188ae:	4628      	mov	r0, r5
 80188b0:	f002 fe7c 	bl	801b5ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80188b4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 80188b8:	f1b8 0f00 	cmp.w	r8, #0
 80188bc:	f000 811a 	beq.w	8018af4 <read_submessage_list+0x2b8>
 80188c0:	f001 fc94 	bl	801a1ec <uxr_nanos>
 80188c4:	4602      	mov	r2, r0
 80188c6:	460b      	mov	r3, r1
 80188c8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80188cc:	2100      	movs	r1, #0
 80188ce:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80188d0:	9006      	str	r0, [sp, #24]
 80188d2:	468c      	mov	ip, r1
 80188d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80188d6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80188da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80188dc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80188e0:	468c      	mov	ip, r1
 80188e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80188e4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80188e8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80188ec:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 80188f0:	fbc7 0106 	smlal	r0, r1, r7, r6
 80188f4:	e9cd 0100 	strd	r0, r1, [sp]
 80188f8:	4620      	mov	r0, r4
 80188fa:	47c0      	blx	r8
 80188fc:	f04f 0301 	mov.w	r3, #1
 8018900:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8018904:	e7a1      	b.n	801884a <read_submessage_list+0xe>
 8018906:	a910      	add	r1, sp, #64	; 0x40
 8018908:	4628      	mov	r0, r5
 801890a:	f002 fe3b 	bl	801b584 <uxr_deserialize_HEARTBEAT_Payload>
 801890e:	2100      	movs	r1, #0
 8018910:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018914:	f001 faf8 	bl	8019f08 <uxr_stream_id_from_raw>
 8018918:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801891c:	900f      	str	r0, [sp, #60]	; 0x3c
 801891e:	f104 0008 	add.w	r0, r4, #8
 8018922:	4641      	mov	r1, r8
 8018924:	f001 fbde 	bl	801a0e4 <uxr_get_input_reliable_stream>
 8018928:	2800      	cmp	r0, #0
 801892a:	d08e      	beq.n	801884a <read_submessage_list+0xe>
 801892c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8018930:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8018934:	f006 f95e 	bl	801ebf4 <uxr_process_heartbeat>
 8018938:	4642      	mov	r2, r8
 801893a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801893e:	4620      	mov	r0, r4
 8018940:	f7ff fdf8 	bl	8018534 <write_submessage_acknack.isra.0>
 8018944:	e781      	b.n	801884a <read_submessage_list+0xe>
 8018946:	a910      	add	r1, sp, #64	; 0x40
 8018948:	4628      	mov	r0, r5
 801894a:	f002 fdf3 	bl	801b534 <uxr_deserialize_ACKNACK_Payload>
 801894e:	2100      	movs	r1, #0
 8018950:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8018954:	f001 fad8 	bl	8019f08 <uxr_stream_id_from_raw>
 8018958:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801895c:	900d      	str	r0, [sp, #52]	; 0x34
 801895e:	f104 0008 	add.w	r0, r4, #8
 8018962:	f001 fba9 	bl	801a0b8 <uxr_get_output_reliable_stream>
 8018966:	4680      	mov	r8, r0
 8018968:	2800      	cmp	r0, #0
 801896a:	f43f af6e 	beq.w	801884a <read_submessage_list+0xe>
 801896e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8018972:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8018976:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801897a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801897e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8018982:	b289      	uxth	r1, r1
 8018984:	f006 fc98 	bl	801f2b8 <uxr_process_acknack>
 8018988:	4640      	mov	r0, r8
 801898a:	f006 fc59 	bl	801f240 <uxr_begin_output_nack_buffer_it>
 801898e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8018992:	e005      	b.n	80189a0 <read_submessage_list+0x164>
 8018994:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018996:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801899a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801899e:	47c8      	blx	r9
 80189a0:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80189a4:	aa0f      	add	r2, sp, #60	; 0x3c
 80189a6:	4651      	mov	r1, sl
 80189a8:	4640      	mov	r0, r8
 80189aa:	f006 fc4b 	bl	801f244 <uxr_next_reliable_nack_buffer_to_send>
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d1f0      	bne.n	8018994 <read_submessage_list+0x158>
 80189b2:	e74a      	b.n	801884a <read_submessage_list+0xe>
 80189b4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80189b8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80189bc:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 80189c0:	4628      	mov	r0, r5
 80189c2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80189c6:	4651      	mov	r1, sl
 80189c8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80189cc:	f1a8 0804 	sub.w	r8, r8, #4
 80189d0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80189d4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80189d8:	fa1f f888 	uxth.w	r8, r8
 80189dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80189e0:	f009 090e 	and.w	r9, r9, #14
 80189e4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80189e8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80189ec:	f002 fb04 	bl	801aff8 <uxr_deserialize_BaseObjectRequest>
 80189f0:	4650      	mov	r0, sl
 80189f2:	a90f      	add	r1, sp, #60	; 0x3c
 80189f4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80189f8:	f000 fdca 	bl	8019590 <uxr_parse_base_object_request>
 80189fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80189fe:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8018a02:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8018a06:	9110      	str	r1, [sp, #64]	; 0x40
 8018a08:	f1bb 0f00 	cmp.w	fp, #0
 8018a0c:	d006      	beq.n	8018a1c <read_submessage_list+0x1e0>
 8018a0e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018a12:	4652      	mov	r2, sl
 8018a14:	4620      	mov	r0, r4
 8018a16:	9300      	str	r3, [sp, #0]
 8018a18:	2300      	movs	r3, #0
 8018a1a:	47d8      	blx	fp
 8018a1c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018a1e:	b182      	cbz	r2, 8018a42 <read_submessage_list+0x206>
 8018a20:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8018a22:	f04f 0c00 	mov.w	ip, #0
 8018a26:	3902      	subs	r1, #2
 8018a28:	e003      	b.n	8018a32 <read_submessage_list+0x1f6>
 8018a2a:	f10c 0c01 	add.w	ip, ip, #1
 8018a2e:	4594      	cmp	ip, r2
 8018a30:	d007      	beq.n	8018a42 <read_submessage_list+0x206>
 8018a32:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8018a36:	4553      	cmp	r3, sl
 8018a38:	d1f7      	bne.n	8018a2a <read_submessage_list+0x1ee>
 8018a3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	f803 200c 	strb.w	r2, [r3, ip]
 8018a42:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8018a46:	464b      	mov	r3, r9
 8018a48:	4642      	mov	r2, r8
 8018a4a:	4620      	mov	r0, r4
 8018a4c:	9102      	str	r1, [sp, #8]
 8018a4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018a50:	9101      	str	r1, [sp, #4]
 8018a52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018a54:	9100      	str	r1, [sp, #0]
 8018a56:	4629      	mov	r1, r5
 8018a58:	f7ff fc4a 	bl	80182f0 <read_submessage_format>
 8018a5c:	e6f5      	b.n	801884a <read_submessage_list+0xe>
 8018a5e:	4629      	mov	r1, r5
 8018a60:	4620      	mov	r0, r4
 8018a62:	f7ff fea3 	bl	80187ac <read_submessage_info>
 8018a66:	e6f0      	b.n	801884a <read_submessage_list+0xe>
 8018a68:	2a00      	cmp	r2, #0
 8018a6a:	d03e      	beq.n	8018aea <read_submessage_list+0x2ae>
 8018a6c:	a910      	add	r1, sp, #64	; 0x40
 8018a6e:	4628      	mov	r0, r5
 8018a70:	f002 fcb8 	bl	801b3e4 <uxr_deserialize_STATUS_Payload>
 8018a74:	a90e      	add	r1, sp, #56	; 0x38
 8018a76:	aa0d      	add	r2, sp, #52	; 0x34
 8018a78:	a810      	add	r0, sp, #64	; 0x40
 8018a7a:	f000 fd89 	bl	8019590 <uxr_parse_base_object_request>
 8018a7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018a80:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8018a84:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8018a88:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8018a8c:	910f      	str	r1, [sp, #60]	; 0x3c
 8018a8e:	f1ba 0f00 	cmp.w	sl, #0
 8018a92:	d006      	beq.n	8018aa2 <read_submessage_list+0x266>
 8018a94:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8018a98:	4642      	mov	r2, r8
 8018a9a:	4620      	mov	r0, r4
 8018a9c:	9300      	str	r3, [sp, #0]
 8018a9e:	464b      	mov	r3, r9
 8018aa0:	47d0      	blx	sl
 8018aa2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8018aa4:	2a00      	cmp	r2, #0
 8018aa6:	f43f aed0 	beq.w	801884a <read_submessage_list+0xe>
 8018aaa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8018aac:	2100      	movs	r1, #0
 8018aae:	3802      	subs	r0, #2
 8018ab0:	e003      	b.n	8018aba <read_submessage_list+0x27e>
 8018ab2:	3101      	adds	r1, #1
 8018ab4:	4291      	cmp	r1, r2
 8018ab6:	f43f aec8 	beq.w	801884a <read_submessage_list+0xe>
 8018aba:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8018abe:	4543      	cmp	r3, r8
 8018ac0:	d1f7      	bne.n	8018ab2 <read_submessage_list+0x276>
 8018ac2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8018ac4:	f803 9001 	strb.w	r9, [r3, r1]
 8018ac8:	e6bf      	b.n	801884a <read_submessage_list+0xe>
 8018aca:	2a00      	cmp	r2, #0
 8018acc:	f47f aebd 	bne.w	801884a <read_submessage_list+0xe>
 8018ad0:	4629      	mov	r1, r5
 8018ad2:	4620      	mov	r0, r4
 8018ad4:	f000 fca0 	bl	8019418 <uxr_read_create_session_status>
 8018ad8:	e6b7      	b.n	801884a <read_submessage_list+0xe>
 8018ada:	4629      	mov	r1, r5
 8018adc:	4620      	mov	r0, r4
 8018ade:	f7ff fcf3 	bl	80184c8 <read_submessage_get_info>
 8018ae2:	e6b2      	b.n	801884a <read_submessage_list+0xe>
 8018ae4:	b017      	add	sp, #92	; 0x5c
 8018ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aea:	4629      	mov	r1, r5
 8018aec:	4620      	mov	r0, r4
 8018aee:	f000 fca1 	bl	8019434 <uxr_read_delete_session_status>
 8018af2:	e6aa      	b.n	801884a <read_submessage_list+0xe>
 8018af4:	f001 fb7a 	bl	801a1ec <uxr_nanos>
 8018af8:	4642      	mov	r2, r8
 8018afa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018afe:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018b02:	1818      	adds	r0, r3, r0
 8018b04:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018b06:	eb42 0101 	adc.w	r1, r2, r1
 8018b0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b0c:	4642      	mov	r2, r8
 8018b0e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8018b12:	469c      	mov	ip, r3
 8018b14:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8018b18:	fbc3 7806 	smlal	r7, r8, r3, r6
 8018b1c:	4643      	mov	r3, r8
 8018b1e:	eb1c 0c07 	adds.w	ip, ip, r7
 8018b22:	eb42 0203 	adc.w	r2, r2, r3
 8018b26:	ebb0 030c 	subs.w	r3, r0, ip
 8018b2a:	eb61 0202 	sbc.w	r2, r1, r2
 8018b2e:	2a00      	cmp	r2, #0
 8018b30:	db08      	blt.n	8018b44 <read_submessage_list+0x308>
 8018b32:	085b      	lsrs	r3, r3, #1
 8018b34:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8018b38:	1052      	asrs	r2, r2, #1
 8018b3a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8018b3e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8018b42:	e6db      	b.n	80188fc <read_submessage_list+0xc0>
 8018b44:	3301      	adds	r3, #1
 8018b46:	f142 0200 	adc.w	r2, r2, #0
 8018b4a:	e7f2      	b.n	8018b32 <read_submessage_list+0x2f6>
 8018b4c:	3b9aca00 	.word	0x3b9aca00

08018b50 <listen_message_reliably>:
 8018b50:	1e0b      	subs	r3, r1, #0
 8018b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b56:	bfb8      	it	lt
 8018b58:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8018b5c:	b09d      	sub	sp, #116	; 0x74
 8018b5e:	4680      	mov	r8, r0
 8018b60:	9305      	str	r3, [sp, #20]
 8018b62:	f001 fb27 	bl	801a1b4 <uxr_millis>
 8018b66:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8018b6a:	4681      	mov	r9, r0
 8018b6c:	2a00      	cmp	r2, #0
 8018b6e:	f000 809a 	beq.w	8018ca6 <listen_message_reliably+0x156>
 8018b72:	2600      	movs	r6, #0
 8018b74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018b78:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8018b7c:	460f      	mov	r7, r1
 8018b7e:	4630      	mov	r0, r6
 8018b80:	9303      	str	r3, [sp, #12]
 8018b82:	e00e      	b.n	8018ba2 <listen_message_reliably+0x52>
 8018b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018b86:	3601      	adds	r6, #1
 8018b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b8a:	455a      	cmp	r2, fp
 8018b8c:	9903      	ldr	r1, [sp, #12]
 8018b8e:	b2f0      	uxtb	r0, r6
 8018b90:	eb73 0101 	sbcs.w	r1, r3, r1
 8018b94:	da01      	bge.n	8018b9a <listen_message_reliably+0x4a>
 8018b96:	4693      	mov	fp, r2
 8018b98:	9303      	str	r3, [sp, #12]
 8018b9a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8018b9e:	4283      	cmp	r3, r0
 8018ba0:	d95f      	bls.n	8018c62 <listen_message_reliably+0x112>
 8018ba2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8018ba6:	2102      	movs	r1, #2
 8018ba8:	2201      	movs	r2, #1
 8018baa:	00e4      	lsls	r4, r4, #3
 8018bac:	f001 f97e 	bl	8019eac <uxr_stream_id>
 8018bb0:	4601      	mov	r1, r0
 8018bb2:	f104 0520 	add.w	r5, r4, #32
 8018bb6:	463b      	mov	r3, r7
 8018bb8:	464a      	mov	r2, r9
 8018bba:	9109      	str	r1, [sp, #36]	; 0x24
 8018bbc:	4445      	add	r5, r8
 8018bbe:	4628      	mov	r0, r5
 8018bc0:	f006 fb12 	bl	801f1e8 <uxr_update_output_stream_heartbeat_timestamp>
 8018bc4:	eb08 0304 	add.w	r3, r8, r4
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	d0db      	beq.n	8018b84 <listen_message_reliably+0x34>
 8018bcc:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8018bd0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8018bd4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018bd8:	4640      	mov	r0, r8
 8018bda:	3501      	adds	r5, #1
 8018bdc:	4444      	add	r4, r8
 8018bde:	9304      	str	r3, [sp, #16]
 8018be0:	f000 fcae 	bl	8019540 <uxr_session_header_offset>
 8018be4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8018be8:	2300      	movs	r3, #0
 8018bea:	2211      	movs	r2, #17
 8018bec:	a90c      	add	r1, sp, #48	; 0x30
 8018bee:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8018bf2:	9000      	str	r0, [sp, #0]
 8018bf4:	4650      	mov	r0, sl
 8018bf6:	3601      	adds	r6, #1
 8018bf8:	f7fa fd18 	bl	801362c <ucdr_init_buffer_origin_offset>
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	2205      	movs	r2, #5
 8018c00:	210b      	movs	r1, #11
 8018c02:	4650      	mov	r0, sl
 8018c04:	f001 fa90 	bl	801a128 <uxr_buffer_submessage_header>
 8018c08:	2101      	movs	r1, #1
 8018c0a:	8968      	ldrh	r0, [r5, #10]
 8018c0c:	f006 fbb0 	bl	801f370 <uxr_seq_num_add>
 8018c10:	892b      	ldrh	r3, [r5, #8]
 8018c12:	4602      	mov	r2, r0
 8018c14:	a90a      	add	r1, sp, #40	; 0x28
 8018c16:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018c1a:	4650      	mov	r0, sl
 8018c1c:	9b04      	ldr	r3, [sp, #16]
 8018c1e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018c22:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8018c26:	f002 fc99 	bl	801b55c <uxr_serialize_HEARTBEAT_Payload>
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c2e:	4640      	mov	r0, r8
 8018c30:	4611      	mov	r1, r2
 8018c32:	f000 fc31 	bl	8019498 <uxr_stamp_session_header>
 8018c36:	4650      	mov	r0, sl
 8018c38:	f7fa fd38 	bl	80136ac <ucdr_buffer_length>
 8018c3c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8018c40:	4602      	mov	r2, r0
 8018c42:	a90c      	add	r1, sp, #48	; 0x30
 8018c44:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018c48:	47a8      	blx	r5
 8018c4a:	9903      	ldr	r1, [sp, #12]
 8018c4c:	b2f0      	uxtb	r0, r6
 8018c4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8018c52:	455a      	cmp	r2, fp
 8018c54:	eb73 0101 	sbcs.w	r1, r3, r1
 8018c58:	db9d      	blt.n	8018b96 <listen_message_reliably+0x46>
 8018c5a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8018c5e:	4283      	cmp	r3, r0
 8018c60:	d89f      	bhi.n	8018ba2 <listen_message_reliably+0x52>
 8018c62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c66:	9a03      	ldr	r2, [sp, #12]
 8018c68:	429a      	cmp	r2, r3
 8018c6a:	bf08      	it	eq
 8018c6c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8018c70:	d019      	beq.n	8018ca6 <listen_message_reliably+0x156>
 8018c72:	ebab 0309 	sub.w	r3, fp, r9
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	9d05      	ldr	r5, [sp, #20]
 8018c7a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8018c7e:	aa08      	add	r2, sp, #32
 8018c80:	bf08      	it	eq
 8018c82:	2301      	moveq	r3, #1
 8018c84:	a907      	add	r1, sp, #28
 8018c86:	6884      	ldr	r4, [r0, #8]
 8018c88:	429d      	cmp	r5, r3
 8018c8a:	6800      	ldr	r0, [r0, #0]
 8018c8c:	bfa8      	it	ge
 8018c8e:	461d      	movge	r5, r3
 8018c90:	462b      	mov	r3, r5
 8018c92:	47a0      	blx	r4
 8018c94:	b948      	cbnz	r0, 8018caa <listen_message_reliably+0x15a>
 8018c96:	9b05      	ldr	r3, [sp, #20]
 8018c98:	1b5b      	subs	r3, r3, r5
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	9305      	str	r3, [sp, #20]
 8018c9e:	f73f af60 	bgt.w	8018b62 <listen_message_reliably+0x12>
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	e012      	b.n	8018ccc <listen_message_reliably+0x17c>
 8018ca6:	9b05      	ldr	r3, [sp, #20]
 8018ca8:	e7e5      	b.n	8018c76 <listen_message_reliably+0x126>
 8018caa:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8018cae:	4604      	mov	r4, r0
 8018cb0:	2500      	movs	r5, #0
 8018cb2:	a80c      	add	r0, sp, #48	; 0x30
 8018cb4:	f7fa fccc 	bl	8013650 <ucdr_init_buffer>
 8018cb8:	f10d 031a 	add.w	r3, sp, #26
 8018cbc:	aa06      	add	r2, sp, #24
 8018cbe:	a90c      	add	r1, sp, #48	; 0x30
 8018cc0:	4640      	mov	r0, r8
 8018cc2:	f88d 5018 	strb.w	r5, [sp, #24]
 8018cc6:	f000 fbfb 	bl	80194c0 <uxr_read_session_header>
 8018cca:	b918      	cbnz	r0, 8018cd4 <listen_message_reliably+0x184>
 8018ccc:	4620      	mov	r0, r4
 8018cce:	b01d      	add	sp, #116	; 0x74
 8018cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd4:	4629      	mov	r1, r5
 8018cd6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8018cda:	f001 f915 	bl	8019f08 <uxr_stream_id_from_raw>
 8018cde:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8018ce2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8018ce6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8018cea:	2e01      	cmp	r6, #1
 8018cec:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8018cf0:	d04b      	beq.n	8018d8a <listen_message_reliably+0x23a>
 8018cf2:	2e02      	cmp	r6, #2
 8018cf4:	d00f      	beq.n	8018d16 <listen_message_reliably+0x1c6>
 8018cf6:	2e00      	cmp	r6, #0
 8018cf8:	d1e8      	bne.n	8018ccc <listen_message_reliably+0x17c>
 8018cfa:	4631      	mov	r1, r6
 8018cfc:	4630      	mov	r0, r6
 8018cfe:	f001 f903 	bl	8019f08 <uxr_stream_id_from_raw>
 8018d02:	4602      	mov	r2, r0
 8018d04:	a90c      	add	r1, sp, #48	; 0x30
 8018d06:	4640      	mov	r0, r8
 8018d08:	920a      	str	r2, [sp, #40]	; 0x28
 8018d0a:	f7ff fd97 	bl	801883c <read_submessage_list>
 8018d0e:	4620      	mov	r0, r4
 8018d10:	b01d      	add	sp, #116	; 0x74
 8018d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d16:	4629      	mov	r1, r5
 8018d18:	f108 0008 	add.w	r0, r8, #8
 8018d1c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8018d20:	f001 f9e0 	bl	801a0e4 <uxr_get_input_reliable_stream>
 8018d24:	4607      	mov	r7, r0
 8018d26:	b338      	cbz	r0, 8018d78 <listen_message_reliably+0x228>
 8018d28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018d2a:	a80c      	add	r0, sp, #48	; 0x30
 8018d2c:	9203      	str	r2, [sp, #12]
 8018d2e:	f7fa fcc1 	bl	80136b4 <ucdr_buffer_remaining>
 8018d32:	4603      	mov	r3, r0
 8018d34:	f10d 0019 	add.w	r0, sp, #25
 8018d38:	9a03      	ldr	r2, [sp, #12]
 8018d3a:	4651      	mov	r1, sl
 8018d3c:	9000      	str	r0, [sp, #0]
 8018d3e:	4638      	mov	r0, r7
 8018d40:	f005 fe5c 	bl	801e9fc <uxr_receive_reliable_message>
 8018d44:	b1c0      	cbz	r0, 8018d78 <listen_message_reliably+0x228>
 8018d46:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018d4a:	b393      	cbz	r3, 8018db2 <listen_message_reliably+0x262>
 8018d4c:	ae14      	add	r6, sp, #80	; 0x50
 8018d4e:	f04f 0a02 	mov.w	sl, #2
 8018d52:	e00a      	b.n	8018d6a <listen_message_reliably+0x21a>
 8018d54:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8018d58:	4631      	mov	r1, r6
 8018d5a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8018d5e:	4640      	mov	r0, r8
 8018d60:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8018d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d66:	f7ff fd69 	bl	801883c <read_submessage_list>
 8018d6a:	2204      	movs	r2, #4
 8018d6c:	4631      	mov	r1, r6
 8018d6e:	4638      	mov	r0, r7
 8018d70:	f005 fec6 	bl	801eb00 <uxr_next_input_reliable_buffer_available>
 8018d74:	2800      	cmp	r0, #0
 8018d76:	d1ed      	bne.n	8018d54 <listen_message_reliably+0x204>
 8018d78:	4640      	mov	r0, r8
 8018d7a:	462a      	mov	r2, r5
 8018d7c:	4649      	mov	r1, r9
 8018d7e:	f7ff fbd9 	bl	8018534 <write_submessage_acknack.isra.0>
 8018d82:	4620      	mov	r0, r4
 8018d84:	b01d      	add	sp, #116	; 0x74
 8018d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d8a:	4629      	mov	r1, r5
 8018d8c:	f108 0008 	add.w	r0, r8, #8
 8018d90:	f001 f99e 	bl	801a0d0 <uxr_get_input_best_effort_stream>
 8018d94:	2800      	cmp	r0, #0
 8018d96:	d099      	beq.n	8018ccc <listen_message_reliably+0x17c>
 8018d98:	4651      	mov	r1, sl
 8018d9a:	f005 fda5 	bl	801e8e8 <uxr_receive_best_effort_message>
 8018d9e:	2800      	cmp	r0, #0
 8018da0:	d094      	beq.n	8018ccc <listen_message_reliably+0x17c>
 8018da2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018da6:	a90c      	add	r1, sp, #48	; 0x30
 8018da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018daa:	4640      	mov	r0, r8
 8018dac:	f7ff fd46 	bl	801883c <read_submessage_list>
 8018db0:	e78c      	b.n	8018ccc <listen_message_reliably+0x17c>
 8018db2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8018db6:	a90c      	add	r1, sp, #48	; 0x30
 8018db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018dba:	4640      	mov	r0, r8
 8018dbc:	f7ff fd3e 	bl	801883c <read_submessage_list>
 8018dc0:	e7c4      	b.n	8018d4c <listen_message_reliably+0x1fc>
 8018dc2:	bf00      	nop

08018dc4 <uxr_run_session_timeout>:
 8018dc4:	b570      	push	{r4, r5, r6, lr}
 8018dc6:	4604      	mov	r4, r0
 8018dc8:	460d      	mov	r5, r1
 8018dca:	f001 f9f3 	bl	801a1b4 <uxr_millis>
 8018dce:	4606      	mov	r6, r0
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f7ff fc77 	bl	80186c4 <uxr_flash_output_streams>
 8018dd6:	4629      	mov	r1, r5
 8018dd8:	4620      	mov	r0, r4
 8018dda:	f7ff feb9 	bl	8018b50 <listen_message_reliably>
 8018dde:	f001 f9e9 	bl	801a1b4 <uxr_millis>
 8018de2:	1b83      	subs	r3, r0, r6
 8018de4:	1ae9      	subs	r1, r5, r3
 8018de6:	2900      	cmp	r1, #0
 8018de8:	dcf6      	bgt.n	8018dd8 <uxr_run_session_timeout+0x14>
 8018dea:	f104 0008 	add.w	r0, r4, #8
 8018dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018df2:	f001 b983 	b.w	801a0fc <uxr_output_streams_confirmed>
 8018df6:	bf00      	nop

08018df8 <uxr_run_session_until_data>:
 8018df8:	b570      	push	{r4, r5, r6, lr}
 8018dfa:	4604      	mov	r4, r0
 8018dfc:	460d      	mov	r5, r1
 8018dfe:	f001 f9d9 	bl	801a1b4 <uxr_millis>
 8018e02:	4606      	mov	r6, r0
 8018e04:	4620      	mov	r0, r4
 8018e06:	f7ff fc5d 	bl	80186c4 <uxr_flash_output_streams>
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	4629      	mov	r1, r5
 8018e0e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8018e12:	e005      	b.n	8018e20 <uxr_run_session_until_data+0x28>
 8018e14:	f001 f9ce 	bl	801a1b4 <uxr_millis>
 8018e18:	1b83      	subs	r3, r0, r6
 8018e1a:	1ae9      	subs	r1, r5, r3
 8018e1c:	2900      	cmp	r1, #0
 8018e1e:	dd07      	ble.n	8018e30 <uxr_run_session_until_data+0x38>
 8018e20:	4620      	mov	r0, r4
 8018e22:	f7ff fe95 	bl	8018b50 <listen_message_reliably>
 8018e26:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d0f2      	beq.n	8018e14 <uxr_run_session_until_data+0x1c>
 8018e2e:	bd70      	pop	{r4, r5, r6, pc}
 8018e30:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8018e34:	bd70      	pop	{r4, r5, r6, pc}
 8018e36:	bf00      	nop

08018e38 <uxr_run_session_until_confirm_delivery>:
 8018e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e3c:	4606      	mov	r6, r0
 8018e3e:	460d      	mov	r5, r1
 8018e40:	f001 f9b8 	bl	801a1b4 <uxr_millis>
 8018e44:	4607      	mov	r7, r0
 8018e46:	4630      	mov	r0, r6
 8018e48:	f106 0808 	add.w	r8, r6, #8
 8018e4c:	f7ff fc3a 	bl	80186c4 <uxr_flash_output_streams>
 8018e50:	2d00      	cmp	r5, #0
 8018e52:	db10      	blt.n	8018e76 <uxr_run_session_until_confirm_delivery+0x3e>
 8018e54:	462c      	mov	r4, r5
 8018e56:	e006      	b.n	8018e66 <uxr_run_session_until_confirm_delivery+0x2e>
 8018e58:	f7ff fe7a 	bl	8018b50 <listen_message_reliably>
 8018e5c:	f001 f9aa 	bl	801a1b4 <uxr_millis>
 8018e60:	1bc3      	subs	r3, r0, r7
 8018e62:	1aec      	subs	r4, r5, r3
 8018e64:	d407      	bmi.n	8018e76 <uxr_run_session_until_confirm_delivery+0x3e>
 8018e66:	4640      	mov	r0, r8
 8018e68:	f001 f948 	bl	801a0fc <uxr_output_streams_confirmed>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	4621      	mov	r1, r4
 8018e70:	4630      	mov	r0, r6
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d0f0      	beq.n	8018e58 <uxr_run_session_until_confirm_delivery+0x20>
 8018e76:	4640      	mov	r0, r8
 8018e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e7c:	f001 b93e 	b.w	801a0fc <uxr_output_streams_confirmed>

08018e80 <uxr_run_session_until_all_status>:
 8018e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e84:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018e88:	4606      	mov	r6, r0
 8018e8a:	4688      	mov	r8, r1
 8018e8c:	4692      	mov	sl, r2
 8018e8e:	461f      	mov	r7, r3
 8018e90:	f7ff fc18 	bl	80186c4 <uxr_flash_output_streams>
 8018e94:	f1bb 0f00 	cmp.w	fp, #0
 8018e98:	d004      	beq.n	8018ea4 <uxr_run_session_until_all_status+0x24>
 8018e9a:	465a      	mov	r2, fp
 8018e9c:	21ff      	movs	r1, #255	; 0xff
 8018e9e:	4638      	mov	r0, r7
 8018ea0:	f008 f940 	bl	8021124 <memset>
 8018ea4:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018ea8:	1e7d      	subs	r5, r7, #1
 8018eaa:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8018eae:	f001 f981 	bl	801a1b4 <uxr_millis>
 8018eb2:	4641      	mov	r1, r8
 8018eb4:	4681      	mov	r9, r0
 8018eb6:	4630      	mov	r0, r6
 8018eb8:	f7ff fe4a 	bl	8018b50 <listen_message_reliably>
 8018ebc:	f001 f97a 	bl	801a1b4 <uxr_millis>
 8018ec0:	eba0 0009 	sub.w	r0, r0, r9
 8018ec4:	eba8 0100 	sub.w	r1, r8, r0
 8018ec8:	f1bb 0f00 	cmp.w	fp, #0
 8018ecc:	d029      	beq.n	8018f22 <uxr_run_session_until_all_status+0xa2>
 8018ece:	46ae      	mov	lr, r5
 8018ed0:	f04f 0c00 	mov.w	ip, #0
 8018ed4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8018ed8:	2cff      	cmp	r4, #255	; 0xff
 8018eda:	d015      	beq.n	8018f08 <uxr_run_session_until_all_status+0x88>
 8018edc:	f10c 0c01 	add.w	ip, ip, #1
 8018ee0:	45e3      	cmp	fp, ip
 8018ee2:	d8f7      	bhi.n	8018ed4 <uxr_run_session_until_all_status+0x54>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	67f3      	str	r3, [r6, #124]	; 0x7c
 8018ee8:	e000      	b.n	8018eec <uxr_run_session_until_all_status+0x6c>
 8018eea:	b158      	cbz	r0, 8018f04 <uxr_run_session_until_all_status+0x84>
 8018eec:	462b      	mov	r3, r5
 8018eee:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8018ef2:	3302      	adds	r3, #2
 8018ef4:	2801      	cmp	r0, #1
 8018ef6:	eba3 0307 	sub.w	r3, r3, r7
 8018efa:	bf8c      	ite	hi
 8018efc:	2000      	movhi	r0, #0
 8018efe:	2001      	movls	r0, #1
 8018f00:	459b      	cmp	fp, r3
 8018f02:	d8f2      	bhi.n	8018eea <uxr_run_session_until_all_status+0x6a>
 8018f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f08:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8018f0c:	f10c 0c01 	add.w	ip, ip, #1
 8018f10:	45dc      	cmp	ip, fp
 8018f12:	d201      	bcs.n	8018f18 <uxr_run_session_until_all_status+0x98>
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d0dd      	beq.n	8018ed4 <uxr_run_session_until_all_status+0x54>
 8018f18:	2900      	cmp	r1, #0
 8018f1a:	dde3      	ble.n	8018ee4 <uxr_run_session_until_all_status+0x64>
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d1ca      	bne.n	8018eb6 <uxr_run_session_until_all_status+0x36>
 8018f20:	e7e0      	b.n	8018ee4 <uxr_run_session_until_all_status+0x64>
 8018f22:	2001      	movs	r0, #1
 8018f24:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8018f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f2c <wait_session_status>:
 8018f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f30:	4604      	mov	r4, r0
 8018f32:	b09d      	sub	sp, #116	; 0x74
 8018f34:	20ff      	movs	r0, #255	; 0xff
 8018f36:	9303      	str	r3, [sp, #12]
 8018f38:	7160      	strb	r0, [r4, #5]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	f000 80b6 	beq.w	80190ac <wait_session_status+0x180>
 8018f40:	4689      	mov	r9, r1
 8018f42:	4692      	mov	sl, r2
 8018f44:	f04f 0b00 	mov.w	fp, #0
 8018f48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018f4a:	4652      	mov	r2, sl
 8018f4c:	4649      	mov	r1, r9
 8018f4e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8018f52:	47a8      	blx	r5
 8018f54:	f001 f92e 	bl	801a1b4 <uxr_millis>
 8018f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018f5c:	4605      	mov	r5, r0
 8018f5e:	e009      	b.n	8018f74 <wait_session_status+0x48>
 8018f60:	f001 f928 	bl	801a1b4 <uxr_millis>
 8018f64:	1b40      	subs	r0, r0, r5
 8018f66:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	dd40      	ble.n	8018ff0 <wait_session_status+0xc4>
 8018f6e:	7960      	ldrb	r0, [r4, #5]
 8018f70:	28ff      	cmp	r0, #255	; 0xff
 8018f72:	d145      	bne.n	8019000 <wait_session_status+0xd4>
 8018f74:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8018f76:	a908      	add	r1, sp, #32
 8018f78:	6896      	ldr	r6, [r2, #8]
 8018f7a:	6810      	ldr	r0, [r2, #0]
 8018f7c:	aa09      	add	r2, sp, #36	; 0x24
 8018f7e:	47b0      	blx	r6
 8018f80:	2800      	cmp	r0, #0
 8018f82:	d0ed      	beq.n	8018f60 <wait_session_status+0x34>
 8018f84:	a80c      	add	r0, sp, #48	; 0x30
 8018f86:	2600      	movs	r6, #0
 8018f88:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8018f8c:	f7fa fb60 	bl	8013650 <ucdr_init_buffer>
 8018f90:	f10d 031e 	add.w	r3, sp, #30
 8018f94:	aa07      	add	r2, sp, #28
 8018f96:	a90c      	add	r1, sp, #48	; 0x30
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f88d 601c 	strb.w	r6, [sp, #28]
 8018f9e:	f000 fa8f 	bl	80194c0 <uxr_read_session_header>
 8018fa2:	2800      	cmp	r0, #0
 8018fa4:	d0dc      	beq.n	8018f60 <wait_session_status+0x34>
 8018fa6:	4631      	mov	r1, r6
 8018fa8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018fac:	f000 ffac 	bl	8019f08 <uxr_stream_id_from_raw>
 8018fb0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018fb4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8018fb8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8018fbc:	2f01      	cmp	r7, #1
 8018fbe:	9302      	str	r3, [sp, #8]
 8018fc0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8018fc4:	d05c      	beq.n	8019080 <wait_session_status+0x154>
 8018fc6:	2f02      	cmp	r7, #2
 8018fc8:	d020      	beq.n	801900c <wait_session_status+0xe0>
 8018fca:	2f00      	cmp	r7, #0
 8018fcc:	d1c8      	bne.n	8018f60 <wait_session_status+0x34>
 8018fce:	4639      	mov	r1, r7
 8018fd0:	4638      	mov	r0, r7
 8018fd2:	f000 ff99 	bl	8019f08 <uxr_stream_id_from_raw>
 8018fd6:	a90c      	add	r1, sp, #48	; 0x30
 8018fd8:	4602      	mov	r2, r0
 8018fda:	900b      	str	r0, [sp, #44]	; 0x2c
 8018fdc:	4620      	mov	r0, r4
 8018fde:	f7ff fc2d 	bl	801883c <read_submessage_list>
 8018fe2:	f001 f8e7 	bl	801a1b4 <uxr_millis>
 8018fe6:	1b40      	subs	r0, r0, r5
 8018fe8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	dcbe      	bgt.n	8018f6e <wait_session_status+0x42>
 8018ff0:	f10b 0b01 	add.w	fp, fp, #1
 8018ff4:	9b03      	ldr	r3, [sp, #12]
 8018ff6:	7960      	ldrb	r0, [r4, #5]
 8018ff8:	455b      	cmp	r3, fp
 8018ffa:	d001      	beq.n	8019000 <wait_session_status+0xd4>
 8018ffc:	28ff      	cmp	r0, #255	; 0xff
 8018ffe:	d0a3      	beq.n	8018f48 <wait_session_status+0x1c>
 8019000:	38ff      	subs	r0, #255	; 0xff
 8019002:	bf18      	it	ne
 8019004:	2001      	movne	r0, #1
 8019006:	b01d      	add	sp, #116	; 0x74
 8019008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801900c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8019010:	4631      	mov	r1, r6
 8019012:	f104 0008 	add.w	r0, r4, #8
 8019016:	9304      	str	r3, [sp, #16]
 8019018:	f001 f864 	bl	801a0e4 <uxr_get_input_reliable_stream>
 801901c:	4680      	mov	r8, r0
 801901e:	b348      	cbz	r0, 8019074 <wait_session_status+0x148>
 8019020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019022:	a80c      	add	r0, sp, #48	; 0x30
 8019024:	9205      	str	r2, [sp, #20]
 8019026:	f7fa fb45 	bl	80136b4 <ucdr_buffer_remaining>
 801902a:	4603      	mov	r3, r0
 801902c:	f10d 001d 	add.w	r0, sp, #29
 8019030:	9a05      	ldr	r2, [sp, #20]
 8019032:	9000      	str	r0, [sp, #0]
 8019034:	4640      	mov	r0, r8
 8019036:	9902      	ldr	r1, [sp, #8]
 8019038:	f005 fce0 	bl	801e9fc <uxr_receive_reliable_message>
 801903c:	b1d0      	cbz	r0, 8019074 <wait_session_status+0x148>
 801903e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d03a      	beq.n	80190bc <wait_session_status+0x190>
 8019046:	9f04      	ldr	r7, [sp, #16]
 8019048:	e00a      	b.n	8019060 <wait_session_status+0x134>
 801904a:	f04f 0302 	mov.w	r3, #2
 801904e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8019052:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8019056:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 801905a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801905c:	f7ff fbee 	bl	801883c <read_submessage_list>
 8019060:	a914      	add	r1, sp, #80	; 0x50
 8019062:	2204      	movs	r2, #4
 8019064:	4640      	mov	r0, r8
 8019066:	f005 fd4b 	bl	801eb00 <uxr_next_input_reliable_buffer_available>
 801906a:	4603      	mov	r3, r0
 801906c:	a914      	add	r1, sp, #80	; 0x50
 801906e:	4620      	mov	r0, r4
 8019070:	2b00      	cmp	r3, #0
 8019072:	d1ea      	bne.n	801904a <wait_session_status+0x11e>
 8019074:	4632      	mov	r2, r6
 8019076:	9904      	ldr	r1, [sp, #16]
 8019078:	4620      	mov	r0, r4
 801907a:	f7ff fa5b 	bl	8018534 <write_submessage_acknack.isra.0>
 801907e:	e76f      	b.n	8018f60 <wait_session_status+0x34>
 8019080:	4631      	mov	r1, r6
 8019082:	f104 0008 	add.w	r0, r4, #8
 8019086:	f001 f823 	bl	801a0d0 <uxr_get_input_best_effort_stream>
 801908a:	2800      	cmp	r0, #0
 801908c:	f43f af68 	beq.w	8018f60 <wait_session_status+0x34>
 8019090:	9902      	ldr	r1, [sp, #8]
 8019092:	f005 fc29 	bl	801e8e8 <uxr_receive_best_effort_message>
 8019096:	2800      	cmp	r0, #0
 8019098:	f43f af62 	beq.w	8018f60 <wait_session_status+0x34>
 801909c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80190a0:	a90c      	add	r1, sp, #48	; 0x30
 80190a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80190a4:	4620      	mov	r0, r4
 80190a6:	f7ff fbc9 	bl	801883c <read_submessage_list>
 80190aa:	e759      	b.n	8018f60 <wait_session_status+0x34>
 80190ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80190ae:	e9d3 0400 	ldrd	r0, r4, [r3]
 80190b2:	47a0      	blx	r4
 80190b4:	2001      	movs	r0, #1
 80190b6:	b01d      	add	sp, #116	; 0x74
 80190b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190bc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80190c0:	a90c      	add	r1, sp, #48	; 0x30
 80190c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80190c4:	4620      	mov	r0, r4
 80190c6:	f7ff fbb9 	bl	801883c <read_submessage_list>
 80190ca:	e7bc      	b.n	8019046 <wait_session_status+0x11a>

080190cc <uxr_delete_session_retries>:
 80190cc:	b530      	push	{r4, r5, lr}
 80190ce:	b08f      	sub	sp, #60	; 0x3c
 80190d0:	4604      	mov	r4, r0
 80190d2:	460d      	mov	r5, r1
 80190d4:	f000 fa34 	bl	8019540 <uxr_session_header_offset>
 80190d8:	2300      	movs	r3, #0
 80190da:	2210      	movs	r2, #16
 80190dc:	a902      	add	r1, sp, #8
 80190de:	9000      	str	r0, [sp, #0]
 80190e0:	a806      	add	r0, sp, #24
 80190e2:	f7fa faa3 	bl	801362c <ucdr_init_buffer_origin_offset>
 80190e6:	a906      	add	r1, sp, #24
 80190e8:	4620      	mov	r0, r4
 80190ea:	f000 f979 	bl	80193e0 <uxr_buffer_delete_session>
 80190ee:	2200      	movs	r2, #0
 80190f0:	9b06      	ldr	r3, [sp, #24]
 80190f2:	4620      	mov	r0, r4
 80190f4:	4611      	mov	r1, r2
 80190f6:	f000 f9cf 	bl	8019498 <uxr_stamp_session_header>
 80190fa:	a806      	add	r0, sp, #24
 80190fc:	f7fa fad6 	bl	80136ac <ucdr_buffer_length>
 8019100:	462b      	mov	r3, r5
 8019102:	4602      	mov	r2, r0
 8019104:	a902      	add	r1, sp, #8
 8019106:	4620      	mov	r0, r4
 8019108:	f7ff ff10 	bl	8018f2c <wait_session_status>
 801910c:	b118      	cbz	r0, 8019116 <uxr_delete_session_retries+0x4a>
 801910e:	7960      	ldrb	r0, [r4, #5]
 8019110:	fab0 f080 	clz	r0, r0
 8019114:	0940      	lsrs	r0, r0, #5
 8019116:	b00f      	add	sp, #60	; 0x3c
 8019118:	bd30      	pop	{r4, r5, pc}
 801911a:	bf00      	nop

0801911c <uxr_create_session>:
 801911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019120:	f100 0b08 	add.w	fp, r0, #8
 8019124:	4604      	mov	r4, r0
 8019126:	b0ab      	sub	sp, #172	; 0xac
 8019128:	4658      	mov	r0, fp
 801912a:	465e      	mov	r6, fp
 801912c:	f000 ff22 	bl	8019f74 <uxr_reset_stream_storage>
 8019130:	4620      	mov	r0, r4
 8019132:	f000 fa05 	bl	8019540 <uxr_session_header_offset>
 8019136:	2300      	movs	r3, #0
 8019138:	221c      	movs	r2, #28
 801913a:	a90b      	add	r1, sp, #44	; 0x2c
 801913c:	9000      	str	r0, [sp, #0]
 801913e:	a812      	add	r0, sp, #72	; 0x48
 8019140:	f7fa fa74 	bl	801362c <ucdr_init_buffer_origin_offset>
 8019144:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019146:	a912      	add	r1, sp, #72	; 0x48
 8019148:	4620      	mov	r0, r4
 801914a:	8a1a      	ldrh	r2, [r3, #16]
 801914c:	3a04      	subs	r2, #4
 801914e:	b292      	uxth	r2, r2
 8019150:	f000 f91c 	bl	801938c <uxr_buffer_create_session>
 8019154:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019156:	4620      	mov	r0, r4
 8019158:	f000 f98a 	bl	8019470 <uxr_stamp_create_session_header>
 801915c:	a812      	add	r0, sp, #72	; 0x48
 801915e:	f7fa faa5 	bl	80136ac <ucdr_buffer_length>
 8019162:	23ff      	movs	r3, #255	; 0xff
 8019164:	4681      	mov	r9, r0
 8019166:	7163      	strb	r3, [r4, #5]
 8019168:	230a      	movs	r3, #10
 801916a:	9303      	str	r3, [sp, #12]
 801916c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801916e:	464a      	mov	r2, r9
 8019170:	a90b      	add	r1, sp, #44	; 0x2c
 8019172:	e9d3 0500 	ldrd	r0, r5, [r3]
 8019176:	47a8      	blx	r5
 8019178:	f001 f81c 	bl	801a1b4 <uxr_millis>
 801917c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019180:	4605      	mov	r5, r0
 8019182:	e009      	b.n	8019198 <uxr_create_session+0x7c>
 8019184:	f001 f816 	bl	801a1b4 <uxr_millis>
 8019188:	1b40      	subs	r0, r0, r5
 801918a:	7962      	ldrb	r2, [r4, #5]
 801918c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8019190:	2b00      	cmp	r3, #0
 8019192:	dd38      	ble.n	8019206 <uxr_create_session+0xea>
 8019194:	2aff      	cmp	r2, #255	; 0xff
 8019196:	d13c      	bne.n	8019212 <uxr_create_session+0xf6>
 8019198:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801919a:	a907      	add	r1, sp, #28
 801919c:	6897      	ldr	r7, [r2, #8]
 801919e:	6810      	ldr	r0, [r2, #0]
 80191a0:	aa08      	add	r2, sp, #32
 80191a2:	47b8      	blx	r7
 80191a4:	2800      	cmp	r0, #0
 80191a6:	d0ed      	beq.n	8019184 <uxr_create_session+0x68>
 80191a8:	a81a      	add	r0, sp, #104	; 0x68
 80191aa:	2700      	movs	r7, #0
 80191ac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80191b0:	f7fa fa4e 	bl	8013650 <ucdr_init_buffer>
 80191b4:	f10d 031a 	add.w	r3, sp, #26
 80191b8:	aa06      	add	r2, sp, #24
 80191ba:	a91a      	add	r1, sp, #104	; 0x68
 80191bc:	4620      	mov	r0, r4
 80191be:	f88d 7018 	strb.w	r7, [sp, #24]
 80191c2:	f000 f97d 	bl	80194c0 <uxr_read_session_header>
 80191c6:	2800      	cmp	r0, #0
 80191c8:	d0dc      	beq.n	8019184 <uxr_create_session+0x68>
 80191ca:	4639      	mov	r1, r7
 80191cc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80191d0:	f000 fe9a 	bl	8019f08 <uxr_stream_id_from_raw>
 80191d4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80191d8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80191dc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80191e0:	2f01      	cmp	r7, #1
 80191e2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80191e6:	d053      	beq.n	8019290 <uxr_create_session+0x174>
 80191e8:	2f02      	cmp	r7, #2
 80191ea:	d018      	beq.n	801921e <uxr_create_session+0x102>
 80191ec:	2f00      	cmp	r7, #0
 80191ee:	d1c9      	bne.n	8019184 <uxr_create_session+0x68>
 80191f0:	4639      	mov	r1, r7
 80191f2:	4638      	mov	r0, r7
 80191f4:	f000 fe88 	bl	8019f08 <uxr_stream_id_from_raw>
 80191f8:	a91a      	add	r1, sp, #104	; 0x68
 80191fa:	4602      	mov	r2, r0
 80191fc:	900a      	str	r0, [sp, #40]	; 0x28
 80191fe:	4620      	mov	r0, r4
 8019200:	f7ff fb1c 	bl	801883c <read_submessage_list>
 8019204:	e7be      	b.n	8019184 <uxr_create_session+0x68>
 8019206:	9b03      	ldr	r3, [sp, #12]
 8019208:	3b01      	subs	r3, #1
 801920a:	9303      	str	r3, [sp, #12]
 801920c:	d001      	beq.n	8019212 <uxr_create_session+0xf6>
 801920e:	2aff      	cmp	r2, #255	; 0xff
 8019210:	d0ac      	beq.n	801916c <uxr_create_session+0x50>
 8019212:	2a00      	cmp	r2, #0
 8019214:	d051      	beq.n	80192ba <uxr_create_session+0x19e>
 8019216:	2000      	movs	r0, #0
 8019218:	b02b      	add	sp, #172	; 0xac
 801921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801921e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8019222:	4641      	mov	r1, r8
 8019224:	4630      	mov	r0, r6
 8019226:	9304      	str	r3, [sp, #16]
 8019228:	f000 ff5c 	bl	801a0e4 <uxr_get_input_reliable_stream>
 801922c:	4682      	mov	sl, r0
 801922e:	b348      	cbz	r0, 8019284 <uxr_create_session+0x168>
 8019230:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019232:	a81a      	add	r0, sp, #104	; 0x68
 8019234:	9205      	str	r2, [sp, #20]
 8019236:	f7fa fa3d 	bl	80136b4 <ucdr_buffer_remaining>
 801923a:	4603      	mov	r3, r0
 801923c:	f10d 0019 	add.w	r0, sp, #25
 8019240:	9a05      	ldr	r2, [sp, #20]
 8019242:	4659      	mov	r1, fp
 8019244:	9000      	str	r0, [sp, #0]
 8019246:	4650      	mov	r0, sl
 8019248:	f005 fbd8 	bl	801e9fc <uxr_receive_reliable_message>
 801924c:	b1d0      	cbz	r0, 8019284 <uxr_create_session+0x168>
 801924e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d038      	beq.n	80192c8 <uxr_create_session+0x1ac>
 8019256:	9f04      	ldr	r7, [sp, #16]
 8019258:	e00a      	b.n	8019270 <uxr_create_session+0x154>
 801925a:	f04f 0302 	mov.w	r3, #2
 801925e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8019262:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8019266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801926a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801926c:	f7ff fae6 	bl	801883c <read_submessage_list>
 8019270:	a922      	add	r1, sp, #136	; 0x88
 8019272:	2204      	movs	r2, #4
 8019274:	4650      	mov	r0, sl
 8019276:	f005 fc43 	bl	801eb00 <uxr_next_input_reliable_buffer_available>
 801927a:	4603      	mov	r3, r0
 801927c:	a922      	add	r1, sp, #136	; 0x88
 801927e:	4620      	mov	r0, r4
 8019280:	2b00      	cmp	r3, #0
 8019282:	d1ea      	bne.n	801925a <uxr_create_session+0x13e>
 8019284:	4642      	mov	r2, r8
 8019286:	9904      	ldr	r1, [sp, #16]
 8019288:	4620      	mov	r0, r4
 801928a:	f7ff f953 	bl	8018534 <write_submessage_acknack.isra.0>
 801928e:	e779      	b.n	8019184 <uxr_create_session+0x68>
 8019290:	4641      	mov	r1, r8
 8019292:	4630      	mov	r0, r6
 8019294:	f000 ff1c 	bl	801a0d0 <uxr_get_input_best_effort_stream>
 8019298:	2800      	cmp	r0, #0
 801929a:	f43f af73 	beq.w	8019184 <uxr_create_session+0x68>
 801929e:	4659      	mov	r1, fp
 80192a0:	f005 fb22 	bl	801e8e8 <uxr_receive_best_effort_message>
 80192a4:	2800      	cmp	r0, #0
 80192a6:	f43f af6d 	beq.w	8019184 <uxr_create_session+0x68>
 80192aa:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80192ae:	a91a      	add	r1, sp, #104	; 0x68
 80192b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80192b2:	4620      	mov	r0, r4
 80192b4:	f7ff fac2 	bl	801883c <read_submessage_list>
 80192b8:	e764      	b.n	8019184 <uxr_create_session+0x68>
 80192ba:	4630      	mov	r0, r6
 80192bc:	f000 fe5a 	bl	8019f74 <uxr_reset_stream_storage>
 80192c0:	2001      	movs	r0, #1
 80192c2:	b02b      	add	sp, #172	; 0xac
 80192c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80192cc:	a91a      	add	r1, sp, #104	; 0x68
 80192ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80192d0:	4620      	mov	r0, r4
 80192d2:	f7ff fab3 	bl	801883c <read_submessage_list>
 80192d6:	e7be      	b.n	8019256 <uxr_create_session+0x13a>

080192d8 <uxr_prepare_stream_to_write_submessage>:
 80192d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192dc:	b082      	sub	sp, #8
 80192de:	4604      	mov	r4, r0
 80192e0:	4610      	mov	r0, r2
 80192e2:	4615      	mov	r5, r2
 80192e4:	461e      	mov	r6, r3
 80192e6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80192ea:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80192ee:	f105 0904 	add.w	r9, r5, #4
 80192f2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80192f6:	9101      	str	r1, [sp, #4]
 80192f8:	f000 ff56 	bl	801a1a8 <uxr_submessage_padding>
 80192fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019300:	4481      	add	r9, r0
 8019302:	2b01      	cmp	r3, #1
 8019304:	d01d      	beq.n	8019342 <uxr_prepare_stream_to_write_submessage+0x6a>
 8019306:	2b02      	cmp	r3, #2
 8019308:	d116      	bne.n	8019338 <uxr_prepare_stream_to_write_submessage+0x60>
 801930a:	f104 0008 	add.w	r0, r4, #8
 801930e:	4651      	mov	r1, sl
 8019310:	f000 fed2 	bl	801a0b8 <uxr_get_output_reliable_stream>
 8019314:	4604      	mov	r4, r0
 8019316:	b158      	cbz	r0, 8019330 <uxr_prepare_stream_to_write_submessage+0x58>
 8019318:	4649      	mov	r1, r9
 801931a:	4632      	mov	r2, r6
 801931c:	f005 fdb6 	bl	801ee8c <uxr_prepare_reliable_buffer_to_write>
 8019320:	4604      	mov	r4, r0
 8019322:	b12c      	cbz	r4, 8019330 <uxr_prepare_stream_to_write_submessage+0x58>
 8019324:	4643      	mov	r3, r8
 8019326:	b2aa      	uxth	r2, r5
 8019328:	4639      	mov	r1, r7
 801932a:	4630      	mov	r0, r6
 801932c:	f000 fefc 	bl	801a128 <uxr_buffer_submessage_header>
 8019330:	4620      	mov	r0, r4
 8019332:	b002      	add	sp, #8
 8019334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019338:	2400      	movs	r4, #0
 801933a:	4620      	mov	r0, r4
 801933c:	b002      	add	sp, #8
 801933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019342:	f104 0008 	add.w	r0, r4, #8
 8019346:	4651      	mov	r1, sl
 8019348:	f000 feae 	bl	801a0a8 <uxr_get_output_best_effort_stream>
 801934c:	4604      	mov	r4, r0
 801934e:	2800      	cmp	r0, #0
 8019350:	d0ee      	beq.n	8019330 <uxr_prepare_stream_to_write_submessage+0x58>
 8019352:	4649      	mov	r1, r9
 8019354:	4632      	mov	r2, r6
 8019356:	f005 fcc3 	bl	801ece0 <uxr_prepare_best_effort_buffer_to_write>
 801935a:	4604      	mov	r4, r0
 801935c:	e7e1      	b.n	8019322 <uxr_prepare_stream_to_write_submessage+0x4a>
 801935e:	bf00      	nop

08019360 <uxr_init_session_info>:
 8019360:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8019364:	23ff      	movs	r3, #255	; 0xff
 8019366:	7102      	strb	r2, [r0, #4]
 8019368:	f880 c001 	strb.w	ip, [r0, #1]
 801936c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8019370:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019374:	7001      	strb	r1, [r0, #0]
 8019376:	f880 c002 	strb.w	ip, [r0, #2]
 801937a:	7143      	strb	r3, [r0, #5]
 801937c:	70c2      	strb	r2, [r0, #3]
 801937e:	b500      	push	{lr}
 8019380:	f04f 0e09 	mov.w	lr, #9
 8019384:	f8a0 e006 	strh.w	lr, [r0, #6]
 8019388:	f85d fb04 	ldr.w	pc, [sp], #4

0801938c <uxr_buffer_create_session>:
 801938c:	b530      	push	{r4, r5, lr}
 801938e:	2300      	movs	r3, #0
 8019390:	b089      	sub	sp, #36	; 0x24
 8019392:	4d12      	ldr	r5, [pc, #72]	; (80193dc <uxr_buffer_create_session+0x50>)
 8019394:	460c      	mov	r4, r1
 8019396:	9307      	str	r3, [sp, #28]
 8019398:	4619      	mov	r1, r3
 801939a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801939e:	2201      	movs	r2, #1
 80193a0:	9301      	str	r3, [sp, #4]
 80193a2:	80c2      	strh	r2, [r0, #6]
 80193a4:	f88d 2004 	strb.w	r2, [sp, #4]
 80193a8:	682a      	ldr	r2, [r5, #0]
 80193aa:	9303      	str	r3, [sp, #12]
 80193ac:	9200      	str	r2, [sp, #0]
 80193ae:	88aa      	ldrh	r2, [r5, #4]
 80193b0:	9306      	str	r3, [sp, #24]
 80193b2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80193b6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80193ba:	9202      	str	r2, [sp, #8]
 80193bc:	7802      	ldrb	r2, [r0, #0]
 80193be:	4620      	mov	r0, r4
 80193c0:	f88d 200c 	strb.w	r2, [sp, #12]
 80193c4:	2210      	movs	r2, #16
 80193c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80193ca:	f000 fead 	bl	801a128 <uxr_buffer_submessage_header>
 80193ce:	4669      	mov	r1, sp
 80193d0:	4620      	mov	r0, r4
 80193d2:	f001 ff1f 	bl	801b214 <uxr_serialize_CREATE_CLIENT_Payload>
 80193d6:	b009      	add	sp, #36	; 0x24
 80193d8:	bd30      	pop	{r4, r5, pc}
 80193da:	bf00      	nop
 80193dc:	08024874 	.word	0x08024874

080193e0 <uxr_buffer_delete_session>:
 80193e0:	4a0c      	ldr	r2, [pc, #48]	; (8019414 <uxr_buffer_delete_session+0x34>)
 80193e2:	2302      	movs	r3, #2
 80193e4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80193e8:	b510      	push	{r4, lr}
 80193ea:	460c      	mov	r4, r1
 80193ec:	b082      	sub	sp, #8
 80193ee:	8911      	ldrh	r1, [r2, #8]
 80193f0:	2204      	movs	r2, #4
 80193f2:	80c3      	strh	r3, [r0, #6]
 80193f4:	2300      	movs	r3, #0
 80193f6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80193fa:	4620      	mov	r0, r4
 80193fc:	2103      	movs	r1, #3
 80193fe:	f8ad c004 	strh.w	ip, [sp, #4]
 8019402:	f000 fe91 	bl	801a128 <uxr_buffer_submessage_header>
 8019406:	a901      	add	r1, sp, #4
 8019408:	4620      	mov	r0, r4
 801940a:	f001 ffab 	bl	801b364 <uxr_serialize_DELETE_Payload>
 801940e:	b002      	add	sp, #8
 8019410:	bd10      	pop	{r4, pc}
 8019412:	bf00      	nop
 8019414:	08024874 	.word	0x08024874

08019418 <uxr_read_create_session_status>:
 8019418:	b510      	push	{r4, lr}
 801941a:	460b      	mov	r3, r1
 801941c:	b088      	sub	sp, #32
 801941e:	4604      	mov	r4, r0
 8019420:	a901      	add	r1, sp, #4
 8019422:	4618      	mov	r0, r3
 8019424:	f001 ffae 	bl	801b384 <uxr_deserialize_STATUS_AGENT_Payload>
 8019428:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801942c:	7163      	strb	r3, [r4, #5]
 801942e:	b008      	add	sp, #32
 8019430:	bd10      	pop	{r4, pc}
 8019432:	bf00      	nop

08019434 <uxr_read_delete_session_status>:
 8019434:	b510      	push	{r4, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	4604      	mov	r4, r0
 801943a:	4608      	mov	r0, r1
 801943c:	a902      	add	r1, sp, #8
 801943e:	f001 ffd1 	bl	801b3e4 <uxr_deserialize_STATUS_Payload>
 8019442:	88e3      	ldrh	r3, [r4, #6]
 8019444:	2b02      	cmp	r3, #2
 8019446:	d001      	beq.n	801944c <uxr_read_delete_session_status+0x18>
 8019448:	b004      	add	sp, #16
 801944a:	bd10      	pop	{r4, pc}
 801944c:	f10d 000a 	add.w	r0, sp, #10
 8019450:	f7fe fec6 	bl	80181e0 <uxr_object_id_from_raw>
 8019454:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8019458:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801945c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019460:	b29b      	uxth	r3, r3
 8019462:	2b02      	cmp	r3, #2
 8019464:	d1f0      	bne.n	8019448 <uxr_read_delete_session_status+0x14>
 8019466:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801946a:	7163      	strb	r3, [r4, #5]
 801946c:	e7ec      	b.n	8019448 <uxr_read_delete_session_status+0x14>
 801946e:	bf00      	nop

08019470 <uxr_stamp_create_session_header>:
 8019470:	b510      	push	{r4, lr}
 8019472:	2208      	movs	r2, #8
 8019474:	b08a      	sub	sp, #40	; 0x28
 8019476:	4604      	mov	r4, r0
 8019478:	eb0d 0002 	add.w	r0, sp, r2
 801947c:	f7fa f8e8 	bl	8013650 <ucdr_init_buffer>
 8019480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019484:	2300      	movs	r3, #0
 8019486:	a802      	add	r0, sp, #8
 8019488:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801948c:	9400      	str	r4, [sp, #0]
 801948e:	461a      	mov	r2, r3
 8019490:	f001 f846 	bl	801a520 <uxr_serialize_message_header>
 8019494:	b00a      	add	sp, #40	; 0x28
 8019496:	bd10      	pop	{r4, pc}

08019498 <uxr_stamp_session_header>:
 8019498:	b530      	push	{r4, r5, lr}
 801949a:	b08d      	sub	sp, #52	; 0x34
 801949c:	4604      	mov	r4, r0
 801949e:	460d      	mov	r5, r1
 80194a0:	4619      	mov	r1, r3
 80194a2:	a804      	add	r0, sp, #16
 80194a4:	9203      	str	r2, [sp, #12]
 80194a6:	2208      	movs	r2, #8
 80194a8:	f7fa f8d2 	bl	8013650 <ucdr_init_buffer>
 80194ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194b0:	9b03      	ldr	r3, [sp, #12]
 80194b2:	462a      	mov	r2, r5
 80194b4:	a804      	add	r0, sp, #16
 80194b6:	9400      	str	r4, [sp, #0]
 80194b8:	f001 f832 	bl	801a520 <uxr_serialize_message_header>
 80194bc:	b00d      	add	sp, #52	; 0x34
 80194be:	bd30      	pop	{r4, r5, pc}

080194c0 <uxr_read_session_header>:
 80194c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194c4:	4607      	mov	r7, r0
 80194c6:	b084      	sub	sp, #16
 80194c8:	4608      	mov	r0, r1
 80194ca:	460c      	mov	r4, r1
 80194cc:	4615      	mov	r5, r2
 80194ce:	461e      	mov	r6, r3
 80194d0:	f7fa f8f0 	bl	80136b4 <ucdr_buffer_remaining>
 80194d4:	2808      	cmp	r0, #8
 80194d6:	d803      	bhi.n	80194e0 <uxr_read_session_header+0x20>
 80194d8:	2000      	movs	r0, #0
 80194da:	b004      	add	sp, #16
 80194dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194e0:	f10d 080c 	add.w	r8, sp, #12
 80194e4:	4633      	mov	r3, r6
 80194e6:	462a      	mov	r2, r5
 80194e8:	4620      	mov	r0, r4
 80194ea:	f10d 010b 	add.w	r1, sp, #11
 80194ee:	f8cd 8000 	str.w	r8, [sp]
 80194f2:	f001 f833 	bl	801a55c <uxr_deserialize_message_header>
 80194f6:	783a      	ldrb	r2, [r7, #0]
 80194f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80194fc:	4293      	cmp	r3, r2
 80194fe:	d1eb      	bne.n	80194d8 <uxr_read_session_header+0x18>
 8019500:	061b      	lsls	r3, r3, #24
 8019502:	d41b      	bmi.n	801953c <uxr_read_session_header+0x7c>
 8019504:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019508:	787b      	ldrb	r3, [r7, #1]
 801950a:	429a      	cmp	r2, r3
 801950c:	d003      	beq.n	8019516 <uxr_read_session_header+0x56>
 801950e:	2001      	movs	r0, #1
 8019510:	f080 0001 	eor.w	r0, r0, #1
 8019514:	e7e1      	b.n	80194da <uxr_read_session_header+0x1a>
 8019516:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801951a:	1cb8      	adds	r0, r7, #2
 801951c:	78bb      	ldrb	r3, [r7, #2]
 801951e:	429a      	cmp	r2, r3
 8019520:	d1f5      	bne.n	801950e <uxr_read_session_header+0x4e>
 8019522:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8019526:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801952a:	429a      	cmp	r2, r3
 801952c:	d1ef      	bne.n	801950e <uxr_read_session_header+0x4e>
 801952e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8019532:	7843      	ldrb	r3, [r0, #1]
 8019534:	429a      	cmp	r2, r3
 8019536:	d1ea      	bne.n	801950e <uxr_read_session_header+0x4e>
 8019538:	2000      	movs	r0, #0
 801953a:	e7e9      	b.n	8019510 <uxr_read_session_header+0x50>
 801953c:	2001      	movs	r0, #1
 801953e:	e7cc      	b.n	80194da <uxr_read_session_header+0x1a>

08019540 <uxr_session_header_offset>:
 8019540:	f990 3000 	ldrsb.w	r3, [r0]
 8019544:	2b00      	cmp	r3, #0
 8019546:	bfac      	ite	ge
 8019548:	2008      	movge	r0, #8
 801954a:	2004      	movlt	r0, #4
 801954c:	4770      	bx	lr
 801954e:	bf00      	nop

08019550 <uxr_init_base_object_request>:
 8019550:	b510      	push	{r4, lr}
 8019552:	b082      	sub	sp, #8
 8019554:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8019558:	9101      	str	r1, [sp, #4]
 801955a:	88c3      	ldrh	r3, [r0, #6]
 801955c:	f1a3 010a 	sub.w	r1, r3, #10
 8019560:	b289      	uxth	r1, r1
 8019562:	42a1      	cmp	r1, r4
 8019564:	d80f      	bhi.n	8019586 <uxr_init_base_object_request+0x36>
 8019566:	3301      	adds	r3, #1
 8019568:	b29c      	uxth	r4, r3
 801956a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801956e:	b2db      	uxtb	r3, r3
 8019570:	80c4      	strh	r4, [r0, #6]
 8019572:	1c91      	adds	r1, r2, #2
 8019574:	9801      	ldr	r0, [sp, #4]
 8019576:	f882 c000 	strb.w	ip, [r2]
 801957a:	7053      	strb	r3, [r2, #1]
 801957c:	f7fe fe44 	bl	8018208 <uxr_object_id_to_raw>
 8019580:	4620      	mov	r0, r4
 8019582:	b002      	add	sp, #8
 8019584:	bd10      	pop	{r4, pc}
 8019586:	230a      	movs	r3, #10
 8019588:	f04f 0c00 	mov.w	ip, #0
 801958c:	461c      	mov	r4, r3
 801958e:	e7ef      	b.n	8019570 <uxr_init_base_object_request+0x20>

08019590 <uxr_parse_base_object_request>:
 8019590:	b570      	push	{r4, r5, r6, lr}
 8019592:	4604      	mov	r4, r0
 8019594:	3002      	adds	r0, #2
 8019596:	460d      	mov	r5, r1
 8019598:	4616      	mov	r6, r2
 801959a:	f7fe fe21 	bl	80181e0 <uxr_object_id_from_raw>
 801959e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80195a2:	8028      	strh	r0, [r5, #0]
 80195a4:	806b      	strh	r3, [r5, #2]
 80195a6:	7822      	ldrb	r2, [r4, #0]
 80195a8:	7863      	ldrb	r3, [r4, #1]
 80195aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80195ae:	8033      	strh	r3, [r6, #0]
 80195b0:	bd70      	pop	{r4, r5, r6, pc}
 80195b2:	bf00      	nop

080195b4 <uxr_init_framing_io>:
 80195b4:	2300      	movs	r3, #0
 80195b6:	7041      	strb	r1, [r0, #1]
 80195b8:	7003      	strb	r3, [r0, #0]
 80195ba:	8583      	strh	r3, [r0, #44]	; 0x2c
 80195bc:	4770      	bx	lr
 80195be:	bf00      	nop

080195c0 <uxr_write_framed_msg>:
 80195c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195c4:	4617      	mov	r7, r2
 80195c6:	7842      	ldrb	r2, [r0, #1]
 80195c8:	460e      	mov	r6, r1
 80195ca:	b083      	sub	sp, #12
 80195cc:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80195d0:	469b      	mov	fp, r3
 80195d2:	237e      	movs	r3, #126	; 0x7e
 80195d4:	4604      	mov	r4, r0
 80195d6:	2901      	cmp	r1, #1
 80195d8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80195dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80195e0:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80195e4:	f240 8115 	bls.w	8019812 <uxr_write_framed_msg+0x252>
 80195e8:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80195ec:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80195f0:	2202      	movs	r2, #2
 80195f2:	2901      	cmp	r1, #1
 80195f4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80195f8:	d952      	bls.n	80196a0 <uxr_write_framed_msg+0xe0>
 80195fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195fc:	2103      	movs	r1, #3
 80195fe:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8019602:	b2dd      	uxtb	r5, r3
 8019604:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019608:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801960c:	2a01      	cmp	r2, #1
 801960e:	d95c      	bls.n	80196ca <uxr_write_framed_msg+0x10a>
 8019610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019612:	1862      	adds	r2, r4, r1
 8019614:	3101      	adds	r1, #1
 8019616:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801961a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801961e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019622:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019626:	2a01      	cmp	r2, #1
 8019628:	d961      	bls.n	80196ee <uxr_write_framed_msg+0x12e>
 801962a:	1c4a      	adds	r2, r1, #1
 801962c:	4421      	add	r1, r4
 801962e:	b2d2      	uxtb	r2, r2
 8019630:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8019634:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019638:	2b00      	cmp	r3, #0
 801963a:	d06a      	beq.n	8019712 <uxr_write_framed_msg+0x152>
 801963c:	f04f 0800 	mov.w	r8, #0
 8019640:	46c1      	mov	r9, r8
 8019642:	e016      	b.n	8019672 <uxr_write_framed_msg+0xb2>
 8019644:	2a29      	cmp	r2, #41	; 0x29
 8019646:	d868      	bhi.n	801971a <uxr_write_framed_msg+0x15a>
 8019648:	18a0      	adds	r0, r4, r2
 801964a:	3201      	adds	r2, #1
 801964c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019650:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019654:	ea88 0101 	eor.w	r1, r8, r1
 8019658:	4b7d      	ldr	r3, [pc, #500]	; (8019850 <uxr_write_framed_msg+0x290>)
 801965a:	f109 0901 	add.w	r9, r9, #1
 801965e:	b2c9      	uxtb	r1, r1
 8019660:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8019664:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8019668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801966a:	454b      	cmp	r3, r9
 801966c:	d969      	bls.n	8019742 <uxr_write_framed_msg+0x182>
 801966e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019672:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8019676:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801967a:	2801      	cmp	r0, #1
 801967c:	d8e2      	bhi.n	8019644 <uxr_write_framed_msg+0x84>
 801967e:	1c50      	adds	r0, r2, #1
 8019680:	b2c0      	uxtb	r0, r0
 8019682:	2829      	cmp	r0, #41	; 0x29
 8019684:	d849      	bhi.n	801971a <uxr_write_framed_msg+0x15a>
 8019686:	18a0      	adds	r0, r4, r2
 8019688:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801968c:	3202      	adds	r2, #2
 801968e:	f081 0520 	eor.w	r5, r1, #32
 8019692:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019696:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801969a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801969e:	e7d9      	b.n	8019654 <uxr_write_framed_msg+0x94>
 80196a0:	2104      	movs	r1, #4
 80196a2:	f04f 0c03 	mov.w	ip, #3
 80196a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196a8:	4422      	add	r2, r4
 80196aa:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80196ae:	44a4      	add	ip, r4
 80196b0:	b2dd      	uxtb	r5, r3
 80196b2:	f080 0020 	eor.w	r0, r0, #32
 80196b6:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 80196ba:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80196be:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80196c2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80196c6:	2a01      	cmp	r2, #1
 80196c8:	d8a2      	bhi.n	8019610 <uxr_write_framed_msg+0x50>
 80196ca:	1862      	adds	r2, r4, r1
 80196cc:	207d      	movs	r0, #125	; 0x7d
 80196ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196d0:	f085 0520 	eor.w	r5, r5, #32
 80196d4:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 80196d8:	3102      	adds	r1, #2
 80196da:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80196de:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 80196e2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80196e6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80196ea:	2a01      	cmp	r2, #1
 80196ec:	d89d      	bhi.n	801962a <uxr_write_framed_msg+0x6a>
 80196ee:	1c4d      	adds	r5, r1, #1
 80196f0:	1c8a      	adds	r2, r1, #2
 80196f2:	f080 0020 	eor.w	r0, r0, #32
 80196f6:	4421      	add	r1, r4
 80196f8:	fa54 f585 	uxtab	r5, r4, r5
 80196fc:	b2d2      	uxtb	r2, r2
 80196fe:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8019702:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8019706:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801970a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801970e:	2b00      	cmp	r3, #0
 8019710:	d194      	bne.n	801963c <uxr_write_framed_msg+0x7c>
 8019712:	4619      	mov	r1, r3
 8019714:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019718:	e019      	b.n	801974e <uxr_write_framed_msg+0x18e>
 801971a:	2500      	movs	r5, #0
 801971c:	e000      	b.n	8019720 <uxr_write_framed_msg+0x160>
 801971e:	b160      	cbz	r0, 801973a <uxr_write_framed_msg+0x17a>
 8019720:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019724:	1b52      	subs	r2, r2, r5
 8019726:	4653      	mov	r3, sl
 8019728:	4638      	mov	r0, r7
 801972a:	4421      	add	r1, r4
 801972c:	47b0      	blx	r6
 801972e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019732:	4405      	add	r5, r0
 8019734:	4295      	cmp	r5, r2
 8019736:	d3f2      	bcc.n	801971e <uxr_write_framed_msg+0x15e>
 8019738:	d066      	beq.n	8019808 <uxr_write_framed_msg+0x248>
 801973a:	2000      	movs	r0, #0
 801973c:	b003      	add	sp, #12
 801973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019742:	fa5f f188 	uxtb.w	r1, r8
 8019746:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801974a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801974e:	f04f 0900 	mov.w	r9, #0
 8019752:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8019756:	46c8      	mov	r8, r9
 8019758:	e013      	b.n	8019782 <uxr_write_framed_msg+0x1c2>
 801975a:	2a29      	cmp	r2, #41	; 0x29
 801975c:	d824      	bhi.n	80197a8 <uxr_write_framed_msg+0x1e8>
 801975e:	18a3      	adds	r3, r4, r2
 8019760:	3201      	adds	r2, #1
 8019762:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8019766:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801976a:	f109 0901 	add.w	r9, r9, #1
 801976e:	f1b9 0f02 	cmp.w	r9, #2
 8019772:	d02d      	beq.n	80197d0 <uxr_write_framed_msg+0x210>
 8019774:	f109 0308 	add.w	r3, r9, #8
 8019778:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801977c:	446b      	add	r3, sp
 801977e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8019782:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8019786:	2b01      	cmp	r3, #1
 8019788:	d8e7      	bhi.n	801975a <uxr_write_framed_msg+0x19a>
 801978a:	1c53      	adds	r3, r2, #1
 801978c:	b2db      	uxtb	r3, r3
 801978e:	2b29      	cmp	r3, #41	; 0x29
 8019790:	d80a      	bhi.n	80197a8 <uxr_write_framed_msg+0x1e8>
 8019792:	18a3      	adds	r3, r4, r2
 8019794:	f081 0120 	eor.w	r1, r1, #32
 8019798:	3202      	adds	r2, #2
 801979a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801979e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 80197a2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80197a6:	e7e0      	b.n	801976a <uxr_write_framed_msg+0x1aa>
 80197a8:	2500      	movs	r5, #0
 80197aa:	e001      	b.n	80197b0 <uxr_write_framed_msg+0x1f0>
 80197ac:	2800      	cmp	r0, #0
 80197ae:	d0c4      	beq.n	801973a <uxr_write_framed_msg+0x17a>
 80197b0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80197b4:	1b52      	subs	r2, r2, r5
 80197b6:	4653      	mov	r3, sl
 80197b8:	4638      	mov	r0, r7
 80197ba:	4421      	add	r1, r4
 80197bc:	47b0      	blx	r6
 80197be:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80197c2:	4405      	add	r5, r0
 80197c4:	4295      	cmp	r5, r2
 80197c6:	d3f1      	bcc.n	80197ac <uxr_write_framed_msg+0x1ec>
 80197c8:	d1b7      	bne.n	801973a <uxr_write_framed_msg+0x17a>
 80197ca:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 80197ce:	e7d1      	b.n	8019774 <uxr_write_framed_msg+0x1b4>
 80197d0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80197d4:	b19a      	cbz	r2, 80197fe <uxr_write_framed_msg+0x23e>
 80197d6:	2500      	movs	r5, #0
 80197d8:	e001      	b.n	80197de <uxr_write_framed_msg+0x21e>
 80197da:	2800      	cmp	r0, #0
 80197dc:	d0ad      	beq.n	801973a <uxr_write_framed_msg+0x17a>
 80197de:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80197e2:	1b52      	subs	r2, r2, r5
 80197e4:	4653      	mov	r3, sl
 80197e6:	4638      	mov	r0, r7
 80197e8:	4421      	add	r1, r4
 80197ea:	47b0      	blx	r6
 80197ec:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80197f0:	4405      	add	r5, r0
 80197f2:	4295      	cmp	r5, r2
 80197f4:	d3f1      	bcc.n	80197da <uxr_write_framed_msg+0x21a>
 80197f6:	d1a0      	bne.n	801973a <uxr_write_framed_msg+0x17a>
 80197f8:	2300      	movs	r3, #0
 80197fa:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80197fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019800:	b298      	uxth	r0, r3
 8019802:	b003      	add	sp, #12
 8019804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019808:	f04f 0300 	mov.w	r3, #0
 801980c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019810:	e72a      	b.n	8019668 <uxr_write_framed_msg+0xa8>
 8019812:	217d      	movs	r1, #125	; 0x7d
 8019814:	f082 0220 	eor.w	r2, r2, #32
 8019818:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801981c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019820:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8019824:	2203      	movs	r2, #3
 8019826:	2901      	cmp	r1, #1
 8019828:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801982c:	d803      	bhi.n	8019836 <uxr_write_framed_msg+0x276>
 801982e:	2105      	movs	r1, #5
 8019830:	f04f 0c04 	mov.w	ip, #4
 8019834:	e737      	b.n	80196a6 <uxr_write_framed_msg+0xe6>
 8019836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019838:	2104      	movs	r1, #4
 801983a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801983e:	b2dd      	uxtb	r5, r3
 8019840:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8019844:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8019848:	2a01      	cmp	r2, #1
 801984a:	f63f aee1 	bhi.w	8019610 <uxr_write_framed_msg+0x50>
 801984e:	e73c      	b.n	80196ca <uxr_write_framed_msg+0x10a>
 8019850:	080259f4 	.word	0x080259f4

08019854 <uxr_framing_read_transport>:
 8019854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019858:	4604      	mov	r4, r0
 801985a:	b085      	sub	sp, #20
 801985c:	4692      	mov	sl, r2
 801985e:	4689      	mov	r9, r1
 8019860:	461d      	mov	r5, r3
 8019862:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019864:	f000 fca6 	bl	801a1b4 <uxr_millis>
 8019868:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801986c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8019870:	4680      	mov	r8, r0
 8019872:	42ba      	cmp	r2, r7
 8019874:	d05f      	beq.n	8019936 <uxr_framing_read_transport+0xe2>
 8019876:	d817      	bhi.n	80198a8 <uxr_framing_read_transport+0x54>
 8019878:	3f01      	subs	r7, #1
 801987a:	1aba      	subs	r2, r7, r2
 801987c:	2700      	movs	r7, #0
 801987e:	b2d2      	uxtb	r2, r2
 8019880:	42b2      	cmp	r2, r6
 8019882:	d81a      	bhi.n	80198ba <uxr_framing_read_transport+0x66>
 8019884:	19d3      	adds	r3, r2, r7
 8019886:	42b3      	cmp	r3, r6
 8019888:	d852      	bhi.n	8019930 <uxr_framing_read_transport+0xdc>
 801988a:	b9d2      	cbnz	r2, 80198c2 <uxr_framing_read_transport+0x6e>
 801988c:	2600      	movs	r6, #0
 801988e:	f000 fc91 	bl	801a1b4 <uxr_millis>
 8019892:	682b      	ldr	r3, [r5, #0]
 8019894:	eba0 0008 	sub.w	r0, r0, r8
 8019898:	1a1b      	subs	r3, r3, r0
 801989a:	4630      	mov	r0, r6
 801989c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80198a0:	602b      	str	r3, [r5, #0]
 80198a2:	b005      	add	sp, #20
 80198a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a8:	2f00      	cmp	r7, #0
 80198aa:	d060      	beq.n	801996e <uxr_framing_read_transport+0x11a>
 80198ac:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 80198b0:	3f01      	subs	r7, #1
 80198b2:	b2d2      	uxtb	r2, r2
 80198b4:	b2ff      	uxtb	r7, r7
 80198b6:	42b2      	cmp	r2, r6
 80198b8:	d9e4      	bls.n	8019884 <uxr_framing_read_transport+0x30>
 80198ba:	b2f2      	uxtb	r2, r6
 80198bc:	2700      	movs	r7, #0
 80198be:	2a00      	cmp	r2, #0
 80198c0:	d0e4      	beq.n	801988c <uxr_framing_read_transport+0x38>
 80198c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198c4:	4650      	mov	r0, sl
 80198c6:	9203      	str	r2, [sp, #12]
 80198c8:	9300      	str	r3, [sp, #0]
 80198ca:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80198ce:	682b      	ldr	r3, [r5, #0]
 80198d0:	3102      	adds	r1, #2
 80198d2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8019978 <uxr_framing_read_transport+0x124>
 80198d6:	4421      	add	r1, r4
 80198d8:	47c8      	blx	r9
 80198da:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80198de:	4606      	mov	r6, r0
 80198e0:	4403      	add	r3, r0
 80198e2:	0859      	lsrs	r1, r3, #1
 80198e4:	fbab 2101 	umull	r2, r1, fp, r1
 80198e8:	222a      	movs	r2, #42	; 0x2a
 80198ea:	0889      	lsrs	r1, r1, #2
 80198ec:	fb02 3111 	mls	r1, r2, r1, r3
 80198f0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d0c9      	beq.n	801988c <uxr_framing_read_transport+0x38>
 80198f8:	9a03      	ldr	r2, [sp, #12]
 80198fa:	4290      	cmp	r0, r2
 80198fc:	d1c7      	bne.n	801988e <uxr_framing_read_transport+0x3a>
 80198fe:	2f00      	cmp	r7, #0
 8019900:	d0c5      	beq.n	801988e <uxr_framing_read_transport+0x3a>
 8019902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019904:	3102      	adds	r1, #2
 8019906:	463a      	mov	r2, r7
 8019908:	4650      	mov	r0, sl
 801990a:	4421      	add	r1, r4
 801990c:	9300      	str	r3, [sp, #0]
 801990e:	2300      	movs	r3, #0
 8019910:	47c8      	blx	r9
 8019912:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8019916:	4406      	add	r6, r0
 8019918:	1813      	adds	r3, r2, r0
 801991a:	085a      	lsrs	r2, r3, #1
 801991c:	fbab 1b02 	umull	r1, fp, fp, r2
 8019920:	222a      	movs	r2, #42	; 0x2a
 8019922:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8019926:	fb02 331b 	mls	r3, r2, fp, r3
 801992a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801992e:	e7ae      	b.n	801988e <uxr_framing_read_transport+0x3a>
 8019930:	1ab6      	subs	r6, r6, r2
 8019932:	b2f7      	uxtb	r7, r6
 8019934:	e7a9      	b.n	801988a <uxr_framing_read_transport+0x36>
 8019936:	2300      	movs	r3, #0
 8019938:	2e28      	cmp	r6, #40	; 0x28
 801993a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801993c:	d9bd      	bls.n	80198ba <uxr_framing_read_transport+0x66>
 801993e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019940:	2229      	movs	r2, #41	; 0x29
 8019942:	1ca1      	adds	r1, r4, #2
 8019944:	4650      	mov	r0, sl
 8019946:	9300      	str	r3, [sp, #0]
 8019948:	682b      	ldr	r3, [r5, #0]
 801994a:	47c8      	blx	r9
 801994c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019950:	4606      	mov	r6, r0
 8019952:	212a      	movs	r1, #42	; 0x2a
 8019954:	4403      	add	r3, r0
 8019956:	4808      	ldr	r0, [pc, #32]	; (8019978 <uxr_framing_read_transport+0x124>)
 8019958:	085a      	lsrs	r2, r3, #1
 801995a:	fba0 0202 	umull	r0, r2, r0, r2
 801995e:	0892      	lsrs	r2, r2, #2
 8019960:	fb01 3312 	mls	r3, r1, r2, r3
 8019964:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8019968:	2e00      	cmp	r6, #0
 801996a:	d08f      	beq.n	801988c <uxr_framing_read_transport+0x38>
 801996c:	e78f      	b.n	801988e <uxr_framing_read_transport+0x3a>
 801996e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8019972:	b2d2      	uxtb	r2, r2
 8019974:	e784      	b.n	8019880 <uxr_framing_read_transport+0x2c>
 8019976:	bf00      	nop
 8019978:	30c30c31 	.word	0x30c30c31

0801997c <uxr_read_framed_msg>:
 801997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019980:	461e      	mov	r6, r3
 8019982:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019986:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801998a:	b083      	sub	sp, #12
 801998c:	4604      	mov	r4, r0
 801998e:	4688      	mov	r8, r1
 8019990:	429d      	cmp	r5, r3
 8019992:	4691      	mov	r9, r2
 8019994:	f000 818c 	beq.w	8019cb0 <uxr_read_framed_msg+0x334>
 8019998:	7823      	ldrb	r3, [r4, #0]
 801999a:	4dc3      	ldr	r5, [pc, #780]	; (8019ca8 <uxr_read_framed_msg+0x32c>)
 801999c:	4fc3      	ldr	r7, [pc, #780]	; (8019cac <uxr_read_framed_msg+0x330>)
 801999e:	2b07      	cmp	r3, #7
 80199a0:	d8fd      	bhi.n	801999e <uxr_read_framed_msg+0x22>
 80199a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80199a6:	011c      	.short	0x011c
 80199a8:	00d900fb 	.word	0x00d900fb
 80199ac:	008f00ba 	.word	0x008f00ba
 80199b0:	00320051 	.word	0x00320051
 80199b4:	0008      	.short	0x0008
 80199b6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80199ba:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80199be:	4299      	cmp	r1, r3
 80199c0:	f000 814d 	beq.w	8019c5e <uxr_read_framed_msg+0x2e2>
 80199c4:	18e2      	adds	r2, r4, r3
 80199c6:	7892      	ldrb	r2, [r2, #2]
 80199c8:	2a7d      	cmp	r2, #125	; 0x7d
 80199ca:	f000 81b8 	beq.w	8019d3e <uxr_read_framed_msg+0x3c2>
 80199ce:	3301      	adds	r3, #1
 80199d0:	212a      	movs	r1, #42	; 0x2a
 80199d2:	2a7e      	cmp	r2, #126	; 0x7e
 80199d4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80199d8:	fba5 c000 	umull	ip, r0, r5, r0
 80199dc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80199e0:	fb01 3310 	mls	r3, r1, r0, r3
 80199e4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80199e8:	f000 8257 	beq.w	8019e9a <uxr_read_framed_msg+0x51e>
 80199ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80199ee:	2000      	movs	r0, #0
 80199f0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80199f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80199f6:	7020      	strb	r0, [r4, #0]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	4299      	cmp	r1, r3
 80199fc:	86a3      	strh	r3, [r4, #52]	; 0x34
 80199fe:	f000 8178 	beq.w	8019cf2 <uxr_read_framed_msg+0x376>
 8019a02:	2000      	movs	r0, #0
 8019a04:	b003      	add	sp, #12
 8019a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a0a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019a0e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019a12:	4298      	cmp	r0, r3
 8019a14:	f000 8132 	beq.w	8019c7c <uxr_read_framed_msg+0x300>
 8019a18:	18e2      	adds	r2, r4, r3
 8019a1a:	7891      	ldrb	r1, [r2, #2]
 8019a1c:	297d      	cmp	r1, #125	; 0x7d
 8019a1e:	f000 8170 	beq.w	8019d02 <uxr_read_framed_msg+0x386>
 8019a22:	3301      	adds	r3, #1
 8019a24:	202a      	movs	r0, #42	; 0x2a
 8019a26:	297e      	cmp	r1, #126	; 0x7e
 8019a28:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019a2c:	fba5 c202 	umull	ip, r2, r5, r2
 8019a30:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019a34:	fb00 3312 	mls	r3, r0, r2, r3
 8019a38:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019a3c:	f000 821d 	beq.w	8019e7a <uxr_read_framed_msg+0x4fe>
 8019a40:	2307      	movs	r3, #7
 8019a42:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019a44:	7023      	strb	r3, [r4, #0]
 8019a46:	e7aa      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019a48:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019a4a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019a4e:	459e      	cmp	lr, r3
 8019a50:	d827      	bhi.n	8019aa2 <uxr_read_framed_msg+0x126>
 8019a52:	e032      	b.n	8019aba <uxr_read_framed_msg+0x13e>
 8019a54:	fba5 b101 	umull	fp, r1, r5, r1
 8019a58:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019a5c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019a60:	0889      	lsrs	r1, r1, #2
 8019a62:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8019a66:	fb0b 0111 	mls	r1, fp, r1, r0
 8019a6a:	f000 80d4 	beq.w	8019c16 <uxr_read_framed_msg+0x29a>
 8019a6e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019a72:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019a76:	f000 80cb 	beq.w	8019c10 <uxr_read_framed_msg+0x294>
 8019a7a:	f806 c003 	strb.w	ip, [r6, r3]
 8019a7e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019a80:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019a82:	ea80 010c 	eor.w	r1, r0, ip
 8019a86:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	b2c9      	uxtb	r1, r1
 8019a8e:	b29b      	uxth	r3, r3
 8019a90:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8019a94:	4573      	cmp	r3, lr
 8019a96:	8663      	strh	r3, [r4, #50]	; 0x32
 8019a98:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8019a9c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019a9e:	f080 811d 	bcs.w	8019cdc <uxr_read_framed_msg+0x360>
 8019aa2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019aa6:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019aaa:	1c50      	adds	r0, r2, #1
 8019aac:	eb04 0c02 	add.w	ip, r4, r2
 8019ab0:	4592      	cmp	sl, r2
 8019ab2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019ab6:	d1cd      	bne.n	8019a54 <uxr_read_framed_msg+0xd8>
 8019ab8:	459e      	cmp	lr, r3
 8019aba:	f040 8114 	bne.w	8019ce6 <uxr_read_framed_msg+0x36a>
 8019abe:	2306      	movs	r3, #6
 8019ac0:	7023      	strb	r3, [r4, #0]
 8019ac2:	e76c      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019ac4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019ac8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019acc:	4298      	cmp	r0, r3
 8019ace:	f000 80c6 	beq.w	8019c5e <uxr_read_framed_msg+0x2e2>
 8019ad2:	18e2      	adds	r2, r4, r3
 8019ad4:	7891      	ldrb	r1, [r2, #2]
 8019ad6:	297d      	cmp	r1, #125	; 0x7d
 8019ad8:	f000 8193 	beq.w	8019e02 <uxr_read_framed_msg+0x486>
 8019adc:	3301      	adds	r3, #1
 8019ade:	202a      	movs	r0, #42	; 0x2a
 8019ae0:	297e      	cmp	r1, #126	; 0x7e
 8019ae2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019ae6:	fba5 c202 	umull	ip, r2, r5, r2
 8019aea:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019aee:	fb00 3312 	mls	r3, r0, r2, r3
 8019af2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019af6:	f000 81d0 	beq.w	8019e9a <uxr_read_framed_msg+0x51e>
 8019afa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019afc:	2000      	movs	r0, #0
 8019afe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019b02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b04:	8660      	strh	r0, [r4, #50]	; 0x32
 8019b06:	b29b      	uxth	r3, r3
 8019b08:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019b0a:	428b      	cmp	r3, r1
 8019b0c:	8623      	strh	r3, [r4, #48]	; 0x30
 8019b0e:	f240 80e2 	bls.w	8019cd6 <uxr_read_framed_msg+0x35a>
 8019b12:	7020      	strb	r0, [r4, #0]
 8019b14:	b003      	add	sp, #12
 8019b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b1a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019b1e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019b22:	4298      	cmp	r0, r3
 8019b24:	f000 80aa 	beq.w	8019c7c <uxr_read_framed_msg+0x300>
 8019b28:	18e2      	adds	r2, r4, r3
 8019b2a:	7891      	ldrb	r1, [r2, #2]
 8019b2c:	297d      	cmp	r1, #125	; 0x7d
 8019b2e:	f000 8186 	beq.w	8019e3e <uxr_read_framed_msg+0x4c2>
 8019b32:	3301      	adds	r3, #1
 8019b34:	202a      	movs	r0, #42	; 0x2a
 8019b36:	297e      	cmp	r1, #126	; 0x7e
 8019b38:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019b3c:	fba5 c202 	umull	ip, r2, r5, r2
 8019b40:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019b44:	fb00 3312 	mls	r3, r0, r2, r3
 8019b48:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019b4c:	f000 8195 	beq.w	8019e7a <uxr_read_framed_msg+0x4fe>
 8019b50:	2304      	movs	r3, #4
 8019b52:	8621      	strh	r1, [r4, #48]	; 0x30
 8019b54:	7023      	strb	r3, [r4, #0]
 8019b56:	e722      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019b58:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019b5c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019b60:	4290      	cmp	r0, r2
 8019b62:	f000 80b4 	beq.w	8019cce <uxr_read_framed_msg+0x352>
 8019b66:	18a3      	adds	r3, r4, r2
 8019b68:	7899      	ldrb	r1, [r3, #2]
 8019b6a:	297d      	cmp	r1, #125	; 0x7d
 8019b6c:	f000 8107 	beq.w	8019d7e <uxr_read_framed_msg+0x402>
 8019b70:	3201      	adds	r2, #1
 8019b72:	232a      	movs	r3, #42	; 0x2a
 8019b74:	297e      	cmp	r1, #126	; 0x7e
 8019b76:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019b7a:	fba5 c000 	umull	ip, r0, r5, r0
 8019b7e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019b82:	fb03 2210 	mls	r2, r3, r0, r2
 8019b86:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019b8a:	f000 818a 	beq.w	8019ea2 <uxr_read_framed_msg+0x526>
 8019b8e:	7863      	ldrb	r3, [r4, #1]
 8019b90:	428b      	cmp	r3, r1
 8019b92:	bf0c      	ite	eq
 8019b94:	2303      	moveq	r3, #3
 8019b96:	2300      	movne	r3, #0
 8019b98:	7023      	strb	r3, [r4, #0]
 8019b9a:	e700      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019ba2:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8019ba6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019baa:	4299      	cmp	r1, r3
 8019bac:	d06a      	beq.n	8019c84 <uxr_read_framed_msg+0x308>
 8019bae:	18e2      	adds	r2, r4, r3
 8019bb0:	7890      	ldrb	r0, [r2, #2]
 8019bb2:	287d      	cmp	r0, #125	; 0x7d
 8019bb4:	f000 8100 	beq.w	8019db8 <uxr_read_framed_msg+0x43c>
 8019bb8:	3301      	adds	r3, #1
 8019bba:	212a      	movs	r1, #42	; 0x2a
 8019bbc:	287e      	cmp	r0, #126	; 0x7e
 8019bbe:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8019bc2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8019bc6:	fba5 c202 	umull	ip, r2, r5, r2
 8019bca:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019bce:	fb01 3312 	mls	r3, r1, r2, r3
 8019bd2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019bd6:	d055      	beq.n	8019c84 <uxr_read_framed_msg+0x308>
 8019bd8:	2302      	movs	r3, #2
 8019bda:	7023      	strb	r3, [r4, #0]
 8019bdc:	e6df      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019bde:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8019be2:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8019be6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019bea:	1c5a      	adds	r2, r3, #1
 8019bec:	459c      	cmp	ip, r3
 8019bee:	eb04 0103 	add.w	r1, r4, r3
 8019bf2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019bf6:	f43f af04 	beq.w	8019a02 <uxr_read_framed_msg+0x86>
 8019bfa:	fba5 0303 	umull	r0, r3, r5, r3
 8019bfe:	7889      	ldrb	r1, [r1, #2]
 8019c00:	089b      	lsrs	r3, r3, #2
 8019c02:	297e      	cmp	r1, #126	; 0x7e
 8019c04:	fb0e 2313 	mls	r3, lr, r3, r2
 8019c08:	b2db      	uxtb	r3, r3
 8019c0a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019c0e:	d1ec      	bne.n	8019bea <uxr_read_framed_msg+0x26e>
 8019c10:	2301      	movs	r3, #1
 8019c12:	7023      	strb	r3, [r4, #0]
 8019c14:	e6c3      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019c16:	1c50      	adds	r0, r2, #1
 8019c18:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8019c1c:	3202      	adds	r2, #2
 8019c1e:	0841      	lsrs	r1, r0, #1
 8019c20:	fba5 c101 	umull	ip, r1, r5, r1
 8019c24:	0889      	lsrs	r1, r1, #2
 8019c26:	fb0b 0111 	mls	r1, fp, r1, r0
 8019c2a:	1860      	adds	r0, r4, r1
 8019c2c:	b2c9      	uxtb	r1, r1
 8019c2e:	458a      	cmp	sl, r1
 8019c30:	f43f af42 	beq.w	8019ab8 <uxr_read_framed_msg+0x13c>
 8019c34:	0851      	lsrs	r1, r2, #1
 8019c36:	7880      	ldrb	r0, [r0, #2]
 8019c38:	fba5 a101 	umull	sl, r1, r5, r1
 8019c3c:	287e      	cmp	r0, #126	; 0x7e
 8019c3e:	f080 0c20 	eor.w	ip, r0, #32
 8019c42:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019c46:	fb0b 2211 	mls	r2, fp, r1, r2
 8019c4a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019c4e:	f47f af14 	bne.w	8019a7a <uxr_read_framed_msg+0xfe>
 8019c52:	459e      	cmp	lr, r3
 8019c54:	f43f af33 	beq.w	8019abe <uxr_read_framed_msg+0x142>
 8019c58:	2301      	movs	r3, #1
 8019c5a:	7023      	strb	r3, [r4, #0]
 8019c5c:	e69f      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c60:	9300      	str	r3, [sp, #0]
 8019c62:	2301      	movs	r3, #1
 8019c64:	9301      	str	r3, [sp, #4]
 8019c66:	464a      	mov	r2, r9
 8019c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c6a:	4641      	mov	r1, r8
 8019c6c:	4620      	mov	r0, r4
 8019c6e:	f7ff fdf1 	bl	8019854 <uxr_framing_read_transport>
 8019c72:	2800      	cmp	r0, #0
 8019c74:	f43f aec5 	beq.w	8019a02 <uxr_read_framed_msg+0x86>
 8019c78:	7823      	ldrb	r3, [r4, #0]
 8019c7a:	e690      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c7e:	9300      	str	r3, [sp, #0]
 8019c80:	2302      	movs	r3, #2
 8019c82:	e7ef      	b.n	8019c64 <uxr_read_framed_msg+0x2e8>
 8019c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c86:	464a      	mov	r2, r9
 8019c88:	4641      	mov	r1, r8
 8019c8a:	4620      	mov	r0, r4
 8019c8c:	9300      	str	r3, [sp, #0]
 8019c8e:	2304      	movs	r3, #4
 8019c90:	9301      	str	r3, [sp, #4]
 8019c92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c94:	f7ff fdde 	bl	8019854 <uxr_framing_read_transport>
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	d1ed      	bne.n	8019c78 <uxr_read_framed_msg+0x2fc>
 8019c9c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019ca0:	2b7e      	cmp	r3, #126	; 0x7e
 8019ca2:	d0e9      	beq.n	8019c78 <uxr_read_framed_msg+0x2fc>
 8019ca4:	e6ad      	b.n	8019a02 <uxr_read_framed_msg+0x86>
 8019ca6:	bf00      	nop
 8019ca8:	30c30c31 	.word	0x30c30c31
 8019cac:	080259f4 	.word	0x080259f4
 8019cb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019cb2:	9300      	str	r3, [sp, #0]
 8019cb4:	2305      	movs	r3, #5
 8019cb6:	9301      	str	r3, [sp, #4]
 8019cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019cba:	f7ff fdcb 	bl	8019854 <uxr_framing_read_transport>
 8019cbe:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019cc2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	f43f ae9b 	beq.w	8019a02 <uxr_read_framed_msg+0x86>
 8019ccc:	e664      	b.n	8019998 <uxr_read_framed_msg+0x1c>
 8019cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019cd0:	9300      	str	r3, [sp, #0]
 8019cd2:	2303      	movs	r3, #3
 8019cd4:	e7c6      	b.n	8019c64 <uxr_read_framed_msg+0x2e8>
 8019cd6:	2305      	movs	r3, #5
 8019cd8:	7023      	strb	r3, [r4, #0]
 8019cda:	e660      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019cdc:	f43f aeef 	beq.w	8019abe <uxr_read_framed_msg+0x142>
 8019ce0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019ce4:	d094      	beq.n	8019c10 <uxr_read_framed_msg+0x294>
 8019ce6:	ebae 0303 	sub.w	r3, lr, r3
 8019cea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019cec:	3302      	adds	r3, #2
 8019cee:	9200      	str	r2, [sp, #0]
 8019cf0:	e7b8      	b.n	8019c64 <uxr_read_framed_msg+0x2e8>
 8019cf2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019cf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019cf8:	7013      	strb	r3, [r2, #0]
 8019cfa:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019cfc:	b003      	add	sp, #12
 8019cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d02:	1c59      	adds	r1, r3, #1
 8019d04:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019d08:	084a      	lsrs	r2, r1, #1
 8019d0a:	fba5 e202 	umull	lr, r2, r5, r2
 8019d0e:	0892      	lsrs	r2, r2, #2
 8019d10:	fb0c 1212 	mls	r2, ip, r2, r1
 8019d14:	b2d1      	uxtb	r1, r2
 8019d16:	4288      	cmp	r0, r1
 8019d18:	d0b0      	beq.n	8019c7c <uxr_read_framed_msg+0x300>
 8019d1a:	3302      	adds	r3, #2
 8019d1c:	4422      	add	r2, r4
 8019d1e:	7891      	ldrb	r1, [r2, #2]
 8019d20:	085a      	lsrs	r2, r3, #1
 8019d22:	fba5 0202 	umull	r0, r2, r5, r2
 8019d26:	297e      	cmp	r1, #126	; 0x7e
 8019d28:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019d2c:	fb0c 3312 	mls	r3, ip, r2, r3
 8019d30:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019d34:	f000 80a1 	beq.w	8019e7a <uxr_read_framed_msg+0x4fe>
 8019d38:	f081 0120 	eor.w	r1, r1, #32
 8019d3c:	e680      	b.n	8019a40 <uxr_read_framed_msg+0xc4>
 8019d3e:	f103 0c01 	add.w	ip, r3, #1
 8019d42:	202a      	movs	r0, #42	; 0x2a
 8019d44:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019d48:	fba5 e202 	umull	lr, r2, r5, r2
 8019d4c:	0892      	lsrs	r2, r2, #2
 8019d4e:	fb00 c212 	mls	r2, r0, r2, ip
 8019d52:	fa5f fc82 	uxtb.w	ip, r2
 8019d56:	4561      	cmp	r1, ip
 8019d58:	d081      	beq.n	8019c5e <uxr_read_framed_msg+0x2e2>
 8019d5a:	3302      	adds	r3, #2
 8019d5c:	4422      	add	r2, r4
 8019d5e:	0859      	lsrs	r1, r3, #1
 8019d60:	7892      	ldrb	r2, [r2, #2]
 8019d62:	fba5 c101 	umull	ip, r1, r5, r1
 8019d66:	2a7e      	cmp	r2, #126	; 0x7e
 8019d68:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019d6c:	fb00 3311 	mls	r3, r0, r1, r3
 8019d70:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019d74:	f000 8091 	beq.w	8019e9a <uxr_read_framed_msg+0x51e>
 8019d78:	f082 0220 	eor.w	r2, r2, #32
 8019d7c:	e636      	b.n	80199ec <uxr_read_framed_msg+0x70>
 8019d7e:	1c51      	adds	r1, r2, #1
 8019d80:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019d84:	084b      	lsrs	r3, r1, #1
 8019d86:	fba5 e303 	umull	lr, r3, r5, r3
 8019d8a:	089b      	lsrs	r3, r3, #2
 8019d8c:	fb0c 1313 	mls	r3, ip, r3, r1
 8019d90:	b2d9      	uxtb	r1, r3
 8019d92:	4288      	cmp	r0, r1
 8019d94:	d09b      	beq.n	8019cce <uxr_read_framed_msg+0x352>
 8019d96:	3202      	adds	r2, #2
 8019d98:	4423      	add	r3, r4
 8019d9a:	0850      	lsrs	r0, r2, #1
 8019d9c:	789b      	ldrb	r3, [r3, #2]
 8019d9e:	fba5 1000 	umull	r1, r0, r5, r0
 8019da2:	2b7e      	cmp	r3, #126	; 0x7e
 8019da4:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8019da8:	fb0c 2210 	mls	r2, ip, r0, r2
 8019dac:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019db0:	d077      	beq.n	8019ea2 <uxr_read_framed_msg+0x526>
 8019db2:	f083 0120 	eor.w	r1, r3, #32
 8019db6:	e6ea      	b.n	8019b8e <uxr_read_framed_msg+0x212>
 8019db8:	f103 0c01 	add.w	ip, r3, #1
 8019dbc:	202a      	movs	r0, #42	; 0x2a
 8019dbe:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019dc2:	fba5 e202 	umull	lr, r2, r5, r2
 8019dc6:	0892      	lsrs	r2, r2, #2
 8019dc8:	fb00 c212 	mls	r2, r0, r2, ip
 8019dcc:	fa5f fc82 	uxtb.w	ip, r2
 8019dd0:	4561      	cmp	r1, ip
 8019dd2:	f43f af57 	beq.w	8019c84 <uxr_read_framed_msg+0x308>
 8019dd6:	3302      	adds	r3, #2
 8019dd8:	4422      	add	r2, r4
 8019dda:	7891      	ldrb	r1, [r2, #2]
 8019ddc:	085a      	lsrs	r2, r3, #1
 8019dde:	fba5 c202 	umull	ip, r2, r5, r2
 8019de2:	297e      	cmp	r1, #126	; 0x7e
 8019de4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019de8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019dec:	fb00 3312 	mls	r3, r0, r2, r3
 8019df0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019df4:	f43f af46 	beq.w	8019c84 <uxr_read_framed_msg+0x308>
 8019df8:	f081 0120 	eor.w	r1, r1, #32
 8019dfc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019e00:	e6ea      	b.n	8019bd8 <uxr_read_framed_msg+0x25c>
 8019e02:	1c59      	adds	r1, r3, #1
 8019e04:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019e08:	084a      	lsrs	r2, r1, #1
 8019e0a:	fba5 e202 	umull	lr, r2, r5, r2
 8019e0e:	0892      	lsrs	r2, r2, #2
 8019e10:	fb0c 1212 	mls	r2, ip, r2, r1
 8019e14:	b2d1      	uxtb	r1, r2
 8019e16:	4288      	cmp	r0, r1
 8019e18:	f43f af21 	beq.w	8019c5e <uxr_read_framed_msg+0x2e2>
 8019e1c:	3302      	adds	r3, #2
 8019e1e:	4422      	add	r2, r4
 8019e20:	7891      	ldrb	r1, [r2, #2]
 8019e22:	085a      	lsrs	r2, r3, #1
 8019e24:	fba5 0202 	umull	r0, r2, r5, r2
 8019e28:	297e      	cmp	r1, #126	; 0x7e
 8019e2a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019e2e:	fb0c 3312 	mls	r3, ip, r2, r3
 8019e32:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019e36:	d030      	beq.n	8019e9a <uxr_read_framed_msg+0x51e>
 8019e38:	f081 0120 	eor.w	r1, r1, #32
 8019e3c:	e65d      	b.n	8019afa <uxr_read_framed_msg+0x17e>
 8019e3e:	1c59      	adds	r1, r3, #1
 8019e40:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019e44:	084a      	lsrs	r2, r1, #1
 8019e46:	fba5 e202 	umull	lr, r2, r5, r2
 8019e4a:	0892      	lsrs	r2, r2, #2
 8019e4c:	fb0c 1212 	mls	r2, ip, r2, r1
 8019e50:	b2d1      	uxtb	r1, r2
 8019e52:	4288      	cmp	r0, r1
 8019e54:	f43f af12 	beq.w	8019c7c <uxr_read_framed_msg+0x300>
 8019e58:	3302      	adds	r3, #2
 8019e5a:	4422      	add	r2, r4
 8019e5c:	7891      	ldrb	r1, [r2, #2]
 8019e5e:	085a      	lsrs	r2, r3, #1
 8019e60:	fba5 0202 	umull	r0, r2, r5, r2
 8019e64:	297e      	cmp	r1, #126	; 0x7e
 8019e66:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8019e6a:	fb0c 3312 	mls	r3, ip, r2, r3
 8019e6e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019e72:	d002      	beq.n	8019e7a <uxr_read_framed_msg+0x4fe>
 8019e74:	f081 0120 	eor.w	r1, r1, #32
 8019e78:	e66a      	b.n	8019b50 <uxr_read_framed_msg+0x1d4>
 8019e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e7c:	9300      	str	r3, [sp, #0]
 8019e7e:	2302      	movs	r3, #2
 8019e80:	9301      	str	r3, [sp, #4]
 8019e82:	464a      	mov	r2, r9
 8019e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e86:	4641      	mov	r1, r8
 8019e88:	4620      	mov	r0, r4
 8019e8a:	f7ff fce3 	bl	8019854 <uxr_framing_read_transport>
 8019e8e:	2800      	cmp	r0, #0
 8019e90:	f47f aef2 	bne.w	8019c78 <uxr_read_framed_msg+0x2fc>
 8019e94:	2301      	movs	r3, #1
 8019e96:	7023      	strb	r3, [r4, #0]
 8019e98:	e581      	b.n	801999e <uxr_read_framed_msg+0x22>
 8019e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e9c:	9300      	str	r3, [sp, #0]
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	e7ee      	b.n	8019e80 <uxr_read_framed_msg+0x504>
 8019ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ea4:	9300      	str	r3, [sp, #0]
 8019ea6:	2303      	movs	r3, #3
 8019ea8:	e7ea      	b.n	8019e80 <uxr_read_framed_msg+0x504>
 8019eaa:	bf00      	nop

08019eac <uxr_stream_id>:
 8019eac:	2901      	cmp	r1, #1
 8019eae:	4684      	mov	ip, r0
 8019eb0:	b500      	push	{lr}
 8019eb2:	b083      	sub	sp, #12
 8019eb4:	d01f      	beq.n	8019ef6 <uxr_stream_id+0x4a>
 8019eb6:	2902      	cmp	r1, #2
 8019eb8:	f04f 0e00 	mov.w	lr, #0
 8019ebc:	d020      	beq.n	8019f00 <uxr_stream_id+0x54>
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	2000      	movs	r0, #0
 8019ec2:	f36e 0307 	bfi	r3, lr, #0, #8
 8019ec6:	f36c 230f 	bfi	r3, ip, #8, #8
 8019eca:	f361 4317 	bfi	r3, r1, #16, #8
 8019ece:	f362 631f 	bfi	r3, r2, #24, #8
 8019ed2:	fa5f fc83 	uxtb.w	ip, r3
 8019ed6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019eda:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019ede:	0e1b      	lsrs	r3, r3, #24
 8019ee0:	f36c 0007 	bfi	r0, ip, #0, #8
 8019ee4:	f361 200f 	bfi	r0, r1, #8, #8
 8019ee8:	f362 4017 	bfi	r0, r2, #16, #8
 8019eec:	f363 601f 	bfi	r0, r3, #24, #8
 8019ef0:	b003      	add	sp, #12
 8019ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ef6:	f100 0e01 	add.w	lr, r0, #1
 8019efa:	fa5f fe8e 	uxtb.w	lr, lr
 8019efe:	e7de      	b.n	8019ebe <uxr_stream_id+0x12>
 8019f00:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8019f04:	e7db      	b.n	8019ebe <uxr_stream_id+0x12>
 8019f06:	bf00      	nop

08019f08 <uxr_stream_id_from_raw>:
 8019f08:	b082      	sub	sp, #8
 8019f0a:	b130      	cbz	r0, 8019f1a <uxr_stream_id_from_raw+0x12>
 8019f0c:	0603      	lsls	r3, r0, #24
 8019f0e:	d421      	bmi.n	8019f54 <uxr_stream_id_from_raw+0x4c>
 8019f10:	1e42      	subs	r2, r0, #1
 8019f12:	f04f 0c01 	mov.w	ip, #1
 8019f16:	b2d2      	uxtb	r2, r2
 8019f18:	e001      	b.n	8019f1e <uxr_stream_id_from_raw+0x16>
 8019f1a:	4684      	mov	ip, r0
 8019f1c:	4602      	mov	r2, r0
 8019f1e:	2300      	movs	r3, #0
 8019f20:	f360 0307 	bfi	r3, r0, #0, #8
 8019f24:	2000      	movs	r0, #0
 8019f26:	f362 230f 	bfi	r3, r2, #8, #8
 8019f2a:	f36c 4317 	bfi	r3, ip, #16, #8
 8019f2e:	f361 631f 	bfi	r3, r1, #24, #8
 8019f32:	fa5f fc83 	uxtb.w	ip, r3
 8019f36:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019f3a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019f3e:	0e1b      	lsrs	r3, r3, #24
 8019f40:	f36c 0007 	bfi	r0, ip, #0, #8
 8019f44:	f361 200f 	bfi	r0, r1, #8, #8
 8019f48:	f362 4017 	bfi	r0, r2, #16, #8
 8019f4c:	f363 601f 	bfi	r0, r3, #24, #8
 8019f50:	b002      	add	sp, #8
 8019f52:	4770      	bx	lr
 8019f54:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8019f58:	f04f 0c02 	mov.w	ip, #2
 8019f5c:	e7df      	b.n	8019f1e <uxr_stream_id_from_raw+0x16>
 8019f5e:	bf00      	nop

08019f60 <uxr_init_stream_storage>:
 8019f60:	2300      	movs	r3, #0
 8019f62:	7403      	strb	r3, [r0, #16]
 8019f64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8019f68:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8019f6c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8019f70:	4770      	bx	lr
 8019f72:	bf00      	nop

08019f74 <uxr_reset_stream_storage>:
 8019f74:	b570      	push	{r4, r5, r6, lr}
 8019f76:	7c03      	ldrb	r3, [r0, #16]
 8019f78:	4604      	mov	r4, r0
 8019f7a:	b14b      	cbz	r3, 8019f90 <uxr_reset_stream_storage+0x1c>
 8019f7c:	4606      	mov	r6, r0
 8019f7e:	2500      	movs	r5, #0
 8019f80:	4630      	mov	r0, r6
 8019f82:	3501      	adds	r5, #1
 8019f84:	f004 fea6 	bl	801ecd4 <uxr_reset_output_best_effort_stream>
 8019f88:	7c23      	ldrb	r3, [r4, #16]
 8019f8a:	3610      	adds	r6, #16
 8019f8c:	42ab      	cmp	r3, r5
 8019f8e:	d8f7      	bhi.n	8019f80 <uxr_reset_stream_storage+0xc>
 8019f90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019f94:	b15b      	cbz	r3, 8019fae <uxr_reset_stream_storage+0x3a>
 8019f96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019f9a:	2500      	movs	r5, #0
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	3501      	adds	r5, #1
 8019fa0:	f004 fc9e 	bl	801e8e0 <uxr_reset_input_best_effort_stream>
 8019fa4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019fa8:	3602      	adds	r6, #2
 8019faa:	42ab      	cmp	r3, r5
 8019fac:	d8f6      	bhi.n	8019f9c <uxr_reset_stream_storage+0x28>
 8019fae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019fb2:	b15b      	cbz	r3, 8019fcc <uxr_reset_stream_storage+0x58>
 8019fb4:	f104 0618 	add.w	r6, r4, #24
 8019fb8:	2500      	movs	r5, #0
 8019fba:	4630      	mov	r0, r6
 8019fbc:	3501      	adds	r5, #1
 8019fbe:	f004 ff37 	bl	801ee30 <uxr_reset_output_reliable_stream>
 8019fc2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8019fc6:	3628      	adds	r6, #40	; 0x28
 8019fc8:	42ab      	cmp	r3, r5
 8019fca:	d8f6      	bhi.n	8019fba <uxr_reset_stream_storage+0x46>
 8019fcc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019fd0:	b15b      	cbz	r3, 8019fea <uxr_reset_stream_storage+0x76>
 8019fd2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8019fd6:	2500      	movs	r5, #0
 8019fd8:	4630      	mov	r0, r6
 8019fda:	3501      	adds	r5, #1
 8019fdc:	f004 fcec 	bl	801e9b8 <uxr_reset_input_reliable_stream>
 8019fe0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8019fe4:	3618      	adds	r6, #24
 8019fe6:	42ab      	cmp	r3, r5
 8019fe8:	d8f6      	bhi.n	8019fd8 <uxr_reset_stream_storage+0x64>
 8019fea:	bd70      	pop	{r4, r5, r6, pc}

08019fec <uxr_add_output_best_effort_buffer>:
 8019fec:	b510      	push	{r4, lr}
 8019fee:	7c04      	ldrb	r4, [r0, #16]
 8019ff0:	b082      	sub	sp, #8
 8019ff2:	f104 0c01 	add.w	ip, r4, #1
 8019ff6:	f880 c010 	strb.w	ip, [r0, #16]
 8019ffa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8019ffe:	f004 fe5f 	bl	801ecc0 <uxr_init_output_best_effort_stream>
 801a002:	2201      	movs	r2, #1
 801a004:	4620      	mov	r0, r4
 801a006:	4611      	mov	r1, r2
 801a008:	b002      	add	sp, #8
 801a00a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a00e:	f7ff bf4d 	b.w	8019eac <uxr_stream_id>
 801a012:	bf00      	nop

0801a014 <uxr_add_output_reliable_buffer>:
 801a014:	b510      	push	{r4, lr}
 801a016:	b084      	sub	sp, #16
 801a018:	4684      	mov	ip, r0
 801a01a:	2028      	movs	r0, #40	; 0x28
 801a01c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801a020:	9400      	str	r4, [sp, #0]
 801a022:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 801a026:	fb00 c004 	mla	r0, r0, r4, ip
 801a02a:	f104 0e01 	add.w	lr, r4, #1
 801a02e:	3018      	adds	r0, #24
 801a030:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 801a034:	f004 fec4 	bl	801edc0 <uxr_init_output_reliable_stream>
 801a038:	2201      	movs	r2, #1
 801a03a:	2102      	movs	r1, #2
 801a03c:	4620      	mov	r0, r4
 801a03e:	b004      	add	sp, #16
 801a040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a044:	f7ff bf32 	b.w	8019eac <uxr_stream_id>

0801a048 <uxr_add_input_best_effort_buffer>:
 801a048:	b510      	push	{r4, lr}
 801a04a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801a04e:	b082      	sub	sp, #8
 801a050:	1c62      	adds	r2, r4, #1
 801a052:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801a056:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801a05a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a05e:	f004 fc3b 	bl	801e8d8 <uxr_init_input_best_effort_stream>
 801a062:	2200      	movs	r2, #0
 801a064:	2101      	movs	r1, #1
 801a066:	4620      	mov	r0, r4
 801a068:	b002      	add	sp, #8
 801a06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a06e:	f7ff bf1d 	b.w	8019eac <uxr_stream_id>
 801a072:	bf00      	nop

0801a074 <uxr_add_input_reliable_buffer>:
 801a074:	b510      	push	{r4, lr}
 801a076:	b084      	sub	sp, #16
 801a078:	4684      	mov	ip, r0
 801a07a:	2018      	movs	r0, #24
 801a07c:	9c06      	ldr	r4, [sp, #24]
 801a07e:	9400      	str	r4, [sp, #0]
 801a080:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801a084:	fb00 c004 	mla	r0, r0, r4, ip
 801a088:	f104 0e01 	add.w	lr, r4, #1
 801a08c:	3048      	adds	r0, #72	; 0x48
 801a08e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801a092:	f004 fc6b 	bl	801e96c <uxr_init_input_reliable_stream>
 801a096:	2200      	movs	r2, #0
 801a098:	2102      	movs	r1, #2
 801a09a:	4620      	mov	r0, r4
 801a09c:	b004      	add	sp, #16
 801a09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0a2:	f7ff bf03 	b.w	8019eac <uxr_stream_id>
 801a0a6:	bf00      	nop

0801a0a8 <uxr_get_output_best_effort_stream>:
 801a0a8:	7c03      	ldrb	r3, [r0, #16]
 801a0aa:	428b      	cmp	r3, r1
 801a0ac:	bf8c      	ite	hi
 801a0ae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801a0b2:	2000      	movls	r0, #0
 801a0b4:	4770      	bx	lr
 801a0b6:	bf00      	nop

0801a0b8 <uxr_get_output_reliable_stream>:
 801a0b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801a0bc:	428b      	cmp	r3, r1
 801a0be:	d904      	bls.n	801a0ca <uxr_get_output_reliable_stream+0x12>
 801a0c0:	2328      	movs	r3, #40	; 0x28
 801a0c2:	fb03 0001 	mla	r0, r3, r1, r0
 801a0c6:	3018      	adds	r0, #24
 801a0c8:	4770      	bx	lr
 801a0ca:	2000      	movs	r0, #0
 801a0cc:	4770      	bx	lr
 801a0ce:	bf00      	nop

0801a0d0 <uxr_get_input_best_effort_stream>:
 801a0d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801a0d4:	428b      	cmp	r3, r1
 801a0d6:	d903      	bls.n	801a0e0 <uxr_get_input_best_effort_stream+0x10>
 801a0d8:	3121      	adds	r1, #33	; 0x21
 801a0da:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a0de:	4770      	bx	lr
 801a0e0:	2000      	movs	r0, #0
 801a0e2:	4770      	bx	lr

0801a0e4 <uxr_get_input_reliable_stream>:
 801a0e4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801a0e8:	428b      	cmp	r3, r1
 801a0ea:	d904      	bls.n	801a0f6 <uxr_get_input_reliable_stream+0x12>
 801a0ec:	2318      	movs	r3, #24
 801a0ee:	fb03 0001 	mla	r0, r3, r1, r0
 801a0f2:	3048      	adds	r0, #72	; 0x48
 801a0f4:	4770      	bx	lr
 801a0f6:	2000      	movs	r0, #0
 801a0f8:	4770      	bx	lr
 801a0fa:	bf00      	nop

0801a0fc <uxr_output_streams_confirmed>:
 801a0fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801a100:	b183      	cbz	r3, 801a124 <uxr_output_streams_confirmed+0x28>
 801a102:	b570      	push	{r4, r5, r6, lr}
 801a104:	4606      	mov	r6, r0
 801a106:	f100 0518 	add.w	r5, r0, #24
 801a10a:	2400      	movs	r4, #0
 801a10c:	e000      	b.n	801a110 <uxr_output_streams_confirmed+0x14>
 801a10e:	b140      	cbz	r0, 801a122 <uxr_output_streams_confirmed+0x26>
 801a110:	4628      	mov	r0, r5
 801a112:	3401      	adds	r4, #1
 801a114:	f005 f900 	bl	801f318 <uxr_is_output_up_to_date>
 801a118:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801a11c:	3528      	adds	r5, #40	; 0x28
 801a11e:	42a3      	cmp	r3, r4
 801a120:	d8f5      	bhi.n	801a10e <uxr_output_streams_confirmed+0x12>
 801a122:	bd70      	pop	{r4, r5, r6, pc}
 801a124:	2001      	movs	r0, #1
 801a126:	4770      	bx	lr

0801a128 <uxr_buffer_submessage_header>:
 801a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a12a:	460e      	mov	r6, r1
 801a12c:	2104      	movs	r1, #4
 801a12e:	4604      	mov	r4, r0
 801a130:	4615      	mov	r5, r2
 801a132:	461f      	mov	r7, r3
 801a134:	f7f9 faa8 	bl	8013688 <ucdr_align_to>
 801a138:	2301      	movs	r3, #1
 801a13a:	4631      	mov	r1, r6
 801a13c:	4620      	mov	r0, r4
 801a13e:	ea47 0203 	orr.w	r2, r7, r3
 801a142:	7523      	strb	r3, [r4, #20]
 801a144:	462b      	mov	r3, r5
 801a146:	f000 fa29 	bl	801a59c <uxr_serialize_submessage_header>
 801a14a:	4620      	mov	r0, r4
 801a14c:	f7f9 fab2 	bl	80136b4 <ucdr_buffer_remaining>
 801a150:	42a8      	cmp	r0, r5
 801a152:	bf34      	ite	cc
 801a154:	2000      	movcc	r0, #0
 801a156:	2001      	movcs	r0, #1
 801a158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a15a:	bf00      	nop

0801a15c <uxr_read_submessage_header>:
 801a15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a160:	4604      	mov	r4, r0
 801a162:	460d      	mov	r5, r1
 801a164:	2104      	movs	r1, #4
 801a166:	4616      	mov	r6, r2
 801a168:	4698      	mov	r8, r3
 801a16a:	f7f9 fa8d 	bl	8013688 <ucdr_align_to>
 801a16e:	4620      	mov	r0, r4
 801a170:	f7f9 faa0 	bl	80136b4 <ucdr_buffer_remaining>
 801a174:	2803      	cmp	r0, #3
 801a176:	bf8c      	ite	hi
 801a178:	2701      	movhi	r7, #1
 801a17a:	2700      	movls	r7, #0
 801a17c:	d802      	bhi.n	801a184 <uxr_read_submessage_header+0x28>
 801a17e:	4638      	mov	r0, r7
 801a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a184:	4633      	mov	r3, r6
 801a186:	4642      	mov	r2, r8
 801a188:	4620      	mov	r0, r4
 801a18a:	4629      	mov	r1, r5
 801a18c:	f000 fa1a 	bl	801a5c4 <uxr_deserialize_submessage_header>
 801a190:	f898 3000 	ldrb.w	r3, [r8]
 801a194:	4638      	mov	r0, r7
 801a196:	f003 0201 	and.w	r2, r3, #1
 801a19a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801a19e:	f888 3000 	strb.w	r3, [r8]
 801a1a2:	7522      	strb	r2, [r4, #20]
 801a1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1a8 <uxr_submessage_padding>:
 801a1a8:	f010 0003 	ands.w	r0, r0, #3
 801a1ac:	bf18      	it	ne
 801a1ae:	f1c0 0004 	rsbne	r0, r0, #4
 801a1b2:	4770      	bx	lr

0801a1b4 <uxr_millis>:
 801a1b4:	b510      	push	{r4, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	2001      	movs	r0, #1
 801a1ba:	4669      	mov	r1, sp
 801a1bc:	f7e9 f99c 	bl	80034f8 <clock_gettime>
 801a1c0:	4908      	ldr	r1, [pc, #32]	; (801a1e4 <uxr_millis+0x30>)
 801a1c2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801a1c6:	fba0 0301 	umull	r0, r3, r0, r1
 801a1ca:	1900      	adds	r0, r0, r4
 801a1cc:	fb01 3102 	mla	r1, r1, r2, r3
 801a1d0:	4a05      	ldr	r2, [pc, #20]	; (801a1e8 <uxr_millis+0x34>)
 801a1d2:	f04f 0300 	mov.w	r3, #0
 801a1d6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801a1da:	f7e6 fa55 	bl	8000688 <__aeabi_ldivmod>
 801a1de:	b004      	add	sp, #16
 801a1e0:	bd10      	pop	{r4, pc}
 801a1e2:	bf00      	nop
 801a1e4:	3b9aca00 	.word	0x3b9aca00
 801a1e8:	000f4240 	.word	0x000f4240

0801a1ec <uxr_nanos>:
 801a1ec:	b510      	push	{r4, lr}
 801a1ee:	b084      	sub	sp, #16
 801a1f0:	2001      	movs	r0, #1
 801a1f2:	4669      	mov	r1, sp
 801a1f4:	f7e9 f980 	bl	80034f8 <clock_gettime>
 801a1f8:	4a06      	ldr	r2, [pc, #24]	; (801a214 <uxr_nanos+0x28>)
 801a1fa:	9800      	ldr	r0, [sp, #0]
 801a1fc:	9902      	ldr	r1, [sp, #8]
 801a1fe:	fba0 0302 	umull	r0, r3, r0, r2
 801a202:	9c01      	ldr	r4, [sp, #4]
 801a204:	1840      	adds	r0, r0, r1
 801a206:	fb02 3304 	mla	r3, r2, r4, r3
 801a20a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801a20e:	b004      	add	sp, #16
 801a210:	bd10      	pop	{r4, pc}
 801a212:	bf00      	nop
 801a214:	3b9aca00 	.word	0x3b9aca00

0801a218 <on_full_output_buffer_fragmented>:
 801a218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a21c:	460c      	mov	r4, r1
 801a21e:	b08a      	sub	sp, #40	; 0x28
 801a220:	4606      	mov	r6, r0
 801a222:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801a226:	f104 0008 	add.w	r0, r4, #8
 801a22a:	f7ff ff45 	bl	801a0b8 <uxr_get_output_reliable_stream>
 801a22e:	4605      	mov	r5, r0
 801a230:	f005 f87c 	bl	801f32c <get_available_free_slots>
 801a234:	b968      	cbnz	r0, 801a252 <on_full_output_buffer_fragmented+0x3a>
 801a236:	4620      	mov	r0, r4
 801a238:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801a23c:	4798      	blx	r3
 801a23e:	b918      	cbnz	r0, 801a248 <on_full_output_buffer_fragmented+0x30>
 801a240:	2001      	movs	r0, #1
 801a242:	b00a      	add	sp, #40	; 0x28
 801a244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a248:	4628      	mov	r0, r5
 801a24a:	f005 f86f 	bl	801f32c <get_available_free_slots>
 801a24e:	2800      	cmp	r0, #0
 801a250:	d0f6      	beq.n	801a240 <on_full_output_buffer_fragmented+0x28>
 801a252:	8929      	ldrh	r1, [r5, #8]
 801a254:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801a258:	89eb      	ldrh	r3, [r5, #14]
 801a25a:	7b28      	ldrb	r0, [r5, #12]
 801a25c:	686f      	ldr	r7, [r5, #4]
 801a25e:	1a12      	subs	r2, r2, r0
 801a260:	fbb3 f0f1 	udiv	r0, r3, r1
 801a264:	fbb7 f7f1 	udiv	r7, r7, r1
 801a268:	fb01 3110 	mls	r1, r1, r0, r3
 801a26c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801a270:	b289      	uxth	r1, r1
 801a272:	fb07 f101 	mul.w	r1, r7, r1
 801a276:	3f04      	subs	r7, #4
 801a278:	443a      	add	r2, r7
 801a27a:	3104      	adds	r1, #4
 801a27c:	fa1f f882 	uxth.w	r8, r2
 801a280:	463a      	mov	r2, r7
 801a282:	eba3 0308 	sub.w	r3, r3, r8
 801a286:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801a28a:	682b      	ldr	r3, [r5, #0]
 801a28c:	4419      	add	r1, r3
 801a28e:	2300      	movs	r3, #0
 801a290:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a294:	9000      	str	r0, [sp, #0]
 801a296:	a802      	add	r0, sp, #8
 801a298:	f7f9 f9c8 	bl	801362c <ucdr_init_buffer_origin_offset>
 801a29c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801a2a0:	f102 0308 	add.w	r3, r2, #8
 801a2a4:	42bb      	cmp	r3, r7
 801a2a6:	d927      	bls.n	801a2f8 <on_full_output_buffer_fragmented+0xe0>
 801a2a8:	4642      	mov	r2, r8
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	210d      	movs	r1, #13
 801a2ae:	a802      	add	r0, sp, #8
 801a2b0:	f7ff ff3a 	bl	801a128 <uxr_buffer_submessage_header>
 801a2b4:	8929      	ldrh	r1, [r5, #8]
 801a2b6:	89eb      	ldrh	r3, [r5, #14]
 801a2b8:	686a      	ldr	r2, [r5, #4]
 801a2ba:	fbb3 f0f1 	udiv	r0, r3, r1
 801a2be:	fbb2 f2f1 	udiv	r2, r2, r1
 801a2c2:	fb01 3310 	mls	r3, r1, r0, r3
 801a2c6:	b29b      	uxth	r3, r3
 801a2c8:	fb02 f303 	mul.w	r3, r2, r3
 801a2cc:	682a      	ldr	r2, [r5, #0]
 801a2ce:	50d7      	str	r7, [r2, r3]
 801a2d0:	2101      	movs	r1, #1
 801a2d2:	89e8      	ldrh	r0, [r5, #14]
 801a2d4:	f005 f84c 	bl	801f370 <uxr_seq_num_add>
 801a2d8:	9904      	ldr	r1, [sp, #16]
 801a2da:	9a03      	ldr	r2, [sp, #12]
 801a2dc:	81e8      	strh	r0, [r5, #14]
 801a2de:	4630      	mov	r0, r6
 801a2e0:	1a52      	subs	r2, r2, r1
 801a2e2:	f7f9 f9b5 	bl	8013650 <ucdr_init_buffer>
 801a2e6:	4630      	mov	r0, r6
 801a2e8:	4622      	mov	r2, r4
 801a2ea:	490f      	ldr	r1, [pc, #60]	; (801a328 <on_full_output_buffer_fragmented+0x110>)
 801a2ec:	f7f9 f984 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801a2f0:	2000      	movs	r0, #0
 801a2f2:	b00a      	add	sp, #40	; 0x28
 801a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2f8:	b292      	uxth	r2, r2
 801a2fa:	2302      	movs	r3, #2
 801a2fc:	210d      	movs	r1, #13
 801a2fe:	a802      	add	r0, sp, #8
 801a300:	f7ff ff12 	bl	801a128 <uxr_buffer_submessage_header>
 801a304:	8928      	ldrh	r0, [r5, #8]
 801a306:	89eb      	ldrh	r3, [r5, #14]
 801a308:	6869      	ldr	r1, [r5, #4]
 801a30a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801a30e:	fbb3 f7f0 	udiv	r7, r3, r0
 801a312:	fbb1 f1f0 	udiv	r1, r1, r0
 801a316:	fb00 3317 	mls	r3, r0, r7, r3
 801a31a:	3208      	adds	r2, #8
 801a31c:	b29b      	uxth	r3, r3
 801a31e:	fb01 f303 	mul.w	r3, r1, r3
 801a322:	6829      	ldr	r1, [r5, #0]
 801a324:	50ca      	str	r2, [r1, r3]
 801a326:	e7d3      	b.n	801a2d0 <on_full_output_buffer_fragmented+0xb8>
 801a328:	0801a219 	.word	0x0801a219

0801a32c <uxr_prepare_output_stream>:
 801a32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a32e:	b087      	sub	sp, #28
 801a330:	2707      	movs	r7, #7
 801a332:	2500      	movs	r5, #0
 801a334:	461c      	mov	r4, r3
 801a336:	4606      	mov	r6, r0
 801a338:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a33c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a33e:	e9cd 7500 	strd	r7, r5, [sp]
 801a342:	3204      	adds	r2, #4
 801a344:	f7fe ffc8 	bl	80192d8 <uxr_prepare_stream_to_write_submessage>
 801a348:	f080 0201 	eor.w	r2, r0, #1
 801a34c:	b2d2      	uxtb	r2, r2
 801a34e:	75a2      	strb	r2, [r4, #22]
 801a350:	b112      	cbz	r2, 801a358 <uxr_prepare_output_stream+0x2c>
 801a352:	4628      	mov	r0, r5
 801a354:	b007      	add	sp, #28
 801a356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a358:	aa05      	add	r2, sp, #20
 801a35a:	9902      	ldr	r1, [sp, #8]
 801a35c:	4630      	mov	r0, r6
 801a35e:	f7ff f8f7 	bl	8019550 <uxr_init_base_object_request>
 801a362:	a905      	add	r1, sp, #20
 801a364:	4605      	mov	r5, r0
 801a366:	4620      	mov	r0, r4
 801a368:	f001 f8bc 	bl	801b4e4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801a36c:	69a6      	ldr	r6, [r4, #24]
 801a36e:	69e7      	ldr	r7, [r4, #28]
 801a370:	4620      	mov	r0, r4
 801a372:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801a376:	1a52      	subs	r2, r2, r1
 801a378:	f7f9 f96a 	bl	8013650 <ucdr_init_buffer>
 801a37c:	4620      	mov	r0, r4
 801a37e:	463a      	mov	r2, r7
 801a380:	4631      	mov	r1, r6
 801a382:	f7f9 f939 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801a386:	4628      	mov	r0, r5
 801a388:	b007      	add	sp, #28
 801a38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a38c <uxr_prepare_output_stream_fragmented>:
 801a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a390:	b091      	sub	sp, #68	; 0x44
 801a392:	4605      	mov	r5, r0
 801a394:	3008      	adds	r0, #8
 801a396:	461e      	mov	r6, r3
 801a398:	9105      	str	r1, [sp, #20]
 801a39a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a39e:	9204      	str	r2, [sp, #16]
 801a3a0:	f7ff fe8a 	bl	801a0b8 <uxr_get_output_reliable_stream>
 801a3a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801a3a8:	2b01      	cmp	r3, #1
 801a3aa:	f000 8093 	beq.w	801a4d4 <uxr_prepare_output_stream_fragmented+0x148>
 801a3ae:	4604      	mov	r4, r0
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	f000 808f 	beq.w	801a4d4 <uxr_prepare_output_stream_fragmented+0x148>
 801a3b6:	f004 ffb9 	bl	801f32c <get_available_free_slots>
 801a3ba:	2800      	cmp	r0, #0
 801a3bc:	f000 8085 	beq.w	801a4ca <uxr_prepare_output_stream_fragmented+0x13e>
 801a3c0:	8923      	ldrh	r3, [r4, #8]
 801a3c2:	89e7      	ldrh	r7, [r4, #14]
 801a3c4:	6862      	ldr	r2, [r4, #4]
 801a3c6:	fbb7 f9f3 	udiv	r9, r7, r3
 801a3ca:	fbb2 f2f3 	udiv	r2, r2, r3
 801a3ce:	fb03 7919 	mls	r9, r3, r9, r7
 801a3d2:	6823      	ldr	r3, [r4, #0]
 801a3d4:	f1a2 0b04 	sub.w	fp, r2, #4
 801a3d8:	9203      	str	r2, [sp, #12]
 801a3da:	fa1f f989 	uxth.w	r9, r9
 801a3de:	fb02 f909 	mul.w	r9, r2, r9
 801a3e2:	f109 0904 	add.w	r9, r9, #4
 801a3e6:	4499      	add	r9, r3
 801a3e8:	7b23      	ldrb	r3, [r4, #12]
 801a3ea:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a3ee:	4543      	cmp	r3, r8
 801a3f0:	d37c      	bcc.n	801a4ec <uxr_prepare_output_stream_fragmented+0x160>
 801a3f2:	f1ab 0a04 	sub.w	sl, fp, #4
 801a3f6:	465a      	mov	r2, fp
 801a3f8:	4649      	mov	r1, r9
 801a3fa:	a808      	add	r0, sp, #32
 801a3fc:	ebaa 0a03 	sub.w	sl, sl, r3
 801a400:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a402:	f8cd 8000 	str.w	r8, [sp]
 801a406:	3308      	adds	r3, #8
 801a408:	fa1f fa8a 	uxth.w	sl, sl
 801a40c:	9302      	str	r3, [sp, #8]
 801a40e:	2300      	movs	r3, #0
 801a410:	f7f9 f90c 	bl	801362c <ucdr_init_buffer_origin_offset>
 801a414:	9b02      	ldr	r3, [sp, #8]
 801a416:	4652      	mov	r2, sl
 801a418:	210d      	movs	r1, #13
 801a41a:	455b      	cmp	r3, fp
 801a41c:	bf34      	ite	cc
 801a41e:	2302      	movcc	r3, #2
 801a420:	2300      	movcs	r3, #0
 801a422:	a808      	add	r0, sp, #32
 801a424:	f7ff fe80 	bl	801a128 <uxr_buffer_submessage_header>
 801a428:	8921      	ldrh	r1, [r4, #8]
 801a42a:	6863      	ldr	r3, [r4, #4]
 801a42c:	4638      	mov	r0, r7
 801a42e:	fbb7 f2f1 	udiv	r2, r7, r1
 801a432:	fbb3 f3f1 	udiv	r3, r3, r1
 801a436:	fb01 7212 	mls	r2, r1, r2, r7
 801a43a:	2101      	movs	r1, #1
 801a43c:	b292      	uxth	r2, r2
 801a43e:	fb02 f303 	mul.w	r3, r2, r3
 801a442:	6822      	ldr	r2, [r4, #0]
 801a444:	f842 b003 	str.w	fp, [r2, r3]
 801a448:	f004 ff92 	bl	801f370 <uxr_seq_num_add>
 801a44c:	9b03      	ldr	r3, [sp, #12]
 801a44e:	f108 0104 	add.w	r1, r8, #4
 801a452:	4607      	mov	r7, r0
 801a454:	f1a3 0208 	sub.w	r2, r3, #8
 801a458:	4630      	mov	r0, r6
 801a45a:	4449      	add	r1, r9
 801a45c:	eba2 0208 	sub.w	r2, r2, r8
 801a460:	f7f9 f8f6 	bl	8013650 <ucdr_init_buffer>
 801a464:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a466:	2107      	movs	r1, #7
 801a468:	81e7      	strh	r7, [r4, #14]
 801a46a:	1d1a      	adds	r2, r3, #4
 801a46c:	2300      	movs	r3, #0
 801a46e:	4630      	mov	r0, r6
 801a470:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801a474:	bf28      	it	cs
 801a476:	461a      	movcs	r2, r3
 801a478:	b292      	uxth	r2, r2
 801a47a:	f7ff fe55 	bl	801a128 <uxr_buffer_submessage_header>
 801a47e:	aa07      	add	r2, sp, #28
 801a480:	9904      	ldr	r1, [sp, #16]
 801a482:	4628      	mov	r0, r5
 801a484:	f7ff f864 	bl	8019550 <uxr_init_base_object_request>
 801a488:	4604      	mov	r4, r0
 801a48a:	b320      	cbz	r0, 801a4d6 <uxr_prepare_output_stream_fragmented+0x14a>
 801a48c:	a907      	add	r1, sp, #28
 801a48e:	4630      	mov	r0, r6
 801a490:	f001 f828 	bl	801b4e4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801a494:	4630      	mov	r0, r6
 801a496:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801a49a:	1a52      	subs	r2, r2, r1
 801a49c:	f7f9 f8d8 	bl	8013650 <ucdr_init_buffer>
 801a4a0:	9b05      	ldr	r3, [sp, #20]
 801a4a2:	9a02      	ldr	r2, [sp, #8]
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801a4aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a4ac:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801a4b0:	462a      	mov	r2, r5
 801a4b2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801a4b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a4b8:	4918      	ldr	r1, [pc, #96]	; (801a51c <uxr_prepare_output_stream_fragmented+0x190>)
 801a4ba:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801a4be:	f7f9 f89b 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	b011      	add	sp, #68	; 0x44
 801a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a4cc:	4628      	mov	r0, r5
 801a4ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a4d0:	4798      	blx	r3
 801a4d2:	b920      	cbnz	r0, 801a4de <uxr_prepare_output_stream_fragmented+0x152>
 801a4d4:	2400      	movs	r4, #0
 801a4d6:	4620      	mov	r0, r4
 801a4d8:	b011      	add	sp, #68	; 0x44
 801a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4de:	4620      	mov	r0, r4
 801a4e0:	f004 ff24 	bl	801f32c <get_available_free_slots>
 801a4e4:	2800      	cmp	r0, #0
 801a4e6:	f47f af6b 	bne.w	801a3c0 <uxr_prepare_output_stream_fragmented+0x34>
 801a4ea:	e7f3      	b.n	801a4d4 <uxr_prepare_output_stream_fragmented+0x148>
 801a4ec:	4638      	mov	r0, r7
 801a4ee:	2101      	movs	r1, #1
 801a4f0:	f004 ff3e 	bl	801f370 <uxr_seq_num_add>
 801a4f4:	8922      	ldrh	r2, [r4, #8]
 801a4f6:	6863      	ldr	r3, [r4, #4]
 801a4f8:	4607      	mov	r7, r0
 801a4fa:	fbb3 f9f2 	udiv	r9, r3, r2
 801a4fe:	fbb0 f3f2 	udiv	r3, r0, r2
 801a502:	fb02 0313 	mls	r3, r2, r3, r0
 801a506:	b29b      	uxth	r3, r3
 801a508:	fb03 f909 	mul.w	r9, r3, r9
 801a50c:	6823      	ldr	r3, [r4, #0]
 801a50e:	f109 0904 	add.w	r9, r9, #4
 801a512:	4499      	add	r9, r3
 801a514:	7b23      	ldrb	r3, [r4, #12]
 801a516:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801a51a:	e76a      	b.n	801a3f2 <uxr_prepare_output_stream_fragmented+0x66>
 801a51c:	0801a219 	.word	0x0801a219

0801a520 <uxr_serialize_message_header>:
 801a520:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a522:	4616      	mov	r6, r2
 801a524:	b083      	sub	sp, #12
 801a526:	4604      	mov	r4, r0
 801a528:	460d      	mov	r5, r1
 801a52a:	9301      	str	r3, [sp, #4]
 801a52c:	9f08      	ldr	r7, [sp, #32]
 801a52e:	f7f7 fdb7 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a532:	4631      	mov	r1, r6
 801a534:	4620      	mov	r0, r4
 801a536:	f7f7 fdb3 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a53a:	9a01      	ldr	r2, [sp, #4]
 801a53c:	2101      	movs	r1, #1
 801a53e:	4620      	mov	r0, r4
 801a540:	f7f7 fe5a 	bl	80121f8 <ucdr_serialize_endian_uint16_t>
 801a544:	062b      	lsls	r3, r5, #24
 801a546:	d501      	bpl.n	801a54c <uxr_serialize_message_header+0x2c>
 801a548:	b003      	add	sp, #12
 801a54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a54c:	2204      	movs	r2, #4
 801a54e:	4639      	mov	r1, r7
 801a550:	4620      	mov	r0, r4
 801a552:	b003      	add	sp, #12
 801a554:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a558:	f7fd ba6e 	b.w	8017a38 <ucdr_serialize_array_uint8_t>

0801a55c <uxr_deserialize_message_header>:
 801a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a55e:	4616      	mov	r6, r2
 801a560:	b083      	sub	sp, #12
 801a562:	4604      	mov	r4, r0
 801a564:	460d      	mov	r5, r1
 801a566:	9301      	str	r3, [sp, #4]
 801a568:	9f08      	ldr	r7, [sp, #32]
 801a56a:	f7f7 fdaf 	bl	80120cc <ucdr_deserialize_uint8_t>
 801a56e:	4631      	mov	r1, r6
 801a570:	4620      	mov	r0, r4
 801a572:	f7f7 fdab 	bl	80120cc <ucdr_deserialize_uint8_t>
 801a576:	9a01      	ldr	r2, [sp, #4]
 801a578:	2101      	movs	r1, #1
 801a57a:	4620      	mov	r0, r4
 801a57c:	f7f7 ff30 	bl	80123e0 <ucdr_deserialize_endian_uint16_t>
 801a580:	f995 3000 	ldrsb.w	r3, [r5]
 801a584:	2b00      	cmp	r3, #0
 801a586:	da01      	bge.n	801a58c <uxr_deserialize_message_header+0x30>
 801a588:	b003      	add	sp, #12
 801a58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a58c:	2204      	movs	r2, #4
 801a58e:	4639      	mov	r1, r7
 801a590:	4620      	mov	r0, r4
 801a592:	b003      	add	sp, #12
 801a594:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a598:	f7fd bab2 	b.w	8017b00 <ucdr_deserialize_array_uint8_t>

0801a59c <uxr_serialize_submessage_header>:
 801a59c:	b530      	push	{r4, r5, lr}
 801a59e:	4615      	mov	r5, r2
 801a5a0:	b083      	sub	sp, #12
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	9301      	str	r3, [sp, #4]
 801a5a6:	f7f7 fd7b 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a5aa:	4629      	mov	r1, r5
 801a5ac:	4620      	mov	r0, r4
 801a5ae:	f7f7 fd77 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a5b2:	9a01      	ldr	r2, [sp, #4]
 801a5b4:	2101      	movs	r1, #1
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	b003      	add	sp, #12
 801a5ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5be:	f7f7 be1b 	b.w	80121f8 <ucdr_serialize_endian_uint16_t>
 801a5c2:	bf00      	nop

0801a5c4 <uxr_deserialize_submessage_header>:
 801a5c4:	b530      	push	{r4, r5, lr}
 801a5c6:	4615      	mov	r5, r2
 801a5c8:	b083      	sub	sp, #12
 801a5ca:	4604      	mov	r4, r0
 801a5cc:	9301      	str	r3, [sp, #4]
 801a5ce:	f7f7 fd7d 	bl	80120cc <ucdr_deserialize_uint8_t>
 801a5d2:	4629      	mov	r1, r5
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	f7f7 fd79 	bl	80120cc <ucdr_deserialize_uint8_t>
 801a5da:	9a01      	ldr	r2, [sp, #4]
 801a5dc:	2101      	movs	r1, #1
 801a5de:	4620      	mov	r0, r4
 801a5e0:	b003      	add	sp, #12
 801a5e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5e6:	f7f7 befb 	b.w	80123e0 <ucdr_deserialize_endian_uint16_t>
 801a5ea:	bf00      	nop

0801a5ec <uxr_serialize_CLIENT_Representation>:
 801a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5f0:	2204      	movs	r2, #4
 801a5f2:	460e      	mov	r6, r1
 801a5f4:	4605      	mov	r5, r0
 801a5f6:	f7fd fa1f 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a5fa:	4607      	mov	r7, r0
 801a5fc:	2202      	movs	r2, #2
 801a5fe:	1d31      	adds	r1, r6, #4
 801a600:	4628      	mov	r0, r5
 801a602:	f7fd fa19 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a606:	4038      	ands	r0, r7
 801a608:	2202      	movs	r2, #2
 801a60a:	1db1      	adds	r1, r6, #6
 801a60c:	b2c7      	uxtb	r7, r0
 801a60e:	4628      	mov	r0, r5
 801a610:	f7fd fa12 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a614:	2204      	movs	r2, #4
 801a616:	4007      	ands	r7, r0
 801a618:	f106 0108 	add.w	r1, r6, #8
 801a61c:	4628      	mov	r0, r5
 801a61e:	f7fd fa0b 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a622:	4007      	ands	r7, r0
 801a624:	7b31      	ldrb	r1, [r6, #12]
 801a626:	4628      	mov	r0, r5
 801a628:	f7f7 fd3a 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a62c:	7b71      	ldrb	r1, [r6, #13]
 801a62e:	4007      	ands	r7, r0
 801a630:	4628      	mov	r0, r5
 801a632:	f7f7 fd07 	bl	8012044 <ucdr_serialize_bool>
 801a636:	7b73      	ldrb	r3, [r6, #13]
 801a638:	ea07 0800 	and.w	r8, r7, r0
 801a63c:	b93b      	cbnz	r3, 801a64e <uxr_serialize_CLIENT_Representation+0x62>
 801a63e:	8bb1      	ldrh	r1, [r6, #28]
 801a640:	4628      	mov	r0, r5
 801a642:	f7f7 fd59 	bl	80120f8 <ucdr_serialize_uint16_t>
 801a646:	ea08 0000 	and.w	r0, r8, r0
 801a64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a64e:	6931      	ldr	r1, [r6, #16]
 801a650:	4628      	mov	r0, r5
 801a652:	f7f7 ff3b 	bl	80124cc <ucdr_serialize_uint32_t>
 801a656:	6933      	ldr	r3, [r6, #16]
 801a658:	b1e3      	cbz	r3, 801a694 <uxr_serialize_CLIENT_Representation+0xa8>
 801a65a:	b1c0      	cbz	r0, 801a68e <uxr_serialize_CLIENT_Representation+0xa2>
 801a65c:	4637      	mov	r7, r6
 801a65e:	f04f 0900 	mov.w	r9, #0
 801a662:	e000      	b.n	801a666 <uxr_serialize_CLIENT_Representation+0x7a>
 801a664:	b19c      	cbz	r4, 801a68e <uxr_serialize_CLIENT_Representation+0xa2>
 801a666:	6979      	ldr	r1, [r7, #20]
 801a668:	4628      	mov	r0, r5
 801a66a:	f004 f91d 	bl	801e8a8 <ucdr_serialize_string>
 801a66e:	69b9      	ldr	r1, [r7, #24]
 801a670:	4604      	mov	r4, r0
 801a672:	4628      	mov	r0, r5
 801a674:	f004 f918 	bl	801e8a8 <ucdr_serialize_string>
 801a678:	f109 0901 	add.w	r9, r9, #1
 801a67c:	6933      	ldr	r3, [r6, #16]
 801a67e:	4004      	ands	r4, r0
 801a680:	3708      	adds	r7, #8
 801a682:	4599      	cmp	r9, r3
 801a684:	b2e4      	uxtb	r4, r4
 801a686:	d3ed      	bcc.n	801a664 <uxr_serialize_CLIENT_Representation+0x78>
 801a688:	ea08 0804 	and.w	r8, r8, r4
 801a68c:	e7d7      	b.n	801a63e <uxr_serialize_CLIENT_Representation+0x52>
 801a68e:	f04f 0800 	mov.w	r8, #0
 801a692:	e7d4      	b.n	801a63e <uxr_serialize_CLIENT_Representation+0x52>
 801a694:	ea08 0800 	and.w	r8, r8, r0
 801a698:	e7d1      	b.n	801a63e <uxr_serialize_CLIENT_Representation+0x52>
 801a69a:	bf00      	nop

0801a69c <uxr_deserialize_CLIENT_Representation>:
 801a69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6a0:	2204      	movs	r2, #4
 801a6a2:	460c      	mov	r4, r1
 801a6a4:	4605      	mov	r5, r0
 801a6a6:	f7fd fa2b 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801a6aa:	4607      	mov	r7, r0
 801a6ac:	2202      	movs	r2, #2
 801a6ae:	1d21      	adds	r1, r4, #4
 801a6b0:	4628      	mov	r0, r5
 801a6b2:	f7fd fa25 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801a6b6:	4038      	ands	r0, r7
 801a6b8:	2202      	movs	r2, #2
 801a6ba:	1da1      	adds	r1, r4, #6
 801a6bc:	b2c6      	uxtb	r6, r0
 801a6be:	4628      	mov	r0, r5
 801a6c0:	f7fd fa1e 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801a6c4:	2204      	movs	r2, #4
 801a6c6:	4006      	ands	r6, r0
 801a6c8:	f104 0108 	add.w	r1, r4, #8
 801a6cc:	4628      	mov	r0, r5
 801a6ce:	f7fd fa17 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801a6d2:	4006      	ands	r6, r0
 801a6d4:	f104 010c 	add.w	r1, r4, #12
 801a6d8:	4628      	mov	r0, r5
 801a6da:	f7f7 fcf7 	bl	80120cc <ucdr_deserialize_uint8_t>
 801a6de:	f104 010d 	add.w	r1, r4, #13
 801a6e2:	ea06 0700 	and.w	r7, r6, r0
 801a6e6:	4628      	mov	r0, r5
 801a6e8:	f7f7 fcc2 	bl	8012070 <ucdr_deserialize_bool>
 801a6ec:	7b63      	ldrb	r3, [r4, #13]
 801a6ee:	4007      	ands	r7, r0
 801a6f0:	b93b      	cbnz	r3, 801a702 <uxr_deserialize_CLIENT_Representation+0x66>
 801a6f2:	f104 011c 	add.w	r1, r4, #28
 801a6f6:	4628      	mov	r0, r5
 801a6f8:	f7f7 fdfe 	bl	80122f8 <ucdr_deserialize_uint16_t>
 801a6fc:	4038      	ands	r0, r7
 801a6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a702:	f104 0110 	add.w	r1, r4, #16
 801a706:	4628      	mov	r0, r5
 801a708:	f7f8 f810 	bl	801272c <ucdr_deserialize_uint32_t>
 801a70c:	6923      	ldr	r3, [r4, #16]
 801a70e:	2b01      	cmp	r3, #1
 801a710:	d903      	bls.n	801a71a <uxr_deserialize_CLIENT_Representation+0x7e>
 801a712:	2301      	movs	r3, #1
 801a714:	2700      	movs	r7, #0
 801a716:	75ab      	strb	r3, [r5, #22]
 801a718:	e7eb      	b.n	801a6f2 <uxr_deserialize_CLIENT_Representation+0x56>
 801a71a:	b30b      	cbz	r3, 801a760 <uxr_deserialize_CLIENT_Representation+0xc4>
 801a71c:	b1f0      	cbz	r0, 801a75c <uxr_deserialize_CLIENT_Representation+0xc0>
 801a71e:	46a0      	mov	r8, r4
 801a720:	f04f 0900 	mov.w	r9, #0
 801a724:	e000      	b.n	801a728 <uxr_deserialize_CLIENT_Representation+0x8c>
 801a726:	b1ce      	cbz	r6, 801a75c <uxr_deserialize_CLIENT_Representation+0xc0>
 801a728:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a72c:	f108 0808 	add.w	r8, r8, #8
 801a730:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a734:	4628      	mov	r0, r5
 801a736:	f004 f8c7 	bl	801e8c8 <ucdr_deserialize_string>
 801a73a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a73e:	4606      	mov	r6, r0
 801a740:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a744:	4628      	mov	r0, r5
 801a746:	f109 0901 	add.w	r9, r9, #1
 801a74a:	f004 f8bd 	bl	801e8c8 <ucdr_deserialize_string>
 801a74e:	6923      	ldr	r3, [r4, #16]
 801a750:	4006      	ands	r6, r0
 801a752:	4599      	cmp	r9, r3
 801a754:	b2f6      	uxtb	r6, r6
 801a756:	d3e6      	bcc.n	801a726 <uxr_deserialize_CLIENT_Representation+0x8a>
 801a758:	4037      	ands	r7, r6
 801a75a:	e7ca      	b.n	801a6f2 <uxr_deserialize_CLIENT_Representation+0x56>
 801a75c:	2700      	movs	r7, #0
 801a75e:	e7c8      	b.n	801a6f2 <uxr_deserialize_CLIENT_Representation+0x56>
 801a760:	4007      	ands	r7, r0
 801a762:	e7c6      	b.n	801a6f2 <uxr_deserialize_CLIENT_Representation+0x56>

0801a764 <uxr_serialize_AGENT_Representation>:
 801a764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a768:	2204      	movs	r2, #4
 801a76a:	460f      	mov	r7, r1
 801a76c:	4605      	mov	r5, r0
 801a76e:	f7fd f963 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a772:	4604      	mov	r4, r0
 801a774:	2202      	movs	r2, #2
 801a776:	1d39      	adds	r1, r7, #4
 801a778:	4628      	mov	r0, r5
 801a77a:	f7fd f95d 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a77e:	4020      	ands	r0, r4
 801a780:	2202      	movs	r2, #2
 801a782:	1db9      	adds	r1, r7, #6
 801a784:	b2c4      	uxtb	r4, r0
 801a786:	4628      	mov	r0, r5
 801a788:	f7fd f956 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a78c:	7a39      	ldrb	r1, [r7, #8]
 801a78e:	4004      	ands	r4, r0
 801a790:	4628      	mov	r0, r5
 801a792:	f7f7 fc57 	bl	8012044 <ucdr_serialize_bool>
 801a796:	7a3b      	ldrb	r3, [r7, #8]
 801a798:	ea00 0804 	and.w	r8, r0, r4
 801a79c:	b913      	cbnz	r3, 801a7a4 <uxr_serialize_AGENT_Representation+0x40>
 801a79e:	4640      	mov	r0, r8
 801a7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7a4:	68f9      	ldr	r1, [r7, #12]
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	f7f7 fe90 	bl	80124cc <ucdr_serialize_uint32_t>
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	b303      	cbz	r3, 801a7f2 <uxr_serialize_AGENT_Representation+0x8e>
 801a7b0:	b1d0      	cbz	r0, 801a7e8 <uxr_serialize_AGENT_Representation+0x84>
 801a7b2:	463e      	mov	r6, r7
 801a7b4:	f04f 0900 	mov.w	r9, #0
 801a7b8:	e000      	b.n	801a7bc <uxr_serialize_AGENT_Representation+0x58>
 801a7ba:	b1ac      	cbz	r4, 801a7e8 <uxr_serialize_AGENT_Representation+0x84>
 801a7bc:	6931      	ldr	r1, [r6, #16]
 801a7be:	4628      	mov	r0, r5
 801a7c0:	f004 f872 	bl	801e8a8 <ucdr_serialize_string>
 801a7c4:	6971      	ldr	r1, [r6, #20]
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	4628      	mov	r0, r5
 801a7ca:	f004 f86d 	bl	801e8a8 <ucdr_serialize_string>
 801a7ce:	f109 0901 	add.w	r9, r9, #1
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	4004      	ands	r4, r0
 801a7d6:	3608      	adds	r6, #8
 801a7d8:	4599      	cmp	r9, r3
 801a7da:	b2e4      	uxtb	r4, r4
 801a7dc:	d3ed      	bcc.n	801a7ba <uxr_serialize_AGENT_Representation+0x56>
 801a7de:	ea08 0804 	and.w	r8, r8, r4
 801a7e2:	4640      	mov	r0, r8
 801a7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7e8:	f04f 0800 	mov.w	r8, #0
 801a7ec:	4640      	mov	r0, r8
 801a7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7f2:	ea08 0800 	and.w	r8, r8, r0
 801a7f6:	e7d2      	b.n	801a79e <uxr_serialize_AGENT_Representation+0x3a>

0801a7f8 <uxr_serialize_DATAWRITER_Representation>:
 801a7f8:	b570      	push	{r4, r5, r6, lr}
 801a7fa:	460d      	mov	r5, r1
 801a7fc:	7809      	ldrb	r1, [r1, #0]
 801a7fe:	4606      	mov	r6, r0
 801a800:	f7f7 fc4e 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a804:	4604      	mov	r4, r0
 801a806:	b130      	cbz	r0, 801a816 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a808:	782b      	ldrb	r3, [r5, #0]
 801a80a:	2b02      	cmp	r3, #2
 801a80c:	d00c      	beq.n	801a828 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a80e:	2b03      	cmp	r3, #3
 801a810:	d010      	beq.n	801a834 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801a812:	2b01      	cmp	r3, #1
 801a814:	d008      	beq.n	801a828 <uxr_serialize_DATAWRITER_Representation+0x30>
 801a816:	2202      	movs	r2, #2
 801a818:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a81c:	4630      	mov	r0, r6
 801a81e:	f7fd f90b 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a822:	4020      	ands	r0, r4
 801a824:	b2c0      	uxtb	r0, r0
 801a826:	bd70      	pop	{r4, r5, r6, pc}
 801a828:	6869      	ldr	r1, [r5, #4]
 801a82a:	4630      	mov	r0, r6
 801a82c:	f004 f83c 	bl	801e8a8 <ucdr_serialize_string>
 801a830:	4604      	mov	r4, r0
 801a832:	e7f0      	b.n	801a816 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a834:	4629      	mov	r1, r5
 801a836:	4630      	mov	r0, r6
 801a838:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801a83c:	3104      	adds	r1, #4
 801a83e:	f7f8 ffa7 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801a842:	4604      	mov	r4, r0
 801a844:	e7e7      	b.n	801a816 <uxr_serialize_DATAWRITER_Representation+0x1e>
 801a846:	bf00      	nop

0801a848 <uxr_serialize_ObjectVariant.part.0>:
 801a848:	b570      	push	{r4, r5, r6, lr}
 801a84a:	780b      	ldrb	r3, [r1, #0]
 801a84c:	460c      	mov	r4, r1
 801a84e:	4605      	mov	r5, r0
 801a850:	3b01      	subs	r3, #1
 801a852:	2b0d      	cmp	r3, #13
 801a854:	d854      	bhi.n	801a900 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a856:	e8df f003 	tbb	[pc, r3]
 801a85a:	0730      	.short	0x0730
 801a85c:	07071b1b 	.word	0x07071b1b
 801a860:	0c530707 	.word	0x0c530707
 801a864:	494e0c0c 	.word	0x494e0c0c
 801a868:	3104      	adds	r1, #4
 801a86a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a86e:	f7ff bfc3 	b.w	801a7f8 <uxr_serialize_DATAWRITER_Representation>
 801a872:	7909      	ldrb	r1, [r1, #4]
 801a874:	f7f7 fc14 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a878:	b1e8      	cbz	r0, 801a8b6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801a87a:	7923      	ldrb	r3, [r4, #4]
 801a87c:	2b01      	cmp	r3, #1
 801a87e:	d001      	beq.n	801a884 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801a880:	2b02      	cmp	r3, #2
 801a882:	d13d      	bne.n	801a900 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801a884:	68a1      	ldr	r1, [r4, #8]
 801a886:	4628      	mov	r0, r5
 801a888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a88c:	f004 b80c 	b.w	801e8a8 <ucdr_serialize_string>
 801a890:	7909      	ldrb	r1, [r1, #4]
 801a892:	f7f7 fc05 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a896:	4606      	mov	r6, r0
 801a898:	b120      	cbz	r0, 801a8a4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a89a:	7923      	ldrb	r3, [r4, #4]
 801a89c:	2b02      	cmp	r3, #2
 801a89e:	d039      	beq.n	801a914 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801a8a0:	2b03      	cmp	r3, #3
 801a8a2:	d02f      	beq.n	801a904 <uxr_serialize_ObjectVariant.part.0+0xbc>
 801a8a4:	2202      	movs	r2, #2
 801a8a6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801a8aa:	4628      	mov	r0, r5
 801a8ac:	f7fd f8c4 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801a8b0:	4030      	ands	r0, r6
 801a8b2:	b2c0      	uxtb	r0, r0
 801a8b4:	bd70      	pop	{r4, r5, r6, pc}
 801a8b6:	2000      	movs	r0, #0
 801a8b8:	bd70      	pop	{r4, r5, r6, pc}
 801a8ba:	7909      	ldrb	r1, [r1, #4]
 801a8bc:	f7f7 fbf0 	bl	80120a0 <ucdr_serialize_uint8_t>
 801a8c0:	4606      	mov	r6, r0
 801a8c2:	b158      	cbz	r0, 801a8dc <uxr_serialize_ObjectVariant.part.0+0x94>
 801a8c4:	7923      	ldrb	r3, [r4, #4]
 801a8c6:	2b02      	cmp	r3, #2
 801a8c8:	d003      	beq.n	801a8d2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801a8ca:	2b03      	cmp	r3, #3
 801a8cc:	d028      	beq.n	801a920 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801a8ce:	2b01      	cmp	r3, #1
 801a8d0:	d104      	bne.n	801a8dc <uxr_serialize_ObjectVariant.part.0+0x94>
 801a8d2:	68a1      	ldr	r1, [r4, #8]
 801a8d4:	4628      	mov	r0, r5
 801a8d6:	f003 ffe7 	bl	801e8a8 <ucdr_serialize_string>
 801a8da:	4606      	mov	r6, r0
 801a8dc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 801a8e0:	4628      	mov	r0, r5
 801a8e2:	f7f8 f919 	bl	8012b18 <ucdr_serialize_int16_t>
 801a8e6:	4030      	ands	r0, r6
 801a8e8:	b2c0      	uxtb	r0, r0
 801a8ea:	bd70      	pop	{r4, r5, r6, pc}
 801a8ec:	3104      	adds	r1, #4
 801a8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8f2:	f7ff be7b 	b.w	801a5ec <uxr_serialize_CLIENT_Representation>
 801a8f6:	3104      	adds	r1, #4
 801a8f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8fc:	f7ff bf32 	b.w	801a764 <uxr_serialize_AGENT_Representation>
 801a900:	2001      	movs	r0, #1
 801a902:	bd70      	pop	{r4, r5, r6, pc}
 801a904:	68a2      	ldr	r2, [r4, #8]
 801a906:	f104 010c 	add.w	r1, r4, #12
 801a90a:	4628      	mov	r0, r5
 801a90c:	f7f8 ff40 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801a910:	4606      	mov	r6, r0
 801a912:	e7c7      	b.n	801a8a4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a914:	68a1      	ldr	r1, [r4, #8]
 801a916:	4628      	mov	r0, r5
 801a918:	f003 ffc6 	bl	801e8a8 <ucdr_serialize_string>
 801a91c:	4606      	mov	r6, r0
 801a91e:	e7c1      	b.n	801a8a4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801a920:	68a2      	ldr	r2, [r4, #8]
 801a922:	f104 010c 	add.w	r1, r4, #12
 801a926:	4628      	mov	r0, r5
 801a928:	f7f8 ff32 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801a92c:	4606      	mov	r6, r0
 801a92e:	e7d5      	b.n	801a8dc <uxr_serialize_ObjectVariant.part.0+0x94>

0801a930 <uxr_deserialize_DATAWRITER_Representation>:
 801a930:	b570      	push	{r4, r5, r6, lr}
 801a932:	4606      	mov	r6, r0
 801a934:	460d      	mov	r5, r1
 801a936:	f7f7 fbc9 	bl	80120cc <ucdr_deserialize_uint8_t>
 801a93a:	4604      	mov	r4, r0
 801a93c:	b130      	cbz	r0, 801a94c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a93e:	782b      	ldrb	r3, [r5, #0]
 801a940:	2b02      	cmp	r3, #2
 801a942:	d00c      	beq.n	801a95e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a944:	2b03      	cmp	r3, #3
 801a946:	d012      	beq.n	801a96e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801a948:	2b01      	cmp	r3, #1
 801a94a:	d008      	beq.n	801a95e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801a94c:	2202      	movs	r2, #2
 801a94e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801a952:	4630      	mov	r0, r6
 801a954:	f7fd f8d4 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801a958:	4020      	ands	r0, r4
 801a95a:	b2c0      	uxtb	r0, r0
 801a95c:	bd70      	pop	{r4, r5, r6, pc}
 801a95e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a962:	6869      	ldr	r1, [r5, #4]
 801a964:	4630      	mov	r0, r6
 801a966:	f003 ffaf 	bl	801e8c8 <ucdr_deserialize_string>
 801a96a:	4604      	mov	r4, r0
 801a96c:	e7ee      	b.n	801a94c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a96e:	1d2b      	adds	r3, r5, #4
 801a970:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a974:	f105 0108 	add.w	r1, r5, #8
 801a978:	4630      	mov	r0, r6
 801a97a:	f7f8 ff1b 	bl	80137b4 <ucdr_deserialize_sequence_uint8_t>
 801a97e:	4604      	mov	r4, r0
 801a980:	e7e4      	b.n	801a94c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801a982:	bf00      	nop

0801a984 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801a984:	b570      	push	{r4, r5, r6, lr}
 801a986:	460d      	mov	r5, r1
 801a988:	7809      	ldrb	r1, [r1, #0]
 801a98a:	4606      	mov	r6, r0
 801a98c:	f7f7 fb5a 	bl	8012044 <ucdr_serialize_bool>
 801a990:	782b      	ldrb	r3, [r5, #0]
 801a992:	4604      	mov	r4, r0
 801a994:	b94b      	cbnz	r3, 801a9aa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801a996:	7a29      	ldrb	r1, [r5, #8]
 801a998:	4630      	mov	r0, r6
 801a99a:	f7f7 fb53 	bl	8012044 <ucdr_serialize_bool>
 801a99e:	7a2b      	ldrb	r3, [r5, #8]
 801a9a0:	4004      	ands	r4, r0
 801a9a2:	b2e4      	uxtb	r4, r4
 801a9a4:	b943      	cbnz	r3, 801a9b8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801a9a6:	4620      	mov	r0, r4
 801a9a8:	bd70      	pop	{r4, r5, r6, pc}
 801a9aa:	6869      	ldr	r1, [r5, #4]
 801a9ac:	4630      	mov	r0, r6
 801a9ae:	f003 ff7b 	bl	801e8a8 <ucdr_serialize_string>
 801a9b2:	4004      	ands	r4, r0
 801a9b4:	b2e4      	uxtb	r4, r4
 801a9b6:	e7ee      	b.n	801a996 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801a9b8:	68e9      	ldr	r1, [r5, #12]
 801a9ba:	4630      	mov	r0, r6
 801a9bc:	f003 ff74 	bl	801e8a8 <ucdr_serialize_string>
 801a9c0:	4004      	ands	r4, r0
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	bd70      	pop	{r4, r5, r6, pc}
 801a9c6:	bf00      	nop

0801a9c8 <uxr_serialize_OBJK_Topic_Binary>:
 801a9c8:	b570      	push	{r4, r5, r6, lr}
 801a9ca:	460d      	mov	r5, r1
 801a9cc:	4606      	mov	r6, r0
 801a9ce:	6809      	ldr	r1, [r1, #0]
 801a9d0:	f003 ff6a 	bl	801e8a8 <ucdr_serialize_string>
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	7929      	ldrb	r1, [r5, #4]
 801a9d8:	4630      	mov	r0, r6
 801a9da:	f7f7 fb33 	bl	8012044 <ucdr_serialize_bool>
 801a9de:	792b      	ldrb	r3, [r5, #4]
 801a9e0:	4004      	ands	r4, r0
 801a9e2:	b2e4      	uxtb	r4, r4
 801a9e4:	b943      	cbnz	r3, 801a9f8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801a9e6:	7b29      	ldrb	r1, [r5, #12]
 801a9e8:	4630      	mov	r0, r6
 801a9ea:	f7f7 fb2b 	bl	8012044 <ucdr_serialize_bool>
 801a9ee:	7b2b      	ldrb	r3, [r5, #12]
 801a9f0:	4004      	ands	r4, r0
 801a9f2:	b93b      	cbnz	r3, 801aa04 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801a9f4:	4620      	mov	r0, r4
 801a9f6:	bd70      	pop	{r4, r5, r6, pc}
 801a9f8:	68a9      	ldr	r1, [r5, #8]
 801a9fa:	4630      	mov	r0, r6
 801a9fc:	f003 ff54 	bl	801e8a8 <ucdr_serialize_string>
 801aa00:	4004      	ands	r4, r0
 801aa02:	e7f0      	b.n	801a9e6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801aa04:	6929      	ldr	r1, [r5, #16]
 801aa06:	4630      	mov	r0, r6
 801aa08:	f003 ff4e 	bl	801e8a8 <ucdr_serialize_string>
 801aa0c:	4004      	ands	r4, r0
 801aa0e:	b2e4      	uxtb	r4, r4
 801aa10:	4620      	mov	r0, r4
 801aa12:	bd70      	pop	{r4, r5, r6, pc}

0801aa14 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa18:	460c      	mov	r4, r1
 801aa1a:	7809      	ldrb	r1, [r1, #0]
 801aa1c:	4606      	mov	r6, r0
 801aa1e:	f7f7 fb11 	bl	8012044 <ucdr_serialize_bool>
 801aa22:	7823      	ldrb	r3, [r4, #0]
 801aa24:	4605      	mov	r5, r0
 801aa26:	b96b      	cbnz	r3, 801aa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801aa28:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801aa2c:	4630      	mov	r0, r6
 801aa2e:	f7f7 fb09 	bl	8012044 <ucdr_serialize_bool>
 801aa32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801aa36:	4005      	ands	r5, r0
 801aa38:	b2ed      	uxtb	r5, r5
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d169      	bne.n	801ab12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801aa3e:	4628      	mov	r0, r5
 801aa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa44:	6861      	ldr	r1, [r4, #4]
 801aa46:	4630      	mov	r0, r6
 801aa48:	f7f7 fd40 	bl	80124cc <ucdr_serialize_uint32_t>
 801aa4c:	6863      	ldr	r3, [r4, #4]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d06b      	beq.n	801ab2a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801aa52:	2800      	cmp	r0, #0
 801aa54:	d067      	beq.n	801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aa56:	68a1      	ldr	r1, [r4, #8]
 801aa58:	4630      	mov	r0, r6
 801aa5a:	f003 ff25 	bl	801e8a8 <ucdr_serialize_string>
 801aa5e:	6863      	ldr	r3, [r4, #4]
 801aa60:	2b01      	cmp	r3, #1
 801aa62:	d953      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aa64:	2800      	cmp	r0, #0
 801aa66:	d05e      	beq.n	801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aa68:	68e1      	ldr	r1, [r4, #12]
 801aa6a:	4630      	mov	r0, r6
 801aa6c:	f003 ff1c 	bl	801e8a8 <ucdr_serialize_string>
 801aa70:	6863      	ldr	r3, [r4, #4]
 801aa72:	2b02      	cmp	r3, #2
 801aa74:	d94a      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aa76:	2800      	cmp	r0, #0
 801aa78:	d055      	beq.n	801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aa7a:	6921      	ldr	r1, [r4, #16]
 801aa7c:	4630      	mov	r0, r6
 801aa7e:	f003 ff13 	bl	801e8a8 <ucdr_serialize_string>
 801aa82:	6863      	ldr	r3, [r4, #4]
 801aa84:	2b03      	cmp	r3, #3
 801aa86:	d941      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	d04c      	beq.n	801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aa8c:	6961      	ldr	r1, [r4, #20]
 801aa8e:	4630      	mov	r0, r6
 801aa90:	f003 ff0a 	bl	801e8a8 <ucdr_serialize_string>
 801aa94:	6863      	ldr	r3, [r4, #4]
 801aa96:	2b04      	cmp	r3, #4
 801aa98:	d938      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aa9a:	2800      	cmp	r0, #0
 801aa9c:	d043      	beq.n	801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aa9e:	69a1      	ldr	r1, [r4, #24]
 801aaa0:	4630      	mov	r0, r6
 801aaa2:	f003 ff01 	bl	801e8a8 <ucdr_serialize_string>
 801aaa6:	6863      	ldr	r3, [r4, #4]
 801aaa8:	2b05      	cmp	r3, #5
 801aaaa:	d92f      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aaac:	2800      	cmp	r0, #0
 801aaae:	d03a      	beq.n	801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aab0:	69e1      	ldr	r1, [r4, #28]
 801aab2:	4630      	mov	r0, r6
 801aab4:	f003 fef8 	bl	801e8a8 <ucdr_serialize_string>
 801aab8:	6863      	ldr	r3, [r4, #4]
 801aaba:	2b06      	cmp	r3, #6
 801aabc:	d926      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aabe:	b390      	cbz	r0, 801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aac0:	6a21      	ldr	r1, [r4, #32]
 801aac2:	4630      	mov	r0, r6
 801aac4:	f003 fef0 	bl	801e8a8 <ucdr_serialize_string>
 801aac8:	6863      	ldr	r3, [r4, #4]
 801aaca:	2b07      	cmp	r3, #7
 801aacc:	d91e      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aace:	b350      	cbz	r0, 801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aad2:	4630      	mov	r0, r6
 801aad4:	f003 fee8 	bl	801e8a8 <ucdr_serialize_string>
 801aad8:	6863      	ldr	r3, [r4, #4]
 801aada:	2b08      	cmp	r3, #8
 801aadc:	d916      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aade:	b310      	cbz	r0, 801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aae0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801aae2:	4630      	mov	r0, r6
 801aae4:	f003 fee0 	bl	801e8a8 <ucdr_serialize_string>
 801aae8:	6863      	ldr	r3, [r4, #4]
 801aaea:	2b09      	cmp	r3, #9
 801aaec:	d90e      	bls.n	801ab0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801aaee:	b1d0      	cbz	r0, 801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aaf0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801aaf4:	2709      	movs	r7, #9
 801aaf6:	e000      	b.n	801aafa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801aaf8:	b1a8      	cbz	r0, 801ab26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801aafa:	f858 1b04 	ldr.w	r1, [r8], #4
 801aafe:	4630      	mov	r0, r6
 801ab00:	f003 fed2 	bl	801e8a8 <ucdr_serialize_string>
 801ab04:	3701      	adds	r7, #1
 801ab06:	6862      	ldr	r2, [r4, #4]
 801ab08:	4297      	cmp	r7, r2
 801ab0a:	d3f5      	bcc.n	801aaf8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801ab0c:	4005      	ands	r5, r0
 801ab0e:	b2ed      	uxtb	r5, r5
 801ab10:	e78a      	b.n	801aa28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801ab12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ab14:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ab18:	4630      	mov	r0, r6
 801ab1a:	f7f8 fe39 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801ab1e:	4005      	ands	r5, r0
 801ab20:	4628      	mov	r0, r5
 801ab22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab26:	2500      	movs	r5, #0
 801ab28:	e77e      	b.n	801aa28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801ab2a:	4028      	ands	r0, r5
 801ab2c:	b2c5      	uxtb	r5, r0
 801ab2e:	e77b      	b.n	801aa28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801ab30 <uxr_serialize_OBJK_Publisher_Binary>:
 801ab30:	b570      	push	{r4, r5, r6, lr}
 801ab32:	460d      	mov	r5, r1
 801ab34:	7809      	ldrb	r1, [r1, #0]
 801ab36:	4606      	mov	r6, r0
 801ab38:	f7f7 fa84 	bl	8012044 <ucdr_serialize_bool>
 801ab3c:	782b      	ldrb	r3, [r5, #0]
 801ab3e:	4604      	mov	r4, r0
 801ab40:	b94b      	cbnz	r3, 801ab56 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801ab42:	7a29      	ldrb	r1, [r5, #8]
 801ab44:	4630      	mov	r0, r6
 801ab46:	f7f7 fa7d 	bl	8012044 <ucdr_serialize_bool>
 801ab4a:	7a2b      	ldrb	r3, [r5, #8]
 801ab4c:	4004      	ands	r4, r0
 801ab4e:	b2e4      	uxtb	r4, r4
 801ab50:	b943      	cbnz	r3, 801ab64 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801ab52:	4620      	mov	r0, r4
 801ab54:	bd70      	pop	{r4, r5, r6, pc}
 801ab56:	6869      	ldr	r1, [r5, #4]
 801ab58:	4630      	mov	r0, r6
 801ab5a:	f003 fea5 	bl	801e8a8 <ucdr_serialize_string>
 801ab5e:	4004      	ands	r4, r0
 801ab60:	b2e4      	uxtb	r4, r4
 801ab62:	e7ee      	b.n	801ab42 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801ab64:	f105 010c 	add.w	r1, r5, #12
 801ab68:	4630      	mov	r0, r6
 801ab6a:	f7ff ff53 	bl	801aa14 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801ab6e:	4004      	ands	r4, r0
 801ab70:	4620      	mov	r0, r4
 801ab72:	bd70      	pop	{r4, r5, r6, pc}

0801ab74 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801ab74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab78:	460c      	mov	r4, r1
 801ab7a:	7809      	ldrb	r1, [r1, #0]
 801ab7c:	4606      	mov	r6, r0
 801ab7e:	f7f7 fa61 	bl	8012044 <ucdr_serialize_bool>
 801ab82:	7823      	ldrb	r3, [r4, #0]
 801ab84:	4605      	mov	r5, r0
 801ab86:	b96b      	cbnz	r3, 801aba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801ab88:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801ab8c:	4630      	mov	r0, r6
 801ab8e:	f7f7 fa59 	bl	8012044 <ucdr_serialize_bool>
 801ab92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801ab96:	4005      	ands	r5, r0
 801ab98:	b2ed      	uxtb	r5, r5
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d169      	bne.n	801ac72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801ab9e:	4628      	mov	r0, r5
 801aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aba4:	6861      	ldr	r1, [r4, #4]
 801aba6:	4630      	mov	r0, r6
 801aba8:	f7f7 fc90 	bl	80124cc <ucdr_serialize_uint32_t>
 801abac:	6863      	ldr	r3, [r4, #4]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d06b      	beq.n	801ac8a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801abb2:	2800      	cmp	r0, #0
 801abb4:	d067      	beq.n	801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801abb6:	68a1      	ldr	r1, [r4, #8]
 801abb8:	4630      	mov	r0, r6
 801abba:	f003 fe75 	bl	801e8a8 <ucdr_serialize_string>
 801abbe:	6863      	ldr	r3, [r4, #4]
 801abc0:	2b01      	cmp	r3, #1
 801abc2:	d953      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801abc4:	2800      	cmp	r0, #0
 801abc6:	d05e      	beq.n	801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801abc8:	68e1      	ldr	r1, [r4, #12]
 801abca:	4630      	mov	r0, r6
 801abcc:	f003 fe6c 	bl	801e8a8 <ucdr_serialize_string>
 801abd0:	6863      	ldr	r3, [r4, #4]
 801abd2:	2b02      	cmp	r3, #2
 801abd4:	d94a      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801abd6:	2800      	cmp	r0, #0
 801abd8:	d055      	beq.n	801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801abda:	6921      	ldr	r1, [r4, #16]
 801abdc:	4630      	mov	r0, r6
 801abde:	f003 fe63 	bl	801e8a8 <ucdr_serialize_string>
 801abe2:	6863      	ldr	r3, [r4, #4]
 801abe4:	2b03      	cmp	r3, #3
 801abe6:	d941      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801abe8:	2800      	cmp	r0, #0
 801abea:	d04c      	beq.n	801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801abec:	6961      	ldr	r1, [r4, #20]
 801abee:	4630      	mov	r0, r6
 801abf0:	f003 fe5a 	bl	801e8a8 <ucdr_serialize_string>
 801abf4:	6863      	ldr	r3, [r4, #4]
 801abf6:	2b04      	cmp	r3, #4
 801abf8:	d938      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801abfa:	2800      	cmp	r0, #0
 801abfc:	d043      	beq.n	801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801abfe:	69a1      	ldr	r1, [r4, #24]
 801ac00:	4630      	mov	r0, r6
 801ac02:	f003 fe51 	bl	801e8a8 <ucdr_serialize_string>
 801ac06:	6863      	ldr	r3, [r4, #4]
 801ac08:	2b05      	cmp	r3, #5
 801ac0a:	d92f      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ac0c:	2800      	cmp	r0, #0
 801ac0e:	d03a      	beq.n	801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac10:	69e1      	ldr	r1, [r4, #28]
 801ac12:	4630      	mov	r0, r6
 801ac14:	f003 fe48 	bl	801e8a8 <ucdr_serialize_string>
 801ac18:	6863      	ldr	r3, [r4, #4]
 801ac1a:	2b06      	cmp	r3, #6
 801ac1c:	d926      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ac1e:	b390      	cbz	r0, 801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac20:	6a21      	ldr	r1, [r4, #32]
 801ac22:	4630      	mov	r0, r6
 801ac24:	f003 fe40 	bl	801e8a8 <ucdr_serialize_string>
 801ac28:	6863      	ldr	r3, [r4, #4]
 801ac2a:	2b07      	cmp	r3, #7
 801ac2c:	d91e      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ac2e:	b350      	cbz	r0, 801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ac32:	4630      	mov	r0, r6
 801ac34:	f003 fe38 	bl	801e8a8 <ucdr_serialize_string>
 801ac38:	6863      	ldr	r3, [r4, #4]
 801ac3a:	2b08      	cmp	r3, #8
 801ac3c:	d916      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ac3e:	b310      	cbz	r0, 801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ac42:	4630      	mov	r0, r6
 801ac44:	f003 fe30 	bl	801e8a8 <ucdr_serialize_string>
 801ac48:	6863      	ldr	r3, [r4, #4]
 801ac4a:	2b09      	cmp	r3, #9
 801ac4c:	d90e      	bls.n	801ac6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801ac4e:	b1d0      	cbz	r0, 801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac50:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801ac54:	2709      	movs	r7, #9
 801ac56:	e000      	b.n	801ac5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801ac58:	b1a8      	cbz	r0, 801ac86 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801ac5a:	f858 1b04 	ldr.w	r1, [r8], #4
 801ac5e:	4630      	mov	r0, r6
 801ac60:	f003 fe22 	bl	801e8a8 <ucdr_serialize_string>
 801ac64:	3701      	adds	r7, #1
 801ac66:	6862      	ldr	r2, [r4, #4]
 801ac68:	4297      	cmp	r7, r2
 801ac6a:	d3f5      	bcc.n	801ac58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801ac6c:	4005      	ands	r5, r0
 801ac6e:	b2ed      	uxtb	r5, r5
 801ac70:	e78a      	b.n	801ab88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801ac72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ac74:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801ac78:	4630      	mov	r0, r6
 801ac7a:	f7f8 fd89 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801ac7e:	4005      	ands	r5, r0
 801ac80:	4628      	mov	r0, r5
 801ac82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac86:	2500      	movs	r5, #0
 801ac88:	e77e      	b.n	801ab88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801ac8a:	4028      	ands	r0, r5
 801ac8c:	b2c5      	uxtb	r5, r0
 801ac8e:	e77b      	b.n	801ab88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801ac90 <uxr_serialize_OBJK_Subscriber_Binary>:
 801ac90:	b570      	push	{r4, r5, r6, lr}
 801ac92:	460d      	mov	r5, r1
 801ac94:	7809      	ldrb	r1, [r1, #0]
 801ac96:	4606      	mov	r6, r0
 801ac98:	f7f7 f9d4 	bl	8012044 <ucdr_serialize_bool>
 801ac9c:	782b      	ldrb	r3, [r5, #0]
 801ac9e:	4604      	mov	r4, r0
 801aca0:	b94b      	cbnz	r3, 801acb6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801aca2:	7a29      	ldrb	r1, [r5, #8]
 801aca4:	4630      	mov	r0, r6
 801aca6:	f7f7 f9cd 	bl	8012044 <ucdr_serialize_bool>
 801acaa:	7a2b      	ldrb	r3, [r5, #8]
 801acac:	4004      	ands	r4, r0
 801acae:	b2e4      	uxtb	r4, r4
 801acb0:	b943      	cbnz	r3, 801acc4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801acb2:	4620      	mov	r0, r4
 801acb4:	bd70      	pop	{r4, r5, r6, pc}
 801acb6:	6869      	ldr	r1, [r5, #4]
 801acb8:	4630      	mov	r0, r6
 801acba:	f003 fdf5 	bl	801e8a8 <ucdr_serialize_string>
 801acbe:	4004      	ands	r4, r0
 801acc0:	b2e4      	uxtb	r4, r4
 801acc2:	e7ee      	b.n	801aca2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801acc4:	f105 010c 	add.w	r1, r5, #12
 801acc8:	4630      	mov	r0, r6
 801acca:	f7ff ff53 	bl	801ab74 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801acce:	4004      	ands	r4, r0
 801acd0:	4620      	mov	r0, r4
 801acd2:	bd70      	pop	{r4, r5, r6, pc}

0801acd4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801acd4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801acd8:	4688      	mov	r8, r1
 801acda:	4681      	mov	r9, r0
 801acdc:	8809      	ldrh	r1, [r1, #0]
 801acde:	f7f7 fa0b 	bl	80120f8 <ucdr_serialize_uint16_t>
 801ace2:	4606      	mov	r6, r0
 801ace4:	f898 1002 	ldrb.w	r1, [r8, #2]
 801ace8:	4648      	mov	r0, r9
 801acea:	f7f7 f9ab 	bl	8012044 <ucdr_serialize_bool>
 801acee:	f898 3002 	ldrb.w	r3, [r8, #2]
 801acf2:	4006      	ands	r6, r0
 801acf4:	b2f5      	uxtb	r5, r6
 801acf6:	b9eb      	cbnz	r3, 801ad34 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801acf8:	f898 1006 	ldrb.w	r1, [r8, #6]
 801acfc:	4648      	mov	r0, r9
 801acfe:	f7f7 f9a1 	bl	8012044 <ucdr_serialize_bool>
 801ad02:	f898 3006 	ldrb.w	r3, [r8, #6]
 801ad06:	4005      	ands	r5, r0
 801ad08:	bb7b      	cbnz	r3, 801ad6a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801ad0a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801ad0e:	4648      	mov	r0, r9
 801ad10:	f7f7 f998 	bl	8012044 <ucdr_serialize_bool>
 801ad14:	f898 300c 	ldrb.w	r3, [r8, #12]
 801ad18:	4005      	ands	r5, r0
 801ad1a:	b9f3      	cbnz	r3, 801ad5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801ad1c:	f898 1014 	ldrb.w	r1, [r8, #20]
 801ad20:	4648      	mov	r0, r9
 801ad22:	f7f7 f98f 	bl	8012044 <ucdr_serialize_bool>
 801ad26:	f898 3014 	ldrb.w	r3, [r8, #20]
 801ad2a:	4005      	ands	r5, r0
 801ad2c:	b94b      	cbnz	r3, 801ad42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801ad2e:	4628      	mov	r0, r5
 801ad30:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801ad34:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801ad38:	4648      	mov	r0, r9
 801ad3a:	f7f7 f9dd 	bl	80120f8 <ucdr_serialize_uint16_t>
 801ad3e:	4005      	ands	r5, r0
 801ad40:	e7da      	b.n	801acf8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801ad42:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801ad46:	f108 011c 	add.w	r1, r8, #28
 801ad4a:	4648      	mov	r0, r9
 801ad4c:	f7f8 fd20 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801ad50:	4028      	ands	r0, r5
 801ad52:	b2c5      	uxtb	r5, r0
 801ad54:	4628      	mov	r0, r5
 801ad56:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801ad5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ad5e:	4648      	mov	r0, r9
 801ad60:	f7f7 fbb4 	bl	80124cc <ucdr_serialize_uint32_t>
 801ad64:	4028      	ands	r0, r5
 801ad66:	b2c5      	uxtb	r5, r0
 801ad68:	e7d8      	b.n	801ad1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801ad6a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801ad6e:	4648      	mov	r0, r9
 801ad70:	f7f7 fbac 	bl	80124cc <ucdr_serialize_uint32_t>
 801ad74:	4028      	ands	r0, r5
 801ad76:	b2c5      	uxtb	r5, r0
 801ad78:	e7c7      	b.n	801ad0a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801ad7a:	bf00      	nop

0801ad7c <uxr_serialize_OBJK_DataReader_Binary>:
 801ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad7e:	2202      	movs	r2, #2
 801ad80:	460c      	mov	r4, r1
 801ad82:	4606      	mov	r6, r0
 801ad84:	f7fc fe58 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801ad88:	4605      	mov	r5, r0
 801ad8a:	78a1      	ldrb	r1, [r4, #2]
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	f7f7 f959 	bl	8012044 <ucdr_serialize_bool>
 801ad92:	78a3      	ldrb	r3, [r4, #2]
 801ad94:	4005      	ands	r5, r0
 801ad96:	b2ed      	uxtb	r5, r5
 801ad98:	b90b      	cbnz	r3, 801ad9e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801ad9a:	4628      	mov	r0, r5
 801ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad9e:	f104 0108 	add.w	r1, r4, #8
 801ada2:	4630      	mov	r0, r6
 801ada4:	f7ff ff96 	bl	801acd4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801ada8:	4607      	mov	r7, r0
 801adaa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801adae:	4630      	mov	r0, r6
 801adb0:	f7f7 f948 	bl	8012044 <ucdr_serialize_bool>
 801adb4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801adb8:	4038      	ands	r0, r7
 801adba:	b2c7      	uxtb	r7, r0
 801adbc:	b95b      	cbnz	r3, 801add6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801adbe:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801adc2:	4630      	mov	r0, r6
 801adc4:	f7f7 f93e 	bl	8012044 <ucdr_serialize_bool>
 801adc8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801adcc:	4007      	ands	r7, r0
 801adce:	b94b      	cbnz	r3, 801ade4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801add0:	403d      	ands	r5, r7
 801add2:	4628      	mov	r0, r5
 801add4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801add6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801adda:	4630      	mov	r0, r6
 801addc:	f7f7 fdcc 	bl	8012978 <ucdr_serialize_uint64_t>
 801ade0:	4007      	ands	r7, r0
 801ade2:	e7ec      	b.n	801adbe <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801ade4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ade6:	4630      	mov	r0, r6
 801ade8:	f003 fd5e 	bl	801e8a8 <ucdr_serialize_string>
 801adec:	4007      	ands	r7, r0
 801adee:	b2ff      	uxtb	r7, r7
 801adf0:	e7ee      	b.n	801add0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801adf2:	bf00      	nop

0801adf4 <uxr_serialize_OBJK_DataWriter_Binary>:
 801adf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adf6:	2202      	movs	r2, #2
 801adf8:	460d      	mov	r5, r1
 801adfa:	4606      	mov	r6, r0
 801adfc:	f7fc fe1c 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801ae00:	4604      	mov	r4, r0
 801ae02:	78a9      	ldrb	r1, [r5, #2]
 801ae04:	4630      	mov	r0, r6
 801ae06:	f7f7 f91d 	bl	8012044 <ucdr_serialize_bool>
 801ae0a:	78ab      	ldrb	r3, [r5, #2]
 801ae0c:	4004      	ands	r4, r0
 801ae0e:	b2e4      	uxtb	r4, r4
 801ae10:	b90b      	cbnz	r3, 801ae16 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801ae12:	4620      	mov	r0, r4
 801ae14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae16:	f105 0108 	add.w	r1, r5, #8
 801ae1a:	4630      	mov	r0, r6
 801ae1c:	f7ff ff5a 	bl	801acd4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801ae20:	4607      	mov	r7, r0
 801ae22:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801ae26:	4630      	mov	r0, r6
 801ae28:	f7f7 f90c 	bl	8012044 <ucdr_serialize_bool>
 801ae2c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801ae30:	4038      	ands	r0, r7
 801ae32:	b2c7      	uxtb	r7, r0
 801ae34:	b913      	cbnz	r3, 801ae3c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801ae36:	403c      	ands	r4, r7
 801ae38:	4620      	mov	r0, r4
 801ae3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae3c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801ae40:	4630      	mov	r0, r6
 801ae42:	f7f7 fd99 	bl	8012978 <ucdr_serialize_uint64_t>
 801ae46:	4007      	ands	r7, r0
 801ae48:	e7f5      	b.n	801ae36 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801ae4a:	bf00      	nop

0801ae4c <uxr_serialize_OBJK_Replier_Binary>:
 801ae4c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 801ae50:	460f      	mov	r7, r1
 801ae52:	4680      	mov	r8, r0
 801ae54:	6809      	ldr	r1, [r1, #0]
 801ae56:	f003 fd27 	bl	801e8a8 <ucdr_serialize_string>
 801ae5a:	4605      	mov	r5, r0
 801ae5c:	6879      	ldr	r1, [r7, #4]
 801ae5e:	4640      	mov	r0, r8
 801ae60:	f003 fd22 	bl	801e8a8 <ucdr_serialize_string>
 801ae64:	4005      	ands	r5, r0
 801ae66:	68b9      	ldr	r1, [r7, #8]
 801ae68:	4640      	mov	r0, r8
 801ae6a:	b2ec      	uxtb	r4, r5
 801ae6c:	f003 fd1c 	bl	801e8a8 <ucdr_serialize_string>
 801ae70:	7b39      	ldrb	r1, [r7, #12]
 801ae72:	4004      	ands	r4, r0
 801ae74:	4640      	mov	r0, r8
 801ae76:	f7f7 f8e5 	bl	8012044 <ucdr_serialize_bool>
 801ae7a:	7b3b      	ldrb	r3, [r7, #12]
 801ae7c:	4004      	ands	r4, r0
 801ae7e:	b94b      	cbnz	r3, 801ae94 <uxr_serialize_OBJK_Replier_Binary+0x48>
 801ae80:	7d39      	ldrb	r1, [r7, #20]
 801ae82:	4640      	mov	r0, r8
 801ae84:	f7f7 f8de 	bl	8012044 <ucdr_serialize_bool>
 801ae88:	7d3b      	ldrb	r3, [r7, #20]
 801ae8a:	4004      	ands	r4, r0
 801ae8c:	b943      	cbnz	r3, 801aea0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 801ae8e:	4620      	mov	r0, r4
 801ae90:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801ae94:	6939      	ldr	r1, [r7, #16]
 801ae96:	4640      	mov	r0, r8
 801ae98:	f003 fd06 	bl	801e8a8 <ucdr_serialize_string>
 801ae9c:	4004      	ands	r4, r0
 801ae9e:	e7ef      	b.n	801ae80 <uxr_serialize_OBJK_Replier_Binary+0x34>
 801aea0:	69b9      	ldr	r1, [r7, #24]
 801aea2:	4640      	mov	r0, r8
 801aea4:	f003 fd00 	bl	801e8a8 <ucdr_serialize_string>
 801aea8:	4004      	ands	r4, r0
 801aeaa:	b2e4      	uxtb	r4, r4
 801aeac:	4620      	mov	r0, r4
 801aeae:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801aeb2:	bf00      	nop

0801aeb4 <uxr_deserialize_ObjectVariant>:
 801aeb4:	b570      	push	{r4, r5, r6, lr}
 801aeb6:	4605      	mov	r5, r0
 801aeb8:	460e      	mov	r6, r1
 801aeba:	f7f7 f907 	bl	80120cc <ucdr_deserialize_uint8_t>
 801aebe:	b168      	cbz	r0, 801aedc <uxr_deserialize_ObjectVariant+0x28>
 801aec0:	7833      	ldrb	r3, [r6, #0]
 801aec2:	4604      	mov	r4, r0
 801aec4:	3b01      	subs	r3, #1
 801aec6:	2b0d      	cmp	r3, #13
 801aec8:	d809      	bhi.n	801aede <uxr_deserialize_ObjectVariant+0x2a>
 801aeca:	e8df f003 	tbb	[pc, r3]
 801aece:	0a41      	.short	0x0a41
 801aed0:	0a0a2323 	.word	0x0a0a2323
 801aed4:	10080a0a 	.word	0x10080a0a
 801aed8:	565c1010 	.word	0x565c1010
 801aedc:	2400      	movs	r4, #0
 801aede:	4620      	mov	r0, r4
 801aee0:	bd70      	pop	{r4, r5, r6, pc}
 801aee2:	1d31      	adds	r1, r6, #4
 801aee4:	4628      	mov	r0, r5
 801aee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aeea:	f7ff bd21 	b.w	801a930 <uxr_deserialize_DATAWRITER_Representation>
 801aeee:	1d31      	adds	r1, r6, #4
 801aef0:	4628      	mov	r0, r5
 801aef2:	f7f7 f8eb 	bl	80120cc <ucdr_deserialize_uint8_t>
 801aef6:	2800      	cmp	r0, #0
 801aef8:	d0f0      	beq.n	801aedc <uxr_deserialize_ObjectVariant+0x28>
 801aefa:	7933      	ldrb	r3, [r6, #4]
 801aefc:	2b01      	cmp	r3, #1
 801aefe:	d001      	beq.n	801af04 <uxr_deserialize_ObjectVariant+0x50>
 801af00:	2b02      	cmp	r3, #2
 801af02:	d1ec      	bne.n	801aede <uxr_deserialize_ObjectVariant+0x2a>
 801af04:	68b1      	ldr	r1, [r6, #8]
 801af06:	4628      	mov	r0, r5
 801af08:	f44f 7200 	mov.w	r2, #512	; 0x200
 801af0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af10:	f003 bcda 	b.w	801e8c8 <ucdr_deserialize_string>
 801af14:	1d31      	adds	r1, r6, #4
 801af16:	4628      	mov	r0, r5
 801af18:	f7f7 f8d8 	bl	80120cc <ucdr_deserialize_uint8_t>
 801af1c:	4604      	mov	r4, r0
 801af1e:	b170      	cbz	r0, 801af3e <uxr_deserialize_ObjectVariant+0x8a>
 801af20:	7933      	ldrb	r3, [r6, #4]
 801af22:	2b02      	cmp	r3, #2
 801af24:	d04c      	beq.n	801afc0 <uxr_deserialize_ObjectVariant+0x10c>
 801af26:	2b03      	cmp	r3, #3
 801af28:	d109      	bne.n	801af3e <uxr_deserialize_ObjectVariant+0x8a>
 801af2a:	f106 0308 	add.w	r3, r6, #8
 801af2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801af32:	f106 010c 	add.w	r1, r6, #12
 801af36:	4628      	mov	r0, r5
 801af38:	f7f8 fc3c 	bl	80137b4 <ucdr_deserialize_sequence_uint8_t>
 801af3c:	4604      	mov	r4, r0
 801af3e:	2202      	movs	r2, #2
 801af40:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801af44:	4628      	mov	r0, r5
 801af46:	f7fc fddb 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801af4a:	4020      	ands	r0, r4
 801af4c:	b2c4      	uxtb	r4, r0
 801af4e:	e7c6      	b.n	801aede <uxr_deserialize_ObjectVariant+0x2a>
 801af50:	1d31      	adds	r1, r6, #4
 801af52:	4628      	mov	r0, r5
 801af54:	f7f7 f8ba 	bl	80120cc <ucdr_deserialize_uint8_t>
 801af58:	4604      	mov	r4, r0
 801af5a:	b130      	cbz	r0, 801af6a <uxr_deserialize_ObjectVariant+0xb6>
 801af5c:	7933      	ldrb	r3, [r6, #4]
 801af5e:	2b02      	cmp	r3, #2
 801af60:	d036      	beq.n	801afd0 <uxr_deserialize_ObjectVariant+0x11c>
 801af62:	2b03      	cmp	r3, #3
 801af64:	d03c      	beq.n	801afe0 <uxr_deserialize_ObjectVariant+0x12c>
 801af66:	2b01      	cmp	r3, #1
 801af68:	d032      	beq.n	801afd0 <uxr_deserialize_ObjectVariant+0x11c>
 801af6a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801af6e:	4628      	mov	r0, r5
 801af70:	f7f7 fe52 	bl	8012c18 <ucdr_deserialize_int16_t>
 801af74:	4020      	ands	r0, r4
 801af76:	b2c4      	uxtb	r4, r0
 801af78:	e7b1      	b.n	801aede <uxr_deserialize_ObjectVariant+0x2a>
 801af7a:	1d31      	adds	r1, r6, #4
 801af7c:	4628      	mov	r0, r5
 801af7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af82:	f7ff bb8b 	b.w	801a69c <uxr_deserialize_CLIENT_Representation>
 801af86:	2204      	movs	r2, #4
 801af88:	4628      	mov	r0, r5
 801af8a:	18b1      	adds	r1, r6, r2
 801af8c:	f7fc fdb8 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801af90:	4604      	mov	r4, r0
 801af92:	2202      	movs	r2, #2
 801af94:	f106 0108 	add.w	r1, r6, #8
 801af98:	4628      	mov	r0, r5
 801af9a:	f7fc fdb1 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801af9e:	4004      	ands	r4, r0
 801afa0:	2202      	movs	r2, #2
 801afa2:	f106 010a 	add.w	r1, r6, #10
 801afa6:	4628      	mov	r0, r5
 801afa8:	b2e4      	uxtb	r4, r4
 801afaa:	f7fc fda9 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801afae:	4603      	mov	r3, r0
 801afb0:	f106 010c 	add.w	r1, r6, #12
 801afb4:	4628      	mov	r0, r5
 801afb6:	401c      	ands	r4, r3
 801afb8:	f7f7 f85a 	bl	8012070 <ucdr_deserialize_bool>
 801afbc:	4004      	ands	r4, r0
 801afbe:	e78e      	b.n	801aede <uxr_deserialize_ObjectVariant+0x2a>
 801afc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afc4:	68b1      	ldr	r1, [r6, #8]
 801afc6:	4628      	mov	r0, r5
 801afc8:	f003 fc7e 	bl	801e8c8 <ucdr_deserialize_string>
 801afcc:	4604      	mov	r4, r0
 801afce:	e7b6      	b.n	801af3e <uxr_deserialize_ObjectVariant+0x8a>
 801afd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afd4:	68b1      	ldr	r1, [r6, #8]
 801afd6:	4628      	mov	r0, r5
 801afd8:	f003 fc76 	bl	801e8c8 <ucdr_deserialize_string>
 801afdc:	4604      	mov	r4, r0
 801afde:	e7c4      	b.n	801af6a <uxr_deserialize_ObjectVariant+0xb6>
 801afe0:	f106 0308 	add.w	r3, r6, #8
 801afe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801afe8:	f106 010c 	add.w	r1, r6, #12
 801afec:	4628      	mov	r0, r5
 801afee:	f7f8 fbe1 	bl	80137b4 <ucdr_deserialize_sequence_uint8_t>
 801aff2:	4604      	mov	r4, r0
 801aff4:	e7b9      	b.n	801af6a <uxr_deserialize_ObjectVariant+0xb6>
 801aff6:	bf00      	nop

0801aff8 <uxr_deserialize_BaseObjectRequest>:
 801aff8:	b570      	push	{r4, r5, r6, lr}
 801affa:	2202      	movs	r2, #2
 801affc:	4605      	mov	r5, r0
 801affe:	460e      	mov	r6, r1
 801b000:	f7fc fd7e 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b004:	2202      	movs	r2, #2
 801b006:	4604      	mov	r4, r0
 801b008:	4628      	mov	r0, r5
 801b00a:	18b1      	adds	r1, r6, r2
 801b00c:	f7fc fd78 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b010:	4020      	ands	r0, r4
 801b012:	b2c0      	uxtb	r0, r0
 801b014:	bd70      	pop	{r4, r5, r6, pc}
 801b016:	bf00      	nop

0801b018 <uxr_serialize_ActivityInfoVariant>:
 801b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b01c:	460e      	mov	r6, r1
 801b01e:	7809      	ldrb	r1, [r1, #0]
 801b020:	4680      	mov	r8, r0
 801b022:	f7f7 f83d 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b026:	4607      	mov	r7, r0
 801b028:	b138      	cbz	r0, 801b03a <uxr_serialize_ActivityInfoVariant+0x22>
 801b02a:	7833      	ldrb	r3, [r6, #0]
 801b02c:	2b06      	cmp	r3, #6
 801b02e:	f000 8081 	beq.w	801b134 <uxr_serialize_ActivityInfoVariant+0x11c>
 801b032:	2b0d      	cmp	r3, #13
 801b034:	d014      	beq.n	801b060 <uxr_serialize_ActivityInfoVariant+0x48>
 801b036:	2b05      	cmp	r3, #5
 801b038:	d002      	beq.n	801b040 <uxr_serialize_ActivityInfoVariant+0x28>
 801b03a:	4638      	mov	r0, r7
 801b03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b040:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b044:	4640      	mov	r0, r8
 801b046:	f7f7 fd67 	bl	8012b18 <ucdr_serialize_int16_t>
 801b04a:	4607      	mov	r7, r0
 801b04c:	4640      	mov	r0, r8
 801b04e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801b052:	f7f7 fc91 	bl	8012978 <ucdr_serialize_uint64_t>
 801b056:	4038      	ands	r0, r7
 801b058:	b2c7      	uxtb	r7, r0
 801b05a:	4638      	mov	r0, r7
 801b05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b060:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b064:	4640      	mov	r0, r8
 801b066:	f7f7 fd57 	bl	8012b18 <ucdr_serialize_int16_t>
 801b06a:	68f1      	ldr	r1, [r6, #12]
 801b06c:	4607      	mov	r7, r0
 801b06e:	4640      	mov	r0, r8
 801b070:	f7f7 fa2c 	bl	80124cc <ucdr_serialize_uint32_t>
 801b074:	68f3      	ldr	r3, [r6, #12]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d0ed      	beq.n	801b056 <uxr_serialize_ActivityInfoVariant+0x3e>
 801b07a:	b318      	cbz	r0, 801b0c4 <uxr_serialize_ActivityInfoVariant+0xac>
 801b07c:	f106 090c 	add.w	r9, r6, #12
 801b080:	2400      	movs	r4, #0
 801b082:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801b086:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801b08a:	7c29      	ldrb	r1, [r5, #16]
 801b08c:	4640      	mov	r0, r8
 801b08e:	f7f7 f807 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b092:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801b096:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b09a:	2800      	cmp	r0, #0
 801b09c:	d051      	beq.n	801b142 <uxr_serialize_ActivityInfoVariant+0x12a>
 801b09e:	7c2b      	ldrb	r3, [r5, #16]
 801b0a0:	00c9      	lsls	r1, r1, #3
 801b0a2:	2b03      	cmp	r3, #3
 801b0a4:	d854      	bhi.n	801b150 <uxr_serialize_ActivityInfoVariant+0x138>
 801b0a6:	e8df f003 	tbb	[pc, r3]
 801b0aa:	2133      	.short	0x2133
 801b0ac:	020f      	.short	0x020f
 801b0ae:	4449      	add	r1, r9
 801b0b0:	4640      	mov	r0, r8
 801b0b2:	6889      	ldr	r1, [r1, #8]
 801b0b4:	f003 fbf8 	bl	801e8a8 <ucdr_serialize_string>
 801b0b8:	3401      	adds	r4, #1
 801b0ba:	68f2      	ldr	r2, [r6, #12]
 801b0bc:	4294      	cmp	r4, r2
 801b0be:	d244      	bcs.n	801b14a <uxr_serialize_ActivityInfoVariant+0x132>
 801b0c0:	2800      	cmp	r0, #0
 801b0c2:	d1de      	bne.n	801b082 <uxr_serialize_ActivityInfoVariant+0x6a>
 801b0c4:	2700      	movs	r7, #0
 801b0c6:	e7b8      	b.n	801b03a <uxr_serialize_ActivityInfoVariant+0x22>
 801b0c8:	3108      	adds	r1, #8
 801b0ca:	44a2      	add	sl, r4
 801b0cc:	2210      	movs	r2, #16
 801b0ce:	4640      	mov	r0, r8
 801b0d0:	4449      	add	r1, r9
 801b0d2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b0d6:	f7fc fcaf 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b0da:	4605      	mov	r5, r0
 801b0dc:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 801b0e0:	4640      	mov	r0, r8
 801b0e2:	f7f7 f9f3 	bl	80124cc <ucdr_serialize_uint32_t>
 801b0e6:	4028      	ands	r0, r5
 801b0e8:	b2c0      	uxtb	r0, r0
 801b0ea:	e7e5      	b.n	801b0b8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801b0ec:	3108      	adds	r1, #8
 801b0ee:	44a2      	add	sl, r4
 801b0f0:	2204      	movs	r2, #4
 801b0f2:	4640      	mov	r0, r8
 801b0f4:	4449      	add	r1, r9
 801b0f6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b0fa:	f7fc fc9d 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b0fe:	4605      	mov	r5, r0
 801b100:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801b104:	4640      	mov	r0, r8
 801b106:	f7f6 fff7 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b10a:	4028      	ands	r0, r5
 801b10c:	b2c0      	uxtb	r0, r0
 801b10e:	e7d3      	b.n	801b0b8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801b110:	3108      	adds	r1, #8
 801b112:	44a2      	add	sl, r4
 801b114:	2202      	movs	r2, #2
 801b116:	4640      	mov	r0, r8
 801b118:	4449      	add	r1, r9
 801b11a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801b11e:	f7fc fc8b 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b122:	4605      	mov	r5, r0
 801b124:	f89a 1016 	ldrb.w	r1, [sl, #22]
 801b128:	4640      	mov	r0, r8
 801b12a:	f7f6 ffb9 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b12e:	4028      	ands	r0, r5
 801b130:	b2c0      	uxtb	r0, r0
 801b132:	e7c1      	b.n	801b0b8 <uxr_serialize_ActivityInfoVariant+0xa0>
 801b134:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b138:	4640      	mov	r0, r8
 801b13a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b13e:	f7f7 bceb 	b.w	8012b18 <ucdr_serialize_int16_t>
 801b142:	3401      	adds	r4, #1
 801b144:	68f2      	ldr	r2, [r6, #12]
 801b146:	42a2      	cmp	r2, r4
 801b148:	d8bc      	bhi.n	801b0c4 <uxr_serialize_ActivityInfoVariant+0xac>
 801b14a:	4007      	ands	r7, r0
 801b14c:	b2ff      	uxtb	r7, r7
 801b14e:	e774      	b.n	801b03a <uxr_serialize_ActivityInfoVariant+0x22>
 801b150:	3401      	adds	r4, #1
 801b152:	68f3      	ldr	r3, [r6, #12]
 801b154:	3518      	adds	r5, #24
 801b156:	429c      	cmp	r4, r3
 801b158:	d397      	bcc.n	801b08a <uxr_serialize_ActivityInfoVariant+0x72>
 801b15a:	e76e      	b.n	801b03a <uxr_serialize_ActivityInfoVariant+0x22>

0801b15c <uxr_deserialize_BaseObjectReply>:
 801b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b160:	2202      	movs	r2, #2
 801b162:	4606      	mov	r6, r0
 801b164:	460f      	mov	r7, r1
 801b166:	f7fc fccb 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b16a:	2202      	movs	r2, #2
 801b16c:	4605      	mov	r5, r0
 801b16e:	4630      	mov	r0, r6
 801b170:	18b9      	adds	r1, r7, r2
 801b172:	f7fc fcc5 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b176:	4680      	mov	r8, r0
 801b178:	1d39      	adds	r1, r7, #4
 801b17a:	4630      	mov	r0, r6
 801b17c:	f7f6 ffa6 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b180:	ea05 0508 	and.w	r5, r5, r8
 801b184:	4604      	mov	r4, r0
 801b186:	1d79      	adds	r1, r7, #5
 801b188:	4630      	mov	r0, r6
 801b18a:	402c      	ands	r4, r5
 801b18c:	f7f6 ff9e 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b190:	4020      	ands	r0, r4
 801b192:	b2c0      	uxtb	r0, r0
 801b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b198 <uxr_serialize_ReadSpecification>:
 801b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b19a:	460e      	mov	r6, r1
 801b19c:	4607      	mov	r7, r0
 801b19e:	7809      	ldrb	r1, [r1, #0]
 801b1a0:	f7f6 ff7e 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b1a4:	4604      	mov	r4, r0
 801b1a6:	7871      	ldrb	r1, [r6, #1]
 801b1a8:	4638      	mov	r0, r7
 801b1aa:	f7f6 ff79 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b1ae:	4004      	ands	r4, r0
 801b1b0:	78b1      	ldrb	r1, [r6, #2]
 801b1b2:	4638      	mov	r0, r7
 801b1b4:	f7f6 ff46 	bl	8012044 <ucdr_serialize_bool>
 801b1b8:	78b3      	ldrb	r3, [r6, #2]
 801b1ba:	b2e4      	uxtb	r4, r4
 801b1bc:	4004      	ands	r4, r0
 801b1be:	b943      	cbnz	r3, 801b1d2 <uxr_serialize_ReadSpecification+0x3a>
 801b1c0:	7a31      	ldrb	r1, [r6, #8]
 801b1c2:	4638      	mov	r0, r7
 801b1c4:	f7f6 ff3e 	bl	8012044 <ucdr_serialize_bool>
 801b1c8:	7a33      	ldrb	r3, [r6, #8]
 801b1ca:	4004      	ands	r4, r0
 801b1cc:	b93b      	cbnz	r3, 801b1de <uxr_serialize_ReadSpecification+0x46>
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1d2:	6871      	ldr	r1, [r6, #4]
 801b1d4:	4638      	mov	r0, r7
 801b1d6:	f003 fb67 	bl	801e8a8 <ucdr_serialize_string>
 801b1da:	4004      	ands	r4, r0
 801b1dc:	e7f0      	b.n	801b1c0 <uxr_serialize_ReadSpecification+0x28>
 801b1de:	8971      	ldrh	r1, [r6, #10]
 801b1e0:	4638      	mov	r0, r7
 801b1e2:	f7f6 ff89 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b1e6:	4605      	mov	r5, r0
 801b1e8:	89b1      	ldrh	r1, [r6, #12]
 801b1ea:	4638      	mov	r0, r7
 801b1ec:	f7f6 ff84 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b1f0:	4005      	ands	r5, r0
 801b1f2:	89f1      	ldrh	r1, [r6, #14]
 801b1f4:	4638      	mov	r0, r7
 801b1f6:	b2ed      	uxtb	r5, r5
 801b1f8:	f7f6 ff7e 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b1fc:	8a31      	ldrh	r1, [r6, #16]
 801b1fe:	4025      	ands	r5, r4
 801b200:	4604      	mov	r4, r0
 801b202:	4638      	mov	r0, r7
 801b204:	4025      	ands	r5, r4
 801b206:	f7f6 ff77 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b20a:	ea00 0405 	and.w	r4, r0, r5
 801b20e:	4620      	mov	r0, r4
 801b210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b212:	bf00      	nop

0801b214 <uxr_serialize_CREATE_CLIENT_Payload>:
 801b214:	f7ff b9ea 	b.w	801a5ec <uxr_serialize_CLIENT_Representation>

0801b218 <uxr_serialize_CREATE_Payload>:
 801b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b21a:	2202      	movs	r2, #2
 801b21c:	4607      	mov	r7, r0
 801b21e:	460e      	mov	r6, r1
 801b220:	f7fc fc0a 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b224:	2202      	movs	r2, #2
 801b226:	4605      	mov	r5, r0
 801b228:	4638      	mov	r0, r7
 801b22a:	18b1      	adds	r1, r6, r2
 801b22c:	f7fc fc04 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b230:	7931      	ldrb	r1, [r6, #4]
 801b232:	4604      	mov	r4, r0
 801b234:	4638      	mov	r0, r7
 801b236:	f7f6 ff33 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b23a:	b170      	cbz	r0, 801b25a <uxr_serialize_CREATE_Payload+0x42>
 801b23c:	7933      	ldrb	r3, [r6, #4]
 801b23e:	402c      	ands	r4, r5
 801b240:	3b01      	subs	r3, #1
 801b242:	b2e4      	uxtb	r4, r4
 801b244:	2b0d      	cmp	r3, #13
 801b246:	d809      	bhi.n	801b25c <uxr_serialize_CREATE_Payload+0x44>
 801b248:	e8df f003 	tbb	[pc, r3]
 801b24c:	23230a4c 	.word	0x23230a4c
 801b250:	0a0a0a0a 	.word	0x0a0a0a0a
 801b254:	12121208 	.word	0x12121208
 801b258:	3e45      	.short	0x3e45
 801b25a:	2400      	movs	r4, #0
 801b25c:	4620      	mov	r0, r4
 801b25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b260:	f106 0108 	add.w	r1, r6, #8
 801b264:	4638      	mov	r0, r7
 801b266:	f7ff fac7 	bl	801a7f8 <uxr_serialize_DATAWRITER_Representation>
 801b26a:	4004      	ands	r4, r0
 801b26c:	4620      	mov	r0, r4
 801b26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b270:	7a31      	ldrb	r1, [r6, #8]
 801b272:	4638      	mov	r0, r7
 801b274:	f7f6 ff14 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b278:	2800      	cmp	r0, #0
 801b27a:	d0ee      	beq.n	801b25a <uxr_serialize_CREATE_Payload+0x42>
 801b27c:	7a33      	ldrb	r3, [r6, #8]
 801b27e:	2b01      	cmp	r3, #1
 801b280:	d001      	beq.n	801b286 <uxr_serialize_CREATE_Payload+0x6e>
 801b282:	2b02      	cmp	r3, #2
 801b284:	d1ea      	bne.n	801b25c <uxr_serialize_CREATE_Payload+0x44>
 801b286:	68f1      	ldr	r1, [r6, #12]
 801b288:	4638      	mov	r0, r7
 801b28a:	f003 fb0d 	bl	801e8a8 <ucdr_serialize_string>
 801b28e:	4004      	ands	r4, r0
 801b290:	e7e4      	b.n	801b25c <uxr_serialize_CREATE_Payload+0x44>
 801b292:	7a31      	ldrb	r1, [r6, #8]
 801b294:	4638      	mov	r0, r7
 801b296:	f7f6 ff03 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b29a:	4605      	mov	r5, r0
 801b29c:	b158      	cbz	r0, 801b2b6 <uxr_serialize_CREATE_Payload+0x9e>
 801b29e:	7a33      	ldrb	r3, [r6, #8]
 801b2a0:	2b02      	cmp	r3, #2
 801b2a2:	d034      	beq.n	801b30e <uxr_serialize_CREATE_Payload+0xf6>
 801b2a4:	2b03      	cmp	r3, #3
 801b2a6:	d106      	bne.n	801b2b6 <uxr_serialize_CREATE_Payload+0x9e>
 801b2a8:	68f2      	ldr	r2, [r6, #12]
 801b2aa:	f106 0110 	add.w	r1, r6, #16
 801b2ae:	4638      	mov	r0, r7
 801b2b0:	f7f8 fa6e 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801b2b4:	4605      	mov	r5, r0
 801b2b6:	2202      	movs	r2, #2
 801b2b8:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801b2bc:	4638      	mov	r0, r7
 801b2be:	f7fc fbbb 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b2c2:	4028      	ands	r0, r5
 801b2c4:	4004      	ands	r4, r0
 801b2c6:	e7c9      	b.n	801b25c <uxr_serialize_CREATE_Payload+0x44>
 801b2c8:	f106 0108 	add.w	r1, r6, #8
 801b2cc:	4638      	mov	r0, r7
 801b2ce:	f7ff f98d 	bl	801a5ec <uxr_serialize_CLIENT_Representation>
 801b2d2:	4004      	ands	r4, r0
 801b2d4:	e7c2      	b.n	801b25c <uxr_serialize_CREATE_Payload+0x44>
 801b2d6:	f106 0108 	add.w	r1, r6, #8
 801b2da:	4638      	mov	r0, r7
 801b2dc:	f7ff fa42 	bl	801a764 <uxr_serialize_AGENT_Representation>
 801b2e0:	4004      	ands	r4, r0
 801b2e2:	e7bb      	b.n	801b25c <uxr_serialize_CREATE_Payload+0x44>
 801b2e4:	7a31      	ldrb	r1, [r6, #8]
 801b2e6:	4638      	mov	r0, r7
 801b2e8:	f7f6 feda 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b2ec:	4605      	mov	r5, r0
 801b2ee:	b130      	cbz	r0, 801b2fe <uxr_serialize_CREATE_Payload+0xe6>
 801b2f0:	7a33      	ldrb	r3, [r6, #8]
 801b2f2:	2b02      	cmp	r3, #2
 801b2f4:	d011      	beq.n	801b31a <uxr_serialize_CREATE_Payload+0x102>
 801b2f6:	2b03      	cmp	r3, #3
 801b2f8:	d015      	beq.n	801b326 <uxr_serialize_CREATE_Payload+0x10e>
 801b2fa:	2b01      	cmp	r3, #1
 801b2fc:	d00d      	beq.n	801b31a <uxr_serialize_CREATE_Payload+0x102>
 801b2fe:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801b302:	4638      	mov	r0, r7
 801b304:	f7f7 fc08 	bl	8012b18 <ucdr_serialize_int16_t>
 801b308:	4028      	ands	r0, r5
 801b30a:	4004      	ands	r4, r0
 801b30c:	e7a6      	b.n	801b25c <uxr_serialize_CREATE_Payload+0x44>
 801b30e:	68f1      	ldr	r1, [r6, #12]
 801b310:	4638      	mov	r0, r7
 801b312:	f003 fac9 	bl	801e8a8 <ucdr_serialize_string>
 801b316:	4605      	mov	r5, r0
 801b318:	e7cd      	b.n	801b2b6 <uxr_serialize_CREATE_Payload+0x9e>
 801b31a:	68f1      	ldr	r1, [r6, #12]
 801b31c:	4638      	mov	r0, r7
 801b31e:	f003 fac3 	bl	801e8a8 <ucdr_serialize_string>
 801b322:	4605      	mov	r5, r0
 801b324:	e7eb      	b.n	801b2fe <uxr_serialize_CREATE_Payload+0xe6>
 801b326:	68f2      	ldr	r2, [r6, #12]
 801b328:	f106 0110 	add.w	r1, r6, #16
 801b32c:	4638      	mov	r0, r7
 801b32e:	f7f8 fa2f 	bl	8013790 <ucdr_serialize_sequence_uint8_t>
 801b332:	4605      	mov	r5, r0
 801b334:	e7e3      	b.n	801b2fe <uxr_serialize_CREATE_Payload+0xe6>
 801b336:	bf00      	nop

0801b338 <uxr_deserialize_GET_INFO_Payload>:
 801b338:	b570      	push	{r4, r5, r6, lr}
 801b33a:	2202      	movs	r2, #2
 801b33c:	4605      	mov	r5, r0
 801b33e:	460e      	mov	r6, r1
 801b340:	f7fc fbde 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b344:	2202      	movs	r2, #2
 801b346:	4604      	mov	r4, r0
 801b348:	4628      	mov	r0, r5
 801b34a:	18b1      	adds	r1, r6, r2
 801b34c:	f7fc fbd8 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b350:	4603      	mov	r3, r0
 801b352:	1d31      	adds	r1, r6, #4
 801b354:	4628      	mov	r0, r5
 801b356:	401c      	ands	r4, r3
 801b358:	f7f7 f9e8 	bl	801272c <ucdr_deserialize_uint32_t>
 801b35c:	b2e4      	uxtb	r4, r4
 801b35e:	4020      	ands	r0, r4
 801b360:	bd70      	pop	{r4, r5, r6, pc}
 801b362:	bf00      	nop

0801b364 <uxr_serialize_DELETE_Payload>:
 801b364:	b570      	push	{r4, r5, r6, lr}
 801b366:	2202      	movs	r2, #2
 801b368:	4605      	mov	r5, r0
 801b36a:	460e      	mov	r6, r1
 801b36c:	f7fc fb64 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b370:	2202      	movs	r2, #2
 801b372:	4604      	mov	r4, r0
 801b374:	4628      	mov	r0, r5
 801b376:	18b1      	adds	r1, r6, r2
 801b378:	f7fc fb5e 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b37c:	4020      	ands	r0, r4
 801b37e:	b2c0      	uxtb	r0, r0
 801b380:	bd70      	pop	{r4, r5, r6, pc}
 801b382:	bf00      	nop

0801b384 <uxr_deserialize_STATUS_AGENT_Payload>:
 801b384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b388:	460e      	mov	r6, r1
 801b38a:	4605      	mov	r5, r0
 801b38c:	f7f6 fe9e 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b390:	4604      	mov	r4, r0
 801b392:	1c71      	adds	r1, r6, #1
 801b394:	4628      	mov	r0, r5
 801b396:	f7f6 fe99 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b39a:	2204      	movs	r2, #4
 801b39c:	4681      	mov	r9, r0
 801b39e:	4628      	mov	r0, r5
 801b3a0:	18b1      	adds	r1, r6, r2
 801b3a2:	f7fc fbad 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b3a6:	f106 0108 	add.w	r1, r6, #8
 801b3aa:	4680      	mov	r8, r0
 801b3ac:	2202      	movs	r2, #2
 801b3ae:	4628      	mov	r0, r5
 801b3b0:	f7fc fba6 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b3b4:	ea04 0309 	and.w	r3, r4, r9
 801b3b8:	4607      	mov	r7, r0
 801b3ba:	2202      	movs	r2, #2
 801b3bc:	b2db      	uxtb	r3, r3
 801b3be:	f106 010a 	add.w	r1, r6, #10
 801b3c2:	4628      	mov	r0, r5
 801b3c4:	ea03 0408 	and.w	r4, r3, r8
 801b3c8:	f7fc fb9a 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b3cc:	4603      	mov	r3, r0
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	403c      	ands	r4, r7
 801b3d2:	f106 010c 	add.w	r1, r6, #12
 801b3d6:	461d      	mov	r5, r3
 801b3d8:	f7f6 fe4a 	bl	8012070 <ucdr_deserialize_bool>
 801b3dc:	4025      	ands	r5, r4
 801b3de:	4028      	ands	r0, r5
 801b3e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b3e4 <uxr_deserialize_STATUS_Payload>:
 801b3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3e8:	2202      	movs	r2, #2
 801b3ea:	4606      	mov	r6, r0
 801b3ec:	460f      	mov	r7, r1
 801b3ee:	f7fc fb87 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b3f2:	2202      	movs	r2, #2
 801b3f4:	4605      	mov	r5, r0
 801b3f6:	4630      	mov	r0, r6
 801b3f8:	18b9      	adds	r1, r7, r2
 801b3fa:	f7fc fb81 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b3fe:	4680      	mov	r8, r0
 801b400:	1d39      	adds	r1, r7, #4
 801b402:	4630      	mov	r0, r6
 801b404:	f7f6 fe62 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b408:	ea05 0508 	and.w	r5, r5, r8
 801b40c:	4604      	mov	r4, r0
 801b40e:	1d79      	adds	r1, r7, #5
 801b410:	4630      	mov	r0, r6
 801b412:	402c      	ands	r4, r5
 801b414:	f7f6 fe5a 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b418:	4020      	ands	r0, r4
 801b41a:	b2c0      	uxtb	r0, r0
 801b41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b420 <uxr_serialize_INFO_Payload>:
 801b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b424:	2202      	movs	r2, #2
 801b426:	460c      	mov	r4, r1
 801b428:	4605      	mov	r5, r0
 801b42a:	f7fc fb05 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b42e:	2202      	movs	r2, #2
 801b430:	4680      	mov	r8, r0
 801b432:	4628      	mov	r0, r5
 801b434:	18a1      	adds	r1, r4, r2
 801b436:	f7fc faff 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b43a:	4607      	mov	r7, r0
 801b43c:	7921      	ldrb	r1, [r4, #4]
 801b43e:	4628      	mov	r0, r5
 801b440:	f7f6 fe2e 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b444:	ea08 0807 	and.w	r8, r8, r7
 801b448:	4606      	mov	r6, r0
 801b44a:	7961      	ldrb	r1, [r4, #5]
 801b44c:	4628      	mov	r0, r5
 801b44e:	ea06 0608 	and.w	r6, r6, r8
 801b452:	f7f6 fe25 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b456:	7a21      	ldrb	r1, [r4, #8]
 801b458:	4030      	ands	r0, r6
 801b45a:	b2c7      	uxtb	r7, r0
 801b45c:	4628      	mov	r0, r5
 801b45e:	f7f6 fdf1 	bl	8012044 <ucdr_serialize_bool>
 801b462:	7a23      	ldrb	r3, [r4, #8]
 801b464:	4606      	mov	r6, r0
 801b466:	b96b      	cbnz	r3, 801b484 <uxr_serialize_INFO_Payload+0x64>
 801b468:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801b46c:	4628      	mov	r0, r5
 801b46e:	f7f6 fde9 	bl	8012044 <ucdr_serialize_bool>
 801b472:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801b476:	4030      	ands	r0, r6
 801b478:	b2c6      	uxtb	r6, r0
 801b47a:	b983      	cbnz	r3, 801b49e <uxr_serialize_INFO_Payload+0x7e>
 801b47c:	ea06 0007 	and.w	r0, r6, r7
 801b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b484:	7b21      	ldrb	r1, [r4, #12]
 801b486:	4628      	mov	r0, r5
 801b488:	f7f6 fe0a 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b48c:	b188      	cbz	r0, 801b4b2 <uxr_serialize_INFO_Payload+0x92>
 801b48e:	f104 010c 	add.w	r1, r4, #12
 801b492:	4628      	mov	r0, r5
 801b494:	f7ff f9d8 	bl	801a848 <uxr_serialize_ObjectVariant.part.0>
 801b498:	4030      	ands	r0, r6
 801b49a:	b2c6      	uxtb	r6, r0
 801b49c:	e7e4      	b.n	801b468 <uxr_serialize_INFO_Payload+0x48>
 801b49e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801b4a2:	4628      	mov	r0, r5
 801b4a4:	f7ff fdb8 	bl	801b018 <uxr_serialize_ActivityInfoVariant>
 801b4a8:	4006      	ands	r6, r0
 801b4aa:	ea06 0007 	and.w	r0, r6, r7
 801b4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4b2:	4606      	mov	r6, r0
 801b4b4:	e7d8      	b.n	801b468 <uxr_serialize_INFO_Payload+0x48>
 801b4b6:	bf00      	nop

0801b4b8 <uxr_serialize_READ_DATA_Payload>:
 801b4b8:	b570      	push	{r4, r5, r6, lr}
 801b4ba:	2202      	movs	r2, #2
 801b4bc:	4605      	mov	r5, r0
 801b4be:	460e      	mov	r6, r1
 801b4c0:	f7fc faba 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b4c4:	2202      	movs	r2, #2
 801b4c6:	4604      	mov	r4, r0
 801b4c8:	4628      	mov	r0, r5
 801b4ca:	18b1      	adds	r1, r6, r2
 801b4cc:	f7fc fab4 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	1d31      	adds	r1, r6, #4
 801b4d4:	4628      	mov	r0, r5
 801b4d6:	401c      	ands	r4, r3
 801b4d8:	f7ff fe5e 	bl	801b198 <uxr_serialize_ReadSpecification>
 801b4dc:	b2e4      	uxtb	r4, r4
 801b4de:	4020      	ands	r0, r4
 801b4e0:	bd70      	pop	{r4, r5, r6, pc}
 801b4e2:	bf00      	nop

0801b4e4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 801b4e4:	b570      	push	{r4, r5, r6, lr}
 801b4e6:	2202      	movs	r2, #2
 801b4e8:	4605      	mov	r5, r0
 801b4ea:	460e      	mov	r6, r1
 801b4ec:	f7fc faa4 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b4f0:	2202      	movs	r2, #2
 801b4f2:	4604      	mov	r4, r0
 801b4f4:	4628      	mov	r0, r5
 801b4f6:	18b1      	adds	r1, r6, r2
 801b4f8:	f7fc fa9e 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b4fc:	4020      	ands	r0, r4
 801b4fe:	b2c0      	uxtb	r0, r0
 801b500:	bd70      	pop	{r4, r5, r6, pc}
 801b502:	bf00      	nop

0801b504 <uxr_serialize_ACKNACK_Payload>:
 801b504:	b570      	push	{r4, r5, r6, lr}
 801b506:	460c      	mov	r4, r1
 801b508:	4605      	mov	r5, r0
 801b50a:	460e      	mov	r6, r1
 801b50c:	f834 1b02 	ldrh.w	r1, [r4], #2
 801b510:	f7f6 fdf2 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b514:	2202      	movs	r2, #2
 801b516:	4621      	mov	r1, r4
 801b518:	4604      	mov	r4, r0
 801b51a:	4628      	mov	r0, r5
 801b51c:	f7fc fa8c 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b520:	4603      	mov	r3, r0
 801b522:	7931      	ldrb	r1, [r6, #4]
 801b524:	4628      	mov	r0, r5
 801b526:	401c      	ands	r4, r3
 801b528:	f7f6 fdba 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b52c:	b2e4      	uxtb	r4, r4
 801b52e:	4020      	ands	r0, r4
 801b530:	bd70      	pop	{r4, r5, r6, pc}
 801b532:	bf00      	nop

0801b534 <uxr_deserialize_ACKNACK_Payload>:
 801b534:	b570      	push	{r4, r5, r6, lr}
 801b536:	460e      	mov	r6, r1
 801b538:	4605      	mov	r5, r0
 801b53a:	f7f6 fedd 	bl	80122f8 <ucdr_deserialize_uint16_t>
 801b53e:	2202      	movs	r2, #2
 801b540:	4604      	mov	r4, r0
 801b542:	4628      	mov	r0, r5
 801b544:	18b1      	adds	r1, r6, r2
 801b546:	f7fc fadb 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b54a:	4603      	mov	r3, r0
 801b54c:	1d31      	adds	r1, r6, #4
 801b54e:	4628      	mov	r0, r5
 801b550:	401c      	ands	r4, r3
 801b552:	f7f6 fdbb 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b556:	b2e4      	uxtb	r4, r4
 801b558:	4020      	ands	r0, r4
 801b55a:	bd70      	pop	{r4, r5, r6, pc}

0801b55c <uxr_serialize_HEARTBEAT_Payload>:
 801b55c:	b570      	push	{r4, r5, r6, lr}
 801b55e:	460d      	mov	r5, r1
 801b560:	4606      	mov	r6, r0
 801b562:	8809      	ldrh	r1, [r1, #0]
 801b564:	f7f6 fdc8 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b568:	8869      	ldrh	r1, [r5, #2]
 801b56a:	4604      	mov	r4, r0
 801b56c:	4630      	mov	r0, r6
 801b56e:	f7f6 fdc3 	bl	80120f8 <ucdr_serialize_uint16_t>
 801b572:	4603      	mov	r3, r0
 801b574:	7929      	ldrb	r1, [r5, #4]
 801b576:	4630      	mov	r0, r6
 801b578:	401c      	ands	r4, r3
 801b57a:	f7f6 fd91 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b57e:	b2e4      	uxtb	r4, r4
 801b580:	4020      	ands	r0, r4
 801b582:	bd70      	pop	{r4, r5, r6, pc}

0801b584 <uxr_deserialize_HEARTBEAT_Payload>:
 801b584:	b570      	push	{r4, r5, r6, lr}
 801b586:	460e      	mov	r6, r1
 801b588:	4605      	mov	r5, r0
 801b58a:	f7f6 feb5 	bl	80122f8 <ucdr_deserialize_uint16_t>
 801b58e:	4604      	mov	r4, r0
 801b590:	1cb1      	adds	r1, r6, #2
 801b592:	4628      	mov	r0, r5
 801b594:	f7f6 feb0 	bl	80122f8 <ucdr_deserialize_uint16_t>
 801b598:	4603      	mov	r3, r0
 801b59a:	1d31      	adds	r1, r6, #4
 801b59c:	4628      	mov	r0, r5
 801b59e:	401c      	ands	r4, r3
 801b5a0:	f7f6 fd94 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b5a4:	b2e4      	uxtb	r4, r4
 801b5a6:	4020      	ands	r0, r4
 801b5a8:	bd70      	pop	{r4, r5, r6, pc}
 801b5aa:	bf00      	nop

0801b5ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801b5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5b0:	460e      	mov	r6, r1
 801b5b2:	4605      	mov	r5, r0
 801b5b4:	f7f7 fc3c 	bl	8012e30 <ucdr_deserialize_int32_t>
 801b5b8:	4607      	mov	r7, r0
 801b5ba:	1d31      	adds	r1, r6, #4
 801b5bc:	4628      	mov	r0, r5
 801b5be:	f7f7 f8b5 	bl	801272c <ucdr_deserialize_uint32_t>
 801b5c2:	4680      	mov	r8, r0
 801b5c4:	f106 0108 	add.w	r1, r6, #8
 801b5c8:	4628      	mov	r0, r5
 801b5ca:	f7f7 fc31 	bl	8012e30 <ucdr_deserialize_int32_t>
 801b5ce:	ea07 0708 	and.w	r7, r7, r8
 801b5d2:	4604      	mov	r4, r0
 801b5d4:	f106 010c 	add.w	r1, r6, #12
 801b5d8:	4628      	mov	r0, r5
 801b5da:	403c      	ands	r4, r7
 801b5dc:	f7f7 f8a6 	bl	801272c <ucdr_deserialize_uint32_t>
 801b5e0:	f106 0110 	add.w	r1, r6, #16
 801b5e4:	4004      	ands	r4, r0
 801b5e6:	4628      	mov	r0, r5
 801b5e8:	f7f7 fc22 	bl	8012e30 <ucdr_deserialize_int32_t>
 801b5ec:	4603      	mov	r3, r0
 801b5ee:	b2e4      	uxtb	r4, r4
 801b5f0:	4628      	mov	r0, r5
 801b5f2:	461d      	mov	r5, r3
 801b5f4:	f106 0114 	add.w	r1, r6, #20
 801b5f8:	f7f7 f898 	bl	801272c <ucdr_deserialize_uint32_t>
 801b5fc:	402c      	ands	r4, r5
 801b5fe:	4020      	ands	r0, r4
 801b600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b604 <uxr_serialize_SampleIdentity>:
 801b604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b608:	4604      	mov	r4, r0
 801b60a:	460d      	mov	r5, r1
 801b60c:	220c      	movs	r2, #12
 801b60e:	f7fc fa13 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b612:	2203      	movs	r2, #3
 801b614:	f105 010c 	add.w	r1, r5, #12
 801b618:	4607      	mov	r7, r0
 801b61a:	4620      	mov	r0, r4
 801b61c:	f7fc fa0c 	bl	8017a38 <ucdr_serialize_array_uint8_t>
 801b620:	7be9      	ldrb	r1, [r5, #15]
 801b622:	4680      	mov	r8, r0
 801b624:	4620      	mov	r0, r4
 801b626:	f7f6 fd3b 	bl	80120a0 <ucdr_serialize_uint8_t>
 801b62a:	6929      	ldr	r1, [r5, #16]
 801b62c:	4606      	mov	r6, r0
 801b62e:	4620      	mov	r0, r4
 801b630:	f7f7 fb66 	bl	8012d00 <ucdr_serialize_int32_t>
 801b634:	ea07 0708 	and.w	r7, r7, r8
 801b638:	4603      	mov	r3, r0
 801b63a:	4620      	mov	r0, r4
 801b63c:	403e      	ands	r6, r7
 801b63e:	6969      	ldr	r1, [r5, #20]
 801b640:	461c      	mov	r4, r3
 801b642:	f7f6 ff43 	bl	80124cc <ucdr_serialize_uint32_t>
 801b646:	4034      	ands	r4, r6
 801b648:	4020      	ands	r0, r4
 801b64a:	b2c0      	uxtb	r0, r0
 801b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b650 <uxr_deserialize_SampleIdentity>:
 801b650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b654:	4604      	mov	r4, r0
 801b656:	460d      	mov	r5, r1
 801b658:	220c      	movs	r2, #12
 801b65a:	f7fc fa51 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b65e:	2203      	movs	r2, #3
 801b660:	f105 010c 	add.w	r1, r5, #12
 801b664:	4607      	mov	r7, r0
 801b666:	4620      	mov	r0, r4
 801b668:	f7fc fa4a 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801b66c:	f105 010f 	add.w	r1, r5, #15
 801b670:	4680      	mov	r8, r0
 801b672:	4620      	mov	r0, r4
 801b674:	f7f6 fd2a 	bl	80120cc <ucdr_deserialize_uint8_t>
 801b678:	f105 0110 	add.w	r1, r5, #16
 801b67c:	4606      	mov	r6, r0
 801b67e:	4620      	mov	r0, r4
 801b680:	f7f7 fbd6 	bl	8012e30 <ucdr_deserialize_int32_t>
 801b684:	ea07 0708 	and.w	r7, r7, r8
 801b688:	4603      	mov	r3, r0
 801b68a:	4620      	mov	r0, r4
 801b68c:	403e      	ands	r6, r7
 801b68e:	f105 0114 	add.w	r1, r5, #20
 801b692:	461c      	mov	r4, r3
 801b694:	f7f7 f84a 	bl	801272c <ucdr_deserialize_uint32_t>
 801b698:	4034      	ands	r4, r6
 801b69a:	4020      	ands	r0, r4
 801b69c:	b2c0      	uxtb	r0, r0
 801b69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6a2:	bf00      	nop

0801b6a4 <rcl_client_get_rmw_handle>:
 801b6a4:	b118      	cbz	r0, 801b6ae <rcl_client_get_rmw_handle+0xa>
 801b6a6:	6800      	ldr	r0, [r0, #0]
 801b6a8:	b108      	cbz	r0, 801b6ae <rcl_client_get_rmw_handle+0xa>
 801b6aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b6ae:	4770      	bx	lr

0801b6b0 <rcl_send_request>:
 801b6b0:	b570      	push	{r4, r5, r6, lr}
 801b6b2:	b082      	sub	sp, #8
 801b6b4:	b1f8      	cbz	r0, 801b6f6 <rcl_send_request+0x46>
 801b6b6:	4604      	mov	r4, r0
 801b6b8:	6800      	ldr	r0, [r0, #0]
 801b6ba:	b1e0      	cbz	r0, 801b6f6 <rcl_send_request+0x46>
 801b6bc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 801b6c0:	b1cb      	cbz	r3, 801b6f6 <rcl_send_request+0x46>
 801b6c2:	460e      	mov	r6, r1
 801b6c4:	b1e1      	cbz	r1, 801b700 <rcl_send_request+0x50>
 801b6c6:	4615      	mov	r5, r2
 801b6c8:	b1d2      	cbz	r2, 801b700 <rcl_send_request+0x50>
 801b6ca:	2105      	movs	r1, #5
 801b6cc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b6d0:	f002 fa2e 	bl	801db30 <__atomic_load_8>
 801b6d4:	4602      	mov	r2, r0
 801b6d6:	460b      	mov	r3, r1
 801b6d8:	4631      	mov	r1, r6
 801b6da:	e9c5 2300 	strd	r2, r3, [r5]
 801b6de:	6823      	ldr	r3, [r4, #0]
 801b6e0:	462a      	mov	r2, r5
 801b6e2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b6e6:	f7fa fefb 	bl	80164e0 <rmw_send_request>
 801b6ea:	4606      	mov	r6, r0
 801b6ec:	b160      	cbz	r0, 801b708 <rcl_send_request+0x58>
 801b6ee:	2601      	movs	r6, #1
 801b6f0:	4630      	mov	r0, r6
 801b6f2:	b002      	add	sp, #8
 801b6f4:	bd70      	pop	{r4, r5, r6, pc}
 801b6f6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801b6fa:	4630      	mov	r0, r6
 801b6fc:	b002      	add	sp, #8
 801b6fe:	bd70      	pop	{r4, r5, r6, pc}
 801b700:	260b      	movs	r6, #11
 801b702:	4630      	mov	r0, r6
 801b704:	b002      	add	sp, #8
 801b706:	bd70      	pop	{r4, r5, r6, pc}
 801b708:	6820      	ldr	r0, [r4, #0]
 801b70a:	2105      	movs	r1, #5
 801b70c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b710:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801b714:	9100      	str	r1, [sp, #0]
 801b716:	f002 fa77 	bl	801dc08 <__atomic_exchange_8>
 801b71a:	4630      	mov	r0, r6
 801b71c:	b002      	add	sp, #8
 801b71e:	bd70      	pop	{r4, r5, r6, pc}

0801b720 <rcl_take_response>:
 801b720:	b570      	push	{r4, r5, r6, lr}
 801b722:	468e      	mov	lr, r1
 801b724:	b08c      	sub	sp, #48	; 0x30
 801b726:	460c      	mov	r4, r1
 801b728:	4616      	mov	r6, r2
 801b72a:	f10d 0c18 	add.w	ip, sp, #24
 801b72e:	4605      	mov	r5, r0
 801b730:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b738:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b73c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b740:	b35d      	cbz	r5, 801b79a <rcl_take_response+0x7a>
 801b742:	682b      	ldr	r3, [r5, #0]
 801b744:	b34b      	cbz	r3, 801b79a <rcl_take_response+0x7a>
 801b746:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801b74a:	b330      	cbz	r0, 801b79a <rcl_take_response+0x7a>
 801b74c:	b346      	cbz	r6, 801b7a0 <rcl_take_response+0x80>
 801b74e:	2300      	movs	r3, #0
 801b750:	4632      	mov	r2, r6
 801b752:	a902      	add	r1, sp, #8
 801b754:	f88d 3007 	strb.w	r3, [sp, #7]
 801b758:	f10d 0307 	add.w	r3, sp, #7
 801b75c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801b7a8 <rcl_take_response+0x88>
 801b760:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b764:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b768:	f7fa ffc2 	bl	80166f0 <rmw_take_response>
 801b76c:	4605      	mov	r5, r0
 801b76e:	b9c8      	cbnz	r0, 801b7a4 <rcl_take_response+0x84>
 801b770:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801b774:	f240 13f5 	movw	r3, #501	; 0x1f5
 801b778:	2a00      	cmp	r2, #0
 801b77a:	bf08      	it	eq
 801b77c:	461d      	moveq	r5, r3
 801b77e:	f10d 0e18 	add.w	lr, sp, #24
 801b782:	46a4      	mov	ip, r4
 801b784:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b788:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b78c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801b790:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b794:	4628      	mov	r0, r5
 801b796:	b00c      	add	sp, #48	; 0x30
 801b798:	bd70      	pop	{r4, r5, r6, pc}
 801b79a:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 801b79e:	e7ee      	b.n	801b77e <rcl_take_response+0x5e>
 801b7a0:	250b      	movs	r5, #11
 801b7a2:	e7ec      	b.n	801b77e <rcl_take_response+0x5e>
 801b7a4:	2501      	movs	r5, #1
 801b7a6:	e7ea      	b.n	801b77e <rcl_take_response+0x5e>
	...

0801b7b0 <rcl_client_is_valid>:
 801b7b0:	b130      	cbz	r0, 801b7c0 <rcl_client_is_valid+0x10>
 801b7b2:	6800      	ldr	r0, [r0, #0]
 801b7b4:	b120      	cbz	r0, 801b7c0 <rcl_client_is_valid+0x10>
 801b7b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801b7ba:	3800      	subs	r0, #0
 801b7bc:	bf18      	it	ne
 801b7be:	2001      	movne	r0, #1
 801b7c0:	4770      	bx	lr
 801b7c2:	bf00      	nop

0801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>:
 801b7c4:	280b      	cmp	r0, #11
 801b7c6:	dc0d      	bgt.n	801b7e4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	db09      	blt.n	801b7e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b7cc:	280b      	cmp	r0, #11
 801b7ce:	d807      	bhi.n	801b7e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801b7d0:	e8df f000 	tbb	[pc, r0]
 801b7d4:	07060607 	.word	0x07060607
 801b7d8:	06060606 	.word	0x06060606
 801b7dc:	07070606 	.word	0x07070606
 801b7e0:	2001      	movs	r0, #1
 801b7e2:	4770      	bx	lr
 801b7e4:	28cb      	cmp	r0, #203	; 0xcb
 801b7e6:	bf18      	it	ne
 801b7e8:	2001      	movne	r0, #1
 801b7ea:	4770      	bx	lr

0801b7ec <rcl_get_zero_initialized_context>:
 801b7ec:	4a03      	ldr	r2, [pc, #12]	; (801b7fc <rcl_get_zero_initialized_context+0x10>)
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b7f4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	4770      	bx	lr
 801b7fc:	08025bf4 	.word	0x08025bf4

0801b800 <rcl_context_is_valid>:
 801b800:	b118      	cbz	r0, 801b80a <rcl_context_is_valid+0xa>
 801b802:	6840      	ldr	r0, [r0, #4]
 801b804:	3800      	subs	r0, #0
 801b806:	bf18      	it	ne
 801b808:	2001      	movne	r0, #1
 801b80a:	4770      	bx	lr

0801b80c <__cleanup_context>:
 801b80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b810:	4606      	mov	r6, r0
 801b812:	2300      	movs	r3, #0
 801b814:	6800      	ldr	r0, [r0, #0]
 801b816:	6073      	str	r3, [r6, #4]
 801b818:	2800      	cmp	r0, #0
 801b81a:	d049      	beq.n	801b8b0 <__cleanup_context+0xa4>
 801b81c:	6947      	ldr	r7, [r0, #20]
 801b81e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b822:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801b826:	b137      	cbz	r7, 801b836 <__cleanup_context+0x2a>
 801b828:	3014      	adds	r0, #20
 801b82a:	f7f8 f845 	bl	80138b8 <rcl_init_options_fini>
 801b82e:	4607      	mov	r7, r0
 801b830:	2800      	cmp	r0, #0
 801b832:	d144      	bne.n	801b8be <__cleanup_context+0xb2>
 801b834:	6830      	ldr	r0, [r6, #0]
 801b836:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b838:	b143      	cbz	r3, 801b84c <__cleanup_context+0x40>
 801b83a:	3028      	adds	r0, #40	; 0x28
 801b83c:	f7fa fb58 	bl	8015ef0 <rmw_context_fini>
 801b840:	b118      	cbz	r0, 801b84a <__cleanup_context+0x3e>
 801b842:	2f00      	cmp	r7, #0
 801b844:	d03e      	beq.n	801b8c4 <__cleanup_context+0xb8>
 801b846:	f7f9 fe17 	bl	8015478 <rcutils_reset_error>
 801b84a:	6830      	ldr	r0, [r6, #0]
 801b84c:	6a03      	ldr	r3, [r0, #32]
 801b84e:	b1db      	cbz	r3, 801b888 <__cleanup_context+0x7c>
 801b850:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801b854:	2a01      	cmp	r2, #1
 801b856:	f17c 0100 	sbcs.w	r1, ip, #0
 801b85a:	db11      	blt.n	801b880 <__cleanup_context+0x74>
 801b85c:	2400      	movs	r4, #0
 801b85e:	4625      	mov	r5, r4
 801b860:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801b864:	4649      	mov	r1, r9
 801b866:	b1b8      	cbz	r0, 801b898 <__cleanup_context+0x8c>
 801b868:	47c0      	blx	r8
 801b86a:	6833      	ldr	r3, [r6, #0]
 801b86c:	3401      	adds	r4, #1
 801b86e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801b872:	f145 0500 	adc.w	r5, r5, #0
 801b876:	6a1b      	ldr	r3, [r3, #32]
 801b878:	4294      	cmp	r4, r2
 801b87a:	eb75 010c 	sbcs.w	r1, r5, ip
 801b87e:	dbef      	blt.n	801b860 <__cleanup_context+0x54>
 801b880:	4618      	mov	r0, r3
 801b882:	4649      	mov	r1, r9
 801b884:	47c0      	blx	r8
 801b886:	6830      	ldr	r0, [r6, #0]
 801b888:	4649      	mov	r1, r9
 801b88a:	47c0      	blx	r8
 801b88c:	2300      	movs	r3, #0
 801b88e:	4638      	mov	r0, r7
 801b890:	e9c6 3300 	strd	r3, r3, [r6]
 801b894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b898:	3401      	adds	r4, #1
 801b89a:	f145 0500 	adc.w	r5, r5, #0
 801b89e:	4294      	cmp	r4, r2
 801b8a0:	eb75 010c 	sbcs.w	r1, r5, ip
 801b8a4:	dbdc      	blt.n	801b860 <__cleanup_context+0x54>
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	4649      	mov	r1, r9
 801b8aa:	47c0      	blx	r8
 801b8ac:	6830      	ldr	r0, [r6, #0]
 801b8ae:	e7eb      	b.n	801b888 <__cleanup_context+0x7c>
 801b8b0:	4607      	mov	r7, r0
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	4638      	mov	r0, r7
 801b8b6:	e9c6 3300 	strd	r3, r3, [r6]
 801b8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8be:	f7f9 fddb 	bl	8015478 <rcutils_reset_error>
 801b8c2:	e7b7      	b.n	801b834 <__cleanup_context+0x28>
 801b8c4:	f7ff ff7e 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801b8c8:	4607      	mov	r7, r0
 801b8ca:	e7bc      	b.n	801b846 <__cleanup_context+0x3a>

0801b8cc <rcl_get_zero_initialized_guard_condition>:
 801b8cc:	4a03      	ldr	r2, [pc, #12]	; (801b8dc <rcl_get_zero_initialized_guard_condition+0x10>)
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b8d4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b8d8:	4618      	mov	r0, r3
 801b8da:	4770      	bx	lr
 801b8dc:	08025bfc 	.word	0x08025bfc

0801b8e0 <rcl_guard_condition_init_from_rmw>:
 801b8e0:	b082      	sub	sp, #8
 801b8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8e6:	b086      	sub	sp, #24
 801b8e8:	4604      	mov	r4, r0
 801b8ea:	460e      	mov	r6, r1
 801b8ec:	4615      	mov	r5, r2
 801b8ee:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b8f2:	f10d 0e04 	add.w	lr, sp, #4
 801b8f6:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b8fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b8fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b902:	f8dc 3000 	ldr.w	r3, [ip]
 801b906:	a801      	add	r0, sp, #4
 801b908:	f8ce 3000 	str.w	r3, [lr]
 801b90c:	f7f9 fd76 	bl	80153fc <rcutils_allocator_is_valid>
 801b910:	f080 0301 	eor.w	r3, r0, #1
 801b914:	b2db      	uxtb	r3, r3
 801b916:	bb3b      	cbnz	r3, 801b968 <rcl_guard_condition_init_from_rmw+0x88>
 801b918:	b334      	cbz	r4, 801b968 <rcl_guard_condition_init_from_rmw+0x88>
 801b91a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b91e:	f1b8 0f00 	cmp.w	r8, #0
 801b922:	d11a      	bne.n	801b95a <rcl_guard_condition_init_from_rmw+0x7a>
 801b924:	b305      	cbz	r5, 801b968 <rcl_guard_condition_init_from_rmw+0x88>
 801b926:	4628      	mov	r0, r5
 801b928:	f7ff ff6a 	bl	801b800 <rcl_context_is_valid>
 801b92c:	b1f0      	cbz	r0, 801b96c <rcl_guard_condition_init_from_rmw+0x8c>
 801b92e:	9b01      	ldr	r3, [sp, #4]
 801b930:	201c      	movs	r0, #28
 801b932:	9905      	ldr	r1, [sp, #20]
 801b934:	4798      	blx	r3
 801b936:	4607      	mov	r7, r0
 801b938:	6060      	str	r0, [r4, #4]
 801b93a:	b320      	cbz	r0, 801b986 <rcl_guard_condition_init_from_rmw+0xa6>
 801b93c:	b1c6      	cbz	r6, 801b970 <rcl_guard_condition_init_from_rmw+0x90>
 801b93e:	6006      	str	r6, [r0, #0]
 801b940:	f880 8004 	strb.w	r8, [r0, #4]
 801b944:	ac01      	add	r4, sp, #4
 801b946:	f107 0c08 	add.w	ip, r7, #8
 801b94a:	2500      	movs	r5, #0
 801b94c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b94e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b952:	6823      	ldr	r3, [r4, #0]
 801b954:	f8cc 3000 	str.w	r3, [ip]
 801b958:	e000      	b.n	801b95c <rcl_guard_condition_init_from_rmw+0x7c>
 801b95a:	2564      	movs	r5, #100	; 0x64
 801b95c:	4628      	mov	r0, r5
 801b95e:	b006      	add	sp, #24
 801b960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b964:	b002      	add	sp, #8
 801b966:	4770      	bx	lr
 801b968:	250b      	movs	r5, #11
 801b96a:	e7f7      	b.n	801b95c <rcl_guard_condition_init_from_rmw+0x7c>
 801b96c:	2565      	movs	r5, #101	; 0x65
 801b96e:	e7f5      	b.n	801b95c <rcl_guard_condition_init_from_rmw+0x7c>
 801b970:	6828      	ldr	r0, [r5, #0]
 801b972:	3028      	adds	r0, #40	; 0x28
 801b974:	f002 fd56 	bl	801e424 <rmw_create_guard_condition>
 801b978:	6038      	str	r0, [r7, #0]
 801b97a:	6867      	ldr	r7, [r4, #4]
 801b97c:	683e      	ldr	r6, [r7, #0]
 801b97e:	b126      	cbz	r6, 801b98a <rcl_guard_condition_init_from_rmw+0xaa>
 801b980:	2301      	movs	r3, #1
 801b982:	713b      	strb	r3, [r7, #4]
 801b984:	e7de      	b.n	801b944 <rcl_guard_condition_init_from_rmw+0x64>
 801b986:	250a      	movs	r5, #10
 801b988:	e7e8      	b.n	801b95c <rcl_guard_condition_init_from_rmw+0x7c>
 801b98a:	9b02      	ldr	r3, [sp, #8]
 801b98c:	4638      	mov	r0, r7
 801b98e:	9905      	ldr	r1, [sp, #20]
 801b990:	2501      	movs	r5, #1
 801b992:	4798      	blx	r3
 801b994:	6066      	str	r6, [r4, #4]
 801b996:	e7e1      	b.n	801b95c <rcl_guard_condition_init_from_rmw+0x7c>

0801b998 <rcl_guard_condition_fini>:
 801b998:	b570      	push	{r4, r5, r6, lr}
 801b99a:	b082      	sub	sp, #8
 801b99c:	b1f0      	cbz	r0, 801b9dc <rcl_guard_condition_fini+0x44>
 801b99e:	6843      	ldr	r3, [r0, #4]
 801b9a0:	4604      	mov	r4, r0
 801b9a2:	b163      	cbz	r3, 801b9be <rcl_guard_condition_fini+0x26>
 801b9a4:	6818      	ldr	r0, [r3, #0]
 801b9a6:	68de      	ldr	r6, [r3, #12]
 801b9a8:	6999      	ldr	r1, [r3, #24]
 801b9aa:	b160      	cbz	r0, 801b9c6 <rcl_guard_condition_fini+0x2e>
 801b9ac:	791d      	ldrb	r5, [r3, #4]
 801b9ae:	b965      	cbnz	r5, 801b9ca <rcl_guard_condition_fini+0x32>
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	47b0      	blx	r6
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	4628      	mov	r0, r5
 801b9b8:	6063      	str	r3, [r4, #4]
 801b9ba:	b002      	add	sp, #8
 801b9bc:	bd70      	pop	{r4, r5, r6, pc}
 801b9be:	461d      	mov	r5, r3
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	b002      	add	sp, #8
 801b9c4:	bd70      	pop	{r4, r5, r6, pc}
 801b9c6:	4605      	mov	r5, r0
 801b9c8:	e7f2      	b.n	801b9b0 <rcl_guard_condition_fini+0x18>
 801b9ca:	9101      	str	r1, [sp, #4]
 801b9cc:	f002 fd40 	bl	801e450 <rmw_destroy_guard_condition>
 801b9d0:	1e05      	subs	r5, r0, #0
 801b9d2:	6863      	ldr	r3, [r4, #4]
 801b9d4:	9901      	ldr	r1, [sp, #4]
 801b9d6:	bf18      	it	ne
 801b9d8:	2501      	movne	r5, #1
 801b9da:	e7e9      	b.n	801b9b0 <rcl_guard_condition_fini+0x18>
 801b9dc:	250b      	movs	r5, #11
 801b9de:	4628      	mov	r0, r5
 801b9e0:	b002      	add	sp, #8
 801b9e2:	bd70      	pop	{r4, r5, r6, pc}

0801b9e4 <rcl_guard_condition_get_default_options>:
 801b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9e6:	b087      	sub	sp, #28
 801b9e8:	4606      	mov	r6, r0
 801b9ea:	4c0b      	ldr	r4, [pc, #44]	; (801ba18 <rcl_guard_condition_get_default_options+0x34>)
 801b9ec:	4668      	mov	r0, sp
 801b9ee:	f7f9 fcf7 	bl	80153e0 <rcutils_get_default_allocator>
 801b9f2:	46ee      	mov	lr, sp
 801b9f4:	46a4      	mov	ip, r4
 801b9f6:	4625      	mov	r5, r4
 801b9f8:	4634      	mov	r4, r6
 801b9fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b9fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba04:	f8de 7000 	ldr.w	r7, [lr]
 801ba08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ba0a:	4630      	mov	r0, r6
 801ba0c:	f8cc 7000 	str.w	r7, [ip]
 801ba10:	6027      	str	r7, [r4, #0]
 801ba12:	b007      	add	sp, #28
 801ba14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba16:	bf00      	nop
 801ba18:	20016ea8 	.word	0x20016ea8

0801ba1c <rcl_guard_condition_get_rmw_handle>:
 801ba1c:	b110      	cbz	r0, 801ba24 <rcl_guard_condition_get_rmw_handle+0x8>
 801ba1e:	6840      	ldr	r0, [r0, #4]
 801ba20:	b100      	cbz	r0, 801ba24 <rcl_guard_condition_get_rmw_handle+0x8>
 801ba22:	6800      	ldr	r0, [r0, #0]
 801ba24:	4770      	bx	lr
 801ba26:	bf00      	nop

0801ba28 <rcl_init>:
 801ba28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba2c:	1e05      	subs	r5, r0, #0
 801ba2e:	b09e      	sub	sp, #120	; 0x78
 801ba30:	460e      	mov	r6, r1
 801ba32:	4690      	mov	r8, r2
 801ba34:	461f      	mov	r7, r3
 801ba36:	f340 809f 	ble.w	801bb78 <rcl_init+0x150>
 801ba3a:	2900      	cmp	r1, #0
 801ba3c:	f000 809f 	beq.w	801bb7e <rcl_init+0x156>
 801ba40:	f1a1 0e04 	sub.w	lr, r1, #4
 801ba44:	f04f 0c00 	mov.w	ip, #0
 801ba48:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 801ba4c:	f10c 0c01 	add.w	ip, ip, #1
 801ba50:	2c00      	cmp	r4, #0
 801ba52:	f000 8094 	beq.w	801bb7e <rcl_init+0x156>
 801ba56:	4565      	cmp	r5, ip
 801ba58:	d1f6      	bne.n	801ba48 <rcl_init+0x20>
 801ba5a:	f1b8 0f00 	cmp.w	r8, #0
 801ba5e:	f000 808e 	beq.w	801bb7e <rcl_init+0x156>
 801ba62:	f8d8 4000 	ldr.w	r4, [r8]
 801ba66:	2c00      	cmp	r4, #0
 801ba68:	f000 8089 	beq.w	801bb7e <rcl_init+0x156>
 801ba6c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801ba70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba76:	6823      	ldr	r3, [r4, #0]
 801ba78:	a819      	add	r0, sp, #100	; 0x64
 801ba7a:	f8cc 3000 	str.w	r3, [ip]
 801ba7e:	f7f9 fcbd 	bl	80153fc <rcutils_allocator_is_valid>
 801ba82:	f080 0001 	eor.w	r0, r0, #1
 801ba86:	b2c0      	uxtb	r0, r0
 801ba88:	2800      	cmp	r0, #0
 801ba8a:	d178      	bne.n	801bb7e <rcl_init+0x156>
 801ba8c:	2f00      	cmp	r7, #0
 801ba8e:	d076      	beq.n	801bb7e <rcl_init+0x156>
 801ba90:	683b      	ldr	r3, [r7, #0]
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d178      	bne.n	801bb88 <rcl_init+0x160>
 801ba96:	2178      	movs	r1, #120	; 0x78
 801ba98:	2001      	movs	r0, #1
 801ba9a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801ba9e:	4798      	blx	r3
 801baa0:	4604      	mov	r4, r0
 801baa2:	6038      	str	r0, [r7, #0]
 801baa4:	2800      	cmp	r0, #0
 801baa6:	f000 80b6 	beq.w	801bc16 <rcl_init+0x1ee>
 801baaa:	a802      	add	r0, sp, #8
 801baac:	f002 fa4c 	bl	801df48 <rmw_get_zero_initialized_context>
 801bab0:	a902      	add	r1, sp, #8
 801bab2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801bab6:	2250      	movs	r2, #80	; 0x50
 801bab8:	f005 fc01 	bl	80212be <memcpy>
 801babc:	ac19      	add	r4, sp, #100	; 0x64
 801babe:	f8d7 e000 	ldr.w	lr, [r7]
 801bac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bac4:	46f4      	mov	ip, lr
 801bac6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801baca:	6823      	ldr	r3, [r4, #0]
 801bacc:	f10e 0114 	add.w	r1, lr, #20
 801bad0:	4640      	mov	r0, r8
 801bad2:	f8cc 3000 	str.w	r3, [ip]
 801bad6:	f7f7 ff19 	bl	801390c <rcl_init_options_copy>
 801bada:	4604      	mov	r4, r0
 801badc:	2800      	cmp	r0, #0
 801bade:	d144      	bne.n	801bb6a <rcl_init+0x142>
 801bae0:	f8d7 9000 	ldr.w	r9, [r7]
 801bae4:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801bae8:	f8c9 0020 	str.w	r0, [r9, #32]
 801baec:	f8c9 5018 	str.w	r5, [r9, #24]
 801baf0:	f8c9 801c 	str.w	r8, [r9, #28]
 801baf4:	2d00      	cmp	r5, #0
 801baf6:	d04e      	beq.n	801bb96 <rcl_init+0x16e>
 801baf8:	2e00      	cmp	r6, #0
 801bafa:	d04c      	beq.n	801bb96 <rcl_init+0x16e>
 801bafc:	2104      	movs	r1, #4
 801bafe:	4628      	mov	r0, r5
 801bb00:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801bb04:	4798      	blx	r3
 801bb06:	f8c9 0020 	str.w	r0, [r9, #32]
 801bb0a:	f8d7 9000 	ldr.w	r9, [r7]
 801bb0e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801bb12:	46ca      	mov	sl, r9
 801bb14:	b343      	cbz	r3, 801bb68 <rcl_init+0x140>
 801bb16:	2d01      	cmp	r5, #1
 801bb18:	f178 0300 	sbcs.w	r3, r8, #0
 801bb1c:	db3b      	blt.n	801bb96 <rcl_init+0x16e>
 801bb1e:	2400      	movs	r4, #0
 801bb20:	3e04      	subs	r6, #4
 801bb22:	46a1      	mov	r9, r4
 801bb24:	e00b      	b.n	801bb3e <rcl_init+0x116>
 801bb26:	6831      	ldr	r1, [r6, #0]
 801bb28:	f005 fbc9 	bl	80212be <memcpy>
 801bb2c:	3401      	adds	r4, #1
 801bb2e:	f149 0900 	adc.w	r9, r9, #0
 801bb32:	45c8      	cmp	r8, r9
 801bb34:	bf08      	it	eq
 801bb36:	42a5      	cmpeq	r5, r4
 801bb38:	d02b      	beq.n	801bb92 <rcl_init+0x16a>
 801bb3a:	f8d7 a000 	ldr.w	sl, [r7]
 801bb3e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801bb42:	f7e4 fbdd 	bl	8000300 <strlen>
 801bb46:	1c42      	adds	r2, r0, #1
 801bb48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bb4a:	4610      	mov	r0, r2
 801bb4c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801bb4e:	f8da a020 	ldr.w	sl, [sl, #32]
 801bb52:	9201      	str	r2, [sp, #4]
 801bb54:	4798      	blx	r3
 801bb56:	683b      	ldr	r3, [r7, #0]
 801bb58:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801bb5c:	6a1b      	ldr	r3, [r3, #32]
 801bb5e:	9a01      	ldr	r2, [sp, #4]
 801bb60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bb64:	2800      	cmp	r0, #0
 801bb66:	d1de      	bne.n	801bb26 <rcl_init+0xfe>
 801bb68:	240a      	movs	r4, #10
 801bb6a:	4638      	mov	r0, r7
 801bb6c:	f7ff fe4e 	bl	801b80c <__cleanup_context>
 801bb70:	4620      	mov	r0, r4
 801bb72:	b01e      	add	sp, #120	; 0x78
 801bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb78:	2900      	cmp	r1, #0
 801bb7a:	f43f af6e 	beq.w	801ba5a <rcl_init+0x32>
 801bb7e:	240b      	movs	r4, #11
 801bb80:	4620      	mov	r0, r4
 801bb82:	b01e      	add	sp, #120	; 0x78
 801bb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb88:	2464      	movs	r4, #100	; 0x64
 801bb8a:	4620      	mov	r0, r4
 801bb8c:	b01e      	add	sp, #120	; 0x78
 801bb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb92:	f8d7 9000 	ldr.w	r9, [r7]
 801bb96:	4926      	ldr	r1, [pc, #152]	; (801bc30 <rcl_init+0x208>)
 801bb98:	680b      	ldr	r3, [r1, #0]
 801bb9a:	3301      	adds	r3, #1
 801bb9c:	d036      	beq.n	801bc0c <rcl_init+0x1e4>
 801bb9e:	461a      	mov	r2, r3
 801bba0:	2400      	movs	r4, #0
 801bba2:	600b      	str	r3, [r1, #0]
 801bba4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801bba8:	607b      	str	r3, [r7, #4]
 801bbaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801bbac:	3301      	adds	r3, #1
 801bbae:	e9c0 2406 	strd	r2, r4, [r0, #24]
 801bbb2:	d034      	beq.n	801bc1e <rcl_init+0x1f6>
 801bbb4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801bbb8:	b93b      	cbnz	r3, 801bbca <rcl_init+0x1a2>
 801bbba:	3030      	adds	r0, #48	; 0x30
 801bbbc:	f000 f83a 	bl	801bc34 <rcl_get_localhost_only>
 801bbc0:	4604      	mov	r4, r0
 801bbc2:	2800      	cmp	r0, #0
 801bbc4:	d1d1      	bne.n	801bb6a <rcl_init+0x142>
 801bbc6:	683b      	ldr	r3, [r7, #0]
 801bbc8:	6958      	ldr	r0, [r3, #20]
 801bbca:	aa18      	add	r2, sp, #96	; 0x60
 801bbcc:	a917      	add	r1, sp, #92	; 0x5c
 801bbce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801bbd0:	f000 fc38 	bl	801c444 <rcl_validate_enclave_name>
 801bbd4:	4604      	mov	r4, r0
 801bbd6:	2800      	cmp	r0, #0
 801bbd8:	d1c7      	bne.n	801bb6a <rcl_init+0x142>
 801bbda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bbdc:	b9eb      	cbnz	r3, 801bc1a <rcl_init+0x1f2>
 801bbde:	6839      	ldr	r1, [r7, #0]
 801bbe0:	694b      	ldr	r3, [r1, #20]
 801bbe2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801bbe6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801bbe8:	f000 f9c8 	bl	801bf7c <rcl_get_security_options_from_environment>
 801bbec:	4604      	mov	r4, r0
 801bbee:	2800      	cmp	r0, #0
 801bbf0:	d1bb      	bne.n	801bb6a <rcl_init+0x142>
 801bbf2:	6839      	ldr	r1, [r7, #0]
 801bbf4:	6948      	ldr	r0, [r1, #20]
 801bbf6:	3128      	adds	r1, #40	; 0x28
 801bbf8:	3018      	adds	r0, #24
 801bbfa:	f7fa f843 	bl	8015c84 <rmw_init>
 801bbfe:	4604      	mov	r4, r0
 801bc00:	2800      	cmp	r0, #0
 801bc02:	d0bd      	beq.n	801bb80 <rcl_init+0x158>
 801bc04:	f7ff fdde 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bc08:	4604      	mov	r4, r0
 801bc0a:	e7ae      	b.n	801bb6a <rcl_init+0x142>
 801bc0c:	2201      	movs	r2, #1
 801bc0e:	461c      	mov	r4, r3
 801bc10:	600a      	str	r2, [r1, #0]
 801bc12:	4613      	mov	r3, r2
 801bc14:	e7c6      	b.n	801bba4 <rcl_init+0x17c>
 801bc16:	240a      	movs	r4, #10
 801bc18:	e7b2      	b.n	801bb80 <rcl_init+0x158>
 801bc1a:	2401      	movs	r4, #1
 801bc1c:	e7a5      	b.n	801bb6a <rcl_init+0x142>
 801bc1e:	3024      	adds	r0, #36	; 0x24
 801bc20:	f003 fbc6 	bl	801f3b0 <rcl_get_default_domain_id>
 801bc24:	4604      	mov	r4, r0
 801bc26:	2800      	cmp	r0, #0
 801bc28:	d19f      	bne.n	801bb6a <rcl_init+0x142>
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	6958      	ldr	r0, [r3, #20]
 801bc2e:	e7c1      	b.n	801bbb4 <rcl_init+0x18c>
 801bc30:	20016ebc 	.word	0x20016ebc

0801bc34 <rcl_get_localhost_only>:
 801bc34:	b510      	push	{r4, lr}
 801bc36:	2300      	movs	r3, #0
 801bc38:	b082      	sub	sp, #8
 801bc3a:	9301      	str	r3, [sp, #4]
 801bc3c:	b1b8      	cbz	r0, 801bc6e <rcl_get_localhost_only+0x3a>
 801bc3e:	4604      	mov	r4, r0
 801bc40:	a901      	add	r1, sp, #4
 801bc42:	480c      	ldr	r0, [pc, #48]	; (801bc74 <rcl_get_localhost_only+0x40>)
 801bc44:	f7f9 fbe8 	bl	8015418 <rcutils_get_env>
 801bc48:	b110      	cbz	r0, 801bc50 <rcl_get_localhost_only+0x1c>
 801bc4a:	2001      	movs	r0, #1
 801bc4c:	b002      	add	sp, #8
 801bc4e:	bd10      	pop	{r4, pc}
 801bc50:	9b01      	ldr	r3, [sp, #4]
 801bc52:	b113      	cbz	r3, 801bc5a <rcl_get_localhost_only+0x26>
 801bc54:	781a      	ldrb	r2, [r3, #0]
 801bc56:	2a31      	cmp	r2, #49	; 0x31
 801bc58:	d004      	beq.n	801bc64 <rcl_get_localhost_only+0x30>
 801bc5a:	2302      	movs	r3, #2
 801bc5c:	2000      	movs	r0, #0
 801bc5e:	7023      	strb	r3, [r4, #0]
 801bc60:	b002      	add	sp, #8
 801bc62:	bd10      	pop	{r4, pc}
 801bc64:	785b      	ldrb	r3, [r3, #1]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d1f7      	bne.n	801bc5a <rcl_get_localhost_only+0x26>
 801bc6a:	2301      	movs	r3, #1
 801bc6c:	e7f6      	b.n	801bc5c <rcl_get_localhost_only+0x28>
 801bc6e:	200b      	movs	r0, #11
 801bc70:	b002      	add	sp, #8
 801bc72:	bd10      	pop	{r4, pc}
 801bc74:	08025c04 	.word	0x08025c04

0801bc78 <rcl_node_resolve_name>:
 801bc78:	b082      	sub	sp, #8
 801bc7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc7e:	b091      	sub	sp, #68	; 0x44
 801bc80:	ac1a      	add	r4, sp, #104	; 0x68
 801bc82:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801bc86:	e884 000c 	stmia.w	r4, {r2, r3}
 801bc8a:	2800      	cmp	r0, #0
 801bc8c:	d03d      	beq.n	801bd0a <rcl_node_resolve_name+0x92>
 801bc8e:	460c      	mov	r4, r1
 801bc90:	4605      	mov	r5, r0
 801bc92:	f7f8 f81d 	bl	8013cd0 <rcl_node_get_options>
 801bc96:	2800      	cmp	r0, #0
 801bc98:	d03a      	beq.n	801bd10 <rcl_node_resolve_name+0x98>
 801bc9a:	4628      	mov	r0, r5
 801bc9c:	f7f8 f808 	bl	8013cb0 <rcl_node_get_name>
 801bca0:	4606      	mov	r6, r0
 801bca2:	4628      	mov	r0, r5
 801bca4:	ad0b      	add	r5, sp, #44	; 0x2c
 801bca6:	f7f8 f80b 	bl	8013cc0 <rcl_node_get_namespace>
 801bcaa:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801bcae:	4607      	mov	r7, r0
 801bcb0:	46ac      	mov	ip, r5
 801bcb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bcb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bcba:	f8de 3000 	ldr.w	r3, [lr]
 801bcbe:	f8cc 3000 	str.w	r3, [ip]
 801bcc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bcc4:	b30b      	cbz	r3, 801bd0a <rcl_node_resolve_name+0x92>
 801bcc6:	4689      	mov	r9, r1
 801bcc8:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801bccc:	f002 f80e 	bl	801dcec <rcutils_get_zero_initialized_string_map>
 801bcd0:	ab10      	add	r3, sp, #64	; 0x40
 801bcd2:	9008      	str	r0, [sp, #32]
 801bcd4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801bcd8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bcdc:	2100      	movs	r1, #0
 801bcde:	a808      	add	r0, sp, #32
 801bce0:	e895 000c 	ldmia.w	r5, {r2, r3}
 801bce4:	f002 f878 	bl	801ddd8 <rcutils_string_map_init>
 801bce8:	4683      	mov	fp, r0
 801bcea:	b1a0      	cbz	r0, 801bd16 <rcl_node_resolve_name+0x9e>
 801bcec:	f7f9 fbac 	bl	8015448 <rcutils_get_error_string>
 801bcf0:	f7f9 fbc2 	bl	8015478 <rcutils_reset_error>
 801bcf4:	f1bb 0f0a 	cmp.w	fp, #10
 801bcf8:	bf18      	it	ne
 801bcfa:	f04f 0b01 	movne.w	fp, #1
 801bcfe:	4658      	mov	r0, fp
 801bd00:	b011      	add	sp, #68	; 0x44
 801bd02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd06:	b002      	add	sp, #8
 801bd08:	4770      	bx	lr
 801bd0a:	f04f 0b0b 	mov.w	fp, #11
 801bd0e:	e7f6      	b.n	801bcfe <rcl_node_resolve_name+0x86>
 801bd10:	f04f 0b01 	mov.w	fp, #1
 801bd14:	e7f3      	b.n	801bcfe <rcl_node_resolve_name+0x86>
 801bd16:	9009      	str	r0, [sp, #36]	; 0x24
 801bd18:	9007      	str	r0, [sp, #28]
 801bd1a:	a808      	add	r0, sp, #32
 801bd1c:	f003 fcdc 	bl	801f6d8 <rcl_get_default_topic_name_substitutions>
 801bd20:	4683      	mov	fp, r0
 801bd22:	b180      	cbz	r0, 801bd46 <rcl_node_resolve_name+0xce>
 801bd24:	280a      	cmp	r0, #10
 801bd26:	a808      	add	r0, sp, #32
 801bd28:	bf18      	it	ne
 801bd2a:	f04f 0b01 	movne.w	fp, #1
 801bd2e:	f002 f893 	bl	801de58 <rcutils_string_map_fini>
 801bd32:	4604      	mov	r4, r0
 801bd34:	2800      	cmp	r0, #0
 801bd36:	d15b      	bne.n	801bdf0 <rcl_node_resolve_name+0x178>
 801bd38:	4651      	mov	r1, sl
 801bd3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd3c:	47c8      	blx	r9
 801bd3e:	4651      	mov	r1, sl
 801bd40:	4620      	mov	r0, r4
 801bd42:	47c8      	blx	r9
 801bd44:	e7db      	b.n	801bcfe <rcl_node_resolve_name+0x86>
 801bd46:	ab09      	add	r3, sp, #36	; 0x24
 801bd48:	46ec      	mov	ip, sp
 801bd4a:	9305      	str	r3, [sp, #20]
 801bd4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd52:	682b      	ldr	r3, [r5, #0]
 801bd54:	463a      	mov	r2, r7
 801bd56:	4631      	mov	r1, r6
 801bd58:	4620      	mov	r0, r4
 801bd5a:	f8cc 3000 	str.w	r3, [ip]
 801bd5e:	ab08      	add	r3, sp, #32
 801bd60:	f003 fb5a 	bl	801f418 <rcl_expand_topic_name>
 801bd64:	4683      	mov	fp, r0
 801bd66:	b9d8      	cbnz	r0, 801bda0 <rcl_node_resolve_name+0x128>
 801bd68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bd6a:	4602      	mov	r2, r0
 801bd6c:	9009      	str	r0, [sp, #36]	; 0x24
 801bd6e:	a90a      	add	r1, sp, #40	; 0x28
 801bd70:	4620      	mov	r0, r4
 801bd72:	f002 f985 	bl	801e080 <rmw_validate_full_topic_name>
 801bd76:	bb50      	cbnz	r0, 801bdce <rcl_node_resolve_name+0x156>
 801bd78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801bd7a:	2d00      	cmp	r5, #0
 801bd7c:	d140      	bne.n	801be00 <rcl_node_resolve_name+0x188>
 801bd7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd80:	a808      	add	r0, sp, #32
 801bd82:	601c      	str	r4, [r3, #0]
 801bd84:	f002 f868 	bl	801de58 <rcutils_string_map_fini>
 801bd88:	4683      	mov	fp, r0
 801bd8a:	2800      	cmp	r0, #0
 801bd8c:	d043      	beq.n	801be16 <rcl_node_resolve_name+0x19e>
 801bd8e:	f7f9 fb5b 	bl	8015448 <rcutils_get_error_string>
 801bd92:	46a8      	mov	r8, r5
 801bd94:	f04f 0b01 	mov.w	fp, #1
 801bd98:	462c      	mov	r4, r5
 801bd9a:	f7f9 fb6d 	bl	8015478 <rcutils_reset_error>
 801bd9e:	e00a      	b.n	801bdb6 <rcl_node_resolve_name+0x13e>
 801bda0:	2867      	cmp	r0, #103	; 0x67
 801bda2:	bf14      	ite	ne
 801bda4:	f04f 0800 	movne.w	r8, #0
 801bda8:	f008 0801 	andeq.w	r8, r8, #1
 801bdac:	9c07      	ldr	r4, [sp, #28]
 801bdae:	a808      	add	r0, sp, #32
 801bdb0:	f002 f852 	bl	801de58 <rcutils_string_map_fini>
 801bdb4:	bb50      	cbnz	r0, 801be0c <rcl_node_resolve_name+0x194>
 801bdb6:	4651      	mov	r1, sl
 801bdb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bdba:	47c8      	blx	r9
 801bdbc:	4651      	mov	r1, sl
 801bdbe:	4620      	mov	r0, r4
 801bdc0:	47c8      	blx	r9
 801bdc2:	f1b8 0f00 	cmp.w	r8, #0
 801bdc6:	bf18      	it	ne
 801bdc8:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801bdcc:	e797      	b.n	801bcfe <rcl_node_resolve_name+0x86>
 801bdce:	f7f9 fb3b 	bl	8015448 <rcutils_get_error_string>
 801bdd2:	f7f9 fb51 	bl	8015478 <rcutils_reset_error>
 801bdd6:	a808      	add	r0, sp, #32
 801bdd8:	f002 f83e 	bl	801de58 <rcutils_string_map_fini>
 801bddc:	b998      	cbnz	r0, 801be06 <rcl_node_resolve_name+0x18e>
 801bdde:	4651      	mov	r1, sl
 801bde0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bde2:	47c8      	blx	r9
 801bde4:	4651      	mov	r1, sl
 801bde6:	4620      	mov	r0, r4
 801bde8:	f04f 0b01 	mov.w	fp, #1
 801bdec:	47c8      	blx	r9
 801bdee:	e786      	b.n	801bcfe <rcl_node_resolve_name+0x86>
 801bdf0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801bdf4:	f7f9 fb28 	bl	8015448 <rcutils_get_error_string>
 801bdf8:	f7f9 fb3e 	bl	8015478 <rcutils_reset_error>
 801bdfc:	4644      	mov	r4, r8
 801bdfe:	e7da      	b.n	801bdb6 <rcl_node_resolve_name+0x13e>
 801be00:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801be04:	e7d3      	b.n	801bdae <rcl_node_resolve_name+0x136>
 801be06:	46d8      	mov	r8, fp
 801be08:	f04f 0b01 	mov.w	fp, #1
 801be0c:	f7f9 fb1c 	bl	8015448 <rcutils_get_error_string>
 801be10:	f7f9 fb32 	bl	8015478 <rcutils_reset_error>
 801be14:	e7cf      	b.n	801bdb6 <rcl_node_resolve_name+0x13e>
 801be16:	4651      	mov	r1, sl
 801be18:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be1a:	47c8      	blx	r9
 801be1c:	4651      	mov	r1, sl
 801be1e:	4658      	mov	r0, fp
 801be20:	47c8      	blx	r9
 801be22:	e76c      	b.n	801bcfe <rcl_node_resolve_name+0x86>

0801be24 <exact_match_lookup>:
 801be24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be26:	f102 0708 	add.w	r7, r2, #8
 801be2a:	460b      	mov	r3, r1
 801be2c:	b085      	sub	sp, #20
 801be2e:	4614      	mov	r4, r2
 801be30:	4606      	mov	r6, r0
 801be32:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801be36:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be3a:	4618      	mov	r0, r3
 801be3c:	4919      	ldr	r1, [pc, #100]	; (801bea4 <exact_match_lookup+0x80>)
 801be3e:	e894 000c 	ldmia.w	r4, {r2, r3}
 801be42:	f001 ff1b 	bl	801dc7c <rcutils_join_path>
 801be46:	7833      	ldrb	r3, [r6, #0]
 801be48:	4605      	mov	r5, r0
 801be4a:	2b2f      	cmp	r3, #47	; 0x2f
 801be4c:	d023      	beq.n	801be96 <exact_match_lookup+0x72>
 801be4e:	f104 030c 	add.w	r3, r4, #12
 801be52:	e893 0003 	ldmia.w	r3, {r0, r1}
 801be56:	e88d 0003 	stmia.w	sp, {r0, r1}
 801be5a:	1c70      	adds	r0, r6, #1
 801be5c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801be60:	f001 ff12 	bl	801dc88 <rcutils_to_native_path>
 801be64:	4606      	mov	r6, r0
 801be66:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801be6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be6e:	4631      	mov	r1, r6
 801be70:	4628      	mov	r0, r5
 801be72:	e894 000c 	ldmia.w	r4, {r2, r3}
 801be76:	f001 ff01 	bl	801dc7c <rcutils_join_path>
 801be7a:	4603      	mov	r3, r0
 801be7c:	4630      	mov	r0, r6
 801be7e:	6862      	ldr	r2, [r4, #4]
 801be80:	461e      	mov	r6, r3
 801be82:	6921      	ldr	r1, [r4, #16]
 801be84:	4790      	blx	r2
 801be86:	4628      	mov	r0, r5
 801be88:	4635      	mov	r5, r6
 801be8a:	6863      	ldr	r3, [r4, #4]
 801be8c:	6921      	ldr	r1, [r4, #16]
 801be8e:	4798      	blx	r3
 801be90:	4628      	mov	r0, r5
 801be92:	b005      	add	sp, #20
 801be94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be96:	7873      	ldrb	r3, [r6, #1]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d1d8      	bne.n	801be4e <exact_match_lookup+0x2a>
 801be9c:	4628      	mov	r0, r5
 801be9e:	b005      	add	sp, #20
 801bea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bea2:	bf00      	nop
 801bea4:	08025c54 	.word	0x08025c54

0801bea8 <rcl_get_secure_root>:
 801bea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801beac:	b085      	sub	sp, #20
 801beae:	b168      	cbz	r0, 801becc <rcl_get_secure_root+0x24>
 801beb0:	4607      	mov	r7, r0
 801beb2:	4608      	mov	r0, r1
 801beb4:	460c      	mov	r4, r1
 801beb6:	f7f9 faa1 	bl	80153fc <rcutils_allocator_is_valid>
 801beba:	b138      	cbz	r0, 801becc <rcl_get_secure_root+0x24>
 801bebc:	2300      	movs	r3, #0
 801bebe:	482d      	ldr	r0, [pc, #180]	; (801bf74 <rcl_get_secure_root+0xcc>)
 801bec0:	a903      	add	r1, sp, #12
 801bec2:	9303      	str	r3, [sp, #12]
 801bec4:	f7f9 faa8 	bl	8015418 <rcutils_get_env>
 801bec8:	4605      	mov	r5, r0
 801beca:	b120      	cbz	r0, 801bed6 <rcl_get_secure_root+0x2e>
 801becc:	2500      	movs	r5, #0
 801bece:	4628      	mov	r0, r5
 801bed0:	b005      	add	sp, #20
 801bed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bed6:	9b03      	ldr	r3, [sp, #12]
 801bed8:	781a      	ldrb	r2, [r3, #0]
 801beda:	2a00      	cmp	r2, #0
 801bedc:	d0f6      	beq.n	801becc <rcl_get_secure_root+0x24>
 801bede:	f104 090c 	add.w	r9, r4, #12
 801bee2:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bee6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801beea:	4618      	mov	r0, r3
 801beec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bef0:	f7f9 fc18 	bl	8015724 <rcutils_strdup>
 801bef4:	4680      	mov	r8, r0
 801bef6:	2800      	cmp	r0, #0
 801bef8:	d0e8      	beq.n	801becc <rcl_get_secure_root+0x24>
 801befa:	a903      	add	r1, sp, #12
 801befc:	481e      	ldr	r0, [pc, #120]	; (801bf78 <rcl_get_secure_root+0xd0>)
 801befe:	9503      	str	r5, [sp, #12]
 801bf00:	f7f9 fa8a 	bl	8015418 <rcutils_get_env>
 801bf04:	b160      	cbz	r0, 801bf20 <rcl_get_secure_root+0x78>
 801bf06:	2600      	movs	r6, #0
 801bf08:	4630      	mov	r0, r6
 801bf0a:	6863      	ldr	r3, [r4, #4]
 801bf0c:	6921      	ldr	r1, [r4, #16]
 801bf0e:	4798      	blx	r3
 801bf10:	4640      	mov	r0, r8
 801bf12:	6863      	ldr	r3, [r4, #4]
 801bf14:	6921      	ldr	r1, [r4, #16]
 801bf16:	4798      	blx	r3
 801bf18:	4628      	mov	r0, r5
 801bf1a:	b005      	add	sp, #20
 801bf1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf20:	9b03      	ldr	r3, [sp, #12]
 801bf22:	781e      	ldrb	r6, [r3, #0]
 801bf24:	b1f6      	cbz	r6, 801bf64 <rcl_get_secure_root+0xbc>
 801bf26:	e899 0003 	ldmia.w	r9, {r0, r1}
 801bf2a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bf2e:	4618      	mov	r0, r3
 801bf30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801bf34:	f7f9 fbf6 	bl	8015724 <rcutils_strdup>
 801bf38:	4606      	mov	r6, r0
 801bf3a:	2800      	cmp	r0, #0
 801bf3c:	d0e3      	beq.n	801bf06 <rcl_get_secure_root+0x5e>
 801bf3e:	4622      	mov	r2, r4
 801bf40:	4641      	mov	r1, r8
 801bf42:	f7ff ff6f 	bl	801be24 <exact_match_lookup>
 801bf46:	4605      	mov	r5, r0
 801bf48:	2d00      	cmp	r5, #0
 801bf4a:	d0dd      	beq.n	801bf08 <rcl_get_secure_root+0x60>
 801bf4c:	4628      	mov	r0, r5
 801bf4e:	f001 fe93 	bl	801dc78 <rcutils_is_directory>
 801bf52:	4603      	mov	r3, r0
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d1d7      	bne.n	801bf08 <rcl_get_secure_root+0x60>
 801bf58:	4628      	mov	r0, r5
 801bf5a:	6921      	ldr	r1, [r4, #16]
 801bf5c:	461d      	mov	r5, r3
 801bf5e:	6863      	ldr	r3, [r4, #4]
 801bf60:	4798      	blx	r3
 801bf62:	e7d1      	b.n	801bf08 <rcl_get_secure_root+0x60>
 801bf64:	4622      	mov	r2, r4
 801bf66:	4638      	mov	r0, r7
 801bf68:	4641      	mov	r1, r8
 801bf6a:	f7ff ff5b 	bl	801be24 <exact_match_lookup>
 801bf6e:	4605      	mov	r5, r0
 801bf70:	e7ea      	b.n	801bf48 <rcl_get_secure_root+0xa0>
 801bf72:	bf00      	nop
 801bf74:	08025c60 	.word	0x08025c60
 801bf78:	08025c78 	.word	0x08025c78

0801bf7c <rcl_get_security_options_from_environment>:
 801bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf80:	b082      	sub	sp, #8
 801bf82:	2300      	movs	r3, #0
 801bf84:	4606      	mov	r6, r0
 801bf86:	460f      	mov	r7, r1
 801bf88:	4821      	ldr	r0, [pc, #132]	; (801c010 <rcl_get_security_options_from_environment+0x94>)
 801bf8a:	a901      	add	r1, sp, #4
 801bf8c:	4690      	mov	r8, r2
 801bf8e:	9301      	str	r3, [sp, #4]
 801bf90:	f7f9 fa42 	bl	8015418 <rcutils_get_env>
 801bf94:	b120      	cbz	r0, 801bfa0 <rcl_get_security_options_from_environment+0x24>
 801bf96:	2501      	movs	r5, #1
 801bf98:	4628      	mov	r0, r5
 801bf9a:	b002      	add	sp, #8
 801bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfa0:	4604      	mov	r4, r0
 801bfa2:	491c      	ldr	r1, [pc, #112]	; (801c014 <rcl_get_security_options_from_environment+0x98>)
 801bfa4:	9801      	ldr	r0, [sp, #4]
 801bfa6:	f7e4 f94b 	bl	8000240 <strcmp>
 801bfaa:	4605      	mov	r5, r0
 801bfac:	b9f0      	cbnz	r0, 801bfec <rcl_get_security_options_from_environment+0x70>
 801bfae:	9001      	str	r0, [sp, #4]
 801bfb0:	f1b8 0f00 	cmp.w	r8, #0
 801bfb4:	d021      	beq.n	801bffa <rcl_get_security_options_from_environment+0x7e>
 801bfb6:	a901      	add	r1, sp, #4
 801bfb8:	4817      	ldr	r0, [pc, #92]	; (801c018 <rcl_get_security_options_from_environment+0x9c>)
 801bfba:	f7f9 fa2d 	bl	8015418 <rcutils_get_env>
 801bfbe:	2800      	cmp	r0, #0
 801bfc0:	d1e9      	bne.n	801bf96 <rcl_get_security_options_from_environment+0x1a>
 801bfc2:	4916      	ldr	r1, [pc, #88]	; (801c01c <rcl_get_security_options_from_environment+0xa0>)
 801bfc4:	9801      	ldr	r0, [sp, #4]
 801bfc6:	f7e4 f93b 	bl	8000240 <strcmp>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	4639      	mov	r1, r7
 801bfce:	4630      	mov	r0, r6
 801bfd0:	fab3 f383 	clz	r3, r3
 801bfd4:	095b      	lsrs	r3, r3, #5
 801bfd6:	f888 3000 	strb.w	r3, [r8]
 801bfda:	f7ff ff65 	bl	801bea8 <rcl_get_secure_root>
 801bfde:	b170      	cbz	r0, 801bffe <rcl_get_security_options_from_environment+0x82>
 801bfe0:	f8c8 0004 	str.w	r0, [r8, #4]
 801bfe4:	4628      	mov	r0, r5
 801bfe6:	b002      	add	sp, #8
 801bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfec:	4625      	mov	r5, r4
 801bfee:	f888 4000 	strb.w	r4, [r8]
 801bff2:	4628      	mov	r0, r5
 801bff4:	b002      	add	sp, #8
 801bff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bffa:	250b      	movs	r5, #11
 801bffc:	e7cc      	b.n	801bf98 <rcl_get_security_options_from_environment+0x1c>
 801bffe:	f898 5000 	ldrb.w	r5, [r8]
 801c002:	f1a5 0501 	sub.w	r5, r5, #1
 801c006:	fab5 f585 	clz	r5, r5
 801c00a:	096d      	lsrs	r5, r5, #5
 801c00c:	e7c4      	b.n	801bf98 <rcl_get_security_options_from_environment+0x1c>
 801c00e:	bf00      	nop
 801c010:	08025c18 	.word	0x08025c18
 801c014:	08025c2c 	.word	0x08025c2c
 801c018:	08025c34 	.word	0x08025c34
 801c01c:	08025c4c 	.word	0x08025c4c

0801c020 <rcl_get_system_time>:
 801c020:	4608      	mov	r0, r1
 801c022:	f7f9 bbbd 	b.w	80157a0 <rcutils_system_time_now>
 801c026:	bf00      	nop

0801c028 <rcl_get_steady_time>:
 801c028:	4608      	mov	r0, r1
 801c02a:	f7f9 bbdf 	b.w	80157ec <rcutils_steady_time_now>
 801c02e:	bf00      	nop

0801c030 <rcl_get_ros_time>:
 801c030:	7a03      	ldrb	r3, [r0, #8]
 801c032:	b510      	push	{r4, lr}
 801c034:	460c      	mov	r4, r1
 801c036:	b143      	cbz	r3, 801c04a <rcl_get_ros_time+0x1a>
 801c038:	2105      	movs	r1, #5
 801c03a:	f001 fd79 	bl	801db30 <__atomic_load_8>
 801c03e:	4602      	mov	r2, r0
 801c040:	460b      	mov	r3, r1
 801c042:	2000      	movs	r0, #0
 801c044:	e9c4 2300 	strd	r2, r3, [r4]
 801c048:	bd10      	pop	{r4, pc}
 801c04a:	4608      	mov	r0, r1
 801c04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c050:	f7f9 bba6 	b.w	80157a0 <rcutils_system_time_now>

0801c054 <rcl_clock_init>:
 801c054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c056:	4605      	mov	r5, r0
 801c058:	4610      	mov	r0, r2
 801c05a:	4614      	mov	r4, r2
 801c05c:	460e      	mov	r6, r1
 801c05e:	f7f9 f9cd 	bl	80153fc <rcutils_allocator_is_valid>
 801c062:	b128      	cbz	r0, 801c070 <rcl_clock_init+0x1c>
 801c064:	2d03      	cmp	r5, #3
 801c066:	d803      	bhi.n	801c070 <rcl_clock_init+0x1c>
 801c068:	e8df f005 	tbb	[pc, r5]
 801c06c:	0659301f 	.word	0x0659301f
 801c070:	f04f 0c0b 	mov.w	ip, #11
 801c074:	4660      	mov	r0, ip
 801c076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c078:	2c00      	cmp	r4, #0
 801c07a:	d0f9      	beq.n	801c070 <rcl_clock_init+0x1c>
 801c07c:	fab6 f386 	clz	r3, r6
 801c080:	095b      	lsrs	r3, r3, #5
 801c082:	2e00      	cmp	r6, #0
 801c084:	d0f4      	beq.n	801c070 <rcl_clock_init+0x1c>
 801c086:	6133      	str	r3, [r6, #16]
 801c088:	469c      	mov	ip, r3
 801c08a:	f106 0514 	add.w	r5, r6, #20
 801c08e:	4f32      	ldr	r7, [pc, #200]	; (801c158 <rcl_clock_init+0x104>)
 801c090:	f04f 0e03 	mov.w	lr, #3
 801c094:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801c098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c09a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c09c:	6823      	ldr	r3, [r4, #0]
 801c09e:	4660      	mov	r0, ip
 801c0a0:	602b      	str	r3, [r5, #0]
 801c0a2:	60f7      	str	r7, [r6, #12]
 801c0a4:	f886 e000 	strb.w	lr, [r6]
 801c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0aa:	2e00      	cmp	r6, #0
 801c0ac:	d0e0      	beq.n	801c070 <rcl_clock_init+0x1c>
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	f106 0514 	add.w	r5, r6, #20
 801c0b4:	7033      	strb	r3, [r6, #0]
 801c0b6:	469c      	mov	ip, r3
 801c0b8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801c0bc:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801c0c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c0c4:	6823      	ldr	r3, [r4, #0]
 801c0c6:	4660      	mov	r0, ip
 801c0c8:	602b      	str	r3, [r5, #0]
 801c0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0cc:	2c00      	cmp	r4, #0
 801c0ce:	d0cf      	beq.n	801c070 <rcl_clock_init+0x1c>
 801c0d0:	fab6 f586 	clz	r5, r6
 801c0d4:	096d      	lsrs	r5, r5, #5
 801c0d6:	2e00      	cmp	r6, #0
 801c0d8:	d0ca      	beq.n	801c070 <rcl_clock_init+0x1c>
 801c0da:	46a6      	mov	lr, r4
 801c0dc:	7035      	strb	r5, [r6, #0]
 801c0de:	f106 0c14 	add.w	ip, r6, #20
 801c0e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c0e6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801c0ea:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801c0ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0f2:	f8de 3000 	ldr.w	r3, [lr]
 801c0f6:	2010      	movs	r0, #16
 801c0f8:	f8cc 3000 	str.w	r3, [ip]
 801c0fc:	6823      	ldr	r3, [r4, #0]
 801c0fe:	6921      	ldr	r1, [r4, #16]
 801c100:	4798      	blx	r3
 801c102:	6130      	str	r0, [r6, #16]
 801c104:	b320      	cbz	r0, 801c150 <rcl_clock_init+0xfc>
 801c106:	2200      	movs	r2, #0
 801c108:	2300      	movs	r3, #0
 801c10a:	46ac      	mov	ip, r5
 801c10c:	7205      	strb	r5, [r0, #8]
 801c10e:	e9c0 2300 	strd	r2, r3, [r0]
 801c112:	4a12      	ldr	r2, [pc, #72]	; (801c15c <rcl_clock_init+0x108>)
 801c114:	2301      	movs	r3, #1
 801c116:	4660      	mov	r0, ip
 801c118:	60f2      	str	r2, [r6, #12]
 801c11a:	7033      	strb	r3, [r6, #0]
 801c11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c11e:	2c00      	cmp	r4, #0
 801c120:	d0a6      	beq.n	801c070 <rcl_clock_init+0x1c>
 801c122:	fab6 f386 	clz	r3, r6
 801c126:	095b      	lsrs	r3, r3, #5
 801c128:	2e00      	cmp	r6, #0
 801c12a:	d0a1      	beq.n	801c070 <rcl_clock_init+0x1c>
 801c12c:	6133      	str	r3, [r6, #16]
 801c12e:	469c      	mov	ip, r3
 801c130:	f106 0514 	add.w	r5, r6, #20
 801c134:	f8df e028 	ldr.w	lr, [pc, #40]	; 801c160 <rcl_clock_init+0x10c>
 801c138:	2702      	movs	r7, #2
 801c13a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801c13e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c142:	6823      	ldr	r3, [r4, #0]
 801c144:	4660      	mov	r0, ip
 801c146:	602b      	str	r3, [r5, #0]
 801c148:	f8c6 e00c 	str.w	lr, [r6, #12]
 801c14c:	7037      	strb	r7, [r6, #0]
 801c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c150:	f04f 0c0a 	mov.w	ip, #10
 801c154:	e78e      	b.n	801c074 <rcl_clock_init+0x20>
 801c156:	bf00      	nop
 801c158:	0801c029 	.word	0x0801c029
 801c15c:	0801c031 	.word	0x0801c031
 801c160:	0801c021 	.word	0x0801c021

0801c164 <rcl_clock_get_now>:
 801c164:	b140      	cbz	r0, 801c178 <rcl_clock_get_now+0x14>
 801c166:	b139      	cbz	r1, 801c178 <rcl_clock_get_now+0x14>
 801c168:	7803      	ldrb	r3, [r0, #0]
 801c16a:	b11b      	cbz	r3, 801c174 <rcl_clock_get_now+0x10>
 801c16c:	68c3      	ldr	r3, [r0, #12]
 801c16e:	b10b      	cbz	r3, 801c174 <rcl_clock_get_now+0x10>
 801c170:	6900      	ldr	r0, [r0, #16]
 801c172:	4718      	bx	r3
 801c174:	2001      	movs	r0, #1
 801c176:	4770      	bx	lr
 801c178:	200b      	movs	r0, #11
 801c17a:	4770      	bx	lr

0801c17c <rcl_timer_call>:
 801c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c180:	b087      	sub	sp, #28
 801c182:	2800      	cmp	r0, #0
 801c184:	d06c      	beq.n	801c260 <rcl_timer_call+0xe4>
 801c186:	6803      	ldr	r3, [r0, #0]
 801c188:	4604      	mov	r4, r0
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d062      	beq.n	801c254 <rcl_timer_call+0xd8>
 801c18e:	f3bf 8f5b 	dmb	ish
 801c192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c196:	f3bf 8f5b 	dmb	ish
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d14f      	bne.n	801c23e <rcl_timer_call+0xc2>
 801c19e:	6803      	ldr	r3, [r0, #0]
 801c1a0:	a904      	add	r1, sp, #16
 801c1a2:	6818      	ldr	r0, [r3, #0]
 801c1a4:	f7ff ffde 	bl	801c164 <rcl_clock_get_now>
 801c1a8:	4605      	mov	r5, r0
 801c1aa:	2800      	cmp	r0, #0
 801c1ac:	d149      	bne.n	801c242 <rcl_timer_call+0xc6>
 801c1ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	db49      	blt.n	801c24a <rcl_timer_call+0xce>
 801c1b6:	2605      	movs	r6, #5
 801c1b8:	6820      	ldr	r0, [r4, #0]
 801c1ba:	9600      	str	r6, [sp, #0]
 801c1bc:	3020      	adds	r0, #32
 801c1be:	f001 fd23 	bl	801dc08 <__atomic_exchange_8>
 801c1c2:	6823      	ldr	r3, [r4, #0]
 801c1c4:	4680      	mov	r8, r0
 801c1c6:	f3bf 8f5b 	dmb	ish
 801c1ca:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801c1ce:	f3bf 8f5b 	dmb	ish
 801c1d2:	6820      	ldr	r0, [r4, #0]
 801c1d4:	4689      	mov	r9, r1
 801c1d6:	4631      	mov	r1, r6
 801c1d8:	3028      	adds	r0, #40	; 0x28
 801c1da:	f001 fca9 	bl	801db30 <__atomic_load_8>
 801c1de:	460f      	mov	r7, r1
 801c1e0:	4631      	mov	r1, r6
 801c1e2:	4606      	mov	r6, r0
 801c1e4:	6820      	ldr	r0, [r4, #0]
 801c1e6:	3018      	adds	r0, #24
 801c1e8:	f001 fca2 	bl	801db30 <__atomic_load_8>
 801c1ec:	4602      	mov	r2, r0
 801c1ee:	9804      	ldr	r0, [sp, #16]
 801c1f0:	460b      	mov	r3, r1
 801c1f2:	18b6      	adds	r6, r6, r2
 801c1f4:	f8dd c014 	ldr.w	ip, [sp, #20]
 801c1f8:	4692      	mov	sl, r2
 801c1fa:	eb47 0701 	adc.w	r7, r7, r1
 801c1fe:	4286      	cmp	r6, r0
 801c200:	eb77 010c 	sbcs.w	r1, r7, ip
 801c204:	da04      	bge.n	801c210 <rcl_timer_call+0x94>
 801c206:	ea53 0102 	orrs.w	r1, r3, r2
 801c20a:	d12e      	bne.n	801c26a <rcl_timer_call+0xee>
 801c20c:	4606      	mov	r6, r0
 801c20e:	4667      	mov	r7, ip
 801c210:	6820      	ldr	r0, [r4, #0]
 801c212:	2105      	movs	r1, #5
 801c214:	4632      	mov	r2, r6
 801c216:	463b      	mov	r3, r7
 801c218:	3028      	adds	r0, #40	; 0x28
 801c21a:	9100      	str	r1, [sp, #0]
 801c21c:	f001 fcbe 	bl	801db9c <__atomic_store_8>
 801c220:	f1bb 0f00 	cmp.w	fp, #0
 801c224:	d00d      	beq.n	801c242 <rcl_timer_call+0xc6>
 801c226:	9a04      	ldr	r2, [sp, #16]
 801c228:	4620      	mov	r0, r4
 801c22a:	9b05      	ldr	r3, [sp, #20]
 801c22c:	ebb2 0208 	subs.w	r2, r2, r8
 801c230:	eb63 0309 	sbc.w	r3, r3, r9
 801c234:	47d8      	blx	fp
 801c236:	4628      	mov	r0, r5
 801c238:	b007      	add	sp, #28
 801c23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c23e:	f240 3521 	movw	r5, #801	; 0x321
 801c242:	4628      	mov	r0, r5
 801c244:	b007      	add	sp, #28
 801c246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c24a:	2501      	movs	r5, #1
 801c24c:	4628      	mov	r0, r5
 801c24e:	b007      	add	sp, #28
 801c250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c254:	f44f 7548 	mov.w	r5, #800	; 0x320
 801c258:	4628      	mov	r0, r5
 801c25a:	b007      	add	sp, #28
 801c25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c260:	250b      	movs	r5, #11
 801c262:	4628      	mov	r0, r5
 801c264:	b007      	add	sp, #28
 801c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c26a:	1b80      	subs	r0, r0, r6
 801c26c:	eb6c 0107 	sbc.w	r1, ip, r7
 801c270:	3801      	subs	r0, #1
 801c272:	f161 0100 	sbc.w	r1, r1, #0
 801c276:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801c27a:	f7e4 fa05 	bl	8000688 <__aeabi_ldivmod>
 801c27e:	9b02      	ldr	r3, [sp, #8]
 801c280:	3001      	adds	r0, #1
 801c282:	f141 0100 	adc.w	r1, r1, #0
 801c286:	fb00 f303 	mul.w	r3, r0, r3
 801c28a:	fb01 330a 	mla	r3, r1, sl, r3
 801c28e:	fba0 0a0a 	umull	r0, sl, r0, sl
 801c292:	1986      	adds	r6, r0, r6
 801c294:	4453      	add	r3, sl
 801c296:	eb43 0707 	adc.w	r7, r3, r7
 801c29a:	e7b9      	b.n	801c210 <rcl_timer_call+0x94>

0801c29c <rcl_timer_is_ready>:
 801c29c:	b570      	push	{r4, r5, r6, lr}
 801c29e:	b082      	sub	sp, #8
 801c2a0:	b380      	cbz	r0, 801c304 <rcl_timer_is_ready+0x68>
 801c2a2:	6803      	ldr	r3, [r0, #0]
 801c2a4:	4604      	mov	r4, r0
 801c2a6:	b38b      	cbz	r3, 801c30c <rcl_timer_is_ready+0x70>
 801c2a8:	460d      	mov	r5, r1
 801c2aa:	b359      	cbz	r1, 801c304 <rcl_timer_is_ready+0x68>
 801c2ac:	f3bf 8f5b 	dmb	ish
 801c2b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c2b4:	f3bf 8f5b 	dmb	ish
 801c2b8:	b953      	cbnz	r3, 801c2d0 <rcl_timer_is_ready+0x34>
 801c2ba:	6803      	ldr	r3, [r0, #0]
 801c2bc:	4669      	mov	r1, sp
 801c2be:	6818      	ldr	r0, [r3, #0]
 801c2c0:	f7ff ff50 	bl	801c164 <rcl_clock_get_now>
 801c2c4:	4606      	mov	r6, r0
 801c2c6:	b148      	cbz	r0, 801c2dc <rcl_timer_is_ready+0x40>
 801c2c8:	f240 3321 	movw	r3, #801	; 0x321
 801c2cc:	4298      	cmp	r0, r3
 801c2ce:	d102      	bne.n	801c2d6 <rcl_timer_is_ready+0x3a>
 801c2d0:	2300      	movs	r3, #0
 801c2d2:	461e      	mov	r6, r3
 801c2d4:	702b      	strb	r3, [r5, #0]
 801c2d6:	4630      	mov	r0, r6
 801c2d8:	b002      	add	sp, #8
 801c2da:	bd70      	pop	{r4, r5, r6, pc}
 801c2dc:	6820      	ldr	r0, [r4, #0]
 801c2de:	2105      	movs	r1, #5
 801c2e0:	3028      	adds	r0, #40	; 0x28
 801c2e2:	f001 fc25 	bl	801db30 <__atomic_load_8>
 801c2e6:	9b00      	ldr	r3, [sp, #0]
 801c2e8:	1ac0      	subs	r0, r0, r3
 801c2ea:	9b01      	ldr	r3, [sp, #4]
 801c2ec:	eb61 0103 	sbc.w	r1, r1, r3
 801c2f0:	2801      	cmp	r0, #1
 801c2f2:	4630      	mov	r0, r6
 801c2f4:	f171 0300 	sbcs.w	r3, r1, #0
 801c2f8:	bfb4      	ite	lt
 801c2fa:	2301      	movlt	r3, #1
 801c2fc:	2300      	movge	r3, #0
 801c2fe:	702b      	strb	r3, [r5, #0]
 801c300:	b002      	add	sp, #8
 801c302:	bd70      	pop	{r4, r5, r6, pc}
 801c304:	260b      	movs	r6, #11
 801c306:	4630      	mov	r0, r6
 801c308:	b002      	add	sp, #8
 801c30a:	bd70      	pop	{r4, r5, r6, pc}
 801c30c:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c310:	e7e1      	b.n	801c2d6 <rcl_timer_is_ready+0x3a>
 801c312:	bf00      	nop

0801c314 <rcl_timer_get_time_until_next_call>:
 801c314:	b570      	push	{r4, r5, r6, lr}
 801c316:	b082      	sub	sp, #8
 801c318:	b330      	cbz	r0, 801c368 <rcl_timer_get_time_until_next_call+0x54>
 801c31a:	6803      	ldr	r3, [r0, #0]
 801c31c:	4604      	mov	r4, r0
 801c31e:	b33b      	cbz	r3, 801c370 <rcl_timer_get_time_until_next_call+0x5c>
 801c320:	460d      	mov	r5, r1
 801c322:	b309      	cbz	r1, 801c368 <rcl_timer_get_time_until_next_call+0x54>
 801c324:	f3bf 8f5b 	dmb	ish
 801c328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801c32c:	f3bf 8f5b 	dmb	ish
 801c330:	b9ab      	cbnz	r3, 801c35e <rcl_timer_get_time_until_next_call+0x4a>
 801c332:	6803      	ldr	r3, [r0, #0]
 801c334:	4669      	mov	r1, sp
 801c336:	6818      	ldr	r0, [r3, #0]
 801c338:	f7ff ff14 	bl	801c164 <rcl_clock_get_now>
 801c33c:	4606      	mov	r6, r0
 801c33e:	b958      	cbnz	r0, 801c358 <rcl_timer_get_time_until_next_call+0x44>
 801c340:	6820      	ldr	r0, [r4, #0]
 801c342:	2105      	movs	r1, #5
 801c344:	3028      	adds	r0, #40	; 0x28
 801c346:	f001 fbf3 	bl	801db30 <__atomic_load_8>
 801c34a:	9b00      	ldr	r3, [sp, #0]
 801c34c:	1ac0      	subs	r0, r0, r3
 801c34e:	9b01      	ldr	r3, [sp, #4]
 801c350:	eb61 0103 	sbc.w	r1, r1, r3
 801c354:	6028      	str	r0, [r5, #0]
 801c356:	6069      	str	r1, [r5, #4]
 801c358:	4630      	mov	r0, r6
 801c35a:	b002      	add	sp, #8
 801c35c:	bd70      	pop	{r4, r5, r6, pc}
 801c35e:	f240 3621 	movw	r6, #801	; 0x321
 801c362:	4630      	mov	r0, r6
 801c364:	b002      	add	sp, #8
 801c366:	bd70      	pop	{r4, r5, r6, pc}
 801c368:	260b      	movs	r6, #11
 801c36a:	4630      	mov	r0, r6
 801c36c:	b002      	add	sp, #8
 801c36e:	bd70      	pop	{r4, r5, r6, pc}
 801c370:	f44f 7648 	mov.w	r6, #800	; 0x320
 801c374:	e7f0      	b.n	801c358 <rcl_timer_get_time_until_next_call+0x44>
 801c376:	bf00      	nop

0801c378 <rcl_timer_get_guard_condition>:
 801c378:	b130      	cbz	r0, 801c388 <rcl_timer_get_guard_condition+0x10>
 801c37a:	6800      	ldr	r0, [r0, #0]
 801c37c:	b120      	cbz	r0, 801c388 <rcl_timer_get_guard_condition+0x10>
 801c37e:	68c3      	ldr	r3, [r0, #12]
 801c380:	b10b      	cbz	r3, 801c386 <rcl_timer_get_guard_condition+0xe>
 801c382:	3008      	adds	r0, #8
 801c384:	4770      	bx	lr
 801c386:	4618      	mov	r0, r3
 801c388:	4770      	bx	lr
 801c38a:	bf00      	nop

0801c38c <rcl_validate_enclave_name_with_size>:
 801c38c:	2800      	cmp	r0, #0
 801c38e:	d049      	beq.n	801c424 <rcl_validate_enclave_name_with_size+0x98>
 801c390:	b570      	push	{r4, r5, r6, lr}
 801c392:	4615      	mov	r5, r2
 801c394:	b0c2      	sub	sp, #264	; 0x108
 801c396:	b19a      	cbz	r2, 801c3c0 <rcl_validate_enclave_name_with_size+0x34>
 801c398:	461e      	mov	r6, r3
 801c39a:	466a      	mov	r2, sp
 801c39c:	ab01      	add	r3, sp, #4
 801c39e:	460c      	mov	r4, r1
 801c3a0:	f7f9 fa8a 	bl	80158b8 <rmw_validate_namespace_with_size>
 801c3a4:	4684      	mov	ip, r0
 801c3a6:	b9b8      	cbnz	r0, 801c3d8 <rcl_validate_enclave_name_with_size+0x4c>
 801c3a8:	9900      	ldr	r1, [sp, #0]
 801c3aa:	b171      	cbz	r1, 801c3ca <rcl_validate_enclave_name_with_size+0x3e>
 801c3ac:	2907      	cmp	r1, #7
 801c3ae:	d019      	beq.n	801c3e4 <rcl_validate_enclave_name_with_size+0x58>
 801c3b0:	1e4b      	subs	r3, r1, #1
 801c3b2:	2b05      	cmp	r3, #5
 801c3b4:	d83a      	bhi.n	801c42c <rcl_validate_enclave_name_with_size+0xa0>
 801c3b6:	e8df f003 	tbb	[pc, r3]
 801c3ba:	2926      	.short	0x2926
 801c3bc:	1d322f2c 	.word	0x1d322f2c
 801c3c0:	f04f 0c0b 	mov.w	ip, #11
 801c3c4:	4660      	mov	r0, ip
 801c3c6:	b042      	add	sp, #264	; 0x108
 801c3c8:	bd70      	pop	{r4, r5, r6, pc}
 801c3ca:	2907      	cmp	r1, #7
 801c3cc:	d00a      	beq.n	801c3e4 <rcl_validate_enclave_name_with_size+0x58>
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	4660      	mov	r0, ip
 801c3d2:	602b      	str	r3, [r5, #0]
 801c3d4:	b042      	add	sp, #264	; 0x108
 801c3d6:	bd70      	pop	{r4, r5, r6, pc}
 801c3d8:	f7ff f9f4 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801c3dc:	4684      	mov	ip, r0
 801c3de:	4660      	mov	r0, ip
 801c3e0:	b042      	add	sp, #264	; 0x108
 801c3e2:	bd70      	pop	{r4, r5, r6, pc}
 801c3e4:	2cff      	cmp	r4, #255	; 0xff
 801c3e6:	d9f2      	bls.n	801c3ce <rcl_validate_enclave_name_with_size+0x42>
 801c3e8:	6029      	str	r1, [r5, #0]
 801c3ea:	2e00      	cmp	r6, #0
 801c3ec:	d0ea      	beq.n	801c3c4 <rcl_validate_enclave_name_with_size+0x38>
 801c3ee:	23fe      	movs	r3, #254	; 0xfe
 801c3f0:	6033      	str	r3, [r6, #0]
 801c3f2:	e7e7      	b.n	801c3c4 <rcl_validate_enclave_name_with_size+0x38>
 801c3f4:	2306      	movs	r3, #6
 801c3f6:	602b      	str	r3, [r5, #0]
 801c3f8:	2e00      	cmp	r6, #0
 801c3fa:	d0e3      	beq.n	801c3c4 <rcl_validate_enclave_name_with_size+0x38>
 801c3fc:	9b01      	ldr	r3, [sp, #4]
 801c3fe:	4660      	mov	r0, ip
 801c400:	6033      	str	r3, [r6, #0]
 801c402:	b042      	add	sp, #264	; 0x108
 801c404:	bd70      	pop	{r4, r5, r6, pc}
 801c406:	2301      	movs	r3, #1
 801c408:	602b      	str	r3, [r5, #0]
 801c40a:	e7f5      	b.n	801c3f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c40c:	2302      	movs	r3, #2
 801c40e:	602b      	str	r3, [r5, #0]
 801c410:	e7f2      	b.n	801c3f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c412:	2303      	movs	r3, #3
 801c414:	602b      	str	r3, [r5, #0]
 801c416:	e7ef      	b.n	801c3f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c418:	2304      	movs	r3, #4
 801c41a:	602b      	str	r3, [r5, #0]
 801c41c:	e7ec      	b.n	801c3f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c41e:	2305      	movs	r3, #5
 801c420:	602b      	str	r3, [r5, #0]
 801c422:	e7e9      	b.n	801c3f8 <rcl_validate_enclave_name_with_size+0x6c>
 801c424:	f04f 0c0b 	mov.w	ip, #11
 801c428:	4660      	mov	r0, ip
 801c42a:	4770      	bx	lr
 801c42c:	460b      	mov	r3, r1
 801c42e:	4a04      	ldr	r2, [pc, #16]	; (801c440 <rcl_validate_enclave_name_with_size+0xb4>)
 801c430:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c434:	a802      	add	r0, sp, #8
 801c436:	f7f9 f927 	bl	8015688 <rcutils_snprintf>
 801c43a:	f04f 0c01 	mov.w	ip, #1
 801c43e:	e7c1      	b.n	801c3c4 <rcl_validate_enclave_name_with_size+0x38>
 801c440:	08025c98 	.word	0x08025c98

0801c444 <rcl_validate_enclave_name>:
 801c444:	b168      	cbz	r0, 801c462 <rcl_validate_enclave_name+0x1e>
 801c446:	b570      	push	{r4, r5, r6, lr}
 801c448:	460d      	mov	r5, r1
 801c44a:	4616      	mov	r6, r2
 801c44c:	4604      	mov	r4, r0
 801c44e:	f7e3 ff57 	bl	8000300 <strlen>
 801c452:	4633      	mov	r3, r6
 801c454:	4601      	mov	r1, r0
 801c456:	462a      	mov	r2, r5
 801c458:	4620      	mov	r0, r4
 801c45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c45e:	f7ff bf95 	b.w	801c38c <rcl_validate_enclave_name_with_size>
 801c462:	200b      	movs	r0, #11
 801c464:	4770      	bx	lr
 801c466:	bf00      	nop

0801c468 <rcl_get_zero_initialized_wait_set>:
 801c468:	b510      	push	{r4, lr}
 801c46a:	4c08      	ldr	r4, [pc, #32]	; (801c48c <rcl_get_zero_initialized_wait_set+0x24>)
 801c46c:	4686      	mov	lr, r0
 801c46e:	4684      	mov	ip, r0
 801c470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c472:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c47c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c47e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c482:	6823      	ldr	r3, [r4, #0]
 801c484:	4670      	mov	r0, lr
 801c486:	f8cc 3000 	str.w	r3, [ip]
 801c48a:	bd10      	pop	{r4, pc}
 801c48c:	08025cf8 	.word	0x08025cf8

0801c490 <rcl_wait_set_is_valid>:
 801c490:	b118      	cbz	r0, 801c49a <rcl_wait_set_is_valid+0xa>
 801c492:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c494:	3800      	subs	r0, #0
 801c496:	bf18      	it	ne
 801c498:	2001      	movne	r0, #1
 801c49a:	4770      	bx	lr

0801c49c <rcl_wait_set_fini>:
 801c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4a0:	b082      	sub	sp, #8
 801c4a2:	2800      	cmp	r0, #0
 801c4a4:	f000 8095 	beq.w	801c5d2 <rcl_wait_set_fini+0x136>
 801c4a8:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801c4aa:	4604      	mov	r4, r0
 801c4ac:	2e00      	cmp	r6, #0
 801c4ae:	f000 808c 	beq.w	801c5ca <rcl_wait_set_fini+0x12e>
 801c4b2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801c4b4:	f002 f9c0 	bl	801e838 <rmw_destroy_wait_set>
 801c4b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c4ba:	1e06      	subs	r6, r0, #0
 801c4bc:	bf18      	it	ne
 801c4be:	f44f 7661 	movne.w	r6, #900	; 0x384
 801c4c2:	2d00      	cmp	r5, #0
 801c4c4:	f000 8081 	beq.w	801c5ca <rcl_wait_set_fini+0x12e>
 801c4c8:	2700      	movs	r7, #0
 801c4ca:	6820      	ldr	r0, [r4, #0]
 801c4cc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c4d0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c4d2:	6067      	str	r7, [r4, #4]
 801c4d4:	602f      	str	r7, [r5, #0]
 801c4d6:	b120      	cbz	r0, 801c4e2 <rcl_wait_set_fini+0x46>
 801c4d8:	9101      	str	r1, [sp, #4]
 801c4da:	47c0      	blx	r8
 801c4dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c4de:	9901      	ldr	r1, [sp, #4]
 801c4e0:	6027      	str	r7, [r4, #0]
 801c4e2:	68a8      	ldr	r0, [r5, #8]
 801c4e4:	b120      	cbz	r0, 801c4f0 <rcl_wait_set_fini+0x54>
 801c4e6:	47c0      	blx	r8
 801c4e8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801c4f0:	f04f 0800 	mov.w	r8, #0
 801c4f4:	68a0      	ldr	r0, [r4, #8]
 801c4f6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c4f8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c4fa:	f8c4 800c 	str.w	r8, [r4, #12]
 801c4fe:	f8c5 800c 	str.w	r8, [r5, #12]
 801c502:	b128      	cbz	r0, 801c510 <rcl_wait_set_fini+0x74>
 801c504:	47b8      	blx	r7
 801c506:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c508:	f8c4 8008 	str.w	r8, [r4, #8]
 801c50c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c50e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c510:	f04f 0800 	mov.w	r8, #0
 801c514:	6968      	ldr	r0, [r5, #20]
 801c516:	f8c5 8010 	str.w	r8, [r5, #16]
 801c51a:	b128      	cbz	r0, 801c528 <rcl_wait_set_fini+0x8c>
 801c51c:	47b8      	blx	r7
 801c51e:	f8c5 8014 	str.w	r8, [r5, #20]
 801c522:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c524:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c526:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c528:	f04f 0800 	mov.w	r8, #0
 801c52c:	6920      	ldr	r0, [r4, #16]
 801c52e:	f8c4 8014 	str.w	r8, [r4, #20]
 801c532:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801c536:	b128      	cbz	r0, 801c544 <rcl_wait_set_fini+0xa8>
 801c538:	47b8      	blx	r7
 801c53a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c53c:	f8c4 8010 	str.w	r8, [r4, #16]
 801c540:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801c542:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c544:	f04f 0800 	mov.w	r8, #0
 801c548:	69a0      	ldr	r0, [r4, #24]
 801c54a:	f8c4 801c 	str.w	r8, [r4, #28]
 801c54e:	f8c5 8018 	str.w	r8, [r5, #24]
 801c552:	b128      	cbz	r0, 801c560 <rcl_wait_set_fini+0xc4>
 801c554:	9101      	str	r1, [sp, #4]
 801c556:	47b8      	blx	r7
 801c558:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c55a:	9901      	ldr	r1, [sp, #4]
 801c55c:	f8c4 8018 	str.w	r8, [r4, #24]
 801c560:	6a28      	ldr	r0, [r5, #32]
 801c562:	b120      	cbz	r0, 801c56e <rcl_wait_set_fini+0xd2>
 801c564:	47b8      	blx	r7
 801c566:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c568:	2300      	movs	r3, #0
 801c56a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801c56e:	2700      	movs	r7, #0
 801c570:	6a20      	ldr	r0, [r4, #32]
 801c572:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c576:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c578:	6267      	str	r7, [r4, #36]	; 0x24
 801c57a:	626f      	str	r7, [r5, #36]	; 0x24
 801c57c:	b120      	cbz	r0, 801c588 <rcl_wait_set_fini+0xec>
 801c57e:	9101      	str	r1, [sp, #4]
 801c580:	47c0      	blx	r8
 801c582:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c584:	9901      	ldr	r1, [sp, #4]
 801c586:	6227      	str	r7, [r4, #32]
 801c588:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801c58a:	b120      	cbz	r0, 801c596 <rcl_wait_set_fini+0xfa>
 801c58c:	47c0      	blx	r8
 801c58e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c590:	2300      	movs	r3, #0
 801c592:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801c596:	2700      	movs	r7, #0
 801c598:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c59a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801c59e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c5a0:	62e7      	str	r7, [r4, #44]	; 0x2c
 801c5a2:	632f      	str	r7, [r5, #48]	; 0x30
 801c5a4:	b120      	cbz	r0, 801c5b0 <rcl_wait_set_fini+0x114>
 801c5a6:	9101      	str	r1, [sp, #4]
 801c5a8:	47c0      	blx	r8
 801c5aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c5ac:	9901      	ldr	r1, [sp, #4]
 801c5ae:	62a7      	str	r7, [r4, #40]	; 0x28
 801c5b0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c5b2:	b120      	cbz	r0, 801c5be <rcl_wait_set_fini+0x122>
 801c5b4:	47c0      	blx	r8
 801c5b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801c5be:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801c5c0:	4628      	mov	r0, r5
 801c5c2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801c5c4:	4798      	blx	r3
 801c5c6:	2300      	movs	r3, #0
 801c5c8:	6323      	str	r3, [r4, #48]	; 0x30
 801c5ca:	4630      	mov	r0, r6
 801c5cc:	b002      	add	sp, #8
 801c5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5d2:	260b      	movs	r6, #11
 801c5d4:	4630      	mov	r0, r6
 801c5d6:	b002      	add	sp, #8
 801c5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c5dc <rcl_wait_set_add_subscription>:
 801c5dc:	b318      	cbz	r0, 801c626 <rcl_wait_set_add_subscription+0x4a>
 801c5de:	b538      	push	{r3, r4, r5, lr}
 801c5e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c5e2:	4604      	mov	r4, r0
 801c5e4:	b30b      	cbz	r3, 801c62a <rcl_wait_set_add_subscription+0x4e>
 801c5e6:	b319      	cbz	r1, 801c630 <rcl_wait_set_add_subscription+0x54>
 801c5e8:	681d      	ldr	r5, [r3, #0]
 801c5ea:	6840      	ldr	r0, [r0, #4]
 801c5ec:	4285      	cmp	r5, r0
 801c5ee:	d217      	bcs.n	801c620 <rcl_wait_set_add_subscription+0x44>
 801c5f0:	1c68      	adds	r0, r5, #1
 801c5f2:	6018      	str	r0, [r3, #0]
 801c5f4:	6823      	ldr	r3, [r4, #0]
 801c5f6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801c5fa:	b102      	cbz	r2, 801c5fe <rcl_wait_set_add_subscription+0x22>
 801c5fc:	6015      	str	r5, [r2, #0]
 801c5fe:	4608      	mov	r0, r1
 801c600:	f7f7 ff14 	bl	801442c <rcl_subscription_get_rmw_handle>
 801c604:	b150      	cbz	r0, 801c61c <rcl_wait_set_add_subscription+0x40>
 801c606:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c608:	6842      	ldr	r2, [r0, #4]
 801c60a:	2000      	movs	r0, #0
 801c60c:	689b      	ldr	r3, [r3, #8]
 801c60e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c612:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c614:	6853      	ldr	r3, [r2, #4]
 801c616:	3301      	adds	r3, #1
 801c618:	6053      	str	r3, [r2, #4]
 801c61a:	bd38      	pop	{r3, r4, r5, pc}
 801c61c:	2001      	movs	r0, #1
 801c61e:	bd38      	pop	{r3, r4, r5, pc}
 801c620:	f240 3086 	movw	r0, #902	; 0x386
 801c624:	bd38      	pop	{r3, r4, r5, pc}
 801c626:	200b      	movs	r0, #11
 801c628:	4770      	bx	lr
 801c62a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c62e:	bd38      	pop	{r3, r4, r5, pc}
 801c630:	200b      	movs	r0, #11
 801c632:	bd38      	pop	{r3, r4, r5, pc}

0801c634 <rcl_wait_set_clear>:
 801c634:	2800      	cmp	r0, #0
 801c636:	d074      	beq.n	801c722 <rcl_wait_set_clear+0xee>
 801c638:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c63a:	b510      	push	{r4, lr}
 801c63c:	4604      	mov	r4, r0
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d071      	beq.n	801c726 <rcl_wait_set_clear+0xf2>
 801c642:	6800      	ldr	r0, [r0, #0]
 801c644:	b138      	cbz	r0, 801c656 <rcl_wait_set_clear+0x22>
 801c646:	6862      	ldr	r2, [r4, #4]
 801c648:	2100      	movs	r1, #0
 801c64a:	0092      	lsls	r2, r2, #2
 801c64c:	f004 fd6a 	bl	8021124 <memset>
 801c650:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c652:	2200      	movs	r2, #0
 801c654:	601a      	str	r2, [r3, #0]
 801c656:	68a0      	ldr	r0, [r4, #8]
 801c658:	b138      	cbz	r0, 801c66a <rcl_wait_set_clear+0x36>
 801c65a:	68e2      	ldr	r2, [r4, #12]
 801c65c:	2100      	movs	r1, #0
 801c65e:	0092      	lsls	r2, r2, #2
 801c660:	f004 fd60 	bl	8021124 <memset>
 801c664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c666:	2200      	movs	r2, #0
 801c668:	60da      	str	r2, [r3, #12]
 801c66a:	69a0      	ldr	r0, [r4, #24]
 801c66c:	b138      	cbz	r0, 801c67e <rcl_wait_set_clear+0x4a>
 801c66e:	69e2      	ldr	r2, [r4, #28]
 801c670:	2100      	movs	r1, #0
 801c672:	0092      	lsls	r2, r2, #2
 801c674:	f004 fd56 	bl	8021124 <memset>
 801c678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c67a:	2200      	movs	r2, #0
 801c67c:	619a      	str	r2, [r3, #24]
 801c67e:	6a20      	ldr	r0, [r4, #32]
 801c680:	b138      	cbz	r0, 801c692 <rcl_wait_set_clear+0x5e>
 801c682:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c684:	2100      	movs	r1, #0
 801c686:	0092      	lsls	r2, r2, #2
 801c688:	f004 fd4c 	bl	8021124 <memset>
 801c68c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c68e:	2200      	movs	r2, #0
 801c690:	625a      	str	r2, [r3, #36]	; 0x24
 801c692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801c694:	b138      	cbz	r0, 801c6a6 <rcl_wait_set_clear+0x72>
 801c696:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801c698:	2100      	movs	r1, #0
 801c69a:	0092      	lsls	r2, r2, #2
 801c69c:	f004 fd42 	bl	8021124 <memset>
 801c6a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c6a2:	2200      	movs	r2, #0
 801c6a4:	631a      	str	r2, [r3, #48]	; 0x30
 801c6a6:	6920      	ldr	r0, [r4, #16]
 801c6a8:	b138      	cbz	r0, 801c6ba <rcl_wait_set_clear+0x86>
 801c6aa:	6962      	ldr	r2, [r4, #20]
 801c6ac:	2100      	movs	r1, #0
 801c6ae:	0092      	lsls	r2, r2, #2
 801c6b0:	f004 fd38 	bl	8021124 <memset>
 801c6b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	641a      	str	r2, [r3, #64]	; 0x40
 801c6ba:	6898      	ldr	r0, [r3, #8]
 801c6bc:	b138      	cbz	r0, 801c6ce <rcl_wait_set_clear+0x9a>
 801c6be:	685a      	ldr	r2, [r3, #4]
 801c6c0:	2100      	movs	r1, #0
 801c6c2:	0092      	lsls	r2, r2, #2
 801c6c4:	f004 fd2e 	bl	8021124 <memset>
 801c6c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	605a      	str	r2, [r3, #4]
 801c6ce:	6958      	ldr	r0, [r3, #20]
 801c6d0:	b138      	cbz	r0, 801c6e2 <rcl_wait_set_clear+0xae>
 801c6d2:	691a      	ldr	r2, [r3, #16]
 801c6d4:	2100      	movs	r1, #0
 801c6d6:	0092      	lsls	r2, r2, #2
 801c6d8:	f004 fd24 	bl	8021124 <memset>
 801c6dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c6de:	2200      	movs	r2, #0
 801c6e0:	611a      	str	r2, [r3, #16]
 801c6e2:	6a18      	ldr	r0, [r3, #32]
 801c6e4:	b138      	cbz	r0, 801c6f6 <rcl_wait_set_clear+0xc2>
 801c6e6:	69da      	ldr	r2, [r3, #28]
 801c6e8:	2100      	movs	r1, #0
 801c6ea:	0092      	lsls	r2, r2, #2
 801c6ec:	f004 fd1a 	bl	8021124 <memset>
 801c6f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	61da      	str	r2, [r3, #28]
 801c6f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c6f8:	b138      	cbz	r0, 801c70a <rcl_wait_set_clear+0xd6>
 801c6fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c6fc:	2100      	movs	r1, #0
 801c6fe:	0092      	lsls	r2, r2, #2
 801c700:	f004 fd10 	bl	8021124 <memset>
 801c704:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c706:	2200      	movs	r2, #0
 801c708:	629a      	str	r2, [r3, #40]	; 0x28
 801c70a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c70c:	b140      	cbz	r0, 801c720 <rcl_wait_set_clear+0xec>
 801c70e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c710:	2100      	movs	r1, #0
 801c712:	0092      	lsls	r2, r2, #2
 801c714:	f004 fd06 	bl	8021124 <memset>
 801c718:	2300      	movs	r3, #0
 801c71a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801c71c:	4618      	mov	r0, r3
 801c71e:	6353      	str	r3, [r2, #52]	; 0x34
 801c720:	bd10      	pop	{r4, pc}
 801c722:	200b      	movs	r0, #11
 801c724:	4770      	bx	lr
 801c726:	f44f 7061 	mov.w	r0, #900	; 0x384
 801c72a:	bd10      	pop	{r4, pc}

0801c72c <rcl_wait_set_resize>:
 801c72c:	2800      	cmp	r0, #0
 801c72e:	f000 8180 	beq.w	801ca32 <rcl_wait_set_resize+0x306>
 801c732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c736:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801c738:	b083      	sub	sp, #12
 801c73a:	4605      	mov	r5, r0
 801c73c:	2c00      	cmp	r4, #0
 801c73e:	f000 817a 	beq.w	801ca36 <rcl_wait_set_resize+0x30a>
 801c742:	f04f 0900 	mov.w	r9, #0
 801c746:	461f      	mov	r7, r3
 801c748:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801c74c:	4688      	mov	r8, r1
 801c74e:	4616      	mov	r6, r2
 801c750:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801c754:	f8c0 9004 	str.w	r9, [r0, #4]
 801c758:	f8c4 9000 	str.w	r9, [r4]
 801c75c:	2900      	cmp	r1, #0
 801c75e:	f000 80bf 	beq.w	801c8e0 <rcl_wait_set_resize+0x1b4>
 801c762:	008c      	lsls	r4, r1, #2
 801c764:	4652      	mov	r2, sl
 801c766:	6800      	ldr	r0, [r0, #0]
 801c768:	4621      	mov	r1, r4
 801c76a:	9301      	str	r3, [sp, #4]
 801c76c:	4798      	blx	r3
 801c76e:	9b01      	ldr	r3, [sp, #4]
 801c770:	6028      	str	r0, [r5, #0]
 801c772:	2800      	cmp	r0, #0
 801c774:	f000 80f6 	beq.w	801c964 <rcl_wait_set_resize+0x238>
 801c778:	4622      	mov	r2, r4
 801c77a:	4649      	mov	r1, r9
 801c77c:	9301      	str	r3, [sp, #4]
 801c77e:	f004 fcd1 	bl	8021124 <memset>
 801c782:	f8c5 8004 	str.w	r8, [r5, #4]
 801c786:	4652      	mov	r2, sl
 801c788:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 801c78c:	4621      	mov	r1, r4
 801c78e:	9b01      	ldr	r3, [sp, #4]
 801c790:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c794:	f8c8 9004 	str.w	r9, [r8, #4]
 801c798:	4798      	blx	r3
 801c79a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c79c:	f8c8 0008 	str.w	r0, [r8, #8]
 801c7a0:	689b      	ldr	r3, [r3, #8]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	f000 814a 	beq.w	801ca3c <rcl_wait_set_resize+0x310>
 801c7a8:	4622      	mov	r2, r4
 801c7aa:	4649      	mov	r1, r9
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	f004 fcb9 	bl	8021124 <memset>
 801c7b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c7b4:	f04f 0800 	mov.w	r8, #0
 801c7b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c7bc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801c7c0:	f8c5 800c 	str.w	r8, [r5, #12]
 801c7c4:	f8c4 800c 	str.w	r8, [r4, #12]
 801c7c8:	2e00      	cmp	r6, #0
 801c7ca:	f040 809b 	bne.w	801c904 <rcl_wait_set_resize+0x1d8>
 801c7ce:	68a8      	ldr	r0, [r5, #8]
 801c7d0:	b128      	cbz	r0, 801c7de <rcl_wait_set_resize+0xb2>
 801c7d2:	4649      	mov	r1, r9
 801c7d4:	4790      	blx	r2
 801c7d6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c7d8:	60ae      	str	r6, [r5, #8]
 801c7da:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c7de:	f04f 0800 	mov.w	r8, #0
 801c7e2:	19f6      	adds	r6, r6, r7
 801c7e4:	f8c4 8010 	str.w	r8, [r4, #16]
 801c7e8:	f040 80a2 	bne.w	801c930 <rcl_wait_set_resize+0x204>
 801c7ec:	6960      	ldr	r0, [r4, #20]
 801c7ee:	b130      	cbz	r0, 801c7fe <rcl_wait_set_resize+0xd2>
 801c7f0:	4649      	mov	r1, r9
 801c7f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801c7f4:	4798      	blx	r3
 801c7f6:	6166      	str	r6, [r4, #20]
 801c7f8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c7fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c7fe:	2600      	movs	r6, #0
 801c800:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c804:	616e      	str	r6, [r5, #20]
 801c806:	6426      	str	r6, [r4, #64]	; 0x40
 801c808:	2f00      	cmp	r7, #0
 801c80a:	f040 80af 	bne.w	801c96c <rcl_wait_set_resize+0x240>
 801c80e:	6928      	ldr	r0, [r5, #16]
 801c810:	b138      	cbz	r0, 801c822 <rcl_wait_set_resize+0xf6>
 801c812:	4649      	mov	r1, r9
 801c814:	47d0      	blx	sl
 801c816:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c818:	612f      	str	r7, [r5, #16]
 801c81a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c81e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c822:	2600      	movs	r6, #0
 801c824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c826:	61ee      	str	r6, [r5, #28]
 801c828:	61a6      	str	r6, [r4, #24]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	f040 8093 	bne.w	801c956 <rcl_wait_set_resize+0x22a>
 801c830:	69a8      	ldr	r0, [r5, #24]
 801c832:	b120      	cbz	r0, 801c83e <rcl_wait_set_resize+0x112>
 801c834:	4649      	mov	r1, r9
 801c836:	47d0      	blx	sl
 801c838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c83a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c83c:	61ab      	str	r3, [r5, #24]
 801c83e:	6a20      	ldr	r0, [r4, #32]
 801c840:	b128      	cbz	r0, 801c84e <rcl_wait_set_resize+0x122>
 801c842:	4649      	mov	r1, r9
 801c844:	47d0      	blx	sl
 801c846:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c848:	2300      	movs	r3, #0
 801c84a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801c84e:	2600      	movs	r6, #0
 801c850:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c852:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c854:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c858:	626e      	str	r6, [r5, #36]	; 0x24
 801c85a:	6266      	str	r6, [r4, #36]	; 0x24
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	f000 8098 	beq.w	801c992 <rcl_wait_set_resize+0x266>
 801c862:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801c866:	463a      	mov	r2, r7
 801c868:	6a28      	ldr	r0, [r5, #32]
 801c86a:	4651      	mov	r1, sl
 801c86c:	47c8      	blx	r9
 801c86e:	6228      	str	r0, [r5, #32]
 801c870:	2800      	cmp	r0, #0
 801c872:	d077      	beq.n	801c964 <rcl_wait_set_resize+0x238>
 801c874:	4652      	mov	r2, sl
 801c876:	4631      	mov	r1, r6
 801c878:	f004 fc54 	bl	8021124 <memset>
 801c87c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c880:	463a      	mov	r2, r7
 801c882:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c884:	4651      	mov	r1, sl
 801c886:	626b      	str	r3, [r5, #36]	; 0x24
 801c888:	62a6      	str	r6, [r4, #40]	; 0x28
 801c88a:	47c8      	blx	r9
 801c88c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c88e:	62e0      	str	r0, [r4, #44]	; 0x2c
 801c890:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801c892:	2c00      	cmp	r4, #0
 801c894:	f000 80f2 	beq.w	801ca7c <rcl_wait_set_resize+0x350>
 801c898:	4620      	mov	r0, r4
 801c89a:	4652      	mov	r2, sl
 801c89c:	4631      	mov	r1, r6
 801c89e:	f004 fc41 	bl	8021124 <memset>
 801c8a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c8a4:	2600      	movs	r6, #0
 801c8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8a8:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801c8aa:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801c8ae:	62ee      	str	r6, [r5, #44]	; 0x2c
 801c8b0:	6326      	str	r6, [r4, #48]	; 0x30
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	f040 8097 	bne.w	801c9e6 <rcl_wait_set_resize+0x2ba>
 801c8b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c8ba:	b120      	cbz	r0, 801c8c6 <rcl_wait_set_resize+0x19a>
 801c8bc:	4639      	mov	r1, r7
 801c8be:	47c0      	blx	r8
 801c8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c8c4:	62ab      	str	r3, [r5, #40]	; 0x28
 801c8c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c8c8:	2800      	cmp	r0, #0
 801c8ca:	d04c      	beq.n	801c966 <rcl_wait_set_resize+0x23a>
 801c8cc:	4639      	mov	r1, r7
 801c8ce:	47c0      	blx	r8
 801c8d0:	2300      	movs	r3, #0
 801c8d2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801c8d4:	4618      	mov	r0, r3
 801c8d6:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801c8da:	b003      	add	sp, #12
 801c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8e0:	6800      	ldr	r0, [r0, #0]
 801c8e2:	b120      	cbz	r0, 801c8ee <rcl_wait_set_resize+0x1c2>
 801c8e4:	4651      	mov	r1, sl
 801c8e6:	47d8      	blx	fp
 801c8e8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c8ea:	f8c5 8000 	str.w	r8, [r5]
 801c8ee:	68a0      	ldr	r0, [r4, #8]
 801c8f0:	2800      	cmp	r0, #0
 801c8f2:	f43f af5f 	beq.w	801c7b4 <rcl_wait_set_resize+0x88>
 801c8f6:	4651      	mov	r1, sl
 801c8f8:	47d8      	blx	fp
 801c8fa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801c902:	e757      	b.n	801c7b4 <rcl_wait_set_resize+0x88>
 801c904:	00b4      	lsls	r4, r6, #2
 801c906:	464a      	mov	r2, r9
 801c908:	68a8      	ldr	r0, [r5, #8]
 801c90a:	4621      	mov	r1, r4
 801c90c:	4798      	blx	r3
 801c90e:	60a8      	str	r0, [r5, #8]
 801c910:	b340      	cbz	r0, 801c964 <rcl_wait_set_resize+0x238>
 801c912:	4622      	mov	r2, r4
 801c914:	4641      	mov	r1, r8
 801c916:	f004 fc05 	bl	8021124 <memset>
 801c91a:	f04f 0800 	mov.w	r8, #0
 801c91e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c920:	60ee      	str	r6, [r5, #12]
 801c922:	19f6      	adds	r6, r6, r7
 801c924:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c928:	f8c4 8010 	str.w	r8, [r4, #16]
 801c92c:	f43f af5e 	beq.w	801c7ec <rcl_wait_set_resize+0xc0>
 801c930:	00b6      	lsls	r6, r6, #2
 801c932:	464a      	mov	r2, r9
 801c934:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c936:	6960      	ldr	r0, [r4, #20]
 801c938:	4631      	mov	r1, r6
 801c93a:	4798      	blx	r3
 801c93c:	4681      	mov	r9, r0
 801c93e:	6160      	str	r0, [r4, #20]
 801c940:	2800      	cmp	r0, #0
 801c942:	f000 8084 	beq.w	801ca4e <rcl_wait_set_resize+0x322>
 801c946:	4632      	mov	r2, r6
 801c948:	4641      	mov	r1, r8
 801c94a:	f004 fbeb 	bl	8021124 <memset>
 801c94e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c950:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c954:	e753      	b.n	801c7fe <rcl_wait_set_resize+0xd2>
 801c956:	009c      	lsls	r4, r3, #2
 801c958:	464a      	mov	r2, r9
 801c95a:	69a8      	ldr	r0, [r5, #24]
 801c95c:	4621      	mov	r1, r4
 801c95e:	47c0      	blx	r8
 801c960:	61a8      	str	r0, [r5, #24]
 801c962:	bb40      	cbnz	r0, 801c9b6 <rcl_wait_set_resize+0x28a>
 801c964:	200a      	movs	r0, #10
 801c966:	b003      	add	sp, #12
 801c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96c:	00bc      	lsls	r4, r7, #2
 801c96e:	464a      	mov	r2, r9
 801c970:	6928      	ldr	r0, [r5, #16]
 801c972:	4621      	mov	r1, r4
 801c974:	47c0      	blx	r8
 801c976:	6128      	str	r0, [r5, #16]
 801c978:	2800      	cmp	r0, #0
 801c97a:	d0f3      	beq.n	801c964 <rcl_wait_set_resize+0x238>
 801c97c:	4622      	mov	r2, r4
 801c97e:	4631      	mov	r1, r6
 801c980:	f004 fbd0 	bl	8021124 <memset>
 801c984:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c986:	616f      	str	r7, [r5, #20]
 801c988:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801c98c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801c990:	e747      	b.n	801c822 <rcl_wait_set_resize+0xf6>
 801c992:	6a28      	ldr	r0, [r5, #32]
 801c994:	b120      	cbz	r0, 801c9a0 <rcl_wait_set_resize+0x274>
 801c996:	4639      	mov	r1, r7
 801c998:	47c0      	blx	r8
 801c99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c99c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c99e:	622b      	str	r3, [r5, #32]
 801c9a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801c9a2:	2800      	cmp	r0, #0
 801c9a4:	f43f af7e 	beq.w	801c8a4 <rcl_wait_set_resize+0x178>
 801c9a8:	4639      	mov	r1, r7
 801c9aa:	47c0      	blx	r8
 801c9ac:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c9ae:	2300      	movs	r3, #0
 801c9b0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801c9b4:	e776      	b.n	801c8a4 <rcl_wait_set_resize+0x178>
 801c9b6:	4622      	mov	r2, r4
 801c9b8:	4631      	mov	r1, r6
 801c9ba:	f004 fbb3 	bl	8021124 <memset>
 801c9be:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801c9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9c2:	464a      	mov	r2, r9
 801c9c4:	6a38      	ldr	r0, [r7, #32]
 801c9c6:	4621      	mov	r1, r4
 801c9c8:	61eb      	str	r3, [r5, #28]
 801c9ca:	61fe      	str	r6, [r7, #28]
 801c9cc:	47c0      	blx	r8
 801c9ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c9d0:	6238      	str	r0, [r7, #32]
 801c9d2:	6a1f      	ldr	r7, [r3, #32]
 801c9d4:	2f00      	cmp	r7, #0
 801c9d6:	d04a      	beq.n	801ca6e <rcl_wait_set_resize+0x342>
 801c9d8:	4622      	mov	r2, r4
 801c9da:	4631      	mov	r1, r6
 801c9dc:	4638      	mov	r0, r7
 801c9de:	f004 fba1 	bl	8021124 <memset>
 801c9e2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801c9e4:	e733      	b.n	801c84e <rcl_wait_set_resize+0x122>
 801c9e6:	009c      	lsls	r4, r3, #2
 801c9e8:	463a      	mov	r2, r7
 801c9ea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801c9ec:	4621      	mov	r1, r4
 801c9ee:	47c8      	blx	r9
 801c9f0:	62a8      	str	r0, [r5, #40]	; 0x28
 801c9f2:	2800      	cmp	r0, #0
 801c9f4:	d0b6      	beq.n	801c964 <rcl_wait_set_resize+0x238>
 801c9f6:	4622      	mov	r2, r4
 801c9f8:	4631      	mov	r1, r6
 801c9fa:	f004 fb93 	bl	8021124 <memset>
 801c9fe:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801ca02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca04:	463a      	mov	r2, r7
 801ca06:	4621      	mov	r1, r4
 801ca08:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801ca0c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801ca0e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801ca12:	47c8      	blx	r9
 801ca14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ca16:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801ca1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d034      	beq.n	801ca8a <rcl_wait_set_resize+0x35e>
 801ca20:	4622      	mov	r2, r4
 801ca22:	4631      	mov	r1, r6
 801ca24:	4618      	mov	r0, r3
 801ca26:	f004 fb7d 	bl	8021124 <memset>
 801ca2a:	4630      	mov	r0, r6
 801ca2c:	b003      	add	sp, #12
 801ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca32:	200b      	movs	r0, #11
 801ca34:	4770      	bx	lr
 801ca36:	f44f 7061 	mov.w	r0, #900	; 0x384
 801ca3a:	e794      	b.n	801c966 <rcl_wait_set_resize+0x23a>
 801ca3c:	6828      	ldr	r0, [r5, #0]
 801ca3e:	4651      	mov	r1, sl
 801ca40:	9301      	str	r3, [sp, #4]
 801ca42:	47d8      	blx	fp
 801ca44:	9b01      	ldr	r3, [sp, #4]
 801ca46:	200a      	movs	r0, #10
 801ca48:	e9c5 3300 	strd	r3, r3, [r5]
 801ca4c:	e78b      	b.n	801c966 <rcl_wait_set_resize+0x23a>
 801ca4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ca50:	68a8      	ldr	r0, [r5, #8]
 801ca52:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801ca54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca56:	4798      	blx	r3
 801ca58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ca5a:	6928      	ldr	r0, [r5, #16]
 801ca5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ca5e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801ca60:	e9c5 9902 	strd	r9, r9, [r5, #8]
 801ca64:	4790      	blx	r2
 801ca66:	200a      	movs	r0, #10
 801ca68:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801ca6c:	e77b      	b.n	801c966 <rcl_wait_set_resize+0x23a>
 801ca6e:	69a8      	ldr	r0, [r5, #24]
 801ca70:	4649      	mov	r1, r9
 801ca72:	47d0      	blx	sl
 801ca74:	200a      	movs	r0, #10
 801ca76:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801ca7a:	e774      	b.n	801c966 <rcl_wait_set_resize+0x23a>
 801ca7c:	6a28      	ldr	r0, [r5, #32]
 801ca7e:	4639      	mov	r1, r7
 801ca80:	47c0      	blx	r8
 801ca82:	200a      	movs	r0, #10
 801ca84:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801ca88:	e76d      	b.n	801c966 <rcl_wait_set_resize+0x23a>
 801ca8a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801ca8c:	4639      	mov	r1, r7
 801ca8e:	9301      	str	r3, [sp, #4]
 801ca90:	47c0      	blx	r8
 801ca92:	9b01      	ldr	r3, [sp, #4]
 801ca94:	200a      	movs	r0, #10
 801ca96:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801ca9a:	e764      	b.n	801c966 <rcl_wait_set_resize+0x23a>

0801ca9c <rcl_wait_set_init>:
 801ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa0:	b085      	sub	sp, #20
 801caa2:	4605      	mov	r5, r0
 801caa4:	460e      	mov	r6, r1
 801caa6:	4617      	mov	r7, r2
 801caa8:	a812      	add	r0, sp, #72	; 0x48
 801caaa:	4698      	mov	r8, r3
 801caac:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801cab0:	f7f8 fca4 	bl	80153fc <rcutils_allocator_is_valid>
 801cab4:	2d00      	cmp	r5, #0
 801cab6:	d072      	beq.n	801cb9e <rcl_wait_set_init+0x102>
 801cab8:	f080 0001 	eor.w	r0, r0, #1
 801cabc:	b2c0      	uxtb	r0, r0
 801cabe:	2800      	cmp	r0, #0
 801cac0:	d16d      	bne.n	801cb9e <rcl_wait_set_init+0x102>
 801cac2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801cac6:	f1ba 0f00 	cmp.w	sl, #0
 801caca:	d004      	beq.n	801cad6 <rcl_wait_set_init+0x3a>
 801cacc:	2464      	movs	r4, #100	; 0x64
 801cace:	4620      	mov	r0, r4
 801cad0:	b005      	add	sp, #20
 801cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cad6:	f1b9 0f00 	cmp.w	r9, #0
 801cada:	d060      	beq.n	801cb9e <rcl_wait_set_init+0x102>
 801cadc:	4648      	mov	r0, r9
 801cade:	f7fe fe8f 	bl	801b800 <rcl_context_is_valid>
 801cae2:	2800      	cmp	r0, #0
 801cae4:	d068      	beq.n	801cbb8 <rcl_wait_set_init+0x11c>
 801cae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cae8:	205c      	movs	r0, #92	; 0x5c
 801caea:	9916      	ldr	r1, [sp, #88]	; 0x58
 801caec:	4798      	blx	r3
 801caee:	6328      	str	r0, [r5, #48]	; 0x30
 801caf0:	2800      	cmp	r0, #0
 801caf2:	d063      	beq.n	801cbbc <rcl_wait_set_init+0x120>
 801caf4:	225c      	movs	r2, #92	; 0x5c
 801caf6:	4651      	mov	r1, sl
 801caf8:	f004 fb14 	bl	8021124 <memset>
 801cafc:	ac12      	add	r4, sp, #72	; 0x48
 801cafe:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801cb02:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801cb06:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801cb0a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801cb0e:	eb03 0e02 	add.w	lr, r3, r2
 801cb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb14:	f8d9 9000 	ldr.w	r9, [r9]
 801cb18:	449e      	add	lr, r3
 801cb1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cb1c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801cb20:	e9cb aa04 	strd	sl, sl, [fp, #16]
 801cb24:	e9cb aa07 	strd	sl, sl, [fp, #28]
 801cb28:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801cb2c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801cb30:	44be      	add	lr, r7
 801cb32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb36:	6823      	ldr	r3, [r4, #0]
 801cb38:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801cb3c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801cb40:	f8cc 3000 	str.w	r3, [ip]
 801cb44:	f001 fe6e 	bl	801e824 <rmw_create_wait_set>
 801cb48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cb4a:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801cb4e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801cb50:	b350      	cbz	r0, 801cba8 <rcl_wait_set_init+0x10c>
 801cb52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb54:	4643      	mov	r3, r8
 801cb56:	463a      	mov	r2, r7
 801cb58:	4631      	mov	r1, r6
 801cb5a:	9402      	str	r4, [sp, #8]
 801cb5c:	4628      	mov	r0, r5
 801cb5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cb60:	9401      	str	r4, [sp, #4]
 801cb62:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cb64:	9400      	str	r4, [sp, #0]
 801cb66:	f7ff fde1 	bl	801c72c <rcl_wait_set_resize>
 801cb6a:	4604      	mov	r4, r0
 801cb6c:	2800      	cmp	r0, #0
 801cb6e:	d0ae      	beq.n	801cace <rcl_wait_set_init+0x32>
 801cb70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801cb72:	bb2b      	cbnz	r3, 801cbc0 <rcl_wait_set_init+0x124>
 801cb74:	2600      	movs	r6, #0
 801cb76:	4628      	mov	r0, r5
 801cb78:	4633      	mov	r3, r6
 801cb7a:	4632      	mov	r2, r6
 801cb7c:	4631      	mov	r1, r6
 801cb7e:	9600      	str	r6, [sp, #0]
 801cb80:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801cb84:	f7ff fdd2 	bl	801c72c <rcl_wait_set_resize>
 801cb88:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cb8a:	2800      	cmp	r0, #0
 801cb8c:	d09f      	beq.n	801cace <rcl_wait_set_init+0x32>
 801cb8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801cb90:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801cb92:	4798      	blx	r3
 801cb94:	4620      	mov	r0, r4
 801cb96:	632e      	str	r6, [r5, #48]	; 0x30
 801cb98:	b005      	add	sp, #20
 801cb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb9e:	240b      	movs	r4, #11
 801cba0:	4620      	mov	r0, r4
 801cba2:	b005      	add	sp, #20
 801cba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cba8:	2401      	movs	r4, #1
 801cbaa:	f001 fe45 	bl	801e838 <rmw_destroy_wait_set>
 801cbae:	2800      	cmp	r0, #0
 801cbb0:	bf18      	it	ne
 801cbb2:	f44f 7461 	movne.w	r4, #900	; 0x384
 801cbb6:	e7dd      	b.n	801cb74 <rcl_wait_set_init+0xd8>
 801cbb8:	2465      	movs	r4, #101	; 0x65
 801cbba:	e788      	b.n	801cace <rcl_wait_set_init+0x32>
 801cbbc:	240a      	movs	r4, #10
 801cbbe:	e786      	b.n	801cace <rcl_wait_set_init+0x32>
 801cbc0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801cbc2:	e7f2      	b.n	801cbaa <rcl_wait_set_init+0x10e>

0801cbc4 <rcl_wait_set_add_guard_condition>:
 801cbc4:	b318      	cbz	r0, 801cc0e <rcl_wait_set_add_guard_condition+0x4a>
 801cbc6:	b538      	push	{r3, r4, r5, lr}
 801cbc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cbca:	4604      	mov	r4, r0
 801cbcc:	b30b      	cbz	r3, 801cc12 <rcl_wait_set_add_guard_condition+0x4e>
 801cbce:	b319      	cbz	r1, 801cc18 <rcl_wait_set_add_guard_condition+0x54>
 801cbd0:	68dd      	ldr	r5, [r3, #12]
 801cbd2:	68c0      	ldr	r0, [r0, #12]
 801cbd4:	4285      	cmp	r5, r0
 801cbd6:	d217      	bcs.n	801cc08 <rcl_wait_set_add_guard_condition+0x44>
 801cbd8:	1c68      	adds	r0, r5, #1
 801cbda:	60d8      	str	r0, [r3, #12]
 801cbdc:	68a3      	ldr	r3, [r4, #8]
 801cbde:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cbe2:	b102      	cbz	r2, 801cbe6 <rcl_wait_set_add_guard_condition+0x22>
 801cbe4:	6015      	str	r5, [r2, #0]
 801cbe6:	4608      	mov	r0, r1
 801cbe8:	f7fe ff18 	bl	801ba1c <rcl_guard_condition_get_rmw_handle>
 801cbec:	b150      	cbz	r0, 801cc04 <rcl_wait_set_add_guard_condition+0x40>
 801cbee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cbf0:	6842      	ldr	r2, [r0, #4]
 801cbf2:	2000      	movs	r0, #0
 801cbf4:	695b      	ldr	r3, [r3, #20]
 801cbf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cbfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cbfc:	6913      	ldr	r3, [r2, #16]
 801cbfe:	3301      	adds	r3, #1
 801cc00:	6113      	str	r3, [r2, #16]
 801cc02:	bd38      	pop	{r3, r4, r5, pc}
 801cc04:	2001      	movs	r0, #1
 801cc06:	bd38      	pop	{r3, r4, r5, pc}
 801cc08:	f240 3086 	movw	r0, #902	; 0x386
 801cc0c:	bd38      	pop	{r3, r4, r5, pc}
 801cc0e:	200b      	movs	r0, #11
 801cc10:	4770      	bx	lr
 801cc12:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cc16:	bd38      	pop	{r3, r4, r5, pc}
 801cc18:	200b      	movs	r0, #11
 801cc1a:	bd38      	pop	{r3, r4, r5, pc}

0801cc1c <rcl_wait_set_add_timer>:
 801cc1c:	b328      	cbz	r0, 801cc6a <rcl_wait_set_add_timer+0x4e>
 801cc1e:	b538      	push	{r3, r4, r5, lr}
 801cc20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cc22:	4604      	mov	r4, r0
 801cc24:	b31b      	cbz	r3, 801cc6e <rcl_wait_set_add_timer+0x52>
 801cc26:	b329      	cbz	r1, 801cc74 <rcl_wait_set_add_timer+0x58>
 801cc28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801cc2a:	6965      	ldr	r5, [r4, #20]
 801cc2c:	42a8      	cmp	r0, r5
 801cc2e:	d219      	bcs.n	801cc64 <rcl_wait_set_add_timer+0x48>
 801cc30:	1c45      	adds	r5, r0, #1
 801cc32:	641d      	str	r5, [r3, #64]	; 0x40
 801cc34:	6923      	ldr	r3, [r4, #16]
 801cc36:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801cc3a:	b102      	cbz	r2, 801cc3e <rcl_wait_set_add_timer+0x22>
 801cc3c:	6010      	str	r0, [r2, #0]
 801cc3e:	4608      	mov	r0, r1
 801cc40:	f7ff fb9a 	bl	801c378 <rcl_timer_get_guard_condition>
 801cc44:	b168      	cbz	r0, 801cc62 <rcl_wait_set_add_timer+0x46>
 801cc46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cc48:	68e3      	ldr	r3, [r4, #12]
 801cc4a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801cc4c:	3b01      	subs	r3, #1
 801cc4e:	441d      	add	r5, r3
 801cc50:	f7fe fee4 	bl	801ba1c <rcl_guard_condition_get_rmw_handle>
 801cc54:	b180      	cbz	r0, 801cc78 <rcl_wait_set_add_timer+0x5c>
 801cc56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cc58:	6842      	ldr	r2, [r0, #4]
 801cc5a:	2000      	movs	r0, #0
 801cc5c:	695b      	ldr	r3, [r3, #20]
 801cc5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc62:	bd38      	pop	{r3, r4, r5, pc}
 801cc64:	f240 3086 	movw	r0, #902	; 0x386
 801cc68:	bd38      	pop	{r3, r4, r5, pc}
 801cc6a:	200b      	movs	r0, #11
 801cc6c:	4770      	bx	lr
 801cc6e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cc72:	bd38      	pop	{r3, r4, r5, pc}
 801cc74:	200b      	movs	r0, #11
 801cc76:	bd38      	pop	{r3, r4, r5, pc}
 801cc78:	2001      	movs	r0, #1
 801cc7a:	bd38      	pop	{r3, r4, r5, pc}

0801cc7c <rcl_wait_set_add_client>:
 801cc7c:	b318      	cbz	r0, 801ccc6 <rcl_wait_set_add_client+0x4a>
 801cc7e:	b538      	push	{r3, r4, r5, lr}
 801cc80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cc82:	4604      	mov	r4, r0
 801cc84:	b30b      	cbz	r3, 801ccca <rcl_wait_set_add_client+0x4e>
 801cc86:	b319      	cbz	r1, 801ccd0 <rcl_wait_set_add_client+0x54>
 801cc88:	699d      	ldr	r5, [r3, #24]
 801cc8a:	69c0      	ldr	r0, [r0, #28]
 801cc8c:	4285      	cmp	r5, r0
 801cc8e:	d217      	bcs.n	801ccc0 <rcl_wait_set_add_client+0x44>
 801cc90:	1c68      	adds	r0, r5, #1
 801cc92:	6198      	str	r0, [r3, #24]
 801cc94:	69a3      	ldr	r3, [r4, #24]
 801cc96:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801cc9a:	b102      	cbz	r2, 801cc9e <rcl_wait_set_add_client+0x22>
 801cc9c:	6015      	str	r5, [r2, #0]
 801cc9e:	4608      	mov	r0, r1
 801cca0:	f7fe fd00 	bl	801b6a4 <rcl_client_get_rmw_handle>
 801cca4:	b150      	cbz	r0, 801ccbc <rcl_wait_set_add_client+0x40>
 801cca6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cca8:	6842      	ldr	r2, [r0, #4]
 801ccaa:	2000      	movs	r0, #0
 801ccac:	6a1b      	ldr	r3, [r3, #32]
 801ccae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ccb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801ccb4:	69d3      	ldr	r3, [r2, #28]
 801ccb6:	3301      	adds	r3, #1
 801ccb8:	61d3      	str	r3, [r2, #28]
 801ccba:	bd38      	pop	{r3, r4, r5, pc}
 801ccbc:	2001      	movs	r0, #1
 801ccbe:	bd38      	pop	{r3, r4, r5, pc}
 801ccc0:	f240 3086 	movw	r0, #902	; 0x386
 801ccc4:	bd38      	pop	{r3, r4, r5, pc}
 801ccc6:	200b      	movs	r0, #11
 801ccc8:	4770      	bx	lr
 801ccca:	f44f 7061 	mov.w	r0, #900	; 0x384
 801ccce:	bd38      	pop	{r3, r4, r5, pc}
 801ccd0:	200b      	movs	r0, #11
 801ccd2:	bd38      	pop	{r3, r4, r5, pc}

0801ccd4 <rcl_wait_set_add_service>:
 801ccd4:	b318      	cbz	r0, 801cd1e <rcl_wait_set_add_service+0x4a>
 801ccd6:	b538      	push	{r3, r4, r5, lr}
 801ccd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801ccda:	4604      	mov	r4, r0
 801ccdc:	b30b      	cbz	r3, 801cd22 <rcl_wait_set_add_service+0x4e>
 801ccde:	b319      	cbz	r1, 801cd28 <rcl_wait_set_add_service+0x54>
 801cce0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cce2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cce4:	4285      	cmp	r5, r0
 801cce6:	d217      	bcs.n	801cd18 <rcl_wait_set_add_service+0x44>
 801cce8:	1c68      	adds	r0, r5, #1
 801ccea:	6258      	str	r0, [r3, #36]	; 0x24
 801ccec:	6a23      	ldr	r3, [r4, #32]
 801ccee:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801ccf2:	b102      	cbz	r2, 801ccf6 <rcl_wait_set_add_service+0x22>
 801ccf4:	6015      	str	r5, [r2, #0]
 801ccf6:	4608      	mov	r0, r1
 801ccf8:	f7f7 f9f8 	bl	80140ec <rcl_service_get_rmw_handle>
 801ccfc:	b150      	cbz	r0, 801cd14 <rcl_wait_set_add_service+0x40>
 801ccfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cd00:	6842      	ldr	r2, [r0, #4]
 801cd02:	2000      	movs	r0, #0
 801cd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cd0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801cd0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801cd0e:	3301      	adds	r3, #1
 801cd10:	6293      	str	r3, [r2, #40]	; 0x28
 801cd12:	bd38      	pop	{r3, r4, r5, pc}
 801cd14:	2001      	movs	r0, #1
 801cd16:	bd38      	pop	{r3, r4, r5, pc}
 801cd18:	f240 3086 	movw	r0, #902	; 0x386
 801cd1c:	bd38      	pop	{r3, r4, r5, pc}
 801cd1e:	200b      	movs	r0, #11
 801cd20:	4770      	bx	lr
 801cd22:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cd26:	bd38      	pop	{r3, r4, r5, pc}
 801cd28:	200b      	movs	r0, #11
 801cd2a:	bd38      	pop	{r3, r4, r5, pc}
 801cd2c:	0000      	movs	r0, r0
	...

0801cd30 <rcl_wait>:
 801cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd34:	ed2d 8b02 	vpush	{d8}
 801cd38:	b08d      	sub	sp, #52	; 0x34
 801cd3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cd3e:	2800      	cmp	r0, #0
 801cd40:	f000 814f 	beq.w	801cfe2 <rcl_wait+0x2b2>
 801cd44:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801cd46:	4605      	mov	r5, r0
 801cd48:	2e00      	cmp	r6, #0
 801cd4a:	f000 811a 	beq.w	801cf82 <rcl_wait+0x252>
 801cd4e:	6843      	ldr	r3, [r0, #4]
 801cd50:	b983      	cbnz	r3, 801cd74 <rcl_wait+0x44>
 801cd52:	68eb      	ldr	r3, [r5, #12]
 801cd54:	b973      	cbnz	r3, 801cd74 <rcl_wait+0x44>
 801cd56:	696b      	ldr	r3, [r5, #20]
 801cd58:	b963      	cbnz	r3, 801cd74 <rcl_wait+0x44>
 801cd5a:	69eb      	ldr	r3, [r5, #28]
 801cd5c:	b953      	cbnz	r3, 801cd74 <rcl_wait+0x44>
 801cd5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cd60:	b943      	cbnz	r3, 801cd74 <rcl_wait+0x44>
 801cd62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801cd64:	b933      	cbnz	r3, 801cd74 <rcl_wait+0x44>
 801cd66:	f240 3085 	movw	r0, #901	; 0x385
 801cd6a:	b00d      	add	sp, #52	; 0x34
 801cd6c:	ecbd 8b02 	vpop	{d8}
 801cd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd74:	9b04      	ldr	r3, [sp, #16]
 801cd76:	6c32      	ldr	r2, [r6, #64]	; 0x40
 801cd78:	2b01      	cmp	r3, #1
 801cd7a:	9b05      	ldr	r3, [sp, #20]
 801cd7c:	f173 0300 	sbcs.w	r3, r3, #0
 801cd80:	f2c0 80f8 	blt.w	801cf74 <rcl_wait+0x244>
 801cd84:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801cd88:	2a00      	cmp	r2, #0
 801cd8a:	f000 810f 	beq.w	801cfac <rcl_wait+0x27c>
 801cd8e:	2400      	movs	r4, #0
 801cd90:	4613      	mov	r3, r2
 801cd92:	f240 3921 	movw	r9, #801	; 0x321
 801cd96:	4632      	mov	r2, r6
 801cd98:	46a2      	mov	sl, r4
 801cd9a:	46a3      	mov	fp, r4
 801cd9c:	ed9f 8b98 	vldr	d8, [pc, #608]	; 801d000 <rcl_wait+0x2d0>
 801cda0:	e014      	b.n	801cdcc <rcl_wait+0x9c>
 801cda2:	2800      	cmp	r0, #0
 801cda4:	d1e1      	bne.n	801cd6a <rcl_wait+0x3a>
 801cda6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cdaa:	4542      	cmp	r2, r8
 801cdac:	eb73 0107 	sbcs.w	r1, r3, r7
 801cdb0:	da03      	bge.n	801cdba <rcl_wait+0x8a>
 801cdb2:	4690      	mov	r8, r2
 801cdb4:	461f      	mov	r7, r3
 801cdb6:	f04f 0b01 	mov.w	fp, #1
 801cdba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801cdbc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801cdbe:	3401      	adds	r4, #1
 801cdc0:	f14a 0a00 	adc.w	sl, sl, #0
 801cdc4:	429c      	cmp	r4, r3
 801cdc6:	f17a 0100 	sbcs.w	r1, sl, #0
 801cdca:	d228      	bcs.n	801ce1e <rcl_wait+0xee>
 801cdcc:	6928      	ldr	r0, [r5, #16]
 801cdce:	a908      	add	r1, sp, #32
 801cdd0:	00a6      	lsls	r6, r4, #2
 801cdd2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801cdd6:	2800      	cmp	r0, #0
 801cdd8:	d0f1      	beq.n	801cdbe <rcl_wait+0x8e>
 801cdda:	68eb      	ldr	r3, [r5, #12]
 801cddc:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801cde0:	4423      	add	r3, r4
 801cde2:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801cde6:	f1be 0f00 	cmp.w	lr, #0
 801cdea:	d006      	beq.n	801cdfa <rcl_wait+0xca>
 801cdec:	6913      	ldr	r3, [r2, #16]
 801cdee:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	6113      	str	r3, [r2, #16]
 801cdf6:	692b      	ldr	r3, [r5, #16]
 801cdf8:	5998      	ldr	r0, [r3, r6]
 801cdfa:	ed8d 8b08 	vstr	d8, [sp, #32]
 801cdfe:	f7ff fa89 	bl	801c314 <rcl_timer_get_time_until_next_call>
 801ce02:	4548      	cmp	r0, r9
 801ce04:	d1cd      	bne.n	801cda2 <rcl_wait+0x72>
 801ce06:	692b      	ldr	r3, [r5, #16]
 801ce08:	2200      	movs	r2, #0
 801ce0a:	3401      	adds	r4, #1
 801ce0c:	519a      	str	r2, [r3, r6]
 801ce0e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801ce10:	f14a 0a00 	adc.w	sl, sl, #0
 801ce14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801ce16:	429c      	cmp	r4, r3
 801ce18:	f17a 0100 	sbcs.w	r1, sl, #0
 801ce1c:	d3d6      	bcc.n	801cdcc <rcl_wait+0x9c>
 801ce1e:	4659      	mov	r1, fp
 801ce20:	4616      	mov	r6, r2
 801ce22:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ce26:	4313      	orrs	r3, r2
 801ce28:	f040 80b4 	bne.w	801cf94 <rcl_wait+0x264>
 801ce2c:	2300      	movs	r3, #0
 801ce2e:	2200      	movs	r2, #0
 801ce30:	460c      	mov	r4, r1
 801ce32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ce36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ce3a:	ab08      	add	r3, sp, #32
 801ce3c:	9302      	str	r3, [sp, #8]
 801ce3e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801ce42:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801ce44:	f106 0110 	add.w	r1, r6, #16
 801ce48:	9300      	str	r3, [sp, #0]
 801ce4a:	1d30      	adds	r0, r6, #4
 801ce4c:	f106 031c 	add.w	r3, r6, #28
 801ce50:	9201      	str	r2, [sp, #4]
 801ce52:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801ce56:	f001 fb81 	bl	801e55c <rmw_wait>
 801ce5a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ce5c:	4680      	mov	r8, r0
 801ce5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ce60:	b1e2      	cbz	r2, 801ce9c <rcl_wait+0x16c>
 801ce62:	f04f 0900 	mov.w	r9, #0
 801ce66:	464f      	mov	r7, r9
 801ce68:	692a      	ldr	r2, [r5, #16]
 801ce6a:	f10d 011f 	add.w	r1, sp, #31
 801ce6e:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801ce72:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801ce76:	b160      	cbz	r0, 801ce92 <rcl_wait+0x162>
 801ce78:	f88d 701f 	strb.w	r7, [sp, #31]
 801ce7c:	f7ff fa0e 	bl	801c29c <rcl_timer_is_ready>
 801ce80:	2800      	cmp	r0, #0
 801ce82:	f47f af72 	bne.w	801cd6a <rcl_wait+0x3a>
 801ce86:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ce8a:	b90b      	cbnz	r3, 801ce90 <rcl_wait+0x160>
 801ce8c:	692a      	ldr	r2, [r5, #16]
 801ce8e:	5193      	str	r3, [r2, r6]
 801ce90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ce92:	f109 0901 	add.w	r9, r9, #1
 801ce96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ce98:	454a      	cmp	r2, r9
 801ce9a:	d8e5      	bhi.n	801ce68 <rcl_wait+0x138>
 801ce9c:	f038 0002 	bics.w	r0, r8, #2
 801cea0:	d176      	bne.n	801cf90 <rcl_wait+0x260>
 801cea2:	686f      	ldr	r7, [r5, #4]
 801cea4:	b17f      	cbz	r7, 801cec6 <rcl_wait+0x196>
 801cea6:	4602      	mov	r2, r0
 801cea8:	e002      	b.n	801ceb0 <rcl_wait+0x180>
 801ceaa:	3201      	adds	r2, #1
 801ceac:	42ba      	cmp	r2, r7
 801ceae:	d00a      	beq.n	801cec6 <rcl_wait+0x196>
 801ceb0:	6899      	ldr	r1, [r3, #8]
 801ceb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ceb6:	2900      	cmp	r1, #0
 801ceb8:	d1f7      	bne.n	801ceaa <rcl_wait+0x17a>
 801ceba:	682e      	ldr	r6, [r5, #0]
 801cebc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cec0:	3201      	adds	r2, #1
 801cec2:	42ba      	cmp	r2, r7
 801cec4:	d1f4      	bne.n	801ceb0 <rcl_wait+0x180>
 801cec6:	68ef      	ldr	r7, [r5, #12]
 801cec8:	b17f      	cbz	r7, 801ceea <rcl_wait+0x1ba>
 801ceca:	2200      	movs	r2, #0
 801cecc:	e002      	b.n	801ced4 <rcl_wait+0x1a4>
 801cece:	3201      	adds	r2, #1
 801ced0:	42ba      	cmp	r2, r7
 801ced2:	d00a      	beq.n	801ceea <rcl_wait+0x1ba>
 801ced4:	6959      	ldr	r1, [r3, #20]
 801ced6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ceda:	2900      	cmp	r1, #0
 801cedc:	d1f7      	bne.n	801cece <rcl_wait+0x19e>
 801cede:	68ae      	ldr	r6, [r5, #8]
 801cee0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cee4:	3201      	adds	r2, #1
 801cee6:	42ba      	cmp	r2, r7
 801cee8:	d1f4      	bne.n	801ced4 <rcl_wait+0x1a4>
 801ceea:	69ef      	ldr	r7, [r5, #28]
 801ceec:	b17f      	cbz	r7, 801cf0e <rcl_wait+0x1de>
 801ceee:	2200      	movs	r2, #0
 801cef0:	e002      	b.n	801cef8 <rcl_wait+0x1c8>
 801cef2:	3201      	adds	r2, #1
 801cef4:	42ba      	cmp	r2, r7
 801cef6:	d00a      	beq.n	801cf0e <rcl_wait+0x1de>
 801cef8:	6a19      	ldr	r1, [r3, #32]
 801cefa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cefe:	2900      	cmp	r1, #0
 801cf00:	d1f7      	bne.n	801cef2 <rcl_wait+0x1c2>
 801cf02:	69ae      	ldr	r6, [r5, #24]
 801cf04:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf08:	3201      	adds	r2, #1
 801cf0a:	42ba      	cmp	r2, r7
 801cf0c:	d1f4      	bne.n	801cef8 <rcl_wait+0x1c8>
 801cf0e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 801cf10:	b17f      	cbz	r7, 801cf32 <rcl_wait+0x202>
 801cf12:	2200      	movs	r2, #0
 801cf14:	e002      	b.n	801cf1c <rcl_wait+0x1ec>
 801cf16:	3201      	adds	r2, #1
 801cf18:	42ba      	cmp	r2, r7
 801cf1a:	d00a      	beq.n	801cf32 <rcl_wait+0x202>
 801cf1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801cf1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf22:	2900      	cmp	r1, #0
 801cf24:	d1f7      	bne.n	801cf16 <rcl_wait+0x1e6>
 801cf26:	6a2e      	ldr	r6, [r5, #32]
 801cf28:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf2c:	3201      	adds	r2, #1
 801cf2e:	42ba      	cmp	r2, r7
 801cf30:	d1f4      	bne.n	801cf1c <rcl_wait+0x1ec>
 801cf32:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801cf34:	b17f      	cbz	r7, 801cf56 <rcl_wait+0x226>
 801cf36:	2200      	movs	r2, #0
 801cf38:	e002      	b.n	801cf40 <rcl_wait+0x210>
 801cf3a:	3201      	adds	r2, #1
 801cf3c:	42ba      	cmp	r2, r7
 801cf3e:	d00a      	beq.n	801cf56 <rcl_wait+0x226>
 801cf40:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801cf42:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801cf46:	2900      	cmp	r1, #0
 801cf48:	d1f7      	bne.n	801cf3a <rcl_wait+0x20a>
 801cf4a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 801cf4c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801cf50:	3201      	adds	r2, #1
 801cf52:	42ba      	cmp	r2, r7
 801cf54:	d1f4      	bne.n	801cf40 <rcl_wait+0x210>
 801cf56:	f1b8 0f02 	cmp.w	r8, #2
 801cf5a:	f47f af06 	bne.w	801cd6a <rcl_wait+0x3a>
 801cf5e:	f084 0301 	eor.w	r3, r4, #1
 801cf62:	b2db      	uxtb	r3, r3
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	bf18      	it	ne
 801cf68:	2002      	movne	r0, #2
 801cf6a:	b00d      	add	sp, #52	; 0x34
 801cf6c:	ecbd 8b02 	vpop	{d8}
 801cf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf74:	2a00      	cmp	r2, #0
 801cf76:	d03a      	beq.n	801cfee <rcl_wait+0x2be>
 801cf78:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cf7c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cf80:	e705      	b.n	801cd8e <rcl_wait+0x5e>
 801cf82:	f44f 7061 	mov.w	r0, #900	; 0x384
 801cf86:	b00d      	add	sp, #52	; 0x34
 801cf88:	ecbd 8b02 	vpop	{d8}
 801cf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf90:	2001      	movs	r0, #1
 801cf92:	e6ea      	b.n	801cd6a <rcl_wait+0x3a>
 801cf94:	9b04      	ldr	r3, [sp, #16]
 801cf96:	460c      	mov	r4, r1
 801cf98:	2b01      	cmp	r3, #1
 801cf9a:	9b05      	ldr	r3, [sp, #20]
 801cf9c:	f173 0300 	sbcs.w	r3, r3, #0
 801cfa0:	bfa8      	it	ge
 801cfa2:	f044 0401 	orrge.w	r4, r4, #1
 801cfa6:	b914      	cbnz	r4, 801cfae <rcl_wait+0x27e>
 801cfa8:	4623      	mov	r3, r4
 801cfaa:	e747      	b.n	801ce3c <rcl_wait+0x10c>
 801cfac:	4611      	mov	r1, r2
 801cfae:	2f00      	cmp	r7, #0
 801cfb0:	da02      	bge.n	801cfb8 <rcl_wait+0x288>
 801cfb2:	f04f 0800 	mov.w	r8, #0
 801cfb6:	4647      	mov	r7, r8
 801cfb8:	460c      	mov	r4, r1
 801cfba:	4640      	mov	r0, r8
 801cfbc:	4639      	mov	r1, r7
 801cfbe:	a312      	add	r3, pc, #72	; (adr r3, 801d008 <rcl_wait+0x2d8>)
 801cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfc4:	f7e3 fb60 	bl	8000688 <__aeabi_ldivmod>
 801cfc8:	a30f      	add	r3, pc, #60	; (adr r3, 801d008 <rcl_wait+0x2d8>)
 801cfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cfd2:	4640      	mov	r0, r8
 801cfd4:	4639      	mov	r1, r7
 801cfd6:	f7e3 fb57 	bl	8000688 <__aeabi_ldivmod>
 801cfda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801cfde:	ab08      	add	r3, sp, #32
 801cfe0:	e72c      	b.n	801ce3c <rcl_wait+0x10c>
 801cfe2:	200b      	movs	r0, #11
 801cfe4:	b00d      	add	sp, #52	; 0x34
 801cfe6:	ecbd 8b02 	vpop	{d8}
 801cfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfee:	4611      	mov	r1, r2
 801cff0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801cff4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801cff8:	e713      	b.n	801ce22 <rcl_wait+0xf2>
 801cffa:	bf00      	nop
 801cffc:	f3af 8000 	nop.w
 801d000:	ffffffff 	.word	0xffffffff
 801d004:	7fffffff 	.word	0x7fffffff
 801d008:	3b9aca00 	.word	0x3b9aca00
 801d00c:	00000000 	.word	0x00000000

0801d010 <rcl_action_take_goal_response>:
 801d010:	2800      	cmp	r0, #0
 801d012:	d039      	beq.n	801d088 <rcl_action_take_goal_response+0x78>
 801d014:	b570      	push	{r4, r5, r6, lr}
 801d016:	4604      	mov	r4, r0
 801d018:	6800      	ldr	r0, [r0, #0]
 801d01a:	b380      	cbz	r0, 801d07e <rcl_action_take_goal_response+0x6e>
 801d01c:	460e      	mov	r6, r1
 801d01e:	4615      	mov	r5, r2
 801d020:	f7fe fbc6 	bl	801b7b0 <rcl_client_is_valid>
 801d024:	b330      	cbz	r0, 801d074 <rcl_action_take_goal_response+0x64>
 801d026:	6820      	ldr	r0, [r4, #0]
 801d028:	3004      	adds	r0, #4
 801d02a:	f7fe fbc1 	bl	801b7b0 <rcl_client_is_valid>
 801d02e:	b308      	cbz	r0, 801d074 <rcl_action_take_goal_response+0x64>
 801d030:	6820      	ldr	r0, [r4, #0]
 801d032:	3008      	adds	r0, #8
 801d034:	f7fe fbbc 	bl	801b7b0 <rcl_client_is_valid>
 801d038:	b1e0      	cbz	r0, 801d074 <rcl_action_take_goal_response+0x64>
 801d03a:	6820      	ldr	r0, [r4, #0]
 801d03c:	300c      	adds	r0, #12
 801d03e:	f7f7 f9fb 	bl	8014438 <rcl_subscription_is_valid>
 801d042:	b1b8      	cbz	r0, 801d074 <rcl_action_take_goal_response+0x64>
 801d044:	6820      	ldr	r0, [r4, #0]
 801d046:	3010      	adds	r0, #16
 801d048:	f7f7 f9f6 	bl	8014438 <rcl_subscription_is_valid>
 801d04c:	b190      	cbz	r0, 801d074 <rcl_action_take_goal_response+0x64>
 801d04e:	b1cd      	cbz	r5, 801d084 <rcl_action_take_goal_response+0x74>
 801d050:	b1c6      	cbz	r6, 801d084 <rcl_action_take_goal_response+0x74>
 801d052:	462a      	mov	r2, r5
 801d054:	4631      	mov	r1, r6
 801d056:	6820      	ldr	r0, [r4, #0]
 801d058:	f7fe fb62 	bl	801b720 <rcl_take_response>
 801d05c:	b148      	cbz	r0, 801d072 <rcl_action_take_goal_response+0x62>
 801d05e:	280a      	cmp	r0, #10
 801d060:	d007      	beq.n	801d072 <rcl_action_take_goal_response+0x62>
 801d062:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d066:	f640 0337 	movw	r3, #2103	; 0x837
 801d06a:	4290      	cmp	r0, r2
 801d06c:	bf0c      	ite	eq
 801d06e:	4618      	moveq	r0, r3
 801d070:	2001      	movne	r0, #1
 801d072:	bd70      	pop	{r4, r5, r6, pc}
 801d074:	f7f8 fa00 	bl	8015478 <rcutils_reset_error>
 801d078:	f640 0036 	movw	r0, #2102	; 0x836
 801d07c:	bd70      	pop	{r4, r5, r6, pc}
 801d07e:	f640 0036 	movw	r0, #2102	; 0x836
 801d082:	bd70      	pop	{r4, r5, r6, pc}
 801d084:	200b      	movs	r0, #11
 801d086:	bd70      	pop	{r4, r5, r6, pc}
 801d088:	f640 0036 	movw	r0, #2102	; 0x836
 801d08c:	4770      	bx	lr
 801d08e:	bf00      	nop

0801d090 <rcl_action_send_result_request>:
 801d090:	b390      	cbz	r0, 801d0f8 <rcl_action_send_result_request+0x68>
 801d092:	b570      	push	{r4, r5, r6, lr}
 801d094:	4604      	mov	r4, r0
 801d096:	6800      	ldr	r0, [r0, #0]
 801d098:	b348      	cbz	r0, 801d0ee <rcl_action_send_result_request+0x5e>
 801d09a:	460e      	mov	r6, r1
 801d09c:	4615      	mov	r5, r2
 801d09e:	f7fe fb87 	bl	801b7b0 <rcl_client_is_valid>
 801d0a2:	b1f8      	cbz	r0, 801d0e4 <rcl_action_send_result_request+0x54>
 801d0a4:	6820      	ldr	r0, [r4, #0]
 801d0a6:	3004      	adds	r0, #4
 801d0a8:	f7fe fb82 	bl	801b7b0 <rcl_client_is_valid>
 801d0ac:	b1d0      	cbz	r0, 801d0e4 <rcl_action_send_result_request+0x54>
 801d0ae:	6820      	ldr	r0, [r4, #0]
 801d0b0:	3008      	adds	r0, #8
 801d0b2:	f7fe fb7d 	bl	801b7b0 <rcl_client_is_valid>
 801d0b6:	b1a8      	cbz	r0, 801d0e4 <rcl_action_send_result_request+0x54>
 801d0b8:	6820      	ldr	r0, [r4, #0]
 801d0ba:	300c      	adds	r0, #12
 801d0bc:	f7f7 f9bc 	bl	8014438 <rcl_subscription_is_valid>
 801d0c0:	b180      	cbz	r0, 801d0e4 <rcl_action_send_result_request+0x54>
 801d0c2:	6820      	ldr	r0, [r4, #0]
 801d0c4:	3010      	adds	r0, #16
 801d0c6:	f7f7 f9b7 	bl	8014438 <rcl_subscription_is_valid>
 801d0ca:	b158      	cbz	r0, 801d0e4 <rcl_action_send_result_request+0x54>
 801d0cc:	b195      	cbz	r5, 801d0f4 <rcl_action_send_result_request+0x64>
 801d0ce:	b18e      	cbz	r6, 801d0f4 <rcl_action_send_result_request+0x64>
 801d0d0:	6820      	ldr	r0, [r4, #0]
 801d0d2:	462a      	mov	r2, r5
 801d0d4:	4631      	mov	r1, r6
 801d0d6:	3008      	adds	r0, #8
 801d0d8:	f7fe faea 	bl	801b6b0 <rcl_send_request>
 801d0dc:	3800      	subs	r0, #0
 801d0de:	bf18      	it	ne
 801d0e0:	2001      	movne	r0, #1
 801d0e2:	bd70      	pop	{r4, r5, r6, pc}
 801d0e4:	f7f8 f9c8 	bl	8015478 <rcutils_reset_error>
 801d0e8:	f640 0036 	movw	r0, #2102	; 0x836
 801d0ec:	bd70      	pop	{r4, r5, r6, pc}
 801d0ee:	f640 0036 	movw	r0, #2102	; 0x836
 801d0f2:	bd70      	pop	{r4, r5, r6, pc}
 801d0f4:	200b      	movs	r0, #11
 801d0f6:	bd70      	pop	{r4, r5, r6, pc}
 801d0f8:	f640 0036 	movw	r0, #2102	; 0x836
 801d0fc:	4770      	bx	lr
 801d0fe:	bf00      	nop

0801d100 <rcl_action_take_result_response>:
 801d100:	2800      	cmp	r0, #0
 801d102:	d03a      	beq.n	801d17a <rcl_action_take_result_response+0x7a>
 801d104:	b570      	push	{r4, r5, r6, lr}
 801d106:	4604      	mov	r4, r0
 801d108:	6800      	ldr	r0, [r0, #0]
 801d10a:	b388      	cbz	r0, 801d170 <rcl_action_take_result_response+0x70>
 801d10c:	460e      	mov	r6, r1
 801d10e:	4615      	mov	r5, r2
 801d110:	f7fe fb4e 	bl	801b7b0 <rcl_client_is_valid>
 801d114:	b338      	cbz	r0, 801d166 <rcl_action_take_result_response+0x66>
 801d116:	6820      	ldr	r0, [r4, #0]
 801d118:	3004      	adds	r0, #4
 801d11a:	f7fe fb49 	bl	801b7b0 <rcl_client_is_valid>
 801d11e:	b310      	cbz	r0, 801d166 <rcl_action_take_result_response+0x66>
 801d120:	6820      	ldr	r0, [r4, #0]
 801d122:	3008      	adds	r0, #8
 801d124:	f7fe fb44 	bl	801b7b0 <rcl_client_is_valid>
 801d128:	b1e8      	cbz	r0, 801d166 <rcl_action_take_result_response+0x66>
 801d12a:	6820      	ldr	r0, [r4, #0]
 801d12c:	300c      	adds	r0, #12
 801d12e:	f7f7 f983 	bl	8014438 <rcl_subscription_is_valid>
 801d132:	b1c0      	cbz	r0, 801d166 <rcl_action_take_result_response+0x66>
 801d134:	6820      	ldr	r0, [r4, #0]
 801d136:	3010      	adds	r0, #16
 801d138:	f7f7 f97e 	bl	8014438 <rcl_subscription_is_valid>
 801d13c:	b198      	cbz	r0, 801d166 <rcl_action_take_result_response+0x66>
 801d13e:	b1d5      	cbz	r5, 801d176 <rcl_action_take_result_response+0x76>
 801d140:	b1ce      	cbz	r6, 801d176 <rcl_action_take_result_response+0x76>
 801d142:	6820      	ldr	r0, [r4, #0]
 801d144:	462a      	mov	r2, r5
 801d146:	4631      	mov	r1, r6
 801d148:	3008      	adds	r0, #8
 801d14a:	f7fe fae9 	bl	801b720 <rcl_take_response>
 801d14e:	b148      	cbz	r0, 801d164 <rcl_action_take_result_response+0x64>
 801d150:	280a      	cmp	r0, #10
 801d152:	d007      	beq.n	801d164 <rcl_action_take_result_response+0x64>
 801d154:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d158:	f640 0337 	movw	r3, #2103	; 0x837
 801d15c:	4290      	cmp	r0, r2
 801d15e:	bf0c      	ite	eq
 801d160:	4618      	moveq	r0, r3
 801d162:	2001      	movne	r0, #1
 801d164:	bd70      	pop	{r4, r5, r6, pc}
 801d166:	f7f8 f987 	bl	8015478 <rcutils_reset_error>
 801d16a:	f640 0036 	movw	r0, #2102	; 0x836
 801d16e:	bd70      	pop	{r4, r5, r6, pc}
 801d170:	f640 0036 	movw	r0, #2102	; 0x836
 801d174:	bd70      	pop	{r4, r5, r6, pc}
 801d176:	200b      	movs	r0, #11
 801d178:	bd70      	pop	{r4, r5, r6, pc}
 801d17a:	f640 0036 	movw	r0, #2102	; 0x836
 801d17e:	4770      	bx	lr

0801d180 <rcl_action_take_cancel_response>:
 801d180:	2800      	cmp	r0, #0
 801d182:	d03a      	beq.n	801d1fa <rcl_action_take_cancel_response+0x7a>
 801d184:	b570      	push	{r4, r5, r6, lr}
 801d186:	4604      	mov	r4, r0
 801d188:	6800      	ldr	r0, [r0, #0]
 801d18a:	b388      	cbz	r0, 801d1f0 <rcl_action_take_cancel_response+0x70>
 801d18c:	460e      	mov	r6, r1
 801d18e:	4615      	mov	r5, r2
 801d190:	f7fe fb0e 	bl	801b7b0 <rcl_client_is_valid>
 801d194:	b338      	cbz	r0, 801d1e6 <rcl_action_take_cancel_response+0x66>
 801d196:	6820      	ldr	r0, [r4, #0]
 801d198:	3004      	adds	r0, #4
 801d19a:	f7fe fb09 	bl	801b7b0 <rcl_client_is_valid>
 801d19e:	b310      	cbz	r0, 801d1e6 <rcl_action_take_cancel_response+0x66>
 801d1a0:	6820      	ldr	r0, [r4, #0]
 801d1a2:	3008      	adds	r0, #8
 801d1a4:	f7fe fb04 	bl	801b7b0 <rcl_client_is_valid>
 801d1a8:	b1e8      	cbz	r0, 801d1e6 <rcl_action_take_cancel_response+0x66>
 801d1aa:	6820      	ldr	r0, [r4, #0]
 801d1ac:	300c      	adds	r0, #12
 801d1ae:	f7f7 f943 	bl	8014438 <rcl_subscription_is_valid>
 801d1b2:	b1c0      	cbz	r0, 801d1e6 <rcl_action_take_cancel_response+0x66>
 801d1b4:	6820      	ldr	r0, [r4, #0]
 801d1b6:	3010      	adds	r0, #16
 801d1b8:	f7f7 f93e 	bl	8014438 <rcl_subscription_is_valid>
 801d1bc:	b198      	cbz	r0, 801d1e6 <rcl_action_take_cancel_response+0x66>
 801d1be:	b1d5      	cbz	r5, 801d1f6 <rcl_action_take_cancel_response+0x76>
 801d1c0:	b1ce      	cbz	r6, 801d1f6 <rcl_action_take_cancel_response+0x76>
 801d1c2:	6820      	ldr	r0, [r4, #0]
 801d1c4:	462a      	mov	r2, r5
 801d1c6:	4631      	mov	r1, r6
 801d1c8:	3004      	adds	r0, #4
 801d1ca:	f7fe faa9 	bl	801b720 <rcl_take_response>
 801d1ce:	b148      	cbz	r0, 801d1e4 <rcl_action_take_cancel_response+0x64>
 801d1d0:	280a      	cmp	r0, #10
 801d1d2:	d007      	beq.n	801d1e4 <rcl_action_take_cancel_response+0x64>
 801d1d4:	f240 12f5 	movw	r2, #501	; 0x1f5
 801d1d8:	f640 0337 	movw	r3, #2103	; 0x837
 801d1dc:	4290      	cmp	r0, r2
 801d1de:	bf0c      	ite	eq
 801d1e0:	4618      	moveq	r0, r3
 801d1e2:	2001      	movne	r0, #1
 801d1e4:	bd70      	pop	{r4, r5, r6, pc}
 801d1e6:	f7f8 f947 	bl	8015478 <rcutils_reset_error>
 801d1ea:	f640 0036 	movw	r0, #2102	; 0x836
 801d1ee:	bd70      	pop	{r4, r5, r6, pc}
 801d1f0:	f640 0036 	movw	r0, #2102	; 0x836
 801d1f4:	bd70      	pop	{r4, r5, r6, pc}
 801d1f6:	200b      	movs	r0, #11
 801d1f8:	bd70      	pop	{r4, r5, r6, pc}
 801d1fa:	f640 0036 	movw	r0, #2102	; 0x836
 801d1fe:	4770      	bx	lr

0801d200 <rcl_action_take_feedback>:
 801d200:	2800      	cmp	r0, #0
 801d202:	d038      	beq.n	801d276 <rcl_action_take_feedback+0x76>
 801d204:	b530      	push	{r4, r5, lr}
 801d206:	4604      	mov	r4, r0
 801d208:	6800      	ldr	r0, [r0, #0]
 801d20a:	b091      	sub	sp, #68	; 0x44
 801d20c:	b378      	cbz	r0, 801d26e <rcl_action_take_feedback+0x6e>
 801d20e:	460d      	mov	r5, r1
 801d210:	f7fe face 	bl	801b7b0 <rcl_client_is_valid>
 801d214:	b328      	cbz	r0, 801d262 <rcl_action_take_feedback+0x62>
 801d216:	6820      	ldr	r0, [r4, #0]
 801d218:	3004      	adds	r0, #4
 801d21a:	f7fe fac9 	bl	801b7b0 <rcl_client_is_valid>
 801d21e:	b300      	cbz	r0, 801d262 <rcl_action_take_feedback+0x62>
 801d220:	6820      	ldr	r0, [r4, #0]
 801d222:	3008      	adds	r0, #8
 801d224:	f7fe fac4 	bl	801b7b0 <rcl_client_is_valid>
 801d228:	b1d8      	cbz	r0, 801d262 <rcl_action_take_feedback+0x62>
 801d22a:	6820      	ldr	r0, [r4, #0]
 801d22c:	300c      	adds	r0, #12
 801d22e:	f7f7 f903 	bl	8014438 <rcl_subscription_is_valid>
 801d232:	b1b0      	cbz	r0, 801d262 <rcl_action_take_feedback+0x62>
 801d234:	6820      	ldr	r0, [r4, #0]
 801d236:	3010      	adds	r0, #16
 801d238:	f7f7 f8fe 	bl	8014438 <rcl_subscription_is_valid>
 801d23c:	b188      	cbz	r0, 801d262 <rcl_action_take_feedback+0x62>
 801d23e:	b1ed      	cbz	r5, 801d27c <rcl_action_take_feedback+0x7c>
 801d240:	6820      	ldr	r0, [r4, #0]
 801d242:	2300      	movs	r3, #0
 801d244:	466a      	mov	r2, sp
 801d246:	4629      	mov	r1, r5
 801d248:	300c      	adds	r0, #12
 801d24a:	f7f7 f899 	bl	8014380 <rcl_take>
 801d24e:	b160      	cbz	r0, 801d26a <rcl_action_take_feedback+0x6a>
 801d250:	f240 1391 	movw	r3, #401	; 0x191
 801d254:	4298      	cmp	r0, r3
 801d256:	d014      	beq.n	801d282 <rcl_action_take_feedback+0x82>
 801d258:	280a      	cmp	r0, #10
 801d25a:	bf18      	it	ne
 801d25c:	2001      	movne	r0, #1
 801d25e:	b011      	add	sp, #68	; 0x44
 801d260:	bd30      	pop	{r4, r5, pc}
 801d262:	f7f8 f909 	bl	8015478 <rcutils_reset_error>
 801d266:	f640 0036 	movw	r0, #2102	; 0x836
 801d26a:	b011      	add	sp, #68	; 0x44
 801d26c:	bd30      	pop	{r4, r5, pc}
 801d26e:	f640 0036 	movw	r0, #2102	; 0x836
 801d272:	b011      	add	sp, #68	; 0x44
 801d274:	bd30      	pop	{r4, r5, pc}
 801d276:	f640 0036 	movw	r0, #2102	; 0x836
 801d27a:	4770      	bx	lr
 801d27c:	200b      	movs	r0, #11
 801d27e:	b011      	add	sp, #68	; 0x44
 801d280:	bd30      	pop	{r4, r5, pc}
 801d282:	f640 0037 	movw	r0, #2103	; 0x837
 801d286:	e7f0      	b.n	801d26a <rcl_action_take_feedback+0x6a>

0801d288 <rcl_action_wait_set_add_action_client>:
 801d288:	2800      	cmp	r0, #0
 801d28a:	d048      	beq.n	801d31e <rcl_action_wait_set_add_action_client+0x96>
 801d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d28e:	460c      	mov	r4, r1
 801d290:	2900      	cmp	r1, #0
 801d292:	d03c      	beq.n	801d30e <rcl_action_wait_set_add_action_client+0x86>
 801d294:	4605      	mov	r5, r0
 801d296:	6808      	ldr	r0, [r1, #0]
 801d298:	2800      	cmp	r0, #0
 801d29a:	d038      	beq.n	801d30e <rcl_action_wait_set_add_action_client+0x86>
 801d29c:	4617      	mov	r7, r2
 801d29e:	461e      	mov	r6, r3
 801d2a0:	f7fe fa86 	bl	801b7b0 <rcl_client_is_valid>
 801d2a4:	b3b0      	cbz	r0, 801d314 <rcl_action_wait_set_add_action_client+0x8c>
 801d2a6:	6820      	ldr	r0, [r4, #0]
 801d2a8:	3004      	adds	r0, #4
 801d2aa:	f7fe fa81 	bl	801b7b0 <rcl_client_is_valid>
 801d2ae:	b388      	cbz	r0, 801d314 <rcl_action_wait_set_add_action_client+0x8c>
 801d2b0:	6820      	ldr	r0, [r4, #0]
 801d2b2:	3008      	adds	r0, #8
 801d2b4:	f7fe fa7c 	bl	801b7b0 <rcl_client_is_valid>
 801d2b8:	b360      	cbz	r0, 801d314 <rcl_action_wait_set_add_action_client+0x8c>
 801d2ba:	6820      	ldr	r0, [r4, #0]
 801d2bc:	300c      	adds	r0, #12
 801d2be:	f7f7 f8bb 	bl	8014438 <rcl_subscription_is_valid>
 801d2c2:	b338      	cbz	r0, 801d314 <rcl_action_wait_set_add_action_client+0x8c>
 801d2c4:	6820      	ldr	r0, [r4, #0]
 801d2c6:	3010      	adds	r0, #16
 801d2c8:	f7f7 f8b6 	bl	8014438 <rcl_subscription_is_valid>
 801d2cc:	b310      	cbz	r0, 801d314 <rcl_action_wait_set_add_action_client+0x8c>
 801d2ce:	6821      	ldr	r1, [r4, #0]
 801d2d0:	4628      	mov	r0, r5
 801d2d2:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801d2d6:	f7ff fcd1 	bl	801cc7c <rcl_wait_set_add_client>
 801d2da:	b9b8      	cbnz	r0, 801d30c <rcl_action_wait_set_add_action_client+0x84>
 801d2dc:	6821      	ldr	r1, [r4, #0]
 801d2de:	4628      	mov	r0, r5
 801d2e0:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801d2e4:	3104      	adds	r1, #4
 801d2e6:	f7ff fcc9 	bl	801cc7c <rcl_wait_set_add_client>
 801d2ea:	b978      	cbnz	r0, 801d30c <rcl_action_wait_set_add_action_client+0x84>
 801d2ec:	6821      	ldr	r1, [r4, #0]
 801d2ee:	4628      	mov	r0, r5
 801d2f0:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801d2f4:	3108      	adds	r1, #8
 801d2f6:	f7ff fcc1 	bl	801cc7c <rcl_wait_set_add_client>
 801d2fa:	b938      	cbnz	r0, 801d30c <rcl_action_wait_set_add_action_client+0x84>
 801d2fc:	6821      	ldr	r1, [r4, #0]
 801d2fe:	4628      	mov	r0, r5
 801d300:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801d304:	310c      	adds	r1, #12
 801d306:	f7ff f969 	bl	801c5dc <rcl_wait_set_add_subscription>
 801d30a:	b158      	cbz	r0, 801d324 <rcl_action_wait_set_add_action_client+0x9c>
 801d30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d30e:	f640 0036 	movw	r0, #2102	; 0x836
 801d312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d314:	f7f8 f8b0 	bl	8015478 <rcutils_reset_error>
 801d318:	f640 0036 	movw	r0, #2102	; 0x836
 801d31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d31e:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d322:	4770      	bx	lr
 801d324:	6821      	ldr	r1, [r4, #0]
 801d326:	4628      	mov	r0, r5
 801d328:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801d32c:	3110      	adds	r1, #16
 801d32e:	f7ff f955 	bl	801c5dc <rcl_wait_set_add_subscription>
 801d332:	2800      	cmp	r0, #0
 801d334:	d1ea      	bne.n	801d30c <rcl_action_wait_set_add_action_client+0x84>
 801d336:	b11f      	cbz	r7, 801d340 <rcl_action_wait_set_add_action_client+0xb8>
 801d338:	6823      	ldr	r3, [r4, #0]
 801d33a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801d33e:	603b      	str	r3, [r7, #0]
 801d340:	2e00      	cmp	r6, #0
 801d342:	d0e3      	beq.n	801d30c <rcl_action_wait_set_add_action_client+0x84>
 801d344:	6823      	ldr	r3, [r4, #0]
 801d346:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 801d34a:	6033      	str	r3, [r6, #0]
 801d34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d34e:	bf00      	nop

0801d350 <rcl_action_client_wait_set_get_entities_ready>:
 801d350:	2800      	cmp	r0, #0
 801d352:	d050      	beq.n	801d3f6 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801d354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d358:	460c      	mov	r4, r1
 801d35a:	2900      	cmp	r1, #0
 801d35c:	d03e      	beq.n	801d3dc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d35e:	4605      	mov	r5, r0
 801d360:	6808      	ldr	r0, [r1, #0]
 801d362:	2800      	cmp	r0, #0
 801d364:	d03a      	beq.n	801d3dc <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801d366:	4616      	mov	r6, r2
 801d368:	461f      	mov	r7, r3
 801d36a:	f7fe fa21 	bl	801b7b0 <rcl_client_is_valid>
 801d36e:	2800      	cmp	r0, #0
 801d370:	d038      	beq.n	801d3e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d372:	6820      	ldr	r0, [r4, #0]
 801d374:	3004      	adds	r0, #4
 801d376:	f7fe fa1b 	bl	801b7b0 <rcl_client_is_valid>
 801d37a:	2800      	cmp	r0, #0
 801d37c:	d032      	beq.n	801d3e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d37e:	6820      	ldr	r0, [r4, #0]
 801d380:	3008      	adds	r0, #8
 801d382:	f7fe fa15 	bl	801b7b0 <rcl_client_is_valid>
 801d386:	b368      	cbz	r0, 801d3e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d388:	6820      	ldr	r0, [r4, #0]
 801d38a:	300c      	adds	r0, #12
 801d38c:	f7f7 f854 	bl	8014438 <rcl_subscription_is_valid>
 801d390:	b340      	cbz	r0, 801d3e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d392:	6820      	ldr	r0, [r4, #0]
 801d394:	3010      	adds	r0, #16
 801d396:	f7f7 f84f 	bl	8014438 <rcl_subscription_is_valid>
 801d39a:	b318      	cbz	r0, 801d3e4 <rcl_action_client_wait_set_get_entities_ready+0x94>
 801d39c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801d3a0:	2a00      	cmp	r2, #0
 801d3a2:	bf18      	it	ne
 801d3a4:	2b00      	cmpne	r3, #0
 801d3a6:	9b08      	ldr	r3, [sp, #32]
 801d3a8:	bf0c      	ite	eq
 801d3aa:	2101      	moveq	r1, #1
 801d3ac:	2100      	movne	r1, #0
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	bf08      	it	eq
 801d3b2:	f041 0101 	orreq.w	r1, r1, #1
 801d3b6:	2f00      	cmp	r7, #0
 801d3b8:	bf08      	it	eq
 801d3ba:	f041 0101 	orreq.w	r1, r1, #1
 801d3be:	b9b9      	cbnz	r1, 801d3f0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d3c0:	b1b6      	cbz	r6, 801d3f0 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801d3c2:	6823      	ldr	r3, [r4, #0]
 801d3c4:	686c      	ldr	r4, [r5, #4]
 801d3c6:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801d3ca:	428a      	cmp	r2, r1
 801d3cc:	4610      	mov	r0, r2
 801d3ce:	bf38      	it	cc
 801d3d0:	4608      	movcc	r0, r1
 801d3d2:	4284      	cmp	r4, r0
 801d3d4:	d812      	bhi.n	801d3fc <rcl_action_client_wait_set_get_entities_ready+0xac>
 801d3d6:	2001      	movs	r0, #1
 801d3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3dc:	f640 0036 	movw	r0, #2102	; 0x836
 801d3e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3e4:	f7f8 f848 	bl	8015478 <rcutils_reset_error>
 801d3e8:	f640 0036 	movw	r0, #2102	; 0x836
 801d3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3f0:	200b      	movs	r0, #11
 801d3f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3f6:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d3fa:	4770      	bx	lr
 801d3fc:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 801d400:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801d404:	45f0      	cmp	r8, lr
 801d406:	4640      	mov	r0, r8
 801d408:	69ec      	ldr	r4, [r5, #28]
 801d40a:	bf38      	it	cc
 801d40c:	4670      	movcc	r0, lr
 801d40e:	4560      	cmp	r0, ip
 801d410:	bf38      	it	cc
 801d412:	4660      	movcc	r0, ip
 801d414:	4284      	cmp	r4, r0
 801d416:	d9de      	bls.n	801d3d6 <rcl_action_client_wait_set_get_entities_ready+0x86>
 801d418:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801d41c:	682d      	ldr	r5, [r5, #0]
 801d41e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801d422:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801d426:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d42a:	1a18      	subs	r0, r3, r0
 801d42c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 801d430:	f103 0c0c 	add.w	ip, r3, #12
 801d434:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 801d438:	fab0 f080 	clz	r0, r0
 801d43c:	eba5 050c 	sub.w	r5, r5, ip
 801d440:	0940      	lsrs	r0, r0, #5
 801d442:	fab5 f585 	clz	r5, r5
 801d446:	096d      	lsrs	r5, r5, #5
 801d448:	7035      	strb	r5, [r6, #0]
 801d44a:	f103 0510 	add.w	r5, r3, #16
 801d44e:	1b64      	subs	r4, r4, r5
 801d450:	9d08      	ldr	r5, [sp, #32]
 801d452:	fab4 f484 	clz	r4, r4
 801d456:	0964      	lsrs	r4, r4, #5
 801d458:	703c      	strb	r4, [r7, #0]
 801d45a:	1d1c      	adds	r4, r3, #4
 801d45c:	3308      	adds	r3, #8
 801d45e:	7028      	strb	r0, [r5, #0]
 801d460:	1b09      	subs	r1, r1, r4
 801d462:	2000      	movs	r0, #0
 801d464:	1ad3      	subs	r3, r2, r3
 801d466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d468:	fab1 f181 	clz	r1, r1
 801d46c:	fab3 f383 	clz	r3, r3
 801d470:	0949      	lsrs	r1, r1, #5
 801d472:	095b      	lsrs	r3, r3, #5
 801d474:	7011      	strb	r1, [r2, #0]
 801d476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d478:	7013      	strb	r3, [r2, #0]
 801d47a:	e7b1      	b.n	801d3e0 <rcl_action_client_wait_set_get_entities_ready+0x90>

0801d47c <rcl_action_take_goal_request>:
 801d47c:	2800      	cmp	r0, #0
 801d47e:	d039      	beq.n	801d4f4 <rcl_action_take_goal_request+0x78>
 801d480:	b570      	push	{r4, r5, r6, lr}
 801d482:	4604      	mov	r4, r0
 801d484:	6800      	ldr	r0, [r0, #0]
 801d486:	b380      	cbz	r0, 801d4ea <rcl_action_take_goal_request+0x6e>
 801d488:	460e      	mov	r6, r1
 801d48a:	4615      	mov	r5, r2
 801d48c:	f7f6 fe8c 	bl	80141a8 <rcl_service_is_valid>
 801d490:	b330      	cbz	r0, 801d4e0 <rcl_action_take_goal_request+0x64>
 801d492:	6820      	ldr	r0, [r4, #0]
 801d494:	3004      	adds	r0, #4
 801d496:	f7f6 fe87 	bl	80141a8 <rcl_service_is_valid>
 801d49a:	b308      	cbz	r0, 801d4e0 <rcl_action_take_goal_request+0x64>
 801d49c:	6820      	ldr	r0, [r4, #0]
 801d49e:	3008      	adds	r0, #8
 801d4a0:	f7f6 fe82 	bl	80141a8 <rcl_service_is_valid>
 801d4a4:	b1e0      	cbz	r0, 801d4e0 <rcl_action_take_goal_request+0x64>
 801d4a6:	6820      	ldr	r0, [r4, #0]
 801d4a8:	300c      	adds	r0, #12
 801d4aa:	f7f6 fd41 	bl	8013f30 <rcl_publisher_is_valid>
 801d4ae:	b1b8      	cbz	r0, 801d4e0 <rcl_action_take_goal_request+0x64>
 801d4b0:	6820      	ldr	r0, [r4, #0]
 801d4b2:	3010      	adds	r0, #16
 801d4b4:	f7f6 fd3c 	bl	8013f30 <rcl_publisher_is_valid>
 801d4b8:	b190      	cbz	r0, 801d4e0 <rcl_action_take_goal_request+0x64>
 801d4ba:	b1cd      	cbz	r5, 801d4f0 <rcl_action_take_goal_request+0x74>
 801d4bc:	b1c6      	cbz	r6, 801d4f0 <rcl_action_take_goal_request+0x74>
 801d4be:	462a      	mov	r2, r5
 801d4c0:	4631      	mov	r1, r6
 801d4c2:	6820      	ldr	r0, [r4, #0]
 801d4c4:	f7f6 fe18 	bl	80140f8 <rcl_take_request>
 801d4c8:	b148      	cbz	r0, 801d4de <rcl_action_take_goal_request+0x62>
 801d4ca:	280a      	cmp	r0, #10
 801d4cc:	d007      	beq.n	801d4de <rcl_action_take_goal_request+0x62>
 801d4ce:	f240 2259 	movw	r2, #601	; 0x259
 801d4d2:	f640 0399 	movw	r3, #2201	; 0x899
 801d4d6:	4290      	cmp	r0, r2
 801d4d8:	bf0c      	ite	eq
 801d4da:	4618      	moveq	r0, r3
 801d4dc:	2001      	movne	r0, #1
 801d4de:	bd70      	pop	{r4, r5, r6, pc}
 801d4e0:	f7f7 ffca 	bl	8015478 <rcutils_reset_error>
 801d4e4:	f640 0098 	movw	r0, #2200	; 0x898
 801d4e8:	bd70      	pop	{r4, r5, r6, pc}
 801d4ea:	f640 0098 	movw	r0, #2200	; 0x898
 801d4ee:	bd70      	pop	{r4, r5, r6, pc}
 801d4f0:	200b      	movs	r0, #11
 801d4f2:	bd70      	pop	{r4, r5, r6, pc}
 801d4f4:	f640 0098 	movw	r0, #2200	; 0x898
 801d4f8:	4770      	bx	lr
 801d4fa:	bf00      	nop

0801d4fc <rcl_action_send_goal_response>:
 801d4fc:	b388      	cbz	r0, 801d562 <rcl_action_send_goal_response+0x66>
 801d4fe:	b570      	push	{r4, r5, r6, lr}
 801d500:	4604      	mov	r4, r0
 801d502:	6800      	ldr	r0, [r0, #0]
 801d504:	b340      	cbz	r0, 801d558 <rcl_action_send_goal_response+0x5c>
 801d506:	460e      	mov	r6, r1
 801d508:	4615      	mov	r5, r2
 801d50a:	f7f6 fe4d 	bl	80141a8 <rcl_service_is_valid>
 801d50e:	b1f0      	cbz	r0, 801d54e <rcl_action_send_goal_response+0x52>
 801d510:	6820      	ldr	r0, [r4, #0]
 801d512:	3004      	adds	r0, #4
 801d514:	f7f6 fe48 	bl	80141a8 <rcl_service_is_valid>
 801d518:	b1c8      	cbz	r0, 801d54e <rcl_action_send_goal_response+0x52>
 801d51a:	6820      	ldr	r0, [r4, #0]
 801d51c:	3008      	adds	r0, #8
 801d51e:	f7f6 fe43 	bl	80141a8 <rcl_service_is_valid>
 801d522:	b1a0      	cbz	r0, 801d54e <rcl_action_send_goal_response+0x52>
 801d524:	6820      	ldr	r0, [r4, #0]
 801d526:	300c      	adds	r0, #12
 801d528:	f7f6 fd02 	bl	8013f30 <rcl_publisher_is_valid>
 801d52c:	b178      	cbz	r0, 801d54e <rcl_action_send_goal_response+0x52>
 801d52e:	6820      	ldr	r0, [r4, #0]
 801d530:	3010      	adds	r0, #16
 801d532:	f7f6 fcfd 	bl	8013f30 <rcl_publisher_is_valid>
 801d536:	b150      	cbz	r0, 801d54e <rcl_action_send_goal_response+0x52>
 801d538:	b18d      	cbz	r5, 801d55e <rcl_action_send_goal_response+0x62>
 801d53a:	b186      	cbz	r6, 801d55e <rcl_action_send_goal_response+0x62>
 801d53c:	462a      	mov	r2, r5
 801d53e:	4631      	mov	r1, r6
 801d540:	6820      	ldr	r0, [r4, #0]
 801d542:	f7f6 fe19 	bl	8014178 <rcl_send_response>
 801d546:	3800      	subs	r0, #0
 801d548:	bf18      	it	ne
 801d54a:	2001      	movne	r0, #1
 801d54c:	bd70      	pop	{r4, r5, r6, pc}
 801d54e:	f7f7 ff93 	bl	8015478 <rcutils_reset_error>
 801d552:	f640 0098 	movw	r0, #2200	; 0x898
 801d556:	bd70      	pop	{r4, r5, r6, pc}
 801d558:	f640 0098 	movw	r0, #2200	; 0x898
 801d55c:	bd70      	pop	{r4, r5, r6, pc}
 801d55e:	200b      	movs	r0, #11
 801d560:	bd70      	pop	{r4, r5, r6, pc}
 801d562:	f640 0098 	movw	r0, #2200	; 0x898
 801d566:	4770      	bx	lr

0801d568 <rcl_action_take_result_request>:
 801d568:	2800      	cmp	r0, #0
 801d56a:	d03a      	beq.n	801d5e2 <rcl_action_take_result_request+0x7a>
 801d56c:	b570      	push	{r4, r5, r6, lr}
 801d56e:	4604      	mov	r4, r0
 801d570:	6800      	ldr	r0, [r0, #0]
 801d572:	b388      	cbz	r0, 801d5d8 <rcl_action_take_result_request+0x70>
 801d574:	460e      	mov	r6, r1
 801d576:	4615      	mov	r5, r2
 801d578:	f7f6 fe16 	bl	80141a8 <rcl_service_is_valid>
 801d57c:	b338      	cbz	r0, 801d5ce <rcl_action_take_result_request+0x66>
 801d57e:	6820      	ldr	r0, [r4, #0]
 801d580:	3004      	adds	r0, #4
 801d582:	f7f6 fe11 	bl	80141a8 <rcl_service_is_valid>
 801d586:	b310      	cbz	r0, 801d5ce <rcl_action_take_result_request+0x66>
 801d588:	6820      	ldr	r0, [r4, #0]
 801d58a:	3008      	adds	r0, #8
 801d58c:	f7f6 fe0c 	bl	80141a8 <rcl_service_is_valid>
 801d590:	b1e8      	cbz	r0, 801d5ce <rcl_action_take_result_request+0x66>
 801d592:	6820      	ldr	r0, [r4, #0]
 801d594:	300c      	adds	r0, #12
 801d596:	f7f6 fccb 	bl	8013f30 <rcl_publisher_is_valid>
 801d59a:	b1c0      	cbz	r0, 801d5ce <rcl_action_take_result_request+0x66>
 801d59c:	6820      	ldr	r0, [r4, #0]
 801d59e:	3010      	adds	r0, #16
 801d5a0:	f7f6 fcc6 	bl	8013f30 <rcl_publisher_is_valid>
 801d5a4:	b198      	cbz	r0, 801d5ce <rcl_action_take_result_request+0x66>
 801d5a6:	b1d5      	cbz	r5, 801d5de <rcl_action_take_result_request+0x76>
 801d5a8:	b1ce      	cbz	r6, 801d5de <rcl_action_take_result_request+0x76>
 801d5aa:	6820      	ldr	r0, [r4, #0]
 801d5ac:	462a      	mov	r2, r5
 801d5ae:	4631      	mov	r1, r6
 801d5b0:	3008      	adds	r0, #8
 801d5b2:	f7f6 fda1 	bl	80140f8 <rcl_take_request>
 801d5b6:	b148      	cbz	r0, 801d5cc <rcl_action_take_result_request+0x64>
 801d5b8:	280a      	cmp	r0, #10
 801d5ba:	d007      	beq.n	801d5cc <rcl_action_take_result_request+0x64>
 801d5bc:	f240 2259 	movw	r2, #601	; 0x259
 801d5c0:	f640 0399 	movw	r3, #2201	; 0x899
 801d5c4:	4290      	cmp	r0, r2
 801d5c6:	bf0c      	ite	eq
 801d5c8:	4618      	moveq	r0, r3
 801d5ca:	2001      	movne	r0, #1
 801d5cc:	bd70      	pop	{r4, r5, r6, pc}
 801d5ce:	f7f7 ff53 	bl	8015478 <rcutils_reset_error>
 801d5d2:	f640 0098 	movw	r0, #2200	; 0x898
 801d5d6:	bd70      	pop	{r4, r5, r6, pc}
 801d5d8:	f640 0098 	movw	r0, #2200	; 0x898
 801d5dc:	bd70      	pop	{r4, r5, r6, pc}
 801d5de:	200b      	movs	r0, #11
 801d5e0:	bd70      	pop	{r4, r5, r6, pc}
 801d5e2:	f640 0098 	movw	r0, #2200	; 0x898
 801d5e6:	4770      	bx	lr

0801d5e8 <rcl_action_take_cancel_request>:
 801d5e8:	2800      	cmp	r0, #0
 801d5ea:	d03a      	beq.n	801d662 <rcl_action_take_cancel_request+0x7a>
 801d5ec:	b570      	push	{r4, r5, r6, lr}
 801d5ee:	4604      	mov	r4, r0
 801d5f0:	6800      	ldr	r0, [r0, #0]
 801d5f2:	b388      	cbz	r0, 801d658 <rcl_action_take_cancel_request+0x70>
 801d5f4:	460e      	mov	r6, r1
 801d5f6:	4615      	mov	r5, r2
 801d5f8:	f7f6 fdd6 	bl	80141a8 <rcl_service_is_valid>
 801d5fc:	b338      	cbz	r0, 801d64e <rcl_action_take_cancel_request+0x66>
 801d5fe:	6820      	ldr	r0, [r4, #0]
 801d600:	3004      	adds	r0, #4
 801d602:	f7f6 fdd1 	bl	80141a8 <rcl_service_is_valid>
 801d606:	b310      	cbz	r0, 801d64e <rcl_action_take_cancel_request+0x66>
 801d608:	6820      	ldr	r0, [r4, #0]
 801d60a:	3008      	adds	r0, #8
 801d60c:	f7f6 fdcc 	bl	80141a8 <rcl_service_is_valid>
 801d610:	b1e8      	cbz	r0, 801d64e <rcl_action_take_cancel_request+0x66>
 801d612:	6820      	ldr	r0, [r4, #0]
 801d614:	300c      	adds	r0, #12
 801d616:	f7f6 fc8b 	bl	8013f30 <rcl_publisher_is_valid>
 801d61a:	b1c0      	cbz	r0, 801d64e <rcl_action_take_cancel_request+0x66>
 801d61c:	6820      	ldr	r0, [r4, #0]
 801d61e:	3010      	adds	r0, #16
 801d620:	f7f6 fc86 	bl	8013f30 <rcl_publisher_is_valid>
 801d624:	b198      	cbz	r0, 801d64e <rcl_action_take_cancel_request+0x66>
 801d626:	b1d5      	cbz	r5, 801d65e <rcl_action_take_cancel_request+0x76>
 801d628:	b1ce      	cbz	r6, 801d65e <rcl_action_take_cancel_request+0x76>
 801d62a:	6820      	ldr	r0, [r4, #0]
 801d62c:	462a      	mov	r2, r5
 801d62e:	4631      	mov	r1, r6
 801d630:	3004      	adds	r0, #4
 801d632:	f7f6 fd61 	bl	80140f8 <rcl_take_request>
 801d636:	b148      	cbz	r0, 801d64c <rcl_action_take_cancel_request+0x64>
 801d638:	280a      	cmp	r0, #10
 801d63a:	d007      	beq.n	801d64c <rcl_action_take_cancel_request+0x64>
 801d63c:	f240 2259 	movw	r2, #601	; 0x259
 801d640:	f640 0399 	movw	r3, #2201	; 0x899
 801d644:	4290      	cmp	r0, r2
 801d646:	bf0c      	ite	eq
 801d648:	4618      	moveq	r0, r3
 801d64a:	2001      	movne	r0, #1
 801d64c:	bd70      	pop	{r4, r5, r6, pc}
 801d64e:	f7f7 ff13 	bl	8015478 <rcutils_reset_error>
 801d652:	f640 0098 	movw	r0, #2200	; 0x898
 801d656:	bd70      	pop	{r4, r5, r6, pc}
 801d658:	f640 0098 	movw	r0, #2200	; 0x898
 801d65c:	bd70      	pop	{r4, r5, r6, pc}
 801d65e:	200b      	movs	r0, #11
 801d660:	bd70      	pop	{r4, r5, r6, pc}
 801d662:	f640 0098 	movw	r0, #2200	; 0x898
 801d666:	4770      	bx	lr

0801d668 <rcl_action_send_cancel_response>:
 801d668:	b390      	cbz	r0, 801d6d0 <rcl_action_send_cancel_response+0x68>
 801d66a:	b570      	push	{r4, r5, r6, lr}
 801d66c:	4604      	mov	r4, r0
 801d66e:	6800      	ldr	r0, [r0, #0]
 801d670:	b348      	cbz	r0, 801d6c6 <rcl_action_send_cancel_response+0x5e>
 801d672:	460e      	mov	r6, r1
 801d674:	4615      	mov	r5, r2
 801d676:	f7f6 fd97 	bl	80141a8 <rcl_service_is_valid>
 801d67a:	b1f8      	cbz	r0, 801d6bc <rcl_action_send_cancel_response+0x54>
 801d67c:	6820      	ldr	r0, [r4, #0]
 801d67e:	3004      	adds	r0, #4
 801d680:	f7f6 fd92 	bl	80141a8 <rcl_service_is_valid>
 801d684:	b1d0      	cbz	r0, 801d6bc <rcl_action_send_cancel_response+0x54>
 801d686:	6820      	ldr	r0, [r4, #0]
 801d688:	3008      	adds	r0, #8
 801d68a:	f7f6 fd8d 	bl	80141a8 <rcl_service_is_valid>
 801d68e:	b1a8      	cbz	r0, 801d6bc <rcl_action_send_cancel_response+0x54>
 801d690:	6820      	ldr	r0, [r4, #0]
 801d692:	300c      	adds	r0, #12
 801d694:	f7f6 fc4c 	bl	8013f30 <rcl_publisher_is_valid>
 801d698:	b180      	cbz	r0, 801d6bc <rcl_action_send_cancel_response+0x54>
 801d69a:	6820      	ldr	r0, [r4, #0]
 801d69c:	3010      	adds	r0, #16
 801d69e:	f7f6 fc47 	bl	8013f30 <rcl_publisher_is_valid>
 801d6a2:	b158      	cbz	r0, 801d6bc <rcl_action_send_cancel_response+0x54>
 801d6a4:	b195      	cbz	r5, 801d6cc <rcl_action_send_cancel_response+0x64>
 801d6a6:	b18e      	cbz	r6, 801d6cc <rcl_action_send_cancel_response+0x64>
 801d6a8:	6820      	ldr	r0, [r4, #0]
 801d6aa:	462a      	mov	r2, r5
 801d6ac:	4631      	mov	r1, r6
 801d6ae:	3004      	adds	r0, #4
 801d6b0:	f7f6 fd62 	bl	8014178 <rcl_send_response>
 801d6b4:	3800      	subs	r0, #0
 801d6b6:	bf18      	it	ne
 801d6b8:	2001      	movne	r0, #1
 801d6ba:	bd70      	pop	{r4, r5, r6, pc}
 801d6bc:	f7f7 fedc 	bl	8015478 <rcutils_reset_error>
 801d6c0:	f640 0098 	movw	r0, #2200	; 0x898
 801d6c4:	bd70      	pop	{r4, r5, r6, pc}
 801d6c6:	f640 0098 	movw	r0, #2200	; 0x898
 801d6ca:	bd70      	pop	{r4, r5, r6, pc}
 801d6cc:	200b      	movs	r0, #11
 801d6ce:	bd70      	pop	{r4, r5, r6, pc}
 801d6d0:	f640 0098 	movw	r0, #2200	; 0x898
 801d6d4:	4770      	bx	lr
 801d6d6:	bf00      	nop

0801d6d8 <rcl_action_wait_set_add_action_server>:
 801d6d8:	2800      	cmp	r0, #0
 801d6da:	d04d      	beq.n	801d778 <rcl_action_wait_set_add_action_server+0xa0>
 801d6dc:	b570      	push	{r4, r5, r6, lr}
 801d6de:	460c      	mov	r4, r1
 801d6e0:	b159      	cbz	r1, 801d6fa <rcl_action_wait_set_add_action_server+0x22>
 801d6e2:	4605      	mov	r5, r0
 801d6e4:	6808      	ldr	r0, [r1, #0]
 801d6e6:	b140      	cbz	r0, 801d6fa <rcl_action_wait_set_add_action_server+0x22>
 801d6e8:	4616      	mov	r6, r2
 801d6ea:	f7f6 fd5d 	bl	80141a8 <rcl_service_is_valid>
 801d6ee:	b120      	cbz	r0, 801d6fa <rcl_action_wait_set_add_action_server+0x22>
 801d6f0:	6820      	ldr	r0, [r4, #0]
 801d6f2:	3004      	adds	r0, #4
 801d6f4:	f7f6 fd58 	bl	80141a8 <rcl_service_is_valid>
 801d6f8:	b910      	cbnz	r0, 801d700 <rcl_action_wait_set_add_action_server+0x28>
 801d6fa:	f640 0098 	movw	r0, #2200	; 0x898
 801d6fe:	bd70      	pop	{r4, r5, r6, pc}
 801d700:	6820      	ldr	r0, [r4, #0]
 801d702:	3008      	adds	r0, #8
 801d704:	f7f6 fd50 	bl	80141a8 <rcl_service_is_valid>
 801d708:	2800      	cmp	r0, #0
 801d70a:	d0f6      	beq.n	801d6fa <rcl_action_wait_set_add_action_server+0x22>
 801d70c:	6820      	ldr	r0, [r4, #0]
 801d70e:	300c      	adds	r0, #12
 801d710:	f7f6 fc26 	bl	8013f60 <rcl_publisher_is_valid_except_context>
 801d714:	2800      	cmp	r0, #0
 801d716:	d0f0      	beq.n	801d6fa <rcl_action_wait_set_add_action_server+0x22>
 801d718:	6820      	ldr	r0, [r4, #0]
 801d71a:	3010      	adds	r0, #16
 801d71c:	f7f6 fc20 	bl	8013f60 <rcl_publisher_is_valid_except_context>
 801d720:	2800      	cmp	r0, #0
 801d722:	d0ea      	beq.n	801d6fa <rcl_action_wait_set_add_action_server+0x22>
 801d724:	6821      	ldr	r1, [r4, #0]
 801d726:	4628      	mov	r0, r5
 801d728:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801d72c:	f7ff fad2 	bl	801ccd4 <rcl_wait_set_add_service>
 801d730:	2800      	cmp	r0, #0
 801d732:	d1e4      	bne.n	801d6fe <rcl_action_wait_set_add_action_server+0x26>
 801d734:	6821      	ldr	r1, [r4, #0]
 801d736:	4628      	mov	r0, r5
 801d738:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801d73c:	3104      	adds	r1, #4
 801d73e:	f7ff fac9 	bl	801ccd4 <rcl_wait_set_add_service>
 801d742:	2800      	cmp	r0, #0
 801d744:	d1db      	bne.n	801d6fe <rcl_action_wait_set_add_action_server+0x26>
 801d746:	6821      	ldr	r1, [r4, #0]
 801d748:	4628      	mov	r0, r5
 801d74a:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 801d74e:	3108      	adds	r1, #8
 801d750:	f7ff fac0 	bl	801ccd4 <rcl_wait_set_add_service>
 801d754:	2800      	cmp	r0, #0
 801d756:	d1d2      	bne.n	801d6fe <rcl_action_wait_set_add_action_server+0x26>
 801d758:	6821      	ldr	r1, [r4, #0]
 801d75a:	4628      	mov	r0, r5
 801d75c:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 801d760:	3114      	adds	r1, #20
 801d762:	f7ff fa5b 	bl	801cc1c <rcl_wait_set_add_timer>
 801d766:	2800      	cmp	r0, #0
 801d768:	d1c9      	bne.n	801d6fe <rcl_action_wait_set_add_action_server+0x26>
 801d76a:	2e00      	cmp	r6, #0
 801d76c:	d0c7      	beq.n	801d6fe <rcl_action_wait_set_add_action_server+0x26>
 801d76e:	6823      	ldr	r3, [r4, #0]
 801d770:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801d774:	6033      	str	r3, [r6, #0]
 801d776:	bd70      	pop	{r4, r5, r6, pc}
 801d778:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d77c:	4770      	bx	lr
 801d77e:	bf00      	nop

0801d780 <rcl_action_server_wait_set_get_entities_ready>:
 801d780:	2800      	cmp	r0, #0
 801d782:	d067      	beq.n	801d854 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d788:	460c      	mov	r4, r1
 801d78a:	b161      	cbz	r1, 801d7a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d78c:	4605      	mov	r5, r0
 801d78e:	6808      	ldr	r0, [r1, #0]
 801d790:	b148      	cbz	r0, 801d7a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d792:	4616      	mov	r6, r2
 801d794:	4698      	mov	r8, r3
 801d796:	f7f6 fd07 	bl	80141a8 <rcl_service_is_valid>
 801d79a:	b120      	cbz	r0, 801d7a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d79c:	6820      	ldr	r0, [r4, #0]
 801d79e:	3004      	adds	r0, #4
 801d7a0:	f7f6 fd02 	bl	80141a8 <rcl_service_is_valid>
 801d7a4:	b918      	cbnz	r0, 801d7ae <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801d7a6:	f640 0098 	movw	r0, #2200	; 0x898
 801d7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7ae:	6820      	ldr	r0, [r4, #0]
 801d7b0:	3008      	adds	r0, #8
 801d7b2:	f7f6 fcf9 	bl	80141a8 <rcl_service_is_valid>
 801d7b6:	2800      	cmp	r0, #0
 801d7b8:	d0f5      	beq.n	801d7a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7ba:	6820      	ldr	r0, [r4, #0]
 801d7bc:	300c      	adds	r0, #12
 801d7be:	f7f6 fbcf 	bl	8013f60 <rcl_publisher_is_valid_except_context>
 801d7c2:	2800      	cmp	r0, #0
 801d7c4:	d0ef      	beq.n	801d7a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7c6:	6820      	ldr	r0, [r4, #0]
 801d7c8:	3010      	adds	r0, #16
 801d7ca:	f7f6 fbc9 	bl	8013f60 <rcl_publisher_is_valid_except_context>
 801d7ce:	2800      	cmp	r0, #0
 801d7d0:	d0e9      	beq.n	801d7a6 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801d7d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d7d6:	2a00      	cmp	r2, #0
 801d7d8:	bf18      	it	ne
 801d7da:	2b00      	cmpne	r3, #0
 801d7dc:	bf0c      	ite	eq
 801d7de:	2101      	moveq	r1, #1
 801d7e0:	2100      	movne	r1, #0
 801d7e2:	f1b8 0f00 	cmp.w	r8, #0
 801d7e6:	bf08      	it	eq
 801d7e8:	f041 0101 	orreq.w	r1, r1, #1
 801d7ec:	bba9      	cbnz	r1, 801d85a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d7ee:	b3a6      	cbz	r6, 801d85a <rcl_action_server_wait_set_get_entities_ready+0xda>
 801d7f0:	6821      	ldr	r1, [r4, #0]
 801d7f2:	2000      	movs	r0, #0
 801d7f4:	692c      	ldr	r4, [r5, #16]
 801d7f6:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801d7fa:	6a2f      	ldr	r7, [r5, #32]
 801d7fc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d800:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801d804:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801d808:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801d80c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801d810:	1a64      	subs	r4, r4, r1
 801d812:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801d816:	fab4 f484 	clz	r4, r4
 801d81a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801d81e:	0964      	lsrs	r4, r4, #5
 801d820:	7034      	strb	r4, [r6, #0]
 801d822:	1d0c      	adds	r4, r1, #4
 801d824:	1b2c      	subs	r4, r5, r4
 801d826:	fab4 f484 	clz	r4, r4
 801d82a:	0964      	lsrs	r4, r4, #5
 801d82c:	f888 4000 	strb.w	r4, [r8]
 801d830:	f101 0408 	add.w	r4, r1, #8
 801d834:	1b1b      	subs	r3, r3, r4
 801d836:	9c06      	ldr	r4, [sp, #24]
 801d838:	fab3 f383 	clz	r3, r3
 801d83c:	095b      	lsrs	r3, r3, #5
 801d83e:	7023      	strb	r3, [r4, #0]
 801d840:	f101 0314 	add.w	r3, r1, #20
 801d844:	1ad3      	subs	r3, r2, r3
 801d846:	9a07      	ldr	r2, [sp, #28]
 801d848:	fab3 f383 	clz	r3, r3
 801d84c:	095b      	lsrs	r3, r3, #5
 801d84e:	7013      	strb	r3, [r2, #0]
 801d850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d854:	f44f 7061 	mov.w	r0, #900	; 0x384
 801d858:	4770      	bx	lr
 801d85a:	200b      	movs	r0, #11
 801d85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d860 <_execute_event_handler>:
 801d860:	2002      	movs	r0, #2
 801d862:	4770      	bx	lr

0801d864 <_cancel_goal_event_handler>:
 801d864:	2003      	movs	r0, #3
 801d866:	4770      	bx	lr

0801d868 <_succeed_event_handler>:
 801d868:	2004      	movs	r0, #4
 801d86a:	4770      	bx	lr

0801d86c <_abort_event_handler>:
 801d86c:	2006      	movs	r0, #6
 801d86e:	4770      	bx	lr

0801d870 <_canceled_event_handler>:
 801d870:	2005      	movs	r0, #5
 801d872:	4770      	bx	lr

0801d874 <rcl_action_transition_goal_state>:
 801d874:	b2c2      	uxtb	r2, r0
 801d876:	2a06      	cmp	r2, #6
 801d878:	d810      	bhi.n	801d89c <rcl_action_transition_goal_state+0x28>
 801d87a:	2904      	cmp	r1, #4
 801d87c:	d80e      	bhi.n	801d89c <rcl_action_transition_goal_state+0x28>
 801d87e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801d882:	b410      	push	{r4}
 801d884:	1853      	adds	r3, r2, r1
 801d886:	4c06      	ldr	r4, [pc, #24]	; (801d8a0 <rcl_action_transition_goal_state+0x2c>)
 801d888:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d88c:	b113      	cbz	r3, 801d894 <rcl_action_transition_goal_state+0x20>
 801d88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d892:	4718      	bx	r3
 801d894:	2000      	movs	r0, #0
 801d896:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d89a:	4770      	bx	lr
 801d89c:	2000      	movs	r0, #0
 801d89e:	4770      	bx	lr
 801d8a0:	08025d2c 	.word	0x08025d2c

0801d8a4 <rcl_action_get_zero_initialized_cancel_response>:
 801d8a4:	b510      	push	{r4, lr}
 801d8a6:	4c07      	ldr	r4, [pc, #28]	; (801d8c4 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801d8a8:	4686      	mov	lr, r0
 801d8aa:	4684      	mov	ip, r0
 801d8ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d8ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d8b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8b8:	6823      	ldr	r3, [r4, #0]
 801d8ba:	4670      	mov	r0, lr
 801d8bc:	f8cc 3000 	str.w	r3, [ip]
 801d8c0:	bd10      	pop	{r4, pc}
 801d8c2:	bf00      	nop
 801d8c4:	08025db8 	.word	0x08025db8

0801d8c8 <rclc_action_send_result_request>:
 801d8c8:	b1d0      	cbz	r0, 801d900 <rclc_action_send_result_request+0x38>
 801d8ca:	4684      	mov	ip, r0
 801d8cc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801d8d0:	b500      	push	{lr}
 801d8d2:	b087      	sub	sp, #28
 801d8d4:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801d8d8:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801d8dc:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801d8e0:	f10d 0e08 	add.w	lr, sp, #8
 801d8e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801d8e8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d8ec:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 801d8f0:	a902      	add	r1, sp, #8
 801d8f2:	3010      	adds	r0, #16
 801d8f4:	f7ff fbcc 	bl	801d090 <rcl_action_send_result_request>
 801d8f8:	b920      	cbnz	r0, 801d904 <rclc_action_send_result_request+0x3c>
 801d8fa:	b007      	add	sp, #28
 801d8fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d900:	200b      	movs	r0, #11
 801d902:	4770      	bx	lr
 801d904:	9001      	str	r0, [sp, #4]
 801d906:	f7f7 fdb7 	bl	8015478 <rcutils_reset_error>
 801d90a:	9801      	ldr	r0, [sp, #4]
 801d90c:	b007      	add	sp, #28
 801d90e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d912:	bf00      	nop

0801d914 <rclc_action_take_goal_handle>:
 801d914:	b160      	cbz	r0, 801d930 <rclc_action_take_goal_handle+0x1c>
 801d916:	6883      	ldr	r3, [r0, #8]
 801d918:	b143      	cbz	r3, 801d92c <rclc_action_take_goal_handle+0x18>
 801d91a:	6819      	ldr	r1, [r3, #0]
 801d91c:	2200      	movs	r2, #0
 801d91e:	6081      	str	r1, [r0, #8]
 801d920:	721a      	strb	r2, [r3, #8]
 801d922:	68c1      	ldr	r1, [r0, #12]
 801d924:	621a      	str	r2, [r3, #32]
 801d926:	849a      	strh	r2, [r3, #36]	; 0x24
 801d928:	6019      	str	r1, [r3, #0]
 801d92a:	60c3      	str	r3, [r0, #12]
 801d92c:	4618      	mov	r0, r3
 801d92e:	4770      	bx	lr
 801d930:	4603      	mov	r3, r0
 801d932:	e7fb      	b.n	801d92c <rclc_action_take_goal_handle+0x18>

0801d934 <rclc_action_remove_used_goal_handle>:
 801d934:	b180      	cbz	r0, 801d958 <rclc_action_remove_used_goal_handle+0x24>
 801d936:	b179      	cbz	r1, 801d958 <rclc_action_remove_used_goal_handle+0x24>
 801d938:	68c3      	ldr	r3, [r0, #12]
 801d93a:	4299      	cmp	r1, r3
 801d93c:	d00d      	beq.n	801d95a <rclc_action_remove_used_goal_handle+0x26>
 801d93e:	b12b      	cbz	r3, 801d94c <rclc_action_remove_used_goal_handle+0x18>
 801d940:	681a      	ldr	r2, [r3, #0]
 801d942:	4291      	cmp	r1, r2
 801d944:	d003      	beq.n	801d94e <rclc_action_remove_used_goal_handle+0x1a>
 801d946:	4613      	mov	r3, r2
 801d948:	2b00      	cmp	r3, #0
 801d94a:	d1f9      	bne.n	801d940 <rclc_action_remove_used_goal_handle+0xc>
 801d94c:	4770      	bx	lr
 801d94e:	680a      	ldr	r2, [r1, #0]
 801d950:	601a      	str	r2, [r3, #0]
 801d952:	6883      	ldr	r3, [r0, #8]
 801d954:	600b      	str	r3, [r1, #0]
 801d956:	6081      	str	r1, [r0, #8]
 801d958:	4770      	bx	lr
 801d95a:	680b      	ldr	r3, [r1, #0]
 801d95c:	60c3      	str	r3, [r0, #12]
 801d95e:	e7f8      	b.n	801d952 <rclc_action_remove_used_goal_handle+0x1e>

0801d960 <rclc_action_find_goal_handle_by_uuid>:
 801d960:	b538      	push	{r3, r4, r5, lr}
 801d962:	b181      	cbz	r1, 801d986 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d964:	b178      	cbz	r0, 801d986 <rclc_action_find_goal_handle_by_uuid+0x26>
 801d966:	68c4      	ldr	r4, [r0, #12]
 801d968:	460d      	mov	r5, r1
 801d96a:	b914      	cbnz	r4, 801d972 <rclc_action_find_goal_handle_by_uuid+0x12>
 801d96c:	e009      	b.n	801d982 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d96e:	6824      	ldr	r4, [r4, #0]
 801d970:	b13c      	cbz	r4, 801d982 <rclc_action_find_goal_handle_by_uuid+0x22>
 801d972:	f104 0009 	add.w	r0, r4, #9
 801d976:	2210      	movs	r2, #16
 801d978:	4629      	mov	r1, r5
 801d97a:	f003 fba9 	bl	80210d0 <memcmp>
 801d97e:	2800      	cmp	r0, #0
 801d980:	d1f5      	bne.n	801d96e <rclc_action_find_goal_handle_by_uuid+0xe>
 801d982:	4620      	mov	r0, r4
 801d984:	bd38      	pop	{r3, r4, r5, pc}
 801d986:	2400      	movs	r4, #0
 801d988:	4620      	mov	r0, r4
 801d98a:	bd38      	pop	{r3, r4, r5, pc}

0801d98c <rclc_action_find_first_handle_by_status>:
 801d98c:	b140      	cbz	r0, 801d9a0 <rclc_action_find_first_handle_by_status+0x14>
 801d98e:	68c0      	ldr	r0, [r0, #12]
 801d990:	b910      	cbnz	r0, 801d998 <rclc_action_find_first_handle_by_status+0xc>
 801d992:	e005      	b.n	801d9a0 <rclc_action_find_first_handle_by_status+0x14>
 801d994:	6800      	ldr	r0, [r0, #0]
 801d996:	b118      	cbz	r0, 801d9a0 <rclc_action_find_first_handle_by_status+0x14>
 801d998:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d99c:	428b      	cmp	r3, r1
 801d99e:	d1f9      	bne.n	801d994 <rclc_action_find_first_handle_by_status+0x8>
 801d9a0:	4770      	bx	lr
 801d9a2:	bf00      	nop

0801d9a4 <rclc_action_find_first_terminated_handle>:
 801d9a4:	b140      	cbz	r0, 801d9b8 <rclc_action_find_first_terminated_handle+0x14>
 801d9a6:	68c0      	ldr	r0, [r0, #12]
 801d9a8:	b910      	cbnz	r0, 801d9b0 <rclc_action_find_first_terminated_handle+0xc>
 801d9aa:	e005      	b.n	801d9b8 <rclc_action_find_first_terminated_handle+0x14>
 801d9ac:	6800      	ldr	r0, [r0, #0]
 801d9ae:	b118      	cbz	r0, 801d9b8 <rclc_action_find_first_terminated_handle+0x14>
 801d9b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801d9b4:	2b03      	cmp	r3, #3
 801d9b6:	ddf9      	ble.n	801d9ac <rclc_action_find_first_terminated_handle+0x8>
 801d9b8:	4770      	bx	lr
 801d9ba:	bf00      	nop

0801d9bc <rclc_action_find_handle_by_goal_request_sequence_number>:
 801d9bc:	b170      	cbz	r0, 801d9dc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d9be:	68c0      	ldr	r0, [r0, #12]
 801d9c0:	b160      	cbz	r0, 801d9dc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801d9c2:	b410      	push	{r4}
 801d9c4:	e001      	b.n	801d9ca <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801d9c6:	6800      	ldr	r0, [r0, #0]
 801d9c8:	b128      	cbz	r0, 801d9d6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801d9ca:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801d9ce:	4299      	cmp	r1, r3
 801d9d0:	bf08      	it	eq
 801d9d2:	4294      	cmpeq	r4, r2
 801d9d4:	d1f7      	bne.n	801d9c6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801d9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9da:	4770      	bx	lr
 801d9dc:	4770      	bx	lr
 801d9de:	bf00      	nop

0801d9e0 <rclc_action_find_handle_by_result_request_sequence_number>:
 801d9e0:	b170      	cbz	r0, 801da00 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d9e2:	68c0      	ldr	r0, [r0, #12]
 801d9e4:	b160      	cbz	r0, 801da00 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801d9e6:	b410      	push	{r4}
 801d9e8:	e001      	b.n	801d9ee <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801d9ea:	6800      	ldr	r0, [r0, #0]
 801d9ec:	b128      	cbz	r0, 801d9fa <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801d9ee:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801d9f2:	4299      	cmp	r1, r3
 801d9f4:	bf08      	it	eq
 801d9f6:	4294      	cmpeq	r4, r2
 801d9f8:	d1f7      	bne.n	801d9ea <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801d9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d9fe:	4770      	bx	lr
 801da00:	4770      	bx	lr
 801da02:	bf00      	nop

0801da04 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801da04:	b170      	cbz	r0, 801da24 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da06:	68c0      	ldr	r0, [r0, #12]
 801da08:	b160      	cbz	r0, 801da24 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801da0a:	b410      	push	{r4}
 801da0c:	e001      	b.n	801da12 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801da0e:	6800      	ldr	r0, [r0, #0]
 801da10:	b128      	cbz	r0, 801da1e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801da12:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801da16:	4299      	cmp	r1, r3
 801da18:	bf08      	it	eq
 801da1a:	4294      	cmpeq	r4, r2
 801da1c:	d1f7      	bne.n	801da0e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801da1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da22:	4770      	bx	lr
 801da24:	4770      	bx	lr
 801da26:	bf00      	nop

0801da28 <rclc_action_find_first_handle_with_goal_response>:
 801da28:	b140      	cbz	r0, 801da3c <rclc_action_find_first_handle_with_goal_response+0x14>
 801da2a:	68c0      	ldr	r0, [r0, #12]
 801da2c:	b910      	cbnz	r0, 801da34 <rclc_action_find_first_handle_with_goal_response+0xc>
 801da2e:	e005      	b.n	801da3c <rclc_action_find_first_handle_with_goal_response+0x14>
 801da30:	6800      	ldr	r0, [r0, #0]
 801da32:	b118      	cbz	r0, 801da3c <rclc_action_find_first_handle_with_goal_response+0x14>
 801da34:	f890 3020 	ldrb.w	r3, [r0, #32]
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d0f9      	beq.n	801da30 <rclc_action_find_first_handle_with_goal_response+0x8>
 801da3c:	4770      	bx	lr
 801da3e:	bf00      	nop

0801da40 <rclc_action_find_first_handle_with_result_response>:
 801da40:	b140      	cbz	r0, 801da54 <rclc_action_find_first_handle_with_result_response+0x14>
 801da42:	68c0      	ldr	r0, [r0, #12]
 801da44:	b910      	cbnz	r0, 801da4c <rclc_action_find_first_handle_with_result_response+0xc>
 801da46:	e005      	b.n	801da54 <rclc_action_find_first_handle_with_result_response+0x14>
 801da48:	6800      	ldr	r0, [r0, #0]
 801da4a:	b118      	cbz	r0, 801da54 <rclc_action_find_first_handle_with_result_response+0x14>
 801da4c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 801da50:	2b00      	cmp	r3, #0
 801da52:	d0f9      	beq.n	801da48 <rclc_action_find_first_handle_with_result_response+0x8>
 801da54:	4770      	bx	lr
 801da56:	bf00      	nop

0801da58 <rclc_action_server_response_goal_request>:
 801da58:	b198      	cbz	r0, 801da82 <rclc_action_server_response_goal_request+0x2a>
 801da5a:	2200      	movs	r2, #0
 801da5c:	460b      	mov	r3, r1
 801da5e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801da62:	b510      	push	{r4, lr}
 801da64:	6844      	ldr	r4, [r0, #4]
 801da66:	b086      	sub	sp, #24
 801da68:	f104 0010 	add.w	r0, r4, #16
 801da6c:	9205      	str	r2, [sp, #20]
 801da6e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801da72:	aa03      	add	r2, sp, #12
 801da74:	f88d 300c 	strb.w	r3, [sp, #12]
 801da78:	f7ff fd40 	bl	801d4fc <rcl_action_send_goal_response>
 801da7c:	b918      	cbnz	r0, 801da86 <rclc_action_server_response_goal_request+0x2e>
 801da7e:	b006      	add	sp, #24
 801da80:	bd10      	pop	{r4, pc}
 801da82:	200b      	movs	r0, #11
 801da84:	4770      	bx	lr
 801da86:	9001      	str	r0, [sp, #4]
 801da88:	f7f7 fcf6 	bl	8015478 <rcutils_reset_error>
 801da8c:	9801      	ldr	r0, [sp, #4]
 801da8e:	b006      	add	sp, #24
 801da90:	bd10      	pop	{r4, pc}
 801da92:	bf00      	nop
 801da94:	0000      	movs	r0, r0
	...

0801da98 <rclc_action_server_goal_cancel_accept>:
 801da98:	b310      	cbz	r0, 801dae0 <rclc_action_server_goal_cancel_accept+0x48>
 801da9a:	b510      	push	{r4, lr}
 801da9c:	b090      	sub	sp, #64	; 0x40
 801da9e:	4604      	mov	r4, r0
 801daa0:	a806      	add	r0, sp, #24
 801daa2:	f7ff feff 	bl	801d8a4 <rcl_action_get_zero_initialized_cancel_response>
 801daa6:	2300      	movs	r3, #0
 801daa8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801daac:	46ec      	mov	ip, sp
 801daae:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801dab2:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801dab6:	f88d 3018 	strb.w	r3, [sp, #24]
 801daba:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801dabe:	f8cd d01c 	str.w	sp, [sp, #28]
 801dac2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dac6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 801dae8 <rclc_action_server_goal_cancel_accept+0x50>
 801daca:	6860      	ldr	r0, [r4, #4]
 801dacc:	aa06      	add	r2, sp, #24
 801dace:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801dad2:	3010      	adds	r0, #16
 801dad4:	ed8d 7b08 	vstr	d7, [sp, #32]
 801dad8:	f7ff fdc6 	bl	801d668 <rcl_action_send_cancel_response>
 801dadc:	b010      	add	sp, #64	; 0x40
 801dade:	bd10      	pop	{r4, pc}
 801dae0:	200b      	movs	r0, #11
 801dae2:	4770      	bx	lr
 801dae4:	f3af 8000 	nop.w
 801dae8:	00000001 	.word	0x00000001
 801daec:	00000001 	.word	0x00000001

0801daf0 <rclc_action_server_goal_cancel_reject>:
 801daf0:	b082      	sub	sp, #8
 801daf2:	b530      	push	{r4, r5, lr}
 801daf4:	b08b      	sub	sp, #44	; 0x2c
 801daf6:	ac0e      	add	r4, sp, #56	; 0x38
 801daf8:	e884 000c 	stmia.w	r4, {r2, r3}
 801dafc:	b188      	cbz	r0, 801db22 <rclc_action_server_goal_cancel_reject+0x32>
 801dafe:	4604      	mov	r4, r0
 801db00:	a801      	add	r0, sp, #4
 801db02:	460d      	mov	r5, r1
 801db04:	f7ff fece 	bl	801d8a4 <rcl_action_get_zero_initialized_cancel_response>
 801db08:	aa01      	add	r2, sp, #4
 801db0a:	a90e      	add	r1, sp, #56	; 0x38
 801db0c:	f104 0010 	add.w	r0, r4, #16
 801db10:	f88d 5004 	strb.w	r5, [sp, #4]
 801db14:	f7ff fda8 	bl	801d668 <rcl_action_send_cancel_response>
 801db18:	b00b      	add	sp, #44	; 0x2c
 801db1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db1e:	b002      	add	sp, #8
 801db20:	4770      	bx	lr
 801db22:	200b      	movs	r0, #11
 801db24:	b00b      	add	sp, #44	; 0x2c
 801db26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801db2a:	b002      	add	sp, #8
 801db2c:	4770      	bx	lr
 801db2e:	bf00      	nop

0801db30 <__atomic_load_8>:
 801db30:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801db34:	4a16      	ldr	r2, [pc, #88]	; (801db90 <__atomic_load_8+0x60>)
 801db36:	4b17      	ldr	r3, [pc, #92]	; (801db94 <__atomic_load_8+0x64>)
 801db38:	f04f 0c01 	mov.w	ip, #1
 801db3c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801db40:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801db44:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801db48:	fb02 f101 	mul.w	r1, r2, r1
 801db4c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801db50:	fba3 2301 	umull	r2, r3, r3, r1
 801db54:	091b      	lsrs	r3, r3, #4
 801db56:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801db5a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801db5e:	b4d0      	push	{r4, r6, r7}
 801db60:	1ac9      	subs	r1, r1, r3
 801db62:	4c0d      	ldr	r4, [pc, #52]	; (801db98 <__atomic_load_8+0x68>)
 801db64:	1862      	adds	r2, r4, r1
 801db66:	e8d2 3f4f 	ldrexb	r3, [r2]
 801db6a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801db6e:	2e00      	cmp	r6, #0
 801db70:	d1f9      	bne.n	801db66 <__atomic_load_8+0x36>
 801db72:	b2db      	uxtb	r3, r3
 801db74:	f3bf 8f5b 	dmb	ish
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d1f4      	bne.n	801db66 <__atomic_load_8+0x36>
 801db7c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801db80:	f3bf 8f5b 	dmb	ish
 801db84:	5463      	strb	r3, [r4, r1]
 801db86:	4630      	mov	r0, r6
 801db88:	4639      	mov	r1, r7
 801db8a:	bcd0      	pop	{r4, r6, r7}
 801db8c:	4770      	bx	lr
 801db8e:	bf00      	nop
 801db90:	27d4eb2d 	.word	0x27d4eb2d
 801db94:	b21642c9 	.word	0xb21642c9
 801db98:	20016ec0 	.word	0x20016ec0

0801db9c <__atomic_store_8>:
 801db9c:	b570      	push	{r4, r5, r6, lr}
 801db9e:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801dba2:	4916      	ldr	r1, [pc, #88]	; (801dbfc <__atomic_store_8+0x60>)
 801dba4:	4c16      	ldr	r4, [pc, #88]	; (801dc00 <__atomic_store_8+0x64>)
 801dba6:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801dbaa:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801dbae:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801dbb2:	fb01 fe0e 	mul.w	lr, r1, lr
 801dbb6:	4913      	ldr	r1, [pc, #76]	; (801dc04 <__atomic_store_8+0x68>)
 801dbb8:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801dbbc:	fba1 510e 	umull	r5, r1, r1, lr
 801dbc0:	f04f 0501 	mov.w	r5, #1
 801dbc4:	0909      	lsrs	r1, r1, #4
 801dbc6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801dbca:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801dbce:	ebae 0e01 	sub.w	lr, lr, r1
 801dbd2:	eb04 0c0e 	add.w	ip, r4, lr
 801dbd6:	e8dc 1f4f 	ldrexb	r1, [ip]
 801dbda:	e8cc 5f46 	strexb	r6, r5, [ip]
 801dbde:	2e00      	cmp	r6, #0
 801dbe0:	d1f9      	bne.n	801dbd6 <__atomic_store_8+0x3a>
 801dbe2:	b2c9      	uxtb	r1, r1
 801dbe4:	f3bf 8f5b 	dmb	ish
 801dbe8:	2900      	cmp	r1, #0
 801dbea:	d1f4      	bne.n	801dbd6 <__atomic_store_8+0x3a>
 801dbec:	e9c0 2300 	strd	r2, r3, [r0]
 801dbf0:	f3bf 8f5b 	dmb	ish
 801dbf4:	f804 100e 	strb.w	r1, [r4, lr]
 801dbf8:	bd70      	pop	{r4, r5, r6, pc}
 801dbfa:	bf00      	nop
 801dbfc:	27d4eb2d 	.word	0x27d4eb2d
 801dc00:	20016ec0 	.word	0x20016ec0
 801dc04:	b21642c9 	.word	0xb21642c9

0801dc08 <__atomic_exchange_8>:
 801dc08:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801dc0c:	4917      	ldr	r1, [pc, #92]	; (801dc6c <__atomic_exchange_8+0x64>)
 801dc0e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801dc12:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801dc16:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801dc1a:	fb01 fc0c 	mul.w	ip, r1, ip
 801dc1e:	4914      	ldr	r1, [pc, #80]	; (801dc70 <__atomic_exchange_8+0x68>)
 801dc20:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801dc24:	b570      	push	{r4, r5, r6, lr}
 801dc26:	4686      	mov	lr, r0
 801dc28:	fba1 010c 	umull	r0, r1, r1, ip
 801dc2c:	4d11      	ldr	r5, [pc, #68]	; (801dc74 <__atomic_exchange_8+0x6c>)
 801dc2e:	f04f 0001 	mov.w	r0, #1
 801dc32:	0909      	lsrs	r1, r1, #4
 801dc34:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801dc38:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801dc3c:	ebac 0c01 	sub.w	ip, ip, r1
 801dc40:	eb05 010c 	add.w	r1, r5, ip
 801dc44:	e8d1 4f4f 	ldrexb	r4, [r1]
 801dc48:	e8c1 0f46 	strexb	r6, r0, [r1]
 801dc4c:	2e00      	cmp	r6, #0
 801dc4e:	d1f9      	bne.n	801dc44 <__atomic_exchange_8+0x3c>
 801dc50:	b2e4      	uxtb	r4, r4
 801dc52:	f3bf 8f5b 	dmb	ish
 801dc56:	2c00      	cmp	r4, #0
 801dc58:	d1f4      	bne.n	801dc44 <__atomic_exchange_8+0x3c>
 801dc5a:	e9de 0100 	ldrd	r0, r1, [lr]
 801dc5e:	e9ce 2300 	strd	r2, r3, [lr]
 801dc62:	f3bf 8f5b 	dmb	ish
 801dc66:	f805 400c 	strb.w	r4, [r5, ip]
 801dc6a:	bd70      	pop	{r4, r5, r6, pc}
 801dc6c:	27d4eb2d 	.word	0x27d4eb2d
 801dc70:	b21642c9 	.word	0xb21642c9
 801dc74:	20016ec0 	.word	0x20016ec0

0801dc78 <rcutils_is_directory>:
 801dc78:	2000      	movs	r0, #0
 801dc7a:	4770      	bx	lr

0801dc7c <rcutils_join_path>:
 801dc7c:	b082      	sub	sp, #8
 801dc7e:	2000      	movs	r0, #0
 801dc80:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dc84:	b002      	add	sp, #8
 801dc86:	4770      	bx	lr

0801dc88 <rcutils_to_native_path>:
 801dc88:	b084      	sub	sp, #16
 801dc8a:	2000      	movs	r0, #0
 801dc8c:	f10d 0c04 	add.w	ip, sp, #4
 801dc90:	b004      	add	sp, #16
 801dc92:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801dc96:	4770      	bx	lr

0801dc98 <rcutils_string_array_fini>:
 801dc98:	b328      	cbz	r0, 801dce6 <rcutils_string_array_fini+0x4e>
 801dc9a:	b570      	push	{r4, r5, r6, lr}
 801dc9c:	4604      	mov	r4, r0
 801dc9e:	6840      	ldr	r0, [r0, #4]
 801dca0:	b1e0      	cbz	r0, 801dcdc <rcutils_string_array_fini+0x44>
 801dca2:	f104 0008 	add.w	r0, r4, #8
 801dca6:	f7f7 fba9 	bl	80153fc <rcutils_allocator_is_valid>
 801dcaa:	b1c0      	cbz	r0, 801dcde <rcutils_string_array_fini+0x46>
 801dcac:	6823      	ldr	r3, [r4, #0]
 801dcae:	b1c3      	cbz	r3, 801dce2 <rcutils_string_array_fini+0x4a>
 801dcb0:	2500      	movs	r5, #0
 801dcb2:	6860      	ldr	r0, [r4, #4]
 801dcb4:	462e      	mov	r6, r5
 801dcb6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801dcba:	68e3      	ldr	r3, [r4, #12]
 801dcbc:	69a1      	ldr	r1, [r4, #24]
 801dcbe:	4798      	blx	r3
 801dcc0:	e9d4 3000 	ldrd	r3, r0, [r4]
 801dcc4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801dcc8:	3501      	adds	r5, #1
 801dcca:	429d      	cmp	r5, r3
 801dccc:	d3f3      	bcc.n	801dcb6 <rcutils_string_array_fini+0x1e>
 801dcce:	68e3      	ldr	r3, [r4, #12]
 801dcd0:	69a1      	ldr	r1, [r4, #24]
 801dcd2:	4798      	blx	r3
 801dcd4:	2300      	movs	r3, #0
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	e9c4 3300 	strd	r3, r3, [r4]
 801dcdc:	bd70      	pop	{r4, r5, r6, pc}
 801dcde:	200b      	movs	r0, #11
 801dce0:	bd70      	pop	{r4, r5, r6, pc}
 801dce2:	6860      	ldr	r0, [r4, #4]
 801dce4:	e7f3      	b.n	801dcce <rcutils_string_array_fini+0x36>
 801dce6:	200b      	movs	r0, #11
 801dce8:	4770      	bx	lr
 801dcea:	bf00      	nop

0801dcec <rcutils_get_zero_initialized_string_map>:
 801dcec:	2000      	movs	r0, #0
 801dcee:	4b01      	ldr	r3, [pc, #4]	; (801dcf4 <rcutils_get_zero_initialized_string_map+0x8>)
 801dcf0:	6018      	str	r0, [r3, #0]
 801dcf2:	4770      	bx	lr
 801dcf4:	20016ed8 	.word	0x20016ed8

0801dcf8 <rcutils_string_map_reserve>:
 801dcf8:	2800      	cmp	r0, #0
 801dcfa:	d05e      	beq.n	801ddba <rcutils_string_map_reserve+0xc2>
 801dcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd00:	460c      	mov	r4, r1
 801dd02:	6801      	ldr	r1, [r0, #0]
 801dd04:	b082      	sub	sp, #8
 801dd06:	4605      	mov	r5, r0
 801dd08:	b129      	cbz	r1, 801dd16 <rcutils_string_map_reserve+0x1e>
 801dd0a:	68cb      	ldr	r3, [r1, #12]
 801dd0c:	42a3      	cmp	r3, r4
 801dd0e:	d906      	bls.n	801dd1e <rcutils_string_map_reserve+0x26>
 801dd10:	461c      	mov	r4, r3
 801dd12:	2900      	cmp	r1, #0
 801dd14:	d1f9      	bne.n	801dd0a <rcutils_string_map_reserve+0x12>
 801dd16:	201f      	movs	r0, #31
 801dd18:	b002      	add	sp, #8
 801dd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd1e:	688b      	ldr	r3, [r1, #8]
 801dd20:	42a3      	cmp	r3, r4
 801dd22:	d046      	beq.n	801ddb2 <rcutils_string_map_reserve+0xba>
 801dd24:	6a0e      	ldr	r6, [r1, #32]
 801dd26:	2c00      	cmp	r4, #0
 801dd28:	d033      	beq.n	801dd92 <rcutils_string_map_reserve+0x9a>
 801dd2a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801dd2e:	d242      	bcs.n	801ddb6 <rcutils_string_map_reserve+0xbe>
 801dd30:	00a7      	lsls	r7, r4, #2
 801dd32:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801dd36:	6808      	ldr	r0, [r1, #0]
 801dd38:	4632      	mov	r2, r6
 801dd3a:	4639      	mov	r1, r7
 801dd3c:	47c0      	blx	r8
 801dd3e:	2800      	cmp	r0, #0
 801dd40:	d039      	beq.n	801ddb6 <rcutils_string_map_reserve+0xbe>
 801dd42:	682b      	ldr	r3, [r5, #0]
 801dd44:	4632      	mov	r2, r6
 801dd46:	4639      	mov	r1, r7
 801dd48:	6018      	str	r0, [r3, #0]
 801dd4a:	6858      	ldr	r0, [r3, #4]
 801dd4c:	47c0      	blx	r8
 801dd4e:	2800      	cmp	r0, #0
 801dd50:	d031      	beq.n	801ddb6 <rcutils_string_map_reserve+0xbe>
 801dd52:	682d      	ldr	r5, [r5, #0]
 801dd54:	68ab      	ldr	r3, [r5, #8]
 801dd56:	6068      	str	r0, [r5, #4]
 801dd58:	42a3      	cmp	r3, r4
 801dd5a:	d225      	bcs.n	801dda8 <rcutils_string_map_reserve+0xb0>
 801dd5c:	682a      	ldr	r2, [r5, #0]
 801dd5e:	eb00 0c07 	add.w	ip, r0, r7
 801dd62:	0099      	lsls	r1, r3, #2
 801dd64:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801dd68:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801dd6c:	45e6      	cmp	lr, ip
 801dd6e:	d203      	bcs.n	801dd78 <rcutils_string_map_reserve+0x80>
 801dd70:	eb02 0c07 	add.w	ip, r2, r7
 801dd74:	4566      	cmp	r6, ip
 801dd76:	d322      	bcc.n	801ddbe <rcutils_string_map_reserve+0xc6>
 801dd78:	1ae3      	subs	r3, r4, r3
 801dd7a:	4670      	mov	r0, lr
 801dd7c:	2100      	movs	r1, #0
 801dd7e:	009a      	lsls	r2, r3, #2
 801dd80:	9201      	str	r2, [sp, #4]
 801dd82:	f003 f9cf 	bl	8021124 <memset>
 801dd86:	9a01      	ldr	r2, [sp, #4]
 801dd88:	2100      	movs	r1, #0
 801dd8a:	4630      	mov	r0, r6
 801dd8c:	f003 f9ca 	bl	8021124 <memset>
 801dd90:	e00a      	b.n	801dda8 <rcutils_string_map_reserve+0xb0>
 801dd92:	694f      	ldr	r7, [r1, #20]
 801dd94:	6808      	ldr	r0, [r1, #0]
 801dd96:	4631      	mov	r1, r6
 801dd98:	47b8      	blx	r7
 801dd9a:	682b      	ldr	r3, [r5, #0]
 801dd9c:	4631      	mov	r1, r6
 801dd9e:	6858      	ldr	r0, [r3, #4]
 801dda0:	601c      	str	r4, [r3, #0]
 801dda2:	47b8      	blx	r7
 801dda4:	682d      	ldr	r5, [r5, #0]
 801dda6:	606c      	str	r4, [r5, #4]
 801dda8:	2000      	movs	r0, #0
 801ddaa:	60ac      	str	r4, [r5, #8]
 801ddac:	b002      	add	sp, #8
 801ddae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddb2:	2000      	movs	r0, #0
 801ddb4:	e7b0      	b.n	801dd18 <rcutils_string_map_reserve+0x20>
 801ddb6:	200a      	movs	r0, #10
 801ddb8:	e7ae      	b.n	801dd18 <rcutils_string_map_reserve+0x20>
 801ddba:	200b      	movs	r0, #11
 801ddbc:	4770      	bx	lr
 801ddbe:	1f0b      	subs	r3, r1, #4
 801ddc0:	4418      	add	r0, r3
 801ddc2:	4413      	add	r3, r2
 801ddc4:	3a04      	subs	r2, #4
 801ddc6:	4417      	add	r7, r2
 801ddc8:	2200      	movs	r2, #0
 801ddca:	f843 2f04 	str.w	r2, [r3, #4]!
 801ddce:	42bb      	cmp	r3, r7
 801ddd0:	f840 2f04 	str.w	r2, [r0, #4]!
 801ddd4:	d1f9      	bne.n	801ddca <rcutils_string_map_reserve+0xd2>
 801ddd6:	e7e7      	b.n	801dda8 <rcutils_string_map_reserve+0xb0>

0801ddd8 <rcutils_string_map_init>:
 801ddd8:	b082      	sub	sp, #8
 801ddda:	b570      	push	{r4, r5, r6, lr}
 801dddc:	ac04      	add	r4, sp, #16
 801ddde:	e884 000c 	stmia.w	r4, {r2, r3}
 801dde2:	b380      	cbz	r0, 801de46 <rcutils_string_map_init+0x6e>
 801dde4:	6806      	ldr	r6, [r0, #0]
 801dde6:	4604      	mov	r4, r0
 801dde8:	b12e      	cbz	r6, 801ddf6 <rcutils_string_map_init+0x1e>
 801ddea:	251e      	movs	r5, #30
 801ddec:	4628      	mov	r0, r5
 801ddee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ddf2:	b002      	add	sp, #8
 801ddf4:	4770      	bx	lr
 801ddf6:	a804      	add	r0, sp, #16
 801ddf8:	460d      	mov	r5, r1
 801ddfa:	f7f7 faff 	bl	80153fc <rcutils_allocator_is_valid>
 801ddfe:	b310      	cbz	r0, 801de46 <rcutils_string_map_init+0x6e>
 801de00:	9b04      	ldr	r3, [sp, #16]
 801de02:	2024      	movs	r0, #36	; 0x24
 801de04:	9908      	ldr	r1, [sp, #32]
 801de06:	4798      	blx	r3
 801de08:	6020      	str	r0, [r4, #0]
 801de0a:	b310      	cbz	r0, 801de52 <rcutils_string_map_init+0x7a>
 801de0c:	f10d 0e10 	add.w	lr, sp, #16
 801de10:	f100 0c10 	add.w	ip, r0, #16
 801de14:	e9c0 6600 	strd	r6, r6, [r0]
 801de18:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801de1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801de20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801de24:	f8de 3000 	ldr.w	r3, [lr]
 801de28:	4629      	mov	r1, r5
 801de2a:	4620      	mov	r0, r4
 801de2c:	f8cc 3000 	str.w	r3, [ip]
 801de30:	f7ff ff62 	bl	801dcf8 <rcutils_string_map_reserve>
 801de34:	4605      	mov	r5, r0
 801de36:	2800      	cmp	r0, #0
 801de38:	d0d8      	beq.n	801ddec <rcutils_string_map_init+0x14>
 801de3a:	9b05      	ldr	r3, [sp, #20]
 801de3c:	9908      	ldr	r1, [sp, #32]
 801de3e:	6820      	ldr	r0, [r4, #0]
 801de40:	4798      	blx	r3
 801de42:	6026      	str	r6, [r4, #0]
 801de44:	e7d2      	b.n	801ddec <rcutils_string_map_init+0x14>
 801de46:	250b      	movs	r5, #11
 801de48:	4628      	mov	r0, r5
 801de4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801de4e:	b002      	add	sp, #8
 801de50:	4770      	bx	lr
 801de52:	250a      	movs	r5, #10
 801de54:	e7ca      	b.n	801ddec <rcutils_string_map_init+0x14>
 801de56:	bf00      	nop

0801de58 <rcutils_string_map_fini>:
 801de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de5c:	b082      	sub	sp, #8
 801de5e:	2800      	cmp	r0, #0
 801de60:	d03a      	beq.n	801ded8 <rcutils_string_map_fini+0x80>
 801de62:	6804      	ldr	r4, [r0, #0]
 801de64:	4606      	mov	r6, r0
 801de66:	2c00      	cmp	r4, #0
 801de68:	d032      	beq.n	801ded0 <rcutils_string_map_fini+0x78>
 801de6a:	68a3      	ldr	r3, [r4, #8]
 801de6c:	b32b      	cbz	r3, 801deba <rcutils_string_map_fini+0x62>
 801de6e:	2500      	movs	r5, #0
 801de70:	6822      	ldr	r2, [r4, #0]
 801de72:	462f      	mov	r7, r5
 801de74:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801de78:	b1e0      	cbz	r0, 801deb4 <rcutils_string_map_fini+0x5c>
 801de7a:	6a21      	ldr	r1, [r4, #32]
 801de7c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801de80:	9101      	str	r1, [sp, #4]
 801de82:	47c0      	blx	r8
 801de84:	9901      	ldr	r1, [sp, #4]
 801de86:	e9d4 3200 	ldrd	r3, r2, [r4]
 801de8a:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801de8e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801de92:	47c0      	blx	r8
 801de94:	68e3      	ldr	r3, [r4, #12]
 801de96:	6862      	ldr	r2, [r4, #4]
 801de98:	3b01      	subs	r3, #1
 801de9a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801de9e:	3501      	adds	r5, #1
 801dea0:	60e3      	str	r3, [r4, #12]
 801dea2:	6834      	ldr	r4, [r6, #0]
 801dea4:	68a3      	ldr	r3, [r4, #8]
 801dea6:	429d      	cmp	r5, r3
 801dea8:	d207      	bcs.n	801deba <rcutils_string_map_fini+0x62>
 801deaa:	6822      	ldr	r2, [r4, #0]
 801deac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801deb0:	2800      	cmp	r0, #0
 801deb2:	d1e2      	bne.n	801de7a <rcutils_string_map_fini+0x22>
 801deb4:	3501      	adds	r5, #1
 801deb6:	429d      	cmp	r5, r3
 801deb8:	d3dc      	bcc.n	801de74 <rcutils_string_map_fini+0x1c>
 801deba:	2100      	movs	r1, #0
 801debc:	4630      	mov	r0, r6
 801debe:	f7ff ff1b 	bl	801dcf8 <rcutils_string_map_reserve>
 801dec2:	4604      	mov	r4, r0
 801dec4:	b920      	cbnz	r0, 801ded0 <rcutils_string_map_fini+0x78>
 801dec6:	6830      	ldr	r0, [r6, #0]
 801dec8:	6943      	ldr	r3, [r0, #20]
 801deca:	6a01      	ldr	r1, [r0, #32]
 801decc:	4798      	blx	r3
 801dece:	6034      	str	r4, [r6, #0]
 801ded0:	4620      	mov	r0, r4
 801ded2:	b002      	add	sp, #8
 801ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ded8:	240b      	movs	r4, #11
 801deda:	4620      	mov	r0, r4
 801dedc:	b002      	add	sp, #8
 801dede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dee2:	bf00      	nop

0801dee4 <rcutils_string_map_getn>:
 801dee4:	b378      	cbz	r0, 801df46 <rcutils_string_map_getn+0x62>
 801dee6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deea:	f8d0 b000 	ldr.w	fp, [r0]
 801deee:	f1bb 0f00 	cmp.w	fp, #0
 801def2:	d01f      	beq.n	801df34 <rcutils_string_map_getn+0x50>
 801def4:	fab1 f481 	clz	r4, r1
 801def8:	4688      	mov	r8, r1
 801defa:	0964      	lsrs	r4, r4, #5
 801defc:	b1d1      	cbz	r1, 801df34 <rcutils_string_map_getn+0x50>
 801defe:	f8db 7008 	ldr.w	r7, [fp, #8]
 801df02:	f8db 6000 	ldr.w	r6, [fp]
 801df06:	b1af      	cbz	r7, 801df34 <rcutils_string_map_getn+0x50>
 801df08:	4691      	mov	r9, r2
 801df0a:	3e04      	subs	r6, #4
 801df0c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801df10:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801df14:	3401      	adds	r4, #1
 801df16:	4628      	mov	r0, r5
 801df18:	b155      	cbz	r5, 801df30 <rcutils_string_map_getn+0x4c>
 801df1a:	f7e2 f9f1 	bl	8000300 <strlen>
 801df1e:	4602      	mov	r2, r0
 801df20:	4629      	mov	r1, r5
 801df22:	4640      	mov	r0, r8
 801df24:	454a      	cmp	r2, r9
 801df26:	bf38      	it	cc
 801df28:	464a      	movcc	r2, r9
 801df2a:	f003 f910 	bl	802114e <strncmp>
 801df2e:	b120      	cbz	r0, 801df3a <rcutils_string_map_getn+0x56>
 801df30:	42a7      	cmp	r7, r4
 801df32:	d1eb      	bne.n	801df0c <rcutils_string_map_getn+0x28>
 801df34:	2000      	movs	r0, #0
 801df36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df3a:	f8db 3004 	ldr.w	r3, [fp, #4]
 801df3e:	f853 000a 	ldr.w	r0, [r3, sl]
 801df42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df46:	4770      	bx	lr

0801df48 <rmw_get_zero_initialized_context>:
 801df48:	b510      	push	{r4, lr}
 801df4a:	4604      	mov	r4, r0
 801df4c:	3010      	adds	r0, #16
 801df4e:	f7f7 fc73 	bl	8015838 <rmw_get_zero_initialized_init_options>
 801df52:	2300      	movs	r3, #0
 801df54:	4620      	mov	r0, r4
 801df56:	60a3      	str	r3, [r4, #8]
 801df58:	64a3      	str	r3, [r4, #72]	; 0x48
 801df5a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801df5c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 801df68 <rmw_get_zero_initialized_context+0x20>
 801df60:	ed84 7b00 	vstr	d7, [r4]
 801df64:	bd10      	pop	{r4, pc}
 801df66:	bf00      	nop
	...

0801df70 <rmw_time_equal>:
 801df70:	b4f0      	push	{r4, r5, r6, r7}
 801df72:	b084      	sub	sp, #16
 801df74:	ac04      	add	r4, sp, #16
 801df76:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801df7a:	4603      	mov	r3, r0
 801df7c:	4925      	ldr	r1, [pc, #148]	; (801e014 <rmw_time_equal+0xa4>)
 801df7e:	9d01      	ldr	r5, [sp, #4]
 801df80:	4610      	mov	r0, r2
 801df82:	4299      	cmp	r1, r3
 801df84:	f04f 0202 	mov.w	r2, #2
 801df88:	9e03      	ldr	r6, [sp, #12]
 801df8a:	41aa      	sbcs	r2, r5
 801df8c:	d330      	bcc.n	801dff0 <rmw_time_equal+0x80>
 801df8e:	4c22      	ldr	r4, [pc, #136]	; (801e018 <rmw_time_equal+0xa8>)
 801df90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801df94:	fba3 3204 	umull	r3, r2, r3, r4
 801df98:	fb04 2205 	mla	r2, r4, r5, r2
 801df9c:	43dd      	mvns	r5, r3
 801df9e:	1a8c      	subs	r4, r1, r2
 801dfa0:	4285      	cmp	r5, r0
 801dfa2:	41b4      	sbcs	r4, r6
 801dfa4:	d332      	bcc.n	801e00c <rmw_time_equal+0x9c>
 801dfa6:	eb10 0c03 	adds.w	ip, r0, r3
 801dfaa:	eb42 0106 	adc.w	r1, r2, r6
 801dfae:	4819      	ldr	r0, [pc, #100]	; (801e014 <rmw_time_equal+0xa4>)
 801dfb0:	2202      	movs	r2, #2
 801dfb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dfb4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dfb6:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801dfba:	4298      	cmp	r0, r3
 801dfbc:	41b2      	sbcs	r2, r6
 801dfbe:	d31c      	bcc.n	801dffa <rmw_time_equal+0x8a>
 801dfc0:	4c15      	ldr	r4, [pc, #84]	; (801e018 <rmw_time_equal+0xa8>)
 801dfc2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801dfc6:	fba3 3204 	umull	r3, r2, r3, r4
 801dfca:	fb04 2206 	mla	r2, r4, r6, r2
 801dfce:	43de      	mvns	r6, r3
 801dfd0:	1a84      	subs	r4, r0, r2
 801dfd2:	42ae      	cmp	r6, r5
 801dfd4:	41bc      	sbcs	r4, r7
 801dfd6:	d315      	bcc.n	801e004 <rmw_time_equal+0x94>
 801dfd8:	195b      	adds	r3, r3, r5
 801dfda:	eb42 0207 	adc.w	r2, r2, r7
 801dfde:	428a      	cmp	r2, r1
 801dfe0:	bf08      	it	eq
 801dfe2:	4563      	cmpeq	r3, ip
 801dfe4:	bf0c      	ite	eq
 801dfe6:	2001      	moveq	r0, #1
 801dfe8:	2000      	movne	r0, #0
 801dfea:	b004      	add	sp, #16
 801dfec:	bcf0      	pop	{r4, r5, r6, r7}
 801dfee:	4770      	bx	lr
 801dff0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801dff4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dff8:	e7d9      	b.n	801dfae <rmw_time_equal+0x3e>
 801dffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dffe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801e002:	e7ec      	b.n	801dfde <rmw_time_equal+0x6e>
 801e004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e008:	4602      	mov	r2, r0
 801e00a:	e7e8      	b.n	801dfde <rmw_time_equal+0x6e>
 801e00c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801e010:	e7cd      	b.n	801dfae <rmw_time_equal+0x3e>
 801e012:	bf00      	nop
 801e014:	25c17d04 	.word	0x25c17d04
 801e018:	3b9aca00 	.word	0x3b9aca00

0801e01c <rmw_time_total_nsec>:
 801e01c:	b470      	push	{r4, r5, r6}
 801e01e:	b085      	sub	sp, #20
 801e020:	ac04      	add	r4, sp, #16
 801e022:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e026:	4603      	mov	r3, r0
 801e028:	4913      	ldr	r1, [pc, #76]	; (801e078 <rmw_time_total_nsec+0x5c>)
 801e02a:	9d01      	ldr	r5, [sp, #4]
 801e02c:	4610      	mov	r0, r2
 801e02e:	4299      	cmp	r1, r3
 801e030:	f04f 0202 	mov.w	r2, #2
 801e034:	9e03      	ldr	r6, [sp, #12]
 801e036:	41aa      	sbcs	r2, r5
 801e038:	d311      	bcc.n	801e05e <rmw_time_total_nsec+0x42>
 801e03a:	4c10      	ldr	r4, [pc, #64]	; (801e07c <rmw_time_total_nsec+0x60>)
 801e03c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e040:	fba3 3204 	umull	r3, r2, r3, r4
 801e044:	fb04 2205 	mla	r2, r4, r5, r2
 801e048:	43dd      	mvns	r5, r3
 801e04a:	1a8c      	subs	r4, r1, r2
 801e04c:	4285      	cmp	r5, r0
 801e04e:	41b4      	sbcs	r4, r6
 801e050:	d30c      	bcc.n	801e06c <rmw_time_total_nsec+0x50>
 801e052:	1818      	adds	r0, r3, r0
 801e054:	eb42 0106 	adc.w	r1, r2, r6
 801e058:	b005      	add	sp, #20
 801e05a:	bc70      	pop	{r4, r5, r6}
 801e05c:	4770      	bx	lr
 801e05e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e062:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e066:	b005      	add	sp, #20
 801e068:	bc70      	pop	{r4, r5, r6}
 801e06a:	4770      	bx	lr
 801e06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e070:	b005      	add	sp, #20
 801e072:	bc70      	pop	{r4, r5, r6}
 801e074:	4770      	bx	lr
 801e076:	bf00      	nop
 801e078:	25c17d04 	.word	0x25c17d04
 801e07c:	3b9aca00 	.word	0x3b9aca00

0801e080 <rmw_validate_full_topic_name>:
 801e080:	2800      	cmp	r0, #0
 801e082:	d05d      	beq.n	801e140 <rmw_validate_full_topic_name+0xc0>
 801e084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e088:	460d      	mov	r5, r1
 801e08a:	2900      	cmp	r1, #0
 801e08c:	d05a      	beq.n	801e144 <rmw_validate_full_topic_name+0xc4>
 801e08e:	4604      	mov	r4, r0
 801e090:	4616      	mov	r6, r2
 801e092:	f7e2 f935 	bl	8000300 <strlen>
 801e096:	b150      	cbz	r0, 801e0ae <rmw_validate_full_topic_name+0x2e>
 801e098:	7823      	ldrb	r3, [r4, #0]
 801e09a:	2b2f      	cmp	r3, #47	; 0x2f
 801e09c:	d00e      	beq.n	801e0bc <rmw_validate_full_topic_name+0x3c>
 801e09e:	2302      	movs	r3, #2
 801e0a0:	602b      	str	r3, [r5, #0]
 801e0a2:	b146      	cbz	r6, 801e0b6 <rmw_validate_full_topic_name+0x36>
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	4618      	mov	r0, r3
 801e0a8:	6033      	str	r3, [r6, #0]
 801e0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0ae:	2301      	movs	r3, #1
 801e0b0:	602b      	str	r3, [r5, #0]
 801e0b2:	2e00      	cmp	r6, #0
 801e0b4:	d1f6      	bne.n	801e0a4 <rmw_validate_full_topic_name+0x24>
 801e0b6:	2000      	movs	r0, #0
 801e0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0bc:	1e43      	subs	r3, r0, #1
 801e0be:	5ce2      	ldrb	r2, [r4, r3]
 801e0c0:	2a2f      	cmp	r2, #47	; 0x2f
 801e0c2:	d041      	beq.n	801e148 <rmw_validate_full_topic_name+0xc8>
 801e0c4:	1e62      	subs	r2, r4, #1
 801e0c6:	f1c4 0e01 	rsb	lr, r4, #1
 801e0ca:	eb02 0800 	add.w	r8, r2, r0
 801e0ce:	eb0e 0702 	add.w	r7, lr, r2
 801e0d2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e0d6:	f023 0120 	bic.w	r1, r3, #32
 801e0da:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801e0de:	3941      	subs	r1, #65	; 0x41
 801e0e0:	2919      	cmp	r1, #25
 801e0e2:	d90f      	bls.n	801e104 <rmw_validate_full_topic_name+0x84>
 801e0e4:	f1bc 0f0a 	cmp.w	ip, #10
 801e0e8:	d90c      	bls.n	801e104 <rmw_validate_full_topic_name+0x84>
 801e0ea:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801e0ee:	fab3 f383 	clz	r3, r3
 801e0f2:	095b      	lsrs	r3, r3, #5
 801e0f4:	b933      	cbnz	r3, 801e104 <rmw_validate_full_topic_name+0x84>
 801e0f6:	2204      	movs	r2, #4
 801e0f8:	602a      	str	r2, [r5, #0]
 801e0fa:	2e00      	cmp	r6, #0
 801e0fc:	d0db      	beq.n	801e0b6 <rmw_validate_full_topic_name+0x36>
 801e0fe:	4618      	mov	r0, r3
 801e100:	6037      	str	r7, [r6, #0]
 801e102:	e7d2      	b.n	801e0aa <rmw_validate_full_topic_name+0x2a>
 801e104:	4542      	cmp	r2, r8
 801e106:	d1e2      	bne.n	801e0ce <rmw_validate_full_topic_name+0x4e>
 801e108:	2301      	movs	r3, #1
 801e10a:	4f1a      	ldr	r7, [pc, #104]	; (801e174 <rmw_validate_full_topic_name+0xf4>)
 801e10c:	e004      	b.n	801e118 <rmw_validate_full_topic_name+0x98>
 801e10e:	4298      	cmp	r0, r3
 801e110:	f104 0401 	add.w	r4, r4, #1
 801e114:	4613      	mov	r3, r2
 801e116:	d91c      	bls.n	801e152 <rmw_validate_full_topic_name+0xd2>
 801e118:	4298      	cmp	r0, r3
 801e11a:	f103 0201 	add.w	r2, r3, #1
 801e11e:	d0f6      	beq.n	801e10e <rmw_validate_full_topic_name+0x8e>
 801e120:	7821      	ldrb	r1, [r4, #0]
 801e122:	292f      	cmp	r1, #47	; 0x2f
 801e124:	d1f3      	bne.n	801e10e <rmw_validate_full_topic_name+0x8e>
 801e126:	7861      	ldrb	r1, [r4, #1]
 801e128:	292f      	cmp	r1, #47	; 0x2f
 801e12a:	d01e      	beq.n	801e16a <rmw_validate_full_topic_name+0xea>
 801e12c:	5dc9      	ldrb	r1, [r1, r7]
 801e12e:	0749      	lsls	r1, r1, #29
 801e130:	d5ed      	bpl.n	801e10e <rmw_validate_full_topic_name+0x8e>
 801e132:	2206      	movs	r2, #6
 801e134:	602a      	str	r2, [r5, #0]
 801e136:	2e00      	cmp	r6, #0
 801e138:	d0bd      	beq.n	801e0b6 <rmw_validate_full_topic_name+0x36>
 801e13a:	2000      	movs	r0, #0
 801e13c:	6033      	str	r3, [r6, #0]
 801e13e:	e7b4      	b.n	801e0aa <rmw_validate_full_topic_name+0x2a>
 801e140:	200b      	movs	r0, #11
 801e142:	4770      	bx	lr
 801e144:	200b      	movs	r0, #11
 801e146:	e7b0      	b.n	801e0aa <rmw_validate_full_topic_name+0x2a>
 801e148:	2203      	movs	r2, #3
 801e14a:	602a      	str	r2, [r5, #0]
 801e14c:	2e00      	cmp	r6, #0
 801e14e:	d1f4      	bne.n	801e13a <rmw_validate_full_topic_name+0xba>
 801e150:	e7b1      	b.n	801e0b6 <rmw_validate_full_topic_name+0x36>
 801e152:	28f7      	cmp	r0, #247	; 0xf7
 801e154:	d803      	bhi.n	801e15e <rmw_validate_full_topic_name+0xde>
 801e156:	2300      	movs	r3, #0
 801e158:	4618      	mov	r0, r3
 801e15a:	602b      	str	r3, [r5, #0]
 801e15c:	e7a5      	b.n	801e0aa <rmw_validate_full_topic_name+0x2a>
 801e15e:	2307      	movs	r3, #7
 801e160:	602b      	str	r3, [r5, #0]
 801e162:	2e00      	cmp	r6, #0
 801e164:	d0a7      	beq.n	801e0b6 <rmw_validate_full_topic_name+0x36>
 801e166:	23f6      	movs	r3, #246	; 0xf6
 801e168:	e7e7      	b.n	801e13a <rmw_validate_full_topic_name+0xba>
 801e16a:	2205      	movs	r2, #5
 801e16c:	602a      	str	r2, [r5, #0]
 801e16e:	2e00      	cmp	r6, #0
 801e170:	d1e3      	bne.n	801e13a <rmw_validate_full_topic_name+0xba>
 801e172:	e7a0      	b.n	801e0b6 <rmw_validate_full_topic_name+0x36>
 801e174:	08025e9c 	.word	0x08025e9c

0801e178 <on_status>:
 801e178:	b082      	sub	sp, #8
 801e17a:	b002      	add	sp, #8
 801e17c:	4770      	bx	lr
 801e17e:	bf00      	nop

0801e180 <on_topic>:
 801e180:	4a23      	ldr	r2, [pc, #140]	; (801e210 <on_topic+0x90>)
 801e182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e186:	6812      	ldr	r2, [r2, #0]
 801e188:	b094      	sub	sp, #80	; 0x50
 801e18a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e18c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801e190:	9113      	str	r1, [sp, #76]	; 0x4c
 801e192:	9312      	str	r3, [sp, #72]	; 0x48
 801e194:	b3c2      	cbz	r2, 801e208 <on_topic+0x88>
 801e196:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801e19a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801e19e:	e001      	b.n	801e1a4 <on_topic+0x24>
 801e1a0:	6852      	ldr	r2, [r2, #4]
 801e1a2:	b38a      	cbz	r2, 801e208 <on_topic+0x88>
 801e1a4:	6894      	ldr	r4, [r2, #8]
 801e1a6:	8aa3      	ldrh	r3, [r4, #20]
 801e1a8:	428b      	cmp	r3, r1
 801e1aa:	d1f9      	bne.n	801e1a0 <on_topic+0x20>
 801e1ac:	7da3      	ldrb	r3, [r4, #22]
 801e1ae:	4283      	cmp	r3, r0
 801e1b0:	d1f6      	bne.n	801e1a0 <on_topic+0x20>
 801e1b2:	2248      	movs	r2, #72	; 0x48
 801e1b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801e1b8:	4668      	mov	r0, sp
 801e1ba:	f003 f880 	bl	80212be <memcpy>
 801e1be:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801e1c2:	4620      	mov	r0, r4
 801e1c4:	cb0c      	ldmia	r3, {r2, r3}
 801e1c6:	f7f8 ffdb 	bl	8017180 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e1ca:	4607      	mov	r7, r0
 801e1cc:	b1e0      	cbz	r0, 801e208 <on_topic+0x88>
 801e1ce:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801e1d2:	462a      	mov	r2, r5
 801e1d4:	4630      	mov	r0, r6
 801e1d6:	f108 0110 	add.w	r1, r8, #16
 801e1da:	f7f9 fc91 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801e1de:	b930      	cbnz	r0, 801e1ee <on_topic+0x6e>
 801e1e0:	4639      	mov	r1, r7
 801e1e2:	480c      	ldr	r0, [pc, #48]	; (801e214 <on_topic+0x94>)
 801e1e4:	b014      	add	sp, #80	; 0x50
 801e1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e1ea:	f000 b8bd 	b.w	801e368 <put_memory>
 801e1ee:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801e1f2:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801e1f6:	f000 fb33 	bl	801e860 <rmw_uros_epoch_nanos>
 801e1fa:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801e1fe:	2305      	movs	r3, #5
 801e200:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e204:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801e208:	b014      	add	sp, #80	; 0x50
 801e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e20e:	bf00      	nop
 801e210:	20016e74 	.word	0x20016e74
 801e214:	20016e64 	.word	0x20016e64

0801e218 <on_request>:
 801e218:	4824      	ldr	r0, [pc, #144]	; (801e2ac <on_request+0x94>)
 801e21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e21e:	6800      	ldr	r0, [r0, #0]
 801e220:	b094      	sub	sp, #80	; 0x50
 801e222:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e224:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e228:	9113      	str	r1, [sp, #76]	; 0x4c
 801e22a:	2800      	cmp	r0, #0
 801e22c:	d03b      	beq.n	801e2a6 <on_request+0x8e>
 801e22e:	461d      	mov	r5, r3
 801e230:	e001      	b.n	801e236 <on_request+0x1e>
 801e232:	6840      	ldr	r0, [r0, #4]
 801e234:	b3b8      	cbz	r0, 801e2a6 <on_request+0x8e>
 801e236:	6884      	ldr	r4, [r0, #8]
 801e238:	8b21      	ldrh	r1, [r4, #24]
 801e23a:	4291      	cmp	r1, r2
 801e23c:	d1f9      	bne.n	801e232 <on_request+0x1a>
 801e23e:	2248      	movs	r2, #72	; 0x48
 801e240:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e244:	4668      	mov	r0, sp
 801e246:	f003 f83a 	bl	80212be <memcpy>
 801e24a:	f104 0320 	add.w	r3, r4, #32
 801e24e:	4620      	mov	r0, r4
 801e250:	cb0c      	ldmia	r3, {r2, r3}
 801e252:	f7f8 ff95 	bl	8017180 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e256:	4680      	mov	r8, r0
 801e258:	b328      	cbz	r0, 801e2a6 <on_request+0x8e>
 801e25a:	4630      	mov	r0, r6
 801e25c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e260:	463a      	mov	r2, r7
 801e262:	f106 0110 	add.w	r1, r6, #16
 801e266:	f7f9 fc4b 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801e26a:	b930      	cbnz	r0, 801e27a <on_request+0x62>
 801e26c:	4641      	mov	r1, r8
 801e26e:	4810      	ldr	r0, [pc, #64]	; (801e2b0 <on_request+0x98>)
 801e270:	b014      	add	sp, #80	; 0x50
 801e272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e276:	f000 b877 	b.w	801e368 <put_memory>
 801e27a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e27c:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801e280:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e284:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e288:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e28c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e290:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e294:	f000 fae4 	bl	801e860 <rmw_uros_epoch_nanos>
 801e298:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e29c:	2303      	movs	r3, #3
 801e29e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e2a2:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e2a6:	b014      	add	sp, #80	; 0x50
 801e2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2ac:	20016e44 	.word	0x20016e44
 801e2b0:	20016e64 	.word	0x20016e64

0801e2b4 <on_reply>:
 801e2b4:	4822      	ldr	r0, [pc, #136]	; (801e340 <on_reply+0x8c>)
 801e2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2ba:	6800      	ldr	r0, [r0, #0]
 801e2bc:	b094      	sub	sp, #80	; 0x50
 801e2be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801e2c0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801e2c4:	9113      	str	r1, [sp, #76]	; 0x4c
 801e2c6:	b3b8      	cbz	r0, 801e338 <on_reply+0x84>
 801e2c8:	461d      	mov	r5, r3
 801e2ca:	e001      	b.n	801e2d0 <on_reply+0x1c>
 801e2cc:	6840      	ldr	r0, [r0, #4]
 801e2ce:	b398      	cbz	r0, 801e338 <on_reply+0x84>
 801e2d0:	6884      	ldr	r4, [r0, #8]
 801e2d2:	8b21      	ldrh	r1, [r4, #24]
 801e2d4:	4291      	cmp	r1, r2
 801e2d6:	d1f9      	bne.n	801e2cc <on_reply+0x18>
 801e2d8:	2248      	movs	r2, #72	; 0x48
 801e2da:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801e2de:	4668      	mov	r0, sp
 801e2e0:	f002 ffed 	bl	80212be <memcpy>
 801e2e4:	f104 0320 	add.w	r3, r4, #32
 801e2e8:	4620      	mov	r0, r4
 801e2ea:	cb0c      	ldmia	r3, {r2, r3}
 801e2ec:	f7f8 ff48 	bl	8017180 <rmw_uxrce_get_static_input_buffer_for_entity>
 801e2f0:	4680      	mov	r8, r0
 801e2f2:	b308      	cbz	r0, 801e338 <on_reply+0x84>
 801e2f4:	4630      	mov	r0, r6
 801e2f6:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801e2fa:	463a      	mov	r2, r7
 801e2fc:	f106 0110 	add.w	r1, r6, #16
 801e300:	f7f9 fbfe 	bl	8017b00 <ucdr_deserialize_array_uint8_t>
 801e304:	b930      	cbnz	r0, 801e314 <on_reply+0x60>
 801e306:	4641      	mov	r1, r8
 801e308:	480e      	ldr	r0, [pc, #56]	; (801e344 <on_reply+0x90>)
 801e30a:	b014      	add	sp, #80	; 0x50
 801e30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e310:	f000 b82a 	b.w	801e368 <put_memory>
 801e314:	2200      	movs	r2, #0
 801e316:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801e31a:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801e31e:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801e322:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801e326:	f000 fa9b 	bl	801e860 <rmw_uros_epoch_nanos>
 801e32a:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801e32e:	2304      	movs	r3, #4
 801e330:	e942 0102 	strd	r0, r1, [r2, #-8]
 801e334:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801e338:	b014      	add	sp, #80	; 0x50
 801e33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e33e:	bf00      	nop
 801e340:	20012554 	.word	0x20012554
 801e344:	20016e64 	.word	0x20016e64

0801e348 <get_memory>:
 801e348:	4603      	mov	r3, r0
 801e34a:	6840      	ldr	r0, [r0, #4]
 801e34c:	b158      	cbz	r0, 801e366 <get_memory+0x1e>
 801e34e:	6842      	ldr	r2, [r0, #4]
 801e350:	605a      	str	r2, [r3, #4]
 801e352:	b10a      	cbz	r2, 801e358 <get_memory+0x10>
 801e354:	2100      	movs	r1, #0
 801e356:	6011      	str	r1, [r2, #0]
 801e358:	681a      	ldr	r2, [r3, #0]
 801e35a:	6042      	str	r2, [r0, #4]
 801e35c:	b102      	cbz	r2, 801e360 <get_memory+0x18>
 801e35e:	6010      	str	r0, [r2, #0]
 801e360:	2200      	movs	r2, #0
 801e362:	6002      	str	r2, [r0, #0]
 801e364:	6018      	str	r0, [r3, #0]
 801e366:	4770      	bx	lr

0801e368 <put_memory>:
 801e368:	680b      	ldr	r3, [r1, #0]
 801e36a:	b10b      	cbz	r3, 801e370 <put_memory+0x8>
 801e36c:	684a      	ldr	r2, [r1, #4]
 801e36e:	605a      	str	r2, [r3, #4]
 801e370:	684a      	ldr	r2, [r1, #4]
 801e372:	b102      	cbz	r2, 801e376 <put_memory+0xe>
 801e374:	6013      	str	r3, [r2, #0]
 801e376:	6803      	ldr	r3, [r0, #0]
 801e378:	428b      	cmp	r3, r1
 801e37a:	6843      	ldr	r3, [r0, #4]
 801e37c:	bf08      	it	eq
 801e37e:	6002      	streq	r2, [r0, #0]
 801e380:	604b      	str	r3, [r1, #4]
 801e382:	b103      	cbz	r3, 801e386 <put_memory+0x1e>
 801e384:	6019      	str	r1, [r3, #0]
 801e386:	2300      	movs	r3, #0
 801e388:	600b      	str	r3, [r1, #0]
 801e38a:	6041      	str	r1, [r0, #4]
 801e38c:	4770      	bx	lr
 801e38e:	bf00      	nop

0801e390 <rmw_destroy_client>:
 801e390:	b570      	push	{r4, r5, r6, lr}
 801e392:	b128      	cbz	r0, 801e3a0 <rmw_destroy_client+0x10>
 801e394:	4604      	mov	r4, r0
 801e396:	6800      	ldr	r0, [r0, #0]
 801e398:	460d      	mov	r5, r1
 801e39a:	f7f9 f905 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 801e39e:	b910      	cbnz	r0, 801e3a6 <rmw_destroy_client+0x16>
 801e3a0:	2401      	movs	r4, #1
 801e3a2:	4620      	mov	r0, r4
 801e3a4:	bd70      	pop	{r4, r5, r6, pc}
 801e3a6:	6863      	ldr	r3, [r4, #4]
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d0f9      	beq.n	801e3a0 <rmw_destroy_client+0x10>
 801e3ac:	2d00      	cmp	r5, #0
 801e3ae:	d0f7      	beq.n	801e3a0 <rmw_destroy_client+0x10>
 801e3b0:	6828      	ldr	r0, [r5, #0]
 801e3b2:	f7f9 f8f9 	bl	80175a8 <is_uxrce_rmw_identifier_valid>
 801e3b6:	2800      	cmp	r0, #0
 801e3b8:	d0f2      	beq.n	801e3a0 <rmw_destroy_client+0x10>
 801e3ba:	686e      	ldr	r6, [r5, #4]
 801e3bc:	2e00      	cmp	r6, #0
 801e3be:	d0ef      	beq.n	801e3a0 <rmw_destroy_client+0x10>
 801e3c0:	6864      	ldr	r4, [r4, #4]
 801e3c2:	6932      	ldr	r2, [r6, #16]
 801e3c4:	6920      	ldr	r0, [r4, #16]
 801e3c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e3ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e3ce:	6819      	ldr	r1, [r3, #0]
 801e3d0:	f7f9 ff62 	bl	8018298 <uxr_buffer_cancel_data>
 801e3d4:	4602      	mov	r2, r0
 801e3d6:	6920      	ldr	r0, [r4, #16]
 801e3d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e3dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e3e0:	f7f8 ffd0 	bl	8017384 <run_xrce_session>
 801e3e4:	6920      	ldr	r0, [r4, #16]
 801e3e6:	6932      	ldr	r2, [r6, #16]
 801e3e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e3ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e3f0:	6819      	ldr	r1, [r3, #0]
 801e3f2:	f7f9 fbed 	bl	8017bd0 <uxr_buffer_delete_entity>
 801e3f6:	4602      	mov	r2, r0
 801e3f8:	6920      	ldr	r0, [r4, #16]
 801e3fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e3fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e402:	f7f8 ffbf 	bl	8017384 <run_xrce_session>
 801e406:	4603      	mov	r3, r0
 801e408:	4628      	mov	r0, r5
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	bf14      	ite	ne
 801e40e:	2400      	movne	r4, #0
 801e410:	2402      	moveq	r4, #2
 801e412:	f7f8 fe93 	bl	801713c <rmw_uxrce_fini_client_memory>
 801e416:	e7c4      	b.n	801e3a2 <rmw_destroy_client+0x12>

0801e418 <rmw_get_implementation_identifier>:
 801e418:	4b01      	ldr	r3, [pc, #4]	; (801e420 <rmw_get_implementation_identifier+0x8>)
 801e41a:	6818      	ldr	r0, [r3, #0]
 801e41c:	4770      	bx	lr
 801e41e:	bf00      	nop
 801e420:	08025df4 	.word	0x08025df4

0801e424 <rmw_create_guard_condition>:
 801e424:	b538      	push	{r3, r4, r5, lr}
 801e426:	4605      	mov	r5, r0
 801e428:	4808      	ldr	r0, [pc, #32]	; (801e44c <rmw_create_guard_condition+0x28>)
 801e42a:	f7ff ff8d 	bl	801e348 <get_memory>
 801e42e:	4603      	mov	r3, r0
 801e430:	b148      	cbz	r0, 801e446 <rmw_create_guard_condition+0x22>
 801e432:	6884      	ldr	r4, [r0, #8]
 801e434:	2300      	movs	r3, #0
 801e436:	61e5      	str	r5, [r4, #28]
 801e438:	7423      	strb	r3, [r4, #16]
 801e43a:	f7ff ffed 	bl	801e418 <rmw_get_implementation_identifier>
 801e43e:	f104 0314 	add.w	r3, r4, #20
 801e442:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801e446:	4618      	mov	r0, r3
 801e448:	bd38      	pop	{r3, r4, r5, pc}
 801e44a:	bf00      	nop
 801e44c:	20016e04 	.word	0x20016e04

0801e450 <rmw_destroy_guard_condition>:
 801e450:	b508      	push	{r3, lr}
 801e452:	4b08      	ldr	r3, [pc, #32]	; (801e474 <rmw_destroy_guard_condition+0x24>)
 801e454:	6819      	ldr	r1, [r3, #0]
 801e456:	b911      	cbnz	r1, 801e45e <rmw_destroy_guard_condition+0xe>
 801e458:	e00a      	b.n	801e470 <rmw_destroy_guard_condition+0x20>
 801e45a:	6849      	ldr	r1, [r1, #4]
 801e45c:	b141      	cbz	r1, 801e470 <rmw_destroy_guard_condition+0x20>
 801e45e:	688b      	ldr	r3, [r1, #8]
 801e460:	3314      	adds	r3, #20
 801e462:	4298      	cmp	r0, r3
 801e464:	d1f9      	bne.n	801e45a <rmw_destroy_guard_condition+0xa>
 801e466:	4803      	ldr	r0, [pc, #12]	; (801e474 <rmw_destroy_guard_condition+0x24>)
 801e468:	f7ff ff7e 	bl	801e368 <put_memory>
 801e46c:	2000      	movs	r0, #0
 801e46e:	bd08      	pop	{r3, pc}
 801e470:	2001      	movs	r0, #1
 801e472:	bd08      	pop	{r3, pc}
 801e474:	20016e04 	.word	0x20016e04

0801e478 <create_topic>:
 801e478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e47c:	4605      	mov	r5, r0
 801e47e:	b084      	sub	sp, #16
 801e480:	4822      	ldr	r0, [pc, #136]	; (801e50c <create_topic+0x94>)
 801e482:	460f      	mov	r7, r1
 801e484:	4616      	mov	r6, r2
 801e486:	f7ff ff5f 	bl	801e348 <get_memory>
 801e48a:	4604      	mov	r4, r0
 801e48c:	2800      	cmp	r0, #0
 801e48e:	d039      	beq.n	801e504 <create_topic+0x8c>
 801e490:	692b      	ldr	r3, [r5, #16]
 801e492:	2102      	movs	r1, #2
 801e494:	6884      	ldr	r4, [r0, #8]
 801e496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801e49a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801e514 <create_topic+0x9c>
 801e49e:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801e4a2:	1c42      	adds	r2, r0, #1
 801e4a4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801e4a8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801e4ac:	f7f9 fe8a 	bl	80181c4 <uxr_object_id>
 801e4b0:	223c      	movs	r2, #60	; 0x3c
 801e4b2:	6120      	str	r0, [r4, #16]
 801e4b4:	4641      	mov	r1, r8
 801e4b6:	4638      	mov	r0, r7
 801e4b8:	f7f9 f85e 	bl	8017578 <generate_topic_name>
 801e4bc:	b1f0      	cbz	r0, 801e4fc <create_topic+0x84>
 801e4be:	4f14      	ldr	r7, [pc, #80]	; (801e510 <create_topic+0x98>)
 801e4c0:	4630      	mov	r0, r6
 801e4c2:	2264      	movs	r2, #100	; 0x64
 801e4c4:	4639      	mov	r1, r7
 801e4c6:	f7f9 f829 	bl	801751c <generate_type_name>
 801e4ca:	b1b8      	cbz	r0, 801e4fc <create_topic+0x84>
 801e4cc:	6928      	ldr	r0, [r5, #16]
 801e4ce:	2106      	movs	r1, #6
 801e4d0:	696b      	ldr	r3, [r5, #20]
 801e4d2:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801e4d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e4da:	f8cd 8000 	str.w	r8, [sp]
 801e4de:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801e4e2:	6811      	ldr	r1, [r2, #0]
 801e4e4:	6922      	ldr	r2, [r4, #16]
 801e4e6:	f7f9 fbf1 	bl	8017ccc <uxr_buffer_create_topic_bin>
 801e4ea:	4602      	mov	r2, r0
 801e4ec:	6928      	ldr	r0, [r5, #16]
 801e4ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801e4f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801e4f6:	f7f8 ff45 	bl	8017384 <run_xrce_session>
 801e4fa:	b918      	cbnz	r0, 801e504 <create_topic+0x8c>
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	2400      	movs	r4, #0
 801e500:	f7f8 fe32 	bl	8017168 <rmw_uxrce_fini_topic_memory>
 801e504:	4620      	mov	r0, r4
 801e506:	b004      	add	sp, #16
 801e508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e50c:	20016e84 	.word	0x20016e84
 801e510:	20016f18 	.word	0x20016f18
 801e514:	20016edc 	.word	0x20016edc

0801e518 <destroy_topic>:
 801e518:	b538      	push	{r3, r4, r5, lr}
 801e51a:	6985      	ldr	r5, [r0, #24]
 801e51c:	b1dd      	cbz	r5, 801e556 <destroy_topic+0x3e>
 801e51e:	4604      	mov	r4, r0
 801e520:	6928      	ldr	r0, [r5, #16]
 801e522:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801e526:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e52a:	6922      	ldr	r2, [r4, #16]
 801e52c:	6819      	ldr	r1, [r3, #0]
 801e52e:	f7f9 fb4f 	bl	8017bd0 <uxr_buffer_delete_entity>
 801e532:	4602      	mov	r2, r0
 801e534:	6928      	ldr	r0, [r5, #16]
 801e536:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801e53a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801e53e:	f7f8 ff21 	bl	8017384 <run_xrce_session>
 801e542:	4603      	mov	r3, r0
 801e544:	4620      	mov	r0, r4
 801e546:	2b00      	cmp	r3, #0
 801e548:	bf14      	ite	ne
 801e54a:	2400      	movne	r4, #0
 801e54c:	2402      	moveq	r4, #2
 801e54e:	f7f8 fe0b 	bl	8017168 <rmw_uxrce_fini_topic_memory>
 801e552:	4620      	mov	r0, r4
 801e554:	bd38      	pop	{r3, r4, r5, pc}
 801e556:	2401      	movs	r4, #1
 801e558:	4620      	mov	r0, r4
 801e55a:	bd38      	pop	{r3, r4, r5, pc}

0801e55c <rmw_wait>:
 801e55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e560:	4698      	mov	r8, r3
 801e562:	ea40 0301 	orr.w	r3, r0, r1
 801e566:	b089      	sub	sp, #36	; 0x24
 801e568:	ea48 0303 	orr.w	r3, r8, r3
 801e56c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e56e:	4313      	orrs	r3, r2
 801e570:	f000 8106 	beq.w	801e780 <rmw_wait+0x224>
 801e574:	4605      	mov	r5, r0
 801e576:	460e      	mov	r6, r1
 801e578:	4691      	mov	r9, r2
 801e57a:	b16c      	cbz	r4, 801e598 <rmw_wait+0x3c>
 801e57c:	4ba6      	ldr	r3, [pc, #664]	; (801e818 <rmw_wait+0x2bc>)
 801e57e:	af04      	add	r7, sp, #16
 801e580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e582:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801e586:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e58a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e58e:	f7ff fcef 	bl	801df70 <rmw_time_equal>
 801e592:	2800      	cmp	r0, #0
 801e594:	f000 810b 	beq.w	801e7ae <rmw_wait+0x252>
 801e598:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e59c:	f7f8 fe74 	bl	8017288 <rmw_uxrce_clean_expired_static_input_buffer>
 801e5a0:	4b9e      	ldr	r3, [pc, #632]	; (801e81c <rmw_wait+0x2c0>)
 801e5a2:	681c      	ldr	r4, [r3, #0]
 801e5a4:	b14c      	cbz	r4, 801e5ba <rmw_wait+0x5e>
 801e5a6:	4623      	mov	r3, r4
 801e5a8:	2100      	movs	r1, #0
 801e5aa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801e5ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e5b2:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d1f7      	bne.n	801e5aa <rmw_wait+0x4e>
 801e5ba:	f1b9 0f00 	cmp.w	r9, #0
 801e5be:	d011      	beq.n	801e5e4 <rmw_wait+0x88>
 801e5c0:	f8d9 1000 	ldr.w	r1, [r9]
 801e5c4:	b171      	cbz	r1, 801e5e4 <rmw_wait+0x88>
 801e5c6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	2001      	movs	r0, #1
 801e5ce:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e5d2:	3301      	adds	r3, #1
 801e5d4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e5d6:	4299      	cmp	r1, r3
 801e5d8:	6912      	ldr	r2, [r2, #16]
 801e5da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e5de:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e5e2:	d1f4      	bne.n	801e5ce <rmw_wait+0x72>
 801e5e4:	f1b8 0f00 	cmp.w	r8, #0
 801e5e8:	d011      	beq.n	801e60e <rmw_wait+0xb2>
 801e5ea:	f8d8 1000 	ldr.w	r1, [r8]
 801e5ee:	b171      	cbz	r1, 801e60e <rmw_wait+0xb2>
 801e5f0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	2001      	movs	r0, #1
 801e5f8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e5fc:	3301      	adds	r3, #1
 801e5fe:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801e600:	4299      	cmp	r1, r3
 801e602:	6912      	ldr	r2, [r2, #16]
 801e604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e608:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e60c:	d1f4      	bne.n	801e5f8 <rmw_wait+0x9c>
 801e60e:	b185      	cbz	r5, 801e632 <rmw_wait+0xd6>
 801e610:	6829      	ldr	r1, [r5, #0]
 801e612:	b171      	cbz	r1, 801e632 <rmw_wait+0xd6>
 801e614:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801e618:	2300      	movs	r3, #0
 801e61a:	2001      	movs	r0, #1
 801e61c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e620:	3301      	adds	r3, #1
 801e622:	6a12      	ldr	r2, [r2, #32]
 801e624:	4299      	cmp	r1, r3
 801e626:	6912      	ldr	r2, [r2, #16]
 801e628:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801e62c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801e630:	d1f4      	bne.n	801e61c <rmw_wait+0xc0>
 801e632:	b344      	cbz	r4, 801e686 <rmw_wait+0x12a>
 801e634:	4622      	mov	r2, r4
 801e636:	2300      	movs	r3, #0
 801e638:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801e63c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801e640:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801e644:	440b      	add	r3, r1
 801e646:	b2db      	uxtb	r3, r3
 801e648:	2a00      	cmp	r2, #0
 801e64a:	d1f5      	bne.n	801e638 <rmw_wait+0xdc>
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d05f      	beq.n	801e710 <rmw_wait+0x1b4>
 801e650:	1c7a      	adds	r2, r7, #1
 801e652:	d00d      	beq.n	801e670 <rmw_wait+0x114>
 801e654:	ee07 7a90 	vmov	s15, r7
 801e658:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801e65c:	ee07 3a90 	vmov	s15, r3
 801e660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e668:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801e66c:	ee17 7a90 	vmov	r7, s15
 801e670:	68a0      	ldr	r0, [r4, #8]
 801e672:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801e676:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	f040 808d 	bne.w	801e79a <rmw_wait+0x23e>
 801e680:	6864      	ldr	r4, [r4, #4]
 801e682:	2c00      	cmp	r4, #0
 801e684:	d1f4      	bne.n	801e670 <rmw_wait+0x114>
 801e686:	f1b9 0f00 	cmp.w	r9, #0
 801e68a:	f000 80a1 	beq.w	801e7d0 <rmw_wait+0x274>
 801e68e:	f8d9 7000 	ldr.w	r7, [r9]
 801e692:	2f00      	cmp	r7, #0
 801e694:	f000 80a4 	beq.w	801e7e0 <rmw_wait+0x284>
 801e698:	2400      	movs	r4, #0
 801e69a:	4627      	mov	r7, r4
 801e69c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e6a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e6a4:	f7f8 fdc6 	bl	8017234 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e6a8:	2800      	cmp	r0, #0
 801e6aa:	d03b      	beq.n	801e724 <rmw_wait+0x1c8>
 801e6ac:	3401      	adds	r4, #1
 801e6ae:	f8d9 3000 	ldr.w	r3, [r9]
 801e6b2:	2701      	movs	r7, #1
 801e6b4:	42a3      	cmp	r3, r4
 801e6b6:	d8f1      	bhi.n	801e69c <rmw_wait+0x140>
 801e6b8:	2701      	movs	r7, #1
 801e6ba:	f1b8 0f00 	cmp.w	r8, #0
 801e6be:	d010      	beq.n	801e6e2 <rmw_wait+0x186>
 801e6c0:	f8d8 3000 	ldr.w	r3, [r8]
 801e6c4:	b16b      	cbz	r3, 801e6e2 <rmw_wait+0x186>
 801e6c6:	2400      	movs	r4, #0
 801e6c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e6cc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e6d0:	f7f8 fdb0 	bl	8017234 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e6d4:	b370      	cbz	r0, 801e734 <rmw_wait+0x1d8>
 801e6d6:	3401      	adds	r4, #1
 801e6d8:	f8d8 3000 	ldr.w	r3, [r8]
 801e6dc:	2701      	movs	r7, #1
 801e6de:	42a3      	cmp	r3, r4
 801e6e0:	d8f2      	bhi.n	801e6c8 <rmw_wait+0x16c>
 801e6e2:	2d00      	cmp	r5, #0
 801e6e4:	d035      	beq.n	801e752 <rmw_wait+0x1f6>
 801e6e6:	682b      	ldr	r3, [r5, #0]
 801e6e8:	b39b      	cbz	r3, 801e752 <rmw_wait+0x1f6>
 801e6ea:	2400      	movs	r4, #0
 801e6ec:	686b      	ldr	r3, [r5, #4]
 801e6ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e6f2:	f7f8 fd9f 	bl	8017234 <rmw_uxrce_find_static_input_buffer_by_owner>
 801e6f6:	b328      	cbz	r0, 801e744 <rmw_wait+0x1e8>
 801e6f8:	3401      	adds	r4, #1
 801e6fa:	682b      	ldr	r3, [r5, #0]
 801e6fc:	2701      	movs	r7, #1
 801e6fe:	42a3      	cmp	r3, r4
 801e700:	d8f4      	bhi.n	801e6ec <rmw_wait+0x190>
 801e702:	2e00      	cmp	r6, #0
 801e704:	d03c      	beq.n	801e780 <rmw_wait+0x224>
 801e706:	6834      	ldr	r4, [r6, #0]
 801e708:	2c00      	cmp	r4, #0
 801e70a:	d039      	beq.n	801e780 <rmw_wait+0x224>
 801e70c:	2701      	movs	r7, #1
 801e70e:	e023      	b.n	801e758 <rmw_wait+0x1fc>
 801e710:	68a0      	ldr	r0, [r4, #8]
 801e712:	2100      	movs	r1, #0
 801e714:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e718:	f7fa fb54 	bl	8018dc4 <uxr_run_session_timeout>
 801e71c:	6864      	ldr	r4, [r4, #4]
 801e71e:	2c00      	cmp	r4, #0
 801e720:	d1f6      	bne.n	801e710 <rmw_wait+0x1b4>
 801e722:	e7b0      	b.n	801e686 <rmw_wait+0x12a>
 801e724:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e728:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e72c:	3401      	adds	r4, #1
 801e72e:	42a3      	cmp	r3, r4
 801e730:	d8b4      	bhi.n	801e69c <rmw_wait+0x140>
 801e732:	e7c2      	b.n	801e6ba <rmw_wait+0x15e>
 801e734:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e738:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e73c:	3401      	adds	r4, #1
 801e73e:	429c      	cmp	r4, r3
 801e740:	d3c2      	bcc.n	801e6c8 <rmw_wait+0x16c>
 801e742:	e7ce      	b.n	801e6e2 <rmw_wait+0x186>
 801e744:	e9d5 3200 	ldrd	r3, r2, [r5]
 801e748:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e74c:	3401      	adds	r4, #1
 801e74e:	42a3      	cmp	r3, r4
 801e750:	d8cc      	bhi.n	801e6ec <rmw_wait+0x190>
 801e752:	b1a6      	cbz	r6, 801e77e <rmw_wait+0x222>
 801e754:	6834      	ldr	r4, [r6, #0]
 801e756:	b194      	cbz	r4, 801e77e <rmw_wait+0x222>
 801e758:	2300      	movs	r3, #0
 801e75a:	461d      	mov	r5, r3
 801e75c:	e004      	b.n	801e768 <rmw_wait+0x20c>
 801e75e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801e762:	3301      	adds	r3, #1
 801e764:	42a3      	cmp	r3, r4
 801e766:	d00a      	beq.n	801e77e <rmw_wait+0x222>
 801e768:	6870      	ldr	r0, [r6, #4]
 801e76a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801e76e:	7c0a      	ldrb	r2, [r1, #16]
 801e770:	2a00      	cmp	r2, #0
 801e772:	d0f4      	beq.n	801e75e <rmw_wait+0x202>
 801e774:	3301      	adds	r3, #1
 801e776:	4617      	mov	r7, r2
 801e778:	740d      	strb	r5, [r1, #16]
 801e77a:	42a3      	cmp	r3, r4
 801e77c:	d1f4      	bne.n	801e768 <rmw_wait+0x20c>
 801e77e:	b147      	cbz	r7, 801e792 <rmw_wait+0x236>
 801e780:	2000      	movs	r0, #0
 801e782:	b009      	add	sp, #36	; 0x24
 801e784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e788:	b11e      	cbz	r6, 801e792 <rmw_wait+0x236>
 801e78a:	6834      	ldr	r4, [r6, #0]
 801e78c:	462f      	mov	r7, r5
 801e78e:	2c00      	cmp	r4, #0
 801e790:	d1e2      	bne.n	801e758 <rmw_wait+0x1fc>
 801e792:	2002      	movs	r0, #2
 801e794:	b009      	add	sp, #36	; 0x24
 801e796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e79a:	4639      	mov	r1, r7
 801e79c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e7a0:	f7fa fb2a 	bl	8018df8 <uxr_run_session_until_data>
 801e7a4:	6864      	ldr	r4, [r4, #4]
 801e7a6:	2c00      	cmp	r4, #0
 801e7a8:	f47f af62 	bne.w	801e670 <rmw_wait+0x114>
 801e7ac:	e76b      	b.n	801e686 <rmw_wait+0x12a>
 801e7ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e7b2:	f7ff fc33 	bl	801e01c <rmw_time_total_nsec>
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	4a19      	ldr	r2, [pc, #100]	; (801e820 <rmw_wait+0x2c4>)
 801e7ba:	f7e1 ffb5 	bl	8000728 <__aeabi_uldivmod>
 801e7be:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801e7c2:	4607      	mov	r7, r0
 801e7c4:	f171 0300 	sbcs.w	r3, r1, #0
 801e7c8:	bfa8      	it	ge
 801e7ca:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801e7ce:	e6e5      	b.n	801e59c <rmw_wait+0x40>
 801e7d0:	f1b8 0f00 	cmp.w	r8, #0
 801e7d4:	d00f      	beq.n	801e7f6 <rmw_wait+0x29a>
 801e7d6:	f8d8 3000 	ldr.w	r3, [r8]
 801e7da:	b193      	cbz	r3, 801e802 <rmw_wait+0x2a6>
 801e7dc:	464f      	mov	r7, r9
 801e7de:	e772      	b.n	801e6c6 <rmw_wait+0x16a>
 801e7e0:	f1b8 0f00 	cmp.w	r8, #0
 801e7e4:	d007      	beq.n	801e7f6 <rmw_wait+0x29a>
 801e7e6:	f8d8 3000 	ldr.w	r3, [r8]
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	f47f af6b 	bne.w	801e6c6 <rmw_wait+0x16a>
 801e7f0:	b155      	cbz	r5, 801e808 <rmw_wait+0x2ac>
 801e7f2:	461f      	mov	r7, r3
 801e7f4:	e777      	b.n	801e6e6 <rmw_wait+0x18a>
 801e7f6:	2d00      	cmp	r5, #0
 801e7f8:	d0c6      	beq.n	801e788 <rmw_wait+0x22c>
 801e7fa:	682b      	ldr	r3, [r5, #0]
 801e7fc:	b143      	cbz	r3, 801e810 <rmw_wait+0x2b4>
 801e7fe:	4647      	mov	r7, r8
 801e800:	e773      	b.n	801e6ea <rmw_wait+0x18e>
 801e802:	b10d      	cbz	r5, 801e808 <rmw_wait+0x2ac>
 801e804:	464f      	mov	r7, r9
 801e806:	e76e      	b.n	801e6e6 <rmw_wait+0x18a>
 801e808:	462f      	mov	r7, r5
 801e80a:	2e00      	cmp	r6, #0
 801e80c:	d1a2      	bne.n	801e754 <rmw_wait+0x1f8>
 801e80e:	e7c0      	b.n	801e792 <rmw_wait+0x236>
 801e810:	4647      	mov	r7, r8
 801e812:	2e00      	cmp	r6, #0
 801e814:	d19e      	bne.n	801e754 <rmw_wait+0x1f8>
 801e816:	e7bc      	b.n	801e792 <rmw_wait+0x236>
 801e818:	08024880 	.word	0x08024880
 801e81c:	20016e54 	.word	0x20016e54
 801e820:	000f4240 	.word	0x000f4240

0801e824 <rmw_create_wait_set>:
 801e824:	b508      	push	{r3, lr}
 801e826:	4803      	ldr	r0, [pc, #12]	; (801e834 <rmw_create_wait_set+0x10>)
 801e828:	f7ff fd8e 	bl	801e348 <get_memory>
 801e82c:	b108      	cbz	r0, 801e832 <rmw_create_wait_set+0xe>
 801e82e:	6880      	ldr	r0, [r0, #8]
 801e830:	3010      	adds	r0, #16
 801e832:	bd08      	pop	{r3, pc}
 801e834:	20016e94 	.word	0x20016e94

0801e838 <rmw_destroy_wait_set>:
 801e838:	b508      	push	{r3, lr}
 801e83a:	4b08      	ldr	r3, [pc, #32]	; (801e85c <rmw_destroy_wait_set+0x24>)
 801e83c:	6819      	ldr	r1, [r3, #0]
 801e83e:	b911      	cbnz	r1, 801e846 <rmw_destroy_wait_set+0xe>
 801e840:	e00a      	b.n	801e858 <rmw_destroy_wait_set+0x20>
 801e842:	6849      	ldr	r1, [r1, #4]
 801e844:	b141      	cbz	r1, 801e858 <rmw_destroy_wait_set+0x20>
 801e846:	688b      	ldr	r3, [r1, #8]
 801e848:	3310      	adds	r3, #16
 801e84a:	4298      	cmp	r0, r3
 801e84c:	d1f9      	bne.n	801e842 <rmw_destroy_wait_set+0xa>
 801e84e:	4803      	ldr	r0, [pc, #12]	; (801e85c <rmw_destroy_wait_set+0x24>)
 801e850:	f7ff fd8a 	bl	801e368 <put_memory>
 801e854:	2000      	movs	r0, #0
 801e856:	bd08      	pop	{r3, pc}
 801e858:	2001      	movs	r0, #1
 801e85a:	bd08      	pop	{r3, pc}
 801e85c:	20016e94 	.word	0x20016e94

0801e860 <rmw_uros_epoch_nanos>:
 801e860:	4b05      	ldr	r3, [pc, #20]	; (801e878 <rmw_uros_epoch_nanos+0x18>)
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	b123      	cbz	r3, 801e870 <rmw_uros_epoch_nanos+0x10>
 801e866:	6898      	ldr	r0, [r3, #8]
 801e868:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801e86c:	f7f9 bf20 	b.w	80186b0 <uxr_epoch_nanos>
 801e870:	2000      	movs	r0, #0
 801e872:	2100      	movs	r1, #0
 801e874:	4770      	bx	lr
 801e876:	bf00      	nop
 801e878:	20016e54 	.word	0x20016e54

0801e87c <std_msgs__msg__String__init>:
 801e87c:	b538      	push	{r3, r4, r5, lr}
 801e87e:	4604      	mov	r4, r0
 801e880:	b128      	cbz	r0, 801e88e <std_msgs__msg__String__init+0x12>
 801e882:	f7f8 feb7 	bl	80175f4 <rosidl_runtime_c__String__init>
 801e886:	4605      	mov	r5, r0
 801e888:	b120      	cbz	r0, 801e894 <std_msgs__msg__String__init+0x18>
 801e88a:	4628      	mov	r0, r5
 801e88c:	bd38      	pop	{r3, r4, r5, pc}
 801e88e:	4605      	mov	r5, r0
 801e890:	4628      	mov	r0, r5
 801e892:	bd38      	pop	{r3, r4, r5, pc}
 801e894:	4620      	mov	r0, r4
 801e896:	f7f8 fec3 	bl	8017620 <rosidl_runtime_c__String__fini>
 801e89a:	4628      	mov	r0, r5
 801e89c:	bd38      	pop	{r3, r4, r5, pc}
 801e89e:	bf00      	nop

0801e8a0 <std_msgs__msg__String__fini>:
 801e8a0:	b108      	cbz	r0, 801e8a6 <std_msgs__msg__String__fini+0x6>
 801e8a2:	f7f8 bebd 	b.w	8017620 <rosidl_runtime_c__String__fini>
 801e8a6:	4770      	bx	lr

0801e8a8 <ucdr_serialize_string>:
 801e8a8:	b510      	push	{r4, lr}
 801e8aa:	b082      	sub	sp, #8
 801e8ac:	4604      	mov	r4, r0
 801e8ae:	4608      	mov	r0, r1
 801e8b0:	9101      	str	r1, [sp, #4]
 801e8b2:	f7e1 fd25 	bl	8000300 <strlen>
 801e8b6:	4602      	mov	r2, r0
 801e8b8:	9901      	ldr	r1, [sp, #4]
 801e8ba:	4620      	mov	r0, r4
 801e8bc:	3201      	adds	r2, #1
 801e8be:	b002      	add	sp, #8
 801e8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8c4:	f7f4 bf38 	b.w	8013738 <ucdr_serialize_sequence_char>

0801e8c8 <ucdr_deserialize_string>:
 801e8c8:	b500      	push	{lr}
 801e8ca:	b083      	sub	sp, #12
 801e8cc:	ab01      	add	r3, sp, #4
 801e8ce:	f7f4 ff45 	bl	801375c <ucdr_deserialize_sequence_char>
 801e8d2:	b003      	add	sp, #12
 801e8d4:	f85d fb04 	ldr.w	pc, [sp], #4

0801e8d8 <uxr_init_input_best_effort_stream>:
 801e8d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8dc:	8003      	strh	r3, [r0, #0]
 801e8de:	4770      	bx	lr

0801e8e0 <uxr_reset_input_best_effort_stream>:
 801e8e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8e4:	8003      	strh	r3, [r0, #0]
 801e8e6:	4770      	bx	lr

0801e8e8 <uxr_receive_best_effort_message>:
 801e8e8:	b538      	push	{r3, r4, r5, lr}
 801e8ea:	4604      	mov	r4, r0
 801e8ec:	8800      	ldrh	r0, [r0, #0]
 801e8ee:	460d      	mov	r5, r1
 801e8f0:	f000 fd46 	bl	801f380 <uxr_seq_num_cmp>
 801e8f4:	4603      	mov	r3, r0
 801e8f6:	0fc0      	lsrs	r0, r0, #31
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	bfb8      	it	lt
 801e8fc:	8025      	strhlt	r5, [r4, #0]
 801e8fe:	bd38      	pop	{r3, r4, r5, pc}

0801e900 <on_full_input_buffer>:
 801e900:	b570      	push	{r4, r5, r6, lr}
 801e902:	460c      	mov	r4, r1
 801e904:	4605      	mov	r5, r0
 801e906:	8908      	ldrh	r0, [r1, #8]
 801e908:	682b      	ldr	r3, [r5, #0]
 801e90a:	7d26      	ldrb	r6, [r4, #20]
 801e90c:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e910:	fbb2 f2f0 	udiv	r2, r2, r0
 801e914:	eba3 0c01 	sub.w	ip, r3, r1
 801e918:	fbbc fcf2 	udiv	ip, ip, r2
 801e91c:	f10c 0c01 	add.w	ip, ip, #1
 801e920:	fa1f f38c 	uxth.w	r3, ip
 801e924:	fbb3 fcf0 	udiv	ip, r3, r0
 801e928:	fb00 331c 	mls	r3, r0, ip, r3
 801e92c:	b29b      	uxth	r3, r3
 801e92e:	fb02 f303 	mul.w	r3, r2, r3
 801e932:	1d18      	adds	r0, r3, #4
 801e934:	4408      	add	r0, r1
 801e936:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e93a:	b116      	cbz	r6, 801e942 <on_full_input_buffer+0x42>
 801e93c:	2600      	movs	r6, #0
 801e93e:	f840 6c04 	str.w	r6, [r0, #-4]
 801e942:	2a03      	cmp	r2, #3
 801e944:	d801      	bhi.n	801e94a <on_full_input_buffer+0x4a>
 801e946:	2001      	movs	r0, #1
 801e948:	bd70      	pop	{r4, r5, r6, pc}
 801e94a:	3308      	adds	r3, #8
 801e94c:	4628      	mov	r0, r5
 801e94e:	3a04      	subs	r2, #4
 801e950:	4419      	add	r1, r3
 801e952:	692b      	ldr	r3, [r5, #16]
 801e954:	f7f4 fe74 	bl	8013640 <ucdr_init_buffer_origin>
 801e958:	4628      	mov	r0, r5
 801e95a:	4622      	mov	r2, r4
 801e95c:	4902      	ldr	r1, [pc, #8]	; (801e968 <on_full_input_buffer+0x68>)
 801e95e:	f7f4 fe4b 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801e962:	2000      	movs	r0, #0
 801e964:	bd70      	pop	{r4, r5, r6, pc}
 801e966:	bf00      	nop
 801e968:	0801e901 	.word	0x0801e901

0801e96c <uxr_init_input_reliable_stream>:
 801e96c:	b510      	push	{r4, lr}
 801e96e:	e9c0 1200 	strd	r1, r2, [r0]
 801e972:	2400      	movs	r4, #0
 801e974:	9a02      	ldr	r2, [sp, #8]
 801e976:	8103      	strh	r3, [r0, #8]
 801e978:	6102      	str	r2, [r0, #16]
 801e97a:	7504      	strb	r4, [r0, #20]
 801e97c:	b1c3      	cbz	r3, 801e9b0 <uxr_init_input_reliable_stream+0x44>
 801e97e:	600c      	str	r4, [r1, #0]
 801e980:	8901      	ldrh	r1, [r0, #8]
 801e982:	2901      	cmp	r1, #1
 801e984:	d914      	bls.n	801e9b0 <uxr_init_input_reliable_stream+0x44>
 801e986:	f04f 0c01 	mov.w	ip, #1
 801e98a:	6843      	ldr	r3, [r0, #4]
 801e98c:	f10c 0e01 	add.w	lr, ip, #1
 801e990:	fbbc f2f1 	udiv	r2, ip, r1
 801e994:	fbb3 f3f1 	udiv	r3, r3, r1
 801e998:	fb01 c212 	mls	r2, r1, r2, ip
 801e99c:	fa1f fc8e 	uxth.w	ip, lr
 801e9a0:	b292      	uxth	r2, r2
 801e9a2:	fb02 f303 	mul.w	r3, r2, r3
 801e9a6:	6802      	ldr	r2, [r0, #0]
 801e9a8:	50d4      	str	r4, [r2, r3]
 801e9aa:	8901      	ldrh	r1, [r0, #8]
 801e9ac:	4561      	cmp	r1, ip
 801e9ae:	d8ec      	bhi.n	801e98a <uxr_init_input_reliable_stream+0x1e>
 801e9b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e9b4:	60c3      	str	r3, [r0, #12]
 801e9b6:	bd10      	pop	{r4, pc}

0801e9b8 <uxr_reset_input_reliable_stream>:
 801e9b8:	8901      	ldrh	r1, [r0, #8]
 801e9ba:	b1d9      	cbz	r1, 801e9f4 <uxr_reset_input_reliable_stream+0x3c>
 801e9bc:	b510      	push	{r4, lr}
 801e9be:	f04f 0e00 	mov.w	lr, #0
 801e9c2:	46f4      	mov	ip, lr
 801e9c4:	4674      	mov	r4, lr
 801e9c6:	6843      	ldr	r3, [r0, #4]
 801e9c8:	f10e 0e01 	add.w	lr, lr, #1
 801e9cc:	fbbc f2f1 	udiv	r2, ip, r1
 801e9d0:	fbb3 f3f1 	udiv	r3, r3, r1
 801e9d4:	fb01 c212 	mls	r2, r1, r2, ip
 801e9d8:	fa1f fc8e 	uxth.w	ip, lr
 801e9dc:	b292      	uxth	r2, r2
 801e9de:	fb02 f303 	mul.w	r3, r2, r3
 801e9e2:	6802      	ldr	r2, [r0, #0]
 801e9e4:	50d4      	str	r4, [r2, r3]
 801e9e6:	8901      	ldrh	r1, [r0, #8]
 801e9e8:	4561      	cmp	r1, ip
 801e9ea:	d8ec      	bhi.n	801e9c6 <uxr_reset_input_reliable_stream+0xe>
 801e9ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e9f0:	60c3      	str	r3, [r0, #12]
 801e9f2:	bd10      	pop	{r4, pc}
 801e9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e9f8:	60c3      	str	r3, [r0, #12]
 801e9fa:	4770      	bx	lr

0801e9fc <uxr_receive_reliable_message>:
 801e9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea00:	4604      	mov	r4, r0
 801ea02:	460d      	mov	r5, r1
 801ea04:	8901      	ldrh	r1, [r0, #8]
 801ea06:	4617      	mov	r7, r2
 801ea08:	8980      	ldrh	r0, [r0, #12]
 801ea0a:	4698      	mov	r8, r3
 801ea0c:	f000 fcb0 	bl	801f370 <uxr_seq_num_add>
 801ea10:	4629      	mov	r1, r5
 801ea12:	4606      	mov	r6, r0
 801ea14:	89a0      	ldrh	r0, [r4, #12]
 801ea16:	f000 fcb3 	bl	801f380 <uxr_seq_num_cmp>
 801ea1a:	2800      	cmp	r0, #0
 801ea1c:	db0a      	blt.n	801ea34 <uxr_receive_reliable_message+0x38>
 801ea1e:	2600      	movs	r6, #0
 801ea20:	4629      	mov	r1, r5
 801ea22:	89e0      	ldrh	r0, [r4, #14]
 801ea24:	f000 fcac 	bl	801f380 <uxr_seq_num_cmp>
 801ea28:	2800      	cmp	r0, #0
 801ea2a:	da00      	bge.n	801ea2e <uxr_receive_reliable_message+0x32>
 801ea2c:	81e5      	strh	r5, [r4, #14]
 801ea2e:	4630      	mov	r0, r6
 801ea30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea34:	4630      	mov	r0, r6
 801ea36:	4629      	mov	r1, r5
 801ea38:	f000 fca2 	bl	801f380 <uxr_seq_num_cmp>
 801ea3c:	2800      	cmp	r0, #0
 801ea3e:	dbee      	blt.n	801ea1e <uxr_receive_reliable_message+0x22>
 801ea40:	6923      	ldr	r3, [r4, #16]
 801ea42:	4638      	mov	r0, r7
 801ea44:	4798      	blx	r3
 801ea46:	4681      	mov	r9, r0
 801ea48:	2101      	movs	r1, #1
 801ea4a:	89a0      	ldrh	r0, [r4, #12]
 801ea4c:	f000 fc90 	bl	801f370 <uxr_seq_num_add>
 801ea50:	f1b9 0f00 	cmp.w	r9, #0
 801ea54:	bf08      	it	eq
 801ea56:	4285      	cmpeq	r5, r0
 801ea58:	bf0c      	ite	eq
 801ea5a:	2601      	moveq	r6, #1
 801ea5c:	2600      	movne	r6, #0
 801ea5e:	d104      	bne.n	801ea6a <uxr_receive_reliable_message+0x6e>
 801ea60:	2300      	movs	r3, #0
 801ea62:	9a08      	ldr	r2, [sp, #32]
 801ea64:	81a0      	strh	r0, [r4, #12]
 801ea66:	7013      	strb	r3, [r2, #0]
 801ea68:	e7da      	b.n	801ea20 <uxr_receive_reliable_message+0x24>
 801ea6a:	8922      	ldrh	r2, [r4, #8]
 801ea6c:	6863      	ldr	r3, [r4, #4]
 801ea6e:	fbb5 f0f2 	udiv	r0, r5, r2
 801ea72:	fbb3 f3f2 	udiv	r3, r3, r2
 801ea76:	fb02 5010 	mls	r0, r2, r0, r5
 801ea7a:	b280      	uxth	r0, r0
 801ea7c:	fb03 f000 	mul.w	r0, r3, r0
 801ea80:	6823      	ldr	r3, [r4, #0]
 801ea82:	3004      	adds	r0, #4
 801ea84:	4418      	add	r0, r3
 801ea86:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d1c7      	bne.n	801ea1e <uxr_receive_reliable_message+0x22>
 801ea8e:	4639      	mov	r1, r7
 801ea90:	4642      	mov	r2, r8
 801ea92:	f002 fc14 	bl	80212be <memcpy>
 801ea96:	8921      	ldrh	r1, [r4, #8]
 801ea98:	6863      	ldr	r3, [r4, #4]
 801ea9a:	fbb5 f2f1 	udiv	r2, r5, r1
 801ea9e:	fbb3 f3f1 	udiv	r3, r3, r1
 801eaa2:	fb01 5212 	mls	r2, r1, r2, r5
 801eaa6:	b292      	uxth	r2, r2
 801eaa8:	fb02 f303 	mul.w	r3, r2, r3
 801eaac:	6822      	ldr	r2, [r4, #0]
 801eaae:	f842 8003 	str.w	r8, [r2, r3]
 801eab2:	2301      	movs	r3, #1
 801eab4:	9a08      	ldr	r2, [sp, #32]
 801eab6:	7013      	strb	r3, [r2, #0]
 801eab8:	f1b9 0f00 	cmp.w	r9, #0
 801eabc:	d0af      	beq.n	801ea1e <uxr_receive_reliable_message+0x22>
 801eabe:	89a6      	ldrh	r6, [r4, #12]
 801eac0:	2101      	movs	r1, #1
 801eac2:	4630      	mov	r0, r6
 801eac4:	f000 fc54 	bl	801f370 <uxr_seq_num_add>
 801eac8:	8921      	ldrh	r1, [r4, #8]
 801eaca:	6863      	ldr	r3, [r4, #4]
 801eacc:	4606      	mov	r6, r0
 801eace:	fbb0 f2f1 	udiv	r2, r0, r1
 801ead2:	fbb3 f3f1 	udiv	r3, r3, r1
 801ead6:	fb01 0212 	mls	r2, r1, r2, r0
 801eada:	6820      	ldr	r0, [r4, #0]
 801eadc:	b292      	uxth	r2, r2
 801eade:	fb02 f303 	mul.w	r3, r2, r3
 801eae2:	3304      	adds	r3, #4
 801eae4:	4418      	add	r0, r3
 801eae6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d097      	beq.n	801ea1e <uxr_receive_reliable_message+0x22>
 801eaee:	6923      	ldr	r3, [r4, #16]
 801eaf0:	4798      	blx	r3
 801eaf2:	2802      	cmp	r0, #2
 801eaf4:	d002      	beq.n	801eafc <uxr_receive_reliable_message+0x100>
 801eaf6:	2801      	cmp	r0, #1
 801eaf8:	d0e2      	beq.n	801eac0 <uxr_receive_reliable_message+0xc4>
 801eafa:	e790      	b.n	801ea1e <uxr_receive_reliable_message+0x22>
 801eafc:	2601      	movs	r6, #1
 801eafe:	e78f      	b.n	801ea20 <uxr_receive_reliable_message+0x24>

0801eb00 <uxr_next_input_reliable_buffer_available>:
 801eb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb04:	4604      	mov	r4, r0
 801eb06:	460f      	mov	r7, r1
 801eb08:	8980      	ldrh	r0, [r0, #12]
 801eb0a:	2101      	movs	r1, #1
 801eb0c:	4690      	mov	r8, r2
 801eb0e:	f000 fc2f 	bl	801f370 <uxr_seq_num_add>
 801eb12:	8922      	ldrh	r2, [r4, #8]
 801eb14:	6866      	ldr	r6, [r4, #4]
 801eb16:	fbb0 f3f2 	udiv	r3, r0, r2
 801eb1a:	fbb6 f6f2 	udiv	r6, r6, r2
 801eb1e:	fb02 0313 	mls	r3, r2, r3, r0
 801eb22:	b29b      	uxth	r3, r3
 801eb24:	fb03 f606 	mul.w	r6, r3, r6
 801eb28:	6823      	ldr	r3, [r4, #0]
 801eb2a:	3604      	adds	r6, #4
 801eb2c:	441e      	add	r6, r3
 801eb2e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801eb32:	f1b9 0f00 	cmp.w	r9, #0
 801eb36:	d023      	beq.n	801eb80 <uxr_next_input_reliable_buffer_available+0x80>
 801eb38:	4605      	mov	r5, r0
 801eb3a:	6923      	ldr	r3, [r4, #16]
 801eb3c:	4630      	mov	r0, r6
 801eb3e:	4798      	blx	r3
 801eb40:	4682      	mov	sl, r0
 801eb42:	b300      	cbz	r0, 801eb86 <uxr_next_input_reliable_buffer_available+0x86>
 801eb44:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801eb48:	2101      	movs	r1, #1
 801eb4a:	4650      	mov	r0, sl
 801eb4c:	f000 fc10 	bl	801f370 <uxr_seq_num_add>
 801eb50:	8921      	ldrh	r1, [r4, #8]
 801eb52:	4682      	mov	sl, r0
 801eb54:	6863      	ldr	r3, [r4, #4]
 801eb56:	6820      	ldr	r0, [r4, #0]
 801eb58:	fbba f2f1 	udiv	r2, sl, r1
 801eb5c:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb60:	fb01 a212 	mls	r2, r1, r2, sl
 801eb64:	b292      	uxth	r2, r2
 801eb66:	fb02 f303 	mul.w	r3, r2, r3
 801eb6a:	3304      	adds	r3, #4
 801eb6c:	4418      	add	r0, r3
 801eb6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801eb72:	b12b      	cbz	r3, 801eb80 <uxr_next_input_reliable_buffer_available+0x80>
 801eb74:	6923      	ldr	r3, [r4, #16]
 801eb76:	4798      	blx	r3
 801eb78:	2802      	cmp	r0, #2
 801eb7a:	d01b      	beq.n	801ebb4 <uxr_next_input_reliable_buffer_available+0xb4>
 801eb7c:	2801      	cmp	r0, #1
 801eb7e:	d0e3      	beq.n	801eb48 <uxr_next_input_reliable_buffer_available+0x48>
 801eb80:	2000      	movs	r0, #0
 801eb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb86:	464a      	mov	r2, r9
 801eb88:	4631      	mov	r1, r6
 801eb8a:	4638      	mov	r0, r7
 801eb8c:	f7f4 fd60 	bl	8013650 <ucdr_init_buffer>
 801eb90:	8921      	ldrh	r1, [r4, #8]
 801eb92:	6863      	ldr	r3, [r4, #4]
 801eb94:	2001      	movs	r0, #1
 801eb96:	fbb5 f2f1 	udiv	r2, r5, r1
 801eb9a:	fbb3 f3f1 	udiv	r3, r3, r1
 801eb9e:	fb01 5212 	mls	r2, r1, r2, r5
 801eba2:	b292      	uxth	r2, r2
 801eba4:	fb02 f303 	mul.w	r3, r2, r3
 801eba8:	6822      	ldr	r2, [r4, #0]
 801ebaa:	f842 a003 	str.w	sl, [r2, r3]
 801ebae:	81a5      	strh	r5, [r4, #12]
 801ebb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ebb4:	8920      	ldrh	r0, [r4, #8]
 801ebb6:	eb06 0108 	add.w	r1, r6, r8
 801ebba:	6863      	ldr	r3, [r4, #4]
 801ebbc:	eba9 0208 	sub.w	r2, r9, r8
 801ebc0:	fbb5 f6f0 	udiv	r6, r5, r0
 801ebc4:	fbb3 f3f0 	udiv	r3, r3, r0
 801ebc8:	fb00 5516 	mls	r5, r0, r6, r5
 801ebcc:	2000      	movs	r0, #0
 801ebce:	b2ad      	uxth	r5, r5
 801ebd0:	fb03 f505 	mul.w	r5, r3, r5
 801ebd4:	6823      	ldr	r3, [r4, #0]
 801ebd6:	5158      	str	r0, [r3, r5]
 801ebd8:	4638      	mov	r0, r7
 801ebda:	f7f4 fd39 	bl	8013650 <ucdr_init_buffer>
 801ebde:	4638      	mov	r0, r7
 801ebe0:	4622      	mov	r2, r4
 801ebe2:	4903      	ldr	r1, [pc, #12]	; (801ebf0 <uxr_next_input_reliable_buffer_available+0xf0>)
 801ebe4:	f7f4 fd08 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801ebe8:	2001      	movs	r0, #1
 801ebea:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801ebee:	e7c8      	b.n	801eb82 <uxr_next_input_reliable_buffer_available+0x82>
 801ebf0:	0801e901 	.word	0x0801e901

0801ebf4 <uxr_process_heartbeat>:
 801ebf4:	b538      	push	{r3, r4, r5, lr}
 801ebf6:	4611      	mov	r1, r2
 801ebf8:	4604      	mov	r4, r0
 801ebfa:	89c0      	ldrh	r0, [r0, #14]
 801ebfc:	4615      	mov	r5, r2
 801ebfe:	f000 fbbf 	bl	801f380 <uxr_seq_num_cmp>
 801ec02:	2800      	cmp	r0, #0
 801ec04:	bfb8      	it	lt
 801ec06:	81e5      	strhlt	r5, [r4, #14]
 801ec08:	bd38      	pop	{r3, r4, r5, pc}
 801ec0a:	bf00      	nop

0801ec0c <uxr_compute_acknack>:
 801ec0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec10:	8903      	ldrh	r3, [r0, #8]
 801ec12:	4604      	mov	r4, r0
 801ec14:	460f      	mov	r7, r1
 801ec16:	8985      	ldrh	r5, [r0, #12]
 801ec18:	b1db      	cbz	r3, 801ec52 <uxr_compute_acknack+0x46>
 801ec1a:	4628      	mov	r0, r5
 801ec1c:	2601      	movs	r6, #1
 801ec1e:	e004      	b.n	801ec2a <uxr_compute_acknack+0x1e>
 801ec20:	4566      	cmp	r6, ip
 801ec22:	f106 0601 	add.w	r6, r6, #1
 801ec26:	d214      	bcs.n	801ec52 <uxr_compute_acknack+0x46>
 801ec28:	89a0      	ldrh	r0, [r4, #12]
 801ec2a:	b2b1      	uxth	r1, r6
 801ec2c:	f000 fba0 	bl	801f370 <uxr_seq_num_add>
 801ec30:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ec34:	fbb0 f2fc 	udiv	r2, r0, ip
 801ec38:	e9d4 1300 	ldrd	r1, r3, [r4]
 801ec3c:	fb0c 0212 	mls	r2, ip, r2, r0
 801ec40:	fbb3 f3fc 	udiv	r3, r3, ip
 801ec44:	b292      	uxth	r2, r2
 801ec46:	fb02 f303 	mul.w	r3, r2, r3
 801ec4a:	58cb      	ldr	r3, [r1, r3]
 801ec4c:	2b00      	cmp	r3, #0
 801ec4e:	d1e7      	bne.n	801ec20 <uxr_compute_acknack+0x14>
 801ec50:	4605      	mov	r5, r0
 801ec52:	803d      	strh	r5, [r7, #0]
 801ec54:	2101      	movs	r1, #1
 801ec56:	89e6      	ldrh	r6, [r4, #14]
 801ec58:	4628      	mov	r0, r5
 801ec5a:	f000 fb8d 	bl	801f378 <uxr_seq_num_sub>
 801ec5e:	4601      	mov	r1, r0
 801ec60:	4630      	mov	r0, r6
 801ec62:	f000 fb89 	bl	801f378 <uxr_seq_num_sub>
 801ec66:	4606      	mov	r6, r0
 801ec68:	b328      	cbz	r0, 801ecb6 <uxr_compute_acknack+0xaa>
 801ec6a:	f04f 0900 	mov.w	r9, #0
 801ec6e:	f04f 0801 	mov.w	r8, #1
 801ec72:	464d      	mov	r5, r9
 801ec74:	fa1f f189 	uxth.w	r1, r9
 801ec78:	8838      	ldrh	r0, [r7, #0]
 801ec7a:	f000 fb79 	bl	801f370 <uxr_seq_num_add>
 801ec7e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ec82:	6861      	ldr	r1, [r4, #4]
 801ec84:	fa08 fe09 	lsl.w	lr, r8, r9
 801ec88:	6822      	ldr	r2, [r4, #0]
 801ec8a:	f109 0901 	add.w	r9, r9, #1
 801ec8e:	ea4e 0e05 	orr.w	lr, lr, r5
 801ec92:	fbb0 f3fc 	udiv	r3, r0, ip
 801ec96:	fbb1 f1fc 	udiv	r1, r1, ip
 801ec9a:	fb03 001c 	mls	r0, r3, ip, r0
 801ec9e:	b283      	uxth	r3, r0
 801eca0:	fb01 f303 	mul.w	r3, r1, r3
 801eca4:	58d3      	ldr	r3, [r2, r3]
 801eca6:	b90b      	cbnz	r3, 801ecac <uxr_compute_acknack+0xa0>
 801eca8:	fa1f f58e 	uxth.w	r5, lr
 801ecac:	454e      	cmp	r6, r9
 801ecae:	d1e1      	bne.n	801ec74 <uxr_compute_acknack+0x68>
 801ecb0:	4628      	mov	r0, r5
 801ecb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ecb6:	4605      	mov	r5, r0
 801ecb8:	4628      	mov	r0, r5
 801ecba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ecbe:	bf00      	nop

0801ecc0 <uxr_init_output_best_effort_stream>:
 801ecc0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801ecc4:	6001      	str	r1, [r0, #0]
 801ecc6:	7303      	strb	r3, [r0, #12]
 801ecc8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801eccc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801ecd0:	4770      	bx	lr
 801ecd2:	bf00      	nop

0801ecd4 <uxr_reset_output_best_effort_stream>:
 801ecd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ecd8:	7b03      	ldrb	r3, [r0, #12]
 801ecda:	81c2      	strh	r2, [r0, #14]
 801ecdc:	6043      	str	r3, [r0, #4]
 801ecde:	4770      	bx	lr

0801ece0 <uxr_prepare_best_effort_buffer_to_write>:
 801ece0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ece2:	4604      	mov	r4, r0
 801ece4:	b083      	sub	sp, #12
 801ece6:	6840      	ldr	r0, [r0, #4]
 801ece8:	460d      	mov	r5, r1
 801ecea:	4616      	mov	r6, r2
 801ecec:	f7fb fa5c 	bl	801a1a8 <uxr_submessage_padding>
 801ecf0:	6863      	ldr	r3, [r4, #4]
 801ecf2:	4418      	add	r0, r3
 801ecf4:	68a3      	ldr	r3, [r4, #8]
 801ecf6:	1942      	adds	r2, r0, r5
 801ecf8:	4293      	cmp	r3, r2
 801ecfa:	bf2c      	ite	cs
 801ecfc:	2701      	movcs	r7, #1
 801ecfe:	2700      	movcc	r7, #0
 801ed00:	d202      	bcs.n	801ed08 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801ed02:	4638      	mov	r0, r7
 801ed04:	b003      	add	sp, #12
 801ed06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed08:	9000      	str	r0, [sp, #0]
 801ed0a:	2300      	movs	r3, #0
 801ed0c:	4630      	mov	r0, r6
 801ed0e:	6821      	ldr	r1, [r4, #0]
 801ed10:	f7f4 fc8c 	bl	801362c <ucdr_init_buffer_origin_offset>
 801ed14:	6861      	ldr	r1, [r4, #4]
 801ed16:	4638      	mov	r0, r7
 801ed18:	4429      	add	r1, r5
 801ed1a:	6061      	str	r1, [r4, #4]
 801ed1c:	b003      	add	sp, #12
 801ed1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ed20 <uxr_prepare_best_effort_buffer_to_send>:
 801ed20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed24:	4604      	mov	r4, r0
 801ed26:	461d      	mov	r5, r3
 801ed28:	6840      	ldr	r0, [r0, #4]
 801ed2a:	7b23      	ldrb	r3, [r4, #12]
 801ed2c:	4298      	cmp	r0, r3
 801ed2e:	bf8c      	ite	hi
 801ed30:	2601      	movhi	r6, #1
 801ed32:	2600      	movls	r6, #0
 801ed34:	d802      	bhi.n	801ed3c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ed36:	4630      	mov	r0, r6
 801ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed3c:	4688      	mov	r8, r1
 801ed3e:	89e0      	ldrh	r0, [r4, #14]
 801ed40:	2101      	movs	r1, #1
 801ed42:	4617      	mov	r7, r2
 801ed44:	f000 fb14 	bl	801f370 <uxr_seq_num_add>
 801ed48:	6823      	ldr	r3, [r4, #0]
 801ed4a:	81e0      	strh	r0, [r4, #14]
 801ed4c:	8028      	strh	r0, [r5, #0]
 801ed4e:	4630      	mov	r0, r6
 801ed50:	f8c8 3000 	str.w	r3, [r8]
 801ed54:	6863      	ldr	r3, [r4, #4]
 801ed56:	603b      	str	r3, [r7, #0]
 801ed58:	7b23      	ldrb	r3, [r4, #12]
 801ed5a:	6063      	str	r3, [r4, #4]
 801ed5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ed60 <on_full_output_buffer>:
 801ed60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed62:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801ed66:	460c      	mov	r4, r1
 801ed68:	6803      	ldr	r3, [r0, #0]
 801ed6a:	4605      	mov	r5, r0
 801ed6c:	7b26      	ldrb	r6, [r4, #12]
 801ed6e:	e9d1 1200 	ldrd	r1, r2, [r1]
 801ed72:	fbb2 f2fc 	udiv	r2, r2, ip
 801ed76:	eba3 0e01 	sub.w	lr, r3, r1
 801ed7a:	6903      	ldr	r3, [r0, #16]
 801ed7c:	fbbe fef2 	udiv	lr, lr, r2
 801ed80:	f10e 0e01 	add.w	lr, lr, #1
 801ed84:	fa1f fe8e 	uxth.w	lr, lr
 801ed88:	fbbe f7fc 	udiv	r7, lr, ip
 801ed8c:	fb0c ec17 	mls	ip, ip, r7, lr
 801ed90:	fa1f fc8c 	uxth.w	ip, ip
 801ed94:	fb02 fc0c 	mul.w	ip, r2, ip
 801ed98:	f851 200c 	ldr.w	r2, [r1, ip]
 801ed9c:	44b4      	add	ip, r6
 801ed9e:	1b92      	subs	r2, r2, r6
 801eda0:	f10c 0c08 	add.w	ip, ip, #8
 801eda4:	3a04      	subs	r2, #4
 801eda6:	4461      	add	r1, ip
 801eda8:	f7f4 fc4a 	bl	8013640 <ucdr_init_buffer_origin>
 801edac:	4628      	mov	r0, r5
 801edae:	4622      	mov	r2, r4
 801edb0:	4902      	ldr	r1, [pc, #8]	; (801edbc <on_full_output_buffer+0x5c>)
 801edb2:	f7f4 fc21 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801edb6:	2000      	movs	r0, #0
 801edb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edba:	bf00      	nop
 801edbc:	0801ed61 	.word	0x0801ed61

0801edc0 <uxr_init_output_reliable_stream>:
 801edc0:	b530      	push	{r4, r5, lr}
 801edc2:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801edc6:	8103      	strh	r3, [r0, #8]
 801edc8:	7304      	strb	r4, [r0, #12]
 801edca:	e9c0 1200 	strd	r1, r2, [r0]
 801edce:	b1e3      	cbz	r3, 801ee0a <uxr_init_output_reliable_stream+0x4a>
 801edd0:	600c      	str	r4, [r1, #0]
 801edd2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801edd6:	f1bc 0f01 	cmp.w	ip, #1
 801edda:	d916      	bls.n	801ee0a <uxr_init_output_reliable_stream+0x4a>
 801eddc:	f04f 0e01 	mov.w	lr, #1
 801ede0:	6843      	ldr	r3, [r0, #4]
 801ede2:	f10e 0501 	add.w	r5, lr, #1
 801ede6:	7b04      	ldrb	r4, [r0, #12]
 801ede8:	6801      	ldr	r1, [r0, #0]
 801edea:	fbbe f2fc 	udiv	r2, lr, ip
 801edee:	fbb3 f3fc 	udiv	r3, r3, ip
 801edf2:	fb0c e212 	mls	r2, ip, r2, lr
 801edf6:	fa1f fe85 	uxth.w	lr, r5
 801edfa:	b292      	uxth	r2, r2
 801edfc:	fb02 f303 	mul.w	r3, r2, r3
 801ee00:	50cc      	str	r4, [r1, r3]
 801ee02:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ee06:	45f4      	cmp	ip, lr
 801ee08:	d8ea      	bhi.n	801ede0 <uxr_init_output_reliable_stream+0x20>
 801ee0a:	4b07      	ldr	r3, [pc, #28]	; (801ee28 <uxr_init_output_reliable_stream+0x68>)
 801ee0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ee10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ee14:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801ee18:	f8c0 300e 	str.w	r3, [r0, #14]
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	8242      	strh	r2, [r0, #18]
 801ee20:	8403      	strh	r3, [r0, #32]
 801ee22:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801ee26:	bd30      	pop	{r4, r5, pc}
 801ee28:	ffff0000 	.word	0xffff0000
 801ee2c:	00000000 	.word	0x00000000

0801ee30 <uxr_reset_output_reliable_stream>:
 801ee30:	8901      	ldrh	r1, [r0, #8]
 801ee32:	b510      	push	{r4, lr}
 801ee34:	b1b1      	cbz	r1, 801ee64 <uxr_reset_output_reliable_stream+0x34>
 801ee36:	f04f 0e00 	mov.w	lr, #0
 801ee3a:	46f4      	mov	ip, lr
 801ee3c:	6843      	ldr	r3, [r0, #4]
 801ee3e:	f10e 0e01 	add.w	lr, lr, #1
 801ee42:	7b04      	ldrb	r4, [r0, #12]
 801ee44:	fbbc f2f1 	udiv	r2, ip, r1
 801ee48:	fbb3 f3f1 	udiv	r3, r3, r1
 801ee4c:	fb01 c212 	mls	r2, r1, r2, ip
 801ee50:	fa1f fc8e 	uxth.w	ip, lr
 801ee54:	b292      	uxth	r2, r2
 801ee56:	fb02 f303 	mul.w	r3, r2, r3
 801ee5a:	6802      	ldr	r2, [r0, #0]
 801ee5c:	50d4      	str	r4, [r2, r3]
 801ee5e:	8901      	ldrh	r1, [r0, #8]
 801ee60:	4561      	cmp	r1, ip
 801ee62:	d8eb      	bhi.n	801ee3c <uxr_reset_output_reliable_stream+0xc>
 801ee64:	4b08      	ldr	r3, [pc, #32]	; (801ee88 <uxr_reset_output_reliable_stream+0x58>)
 801ee66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ee6a:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801ee80 <uxr_reset_output_reliable_stream+0x50>
 801ee6e:	f8c0 300e 	str.w	r3, [r0, #14]
 801ee72:	2300      	movs	r3, #0
 801ee74:	8242      	strh	r2, [r0, #18]
 801ee76:	8403      	strh	r3, [r0, #32]
 801ee78:	ed80 7b06 	vstr	d7, [r0, #24]
 801ee7c:	bd10      	pop	{r4, pc}
 801ee7e:	bf00      	nop
 801ee80:	ffffffff 	.word	0xffffffff
 801ee84:	7fffffff 	.word	0x7fffffff
 801ee88:	ffff0000 	.word	0xffff0000

0801ee8c <uxr_prepare_reliable_buffer_to_write>:
 801ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee90:	4604      	mov	r4, r0
 801ee92:	b091      	sub	sp, #68	; 0x44
 801ee94:	8900      	ldrh	r0, [r0, #8]
 801ee96:	468b      	mov	fp, r1
 801ee98:	89e6      	ldrh	r6, [r4, #14]
 801ee9a:	9204      	str	r2, [sp, #16]
 801ee9c:	6865      	ldr	r5, [r4, #4]
 801ee9e:	6823      	ldr	r3, [r4, #0]
 801eea0:	f894 900c 	ldrb.w	r9, [r4, #12]
 801eea4:	fbb6 f2f0 	udiv	r2, r6, r0
 801eea8:	fbb5 f5f0 	udiv	r5, r5, r0
 801eeac:	fb00 6212 	mls	r2, r0, r2, r6
 801eeb0:	1f2f      	subs	r7, r5, #4
 801eeb2:	b292      	uxth	r2, r2
 801eeb4:	fb05 3202 	mla	r2, r5, r2, r3
 801eeb8:	1d11      	adds	r1, r2, #4
 801eeba:	f8d2 8000 	ldr.w	r8, [r2]
 801eebe:	9103      	str	r1, [sp, #12]
 801eec0:	2800      	cmp	r0, #0
 801eec2:	f000 814a 	beq.w	801f15a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801eec6:	f04f 0c00 	mov.w	ip, #0
 801eeca:	46e2      	mov	sl, ip
 801eecc:	4661      	mov	r1, ip
 801eece:	f10c 0c01 	add.w	ip, ip, #1
 801eed2:	fbb1 f2f0 	udiv	r2, r1, r0
 801eed6:	fb00 1212 	mls	r2, r0, r2, r1
 801eeda:	fa1f f18c 	uxth.w	r1, ip
 801eede:	b292      	uxth	r2, r2
 801eee0:	fb05 f202 	mul.w	r2, r5, r2
 801eee4:	589a      	ldr	r2, [r3, r2]
 801eee6:	454a      	cmp	r2, r9
 801eee8:	d103      	bne.n	801eef2 <uxr_prepare_reliable_buffer_to_write+0x66>
 801eeea:	f10a 0a01 	add.w	sl, sl, #1
 801eeee:	fa1f fa8a 	uxth.w	sl, sl
 801eef2:	4281      	cmp	r1, r0
 801eef4:	d3eb      	bcc.n	801eece <uxr_prepare_reliable_buffer_to_write+0x42>
 801eef6:	4640      	mov	r0, r8
 801eef8:	2104      	movs	r1, #4
 801eefa:	f8cd a014 	str.w	sl, [sp, #20]
 801eefe:	f7f4 fbab 	bl	8013658 <ucdr_alignment>
 801ef02:	4480      	add	r8, r0
 801ef04:	eb08 020b 	add.w	r2, r8, fp
 801ef08:	42ba      	cmp	r2, r7
 801ef0a:	f240 80ca 	bls.w	801f0a2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801ef0e:	7b22      	ldrb	r2, [r4, #12]
 801ef10:	445a      	add	r2, fp
 801ef12:	42ba      	cmp	r2, r7
 801ef14:	f240 80b2 	bls.w	801f07c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801ef18:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801ef1c:	b2bb      	uxth	r3, r7
 801ef1e:	eba2 0209 	sub.w	r2, r2, r9
 801ef22:	441a      	add	r2, r3
 801ef24:	b292      	uxth	r2, r2
 801ef26:	fb0a f902 	mul.w	r9, sl, r2
 801ef2a:	9205      	str	r2, [sp, #20]
 801ef2c:	45d9      	cmp	r9, fp
 801ef2e:	9206      	str	r2, [sp, #24]
 801ef30:	f0c0 80b3 	bcc.w	801f09a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ef34:	f108 0204 	add.w	r2, r8, #4
 801ef38:	42ba      	cmp	r2, r7
 801ef3a:	f080 80da 	bcs.w	801f0f2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801ef3e:	f1a3 0904 	sub.w	r9, r3, #4
 801ef42:	9b05      	ldr	r3, [sp, #20]
 801ef44:	eba9 0908 	sub.w	r9, r9, r8
 801ef48:	fa1f f989 	uxth.w	r9, r9
 801ef4c:	ebab 0b09 	sub.w	fp, fp, r9
 801ef50:	fbbb f2f3 	udiv	r2, fp, r3
 801ef54:	fb03 b312 	mls	r3, r3, r2, fp
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	f040 80c4 	bne.w	801f0e6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801ef5e:	b293      	uxth	r3, r2
 801ef60:	4553      	cmp	r3, sl
 801ef62:	f200 809a 	bhi.w	801f09a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ef66:	2b00      	cmp	r3, #0
 801ef68:	f000 80f9 	beq.w	801f15e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801ef6c:	f8cd 801c 	str.w	r8, [sp, #28]
 801ef70:	f04f 0a00 	mov.w	sl, #0
 801ef74:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ef78:	f10d 0b20 	add.w	fp, sp, #32
 801ef7c:	9505      	str	r5, [sp, #20]
 801ef7e:	461d      	mov	r5, r3
 801ef80:	e000      	b.n	801ef84 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801ef82:	46c1      	mov	r9, r8
 801ef84:	8922      	ldrh	r2, [r4, #8]
 801ef86:	4658      	mov	r0, fp
 801ef88:	6863      	ldr	r3, [r4, #4]
 801ef8a:	f10a 0a01 	add.w	sl, sl, #1
 801ef8e:	fbb6 f1f2 	udiv	r1, r6, r2
 801ef92:	fbb3 f3f2 	udiv	r3, r3, r2
 801ef96:	fb02 6111 	mls	r1, r2, r1, r6
 801ef9a:	463a      	mov	r2, r7
 801ef9c:	b289      	uxth	r1, r1
 801ef9e:	fb03 f101 	mul.w	r1, r3, r1
 801efa2:	6823      	ldr	r3, [r4, #0]
 801efa4:	3104      	adds	r1, #4
 801efa6:	4419      	add	r1, r3
 801efa8:	2300      	movs	r3, #0
 801efaa:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801efae:	f8cd c000 	str.w	ip, [sp]
 801efb2:	f7f4 fb3b 	bl	801362c <ucdr_init_buffer_origin_offset>
 801efb6:	464a      	mov	r2, r9
 801efb8:	2300      	movs	r3, #0
 801efba:	210d      	movs	r1, #13
 801efbc:	4658      	mov	r0, fp
 801efbe:	f7fb f8b3 	bl	801a128 <uxr_buffer_submessage_header>
 801efc2:	8921      	ldrh	r1, [r4, #8]
 801efc4:	6863      	ldr	r3, [r4, #4]
 801efc6:	4630      	mov	r0, r6
 801efc8:	fbb6 f2f1 	udiv	r2, r6, r1
 801efcc:	fbb3 f3f1 	udiv	r3, r3, r1
 801efd0:	fb01 6212 	mls	r2, r1, r2, r6
 801efd4:	2101      	movs	r1, #1
 801efd6:	b292      	uxth	r2, r2
 801efd8:	fb02 f303 	mul.w	r3, r2, r3
 801efdc:	6822      	ldr	r2, [r4, #0]
 801efde:	50d7      	str	r7, [r2, r3]
 801efe0:	f000 f9c6 	bl	801f370 <uxr_seq_num_add>
 801efe4:	4606      	mov	r6, r0
 801efe6:	fa1f f38a 	uxth.w	r3, sl
 801efea:	429d      	cmp	r5, r3
 801efec:	d8c9      	bhi.n	801ef82 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801efee:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801eff2:	9d05      	ldr	r5, [sp, #20]
 801eff4:	8920      	ldrh	r0, [r4, #8]
 801eff6:	463a      	mov	r2, r7
 801eff8:	6863      	ldr	r3, [r4, #4]
 801effa:	fbb6 f1f0 	udiv	r1, r6, r0
 801effe:	fbb3 f3f0 	udiv	r3, r3, r0
 801f002:	fb00 6111 	mls	r1, r0, r1, r6
 801f006:	4658      	mov	r0, fp
 801f008:	b289      	uxth	r1, r1
 801f00a:	fb01 f303 	mul.w	r3, r1, r3
 801f00e:	6821      	ldr	r1, [r4, #0]
 801f010:	3304      	adds	r3, #4
 801f012:	4419      	add	r1, r3
 801f014:	2300      	movs	r3, #0
 801f016:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801f01a:	9700      	str	r7, [sp, #0]
 801f01c:	f7f4 fb06 	bl	801362c <ucdr_init_buffer_origin_offset>
 801f020:	9f06      	ldr	r7, [sp, #24]
 801f022:	4658      	mov	r0, fp
 801f024:	2302      	movs	r3, #2
 801f026:	b2ba      	uxth	r2, r7
 801f028:	210d      	movs	r1, #13
 801f02a:	f7fb f87d 	bl	801a128 <uxr_buffer_submessage_header>
 801f02e:	f108 0104 	add.w	r1, r8, #4
 801f032:	9b03      	ldr	r3, [sp, #12]
 801f034:	f1a5 0208 	sub.w	r2, r5, #8
 801f038:	8925      	ldrh	r5, [r4, #8]
 801f03a:	440b      	add	r3, r1
 801f03c:	eba2 0208 	sub.w	r2, r2, r8
 801f040:	fbb6 f0f5 	udiv	r0, r6, r5
 801f044:	4619      	mov	r1, r3
 801f046:	6863      	ldr	r3, [r4, #4]
 801f048:	fb05 6010 	mls	r0, r5, r0, r6
 801f04c:	fbb3 f3f5 	udiv	r3, r3, r5
 801f050:	b280      	uxth	r0, r0
 801f052:	6825      	ldr	r5, [r4, #0]
 801f054:	fb00 f303 	mul.w	r3, r0, r3
 801f058:	7b20      	ldrb	r0, [r4, #12]
 801f05a:	3004      	adds	r0, #4
 801f05c:	4438      	add	r0, r7
 801f05e:	50e8      	str	r0, [r5, r3]
 801f060:	9d04      	ldr	r5, [sp, #16]
 801f062:	4628      	mov	r0, r5
 801f064:	f7f4 faf4 	bl	8013650 <ucdr_init_buffer>
 801f068:	4628      	mov	r0, r5
 801f06a:	4622      	mov	r2, r4
 801f06c:	493d      	ldr	r1, [pc, #244]	; (801f164 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801f06e:	f7f4 fac3 	bl	80135f8 <ucdr_set_on_full_buffer_callback>
 801f072:	2001      	movs	r0, #1
 801f074:	81e6      	strh	r6, [r4, #14]
 801f076:	b011      	add	sp, #68	; 0x44
 801f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f07c:	2101      	movs	r1, #1
 801f07e:	89e0      	ldrh	r0, [r4, #14]
 801f080:	f000 f976 	bl	801f370 <uxr_seq_num_add>
 801f084:	4605      	mov	r5, r0
 801f086:	8921      	ldrh	r1, [r4, #8]
 801f088:	8a60      	ldrh	r0, [r4, #18]
 801f08a:	f000 f971 	bl	801f370 <uxr_seq_num_add>
 801f08e:	4601      	mov	r1, r0
 801f090:	4628      	mov	r0, r5
 801f092:	f000 f975 	bl	801f380 <uxr_seq_num_cmp>
 801f096:	2800      	cmp	r0, #0
 801f098:	dd44      	ble.n	801f124 <uxr_prepare_reliable_buffer_to_write+0x298>
 801f09a:	2000      	movs	r0, #0
 801f09c:	b011      	add	sp, #68	; 0x44
 801f09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0a2:	8921      	ldrh	r1, [r4, #8]
 801f0a4:	8a60      	ldrh	r0, [r4, #18]
 801f0a6:	9205      	str	r2, [sp, #20]
 801f0a8:	f000 f962 	bl	801f370 <uxr_seq_num_add>
 801f0ac:	4601      	mov	r1, r0
 801f0ae:	4630      	mov	r0, r6
 801f0b0:	f000 f966 	bl	801f380 <uxr_seq_num_cmp>
 801f0b4:	2800      	cmp	r0, #0
 801f0b6:	9a05      	ldr	r2, [sp, #20]
 801f0b8:	dcef      	bgt.n	801f09a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801f0ba:	8925      	ldrh	r5, [r4, #8]
 801f0bc:	e9d4 7300 	ldrd	r7, r3, [r4]
 801f0c0:	fbb6 f4f5 	udiv	r4, r6, r5
 801f0c4:	fbb3 f3f5 	udiv	r3, r3, r5
 801f0c8:	fb05 6414 	mls	r4, r5, r4, r6
 801f0cc:	b2a4      	uxth	r4, r4
 801f0ce:	fb04 f303 	mul.w	r3, r4, r3
 801f0d2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801f0d6:	50fa      	str	r2, [r7, r3]
 801f0d8:	2300      	movs	r3, #0
 801f0da:	f8cd 8000 	str.w	r8, [sp]
 801f0de:	f7f4 faa5 	bl	801362c <ucdr_init_buffer_origin_offset>
 801f0e2:	2001      	movs	r0, #1
 801f0e4:	e7da      	b.n	801f09c <uxr_prepare_reliable_buffer_to_write+0x210>
 801f0e6:	3201      	adds	r2, #1
 801f0e8:	9306      	str	r3, [sp, #24]
 801f0ea:	b293      	uxth	r3, r2
 801f0ec:	4553      	cmp	r3, sl
 801f0ee:	d8d4      	bhi.n	801f09a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801f0f0:	e739      	b.n	801ef66 <uxr_prepare_reliable_buffer_to_write+0xda>
 801f0f2:	4630      	mov	r0, r6
 801f0f4:	2101      	movs	r1, #1
 801f0f6:	9307      	str	r3, [sp, #28]
 801f0f8:	f000 f93a 	bl	801f370 <uxr_seq_num_add>
 801f0fc:	4606      	mov	r6, r0
 801f0fe:	8920      	ldrh	r0, [r4, #8]
 801f100:	6862      	ldr	r2, [r4, #4]
 801f102:	fbb6 f1f0 	udiv	r1, r6, r0
 801f106:	fbb2 f2f0 	udiv	r2, r2, r0
 801f10a:	fb00 6111 	mls	r1, r0, r1, r6
 801f10e:	b289      	uxth	r1, r1
 801f110:	fb01 f202 	mul.w	r2, r1, r2
 801f114:	6821      	ldr	r1, [r4, #0]
 801f116:	3204      	adds	r2, #4
 801f118:	188b      	adds	r3, r1, r2
 801f11a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801f11e:	9303      	str	r3, [sp, #12]
 801f120:	9b07      	ldr	r3, [sp, #28]
 801f122:	e70c      	b.n	801ef3e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801f124:	8921      	ldrh	r1, [r4, #8]
 801f126:	6863      	ldr	r3, [r4, #4]
 801f128:	9804      	ldr	r0, [sp, #16]
 801f12a:	fbb5 f2f1 	udiv	r2, r5, r1
 801f12e:	fbb3 f3f1 	udiv	r3, r3, r1
 801f132:	fb01 5212 	mls	r2, r1, r2, r5
 801f136:	6821      	ldr	r1, [r4, #0]
 801f138:	b292      	uxth	r2, r2
 801f13a:	fb02 f303 	mul.w	r3, r2, r3
 801f13e:	7b22      	ldrb	r2, [r4, #12]
 801f140:	3304      	adds	r3, #4
 801f142:	445a      	add	r2, fp
 801f144:	4419      	add	r1, r3
 801f146:	f841 2c04 	str.w	r2, [r1, #-4]
 801f14a:	7b23      	ldrb	r3, [r4, #12]
 801f14c:	9300      	str	r3, [sp, #0]
 801f14e:	2300      	movs	r3, #0
 801f150:	f7f4 fa6c 	bl	801362c <ucdr_init_buffer_origin_offset>
 801f154:	2001      	movs	r0, #1
 801f156:	81e5      	strh	r5, [r4, #14]
 801f158:	e7a0      	b.n	801f09c <uxr_prepare_reliable_buffer_to_write+0x210>
 801f15a:	4682      	mov	sl, r0
 801f15c:	e6cb      	b.n	801eef6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801f15e:	f10d 0b20 	add.w	fp, sp, #32
 801f162:	e747      	b.n	801eff4 <uxr_prepare_reliable_buffer_to_write+0x168>
 801f164:	0801ed61 	.word	0x0801ed61

0801f168 <uxr_prepare_next_reliable_buffer_to_send>:
 801f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f16a:	4604      	mov	r4, r0
 801f16c:	461d      	mov	r5, r3
 801f16e:	460f      	mov	r7, r1
 801f170:	8a00      	ldrh	r0, [r0, #16]
 801f172:	2101      	movs	r1, #1
 801f174:	4616      	mov	r6, r2
 801f176:	f000 f8fb 	bl	801f370 <uxr_seq_num_add>
 801f17a:	8028      	strh	r0, [r5, #0]
 801f17c:	8922      	ldrh	r2, [r4, #8]
 801f17e:	6863      	ldr	r3, [r4, #4]
 801f180:	fbb0 f1f2 	udiv	r1, r0, r2
 801f184:	fbb3 f3f2 	udiv	r3, r3, r2
 801f188:	fb02 0c11 	mls	ip, r2, r1, r0
 801f18c:	89e1      	ldrh	r1, [r4, #14]
 801f18e:	fa1f fc8c 	uxth.w	ip, ip
 801f192:	fb0c fc03 	mul.w	ip, ip, r3
 801f196:	6823      	ldr	r3, [r4, #0]
 801f198:	f10c 0c04 	add.w	ip, ip, #4
 801f19c:	4463      	add	r3, ip
 801f19e:	603b      	str	r3, [r7, #0]
 801f1a0:	6823      	ldr	r3, [r4, #0]
 801f1a2:	449c      	add	ip, r3
 801f1a4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801f1a8:	6033      	str	r3, [r6, #0]
 801f1aa:	f000 f8e9 	bl	801f380 <uxr_seq_num_cmp>
 801f1ae:	2800      	cmp	r0, #0
 801f1b0:	dd01      	ble.n	801f1b6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801f1b2:	2000      	movs	r0, #0
 801f1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1b6:	7b23      	ldrb	r3, [r4, #12]
 801f1b8:	6832      	ldr	r2, [r6, #0]
 801f1ba:	429a      	cmp	r2, r3
 801f1bc:	d9f9      	bls.n	801f1b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801f1be:	8a61      	ldrh	r1, [r4, #18]
 801f1c0:	8a20      	ldrh	r0, [r4, #16]
 801f1c2:	f000 f8d9 	bl	801f378 <uxr_seq_num_sub>
 801f1c6:	8923      	ldrh	r3, [r4, #8]
 801f1c8:	4283      	cmp	r3, r0
 801f1ca:	d0f2      	beq.n	801f1b2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801f1cc:	8828      	ldrh	r0, [r5, #0]
 801f1ce:	89e3      	ldrh	r3, [r4, #14]
 801f1d0:	8220      	strh	r0, [r4, #16]
 801f1d2:	4298      	cmp	r0, r3
 801f1d4:	d001      	beq.n	801f1da <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801f1d6:	2001      	movs	r0, #1
 801f1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1da:	2101      	movs	r1, #1
 801f1dc:	f000 f8c8 	bl	801f370 <uxr_seq_num_add>
 801f1e0:	4603      	mov	r3, r0
 801f1e2:	2001      	movs	r0, #1
 801f1e4:	81e3      	strh	r3, [r4, #14]
 801f1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f1e8 <uxr_update_output_stream_heartbeat_timestamp>:
 801f1e8:	b570      	push	{r4, r5, r6, lr}
 801f1ea:	8a01      	ldrh	r1, [r0, #16]
 801f1ec:	4604      	mov	r4, r0
 801f1ee:	8a40      	ldrh	r0, [r0, #18]
 801f1f0:	4615      	mov	r5, r2
 801f1f2:	461e      	mov	r6, r3
 801f1f4:	f000 f8c4 	bl	801f380 <uxr_seq_num_cmp>
 801f1f8:	2800      	cmp	r0, #0
 801f1fa:	db07      	blt.n	801f20c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801f1fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f200:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801f204:	2000      	movs	r0, #0
 801f206:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801f20a:	bd70      	pop	{r4, r5, r6, pc}
 801f20c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801f210:	b940      	cbnz	r0, 801f224 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801f212:	2301      	movs	r3, #1
 801f214:	f884 3020 	strb.w	r3, [r4, #32]
 801f218:	3564      	adds	r5, #100	; 0x64
 801f21a:	f146 0600 	adc.w	r6, r6, #0
 801f21e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801f222:	bd70      	pop	{r4, r5, r6, pc}
 801f224:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801f228:	4295      	cmp	r5, r2
 801f22a:	eb76 0303 	sbcs.w	r3, r6, r3
 801f22e:	db04      	blt.n	801f23a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801f230:	1c43      	adds	r3, r0, #1
 801f232:	2001      	movs	r0, #1
 801f234:	f884 3020 	strb.w	r3, [r4, #32]
 801f238:	e7ee      	b.n	801f218 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801f23a:	2000      	movs	r0, #0
 801f23c:	e7ec      	b.n	801f218 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801f23e:	bf00      	nop

0801f240 <uxr_begin_output_nack_buffer_it>:
 801f240:	8a40      	ldrh	r0, [r0, #18]
 801f242:	4770      	bx	lr

0801f244 <uxr_next_reliable_nack_buffer_to_send>:
 801f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f248:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801f24c:	b197      	cbz	r7, 801f274 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801f24e:	4680      	mov	r8, r0
 801f250:	460d      	mov	r5, r1
 801f252:	4616      	mov	r6, r2
 801f254:	461c      	mov	r4, r3
 801f256:	8818      	ldrh	r0, [r3, #0]
 801f258:	2101      	movs	r1, #1
 801f25a:	f000 f889 	bl	801f370 <uxr_seq_num_add>
 801f25e:	8020      	strh	r0, [r4, #0]
 801f260:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801f264:	f000 f88c 	bl	801f380 <uxr_seq_num_cmp>
 801f268:	2800      	cmp	r0, #0
 801f26a:	dd06      	ble.n	801f27a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801f26c:	2300      	movs	r3, #0
 801f26e:	461f      	mov	r7, r3
 801f270:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801f274:	4638      	mov	r0, r7
 801f276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f27a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801f27e:	8820      	ldrh	r0, [r4, #0]
 801f280:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f284:	fbb0 f3f2 	udiv	r3, r0, r2
 801f288:	fbb1 fcf2 	udiv	ip, r1, r2
 801f28c:	fb02 0313 	mls	r3, r2, r3, r0
 801f290:	b29b      	uxth	r3, r3
 801f292:	fb03 fc0c 	mul.w	ip, r3, ip
 801f296:	f8d8 3000 	ldr.w	r3, [r8]
 801f29a:	f10c 0c04 	add.w	ip, ip, #4
 801f29e:	4463      	add	r3, ip
 801f2a0:	602b      	str	r3, [r5, #0]
 801f2a2:	f8d8 3000 	ldr.w	r3, [r8]
 801f2a6:	4463      	add	r3, ip
 801f2a8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801f2ac:	6033      	str	r3, [r6, #0]
 801f2ae:	f898 200c 	ldrb.w	r2, [r8, #12]
 801f2b2:	429a      	cmp	r2, r3
 801f2b4:	d0d0      	beq.n	801f258 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801f2b6:	e7dd      	b.n	801f274 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801f2b8 <uxr_process_acknack>:
 801f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2ba:	4604      	mov	r4, r0
 801f2bc:	460e      	mov	r6, r1
 801f2be:	4610      	mov	r0, r2
 801f2c0:	2101      	movs	r1, #1
 801f2c2:	f000 f859 	bl	801f378 <uxr_seq_num_sub>
 801f2c6:	8a61      	ldrh	r1, [r4, #18]
 801f2c8:	f000 f856 	bl	801f378 <uxr_seq_num_sub>
 801f2cc:	b1c8      	cbz	r0, 801f302 <uxr_process_acknack+0x4a>
 801f2ce:	4605      	mov	r5, r0
 801f2d0:	2700      	movs	r7, #0
 801f2d2:	2101      	movs	r1, #1
 801f2d4:	8a60      	ldrh	r0, [r4, #18]
 801f2d6:	f000 f84b 	bl	801f370 <uxr_seq_num_add>
 801f2da:	8923      	ldrh	r3, [r4, #8]
 801f2dc:	6862      	ldr	r2, [r4, #4]
 801f2de:	3701      	adds	r7, #1
 801f2e0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801f2e4:	6821      	ldr	r1, [r4, #0]
 801f2e6:	42bd      	cmp	r5, r7
 801f2e8:	8260      	strh	r0, [r4, #18]
 801f2ea:	fbb0 fef3 	udiv	lr, r0, r3
 801f2ee:	fbb2 f2f3 	udiv	r2, r2, r3
 801f2f2:	fb03 031e 	mls	r3, r3, lr, r0
 801f2f6:	b29b      	uxth	r3, r3
 801f2f8:	fb02 f303 	mul.w	r3, r2, r3
 801f2fc:	f841 c003 	str.w	ip, [r1, r3]
 801f300:	d1e7      	bne.n	801f2d2 <uxr_process_acknack+0x1a>
 801f302:	3e00      	subs	r6, #0
 801f304:	f04f 0300 	mov.w	r3, #0
 801f308:	bf18      	it	ne
 801f30a:	2601      	movne	r6, #1
 801f30c:	f884 3020 	strb.w	r3, [r4, #32]
 801f310:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801f314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f316:	bf00      	nop

0801f318 <uxr_is_output_up_to_date>:
 801f318:	8a01      	ldrh	r1, [r0, #16]
 801f31a:	8a40      	ldrh	r0, [r0, #18]
 801f31c:	b508      	push	{r3, lr}
 801f31e:	f000 f82f 	bl	801f380 <uxr_seq_num_cmp>
 801f322:	fab0 f080 	clz	r0, r0
 801f326:	0940      	lsrs	r0, r0, #5
 801f328:	bd08      	pop	{r3, pc}
 801f32a:	bf00      	nop

0801f32c <get_available_free_slots>:
 801f32c:	8901      	ldrh	r1, [r0, #8]
 801f32e:	b1e1      	cbz	r1, 801f36a <get_available_free_slots+0x3e>
 801f330:	6843      	ldr	r3, [r0, #4]
 801f332:	f04f 0c00 	mov.w	ip, #0
 801f336:	b530      	push	{r4, r5, lr}
 801f338:	fbb3 fef1 	udiv	lr, r3, r1
 801f33c:	6805      	ldr	r5, [r0, #0]
 801f33e:	4662      	mov	r2, ip
 801f340:	7b04      	ldrb	r4, [r0, #12]
 801f342:	4660      	mov	r0, ip
 801f344:	f10c 0c01 	add.w	ip, ip, #1
 801f348:	fbb2 f3f1 	udiv	r3, r2, r1
 801f34c:	fb01 2313 	mls	r3, r1, r3, r2
 801f350:	fa1f f28c 	uxth.w	r2, ip
 801f354:	b29b      	uxth	r3, r3
 801f356:	fb0e f303 	mul.w	r3, lr, r3
 801f35a:	58eb      	ldr	r3, [r5, r3]
 801f35c:	429c      	cmp	r4, r3
 801f35e:	d101      	bne.n	801f364 <get_available_free_slots+0x38>
 801f360:	3001      	adds	r0, #1
 801f362:	b280      	uxth	r0, r0
 801f364:	428a      	cmp	r2, r1
 801f366:	d3ed      	bcc.n	801f344 <get_available_free_slots+0x18>
 801f368:	bd30      	pop	{r4, r5, pc}
 801f36a:	4608      	mov	r0, r1
 801f36c:	4770      	bx	lr
 801f36e:	bf00      	nop

0801f370 <uxr_seq_num_add>:
 801f370:	4408      	add	r0, r1
 801f372:	b280      	uxth	r0, r0
 801f374:	4770      	bx	lr
 801f376:	bf00      	nop

0801f378 <uxr_seq_num_sub>:
 801f378:	1a40      	subs	r0, r0, r1
 801f37a:	b280      	uxth	r0, r0
 801f37c:	4770      	bx	lr
 801f37e:	bf00      	nop

0801f380 <uxr_seq_num_cmp>:
 801f380:	4288      	cmp	r0, r1
 801f382:	d011      	beq.n	801f3a8 <uxr_seq_num_cmp+0x28>
 801f384:	d309      	bcc.n	801f39a <uxr_seq_num_cmp+0x1a>
 801f386:	4288      	cmp	r0, r1
 801f388:	d910      	bls.n	801f3ac <uxr_seq_num_cmp+0x2c>
 801f38a:	1a40      	subs	r0, r0, r1
 801f38c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801f390:	bfd4      	ite	le
 801f392:	2001      	movle	r0, #1
 801f394:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801f398:	4770      	bx	lr
 801f39a:	1a0b      	subs	r3, r1, r0
 801f39c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f3a0:	daf1      	bge.n	801f386 <uxr_seq_num_cmp+0x6>
 801f3a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f3a6:	4770      	bx	lr
 801f3a8:	2000      	movs	r0, #0
 801f3aa:	4770      	bx	lr
 801f3ac:	2001      	movs	r0, #1
 801f3ae:	4770      	bx	lr

0801f3b0 <rcl_get_default_domain_id>:
 801f3b0:	b530      	push	{r4, r5, lr}
 801f3b2:	2300      	movs	r3, #0
 801f3b4:	b083      	sub	sp, #12
 801f3b6:	9300      	str	r3, [sp, #0]
 801f3b8:	b1d0      	cbz	r0, 801f3f0 <rcl_get_default_domain_id+0x40>
 801f3ba:	4604      	mov	r4, r0
 801f3bc:	4669      	mov	r1, sp
 801f3be:	4815      	ldr	r0, [pc, #84]	; (801f414 <rcl_get_default_domain_id+0x64>)
 801f3c0:	f7f6 f82a 	bl	8015418 <rcutils_get_env>
 801f3c4:	4602      	mov	r2, r0
 801f3c6:	b110      	cbz	r0, 801f3ce <rcl_get_default_domain_id+0x1e>
 801f3c8:	2001      	movs	r0, #1
 801f3ca:	b003      	add	sp, #12
 801f3cc:	bd30      	pop	{r4, r5, pc}
 801f3ce:	9b00      	ldr	r3, [sp, #0]
 801f3d0:	b18b      	cbz	r3, 801f3f6 <rcl_get_default_domain_id+0x46>
 801f3d2:	7818      	ldrb	r0, [r3, #0]
 801f3d4:	2800      	cmp	r0, #0
 801f3d6:	d0f8      	beq.n	801f3ca <rcl_get_default_domain_id+0x1a>
 801f3d8:	a901      	add	r1, sp, #4
 801f3da:	4618      	mov	r0, r3
 801f3dc:	9201      	str	r2, [sp, #4]
 801f3de:	f000 fc8f 	bl	801fd00 <strtoul>
 801f3e2:	4605      	mov	r5, r0
 801f3e4:	b150      	cbz	r0, 801f3fc <rcl_get_default_domain_id+0x4c>
 801f3e6:	1c43      	adds	r3, r0, #1
 801f3e8:	d00d      	beq.n	801f406 <rcl_get_default_domain_id+0x56>
 801f3ea:	2000      	movs	r0, #0
 801f3ec:	6025      	str	r5, [r4, #0]
 801f3ee:	e7ec      	b.n	801f3ca <rcl_get_default_domain_id+0x1a>
 801f3f0:	200b      	movs	r0, #11
 801f3f2:	b003      	add	sp, #12
 801f3f4:	bd30      	pop	{r4, r5, pc}
 801f3f6:	4618      	mov	r0, r3
 801f3f8:	b003      	add	sp, #12
 801f3fa:	bd30      	pop	{r4, r5, pc}
 801f3fc:	9b01      	ldr	r3, [sp, #4]
 801f3fe:	781b      	ldrb	r3, [r3, #0]
 801f400:	2b00      	cmp	r3, #0
 801f402:	d0f2      	beq.n	801f3ea <rcl_get_default_domain_id+0x3a>
 801f404:	e7e0      	b.n	801f3c8 <rcl_get_default_domain_id+0x18>
 801f406:	f001 ff25 	bl	8021254 <__errno>
 801f40a:	6803      	ldr	r3, [r0, #0]
 801f40c:	2b22      	cmp	r3, #34	; 0x22
 801f40e:	d1ec      	bne.n	801f3ea <rcl_get_default_domain_id+0x3a>
 801f410:	e7da      	b.n	801f3c8 <rcl_get_default_domain_id+0x18>
 801f412:	bf00      	nop
 801f414:	08025df8 	.word	0x08025df8

0801f418 <rcl_expand_topic_name>:
 801f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f41c:	b08d      	sub	sp, #52	; 0x34
 801f41e:	4698      	mov	r8, r3
 801f420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f422:	9207      	str	r2, [sp, #28]
 801f424:	2b00      	cmp	r3, #0
 801f426:	bf18      	it	ne
 801f428:	f1b8 0f00 	cmpne.w	r8, #0
 801f42c:	bf0c      	ite	eq
 801f42e:	2301      	moveq	r3, #1
 801f430:	2300      	movne	r3, #0
 801f432:	2a00      	cmp	r2, #0
 801f434:	bf08      	it	eq
 801f436:	f043 0301 	orreq.w	r3, r3, #1
 801f43a:	2900      	cmp	r1, #0
 801f43c:	bf08      	it	eq
 801f43e:	f043 0301 	orreq.w	r3, r3, #1
 801f442:	2b00      	cmp	r3, #0
 801f444:	d13d      	bne.n	801f4c2 <rcl_expand_topic_name+0xaa>
 801f446:	fab0 f280 	clz	r2, r0
 801f44a:	4604      	mov	r4, r0
 801f44c:	0952      	lsrs	r2, r2, #5
 801f44e:	2800      	cmp	r0, #0
 801f450:	d037      	beq.n	801f4c2 <rcl_expand_topic_name+0xaa>
 801f452:	460f      	mov	r7, r1
 801f454:	a90b      	add	r1, sp, #44	; 0x2c
 801f456:	f000 f945 	bl	801f6e4 <rcl_validate_topic_name>
 801f45a:	4605      	mov	r5, r0
 801f45c:	bb68      	cbnz	r0, 801f4ba <rcl_expand_topic_name+0xa2>
 801f45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f460:	2b00      	cmp	r3, #0
 801f462:	d137      	bne.n	801f4d4 <rcl_expand_topic_name+0xbc>
 801f464:	4602      	mov	r2, r0
 801f466:	a90b      	add	r1, sp, #44	; 0x2c
 801f468:	4638      	mov	r0, r7
 801f46a:	f7f6 fa97 	bl	801599c <rmw_validate_node_name>
 801f46e:	bb68      	cbnz	r0, 801f4cc <rcl_expand_topic_name+0xb4>
 801f470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f472:	2b00      	cmp	r3, #0
 801f474:	d133      	bne.n	801f4de <rcl_expand_topic_name+0xc6>
 801f476:	462a      	mov	r2, r5
 801f478:	a90b      	add	r1, sp, #44	; 0x2c
 801f47a:	9807      	ldr	r0, [sp, #28]
 801f47c:	f7f6 fa70 	bl	8015960 <rmw_validate_namespace>
 801f480:	bb20      	cbnz	r0, 801f4cc <rcl_expand_topic_name+0xb4>
 801f482:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f484:	2d00      	cmp	r5, #0
 801f486:	f040 80a2 	bne.w	801f5ce <rcl_expand_topic_name+0x1b6>
 801f48a:	217b      	movs	r1, #123	; 0x7b
 801f48c:	4620      	mov	r0, r4
 801f48e:	f001 fe51 	bl	8021134 <strchr>
 801f492:	7823      	ldrb	r3, [r4, #0]
 801f494:	4681      	mov	r9, r0
 801f496:	bb20      	cbnz	r0, 801f4e2 <rcl_expand_topic_name+0xca>
 801f498:	2b2f      	cmp	r3, #47	; 0x2f
 801f49a:	d122      	bne.n	801f4e2 <rcl_expand_topic_name+0xca>
 801f49c:	ab19      	add	r3, sp, #100	; 0x64
 801f49e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f4a2:	ab16      	add	r3, sp, #88	; 0x58
 801f4a4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f4a8:	4620      	mov	r0, r4
 801f4aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f4ac:	f7f6 f93a 	bl	8015724 <rcutils_strdup>
 801f4b0:	2800      	cmp	r0, #0
 801f4b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f4b4:	bf08      	it	eq
 801f4b6:	250a      	moveq	r5, #10
 801f4b8:	6018      	str	r0, [r3, #0]
 801f4ba:	4628      	mov	r0, r5
 801f4bc:	b00d      	add	sp, #52	; 0x34
 801f4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4c2:	250b      	movs	r5, #11
 801f4c4:	4628      	mov	r0, r5
 801f4c6:	b00d      	add	sp, #52	; 0x34
 801f4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4cc:	f7fc f97a 	bl	801b7c4 <rcl_convert_rmw_ret_to_rcl_ret>
 801f4d0:	4605      	mov	r5, r0
 801f4d2:	e7f2      	b.n	801f4ba <rcl_expand_topic_name+0xa2>
 801f4d4:	2567      	movs	r5, #103	; 0x67
 801f4d6:	4628      	mov	r0, r5
 801f4d8:	b00d      	add	sp, #52	; 0x34
 801f4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4de:	25c9      	movs	r5, #201	; 0xc9
 801f4e0:	e7eb      	b.n	801f4ba <rcl_expand_topic_name+0xa2>
 801f4e2:	2b7e      	cmp	r3, #126	; 0x7e
 801f4e4:	d075      	beq.n	801f5d2 <rcl_expand_topic_name+0x1ba>
 801f4e6:	f1b9 0f00 	cmp.w	r9, #0
 801f4ea:	f000 80c2 	beq.w	801f672 <rcl_expand_topic_name+0x25a>
 801f4ee:	2300      	movs	r3, #0
 801f4f0:	46a2      	mov	sl, r4
 801f4f2:	461e      	mov	r6, r3
 801f4f4:	9508      	str	r5, [sp, #32]
 801f4f6:	4655      	mov	r5, sl
 801f4f8:	9409      	str	r4, [sp, #36]	; 0x24
 801f4fa:	46b2      	mov	sl, r6
 801f4fc:	464c      	mov	r4, r9
 801f4fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f502:	2c00      	cmp	r4, #0
 801f504:	f000 80ae 	beq.w	801f664 <rcl_expand_topic_name+0x24c>
 801f508:	217d      	movs	r1, #125	; 0x7d
 801f50a:	4628      	mov	r0, r5
 801f50c:	f001 fe12 	bl	8021134 <strchr>
 801f510:	eba0 0904 	sub.w	r9, r0, r4
 801f514:	4621      	mov	r1, r4
 801f516:	4869      	ldr	r0, [pc, #420]	; (801f6bc <rcl_expand_topic_name+0x2a4>)
 801f518:	f109 0601 	add.w	r6, r9, #1
 801f51c:	4632      	mov	r2, r6
 801f51e:	f001 fe16 	bl	802114e <strncmp>
 801f522:	2800      	cmp	r0, #0
 801f524:	d051      	beq.n	801f5ca <rcl_expand_topic_name+0x1b2>
 801f526:	4632      	mov	r2, r6
 801f528:	4621      	mov	r1, r4
 801f52a:	4865      	ldr	r0, [pc, #404]	; (801f6c0 <rcl_expand_topic_name+0x2a8>)
 801f52c:	f001 fe0f 	bl	802114e <strncmp>
 801f530:	b128      	cbz	r0, 801f53e <rcl_expand_topic_name+0x126>
 801f532:	4632      	mov	r2, r6
 801f534:	4621      	mov	r1, r4
 801f536:	4863      	ldr	r0, [pc, #396]	; (801f6c4 <rcl_expand_topic_name+0x2ac>)
 801f538:	f001 fe09 	bl	802114e <strncmp>
 801f53c:	bb38      	cbnz	r0, 801f58e <rcl_expand_topic_name+0x176>
 801f53e:	46d9      	mov	r9, fp
 801f540:	ab18      	add	r3, sp, #96	; 0x60
 801f542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f546:	ab16      	add	r3, sp, #88	; 0x58
 801f548:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f54c:	4620      	mov	r0, r4
 801f54e:	4631      	mov	r1, r6
 801f550:	cb0c      	ldmia	r3, {r2, r3}
 801f552:	f7f6 f909 	bl	8015768 <rcutils_strndup>
 801f556:	4604      	mov	r4, r0
 801f558:	2800      	cmp	r0, #0
 801f55a:	f000 80a3 	beq.w	801f6a4 <rcl_expand_topic_name+0x28c>
 801f55e:	464a      	mov	r2, r9
 801f560:	4628      	mov	r0, r5
 801f562:	ab16      	add	r3, sp, #88	; 0x58
 801f564:	4621      	mov	r1, r4
 801f566:	f7f5 ffdd 	bl	8015524 <rcutils_repl_str>
 801f56a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f56c:	4605      	mov	r5, r0
 801f56e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f570:	4620      	mov	r0, r4
 801f572:	4798      	blx	r3
 801f574:	4650      	mov	r0, sl
 801f576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f578:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f57a:	4798      	blx	r3
 801f57c:	2d00      	cmp	r5, #0
 801f57e:	d06c      	beq.n	801f65a <rcl_expand_topic_name+0x242>
 801f580:	217b      	movs	r1, #123	; 0x7b
 801f582:	4628      	mov	r0, r5
 801f584:	f001 fdd6 	bl	8021134 <strchr>
 801f588:	46aa      	mov	sl, r5
 801f58a:	4604      	mov	r4, r0
 801f58c:	e7b9      	b.n	801f502 <rcl_expand_topic_name+0xea>
 801f58e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801f592:	1c61      	adds	r1, r4, #1
 801f594:	4640      	mov	r0, r8
 801f596:	f7fe fca5 	bl	801dee4 <rcutils_string_map_getn>
 801f59a:	4681      	mov	r9, r0
 801f59c:	2800      	cmp	r0, #0
 801f59e:	d1cf      	bne.n	801f540 <rcl_expand_topic_name+0x128>
 801f5a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f5a2:	aa18      	add	r2, sp, #96	; 0x60
 801f5a4:	2569      	movs	r5, #105	; 0x69
 801f5a6:	6018      	str	r0, [r3, #0]
 801f5a8:	ab16      	add	r3, sp, #88	; 0x58
 801f5aa:	ca07      	ldmia	r2, {r0, r1, r2}
 801f5ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f5b0:	4631      	mov	r1, r6
 801f5b2:	4620      	mov	r0, r4
 801f5b4:	cb0c      	ldmia	r3, {r2, r3}
 801f5b6:	f7f6 f8d7 	bl	8015768 <rcutils_strndup>
 801f5ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f5bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f5be:	4798      	blx	r3
 801f5c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f5c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f5c4:	4650      	mov	r0, sl
 801f5c6:	4798      	blx	r3
 801f5c8:	e777      	b.n	801f4ba <rcl_expand_topic_name+0xa2>
 801f5ca:	46b9      	mov	r9, r7
 801f5cc:	e7b8      	b.n	801f540 <rcl_expand_topic_name+0x128>
 801f5ce:	25ca      	movs	r5, #202	; 0xca
 801f5d0:	e773      	b.n	801f4ba <rcl_expand_topic_name+0xa2>
 801f5d2:	9e07      	ldr	r6, [sp, #28]
 801f5d4:	4630      	mov	r0, r6
 801f5d6:	f7e0 fe93 	bl	8000300 <strlen>
 801f5da:	4a3b      	ldr	r2, [pc, #236]	; (801f6c8 <rcl_expand_topic_name+0x2b0>)
 801f5dc:	4b3b      	ldr	r3, [pc, #236]	; (801f6cc <rcl_expand_topic_name+0x2b4>)
 801f5de:	9603      	str	r6, [sp, #12]
 801f5e0:	2801      	cmp	r0, #1
 801f5e2:	bf18      	it	ne
 801f5e4:	4613      	movne	r3, r2
 801f5e6:	9704      	str	r7, [sp, #16]
 801f5e8:	9302      	str	r3, [sp, #8]
 801f5ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f5ec:	9300      	str	r3, [sp, #0]
 801f5ee:	1c63      	adds	r3, r4, #1
 801f5f0:	9305      	str	r3, [sp, #20]
 801f5f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f5f6:	9301      	str	r3, [sp, #4]
 801f5f8:	ab16      	add	r3, sp, #88	; 0x58
 801f5fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f5fc:	f7f5 ff58 	bl	80154b0 <rcutils_format_string_limit>
 801f600:	4606      	mov	r6, r0
 801f602:	b350      	cbz	r0, 801f65a <rcl_expand_topic_name+0x242>
 801f604:	f1b9 0f00 	cmp.w	r9, #0
 801f608:	d005      	beq.n	801f616 <rcl_expand_topic_name+0x1fe>
 801f60a:	217b      	movs	r1, #123	; 0x7b
 801f60c:	46b2      	mov	sl, r6
 801f60e:	f001 fd91 	bl	8021134 <strchr>
 801f612:	4681      	mov	r9, r0
 801f614:	e76e      	b.n	801f4f4 <rcl_expand_topic_name+0xdc>
 801f616:	7833      	ldrb	r3, [r6, #0]
 801f618:	2b2f      	cmp	r3, #47	; 0x2f
 801f61a:	d01b      	beq.n	801f654 <rcl_expand_topic_name+0x23c>
 801f61c:	9c07      	ldr	r4, [sp, #28]
 801f61e:	4620      	mov	r0, r4
 801f620:	f7e0 fe6e 	bl	8000300 <strlen>
 801f624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f628:	4a29      	ldr	r2, [pc, #164]	; (801f6d0 <rcl_expand_topic_name+0x2b8>)
 801f62a:	9301      	str	r3, [sp, #4]
 801f62c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f62e:	9604      	str	r6, [sp, #16]
 801f630:	9300      	str	r3, [sp, #0]
 801f632:	4b28      	ldr	r3, [pc, #160]	; (801f6d4 <rcl_expand_topic_name+0x2bc>)
 801f634:	9403      	str	r4, [sp, #12]
 801f636:	2801      	cmp	r0, #1
 801f638:	bf18      	it	ne
 801f63a:	4613      	movne	r3, r2
 801f63c:	9302      	str	r3, [sp, #8]
 801f63e:	ab16      	add	r3, sp, #88	; 0x58
 801f640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f642:	f7f5 ff35 	bl	80154b0 <rcutils_format_string_limit>
 801f646:	4603      	mov	r3, r0
 801f648:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f64a:	4630      	mov	r0, r6
 801f64c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f64e:	461e      	mov	r6, r3
 801f650:	4790      	blx	r2
 801f652:	b116      	cbz	r6, 801f65a <rcl_expand_topic_name+0x242>
 801f654:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f656:	601e      	str	r6, [r3, #0]
 801f658:	e72f      	b.n	801f4ba <rcl_expand_topic_name+0xa2>
 801f65a:	2300      	movs	r3, #0
 801f65c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f65e:	250a      	movs	r5, #10
 801f660:	6013      	str	r3, [r2, #0]
 801f662:	e72a      	b.n	801f4ba <rcl_expand_topic_name+0xa2>
 801f664:	4653      	mov	r3, sl
 801f666:	4656      	mov	r6, sl
 801f668:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d1d2      	bne.n	801f616 <rcl_expand_topic_name+0x1fe>
 801f670:	7823      	ldrb	r3, [r4, #0]
 801f672:	2b2f      	cmp	r3, #47	; 0x2f
 801f674:	d01e      	beq.n	801f6b4 <rcl_expand_topic_name+0x29c>
 801f676:	9e07      	ldr	r6, [sp, #28]
 801f678:	4630      	mov	r0, r6
 801f67a:	f7e0 fe41 	bl	8000300 <strlen>
 801f67e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f684:	9603      	str	r6, [sp, #12]
 801f686:	9404      	str	r4, [sp, #16]
 801f688:	e9cd 2300 	strd	r2, r3, [sp]
 801f68c:	4a10      	ldr	r2, [pc, #64]	; (801f6d0 <rcl_expand_topic_name+0x2b8>)
 801f68e:	4b11      	ldr	r3, [pc, #68]	; (801f6d4 <rcl_expand_topic_name+0x2bc>)
 801f690:	2801      	cmp	r0, #1
 801f692:	bf18      	it	ne
 801f694:	4613      	movne	r3, r2
 801f696:	9302      	str	r3, [sp, #8]
 801f698:	ab16      	add	r3, sp, #88	; 0x58
 801f69a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f69c:	f7f5 ff08 	bl	80154b0 <rcutils_format_string_limit>
 801f6a0:	4606      	mov	r6, r0
 801f6a2:	e7d6      	b.n	801f652 <rcl_expand_topic_name+0x23a>
 801f6a4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801f6a8:	4650      	mov	r0, sl
 801f6aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f6ac:	6014      	str	r4, [r2, #0]
 801f6ae:	250a      	movs	r5, #10
 801f6b0:	4798      	blx	r3
 801f6b2:	e702      	b.n	801f4ba <rcl_expand_topic_name+0xa2>
 801f6b4:	2300      	movs	r3, #0
 801f6b6:	461e      	mov	r6, r3
 801f6b8:	e7cc      	b.n	801f654 <rcl_expand_topic_name+0x23c>
 801f6ba:	bf00      	nop
 801f6bc:	08025e10 	.word	0x08025e10
 801f6c0:	08025e18 	.word	0x08025e18
 801f6c4:	08025e20 	.word	0x08025e20
 801f6c8:	08025e08 	.word	0x08025e08
 801f6cc:	08025790 	.word	0x08025790
 801f6d0:	08025190 	.word	0x08025190
 801f6d4:	08025188 	.word	0x08025188

0801f6d8 <rcl_get_default_topic_name_substitutions>:
 801f6d8:	2800      	cmp	r0, #0
 801f6da:	bf0c      	ite	eq
 801f6dc:	200b      	moveq	r0, #11
 801f6de:	2000      	movne	r0, #0
 801f6e0:	4770      	bx	lr
 801f6e2:	bf00      	nop

0801f6e4 <rcl_validate_topic_name>:
 801f6e4:	2800      	cmp	r0, #0
 801f6e6:	f000 8089 	beq.w	801f7fc <rcl_validate_topic_name+0x118>
 801f6ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6ee:	460e      	mov	r6, r1
 801f6f0:	2900      	cmp	r1, #0
 801f6f2:	f000 8085 	beq.w	801f800 <rcl_validate_topic_name+0x11c>
 801f6f6:	4604      	mov	r4, r0
 801f6f8:	4617      	mov	r7, r2
 801f6fa:	f7e0 fe01 	bl	8000300 <strlen>
 801f6fe:	b1b0      	cbz	r0, 801f72e <rcl_validate_topic_name+0x4a>
 801f700:	f894 e000 	ldrb.w	lr, [r4]
 801f704:	f8df c160 	ldr.w	ip, [pc, #352]	; 801f868 <rcl_validate_topic_name+0x184>
 801f708:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801f70c:	f013 0304 	ands.w	r3, r3, #4
 801f710:	d139      	bne.n	801f786 <rcl_validate_topic_name+0xa2>
 801f712:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801f716:	f814 2008 	ldrb.w	r2, [r4, r8]
 801f71a:	2a2f      	cmp	r2, #47	; 0x2f
 801f71c:	d10f      	bne.n	801f73e <rcl_validate_topic_name+0x5a>
 801f71e:	2202      	movs	r2, #2
 801f720:	6032      	str	r2, [r6, #0]
 801f722:	b3a7      	cbz	r7, 801f78e <rcl_validate_topic_name+0xaa>
 801f724:	4618      	mov	r0, r3
 801f726:	f8c7 8000 	str.w	r8, [r7]
 801f72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f72e:	2301      	movs	r3, #1
 801f730:	6033      	str	r3, [r6, #0]
 801f732:	b367      	cbz	r7, 801f78e <rcl_validate_topic_name+0xaa>
 801f734:	2300      	movs	r3, #0
 801f736:	4618      	mov	r0, r3
 801f738:	603b      	str	r3, [r7, #0]
 801f73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f73e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801f742:	461d      	mov	r5, r3
 801f744:	4619      	mov	r1, r3
 801f746:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f74a:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801f74e:	f1b9 0f09 	cmp.w	r9, #9
 801f752:	d91f      	bls.n	801f794 <rcl_validate_topic_name+0xb0>
 801f754:	f022 0920 	bic.w	r9, r2, #32
 801f758:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801f75c:	f1b9 0f19 	cmp.w	r9, #25
 801f760:	d918      	bls.n	801f794 <rcl_validate_topic_name+0xb0>
 801f762:	2a5f      	cmp	r2, #95	; 0x5f
 801f764:	d024      	beq.n	801f7b0 <rcl_validate_topic_name+0xcc>
 801f766:	2a2f      	cmp	r2, #47	; 0x2f
 801f768:	d058      	beq.n	801f81c <rcl_validate_topic_name+0x138>
 801f76a:	2a7e      	cmp	r2, #126	; 0x7e
 801f76c:	d04a      	beq.n	801f804 <rcl_validate_topic_name+0x120>
 801f76e:	2a7b      	cmp	r2, #123	; 0x7b
 801f770:	d05b      	beq.n	801f82a <rcl_validate_topic_name+0x146>
 801f772:	2a7d      	cmp	r2, #125	; 0x7d
 801f774:	d169      	bne.n	801f84a <rcl_validate_topic_name+0x166>
 801f776:	2d00      	cmp	r5, #0
 801f778:	d15c      	bne.n	801f834 <rcl_validate_topic_name+0x150>
 801f77a:	2305      	movs	r3, #5
 801f77c:	6033      	str	r3, [r6, #0]
 801f77e:	b137      	cbz	r7, 801f78e <rcl_validate_topic_name+0xaa>
 801f780:	2000      	movs	r0, #0
 801f782:	6039      	str	r1, [r7, #0]
 801f784:	e7d9      	b.n	801f73a <rcl_validate_topic_name+0x56>
 801f786:	2304      	movs	r3, #4
 801f788:	6033      	str	r3, [r6, #0]
 801f78a:	2f00      	cmp	r7, #0
 801f78c:	d1d2      	bne.n	801f734 <rcl_validate_topic_name+0x50>
 801f78e:	2000      	movs	r0, #0
 801f790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f794:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f798:	0752      	lsls	r2, r2, #29
 801f79a:	d509      	bpl.n	801f7b0 <rcl_validate_topic_name+0xcc>
 801f79c:	2900      	cmp	r1, #0
 801f79e:	bf0c      	ite	eq
 801f7a0:	2200      	moveq	r2, #0
 801f7a2:	f005 0201 	andne.w	r2, r5, #1
 801f7a6:	b11a      	cbz	r2, 801f7b0 <rcl_validate_topic_name+0xcc>
 801f7a8:	1e4d      	subs	r5, r1, #1
 801f7aa:	429d      	cmp	r5, r3
 801f7ac:	d031      	beq.n	801f812 <rcl_validate_topic_name+0x12e>
 801f7ae:	4615      	mov	r5, r2
 801f7b0:	3101      	adds	r1, #1
 801f7b2:	4288      	cmp	r0, r1
 801f7b4:	d1c7      	bne.n	801f746 <rcl_validate_topic_name+0x62>
 801f7b6:	2d00      	cmp	r5, #0
 801f7b8:	d142      	bne.n	801f840 <rcl_validate_topic_name+0x15c>
 801f7ba:	4628      	mov	r0, r5
 801f7bc:	2301      	movs	r3, #1
 801f7be:	e00c      	b.n	801f7da <rcl_validate_topic_name+0xf6>
 801f7c0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801f7c4:	d101      	bne.n	801f7ca <rcl_validate_topic_name+0xe6>
 801f7c6:	2801      	cmp	r0, #1
 801f7c8:	d047      	beq.n	801f85a <rcl_validate_topic_name+0x176>
 801f7ca:	1c5a      	adds	r2, r3, #1
 801f7cc:	428b      	cmp	r3, r1
 801f7ce:	f100 0001 	add.w	r0, r0, #1
 801f7d2:	f104 0401 	add.w	r4, r4, #1
 801f7d6:	4613      	mov	r3, r2
 801f7d8:	d22e      	bcs.n	801f838 <rcl_validate_topic_name+0x154>
 801f7da:	4580      	cmp	r8, r0
 801f7dc:	d0f5      	beq.n	801f7ca <rcl_validate_topic_name+0xe6>
 801f7de:	7822      	ldrb	r2, [r4, #0]
 801f7e0:	2a2f      	cmp	r2, #47	; 0x2f
 801f7e2:	d1ed      	bne.n	801f7c0 <rcl_validate_topic_name+0xdc>
 801f7e4:	7862      	ldrb	r2, [r4, #1]
 801f7e6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f7ea:	0752      	lsls	r2, r2, #29
 801f7ec:	d5ed      	bpl.n	801f7ca <rcl_validate_topic_name+0xe6>
 801f7ee:	2204      	movs	r2, #4
 801f7f0:	6032      	str	r2, [r6, #0]
 801f7f2:	2f00      	cmp	r7, #0
 801f7f4:	d0cb      	beq.n	801f78e <rcl_validate_topic_name+0xaa>
 801f7f6:	2000      	movs	r0, #0
 801f7f8:	603b      	str	r3, [r7, #0]
 801f7fa:	e79e      	b.n	801f73a <rcl_validate_topic_name+0x56>
 801f7fc:	200b      	movs	r0, #11
 801f7fe:	4770      	bx	lr
 801f800:	200b      	movs	r0, #11
 801f802:	e79a      	b.n	801f73a <rcl_validate_topic_name+0x56>
 801f804:	2900      	cmp	r1, #0
 801f806:	d0d3      	beq.n	801f7b0 <rcl_validate_topic_name+0xcc>
 801f808:	2306      	movs	r3, #6
 801f80a:	6033      	str	r3, [r6, #0]
 801f80c:	2f00      	cmp	r7, #0
 801f80e:	d1b7      	bne.n	801f780 <rcl_validate_topic_name+0x9c>
 801f810:	e7bd      	b.n	801f78e <rcl_validate_topic_name+0xaa>
 801f812:	2309      	movs	r3, #9
 801f814:	6033      	str	r3, [r6, #0]
 801f816:	2f00      	cmp	r7, #0
 801f818:	d1b2      	bne.n	801f780 <rcl_validate_topic_name+0x9c>
 801f81a:	e7b8      	b.n	801f78e <rcl_validate_topic_name+0xaa>
 801f81c:	2d00      	cmp	r5, #0
 801f81e:	d0c7      	beq.n	801f7b0 <rcl_validate_topic_name+0xcc>
 801f820:	2308      	movs	r3, #8
 801f822:	6033      	str	r3, [r6, #0]
 801f824:	2f00      	cmp	r7, #0
 801f826:	d1ab      	bne.n	801f780 <rcl_validate_topic_name+0x9c>
 801f828:	e7b1      	b.n	801f78e <rcl_validate_topic_name+0xaa>
 801f82a:	2d00      	cmp	r5, #0
 801f82c:	d1f8      	bne.n	801f820 <rcl_validate_topic_name+0x13c>
 801f82e:	460b      	mov	r3, r1
 801f830:	2501      	movs	r5, #1
 801f832:	e7bd      	b.n	801f7b0 <rcl_validate_topic_name+0xcc>
 801f834:	2500      	movs	r5, #0
 801f836:	e7bb      	b.n	801f7b0 <rcl_validate_topic_name+0xcc>
 801f838:	2300      	movs	r3, #0
 801f83a:	4618      	mov	r0, r3
 801f83c:	6033      	str	r3, [r6, #0]
 801f83e:	e77c      	b.n	801f73a <rcl_validate_topic_name+0x56>
 801f840:	2205      	movs	r2, #5
 801f842:	6032      	str	r2, [r6, #0]
 801f844:	2f00      	cmp	r7, #0
 801f846:	d1d6      	bne.n	801f7f6 <rcl_validate_topic_name+0x112>
 801f848:	e7a1      	b.n	801f78e <rcl_validate_topic_name+0xaa>
 801f84a:	2d00      	cmp	r5, #0
 801f84c:	bf14      	ite	ne
 801f84e:	2308      	movne	r3, #8
 801f850:	2303      	moveq	r3, #3
 801f852:	6033      	str	r3, [r6, #0]
 801f854:	2f00      	cmp	r7, #0
 801f856:	d193      	bne.n	801f780 <rcl_validate_topic_name+0x9c>
 801f858:	e799      	b.n	801f78e <rcl_validate_topic_name+0xaa>
 801f85a:	2307      	movs	r3, #7
 801f85c:	6033      	str	r3, [r6, #0]
 801f85e:	2f00      	cmp	r7, #0
 801f860:	d095      	beq.n	801f78e <rcl_validate_topic_name+0xaa>
 801f862:	2301      	movs	r3, #1
 801f864:	e7c7      	b.n	801f7f6 <rcl_validate_topic_name+0x112>
 801f866:	bf00      	nop
 801f868:	08025e9c 	.word	0x08025e9c

0801f86c <calloc>:
 801f86c:	4b02      	ldr	r3, [pc, #8]	; (801f878 <calloc+0xc>)
 801f86e:	460a      	mov	r2, r1
 801f870:	4601      	mov	r1, r0
 801f872:	6818      	ldr	r0, [r3, #0]
 801f874:	f000 b802 	b.w	801f87c <_calloc_r>
 801f878:	2000099c 	.word	0x2000099c

0801f87c <_calloc_r>:
 801f87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f87e:	fba1 2402 	umull	r2, r4, r1, r2
 801f882:	b94c      	cbnz	r4, 801f898 <_calloc_r+0x1c>
 801f884:	4611      	mov	r1, r2
 801f886:	9201      	str	r2, [sp, #4]
 801f888:	f000 f898 	bl	801f9bc <_malloc_r>
 801f88c:	9a01      	ldr	r2, [sp, #4]
 801f88e:	4605      	mov	r5, r0
 801f890:	b930      	cbnz	r0, 801f8a0 <_calloc_r+0x24>
 801f892:	4628      	mov	r0, r5
 801f894:	b003      	add	sp, #12
 801f896:	bd30      	pop	{r4, r5, pc}
 801f898:	220c      	movs	r2, #12
 801f89a:	6002      	str	r2, [r0, #0]
 801f89c:	2500      	movs	r5, #0
 801f89e:	e7f8      	b.n	801f892 <_calloc_r+0x16>
 801f8a0:	4621      	mov	r1, r4
 801f8a2:	f001 fc3f 	bl	8021124 <memset>
 801f8a6:	e7f4      	b.n	801f892 <_calloc_r+0x16>

0801f8a8 <exit>:
 801f8a8:	b508      	push	{r3, lr}
 801f8aa:	4b06      	ldr	r3, [pc, #24]	; (801f8c4 <exit+0x1c>)
 801f8ac:	4604      	mov	r4, r0
 801f8ae:	b113      	cbz	r3, 801f8b6 <exit+0xe>
 801f8b0:	2100      	movs	r1, #0
 801f8b2:	f3af 8000 	nop.w
 801f8b6:	4b04      	ldr	r3, [pc, #16]	; (801f8c8 <exit+0x20>)
 801f8b8:	681b      	ldr	r3, [r3, #0]
 801f8ba:	b103      	cbz	r3, 801f8be <exit+0x16>
 801f8bc:	4798      	blx	r3
 801f8be:	4620      	mov	r0, r4
 801f8c0:	f7e3 ffb2 	bl	8003828 <_exit>
 801f8c4:	00000000 	.word	0x00000000
 801f8c8:	200170bc 	.word	0x200170bc

0801f8cc <getenv>:
 801f8cc:	b507      	push	{r0, r1, r2, lr}
 801f8ce:	4b04      	ldr	r3, [pc, #16]	; (801f8e0 <getenv+0x14>)
 801f8d0:	4601      	mov	r1, r0
 801f8d2:	aa01      	add	r2, sp, #4
 801f8d4:	6818      	ldr	r0, [r3, #0]
 801f8d6:	f000 f805 	bl	801f8e4 <_findenv_r>
 801f8da:	b003      	add	sp, #12
 801f8dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801f8e0:	2000099c 	.word	0x2000099c

0801f8e4 <_findenv_r>:
 801f8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f958 <_findenv_r+0x74>
 801f8ec:	4607      	mov	r7, r0
 801f8ee:	4689      	mov	r9, r1
 801f8f0:	4616      	mov	r6, r2
 801f8f2:	f002 fb0d 	bl	8021f10 <__env_lock>
 801f8f6:	f8da 4000 	ldr.w	r4, [sl]
 801f8fa:	b134      	cbz	r4, 801f90a <_findenv_r+0x26>
 801f8fc:	464b      	mov	r3, r9
 801f8fe:	4698      	mov	r8, r3
 801f900:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f904:	b13a      	cbz	r2, 801f916 <_findenv_r+0x32>
 801f906:	2a3d      	cmp	r2, #61	; 0x3d
 801f908:	d1f9      	bne.n	801f8fe <_findenv_r+0x1a>
 801f90a:	4638      	mov	r0, r7
 801f90c:	f002 fb06 	bl	8021f1c <__env_unlock>
 801f910:	2000      	movs	r0, #0
 801f912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f916:	eba8 0809 	sub.w	r8, r8, r9
 801f91a:	46a3      	mov	fp, r4
 801f91c:	f854 0b04 	ldr.w	r0, [r4], #4
 801f920:	2800      	cmp	r0, #0
 801f922:	d0f2      	beq.n	801f90a <_findenv_r+0x26>
 801f924:	4642      	mov	r2, r8
 801f926:	4649      	mov	r1, r9
 801f928:	f001 fc11 	bl	802114e <strncmp>
 801f92c:	2800      	cmp	r0, #0
 801f92e:	d1f4      	bne.n	801f91a <_findenv_r+0x36>
 801f930:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f934:	eb03 0508 	add.w	r5, r3, r8
 801f938:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f93c:	2b3d      	cmp	r3, #61	; 0x3d
 801f93e:	d1ec      	bne.n	801f91a <_findenv_r+0x36>
 801f940:	f8da 3000 	ldr.w	r3, [sl]
 801f944:	ebab 0303 	sub.w	r3, fp, r3
 801f948:	109b      	asrs	r3, r3, #2
 801f94a:	4638      	mov	r0, r7
 801f94c:	6033      	str	r3, [r6, #0]
 801f94e:	f002 fae5 	bl	8021f1c <__env_unlock>
 801f952:	1c68      	adds	r0, r5, #1
 801f954:	e7dd      	b.n	801f912 <_findenv_r+0x2e>
 801f956:	bf00      	nop
 801f958:	20000000 	.word	0x20000000

0801f95c <malloc>:
 801f95c:	4b02      	ldr	r3, [pc, #8]	; (801f968 <malloc+0xc>)
 801f95e:	4601      	mov	r1, r0
 801f960:	6818      	ldr	r0, [r3, #0]
 801f962:	f000 b82b 	b.w	801f9bc <_malloc_r>
 801f966:	bf00      	nop
 801f968:	2000099c 	.word	0x2000099c

0801f96c <free>:
 801f96c:	4b02      	ldr	r3, [pc, #8]	; (801f978 <free+0xc>)
 801f96e:	4601      	mov	r1, r0
 801f970:	6818      	ldr	r0, [r3, #0]
 801f972:	f002 bad9 	b.w	8021f28 <_free_r>
 801f976:	bf00      	nop
 801f978:	2000099c 	.word	0x2000099c

0801f97c <sbrk_aligned>:
 801f97c:	b570      	push	{r4, r5, r6, lr}
 801f97e:	4e0e      	ldr	r6, [pc, #56]	; (801f9b8 <sbrk_aligned+0x3c>)
 801f980:	460c      	mov	r4, r1
 801f982:	6831      	ldr	r1, [r6, #0]
 801f984:	4605      	mov	r5, r0
 801f986:	b911      	cbnz	r1, 801f98e <sbrk_aligned+0x12>
 801f988:	f001 fc42 	bl	8021210 <_sbrk_r>
 801f98c:	6030      	str	r0, [r6, #0]
 801f98e:	4621      	mov	r1, r4
 801f990:	4628      	mov	r0, r5
 801f992:	f001 fc3d 	bl	8021210 <_sbrk_r>
 801f996:	1c43      	adds	r3, r0, #1
 801f998:	d00a      	beq.n	801f9b0 <sbrk_aligned+0x34>
 801f99a:	1cc4      	adds	r4, r0, #3
 801f99c:	f024 0403 	bic.w	r4, r4, #3
 801f9a0:	42a0      	cmp	r0, r4
 801f9a2:	d007      	beq.n	801f9b4 <sbrk_aligned+0x38>
 801f9a4:	1a21      	subs	r1, r4, r0
 801f9a6:	4628      	mov	r0, r5
 801f9a8:	f001 fc32 	bl	8021210 <_sbrk_r>
 801f9ac:	3001      	adds	r0, #1
 801f9ae:	d101      	bne.n	801f9b4 <sbrk_aligned+0x38>
 801f9b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f9b4:	4620      	mov	r0, r4
 801f9b6:	bd70      	pop	{r4, r5, r6, pc}
 801f9b8:	20016f80 	.word	0x20016f80

0801f9bc <_malloc_r>:
 801f9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f9c0:	1ccd      	adds	r5, r1, #3
 801f9c2:	f025 0503 	bic.w	r5, r5, #3
 801f9c6:	3508      	adds	r5, #8
 801f9c8:	2d0c      	cmp	r5, #12
 801f9ca:	bf38      	it	cc
 801f9cc:	250c      	movcc	r5, #12
 801f9ce:	2d00      	cmp	r5, #0
 801f9d0:	4607      	mov	r7, r0
 801f9d2:	db01      	blt.n	801f9d8 <_malloc_r+0x1c>
 801f9d4:	42a9      	cmp	r1, r5
 801f9d6:	d905      	bls.n	801f9e4 <_malloc_r+0x28>
 801f9d8:	230c      	movs	r3, #12
 801f9da:	603b      	str	r3, [r7, #0]
 801f9dc:	2600      	movs	r6, #0
 801f9de:	4630      	mov	r0, r6
 801f9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801fab8 <_malloc_r+0xfc>
 801f9e8:	f000 f868 	bl	801fabc <__malloc_lock>
 801f9ec:	f8d8 3000 	ldr.w	r3, [r8]
 801f9f0:	461c      	mov	r4, r3
 801f9f2:	bb5c      	cbnz	r4, 801fa4c <_malloc_r+0x90>
 801f9f4:	4629      	mov	r1, r5
 801f9f6:	4638      	mov	r0, r7
 801f9f8:	f7ff ffc0 	bl	801f97c <sbrk_aligned>
 801f9fc:	1c43      	adds	r3, r0, #1
 801f9fe:	4604      	mov	r4, r0
 801fa00:	d155      	bne.n	801faae <_malloc_r+0xf2>
 801fa02:	f8d8 4000 	ldr.w	r4, [r8]
 801fa06:	4626      	mov	r6, r4
 801fa08:	2e00      	cmp	r6, #0
 801fa0a:	d145      	bne.n	801fa98 <_malloc_r+0xdc>
 801fa0c:	2c00      	cmp	r4, #0
 801fa0e:	d048      	beq.n	801faa2 <_malloc_r+0xe6>
 801fa10:	6823      	ldr	r3, [r4, #0]
 801fa12:	4631      	mov	r1, r6
 801fa14:	4638      	mov	r0, r7
 801fa16:	eb04 0903 	add.w	r9, r4, r3
 801fa1a:	f001 fbf9 	bl	8021210 <_sbrk_r>
 801fa1e:	4581      	cmp	r9, r0
 801fa20:	d13f      	bne.n	801faa2 <_malloc_r+0xe6>
 801fa22:	6821      	ldr	r1, [r4, #0]
 801fa24:	1a6d      	subs	r5, r5, r1
 801fa26:	4629      	mov	r1, r5
 801fa28:	4638      	mov	r0, r7
 801fa2a:	f7ff ffa7 	bl	801f97c <sbrk_aligned>
 801fa2e:	3001      	adds	r0, #1
 801fa30:	d037      	beq.n	801faa2 <_malloc_r+0xe6>
 801fa32:	6823      	ldr	r3, [r4, #0]
 801fa34:	442b      	add	r3, r5
 801fa36:	6023      	str	r3, [r4, #0]
 801fa38:	f8d8 3000 	ldr.w	r3, [r8]
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d038      	beq.n	801fab2 <_malloc_r+0xf6>
 801fa40:	685a      	ldr	r2, [r3, #4]
 801fa42:	42a2      	cmp	r2, r4
 801fa44:	d12b      	bne.n	801fa9e <_malloc_r+0xe2>
 801fa46:	2200      	movs	r2, #0
 801fa48:	605a      	str	r2, [r3, #4]
 801fa4a:	e00f      	b.n	801fa6c <_malloc_r+0xb0>
 801fa4c:	6822      	ldr	r2, [r4, #0]
 801fa4e:	1b52      	subs	r2, r2, r5
 801fa50:	d41f      	bmi.n	801fa92 <_malloc_r+0xd6>
 801fa52:	2a0b      	cmp	r2, #11
 801fa54:	d917      	bls.n	801fa86 <_malloc_r+0xca>
 801fa56:	1961      	adds	r1, r4, r5
 801fa58:	42a3      	cmp	r3, r4
 801fa5a:	6025      	str	r5, [r4, #0]
 801fa5c:	bf18      	it	ne
 801fa5e:	6059      	strne	r1, [r3, #4]
 801fa60:	6863      	ldr	r3, [r4, #4]
 801fa62:	bf08      	it	eq
 801fa64:	f8c8 1000 	streq.w	r1, [r8]
 801fa68:	5162      	str	r2, [r4, r5]
 801fa6a:	604b      	str	r3, [r1, #4]
 801fa6c:	4638      	mov	r0, r7
 801fa6e:	f104 060b 	add.w	r6, r4, #11
 801fa72:	f000 f829 	bl	801fac8 <__malloc_unlock>
 801fa76:	f026 0607 	bic.w	r6, r6, #7
 801fa7a:	1d23      	adds	r3, r4, #4
 801fa7c:	1af2      	subs	r2, r6, r3
 801fa7e:	d0ae      	beq.n	801f9de <_malloc_r+0x22>
 801fa80:	1b9b      	subs	r3, r3, r6
 801fa82:	50a3      	str	r3, [r4, r2]
 801fa84:	e7ab      	b.n	801f9de <_malloc_r+0x22>
 801fa86:	42a3      	cmp	r3, r4
 801fa88:	6862      	ldr	r2, [r4, #4]
 801fa8a:	d1dd      	bne.n	801fa48 <_malloc_r+0x8c>
 801fa8c:	f8c8 2000 	str.w	r2, [r8]
 801fa90:	e7ec      	b.n	801fa6c <_malloc_r+0xb0>
 801fa92:	4623      	mov	r3, r4
 801fa94:	6864      	ldr	r4, [r4, #4]
 801fa96:	e7ac      	b.n	801f9f2 <_malloc_r+0x36>
 801fa98:	4634      	mov	r4, r6
 801fa9a:	6876      	ldr	r6, [r6, #4]
 801fa9c:	e7b4      	b.n	801fa08 <_malloc_r+0x4c>
 801fa9e:	4613      	mov	r3, r2
 801faa0:	e7cc      	b.n	801fa3c <_malloc_r+0x80>
 801faa2:	230c      	movs	r3, #12
 801faa4:	603b      	str	r3, [r7, #0]
 801faa6:	4638      	mov	r0, r7
 801faa8:	f000 f80e 	bl	801fac8 <__malloc_unlock>
 801faac:	e797      	b.n	801f9de <_malloc_r+0x22>
 801faae:	6025      	str	r5, [r4, #0]
 801fab0:	e7dc      	b.n	801fa6c <_malloc_r+0xb0>
 801fab2:	605b      	str	r3, [r3, #4]
 801fab4:	deff      	udf	#255	; 0xff
 801fab6:	bf00      	nop
 801fab8:	20016f7c 	.word	0x20016f7c

0801fabc <__malloc_lock>:
 801fabc:	4801      	ldr	r0, [pc, #4]	; (801fac4 <__malloc_lock+0x8>)
 801fabe:	f001 bbf4 	b.w	80212aa <__retarget_lock_acquire_recursive>
 801fac2:	bf00      	nop
 801fac4:	200170c5 	.word	0x200170c5

0801fac8 <__malloc_unlock>:
 801fac8:	4801      	ldr	r0, [pc, #4]	; (801fad0 <__malloc_unlock+0x8>)
 801faca:	f001 bbef 	b.w	80212ac <__retarget_lock_release_recursive>
 801face:	bf00      	nop
 801fad0:	200170c5 	.word	0x200170c5

0801fad4 <srand>:
 801fad4:	b538      	push	{r3, r4, r5, lr}
 801fad6:	4b10      	ldr	r3, [pc, #64]	; (801fb18 <srand+0x44>)
 801fad8:	681d      	ldr	r5, [r3, #0]
 801fada:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801fadc:	4604      	mov	r4, r0
 801fade:	b9b3      	cbnz	r3, 801fb0e <srand+0x3a>
 801fae0:	2018      	movs	r0, #24
 801fae2:	f7ff ff3b 	bl	801f95c <malloc>
 801fae6:	4602      	mov	r2, r0
 801fae8:	6328      	str	r0, [r5, #48]	; 0x30
 801faea:	b920      	cbnz	r0, 801faf6 <srand+0x22>
 801faec:	4b0b      	ldr	r3, [pc, #44]	; (801fb1c <srand+0x48>)
 801faee:	480c      	ldr	r0, [pc, #48]	; (801fb20 <srand+0x4c>)
 801faf0:	2146      	movs	r1, #70	; 0x46
 801faf2:	f001 fbf9 	bl	80212e8 <__assert_func>
 801faf6:	490b      	ldr	r1, [pc, #44]	; (801fb24 <srand+0x50>)
 801faf8:	4b0b      	ldr	r3, [pc, #44]	; (801fb28 <srand+0x54>)
 801fafa:	e9c0 1300 	strd	r1, r3, [r0]
 801fafe:	4b0b      	ldr	r3, [pc, #44]	; (801fb2c <srand+0x58>)
 801fb00:	6083      	str	r3, [r0, #8]
 801fb02:	230b      	movs	r3, #11
 801fb04:	8183      	strh	r3, [r0, #12]
 801fb06:	2100      	movs	r1, #0
 801fb08:	2001      	movs	r0, #1
 801fb0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fb0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801fb10:	2200      	movs	r2, #0
 801fb12:	611c      	str	r4, [r3, #16]
 801fb14:	615a      	str	r2, [r3, #20]
 801fb16:	bd38      	pop	{r3, r4, r5, pc}
 801fb18:	2000099c 	.word	0x2000099c
 801fb1c:	08025e2c 	.word	0x08025e2c
 801fb20:	08025e43 	.word	0x08025e43
 801fb24:	abcd330e 	.word	0xabcd330e
 801fb28:	e66d1234 	.word	0xe66d1234
 801fb2c:	0005deec 	.word	0x0005deec

0801fb30 <rand>:
 801fb30:	4b16      	ldr	r3, [pc, #88]	; (801fb8c <rand+0x5c>)
 801fb32:	b510      	push	{r4, lr}
 801fb34:	681c      	ldr	r4, [r3, #0]
 801fb36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fb38:	b9b3      	cbnz	r3, 801fb68 <rand+0x38>
 801fb3a:	2018      	movs	r0, #24
 801fb3c:	f7ff ff0e 	bl	801f95c <malloc>
 801fb40:	4602      	mov	r2, r0
 801fb42:	6320      	str	r0, [r4, #48]	; 0x30
 801fb44:	b920      	cbnz	r0, 801fb50 <rand+0x20>
 801fb46:	4b12      	ldr	r3, [pc, #72]	; (801fb90 <rand+0x60>)
 801fb48:	4812      	ldr	r0, [pc, #72]	; (801fb94 <rand+0x64>)
 801fb4a:	2152      	movs	r1, #82	; 0x52
 801fb4c:	f001 fbcc 	bl	80212e8 <__assert_func>
 801fb50:	4911      	ldr	r1, [pc, #68]	; (801fb98 <rand+0x68>)
 801fb52:	4b12      	ldr	r3, [pc, #72]	; (801fb9c <rand+0x6c>)
 801fb54:	e9c0 1300 	strd	r1, r3, [r0]
 801fb58:	4b11      	ldr	r3, [pc, #68]	; (801fba0 <rand+0x70>)
 801fb5a:	6083      	str	r3, [r0, #8]
 801fb5c:	230b      	movs	r3, #11
 801fb5e:	8183      	strh	r3, [r0, #12]
 801fb60:	2100      	movs	r1, #0
 801fb62:	2001      	movs	r0, #1
 801fb64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fb68:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fb6a:	480e      	ldr	r0, [pc, #56]	; (801fba4 <rand+0x74>)
 801fb6c:	690b      	ldr	r3, [r1, #16]
 801fb6e:	694c      	ldr	r4, [r1, #20]
 801fb70:	4a0d      	ldr	r2, [pc, #52]	; (801fba8 <rand+0x78>)
 801fb72:	4358      	muls	r0, r3
 801fb74:	fb02 0004 	mla	r0, r2, r4, r0
 801fb78:	fba3 3202 	umull	r3, r2, r3, r2
 801fb7c:	3301      	adds	r3, #1
 801fb7e:	eb40 0002 	adc.w	r0, r0, r2
 801fb82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801fb86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fb8a:	bd10      	pop	{r4, pc}
 801fb8c:	2000099c 	.word	0x2000099c
 801fb90:	08025e2c 	.word	0x08025e2c
 801fb94:	08025e43 	.word	0x08025e43
 801fb98:	abcd330e 	.word	0xabcd330e
 801fb9c:	e66d1234 	.word	0xe66d1234
 801fba0:	0005deec 	.word	0x0005deec
 801fba4:	5851f42d 	.word	0x5851f42d
 801fba8:	4c957f2d 	.word	0x4c957f2d

0801fbac <realloc>:
 801fbac:	4b02      	ldr	r3, [pc, #8]	; (801fbb8 <realloc+0xc>)
 801fbae:	460a      	mov	r2, r1
 801fbb0:	4601      	mov	r1, r0
 801fbb2:	6818      	ldr	r0, [r3, #0]
 801fbb4:	f000 b802 	b.w	801fbbc <_realloc_r>
 801fbb8:	2000099c 	.word	0x2000099c

0801fbbc <_realloc_r>:
 801fbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbc0:	4680      	mov	r8, r0
 801fbc2:	4614      	mov	r4, r2
 801fbc4:	460e      	mov	r6, r1
 801fbc6:	b921      	cbnz	r1, 801fbd2 <_realloc_r+0x16>
 801fbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fbcc:	4611      	mov	r1, r2
 801fbce:	f7ff bef5 	b.w	801f9bc <_malloc_r>
 801fbd2:	b92a      	cbnz	r2, 801fbe0 <_realloc_r+0x24>
 801fbd4:	f002 f9a8 	bl	8021f28 <_free_r>
 801fbd8:	4625      	mov	r5, r4
 801fbda:	4628      	mov	r0, r5
 801fbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbe0:	f002 fe98 	bl	8022914 <_malloc_usable_size_r>
 801fbe4:	4284      	cmp	r4, r0
 801fbe6:	4607      	mov	r7, r0
 801fbe8:	d802      	bhi.n	801fbf0 <_realloc_r+0x34>
 801fbea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fbee:	d812      	bhi.n	801fc16 <_realloc_r+0x5a>
 801fbf0:	4621      	mov	r1, r4
 801fbf2:	4640      	mov	r0, r8
 801fbf4:	f7ff fee2 	bl	801f9bc <_malloc_r>
 801fbf8:	4605      	mov	r5, r0
 801fbfa:	2800      	cmp	r0, #0
 801fbfc:	d0ed      	beq.n	801fbda <_realloc_r+0x1e>
 801fbfe:	42bc      	cmp	r4, r7
 801fc00:	4622      	mov	r2, r4
 801fc02:	4631      	mov	r1, r6
 801fc04:	bf28      	it	cs
 801fc06:	463a      	movcs	r2, r7
 801fc08:	f001 fb59 	bl	80212be <memcpy>
 801fc0c:	4631      	mov	r1, r6
 801fc0e:	4640      	mov	r0, r8
 801fc10:	f002 f98a 	bl	8021f28 <_free_r>
 801fc14:	e7e1      	b.n	801fbda <_realloc_r+0x1e>
 801fc16:	4635      	mov	r5, r6
 801fc18:	e7df      	b.n	801fbda <_realloc_r+0x1e>
	...

0801fc1c <_strtoul_l.constprop.0>:
 801fc1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc20:	4f36      	ldr	r7, [pc, #216]	; (801fcfc <_strtoul_l.constprop.0+0xe0>)
 801fc22:	4686      	mov	lr, r0
 801fc24:	460d      	mov	r5, r1
 801fc26:	4628      	mov	r0, r5
 801fc28:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fc2c:	5d3e      	ldrb	r6, [r7, r4]
 801fc2e:	f016 0608 	ands.w	r6, r6, #8
 801fc32:	d1f8      	bne.n	801fc26 <_strtoul_l.constprop.0+0xa>
 801fc34:	2c2d      	cmp	r4, #45	; 0x2d
 801fc36:	d130      	bne.n	801fc9a <_strtoul_l.constprop.0+0x7e>
 801fc38:	782c      	ldrb	r4, [r5, #0]
 801fc3a:	2601      	movs	r6, #1
 801fc3c:	1c85      	adds	r5, r0, #2
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d057      	beq.n	801fcf2 <_strtoul_l.constprop.0+0xd6>
 801fc42:	2b10      	cmp	r3, #16
 801fc44:	d109      	bne.n	801fc5a <_strtoul_l.constprop.0+0x3e>
 801fc46:	2c30      	cmp	r4, #48	; 0x30
 801fc48:	d107      	bne.n	801fc5a <_strtoul_l.constprop.0+0x3e>
 801fc4a:	7828      	ldrb	r0, [r5, #0]
 801fc4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801fc50:	2858      	cmp	r0, #88	; 0x58
 801fc52:	d149      	bne.n	801fce8 <_strtoul_l.constprop.0+0xcc>
 801fc54:	786c      	ldrb	r4, [r5, #1]
 801fc56:	2310      	movs	r3, #16
 801fc58:	3502      	adds	r5, #2
 801fc5a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801fc5e:	2700      	movs	r7, #0
 801fc60:	fbb8 f8f3 	udiv	r8, r8, r3
 801fc64:	fb03 f908 	mul.w	r9, r3, r8
 801fc68:	ea6f 0909 	mvn.w	r9, r9
 801fc6c:	4638      	mov	r0, r7
 801fc6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801fc72:	f1bc 0f09 	cmp.w	ip, #9
 801fc76:	d815      	bhi.n	801fca4 <_strtoul_l.constprop.0+0x88>
 801fc78:	4664      	mov	r4, ip
 801fc7a:	42a3      	cmp	r3, r4
 801fc7c:	dd23      	ble.n	801fcc6 <_strtoul_l.constprop.0+0xaa>
 801fc7e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801fc82:	d007      	beq.n	801fc94 <_strtoul_l.constprop.0+0x78>
 801fc84:	4580      	cmp	r8, r0
 801fc86:	d31b      	bcc.n	801fcc0 <_strtoul_l.constprop.0+0xa4>
 801fc88:	d101      	bne.n	801fc8e <_strtoul_l.constprop.0+0x72>
 801fc8a:	45a1      	cmp	r9, r4
 801fc8c:	db18      	blt.n	801fcc0 <_strtoul_l.constprop.0+0xa4>
 801fc8e:	fb00 4003 	mla	r0, r0, r3, r4
 801fc92:	2701      	movs	r7, #1
 801fc94:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fc98:	e7e9      	b.n	801fc6e <_strtoul_l.constprop.0+0x52>
 801fc9a:	2c2b      	cmp	r4, #43	; 0x2b
 801fc9c:	bf04      	itt	eq
 801fc9e:	782c      	ldrbeq	r4, [r5, #0]
 801fca0:	1c85      	addeq	r5, r0, #2
 801fca2:	e7cc      	b.n	801fc3e <_strtoul_l.constprop.0+0x22>
 801fca4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801fca8:	f1bc 0f19 	cmp.w	ip, #25
 801fcac:	d801      	bhi.n	801fcb2 <_strtoul_l.constprop.0+0x96>
 801fcae:	3c37      	subs	r4, #55	; 0x37
 801fcb0:	e7e3      	b.n	801fc7a <_strtoul_l.constprop.0+0x5e>
 801fcb2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801fcb6:	f1bc 0f19 	cmp.w	ip, #25
 801fcba:	d804      	bhi.n	801fcc6 <_strtoul_l.constprop.0+0xaa>
 801fcbc:	3c57      	subs	r4, #87	; 0x57
 801fcbe:	e7dc      	b.n	801fc7a <_strtoul_l.constprop.0+0x5e>
 801fcc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fcc4:	e7e6      	b.n	801fc94 <_strtoul_l.constprop.0+0x78>
 801fcc6:	1c7b      	adds	r3, r7, #1
 801fcc8:	d106      	bne.n	801fcd8 <_strtoul_l.constprop.0+0xbc>
 801fcca:	2322      	movs	r3, #34	; 0x22
 801fccc:	f8ce 3000 	str.w	r3, [lr]
 801fcd0:	4638      	mov	r0, r7
 801fcd2:	b932      	cbnz	r2, 801fce2 <_strtoul_l.constprop.0+0xc6>
 801fcd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fcd8:	b106      	cbz	r6, 801fcdc <_strtoul_l.constprop.0+0xc0>
 801fcda:	4240      	negs	r0, r0
 801fcdc:	2a00      	cmp	r2, #0
 801fcde:	d0f9      	beq.n	801fcd4 <_strtoul_l.constprop.0+0xb8>
 801fce0:	b107      	cbz	r7, 801fce4 <_strtoul_l.constprop.0+0xc8>
 801fce2:	1e69      	subs	r1, r5, #1
 801fce4:	6011      	str	r1, [r2, #0]
 801fce6:	e7f5      	b.n	801fcd4 <_strtoul_l.constprop.0+0xb8>
 801fce8:	2430      	movs	r4, #48	; 0x30
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d1b5      	bne.n	801fc5a <_strtoul_l.constprop.0+0x3e>
 801fcee:	2308      	movs	r3, #8
 801fcf0:	e7b3      	b.n	801fc5a <_strtoul_l.constprop.0+0x3e>
 801fcf2:	2c30      	cmp	r4, #48	; 0x30
 801fcf4:	d0a9      	beq.n	801fc4a <_strtoul_l.constprop.0+0x2e>
 801fcf6:	230a      	movs	r3, #10
 801fcf8:	e7af      	b.n	801fc5a <_strtoul_l.constprop.0+0x3e>
 801fcfa:	bf00      	nop
 801fcfc:	08025e9c 	.word	0x08025e9c

0801fd00 <strtoul>:
 801fd00:	4613      	mov	r3, r2
 801fd02:	460a      	mov	r2, r1
 801fd04:	4601      	mov	r1, r0
 801fd06:	4802      	ldr	r0, [pc, #8]	; (801fd10 <strtoul+0x10>)
 801fd08:	6800      	ldr	r0, [r0, #0]
 801fd0a:	f7ff bf87 	b.w	801fc1c <_strtoul_l.constprop.0>
 801fd0e:	bf00      	nop
 801fd10:	2000099c 	.word	0x2000099c

0801fd14 <__cvt>:
 801fd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd16:	ed2d 8b02 	vpush	{d8}
 801fd1a:	eeb0 8b40 	vmov.f64	d8, d0
 801fd1e:	b085      	sub	sp, #20
 801fd20:	4617      	mov	r7, r2
 801fd22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fd24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fd26:	ee18 2a90 	vmov	r2, s17
 801fd2a:	f025 0520 	bic.w	r5, r5, #32
 801fd2e:	2a00      	cmp	r2, #0
 801fd30:	bfb6      	itet	lt
 801fd32:	222d      	movlt	r2, #45	; 0x2d
 801fd34:	2200      	movge	r2, #0
 801fd36:	eeb1 8b40 	vneglt.f64	d8, d0
 801fd3a:	2d46      	cmp	r5, #70	; 0x46
 801fd3c:	460c      	mov	r4, r1
 801fd3e:	701a      	strb	r2, [r3, #0]
 801fd40:	d004      	beq.n	801fd4c <__cvt+0x38>
 801fd42:	2d45      	cmp	r5, #69	; 0x45
 801fd44:	d100      	bne.n	801fd48 <__cvt+0x34>
 801fd46:	3401      	adds	r4, #1
 801fd48:	2102      	movs	r1, #2
 801fd4a:	e000      	b.n	801fd4e <__cvt+0x3a>
 801fd4c:	2103      	movs	r1, #3
 801fd4e:	ab03      	add	r3, sp, #12
 801fd50:	9301      	str	r3, [sp, #4]
 801fd52:	ab02      	add	r3, sp, #8
 801fd54:	9300      	str	r3, [sp, #0]
 801fd56:	4622      	mov	r2, r4
 801fd58:	4633      	mov	r3, r6
 801fd5a:	eeb0 0b48 	vmov.f64	d0, d8
 801fd5e:	f001 fb6b 	bl	8021438 <_dtoa_r>
 801fd62:	2d47      	cmp	r5, #71	; 0x47
 801fd64:	d101      	bne.n	801fd6a <__cvt+0x56>
 801fd66:	07fb      	lsls	r3, r7, #31
 801fd68:	d51a      	bpl.n	801fda0 <__cvt+0x8c>
 801fd6a:	2d46      	cmp	r5, #70	; 0x46
 801fd6c:	eb00 0204 	add.w	r2, r0, r4
 801fd70:	d10c      	bne.n	801fd8c <__cvt+0x78>
 801fd72:	7803      	ldrb	r3, [r0, #0]
 801fd74:	2b30      	cmp	r3, #48	; 0x30
 801fd76:	d107      	bne.n	801fd88 <__cvt+0x74>
 801fd78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd80:	bf1c      	itt	ne
 801fd82:	f1c4 0401 	rsbne	r4, r4, #1
 801fd86:	6034      	strne	r4, [r6, #0]
 801fd88:	6833      	ldr	r3, [r6, #0]
 801fd8a:	441a      	add	r2, r3
 801fd8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd94:	bf08      	it	eq
 801fd96:	9203      	streq	r2, [sp, #12]
 801fd98:	2130      	movs	r1, #48	; 0x30
 801fd9a:	9b03      	ldr	r3, [sp, #12]
 801fd9c:	4293      	cmp	r3, r2
 801fd9e:	d307      	bcc.n	801fdb0 <__cvt+0x9c>
 801fda0:	9b03      	ldr	r3, [sp, #12]
 801fda2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fda4:	1a1b      	subs	r3, r3, r0
 801fda6:	6013      	str	r3, [r2, #0]
 801fda8:	b005      	add	sp, #20
 801fdaa:	ecbd 8b02 	vpop	{d8}
 801fdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fdb0:	1c5c      	adds	r4, r3, #1
 801fdb2:	9403      	str	r4, [sp, #12]
 801fdb4:	7019      	strb	r1, [r3, #0]
 801fdb6:	e7f0      	b.n	801fd9a <__cvt+0x86>

0801fdb8 <__exponent>:
 801fdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fdba:	4603      	mov	r3, r0
 801fdbc:	2900      	cmp	r1, #0
 801fdbe:	bfb8      	it	lt
 801fdc0:	4249      	neglt	r1, r1
 801fdc2:	f803 2b02 	strb.w	r2, [r3], #2
 801fdc6:	bfb4      	ite	lt
 801fdc8:	222d      	movlt	r2, #45	; 0x2d
 801fdca:	222b      	movge	r2, #43	; 0x2b
 801fdcc:	2909      	cmp	r1, #9
 801fdce:	7042      	strb	r2, [r0, #1]
 801fdd0:	dd2a      	ble.n	801fe28 <__exponent+0x70>
 801fdd2:	f10d 0207 	add.w	r2, sp, #7
 801fdd6:	4617      	mov	r7, r2
 801fdd8:	260a      	movs	r6, #10
 801fdda:	4694      	mov	ip, r2
 801fddc:	fb91 f5f6 	sdiv	r5, r1, r6
 801fde0:	fb06 1415 	mls	r4, r6, r5, r1
 801fde4:	3430      	adds	r4, #48	; 0x30
 801fde6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801fdea:	460c      	mov	r4, r1
 801fdec:	2c63      	cmp	r4, #99	; 0x63
 801fdee:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801fdf2:	4629      	mov	r1, r5
 801fdf4:	dcf1      	bgt.n	801fdda <__exponent+0x22>
 801fdf6:	3130      	adds	r1, #48	; 0x30
 801fdf8:	f1ac 0402 	sub.w	r4, ip, #2
 801fdfc:	f802 1c01 	strb.w	r1, [r2, #-1]
 801fe00:	1c41      	adds	r1, r0, #1
 801fe02:	4622      	mov	r2, r4
 801fe04:	42ba      	cmp	r2, r7
 801fe06:	d30a      	bcc.n	801fe1e <__exponent+0x66>
 801fe08:	f10d 0209 	add.w	r2, sp, #9
 801fe0c:	eba2 020c 	sub.w	r2, r2, ip
 801fe10:	42bc      	cmp	r4, r7
 801fe12:	bf88      	it	hi
 801fe14:	2200      	movhi	r2, #0
 801fe16:	4413      	add	r3, r2
 801fe18:	1a18      	subs	r0, r3, r0
 801fe1a:	b003      	add	sp, #12
 801fe1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801fe22:	f801 5f01 	strb.w	r5, [r1, #1]!
 801fe26:	e7ed      	b.n	801fe04 <__exponent+0x4c>
 801fe28:	2330      	movs	r3, #48	; 0x30
 801fe2a:	3130      	adds	r1, #48	; 0x30
 801fe2c:	7083      	strb	r3, [r0, #2]
 801fe2e:	70c1      	strb	r1, [r0, #3]
 801fe30:	1d03      	adds	r3, r0, #4
 801fe32:	e7f1      	b.n	801fe18 <__exponent+0x60>
 801fe34:	0000      	movs	r0, r0
	...

0801fe38 <_printf_float>:
 801fe38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe3c:	b08b      	sub	sp, #44	; 0x2c
 801fe3e:	460c      	mov	r4, r1
 801fe40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801fe44:	4616      	mov	r6, r2
 801fe46:	461f      	mov	r7, r3
 801fe48:	4605      	mov	r5, r0
 801fe4a:	f001 f9a9 	bl	80211a0 <_localeconv_r>
 801fe4e:	f8d0 b000 	ldr.w	fp, [r0]
 801fe52:	4658      	mov	r0, fp
 801fe54:	f7e0 fa54 	bl	8000300 <strlen>
 801fe58:	2300      	movs	r3, #0
 801fe5a:	9308      	str	r3, [sp, #32]
 801fe5c:	f8d8 3000 	ldr.w	r3, [r8]
 801fe60:	f894 9018 	ldrb.w	r9, [r4, #24]
 801fe64:	6822      	ldr	r2, [r4, #0]
 801fe66:	3307      	adds	r3, #7
 801fe68:	f023 0307 	bic.w	r3, r3, #7
 801fe6c:	f103 0108 	add.w	r1, r3, #8
 801fe70:	f8c8 1000 	str.w	r1, [r8]
 801fe74:	ed93 0b00 	vldr	d0, [r3]
 801fe78:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80200d8 <_printf_float+0x2a0>
 801fe7c:	eeb0 7bc0 	vabs.f64	d7, d0
 801fe80:	eeb4 7b46 	vcmp.f64	d7, d6
 801fe84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe88:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801fe8c:	4682      	mov	sl, r0
 801fe8e:	dd24      	ble.n	801feda <_printf_float+0xa2>
 801fe90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801fe94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe98:	d502      	bpl.n	801fea0 <_printf_float+0x68>
 801fe9a:	232d      	movs	r3, #45	; 0x2d
 801fe9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fea0:	498f      	ldr	r1, [pc, #572]	; (80200e0 <_printf_float+0x2a8>)
 801fea2:	4b90      	ldr	r3, [pc, #576]	; (80200e4 <_printf_float+0x2ac>)
 801fea4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801fea8:	bf94      	ite	ls
 801feaa:	4688      	movls	r8, r1
 801feac:	4698      	movhi	r8, r3
 801feae:	2303      	movs	r3, #3
 801feb0:	6123      	str	r3, [r4, #16]
 801feb2:	f022 0204 	bic.w	r2, r2, #4
 801feb6:	2300      	movs	r3, #0
 801feb8:	6022      	str	r2, [r4, #0]
 801feba:	9304      	str	r3, [sp, #16]
 801febc:	9700      	str	r7, [sp, #0]
 801febe:	4633      	mov	r3, r6
 801fec0:	aa09      	add	r2, sp, #36	; 0x24
 801fec2:	4621      	mov	r1, r4
 801fec4:	4628      	mov	r0, r5
 801fec6:	f000 f9d1 	bl	802026c <_printf_common>
 801feca:	3001      	adds	r0, #1
 801fecc:	f040 808a 	bne.w	801ffe4 <_printf_float+0x1ac>
 801fed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fed4:	b00b      	add	sp, #44	; 0x2c
 801fed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feda:	eeb4 0b40 	vcmp.f64	d0, d0
 801fede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fee2:	d709      	bvc.n	801fef8 <_printf_float+0xc0>
 801fee4:	ee10 3a90 	vmov	r3, s1
 801fee8:	2b00      	cmp	r3, #0
 801feea:	bfbc      	itt	lt
 801feec:	232d      	movlt	r3, #45	; 0x2d
 801feee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801fef2:	497d      	ldr	r1, [pc, #500]	; (80200e8 <_printf_float+0x2b0>)
 801fef4:	4b7d      	ldr	r3, [pc, #500]	; (80200ec <_printf_float+0x2b4>)
 801fef6:	e7d5      	b.n	801fea4 <_printf_float+0x6c>
 801fef8:	6863      	ldr	r3, [r4, #4]
 801fefa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801fefe:	9104      	str	r1, [sp, #16]
 801ff00:	1c59      	adds	r1, r3, #1
 801ff02:	d13c      	bne.n	801ff7e <_printf_float+0x146>
 801ff04:	2306      	movs	r3, #6
 801ff06:	6063      	str	r3, [r4, #4]
 801ff08:	2300      	movs	r3, #0
 801ff0a:	9303      	str	r3, [sp, #12]
 801ff0c:	ab08      	add	r3, sp, #32
 801ff0e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801ff12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ff16:	ab07      	add	r3, sp, #28
 801ff18:	6861      	ldr	r1, [r4, #4]
 801ff1a:	9300      	str	r3, [sp, #0]
 801ff1c:	6022      	str	r2, [r4, #0]
 801ff1e:	f10d 031b 	add.w	r3, sp, #27
 801ff22:	4628      	mov	r0, r5
 801ff24:	f7ff fef6 	bl	801fd14 <__cvt>
 801ff28:	9b04      	ldr	r3, [sp, #16]
 801ff2a:	9907      	ldr	r1, [sp, #28]
 801ff2c:	2b47      	cmp	r3, #71	; 0x47
 801ff2e:	4680      	mov	r8, r0
 801ff30:	d108      	bne.n	801ff44 <_printf_float+0x10c>
 801ff32:	1cc8      	adds	r0, r1, #3
 801ff34:	db02      	blt.n	801ff3c <_printf_float+0x104>
 801ff36:	6863      	ldr	r3, [r4, #4]
 801ff38:	4299      	cmp	r1, r3
 801ff3a:	dd41      	ble.n	801ffc0 <_printf_float+0x188>
 801ff3c:	f1a9 0902 	sub.w	r9, r9, #2
 801ff40:	fa5f f989 	uxtb.w	r9, r9
 801ff44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ff48:	d820      	bhi.n	801ff8c <_printf_float+0x154>
 801ff4a:	3901      	subs	r1, #1
 801ff4c:	464a      	mov	r2, r9
 801ff4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ff52:	9107      	str	r1, [sp, #28]
 801ff54:	f7ff ff30 	bl	801fdb8 <__exponent>
 801ff58:	9a08      	ldr	r2, [sp, #32]
 801ff5a:	9004      	str	r0, [sp, #16]
 801ff5c:	1813      	adds	r3, r2, r0
 801ff5e:	2a01      	cmp	r2, #1
 801ff60:	6123      	str	r3, [r4, #16]
 801ff62:	dc02      	bgt.n	801ff6a <_printf_float+0x132>
 801ff64:	6822      	ldr	r2, [r4, #0]
 801ff66:	07d2      	lsls	r2, r2, #31
 801ff68:	d501      	bpl.n	801ff6e <_printf_float+0x136>
 801ff6a:	3301      	adds	r3, #1
 801ff6c:	6123      	str	r3, [r4, #16]
 801ff6e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d0a2      	beq.n	801febc <_printf_float+0x84>
 801ff76:	232d      	movs	r3, #45	; 0x2d
 801ff78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ff7c:	e79e      	b.n	801febc <_printf_float+0x84>
 801ff7e:	9904      	ldr	r1, [sp, #16]
 801ff80:	2947      	cmp	r1, #71	; 0x47
 801ff82:	d1c1      	bne.n	801ff08 <_printf_float+0xd0>
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	d1bf      	bne.n	801ff08 <_printf_float+0xd0>
 801ff88:	2301      	movs	r3, #1
 801ff8a:	e7bc      	b.n	801ff06 <_printf_float+0xce>
 801ff8c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ff90:	d118      	bne.n	801ffc4 <_printf_float+0x18c>
 801ff92:	2900      	cmp	r1, #0
 801ff94:	6863      	ldr	r3, [r4, #4]
 801ff96:	dd0b      	ble.n	801ffb0 <_printf_float+0x178>
 801ff98:	6121      	str	r1, [r4, #16]
 801ff9a:	b913      	cbnz	r3, 801ffa2 <_printf_float+0x16a>
 801ff9c:	6822      	ldr	r2, [r4, #0]
 801ff9e:	07d0      	lsls	r0, r2, #31
 801ffa0:	d502      	bpl.n	801ffa8 <_printf_float+0x170>
 801ffa2:	3301      	adds	r3, #1
 801ffa4:	440b      	add	r3, r1
 801ffa6:	6123      	str	r3, [r4, #16]
 801ffa8:	2300      	movs	r3, #0
 801ffaa:	65a1      	str	r1, [r4, #88]	; 0x58
 801ffac:	9304      	str	r3, [sp, #16]
 801ffae:	e7de      	b.n	801ff6e <_printf_float+0x136>
 801ffb0:	b913      	cbnz	r3, 801ffb8 <_printf_float+0x180>
 801ffb2:	6822      	ldr	r2, [r4, #0]
 801ffb4:	07d2      	lsls	r2, r2, #31
 801ffb6:	d501      	bpl.n	801ffbc <_printf_float+0x184>
 801ffb8:	3302      	adds	r3, #2
 801ffba:	e7f4      	b.n	801ffa6 <_printf_float+0x16e>
 801ffbc:	2301      	movs	r3, #1
 801ffbe:	e7f2      	b.n	801ffa6 <_printf_float+0x16e>
 801ffc0:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ffc4:	9b08      	ldr	r3, [sp, #32]
 801ffc6:	4299      	cmp	r1, r3
 801ffc8:	db05      	blt.n	801ffd6 <_printf_float+0x19e>
 801ffca:	6823      	ldr	r3, [r4, #0]
 801ffcc:	6121      	str	r1, [r4, #16]
 801ffce:	07d8      	lsls	r0, r3, #31
 801ffd0:	d5ea      	bpl.n	801ffa8 <_printf_float+0x170>
 801ffd2:	1c4b      	adds	r3, r1, #1
 801ffd4:	e7e7      	b.n	801ffa6 <_printf_float+0x16e>
 801ffd6:	2900      	cmp	r1, #0
 801ffd8:	bfd4      	ite	le
 801ffda:	f1c1 0202 	rsble	r2, r1, #2
 801ffde:	2201      	movgt	r2, #1
 801ffe0:	4413      	add	r3, r2
 801ffe2:	e7e0      	b.n	801ffa6 <_printf_float+0x16e>
 801ffe4:	6823      	ldr	r3, [r4, #0]
 801ffe6:	055a      	lsls	r2, r3, #21
 801ffe8:	d407      	bmi.n	801fffa <_printf_float+0x1c2>
 801ffea:	6923      	ldr	r3, [r4, #16]
 801ffec:	4642      	mov	r2, r8
 801ffee:	4631      	mov	r1, r6
 801fff0:	4628      	mov	r0, r5
 801fff2:	47b8      	blx	r7
 801fff4:	3001      	adds	r0, #1
 801fff6:	d12a      	bne.n	802004e <_printf_float+0x216>
 801fff8:	e76a      	b.n	801fed0 <_printf_float+0x98>
 801fffa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801fffe:	f240 80e0 	bls.w	80201c2 <_printf_float+0x38a>
 8020002:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8020006:	eeb5 7b40 	vcmp.f64	d7, #0.0
 802000a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802000e:	d133      	bne.n	8020078 <_printf_float+0x240>
 8020010:	4a37      	ldr	r2, [pc, #220]	; (80200f0 <_printf_float+0x2b8>)
 8020012:	2301      	movs	r3, #1
 8020014:	4631      	mov	r1, r6
 8020016:	4628      	mov	r0, r5
 8020018:	47b8      	blx	r7
 802001a:	3001      	adds	r0, #1
 802001c:	f43f af58 	beq.w	801fed0 <_printf_float+0x98>
 8020020:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020024:	429a      	cmp	r2, r3
 8020026:	db02      	blt.n	802002e <_printf_float+0x1f6>
 8020028:	6823      	ldr	r3, [r4, #0]
 802002a:	07d8      	lsls	r0, r3, #31
 802002c:	d50f      	bpl.n	802004e <_printf_float+0x216>
 802002e:	4653      	mov	r3, sl
 8020030:	465a      	mov	r2, fp
 8020032:	4631      	mov	r1, r6
 8020034:	4628      	mov	r0, r5
 8020036:	47b8      	blx	r7
 8020038:	3001      	adds	r0, #1
 802003a:	f43f af49 	beq.w	801fed0 <_printf_float+0x98>
 802003e:	f04f 0800 	mov.w	r8, #0
 8020042:	f104 091a 	add.w	r9, r4, #26
 8020046:	9b08      	ldr	r3, [sp, #32]
 8020048:	3b01      	subs	r3, #1
 802004a:	4543      	cmp	r3, r8
 802004c:	dc09      	bgt.n	8020062 <_printf_float+0x22a>
 802004e:	6823      	ldr	r3, [r4, #0]
 8020050:	079b      	lsls	r3, r3, #30
 8020052:	f100 8106 	bmi.w	8020262 <_printf_float+0x42a>
 8020056:	68e0      	ldr	r0, [r4, #12]
 8020058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802005a:	4298      	cmp	r0, r3
 802005c:	bfb8      	it	lt
 802005e:	4618      	movlt	r0, r3
 8020060:	e738      	b.n	801fed4 <_printf_float+0x9c>
 8020062:	2301      	movs	r3, #1
 8020064:	464a      	mov	r2, r9
 8020066:	4631      	mov	r1, r6
 8020068:	4628      	mov	r0, r5
 802006a:	47b8      	blx	r7
 802006c:	3001      	adds	r0, #1
 802006e:	f43f af2f 	beq.w	801fed0 <_printf_float+0x98>
 8020072:	f108 0801 	add.w	r8, r8, #1
 8020076:	e7e6      	b.n	8020046 <_printf_float+0x20e>
 8020078:	9b07      	ldr	r3, [sp, #28]
 802007a:	2b00      	cmp	r3, #0
 802007c:	dc3a      	bgt.n	80200f4 <_printf_float+0x2bc>
 802007e:	4a1c      	ldr	r2, [pc, #112]	; (80200f0 <_printf_float+0x2b8>)
 8020080:	2301      	movs	r3, #1
 8020082:	4631      	mov	r1, r6
 8020084:	4628      	mov	r0, r5
 8020086:	47b8      	blx	r7
 8020088:	3001      	adds	r0, #1
 802008a:	f43f af21 	beq.w	801fed0 <_printf_float+0x98>
 802008e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8020092:	4313      	orrs	r3, r2
 8020094:	d102      	bne.n	802009c <_printf_float+0x264>
 8020096:	6823      	ldr	r3, [r4, #0]
 8020098:	07d9      	lsls	r1, r3, #31
 802009a:	d5d8      	bpl.n	802004e <_printf_float+0x216>
 802009c:	4653      	mov	r3, sl
 802009e:	465a      	mov	r2, fp
 80200a0:	4631      	mov	r1, r6
 80200a2:	4628      	mov	r0, r5
 80200a4:	47b8      	blx	r7
 80200a6:	3001      	adds	r0, #1
 80200a8:	f43f af12 	beq.w	801fed0 <_printf_float+0x98>
 80200ac:	f04f 0900 	mov.w	r9, #0
 80200b0:	f104 0a1a 	add.w	sl, r4, #26
 80200b4:	9b07      	ldr	r3, [sp, #28]
 80200b6:	425b      	negs	r3, r3
 80200b8:	454b      	cmp	r3, r9
 80200ba:	dc01      	bgt.n	80200c0 <_printf_float+0x288>
 80200bc:	9b08      	ldr	r3, [sp, #32]
 80200be:	e795      	b.n	801ffec <_printf_float+0x1b4>
 80200c0:	2301      	movs	r3, #1
 80200c2:	4652      	mov	r2, sl
 80200c4:	4631      	mov	r1, r6
 80200c6:	4628      	mov	r0, r5
 80200c8:	47b8      	blx	r7
 80200ca:	3001      	adds	r0, #1
 80200cc:	f43f af00 	beq.w	801fed0 <_printf_float+0x98>
 80200d0:	f109 0901 	add.w	r9, r9, #1
 80200d4:	e7ee      	b.n	80200b4 <_printf_float+0x27c>
 80200d6:	bf00      	nop
 80200d8:	ffffffff 	.word	0xffffffff
 80200dc:	7fefffff 	.word	0x7fefffff
 80200e0:	08025f9c 	.word	0x08025f9c
 80200e4:	08025fa0 	.word	0x08025fa0
 80200e8:	08025fa4 	.word	0x08025fa4
 80200ec:	08025fa8 	.word	0x08025fa8
 80200f0:	08025fac 	.word	0x08025fac
 80200f4:	9a08      	ldr	r2, [sp, #32]
 80200f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80200f8:	429a      	cmp	r2, r3
 80200fa:	bfa8      	it	ge
 80200fc:	461a      	movge	r2, r3
 80200fe:	2a00      	cmp	r2, #0
 8020100:	4691      	mov	r9, r2
 8020102:	dc38      	bgt.n	8020176 <_printf_float+0x33e>
 8020104:	2300      	movs	r3, #0
 8020106:	9305      	str	r3, [sp, #20]
 8020108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802010c:	f104 021a 	add.w	r2, r4, #26
 8020110:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020112:	9905      	ldr	r1, [sp, #20]
 8020114:	9304      	str	r3, [sp, #16]
 8020116:	eba3 0309 	sub.w	r3, r3, r9
 802011a:	428b      	cmp	r3, r1
 802011c:	dc33      	bgt.n	8020186 <_printf_float+0x34e>
 802011e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020122:	429a      	cmp	r2, r3
 8020124:	db3c      	blt.n	80201a0 <_printf_float+0x368>
 8020126:	6823      	ldr	r3, [r4, #0]
 8020128:	07da      	lsls	r2, r3, #31
 802012a:	d439      	bmi.n	80201a0 <_printf_float+0x368>
 802012c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8020130:	eba2 0903 	sub.w	r9, r2, r3
 8020134:	9b04      	ldr	r3, [sp, #16]
 8020136:	1ad2      	subs	r2, r2, r3
 8020138:	4591      	cmp	r9, r2
 802013a:	bfa8      	it	ge
 802013c:	4691      	movge	r9, r2
 802013e:	f1b9 0f00 	cmp.w	r9, #0
 8020142:	dc35      	bgt.n	80201b0 <_printf_float+0x378>
 8020144:	f04f 0800 	mov.w	r8, #0
 8020148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802014c:	f104 0a1a 	add.w	sl, r4, #26
 8020150:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8020154:	1a9b      	subs	r3, r3, r2
 8020156:	eba3 0309 	sub.w	r3, r3, r9
 802015a:	4543      	cmp	r3, r8
 802015c:	f77f af77 	ble.w	802004e <_printf_float+0x216>
 8020160:	2301      	movs	r3, #1
 8020162:	4652      	mov	r2, sl
 8020164:	4631      	mov	r1, r6
 8020166:	4628      	mov	r0, r5
 8020168:	47b8      	blx	r7
 802016a:	3001      	adds	r0, #1
 802016c:	f43f aeb0 	beq.w	801fed0 <_printf_float+0x98>
 8020170:	f108 0801 	add.w	r8, r8, #1
 8020174:	e7ec      	b.n	8020150 <_printf_float+0x318>
 8020176:	4613      	mov	r3, r2
 8020178:	4631      	mov	r1, r6
 802017a:	4642      	mov	r2, r8
 802017c:	4628      	mov	r0, r5
 802017e:	47b8      	blx	r7
 8020180:	3001      	adds	r0, #1
 8020182:	d1bf      	bne.n	8020104 <_printf_float+0x2cc>
 8020184:	e6a4      	b.n	801fed0 <_printf_float+0x98>
 8020186:	2301      	movs	r3, #1
 8020188:	4631      	mov	r1, r6
 802018a:	4628      	mov	r0, r5
 802018c:	9204      	str	r2, [sp, #16]
 802018e:	47b8      	blx	r7
 8020190:	3001      	adds	r0, #1
 8020192:	f43f ae9d 	beq.w	801fed0 <_printf_float+0x98>
 8020196:	9b05      	ldr	r3, [sp, #20]
 8020198:	9a04      	ldr	r2, [sp, #16]
 802019a:	3301      	adds	r3, #1
 802019c:	9305      	str	r3, [sp, #20]
 802019e:	e7b7      	b.n	8020110 <_printf_float+0x2d8>
 80201a0:	4653      	mov	r3, sl
 80201a2:	465a      	mov	r2, fp
 80201a4:	4631      	mov	r1, r6
 80201a6:	4628      	mov	r0, r5
 80201a8:	47b8      	blx	r7
 80201aa:	3001      	adds	r0, #1
 80201ac:	d1be      	bne.n	802012c <_printf_float+0x2f4>
 80201ae:	e68f      	b.n	801fed0 <_printf_float+0x98>
 80201b0:	9a04      	ldr	r2, [sp, #16]
 80201b2:	464b      	mov	r3, r9
 80201b4:	4442      	add	r2, r8
 80201b6:	4631      	mov	r1, r6
 80201b8:	4628      	mov	r0, r5
 80201ba:	47b8      	blx	r7
 80201bc:	3001      	adds	r0, #1
 80201be:	d1c1      	bne.n	8020144 <_printf_float+0x30c>
 80201c0:	e686      	b.n	801fed0 <_printf_float+0x98>
 80201c2:	9a08      	ldr	r2, [sp, #32]
 80201c4:	2a01      	cmp	r2, #1
 80201c6:	dc01      	bgt.n	80201cc <_printf_float+0x394>
 80201c8:	07db      	lsls	r3, r3, #31
 80201ca:	d537      	bpl.n	802023c <_printf_float+0x404>
 80201cc:	2301      	movs	r3, #1
 80201ce:	4642      	mov	r2, r8
 80201d0:	4631      	mov	r1, r6
 80201d2:	4628      	mov	r0, r5
 80201d4:	47b8      	blx	r7
 80201d6:	3001      	adds	r0, #1
 80201d8:	f43f ae7a 	beq.w	801fed0 <_printf_float+0x98>
 80201dc:	4653      	mov	r3, sl
 80201de:	465a      	mov	r2, fp
 80201e0:	4631      	mov	r1, r6
 80201e2:	4628      	mov	r0, r5
 80201e4:	47b8      	blx	r7
 80201e6:	3001      	adds	r0, #1
 80201e8:	f43f ae72 	beq.w	801fed0 <_printf_float+0x98>
 80201ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80201f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80201f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80201f8:	9b08      	ldr	r3, [sp, #32]
 80201fa:	d01a      	beq.n	8020232 <_printf_float+0x3fa>
 80201fc:	3b01      	subs	r3, #1
 80201fe:	f108 0201 	add.w	r2, r8, #1
 8020202:	4631      	mov	r1, r6
 8020204:	4628      	mov	r0, r5
 8020206:	47b8      	blx	r7
 8020208:	3001      	adds	r0, #1
 802020a:	d10e      	bne.n	802022a <_printf_float+0x3f2>
 802020c:	e660      	b.n	801fed0 <_printf_float+0x98>
 802020e:	2301      	movs	r3, #1
 8020210:	464a      	mov	r2, r9
 8020212:	4631      	mov	r1, r6
 8020214:	4628      	mov	r0, r5
 8020216:	47b8      	blx	r7
 8020218:	3001      	adds	r0, #1
 802021a:	f43f ae59 	beq.w	801fed0 <_printf_float+0x98>
 802021e:	f108 0801 	add.w	r8, r8, #1
 8020222:	9b08      	ldr	r3, [sp, #32]
 8020224:	3b01      	subs	r3, #1
 8020226:	4543      	cmp	r3, r8
 8020228:	dcf1      	bgt.n	802020e <_printf_float+0x3d6>
 802022a:	9b04      	ldr	r3, [sp, #16]
 802022c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020230:	e6dd      	b.n	801ffee <_printf_float+0x1b6>
 8020232:	f04f 0800 	mov.w	r8, #0
 8020236:	f104 091a 	add.w	r9, r4, #26
 802023a:	e7f2      	b.n	8020222 <_printf_float+0x3ea>
 802023c:	2301      	movs	r3, #1
 802023e:	4642      	mov	r2, r8
 8020240:	e7df      	b.n	8020202 <_printf_float+0x3ca>
 8020242:	2301      	movs	r3, #1
 8020244:	464a      	mov	r2, r9
 8020246:	4631      	mov	r1, r6
 8020248:	4628      	mov	r0, r5
 802024a:	47b8      	blx	r7
 802024c:	3001      	adds	r0, #1
 802024e:	f43f ae3f 	beq.w	801fed0 <_printf_float+0x98>
 8020252:	f108 0801 	add.w	r8, r8, #1
 8020256:	68e3      	ldr	r3, [r4, #12]
 8020258:	9909      	ldr	r1, [sp, #36]	; 0x24
 802025a:	1a5b      	subs	r3, r3, r1
 802025c:	4543      	cmp	r3, r8
 802025e:	dcf0      	bgt.n	8020242 <_printf_float+0x40a>
 8020260:	e6f9      	b.n	8020056 <_printf_float+0x21e>
 8020262:	f04f 0800 	mov.w	r8, #0
 8020266:	f104 0919 	add.w	r9, r4, #25
 802026a:	e7f4      	b.n	8020256 <_printf_float+0x41e>

0802026c <_printf_common>:
 802026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020270:	4616      	mov	r6, r2
 8020272:	4699      	mov	r9, r3
 8020274:	688a      	ldr	r2, [r1, #8]
 8020276:	690b      	ldr	r3, [r1, #16]
 8020278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802027c:	4293      	cmp	r3, r2
 802027e:	bfb8      	it	lt
 8020280:	4613      	movlt	r3, r2
 8020282:	6033      	str	r3, [r6, #0]
 8020284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020288:	4607      	mov	r7, r0
 802028a:	460c      	mov	r4, r1
 802028c:	b10a      	cbz	r2, 8020292 <_printf_common+0x26>
 802028e:	3301      	adds	r3, #1
 8020290:	6033      	str	r3, [r6, #0]
 8020292:	6823      	ldr	r3, [r4, #0]
 8020294:	0699      	lsls	r1, r3, #26
 8020296:	bf42      	ittt	mi
 8020298:	6833      	ldrmi	r3, [r6, #0]
 802029a:	3302      	addmi	r3, #2
 802029c:	6033      	strmi	r3, [r6, #0]
 802029e:	6825      	ldr	r5, [r4, #0]
 80202a0:	f015 0506 	ands.w	r5, r5, #6
 80202a4:	d106      	bne.n	80202b4 <_printf_common+0x48>
 80202a6:	f104 0a19 	add.w	sl, r4, #25
 80202aa:	68e3      	ldr	r3, [r4, #12]
 80202ac:	6832      	ldr	r2, [r6, #0]
 80202ae:	1a9b      	subs	r3, r3, r2
 80202b0:	42ab      	cmp	r3, r5
 80202b2:	dc26      	bgt.n	8020302 <_printf_common+0x96>
 80202b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80202b8:	1e13      	subs	r3, r2, #0
 80202ba:	6822      	ldr	r2, [r4, #0]
 80202bc:	bf18      	it	ne
 80202be:	2301      	movne	r3, #1
 80202c0:	0692      	lsls	r2, r2, #26
 80202c2:	d42b      	bmi.n	802031c <_printf_common+0xb0>
 80202c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80202c8:	4649      	mov	r1, r9
 80202ca:	4638      	mov	r0, r7
 80202cc:	47c0      	blx	r8
 80202ce:	3001      	adds	r0, #1
 80202d0:	d01e      	beq.n	8020310 <_printf_common+0xa4>
 80202d2:	6823      	ldr	r3, [r4, #0]
 80202d4:	6922      	ldr	r2, [r4, #16]
 80202d6:	f003 0306 	and.w	r3, r3, #6
 80202da:	2b04      	cmp	r3, #4
 80202dc:	bf02      	ittt	eq
 80202de:	68e5      	ldreq	r5, [r4, #12]
 80202e0:	6833      	ldreq	r3, [r6, #0]
 80202e2:	1aed      	subeq	r5, r5, r3
 80202e4:	68a3      	ldr	r3, [r4, #8]
 80202e6:	bf0c      	ite	eq
 80202e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80202ec:	2500      	movne	r5, #0
 80202ee:	4293      	cmp	r3, r2
 80202f0:	bfc4      	itt	gt
 80202f2:	1a9b      	subgt	r3, r3, r2
 80202f4:	18ed      	addgt	r5, r5, r3
 80202f6:	2600      	movs	r6, #0
 80202f8:	341a      	adds	r4, #26
 80202fa:	42b5      	cmp	r5, r6
 80202fc:	d11a      	bne.n	8020334 <_printf_common+0xc8>
 80202fe:	2000      	movs	r0, #0
 8020300:	e008      	b.n	8020314 <_printf_common+0xa8>
 8020302:	2301      	movs	r3, #1
 8020304:	4652      	mov	r2, sl
 8020306:	4649      	mov	r1, r9
 8020308:	4638      	mov	r0, r7
 802030a:	47c0      	blx	r8
 802030c:	3001      	adds	r0, #1
 802030e:	d103      	bne.n	8020318 <_printf_common+0xac>
 8020310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020318:	3501      	adds	r5, #1
 802031a:	e7c6      	b.n	80202aa <_printf_common+0x3e>
 802031c:	18e1      	adds	r1, r4, r3
 802031e:	1c5a      	adds	r2, r3, #1
 8020320:	2030      	movs	r0, #48	; 0x30
 8020322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020326:	4422      	add	r2, r4
 8020328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802032c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020330:	3302      	adds	r3, #2
 8020332:	e7c7      	b.n	80202c4 <_printf_common+0x58>
 8020334:	2301      	movs	r3, #1
 8020336:	4622      	mov	r2, r4
 8020338:	4649      	mov	r1, r9
 802033a:	4638      	mov	r0, r7
 802033c:	47c0      	blx	r8
 802033e:	3001      	adds	r0, #1
 8020340:	d0e6      	beq.n	8020310 <_printf_common+0xa4>
 8020342:	3601      	adds	r6, #1
 8020344:	e7d9      	b.n	80202fa <_printf_common+0x8e>
	...

08020348 <_printf_i>:
 8020348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802034c:	7e0f      	ldrb	r7, [r1, #24]
 802034e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020350:	2f78      	cmp	r7, #120	; 0x78
 8020352:	4691      	mov	r9, r2
 8020354:	4680      	mov	r8, r0
 8020356:	460c      	mov	r4, r1
 8020358:	469a      	mov	sl, r3
 802035a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802035e:	d807      	bhi.n	8020370 <_printf_i+0x28>
 8020360:	2f62      	cmp	r7, #98	; 0x62
 8020362:	d80a      	bhi.n	802037a <_printf_i+0x32>
 8020364:	2f00      	cmp	r7, #0
 8020366:	f000 80d4 	beq.w	8020512 <_printf_i+0x1ca>
 802036a:	2f58      	cmp	r7, #88	; 0x58
 802036c:	f000 80c0 	beq.w	80204f0 <_printf_i+0x1a8>
 8020370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020378:	e03a      	b.n	80203f0 <_printf_i+0xa8>
 802037a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802037e:	2b15      	cmp	r3, #21
 8020380:	d8f6      	bhi.n	8020370 <_printf_i+0x28>
 8020382:	a101      	add	r1, pc, #4	; (adr r1, 8020388 <_printf_i+0x40>)
 8020384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020388:	080203e1 	.word	0x080203e1
 802038c:	080203f5 	.word	0x080203f5
 8020390:	08020371 	.word	0x08020371
 8020394:	08020371 	.word	0x08020371
 8020398:	08020371 	.word	0x08020371
 802039c:	08020371 	.word	0x08020371
 80203a0:	080203f5 	.word	0x080203f5
 80203a4:	08020371 	.word	0x08020371
 80203a8:	08020371 	.word	0x08020371
 80203ac:	08020371 	.word	0x08020371
 80203b0:	08020371 	.word	0x08020371
 80203b4:	080204f9 	.word	0x080204f9
 80203b8:	08020421 	.word	0x08020421
 80203bc:	080204b3 	.word	0x080204b3
 80203c0:	08020371 	.word	0x08020371
 80203c4:	08020371 	.word	0x08020371
 80203c8:	0802051b 	.word	0x0802051b
 80203cc:	08020371 	.word	0x08020371
 80203d0:	08020421 	.word	0x08020421
 80203d4:	08020371 	.word	0x08020371
 80203d8:	08020371 	.word	0x08020371
 80203dc:	080204bb 	.word	0x080204bb
 80203e0:	682b      	ldr	r3, [r5, #0]
 80203e2:	1d1a      	adds	r2, r3, #4
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	602a      	str	r2, [r5, #0]
 80203e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80203ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80203f0:	2301      	movs	r3, #1
 80203f2:	e09f      	b.n	8020534 <_printf_i+0x1ec>
 80203f4:	6820      	ldr	r0, [r4, #0]
 80203f6:	682b      	ldr	r3, [r5, #0]
 80203f8:	0607      	lsls	r7, r0, #24
 80203fa:	f103 0104 	add.w	r1, r3, #4
 80203fe:	6029      	str	r1, [r5, #0]
 8020400:	d501      	bpl.n	8020406 <_printf_i+0xbe>
 8020402:	681e      	ldr	r6, [r3, #0]
 8020404:	e003      	b.n	802040e <_printf_i+0xc6>
 8020406:	0646      	lsls	r6, r0, #25
 8020408:	d5fb      	bpl.n	8020402 <_printf_i+0xba>
 802040a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802040e:	2e00      	cmp	r6, #0
 8020410:	da03      	bge.n	802041a <_printf_i+0xd2>
 8020412:	232d      	movs	r3, #45	; 0x2d
 8020414:	4276      	negs	r6, r6
 8020416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802041a:	485a      	ldr	r0, [pc, #360]	; (8020584 <_printf_i+0x23c>)
 802041c:	230a      	movs	r3, #10
 802041e:	e012      	b.n	8020446 <_printf_i+0xfe>
 8020420:	682b      	ldr	r3, [r5, #0]
 8020422:	6820      	ldr	r0, [r4, #0]
 8020424:	1d19      	adds	r1, r3, #4
 8020426:	6029      	str	r1, [r5, #0]
 8020428:	0605      	lsls	r5, r0, #24
 802042a:	d501      	bpl.n	8020430 <_printf_i+0xe8>
 802042c:	681e      	ldr	r6, [r3, #0]
 802042e:	e002      	b.n	8020436 <_printf_i+0xee>
 8020430:	0641      	lsls	r1, r0, #25
 8020432:	d5fb      	bpl.n	802042c <_printf_i+0xe4>
 8020434:	881e      	ldrh	r6, [r3, #0]
 8020436:	4853      	ldr	r0, [pc, #332]	; (8020584 <_printf_i+0x23c>)
 8020438:	2f6f      	cmp	r7, #111	; 0x6f
 802043a:	bf0c      	ite	eq
 802043c:	2308      	moveq	r3, #8
 802043e:	230a      	movne	r3, #10
 8020440:	2100      	movs	r1, #0
 8020442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020446:	6865      	ldr	r5, [r4, #4]
 8020448:	60a5      	str	r5, [r4, #8]
 802044a:	2d00      	cmp	r5, #0
 802044c:	bfa2      	ittt	ge
 802044e:	6821      	ldrge	r1, [r4, #0]
 8020450:	f021 0104 	bicge.w	r1, r1, #4
 8020454:	6021      	strge	r1, [r4, #0]
 8020456:	b90e      	cbnz	r6, 802045c <_printf_i+0x114>
 8020458:	2d00      	cmp	r5, #0
 802045a:	d04b      	beq.n	80204f4 <_printf_i+0x1ac>
 802045c:	4615      	mov	r5, r2
 802045e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020462:	fb03 6711 	mls	r7, r3, r1, r6
 8020466:	5dc7      	ldrb	r7, [r0, r7]
 8020468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802046c:	4637      	mov	r7, r6
 802046e:	42bb      	cmp	r3, r7
 8020470:	460e      	mov	r6, r1
 8020472:	d9f4      	bls.n	802045e <_printf_i+0x116>
 8020474:	2b08      	cmp	r3, #8
 8020476:	d10b      	bne.n	8020490 <_printf_i+0x148>
 8020478:	6823      	ldr	r3, [r4, #0]
 802047a:	07de      	lsls	r6, r3, #31
 802047c:	d508      	bpl.n	8020490 <_printf_i+0x148>
 802047e:	6923      	ldr	r3, [r4, #16]
 8020480:	6861      	ldr	r1, [r4, #4]
 8020482:	4299      	cmp	r1, r3
 8020484:	bfde      	ittt	le
 8020486:	2330      	movle	r3, #48	; 0x30
 8020488:	f805 3c01 	strble.w	r3, [r5, #-1]
 802048c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020490:	1b52      	subs	r2, r2, r5
 8020492:	6122      	str	r2, [r4, #16]
 8020494:	f8cd a000 	str.w	sl, [sp]
 8020498:	464b      	mov	r3, r9
 802049a:	aa03      	add	r2, sp, #12
 802049c:	4621      	mov	r1, r4
 802049e:	4640      	mov	r0, r8
 80204a0:	f7ff fee4 	bl	802026c <_printf_common>
 80204a4:	3001      	adds	r0, #1
 80204a6:	d14a      	bne.n	802053e <_printf_i+0x1f6>
 80204a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80204ac:	b004      	add	sp, #16
 80204ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204b2:	6823      	ldr	r3, [r4, #0]
 80204b4:	f043 0320 	orr.w	r3, r3, #32
 80204b8:	6023      	str	r3, [r4, #0]
 80204ba:	4833      	ldr	r0, [pc, #204]	; (8020588 <_printf_i+0x240>)
 80204bc:	2778      	movs	r7, #120	; 0x78
 80204be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80204c2:	6823      	ldr	r3, [r4, #0]
 80204c4:	6829      	ldr	r1, [r5, #0]
 80204c6:	061f      	lsls	r7, r3, #24
 80204c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80204cc:	d402      	bmi.n	80204d4 <_printf_i+0x18c>
 80204ce:	065f      	lsls	r7, r3, #25
 80204d0:	bf48      	it	mi
 80204d2:	b2b6      	uxthmi	r6, r6
 80204d4:	07df      	lsls	r7, r3, #31
 80204d6:	bf48      	it	mi
 80204d8:	f043 0320 	orrmi.w	r3, r3, #32
 80204dc:	6029      	str	r1, [r5, #0]
 80204de:	bf48      	it	mi
 80204e0:	6023      	strmi	r3, [r4, #0]
 80204e2:	b91e      	cbnz	r6, 80204ec <_printf_i+0x1a4>
 80204e4:	6823      	ldr	r3, [r4, #0]
 80204e6:	f023 0320 	bic.w	r3, r3, #32
 80204ea:	6023      	str	r3, [r4, #0]
 80204ec:	2310      	movs	r3, #16
 80204ee:	e7a7      	b.n	8020440 <_printf_i+0xf8>
 80204f0:	4824      	ldr	r0, [pc, #144]	; (8020584 <_printf_i+0x23c>)
 80204f2:	e7e4      	b.n	80204be <_printf_i+0x176>
 80204f4:	4615      	mov	r5, r2
 80204f6:	e7bd      	b.n	8020474 <_printf_i+0x12c>
 80204f8:	682b      	ldr	r3, [r5, #0]
 80204fa:	6826      	ldr	r6, [r4, #0]
 80204fc:	6961      	ldr	r1, [r4, #20]
 80204fe:	1d18      	adds	r0, r3, #4
 8020500:	6028      	str	r0, [r5, #0]
 8020502:	0635      	lsls	r5, r6, #24
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	d501      	bpl.n	802050c <_printf_i+0x1c4>
 8020508:	6019      	str	r1, [r3, #0]
 802050a:	e002      	b.n	8020512 <_printf_i+0x1ca>
 802050c:	0670      	lsls	r0, r6, #25
 802050e:	d5fb      	bpl.n	8020508 <_printf_i+0x1c0>
 8020510:	8019      	strh	r1, [r3, #0]
 8020512:	2300      	movs	r3, #0
 8020514:	6123      	str	r3, [r4, #16]
 8020516:	4615      	mov	r5, r2
 8020518:	e7bc      	b.n	8020494 <_printf_i+0x14c>
 802051a:	682b      	ldr	r3, [r5, #0]
 802051c:	1d1a      	adds	r2, r3, #4
 802051e:	602a      	str	r2, [r5, #0]
 8020520:	681d      	ldr	r5, [r3, #0]
 8020522:	6862      	ldr	r2, [r4, #4]
 8020524:	2100      	movs	r1, #0
 8020526:	4628      	mov	r0, r5
 8020528:	f7df fe9a 	bl	8000260 <memchr>
 802052c:	b108      	cbz	r0, 8020532 <_printf_i+0x1ea>
 802052e:	1b40      	subs	r0, r0, r5
 8020530:	6060      	str	r0, [r4, #4]
 8020532:	6863      	ldr	r3, [r4, #4]
 8020534:	6123      	str	r3, [r4, #16]
 8020536:	2300      	movs	r3, #0
 8020538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802053c:	e7aa      	b.n	8020494 <_printf_i+0x14c>
 802053e:	6923      	ldr	r3, [r4, #16]
 8020540:	462a      	mov	r2, r5
 8020542:	4649      	mov	r1, r9
 8020544:	4640      	mov	r0, r8
 8020546:	47d0      	blx	sl
 8020548:	3001      	adds	r0, #1
 802054a:	d0ad      	beq.n	80204a8 <_printf_i+0x160>
 802054c:	6823      	ldr	r3, [r4, #0]
 802054e:	079b      	lsls	r3, r3, #30
 8020550:	d413      	bmi.n	802057a <_printf_i+0x232>
 8020552:	68e0      	ldr	r0, [r4, #12]
 8020554:	9b03      	ldr	r3, [sp, #12]
 8020556:	4298      	cmp	r0, r3
 8020558:	bfb8      	it	lt
 802055a:	4618      	movlt	r0, r3
 802055c:	e7a6      	b.n	80204ac <_printf_i+0x164>
 802055e:	2301      	movs	r3, #1
 8020560:	4632      	mov	r2, r6
 8020562:	4649      	mov	r1, r9
 8020564:	4640      	mov	r0, r8
 8020566:	47d0      	blx	sl
 8020568:	3001      	adds	r0, #1
 802056a:	d09d      	beq.n	80204a8 <_printf_i+0x160>
 802056c:	3501      	adds	r5, #1
 802056e:	68e3      	ldr	r3, [r4, #12]
 8020570:	9903      	ldr	r1, [sp, #12]
 8020572:	1a5b      	subs	r3, r3, r1
 8020574:	42ab      	cmp	r3, r5
 8020576:	dcf2      	bgt.n	802055e <_printf_i+0x216>
 8020578:	e7eb      	b.n	8020552 <_printf_i+0x20a>
 802057a:	2500      	movs	r5, #0
 802057c:	f104 0619 	add.w	r6, r4, #25
 8020580:	e7f5      	b.n	802056e <_printf_i+0x226>
 8020582:	bf00      	nop
 8020584:	08025fae 	.word	0x08025fae
 8020588:	08025fbf 	.word	0x08025fbf

0802058c <_scanf_float>:
 802058c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020590:	b087      	sub	sp, #28
 8020592:	4617      	mov	r7, r2
 8020594:	9303      	str	r3, [sp, #12]
 8020596:	688b      	ldr	r3, [r1, #8]
 8020598:	1e5a      	subs	r2, r3, #1
 802059a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802059e:	bf83      	ittte	hi
 80205a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80205a4:	195b      	addhi	r3, r3, r5
 80205a6:	9302      	strhi	r3, [sp, #8]
 80205a8:	2300      	movls	r3, #0
 80205aa:	bf86      	itte	hi
 80205ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80205b0:	608b      	strhi	r3, [r1, #8]
 80205b2:	9302      	strls	r3, [sp, #8]
 80205b4:	680b      	ldr	r3, [r1, #0]
 80205b6:	468b      	mov	fp, r1
 80205b8:	2500      	movs	r5, #0
 80205ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80205be:	f84b 3b1c 	str.w	r3, [fp], #28
 80205c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80205c6:	4680      	mov	r8, r0
 80205c8:	460c      	mov	r4, r1
 80205ca:	465e      	mov	r6, fp
 80205cc:	46aa      	mov	sl, r5
 80205ce:	46a9      	mov	r9, r5
 80205d0:	9501      	str	r5, [sp, #4]
 80205d2:	68a2      	ldr	r2, [r4, #8]
 80205d4:	b152      	cbz	r2, 80205ec <_scanf_float+0x60>
 80205d6:	683b      	ldr	r3, [r7, #0]
 80205d8:	781b      	ldrb	r3, [r3, #0]
 80205da:	2b4e      	cmp	r3, #78	; 0x4e
 80205dc:	d864      	bhi.n	80206a8 <_scanf_float+0x11c>
 80205de:	2b40      	cmp	r3, #64	; 0x40
 80205e0:	d83c      	bhi.n	802065c <_scanf_float+0xd0>
 80205e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80205e6:	b2c8      	uxtb	r0, r1
 80205e8:	280e      	cmp	r0, #14
 80205ea:	d93a      	bls.n	8020662 <_scanf_float+0xd6>
 80205ec:	f1b9 0f00 	cmp.w	r9, #0
 80205f0:	d003      	beq.n	80205fa <_scanf_float+0x6e>
 80205f2:	6823      	ldr	r3, [r4, #0]
 80205f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80205f8:	6023      	str	r3, [r4, #0]
 80205fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80205fe:	f1ba 0f01 	cmp.w	sl, #1
 8020602:	f200 8113 	bhi.w	802082c <_scanf_float+0x2a0>
 8020606:	455e      	cmp	r6, fp
 8020608:	f200 8105 	bhi.w	8020816 <_scanf_float+0x28a>
 802060c:	2501      	movs	r5, #1
 802060e:	4628      	mov	r0, r5
 8020610:	b007      	add	sp, #28
 8020612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020616:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802061a:	2a0d      	cmp	r2, #13
 802061c:	d8e6      	bhi.n	80205ec <_scanf_float+0x60>
 802061e:	a101      	add	r1, pc, #4	; (adr r1, 8020624 <_scanf_float+0x98>)
 8020620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020624:	08020763 	.word	0x08020763
 8020628:	080205ed 	.word	0x080205ed
 802062c:	080205ed 	.word	0x080205ed
 8020630:	080205ed 	.word	0x080205ed
 8020634:	080207c3 	.word	0x080207c3
 8020638:	0802079b 	.word	0x0802079b
 802063c:	080205ed 	.word	0x080205ed
 8020640:	080205ed 	.word	0x080205ed
 8020644:	08020771 	.word	0x08020771
 8020648:	080205ed 	.word	0x080205ed
 802064c:	080205ed 	.word	0x080205ed
 8020650:	080205ed 	.word	0x080205ed
 8020654:	080205ed 	.word	0x080205ed
 8020658:	08020729 	.word	0x08020729
 802065c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8020660:	e7db      	b.n	802061a <_scanf_float+0x8e>
 8020662:	290e      	cmp	r1, #14
 8020664:	d8c2      	bhi.n	80205ec <_scanf_float+0x60>
 8020666:	a001      	add	r0, pc, #4	; (adr r0, 802066c <_scanf_float+0xe0>)
 8020668:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802066c:	0802071b 	.word	0x0802071b
 8020670:	080205ed 	.word	0x080205ed
 8020674:	0802071b 	.word	0x0802071b
 8020678:	080207af 	.word	0x080207af
 802067c:	080205ed 	.word	0x080205ed
 8020680:	080206c9 	.word	0x080206c9
 8020684:	08020705 	.word	0x08020705
 8020688:	08020705 	.word	0x08020705
 802068c:	08020705 	.word	0x08020705
 8020690:	08020705 	.word	0x08020705
 8020694:	08020705 	.word	0x08020705
 8020698:	08020705 	.word	0x08020705
 802069c:	08020705 	.word	0x08020705
 80206a0:	08020705 	.word	0x08020705
 80206a4:	08020705 	.word	0x08020705
 80206a8:	2b6e      	cmp	r3, #110	; 0x6e
 80206aa:	d809      	bhi.n	80206c0 <_scanf_float+0x134>
 80206ac:	2b60      	cmp	r3, #96	; 0x60
 80206ae:	d8b2      	bhi.n	8020616 <_scanf_float+0x8a>
 80206b0:	2b54      	cmp	r3, #84	; 0x54
 80206b2:	d077      	beq.n	80207a4 <_scanf_float+0x218>
 80206b4:	2b59      	cmp	r3, #89	; 0x59
 80206b6:	d199      	bne.n	80205ec <_scanf_float+0x60>
 80206b8:	2d07      	cmp	r5, #7
 80206ba:	d197      	bne.n	80205ec <_scanf_float+0x60>
 80206bc:	2508      	movs	r5, #8
 80206be:	e029      	b.n	8020714 <_scanf_float+0x188>
 80206c0:	2b74      	cmp	r3, #116	; 0x74
 80206c2:	d06f      	beq.n	80207a4 <_scanf_float+0x218>
 80206c4:	2b79      	cmp	r3, #121	; 0x79
 80206c6:	e7f6      	b.n	80206b6 <_scanf_float+0x12a>
 80206c8:	6821      	ldr	r1, [r4, #0]
 80206ca:	05c8      	lsls	r0, r1, #23
 80206cc:	d51a      	bpl.n	8020704 <_scanf_float+0x178>
 80206ce:	9b02      	ldr	r3, [sp, #8]
 80206d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80206d4:	6021      	str	r1, [r4, #0]
 80206d6:	f109 0901 	add.w	r9, r9, #1
 80206da:	b11b      	cbz	r3, 80206e4 <_scanf_float+0x158>
 80206dc:	3b01      	subs	r3, #1
 80206de:	3201      	adds	r2, #1
 80206e0:	9302      	str	r3, [sp, #8]
 80206e2:	60a2      	str	r2, [r4, #8]
 80206e4:	68a3      	ldr	r3, [r4, #8]
 80206e6:	3b01      	subs	r3, #1
 80206e8:	60a3      	str	r3, [r4, #8]
 80206ea:	6923      	ldr	r3, [r4, #16]
 80206ec:	3301      	adds	r3, #1
 80206ee:	6123      	str	r3, [r4, #16]
 80206f0:	687b      	ldr	r3, [r7, #4]
 80206f2:	3b01      	subs	r3, #1
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	607b      	str	r3, [r7, #4]
 80206f8:	f340 8084 	ble.w	8020804 <_scanf_float+0x278>
 80206fc:	683b      	ldr	r3, [r7, #0]
 80206fe:	3301      	adds	r3, #1
 8020700:	603b      	str	r3, [r7, #0]
 8020702:	e766      	b.n	80205d2 <_scanf_float+0x46>
 8020704:	eb1a 0f05 	cmn.w	sl, r5
 8020708:	f47f af70 	bne.w	80205ec <_scanf_float+0x60>
 802070c:	6822      	ldr	r2, [r4, #0]
 802070e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8020712:	6022      	str	r2, [r4, #0]
 8020714:	f806 3b01 	strb.w	r3, [r6], #1
 8020718:	e7e4      	b.n	80206e4 <_scanf_float+0x158>
 802071a:	6822      	ldr	r2, [r4, #0]
 802071c:	0610      	lsls	r0, r2, #24
 802071e:	f57f af65 	bpl.w	80205ec <_scanf_float+0x60>
 8020722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020726:	e7f4      	b.n	8020712 <_scanf_float+0x186>
 8020728:	f1ba 0f00 	cmp.w	sl, #0
 802072c:	d10e      	bne.n	802074c <_scanf_float+0x1c0>
 802072e:	f1b9 0f00 	cmp.w	r9, #0
 8020732:	d10e      	bne.n	8020752 <_scanf_float+0x1c6>
 8020734:	6822      	ldr	r2, [r4, #0]
 8020736:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802073a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802073e:	d108      	bne.n	8020752 <_scanf_float+0x1c6>
 8020740:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020744:	6022      	str	r2, [r4, #0]
 8020746:	f04f 0a01 	mov.w	sl, #1
 802074a:	e7e3      	b.n	8020714 <_scanf_float+0x188>
 802074c:	f1ba 0f02 	cmp.w	sl, #2
 8020750:	d055      	beq.n	80207fe <_scanf_float+0x272>
 8020752:	2d01      	cmp	r5, #1
 8020754:	d002      	beq.n	802075c <_scanf_float+0x1d0>
 8020756:	2d04      	cmp	r5, #4
 8020758:	f47f af48 	bne.w	80205ec <_scanf_float+0x60>
 802075c:	3501      	adds	r5, #1
 802075e:	b2ed      	uxtb	r5, r5
 8020760:	e7d8      	b.n	8020714 <_scanf_float+0x188>
 8020762:	f1ba 0f01 	cmp.w	sl, #1
 8020766:	f47f af41 	bne.w	80205ec <_scanf_float+0x60>
 802076a:	f04f 0a02 	mov.w	sl, #2
 802076e:	e7d1      	b.n	8020714 <_scanf_float+0x188>
 8020770:	b97d      	cbnz	r5, 8020792 <_scanf_float+0x206>
 8020772:	f1b9 0f00 	cmp.w	r9, #0
 8020776:	f47f af3c 	bne.w	80205f2 <_scanf_float+0x66>
 802077a:	6822      	ldr	r2, [r4, #0]
 802077c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020780:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020784:	f47f af39 	bne.w	80205fa <_scanf_float+0x6e>
 8020788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802078c:	6022      	str	r2, [r4, #0]
 802078e:	2501      	movs	r5, #1
 8020790:	e7c0      	b.n	8020714 <_scanf_float+0x188>
 8020792:	2d03      	cmp	r5, #3
 8020794:	d0e2      	beq.n	802075c <_scanf_float+0x1d0>
 8020796:	2d05      	cmp	r5, #5
 8020798:	e7de      	b.n	8020758 <_scanf_float+0x1cc>
 802079a:	2d02      	cmp	r5, #2
 802079c:	f47f af26 	bne.w	80205ec <_scanf_float+0x60>
 80207a0:	2503      	movs	r5, #3
 80207a2:	e7b7      	b.n	8020714 <_scanf_float+0x188>
 80207a4:	2d06      	cmp	r5, #6
 80207a6:	f47f af21 	bne.w	80205ec <_scanf_float+0x60>
 80207aa:	2507      	movs	r5, #7
 80207ac:	e7b2      	b.n	8020714 <_scanf_float+0x188>
 80207ae:	6822      	ldr	r2, [r4, #0]
 80207b0:	0591      	lsls	r1, r2, #22
 80207b2:	f57f af1b 	bpl.w	80205ec <_scanf_float+0x60>
 80207b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80207ba:	6022      	str	r2, [r4, #0]
 80207bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80207c0:	e7a8      	b.n	8020714 <_scanf_float+0x188>
 80207c2:	6822      	ldr	r2, [r4, #0]
 80207c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80207c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80207cc:	d006      	beq.n	80207dc <_scanf_float+0x250>
 80207ce:	0550      	lsls	r0, r2, #21
 80207d0:	f57f af0c 	bpl.w	80205ec <_scanf_float+0x60>
 80207d4:	f1b9 0f00 	cmp.w	r9, #0
 80207d8:	f43f af0f 	beq.w	80205fa <_scanf_float+0x6e>
 80207dc:	0591      	lsls	r1, r2, #22
 80207de:	bf58      	it	pl
 80207e0:	9901      	ldrpl	r1, [sp, #4]
 80207e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80207e6:	bf58      	it	pl
 80207e8:	eba9 0101 	subpl.w	r1, r9, r1
 80207ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80207f0:	bf58      	it	pl
 80207f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80207f6:	6022      	str	r2, [r4, #0]
 80207f8:	f04f 0900 	mov.w	r9, #0
 80207fc:	e78a      	b.n	8020714 <_scanf_float+0x188>
 80207fe:	f04f 0a03 	mov.w	sl, #3
 8020802:	e787      	b.n	8020714 <_scanf_float+0x188>
 8020804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020808:	4639      	mov	r1, r7
 802080a:	4640      	mov	r0, r8
 802080c:	4798      	blx	r3
 802080e:	2800      	cmp	r0, #0
 8020810:	f43f aedf 	beq.w	80205d2 <_scanf_float+0x46>
 8020814:	e6ea      	b.n	80205ec <_scanf_float+0x60>
 8020816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802081a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802081e:	463a      	mov	r2, r7
 8020820:	4640      	mov	r0, r8
 8020822:	4798      	blx	r3
 8020824:	6923      	ldr	r3, [r4, #16]
 8020826:	3b01      	subs	r3, #1
 8020828:	6123      	str	r3, [r4, #16]
 802082a:	e6ec      	b.n	8020606 <_scanf_float+0x7a>
 802082c:	1e6b      	subs	r3, r5, #1
 802082e:	2b06      	cmp	r3, #6
 8020830:	d825      	bhi.n	802087e <_scanf_float+0x2f2>
 8020832:	2d02      	cmp	r5, #2
 8020834:	d836      	bhi.n	80208a4 <_scanf_float+0x318>
 8020836:	455e      	cmp	r6, fp
 8020838:	f67f aee8 	bls.w	802060c <_scanf_float+0x80>
 802083c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020844:	463a      	mov	r2, r7
 8020846:	4640      	mov	r0, r8
 8020848:	4798      	blx	r3
 802084a:	6923      	ldr	r3, [r4, #16]
 802084c:	3b01      	subs	r3, #1
 802084e:	6123      	str	r3, [r4, #16]
 8020850:	e7f1      	b.n	8020836 <_scanf_float+0x2aa>
 8020852:	9802      	ldr	r0, [sp, #8]
 8020854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020858:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802085c:	9002      	str	r0, [sp, #8]
 802085e:	463a      	mov	r2, r7
 8020860:	4640      	mov	r0, r8
 8020862:	4798      	blx	r3
 8020864:	6923      	ldr	r3, [r4, #16]
 8020866:	3b01      	subs	r3, #1
 8020868:	6123      	str	r3, [r4, #16]
 802086a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 802086e:	fa5f fa8a 	uxtb.w	sl, sl
 8020872:	f1ba 0f02 	cmp.w	sl, #2
 8020876:	d1ec      	bne.n	8020852 <_scanf_float+0x2c6>
 8020878:	3d03      	subs	r5, #3
 802087a:	b2ed      	uxtb	r5, r5
 802087c:	1b76      	subs	r6, r6, r5
 802087e:	6823      	ldr	r3, [r4, #0]
 8020880:	05da      	lsls	r2, r3, #23
 8020882:	d52f      	bpl.n	80208e4 <_scanf_float+0x358>
 8020884:	055b      	lsls	r3, r3, #21
 8020886:	d510      	bpl.n	80208aa <_scanf_float+0x31e>
 8020888:	455e      	cmp	r6, fp
 802088a:	f67f aebf 	bls.w	802060c <_scanf_float+0x80>
 802088e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020896:	463a      	mov	r2, r7
 8020898:	4640      	mov	r0, r8
 802089a:	4798      	blx	r3
 802089c:	6923      	ldr	r3, [r4, #16]
 802089e:	3b01      	subs	r3, #1
 80208a0:	6123      	str	r3, [r4, #16]
 80208a2:	e7f1      	b.n	8020888 <_scanf_float+0x2fc>
 80208a4:	46aa      	mov	sl, r5
 80208a6:	9602      	str	r6, [sp, #8]
 80208a8:	e7df      	b.n	802086a <_scanf_float+0x2de>
 80208aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80208ae:	6923      	ldr	r3, [r4, #16]
 80208b0:	2965      	cmp	r1, #101	; 0x65
 80208b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80208b6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80208ba:	6123      	str	r3, [r4, #16]
 80208bc:	d00c      	beq.n	80208d8 <_scanf_float+0x34c>
 80208be:	2945      	cmp	r1, #69	; 0x45
 80208c0:	d00a      	beq.n	80208d8 <_scanf_float+0x34c>
 80208c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80208c6:	463a      	mov	r2, r7
 80208c8:	4640      	mov	r0, r8
 80208ca:	4798      	blx	r3
 80208cc:	6923      	ldr	r3, [r4, #16]
 80208ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80208d2:	3b01      	subs	r3, #1
 80208d4:	1eb5      	subs	r5, r6, #2
 80208d6:	6123      	str	r3, [r4, #16]
 80208d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80208dc:	463a      	mov	r2, r7
 80208de:	4640      	mov	r0, r8
 80208e0:	4798      	blx	r3
 80208e2:	462e      	mov	r6, r5
 80208e4:	6825      	ldr	r5, [r4, #0]
 80208e6:	f015 0510 	ands.w	r5, r5, #16
 80208ea:	d14d      	bne.n	8020988 <_scanf_float+0x3fc>
 80208ec:	7035      	strb	r5, [r6, #0]
 80208ee:	6823      	ldr	r3, [r4, #0]
 80208f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80208f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80208f8:	d11a      	bne.n	8020930 <_scanf_float+0x3a4>
 80208fa:	9b01      	ldr	r3, [sp, #4]
 80208fc:	454b      	cmp	r3, r9
 80208fe:	eba3 0209 	sub.w	r2, r3, r9
 8020902:	d122      	bne.n	802094a <_scanf_float+0x3be>
 8020904:	2200      	movs	r2, #0
 8020906:	4659      	mov	r1, fp
 8020908:	4640      	mov	r0, r8
 802090a:	f002 fdd7 	bl	80234bc <_strtod_r>
 802090e:	9b03      	ldr	r3, [sp, #12]
 8020910:	6821      	ldr	r1, [r4, #0]
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	f011 0f02 	tst.w	r1, #2
 8020918:	f103 0204 	add.w	r2, r3, #4
 802091c:	d020      	beq.n	8020960 <_scanf_float+0x3d4>
 802091e:	9903      	ldr	r1, [sp, #12]
 8020920:	600a      	str	r2, [r1, #0]
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	ed83 0b00 	vstr	d0, [r3]
 8020928:	68e3      	ldr	r3, [r4, #12]
 802092a:	3301      	adds	r3, #1
 802092c:	60e3      	str	r3, [r4, #12]
 802092e:	e66e      	b.n	802060e <_scanf_float+0x82>
 8020930:	9b04      	ldr	r3, [sp, #16]
 8020932:	2b00      	cmp	r3, #0
 8020934:	d0e6      	beq.n	8020904 <_scanf_float+0x378>
 8020936:	9905      	ldr	r1, [sp, #20]
 8020938:	230a      	movs	r3, #10
 802093a:	462a      	mov	r2, r5
 802093c:	3101      	adds	r1, #1
 802093e:	4640      	mov	r0, r8
 8020940:	f002 fe44 	bl	80235cc <_strtol_r>
 8020944:	9b04      	ldr	r3, [sp, #16]
 8020946:	9e05      	ldr	r6, [sp, #20]
 8020948:	1ac2      	subs	r2, r0, r3
 802094a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802094e:	429e      	cmp	r6, r3
 8020950:	bf28      	it	cs
 8020952:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8020956:	490d      	ldr	r1, [pc, #52]	; (802098c <_scanf_float+0x400>)
 8020958:	4630      	mov	r0, r6
 802095a:	f000 fa87 	bl	8020e6c <siprintf>
 802095e:	e7d1      	b.n	8020904 <_scanf_float+0x378>
 8020960:	f011 0f04 	tst.w	r1, #4
 8020964:	9903      	ldr	r1, [sp, #12]
 8020966:	600a      	str	r2, [r1, #0]
 8020968:	d1db      	bne.n	8020922 <_scanf_float+0x396>
 802096a:	eeb4 0b40 	vcmp.f64	d0, d0
 802096e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020972:	681e      	ldr	r6, [r3, #0]
 8020974:	d705      	bvc.n	8020982 <_scanf_float+0x3f6>
 8020976:	4806      	ldr	r0, [pc, #24]	; (8020990 <_scanf_float+0x404>)
 8020978:	f000 fcb0 	bl	80212dc <nanf>
 802097c:	ed86 0a00 	vstr	s0, [r6]
 8020980:	e7d2      	b.n	8020928 <_scanf_float+0x39c>
 8020982:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020986:	e7f9      	b.n	802097c <_scanf_float+0x3f0>
 8020988:	2500      	movs	r5, #0
 802098a:	e640      	b.n	802060e <_scanf_float+0x82>
 802098c:	08025fd0 	.word	0x08025fd0
 8020990:	08026010 	.word	0x08026010

08020994 <std>:
 8020994:	2300      	movs	r3, #0
 8020996:	b510      	push	{r4, lr}
 8020998:	4604      	mov	r4, r0
 802099a:	e9c0 3300 	strd	r3, r3, [r0]
 802099e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80209a2:	6083      	str	r3, [r0, #8]
 80209a4:	8181      	strh	r1, [r0, #12]
 80209a6:	6643      	str	r3, [r0, #100]	; 0x64
 80209a8:	81c2      	strh	r2, [r0, #14]
 80209aa:	6183      	str	r3, [r0, #24]
 80209ac:	4619      	mov	r1, r3
 80209ae:	2208      	movs	r2, #8
 80209b0:	305c      	adds	r0, #92	; 0x5c
 80209b2:	f000 fbb7 	bl	8021124 <memset>
 80209b6:	4b0d      	ldr	r3, [pc, #52]	; (80209ec <std+0x58>)
 80209b8:	6263      	str	r3, [r4, #36]	; 0x24
 80209ba:	4b0d      	ldr	r3, [pc, #52]	; (80209f0 <std+0x5c>)
 80209bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80209be:	4b0d      	ldr	r3, [pc, #52]	; (80209f4 <std+0x60>)
 80209c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80209c2:	4b0d      	ldr	r3, [pc, #52]	; (80209f8 <std+0x64>)
 80209c4:	6323      	str	r3, [r4, #48]	; 0x30
 80209c6:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <std+0x68>)
 80209c8:	6224      	str	r4, [r4, #32]
 80209ca:	429c      	cmp	r4, r3
 80209cc:	d006      	beq.n	80209dc <std+0x48>
 80209ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80209d2:	4294      	cmp	r4, r2
 80209d4:	d002      	beq.n	80209dc <std+0x48>
 80209d6:	33d0      	adds	r3, #208	; 0xd0
 80209d8:	429c      	cmp	r4, r3
 80209da:	d105      	bne.n	80209e8 <std+0x54>
 80209dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80209e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209e4:	f000 bc60 	b.w	80212a8 <__retarget_lock_init_recursive>
 80209e8:	bd10      	pop	{r4, pc}
 80209ea:	bf00      	nop
 80209ec:	08020ead 	.word	0x08020ead
 80209f0:	08020ecf 	.word	0x08020ecf
 80209f4:	08020f07 	.word	0x08020f07
 80209f8:	08020f2b 	.word	0x08020f2b
 80209fc:	20016f84 	.word	0x20016f84

08020a00 <stdio_exit_handler>:
 8020a00:	4a02      	ldr	r2, [pc, #8]	; (8020a0c <stdio_exit_handler+0xc>)
 8020a02:	4903      	ldr	r1, [pc, #12]	; (8020a10 <stdio_exit_handler+0x10>)
 8020a04:	4803      	ldr	r0, [pc, #12]	; (8020a14 <stdio_exit_handler+0x14>)
 8020a06:	f000 b869 	b.w	8020adc <_fwalk_sglue>
 8020a0a:	bf00      	nop
 8020a0c:	20000944 	.word	0x20000944
 8020a10:	08023c15 	.word	0x08023c15
 8020a14:	20000950 	.word	0x20000950

08020a18 <cleanup_stdio>:
 8020a18:	6841      	ldr	r1, [r0, #4]
 8020a1a:	4b0c      	ldr	r3, [pc, #48]	; (8020a4c <cleanup_stdio+0x34>)
 8020a1c:	4299      	cmp	r1, r3
 8020a1e:	b510      	push	{r4, lr}
 8020a20:	4604      	mov	r4, r0
 8020a22:	d001      	beq.n	8020a28 <cleanup_stdio+0x10>
 8020a24:	f003 f8f6 	bl	8023c14 <_fflush_r>
 8020a28:	68a1      	ldr	r1, [r4, #8]
 8020a2a:	4b09      	ldr	r3, [pc, #36]	; (8020a50 <cleanup_stdio+0x38>)
 8020a2c:	4299      	cmp	r1, r3
 8020a2e:	d002      	beq.n	8020a36 <cleanup_stdio+0x1e>
 8020a30:	4620      	mov	r0, r4
 8020a32:	f003 f8ef 	bl	8023c14 <_fflush_r>
 8020a36:	68e1      	ldr	r1, [r4, #12]
 8020a38:	4b06      	ldr	r3, [pc, #24]	; (8020a54 <cleanup_stdio+0x3c>)
 8020a3a:	4299      	cmp	r1, r3
 8020a3c:	d004      	beq.n	8020a48 <cleanup_stdio+0x30>
 8020a3e:	4620      	mov	r0, r4
 8020a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a44:	f003 b8e6 	b.w	8023c14 <_fflush_r>
 8020a48:	bd10      	pop	{r4, pc}
 8020a4a:	bf00      	nop
 8020a4c:	20016f84 	.word	0x20016f84
 8020a50:	20016fec 	.word	0x20016fec
 8020a54:	20017054 	.word	0x20017054

08020a58 <global_stdio_init.part.0>:
 8020a58:	b510      	push	{r4, lr}
 8020a5a:	4b0b      	ldr	r3, [pc, #44]	; (8020a88 <global_stdio_init.part.0+0x30>)
 8020a5c:	4c0b      	ldr	r4, [pc, #44]	; (8020a8c <global_stdio_init.part.0+0x34>)
 8020a5e:	4a0c      	ldr	r2, [pc, #48]	; (8020a90 <global_stdio_init.part.0+0x38>)
 8020a60:	601a      	str	r2, [r3, #0]
 8020a62:	4620      	mov	r0, r4
 8020a64:	2200      	movs	r2, #0
 8020a66:	2104      	movs	r1, #4
 8020a68:	f7ff ff94 	bl	8020994 <std>
 8020a6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8020a70:	2201      	movs	r2, #1
 8020a72:	2109      	movs	r1, #9
 8020a74:	f7ff ff8e 	bl	8020994 <std>
 8020a78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8020a7c:	2202      	movs	r2, #2
 8020a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a82:	2112      	movs	r1, #18
 8020a84:	f7ff bf86 	b.w	8020994 <std>
 8020a88:	200170bc 	.word	0x200170bc
 8020a8c:	20016f84 	.word	0x20016f84
 8020a90:	08020a01 	.word	0x08020a01

08020a94 <__sfp_lock_acquire>:
 8020a94:	4801      	ldr	r0, [pc, #4]	; (8020a9c <__sfp_lock_acquire+0x8>)
 8020a96:	f000 bc08 	b.w	80212aa <__retarget_lock_acquire_recursive>
 8020a9a:	bf00      	nop
 8020a9c:	200170c6 	.word	0x200170c6

08020aa0 <__sfp_lock_release>:
 8020aa0:	4801      	ldr	r0, [pc, #4]	; (8020aa8 <__sfp_lock_release+0x8>)
 8020aa2:	f000 bc03 	b.w	80212ac <__retarget_lock_release_recursive>
 8020aa6:	bf00      	nop
 8020aa8:	200170c6 	.word	0x200170c6

08020aac <__sinit>:
 8020aac:	b510      	push	{r4, lr}
 8020aae:	4604      	mov	r4, r0
 8020ab0:	f7ff fff0 	bl	8020a94 <__sfp_lock_acquire>
 8020ab4:	6a23      	ldr	r3, [r4, #32]
 8020ab6:	b11b      	cbz	r3, 8020ac0 <__sinit+0x14>
 8020ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020abc:	f7ff bff0 	b.w	8020aa0 <__sfp_lock_release>
 8020ac0:	4b04      	ldr	r3, [pc, #16]	; (8020ad4 <__sinit+0x28>)
 8020ac2:	6223      	str	r3, [r4, #32]
 8020ac4:	4b04      	ldr	r3, [pc, #16]	; (8020ad8 <__sinit+0x2c>)
 8020ac6:	681b      	ldr	r3, [r3, #0]
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	d1f5      	bne.n	8020ab8 <__sinit+0xc>
 8020acc:	f7ff ffc4 	bl	8020a58 <global_stdio_init.part.0>
 8020ad0:	e7f2      	b.n	8020ab8 <__sinit+0xc>
 8020ad2:	bf00      	nop
 8020ad4:	08020a19 	.word	0x08020a19
 8020ad8:	200170bc 	.word	0x200170bc

08020adc <_fwalk_sglue>:
 8020adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ae0:	4607      	mov	r7, r0
 8020ae2:	4688      	mov	r8, r1
 8020ae4:	4614      	mov	r4, r2
 8020ae6:	2600      	movs	r6, #0
 8020ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020aec:	f1b9 0901 	subs.w	r9, r9, #1
 8020af0:	d505      	bpl.n	8020afe <_fwalk_sglue+0x22>
 8020af2:	6824      	ldr	r4, [r4, #0]
 8020af4:	2c00      	cmp	r4, #0
 8020af6:	d1f7      	bne.n	8020ae8 <_fwalk_sglue+0xc>
 8020af8:	4630      	mov	r0, r6
 8020afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020afe:	89ab      	ldrh	r3, [r5, #12]
 8020b00:	2b01      	cmp	r3, #1
 8020b02:	d907      	bls.n	8020b14 <_fwalk_sglue+0x38>
 8020b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020b08:	3301      	adds	r3, #1
 8020b0a:	d003      	beq.n	8020b14 <_fwalk_sglue+0x38>
 8020b0c:	4629      	mov	r1, r5
 8020b0e:	4638      	mov	r0, r7
 8020b10:	47c0      	blx	r8
 8020b12:	4306      	orrs	r6, r0
 8020b14:	3568      	adds	r5, #104	; 0x68
 8020b16:	e7e9      	b.n	8020aec <_fwalk_sglue+0x10>

08020b18 <_fwrite_r>:
 8020b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b1c:	9c08      	ldr	r4, [sp, #32]
 8020b1e:	468a      	mov	sl, r1
 8020b20:	4690      	mov	r8, r2
 8020b22:	fb02 f903 	mul.w	r9, r2, r3
 8020b26:	4606      	mov	r6, r0
 8020b28:	b118      	cbz	r0, 8020b32 <_fwrite_r+0x1a>
 8020b2a:	6a03      	ldr	r3, [r0, #32]
 8020b2c:	b90b      	cbnz	r3, 8020b32 <_fwrite_r+0x1a>
 8020b2e:	f7ff ffbd 	bl	8020aac <__sinit>
 8020b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b34:	07dd      	lsls	r5, r3, #31
 8020b36:	d405      	bmi.n	8020b44 <_fwrite_r+0x2c>
 8020b38:	89a3      	ldrh	r3, [r4, #12]
 8020b3a:	0598      	lsls	r0, r3, #22
 8020b3c:	d402      	bmi.n	8020b44 <_fwrite_r+0x2c>
 8020b3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b40:	f000 fbb3 	bl	80212aa <__retarget_lock_acquire_recursive>
 8020b44:	89a3      	ldrh	r3, [r4, #12]
 8020b46:	0719      	lsls	r1, r3, #28
 8020b48:	d516      	bpl.n	8020b78 <_fwrite_r+0x60>
 8020b4a:	6923      	ldr	r3, [r4, #16]
 8020b4c:	b1a3      	cbz	r3, 8020b78 <_fwrite_r+0x60>
 8020b4e:	2500      	movs	r5, #0
 8020b50:	454d      	cmp	r5, r9
 8020b52:	d01f      	beq.n	8020b94 <_fwrite_r+0x7c>
 8020b54:	68a7      	ldr	r7, [r4, #8]
 8020b56:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8020b5a:	3f01      	subs	r7, #1
 8020b5c:	2f00      	cmp	r7, #0
 8020b5e:	60a7      	str	r7, [r4, #8]
 8020b60:	da04      	bge.n	8020b6c <_fwrite_r+0x54>
 8020b62:	69a3      	ldr	r3, [r4, #24]
 8020b64:	429f      	cmp	r7, r3
 8020b66:	db0f      	blt.n	8020b88 <_fwrite_r+0x70>
 8020b68:	290a      	cmp	r1, #10
 8020b6a:	d00d      	beq.n	8020b88 <_fwrite_r+0x70>
 8020b6c:	6823      	ldr	r3, [r4, #0]
 8020b6e:	1c5a      	adds	r2, r3, #1
 8020b70:	6022      	str	r2, [r4, #0]
 8020b72:	7019      	strb	r1, [r3, #0]
 8020b74:	3501      	adds	r5, #1
 8020b76:	e7eb      	b.n	8020b50 <_fwrite_r+0x38>
 8020b78:	4621      	mov	r1, r4
 8020b7a:	4630      	mov	r0, r6
 8020b7c:	f000 fa50 	bl	8021020 <__swsetup_r>
 8020b80:	2800      	cmp	r0, #0
 8020b82:	d0e4      	beq.n	8020b4e <_fwrite_r+0x36>
 8020b84:	2500      	movs	r5, #0
 8020b86:	e005      	b.n	8020b94 <_fwrite_r+0x7c>
 8020b88:	4622      	mov	r2, r4
 8020b8a:	4630      	mov	r0, r6
 8020b8c:	f000 fa0a 	bl	8020fa4 <__swbuf_r>
 8020b90:	3001      	adds	r0, #1
 8020b92:	d1ef      	bne.n	8020b74 <_fwrite_r+0x5c>
 8020b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b96:	07da      	lsls	r2, r3, #31
 8020b98:	d405      	bmi.n	8020ba6 <_fwrite_r+0x8e>
 8020b9a:	89a3      	ldrh	r3, [r4, #12]
 8020b9c:	059b      	lsls	r3, r3, #22
 8020b9e:	d402      	bmi.n	8020ba6 <_fwrite_r+0x8e>
 8020ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ba2:	f000 fb83 	bl	80212ac <__retarget_lock_release_recursive>
 8020ba6:	fbb5 f0f8 	udiv	r0, r5, r8
 8020baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020bb0 <fwrite>:
 8020bb0:	b507      	push	{r0, r1, r2, lr}
 8020bb2:	9300      	str	r3, [sp, #0]
 8020bb4:	4613      	mov	r3, r2
 8020bb6:	460a      	mov	r2, r1
 8020bb8:	4601      	mov	r1, r0
 8020bba:	4803      	ldr	r0, [pc, #12]	; (8020bc8 <fwrite+0x18>)
 8020bbc:	6800      	ldr	r0, [r0, #0]
 8020bbe:	f7ff ffab 	bl	8020b18 <_fwrite_r>
 8020bc2:	b003      	add	sp, #12
 8020bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8020bc8:	2000099c 	.word	0x2000099c

08020bcc <iprintf>:
 8020bcc:	b40f      	push	{r0, r1, r2, r3}
 8020bce:	b507      	push	{r0, r1, r2, lr}
 8020bd0:	4906      	ldr	r1, [pc, #24]	; (8020bec <iprintf+0x20>)
 8020bd2:	ab04      	add	r3, sp, #16
 8020bd4:	6808      	ldr	r0, [r1, #0]
 8020bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8020bda:	6881      	ldr	r1, [r0, #8]
 8020bdc:	9301      	str	r3, [sp, #4]
 8020bde:	f002 fe79 	bl	80238d4 <_vfiprintf_r>
 8020be2:	b003      	add	sp, #12
 8020be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8020be8:	b004      	add	sp, #16
 8020bea:	4770      	bx	lr
 8020bec:	2000099c 	.word	0x2000099c

08020bf0 <_puts_r>:
 8020bf0:	6a03      	ldr	r3, [r0, #32]
 8020bf2:	b570      	push	{r4, r5, r6, lr}
 8020bf4:	6884      	ldr	r4, [r0, #8]
 8020bf6:	4605      	mov	r5, r0
 8020bf8:	460e      	mov	r6, r1
 8020bfa:	b90b      	cbnz	r3, 8020c00 <_puts_r+0x10>
 8020bfc:	f7ff ff56 	bl	8020aac <__sinit>
 8020c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c02:	07db      	lsls	r3, r3, #31
 8020c04:	d405      	bmi.n	8020c12 <_puts_r+0x22>
 8020c06:	89a3      	ldrh	r3, [r4, #12]
 8020c08:	0598      	lsls	r0, r3, #22
 8020c0a:	d402      	bmi.n	8020c12 <_puts_r+0x22>
 8020c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c0e:	f000 fb4c 	bl	80212aa <__retarget_lock_acquire_recursive>
 8020c12:	89a3      	ldrh	r3, [r4, #12]
 8020c14:	0719      	lsls	r1, r3, #28
 8020c16:	d513      	bpl.n	8020c40 <_puts_r+0x50>
 8020c18:	6923      	ldr	r3, [r4, #16]
 8020c1a:	b18b      	cbz	r3, 8020c40 <_puts_r+0x50>
 8020c1c:	3e01      	subs	r6, #1
 8020c1e:	68a3      	ldr	r3, [r4, #8]
 8020c20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020c24:	3b01      	subs	r3, #1
 8020c26:	60a3      	str	r3, [r4, #8]
 8020c28:	b9e9      	cbnz	r1, 8020c66 <_puts_r+0x76>
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	da2e      	bge.n	8020c8c <_puts_r+0x9c>
 8020c2e:	4622      	mov	r2, r4
 8020c30:	210a      	movs	r1, #10
 8020c32:	4628      	mov	r0, r5
 8020c34:	f000 f9b6 	bl	8020fa4 <__swbuf_r>
 8020c38:	3001      	adds	r0, #1
 8020c3a:	d007      	beq.n	8020c4c <_puts_r+0x5c>
 8020c3c:	250a      	movs	r5, #10
 8020c3e:	e007      	b.n	8020c50 <_puts_r+0x60>
 8020c40:	4621      	mov	r1, r4
 8020c42:	4628      	mov	r0, r5
 8020c44:	f000 f9ec 	bl	8021020 <__swsetup_r>
 8020c48:	2800      	cmp	r0, #0
 8020c4a:	d0e7      	beq.n	8020c1c <_puts_r+0x2c>
 8020c4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020c50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c52:	07da      	lsls	r2, r3, #31
 8020c54:	d405      	bmi.n	8020c62 <_puts_r+0x72>
 8020c56:	89a3      	ldrh	r3, [r4, #12]
 8020c58:	059b      	lsls	r3, r3, #22
 8020c5a:	d402      	bmi.n	8020c62 <_puts_r+0x72>
 8020c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c5e:	f000 fb25 	bl	80212ac <__retarget_lock_release_recursive>
 8020c62:	4628      	mov	r0, r5
 8020c64:	bd70      	pop	{r4, r5, r6, pc}
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	da04      	bge.n	8020c74 <_puts_r+0x84>
 8020c6a:	69a2      	ldr	r2, [r4, #24]
 8020c6c:	429a      	cmp	r2, r3
 8020c6e:	dc06      	bgt.n	8020c7e <_puts_r+0x8e>
 8020c70:	290a      	cmp	r1, #10
 8020c72:	d004      	beq.n	8020c7e <_puts_r+0x8e>
 8020c74:	6823      	ldr	r3, [r4, #0]
 8020c76:	1c5a      	adds	r2, r3, #1
 8020c78:	6022      	str	r2, [r4, #0]
 8020c7a:	7019      	strb	r1, [r3, #0]
 8020c7c:	e7cf      	b.n	8020c1e <_puts_r+0x2e>
 8020c7e:	4622      	mov	r2, r4
 8020c80:	4628      	mov	r0, r5
 8020c82:	f000 f98f 	bl	8020fa4 <__swbuf_r>
 8020c86:	3001      	adds	r0, #1
 8020c88:	d1c9      	bne.n	8020c1e <_puts_r+0x2e>
 8020c8a:	e7df      	b.n	8020c4c <_puts_r+0x5c>
 8020c8c:	6823      	ldr	r3, [r4, #0]
 8020c8e:	250a      	movs	r5, #10
 8020c90:	1c5a      	adds	r2, r3, #1
 8020c92:	6022      	str	r2, [r4, #0]
 8020c94:	701d      	strb	r5, [r3, #0]
 8020c96:	e7db      	b.n	8020c50 <_puts_r+0x60>

08020c98 <puts>:
 8020c98:	4b02      	ldr	r3, [pc, #8]	; (8020ca4 <puts+0xc>)
 8020c9a:	4601      	mov	r1, r0
 8020c9c:	6818      	ldr	r0, [r3, #0]
 8020c9e:	f7ff bfa7 	b.w	8020bf0 <_puts_r>
 8020ca2:	bf00      	nop
 8020ca4:	2000099c 	.word	0x2000099c

08020ca8 <setvbuf>:
 8020ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020cac:	461d      	mov	r5, r3
 8020cae:	4b54      	ldr	r3, [pc, #336]	; (8020e00 <setvbuf+0x158>)
 8020cb0:	681f      	ldr	r7, [r3, #0]
 8020cb2:	4604      	mov	r4, r0
 8020cb4:	460e      	mov	r6, r1
 8020cb6:	4690      	mov	r8, r2
 8020cb8:	b127      	cbz	r7, 8020cc4 <setvbuf+0x1c>
 8020cba:	6a3b      	ldr	r3, [r7, #32]
 8020cbc:	b913      	cbnz	r3, 8020cc4 <setvbuf+0x1c>
 8020cbe:	4638      	mov	r0, r7
 8020cc0:	f7ff fef4 	bl	8020aac <__sinit>
 8020cc4:	f1b8 0f02 	cmp.w	r8, #2
 8020cc8:	d006      	beq.n	8020cd8 <setvbuf+0x30>
 8020cca:	f1b8 0f01 	cmp.w	r8, #1
 8020cce:	f200 8094 	bhi.w	8020dfa <setvbuf+0x152>
 8020cd2:	2d00      	cmp	r5, #0
 8020cd4:	f2c0 8091 	blt.w	8020dfa <setvbuf+0x152>
 8020cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020cda:	07da      	lsls	r2, r3, #31
 8020cdc:	d405      	bmi.n	8020cea <setvbuf+0x42>
 8020cde:	89a3      	ldrh	r3, [r4, #12]
 8020ce0:	059b      	lsls	r3, r3, #22
 8020ce2:	d402      	bmi.n	8020cea <setvbuf+0x42>
 8020ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020ce6:	f000 fae0 	bl	80212aa <__retarget_lock_acquire_recursive>
 8020cea:	4621      	mov	r1, r4
 8020cec:	4638      	mov	r0, r7
 8020cee:	f002 ff91 	bl	8023c14 <_fflush_r>
 8020cf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020cf4:	b141      	cbz	r1, 8020d08 <setvbuf+0x60>
 8020cf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020cfa:	4299      	cmp	r1, r3
 8020cfc:	d002      	beq.n	8020d04 <setvbuf+0x5c>
 8020cfe:	4638      	mov	r0, r7
 8020d00:	f001 f912 	bl	8021f28 <_free_r>
 8020d04:	2300      	movs	r3, #0
 8020d06:	6363      	str	r3, [r4, #52]	; 0x34
 8020d08:	2300      	movs	r3, #0
 8020d0a:	61a3      	str	r3, [r4, #24]
 8020d0c:	6063      	str	r3, [r4, #4]
 8020d0e:	89a3      	ldrh	r3, [r4, #12]
 8020d10:	0618      	lsls	r0, r3, #24
 8020d12:	d503      	bpl.n	8020d1c <setvbuf+0x74>
 8020d14:	6921      	ldr	r1, [r4, #16]
 8020d16:	4638      	mov	r0, r7
 8020d18:	f001 f906 	bl	8021f28 <_free_r>
 8020d1c:	89a3      	ldrh	r3, [r4, #12]
 8020d1e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8020d22:	f023 0303 	bic.w	r3, r3, #3
 8020d26:	f1b8 0f02 	cmp.w	r8, #2
 8020d2a:	81a3      	strh	r3, [r4, #12]
 8020d2c:	d05f      	beq.n	8020dee <setvbuf+0x146>
 8020d2e:	ab01      	add	r3, sp, #4
 8020d30:	466a      	mov	r2, sp
 8020d32:	4621      	mov	r1, r4
 8020d34:	4638      	mov	r0, r7
 8020d36:	f002 ffa7 	bl	8023c88 <__swhatbuf_r>
 8020d3a:	89a3      	ldrh	r3, [r4, #12]
 8020d3c:	4318      	orrs	r0, r3
 8020d3e:	81a0      	strh	r0, [r4, #12]
 8020d40:	bb2d      	cbnz	r5, 8020d8e <setvbuf+0xe6>
 8020d42:	9d00      	ldr	r5, [sp, #0]
 8020d44:	4628      	mov	r0, r5
 8020d46:	f7fe fe09 	bl	801f95c <malloc>
 8020d4a:	4606      	mov	r6, r0
 8020d4c:	2800      	cmp	r0, #0
 8020d4e:	d150      	bne.n	8020df2 <setvbuf+0x14a>
 8020d50:	f8dd 9000 	ldr.w	r9, [sp]
 8020d54:	45a9      	cmp	r9, r5
 8020d56:	d13e      	bne.n	8020dd6 <setvbuf+0x12e>
 8020d58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020d5c:	2200      	movs	r2, #0
 8020d5e:	60a2      	str	r2, [r4, #8]
 8020d60:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8020d64:	6022      	str	r2, [r4, #0]
 8020d66:	6122      	str	r2, [r4, #16]
 8020d68:	2201      	movs	r2, #1
 8020d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d6e:	6162      	str	r2, [r4, #20]
 8020d70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020d72:	f043 0302 	orr.w	r3, r3, #2
 8020d76:	07d1      	lsls	r1, r2, #31
 8020d78:	81a3      	strh	r3, [r4, #12]
 8020d7a:	d404      	bmi.n	8020d86 <setvbuf+0xde>
 8020d7c:	059b      	lsls	r3, r3, #22
 8020d7e:	d402      	bmi.n	8020d86 <setvbuf+0xde>
 8020d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d82:	f000 fa93 	bl	80212ac <__retarget_lock_release_recursive>
 8020d86:	4628      	mov	r0, r5
 8020d88:	b003      	add	sp, #12
 8020d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020d8e:	2e00      	cmp	r6, #0
 8020d90:	d0d8      	beq.n	8020d44 <setvbuf+0x9c>
 8020d92:	6a3b      	ldr	r3, [r7, #32]
 8020d94:	b913      	cbnz	r3, 8020d9c <setvbuf+0xf4>
 8020d96:	4638      	mov	r0, r7
 8020d98:	f7ff fe88 	bl	8020aac <__sinit>
 8020d9c:	f1b8 0f01 	cmp.w	r8, #1
 8020da0:	bf08      	it	eq
 8020da2:	89a3      	ldrheq	r3, [r4, #12]
 8020da4:	6026      	str	r6, [r4, #0]
 8020da6:	bf04      	itt	eq
 8020da8:	f043 0301 	orreq.w	r3, r3, #1
 8020dac:	81a3      	strheq	r3, [r4, #12]
 8020dae:	89a3      	ldrh	r3, [r4, #12]
 8020db0:	f013 0208 	ands.w	r2, r3, #8
 8020db4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020db8:	d01d      	beq.n	8020df6 <setvbuf+0x14e>
 8020dba:	07da      	lsls	r2, r3, #31
 8020dbc:	bf41      	itttt	mi
 8020dbe:	2200      	movmi	r2, #0
 8020dc0:	426d      	negmi	r5, r5
 8020dc2:	60a2      	strmi	r2, [r4, #8]
 8020dc4:	61a5      	strmi	r5, [r4, #24]
 8020dc6:	bf58      	it	pl
 8020dc8:	60a5      	strpl	r5, [r4, #8]
 8020dca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020dcc:	f015 0501 	ands.w	r5, r5, #1
 8020dd0:	d0d4      	beq.n	8020d7c <setvbuf+0xd4>
 8020dd2:	2500      	movs	r5, #0
 8020dd4:	e7d7      	b.n	8020d86 <setvbuf+0xde>
 8020dd6:	4648      	mov	r0, r9
 8020dd8:	f7fe fdc0 	bl	801f95c <malloc>
 8020ddc:	4606      	mov	r6, r0
 8020dde:	2800      	cmp	r0, #0
 8020de0:	d0ba      	beq.n	8020d58 <setvbuf+0xb0>
 8020de2:	89a3      	ldrh	r3, [r4, #12]
 8020de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020de8:	81a3      	strh	r3, [r4, #12]
 8020dea:	464d      	mov	r5, r9
 8020dec:	e7d1      	b.n	8020d92 <setvbuf+0xea>
 8020dee:	2500      	movs	r5, #0
 8020df0:	e7b4      	b.n	8020d5c <setvbuf+0xb4>
 8020df2:	46a9      	mov	r9, r5
 8020df4:	e7f5      	b.n	8020de2 <setvbuf+0x13a>
 8020df6:	60a2      	str	r2, [r4, #8]
 8020df8:	e7e7      	b.n	8020dca <setvbuf+0x122>
 8020dfa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8020dfe:	e7c2      	b.n	8020d86 <setvbuf+0xde>
 8020e00:	2000099c 	.word	0x2000099c

08020e04 <sniprintf>:
 8020e04:	b40c      	push	{r2, r3}
 8020e06:	b530      	push	{r4, r5, lr}
 8020e08:	4b17      	ldr	r3, [pc, #92]	; (8020e68 <sniprintf+0x64>)
 8020e0a:	1e0c      	subs	r4, r1, #0
 8020e0c:	681d      	ldr	r5, [r3, #0]
 8020e0e:	b09d      	sub	sp, #116	; 0x74
 8020e10:	da08      	bge.n	8020e24 <sniprintf+0x20>
 8020e12:	238b      	movs	r3, #139	; 0x8b
 8020e14:	602b      	str	r3, [r5, #0]
 8020e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020e1a:	b01d      	add	sp, #116	; 0x74
 8020e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020e20:	b002      	add	sp, #8
 8020e22:	4770      	bx	lr
 8020e24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020e28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020e2c:	bf14      	ite	ne
 8020e2e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020e32:	4623      	moveq	r3, r4
 8020e34:	9304      	str	r3, [sp, #16]
 8020e36:	9307      	str	r3, [sp, #28]
 8020e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020e3c:	9002      	str	r0, [sp, #8]
 8020e3e:	9006      	str	r0, [sp, #24]
 8020e40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020e44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020e46:	ab21      	add	r3, sp, #132	; 0x84
 8020e48:	a902      	add	r1, sp, #8
 8020e4a:	4628      	mov	r0, r5
 8020e4c:	9301      	str	r3, [sp, #4]
 8020e4e:	f002 fc19 	bl	8023684 <_svfiprintf_r>
 8020e52:	1c43      	adds	r3, r0, #1
 8020e54:	bfbc      	itt	lt
 8020e56:	238b      	movlt	r3, #139	; 0x8b
 8020e58:	602b      	strlt	r3, [r5, #0]
 8020e5a:	2c00      	cmp	r4, #0
 8020e5c:	d0dd      	beq.n	8020e1a <sniprintf+0x16>
 8020e5e:	9b02      	ldr	r3, [sp, #8]
 8020e60:	2200      	movs	r2, #0
 8020e62:	701a      	strb	r2, [r3, #0]
 8020e64:	e7d9      	b.n	8020e1a <sniprintf+0x16>
 8020e66:	bf00      	nop
 8020e68:	2000099c 	.word	0x2000099c

08020e6c <siprintf>:
 8020e6c:	b40e      	push	{r1, r2, r3}
 8020e6e:	b500      	push	{lr}
 8020e70:	b09c      	sub	sp, #112	; 0x70
 8020e72:	ab1d      	add	r3, sp, #116	; 0x74
 8020e74:	9002      	str	r0, [sp, #8]
 8020e76:	9006      	str	r0, [sp, #24]
 8020e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020e7c:	4809      	ldr	r0, [pc, #36]	; (8020ea4 <siprintf+0x38>)
 8020e7e:	9107      	str	r1, [sp, #28]
 8020e80:	9104      	str	r1, [sp, #16]
 8020e82:	4909      	ldr	r1, [pc, #36]	; (8020ea8 <siprintf+0x3c>)
 8020e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8020e88:	9105      	str	r1, [sp, #20]
 8020e8a:	6800      	ldr	r0, [r0, #0]
 8020e8c:	9301      	str	r3, [sp, #4]
 8020e8e:	a902      	add	r1, sp, #8
 8020e90:	f002 fbf8 	bl	8023684 <_svfiprintf_r>
 8020e94:	9b02      	ldr	r3, [sp, #8]
 8020e96:	2200      	movs	r2, #0
 8020e98:	701a      	strb	r2, [r3, #0]
 8020e9a:	b01c      	add	sp, #112	; 0x70
 8020e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ea0:	b003      	add	sp, #12
 8020ea2:	4770      	bx	lr
 8020ea4:	2000099c 	.word	0x2000099c
 8020ea8:	ffff0208 	.word	0xffff0208

08020eac <__sread>:
 8020eac:	b510      	push	{r4, lr}
 8020eae:	460c      	mov	r4, r1
 8020eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020eb4:	f000 f99a 	bl	80211ec <_read_r>
 8020eb8:	2800      	cmp	r0, #0
 8020eba:	bfab      	itete	ge
 8020ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8020ec0:	181b      	addge	r3, r3, r0
 8020ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020ec6:	bfac      	ite	ge
 8020ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8020eca:	81a3      	strhlt	r3, [r4, #12]
 8020ecc:	bd10      	pop	{r4, pc}

08020ece <__swrite>:
 8020ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ed2:	461f      	mov	r7, r3
 8020ed4:	898b      	ldrh	r3, [r1, #12]
 8020ed6:	05db      	lsls	r3, r3, #23
 8020ed8:	4605      	mov	r5, r0
 8020eda:	460c      	mov	r4, r1
 8020edc:	4616      	mov	r6, r2
 8020ede:	d505      	bpl.n	8020eec <__swrite+0x1e>
 8020ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ee4:	2302      	movs	r3, #2
 8020ee6:	2200      	movs	r2, #0
 8020ee8:	f000 f96e 	bl	80211c8 <_lseek_r>
 8020eec:	89a3      	ldrh	r3, [r4, #12]
 8020eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020ef6:	81a3      	strh	r3, [r4, #12]
 8020ef8:	4632      	mov	r2, r6
 8020efa:	463b      	mov	r3, r7
 8020efc:	4628      	mov	r0, r5
 8020efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020f02:	f000 b995 	b.w	8021230 <_write_r>

08020f06 <__sseek>:
 8020f06:	b510      	push	{r4, lr}
 8020f08:	460c      	mov	r4, r1
 8020f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f0e:	f000 f95b 	bl	80211c8 <_lseek_r>
 8020f12:	1c43      	adds	r3, r0, #1
 8020f14:	89a3      	ldrh	r3, [r4, #12]
 8020f16:	bf15      	itete	ne
 8020f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8020f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020f22:	81a3      	strheq	r3, [r4, #12]
 8020f24:	bf18      	it	ne
 8020f26:	81a3      	strhne	r3, [r4, #12]
 8020f28:	bd10      	pop	{r4, pc}

08020f2a <__sclose>:
 8020f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f2e:	f000 b93b 	b.w	80211a8 <_close_r>

08020f32 <_vsniprintf_r>:
 8020f32:	b530      	push	{r4, r5, lr}
 8020f34:	4614      	mov	r4, r2
 8020f36:	2c00      	cmp	r4, #0
 8020f38:	b09b      	sub	sp, #108	; 0x6c
 8020f3a:	4605      	mov	r5, r0
 8020f3c:	461a      	mov	r2, r3
 8020f3e:	da05      	bge.n	8020f4c <_vsniprintf_r+0x1a>
 8020f40:	238b      	movs	r3, #139	; 0x8b
 8020f42:	6003      	str	r3, [r0, #0]
 8020f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020f48:	b01b      	add	sp, #108	; 0x6c
 8020f4a:	bd30      	pop	{r4, r5, pc}
 8020f4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020f50:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020f54:	bf14      	ite	ne
 8020f56:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8020f5a:	4623      	moveq	r3, r4
 8020f5c:	9302      	str	r3, [sp, #8]
 8020f5e:	9305      	str	r3, [sp, #20]
 8020f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020f64:	9100      	str	r1, [sp, #0]
 8020f66:	9104      	str	r1, [sp, #16]
 8020f68:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020f6c:	4669      	mov	r1, sp
 8020f6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020f70:	f002 fb88 	bl	8023684 <_svfiprintf_r>
 8020f74:	1c43      	adds	r3, r0, #1
 8020f76:	bfbc      	itt	lt
 8020f78:	238b      	movlt	r3, #139	; 0x8b
 8020f7a:	602b      	strlt	r3, [r5, #0]
 8020f7c:	2c00      	cmp	r4, #0
 8020f7e:	d0e3      	beq.n	8020f48 <_vsniprintf_r+0x16>
 8020f80:	9b00      	ldr	r3, [sp, #0]
 8020f82:	2200      	movs	r2, #0
 8020f84:	701a      	strb	r2, [r3, #0]
 8020f86:	e7df      	b.n	8020f48 <_vsniprintf_r+0x16>

08020f88 <vsniprintf>:
 8020f88:	b507      	push	{r0, r1, r2, lr}
 8020f8a:	9300      	str	r3, [sp, #0]
 8020f8c:	4613      	mov	r3, r2
 8020f8e:	460a      	mov	r2, r1
 8020f90:	4601      	mov	r1, r0
 8020f92:	4803      	ldr	r0, [pc, #12]	; (8020fa0 <vsniprintf+0x18>)
 8020f94:	6800      	ldr	r0, [r0, #0]
 8020f96:	f7ff ffcc 	bl	8020f32 <_vsniprintf_r>
 8020f9a:	b003      	add	sp, #12
 8020f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020fa0:	2000099c 	.word	0x2000099c

08020fa4 <__swbuf_r>:
 8020fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fa6:	460e      	mov	r6, r1
 8020fa8:	4614      	mov	r4, r2
 8020faa:	4605      	mov	r5, r0
 8020fac:	b118      	cbz	r0, 8020fb6 <__swbuf_r+0x12>
 8020fae:	6a03      	ldr	r3, [r0, #32]
 8020fb0:	b90b      	cbnz	r3, 8020fb6 <__swbuf_r+0x12>
 8020fb2:	f7ff fd7b 	bl	8020aac <__sinit>
 8020fb6:	69a3      	ldr	r3, [r4, #24]
 8020fb8:	60a3      	str	r3, [r4, #8]
 8020fba:	89a3      	ldrh	r3, [r4, #12]
 8020fbc:	071a      	lsls	r2, r3, #28
 8020fbe:	d525      	bpl.n	802100c <__swbuf_r+0x68>
 8020fc0:	6923      	ldr	r3, [r4, #16]
 8020fc2:	b31b      	cbz	r3, 802100c <__swbuf_r+0x68>
 8020fc4:	6823      	ldr	r3, [r4, #0]
 8020fc6:	6922      	ldr	r2, [r4, #16]
 8020fc8:	1a98      	subs	r0, r3, r2
 8020fca:	6963      	ldr	r3, [r4, #20]
 8020fcc:	b2f6      	uxtb	r6, r6
 8020fce:	4283      	cmp	r3, r0
 8020fd0:	4637      	mov	r7, r6
 8020fd2:	dc04      	bgt.n	8020fde <__swbuf_r+0x3a>
 8020fd4:	4621      	mov	r1, r4
 8020fd6:	4628      	mov	r0, r5
 8020fd8:	f002 fe1c 	bl	8023c14 <_fflush_r>
 8020fdc:	b9e0      	cbnz	r0, 8021018 <__swbuf_r+0x74>
 8020fde:	68a3      	ldr	r3, [r4, #8]
 8020fe0:	3b01      	subs	r3, #1
 8020fe2:	60a3      	str	r3, [r4, #8]
 8020fe4:	6823      	ldr	r3, [r4, #0]
 8020fe6:	1c5a      	adds	r2, r3, #1
 8020fe8:	6022      	str	r2, [r4, #0]
 8020fea:	701e      	strb	r6, [r3, #0]
 8020fec:	6962      	ldr	r2, [r4, #20]
 8020fee:	1c43      	adds	r3, r0, #1
 8020ff0:	429a      	cmp	r2, r3
 8020ff2:	d004      	beq.n	8020ffe <__swbuf_r+0x5a>
 8020ff4:	89a3      	ldrh	r3, [r4, #12]
 8020ff6:	07db      	lsls	r3, r3, #31
 8020ff8:	d506      	bpl.n	8021008 <__swbuf_r+0x64>
 8020ffa:	2e0a      	cmp	r6, #10
 8020ffc:	d104      	bne.n	8021008 <__swbuf_r+0x64>
 8020ffe:	4621      	mov	r1, r4
 8021000:	4628      	mov	r0, r5
 8021002:	f002 fe07 	bl	8023c14 <_fflush_r>
 8021006:	b938      	cbnz	r0, 8021018 <__swbuf_r+0x74>
 8021008:	4638      	mov	r0, r7
 802100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802100c:	4621      	mov	r1, r4
 802100e:	4628      	mov	r0, r5
 8021010:	f000 f806 	bl	8021020 <__swsetup_r>
 8021014:	2800      	cmp	r0, #0
 8021016:	d0d5      	beq.n	8020fc4 <__swbuf_r+0x20>
 8021018:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802101c:	e7f4      	b.n	8021008 <__swbuf_r+0x64>
	...

08021020 <__swsetup_r>:
 8021020:	b538      	push	{r3, r4, r5, lr}
 8021022:	4b2a      	ldr	r3, [pc, #168]	; (80210cc <__swsetup_r+0xac>)
 8021024:	4605      	mov	r5, r0
 8021026:	6818      	ldr	r0, [r3, #0]
 8021028:	460c      	mov	r4, r1
 802102a:	b118      	cbz	r0, 8021034 <__swsetup_r+0x14>
 802102c:	6a03      	ldr	r3, [r0, #32]
 802102e:	b90b      	cbnz	r3, 8021034 <__swsetup_r+0x14>
 8021030:	f7ff fd3c 	bl	8020aac <__sinit>
 8021034:	89a3      	ldrh	r3, [r4, #12]
 8021036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802103a:	0718      	lsls	r0, r3, #28
 802103c:	d422      	bmi.n	8021084 <__swsetup_r+0x64>
 802103e:	06d9      	lsls	r1, r3, #27
 8021040:	d407      	bmi.n	8021052 <__swsetup_r+0x32>
 8021042:	2309      	movs	r3, #9
 8021044:	602b      	str	r3, [r5, #0]
 8021046:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802104a:	81a3      	strh	r3, [r4, #12]
 802104c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021050:	e034      	b.n	80210bc <__swsetup_r+0x9c>
 8021052:	0758      	lsls	r0, r3, #29
 8021054:	d512      	bpl.n	802107c <__swsetup_r+0x5c>
 8021056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021058:	b141      	cbz	r1, 802106c <__swsetup_r+0x4c>
 802105a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802105e:	4299      	cmp	r1, r3
 8021060:	d002      	beq.n	8021068 <__swsetup_r+0x48>
 8021062:	4628      	mov	r0, r5
 8021064:	f000 ff60 	bl	8021f28 <_free_r>
 8021068:	2300      	movs	r3, #0
 802106a:	6363      	str	r3, [r4, #52]	; 0x34
 802106c:	89a3      	ldrh	r3, [r4, #12]
 802106e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021072:	81a3      	strh	r3, [r4, #12]
 8021074:	2300      	movs	r3, #0
 8021076:	6063      	str	r3, [r4, #4]
 8021078:	6923      	ldr	r3, [r4, #16]
 802107a:	6023      	str	r3, [r4, #0]
 802107c:	89a3      	ldrh	r3, [r4, #12]
 802107e:	f043 0308 	orr.w	r3, r3, #8
 8021082:	81a3      	strh	r3, [r4, #12]
 8021084:	6923      	ldr	r3, [r4, #16]
 8021086:	b94b      	cbnz	r3, 802109c <__swsetup_r+0x7c>
 8021088:	89a3      	ldrh	r3, [r4, #12]
 802108a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802108e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021092:	d003      	beq.n	802109c <__swsetup_r+0x7c>
 8021094:	4621      	mov	r1, r4
 8021096:	4628      	mov	r0, r5
 8021098:	f002 fe1c 	bl	8023cd4 <__smakebuf_r>
 802109c:	89a0      	ldrh	r0, [r4, #12]
 802109e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80210a2:	f010 0301 	ands.w	r3, r0, #1
 80210a6:	d00a      	beq.n	80210be <__swsetup_r+0x9e>
 80210a8:	2300      	movs	r3, #0
 80210aa:	60a3      	str	r3, [r4, #8]
 80210ac:	6963      	ldr	r3, [r4, #20]
 80210ae:	425b      	negs	r3, r3
 80210b0:	61a3      	str	r3, [r4, #24]
 80210b2:	6923      	ldr	r3, [r4, #16]
 80210b4:	b943      	cbnz	r3, 80210c8 <__swsetup_r+0xa8>
 80210b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80210ba:	d1c4      	bne.n	8021046 <__swsetup_r+0x26>
 80210bc:	bd38      	pop	{r3, r4, r5, pc}
 80210be:	0781      	lsls	r1, r0, #30
 80210c0:	bf58      	it	pl
 80210c2:	6963      	ldrpl	r3, [r4, #20]
 80210c4:	60a3      	str	r3, [r4, #8]
 80210c6:	e7f4      	b.n	80210b2 <__swsetup_r+0x92>
 80210c8:	2000      	movs	r0, #0
 80210ca:	e7f7      	b.n	80210bc <__swsetup_r+0x9c>
 80210cc:	2000099c 	.word	0x2000099c

080210d0 <memcmp>:
 80210d0:	b510      	push	{r4, lr}
 80210d2:	3901      	subs	r1, #1
 80210d4:	4402      	add	r2, r0
 80210d6:	4290      	cmp	r0, r2
 80210d8:	d101      	bne.n	80210de <memcmp+0xe>
 80210da:	2000      	movs	r0, #0
 80210dc:	e005      	b.n	80210ea <memcmp+0x1a>
 80210de:	7803      	ldrb	r3, [r0, #0]
 80210e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80210e4:	42a3      	cmp	r3, r4
 80210e6:	d001      	beq.n	80210ec <memcmp+0x1c>
 80210e8:	1b18      	subs	r0, r3, r4
 80210ea:	bd10      	pop	{r4, pc}
 80210ec:	3001      	adds	r0, #1
 80210ee:	e7f2      	b.n	80210d6 <memcmp+0x6>

080210f0 <memmove>:
 80210f0:	4288      	cmp	r0, r1
 80210f2:	b510      	push	{r4, lr}
 80210f4:	eb01 0402 	add.w	r4, r1, r2
 80210f8:	d902      	bls.n	8021100 <memmove+0x10>
 80210fa:	4284      	cmp	r4, r0
 80210fc:	4623      	mov	r3, r4
 80210fe:	d807      	bhi.n	8021110 <memmove+0x20>
 8021100:	1e43      	subs	r3, r0, #1
 8021102:	42a1      	cmp	r1, r4
 8021104:	d008      	beq.n	8021118 <memmove+0x28>
 8021106:	f811 2b01 	ldrb.w	r2, [r1], #1
 802110a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802110e:	e7f8      	b.n	8021102 <memmove+0x12>
 8021110:	4402      	add	r2, r0
 8021112:	4601      	mov	r1, r0
 8021114:	428a      	cmp	r2, r1
 8021116:	d100      	bne.n	802111a <memmove+0x2a>
 8021118:	bd10      	pop	{r4, pc}
 802111a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802111e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021122:	e7f7      	b.n	8021114 <memmove+0x24>

08021124 <memset>:
 8021124:	4402      	add	r2, r0
 8021126:	4603      	mov	r3, r0
 8021128:	4293      	cmp	r3, r2
 802112a:	d100      	bne.n	802112e <memset+0xa>
 802112c:	4770      	bx	lr
 802112e:	f803 1b01 	strb.w	r1, [r3], #1
 8021132:	e7f9      	b.n	8021128 <memset+0x4>

08021134 <strchr>:
 8021134:	b2c9      	uxtb	r1, r1
 8021136:	4603      	mov	r3, r0
 8021138:	f810 2b01 	ldrb.w	r2, [r0], #1
 802113c:	b11a      	cbz	r2, 8021146 <strchr+0x12>
 802113e:	428a      	cmp	r2, r1
 8021140:	d1f9      	bne.n	8021136 <strchr+0x2>
 8021142:	4618      	mov	r0, r3
 8021144:	4770      	bx	lr
 8021146:	2900      	cmp	r1, #0
 8021148:	bf18      	it	ne
 802114a:	2300      	movne	r3, #0
 802114c:	e7f9      	b.n	8021142 <strchr+0xe>

0802114e <strncmp>:
 802114e:	b510      	push	{r4, lr}
 8021150:	b16a      	cbz	r2, 802116e <strncmp+0x20>
 8021152:	3901      	subs	r1, #1
 8021154:	1884      	adds	r4, r0, r2
 8021156:	f810 2b01 	ldrb.w	r2, [r0], #1
 802115a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802115e:	429a      	cmp	r2, r3
 8021160:	d103      	bne.n	802116a <strncmp+0x1c>
 8021162:	42a0      	cmp	r0, r4
 8021164:	d001      	beq.n	802116a <strncmp+0x1c>
 8021166:	2a00      	cmp	r2, #0
 8021168:	d1f5      	bne.n	8021156 <strncmp+0x8>
 802116a:	1ad0      	subs	r0, r2, r3
 802116c:	bd10      	pop	{r4, pc}
 802116e:	4610      	mov	r0, r2
 8021170:	e7fc      	b.n	802116c <strncmp+0x1e>

08021172 <strstr>:
 8021172:	780a      	ldrb	r2, [r1, #0]
 8021174:	b570      	push	{r4, r5, r6, lr}
 8021176:	b96a      	cbnz	r2, 8021194 <strstr+0x22>
 8021178:	bd70      	pop	{r4, r5, r6, pc}
 802117a:	429a      	cmp	r2, r3
 802117c:	d109      	bne.n	8021192 <strstr+0x20>
 802117e:	460c      	mov	r4, r1
 8021180:	4605      	mov	r5, r0
 8021182:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8021186:	2b00      	cmp	r3, #0
 8021188:	d0f6      	beq.n	8021178 <strstr+0x6>
 802118a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802118e:	429e      	cmp	r6, r3
 8021190:	d0f7      	beq.n	8021182 <strstr+0x10>
 8021192:	3001      	adds	r0, #1
 8021194:	7803      	ldrb	r3, [r0, #0]
 8021196:	2b00      	cmp	r3, #0
 8021198:	d1ef      	bne.n	802117a <strstr+0x8>
 802119a:	4618      	mov	r0, r3
 802119c:	e7ec      	b.n	8021178 <strstr+0x6>
	...

080211a0 <_localeconv_r>:
 80211a0:	4800      	ldr	r0, [pc, #0]	; (80211a4 <_localeconv_r+0x4>)
 80211a2:	4770      	bx	lr
 80211a4:	20000a90 	.word	0x20000a90

080211a8 <_close_r>:
 80211a8:	b538      	push	{r3, r4, r5, lr}
 80211aa:	4d06      	ldr	r5, [pc, #24]	; (80211c4 <_close_r+0x1c>)
 80211ac:	2300      	movs	r3, #0
 80211ae:	4604      	mov	r4, r0
 80211b0:	4608      	mov	r0, r1
 80211b2:	602b      	str	r3, [r5, #0]
 80211b4:	f7e2 fb7b 	bl	80038ae <_close>
 80211b8:	1c43      	adds	r3, r0, #1
 80211ba:	d102      	bne.n	80211c2 <_close_r+0x1a>
 80211bc:	682b      	ldr	r3, [r5, #0]
 80211be:	b103      	cbz	r3, 80211c2 <_close_r+0x1a>
 80211c0:	6023      	str	r3, [r4, #0]
 80211c2:	bd38      	pop	{r3, r4, r5, pc}
 80211c4:	200170c0 	.word	0x200170c0

080211c8 <_lseek_r>:
 80211c8:	b538      	push	{r3, r4, r5, lr}
 80211ca:	4d07      	ldr	r5, [pc, #28]	; (80211e8 <_lseek_r+0x20>)
 80211cc:	4604      	mov	r4, r0
 80211ce:	4608      	mov	r0, r1
 80211d0:	4611      	mov	r1, r2
 80211d2:	2200      	movs	r2, #0
 80211d4:	602a      	str	r2, [r5, #0]
 80211d6:	461a      	mov	r2, r3
 80211d8:	f7e2 fb90 	bl	80038fc <_lseek>
 80211dc:	1c43      	adds	r3, r0, #1
 80211de:	d102      	bne.n	80211e6 <_lseek_r+0x1e>
 80211e0:	682b      	ldr	r3, [r5, #0]
 80211e2:	b103      	cbz	r3, 80211e6 <_lseek_r+0x1e>
 80211e4:	6023      	str	r3, [r4, #0]
 80211e6:	bd38      	pop	{r3, r4, r5, pc}
 80211e8:	200170c0 	.word	0x200170c0

080211ec <_read_r>:
 80211ec:	b538      	push	{r3, r4, r5, lr}
 80211ee:	4d07      	ldr	r5, [pc, #28]	; (802120c <_read_r+0x20>)
 80211f0:	4604      	mov	r4, r0
 80211f2:	4608      	mov	r0, r1
 80211f4:	4611      	mov	r1, r2
 80211f6:	2200      	movs	r2, #0
 80211f8:	602a      	str	r2, [r5, #0]
 80211fa:	461a      	mov	r2, r3
 80211fc:	f7e2 fb1e 	bl	800383c <_read>
 8021200:	1c43      	adds	r3, r0, #1
 8021202:	d102      	bne.n	802120a <_read_r+0x1e>
 8021204:	682b      	ldr	r3, [r5, #0]
 8021206:	b103      	cbz	r3, 802120a <_read_r+0x1e>
 8021208:	6023      	str	r3, [r4, #0]
 802120a:	bd38      	pop	{r3, r4, r5, pc}
 802120c:	200170c0 	.word	0x200170c0

08021210 <_sbrk_r>:
 8021210:	b538      	push	{r3, r4, r5, lr}
 8021212:	4d06      	ldr	r5, [pc, #24]	; (802122c <_sbrk_r+0x1c>)
 8021214:	2300      	movs	r3, #0
 8021216:	4604      	mov	r4, r0
 8021218:	4608      	mov	r0, r1
 802121a:	602b      	str	r3, [r5, #0]
 802121c:	f7e2 fb7c 	bl	8003918 <_sbrk>
 8021220:	1c43      	adds	r3, r0, #1
 8021222:	d102      	bne.n	802122a <_sbrk_r+0x1a>
 8021224:	682b      	ldr	r3, [r5, #0]
 8021226:	b103      	cbz	r3, 802122a <_sbrk_r+0x1a>
 8021228:	6023      	str	r3, [r4, #0]
 802122a:	bd38      	pop	{r3, r4, r5, pc}
 802122c:	200170c0 	.word	0x200170c0

08021230 <_write_r>:
 8021230:	b538      	push	{r3, r4, r5, lr}
 8021232:	4d07      	ldr	r5, [pc, #28]	; (8021250 <_write_r+0x20>)
 8021234:	4604      	mov	r4, r0
 8021236:	4608      	mov	r0, r1
 8021238:	4611      	mov	r1, r2
 802123a:	2200      	movs	r2, #0
 802123c:	602a      	str	r2, [r5, #0]
 802123e:	461a      	mov	r2, r3
 8021240:	f7e2 fb19 	bl	8003876 <_write>
 8021244:	1c43      	adds	r3, r0, #1
 8021246:	d102      	bne.n	802124e <_write_r+0x1e>
 8021248:	682b      	ldr	r3, [r5, #0]
 802124a:	b103      	cbz	r3, 802124e <_write_r+0x1e>
 802124c:	6023      	str	r3, [r4, #0]
 802124e:	bd38      	pop	{r3, r4, r5, pc}
 8021250:	200170c0 	.word	0x200170c0

08021254 <__errno>:
 8021254:	4b01      	ldr	r3, [pc, #4]	; (802125c <__errno+0x8>)
 8021256:	6818      	ldr	r0, [r3, #0]
 8021258:	4770      	bx	lr
 802125a:	bf00      	nop
 802125c:	2000099c 	.word	0x2000099c

08021260 <__libc_init_array>:
 8021260:	b570      	push	{r4, r5, r6, lr}
 8021262:	4d0d      	ldr	r5, [pc, #52]	; (8021298 <__libc_init_array+0x38>)
 8021264:	4c0d      	ldr	r4, [pc, #52]	; (802129c <__libc_init_array+0x3c>)
 8021266:	1b64      	subs	r4, r4, r5
 8021268:	10a4      	asrs	r4, r4, #2
 802126a:	2600      	movs	r6, #0
 802126c:	42a6      	cmp	r6, r4
 802126e:	d109      	bne.n	8021284 <__libc_init_array+0x24>
 8021270:	4d0b      	ldr	r5, [pc, #44]	; (80212a0 <__libc_init_array+0x40>)
 8021272:	4c0c      	ldr	r4, [pc, #48]	; (80212a4 <__libc_init_array+0x44>)
 8021274:	f003 f954 	bl	8024520 <_init>
 8021278:	1b64      	subs	r4, r4, r5
 802127a:	10a4      	asrs	r4, r4, #2
 802127c:	2600      	movs	r6, #0
 802127e:	42a6      	cmp	r6, r4
 8021280:	d105      	bne.n	802128e <__libc_init_array+0x2e>
 8021282:	bd70      	pop	{r4, r5, r6, pc}
 8021284:	f855 3b04 	ldr.w	r3, [r5], #4
 8021288:	4798      	blx	r3
 802128a:	3601      	adds	r6, #1
 802128c:	e7ee      	b.n	802126c <__libc_init_array+0xc>
 802128e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021292:	4798      	blx	r3
 8021294:	3601      	adds	r6, #1
 8021296:	e7f2      	b.n	802127e <__libc_init_array+0x1e>
 8021298:	080262b4 	.word	0x080262b4
 802129c:	080262b4 	.word	0x080262b4
 80212a0:	080262b4 	.word	0x080262b4
 80212a4:	080262cc 	.word	0x080262cc

080212a8 <__retarget_lock_init_recursive>:
 80212a8:	4770      	bx	lr

080212aa <__retarget_lock_acquire_recursive>:
 80212aa:	4770      	bx	lr

080212ac <__retarget_lock_release_recursive>:
 80212ac:	4770      	bx	lr

080212ae <strcpy>:
 80212ae:	4603      	mov	r3, r0
 80212b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80212b4:	f803 2b01 	strb.w	r2, [r3], #1
 80212b8:	2a00      	cmp	r2, #0
 80212ba:	d1f9      	bne.n	80212b0 <strcpy+0x2>
 80212bc:	4770      	bx	lr

080212be <memcpy>:
 80212be:	440a      	add	r2, r1
 80212c0:	4291      	cmp	r1, r2
 80212c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80212c6:	d100      	bne.n	80212ca <memcpy+0xc>
 80212c8:	4770      	bx	lr
 80212ca:	b510      	push	{r4, lr}
 80212cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80212d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80212d4:	4291      	cmp	r1, r2
 80212d6:	d1f9      	bne.n	80212cc <memcpy+0xe>
 80212d8:	bd10      	pop	{r4, pc}
	...

080212dc <nanf>:
 80212dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80212e4 <nanf+0x8>
 80212e0:	4770      	bx	lr
 80212e2:	bf00      	nop
 80212e4:	7fc00000 	.word	0x7fc00000

080212e8 <__assert_func>:
 80212e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80212ea:	4614      	mov	r4, r2
 80212ec:	461a      	mov	r2, r3
 80212ee:	4b09      	ldr	r3, [pc, #36]	; (8021314 <__assert_func+0x2c>)
 80212f0:	681b      	ldr	r3, [r3, #0]
 80212f2:	4605      	mov	r5, r0
 80212f4:	68d8      	ldr	r0, [r3, #12]
 80212f6:	b14c      	cbz	r4, 802130c <__assert_func+0x24>
 80212f8:	4b07      	ldr	r3, [pc, #28]	; (8021318 <__assert_func+0x30>)
 80212fa:	9100      	str	r1, [sp, #0]
 80212fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021300:	4906      	ldr	r1, [pc, #24]	; (802131c <__assert_func+0x34>)
 8021302:	462b      	mov	r3, r5
 8021304:	f002 fcae 	bl	8023c64 <fiprintf>
 8021308:	f002 fd4a 	bl	8023da0 <abort>
 802130c:	4b04      	ldr	r3, [pc, #16]	; (8021320 <__assert_func+0x38>)
 802130e:	461c      	mov	r4, r3
 8021310:	e7f3      	b.n	80212fa <__assert_func+0x12>
 8021312:	bf00      	nop
 8021314:	2000099c 	.word	0x2000099c
 8021318:	08025fd5 	.word	0x08025fd5
 802131c:	08025fe2 	.word	0x08025fe2
 8021320:	08026010 	.word	0x08026010

08021324 <quorem>:
 8021324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021328:	6903      	ldr	r3, [r0, #16]
 802132a:	690c      	ldr	r4, [r1, #16]
 802132c:	42a3      	cmp	r3, r4
 802132e:	4607      	mov	r7, r0
 8021330:	db7e      	blt.n	8021430 <quorem+0x10c>
 8021332:	3c01      	subs	r4, #1
 8021334:	f101 0814 	add.w	r8, r1, #20
 8021338:	f100 0514 	add.w	r5, r0, #20
 802133c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021340:	9301      	str	r3, [sp, #4]
 8021342:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802134a:	3301      	adds	r3, #1
 802134c:	429a      	cmp	r2, r3
 802134e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021352:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021356:	fbb2 f6f3 	udiv	r6, r2, r3
 802135a:	d331      	bcc.n	80213c0 <quorem+0x9c>
 802135c:	f04f 0e00 	mov.w	lr, #0
 8021360:	4640      	mov	r0, r8
 8021362:	46ac      	mov	ip, r5
 8021364:	46f2      	mov	sl, lr
 8021366:	f850 2b04 	ldr.w	r2, [r0], #4
 802136a:	b293      	uxth	r3, r2
 802136c:	fb06 e303 	mla	r3, r6, r3, lr
 8021370:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021374:	0c1a      	lsrs	r2, r3, #16
 8021376:	b29b      	uxth	r3, r3
 8021378:	ebaa 0303 	sub.w	r3, sl, r3
 802137c:	f8dc a000 	ldr.w	sl, [ip]
 8021380:	fa13 f38a 	uxtah	r3, r3, sl
 8021384:	fb06 220e 	mla	r2, r6, lr, r2
 8021388:	9300      	str	r3, [sp, #0]
 802138a:	9b00      	ldr	r3, [sp, #0]
 802138c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021390:	b292      	uxth	r2, r2
 8021392:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8021396:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802139a:	f8bd 3000 	ldrh.w	r3, [sp]
 802139e:	4581      	cmp	r9, r0
 80213a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80213a4:	f84c 3b04 	str.w	r3, [ip], #4
 80213a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80213ac:	d2db      	bcs.n	8021366 <quorem+0x42>
 80213ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80213b2:	b92b      	cbnz	r3, 80213c0 <quorem+0x9c>
 80213b4:	9b01      	ldr	r3, [sp, #4]
 80213b6:	3b04      	subs	r3, #4
 80213b8:	429d      	cmp	r5, r3
 80213ba:	461a      	mov	r2, r3
 80213bc:	d32c      	bcc.n	8021418 <quorem+0xf4>
 80213be:	613c      	str	r4, [r7, #16]
 80213c0:	4638      	mov	r0, r7
 80213c2:	f001 f8c3 	bl	802254c <__mcmp>
 80213c6:	2800      	cmp	r0, #0
 80213c8:	db22      	blt.n	8021410 <quorem+0xec>
 80213ca:	3601      	adds	r6, #1
 80213cc:	4629      	mov	r1, r5
 80213ce:	2000      	movs	r0, #0
 80213d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80213d4:	f8d1 c000 	ldr.w	ip, [r1]
 80213d8:	b293      	uxth	r3, r2
 80213da:	1ac3      	subs	r3, r0, r3
 80213dc:	0c12      	lsrs	r2, r2, #16
 80213de:	fa13 f38c 	uxtah	r3, r3, ip
 80213e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80213e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80213ea:	b29b      	uxth	r3, r3
 80213ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80213f0:	45c1      	cmp	r9, r8
 80213f2:	f841 3b04 	str.w	r3, [r1], #4
 80213f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80213fa:	d2e9      	bcs.n	80213d0 <quorem+0xac>
 80213fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021400:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021404:	b922      	cbnz	r2, 8021410 <quorem+0xec>
 8021406:	3b04      	subs	r3, #4
 8021408:	429d      	cmp	r5, r3
 802140a:	461a      	mov	r2, r3
 802140c:	d30a      	bcc.n	8021424 <quorem+0x100>
 802140e:	613c      	str	r4, [r7, #16]
 8021410:	4630      	mov	r0, r6
 8021412:	b003      	add	sp, #12
 8021414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021418:	6812      	ldr	r2, [r2, #0]
 802141a:	3b04      	subs	r3, #4
 802141c:	2a00      	cmp	r2, #0
 802141e:	d1ce      	bne.n	80213be <quorem+0x9a>
 8021420:	3c01      	subs	r4, #1
 8021422:	e7c9      	b.n	80213b8 <quorem+0x94>
 8021424:	6812      	ldr	r2, [r2, #0]
 8021426:	3b04      	subs	r3, #4
 8021428:	2a00      	cmp	r2, #0
 802142a:	d1f0      	bne.n	802140e <quorem+0xea>
 802142c:	3c01      	subs	r4, #1
 802142e:	e7eb      	b.n	8021408 <quorem+0xe4>
 8021430:	2000      	movs	r0, #0
 8021432:	e7ee      	b.n	8021412 <quorem+0xee>
 8021434:	0000      	movs	r0, r0
	...

08021438 <_dtoa_r>:
 8021438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802143c:	ed2d 8b02 	vpush	{d8}
 8021440:	69c5      	ldr	r5, [r0, #28]
 8021442:	b091      	sub	sp, #68	; 0x44
 8021444:	ed8d 0b02 	vstr	d0, [sp, #8]
 8021448:	ec59 8b10 	vmov	r8, r9, d0
 802144c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802144e:	9106      	str	r1, [sp, #24]
 8021450:	4606      	mov	r6, r0
 8021452:	9208      	str	r2, [sp, #32]
 8021454:	930c      	str	r3, [sp, #48]	; 0x30
 8021456:	b975      	cbnz	r5, 8021476 <_dtoa_r+0x3e>
 8021458:	2010      	movs	r0, #16
 802145a:	f7fe fa7f 	bl	801f95c <malloc>
 802145e:	4602      	mov	r2, r0
 8021460:	61f0      	str	r0, [r6, #28]
 8021462:	b920      	cbnz	r0, 802146e <_dtoa_r+0x36>
 8021464:	4ba6      	ldr	r3, [pc, #664]	; (8021700 <_dtoa_r+0x2c8>)
 8021466:	21ef      	movs	r1, #239	; 0xef
 8021468:	48a6      	ldr	r0, [pc, #664]	; (8021704 <_dtoa_r+0x2cc>)
 802146a:	f7ff ff3d 	bl	80212e8 <__assert_func>
 802146e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021472:	6005      	str	r5, [r0, #0]
 8021474:	60c5      	str	r5, [r0, #12]
 8021476:	69f3      	ldr	r3, [r6, #28]
 8021478:	6819      	ldr	r1, [r3, #0]
 802147a:	b151      	cbz	r1, 8021492 <_dtoa_r+0x5a>
 802147c:	685a      	ldr	r2, [r3, #4]
 802147e:	604a      	str	r2, [r1, #4]
 8021480:	2301      	movs	r3, #1
 8021482:	4093      	lsls	r3, r2
 8021484:	608b      	str	r3, [r1, #8]
 8021486:	4630      	mov	r0, r6
 8021488:	f000 fdda 	bl	8022040 <_Bfree>
 802148c:	69f3      	ldr	r3, [r6, #28]
 802148e:	2200      	movs	r2, #0
 8021490:	601a      	str	r2, [r3, #0]
 8021492:	f1b9 0300 	subs.w	r3, r9, #0
 8021496:	bfbb      	ittet	lt
 8021498:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802149c:	9303      	strlt	r3, [sp, #12]
 802149e:	2300      	movge	r3, #0
 80214a0:	2201      	movlt	r2, #1
 80214a2:	bfac      	ite	ge
 80214a4:	6023      	strge	r3, [r4, #0]
 80214a6:	6022      	strlt	r2, [r4, #0]
 80214a8:	4b97      	ldr	r3, [pc, #604]	; (8021708 <_dtoa_r+0x2d0>)
 80214aa:	9c03      	ldr	r4, [sp, #12]
 80214ac:	43a3      	bics	r3, r4
 80214ae:	d11c      	bne.n	80214ea <_dtoa_r+0xb2>
 80214b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80214b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80214b6:	6013      	str	r3, [r2, #0]
 80214b8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80214bc:	ea53 0308 	orrs.w	r3, r3, r8
 80214c0:	f000 84fb 	beq.w	8021eba <_dtoa_r+0xa82>
 80214c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80214c6:	b963      	cbnz	r3, 80214e2 <_dtoa_r+0xaa>
 80214c8:	4b90      	ldr	r3, [pc, #576]	; (802170c <_dtoa_r+0x2d4>)
 80214ca:	e020      	b.n	802150e <_dtoa_r+0xd6>
 80214cc:	4b90      	ldr	r3, [pc, #576]	; (8021710 <_dtoa_r+0x2d8>)
 80214ce:	9301      	str	r3, [sp, #4]
 80214d0:	3308      	adds	r3, #8
 80214d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80214d4:	6013      	str	r3, [r2, #0]
 80214d6:	9801      	ldr	r0, [sp, #4]
 80214d8:	b011      	add	sp, #68	; 0x44
 80214da:	ecbd 8b02 	vpop	{d8}
 80214de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214e2:	4b8a      	ldr	r3, [pc, #552]	; (802170c <_dtoa_r+0x2d4>)
 80214e4:	9301      	str	r3, [sp, #4]
 80214e6:	3303      	adds	r3, #3
 80214e8:	e7f3      	b.n	80214d2 <_dtoa_r+0x9a>
 80214ea:	ed9d 8b02 	vldr	d8, [sp, #8]
 80214ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80214f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80214f6:	d10c      	bne.n	8021512 <_dtoa_r+0xda>
 80214f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80214fa:	2301      	movs	r3, #1
 80214fc:	6013      	str	r3, [r2, #0]
 80214fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021500:	2b00      	cmp	r3, #0
 8021502:	f000 84d7 	beq.w	8021eb4 <_dtoa_r+0xa7c>
 8021506:	4b83      	ldr	r3, [pc, #524]	; (8021714 <_dtoa_r+0x2dc>)
 8021508:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802150a:	6013      	str	r3, [r2, #0]
 802150c:	3b01      	subs	r3, #1
 802150e:	9301      	str	r3, [sp, #4]
 8021510:	e7e1      	b.n	80214d6 <_dtoa_r+0x9e>
 8021512:	aa0e      	add	r2, sp, #56	; 0x38
 8021514:	a90f      	add	r1, sp, #60	; 0x3c
 8021516:	4630      	mov	r0, r6
 8021518:	eeb0 0b48 	vmov.f64	d0, d8
 802151c:	f001 f92c 	bl	8022778 <__d2b>
 8021520:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021526:	4605      	mov	r5, r0
 8021528:	2b00      	cmp	r3, #0
 802152a:	d046      	beq.n	80215ba <_dtoa_r+0x182>
 802152c:	eeb0 7b48 	vmov.f64	d7, d8
 8021530:	ee18 1a90 	vmov	r1, s17
 8021534:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021538:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 802153c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8021540:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021544:	2000      	movs	r0, #0
 8021546:	ee07 1a90 	vmov	s15, r1
 802154a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 802154e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80216e8 <_dtoa_r+0x2b0>
 8021552:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021556:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80216f0 <_dtoa_r+0x2b8>
 802155a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802155e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80216f8 <_dtoa_r+0x2c0>
 8021562:	ee07 3a90 	vmov	s15, r3
 8021566:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 802156a:	eeb0 7b46 	vmov.f64	d7, d6
 802156e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8021572:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8021576:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802157e:	ee16 ba90 	vmov	fp, s13
 8021582:	9009      	str	r0, [sp, #36]	; 0x24
 8021584:	d508      	bpl.n	8021598 <_dtoa_r+0x160>
 8021586:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802158a:	eeb4 6b47 	vcmp.f64	d6, d7
 802158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021592:	bf18      	it	ne
 8021594:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8021598:	f1bb 0f16 	cmp.w	fp, #22
 802159c:	d82b      	bhi.n	80215f6 <_dtoa_r+0x1be>
 802159e:	495e      	ldr	r1, [pc, #376]	; (8021718 <_dtoa_r+0x2e0>)
 80215a0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80215a4:	ed91 7b00 	vldr	d7, [r1]
 80215a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80215ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215b0:	d501      	bpl.n	80215b6 <_dtoa_r+0x17e>
 80215b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80215b6:	2100      	movs	r1, #0
 80215b8:	e01e      	b.n	80215f8 <_dtoa_r+0x1c0>
 80215ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80215bc:	4413      	add	r3, r2
 80215be:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80215c2:	2920      	cmp	r1, #32
 80215c4:	bfc1      	itttt	gt
 80215c6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80215ca:	408c      	lslgt	r4, r1
 80215cc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80215d0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80215d4:	bfd6      	itet	le
 80215d6:	f1c1 0120 	rsble	r1, r1, #32
 80215da:	4321      	orrgt	r1, r4
 80215dc:	fa08 f101 	lslle.w	r1, r8, r1
 80215e0:	ee07 1a90 	vmov	s15, r1
 80215e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80215e8:	3b01      	subs	r3, #1
 80215ea:	ee17 1a90 	vmov	r1, s15
 80215ee:	2001      	movs	r0, #1
 80215f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80215f4:	e7a7      	b.n	8021546 <_dtoa_r+0x10e>
 80215f6:	2101      	movs	r1, #1
 80215f8:	1ad2      	subs	r2, r2, r3
 80215fa:	1e53      	subs	r3, r2, #1
 80215fc:	9305      	str	r3, [sp, #20]
 80215fe:	bf45      	ittet	mi
 8021600:	f1c2 0301 	rsbmi	r3, r2, #1
 8021604:	9304      	strmi	r3, [sp, #16]
 8021606:	2300      	movpl	r3, #0
 8021608:	2300      	movmi	r3, #0
 802160a:	bf4c      	ite	mi
 802160c:	9305      	strmi	r3, [sp, #20]
 802160e:	9304      	strpl	r3, [sp, #16]
 8021610:	f1bb 0f00 	cmp.w	fp, #0
 8021614:	910b      	str	r1, [sp, #44]	; 0x2c
 8021616:	db18      	blt.n	802164a <_dtoa_r+0x212>
 8021618:	9b05      	ldr	r3, [sp, #20]
 802161a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802161e:	445b      	add	r3, fp
 8021620:	9305      	str	r3, [sp, #20]
 8021622:	2300      	movs	r3, #0
 8021624:	9a06      	ldr	r2, [sp, #24]
 8021626:	2a09      	cmp	r2, #9
 8021628:	d848      	bhi.n	80216bc <_dtoa_r+0x284>
 802162a:	2a05      	cmp	r2, #5
 802162c:	bfc4      	itt	gt
 802162e:	3a04      	subgt	r2, #4
 8021630:	9206      	strgt	r2, [sp, #24]
 8021632:	9a06      	ldr	r2, [sp, #24]
 8021634:	f1a2 0202 	sub.w	r2, r2, #2
 8021638:	bfcc      	ite	gt
 802163a:	2400      	movgt	r4, #0
 802163c:	2401      	movle	r4, #1
 802163e:	2a03      	cmp	r2, #3
 8021640:	d847      	bhi.n	80216d2 <_dtoa_r+0x29a>
 8021642:	e8df f002 	tbb	[pc, r2]
 8021646:	2d0b      	.short	0x2d0b
 8021648:	392b      	.short	0x392b
 802164a:	9b04      	ldr	r3, [sp, #16]
 802164c:	2200      	movs	r2, #0
 802164e:	eba3 030b 	sub.w	r3, r3, fp
 8021652:	9304      	str	r3, [sp, #16]
 8021654:	920a      	str	r2, [sp, #40]	; 0x28
 8021656:	f1cb 0300 	rsb	r3, fp, #0
 802165a:	e7e3      	b.n	8021624 <_dtoa_r+0x1ec>
 802165c:	2200      	movs	r2, #0
 802165e:	9207      	str	r2, [sp, #28]
 8021660:	9a08      	ldr	r2, [sp, #32]
 8021662:	2a00      	cmp	r2, #0
 8021664:	dc38      	bgt.n	80216d8 <_dtoa_r+0x2a0>
 8021666:	f04f 0a01 	mov.w	sl, #1
 802166a:	46d1      	mov	r9, sl
 802166c:	4652      	mov	r2, sl
 802166e:	f8cd a020 	str.w	sl, [sp, #32]
 8021672:	69f7      	ldr	r7, [r6, #28]
 8021674:	2100      	movs	r1, #0
 8021676:	2004      	movs	r0, #4
 8021678:	f100 0c14 	add.w	ip, r0, #20
 802167c:	4594      	cmp	ip, r2
 802167e:	d930      	bls.n	80216e2 <_dtoa_r+0x2aa>
 8021680:	6079      	str	r1, [r7, #4]
 8021682:	4630      	mov	r0, r6
 8021684:	930d      	str	r3, [sp, #52]	; 0x34
 8021686:	f000 fc9b 	bl	8021fc0 <_Balloc>
 802168a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802168c:	9001      	str	r0, [sp, #4]
 802168e:	4602      	mov	r2, r0
 8021690:	2800      	cmp	r0, #0
 8021692:	d145      	bne.n	8021720 <_dtoa_r+0x2e8>
 8021694:	4b21      	ldr	r3, [pc, #132]	; (802171c <_dtoa_r+0x2e4>)
 8021696:	f240 11af 	movw	r1, #431	; 0x1af
 802169a:	e6e5      	b.n	8021468 <_dtoa_r+0x30>
 802169c:	2201      	movs	r2, #1
 802169e:	e7de      	b.n	802165e <_dtoa_r+0x226>
 80216a0:	2200      	movs	r2, #0
 80216a2:	9207      	str	r2, [sp, #28]
 80216a4:	9a08      	ldr	r2, [sp, #32]
 80216a6:	eb0b 0a02 	add.w	sl, fp, r2
 80216aa:	f10a 0901 	add.w	r9, sl, #1
 80216ae:	464a      	mov	r2, r9
 80216b0:	2a01      	cmp	r2, #1
 80216b2:	bfb8      	it	lt
 80216b4:	2201      	movlt	r2, #1
 80216b6:	e7dc      	b.n	8021672 <_dtoa_r+0x23a>
 80216b8:	2201      	movs	r2, #1
 80216ba:	e7f2      	b.n	80216a2 <_dtoa_r+0x26a>
 80216bc:	2401      	movs	r4, #1
 80216be:	2200      	movs	r2, #0
 80216c0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80216c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80216c8:	2100      	movs	r1, #0
 80216ca:	46d1      	mov	r9, sl
 80216cc:	2212      	movs	r2, #18
 80216ce:	9108      	str	r1, [sp, #32]
 80216d0:	e7cf      	b.n	8021672 <_dtoa_r+0x23a>
 80216d2:	2201      	movs	r2, #1
 80216d4:	9207      	str	r2, [sp, #28]
 80216d6:	e7f5      	b.n	80216c4 <_dtoa_r+0x28c>
 80216d8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80216dc:	46d1      	mov	r9, sl
 80216de:	4652      	mov	r2, sl
 80216e0:	e7c7      	b.n	8021672 <_dtoa_r+0x23a>
 80216e2:	3101      	adds	r1, #1
 80216e4:	0040      	lsls	r0, r0, #1
 80216e6:	e7c7      	b.n	8021678 <_dtoa_r+0x240>
 80216e8:	636f4361 	.word	0x636f4361
 80216ec:	3fd287a7 	.word	0x3fd287a7
 80216f0:	8b60c8b3 	.word	0x8b60c8b3
 80216f4:	3fc68a28 	.word	0x3fc68a28
 80216f8:	509f79fb 	.word	0x509f79fb
 80216fc:	3fd34413 	.word	0x3fd34413
 8021700:	08025e2c 	.word	0x08025e2c
 8021704:	0802601e 	.word	0x0802601e
 8021708:	7ff00000 	.word	0x7ff00000
 802170c:	0802601a 	.word	0x0802601a
 8021710:	08026011 	.word	0x08026011
 8021714:	08025fad 	.word	0x08025fad
 8021718:	08026108 	.word	0x08026108
 802171c:	08026076 	.word	0x08026076
 8021720:	69f2      	ldr	r2, [r6, #28]
 8021722:	9901      	ldr	r1, [sp, #4]
 8021724:	6011      	str	r1, [r2, #0]
 8021726:	f1b9 0f0e 	cmp.w	r9, #14
 802172a:	d86c      	bhi.n	8021806 <_dtoa_r+0x3ce>
 802172c:	2c00      	cmp	r4, #0
 802172e:	d06a      	beq.n	8021806 <_dtoa_r+0x3ce>
 8021730:	f1bb 0f00 	cmp.w	fp, #0
 8021734:	f340 80a0 	ble.w	8021878 <_dtoa_r+0x440>
 8021738:	4ac1      	ldr	r2, [pc, #772]	; (8021a40 <_dtoa_r+0x608>)
 802173a:	f00b 010f 	and.w	r1, fp, #15
 802173e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8021742:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8021746:	ed92 7b00 	vldr	d7, [r2]
 802174a:	ea4f 122b 	mov.w	r2, fp, asr #4
 802174e:	f000 8087 	beq.w	8021860 <_dtoa_r+0x428>
 8021752:	49bc      	ldr	r1, [pc, #752]	; (8021a44 <_dtoa_r+0x60c>)
 8021754:	ed91 6b08 	vldr	d6, [r1, #32]
 8021758:	ee88 6b06 	vdiv.f64	d6, d8, d6
 802175c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021760:	f002 020f 	and.w	r2, r2, #15
 8021764:	2103      	movs	r1, #3
 8021766:	48b7      	ldr	r0, [pc, #732]	; (8021a44 <_dtoa_r+0x60c>)
 8021768:	2a00      	cmp	r2, #0
 802176a:	d17b      	bne.n	8021864 <_dtoa_r+0x42c>
 802176c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021770:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021774:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802177a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802177e:	2a00      	cmp	r2, #0
 8021780:	f000 80a0 	beq.w	80218c4 <_dtoa_r+0x48c>
 8021784:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021788:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021790:	f140 8098 	bpl.w	80218c4 <_dtoa_r+0x48c>
 8021794:	f1b9 0f00 	cmp.w	r9, #0
 8021798:	f000 8094 	beq.w	80218c4 <_dtoa_r+0x48c>
 802179c:	f1ba 0f00 	cmp.w	sl, #0
 80217a0:	dd2f      	ble.n	8021802 <_dtoa_r+0x3ca>
 80217a2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80217a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80217aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80217ae:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80217b2:	3101      	adds	r1, #1
 80217b4:	4654      	mov	r4, sl
 80217b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80217ba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80217be:	ee07 1a90 	vmov	s15, r1
 80217c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80217c6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80217ca:	ee15 7a90 	vmov	r7, s11
 80217ce:	ec51 0b15 	vmov	r0, r1, d5
 80217d2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80217d6:	2c00      	cmp	r4, #0
 80217d8:	d177      	bne.n	80218ca <_dtoa_r+0x492>
 80217da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80217de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80217e2:	ec41 0b17 	vmov	d7, r0, r1
 80217e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80217ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217ee:	f300 826a 	bgt.w	8021cc6 <_dtoa_r+0x88e>
 80217f2:	eeb1 7b47 	vneg.f64	d7, d7
 80217f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80217fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217fe:	f100 8260 	bmi.w	8021cc2 <_dtoa_r+0x88a>
 8021802:	ed8d 8b02 	vstr	d8, [sp, #8]
 8021806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021808:	2a00      	cmp	r2, #0
 802180a:	f2c0 811d 	blt.w	8021a48 <_dtoa_r+0x610>
 802180e:	f1bb 0f0e 	cmp.w	fp, #14
 8021812:	f300 8119 	bgt.w	8021a48 <_dtoa_r+0x610>
 8021816:	4b8a      	ldr	r3, [pc, #552]	; (8021a40 <_dtoa_r+0x608>)
 8021818:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802181c:	ed93 6b00 	vldr	d6, [r3]
 8021820:	9b08      	ldr	r3, [sp, #32]
 8021822:	2b00      	cmp	r3, #0
 8021824:	f280 80b7 	bge.w	8021996 <_dtoa_r+0x55e>
 8021828:	f1b9 0f00 	cmp.w	r9, #0
 802182c:	f300 80b3 	bgt.w	8021996 <_dtoa_r+0x55e>
 8021830:	f040 8246 	bne.w	8021cc0 <_dtoa_r+0x888>
 8021834:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8021838:	ee26 6b07 	vmul.f64	d6, d6, d7
 802183c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021840:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021848:	464c      	mov	r4, r9
 802184a:	464f      	mov	r7, r9
 802184c:	f280 821c 	bge.w	8021c88 <_dtoa_r+0x850>
 8021850:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021854:	2331      	movs	r3, #49	; 0x31
 8021856:	f808 3b01 	strb.w	r3, [r8], #1
 802185a:	f10b 0b01 	add.w	fp, fp, #1
 802185e:	e218      	b.n	8021c92 <_dtoa_r+0x85a>
 8021860:	2102      	movs	r1, #2
 8021862:	e780      	b.n	8021766 <_dtoa_r+0x32e>
 8021864:	07d4      	lsls	r4, r2, #31
 8021866:	d504      	bpl.n	8021872 <_dtoa_r+0x43a>
 8021868:	ed90 6b00 	vldr	d6, [r0]
 802186c:	3101      	adds	r1, #1
 802186e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021872:	1052      	asrs	r2, r2, #1
 8021874:	3008      	adds	r0, #8
 8021876:	e777      	b.n	8021768 <_dtoa_r+0x330>
 8021878:	d022      	beq.n	80218c0 <_dtoa_r+0x488>
 802187a:	f1cb 0200 	rsb	r2, fp, #0
 802187e:	4970      	ldr	r1, [pc, #448]	; (8021a40 <_dtoa_r+0x608>)
 8021880:	f002 000f 	and.w	r0, r2, #15
 8021884:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8021888:	ed91 7b00 	vldr	d7, [r1]
 802188c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8021890:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021894:	486b      	ldr	r0, [pc, #428]	; (8021a44 <_dtoa_r+0x60c>)
 8021896:	1112      	asrs	r2, r2, #4
 8021898:	2400      	movs	r4, #0
 802189a:	2102      	movs	r1, #2
 802189c:	b92a      	cbnz	r2, 80218aa <_dtoa_r+0x472>
 802189e:	2c00      	cmp	r4, #0
 80218a0:	f43f af6a 	beq.w	8021778 <_dtoa_r+0x340>
 80218a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80218a8:	e766      	b.n	8021778 <_dtoa_r+0x340>
 80218aa:	07d7      	lsls	r7, r2, #31
 80218ac:	d505      	bpl.n	80218ba <_dtoa_r+0x482>
 80218ae:	ed90 6b00 	vldr	d6, [r0]
 80218b2:	3101      	adds	r1, #1
 80218b4:	2401      	movs	r4, #1
 80218b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80218ba:	1052      	asrs	r2, r2, #1
 80218bc:	3008      	adds	r0, #8
 80218be:	e7ed      	b.n	802189c <_dtoa_r+0x464>
 80218c0:	2102      	movs	r1, #2
 80218c2:	e759      	b.n	8021778 <_dtoa_r+0x340>
 80218c4:	465a      	mov	r2, fp
 80218c6:	464c      	mov	r4, r9
 80218c8:	e775      	b.n	80217b6 <_dtoa_r+0x37e>
 80218ca:	ec41 0b17 	vmov	d7, r0, r1
 80218ce:	495c      	ldr	r1, [pc, #368]	; (8021a40 <_dtoa_r+0x608>)
 80218d0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80218d4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80218d8:	9901      	ldr	r1, [sp, #4]
 80218da:	440c      	add	r4, r1
 80218dc:	9907      	ldr	r1, [sp, #28]
 80218de:	b351      	cbz	r1, 8021936 <_dtoa_r+0x4fe>
 80218e0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80218e4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80218e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80218ec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80218f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80218f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80218f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80218fc:	ee14 1a90 	vmov	r1, s9
 8021900:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021904:	3130      	adds	r1, #48	; 0x30
 8021906:	ee36 6b45 	vsub.f64	d6, d6, d5
 802190a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021912:	f808 1b01 	strb.w	r1, [r8], #1
 8021916:	d439      	bmi.n	802198c <_dtoa_r+0x554>
 8021918:	ee32 5b46 	vsub.f64	d5, d2, d6
 802191c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021924:	d472      	bmi.n	8021a0c <_dtoa_r+0x5d4>
 8021926:	45a0      	cmp	r8, r4
 8021928:	f43f af6b 	beq.w	8021802 <_dtoa_r+0x3ca>
 802192c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021930:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021934:	e7e0      	b.n	80218f8 <_dtoa_r+0x4c0>
 8021936:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802193a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802193e:	4620      	mov	r0, r4
 8021940:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021944:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021948:	ee14 1a90 	vmov	r1, s9
 802194c:	3130      	adds	r1, #48	; 0x30
 802194e:	f808 1b01 	strb.w	r1, [r8], #1
 8021952:	45a0      	cmp	r8, r4
 8021954:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021958:	ee36 6b45 	vsub.f64	d6, d6, d5
 802195c:	d118      	bne.n	8021990 <_dtoa_r+0x558>
 802195e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8021962:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021966:	eeb4 6bc4 	vcmpe.f64	d6, d4
 802196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802196e:	dc4d      	bgt.n	8021a0c <_dtoa_r+0x5d4>
 8021970:	ee35 5b47 	vsub.f64	d5, d5, d7
 8021974:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802197c:	f57f af41 	bpl.w	8021802 <_dtoa_r+0x3ca>
 8021980:	4680      	mov	r8, r0
 8021982:	3801      	subs	r0, #1
 8021984:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021988:	2b30      	cmp	r3, #48	; 0x30
 802198a:	d0f9      	beq.n	8021980 <_dtoa_r+0x548>
 802198c:	4693      	mov	fp, r2
 802198e:	e02a      	b.n	80219e6 <_dtoa_r+0x5ae>
 8021990:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021994:	e7d6      	b.n	8021944 <_dtoa_r+0x50c>
 8021996:	ed9d 7b02 	vldr	d7, [sp, #8]
 802199a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802199e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80219a2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80219a6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80219aa:	ee15 3a10 	vmov	r3, s10
 80219ae:	3330      	adds	r3, #48	; 0x30
 80219b0:	f808 3b01 	strb.w	r3, [r8], #1
 80219b4:	9b01      	ldr	r3, [sp, #4]
 80219b6:	eba8 0303 	sub.w	r3, r8, r3
 80219ba:	4599      	cmp	r9, r3
 80219bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80219c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80219c4:	d133      	bne.n	8021a2e <_dtoa_r+0x5f6>
 80219c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80219ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80219ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219d2:	dc1a      	bgt.n	8021a0a <_dtoa_r+0x5d2>
 80219d4:	eeb4 7b46 	vcmp.f64	d7, d6
 80219d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219dc:	d103      	bne.n	80219e6 <_dtoa_r+0x5ae>
 80219de:	ee15 3a10 	vmov	r3, s10
 80219e2:	07d9      	lsls	r1, r3, #31
 80219e4:	d411      	bmi.n	8021a0a <_dtoa_r+0x5d2>
 80219e6:	4629      	mov	r1, r5
 80219e8:	4630      	mov	r0, r6
 80219ea:	f000 fb29 	bl	8022040 <_Bfree>
 80219ee:	2300      	movs	r3, #0
 80219f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80219f2:	f888 3000 	strb.w	r3, [r8]
 80219f6:	f10b 0301 	add.w	r3, fp, #1
 80219fa:	6013      	str	r3, [r2, #0]
 80219fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	f43f ad69 	beq.w	80214d6 <_dtoa_r+0x9e>
 8021a04:	f8c3 8000 	str.w	r8, [r3]
 8021a08:	e565      	b.n	80214d6 <_dtoa_r+0x9e>
 8021a0a:	465a      	mov	r2, fp
 8021a0c:	4643      	mov	r3, r8
 8021a0e:	4698      	mov	r8, r3
 8021a10:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8021a14:	2939      	cmp	r1, #57	; 0x39
 8021a16:	d106      	bne.n	8021a26 <_dtoa_r+0x5ee>
 8021a18:	9901      	ldr	r1, [sp, #4]
 8021a1a:	4299      	cmp	r1, r3
 8021a1c:	d1f7      	bne.n	8021a0e <_dtoa_r+0x5d6>
 8021a1e:	9801      	ldr	r0, [sp, #4]
 8021a20:	2130      	movs	r1, #48	; 0x30
 8021a22:	3201      	adds	r2, #1
 8021a24:	7001      	strb	r1, [r0, #0]
 8021a26:	7819      	ldrb	r1, [r3, #0]
 8021a28:	3101      	adds	r1, #1
 8021a2a:	7019      	strb	r1, [r3, #0]
 8021a2c:	e7ae      	b.n	802198c <_dtoa_r+0x554>
 8021a2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021a32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a3a:	d1b2      	bne.n	80219a2 <_dtoa_r+0x56a>
 8021a3c:	e7d3      	b.n	80219e6 <_dtoa_r+0x5ae>
 8021a3e:	bf00      	nop
 8021a40:	08026108 	.word	0x08026108
 8021a44:	080260e0 	.word	0x080260e0
 8021a48:	9907      	ldr	r1, [sp, #28]
 8021a4a:	2900      	cmp	r1, #0
 8021a4c:	f000 80d0 	beq.w	8021bf0 <_dtoa_r+0x7b8>
 8021a50:	9906      	ldr	r1, [sp, #24]
 8021a52:	2901      	cmp	r1, #1
 8021a54:	f300 80b4 	bgt.w	8021bc0 <_dtoa_r+0x788>
 8021a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021a5a:	2900      	cmp	r1, #0
 8021a5c:	f000 80ac 	beq.w	8021bb8 <_dtoa_r+0x780>
 8021a60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021a64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021a68:	461c      	mov	r4, r3
 8021a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8021a6c:	9b04      	ldr	r3, [sp, #16]
 8021a6e:	4413      	add	r3, r2
 8021a70:	9304      	str	r3, [sp, #16]
 8021a72:	9b05      	ldr	r3, [sp, #20]
 8021a74:	2101      	movs	r1, #1
 8021a76:	4413      	add	r3, r2
 8021a78:	4630      	mov	r0, r6
 8021a7a:	9305      	str	r3, [sp, #20]
 8021a7c:	f000 fbe0 	bl	8022240 <__i2b>
 8021a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a82:	4607      	mov	r7, r0
 8021a84:	f1b8 0f00 	cmp.w	r8, #0
 8021a88:	d00d      	beq.n	8021aa6 <_dtoa_r+0x66e>
 8021a8a:	9a05      	ldr	r2, [sp, #20]
 8021a8c:	2a00      	cmp	r2, #0
 8021a8e:	dd0a      	ble.n	8021aa6 <_dtoa_r+0x66e>
 8021a90:	4542      	cmp	r2, r8
 8021a92:	9904      	ldr	r1, [sp, #16]
 8021a94:	bfa8      	it	ge
 8021a96:	4642      	movge	r2, r8
 8021a98:	1a89      	subs	r1, r1, r2
 8021a9a:	9104      	str	r1, [sp, #16]
 8021a9c:	9905      	ldr	r1, [sp, #20]
 8021a9e:	eba8 0802 	sub.w	r8, r8, r2
 8021aa2:	1a8a      	subs	r2, r1, r2
 8021aa4:	9205      	str	r2, [sp, #20]
 8021aa6:	b303      	cbz	r3, 8021aea <_dtoa_r+0x6b2>
 8021aa8:	9a07      	ldr	r2, [sp, #28]
 8021aaa:	2a00      	cmp	r2, #0
 8021aac:	f000 80a5 	beq.w	8021bfa <_dtoa_r+0x7c2>
 8021ab0:	2c00      	cmp	r4, #0
 8021ab2:	dd13      	ble.n	8021adc <_dtoa_r+0x6a4>
 8021ab4:	4639      	mov	r1, r7
 8021ab6:	4622      	mov	r2, r4
 8021ab8:	4630      	mov	r0, r6
 8021aba:	930d      	str	r3, [sp, #52]	; 0x34
 8021abc:	f000 fc80 	bl	80223c0 <__pow5mult>
 8021ac0:	462a      	mov	r2, r5
 8021ac2:	4601      	mov	r1, r0
 8021ac4:	4607      	mov	r7, r0
 8021ac6:	4630      	mov	r0, r6
 8021ac8:	f000 fbd0 	bl	802226c <__multiply>
 8021acc:	4629      	mov	r1, r5
 8021ace:	9009      	str	r0, [sp, #36]	; 0x24
 8021ad0:	4630      	mov	r0, r6
 8021ad2:	f000 fab5 	bl	8022040 <_Bfree>
 8021ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ada:	4615      	mov	r5, r2
 8021adc:	1b1a      	subs	r2, r3, r4
 8021ade:	d004      	beq.n	8021aea <_dtoa_r+0x6b2>
 8021ae0:	4629      	mov	r1, r5
 8021ae2:	4630      	mov	r0, r6
 8021ae4:	f000 fc6c 	bl	80223c0 <__pow5mult>
 8021ae8:	4605      	mov	r5, r0
 8021aea:	2101      	movs	r1, #1
 8021aec:	4630      	mov	r0, r6
 8021aee:	f000 fba7 	bl	8022240 <__i2b>
 8021af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	4604      	mov	r4, r0
 8021af8:	f340 8081 	ble.w	8021bfe <_dtoa_r+0x7c6>
 8021afc:	461a      	mov	r2, r3
 8021afe:	4601      	mov	r1, r0
 8021b00:	4630      	mov	r0, r6
 8021b02:	f000 fc5d 	bl	80223c0 <__pow5mult>
 8021b06:	9b06      	ldr	r3, [sp, #24]
 8021b08:	2b01      	cmp	r3, #1
 8021b0a:	4604      	mov	r4, r0
 8021b0c:	dd7a      	ble.n	8021c04 <_dtoa_r+0x7cc>
 8021b0e:	2300      	movs	r3, #0
 8021b10:	9309      	str	r3, [sp, #36]	; 0x24
 8021b12:	6922      	ldr	r2, [r4, #16]
 8021b14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021b18:	6910      	ldr	r0, [r2, #16]
 8021b1a:	f000 fb43 	bl	80221a4 <__hi0bits>
 8021b1e:	f1c0 0020 	rsb	r0, r0, #32
 8021b22:	9b05      	ldr	r3, [sp, #20]
 8021b24:	4418      	add	r0, r3
 8021b26:	f010 001f 	ands.w	r0, r0, #31
 8021b2a:	f000 8093 	beq.w	8021c54 <_dtoa_r+0x81c>
 8021b2e:	f1c0 0220 	rsb	r2, r0, #32
 8021b32:	2a04      	cmp	r2, #4
 8021b34:	f340 8085 	ble.w	8021c42 <_dtoa_r+0x80a>
 8021b38:	9b04      	ldr	r3, [sp, #16]
 8021b3a:	f1c0 001c 	rsb	r0, r0, #28
 8021b3e:	4403      	add	r3, r0
 8021b40:	9304      	str	r3, [sp, #16]
 8021b42:	9b05      	ldr	r3, [sp, #20]
 8021b44:	4480      	add	r8, r0
 8021b46:	4403      	add	r3, r0
 8021b48:	9305      	str	r3, [sp, #20]
 8021b4a:	9b04      	ldr	r3, [sp, #16]
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	dd05      	ble.n	8021b5c <_dtoa_r+0x724>
 8021b50:	4629      	mov	r1, r5
 8021b52:	461a      	mov	r2, r3
 8021b54:	4630      	mov	r0, r6
 8021b56:	f000 fc8d 	bl	8022474 <__lshift>
 8021b5a:	4605      	mov	r5, r0
 8021b5c:	9b05      	ldr	r3, [sp, #20]
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	dd05      	ble.n	8021b6e <_dtoa_r+0x736>
 8021b62:	4621      	mov	r1, r4
 8021b64:	461a      	mov	r2, r3
 8021b66:	4630      	mov	r0, r6
 8021b68:	f000 fc84 	bl	8022474 <__lshift>
 8021b6c:	4604      	mov	r4, r0
 8021b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	d071      	beq.n	8021c58 <_dtoa_r+0x820>
 8021b74:	4621      	mov	r1, r4
 8021b76:	4628      	mov	r0, r5
 8021b78:	f000 fce8 	bl	802254c <__mcmp>
 8021b7c:	2800      	cmp	r0, #0
 8021b7e:	da6b      	bge.n	8021c58 <_dtoa_r+0x820>
 8021b80:	2300      	movs	r3, #0
 8021b82:	4629      	mov	r1, r5
 8021b84:	220a      	movs	r2, #10
 8021b86:	4630      	mov	r0, r6
 8021b88:	f000 fa7c 	bl	8022084 <__multadd>
 8021b8c:	9b07      	ldr	r3, [sp, #28]
 8021b8e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8021b92:	4605      	mov	r5, r0
 8021b94:	2b00      	cmp	r3, #0
 8021b96:	f000 8197 	beq.w	8021ec8 <_dtoa_r+0xa90>
 8021b9a:	4639      	mov	r1, r7
 8021b9c:	2300      	movs	r3, #0
 8021b9e:	220a      	movs	r2, #10
 8021ba0:	4630      	mov	r0, r6
 8021ba2:	f000 fa6f 	bl	8022084 <__multadd>
 8021ba6:	f1ba 0f00 	cmp.w	sl, #0
 8021baa:	4607      	mov	r7, r0
 8021bac:	f300 8093 	bgt.w	8021cd6 <_dtoa_r+0x89e>
 8021bb0:	9b06      	ldr	r3, [sp, #24]
 8021bb2:	2b02      	cmp	r3, #2
 8021bb4:	dc57      	bgt.n	8021c66 <_dtoa_r+0x82e>
 8021bb6:	e08e      	b.n	8021cd6 <_dtoa_r+0x89e>
 8021bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021bba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8021bbe:	e751      	b.n	8021a64 <_dtoa_r+0x62c>
 8021bc0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8021bc4:	42a3      	cmp	r3, r4
 8021bc6:	bfbf      	itttt	lt
 8021bc8:	1ae2      	sublt	r2, r4, r3
 8021bca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8021bcc:	189b      	addlt	r3, r3, r2
 8021bce:	930a      	strlt	r3, [sp, #40]	; 0x28
 8021bd0:	bfae      	itee	ge
 8021bd2:	1b1c      	subge	r4, r3, r4
 8021bd4:	4623      	movlt	r3, r4
 8021bd6:	2400      	movlt	r4, #0
 8021bd8:	f1b9 0f00 	cmp.w	r9, #0
 8021bdc:	bfb5      	itete	lt
 8021bde:	9a04      	ldrlt	r2, [sp, #16]
 8021be0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8021be4:	eba2 0809 	sublt.w	r8, r2, r9
 8021be8:	464a      	movge	r2, r9
 8021bea:	bfb8      	it	lt
 8021bec:	2200      	movlt	r2, #0
 8021bee:	e73c      	b.n	8021a6a <_dtoa_r+0x632>
 8021bf0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021bf4:	9f07      	ldr	r7, [sp, #28]
 8021bf6:	461c      	mov	r4, r3
 8021bf8:	e744      	b.n	8021a84 <_dtoa_r+0x64c>
 8021bfa:	461a      	mov	r2, r3
 8021bfc:	e770      	b.n	8021ae0 <_dtoa_r+0x6a8>
 8021bfe:	9b06      	ldr	r3, [sp, #24]
 8021c00:	2b01      	cmp	r3, #1
 8021c02:	dc18      	bgt.n	8021c36 <_dtoa_r+0x7fe>
 8021c04:	9b02      	ldr	r3, [sp, #8]
 8021c06:	b9b3      	cbnz	r3, 8021c36 <_dtoa_r+0x7fe>
 8021c08:	9b03      	ldr	r3, [sp, #12]
 8021c0a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021c0e:	b9a2      	cbnz	r2, 8021c3a <_dtoa_r+0x802>
 8021c10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021c14:	0d12      	lsrs	r2, r2, #20
 8021c16:	0512      	lsls	r2, r2, #20
 8021c18:	b18a      	cbz	r2, 8021c3e <_dtoa_r+0x806>
 8021c1a:	9b04      	ldr	r3, [sp, #16]
 8021c1c:	3301      	adds	r3, #1
 8021c1e:	9304      	str	r3, [sp, #16]
 8021c20:	9b05      	ldr	r3, [sp, #20]
 8021c22:	3301      	adds	r3, #1
 8021c24:	9305      	str	r3, [sp, #20]
 8021c26:	2301      	movs	r3, #1
 8021c28:	9309      	str	r3, [sp, #36]	; 0x24
 8021c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	f47f af70 	bne.w	8021b12 <_dtoa_r+0x6da>
 8021c32:	2001      	movs	r0, #1
 8021c34:	e775      	b.n	8021b22 <_dtoa_r+0x6ea>
 8021c36:	2300      	movs	r3, #0
 8021c38:	e7f6      	b.n	8021c28 <_dtoa_r+0x7f0>
 8021c3a:	9b02      	ldr	r3, [sp, #8]
 8021c3c:	e7f4      	b.n	8021c28 <_dtoa_r+0x7f0>
 8021c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8021c40:	e7f3      	b.n	8021c2a <_dtoa_r+0x7f2>
 8021c42:	d082      	beq.n	8021b4a <_dtoa_r+0x712>
 8021c44:	9b04      	ldr	r3, [sp, #16]
 8021c46:	321c      	adds	r2, #28
 8021c48:	4413      	add	r3, r2
 8021c4a:	9304      	str	r3, [sp, #16]
 8021c4c:	9b05      	ldr	r3, [sp, #20]
 8021c4e:	4490      	add	r8, r2
 8021c50:	4413      	add	r3, r2
 8021c52:	e779      	b.n	8021b48 <_dtoa_r+0x710>
 8021c54:	4602      	mov	r2, r0
 8021c56:	e7f5      	b.n	8021c44 <_dtoa_r+0x80c>
 8021c58:	f1b9 0f00 	cmp.w	r9, #0
 8021c5c:	dc36      	bgt.n	8021ccc <_dtoa_r+0x894>
 8021c5e:	9b06      	ldr	r3, [sp, #24]
 8021c60:	2b02      	cmp	r3, #2
 8021c62:	dd33      	ble.n	8021ccc <_dtoa_r+0x894>
 8021c64:	46ca      	mov	sl, r9
 8021c66:	f1ba 0f00 	cmp.w	sl, #0
 8021c6a:	d10d      	bne.n	8021c88 <_dtoa_r+0x850>
 8021c6c:	4621      	mov	r1, r4
 8021c6e:	4653      	mov	r3, sl
 8021c70:	2205      	movs	r2, #5
 8021c72:	4630      	mov	r0, r6
 8021c74:	f000 fa06 	bl	8022084 <__multadd>
 8021c78:	4601      	mov	r1, r0
 8021c7a:	4604      	mov	r4, r0
 8021c7c:	4628      	mov	r0, r5
 8021c7e:	f000 fc65 	bl	802254c <__mcmp>
 8021c82:	2800      	cmp	r0, #0
 8021c84:	f73f ade4 	bgt.w	8021850 <_dtoa_r+0x418>
 8021c88:	9b08      	ldr	r3, [sp, #32]
 8021c8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021c8e:	ea6f 0b03 	mvn.w	fp, r3
 8021c92:	f04f 0900 	mov.w	r9, #0
 8021c96:	4621      	mov	r1, r4
 8021c98:	4630      	mov	r0, r6
 8021c9a:	f000 f9d1 	bl	8022040 <_Bfree>
 8021c9e:	2f00      	cmp	r7, #0
 8021ca0:	f43f aea1 	beq.w	80219e6 <_dtoa_r+0x5ae>
 8021ca4:	f1b9 0f00 	cmp.w	r9, #0
 8021ca8:	d005      	beq.n	8021cb6 <_dtoa_r+0x87e>
 8021caa:	45b9      	cmp	r9, r7
 8021cac:	d003      	beq.n	8021cb6 <_dtoa_r+0x87e>
 8021cae:	4649      	mov	r1, r9
 8021cb0:	4630      	mov	r0, r6
 8021cb2:	f000 f9c5 	bl	8022040 <_Bfree>
 8021cb6:	4639      	mov	r1, r7
 8021cb8:	4630      	mov	r0, r6
 8021cba:	f000 f9c1 	bl	8022040 <_Bfree>
 8021cbe:	e692      	b.n	80219e6 <_dtoa_r+0x5ae>
 8021cc0:	2400      	movs	r4, #0
 8021cc2:	4627      	mov	r7, r4
 8021cc4:	e7e0      	b.n	8021c88 <_dtoa_r+0x850>
 8021cc6:	4693      	mov	fp, r2
 8021cc8:	4627      	mov	r7, r4
 8021cca:	e5c1      	b.n	8021850 <_dtoa_r+0x418>
 8021ccc:	9b07      	ldr	r3, [sp, #28]
 8021cce:	46ca      	mov	sl, r9
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	f000 8100 	beq.w	8021ed6 <_dtoa_r+0xa9e>
 8021cd6:	f1b8 0f00 	cmp.w	r8, #0
 8021cda:	dd05      	ble.n	8021ce8 <_dtoa_r+0x8b0>
 8021cdc:	4639      	mov	r1, r7
 8021cde:	4642      	mov	r2, r8
 8021ce0:	4630      	mov	r0, r6
 8021ce2:	f000 fbc7 	bl	8022474 <__lshift>
 8021ce6:	4607      	mov	r7, r0
 8021ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d05d      	beq.n	8021daa <_dtoa_r+0x972>
 8021cee:	6879      	ldr	r1, [r7, #4]
 8021cf0:	4630      	mov	r0, r6
 8021cf2:	f000 f965 	bl	8021fc0 <_Balloc>
 8021cf6:	4680      	mov	r8, r0
 8021cf8:	b928      	cbnz	r0, 8021d06 <_dtoa_r+0x8ce>
 8021cfa:	4b82      	ldr	r3, [pc, #520]	; (8021f04 <_dtoa_r+0xacc>)
 8021cfc:	4602      	mov	r2, r0
 8021cfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8021d02:	f7ff bbb1 	b.w	8021468 <_dtoa_r+0x30>
 8021d06:	693a      	ldr	r2, [r7, #16]
 8021d08:	3202      	adds	r2, #2
 8021d0a:	0092      	lsls	r2, r2, #2
 8021d0c:	f107 010c 	add.w	r1, r7, #12
 8021d10:	300c      	adds	r0, #12
 8021d12:	f7ff fad4 	bl	80212be <memcpy>
 8021d16:	2201      	movs	r2, #1
 8021d18:	4641      	mov	r1, r8
 8021d1a:	4630      	mov	r0, r6
 8021d1c:	f000 fbaa 	bl	8022474 <__lshift>
 8021d20:	9b01      	ldr	r3, [sp, #4]
 8021d22:	3301      	adds	r3, #1
 8021d24:	9304      	str	r3, [sp, #16]
 8021d26:	9b01      	ldr	r3, [sp, #4]
 8021d28:	4453      	add	r3, sl
 8021d2a:	9308      	str	r3, [sp, #32]
 8021d2c:	9b02      	ldr	r3, [sp, #8]
 8021d2e:	f003 0301 	and.w	r3, r3, #1
 8021d32:	46b9      	mov	r9, r7
 8021d34:	9307      	str	r3, [sp, #28]
 8021d36:	4607      	mov	r7, r0
 8021d38:	9b04      	ldr	r3, [sp, #16]
 8021d3a:	4621      	mov	r1, r4
 8021d3c:	3b01      	subs	r3, #1
 8021d3e:	4628      	mov	r0, r5
 8021d40:	9302      	str	r3, [sp, #8]
 8021d42:	f7ff faef 	bl	8021324 <quorem>
 8021d46:	4603      	mov	r3, r0
 8021d48:	3330      	adds	r3, #48	; 0x30
 8021d4a:	9005      	str	r0, [sp, #20]
 8021d4c:	4649      	mov	r1, r9
 8021d4e:	4628      	mov	r0, r5
 8021d50:	9309      	str	r3, [sp, #36]	; 0x24
 8021d52:	f000 fbfb 	bl	802254c <__mcmp>
 8021d56:	463a      	mov	r2, r7
 8021d58:	4682      	mov	sl, r0
 8021d5a:	4621      	mov	r1, r4
 8021d5c:	4630      	mov	r0, r6
 8021d5e:	f000 fc11 	bl	8022584 <__mdiff>
 8021d62:	68c2      	ldr	r2, [r0, #12]
 8021d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d66:	4680      	mov	r8, r0
 8021d68:	bb0a      	cbnz	r2, 8021dae <_dtoa_r+0x976>
 8021d6a:	4601      	mov	r1, r0
 8021d6c:	4628      	mov	r0, r5
 8021d6e:	f000 fbed 	bl	802254c <__mcmp>
 8021d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d74:	4602      	mov	r2, r0
 8021d76:	4641      	mov	r1, r8
 8021d78:	4630      	mov	r0, r6
 8021d7a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8021d7e:	f000 f95f 	bl	8022040 <_Bfree>
 8021d82:	9b06      	ldr	r3, [sp, #24]
 8021d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021d86:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021d8a:	ea43 0102 	orr.w	r1, r3, r2
 8021d8e:	9b07      	ldr	r3, [sp, #28]
 8021d90:	4319      	orrs	r1, r3
 8021d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d94:	d10d      	bne.n	8021db2 <_dtoa_r+0x97a>
 8021d96:	2b39      	cmp	r3, #57	; 0x39
 8021d98:	d029      	beq.n	8021dee <_dtoa_r+0x9b6>
 8021d9a:	f1ba 0f00 	cmp.w	sl, #0
 8021d9e:	dd01      	ble.n	8021da4 <_dtoa_r+0x96c>
 8021da0:	9b05      	ldr	r3, [sp, #20]
 8021da2:	3331      	adds	r3, #49	; 0x31
 8021da4:	9a02      	ldr	r2, [sp, #8]
 8021da6:	7013      	strb	r3, [r2, #0]
 8021da8:	e775      	b.n	8021c96 <_dtoa_r+0x85e>
 8021daa:	4638      	mov	r0, r7
 8021dac:	e7b8      	b.n	8021d20 <_dtoa_r+0x8e8>
 8021dae:	2201      	movs	r2, #1
 8021db0:	e7e1      	b.n	8021d76 <_dtoa_r+0x93e>
 8021db2:	f1ba 0f00 	cmp.w	sl, #0
 8021db6:	db06      	blt.n	8021dc6 <_dtoa_r+0x98e>
 8021db8:	9906      	ldr	r1, [sp, #24]
 8021dba:	ea41 0a0a 	orr.w	sl, r1, sl
 8021dbe:	9907      	ldr	r1, [sp, #28]
 8021dc0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8021dc4:	d120      	bne.n	8021e08 <_dtoa_r+0x9d0>
 8021dc6:	2a00      	cmp	r2, #0
 8021dc8:	ddec      	ble.n	8021da4 <_dtoa_r+0x96c>
 8021dca:	4629      	mov	r1, r5
 8021dcc:	2201      	movs	r2, #1
 8021dce:	4630      	mov	r0, r6
 8021dd0:	9304      	str	r3, [sp, #16]
 8021dd2:	f000 fb4f 	bl	8022474 <__lshift>
 8021dd6:	4621      	mov	r1, r4
 8021dd8:	4605      	mov	r5, r0
 8021dda:	f000 fbb7 	bl	802254c <__mcmp>
 8021dde:	2800      	cmp	r0, #0
 8021de0:	9b04      	ldr	r3, [sp, #16]
 8021de2:	dc02      	bgt.n	8021dea <_dtoa_r+0x9b2>
 8021de4:	d1de      	bne.n	8021da4 <_dtoa_r+0x96c>
 8021de6:	07da      	lsls	r2, r3, #31
 8021de8:	d5dc      	bpl.n	8021da4 <_dtoa_r+0x96c>
 8021dea:	2b39      	cmp	r3, #57	; 0x39
 8021dec:	d1d8      	bne.n	8021da0 <_dtoa_r+0x968>
 8021dee:	9a02      	ldr	r2, [sp, #8]
 8021df0:	2339      	movs	r3, #57	; 0x39
 8021df2:	7013      	strb	r3, [r2, #0]
 8021df4:	4643      	mov	r3, r8
 8021df6:	4698      	mov	r8, r3
 8021df8:	3b01      	subs	r3, #1
 8021dfa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8021dfe:	2a39      	cmp	r2, #57	; 0x39
 8021e00:	d051      	beq.n	8021ea6 <_dtoa_r+0xa6e>
 8021e02:	3201      	adds	r2, #1
 8021e04:	701a      	strb	r2, [r3, #0]
 8021e06:	e746      	b.n	8021c96 <_dtoa_r+0x85e>
 8021e08:	2a00      	cmp	r2, #0
 8021e0a:	dd03      	ble.n	8021e14 <_dtoa_r+0x9dc>
 8021e0c:	2b39      	cmp	r3, #57	; 0x39
 8021e0e:	d0ee      	beq.n	8021dee <_dtoa_r+0x9b6>
 8021e10:	3301      	adds	r3, #1
 8021e12:	e7c7      	b.n	8021da4 <_dtoa_r+0x96c>
 8021e14:	9a04      	ldr	r2, [sp, #16]
 8021e16:	9908      	ldr	r1, [sp, #32]
 8021e18:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021e1c:	428a      	cmp	r2, r1
 8021e1e:	d02b      	beq.n	8021e78 <_dtoa_r+0xa40>
 8021e20:	4629      	mov	r1, r5
 8021e22:	2300      	movs	r3, #0
 8021e24:	220a      	movs	r2, #10
 8021e26:	4630      	mov	r0, r6
 8021e28:	f000 f92c 	bl	8022084 <__multadd>
 8021e2c:	45b9      	cmp	r9, r7
 8021e2e:	4605      	mov	r5, r0
 8021e30:	f04f 0300 	mov.w	r3, #0
 8021e34:	f04f 020a 	mov.w	r2, #10
 8021e38:	4649      	mov	r1, r9
 8021e3a:	4630      	mov	r0, r6
 8021e3c:	d107      	bne.n	8021e4e <_dtoa_r+0xa16>
 8021e3e:	f000 f921 	bl	8022084 <__multadd>
 8021e42:	4681      	mov	r9, r0
 8021e44:	4607      	mov	r7, r0
 8021e46:	9b04      	ldr	r3, [sp, #16]
 8021e48:	3301      	adds	r3, #1
 8021e4a:	9304      	str	r3, [sp, #16]
 8021e4c:	e774      	b.n	8021d38 <_dtoa_r+0x900>
 8021e4e:	f000 f919 	bl	8022084 <__multadd>
 8021e52:	4639      	mov	r1, r7
 8021e54:	4681      	mov	r9, r0
 8021e56:	2300      	movs	r3, #0
 8021e58:	220a      	movs	r2, #10
 8021e5a:	4630      	mov	r0, r6
 8021e5c:	f000 f912 	bl	8022084 <__multadd>
 8021e60:	4607      	mov	r7, r0
 8021e62:	e7f0      	b.n	8021e46 <_dtoa_r+0xa0e>
 8021e64:	f1ba 0f00 	cmp.w	sl, #0
 8021e68:	9a01      	ldr	r2, [sp, #4]
 8021e6a:	bfcc      	ite	gt
 8021e6c:	46d0      	movgt	r8, sl
 8021e6e:	f04f 0801 	movle.w	r8, #1
 8021e72:	4490      	add	r8, r2
 8021e74:	f04f 0900 	mov.w	r9, #0
 8021e78:	4629      	mov	r1, r5
 8021e7a:	2201      	movs	r2, #1
 8021e7c:	4630      	mov	r0, r6
 8021e7e:	9302      	str	r3, [sp, #8]
 8021e80:	f000 faf8 	bl	8022474 <__lshift>
 8021e84:	4621      	mov	r1, r4
 8021e86:	4605      	mov	r5, r0
 8021e88:	f000 fb60 	bl	802254c <__mcmp>
 8021e8c:	2800      	cmp	r0, #0
 8021e8e:	dcb1      	bgt.n	8021df4 <_dtoa_r+0x9bc>
 8021e90:	d102      	bne.n	8021e98 <_dtoa_r+0xa60>
 8021e92:	9b02      	ldr	r3, [sp, #8]
 8021e94:	07db      	lsls	r3, r3, #31
 8021e96:	d4ad      	bmi.n	8021df4 <_dtoa_r+0x9bc>
 8021e98:	4643      	mov	r3, r8
 8021e9a:	4698      	mov	r8, r3
 8021e9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021ea0:	2a30      	cmp	r2, #48	; 0x30
 8021ea2:	d0fa      	beq.n	8021e9a <_dtoa_r+0xa62>
 8021ea4:	e6f7      	b.n	8021c96 <_dtoa_r+0x85e>
 8021ea6:	9a01      	ldr	r2, [sp, #4]
 8021ea8:	429a      	cmp	r2, r3
 8021eaa:	d1a4      	bne.n	8021df6 <_dtoa_r+0x9be>
 8021eac:	f10b 0b01 	add.w	fp, fp, #1
 8021eb0:	2331      	movs	r3, #49	; 0x31
 8021eb2:	e778      	b.n	8021da6 <_dtoa_r+0x96e>
 8021eb4:	4b14      	ldr	r3, [pc, #80]	; (8021f08 <_dtoa_r+0xad0>)
 8021eb6:	f7ff bb2a 	b.w	802150e <_dtoa_r+0xd6>
 8021eba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	f47f ab05 	bne.w	80214cc <_dtoa_r+0x94>
 8021ec2:	4b12      	ldr	r3, [pc, #72]	; (8021f0c <_dtoa_r+0xad4>)
 8021ec4:	f7ff bb23 	b.w	802150e <_dtoa_r+0xd6>
 8021ec8:	f1ba 0f00 	cmp.w	sl, #0
 8021ecc:	dc03      	bgt.n	8021ed6 <_dtoa_r+0xa9e>
 8021ece:	9b06      	ldr	r3, [sp, #24]
 8021ed0:	2b02      	cmp	r3, #2
 8021ed2:	f73f aec8 	bgt.w	8021c66 <_dtoa_r+0x82e>
 8021ed6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021eda:	4621      	mov	r1, r4
 8021edc:	4628      	mov	r0, r5
 8021ede:	f7ff fa21 	bl	8021324 <quorem>
 8021ee2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021ee6:	f808 3b01 	strb.w	r3, [r8], #1
 8021eea:	9a01      	ldr	r2, [sp, #4]
 8021eec:	eba8 0202 	sub.w	r2, r8, r2
 8021ef0:	4592      	cmp	sl, r2
 8021ef2:	ddb7      	ble.n	8021e64 <_dtoa_r+0xa2c>
 8021ef4:	4629      	mov	r1, r5
 8021ef6:	2300      	movs	r3, #0
 8021ef8:	220a      	movs	r2, #10
 8021efa:	4630      	mov	r0, r6
 8021efc:	f000 f8c2 	bl	8022084 <__multadd>
 8021f00:	4605      	mov	r5, r0
 8021f02:	e7ea      	b.n	8021eda <_dtoa_r+0xaa2>
 8021f04:	08026076 	.word	0x08026076
 8021f08:	08025fac 	.word	0x08025fac
 8021f0c:	08026011 	.word	0x08026011

08021f10 <__env_lock>:
 8021f10:	4801      	ldr	r0, [pc, #4]	; (8021f18 <__env_lock+0x8>)
 8021f12:	f7ff b9ca 	b.w	80212aa <__retarget_lock_acquire_recursive>
 8021f16:	bf00      	nop
 8021f18:	200170c4 	.word	0x200170c4

08021f1c <__env_unlock>:
 8021f1c:	4801      	ldr	r0, [pc, #4]	; (8021f24 <__env_unlock+0x8>)
 8021f1e:	f7ff b9c5 	b.w	80212ac <__retarget_lock_release_recursive>
 8021f22:	bf00      	nop
 8021f24:	200170c4 	.word	0x200170c4

08021f28 <_free_r>:
 8021f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021f2a:	2900      	cmp	r1, #0
 8021f2c:	d044      	beq.n	8021fb8 <_free_r+0x90>
 8021f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f32:	9001      	str	r0, [sp, #4]
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	f1a1 0404 	sub.w	r4, r1, #4
 8021f3a:	bfb8      	it	lt
 8021f3c:	18e4      	addlt	r4, r4, r3
 8021f3e:	f7fd fdbd 	bl	801fabc <__malloc_lock>
 8021f42:	4a1e      	ldr	r2, [pc, #120]	; (8021fbc <_free_r+0x94>)
 8021f44:	9801      	ldr	r0, [sp, #4]
 8021f46:	6813      	ldr	r3, [r2, #0]
 8021f48:	b933      	cbnz	r3, 8021f58 <_free_r+0x30>
 8021f4a:	6063      	str	r3, [r4, #4]
 8021f4c:	6014      	str	r4, [r2, #0]
 8021f4e:	b003      	add	sp, #12
 8021f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021f54:	f7fd bdb8 	b.w	801fac8 <__malloc_unlock>
 8021f58:	42a3      	cmp	r3, r4
 8021f5a:	d908      	bls.n	8021f6e <_free_r+0x46>
 8021f5c:	6825      	ldr	r5, [r4, #0]
 8021f5e:	1961      	adds	r1, r4, r5
 8021f60:	428b      	cmp	r3, r1
 8021f62:	bf01      	itttt	eq
 8021f64:	6819      	ldreq	r1, [r3, #0]
 8021f66:	685b      	ldreq	r3, [r3, #4]
 8021f68:	1949      	addeq	r1, r1, r5
 8021f6a:	6021      	streq	r1, [r4, #0]
 8021f6c:	e7ed      	b.n	8021f4a <_free_r+0x22>
 8021f6e:	461a      	mov	r2, r3
 8021f70:	685b      	ldr	r3, [r3, #4]
 8021f72:	b10b      	cbz	r3, 8021f78 <_free_r+0x50>
 8021f74:	42a3      	cmp	r3, r4
 8021f76:	d9fa      	bls.n	8021f6e <_free_r+0x46>
 8021f78:	6811      	ldr	r1, [r2, #0]
 8021f7a:	1855      	adds	r5, r2, r1
 8021f7c:	42a5      	cmp	r5, r4
 8021f7e:	d10b      	bne.n	8021f98 <_free_r+0x70>
 8021f80:	6824      	ldr	r4, [r4, #0]
 8021f82:	4421      	add	r1, r4
 8021f84:	1854      	adds	r4, r2, r1
 8021f86:	42a3      	cmp	r3, r4
 8021f88:	6011      	str	r1, [r2, #0]
 8021f8a:	d1e0      	bne.n	8021f4e <_free_r+0x26>
 8021f8c:	681c      	ldr	r4, [r3, #0]
 8021f8e:	685b      	ldr	r3, [r3, #4]
 8021f90:	6053      	str	r3, [r2, #4]
 8021f92:	440c      	add	r4, r1
 8021f94:	6014      	str	r4, [r2, #0]
 8021f96:	e7da      	b.n	8021f4e <_free_r+0x26>
 8021f98:	d902      	bls.n	8021fa0 <_free_r+0x78>
 8021f9a:	230c      	movs	r3, #12
 8021f9c:	6003      	str	r3, [r0, #0]
 8021f9e:	e7d6      	b.n	8021f4e <_free_r+0x26>
 8021fa0:	6825      	ldr	r5, [r4, #0]
 8021fa2:	1961      	adds	r1, r4, r5
 8021fa4:	428b      	cmp	r3, r1
 8021fa6:	bf04      	itt	eq
 8021fa8:	6819      	ldreq	r1, [r3, #0]
 8021faa:	685b      	ldreq	r3, [r3, #4]
 8021fac:	6063      	str	r3, [r4, #4]
 8021fae:	bf04      	itt	eq
 8021fb0:	1949      	addeq	r1, r1, r5
 8021fb2:	6021      	streq	r1, [r4, #0]
 8021fb4:	6054      	str	r4, [r2, #4]
 8021fb6:	e7ca      	b.n	8021f4e <_free_r+0x26>
 8021fb8:	b003      	add	sp, #12
 8021fba:	bd30      	pop	{r4, r5, pc}
 8021fbc:	20016f7c 	.word	0x20016f7c

08021fc0 <_Balloc>:
 8021fc0:	b570      	push	{r4, r5, r6, lr}
 8021fc2:	69c6      	ldr	r6, [r0, #28]
 8021fc4:	4604      	mov	r4, r0
 8021fc6:	460d      	mov	r5, r1
 8021fc8:	b976      	cbnz	r6, 8021fe8 <_Balloc+0x28>
 8021fca:	2010      	movs	r0, #16
 8021fcc:	f7fd fcc6 	bl	801f95c <malloc>
 8021fd0:	4602      	mov	r2, r0
 8021fd2:	61e0      	str	r0, [r4, #28]
 8021fd4:	b920      	cbnz	r0, 8021fe0 <_Balloc+0x20>
 8021fd6:	4b18      	ldr	r3, [pc, #96]	; (8022038 <_Balloc+0x78>)
 8021fd8:	4818      	ldr	r0, [pc, #96]	; (802203c <_Balloc+0x7c>)
 8021fda:	216b      	movs	r1, #107	; 0x6b
 8021fdc:	f7ff f984 	bl	80212e8 <__assert_func>
 8021fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021fe4:	6006      	str	r6, [r0, #0]
 8021fe6:	60c6      	str	r6, [r0, #12]
 8021fe8:	69e6      	ldr	r6, [r4, #28]
 8021fea:	68f3      	ldr	r3, [r6, #12]
 8021fec:	b183      	cbz	r3, 8022010 <_Balloc+0x50>
 8021fee:	69e3      	ldr	r3, [r4, #28]
 8021ff0:	68db      	ldr	r3, [r3, #12]
 8021ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021ff6:	b9b8      	cbnz	r0, 8022028 <_Balloc+0x68>
 8021ff8:	2101      	movs	r1, #1
 8021ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8021ffe:	1d72      	adds	r2, r6, #5
 8022000:	0092      	lsls	r2, r2, #2
 8022002:	4620      	mov	r0, r4
 8022004:	f7fd fc3a 	bl	801f87c <_calloc_r>
 8022008:	b160      	cbz	r0, 8022024 <_Balloc+0x64>
 802200a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802200e:	e00e      	b.n	802202e <_Balloc+0x6e>
 8022010:	2221      	movs	r2, #33	; 0x21
 8022012:	2104      	movs	r1, #4
 8022014:	4620      	mov	r0, r4
 8022016:	f7fd fc31 	bl	801f87c <_calloc_r>
 802201a:	69e3      	ldr	r3, [r4, #28]
 802201c:	60f0      	str	r0, [r6, #12]
 802201e:	68db      	ldr	r3, [r3, #12]
 8022020:	2b00      	cmp	r3, #0
 8022022:	d1e4      	bne.n	8021fee <_Balloc+0x2e>
 8022024:	2000      	movs	r0, #0
 8022026:	bd70      	pop	{r4, r5, r6, pc}
 8022028:	6802      	ldr	r2, [r0, #0]
 802202a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802202e:	2300      	movs	r3, #0
 8022030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022034:	e7f7      	b.n	8022026 <_Balloc+0x66>
 8022036:	bf00      	nop
 8022038:	08025e2c 	.word	0x08025e2c
 802203c:	08026087 	.word	0x08026087

08022040 <_Bfree>:
 8022040:	b570      	push	{r4, r5, r6, lr}
 8022042:	69c6      	ldr	r6, [r0, #28]
 8022044:	4605      	mov	r5, r0
 8022046:	460c      	mov	r4, r1
 8022048:	b976      	cbnz	r6, 8022068 <_Bfree+0x28>
 802204a:	2010      	movs	r0, #16
 802204c:	f7fd fc86 	bl	801f95c <malloc>
 8022050:	4602      	mov	r2, r0
 8022052:	61e8      	str	r0, [r5, #28]
 8022054:	b920      	cbnz	r0, 8022060 <_Bfree+0x20>
 8022056:	4b09      	ldr	r3, [pc, #36]	; (802207c <_Bfree+0x3c>)
 8022058:	4809      	ldr	r0, [pc, #36]	; (8022080 <_Bfree+0x40>)
 802205a:	218f      	movs	r1, #143	; 0x8f
 802205c:	f7ff f944 	bl	80212e8 <__assert_func>
 8022060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022064:	6006      	str	r6, [r0, #0]
 8022066:	60c6      	str	r6, [r0, #12]
 8022068:	b13c      	cbz	r4, 802207a <_Bfree+0x3a>
 802206a:	69eb      	ldr	r3, [r5, #28]
 802206c:	6862      	ldr	r2, [r4, #4]
 802206e:	68db      	ldr	r3, [r3, #12]
 8022070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022074:	6021      	str	r1, [r4, #0]
 8022076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802207a:	bd70      	pop	{r4, r5, r6, pc}
 802207c:	08025e2c 	.word	0x08025e2c
 8022080:	08026087 	.word	0x08026087

08022084 <__multadd>:
 8022084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022088:	690d      	ldr	r5, [r1, #16]
 802208a:	4607      	mov	r7, r0
 802208c:	460c      	mov	r4, r1
 802208e:	461e      	mov	r6, r3
 8022090:	f101 0c14 	add.w	ip, r1, #20
 8022094:	2000      	movs	r0, #0
 8022096:	f8dc 3000 	ldr.w	r3, [ip]
 802209a:	b299      	uxth	r1, r3
 802209c:	fb02 6101 	mla	r1, r2, r1, r6
 80220a0:	0c1e      	lsrs	r6, r3, #16
 80220a2:	0c0b      	lsrs	r3, r1, #16
 80220a4:	fb02 3306 	mla	r3, r2, r6, r3
 80220a8:	b289      	uxth	r1, r1
 80220aa:	3001      	adds	r0, #1
 80220ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80220b0:	4285      	cmp	r5, r0
 80220b2:	f84c 1b04 	str.w	r1, [ip], #4
 80220b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80220ba:	dcec      	bgt.n	8022096 <__multadd+0x12>
 80220bc:	b30e      	cbz	r6, 8022102 <__multadd+0x7e>
 80220be:	68a3      	ldr	r3, [r4, #8]
 80220c0:	42ab      	cmp	r3, r5
 80220c2:	dc19      	bgt.n	80220f8 <__multadd+0x74>
 80220c4:	6861      	ldr	r1, [r4, #4]
 80220c6:	4638      	mov	r0, r7
 80220c8:	3101      	adds	r1, #1
 80220ca:	f7ff ff79 	bl	8021fc0 <_Balloc>
 80220ce:	4680      	mov	r8, r0
 80220d0:	b928      	cbnz	r0, 80220de <__multadd+0x5a>
 80220d2:	4602      	mov	r2, r0
 80220d4:	4b0c      	ldr	r3, [pc, #48]	; (8022108 <__multadd+0x84>)
 80220d6:	480d      	ldr	r0, [pc, #52]	; (802210c <__multadd+0x88>)
 80220d8:	21ba      	movs	r1, #186	; 0xba
 80220da:	f7ff f905 	bl	80212e8 <__assert_func>
 80220de:	6922      	ldr	r2, [r4, #16]
 80220e0:	3202      	adds	r2, #2
 80220e2:	f104 010c 	add.w	r1, r4, #12
 80220e6:	0092      	lsls	r2, r2, #2
 80220e8:	300c      	adds	r0, #12
 80220ea:	f7ff f8e8 	bl	80212be <memcpy>
 80220ee:	4621      	mov	r1, r4
 80220f0:	4638      	mov	r0, r7
 80220f2:	f7ff ffa5 	bl	8022040 <_Bfree>
 80220f6:	4644      	mov	r4, r8
 80220f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80220fc:	3501      	adds	r5, #1
 80220fe:	615e      	str	r6, [r3, #20]
 8022100:	6125      	str	r5, [r4, #16]
 8022102:	4620      	mov	r0, r4
 8022104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022108:	08026076 	.word	0x08026076
 802210c:	08026087 	.word	0x08026087

08022110 <__s2b>:
 8022110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022114:	460c      	mov	r4, r1
 8022116:	4615      	mov	r5, r2
 8022118:	461f      	mov	r7, r3
 802211a:	2209      	movs	r2, #9
 802211c:	3308      	adds	r3, #8
 802211e:	4606      	mov	r6, r0
 8022120:	fb93 f3f2 	sdiv	r3, r3, r2
 8022124:	2100      	movs	r1, #0
 8022126:	2201      	movs	r2, #1
 8022128:	429a      	cmp	r2, r3
 802212a:	db09      	blt.n	8022140 <__s2b+0x30>
 802212c:	4630      	mov	r0, r6
 802212e:	f7ff ff47 	bl	8021fc0 <_Balloc>
 8022132:	b940      	cbnz	r0, 8022146 <__s2b+0x36>
 8022134:	4602      	mov	r2, r0
 8022136:	4b19      	ldr	r3, [pc, #100]	; (802219c <__s2b+0x8c>)
 8022138:	4819      	ldr	r0, [pc, #100]	; (80221a0 <__s2b+0x90>)
 802213a:	21d3      	movs	r1, #211	; 0xd3
 802213c:	f7ff f8d4 	bl	80212e8 <__assert_func>
 8022140:	0052      	lsls	r2, r2, #1
 8022142:	3101      	adds	r1, #1
 8022144:	e7f0      	b.n	8022128 <__s2b+0x18>
 8022146:	9b08      	ldr	r3, [sp, #32]
 8022148:	6143      	str	r3, [r0, #20]
 802214a:	2d09      	cmp	r5, #9
 802214c:	f04f 0301 	mov.w	r3, #1
 8022150:	6103      	str	r3, [r0, #16]
 8022152:	dd16      	ble.n	8022182 <__s2b+0x72>
 8022154:	f104 0909 	add.w	r9, r4, #9
 8022158:	46c8      	mov	r8, r9
 802215a:	442c      	add	r4, r5
 802215c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022160:	4601      	mov	r1, r0
 8022162:	3b30      	subs	r3, #48	; 0x30
 8022164:	220a      	movs	r2, #10
 8022166:	4630      	mov	r0, r6
 8022168:	f7ff ff8c 	bl	8022084 <__multadd>
 802216c:	45a0      	cmp	r8, r4
 802216e:	d1f5      	bne.n	802215c <__s2b+0x4c>
 8022170:	f1a5 0408 	sub.w	r4, r5, #8
 8022174:	444c      	add	r4, r9
 8022176:	1b2d      	subs	r5, r5, r4
 8022178:	1963      	adds	r3, r4, r5
 802217a:	42bb      	cmp	r3, r7
 802217c:	db04      	blt.n	8022188 <__s2b+0x78>
 802217e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022182:	340a      	adds	r4, #10
 8022184:	2509      	movs	r5, #9
 8022186:	e7f6      	b.n	8022176 <__s2b+0x66>
 8022188:	f814 3b01 	ldrb.w	r3, [r4], #1
 802218c:	4601      	mov	r1, r0
 802218e:	3b30      	subs	r3, #48	; 0x30
 8022190:	220a      	movs	r2, #10
 8022192:	4630      	mov	r0, r6
 8022194:	f7ff ff76 	bl	8022084 <__multadd>
 8022198:	e7ee      	b.n	8022178 <__s2b+0x68>
 802219a:	bf00      	nop
 802219c:	08026076 	.word	0x08026076
 80221a0:	08026087 	.word	0x08026087

080221a4 <__hi0bits>:
 80221a4:	0c03      	lsrs	r3, r0, #16
 80221a6:	041b      	lsls	r3, r3, #16
 80221a8:	b9d3      	cbnz	r3, 80221e0 <__hi0bits+0x3c>
 80221aa:	0400      	lsls	r0, r0, #16
 80221ac:	2310      	movs	r3, #16
 80221ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80221b2:	bf04      	itt	eq
 80221b4:	0200      	lsleq	r0, r0, #8
 80221b6:	3308      	addeq	r3, #8
 80221b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80221bc:	bf04      	itt	eq
 80221be:	0100      	lsleq	r0, r0, #4
 80221c0:	3304      	addeq	r3, #4
 80221c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80221c6:	bf04      	itt	eq
 80221c8:	0080      	lsleq	r0, r0, #2
 80221ca:	3302      	addeq	r3, #2
 80221cc:	2800      	cmp	r0, #0
 80221ce:	db05      	blt.n	80221dc <__hi0bits+0x38>
 80221d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80221d4:	f103 0301 	add.w	r3, r3, #1
 80221d8:	bf08      	it	eq
 80221da:	2320      	moveq	r3, #32
 80221dc:	4618      	mov	r0, r3
 80221de:	4770      	bx	lr
 80221e0:	2300      	movs	r3, #0
 80221e2:	e7e4      	b.n	80221ae <__hi0bits+0xa>

080221e4 <__lo0bits>:
 80221e4:	6803      	ldr	r3, [r0, #0]
 80221e6:	f013 0207 	ands.w	r2, r3, #7
 80221ea:	d00c      	beq.n	8022206 <__lo0bits+0x22>
 80221ec:	07d9      	lsls	r1, r3, #31
 80221ee:	d422      	bmi.n	8022236 <__lo0bits+0x52>
 80221f0:	079a      	lsls	r2, r3, #30
 80221f2:	bf49      	itett	mi
 80221f4:	085b      	lsrmi	r3, r3, #1
 80221f6:	089b      	lsrpl	r3, r3, #2
 80221f8:	6003      	strmi	r3, [r0, #0]
 80221fa:	2201      	movmi	r2, #1
 80221fc:	bf5c      	itt	pl
 80221fe:	6003      	strpl	r3, [r0, #0]
 8022200:	2202      	movpl	r2, #2
 8022202:	4610      	mov	r0, r2
 8022204:	4770      	bx	lr
 8022206:	b299      	uxth	r1, r3
 8022208:	b909      	cbnz	r1, 802220e <__lo0bits+0x2a>
 802220a:	0c1b      	lsrs	r3, r3, #16
 802220c:	2210      	movs	r2, #16
 802220e:	b2d9      	uxtb	r1, r3
 8022210:	b909      	cbnz	r1, 8022216 <__lo0bits+0x32>
 8022212:	3208      	adds	r2, #8
 8022214:	0a1b      	lsrs	r3, r3, #8
 8022216:	0719      	lsls	r1, r3, #28
 8022218:	bf04      	itt	eq
 802221a:	091b      	lsreq	r3, r3, #4
 802221c:	3204      	addeq	r2, #4
 802221e:	0799      	lsls	r1, r3, #30
 8022220:	bf04      	itt	eq
 8022222:	089b      	lsreq	r3, r3, #2
 8022224:	3202      	addeq	r2, #2
 8022226:	07d9      	lsls	r1, r3, #31
 8022228:	d403      	bmi.n	8022232 <__lo0bits+0x4e>
 802222a:	085b      	lsrs	r3, r3, #1
 802222c:	f102 0201 	add.w	r2, r2, #1
 8022230:	d003      	beq.n	802223a <__lo0bits+0x56>
 8022232:	6003      	str	r3, [r0, #0]
 8022234:	e7e5      	b.n	8022202 <__lo0bits+0x1e>
 8022236:	2200      	movs	r2, #0
 8022238:	e7e3      	b.n	8022202 <__lo0bits+0x1e>
 802223a:	2220      	movs	r2, #32
 802223c:	e7e1      	b.n	8022202 <__lo0bits+0x1e>
	...

08022240 <__i2b>:
 8022240:	b510      	push	{r4, lr}
 8022242:	460c      	mov	r4, r1
 8022244:	2101      	movs	r1, #1
 8022246:	f7ff febb 	bl	8021fc0 <_Balloc>
 802224a:	4602      	mov	r2, r0
 802224c:	b928      	cbnz	r0, 802225a <__i2b+0x1a>
 802224e:	4b05      	ldr	r3, [pc, #20]	; (8022264 <__i2b+0x24>)
 8022250:	4805      	ldr	r0, [pc, #20]	; (8022268 <__i2b+0x28>)
 8022252:	f240 1145 	movw	r1, #325	; 0x145
 8022256:	f7ff f847 	bl	80212e8 <__assert_func>
 802225a:	2301      	movs	r3, #1
 802225c:	6144      	str	r4, [r0, #20]
 802225e:	6103      	str	r3, [r0, #16]
 8022260:	bd10      	pop	{r4, pc}
 8022262:	bf00      	nop
 8022264:	08026076 	.word	0x08026076
 8022268:	08026087 	.word	0x08026087

0802226c <__multiply>:
 802226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022270:	4691      	mov	r9, r2
 8022272:	690a      	ldr	r2, [r1, #16]
 8022274:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022278:	429a      	cmp	r2, r3
 802227a:	bfb8      	it	lt
 802227c:	460b      	movlt	r3, r1
 802227e:	460c      	mov	r4, r1
 8022280:	bfbc      	itt	lt
 8022282:	464c      	movlt	r4, r9
 8022284:	4699      	movlt	r9, r3
 8022286:	6927      	ldr	r7, [r4, #16]
 8022288:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802228c:	68a3      	ldr	r3, [r4, #8]
 802228e:	6861      	ldr	r1, [r4, #4]
 8022290:	eb07 060a 	add.w	r6, r7, sl
 8022294:	42b3      	cmp	r3, r6
 8022296:	b085      	sub	sp, #20
 8022298:	bfb8      	it	lt
 802229a:	3101      	addlt	r1, #1
 802229c:	f7ff fe90 	bl	8021fc0 <_Balloc>
 80222a0:	b930      	cbnz	r0, 80222b0 <__multiply+0x44>
 80222a2:	4602      	mov	r2, r0
 80222a4:	4b44      	ldr	r3, [pc, #272]	; (80223b8 <__multiply+0x14c>)
 80222a6:	4845      	ldr	r0, [pc, #276]	; (80223bc <__multiply+0x150>)
 80222a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80222ac:	f7ff f81c 	bl	80212e8 <__assert_func>
 80222b0:	f100 0514 	add.w	r5, r0, #20
 80222b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80222b8:	462b      	mov	r3, r5
 80222ba:	2200      	movs	r2, #0
 80222bc:	4543      	cmp	r3, r8
 80222be:	d321      	bcc.n	8022304 <__multiply+0x98>
 80222c0:	f104 0314 	add.w	r3, r4, #20
 80222c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80222c8:	f109 0314 	add.w	r3, r9, #20
 80222cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80222d0:	9202      	str	r2, [sp, #8]
 80222d2:	1b3a      	subs	r2, r7, r4
 80222d4:	3a15      	subs	r2, #21
 80222d6:	f022 0203 	bic.w	r2, r2, #3
 80222da:	3204      	adds	r2, #4
 80222dc:	f104 0115 	add.w	r1, r4, #21
 80222e0:	428f      	cmp	r7, r1
 80222e2:	bf38      	it	cc
 80222e4:	2204      	movcc	r2, #4
 80222e6:	9201      	str	r2, [sp, #4]
 80222e8:	9a02      	ldr	r2, [sp, #8]
 80222ea:	9303      	str	r3, [sp, #12]
 80222ec:	429a      	cmp	r2, r3
 80222ee:	d80c      	bhi.n	802230a <__multiply+0x9e>
 80222f0:	2e00      	cmp	r6, #0
 80222f2:	dd03      	ble.n	80222fc <__multiply+0x90>
 80222f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d05b      	beq.n	80223b4 <__multiply+0x148>
 80222fc:	6106      	str	r6, [r0, #16]
 80222fe:	b005      	add	sp, #20
 8022300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022304:	f843 2b04 	str.w	r2, [r3], #4
 8022308:	e7d8      	b.n	80222bc <__multiply+0x50>
 802230a:	f8b3 a000 	ldrh.w	sl, [r3]
 802230e:	f1ba 0f00 	cmp.w	sl, #0
 8022312:	d024      	beq.n	802235e <__multiply+0xf2>
 8022314:	f104 0e14 	add.w	lr, r4, #20
 8022318:	46a9      	mov	r9, r5
 802231a:	f04f 0c00 	mov.w	ip, #0
 802231e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8022322:	f8d9 1000 	ldr.w	r1, [r9]
 8022326:	fa1f fb82 	uxth.w	fp, r2
 802232a:	b289      	uxth	r1, r1
 802232c:	fb0a 110b 	mla	r1, sl, fp, r1
 8022330:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022334:	f8d9 2000 	ldr.w	r2, [r9]
 8022338:	4461      	add	r1, ip
 802233a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802233e:	fb0a c20b 	mla	r2, sl, fp, ip
 8022342:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022346:	b289      	uxth	r1, r1
 8022348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802234c:	4577      	cmp	r7, lr
 802234e:	f849 1b04 	str.w	r1, [r9], #4
 8022352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022356:	d8e2      	bhi.n	802231e <__multiply+0xb2>
 8022358:	9a01      	ldr	r2, [sp, #4]
 802235a:	f845 c002 	str.w	ip, [r5, r2]
 802235e:	9a03      	ldr	r2, [sp, #12]
 8022360:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022364:	3304      	adds	r3, #4
 8022366:	f1b9 0f00 	cmp.w	r9, #0
 802236a:	d021      	beq.n	80223b0 <__multiply+0x144>
 802236c:	6829      	ldr	r1, [r5, #0]
 802236e:	f104 0c14 	add.w	ip, r4, #20
 8022372:	46ae      	mov	lr, r5
 8022374:	f04f 0a00 	mov.w	sl, #0
 8022378:	f8bc b000 	ldrh.w	fp, [ip]
 802237c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022380:	fb09 220b 	mla	r2, r9, fp, r2
 8022384:	4452      	add	r2, sl
 8022386:	b289      	uxth	r1, r1
 8022388:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802238c:	f84e 1b04 	str.w	r1, [lr], #4
 8022390:	f85c 1b04 	ldr.w	r1, [ip], #4
 8022394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022398:	f8be 1000 	ldrh.w	r1, [lr]
 802239c:	fb09 110a 	mla	r1, r9, sl, r1
 80223a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80223a4:	4567      	cmp	r7, ip
 80223a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80223aa:	d8e5      	bhi.n	8022378 <__multiply+0x10c>
 80223ac:	9a01      	ldr	r2, [sp, #4]
 80223ae:	50a9      	str	r1, [r5, r2]
 80223b0:	3504      	adds	r5, #4
 80223b2:	e799      	b.n	80222e8 <__multiply+0x7c>
 80223b4:	3e01      	subs	r6, #1
 80223b6:	e79b      	b.n	80222f0 <__multiply+0x84>
 80223b8:	08026076 	.word	0x08026076
 80223bc:	08026087 	.word	0x08026087

080223c0 <__pow5mult>:
 80223c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80223c4:	4615      	mov	r5, r2
 80223c6:	f012 0203 	ands.w	r2, r2, #3
 80223ca:	4606      	mov	r6, r0
 80223cc:	460f      	mov	r7, r1
 80223ce:	d007      	beq.n	80223e0 <__pow5mult+0x20>
 80223d0:	4c25      	ldr	r4, [pc, #148]	; (8022468 <__pow5mult+0xa8>)
 80223d2:	3a01      	subs	r2, #1
 80223d4:	2300      	movs	r3, #0
 80223d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80223da:	f7ff fe53 	bl	8022084 <__multadd>
 80223de:	4607      	mov	r7, r0
 80223e0:	10ad      	asrs	r5, r5, #2
 80223e2:	d03d      	beq.n	8022460 <__pow5mult+0xa0>
 80223e4:	69f4      	ldr	r4, [r6, #28]
 80223e6:	b97c      	cbnz	r4, 8022408 <__pow5mult+0x48>
 80223e8:	2010      	movs	r0, #16
 80223ea:	f7fd fab7 	bl	801f95c <malloc>
 80223ee:	4602      	mov	r2, r0
 80223f0:	61f0      	str	r0, [r6, #28]
 80223f2:	b928      	cbnz	r0, 8022400 <__pow5mult+0x40>
 80223f4:	4b1d      	ldr	r3, [pc, #116]	; (802246c <__pow5mult+0xac>)
 80223f6:	481e      	ldr	r0, [pc, #120]	; (8022470 <__pow5mult+0xb0>)
 80223f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80223fc:	f7fe ff74 	bl	80212e8 <__assert_func>
 8022400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022404:	6004      	str	r4, [r0, #0]
 8022406:	60c4      	str	r4, [r0, #12]
 8022408:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802240c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022410:	b94c      	cbnz	r4, 8022426 <__pow5mult+0x66>
 8022412:	f240 2171 	movw	r1, #625	; 0x271
 8022416:	4630      	mov	r0, r6
 8022418:	f7ff ff12 	bl	8022240 <__i2b>
 802241c:	2300      	movs	r3, #0
 802241e:	f8c8 0008 	str.w	r0, [r8, #8]
 8022422:	4604      	mov	r4, r0
 8022424:	6003      	str	r3, [r0, #0]
 8022426:	f04f 0900 	mov.w	r9, #0
 802242a:	07eb      	lsls	r3, r5, #31
 802242c:	d50a      	bpl.n	8022444 <__pow5mult+0x84>
 802242e:	4639      	mov	r1, r7
 8022430:	4622      	mov	r2, r4
 8022432:	4630      	mov	r0, r6
 8022434:	f7ff ff1a 	bl	802226c <__multiply>
 8022438:	4639      	mov	r1, r7
 802243a:	4680      	mov	r8, r0
 802243c:	4630      	mov	r0, r6
 802243e:	f7ff fdff 	bl	8022040 <_Bfree>
 8022442:	4647      	mov	r7, r8
 8022444:	106d      	asrs	r5, r5, #1
 8022446:	d00b      	beq.n	8022460 <__pow5mult+0xa0>
 8022448:	6820      	ldr	r0, [r4, #0]
 802244a:	b938      	cbnz	r0, 802245c <__pow5mult+0x9c>
 802244c:	4622      	mov	r2, r4
 802244e:	4621      	mov	r1, r4
 8022450:	4630      	mov	r0, r6
 8022452:	f7ff ff0b 	bl	802226c <__multiply>
 8022456:	6020      	str	r0, [r4, #0]
 8022458:	f8c0 9000 	str.w	r9, [r0]
 802245c:	4604      	mov	r4, r0
 802245e:	e7e4      	b.n	802242a <__pow5mult+0x6a>
 8022460:	4638      	mov	r0, r7
 8022462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022466:	bf00      	nop
 8022468:	080261d0 	.word	0x080261d0
 802246c:	08025e2c 	.word	0x08025e2c
 8022470:	08026087 	.word	0x08026087

08022474 <__lshift>:
 8022474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022478:	460c      	mov	r4, r1
 802247a:	6849      	ldr	r1, [r1, #4]
 802247c:	6923      	ldr	r3, [r4, #16]
 802247e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022482:	68a3      	ldr	r3, [r4, #8]
 8022484:	4607      	mov	r7, r0
 8022486:	4691      	mov	r9, r2
 8022488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802248c:	f108 0601 	add.w	r6, r8, #1
 8022490:	42b3      	cmp	r3, r6
 8022492:	db0b      	blt.n	80224ac <__lshift+0x38>
 8022494:	4638      	mov	r0, r7
 8022496:	f7ff fd93 	bl	8021fc0 <_Balloc>
 802249a:	4605      	mov	r5, r0
 802249c:	b948      	cbnz	r0, 80224b2 <__lshift+0x3e>
 802249e:	4602      	mov	r2, r0
 80224a0:	4b28      	ldr	r3, [pc, #160]	; (8022544 <__lshift+0xd0>)
 80224a2:	4829      	ldr	r0, [pc, #164]	; (8022548 <__lshift+0xd4>)
 80224a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80224a8:	f7fe ff1e 	bl	80212e8 <__assert_func>
 80224ac:	3101      	adds	r1, #1
 80224ae:	005b      	lsls	r3, r3, #1
 80224b0:	e7ee      	b.n	8022490 <__lshift+0x1c>
 80224b2:	2300      	movs	r3, #0
 80224b4:	f100 0114 	add.w	r1, r0, #20
 80224b8:	f100 0210 	add.w	r2, r0, #16
 80224bc:	4618      	mov	r0, r3
 80224be:	4553      	cmp	r3, sl
 80224c0:	db33      	blt.n	802252a <__lshift+0xb6>
 80224c2:	6920      	ldr	r0, [r4, #16]
 80224c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80224c8:	f104 0314 	add.w	r3, r4, #20
 80224cc:	f019 091f 	ands.w	r9, r9, #31
 80224d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80224d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80224d8:	d02b      	beq.n	8022532 <__lshift+0xbe>
 80224da:	f1c9 0e20 	rsb	lr, r9, #32
 80224de:	468a      	mov	sl, r1
 80224e0:	2200      	movs	r2, #0
 80224e2:	6818      	ldr	r0, [r3, #0]
 80224e4:	fa00 f009 	lsl.w	r0, r0, r9
 80224e8:	4310      	orrs	r0, r2
 80224ea:	f84a 0b04 	str.w	r0, [sl], #4
 80224ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80224f2:	459c      	cmp	ip, r3
 80224f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80224f8:	d8f3      	bhi.n	80224e2 <__lshift+0x6e>
 80224fa:	ebac 0304 	sub.w	r3, ip, r4
 80224fe:	3b15      	subs	r3, #21
 8022500:	f023 0303 	bic.w	r3, r3, #3
 8022504:	3304      	adds	r3, #4
 8022506:	f104 0015 	add.w	r0, r4, #21
 802250a:	4584      	cmp	ip, r0
 802250c:	bf38      	it	cc
 802250e:	2304      	movcc	r3, #4
 8022510:	50ca      	str	r2, [r1, r3]
 8022512:	b10a      	cbz	r2, 8022518 <__lshift+0xa4>
 8022514:	f108 0602 	add.w	r6, r8, #2
 8022518:	3e01      	subs	r6, #1
 802251a:	4638      	mov	r0, r7
 802251c:	612e      	str	r6, [r5, #16]
 802251e:	4621      	mov	r1, r4
 8022520:	f7ff fd8e 	bl	8022040 <_Bfree>
 8022524:	4628      	mov	r0, r5
 8022526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802252a:	f842 0f04 	str.w	r0, [r2, #4]!
 802252e:	3301      	adds	r3, #1
 8022530:	e7c5      	b.n	80224be <__lshift+0x4a>
 8022532:	3904      	subs	r1, #4
 8022534:	f853 2b04 	ldr.w	r2, [r3], #4
 8022538:	f841 2f04 	str.w	r2, [r1, #4]!
 802253c:	459c      	cmp	ip, r3
 802253e:	d8f9      	bhi.n	8022534 <__lshift+0xc0>
 8022540:	e7ea      	b.n	8022518 <__lshift+0xa4>
 8022542:	bf00      	nop
 8022544:	08026076 	.word	0x08026076
 8022548:	08026087 	.word	0x08026087

0802254c <__mcmp>:
 802254c:	b530      	push	{r4, r5, lr}
 802254e:	6902      	ldr	r2, [r0, #16]
 8022550:	690c      	ldr	r4, [r1, #16]
 8022552:	1b12      	subs	r2, r2, r4
 8022554:	d10e      	bne.n	8022574 <__mcmp+0x28>
 8022556:	f100 0314 	add.w	r3, r0, #20
 802255a:	3114      	adds	r1, #20
 802255c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802256c:	42a5      	cmp	r5, r4
 802256e:	d003      	beq.n	8022578 <__mcmp+0x2c>
 8022570:	d305      	bcc.n	802257e <__mcmp+0x32>
 8022572:	2201      	movs	r2, #1
 8022574:	4610      	mov	r0, r2
 8022576:	bd30      	pop	{r4, r5, pc}
 8022578:	4283      	cmp	r3, r0
 802257a:	d3f3      	bcc.n	8022564 <__mcmp+0x18>
 802257c:	e7fa      	b.n	8022574 <__mcmp+0x28>
 802257e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022582:	e7f7      	b.n	8022574 <__mcmp+0x28>

08022584 <__mdiff>:
 8022584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022588:	460c      	mov	r4, r1
 802258a:	4606      	mov	r6, r0
 802258c:	4611      	mov	r1, r2
 802258e:	4620      	mov	r0, r4
 8022590:	4690      	mov	r8, r2
 8022592:	f7ff ffdb 	bl	802254c <__mcmp>
 8022596:	1e05      	subs	r5, r0, #0
 8022598:	d110      	bne.n	80225bc <__mdiff+0x38>
 802259a:	4629      	mov	r1, r5
 802259c:	4630      	mov	r0, r6
 802259e:	f7ff fd0f 	bl	8021fc0 <_Balloc>
 80225a2:	b930      	cbnz	r0, 80225b2 <__mdiff+0x2e>
 80225a4:	4b3a      	ldr	r3, [pc, #232]	; (8022690 <__mdiff+0x10c>)
 80225a6:	4602      	mov	r2, r0
 80225a8:	f240 2137 	movw	r1, #567	; 0x237
 80225ac:	4839      	ldr	r0, [pc, #228]	; (8022694 <__mdiff+0x110>)
 80225ae:	f7fe fe9b 	bl	80212e8 <__assert_func>
 80225b2:	2301      	movs	r3, #1
 80225b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80225b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225bc:	bfa4      	itt	ge
 80225be:	4643      	movge	r3, r8
 80225c0:	46a0      	movge	r8, r4
 80225c2:	4630      	mov	r0, r6
 80225c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80225c8:	bfa6      	itte	ge
 80225ca:	461c      	movge	r4, r3
 80225cc:	2500      	movge	r5, #0
 80225ce:	2501      	movlt	r5, #1
 80225d0:	f7ff fcf6 	bl	8021fc0 <_Balloc>
 80225d4:	b920      	cbnz	r0, 80225e0 <__mdiff+0x5c>
 80225d6:	4b2e      	ldr	r3, [pc, #184]	; (8022690 <__mdiff+0x10c>)
 80225d8:	4602      	mov	r2, r0
 80225da:	f240 2145 	movw	r1, #581	; 0x245
 80225de:	e7e5      	b.n	80225ac <__mdiff+0x28>
 80225e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80225e4:	6926      	ldr	r6, [r4, #16]
 80225e6:	60c5      	str	r5, [r0, #12]
 80225e8:	f104 0914 	add.w	r9, r4, #20
 80225ec:	f108 0514 	add.w	r5, r8, #20
 80225f0:	f100 0e14 	add.w	lr, r0, #20
 80225f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80225f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80225fc:	f108 0210 	add.w	r2, r8, #16
 8022600:	46f2      	mov	sl, lr
 8022602:	2100      	movs	r1, #0
 8022604:	f859 3b04 	ldr.w	r3, [r9], #4
 8022608:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802260c:	fa11 f88b 	uxtah	r8, r1, fp
 8022610:	b299      	uxth	r1, r3
 8022612:	0c1b      	lsrs	r3, r3, #16
 8022614:	eba8 0801 	sub.w	r8, r8, r1
 8022618:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802261c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022620:	fa1f f888 	uxth.w	r8, r8
 8022624:	1419      	asrs	r1, r3, #16
 8022626:	454e      	cmp	r6, r9
 8022628:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802262c:	f84a 3b04 	str.w	r3, [sl], #4
 8022630:	d8e8      	bhi.n	8022604 <__mdiff+0x80>
 8022632:	1b33      	subs	r3, r6, r4
 8022634:	3b15      	subs	r3, #21
 8022636:	f023 0303 	bic.w	r3, r3, #3
 802263a:	3304      	adds	r3, #4
 802263c:	3415      	adds	r4, #21
 802263e:	42a6      	cmp	r6, r4
 8022640:	bf38      	it	cc
 8022642:	2304      	movcc	r3, #4
 8022644:	441d      	add	r5, r3
 8022646:	4473      	add	r3, lr
 8022648:	469e      	mov	lr, r3
 802264a:	462e      	mov	r6, r5
 802264c:	4566      	cmp	r6, ip
 802264e:	d30e      	bcc.n	802266e <__mdiff+0xea>
 8022650:	f10c 0203 	add.w	r2, ip, #3
 8022654:	1b52      	subs	r2, r2, r5
 8022656:	f022 0203 	bic.w	r2, r2, #3
 802265a:	3d03      	subs	r5, #3
 802265c:	45ac      	cmp	ip, r5
 802265e:	bf38      	it	cc
 8022660:	2200      	movcc	r2, #0
 8022662:	4413      	add	r3, r2
 8022664:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8022668:	b17a      	cbz	r2, 802268a <__mdiff+0x106>
 802266a:	6107      	str	r7, [r0, #16]
 802266c:	e7a4      	b.n	80225b8 <__mdiff+0x34>
 802266e:	f856 8b04 	ldr.w	r8, [r6], #4
 8022672:	fa11 f288 	uxtah	r2, r1, r8
 8022676:	1414      	asrs	r4, r2, #16
 8022678:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802267c:	b292      	uxth	r2, r2
 802267e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022682:	f84e 2b04 	str.w	r2, [lr], #4
 8022686:	1421      	asrs	r1, r4, #16
 8022688:	e7e0      	b.n	802264c <__mdiff+0xc8>
 802268a:	3f01      	subs	r7, #1
 802268c:	e7ea      	b.n	8022664 <__mdiff+0xe0>
 802268e:	bf00      	nop
 8022690:	08026076 	.word	0x08026076
 8022694:	08026087 	.word	0x08026087

08022698 <__ulp>:
 8022698:	b082      	sub	sp, #8
 802269a:	ed8d 0b00 	vstr	d0, [sp]
 802269e:	9a01      	ldr	r2, [sp, #4]
 80226a0:	4b0f      	ldr	r3, [pc, #60]	; (80226e0 <__ulp+0x48>)
 80226a2:	4013      	ands	r3, r2
 80226a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80226a8:	2b00      	cmp	r3, #0
 80226aa:	dc08      	bgt.n	80226be <__ulp+0x26>
 80226ac:	425b      	negs	r3, r3
 80226ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80226b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80226b6:	da04      	bge.n	80226c2 <__ulp+0x2a>
 80226b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80226bc:	4113      	asrs	r3, r2
 80226be:	2200      	movs	r2, #0
 80226c0:	e008      	b.n	80226d4 <__ulp+0x3c>
 80226c2:	f1a2 0314 	sub.w	r3, r2, #20
 80226c6:	2b1e      	cmp	r3, #30
 80226c8:	bfda      	itte	le
 80226ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80226ce:	40da      	lsrle	r2, r3
 80226d0:	2201      	movgt	r2, #1
 80226d2:	2300      	movs	r3, #0
 80226d4:	4619      	mov	r1, r3
 80226d6:	4610      	mov	r0, r2
 80226d8:	ec41 0b10 	vmov	d0, r0, r1
 80226dc:	b002      	add	sp, #8
 80226de:	4770      	bx	lr
 80226e0:	7ff00000 	.word	0x7ff00000

080226e4 <__b2d>:
 80226e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226e8:	6906      	ldr	r6, [r0, #16]
 80226ea:	f100 0814 	add.w	r8, r0, #20
 80226ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80226f2:	1f37      	subs	r7, r6, #4
 80226f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80226f8:	4610      	mov	r0, r2
 80226fa:	f7ff fd53 	bl	80221a4 <__hi0bits>
 80226fe:	f1c0 0320 	rsb	r3, r0, #32
 8022702:	280a      	cmp	r0, #10
 8022704:	600b      	str	r3, [r1, #0]
 8022706:	491b      	ldr	r1, [pc, #108]	; (8022774 <__b2d+0x90>)
 8022708:	dc15      	bgt.n	8022736 <__b2d+0x52>
 802270a:	f1c0 0c0b 	rsb	ip, r0, #11
 802270e:	fa22 f30c 	lsr.w	r3, r2, ip
 8022712:	45b8      	cmp	r8, r7
 8022714:	ea43 0501 	orr.w	r5, r3, r1
 8022718:	bf34      	ite	cc
 802271a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802271e:	2300      	movcs	r3, #0
 8022720:	3015      	adds	r0, #21
 8022722:	fa02 f000 	lsl.w	r0, r2, r0
 8022726:	fa23 f30c 	lsr.w	r3, r3, ip
 802272a:	4303      	orrs	r3, r0
 802272c:	461c      	mov	r4, r3
 802272e:	ec45 4b10 	vmov	d0, r4, r5
 8022732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022736:	45b8      	cmp	r8, r7
 8022738:	bf3a      	itte	cc
 802273a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802273e:	f1a6 0708 	subcc.w	r7, r6, #8
 8022742:	2300      	movcs	r3, #0
 8022744:	380b      	subs	r0, #11
 8022746:	d012      	beq.n	802276e <__b2d+0x8a>
 8022748:	f1c0 0120 	rsb	r1, r0, #32
 802274c:	fa23 f401 	lsr.w	r4, r3, r1
 8022750:	4082      	lsls	r2, r0
 8022752:	4322      	orrs	r2, r4
 8022754:	4547      	cmp	r7, r8
 8022756:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802275a:	bf8c      	ite	hi
 802275c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8022760:	2200      	movls	r2, #0
 8022762:	4083      	lsls	r3, r0
 8022764:	40ca      	lsrs	r2, r1
 8022766:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802276a:	4313      	orrs	r3, r2
 802276c:	e7de      	b.n	802272c <__b2d+0x48>
 802276e:	ea42 0501 	orr.w	r5, r2, r1
 8022772:	e7db      	b.n	802272c <__b2d+0x48>
 8022774:	3ff00000 	.word	0x3ff00000

08022778 <__d2b>:
 8022778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802277c:	460f      	mov	r7, r1
 802277e:	2101      	movs	r1, #1
 8022780:	ec59 8b10 	vmov	r8, r9, d0
 8022784:	4616      	mov	r6, r2
 8022786:	f7ff fc1b 	bl	8021fc0 <_Balloc>
 802278a:	4604      	mov	r4, r0
 802278c:	b930      	cbnz	r0, 802279c <__d2b+0x24>
 802278e:	4602      	mov	r2, r0
 8022790:	4b24      	ldr	r3, [pc, #144]	; (8022824 <__d2b+0xac>)
 8022792:	4825      	ldr	r0, [pc, #148]	; (8022828 <__d2b+0xb0>)
 8022794:	f240 310f 	movw	r1, #783	; 0x30f
 8022798:	f7fe fda6 	bl	80212e8 <__assert_func>
 802279c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80227a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80227a4:	bb2d      	cbnz	r5, 80227f2 <__d2b+0x7a>
 80227a6:	9301      	str	r3, [sp, #4]
 80227a8:	f1b8 0300 	subs.w	r3, r8, #0
 80227ac:	d026      	beq.n	80227fc <__d2b+0x84>
 80227ae:	4668      	mov	r0, sp
 80227b0:	9300      	str	r3, [sp, #0]
 80227b2:	f7ff fd17 	bl	80221e4 <__lo0bits>
 80227b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80227ba:	b1e8      	cbz	r0, 80227f8 <__d2b+0x80>
 80227bc:	f1c0 0320 	rsb	r3, r0, #32
 80227c0:	fa02 f303 	lsl.w	r3, r2, r3
 80227c4:	430b      	orrs	r3, r1
 80227c6:	40c2      	lsrs	r2, r0
 80227c8:	6163      	str	r3, [r4, #20]
 80227ca:	9201      	str	r2, [sp, #4]
 80227cc:	9b01      	ldr	r3, [sp, #4]
 80227ce:	61a3      	str	r3, [r4, #24]
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	bf14      	ite	ne
 80227d4:	2202      	movne	r2, #2
 80227d6:	2201      	moveq	r2, #1
 80227d8:	6122      	str	r2, [r4, #16]
 80227da:	b1bd      	cbz	r5, 802280c <__d2b+0x94>
 80227dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80227e0:	4405      	add	r5, r0
 80227e2:	603d      	str	r5, [r7, #0]
 80227e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80227e8:	6030      	str	r0, [r6, #0]
 80227ea:	4620      	mov	r0, r4
 80227ec:	b003      	add	sp, #12
 80227ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80227f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80227f6:	e7d6      	b.n	80227a6 <__d2b+0x2e>
 80227f8:	6161      	str	r1, [r4, #20]
 80227fa:	e7e7      	b.n	80227cc <__d2b+0x54>
 80227fc:	a801      	add	r0, sp, #4
 80227fe:	f7ff fcf1 	bl	80221e4 <__lo0bits>
 8022802:	9b01      	ldr	r3, [sp, #4]
 8022804:	6163      	str	r3, [r4, #20]
 8022806:	3020      	adds	r0, #32
 8022808:	2201      	movs	r2, #1
 802280a:	e7e5      	b.n	80227d8 <__d2b+0x60>
 802280c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022814:	6038      	str	r0, [r7, #0]
 8022816:	6918      	ldr	r0, [r3, #16]
 8022818:	f7ff fcc4 	bl	80221a4 <__hi0bits>
 802281c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022820:	e7e2      	b.n	80227e8 <__d2b+0x70>
 8022822:	bf00      	nop
 8022824:	08026076 	.word	0x08026076
 8022828:	08026087 	.word	0x08026087

0802282c <__ratio>:
 802282c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022830:	4688      	mov	r8, r1
 8022832:	4669      	mov	r1, sp
 8022834:	4681      	mov	r9, r0
 8022836:	f7ff ff55 	bl	80226e4 <__b2d>
 802283a:	a901      	add	r1, sp, #4
 802283c:	4640      	mov	r0, r8
 802283e:	ec55 4b10 	vmov	r4, r5, d0
 8022842:	ee10 aa10 	vmov	sl, s0
 8022846:	f7ff ff4d 	bl	80226e4 <__b2d>
 802284a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802284e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8022852:	1ad2      	subs	r2, r2, r3
 8022854:	e9dd 3100 	ldrd	r3, r1, [sp]
 8022858:	1a5b      	subs	r3, r3, r1
 802285a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 802285e:	ec57 6b10 	vmov	r6, r7, d0
 8022862:	2b00      	cmp	r3, #0
 8022864:	bfd6      	itet	le
 8022866:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802286a:	462a      	movgt	r2, r5
 802286c:	463a      	movle	r2, r7
 802286e:	46ab      	mov	fp, r5
 8022870:	bfd6      	itet	le
 8022872:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8022876:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 802287a:	ee00 3a90 	vmovle	s1, r3
 802287e:	ec4b ab17 	vmov	d7, sl, fp
 8022882:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8022886:	b003      	add	sp, #12
 8022888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802288c <__copybits>:
 802288c:	3901      	subs	r1, #1
 802288e:	b570      	push	{r4, r5, r6, lr}
 8022890:	1149      	asrs	r1, r1, #5
 8022892:	6914      	ldr	r4, [r2, #16]
 8022894:	3101      	adds	r1, #1
 8022896:	f102 0314 	add.w	r3, r2, #20
 802289a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802289e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80228a2:	1f05      	subs	r5, r0, #4
 80228a4:	42a3      	cmp	r3, r4
 80228a6:	d30c      	bcc.n	80228c2 <__copybits+0x36>
 80228a8:	1aa3      	subs	r3, r4, r2
 80228aa:	3b11      	subs	r3, #17
 80228ac:	f023 0303 	bic.w	r3, r3, #3
 80228b0:	3211      	adds	r2, #17
 80228b2:	42a2      	cmp	r2, r4
 80228b4:	bf88      	it	hi
 80228b6:	2300      	movhi	r3, #0
 80228b8:	4418      	add	r0, r3
 80228ba:	2300      	movs	r3, #0
 80228bc:	4288      	cmp	r0, r1
 80228be:	d305      	bcc.n	80228cc <__copybits+0x40>
 80228c0:	bd70      	pop	{r4, r5, r6, pc}
 80228c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80228c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80228ca:	e7eb      	b.n	80228a4 <__copybits+0x18>
 80228cc:	f840 3b04 	str.w	r3, [r0], #4
 80228d0:	e7f4      	b.n	80228bc <__copybits+0x30>

080228d2 <__any_on>:
 80228d2:	f100 0214 	add.w	r2, r0, #20
 80228d6:	6900      	ldr	r0, [r0, #16]
 80228d8:	114b      	asrs	r3, r1, #5
 80228da:	4298      	cmp	r0, r3
 80228dc:	b510      	push	{r4, lr}
 80228de:	db11      	blt.n	8022904 <__any_on+0x32>
 80228e0:	dd0a      	ble.n	80228f8 <__any_on+0x26>
 80228e2:	f011 011f 	ands.w	r1, r1, #31
 80228e6:	d007      	beq.n	80228f8 <__any_on+0x26>
 80228e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80228ec:	fa24 f001 	lsr.w	r0, r4, r1
 80228f0:	fa00 f101 	lsl.w	r1, r0, r1
 80228f4:	428c      	cmp	r4, r1
 80228f6:	d10b      	bne.n	8022910 <__any_on+0x3e>
 80228f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80228fc:	4293      	cmp	r3, r2
 80228fe:	d803      	bhi.n	8022908 <__any_on+0x36>
 8022900:	2000      	movs	r0, #0
 8022902:	bd10      	pop	{r4, pc}
 8022904:	4603      	mov	r3, r0
 8022906:	e7f7      	b.n	80228f8 <__any_on+0x26>
 8022908:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802290c:	2900      	cmp	r1, #0
 802290e:	d0f5      	beq.n	80228fc <__any_on+0x2a>
 8022910:	2001      	movs	r0, #1
 8022912:	e7f6      	b.n	8022902 <__any_on+0x30>

08022914 <_malloc_usable_size_r>:
 8022914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022918:	1f18      	subs	r0, r3, #4
 802291a:	2b00      	cmp	r3, #0
 802291c:	bfbc      	itt	lt
 802291e:	580b      	ldrlt	r3, [r1, r0]
 8022920:	18c0      	addlt	r0, r0, r3
 8022922:	4770      	bx	lr

08022924 <sulp>:
 8022924:	b570      	push	{r4, r5, r6, lr}
 8022926:	4604      	mov	r4, r0
 8022928:	460d      	mov	r5, r1
 802292a:	4616      	mov	r6, r2
 802292c:	ec45 4b10 	vmov	d0, r4, r5
 8022930:	f7ff feb2 	bl	8022698 <__ulp>
 8022934:	b17e      	cbz	r6, 8022956 <sulp+0x32>
 8022936:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802293a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802293e:	2b00      	cmp	r3, #0
 8022940:	dd09      	ble.n	8022956 <sulp+0x32>
 8022942:	051b      	lsls	r3, r3, #20
 8022944:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8022948:	2000      	movs	r0, #0
 802294a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802294e:	ec41 0b17 	vmov	d7, r0, r1
 8022952:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022956:	bd70      	pop	{r4, r5, r6, pc}

08022958 <_strtod_l>:
 8022958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802295c:	ed2d 8b0e 	vpush	{d8-d14}
 8022960:	b097      	sub	sp, #92	; 0x5c
 8022962:	4604      	mov	r4, r0
 8022964:	920d      	str	r2, [sp, #52]	; 0x34
 8022966:	2200      	movs	r2, #0
 8022968:	9212      	str	r2, [sp, #72]	; 0x48
 802296a:	468a      	mov	sl, r1
 802296c:	f04f 0800 	mov.w	r8, #0
 8022970:	f04f 0900 	mov.w	r9, #0
 8022974:	460a      	mov	r2, r1
 8022976:	9211      	str	r2, [sp, #68]	; 0x44
 8022978:	7811      	ldrb	r1, [r2, #0]
 802297a:	292b      	cmp	r1, #43	; 0x2b
 802297c:	d04c      	beq.n	8022a18 <_strtod_l+0xc0>
 802297e:	d839      	bhi.n	80229f4 <_strtod_l+0x9c>
 8022980:	290d      	cmp	r1, #13
 8022982:	d833      	bhi.n	80229ec <_strtod_l+0x94>
 8022984:	2908      	cmp	r1, #8
 8022986:	d833      	bhi.n	80229f0 <_strtod_l+0x98>
 8022988:	2900      	cmp	r1, #0
 802298a:	d03c      	beq.n	8022a06 <_strtod_l+0xae>
 802298c:	2200      	movs	r2, #0
 802298e:	9208      	str	r2, [sp, #32]
 8022990:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022992:	7832      	ldrb	r2, [r6, #0]
 8022994:	2a30      	cmp	r2, #48	; 0x30
 8022996:	f040 80b8 	bne.w	8022b0a <_strtod_l+0x1b2>
 802299a:	7872      	ldrb	r2, [r6, #1]
 802299c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80229a0:	2a58      	cmp	r2, #88	; 0x58
 80229a2:	d170      	bne.n	8022a86 <_strtod_l+0x12e>
 80229a4:	9302      	str	r3, [sp, #8]
 80229a6:	9b08      	ldr	r3, [sp, #32]
 80229a8:	9301      	str	r3, [sp, #4]
 80229aa:	ab12      	add	r3, sp, #72	; 0x48
 80229ac:	9300      	str	r3, [sp, #0]
 80229ae:	4a91      	ldr	r2, [pc, #580]	; (8022bf4 <_strtod_l+0x29c>)
 80229b0:	ab13      	add	r3, sp, #76	; 0x4c
 80229b2:	a911      	add	r1, sp, #68	; 0x44
 80229b4:	4620      	mov	r0, r4
 80229b6:	f001 fa61 	bl	8023e7c <__gethex>
 80229ba:	f010 070f 	ands.w	r7, r0, #15
 80229be:	4605      	mov	r5, r0
 80229c0:	d005      	beq.n	80229ce <_strtod_l+0x76>
 80229c2:	2f06      	cmp	r7, #6
 80229c4:	d12a      	bne.n	8022a1c <_strtod_l+0xc4>
 80229c6:	3601      	adds	r6, #1
 80229c8:	2300      	movs	r3, #0
 80229ca:	9611      	str	r6, [sp, #68]	; 0x44
 80229cc:	9308      	str	r3, [sp, #32]
 80229ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	f040 8555 	bne.w	8023480 <_strtod_l+0xb28>
 80229d6:	9b08      	ldr	r3, [sp, #32]
 80229d8:	ec49 8b10 	vmov	d0, r8, r9
 80229dc:	b1cb      	cbz	r3, 8022a12 <_strtod_l+0xba>
 80229de:	eeb1 0b40 	vneg.f64	d0, d0
 80229e2:	b017      	add	sp, #92	; 0x5c
 80229e4:	ecbd 8b0e 	vpop	{d8-d14}
 80229e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229ec:	2920      	cmp	r1, #32
 80229ee:	d1cd      	bne.n	802298c <_strtod_l+0x34>
 80229f0:	3201      	adds	r2, #1
 80229f2:	e7c0      	b.n	8022976 <_strtod_l+0x1e>
 80229f4:	292d      	cmp	r1, #45	; 0x2d
 80229f6:	d1c9      	bne.n	802298c <_strtod_l+0x34>
 80229f8:	2101      	movs	r1, #1
 80229fa:	9108      	str	r1, [sp, #32]
 80229fc:	1c51      	adds	r1, r2, #1
 80229fe:	9111      	str	r1, [sp, #68]	; 0x44
 8022a00:	7852      	ldrb	r2, [r2, #1]
 8022a02:	2a00      	cmp	r2, #0
 8022a04:	d1c4      	bne.n	8022990 <_strtod_l+0x38>
 8022a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a08:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	f040 8535 	bne.w	802347c <_strtod_l+0xb24>
 8022a12:	ec49 8b10 	vmov	d0, r8, r9
 8022a16:	e7e4      	b.n	80229e2 <_strtod_l+0x8a>
 8022a18:	2100      	movs	r1, #0
 8022a1a:	e7ee      	b.n	80229fa <_strtod_l+0xa2>
 8022a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a1e:	b13a      	cbz	r2, 8022a30 <_strtod_l+0xd8>
 8022a20:	2135      	movs	r1, #53	; 0x35
 8022a22:	a814      	add	r0, sp, #80	; 0x50
 8022a24:	f7ff ff32 	bl	802288c <__copybits>
 8022a28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022a2a:	4620      	mov	r0, r4
 8022a2c:	f7ff fb08 	bl	8022040 <_Bfree>
 8022a30:	1e7b      	subs	r3, r7, #1
 8022a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022a34:	2b04      	cmp	r3, #4
 8022a36:	d806      	bhi.n	8022a46 <_strtod_l+0xee>
 8022a38:	e8df f003 	tbb	[pc, r3]
 8022a3c:	201d0314 	.word	0x201d0314
 8022a40:	14          	.byte	0x14
 8022a41:	00          	.byte	0x00
 8022a42:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8022a46:	05eb      	lsls	r3, r5, #23
 8022a48:	bf48      	it	mi
 8022a4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8022a4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022a52:	0d1b      	lsrs	r3, r3, #20
 8022a54:	051b      	lsls	r3, r3, #20
 8022a56:	2b00      	cmp	r3, #0
 8022a58:	d1b9      	bne.n	80229ce <_strtod_l+0x76>
 8022a5a:	f7fe fbfb 	bl	8021254 <__errno>
 8022a5e:	2322      	movs	r3, #34	; 0x22
 8022a60:	6003      	str	r3, [r0, #0]
 8022a62:	e7b4      	b.n	80229ce <_strtod_l+0x76>
 8022a64:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8022a68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8022a6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8022a70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8022a74:	e7e7      	b.n	8022a46 <_strtod_l+0xee>
 8022a76:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8022bfc <_strtod_l+0x2a4>
 8022a7a:	e7e4      	b.n	8022a46 <_strtod_l+0xee>
 8022a7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8022a80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8022a84:	e7df      	b.n	8022a46 <_strtod_l+0xee>
 8022a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022a88:	1c5a      	adds	r2, r3, #1
 8022a8a:	9211      	str	r2, [sp, #68]	; 0x44
 8022a8c:	785b      	ldrb	r3, [r3, #1]
 8022a8e:	2b30      	cmp	r3, #48	; 0x30
 8022a90:	d0f9      	beq.n	8022a86 <_strtod_l+0x12e>
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d09b      	beq.n	80229ce <_strtod_l+0x76>
 8022a96:	2301      	movs	r3, #1
 8022a98:	9306      	str	r3, [sp, #24]
 8022a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8022a9e:	2300      	movs	r3, #0
 8022aa0:	9305      	str	r3, [sp, #20]
 8022aa2:	9307      	str	r3, [sp, #28]
 8022aa4:	461e      	mov	r6, r3
 8022aa6:	220a      	movs	r2, #10
 8022aa8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022aaa:	7805      	ldrb	r5, [r0, #0]
 8022aac:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8022ab0:	b2d9      	uxtb	r1, r3
 8022ab2:	2909      	cmp	r1, #9
 8022ab4:	d92b      	bls.n	8022b0e <_strtod_l+0x1b6>
 8022ab6:	4950      	ldr	r1, [pc, #320]	; (8022bf8 <_strtod_l+0x2a0>)
 8022ab8:	2201      	movs	r2, #1
 8022aba:	f7fe fb48 	bl	802114e <strncmp>
 8022abe:	2800      	cmp	r0, #0
 8022ac0:	d035      	beq.n	8022b2e <_strtod_l+0x1d6>
 8022ac2:	2000      	movs	r0, #0
 8022ac4:	462a      	mov	r2, r5
 8022ac6:	4633      	mov	r3, r6
 8022ac8:	4683      	mov	fp, r0
 8022aca:	4601      	mov	r1, r0
 8022acc:	2a65      	cmp	r2, #101	; 0x65
 8022ace:	d001      	beq.n	8022ad4 <_strtod_l+0x17c>
 8022ad0:	2a45      	cmp	r2, #69	; 0x45
 8022ad2:	d118      	bne.n	8022b06 <_strtod_l+0x1ae>
 8022ad4:	b91b      	cbnz	r3, 8022ade <_strtod_l+0x186>
 8022ad6:	9b06      	ldr	r3, [sp, #24]
 8022ad8:	4303      	orrs	r3, r0
 8022ada:	d094      	beq.n	8022a06 <_strtod_l+0xae>
 8022adc:	2300      	movs	r3, #0
 8022ade:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8022ae2:	f10a 0201 	add.w	r2, sl, #1
 8022ae6:	9211      	str	r2, [sp, #68]	; 0x44
 8022ae8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022aec:	2a2b      	cmp	r2, #43	; 0x2b
 8022aee:	d075      	beq.n	8022bdc <_strtod_l+0x284>
 8022af0:	2a2d      	cmp	r2, #45	; 0x2d
 8022af2:	d07b      	beq.n	8022bec <_strtod_l+0x294>
 8022af4:	f04f 0e00 	mov.w	lr, #0
 8022af8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8022afc:	2d09      	cmp	r5, #9
 8022afe:	f240 8083 	bls.w	8022c08 <_strtod_l+0x2b0>
 8022b02:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8022b06:	2500      	movs	r5, #0
 8022b08:	e09e      	b.n	8022c48 <_strtod_l+0x2f0>
 8022b0a:	2300      	movs	r3, #0
 8022b0c:	e7c4      	b.n	8022a98 <_strtod_l+0x140>
 8022b0e:	2e08      	cmp	r6, #8
 8022b10:	bfd5      	itete	le
 8022b12:	9907      	ldrle	r1, [sp, #28]
 8022b14:	9905      	ldrgt	r1, [sp, #20]
 8022b16:	fb02 3301 	mlale	r3, r2, r1, r3
 8022b1a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8022b1e:	f100 0001 	add.w	r0, r0, #1
 8022b22:	bfd4      	ite	le
 8022b24:	9307      	strle	r3, [sp, #28]
 8022b26:	9305      	strgt	r3, [sp, #20]
 8022b28:	3601      	adds	r6, #1
 8022b2a:	9011      	str	r0, [sp, #68]	; 0x44
 8022b2c:	e7bc      	b.n	8022aa8 <_strtod_l+0x150>
 8022b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b30:	1c5a      	adds	r2, r3, #1
 8022b32:	9211      	str	r2, [sp, #68]	; 0x44
 8022b34:	785a      	ldrb	r2, [r3, #1]
 8022b36:	b3ae      	cbz	r6, 8022ba4 <_strtod_l+0x24c>
 8022b38:	4683      	mov	fp, r0
 8022b3a:	4633      	mov	r3, r6
 8022b3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8022b40:	2909      	cmp	r1, #9
 8022b42:	d912      	bls.n	8022b6a <_strtod_l+0x212>
 8022b44:	2101      	movs	r1, #1
 8022b46:	e7c1      	b.n	8022acc <_strtod_l+0x174>
 8022b48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b4a:	1c5a      	adds	r2, r3, #1
 8022b4c:	9211      	str	r2, [sp, #68]	; 0x44
 8022b4e:	785a      	ldrb	r2, [r3, #1]
 8022b50:	3001      	adds	r0, #1
 8022b52:	2a30      	cmp	r2, #48	; 0x30
 8022b54:	d0f8      	beq.n	8022b48 <_strtod_l+0x1f0>
 8022b56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8022b5a:	2b08      	cmp	r3, #8
 8022b5c:	f200 8495 	bhi.w	802348a <_strtod_l+0xb32>
 8022b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b62:	9309      	str	r3, [sp, #36]	; 0x24
 8022b64:	4683      	mov	fp, r0
 8022b66:	2000      	movs	r0, #0
 8022b68:	4603      	mov	r3, r0
 8022b6a:	3a30      	subs	r2, #48	; 0x30
 8022b6c:	f100 0101 	add.w	r1, r0, #1
 8022b70:	d012      	beq.n	8022b98 <_strtod_l+0x240>
 8022b72:	448b      	add	fp, r1
 8022b74:	eb00 0c03 	add.w	ip, r0, r3
 8022b78:	4619      	mov	r1, r3
 8022b7a:	250a      	movs	r5, #10
 8022b7c:	4561      	cmp	r1, ip
 8022b7e:	d113      	bne.n	8022ba8 <_strtod_l+0x250>
 8022b80:	1819      	adds	r1, r3, r0
 8022b82:	2908      	cmp	r1, #8
 8022b84:	f103 0301 	add.w	r3, r3, #1
 8022b88:	4403      	add	r3, r0
 8022b8a:	dc1b      	bgt.n	8022bc4 <_strtod_l+0x26c>
 8022b8c:	9807      	ldr	r0, [sp, #28]
 8022b8e:	210a      	movs	r1, #10
 8022b90:	fb01 2200 	mla	r2, r1, r0, r2
 8022b94:	9207      	str	r2, [sp, #28]
 8022b96:	2100      	movs	r1, #0
 8022b98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b9a:	1c50      	adds	r0, r2, #1
 8022b9c:	9011      	str	r0, [sp, #68]	; 0x44
 8022b9e:	7852      	ldrb	r2, [r2, #1]
 8022ba0:	4608      	mov	r0, r1
 8022ba2:	e7cb      	b.n	8022b3c <_strtod_l+0x1e4>
 8022ba4:	4630      	mov	r0, r6
 8022ba6:	e7d4      	b.n	8022b52 <_strtod_l+0x1fa>
 8022ba8:	2908      	cmp	r1, #8
 8022baa:	f101 0101 	add.w	r1, r1, #1
 8022bae:	dc03      	bgt.n	8022bb8 <_strtod_l+0x260>
 8022bb0:	9f07      	ldr	r7, [sp, #28]
 8022bb2:	436f      	muls	r7, r5
 8022bb4:	9707      	str	r7, [sp, #28]
 8022bb6:	e7e1      	b.n	8022b7c <_strtod_l+0x224>
 8022bb8:	2910      	cmp	r1, #16
 8022bba:	bfde      	ittt	le
 8022bbc:	9f05      	ldrle	r7, [sp, #20]
 8022bbe:	436f      	mulle	r7, r5
 8022bc0:	9705      	strle	r7, [sp, #20]
 8022bc2:	e7db      	b.n	8022b7c <_strtod_l+0x224>
 8022bc4:	2b10      	cmp	r3, #16
 8022bc6:	bfdf      	itttt	le
 8022bc8:	9805      	ldrle	r0, [sp, #20]
 8022bca:	210a      	movle	r1, #10
 8022bcc:	fb01 2200 	mlale	r2, r1, r0, r2
 8022bd0:	9205      	strle	r2, [sp, #20]
 8022bd2:	e7e0      	b.n	8022b96 <_strtod_l+0x23e>
 8022bd4:	f04f 0b00 	mov.w	fp, #0
 8022bd8:	2101      	movs	r1, #1
 8022bda:	e77c      	b.n	8022ad6 <_strtod_l+0x17e>
 8022bdc:	f04f 0e00 	mov.w	lr, #0
 8022be0:	f10a 0202 	add.w	r2, sl, #2
 8022be4:	9211      	str	r2, [sp, #68]	; 0x44
 8022be6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8022bea:	e785      	b.n	8022af8 <_strtod_l+0x1a0>
 8022bec:	f04f 0e01 	mov.w	lr, #1
 8022bf0:	e7f6      	b.n	8022be0 <_strtod_l+0x288>
 8022bf2:	bf00      	nop
 8022bf4:	080261e0 	.word	0x080261e0
 8022bf8:	080261dc 	.word	0x080261dc
 8022bfc:	7ff00000 	.word	0x7ff00000
 8022c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022c02:	1c55      	adds	r5, r2, #1
 8022c04:	9511      	str	r5, [sp, #68]	; 0x44
 8022c06:	7852      	ldrb	r2, [r2, #1]
 8022c08:	2a30      	cmp	r2, #48	; 0x30
 8022c0a:	d0f9      	beq.n	8022c00 <_strtod_l+0x2a8>
 8022c0c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8022c10:	2d08      	cmp	r5, #8
 8022c12:	f63f af78 	bhi.w	8022b06 <_strtod_l+0x1ae>
 8022c16:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8022c1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022c1c:	920a      	str	r2, [sp, #40]	; 0x28
 8022c1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022c20:	1c55      	adds	r5, r2, #1
 8022c22:	9511      	str	r5, [sp, #68]	; 0x44
 8022c24:	7852      	ldrb	r2, [r2, #1]
 8022c26:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8022c2a:	2f09      	cmp	r7, #9
 8022c2c:	d937      	bls.n	8022c9e <_strtod_l+0x346>
 8022c2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022c30:	1bed      	subs	r5, r5, r7
 8022c32:	2d08      	cmp	r5, #8
 8022c34:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8022c38:	dc02      	bgt.n	8022c40 <_strtod_l+0x2e8>
 8022c3a:	4565      	cmp	r5, ip
 8022c3c:	bfa8      	it	ge
 8022c3e:	4665      	movge	r5, ip
 8022c40:	f1be 0f00 	cmp.w	lr, #0
 8022c44:	d000      	beq.n	8022c48 <_strtod_l+0x2f0>
 8022c46:	426d      	negs	r5, r5
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	d14d      	bne.n	8022ce8 <_strtod_l+0x390>
 8022c4c:	9b06      	ldr	r3, [sp, #24]
 8022c4e:	4303      	orrs	r3, r0
 8022c50:	f47f aebd 	bne.w	80229ce <_strtod_l+0x76>
 8022c54:	2900      	cmp	r1, #0
 8022c56:	f47f aed6 	bne.w	8022a06 <_strtod_l+0xae>
 8022c5a:	2a69      	cmp	r2, #105	; 0x69
 8022c5c:	d027      	beq.n	8022cae <_strtod_l+0x356>
 8022c5e:	dc24      	bgt.n	8022caa <_strtod_l+0x352>
 8022c60:	2a49      	cmp	r2, #73	; 0x49
 8022c62:	d024      	beq.n	8022cae <_strtod_l+0x356>
 8022c64:	2a4e      	cmp	r2, #78	; 0x4e
 8022c66:	f47f aece 	bne.w	8022a06 <_strtod_l+0xae>
 8022c6a:	4995      	ldr	r1, [pc, #596]	; (8022ec0 <_strtod_l+0x568>)
 8022c6c:	a811      	add	r0, sp, #68	; 0x44
 8022c6e:	f001 fb45 	bl	80242fc <__match>
 8022c72:	2800      	cmp	r0, #0
 8022c74:	f43f aec7 	beq.w	8022a06 <_strtod_l+0xae>
 8022c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022c7a:	781b      	ldrb	r3, [r3, #0]
 8022c7c:	2b28      	cmp	r3, #40	; 0x28
 8022c7e:	d12d      	bne.n	8022cdc <_strtod_l+0x384>
 8022c80:	4990      	ldr	r1, [pc, #576]	; (8022ec4 <_strtod_l+0x56c>)
 8022c82:	aa14      	add	r2, sp, #80	; 0x50
 8022c84:	a811      	add	r0, sp, #68	; 0x44
 8022c86:	f001 fb4d 	bl	8024324 <__hexnan>
 8022c8a:	2805      	cmp	r0, #5
 8022c8c:	d126      	bne.n	8022cdc <_strtod_l+0x384>
 8022c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022c90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8022c94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8022c98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8022c9c:	e697      	b.n	80229ce <_strtod_l+0x76>
 8022c9e:	250a      	movs	r5, #10
 8022ca0:	fb05 2c0c 	mla	ip, r5, ip, r2
 8022ca4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8022ca8:	e7b9      	b.n	8022c1e <_strtod_l+0x2c6>
 8022caa:	2a6e      	cmp	r2, #110	; 0x6e
 8022cac:	e7db      	b.n	8022c66 <_strtod_l+0x30e>
 8022cae:	4986      	ldr	r1, [pc, #536]	; (8022ec8 <_strtod_l+0x570>)
 8022cb0:	a811      	add	r0, sp, #68	; 0x44
 8022cb2:	f001 fb23 	bl	80242fc <__match>
 8022cb6:	2800      	cmp	r0, #0
 8022cb8:	f43f aea5 	beq.w	8022a06 <_strtod_l+0xae>
 8022cbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022cbe:	4983      	ldr	r1, [pc, #524]	; (8022ecc <_strtod_l+0x574>)
 8022cc0:	3b01      	subs	r3, #1
 8022cc2:	a811      	add	r0, sp, #68	; 0x44
 8022cc4:	9311      	str	r3, [sp, #68]	; 0x44
 8022cc6:	f001 fb19 	bl	80242fc <__match>
 8022cca:	b910      	cbnz	r0, 8022cd2 <_strtod_l+0x37a>
 8022ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022cce:	3301      	adds	r3, #1
 8022cd0:	9311      	str	r3, [sp, #68]	; 0x44
 8022cd2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8022ee0 <_strtod_l+0x588>
 8022cd6:	f04f 0800 	mov.w	r8, #0
 8022cda:	e678      	b.n	80229ce <_strtod_l+0x76>
 8022cdc:	487c      	ldr	r0, [pc, #496]	; (8022ed0 <_strtod_l+0x578>)
 8022cde:	f001 f857 	bl	8023d90 <nan>
 8022ce2:	ec59 8b10 	vmov	r8, r9, d0
 8022ce6:	e672      	b.n	80229ce <_strtod_l+0x76>
 8022ce8:	eddd 7a07 	vldr	s15, [sp, #28]
 8022cec:	eba5 020b 	sub.w	r2, r5, fp
 8022cf0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8022cf4:	2e00      	cmp	r6, #0
 8022cf6:	bf08      	it	eq
 8022cf8:	461e      	moveq	r6, r3
 8022cfa:	2b10      	cmp	r3, #16
 8022cfc:	9206      	str	r2, [sp, #24]
 8022cfe:	461a      	mov	r2, r3
 8022d00:	bfa8      	it	ge
 8022d02:	2210      	movge	r2, #16
 8022d04:	2b09      	cmp	r3, #9
 8022d06:	ec59 8b17 	vmov	r8, r9, d7
 8022d0a:	dd0c      	ble.n	8022d26 <_strtod_l+0x3ce>
 8022d0c:	4971      	ldr	r1, [pc, #452]	; (8022ed4 <_strtod_l+0x57c>)
 8022d0e:	eddd 6a05 	vldr	s13, [sp, #20]
 8022d12:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8022d16:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8022d1a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8022d1e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022d22:	ec59 8b16 	vmov	r8, r9, d6
 8022d26:	2b0f      	cmp	r3, #15
 8022d28:	dc37      	bgt.n	8022d9a <_strtod_l+0x442>
 8022d2a:	9906      	ldr	r1, [sp, #24]
 8022d2c:	2900      	cmp	r1, #0
 8022d2e:	f43f ae4e 	beq.w	80229ce <_strtod_l+0x76>
 8022d32:	dd23      	ble.n	8022d7c <_strtod_l+0x424>
 8022d34:	2916      	cmp	r1, #22
 8022d36:	dc0b      	bgt.n	8022d50 <_strtod_l+0x3f8>
 8022d38:	4b66      	ldr	r3, [pc, #408]	; (8022ed4 <_strtod_l+0x57c>)
 8022d3a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8022d3e:	ed93 7b00 	vldr	d7, [r3]
 8022d42:	ec49 8b16 	vmov	d6, r8, r9
 8022d46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022d4a:	ec59 8b17 	vmov	r8, r9, d7
 8022d4e:	e63e      	b.n	80229ce <_strtod_l+0x76>
 8022d50:	9806      	ldr	r0, [sp, #24]
 8022d52:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8022d56:	4281      	cmp	r1, r0
 8022d58:	db1f      	blt.n	8022d9a <_strtod_l+0x442>
 8022d5a:	4a5e      	ldr	r2, [pc, #376]	; (8022ed4 <_strtod_l+0x57c>)
 8022d5c:	f1c3 030f 	rsb	r3, r3, #15
 8022d60:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8022d64:	ed91 7b00 	vldr	d7, [r1]
 8022d68:	ec49 8b16 	vmov	d6, r8, r9
 8022d6c:	1ac3      	subs	r3, r0, r3
 8022d6e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8022d72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022d76:	ed92 6b00 	vldr	d6, [r2]
 8022d7a:	e7e4      	b.n	8022d46 <_strtod_l+0x3ee>
 8022d7c:	9906      	ldr	r1, [sp, #24]
 8022d7e:	3116      	adds	r1, #22
 8022d80:	db0b      	blt.n	8022d9a <_strtod_l+0x442>
 8022d82:	4b54      	ldr	r3, [pc, #336]	; (8022ed4 <_strtod_l+0x57c>)
 8022d84:	ebab 0505 	sub.w	r5, fp, r5
 8022d88:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8022d8c:	ed95 7b00 	vldr	d7, [r5]
 8022d90:	ec49 8b16 	vmov	d6, r8, r9
 8022d94:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022d98:	e7d7      	b.n	8022d4a <_strtod_l+0x3f2>
 8022d9a:	9906      	ldr	r1, [sp, #24]
 8022d9c:	1a9a      	subs	r2, r3, r2
 8022d9e:	440a      	add	r2, r1
 8022da0:	2a00      	cmp	r2, #0
 8022da2:	dd6e      	ble.n	8022e82 <_strtod_l+0x52a>
 8022da4:	f012 000f 	ands.w	r0, r2, #15
 8022da8:	d00a      	beq.n	8022dc0 <_strtod_l+0x468>
 8022daa:	494a      	ldr	r1, [pc, #296]	; (8022ed4 <_strtod_l+0x57c>)
 8022dac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022db0:	ed91 7b00 	vldr	d7, [r1]
 8022db4:	ec49 8b16 	vmov	d6, r8, r9
 8022db8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022dbc:	ec59 8b17 	vmov	r8, r9, d7
 8022dc0:	f032 020f 	bics.w	r2, r2, #15
 8022dc4:	d04e      	beq.n	8022e64 <_strtod_l+0x50c>
 8022dc6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8022dca:	dd22      	ble.n	8022e12 <_strtod_l+0x4ba>
 8022dcc:	2500      	movs	r5, #0
 8022dce:	462e      	mov	r6, r5
 8022dd0:	9507      	str	r5, [sp, #28]
 8022dd2:	462f      	mov	r7, r5
 8022dd4:	2322      	movs	r3, #34	; 0x22
 8022dd6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8022ee0 <_strtod_l+0x588>
 8022dda:	6023      	str	r3, [r4, #0]
 8022ddc:	f04f 0800 	mov.w	r8, #0
 8022de0:	9b07      	ldr	r3, [sp, #28]
 8022de2:	2b00      	cmp	r3, #0
 8022de4:	f43f adf3 	beq.w	80229ce <_strtod_l+0x76>
 8022de8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022dea:	4620      	mov	r0, r4
 8022dec:	f7ff f928 	bl	8022040 <_Bfree>
 8022df0:	4639      	mov	r1, r7
 8022df2:	4620      	mov	r0, r4
 8022df4:	f7ff f924 	bl	8022040 <_Bfree>
 8022df8:	4631      	mov	r1, r6
 8022dfa:	4620      	mov	r0, r4
 8022dfc:	f7ff f920 	bl	8022040 <_Bfree>
 8022e00:	9907      	ldr	r1, [sp, #28]
 8022e02:	4620      	mov	r0, r4
 8022e04:	f7ff f91c 	bl	8022040 <_Bfree>
 8022e08:	4629      	mov	r1, r5
 8022e0a:	4620      	mov	r0, r4
 8022e0c:	f7ff f918 	bl	8022040 <_Bfree>
 8022e10:	e5dd      	b.n	80229ce <_strtod_l+0x76>
 8022e12:	2000      	movs	r0, #0
 8022e14:	ec49 8b17 	vmov	d7, r8, r9
 8022e18:	4f2f      	ldr	r7, [pc, #188]	; (8022ed8 <_strtod_l+0x580>)
 8022e1a:	1112      	asrs	r2, r2, #4
 8022e1c:	4601      	mov	r1, r0
 8022e1e:	2a01      	cmp	r2, #1
 8022e20:	dc23      	bgt.n	8022e6a <_strtod_l+0x512>
 8022e22:	b108      	cbz	r0, 8022e28 <_strtod_l+0x4d0>
 8022e24:	ec59 8b17 	vmov	r8, r9, d7
 8022e28:	4a2b      	ldr	r2, [pc, #172]	; (8022ed8 <_strtod_l+0x580>)
 8022e2a:	482c      	ldr	r0, [pc, #176]	; (8022edc <_strtod_l+0x584>)
 8022e2c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8022e30:	ed92 7b00 	vldr	d7, [r2]
 8022e34:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8022e38:	ec49 8b16 	vmov	d6, r8, r9
 8022e3c:	4a28      	ldr	r2, [pc, #160]	; (8022ee0 <_strtod_l+0x588>)
 8022e3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022e42:	ee17 1a90 	vmov	r1, s15
 8022e46:	400a      	ands	r2, r1
 8022e48:	4282      	cmp	r2, r0
 8022e4a:	ec59 8b17 	vmov	r8, r9, d7
 8022e4e:	d8bd      	bhi.n	8022dcc <_strtod_l+0x474>
 8022e50:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8022e54:	4282      	cmp	r2, r0
 8022e56:	bf86      	itte	hi
 8022e58:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8022ee4 <_strtod_l+0x58c>
 8022e5c:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8022e60:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8022e64:	2200      	movs	r2, #0
 8022e66:	9205      	str	r2, [sp, #20]
 8022e68:	e076      	b.n	8022f58 <_strtod_l+0x600>
 8022e6a:	f012 0f01 	tst.w	r2, #1
 8022e6e:	d004      	beq.n	8022e7a <_strtod_l+0x522>
 8022e70:	ed97 6b00 	vldr	d6, [r7]
 8022e74:	2001      	movs	r0, #1
 8022e76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022e7a:	3101      	adds	r1, #1
 8022e7c:	1052      	asrs	r2, r2, #1
 8022e7e:	3708      	adds	r7, #8
 8022e80:	e7cd      	b.n	8022e1e <_strtod_l+0x4c6>
 8022e82:	d0ef      	beq.n	8022e64 <_strtod_l+0x50c>
 8022e84:	4252      	negs	r2, r2
 8022e86:	f012 000f 	ands.w	r0, r2, #15
 8022e8a:	d00a      	beq.n	8022ea2 <_strtod_l+0x54a>
 8022e8c:	4911      	ldr	r1, [pc, #68]	; (8022ed4 <_strtod_l+0x57c>)
 8022e8e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8022e92:	ed91 7b00 	vldr	d7, [r1]
 8022e96:	ec49 8b16 	vmov	d6, r8, r9
 8022e9a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8022e9e:	ec59 8b17 	vmov	r8, r9, d7
 8022ea2:	1112      	asrs	r2, r2, #4
 8022ea4:	d0de      	beq.n	8022e64 <_strtod_l+0x50c>
 8022ea6:	2a1f      	cmp	r2, #31
 8022ea8:	dd1e      	ble.n	8022ee8 <_strtod_l+0x590>
 8022eaa:	2500      	movs	r5, #0
 8022eac:	462e      	mov	r6, r5
 8022eae:	9507      	str	r5, [sp, #28]
 8022eb0:	462f      	mov	r7, r5
 8022eb2:	2322      	movs	r3, #34	; 0x22
 8022eb4:	f04f 0800 	mov.w	r8, #0
 8022eb8:	f04f 0900 	mov.w	r9, #0
 8022ebc:	6023      	str	r3, [r4, #0]
 8022ebe:	e78f      	b.n	8022de0 <_strtod_l+0x488>
 8022ec0:	08025fa9 	.word	0x08025fa9
 8022ec4:	080261f4 	.word	0x080261f4
 8022ec8:	08025fa1 	.word	0x08025fa1
 8022ecc:	08026014 	.word	0x08026014
 8022ed0:	08026010 	.word	0x08026010
 8022ed4:	08026108 	.word	0x08026108
 8022ed8:	080260e0 	.word	0x080260e0
 8022edc:	7ca00000 	.word	0x7ca00000
 8022ee0:	7ff00000 	.word	0x7ff00000
 8022ee4:	7fefffff 	.word	0x7fefffff
 8022ee8:	f012 0110 	ands.w	r1, r2, #16
 8022eec:	bf18      	it	ne
 8022eee:	216a      	movne	r1, #106	; 0x6a
 8022ef0:	9105      	str	r1, [sp, #20]
 8022ef2:	ec49 8b17 	vmov	d7, r8, r9
 8022ef6:	49be      	ldr	r1, [pc, #760]	; (80231f0 <_strtod_l+0x898>)
 8022ef8:	2000      	movs	r0, #0
 8022efa:	07d7      	lsls	r7, r2, #31
 8022efc:	d504      	bpl.n	8022f08 <_strtod_l+0x5b0>
 8022efe:	ed91 6b00 	vldr	d6, [r1]
 8022f02:	2001      	movs	r0, #1
 8022f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022f08:	1052      	asrs	r2, r2, #1
 8022f0a:	f101 0108 	add.w	r1, r1, #8
 8022f0e:	d1f4      	bne.n	8022efa <_strtod_l+0x5a2>
 8022f10:	b108      	cbz	r0, 8022f16 <_strtod_l+0x5be>
 8022f12:	ec59 8b17 	vmov	r8, r9, d7
 8022f16:	9a05      	ldr	r2, [sp, #20]
 8022f18:	b1ba      	cbz	r2, 8022f4a <_strtod_l+0x5f2>
 8022f1a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8022f1e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8022f22:	2a00      	cmp	r2, #0
 8022f24:	4648      	mov	r0, r9
 8022f26:	dd10      	ble.n	8022f4a <_strtod_l+0x5f2>
 8022f28:	2a1f      	cmp	r2, #31
 8022f2a:	f340 812c 	ble.w	8023186 <_strtod_l+0x82e>
 8022f2e:	2a34      	cmp	r2, #52	; 0x34
 8022f30:	bfde      	ittt	le
 8022f32:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8022f36:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8022f3a:	408a      	lslle	r2, r1
 8022f3c:	f04f 0800 	mov.w	r8, #0
 8022f40:	bfcc      	ite	gt
 8022f42:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8022f46:	ea02 0900 	andle.w	r9, r2, r0
 8022f4a:	ec49 8b17 	vmov	d7, r8, r9
 8022f4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f56:	d0a8      	beq.n	8022eaa <_strtod_l+0x552>
 8022f58:	9a07      	ldr	r2, [sp, #28]
 8022f5a:	9200      	str	r2, [sp, #0]
 8022f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022f5e:	4632      	mov	r2, r6
 8022f60:	4620      	mov	r0, r4
 8022f62:	f7ff f8d5 	bl	8022110 <__s2b>
 8022f66:	9007      	str	r0, [sp, #28]
 8022f68:	2800      	cmp	r0, #0
 8022f6a:	f43f af2f 	beq.w	8022dcc <_strtod_l+0x474>
 8022f6e:	9a06      	ldr	r2, [sp, #24]
 8022f70:	2a00      	cmp	r2, #0
 8022f72:	ebab 0305 	sub.w	r3, fp, r5
 8022f76:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80231d0 <_strtod_l+0x878>
 8022f7a:	bfa8      	it	ge
 8022f7c:	2300      	movge	r3, #0
 8022f7e:	ed9f ab96 	vldr	d10, [pc, #600]	; 80231d8 <_strtod_l+0x880>
 8022f82:	ed9f bb97 	vldr	d11, [pc, #604]	; 80231e0 <_strtod_l+0x888>
 8022f86:	9309      	str	r3, [sp, #36]	; 0x24
 8022f88:	2500      	movs	r5, #0
 8022f8a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8022f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8022f90:	462e      	mov	r6, r5
 8022f92:	9b07      	ldr	r3, [sp, #28]
 8022f94:	4620      	mov	r0, r4
 8022f96:	6859      	ldr	r1, [r3, #4]
 8022f98:	f7ff f812 	bl	8021fc0 <_Balloc>
 8022f9c:	4607      	mov	r7, r0
 8022f9e:	2800      	cmp	r0, #0
 8022fa0:	f43f af18 	beq.w	8022dd4 <_strtod_l+0x47c>
 8022fa4:	9b07      	ldr	r3, [sp, #28]
 8022fa6:	691a      	ldr	r2, [r3, #16]
 8022fa8:	3202      	adds	r2, #2
 8022faa:	f103 010c 	add.w	r1, r3, #12
 8022fae:	0092      	lsls	r2, r2, #2
 8022fb0:	300c      	adds	r0, #12
 8022fb2:	f7fe f984 	bl	80212be <memcpy>
 8022fb6:	ec49 8b10 	vmov	d0, r8, r9
 8022fba:	aa14      	add	r2, sp, #80	; 0x50
 8022fbc:	a913      	add	r1, sp, #76	; 0x4c
 8022fbe:	4620      	mov	r0, r4
 8022fc0:	f7ff fbda 	bl	8022778 <__d2b>
 8022fc4:	ec49 8b18 	vmov	d8, r8, r9
 8022fc8:	9012      	str	r0, [sp, #72]	; 0x48
 8022fca:	2800      	cmp	r0, #0
 8022fcc:	f43f af02 	beq.w	8022dd4 <_strtod_l+0x47c>
 8022fd0:	2101      	movs	r1, #1
 8022fd2:	4620      	mov	r0, r4
 8022fd4:	f7ff f934 	bl	8022240 <__i2b>
 8022fd8:	4606      	mov	r6, r0
 8022fda:	2800      	cmp	r0, #0
 8022fdc:	f43f aefa 	beq.w	8022dd4 <_strtod_l+0x47c>
 8022fe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022fe2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	bfab      	itete	ge
 8022fe8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8022fea:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8022fec:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8022ff0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8022ff4:	bfac      	ite	ge
 8022ff6:	eb03 0b02 	addge.w	fp, r3, r2
 8022ffa:	eba2 0a03 	sublt.w	sl, r2, r3
 8022ffe:	9a05      	ldr	r2, [sp, #20]
 8023000:	1a9b      	subs	r3, r3, r2
 8023002:	440b      	add	r3, r1
 8023004:	4a7b      	ldr	r2, [pc, #492]	; (80231f4 <_strtod_l+0x89c>)
 8023006:	3b01      	subs	r3, #1
 8023008:	4293      	cmp	r3, r2
 802300a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 802300e:	f280 80cd 	bge.w	80231ac <_strtod_l+0x854>
 8023012:	1ad2      	subs	r2, r2, r3
 8023014:	2a1f      	cmp	r2, #31
 8023016:	eba1 0102 	sub.w	r1, r1, r2
 802301a:	f04f 0001 	mov.w	r0, #1
 802301e:	f300 80b9 	bgt.w	8023194 <_strtod_l+0x83c>
 8023022:	fa00 f302 	lsl.w	r3, r0, r2
 8023026:	930b      	str	r3, [sp, #44]	; 0x2c
 8023028:	2300      	movs	r3, #0
 802302a:	930a      	str	r3, [sp, #40]	; 0x28
 802302c:	eb0b 0301 	add.w	r3, fp, r1
 8023030:	9a05      	ldr	r2, [sp, #20]
 8023032:	459b      	cmp	fp, r3
 8023034:	448a      	add	sl, r1
 8023036:	4492      	add	sl, r2
 8023038:	465a      	mov	r2, fp
 802303a:	bfa8      	it	ge
 802303c:	461a      	movge	r2, r3
 802303e:	4552      	cmp	r2, sl
 8023040:	bfa8      	it	ge
 8023042:	4652      	movge	r2, sl
 8023044:	2a00      	cmp	r2, #0
 8023046:	bfc2      	ittt	gt
 8023048:	1a9b      	subgt	r3, r3, r2
 802304a:	ebaa 0a02 	subgt.w	sl, sl, r2
 802304e:	ebab 0b02 	subgt.w	fp, fp, r2
 8023052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023054:	2a00      	cmp	r2, #0
 8023056:	dd18      	ble.n	802308a <_strtod_l+0x732>
 8023058:	4631      	mov	r1, r6
 802305a:	4620      	mov	r0, r4
 802305c:	930f      	str	r3, [sp, #60]	; 0x3c
 802305e:	f7ff f9af 	bl	80223c0 <__pow5mult>
 8023062:	4606      	mov	r6, r0
 8023064:	2800      	cmp	r0, #0
 8023066:	f43f aeb5 	beq.w	8022dd4 <_strtod_l+0x47c>
 802306a:	4601      	mov	r1, r0
 802306c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802306e:	4620      	mov	r0, r4
 8023070:	f7ff f8fc 	bl	802226c <__multiply>
 8023074:	900e      	str	r0, [sp, #56]	; 0x38
 8023076:	2800      	cmp	r0, #0
 8023078:	f43f aeac 	beq.w	8022dd4 <_strtod_l+0x47c>
 802307c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802307e:	4620      	mov	r0, r4
 8023080:	f7fe ffde 	bl	8022040 <_Bfree>
 8023084:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023088:	9212      	str	r2, [sp, #72]	; 0x48
 802308a:	2b00      	cmp	r3, #0
 802308c:	f300 8093 	bgt.w	80231b6 <_strtod_l+0x85e>
 8023090:	9b06      	ldr	r3, [sp, #24]
 8023092:	2b00      	cmp	r3, #0
 8023094:	dd08      	ble.n	80230a8 <_strtod_l+0x750>
 8023096:	4639      	mov	r1, r7
 8023098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802309a:	4620      	mov	r0, r4
 802309c:	f7ff f990 	bl	80223c0 <__pow5mult>
 80230a0:	4607      	mov	r7, r0
 80230a2:	2800      	cmp	r0, #0
 80230a4:	f43f ae96 	beq.w	8022dd4 <_strtod_l+0x47c>
 80230a8:	f1ba 0f00 	cmp.w	sl, #0
 80230ac:	dd08      	ble.n	80230c0 <_strtod_l+0x768>
 80230ae:	4639      	mov	r1, r7
 80230b0:	4652      	mov	r2, sl
 80230b2:	4620      	mov	r0, r4
 80230b4:	f7ff f9de 	bl	8022474 <__lshift>
 80230b8:	4607      	mov	r7, r0
 80230ba:	2800      	cmp	r0, #0
 80230bc:	f43f ae8a 	beq.w	8022dd4 <_strtod_l+0x47c>
 80230c0:	f1bb 0f00 	cmp.w	fp, #0
 80230c4:	dd08      	ble.n	80230d8 <_strtod_l+0x780>
 80230c6:	4631      	mov	r1, r6
 80230c8:	465a      	mov	r2, fp
 80230ca:	4620      	mov	r0, r4
 80230cc:	f7ff f9d2 	bl	8022474 <__lshift>
 80230d0:	4606      	mov	r6, r0
 80230d2:	2800      	cmp	r0, #0
 80230d4:	f43f ae7e 	beq.w	8022dd4 <_strtod_l+0x47c>
 80230d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80230da:	463a      	mov	r2, r7
 80230dc:	4620      	mov	r0, r4
 80230de:	f7ff fa51 	bl	8022584 <__mdiff>
 80230e2:	4605      	mov	r5, r0
 80230e4:	2800      	cmp	r0, #0
 80230e6:	f43f ae75 	beq.w	8022dd4 <_strtod_l+0x47c>
 80230ea:	2300      	movs	r3, #0
 80230ec:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80230f0:	60c3      	str	r3, [r0, #12]
 80230f2:	4631      	mov	r1, r6
 80230f4:	f7ff fa2a 	bl	802254c <__mcmp>
 80230f8:	2800      	cmp	r0, #0
 80230fa:	da7f      	bge.n	80231fc <_strtod_l+0x8a4>
 80230fc:	ea5a 0a08 	orrs.w	sl, sl, r8
 8023100:	f040 80a5 	bne.w	802324e <_strtod_l+0x8f6>
 8023104:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023108:	2b00      	cmp	r3, #0
 802310a:	f040 80a0 	bne.w	802324e <_strtod_l+0x8f6>
 802310e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8023112:	0d1b      	lsrs	r3, r3, #20
 8023114:	051b      	lsls	r3, r3, #20
 8023116:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802311a:	f240 8098 	bls.w	802324e <_strtod_l+0x8f6>
 802311e:	696b      	ldr	r3, [r5, #20]
 8023120:	b91b      	cbnz	r3, 802312a <_strtod_l+0x7d2>
 8023122:	692b      	ldr	r3, [r5, #16]
 8023124:	2b01      	cmp	r3, #1
 8023126:	f340 8092 	ble.w	802324e <_strtod_l+0x8f6>
 802312a:	4629      	mov	r1, r5
 802312c:	2201      	movs	r2, #1
 802312e:	4620      	mov	r0, r4
 8023130:	f7ff f9a0 	bl	8022474 <__lshift>
 8023134:	4631      	mov	r1, r6
 8023136:	4605      	mov	r5, r0
 8023138:	f7ff fa08 	bl	802254c <__mcmp>
 802313c:	2800      	cmp	r0, #0
 802313e:	f340 8086 	ble.w	802324e <_strtod_l+0x8f6>
 8023142:	9905      	ldr	r1, [sp, #20]
 8023144:	4a2c      	ldr	r2, [pc, #176]	; (80231f8 <_strtod_l+0x8a0>)
 8023146:	464b      	mov	r3, r9
 8023148:	2900      	cmp	r1, #0
 802314a:	f000 809f 	beq.w	802328c <_strtod_l+0x934>
 802314e:	ea02 0109 	and.w	r1, r2, r9
 8023152:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8023156:	f300 8099 	bgt.w	802328c <_strtod_l+0x934>
 802315a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802315e:	f77f aea8 	ble.w	8022eb2 <_strtod_l+0x55a>
 8023162:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80231e8 <_strtod_l+0x890>
 8023166:	ec49 8b16 	vmov	d6, r8, r9
 802316a:	4b23      	ldr	r3, [pc, #140]	; (80231f8 <_strtod_l+0x8a0>)
 802316c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023170:	ee17 2a90 	vmov	r2, s15
 8023174:	4013      	ands	r3, r2
 8023176:	ec59 8b17 	vmov	r8, r9, d7
 802317a:	2b00      	cmp	r3, #0
 802317c:	f47f ae34 	bne.w	8022de8 <_strtod_l+0x490>
 8023180:	2322      	movs	r3, #34	; 0x22
 8023182:	6023      	str	r3, [r4, #0]
 8023184:	e630      	b.n	8022de8 <_strtod_l+0x490>
 8023186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802318a:	fa01 f202 	lsl.w	r2, r1, r2
 802318e:	ea02 0808 	and.w	r8, r2, r8
 8023192:	e6da      	b.n	8022f4a <_strtod_l+0x5f2>
 8023194:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8023198:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 802319c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80231a0:	33e2      	adds	r3, #226	; 0xe2
 80231a2:	fa00 f303 	lsl.w	r3, r0, r3
 80231a6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80231aa:	e73f      	b.n	802302c <_strtod_l+0x6d4>
 80231ac:	2200      	movs	r2, #0
 80231ae:	2301      	movs	r3, #1
 80231b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80231b4:	e73a      	b.n	802302c <_strtod_l+0x6d4>
 80231b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80231b8:	461a      	mov	r2, r3
 80231ba:	4620      	mov	r0, r4
 80231bc:	f7ff f95a 	bl	8022474 <__lshift>
 80231c0:	9012      	str	r0, [sp, #72]	; 0x48
 80231c2:	2800      	cmp	r0, #0
 80231c4:	f47f af64 	bne.w	8023090 <_strtod_l+0x738>
 80231c8:	e604      	b.n	8022dd4 <_strtod_l+0x47c>
 80231ca:	bf00      	nop
 80231cc:	f3af 8000 	nop.w
 80231d0:	94a03595 	.word	0x94a03595
 80231d4:	3fcfffff 	.word	0x3fcfffff
 80231d8:	94a03595 	.word	0x94a03595
 80231dc:	3fdfffff 	.word	0x3fdfffff
 80231e0:	35afe535 	.word	0x35afe535
 80231e4:	3fe00000 	.word	0x3fe00000
 80231e8:	00000000 	.word	0x00000000
 80231ec:	39500000 	.word	0x39500000
 80231f0:	08026208 	.word	0x08026208
 80231f4:	fffffc02 	.word	0xfffffc02
 80231f8:	7ff00000 	.word	0x7ff00000
 80231fc:	46cb      	mov	fp, r9
 80231fe:	d15f      	bne.n	80232c0 <_strtod_l+0x968>
 8023200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023204:	f1ba 0f00 	cmp.w	sl, #0
 8023208:	d02a      	beq.n	8023260 <_strtod_l+0x908>
 802320a:	4aa7      	ldr	r2, [pc, #668]	; (80234a8 <_strtod_l+0xb50>)
 802320c:	4293      	cmp	r3, r2
 802320e:	d12b      	bne.n	8023268 <_strtod_l+0x910>
 8023210:	9b05      	ldr	r3, [sp, #20]
 8023212:	4642      	mov	r2, r8
 8023214:	b1fb      	cbz	r3, 8023256 <_strtod_l+0x8fe>
 8023216:	4ba5      	ldr	r3, [pc, #660]	; (80234ac <_strtod_l+0xb54>)
 8023218:	ea09 0303 	and.w	r3, r9, r3
 802321c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8023220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8023224:	d81a      	bhi.n	802325c <_strtod_l+0x904>
 8023226:	0d1b      	lsrs	r3, r3, #20
 8023228:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802322c:	fa01 f303 	lsl.w	r3, r1, r3
 8023230:	429a      	cmp	r2, r3
 8023232:	d119      	bne.n	8023268 <_strtod_l+0x910>
 8023234:	4b9e      	ldr	r3, [pc, #632]	; (80234b0 <_strtod_l+0xb58>)
 8023236:	459b      	cmp	fp, r3
 8023238:	d102      	bne.n	8023240 <_strtod_l+0x8e8>
 802323a:	3201      	adds	r2, #1
 802323c:	f43f adca 	beq.w	8022dd4 <_strtod_l+0x47c>
 8023240:	4b9a      	ldr	r3, [pc, #616]	; (80234ac <_strtod_l+0xb54>)
 8023242:	ea0b 0303 	and.w	r3, fp, r3
 8023246:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802324a:	f04f 0800 	mov.w	r8, #0
 802324e:	9b05      	ldr	r3, [sp, #20]
 8023250:	2b00      	cmp	r3, #0
 8023252:	d186      	bne.n	8023162 <_strtod_l+0x80a>
 8023254:	e5c8      	b.n	8022de8 <_strtod_l+0x490>
 8023256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802325a:	e7e9      	b.n	8023230 <_strtod_l+0x8d8>
 802325c:	460b      	mov	r3, r1
 802325e:	e7e7      	b.n	8023230 <_strtod_l+0x8d8>
 8023260:	ea53 0308 	orrs.w	r3, r3, r8
 8023264:	f43f af6d 	beq.w	8023142 <_strtod_l+0x7ea>
 8023268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802326a:	b1cb      	cbz	r3, 80232a0 <_strtod_l+0x948>
 802326c:	ea13 0f0b 	tst.w	r3, fp
 8023270:	d0ed      	beq.n	802324e <_strtod_l+0x8f6>
 8023272:	9a05      	ldr	r2, [sp, #20]
 8023274:	4640      	mov	r0, r8
 8023276:	4649      	mov	r1, r9
 8023278:	f1ba 0f00 	cmp.w	sl, #0
 802327c:	d014      	beq.n	80232a8 <_strtod_l+0x950>
 802327e:	f7ff fb51 	bl	8022924 <sulp>
 8023282:	ee38 7b00 	vadd.f64	d7, d8, d0
 8023286:	ec59 8b17 	vmov	r8, r9, d7
 802328a:	e7e0      	b.n	802324e <_strtod_l+0x8f6>
 802328c:	4013      	ands	r3, r2
 802328e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8023292:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8023296:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802329a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802329e:	e7d6      	b.n	802324e <_strtod_l+0x8f6>
 80232a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80232a2:	ea13 0f08 	tst.w	r3, r8
 80232a6:	e7e3      	b.n	8023270 <_strtod_l+0x918>
 80232a8:	f7ff fb3c 	bl	8022924 <sulp>
 80232ac:	ee38 0b40 	vsub.f64	d0, d8, d0
 80232b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80232b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232b8:	ec59 8b10 	vmov	r8, r9, d0
 80232bc:	d1c7      	bne.n	802324e <_strtod_l+0x8f6>
 80232be:	e5f8      	b.n	8022eb2 <_strtod_l+0x55a>
 80232c0:	4631      	mov	r1, r6
 80232c2:	4628      	mov	r0, r5
 80232c4:	f7ff fab2 	bl	802282c <__ratio>
 80232c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80232cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80232d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232d4:	d85f      	bhi.n	8023396 <_strtod_l+0xa3e>
 80232d6:	f1ba 0f00 	cmp.w	sl, #0
 80232da:	d166      	bne.n	80233aa <_strtod_l+0xa52>
 80232dc:	f1b8 0f00 	cmp.w	r8, #0
 80232e0:	d14d      	bne.n	802337e <_strtod_l+0xa26>
 80232e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80232e6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80232ea:	2b00      	cmp	r3, #0
 80232ec:	d162      	bne.n	80233b4 <_strtod_l+0xa5c>
 80232ee:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80232f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80232f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232fa:	d401      	bmi.n	8023300 <_strtod_l+0x9a8>
 80232fc:	ee20 db0d 	vmul.f64	d13, d0, d13
 8023300:	eeb1 cb4d 	vneg.f64	d12, d13
 8023304:	4869      	ldr	r0, [pc, #420]	; (80234ac <_strtod_l+0xb54>)
 8023306:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80234b8 <_strtod_l+0xb60>
 802330a:	ea0b 0100 	and.w	r1, fp, r0
 802330e:	4561      	cmp	r1, ip
 8023310:	ec53 2b1c 	vmov	r2, r3, d12
 8023314:	d17a      	bne.n	802340c <_strtod_l+0xab4>
 8023316:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 802331a:	ec49 8b10 	vmov	d0, r8, r9
 802331e:	910a      	str	r1, [sp, #40]	; 0x28
 8023320:	f7ff f9ba 	bl	8022698 <__ulp>
 8023324:	ec49 8b1e 	vmov	d14, r8, r9
 8023328:	4860      	ldr	r0, [pc, #384]	; (80234ac <_strtod_l+0xb54>)
 802332a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 802332e:	ee1e 3a90 	vmov	r3, s29
 8023332:	4a60      	ldr	r2, [pc, #384]	; (80234b4 <_strtod_l+0xb5c>)
 8023334:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023336:	4018      	ands	r0, r3
 8023338:	4290      	cmp	r0, r2
 802333a:	ec59 8b1e 	vmov	r8, r9, d14
 802333e:	d93c      	bls.n	80233ba <_strtod_l+0xa62>
 8023340:	ee18 2a90 	vmov	r2, s17
 8023344:	4b5a      	ldr	r3, [pc, #360]	; (80234b0 <_strtod_l+0xb58>)
 8023346:	429a      	cmp	r2, r3
 8023348:	d104      	bne.n	8023354 <_strtod_l+0x9fc>
 802334a:	ee18 3a10 	vmov	r3, s16
 802334e:	3301      	adds	r3, #1
 8023350:	f43f ad40 	beq.w	8022dd4 <_strtod_l+0x47c>
 8023354:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80234b0 <_strtod_l+0xb58>
 8023358:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 802335c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802335e:	4620      	mov	r0, r4
 8023360:	f7fe fe6e 	bl	8022040 <_Bfree>
 8023364:	4639      	mov	r1, r7
 8023366:	4620      	mov	r0, r4
 8023368:	f7fe fe6a 	bl	8022040 <_Bfree>
 802336c:	4631      	mov	r1, r6
 802336e:	4620      	mov	r0, r4
 8023370:	f7fe fe66 	bl	8022040 <_Bfree>
 8023374:	4629      	mov	r1, r5
 8023376:	4620      	mov	r0, r4
 8023378:	f7fe fe62 	bl	8022040 <_Bfree>
 802337c:	e609      	b.n	8022f92 <_strtod_l+0x63a>
 802337e:	f1b8 0f01 	cmp.w	r8, #1
 8023382:	d103      	bne.n	802338c <_strtod_l+0xa34>
 8023384:	f1b9 0f00 	cmp.w	r9, #0
 8023388:	f43f ad93 	beq.w	8022eb2 <_strtod_l+0x55a>
 802338c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8023390:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8023394:	e7b6      	b.n	8023304 <_strtod_l+0x9ac>
 8023396:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 802339a:	ee20 db0d 	vmul.f64	d13, d0, d13
 802339e:	f1ba 0f00 	cmp.w	sl, #0
 80233a2:	d0ad      	beq.n	8023300 <_strtod_l+0x9a8>
 80233a4:	eeb0 cb4d 	vmov.f64	d12, d13
 80233a8:	e7ac      	b.n	8023304 <_strtod_l+0x9ac>
 80233aa:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 80233ae:	eeb0 db4c 	vmov.f64	d13, d12
 80233b2:	e7a7      	b.n	8023304 <_strtod_l+0x9ac>
 80233b4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 80233b8:	e7a4      	b.n	8023304 <_strtod_l+0x9ac>
 80233ba:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80233be:	9b05      	ldr	r3, [sp, #20]
 80233c0:	46cb      	mov	fp, r9
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	d1ca      	bne.n	802335c <_strtod_l+0xa04>
 80233c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80233ca:	0d1b      	lsrs	r3, r3, #20
 80233cc:	051b      	lsls	r3, r3, #20
 80233ce:	4299      	cmp	r1, r3
 80233d0:	d1c4      	bne.n	802335c <_strtod_l+0xa04>
 80233d2:	ec51 0b1d 	vmov	r0, r1, d13
 80233d6:	f7dd f9bf 	bl	8000758 <__aeabi_d2lz>
 80233da:	f7dd f927 	bl	800062c <__aeabi_l2d>
 80233de:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80233e2:	ec41 0b17 	vmov	d7, r0, r1
 80233e6:	ea4b 0b08 	orr.w	fp, fp, r8
 80233ea:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80233ee:	ee3d db47 	vsub.f64	d13, d13, d7
 80233f2:	d03c      	beq.n	802346e <_strtod_l+0xb16>
 80233f4:	eeb4 dbca 	vcmpe.f64	d13, d10
 80233f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80233fc:	f53f acf4 	bmi.w	8022de8 <_strtod_l+0x490>
 8023400:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8023404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023408:	dda8      	ble.n	802335c <_strtod_l+0xa04>
 802340a:	e4ed      	b.n	8022de8 <_strtod_l+0x490>
 802340c:	9805      	ldr	r0, [sp, #20]
 802340e:	b1f0      	cbz	r0, 802344e <_strtod_l+0xaf6>
 8023410:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8023414:	d81b      	bhi.n	802344e <_strtod_l+0xaf6>
 8023416:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80234a0 <_strtod_l+0xb48>
 802341a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 802341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023422:	d811      	bhi.n	8023448 <_strtod_l+0xaf0>
 8023424:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8023428:	ee1d 3a10 	vmov	r3, s26
 802342c:	2b01      	cmp	r3, #1
 802342e:	bf38      	it	cc
 8023430:	2301      	movcc	r3, #1
 8023432:	ee0d 3a10 	vmov	s26, r3
 8023436:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 802343a:	f1ba 0f00 	cmp.w	sl, #0
 802343e:	d113      	bne.n	8023468 <_strtod_l+0xb10>
 8023440:	eeb1 7b4d 	vneg.f64	d7, d13
 8023444:	ec53 2b17 	vmov	r2, r3, d7
 8023448:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 802344c:	1a43      	subs	r3, r0, r1
 802344e:	eeb0 0b48 	vmov.f64	d0, d8
 8023452:	ec43 2b1c 	vmov	d12, r2, r3
 8023456:	910a      	str	r1, [sp, #40]	; 0x28
 8023458:	f7ff f91e 	bl	8022698 <__ulp>
 802345c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802345e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8023462:	ec59 8b18 	vmov	r8, r9, d8
 8023466:	e7aa      	b.n	80233be <_strtod_l+0xa66>
 8023468:	eeb0 7b4d 	vmov.f64	d7, d13
 802346c:	e7ea      	b.n	8023444 <_strtod_l+0xaec>
 802346e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8023472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023476:	f57f af71 	bpl.w	802335c <_strtod_l+0xa04>
 802347a:	e4b5      	b.n	8022de8 <_strtod_l+0x490>
 802347c:	2300      	movs	r3, #0
 802347e:	9308      	str	r3, [sp, #32]
 8023480:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023482:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023484:	6013      	str	r3, [r2, #0]
 8023486:	f7ff baa6 	b.w	80229d6 <_strtod_l+0x7e>
 802348a:	2a65      	cmp	r2, #101	; 0x65
 802348c:	f43f aba2 	beq.w	8022bd4 <_strtod_l+0x27c>
 8023490:	2a45      	cmp	r2, #69	; 0x45
 8023492:	f43f ab9f 	beq.w	8022bd4 <_strtod_l+0x27c>
 8023496:	2101      	movs	r1, #1
 8023498:	f7ff bbd8 	b.w	8022c4c <_strtod_l+0x2f4>
 802349c:	f3af 8000 	nop.w
 80234a0:	ffc00000 	.word	0xffc00000
 80234a4:	41dfffff 	.word	0x41dfffff
 80234a8:	000fffff 	.word	0x000fffff
 80234ac:	7ff00000 	.word	0x7ff00000
 80234b0:	7fefffff 	.word	0x7fefffff
 80234b4:	7c9fffff 	.word	0x7c9fffff
 80234b8:	7fe00000 	.word	0x7fe00000

080234bc <_strtod_r>:
 80234bc:	4b01      	ldr	r3, [pc, #4]	; (80234c4 <_strtod_r+0x8>)
 80234be:	f7ff ba4b 	b.w	8022958 <_strtod_l>
 80234c2:	bf00      	nop
 80234c4:	200009a0 	.word	0x200009a0

080234c8 <_strtol_l.constprop.0>:
 80234c8:	2b01      	cmp	r3, #1
 80234ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234ce:	d001      	beq.n	80234d4 <_strtol_l.constprop.0+0xc>
 80234d0:	2b24      	cmp	r3, #36	; 0x24
 80234d2:	d906      	bls.n	80234e2 <_strtol_l.constprop.0+0x1a>
 80234d4:	f7fd febe 	bl	8021254 <__errno>
 80234d8:	2316      	movs	r3, #22
 80234da:	6003      	str	r3, [r0, #0]
 80234dc:	2000      	movs	r0, #0
 80234de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80235c8 <_strtol_l.constprop.0+0x100>
 80234e6:	460d      	mov	r5, r1
 80234e8:	462e      	mov	r6, r5
 80234ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80234ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80234f2:	f017 0708 	ands.w	r7, r7, #8
 80234f6:	d1f7      	bne.n	80234e8 <_strtol_l.constprop.0+0x20>
 80234f8:	2c2d      	cmp	r4, #45	; 0x2d
 80234fa:	d132      	bne.n	8023562 <_strtol_l.constprop.0+0x9a>
 80234fc:	782c      	ldrb	r4, [r5, #0]
 80234fe:	2701      	movs	r7, #1
 8023500:	1cb5      	adds	r5, r6, #2
 8023502:	2b00      	cmp	r3, #0
 8023504:	d05b      	beq.n	80235be <_strtol_l.constprop.0+0xf6>
 8023506:	2b10      	cmp	r3, #16
 8023508:	d109      	bne.n	802351e <_strtol_l.constprop.0+0x56>
 802350a:	2c30      	cmp	r4, #48	; 0x30
 802350c:	d107      	bne.n	802351e <_strtol_l.constprop.0+0x56>
 802350e:	782c      	ldrb	r4, [r5, #0]
 8023510:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023514:	2c58      	cmp	r4, #88	; 0x58
 8023516:	d14d      	bne.n	80235b4 <_strtol_l.constprop.0+0xec>
 8023518:	786c      	ldrb	r4, [r5, #1]
 802351a:	2310      	movs	r3, #16
 802351c:	3502      	adds	r5, #2
 802351e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8023522:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8023526:	f04f 0e00 	mov.w	lr, #0
 802352a:	fbb8 f9f3 	udiv	r9, r8, r3
 802352e:	4676      	mov	r6, lr
 8023530:	fb03 8a19 	mls	sl, r3, r9, r8
 8023534:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8023538:	f1bc 0f09 	cmp.w	ip, #9
 802353c:	d816      	bhi.n	802356c <_strtol_l.constprop.0+0xa4>
 802353e:	4664      	mov	r4, ip
 8023540:	42a3      	cmp	r3, r4
 8023542:	dd24      	ble.n	802358e <_strtol_l.constprop.0+0xc6>
 8023544:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8023548:	d008      	beq.n	802355c <_strtol_l.constprop.0+0x94>
 802354a:	45b1      	cmp	r9, r6
 802354c:	d31c      	bcc.n	8023588 <_strtol_l.constprop.0+0xc0>
 802354e:	d101      	bne.n	8023554 <_strtol_l.constprop.0+0x8c>
 8023550:	45a2      	cmp	sl, r4
 8023552:	db19      	blt.n	8023588 <_strtol_l.constprop.0+0xc0>
 8023554:	fb06 4603 	mla	r6, r6, r3, r4
 8023558:	f04f 0e01 	mov.w	lr, #1
 802355c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023560:	e7e8      	b.n	8023534 <_strtol_l.constprop.0+0x6c>
 8023562:	2c2b      	cmp	r4, #43	; 0x2b
 8023564:	bf04      	itt	eq
 8023566:	782c      	ldrbeq	r4, [r5, #0]
 8023568:	1cb5      	addeq	r5, r6, #2
 802356a:	e7ca      	b.n	8023502 <_strtol_l.constprop.0+0x3a>
 802356c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023570:	f1bc 0f19 	cmp.w	ip, #25
 8023574:	d801      	bhi.n	802357a <_strtol_l.constprop.0+0xb2>
 8023576:	3c37      	subs	r4, #55	; 0x37
 8023578:	e7e2      	b.n	8023540 <_strtol_l.constprop.0+0x78>
 802357a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802357e:	f1bc 0f19 	cmp.w	ip, #25
 8023582:	d804      	bhi.n	802358e <_strtol_l.constprop.0+0xc6>
 8023584:	3c57      	subs	r4, #87	; 0x57
 8023586:	e7db      	b.n	8023540 <_strtol_l.constprop.0+0x78>
 8023588:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 802358c:	e7e6      	b.n	802355c <_strtol_l.constprop.0+0x94>
 802358e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8023592:	d105      	bne.n	80235a0 <_strtol_l.constprop.0+0xd8>
 8023594:	2322      	movs	r3, #34	; 0x22
 8023596:	6003      	str	r3, [r0, #0]
 8023598:	4646      	mov	r6, r8
 802359a:	b942      	cbnz	r2, 80235ae <_strtol_l.constprop.0+0xe6>
 802359c:	4630      	mov	r0, r6
 802359e:	e79e      	b.n	80234de <_strtol_l.constprop.0+0x16>
 80235a0:	b107      	cbz	r7, 80235a4 <_strtol_l.constprop.0+0xdc>
 80235a2:	4276      	negs	r6, r6
 80235a4:	2a00      	cmp	r2, #0
 80235a6:	d0f9      	beq.n	802359c <_strtol_l.constprop.0+0xd4>
 80235a8:	f1be 0f00 	cmp.w	lr, #0
 80235ac:	d000      	beq.n	80235b0 <_strtol_l.constprop.0+0xe8>
 80235ae:	1e69      	subs	r1, r5, #1
 80235b0:	6011      	str	r1, [r2, #0]
 80235b2:	e7f3      	b.n	802359c <_strtol_l.constprop.0+0xd4>
 80235b4:	2430      	movs	r4, #48	; 0x30
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d1b1      	bne.n	802351e <_strtol_l.constprop.0+0x56>
 80235ba:	2308      	movs	r3, #8
 80235bc:	e7af      	b.n	802351e <_strtol_l.constprop.0+0x56>
 80235be:	2c30      	cmp	r4, #48	; 0x30
 80235c0:	d0a5      	beq.n	802350e <_strtol_l.constprop.0+0x46>
 80235c2:	230a      	movs	r3, #10
 80235c4:	e7ab      	b.n	802351e <_strtol_l.constprop.0+0x56>
 80235c6:	bf00      	nop
 80235c8:	08025e9c 	.word	0x08025e9c

080235cc <_strtol_r>:
 80235cc:	f7ff bf7c 	b.w	80234c8 <_strtol_l.constprop.0>

080235d0 <__ssputs_r>:
 80235d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80235d4:	688e      	ldr	r6, [r1, #8]
 80235d6:	461f      	mov	r7, r3
 80235d8:	42be      	cmp	r6, r7
 80235da:	680b      	ldr	r3, [r1, #0]
 80235dc:	4682      	mov	sl, r0
 80235de:	460c      	mov	r4, r1
 80235e0:	4690      	mov	r8, r2
 80235e2:	d82c      	bhi.n	802363e <__ssputs_r+0x6e>
 80235e4:	898a      	ldrh	r2, [r1, #12]
 80235e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80235ea:	d026      	beq.n	802363a <__ssputs_r+0x6a>
 80235ec:	6965      	ldr	r5, [r4, #20]
 80235ee:	6909      	ldr	r1, [r1, #16]
 80235f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80235f4:	eba3 0901 	sub.w	r9, r3, r1
 80235f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80235fc:	1c7b      	adds	r3, r7, #1
 80235fe:	444b      	add	r3, r9
 8023600:	106d      	asrs	r5, r5, #1
 8023602:	429d      	cmp	r5, r3
 8023604:	bf38      	it	cc
 8023606:	461d      	movcc	r5, r3
 8023608:	0553      	lsls	r3, r2, #21
 802360a:	d527      	bpl.n	802365c <__ssputs_r+0x8c>
 802360c:	4629      	mov	r1, r5
 802360e:	f7fc f9d5 	bl	801f9bc <_malloc_r>
 8023612:	4606      	mov	r6, r0
 8023614:	b360      	cbz	r0, 8023670 <__ssputs_r+0xa0>
 8023616:	6921      	ldr	r1, [r4, #16]
 8023618:	464a      	mov	r2, r9
 802361a:	f7fd fe50 	bl	80212be <memcpy>
 802361e:	89a3      	ldrh	r3, [r4, #12]
 8023620:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023628:	81a3      	strh	r3, [r4, #12]
 802362a:	6126      	str	r6, [r4, #16]
 802362c:	6165      	str	r5, [r4, #20]
 802362e:	444e      	add	r6, r9
 8023630:	eba5 0509 	sub.w	r5, r5, r9
 8023634:	6026      	str	r6, [r4, #0]
 8023636:	60a5      	str	r5, [r4, #8]
 8023638:	463e      	mov	r6, r7
 802363a:	42be      	cmp	r6, r7
 802363c:	d900      	bls.n	8023640 <__ssputs_r+0x70>
 802363e:	463e      	mov	r6, r7
 8023640:	6820      	ldr	r0, [r4, #0]
 8023642:	4632      	mov	r2, r6
 8023644:	4641      	mov	r1, r8
 8023646:	f7fd fd53 	bl	80210f0 <memmove>
 802364a:	68a3      	ldr	r3, [r4, #8]
 802364c:	1b9b      	subs	r3, r3, r6
 802364e:	60a3      	str	r3, [r4, #8]
 8023650:	6823      	ldr	r3, [r4, #0]
 8023652:	4433      	add	r3, r6
 8023654:	6023      	str	r3, [r4, #0]
 8023656:	2000      	movs	r0, #0
 8023658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802365c:	462a      	mov	r2, r5
 802365e:	f7fc faad 	bl	801fbbc <_realloc_r>
 8023662:	4606      	mov	r6, r0
 8023664:	2800      	cmp	r0, #0
 8023666:	d1e0      	bne.n	802362a <__ssputs_r+0x5a>
 8023668:	6921      	ldr	r1, [r4, #16]
 802366a:	4650      	mov	r0, sl
 802366c:	f7fe fc5c 	bl	8021f28 <_free_r>
 8023670:	230c      	movs	r3, #12
 8023672:	f8ca 3000 	str.w	r3, [sl]
 8023676:	89a3      	ldrh	r3, [r4, #12]
 8023678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802367c:	81a3      	strh	r3, [r4, #12]
 802367e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023682:	e7e9      	b.n	8023658 <__ssputs_r+0x88>

08023684 <_svfiprintf_r>:
 8023684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023688:	4698      	mov	r8, r3
 802368a:	898b      	ldrh	r3, [r1, #12]
 802368c:	061b      	lsls	r3, r3, #24
 802368e:	b09d      	sub	sp, #116	; 0x74
 8023690:	4607      	mov	r7, r0
 8023692:	460d      	mov	r5, r1
 8023694:	4614      	mov	r4, r2
 8023696:	d50e      	bpl.n	80236b6 <_svfiprintf_r+0x32>
 8023698:	690b      	ldr	r3, [r1, #16]
 802369a:	b963      	cbnz	r3, 80236b6 <_svfiprintf_r+0x32>
 802369c:	2140      	movs	r1, #64	; 0x40
 802369e:	f7fc f98d 	bl	801f9bc <_malloc_r>
 80236a2:	6028      	str	r0, [r5, #0]
 80236a4:	6128      	str	r0, [r5, #16]
 80236a6:	b920      	cbnz	r0, 80236b2 <_svfiprintf_r+0x2e>
 80236a8:	230c      	movs	r3, #12
 80236aa:	603b      	str	r3, [r7, #0]
 80236ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80236b0:	e0d0      	b.n	8023854 <_svfiprintf_r+0x1d0>
 80236b2:	2340      	movs	r3, #64	; 0x40
 80236b4:	616b      	str	r3, [r5, #20]
 80236b6:	2300      	movs	r3, #0
 80236b8:	9309      	str	r3, [sp, #36]	; 0x24
 80236ba:	2320      	movs	r3, #32
 80236bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80236c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80236c4:	2330      	movs	r3, #48	; 0x30
 80236c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802386c <_svfiprintf_r+0x1e8>
 80236ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80236ce:	f04f 0901 	mov.w	r9, #1
 80236d2:	4623      	mov	r3, r4
 80236d4:	469a      	mov	sl, r3
 80236d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80236da:	b10a      	cbz	r2, 80236e0 <_svfiprintf_r+0x5c>
 80236dc:	2a25      	cmp	r2, #37	; 0x25
 80236de:	d1f9      	bne.n	80236d4 <_svfiprintf_r+0x50>
 80236e0:	ebba 0b04 	subs.w	fp, sl, r4
 80236e4:	d00b      	beq.n	80236fe <_svfiprintf_r+0x7a>
 80236e6:	465b      	mov	r3, fp
 80236e8:	4622      	mov	r2, r4
 80236ea:	4629      	mov	r1, r5
 80236ec:	4638      	mov	r0, r7
 80236ee:	f7ff ff6f 	bl	80235d0 <__ssputs_r>
 80236f2:	3001      	adds	r0, #1
 80236f4:	f000 80a9 	beq.w	802384a <_svfiprintf_r+0x1c6>
 80236f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80236fa:	445a      	add	r2, fp
 80236fc:	9209      	str	r2, [sp, #36]	; 0x24
 80236fe:	f89a 3000 	ldrb.w	r3, [sl]
 8023702:	2b00      	cmp	r3, #0
 8023704:	f000 80a1 	beq.w	802384a <_svfiprintf_r+0x1c6>
 8023708:	2300      	movs	r3, #0
 802370a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802370e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023712:	f10a 0a01 	add.w	sl, sl, #1
 8023716:	9304      	str	r3, [sp, #16]
 8023718:	9307      	str	r3, [sp, #28]
 802371a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802371e:	931a      	str	r3, [sp, #104]	; 0x68
 8023720:	4654      	mov	r4, sl
 8023722:	2205      	movs	r2, #5
 8023724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023728:	4850      	ldr	r0, [pc, #320]	; (802386c <_svfiprintf_r+0x1e8>)
 802372a:	f7dc fd99 	bl	8000260 <memchr>
 802372e:	9a04      	ldr	r2, [sp, #16]
 8023730:	b9d8      	cbnz	r0, 802376a <_svfiprintf_r+0xe6>
 8023732:	06d0      	lsls	r0, r2, #27
 8023734:	bf44      	itt	mi
 8023736:	2320      	movmi	r3, #32
 8023738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802373c:	0711      	lsls	r1, r2, #28
 802373e:	bf44      	itt	mi
 8023740:	232b      	movmi	r3, #43	; 0x2b
 8023742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023746:	f89a 3000 	ldrb.w	r3, [sl]
 802374a:	2b2a      	cmp	r3, #42	; 0x2a
 802374c:	d015      	beq.n	802377a <_svfiprintf_r+0xf6>
 802374e:	9a07      	ldr	r2, [sp, #28]
 8023750:	4654      	mov	r4, sl
 8023752:	2000      	movs	r0, #0
 8023754:	f04f 0c0a 	mov.w	ip, #10
 8023758:	4621      	mov	r1, r4
 802375a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802375e:	3b30      	subs	r3, #48	; 0x30
 8023760:	2b09      	cmp	r3, #9
 8023762:	d94d      	bls.n	8023800 <_svfiprintf_r+0x17c>
 8023764:	b1b0      	cbz	r0, 8023794 <_svfiprintf_r+0x110>
 8023766:	9207      	str	r2, [sp, #28]
 8023768:	e014      	b.n	8023794 <_svfiprintf_r+0x110>
 802376a:	eba0 0308 	sub.w	r3, r0, r8
 802376e:	fa09 f303 	lsl.w	r3, r9, r3
 8023772:	4313      	orrs	r3, r2
 8023774:	9304      	str	r3, [sp, #16]
 8023776:	46a2      	mov	sl, r4
 8023778:	e7d2      	b.n	8023720 <_svfiprintf_r+0x9c>
 802377a:	9b03      	ldr	r3, [sp, #12]
 802377c:	1d19      	adds	r1, r3, #4
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	9103      	str	r1, [sp, #12]
 8023782:	2b00      	cmp	r3, #0
 8023784:	bfbb      	ittet	lt
 8023786:	425b      	neglt	r3, r3
 8023788:	f042 0202 	orrlt.w	r2, r2, #2
 802378c:	9307      	strge	r3, [sp, #28]
 802378e:	9307      	strlt	r3, [sp, #28]
 8023790:	bfb8      	it	lt
 8023792:	9204      	strlt	r2, [sp, #16]
 8023794:	7823      	ldrb	r3, [r4, #0]
 8023796:	2b2e      	cmp	r3, #46	; 0x2e
 8023798:	d10c      	bne.n	80237b4 <_svfiprintf_r+0x130>
 802379a:	7863      	ldrb	r3, [r4, #1]
 802379c:	2b2a      	cmp	r3, #42	; 0x2a
 802379e:	d134      	bne.n	802380a <_svfiprintf_r+0x186>
 80237a0:	9b03      	ldr	r3, [sp, #12]
 80237a2:	1d1a      	adds	r2, r3, #4
 80237a4:	681b      	ldr	r3, [r3, #0]
 80237a6:	9203      	str	r2, [sp, #12]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	bfb8      	it	lt
 80237ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80237b0:	3402      	adds	r4, #2
 80237b2:	9305      	str	r3, [sp, #20]
 80237b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802387c <_svfiprintf_r+0x1f8>
 80237b8:	7821      	ldrb	r1, [r4, #0]
 80237ba:	2203      	movs	r2, #3
 80237bc:	4650      	mov	r0, sl
 80237be:	f7dc fd4f 	bl	8000260 <memchr>
 80237c2:	b138      	cbz	r0, 80237d4 <_svfiprintf_r+0x150>
 80237c4:	9b04      	ldr	r3, [sp, #16]
 80237c6:	eba0 000a 	sub.w	r0, r0, sl
 80237ca:	2240      	movs	r2, #64	; 0x40
 80237cc:	4082      	lsls	r2, r0
 80237ce:	4313      	orrs	r3, r2
 80237d0:	3401      	adds	r4, #1
 80237d2:	9304      	str	r3, [sp, #16]
 80237d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237d8:	4825      	ldr	r0, [pc, #148]	; (8023870 <_svfiprintf_r+0x1ec>)
 80237da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80237de:	2206      	movs	r2, #6
 80237e0:	f7dc fd3e 	bl	8000260 <memchr>
 80237e4:	2800      	cmp	r0, #0
 80237e6:	d038      	beq.n	802385a <_svfiprintf_r+0x1d6>
 80237e8:	4b22      	ldr	r3, [pc, #136]	; (8023874 <_svfiprintf_r+0x1f0>)
 80237ea:	bb1b      	cbnz	r3, 8023834 <_svfiprintf_r+0x1b0>
 80237ec:	9b03      	ldr	r3, [sp, #12]
 80237ee:	3307      	adds	r3, #7
 80237f0:	f023 0307 	bic.w	r3, r3, #7
 80237f4:	3308      	adds	r3, #8
 80237f6:	9303      	str	r3, [sp, #12]
 80237f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237fa:	4433      	add	r3, r6
 80237fc:	9309      	str	r3, [sp, #36]	; 0x24
 80237fe:	e768      	b.n	80236d2 <_svfiprintf_r+0x4e>
 8023800:	fb0c 3202 	mla	r2, ip, r2, r3
 8023804:	460c      	mov	r4, r1
 8023806:	2001      	movs	r0, #1
 8023808:	e7a6      	b.n	8023758 <_svfiprintf_r+0xd4>
 802380a:	2300      	movs	r3, #0
 802380c:	3401      	adds	r4, #1
 802380e:	9305      	str	r3, [sp, #20]
 8023810:	4619      	mov	r1, r3
 8023812:	f04f 0c0a 	mov.w	ip, #10
 8023816:	4620      	mov	r0, r4
 8023818:	f810 2b01 	ldrb.w	r2, [r0], #1
 802381c:	3a30      	subs	r2, #48	; 0x30
 802381e:	2a09      	cmp	r2, #9
 8023820:	d903      	bls.n	802382a <_svfiprintf_r+0x1a6>
 8023822:	2b00      	cmp	r3, #0
 8023824:	d0c6      	beq.n	80237b4 <_svfiprintf_r+0x130>
 8023826:	9105      	str	r1, [sp, #20]
 8023828:	e7c4      	b.n	80237b4 <_svfiprintf_r+0x130>
 802382a:	fb0c 2101 	mla	r1, ip, r1, r2
 802382e:	4604      	mov	r4, r0
 8023830:	2301      	movs	r3, #1
 8023832:	e7f0      	b.n	8023816 <_svfiprintf_r+0x192>
 8023834:	ab03      	add	r3, sp, #12
 8023836:	9300      	str	r3, [sp, #0]
 8023838:	462a      	mov	r2, r5
 802383a:	4b0f      	ldr	r3, [pc, #60]	; (8023878 <_svfiprintf_r+0x1f4>)
 802383c:	a904      	add	r1, sp, #16
 802383e:	4638      	mov	r0, r7
 8023840:	f7fc fafa 	bl	801fe38 <_printf_float>
 8023844:	1c42      	adds	r2, r0, #1
 8023846:	4606      	mov	r6, r0
 8023848:	d1d6      	bne.n	80237f8 <_svfiprintf_r+0x174>
 802384a:	89ab      	ldrh	r3, [r5, #12]
 802384c:	065b      	lsls	r3, r3, #25
 802384e:	f53f af2d 	bmi.w	80236ac <_svfiprintf_r+0x28>
 8023852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023854:	b01d      	add	sp, #116	; 0x74
 8023856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802385a:	ab03      	add	r3, sp, #12
 802385c:	9300      	str	r3, [sp, #0]
 802385e:	462a      	mov	r2, r5
 8023860:	4b05      	ldr	r3, [pc, #20]	; (8023878 <_svfiprintf_r+0x1f4>)
 8023862:	a904      	add	r1, sp, #16
 8023864:	4638      	mov	r0, r7
 8023866:	f7fc fd6f 	bl	8020348 <_printf_i>
 802386a:	e7eb      	b.n	8023844 <_svfiprintf_r+0x1c0>
 802386c:	08026230 	.word	0x08026230
 8023870:	0802623a 	.word	0x0802623a
 8023874:	0801fe39 	.word	0x0801fe39
 8023878:	080235d1 	.word	0x080235d1
 802387c:	08026236 	.word	0x08026236

08023880 <__sfputc_r>:
 8023880:	6893      	ldr	r3, [r2, #8]
 8023882:	3b01      	subs	r3, #1
 8023884:	2b00      	cmp	r3, #0
 8023886:	b410      	push	{r4}
 8023888:	6093      	str	r3, [r2, #8]
 802388a:	da08      	bge.n	802389e <__sfputc_r+0x1e>
 802388c:	6994      	ldr	r4, [r2, #24]
 802388e:	42a3      	cmp	r3, r4
 8023890:	db01      	blt.n	8023896 <__sfputc_r+0x16>
 8023892:	290a      	cmp	r1, #10
 8023894:	d103      	bne.n	802389e <__sfputc_r+0x1e>
 8023896:	f85d 4b04 	ldr.w	r4, [sp], #4
 802389a:	f7fd bb83 	b.w	8020fa4 <__swbuf_r>
 802389e:	6813      	ldr	r3, [r2, #0]
 80238a0:	1c58      	adds	r0, r3, #1
 80238a2:	6010      	str	r0, [r2, #0]
 80238a4:	7019      	strb	r1, [r3, #0]
 80238a6:	4608      	mov	r0, r1
 80238a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80238ac:	4770      	bx	lr

080238ae <__sfputs_r>:
 80238ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238b0:	4606      	mov	r6, r0
 80238b2:	460f      	mov	r7, r1
 80238b4:	4614      	mov	r4, r2
 80238b6:	18d5      	adds	r5, r2, r3
 80238b8:	42ac      	cmp	r4, r5
 80238ba:	d101      	bne.n	80238c0 <__sfputs_r+0x12>
 80238bc:	2000      	movs	r0, #0
 80238be:	e007      	b.n	80238d0 <__sfputs_r+0x22>
 80238c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238c4:	463a      	mov	r2, r7
 80238c6:	4630      	mov	r0, r6
 80238c8:	f7ff ffda 	bl	8023880 <__sfputc_r>
 80238cc:	1c43      	adds	r3, r0, #1
 80238ce:	d1f3      	bne.n	80238b8 <__sfputs_r+0xa>
 80238d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080238d4 <_vfiprintf_r>:
 80238d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238d8:	460d      	mov	r5, r1
 80238da:	b09d      	sub	sp, #116	; 0x74
 80238dc:	4614      	mov	r4, r2
 80238de:	4698      	mov	r8, r3
 80238e0:	4606      	mov	r6, r0
 80238e2:	b118      	cbz	r0, 80238ec <_vfiprintf_r+0x18>
 80238e4:	6a03      	ldr	r3, [r0, #32]
 80238e6:	b90b      	cbnz	r3, 80238ec <_vfiprintf_r+0x18>
 80238e8:	f7fd f8e0 	bl	8020aac <__sinit>
 80238ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80238ee:	07d9      	lsls	r1, r3, #31
 80238f0:	d405      	bmi.n	80238fe <_vfiprintf_r+0x2a>
 80238f2:	89ab      	ldrh	r3, [r5, #12]
 80238f4:	059a      	lsls	r2, r3, #22
 80238f6:	d402      	bmi.n	80238fe <_vfiprintf_r+0x2a>
 80238f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80238fa:	f7fd fcd6 	bl	80212aa <__retarget_lock_acquire_recursive>
 80238fe:	89ab      	ldrh	r3, [r5, #12]
 8023900:	071b      	lsls	r3, r3, #28
 8023902:	d501      	bpl.n	8023908 <_vfiprintf_r+0x34>
 8023904:	692b      	ldr	r3, [r5, #16]
 8023906:	b99b      	cbnz	r3, 8023930 <_vfiprintf_r+0x5c>
 8023908:	4629      	mov	r1, r5
 802390a:	4630      	mov	r0, r6
 802390c:	f7fd fb88 	bl	8021020 <__swsetup_r>
 8023910:	b170      	cbz	r0, 8023930 <_vfiprintf_r+0x5c>
 8023912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023914:	07dc      	lsls	r4, r3, #31
 8023916:	d504      	bpl.n	8023922 <_vfiprintf_r+0x4e>
 8023918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802391c:	b01d      	add	sp, #116	; 0x74
 802391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023922:	89ab      	ldrh	r3, [r5, #12]
 8023924:	0598      	lsls	r0, r3, #22
 8023926:	d4f7      	bmi.n	8023918 <_vfiprintf_r+0x44>
 8023928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802392a:	f7fd fcbf 	bl	80212ac <__retarget_lock_release_recursive>
 802392e:	e7f3      	b.n	8023918 <_vfiprintf_r+0x44>
 8023930:	2300      	movs	r3, #0
 8023932:	9309      	str	r3, [sp, #36]	; 0x24
 8023934:	2320      	movs	r3, #32
 8023936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802393a:	f8cd 800c 	str.w	r8, [sp, #12]
 802393e:	2330      	movs	r3, #48	; 0x30
 8023940:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8023af4 <_vfiprintf_r+0x220>
 8023944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023948:	f04f 0901 	mov.w	r9, #1
 802394c:	4623      	mov	r3, r4
 802394e:	469a      	mov	sl, r3
 8023950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023954:	b10a      	cbz	r2, 802395a <_vfiprintf_r+0x86>
 8023956:	2a25      	cmp	r2, #37	; 0x25
 8023958:	d1f9      	bne.n	802394e <_vfiprintf_r+0x7a>
 802395a:	ebba 0b04 	subs.w	fp, sl, r4
 802395e:	d00b      	beq.n	8023978 <_vfiprintf_r+0xa4>
 8023960:	465b      	mov	r3, fp
 8023962:	4622      	mov	r2, r4
 8023964:	4629      	mov	r1, r5
 8023966:	4630      	mov	r0, r6
 8023968:	f7ff ffa1 	bl	80238ae <__sfputs_r>
 802396c:	3001      	adds	r0, #1
 802396e:	f000 80a9 	beq.w	8023ac4 <_vfiprintf_r+0x1f0>
 8023972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023974:	445a      	add	r2, fp
 8023976:	9209      	str	r2, [sp, #36]	; 0x24
 8023978:	f89a 3000 	ldrb.w	r3, [sl]
 802397c:	2b00      	cmp	r3, #0
 802397e:	f000 80a1 	beq.w	8023ac4 <_vfiprintf_r+0x1f0>
 8023982:	2300      	movs	r3, #0
 8023984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802398c:	f10a 0a01 	add.w	sl, sl, #1
 8023990:	9304      	str	r3, [sp, #16]
 8023992:	9307      	str	r3, [sp, #28]
 8023994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023998:	931a      	str	r3, [sp, #104]	; 0x68
 802399a:	4654      	mov	r4, sl
 802399c:	2205      	movs	r2, #5
 802399e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239a2:	4854      	ldr	r0, [pc, #336]	; (8023af4 <_vfiprintf_r+0x220>)
 80239a4:	f7dc fc5c 	bl	8000260 <memchr>
 80239a8:	9a04      	ldr	r2, [sp, #16]
 80239aa:	b9d8      	cbnz	r0, 80239e4 <_vfiprintf_r+0x110>
 80239ac:	06d1      	lsls	r1, r2, #27
 80239ae:	bf44      	itt	mi
 80239b0:	2320      	movmi	r3, #32
 80239b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239b6:	0713      	lsls	r3, r2, #28
 80239b8:	bf44      	itt	mi
 80239ba:	232b      	movmi	r3, #43	; 0x2b
 80239bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239c0:	f89a 3000 	ldrb.w	r3, [sl]
 80239c4:	2b2a      	cmp	r3, #42	; 0x2a
 80239c6:	d015      	beq.n	80239f4 <_vfiprintf_r+0x120>
 80239c8:	9a07      	ldr	r2, [sp, #28]
 80239ca:	4654      	mov	r4, sl
 80239cc:	2000      	movs	r0, #0
 80239ce:	f04f 0c0a 	mov.w	ip, #10
 80239d2:	4621      	mov	r1, r4
 80239d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80239d8:	3b30      	subs	r3, #48	; 0x30
 80239da:	2b09      	cmp	r3, #9
 80239dc:	d94d      	bls.n	8023a7a <_vfiprintf_r+0x1a6>
 80239de:	b1b0      	cbz	r0, 8023a0e <_vfiprintf_r+0x13a>
 80239e0:	9207      	str	r2, [sp, #28]
 80239e2:	e014      	b.n	8023a0e <_vfiprintf_r+0x13a>
 80239e4:	eba0 0308 	sub.w	r3, r0, r8
 80239e8:	fa09 f303 	lsl.w	r3, r9, r3
 80239ec:	4313      	orrs	r3, r2
 80239ee:	9304      	str	r3, [sp, #16]
 80239f0:	46a2      	mov	sl, r4
 80239f2:	e7d2      	b.n	802399a <_vfiprintf_r+0xc6>
 80239f4:	9b03      	ldr	r3, [sp, #12]
 80239f6:	1d19      	adds	r1, r3, #4
 80239f8:	681b      	ldr	r3, [r3, #0]
 80239fa:	9103      	str	r1, [sp, #12]
 80239fc:	2b00      	cmp	r3, #0
 80239fe:	bfbb      	ittet	lt
 8023a00:	425b      	neglt	r3, r3
 8023a02:	f042 0202 	orrlt.w	r2, r2, #2
 8023a06:	9307      	strge	r3, [sp, #28]
 8023a08:	9307      	strlt	r3, [sp, #28]
 8023a0a:	bfb8      	it	lt
 8023a0c:	9204      	strlt	r2, [sp, #16]
 8023a0e:	7823      	ldrb	r3, [r4, #0]
 8023a10:	2b2e      	cmp	r3, #46	; 0x2e
 8023a12:	d10c      	bne.n	8023a2e <_vfiprintf_r+0x15a>
 8023a14:	7863      	ldrb	r3, [r4, #1]
 8023a16:	2b2a      	cmp	r3, #42	; 0x2a
 8023a18:	d134      	bne.n	8023a84 <_vfiprintf_r+0x1b0>
 8023a1a:	9b03      	ldr	r3, [sp, #12]
 8023a1c:	1d1a      	adds	r2, r3, #4
 8023a1e:	681b      	ldr	r3, [r3, #0]
 8023a20:	9203      	str	r2, [sp, #12]
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	bfb8      	it	lt
 8023a26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023a2a:	3402      	adds	r4, #2
 8023a2c:	9305      	str	r3, [sp, #20]
 8023a2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8023b04 <_vfiprintf_r+0x230>
 8023a32:	7821      	ldrb	r1, [r4, #0]
 8023a34:	2203      	movs	r2, #3
 8023a36:	4650      	mov	r0, sl
 8023a38:	f7dc fc12 	bl	8000260 <memchr>
 8023a3c:	b138      	cbz	r0, 8023a4e <_vfiprintf_r+0x17a>
 8023a3e:	9b04      	ldr	r3, [sp, #16]
 8023a40:	eba0 000a 	sub.w	r0, r0, sl
 8023a44:	2240      	movs	r2, #64	; 0x40
 8023a46:	4082      	lsls	r2, r0
 8023a48:	4313      	orrs	r3, r2
 8023a4a:	3401      	adds	r4, #1
 8023a4c:	9304      	str	r3, [sp, #16]
 8023a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a52:	4829      	ldr	r0, [pc, #164]	; (8023af8 <_vfiprintf_r+0x224>)
 8023a54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023a58:	2206      	movs	r2, #6
 8023a5a:	f7dc fc01 	bl	8000260 <memchr>
 8023a5e:	2800      	cmp	r0, #0
 8023a60:	d03f      	beq.n	8023ae2 <_vfiprintf_r+0x20e>
 8023a62:	4b26      	ldr	r3, [pc, #152]	; (8023afc <_vfiprintf_r+0x228>)
 8023a64:	bb1b      	cbnz	r3, 8023aae <_vfiprintf_r+0x1da>
 8023a66:	9b03      	ldr	r3, [sp, #12]
 8023a68:	3307      	adds	r3, #7
 8023a6a:	f023 0307 	bic.w	r3, r3, #7
 8023a6e:	3308      	adds	r3, #8
 8023a70:	9303      	str	r3, [sp, #12]
 8023a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a74:	443b      	add	r3, r7
 8023a76:	9309      	str	r3, [sp, #36]	; 0x24
 8023a78:	e768      	b.n	802394c <_vfiprintf_r+0x78>
 8023a7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8023a7e:	460c      	mov	r4, r1
 8023a80:	2001      	movs	r0, #1
 8023a82:	e7a6      	b.n	80239d2 <_vfiprintf_r+0xfe>
 8023a84:	2300      	movs	r3, #0
 8023a86:	3401      	adds	r4, #1
 8023a88:	9305      	str	r3, [sp, #20]
 8023a8a:	4619      	mov	r1, r3
 8023a8c:	f04f 0c0a 	mov.w	ip, #10
 8023a90:	4620      	mov	r0, r4
 8023a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a96:	3a30      	subs	r2, #48	; 0x30
 8023a98:	2a09      	cmp	r2, #9
 8023a9a:	d903      	bls.n	8023aa4 <_vfiprintf_r+0x1d0>
 8023a9c:	2b00      	cmp	r3, #0
 8023a9e:	d0c6      	beq.n	8023a2e <_vfiprintf_r+0x15a>
 8023aa0:	9105      	str	r1, [sp, #20]
 8023aa2:	e7c4      	b.n	8023a2e <_vfiprintf_r+0x15a>
 8023aa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8023aa8:	4604      	mov	r4, r0
 8023aaa:	2301      	movs	r3, #1
 8023aac:	e7f0      	b.n	8023a90 <_vfiprintf_r+0x1bc>
 8023aae:	ab03      	add	r3, sp, #12
 8023ab0:	9300      	str	r3, [sp, #0]
 8023ab2:	462a      	mov	r2, r5
 8023ab4:	4b12      	ldr	r3, [pc, #72]	; (8023b00 <_vfiprintf_r+0x22c>)
 8023ab6:	a904      	add	r1, sp, #16
 8023ab8:	4630      	mov	r0, r6
 8023aba:	f7fc f9bd 	bl	801fe38 <_printf_float>
 8023abe:	4607      	mov	r7, r0
 8023ac0:	1c78      	adds	r0, r7, #1
 8023ac2:	d1d6      	bne.n	8023a72 <_vfiprintf_r+0x19e>
 8023ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023ac6:	07d9      	lsls	r1, r3, #31
 8023ac8:	d405      	bmi.n	8023ad6 <_vfiprintf_r+0x202>
 8023aca:	89ab      	ldrh	r3, [r5, #12]
 8023acc:	059a      	lsls	r2, r3, #22
 8023ace:	d402      	bmi.n	8023ad6 <_vfiprintf_r+0x202>
 8023ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023ad2:	f7fd fbeb 	bl	80212ac <__retarget_lock_release_recursive>
 8023ad6:	89ab      	ldrh	r3, [r5, #12]
 8023ad8:	065b      	lsls	r3, r3, #25
 8023ada:	f53f af1d 	bmi.w	8023918 <_vfiprintf_r+0x44>
 8023ade:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023ae0:	e71c      	b.n	802391c <_vfiprintf_r+0x48>
 8023ae2:	ab03      	add	r3, sp, #12
 8023ae4:	9300      	str	r3, [sp, #0]
 8023ae6:	462a      	mov	r2, r5
 8023ae8:	4b05      	ldr	r3, [pc, #20]	; (8023b00 <_vfiprintf_r+0x22c>)
 8023aea:	a904      	add	r1, sp, #16
 8023aec:	4630      	mov	r0, r6
 8023aee:	f7fc fc2b 	bl	8020348 <_printf_i>
 8023af2:	e7e4      	b.n	8023abe <_vfiprintf_r+0x1ea>
 8023af4:	08026230 	.word	0x08026230
 8023af8:	0802623a 	.word	0x0802623a
 8023afc:	0801fe39 	.word	0x0801fe39
 8023b00:	080238af 	.word	0x080238af
 8023b04:	08026236 	.word	0x08026236

08023b08 <__sflush_r>:
 8023b08:	898a      	ldrh	r2, [r1, #12]
 8023b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b0e:	4605      	mov	r5, r0
 8023b10:	0710      	lsls	r0, r2, #28
 8023b12:	460c      	mov	r4, r1
 8023b14:	d458      	bmi.n	8023bc8 <__sflush_r+0xc0>
 8023b16:	684b      	ldr	r3, [r1, #4]
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	dc05      	bgt.n	8023b28 <__sflush_r+0x20>
 8023b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	dc02      	bgt.n	8023b28 <__sflush_r+0x20>
 8023b22:	2000      	movs	r0, #0
 8023b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023b2a:	2e00      	cmp	r6, #0
 8023b2c:	d0f9      	beq.n	8023b22 <__sflush_r+0x1a>
 8023b2e:	2300      	movs	r3, #0
 8023b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023b34:	682f      	ldr	r7, [r5, #0]
 8023b36:	6a21      	ldr	r1, [r4, #32]
 8023b38:	602b      	str	r3, [r5, #0]
 8023b3a:	d032      	beq.n	8023ba2 <__sflush_r+0x9a>
 8023b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023b3e:	89a3      	ldrh	r3, [r4, #12]
 8023b40:	075a      	lsls	r2, r3, #29
 8023b42:	d505      	bpl.n	8023b50 <__sflush_r+0x48>
 8023b44:	6863      	ldr	r3, [r4, #4]
 8023b46:	1ac0      	subs	r0, r0, r3
 8023b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023b4a:	b10b      	cbz	r3, 8023b50 <__sflush_r+0x48>
 8023b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023b4e:	1ac0      	subs	r0, r0, r3
 8023b50:	2300      	movs	r3, #0
 8023b52:	4602      	mov	r2, r0
 8023b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023b56:	6a21      	ldr	r1, [r4, #32]
 8023b58:	4628      	mov	r0, r5
 8023b5a:	47b0      	blx	r6
 8023b5c:	1c43      	adds	r3, r0, #1
 8023b5e:	89a3      	ldrh	r3, [r4, #12]
 8023b60:	d106      	bne.n	8023b70 <__sflush_r+0x68>
 8023b62:	6829      	ldr	r1, [r5, #0]
 8023b64:	291d      	cmp	r1, #29
 8023b66:	d82b      	bhi.n	8023bc0 <__sflush_r+0xb8>
 8023b68:	4a29      	ldr	r2, [pc, #164]	; (8023c10 <__sflush_r+0x108>)
 8023b6a:	410a      	asrs	r2, r1
 8023b6c:	07d6      	lsls	r6, r2, #31
 8023b6e:	d427      	bmi.n	8023bc0 <__sflush_r+0xb8>
 8023b70:	2200      	movs	r2, #0
 8023b72:	6062      	str	r2, [r4, #4]
 8023b74:	04d9      	lsls	r1, r3, #19
 8023b76:	6922      	ldr	r2, [r4, #16]
 8023b78:	6022      	str	r2, [r4, #0]
 8023b7a:	d504      	bpl.n	8023b86 <__sflush_r+0x7e>
 8023b7c:	1c42      	adds	r2, r0, #1
 8023b7e:	d101      	bne.n	8023b84 <__sflush_r+0x7c>
 8023b80:	682b      	ldr	r3, [r5, #0]
 8023b82:	b903      	cbnz	r3, 8023b86 <__sflush_r+0x7e>
 8023b84:	6560      	str	r0, [r4, #84]	; 0x54
 8023b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023b88:	602f      	str	r7, [r5, #0]
 8023b8a:	2900      	cmp	r1, #0
 8023b8c:	d0c9      	beq.n	8023b22 <__sflush_r+0x1a>
 8023b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023b92:	4299      	cmp	r1, r3
 8023b94:	d002      	beq.n	8023b9c <__sflush_r+0x94>
 8023b96:	4628      	mov	r0, r5
 8023b98:	f7fe f9c6 	bl	8021f28 <_free_r>
 8023b9c:	2000      	movs	r0, #0
 8023b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8023ba0:	e7c0      	b.n	8023b24 <__sflush_r+0x1c>
 8023ba2:	2301      	movs	r3, #1
 8023ba4:	4628      	mov	r0, r5
 8023ba6:	47b0      	blx	r6
 8023ba8:	1c41      	adds	r1, r0, #1
 8023baa:	d1c8      	bne.n	8023b3e <__sflush_r+0x36>
 8023bac:	682b      	ldr	r3, [r5, #0]
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	d0c5      	beq.n	8023b3e <__sflush_r+0x36>
 8023bb2:	2b1d      	cmp	r3, #29
 8023bb4:	d001      	beq.n	8023bba <__sflush_r+0xb2>
 8023bb6:	2b16      	cmp	r3, #22
 8023bb8:	d101      	bne.n	8023bbe <__sflush_r+0xb6>
 8023bba:	602f      	str	r7, [r5, #0]
 8023bbc:	e7b1      	b.n	8023b22 <__sflush_r+0x1a>
 8023bbe:	89a3      	ldrh	r3, [r4, #12]
 8023bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023bc4:	81a3      	strh	r3, [r4, #12]
 8023bc6:	e7ad      	b.n	8023b24 <__sflush_r+0x1c>
 8023bc8:	690f      	ldr	r7, [r1, #16]
 8023bca:	2f00      	cmp	r7, #0
 8023bcc:	d0a9      	beq.n	8023b22 <__sflush_r+0x1a>
 8023bce:	0793      	lsls	r3, r2, #30
 8023bd0:	680e      	ldr	r6, [r1, #0]
 8023bd2:	bf08      	it	eq
 8023bd4:	694b      	ldreq	r3, [r1, #20]
 8023bd6:	600f      	str	r7, [r1, #0]
 8023bd8:	bf18      	it	ne
 8023bda:	2300      	movne	r3, #0
 8023bdc:	eba6 0807 	sub.w	r8, r6, r7
 8023be0:	608b      	str	r3, [r1, #8]
 8023be2:	f1b8 0f00 	cmp.w	r8, #0
 8023be6:	dd9c      	ble.n	8023b22 <__sflush_r+0x1a>
 8023be8:	6a21      	ldr	r1, [r4, #32]
 8023bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023bec:	4643      	mov	r3, r8
 8023bee:	463a      	mov	r2, r7
 8023bf0:	4628      	mov	r0, r5
 8023bf2:	47b0      	blx	r6
 8023bf4:	2800      	cmp	r0, #0
 8023bf6:	dc06      	bgt.n	8023c06 <__sflush_r+0xfe>
 8023bf8:	89a3      	ldrh	r3, [r4, #12]
 8023bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023bfe:	81a3      	strh	r3, [r4, #12]
 8023c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023c04:	e78e      	b.n	8023b24 <__sflush_r+0x1c>
 8023c06:	4407      	add	r7, r0
 8023c08:	eba8 0800 	sub.w	r8, r8, r0
 8023c0c:	e7e9      	b.n	8023be2 <__sflush_r+0xda>
 8023c0e:	bf00      	nop
 8023c10:	dfbffffe 	.word	0xdfbffffe

08023c14 <_fflush_r>:
 8023c14:	b538      	push	{r3, r4, r5, lr}
 8023c16:	690b      	ldr	r3, [r1, #16]
 8023c18:	4605      	mov	r5, r0
 8023c1a:	460c      	mov	r4, r1
 8023c1c:	b913      	cbnz	r3, 8023c24 <_fflush_r+0x10>
 8023c1e:	2500      	movs	r5, #0
 8023c20:	4628      	mov	r0, r5
 8023c22:	bd38      	pop	{r3, r4, r5, pc}
 8023c24:	b118      	cbz	r0, 8023c2e <_fflush_r+0x1a>
 8023c26:	6a03      	ldr	r3, [r0, #32]
 8023c28:	b90b      	cbnz	r3, 8023c2e <_fflush_r+0x1a>
 8023c2a:	f7fc ff3f 	bl	8020aac <__sinit>
 8023c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023c32:	2b00      	cmp	r3, #0
 8023c34:	d0f3      	beq.n	8023c1e <_fflush_r+0xa>
 8023c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023c38:	07d0      	lsls	r0, r2, #31
 8023c3a:	d404      	bmi.n	8023c46 <_fflush_r+0x32>
 8023c3c:	0599      	lsls	r1, r3, #22
 8023c3e:	d402      	bmi.n	8023c46 <_fflush_r+0x32>
 8023c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c42:	f7fd fb32 	bl	80212aa <__retarget_lock_acquire_recursive>
 8023c46:	4628      	mov	r0, r5
 8023c48:	4621      	mov	r1, r4
 8023c4a:	f7ff ff5d 	bl	8023b08 <__sflush_r>
 8023c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023c50:	07da      	lsls	r2, r3, #31
 8023c52:	4605      	mov	r5, r0
 8023c54:	d4e4      	bmi.n	8023c20 <_fflush_r+0xc>
 8023c56:	89a3      	ldrh	r3, [r4, #12]
 8023c58:	059b      	lsls	r3, r3, #22
 8023c5a:	d4e1      	bmi.n	8023c20 <_fflush_r+0xc>
 8023c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c5e:	f7fd fb25 	bl	80212ac <__retarget_lock_release_recursive>
 8023c62:	e7dd      	b.n	8023c20 <_fflush_r+0xc>

08023c64 <fiprintf>:
 8023c64:	b40e      	push	{r1, r2, r3}
 8023c66:	b503      	push	{r0, r1, lr}
 8023c68:	4601      	mov	r1, r0
 8023c6a:	ab03      	add	r3, sp, #12
 8023c6c:	4805      	ldr	r0, [pc, #20]	; (8023c84 <fiprintf+0x20>)
 8023c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023c72:	6800      	ldr	r0, [r0, #0]
 8023c74:	9301      	str	r3, [sp, #4]
 8023c76:	f7ff fe2d 	bl	80238d4 <_vfiprintf_r>
 8023c7a:	b002      	add	sp, #8
 8023c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023c80:	b003      	add	sp, #12
 8023c82:	4770      	bx	lr
 8023c84:	2000099c 	.word	0x2000099c

08023c88 <__swhatbuf_r>:
 8023c88:	b570      	push	{r4, r5, r6, lr}
 8023c8a:	460c      	mov	r4, r1
 8023c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c90:	2900      	cmp	r1, #0
 8023c92:	b096      	sub	sp, #88	; 0x58
 8023c94:	4615      	mov	r5, r2
 8023c96:	461e      	mov	r6, r3
 8023c98:	da0d      	bge.n	8023cb6 <__swhatbuf_r+0x2e>
 8023c9a:	89a3      	ldrh	r3, [r4, #12]
 8023c9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023ca0:	f04f 0100 	mov.w	r1, #0
 8023ca4:	bf0c      	ite	eq
 8023ca6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8023caa:	2340      	movne	r3, #64	; 0x40
 8023cac:	2000      	movs	r0, #0
 8023cae:	6031      	str	r1, [r6, #0]
 8023cb0:	602b      	str	r3, [r5, #0]
 8023cb2:	b016      	add	sp, #88	; 0x58
 8023cb4:	bd70      	pop	{r4, r5, r6, pc}
 8023cb6:	466a      	mov	r2, sp
 8023cb8:	f000 f848 	bl	8023d4c <_fstat_r>
 8023cbc:	2800      	cmp	r0, #0
 8023cbe:	dbec      	blt.n	8023c9a <__swhatbuf_r+0x12>
 8023cc0:	9901      	ldr	r1, [sp, #4]
 8023cc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023cc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8023cca:	4259      	negs	r1, r3
 8023ccc:	4159      	adcs	r1, r3
 8023cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023cd2:	e7eb      	b.n	8023cac <__swhatbuf_r+0x24>

08023cd4 <__smakebuf_r>:
 8023cd4:	898b      	ldrh	r3, [r1, #12]
 8023cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023cd8:	079d      	lsls	r5, r3, #30
 8023cda:	4606      	mov	r6, r0
 8023cdc:	460c      	mov	r4, r1
 8023cde:	d507      	bpl.n	8023cf0 <__smakebuf_r+0x1c>
 8023ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023ce4:	6023      	str	r3, [r4, #0]
 8023ce6:	6123      	str	r3, [r4, #16]
 8023ce8:	2301      	movs	r3, #1
 8023cea:	6163      	str	r3, [r4, #20]
 8023cec:	b002      	add	sp, #8
 8023cee:	bd70      	pop	{r4, r5, r6, pc}
 8023cf0:	ab01      	add	r3, sp, #4
 8023cf2:	466a      	mov	r2, sp
 8023cf4:	f7ff ffc8 	bl	8023c88 <__swhatbuf_r>
 8023cf8:	9900      	ldr	r1, [sp, #0]
 8023cfa:	4605      	mov	r5, r0
 8023cfc:	4630      	mov	r0, r6
 8023cfe:	f7fb fe5d 	bl	801f9bc <_malloc_r>
 8023d02:	b948      	cbnz	r0, 8023d18 <__smakebuf_r+0x44>
 8023d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023d08:	059a      	lsls	r2, r3, #22
 8023d0a:	d4ef      	bmi.n	8023cec <__smakebuf_r+0x18>
 8023d0c:	f023 0303 	bic.w	r3, r3, #3
 8023d10:	f043 0302 	orr.w	r3, r3, #2
 8023d14:	81a3      	strh	r3, [r4, #12]
 8023d16:	e7e3      	b.n	8023ce0 <__smakebuf_r+0xc>
 8023d18:	89a3      	ldrh	r3, [r4, #12]
 8023d1a:	6020      	str	r0, [r4, #0]
 8023d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023d20:	81a3      	strh	r3, [r4, #12]
 8023d22:	9b00      	ldr	r3, [sp, #0]
 8023d24:	6163      	str	r3, [r4, #20]
 8023d26:	9b01      	ldr	r3, [sp, #4]
 8023d28:	6120      	str	r0, [r4, #16]
 8023d2a:	b15b      	cbz	r3, 8023d44 <__smakebuf_r+0x70>
 8023d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023d30:	4630      	mov	r0, r6
 8023d32:	f000 f81d 	bl	8023d70 <_isatty_r>
 8023d36:	b128      	cbz	r0, 8023d44 <__smakebuf_r+0x70>
 8023d38:	89a3      	ldrh	r3, [r4, #12]
 8023d3a:	f023 0303 	bic.w	r3, r3, #3
 8023d3e:	f043 0301 	orr.w	r3, r3, #1
 8023d42:	81a3      	strh	r3, [r4, #12]
 8023d44:	89a3      	ldrh	r3, [r4, #12]
 8023d46:	431d      	orrs	r5, r3
 8023d48:	81a5      	strh	r5, [r4, #12]
 8023d4a:	e7cf      	b.n	8023cec <__smakebuf_r+0x18>

08023d4c <_fstat_r>:
 8023d4c:	b538      	push	{r3, r4, r5, lr}
 8023d4e:	4d07      	ldr	r5, [pc, #28]	; (8023d6c <_fstat_r+0x20>)
 8023d50:	2300      	movs	r3, #0
 8023d52:	4604      	mov	r4, r0
 8023d54:	4608      	mov	r0, r1
 8023d56:	4611      	mov	r1, r2
 8023d58:	602b      	str	r3, [r5, #0]
 8023d5a:	f7df fdb4 	bl	80038c6 <_fstat>
 8023d5e:	1c43      	adds	r3, r0, #1
 8023d60:	d102      	bne.n	8023d68 <_fstat_r+0x1c>
 8023d62:	682b      	ldr	r3, [r5, #0]
 8023d64:	b103      	cbz	r3, 8023d68 <_fstat_r+0x1c>
 8023d66:	6023      	str	r3, [r4, #0]
 8023d68:	bd38      	pop	{r3, r4, r5, pc}
 8023d6a:	bf00      	nop
 8023d6c:	200170c0 	.word	0x200170c0

08023d70 <_isatty_r>:
 8023d70:	b538      	push	{r3, r4, r5, lr}
 8023d72:	4d06      	ldr	r5, [pc, #24]	; (8023d8c <_isatty_r+0x1c>)
 8023d74:	2300      	movs	r3, #0
 8023d76:	4604      	mov	r4, r0
 8023d78:	4608      	mov	r0, r1
 8023d7a:	602b      	str	r3, [r5, #0]
 8023d7c:	f7df fdb3 	bl	80038e6 <_isatty>
 8023d80:	1c43      	adds	r3, r0, #1
 8023d82:	d102      	bne.n	8023d8a <_isatty_r+0x1a>
 8023d84:	682b      	ldr	r3, [r5, #0]
 8023d86:	b103      	cbz	r3, 8023d8a <_isatty_r+0x1a>
 8023d88:	6023      	str	r3, [r4, #0]
 8023d8a:	bd38      	pop	{r3, r4, r5, pc}
 8023d8c:	200170c0 	.word	0x200170c0

08023d90 <nan>:
 8023d90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023d98 <nan+0x8>
 8023d94:	4770      	bx	lr
 8023d96:	bf00      	nop
 8023d98:	00000000 	.word	0x00000000
 8023d9c:	7ff80000 	.word	0x7ff80000

08023da0 <abort>:
 8023da0:	b508      	push	{r3, lr}
 8023da2:	2006      	movs	r0, #6
 8023da4:	f000 fba0 	bl	80244e8 <raise>
 8023da8:	2001      	movs	r0, #1
 8023daa:	f7df fd3d 	bl	8003828 <_exit>

08023dae <rshift>:
 8023dae:	6903      	ldr	r3, [r0, #16]
 8023db0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8023db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023db8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8023dbc:	f100 0414 	add.w	r4, r0, #20
 8023dc0:	dd45      	ble.n	8023e4e <rshift+0xa0>
 8023dc2:	f011 011f 	ands.w	r1, r1, #31
 8023dc6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8023dca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8023dce:	d10c      	bne.n	8023dea <rshift+0x3c>
 8023dd0:	f100 0710 	add.w	r7, r0, #16
 8023dd4:	4629      	mov	r1, r5
 8023dd6:	42b1      	cmp	r1, r6
 8023dd8:	d334      	bcc.n	8023e44 <rshift+0x96>
 8023dda:	1a9b      	subs	r3, r3, r2
 8023ddc:	009b      	lsls	r3, r3, #2
 8023dde:	1eea      	subs	r2, r5, #3
 8023de0:	4296      	cmp	r6, r2
 8023de2:	bf38      	it	cc
 8023de4:	2300      	movcc	r3, #0
 8023de6:	4423      	add	r3, r4
 8023de8:	e015      	b.n	8023e16 <rshift+0x68>
 8023dea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8023dee:	f1c1 0820 	rsb	r8, r1, #32
 8023df2:	40cf      	lsrs	r7, r1
 8023df4:	f105 0e04 	add.w	lr, r5, #4
 8023df8:	46a1      	mov	r9, r4
 8023dfa:	4576      	cmp	r6, lr
 8023dfc:	46f4      	mov	ip, lr
 8023dfe:	d815      	bhi.n	8023e2c <rshift+0x7e>
 8023e00:	1a9a      	subs	r2, r3, r2
 8023e02:	0092      	lsls	r2, r2, #2
 8023e04:	3a04      	subs	r2, #4
 8023e06:	3501      	adds	r5, #1
 8023e08:	42ae      	cmp	r6, r5
 8023e0a:	bf38      	it	cc
 8023e0c:	2200      	movcc	r2, #0
 8023e0e:	18a3      	adds	r3, r4, r2
 8023e10:	50a7      	str	r7, [r4, r2]
 8023e12:	b107      	cbz	r7, 8023e16 <rshift+0x68>
 8023e14:	3304      	adds	r3, #4
 8023e16:	1b1a      	subs	r2, r3, r4
 8023e18:	42a3      	cmp	r3, r4
 8023e1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8023e1e:	bf08      	it	eq
 8023e20:	2300      	moveq	r3, #0
 8023e22:	6102      	str	r2, [r0, #16]
 8023e24:	bf08      	it	eq
 8023e26:	6143      	streq	r3, [r0, #20]
 8023e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023e2c:	f8dc c000 	ldr.w	ip, [ip]
 8023e30:	fa0c fc08 	lsl.w	ip, ip, r8
 8023e34:	ea4c 0707 	orr.w	r7, ip, r7
 8023e38:	f849 7b04 	str.w	r7, [r9], #4
 8023e3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8023e40:	40cf      	lsrs	r7, r1
 8023e42:	e7da      	b.n	8023dfa <rshift+0x4c>
 8023e44:	f851 cb04 	ldr.w	ip, [r1], #4
 8023e48:	f847 cf04 	str.w	ip, [r7, #4]!
 8023e4c:	e7c3      	b.n	8023dd6 <rshift+0x28>
 8023e4e:	4623      	mov	r3, r4
 8023e50:	e7e1      	b.n	8023e16 <rshift+0x68>

08023e52 <__hexdig_fun>:
 8023e52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8023e56:	2b09      	cmp	r3, #9
 8023e58:	d802      	bhi.n	8023e60 <__hexdig_fun+0xe>
 8023e5a:	3820      	subs	r0, #32
 8023e5c:	b2c0      	uxtb	r0, r0
 8023e5e:	4770      	bx	lr
 8023e60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8023e64:	2b05      	cmp	r3, #5
 8023e66:	d801      	bhi.n	8023e6c <__hexdig_fun+0x1a>
 8023e68:	3847      	subs	r0, #71	; 0x47
 8023e6a:	e7f7      	b.n	8023e5c <__hexdig_fun+0xa>
 8023e6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8023e70:	2b05      	cmp	r3, #5
 8023e72:	d801      	bhi.n	8023e78 <__hexdig_fun+0x26>
 8023e74:	3827      	subs	r0, #39	; 0x27
 8023e76:	e7f1      	b.n	8023e5c <__hexdig_fun+0xa>
 8023e78:	2000      	movs	r0, #0
 8023e7a:	4770      	bx	lr

08023e7c <__gethex>:
 8023e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e80:	4617      	mov	r7, r2
 8023e82:	680a      	ldr	r2, [r1, #0]
 8023e84:	b085      	sub	sp, #20
 8023e86:	f102 0b02 	add.w	fp, r2, #2
 8023e8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8023e8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8023e92:	4681      	mov	r9, r0
 8023e94:	468a      	mov	sl, r1
 8023e96:	9302      	str	r3, [sp, #8]
 8023e98:	32fe      	adds	r2, #254	; 0xfe
 8023e9a:	eb02 030b 	add.w	r3, r2, fp
 8023e9e:	46d8      	mov	r8, fp
 8023ea0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8023ea4:	9301      	str	r3, [sp, #4]
 8023ea6:	2830      	cmp	r0, #48	; 0x30
 8023ea8:	d0f7      	beq.n	8023e9a <__gethex+0x1e>
 8023eaa:	f7ff ffd2 	bl	8023e52 <__hexdig_fun>
 8023eae:	4604      	mov	r4, r0
 8023eb0:	2800      	cmp	r0, #0
 8023eb2:	d138      	bne.n	8023f26 <__gethex+0xaa>
 8023eb4:	49a7      	ldr	r1, [pc, #668]	; (8024154 <__gethex+0x2d8>)
 8023eb6:	2201      	movs	r2, #1
 8023eb8:	4640      	mov	r0, r8
 8023eba:	f7fd f948 	bl	802114e <strncmp>
 8023ebe:	4606      	mov	r6, r0
 8023ec0:	2800      	cmp	r0, #0
 8023ec2:	d169      	bne.n	8023f98 <__gethex+0x11c>
 8023ec4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023ec8:	465d      	mov	r5, fp
 8023eca:	f7ff ffc2 	bl	8023e52 <__hexdig_fun>
 8023ece:	2800      	cmp	r0, #0
 8023ed0:	d064      	beq.n	8023f9c <__gethex+0x120>
 8023ed2:	465a      	mov	r2, fp
 8023ed4:	7810      	ldrb	r0, [r2, #0]
 8023ed6:	2830      	cmp	r0, #48	; 0x30
 8023ed8:	4690      	mov	r8, r2
 8023eda:	f102 0201 	add.w	r2, r2, #1
 8023ede:	d0f9      	beq.n	8023ed4 <__gethex+0x58>
 8023ee0:	f7ff ffb7 	bl	8023e52 <__hexdig_fun>
 8023ee4:	2301      	movs	r3, #1
 8023ee6:	fab0 f480 	clz	r4, r0
 8023eea:	0964      	lsrs	r4, r4, #5
 8023eec:	465e      	mov	r6, fp
 8023eee:	9301      	str	r3, [sp, #4]
 8023ef0:	4642      	mov	r2, r8
 8023ef2:	4615      	mov	r5, r2
 8023ef4:	3201      	adds	r2, #1
 8023ef6:	7828      	ldrb	r0, [r5, #0]
 8023ef8:	f7ff ffab 	bl	8023e52 <__hexdig_fun>
 8023efc:	2800      	cmp	r0, #0
 8023efe:	d1f8      	bne.n	8023ef2 <__gethex+0x76>
 8023f00:	4994      	ldr	r1, [pc, #592]	; (8024154 <__gethex+0x2d8>)
 8023f02:	2201      	movs	r2, #1
 8023f04:	4628      	mov	r0, r5
 8023f06:	f7fd f922 	bl	802114e <strncmp>
 8023f0a:	b978      	cbnz	r0, 8023f2c <__gethex+0xb0>
 8023f0c:	b946      	cbnz	r6, 8023f20 <__gethex+0xa4>
 8023f0e:	1c6e      	adds	r6, r5, #1
 8023f10:	4632      	mov	r2, r6
 8023f12:	4615      	mov	r5, r2
 8023f14:	3201      	adds	r2, #1
 8023f16:	7828      	ldrb	r0, [r5, #0]
 8023f18:	f7ff ff9b 	bl	8023e52 <__hexdig_fun>
 8023f1c:	2800      	cmp	r0, #0
 8023f1e:	d1f8      	bne.n	8023f12 <__gethex+0x96>
 8023f20:	1b73      	subs	r3, r6, r5
 8023f22:	009e      	lsls	r6, r3, #2
 8023f24:	e004      	b.n	8023f30 <__gethex+0xb4>
 8023f26:	2400      	movs	r4, #0
 8023f28:	4626      	mov	r6, r4
 8023f2a:	e7e1      	b.n	8023ef0 <__gethex+0x74>
 8023f2c:	2e00      	cmp	r6, #0
 8023f2e:	d1f7      	bne.n	8023f20 <__gethex+0xa4>
 8023f30:	782b      	ldrb	r3, [r5, #0]
 8023f32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023f36:	2b50      	cmp	r3, #80	; 0x50
 8023f38:	d13d      	bne.n	8023fb6 <__gethex+0x13a>
 8023f3a:	786b      	ldrb	r3, [r5, #1]
 8023f3c:	2b2b      	cmp	r3, #43	; 0x2b
 8023f3e:	d02f      	beq.n	8023fa0 <__gethex+0x124>
 8023f40:	2b2d      	cmp	r3, #45	; 0x2d
 8023f42:	d031      	beq.n	8023fa8 <__gethex+0x12c>
 8023f44:	1c69      	adds	r1, r5, #1
 8023f46:	f04f 0b00 	mov.w	fp, #0
 8023f4a:	7808      	ldrb	r0, [r1, #0]
 8023f4c:	f7ff ff81 	bl	8023e52 <__hexdig_fun>
 8023f50:	1e42      	subs	r2, r0, #1
 8023f52:	b2d2      	uxtb	r2, r2
 8023f54:	2a18      	cmp	r2, #24
 8023f56:	d82e      	bhi.n	8023fb6 <__gethex+0x13a>
 8023f58:	f1a0 0210 	sub.w	r2, r0, #16
 8023f5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8023f60:	f7ff ff77 	bl	8023e52 <__hexdig_fun>
 8023f64:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8023f68:	fa5f fc8c 	uxtb.w	ip, ip
 8023f6c:	f1bc 0f18 	cmp.w	ip, #24
 8023f70:	d91d      	bls.n	8023fae <__gethex+0x132>
 8023f72:	f1bb 0f00 	cmp.w	fp, #0
 8023f76:	d000      	beq.n	8023f7a <__gethex+0xfe>
 8023f78:	4252      	negs	r2, r2
 8023f7a:	4416      	add	r6, r2
 8023f7c:	f8ca 1000 	str.w	r1, [sl]
 8023f80:	b1dc      	cbz	r4, 8023fba <__gethex+0x13e>
 8023f82:	9b01      	ldr	r3, [sp, #4]
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	bf14      	ite	ne
 8023f88:	f04f 0800 	movne.w	r8, #0
 8023f8c:	f04f 0806 	moveq.w	r8, #6
 8023f90:	4640      	mov	r0, r8
 8023f92:	b005      	add	sp, #20
 8023f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f98:	4645      	mov	r5, r8
 8023f9a:	4626      	mov	r6, r4
 8023f9c:	2401      	movs	r4, #1
 8023f9e:	e7c7      	b.n	8023f30 <__gethex+0xb4>
 8023fa0:	f04f 0b00 	mov.w	fp, #0
 8023fa4:	1ca9      	adds	r1, r5, #2
 8023fa6:	e7d0      	b.n	8023f4a <__gethex+0xce>
 8023fa8:	f04f 0b01 	mov.w	fp, #1
 8023fac:	e7fa      	b.n	8023fa4 <__gethex+0x128>
 8023fae:	230a      	movs	r3, #10
 8023fb0:	fb03 0002 	mla	r0, r3, r2, r0
 8023fb4:	e7d0      	b.n	8023f58 <__gethex+0xdc>
 8023fb6:	4629      	mov	r1, r5
 8023fb8:	e7e0      	b.n	8023f7c <__gethex+0x100>
 8023fba:	eba5 0308 	sub.w	r3, r5, r8
 8023fbe:	3b01      	subs	r3, #1
 8023fc0:	4621      	mov	r1, r4
 8023fc2:	2b07      	cmp	r3, #7
 8023fc4:	dc0a      	bgt.n	8023fdc <__gethex+0x160>
 8023fc6:	4648      	mov	r0, r9
 8023fc8:	f7fd fffa 	bl	8021fc0 <_Balloc>
 8023fcc:	4604      	mov	r4, r0
 8023fce:	b940      	cbnz	r0, 8023fe2 <__gethex+0x166>
 8023fd0:	4b61      	ldr	r3, [pc, #388]	; (8024158 <__gethex+0x2dc>)
 8023fd2:	4602      	mov	r2, r0
 8023fd4:	21e4      	movs	r1, #228	; 0xe4
 8023fd6:	4861      	ldr	r0, [pc, #388]	; (802415c <__gethex+0x2e0>)
 8023fd8:	f7fd f986 	bl	80212e8 <__assert_func>
 8023fdc:	3101      	adds	r1, #1
 8023fde:	105b      	asrs	r3, r3, #1
 8023fe0:	e7ef      	b.n	8023fc2 <__gethex+0x146>
 8023fe2:	f100 0a14 	add.w	sl, r0, #20
 8023fe6:	2300      	movs	r3, #0
 8023fe8:	495a      	ldr	r1, [pc, #360]	; (8024154 <__gethex+0x2d8>)
 8023fea:	f8cd a004 	str.w	sl, [sp, #4]
 8023fee:	469b      	mov	fp, r3
 8023ff0:	45a8      	cmp	r8, r5
 8023ff2:	d342      	bcc.n	802407a <__gethex+0x1fe>
 8023ff4:	9801      	ldr	r0, [sp, #4]
 8023ff6:	f840 bb04 	str.w	fp, [r0], #4
 8023ffa:	eba0 000a 	sub.w	r0, r0, sl
 8023ffe:	1080      	asrs	r0, r0, #2
 8024000:	6120      	str	r0, [r4, #16]
 8024002:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8024006:	4658      	mov	r0, fp
 8024008:	f7fe f8cc 	bl	80221a4 <__hi0bits>
 802400c:	683d      	ldr	r5, [r7, #0]
 802400e:	eba8 0000 	sub.w	r0, r8, r0
 8024012:	42a8      	cmp	r0, r5
 8024014:	dd59      	ble.n	80240ca <__gethex+0x24e>
 8024016:	eba0 0805 	sub.w	r8, r0, r5
 802401a:	4641      	mov	r1, r8
 802401c:	4620      	mov	r0, r4
 802401e:	f7fe fc58 	bl	80228d2 <__any_on>
 8024022:	4683      	mov	fp, r0
 8024024:	b1b8      	cbz	r0, 8024056 <__gethex+0x1da>
 8024026:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 802402a:	1159      	asrs	r1, r3, #5
 802402c:	f003 021f 	and.w	r2, r3, #31
 8024030:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8024034:	f04f 0b01 	mov.w	fp, #1
 8024038:	fa0b f202 	lsl.w	r2, fp, r2
 802403c:	420a      	tst	r2, r1
 802403e:	d00a      	beq.n	8024056 <__gethex+0x1da>
 8024040:	455b      	cmp	r3, fp
 8024042:	dd06      	ble.n	8024052 <__gethex+0x1d6>
 8024044:	f1a8 0102 	sub.w	r1, r8, #2
 8024048:	4620      	mov	r0, r4
 802404a:	f7fe fc42 	bl	80228d2 <__any_on>
 802404e:	2800      	cmp	r0, #0
 8024050:	d138      	bne.n	80240c4 <__gethex+0x248>
 8024052:	f04f 0b02 	mov.w	fp, #2
 8024056:	4641      	mov	r1, r8
 8024058:	4620      	mov	r0, r4
 802405a:	f7ff fea8 	bl	8023dae <rshift>
 802405e:	4446      	add	r6, r8
 8024060:	68bb      	ldr	r3, [r7, #8]
 8024062:	42b3      	cmp	r3, r6
 8024064:	da41      	bge.n	80240ea <__gethex+0x26e>
 8024066:	4621      	mov	r1, r4
 8024068:	4648      	mov	r0, r9
 802406a:	f7fd ffe9 	bl	8022040 <_Bfree>
 802406e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024070:	2300      	movs	r3, #0
 8024072:	6013      	str	r3, [r2, #0]
 8024074:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8024078:	e78a      	b.n	8023f90 <__gethex+0x114>
 802407a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 802407e:	2a2e      	cmp	r2, #46	; 0x2e
 8024080:	d014      	beq.n	80240ac <__gethex+0x230>
 8024082:	2b20      	cmp	r3, #32
 8024084:	d106      	bne.n	8024094 <__gethex+0x218>
 8024086:	9b01      	ldr	r3, [sp, #4]
 8024088:	f843 bb04 	str.w	fp, [r3], #4
 802408c:	f04f 0b00 	mov.w	fp, #0
 8024090:	9301      	str	r3, [sp, #4]
 8024092:	465b      	mov	r3, fp
 8024094:	7828      	ldrb	r0, [r5, #0]
 8024096:	9303      	str	r3, [sp, #12]
 8024098:	f7ff fedb 	bl	8023e52 <__hexdig_fun>
 802409c:	9b03      	ldr	r3, [sp, #12]
 802409e:	f000 000f 	and.w	r0, r0, #15
 80240a2:	4098      	lsls	r0, r3
 80240a4:	ea4b 0b00 	orr.w	fp, fp, r0
 80240a8:	3304      	adds	r3, #4
 80240aa:	e7a1      	b.n	8023ff0 <__gethex+0x174>
 80240ac:	45a8      	cmp	r8, r5
 80240ae:	d8e8      	bhi.n	8024082 <__gethex+0x206>
 80240b0:	2201      	movs	r2, #1
 80240b2:	4628      	mov	r0, r5
 80240b4:	9303      	str	r3, [sp, #12]
 80240b6:	f7fd f84a 	bl	802114e <strncmp>
 80240ba:	4926      	ldr	r1, [pc, #152]	; (8024154 <__gethex+0x2d8>)
 80240bc:	9b03      	ldr	r3, [sp, #12]
 80240be:	2800      	cmp	r0, #0
 80240c0:	d1df      	bne.n	8024082 <__gethex+0x206>
 80240c2:	e795      	b.n	8023ff0 <__gethex+0x174>
 80240c4:	f04f 0b03 	mov.w	fp, #3
 80240c8:	e7c5      	b.n	8024056 <__gethex+0x1da>
 80240ca:	da0b      	bge.n	80240e4 <__gethex+0x268>
 80240cc:	eba5 0800 	sub.w	r8, r5, r0
 80240d0:	4621      	mov	r1, r4
 80240d2:	4642      	mov	r2, r8
 80240d4:	4648      	mov	r0, r9
 80240d6:	f7fe f9cd 	bl	8022474 <__lshift>
 80240da:	eba6 0608 	sub.w	r6, r6, r8
 80240de:	4604      	mov	r4, r0
 80240e0:	f100 0a14 	add.w	sl, r0, #20
 80240e4:	f04f 0b00 	mov.w	fp, #0
 80240e8:	e7ba      	b.n	8024060 <__gethex+0x1e4>
 80240ea:	687b      	ldr	r3, [r7, #4]
 80240ec:	42b3      	cmp	r3, r6
 80240ee:	dd73      	ble.n	80241d8 <__gethex+0x35c>
 80240f0:	1b9e      	subs	r6, r3, r6
 80240f2:	42b5      	cmp	r5, r6
 80240f4:	dc34      	bgt.n	8024160 <__gethex+0x2e4>
 80240f6:	68fb      	ldr	r3, [r7, #12]
 80240f8:	2b02      	cmp	r3, #2
 80240fa:	d023      	beq.n	8024144 <__gethex+0x2c8>
 80240fc:	2b03      	cmp	r3, #3
 80240fe:	d025      	beq.n	802414c <__gethex+0x2d0>
 8024100:	2b01      	cmp	r3, #1
 8024102:	d115      	bne.n	8024130 <__gethex+0x2b4>
 8024104:	42b5      	cmp	r5, r6
 8024106:	d113      	bne.n	8024130 <__gethex+0x2b4>
 8024108:	2d01      	cmp	r5, #1
 802410a:	d10b      	bne.n	8024124 <__gethex+0x2a8>
 802410c:	9a02      	ldr	r2, [sp, #8]
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	6013      	str	r3, [r2, #0]
 8024112:	2301      	movs	r3, #1
 8024114:	6123      	str	r3, [r4, #16]
 8024116:	f8ca 3000 	str.w	r3, [sl]
 802411a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802411c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8024120:	601c      	str	r4, [r3, #0]
 8024122:	e735      	b.n	8023f90 <__gethex+0x114>
 8024124:	1e69      	subs	r1, r5, #1
 8024126:	4620      	mov	r0, r4
 8024128:	f7fe fbd3 	bl	80228d2 <__any_on>
 802412c:	2800      	cmp	r0, #0
 802412e:	d1ed      	bne.n	802410c <__gethex+0x290>
 8024130:	4621      	mov	r1, r4
 8024132:	4648      	mov	r0, r9
 8024134:	f7fd ff84 	bl	8022040 <_Bfree>
 8024138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802413a:	2300      	movs	r3, #0
 802413c:	6013      	str	r3, [r2, #0]
 802413e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8024142:	e725      	b.n	8023f90 <__gethex+0x114>
 8024144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024146:	2b00      	cmp	r3, #0
 8024148:	d1f2      	bne.n	8024130 <__gethex+0x2b4>
 802414a:	e7df      	b.n	802410c <__gethex+0x290>
 802414c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802414e:	2b00      	cmp	r3, #0
 8024150:	d1dc      	bne.n	802410c <__gethex+0x290>
 8024152:	e7ed      	b.n	8024130 <__gethex+0x2b4>
 8024154:	080261dc 	.word	0x080261dc
 8024158:	08026076 	.word	0x08026076
 802415c:	08026249 	.word	0x08026249
 8024160:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8024164:	f1bb 0f00 	cmp.w	fp, #0
 8024168:	d133      	bne.n	80241d2 <__gethex+0x356>
 802416a:	f1b8 0f00 	cmp.w	r8, #0
 802416e:	d004      	beq.n	802417a <__gethex+0x2fe>
 8024170:	4641      	mov	r1, r8
 8024172:	4620      	mov	r0, r4
 8024174:	f7fe fbad 	bl	80228d2 <__any_on>
 8024178:	4683      	mov	fp, r0
 802417a:	ea4f 1268 	mov.w	r2, r8, asr #5
 802417e:	2301      	movs	r3, #1
 8024180:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8024184:	f008 081f 	and.w	r8, r8, #31
 8024188:	fa03 f308 	lsl.w	r3, r3, r8
 802418c:	4213      	tst	r3, r2
 802418e:	4631      	mov	r1, r6
 8024190:	4620      	mov	r0, r4
 8024192:	bf18      	it	ne
 8024194:	f04b 0b02 	orrne.w	fp, fp, #2
 8024198:	1bad      	subs	r5, r5, r6
 802419a:	f7ff fe08 	bl	8023dae <rshift>
 802419e:	687e      	ldr	r6, [r7, #4]
 80241a0:	f04f 0802 	mov.w	r8, #2
 80241a4:	f1bb 0f00 	cmp.w	fp, #0
 80241a8:	d04a      	beq.n	8024240 <__gethex+0x3c4>
 80241aa:	68fb      	ldr	r3, [r7, #12]
 80241ac:	2b02      	cmp	r3, #2
 80241ae:	d016      	beq.n	80241de <__gethex+0x362>
 80241b0:	2b03      	cmp	r3, #3
 80241b2:	d018      	beq.n	80241e6 <__gethex+0x36a>
 80241b4:	2b01      	cmp	r3, #1
 80241b6:	d109      	bne.n	80241cc <__gethex+0x350>
 80241b8:	f01b 0f02 	tst.w	fp, #2
 80241bc:	d006      	beq.n	80241cc <__gethex+0x350>
 80241be:	f8da 3000 	ldr.w	r3, [sl]
 80241c2:	ea4b 0b03 	orr.w	fp, fp, r3
 80241c6:	f01b 0f01 	tst.w	fp, #1
 80241ca:	d10f      	bne.n	80241ec <__gethex+0x370>
 80241cc:	f048 0810 	orr.w	r8, r8, #16
 80241d0:	e036      	b.n	8024240 <__gethex+0x3c4>
 80241d2:	f04f 0b01 	mov.w	fp, #1
 80241d6:	e7d0      	b.n	802417a <__gethex+0x2fe>
 80241d8:	f04f 0801 	mov.w	r8, #1
 80241dc:	e7e2      	b.n	80241a4 <__gethex+0x328>
 80241de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80241e0:	f1c3 0301 	rsb	r3, r3, #1
 80241e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80241e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80241e8:	2b00      	cmp	r3, #0
 80241ea:	d0ef      	beq.n	80241cc <__gethex+0x350>
 80241ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80241f0:	f104 0214 	add.w	r2, r4, #20
 80241f4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80241f8:	9301      	str	r3, [sp, #4]
 80241fa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80241fe:	2300      	movs	r3, #0
 8024200:	4694      	mov	ip, r2
 8024202:	f852 1b04 	ldr.w	r1, [r2], #4
 8024206:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 802420a:	d01e      	beq.n	802424a <__gethex+0x3ce>
 802420c:	3101      	adds	r1, #1
 802420e:	f8cc 1000 	str.w	r1, [ip]
 8024212:	f1b8 0f02 	cmp.w	r8, #2
 8024216:	f104 0214 	add.w	r2, r4, #20
 802421a:	d13d      	bne.n	8024298 <__gethex+0x41c>
 802421c:	683b      	ldr	r3, [r7, #0]
 802421e:	3b01      	subs	r3, #1
 8024220:	42ab      	cmp	r3, r5
 8024222:	d10b      	bne.n	802423c <__gethex+0x3c0>
 8024224:	1169      	asrs	r1, r5, #5
 8024226:	2301      	movs	r3, #1
 8024228:	f005 051f 	and.w	r5, r5, #31
 802422c:	fa03 f505 	lsl.w	r5, r3, r5
 8024230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024234:	421d      	tst	r5, r3
 8024236:	bf18      	it	ne
 8024238:	f04f 0801 	movne.w	r8, #1
 802423c:	f048 0820 	orr.w	r8, r8, #32
 8024240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024242:	601c      	str	r4, [r3, #0]
 8024244:	9b02      	ldr	r3, [sp, #8]
 8024246:	601e      	str	r6, [r3, #0]
 8024248:	e6a2      	b.n	8023f90 <__gethex+0x114>
 802424a:	4290      	cmp	r0, r2
 802424c:	f842 3c04 	str.w	r3, [r2, #-4]
 8024250:	d8d6      	bhi.n	8024200 <__gethex+0x384>
 8024252:	68a2      	ldr	r2, [r4, #8]
 8024254:	4593      	cmp	fp, r2
 8024256:	db17      	blt.n	8024288 <__gethex+0x40c>
 8024258:	6861      	ldr	r1, [r4, #4]
 802425a:	4648      	mov	r0, r9
 802425c:	3101      	adds	r1, #1
 802425e:	f7fd feaf 	bl	8021fc0 <_Balloc>
 8024262:	4682      	mov	sl, r0
 8024264:	b918      	cbnz	r0, 802426e <__gethex+0x3f2>
 8024266:	4b1b      	ldr	r3, [pc, #108]	; (80242d4 <__gethex+0x458>)
 8024268:	4602      	mov	r2, r0
 802426a:	2184      	movs	r1, #132	; 0x84
 802426c:	e6b3      	b.n	8023fd6 <__gethex+0x15a>
 802426e:	6922      	ldr	r2, [r4, #16]
 8024270:	3202      	adds	r2, #2
 8024272:	f104 010c 	add.w	r1, r4, #12
 8024276:	0092      	lsls	r2, r2, #2
 8024278:	300c      	adds	r0, #12
 802427a:	f7fd f820 	bl	80212be <memcpy>
 802427e:	4621      	mov	r1, r4
 8024280:	4648      	mov	r0, r9
 8024282:	f7fd fedd 	bl	8022040 <_Bfree>
 8024286:	4654      	mov	r4, sl
 8024288:	6922      	ldr	r2, [r4, #16]
 802428a:	1c51      	adds	r1, r2, #1
 802428c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8024290:	6121      	str	r1, [r4, #16]
 8024292:	2101      	movs	r1, #1
 8024294:	6151      	str	r1, [r2, #20]
 8024296:	e7bc      	b.n	8024212 <__gethex+0x396>
 8024298:	6921      	ldr	r1, [r4, #16]
 802429a:	4559      	cmp	r1, fp
 802429c:	dd0b      	ble.n	80242b6 <__gethex+0x43a>
 802429e:	2101      	movs	r1, #1
 80242a0:	4620      	mov	r0, r4
 80242a2:	f7ff fd84 	bl	8023dae <rshift>
 80242a6:	68bb      	ldr	r3, [r7, #8]
 80242a8:	3601      	adds	r6, #1
 80242aa:	42b3      	cmp	r3, r6
 80242ac:	f6ff aedb 	blt.w	8024066 <__gethex+0x1ea>
 80242b0:	f04f 0801 	mov.w	r8, #1
 80242b4:	e7c2      	b.n	802423c <__gethex+0x3c0>
 80242b6:	f015 051f 	ands.w	r5, r5, #31
 80242ba:	d0f9      	beq.n	80242b0 <__gethex+0x434>
 80242bc:	9b01      	ldr	r3, [sp, #4]
 80242be:	441a      	add	r2, r3
 80242c0:	f1c5 0520 	rsb	r5, r5, #32
 80242c4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80242c8:	f7fd ff6c 	bl	80221a4 <__hi0bits>
 80242cc:	42a8      	cmp	r0, r5
 80242ce:	dbe6      	blt.n	802429e <__gethex+0x422>
 80242d0:	e7ee      	b.n	80242b0 <__gethex+0x434>
 80242d2:	bf00      	nop
 80242d4:	08026076 	.word	0x08026076

080242d8 <L_shift>:
 80242d8:	f1c2 0208 	rsb	r2, r2, #8
 80242dc:	0092      	lsls	r2, r2, #2
 80242de:	b570      	push	{r4, r5, r6, lr}
 80242e0:	f1c2 0620 	rsb	r6, r2, #32
 80242e4:	6843      	ldr	r3, [r0, #4]
 80242e6:	6804      	ldr	r4, [r0, #0]
 80242e8:	fa03 f506 	lsl.w	r5, r3, r6
 80242ec:	432c      	orrs	r4, r5
 80242ee:	40d3      	lsrs	r3, r2
 80242f0:	6004      	str	r4, [r0, #0]
 80242f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80242f6:	4288      	cmp	r0, r1
 80242f8:	d3f4      	bcc.n	80242e4 <L_shift+0xc>
 80242fa:	bd70      	pop	{r4, r5, r6, pc}

080242fc <__match>:
 80242fc:	b530      	push	{r4, r5, lr}
 80242fe:	6803      	ldr	r3, [r0, #0]
 8024300:	3301      	adds	r3, #1
 8024302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024306:	b914      	cbnz	r4, 802430e <__match+0x12>
 8024308:	6003      	str	r3, [r0, #0]
 802430a:	2001      	movs	r0, #1
 802430c:	bd30      	pop	{r4, r5, pc}
 802430e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024312:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8024316:	2d19      	cmp	r5, #25
 8024318:	bf98      	it	ls
 802431a:	3220      	addls	r2, #32
 802431c:	42a2      	cmp	r2, r4
 802431e:	d0f0      	beq.n	8024302 <__match+0x6>
 8024320:	2000      	movs	r0, #0
 8024322:	e7f3      	b.n	802430c <__match+0x10>

08024324 <__hexnan>:
 8024324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024328:	680b      	ldr	r3, [r1, #0]
 802432a:	6801      	ldr	r1, [r0, #0]
 802432c:	115e      	asrs	r6, r3, #5
 802432e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8024332:	f013 031f 	ands.w	r3, r3, #31
 8024336:	b087      	sub	sp, #28
 8024338:	bf18      	it	ne
 802433a:	3604      	addne	r6, #4
 802433c:	2500      	movs	r5, #0
 802433e:	1f37      	subs	r7, r6, #4
 8024340:	4682      	mov	sl, r0
 8024342:	4690      	mov	r8, r2
 8024344:	9301      	str	r3, [sp, #4]
 8024346:	f846 5c04 	str.w	r5, [r6, #-4]
 802434a:	46b9      	mov	r9, r7
 802434c:	463c      	mov	r4, r7
 802434e:	9502      	str	r5, [sp, #8]
 8024350:	46ab      	mov	fp, r5
 8024352:	784a      	ldrb	r2, [r1, #1]
 8024354:	1c4b      	adds	r3, r1, #1
 8024356:	9303      	str	r3, [sp, #12]
 8024358:	b342      	cbz	r2, 80243ac <__hexnan+0x88>
 802435a:	4610      	mov	r0, r2
 802435c:	9105      	str	r1, [sp, #20]
 802435e:	9204      	str	r2, [sp, #16]
 8024360:	f7ff fd77 	bl	8023e52 <__hexdig_fun>
 8024364:	2800      	cmp	r0, #0
 8024366:	d14f      	bne.n	8024408 <__hexnan+0xe4>
 8024368:	9a04      	ldr	r2, [sp, #16]
 802436a:	9905      	ldr	r1, [sp, #20]
 802436c:	2a20      	cmp	r2, #32
 802436e:	d818      	bhi.n	80243a2 <__hexnan+0x7e>
 8024370:	9b02      	ldr	r3, [sp, #8]
 8024372:	459b      	cmp	fp, r3
 8024374:	dd13      	ble.n	802439e <__hexnan+0x7a>
 8024376:	454c      	cmp	r4, r9
 8024378:	d206      	bcs.n	8024388 <__hexnan+0x64>
 802437a:	2d07      	cmp	r5, #7
 802437c:	dc04      	bgt.n	8024388 <__hexnan+0x64>
 802437e:	462a      	mov	r2, r5
 8024380:	4649      	mov	r1, r9
 8024382:	4620      	mov	r0, r4
 8024384:	f7ff ffa8 	bl	80242d8 <L_shift>
 8024388:	4544      	cmp	r4, r8
 802438a:	d950      	bls.n	802442e <__hexnan+0x10a>
 802438c:	2300      	movs	r3, #0
 802438e:	f1a4 0904 	sub.w	r9, r4, #4
 8024392:	f844 3c04 	str.w	r3, [r4, #-4]
 8024396:	f8cd b008 	str.w	fp, [sp, #8]
 802439a:	464c      	mov	r4, r9
 802439c:	461d      	mov	r5, r3
 802439e:	9903      	ldr	r1, [sp, #12]
 80243a0:	e7d7      	b.n	8024352 <__hexnan+0x2e>
 80243a2:	2a29      	cmp	r2, #41	; 0x29
 80243a4:	d155      	bne.n	8024452 <__hexnan+0x12e>
 80243a6:	3102      	adds	r1, #2
 80243a8:	f8ca 1000 	str.w	r1, [sl]
 80243ac:	f1bb 0f00 	cmp.w	fp, #0
 80243b0:	d04f      	beq.n	8024452 <__hexnan+0x12e>
 80243b2:	454c      	cmp	r4, r9
 80243b4:	d206      	bcs.n	80243c4 <__hexnan+0xa0>
 80243b6:	2d07      	cmp	r5, #7
 80243b8:	dc04      	bgt.n	80243c4 <__hexnan+0xa0>
 80243ba:	462a      	mov	r2, r5
 80243bc:	4649      	mov	r1, r9
 80243be:	4620      	mov	r0, r4
 80243c0:	f7ff ff8a 	bl	80242d8 <L_shift>
 80243c4:	4544      	cmp	r4, r8
 80243c6:	d934      	bls.n	8024432 <__hexnan+0x10e>
 80243c8:	f1a8 0204 	sub.w	r2, r8, #4
 80243cc:	4623      	mov	r3, r4
 80243ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80243d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80243d6:	429f      	cmp	r7, r3
 80243d8:	d2f9      	bcs.n	80243ce <__hexnan+0xaa>
 80243da:	1b3b      	subs	r3, r7, r4
 80243dc:	f023 0303 	bic.w	r3, r3, #3
 80243e0:	3304      	adds	r3, #4
 80243e2:	3e03      	subs	r6, #3
 80243e4:	3401      	adds	r4, #1
 80243e6:	42a6      	cmp	r6, r4
 80243e8:	bf38      	it	cc
 80243ea:	2304      	movcc	r3, #4
 80243ec:	4443      	add	r3, r8
 80243ee:	2200      	movs	r2, #0
 80243f0:	f843 2b04 	str.w	r2, [r3], #4
 80243f4:	429f      	cmp	r7, r3
 80243f6:	d2fb      	bcs.n	80243f0 <__hexnan+0xcc>
 80243f8:	683b      	ldr	r3, [r7, #0]
 80243fa:	b91b      	cbnz	r3, 8024404 <__hexnan+0xe0>
 80243fc:	4547      	cmp	r7, r8
 80243fe:	d126      	bne.n	802444e <__hexnan+0x12a>
 8024400:	2301      	movs	r3, #1
 8024402:	603b      	str	r3, [r7, #0]
 8024404:	2005      	movs	r0, #5
 8024406:	e025      	b.n	8024454 <__hexnan+0x130>
 8024408:	3501      	adds	r5, #1
 802440a:	2d08      	cmp	r5, #8
 802440c:	f10b 0b01 	add.w	fp, fp, #1
 8024410:	dd06      	ble.n	8024420 <__hexnan+0xfc>
 8024412:	4544      	cmp	r4, r8
 8024414:	d9c3      	bls.n	802439e <__hexnan+0x7a>
 8024416:	2300      	movs	r3, #0
 8024418:	f844 3c04 	str.w	r3, [r4, #-4]
 802441c:	2501      	movs	r5, #1
 802441e:	3c04      	subs	r4, #4
 8024420:	6822      	ldr	r2, [r4, #0]
 8024422:	f000 000f 	and.w	r0, r0, #15
 8024426:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802442a:	6020      	str	r0, [r4, #0]
 802442c:	e7b7      	b.n	802439e <__hexnan+0x7a>
 802442e:	2508      	movs	r5, #8
 8024430:	e7b5      	b.n	802439e <__hexnan+0x7a>
 8024432:	9b01      	ldr	r3, [sp, #4]
 8024434:	2b00      	cmp	r3, #0
 8024436:	d0df      	beq.n	80243f8 <__hexnan+0xd4>
 8024438:	f1c3 0320 	rsb	r3, r3, #32
 802443c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024440:	40da      	lsrs	r2, r3
 8024442:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8024446:	4013      	ands	r3, r2
 8024448:	f846 3c04 	str.w	r3, [r6, #-4]
 802444c:	e7d4      	b.n	80243f8 <__hexnan+0xd4>
 802444e:	3f04      	subs	r7, #4
 8024450:	e7d2      	b.n	80243f8 <__hexnan+0xd4>
 8024452:	2004      	movs	r0, #4
 8024454:	b007      	add	sp, #28
 8024456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802445a <__ascii_mbtowc>:
 802445a:	b082      	sub	sp, #8
 802445c:	b901      	cbnz	r1, 8024460 <__ascii_mbtowc+0x6>
 802445e:	a901      	add	r1, sp, #4
 8024460:	b142      	cbz	r2, 8024474 <__ascii_mbtowc+0x1a>
 8024462:	b14b      	cbz	r3, 8024478 <__ascii_mbtowc+0x1e>
 8024464:	7813      	ldrb	r3, [r2, #0]
 8024466:	600b      	str	r3, [r1, #0]
 8024468:	7812      	ldrb	r2, [r2, #0]
 802446a:	1e10      	subs	r0, r2, #0
 802446c:	bf18      	it	ne
 802446e:	2001      	movne	r0, #1
 8024470:	b002      	add	sp, #8
 8024472:	4770      	bx	lr
 8024474:	4610      	mov	r0, r2
 8024476:	e7fb      	b.n	8024470 <__ascii_mbtowc+0x16>
 8024478:	f06f 0001 	mvn.w	r0, #1
 802447c:	e7f8      	b.n	8024470 <__ascii_mbtowc+0x16>

0802447e <__ascii_wctomb>:
 802447e:	b149      	cbz	r1, 8024494 <__ascii_wctomb+0x16>
 8024480:	2aff      	cmp	r2, #255	; 0xff
 8024482:	bf85      	ittet	hi
 8024484:	238a      	movhi	r3, #138	; 0x8a
 8024486:	6003      	strhi	r3, [r0, #0]
 8024488:	700a      	strbls	r2, [r1, #0]
 802448a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802448e:	bf98      	it	ls
 8024490:	2001      	movls	r0, #1
 8024492:	4770      	bx	lr
 8024494:	4608      	mov	r0, r1
 8024496:	4770      	bx	lr

08024498 <_raise_r>:
 8024498:	291f      	cmp	r1, #31
 802449a:	b538      	push	{r3, r4, r5, lr}
 802449c:	4604      	mov	r4, r0
 802449e:	460d      	mov	r5, r1
 80244a0:	d904      	bls.n	80244ac <_raise_r+0x14>
 80244a2:	2316      	movs	r3, #22
 80244a4:	6003      	str	r3, [r0, #0]
 80244a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80244aa:	bd38      	pop	{r3, r4, r5, pc}
 80244ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80244ae:	b112      	cbz	r2, 80244b6 <_raise_r+0x1e>
 80244b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80244b4:	b94b      	cbnz	r3, 80244ca <_raise_r+0x32>
 80244b6:	4620      	mov	r0, r4
 80244b8:	f000 f830 	bl	802451c <_getpid_r>
 80244bc:	462a      	mov	r2, r5
 80244be:	4601      	mov	r1, r0
 80244c0:	4620      	mov	r0, r4
 80244c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80244c6:	f000 b817 	b.w	80244f8 <_kill_r>
 80244ca:	2b01      	cmp	r3, #1
 80244cc:	d00a      	beq.n	80244e4 <_raise_r+0x4c>
 80244ce:	1c59      	adds	r1, r3, #1
 80244d0:	d103      	bne.n	80244da <_raise_r+0x42>
 80244d2:	2316      	movs	r3, #22
 80244d4:	6003      	str	r3, [r0, #0]
 80244d6:	2001      	movs	r0, #1
 80244d8:	e7e7      	b.n	80244aa <_raise_r+0x12>
 80244da:	2400      	movs	r4, #0
 80244dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80244e0:	4628      	mov	r0, r5
 80244e2:	4798      	blx	r3
 80244e4:	2000      	movs	r0, #0
 80244e6:	e7e0      	b.n	80244aa <_raise_r+0x12>

080244e8 <raise>:
 80244e8:	4b02      	ldr	r3, [pc, #8]	; (80244f4 <raise+0xc>)
 80244ea:	4601      	mov	r1, r0
 80244ec:	6818      	ldr	r0, [r3, #0]
 80244ee:	f7ff bfd3 	b.w	8024498 <_raise_r>
 80244f2:	bf00      	nop
 80244f4:	2000099c 	.word	0x2000099c

080244f8 <_kill_r>:
 80244f8:	b538      	push	{r3, r4, r5, lr}
 80244fa:	4d07      	ldr	r5, [pc, #28]	; (8024518 <_kill_r+0x20>)
 80244fc:	2300      	movs	r3, #0
 80244fe:	4604      	mov	r4, r0
 8024500:	4608      	mov	r0, r1
 8024502:	4611      	mov	r1, r2
 8024504:	602b      	str	r3, [r5, #0]
 8024506:	f7df f97f 	bl	8003808 <_kill>
 802450a:	1c43      	adds	r3, r0, #1
 802450c:	d102      	bne.n	8024514 <_kill_r+0x1c>
 802450e:	682b      	ldr	r3, [r5, #0]
 8024510:	b103      	cbz	r3, 8024514 <_kill_r+0x1c>
 8024512:	6023      	str	r3, [r4, #0]
 8024514:	bd38      	pop	{r3, r4, r5, pc}
 8024516:	bf00      	nop
 8024518:	200170c0 	.word	0x200170c0

0802451c <_getpid_r>:
 802451c:	f7df b96c 	b.w	80037f8 <_getpid>

08024520 <_init>:
 8024520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024522:	bf00      	nop
 8024524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024526:	bc08      	pop	{r3}
 8024528:	469e      	mov	lr, r3
 802452a:	4770      	bx	lr

0802452c <_fini>:
 802452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802452e:	bf00      	nop
 8024530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024532:	bc08      	pop	{r3}
 8024534:	469e      	mov	lr, r3
 8024536:	4770      	bx	lr
